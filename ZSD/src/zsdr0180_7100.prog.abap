*&---------------------------------------------------------------------*
*&  Include           ZSDR0060_7100
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  ABAS_SET  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*

TYPES: BEGIN OF TY_SAIDA_7101,
         DT_MOVIMENTO  TYPE ZSDT0001-DT_MOVIMENTO,
         VBELN         TYPE ZSDT0001-VBELN,
         DOC_AVISO     TYPE ZSDT0001-DOC_AVISO,
         NR_FORN       TYPE ZSDT0062-NR_FORN,
         OV_VBELN      TYPE ZSDT0001-VBELN,
         NFENUM        TYPE ZSDT0138-NFENUM,
         PLACA_CAV     TYPE ZSDT0001-PLACA_CAV,
         VVBELN        TYPE ZSDT0082-VBELN,
         MATNR         TYPE ZSDT0001-MATNR,
         MAKTX         TYPE MAKT-MAKTX,
         NAME1         TYPE KNA1-NAME1,
         PESO_FISCAL   TYPE ZSDT0001-PESO_FISCAL,
         UNI_MEDIDA(2) TYPE C,
         MOTORISTA     TYPE ZSDT0001-MOTORISTA,
         NAME2         TYPE LFA1-NAME1,
         SERIES        TYPE ZSDT0138-SERIES,
         NETWR         TYPE ZSDT0138-NETWR,
         DOCNUM_NFE    TYPE J_1BDOCNUM,
         MBLNR         TYPE MBLNR,
         MJAHR         TYPE MJAHR,
         BELNR         TYPE RE_BELNR,
         GJAHR         TYPE GJAHR,
         CH_REFERENCIA TYPE ZSDT0001-CH_REFERENCIA,
         CELLSTYLES    TYPE LVC_T_STYL,
       END OF TY_SAIDA_7101.


TYPES: BEGIN OF TY_ZSDT01,
         DT_MOVIMENTO  TYPE ZSDT0001-DT_MOVIMENTO,
         VBELN         TYPE ZSDT0001-VBELN,
         DOC_AVISO     TYPE ZSDT0001-DOC_AVISO,
         PLACA_CAV     TYPE ZSDT0001-PLACA_CAV,
         MATNR         TYPE ZSDT0001-MATNR,
         PESO_FISCAL   TYPE ZSDT0001-PESO_FISCAL,
         ID_INTERFACE  TYPE ZSDT0001-ID_INTERFACE,
         BRANCH        TYPE ZSDT0001-BRANCH,
         ST_PROC       TYPE ZSDT0001-ST_PROC,
         NRO_NF_FRETE  TYPE ZSDT0001-NRO_NF_FRETE,
         MOTORISTA     TYPE ZSDT0001-MOTORISTA,
         EBELN         TYPE ZSDT0001-EBELN,
         CH_REFERENCIA TYPE ZSDT0001-CH_REFERENCIA,
         CHECK         TYPE C,
       END OF TY_ZSDT01.


DATA: IT_SAIDA_7101 TYPE TABLE OF TY_SAIDA_7101,
      WA_SAIDA_7101 TYPE TY_SAIDA_7101,
      IT_SAIDA_AUX  TYPE TABLE OF TY_SAIDA_7101,
      WA_SAIDA_AUX  TYPE TY_SAIDA_7101,
      IT_ZSDT01     TYPE TABLE OF TY_ZSDT01,
      WA_ZSDT01     TYPE TY_ZSDT01,
      WA_ZSDT0062   TYPE ZSDT0062,
      WA_VBAK       TYPE VBAK,
      IT_EKPO       TYPE TABLE OF EKPO,
      WA_EKPO       TYPE EKPO,
      IT_Z0138      TYPE TABLE OF ZSDT0138,
      WA_Z0138      TYPE ZSDT0138,
      IT_ZSDT0082   TYPE TABLE OF ZSDT0082,
      WA_ZSDT0082   TYPE  ZSDT0082,
      WA_KNA1       TYPE KNA1,
      WA_LFA1       TYPE LFA1,
      WA_MAKT       TYPE MAKT.


DATA: IT_VALUES LIKE RGSB4 OCCURS 0 WITH HEADER LINE.

DATA: IT_WERKS  TYPE RANGE OF EKPO-WERKS,
      WA_WERKS  LIKE LINE OF IT_WERKS,
      V_PLACA_C TYPE  ZSDT0001-PLACA_CAV,
      C_BUSCAR  TYPE  ZSDT0001-PLACA_CAV.


DATA: G_CUSTOM_CONTAINER_7101 TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      DG_SPLITTER_1_7101      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_SPLITTER_2_7101      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_SPLITTER_3_7101      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_PARENT_1_7101        TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_2_7101        TYPE REF TO CL_GUI_CONTAINER,
      CTL_ALV1_7101           TYPE REF TO CL_GUI_ALV_GRID,
      GS_LAYOUT_7101_ALV1     TYPE LVC_S_LAYO,
      IT_FIELDCATALOG_7101    TYPE LVC_T_FCAT,
      WA_FIELDCATALOG_7101    TYPE LVC_S_FCAT,
      TG_SELECTEDROW          TYPE LVC_T_ROW,
      WG_SELECTEDROW          TYPE LVC_S_ROW,
      TL_FUNCTION             TYPE UI_FUNCTIONS,
      WL_FUNCTION             LIKE TL_FUNCTION WITH HEADER LINE.


DATA: LT_CELLTAB TYPE LVC_T_STYL,
      WA_CELLTAB TYPE LVC_S_STYL.

DATA: VEDIT TYPE C.


CLASS LCL_EVENT_HANDLER_7101 DEFINITION.

  PUBLIC SECTION.
    CLASS-METHODS:
      DATA_CHANGED_FINISHED_7101 FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID
        IMPORTING E_MODIFIED ET_GOOD_CELLS,

      TOOLBAR_7101 FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
        IMPORTING E_OBJECT,

      USER_COMMAND_7101 FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING E_UCOMM,

      HANDLE_HOTSPOT_CLICK_7101 FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
        IMPORTING E_COLUMN_ID ES_ROW_NO.

ENDCLASS.


CLASS LCL_EVENT_HANDLER_7101 IMPLEMENTATION.

  METHOD DATA_CHANGED_FINISHED_7101.

    LOOP AT ET_GOOD_CELLS INTO DATA(WA_GOOD_CELLS) .
      IF E_MODIFIED EQ ABAP_TRUE.
        IF WA_GOOD_CELLS-FIELDNAME EQ 'NFENUM'.

          READ TABLE IT_SAIDA_7101 INTO WA_SAIDA_7101 INDEX WA_GOOD_CELLS-ROW_ID.

          WA_SAIDA_7101-NFENUM = WA_GOOD_CELLS-VALUE.
          WA_Z0138-NFENUM = WA_GOOD_CELLS-VALUE.
          CLEAR WA_SAIDA_7101-CELLSTYLES.
          MODIFY IT_SAIDA_7101 FROM WA_SAIDA_7101 INDEX WA_GOOD_CELLS-ROW_ID.

        ELSEIF WA_GOOD_CELLS-FIELDNAME EQ 'SERIES'.

          READ TABLE IT_SAIDA_7101 INTO WA_SAIDA_7101 INDEX WA_GOOD_CELLS-ROW_ID.

          WA_SAIDA_7101-SERIES = WA_GOOD_CELLS-VALUE.
          WA_Z0138-SERIES      = WA_GOOD_CELLS-VALUE.
          MODIFY IT_SAIDA_7101 FROM WA_SAIDA_7101 INDEX WA_GOOD_CELLS-ROW_ID.

        ELSEIF WA_GOOD_CELLS-FIELDNAME EQ 'NETWR'.

          READ TABLE IT_SAIDA_7101 INTO WA_SAIDA_7101 INDEX WA_GOOD_CELLS-ROW_ID.

          WA_Z0138-NETWR      = WA_GOOD_CELLS-VALUE.
          WA_SAIDA_7101-NETWR = WA_GOOD_CELLS-VALUE.
          MODIFY IT_SAIDA_7101 FROM WA_SAIDA_7101 INDEX WA_GOOD_CELLS-ROW_ID.
        ENDIF.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.



  METHOD TOOLBAR_7101.
    DATA  WA_TOOL TYPE STB_BUTTON.

    MOVE 3 TO WA_TOOL-BUTN_TYPE.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    WA_TOOL-FUNCTION  = 'MODF'.
    WA_TOOL-ICON      = ICON_CREATE_TEXT.
    WA_TOOL-QUICKINFO = 'Editar'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.

    WA_TOOL-FUNCTION  = 'SALVAR'.
    WA_TOOL-ICON      = ICON_SYSTEM_SAVE.
    WA_TOOL-QUICKINFO = 'Salvar'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.

    MOVE 3 TO WA_TOOL-BUTN_TYPE.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.


    WA_TOOL-FUNCTION  = 'EF_ENTRADA'.
    WA_TOOL-ICON      = '@BP@'.
    WA_TOOL-QUICKINFO = 'Efetivar Entrada'.
    WA_TOOL-TEXT      = 'Efetivar Entrada'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.

    WA_TOOL-FUNCTION  = 'ES_ENTRADA'.
    WA_TOOL-ICON      = '@B2@'.
    WA_TOOL-QUICKINFO = 'Estornar Entrada'.
    WA_TOOL-TEXT      = 'Estornar Entrada'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.

    WA_TOOL-FUNCTION  = 'GERAR_ROM'.
    WA_TOOL-ICON      = '@39@'.
    WA_TOOL-QUICKINFO = 'Gerar Romaneio'.
    WA_TOOL-TEXT      = 'Gerar Romaneio'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.

    WA_TOOL-FUNCTION  = 'CANCEL_ROM'.
    WA_TOOL-ICON      = '@0W@'.
    WA_TOOL-QUICKINFO = 'Cancelar Romaneio'.
    WA_TOOL-TEXT      = 'Cancelar Romaneio'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.

  ENDMETHOD.

  METHOD HANDLE_HOTSPOT_CLICK_7101.
    PERFORM HANDLE_HOTSPOT_CLICK USING ES_ROW_NO-ROW_ID E_COLUMN_ID-FIELDNAME.
  ENDMETHOD.

  METHOD USER_COMMAND_7101.

    DATA: E_DOCNUM_NFE TYPE  J_1BDOCNUM,
          E_MBLNR      TYPE  MBLNR,
          E_MJAHR      TYPE  MJAHR,
          E_BELNR      TYPE  RE_BELNR,
          E_GJAHR      TYPE  GJAHR.

    CTL_ALV1_7101->GET_SELECTED_ROWS( IMPORTING ET_INDEX_ROWS = DATA(ET_INDEX_ROWS) ).

    CASE E_UCOMM.
      WHEN 'EF_ENTRADA'.

        LOOP AT ET_INDEX_ROWS INTO DATA(WA_INDEX).
          READ TABLE IT_SAIDA_7101 ASSIGNING FIELD-SYMBOL(<FS_SAIDA>) INDEX WA_INDEX-INDEX.

          IF SY-SUBRC IS NOT INITIAL.
            CONTINUE.
          ENDIF.

          IF <FS_SAIDA>-DOC_AVISO IS INITIAL.
            CONTINUE.
          ENDIF.

          CALL FUNCTION 'ZNFE_INBOUND_MIGO_MIRO'
            EXPORTING
              I_AVISO_RECEBIMENTO = WA_SAIDA_7101-DOC_AVISO
            IMPORTING
              E_DOCNUM_NFE        = E_DOCNUM_NFE
              E_MBLNR             = E_MBLNR
              E_MJAHR             = E_MJAHR
              E_BELNR             = E_BELNR
              E_GJAHR             = E_GJAHR
            EXCEPTIONS
              ERRO                = 1
              OTHERS              = 2.

          IF SY-SUBRC IS NOT INITIAL.
            MESSAGE ID SY-MSGID TYPE 'W' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
            CONTINUE.
          ELSE.
            <FS_SAIDA>-DOCNUM_NFE = E_DOCNUM_NFE.
            <FS_SAIDA>-MBLNR      = E_MBLNR.
            <FS_SAIDA>-MJAHR      = E_MJAHR.
            <FS_SAIDA>-BELNR      = E_BELNR.
            <FS_SAIDA>-GJAHR      = E_GJAHR.
          ENDIF.

        ENDLOOP.

      WHEN 'ES_ENTRADA'.

        LOOP AT ET_INDEX_ROWS INTO WA_INDEX.
          READ TABLE IT_SAIDA_7101 ASSIGNING <FS_SAIDA> INDEX WA_INDEX-INDEX.

          IF SY-SUBRC IS NOT INITIAL.
            CONTINUE.
          ENDIF.

          IF <FS_SAIDA>-DOC_AVISO IS INITIAL.
            CONTINUE.
          ENDIF.

          TRY .
              CALL FUNCTION 'ZNFE_INBOUND_MIGO_MIRO_CANC'
                EXPORTING
                  I_AVISO_RECEBIMENTO = WA_SAIDA_7101-DOC_AVISO.

              CLEAR: <FS_SAIDA>-DOCNUM_NFE, <FS_SAIDA>-MBLNR, <FS_SAIDA>-MJAHR, <FS_SAIDA>-BELNR, <FS_SAIDA>-GJAHR.

            CATCH ZCX_PEDIDO_COMPRA_EXCEPTION INTO DATA(EX_PEDIDO).
              EX_PEDIDO->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'W' I_MSGTY_DISPLAY = 'W' ).
            CATCH ZCX_CADASTRO INTO DATA(EX_CADASTRO).
              EX_CADASTRO->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'W' I_MSGTY_DISPLAY = 'W' ).
            CATCH ZCX_NFE_INBOUND_EXCEPTION INTO DATA(EX_NFE).
              EX_NFE->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'W' I_MSGTY_DISPLAY = 'W' ).
            CATCH ZCX_MIRO_EXCEPTION INTO DATA(EX_MIRO).
              EX_MIRO->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'W' I_MSGTY_DISPLAY = 'W' ).
          ENDTRY.
        ENDLOOP.

      WHEN 'GERAR_ROM'.

      WHEN 'CANCEL_ROM'.


      WHEN 'MODF'.

        CALL METHOD CTL_ALV1_7101->GET_SELECTED_ROWS
          IMPORTING
            ET_INDEX_ROWS = TG_SELECTEDROW.

        IF TG_SELECTEDROW[] IS INITIAL.
          MESSAGE 'Favor selecione uma linha.' TYPE 'S'.
          EXIT.
        ENDIF.

        IF LINES( TG_SELECTEDROW ) NE 1.
          MESSAGE 'Favor selecione apenas uma linha.' TYPE 'S'.
          EXIT.
        ENDIF.

        READ TABLE TG_SELECTEDROW INTO WG_SELECTEDROW INDEX 1.

        READ TABLE IT_SAIDA_7101 INTO WA_SAIDA_7101 INDEX WG_SELECTEDROW-INDEX.

        IF SY-SUBRC = 0.

          SELECT   SINGLE *
              FROM ZSDT0138 INTO WA_Z0138
           WHERE CH_REFERENCIA EQ WA_SAIDA_7101-CH_REFERENCIA.

          IF WA_SAIDA_7101-OV_VBELN IS NOT INITIAL.

            WA_CELLTAB-FIELDNAME = 'NFENUM'.
            WA_CELLTAB-STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
            APPEND WA_CELLTAB TO LT_CELLTAB[].
            INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_7101-CELLSTYLES.
            CLEAR: WA_CELLTAB, LT_CELLTAB[].

            WA_CELLTAB-FIELDNAME = 'SERIES'.
            WA_CELLTAB-STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
            APPEND WA_CELLTAB TO LT_CELLTAB[].
            INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_7101-CELLSTYLES.
            CLEAR: WA_CELLTAB, LT_CELLTAB[].

            WA_CELLTAB-FIELDNAME = 'NETWR'.
            WA_CELLTAB-STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
            APPEND WA_CELLTAB TO LT_CELLTAB[].
            INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_7101-CELLSTYLES.
            CLEAR: WA_CELLTAB, LT_CELLTAB[].

            VEDIT  = 'X'.
          ENDIF.
          MODIFY IT_SAIDA_7101 FROM WA_SAIDA_7101 INDEX WG_SELECTEDROW-INDEX.
        ENDIF.

      WHEN 'SALVAR'.

        APPEND WA_Z0138 TO IT_Z0138.
        MODIFY ZSDT0138 FROM TABLE IT_Z0138.
        FREE IT_Z0138.

        WA_CELLTAB-FIELDNAME = 'NFENUM'.
        WA_CELLTAB-STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
        APPEND WA_CELLTAB TO LT_CELLTAB[].
        INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_7101-CELLSTYLES.
        CLEAR: WA_CELLTAB, LT_CELLTAB[].

        WA_CELLTAB-FIELDNAME = 'SERIES'.
        WA_CELLTAB-STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
        APPEND WA_CELLTAB TO LT_CELLTAB[].
        INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_7101-CELLSTYLES.
        CLEAR: WA_CELLTAB, LT_CELLTAB[].

        WA_CELLTAB-FIELDNAME = 'NETWR'.
        WA_CELLTAB-STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
        APPEND WA_CELLTAB TO LT_CELLTAB[].
        INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_7101-CELLSTYLES.
        CLEAR: WA_CELLTAB, LT_CELLTAB[].

        MODIFY IT_SAIDA_7101 FROM WA_SAIDA_7101 INDEX WG_SELECTEDROW-INDEX.
        VEDIT  = ' '.
    ENDCASE.

    CALL METHOD CTL_ALV1_7101->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = _STABLE.

    CTL_ALV1_7101->REFRESH_TABLE_DISPLAY(
      EXPORTING
        I_SOFT_REFRESH = ABAP_TRUE
      EXCEPTIONS
        FINISHED       = 1
        OTHERS         = 2
    ).

  ENDMETHOD.

ENDCLASS.



MODULE ABAS_SET OUTPUT.
  ABAS-ACTIVETAB = G_ABAS-PRESSED_TAB.
  CASE G_ABAS-PRESSED_TAB.
    WHEN C_ABAS-TAB1.
      G_ABAS-SUBSCREEN = '7101'.
      REFRESH IT_SAIDA_7101.
    WHEN C_ABAS-TAB2.
      G_ABAS-SUBSCREEN = '7102'.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  ABAS_GET  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE ABAS_GET INPUT.
  CASE SY-UCOMM.
    WHEN C_ABAS-TAB1.
      G_ABAS-PRESSED_TAB = C_ABAS-TAB1.
    WHEN C_ABAS-TAB2.
      G_ABAS-PRESSED_TAB = C_ABAS-TAB2.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.


FORM BUSCA_F1_ENTRADA.

  FREE IT_WERKS.
  REFRESH IT_VALUES.

  CALL FUNCTION 'G_SET_GET_ALL_VALUES'
    EXPORTING
      SETNR         = 'Z_TROCA_NF'
      CLASS         = '0000'
    TABLES
      SET_VALUES    = IT_VALUES
    EXCEPTIONS
      SET_NOT_FOUND = 1.

  IF SY-SUBRC IS INITIAL.
    LOOP AT IT_VALUES.
      WA_WERKS-SIGN   = 'I'.
      WA_WERKS-OPTION = 'EQ'.
      WA_WERKS-LOW    = IT_VALUES-FROM.
      APPEND WA_WERKS TO IT_WERKS.
    ENDLOOP.
  ENDIF.

  IF V_PLACA_C IS NOT INITIAL.

    SELECT  DT_MOVIMENTO  VBELN  DOC_AVISO   PLACA_CAV   MATNR   PESO_FISCAL
            ID_INTERFACE  BRANCH ST_PROC   NRO_NF_FRETE  MOTORISTA EBELN CH_REFERENCIA
      FROM ZSDT0001 INTO TABLE IT_ZSDT01
      WHERE ID_INTERFACE EQ '49'
      AND   BRANCH       EQ '0120'
      AND   ST_PROC      EQ '99'
      AND   NRO_NF_FRETE NE ' '
      AND   PLACA_CAV    EQ V_PLACA_C.
  ELSE.

    SELECT  DT_MOVIMENTO  VBELN  DOC_AVISO   PLACA_CAV   MATNR   PESO_FISCAL
            ID_INTERFACE  BRANCH ST_PROC   NRO_NF_FRETE  MOTORISTA EBELN CH_REFERENCIA
      FROM ZSDT0001 INTO TABLE IT_ZSDT01
      WHERE ID_INTERFACE EQ '49'
      AND   BRANCH       EQ '0120'
      AND   ST_PROC      EQ '99'
      AND   NRO_NF_FRETE NE ' '.
  ENDIF.


  IF IT_ZSDT01[] IS NOT INITIAL.

    SELECT * FROM ZSDT0138 INTO TABLE IT_ZSDT0138
      FOR ALL ENTRIES IN IT_ZSDT01
      WHERE CH_REFERENCIA EQ IT_ZSDT01-CH_REFERENCIA.

    IF IT_ZSDT0138[] IS NOT INITIAL.

      SELECT * FROM EKPO INTO TABLE IT_EKPO
        FOR ALL ENTRIES IN IT_ZSDT0138
      WHERE EBELN EQ IT_ZSDT0138-EBELN
        AND EBELP EQ IT_ZSDT0138-EBELP.

    ENDIF.

    IF IT_EKPO IS NOT INITIAL.

      LOOP AT IT_EKPO INTO WA_EKPO.

        READ TABLE IT_ZSDT0138 INTO WA_ZSDT0138 WITH KEY EBELN = WA_EKPO-EBELN
                                                         EBELP = WA_EKPO-EBELP.

        IF WA_EKPO-WERKS NOT IN IT_WERKS.
          WA_ZSDT01-CHECK = 'X'.
          MODIFY IT_ZSDT01 FROM WA_ZSDT01 TRANSPORTING CHECK  WHERE CH_REFERENCIA = WA_ZSDT0138-CH_REFERENCIA.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.

  DATA(IT_ZSDT01_AVISO) = IT_ZSDT01[].
  DELETE IT_ZSDT01_AVISO WHERE DOC_AVISO EQ SPACE.

  IF IT_ZSDT01_AVISO[] IS NOT INITIAL.
    SELECT * INTO TABLE @DATA(IT_ZIB_NFE_DIST_TER)
      FROM ZIB_NFE_DIST_TER
       FOR ALL ENTRIES IN @IT_ZSDT01_AVISO
     WHERE VBELN EQ @IT_ZSDT01_AVISO-DOC_AVISO.
    SORT IT_ZIB_NFE_DIST_TER BY VBELN.
  ENDIF.

  DELETE IT_ZSDT01 WHERE CHECK = 'X'.


  "tratar dados.



  LOOP AT IT_ZSDT01 INTO WA_ZSDT01.

    WA_SAIDA_7101-DT_MOVIMENTO = WA_ZSDT01-DT_MOVIMENTO.
    WA_SAIDA_7101-DOC_AVISO    = WA_ZSDT01-DOC_AVISO.
    WA_SAIDA_7101-PLACA_CAV    = WA_ZSDT01-PLACA_CAV.
    WA_SAIDA_7101-MATNR        = |{ WA_ZSDT01-MATNR  ALPHA = OUT  }|.
    WA_SAIDA_7101-PESO_FISCAL  = WA_ZSDT01-PESO_FISCAL.
    WA_SAIDA_7101-MOTORISTA    = WA_ZSDT01-MOTORISTA.
    WA_SAIDA_7101-CH_REFERENCIA = WA_ZSDT01-CH_REFERENCIA.

    READ TABLE IT_ZIB_NFE_DIST_TER INTO DATA(WA_ZIB_NFE_DIST_TER) WITH KEY VBELN = WA_ZSDT01-DOC_AVISO BINARY SEARCH.
    IF SY-SUBRC IS INITIAL.
      WA_SAIDA_7101-DOCNUM_NFE = WA_ZIB_NFE_DIST_TER-DOCNUM_NFE.
      WA_SAIDA_7101-MBLNR      = WA_ZIB_NFE_DIST_TER-MBLNR.
      WA_SAIDA_7101-MJAHR      = WA_ZIB_NFE_DIST_TER-MJAHR.
      WA_SAIDA_7101-BELNR      = WA_ZIB_NFE_DIST_TER-BELNR.
      WA_SAIDA_7101-GJAHR      = WA_ZIB_NFE_DIST_TER-GJAHR.
    ENDIF.

    SELECT SINGLE * FROM VBAK INTO WA_VBAK
      WHERE VBELN EQ WA_ZSDT01-VBELN.

    IF SY-SUBRC = 0.
      WA_SAIDA_7101-OV_VBELN =  WA_ZSDT01-VBELN.
    ELSE.
      WA_SAIDA_7101-VBELN    =  WA_ZSDT01-VBELN.
    ENDIF.

    READ TABLE IT_ZSDT0138 INTO WA_ZSDT0138 WITH KEY CH_REFERENCIA = WA_ZSDT01-CH_REFERENCIA.
    IF SY-SUBRC = 0.
      WA_SAIDA_7101-NFENUM     = WA_ZSDT0138-NFENUM.
      WA_SAIDA_7101-SERIES     = WA_ZSDT0138-SERIES.
      WA_SAIDA_7101-NETWR      = WA_ZSDT0138-NETWR.

      IF WA_SAIDA_7101-OV_VBELN IS NOT INITIAL.
        WA_SAIDA_7101-VBELN  = WA_ZSDT0138-EBELN.
      ENDIF.

      SELECT SINGLE * FROM ZSDT0062 INTO WA_ZSDT0062
        WHERE NRO_SOL EQ WA_ZSDT0138-NRO_SOL
        AND   SEQ     EQ WA_ZSDT0138-SEQ.

      WA_SAIDA_7101-NR_FORN =  |{ WA_ZSDT0062-NR_FORN ALPHA = OUT  }|.


      SELECT SINGLE * FROM ZSDT0082 INTO WA_ZSDT0082
        WHERE NRO_SOL EQ WA_ZSDT0138-NRO_SOL
        AND   SEQ     EQ WA_ZSDT0138-SEQ.

      WA_SAIDA_7101-VVBELN =   WA_ZSDT0082-VBELN.


      SELECT SINGLE * FROM VBPA INTO @DATA(WA_VBPA)
        WHERE VBELN EQ @WA_ZSDT0082-VBELN
        AND   PARVW EQ 'AG'.

      SELECT SINGLE * FROM KNA1 INTO WA_KNA1
        WHERE KUNNR EQ WA_VBPA-KUNNR.

      WA_SAIDA_7101-NAME1 = WA_KNA1-NAME1.
    ENDIF.


    SELECT SINGLE * FROM MAKT INTO WA_MAKT
      WHERE MATNR EQ WA_ZSDT01-MATNR
      AND   SPRAS EQ SY-LANGU.

    IF SY-SUBRC = 0.
      WA_SAIDA_7101-MAKTX =  WA_MAKT-MAKTX.
    ENDIF.

    SELECT SINGLE * FROM LFA1 INTO WA_LFA1
      WHERE LIFNR EQ WA_ZSDT01-MOTORISTA.

    IF SY-SUBRC = 0 .
      WA_SAIDA_7101-NAME2 = WA_LFA1-NAME1.
    ENDIF.

    WA_SAIDA_7101-UNI_MEDIDA = 'KG'.

    APPEND WA_SAIDA_7101 TO IT_SAIDA_7101.

    CLEAR: WA_ZSDT01, WA_SAIDA_7101, WA_VBAK,  WA_ZSDT0062,  WA_MAKT, WA_LFA1, WA_ZSDT0138, WA_ZSDT0082, WA_VBPA.
    CLEAR: WA_CELLTAB, LT_CELLTAB[].

  ENDLOOP.
ENDFORM.


FORM ALV_F1_ENTRADA.

  IF G_CUSTOM_CONTAINER_7101 IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER_7101
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER01'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    CREATE OBJECT CTL_ALV1_7101
      EXPORTING
        I_PARENT = G_CUSTOM_CONTAINER_7101.


    GS_LAYOUT_7101_ALV1-STYLEFNAME = 'CELLSTYLES'.


    PERFORM FILL_IT_FIELDCATALOG_7101 USING:

       01  'DT_MOVIMENTO'     '10'   ''       ''  ' '  ''   ''  ''  'Data'  ,
       02  'VBELN'            '10'   ''       ''  'X'  ''   ''  ''  'Pedido Compra',
       03  'DOC_AVISO'        '12'   ''       ''  'X'  ''   ''  ''  'Aviso Receb.',
       04  'NR_FORN'          '14'   ''       ''  ''   ''   ''  ''  'Pedido Interno',
       05  'OV_VBELN'         '10'   ''       ''  'X'  ''   ''  ''  'OV Serviço',
       06  'PLACA_CAV'        '12'   ''       ''  ''   ''   ''  ''  'Placa Cavalo',
       07  'VVBELN'           '10'   ''       ''  'X'  ''   ''  ''  'Ov de Venda',
       08  'MATNR'            '07'   ''       ''  ''   ''   ''  ''  'Produto',
       09  'MAKTX'            '25'   ''       ''  ''   ''   ''  ''  'Desc Produto',
       10  'NAME1'            '25'   ''       ''  ''   ''   ''  ''  'Nome Produtor',
       11  'PESO_FISCAL'      '10'   ''       ''  ''   ''   ''  ''  'Qtd.',
       12  'UNI_MEDIDA'       '03'   ''       ''  ''   ''   ''  ''  'U.M.',
       13  'MOTORISTA'        '10'   ''       ''  ''   ''   ''  ''  'Cod.Motorista',
       14  'NAME2'            '25'   ''       ''  ''   ''   ''  ''  'Nome Motorista',
       15  'NFENUM'           '12'   VEDIT    ''  ''   ''   ''  ''  'Nfe Fornecedor',
       16  'SERIES'           '04'   VEDIT    ''  ''   ''   ''  ''  'Série',
       17  'NETWR'            '10'   VEDIT    ''  ''   ''   ''  ''  'Valor NF',
       18  'MBLNR'            '10'   ''       ''  'X'  ''   ''  ''  'Doc.Material',
       19  'BELNR'            '10'   ''       ''  'X'  ''   ''  ''  'MIRO',
       20  'DOCNUM_NFE'       '10'   ''       ''  'X'  ''   ''  ''  'NF-e'.


    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_CHECK.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_REFRESH.
    APPEND WL_FUNCTION TO TL_FUNCTION.

    SET HANDLER: LCL_EVENT_HANDLER_7101=>DATA_CHANGED_FINISHED_7101 FOR CTL_ALV1_7101,
                 LCL_EVENT_HANDLER_7101=>TOOLBAR_7101 FOR CTL_ALV1_7101,
                 LCL_EVENT_HANDLER_7101=>USER_COMMAND_7101 FOR CTL_ALV1_7101,
                 LCL_EVENT_HANDLER_7101=>HANDLE_HOTSPOT_CLICK_7101 FOR CTL_ALV1_7101.

    CALL METHOD CTL_ALV1_7101->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IT_TOOLBAR_EXCLUDING = TL_FUNCTION
        IS_LAYOUT            = GS_LAYOUT_7101_ALV1
        I_SAVE               = 'A'
      CHANGING
        IT_FIELDCATALOG      = IT_FIELDCATALOG_7101
        IT_OUTTAB            = IT_SAIDA_7101.


    CALL METHOD CTL_ALV1_7101->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED
      EXCEPTIONS
        ERROR      = 1
        OTHERS     = 2.

    CALL METHOD CTL_ALV1_7101->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

    CALL METHOD CTL_ALV1_7101->SET_READY_FOR_INPUT
      EXPORTING
        I_READY_FOR_INPUT = 1.

  ELSE.

    CALL METHOD CTL_ALV1_7101->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = _STABLE.

  ENDIF.

ENDFORM.



FORM FILL_IT_FIELDCATALOG_7101 USING  VALUE(P_COLNUM)
                                      VALUE(P_FIELDNAME)
                                      VALUE(P_TAM)
                                      VALUE(P_EDIT)
                                      VALUE(P_ICON)
                                      VALUE(P_HOTSPOT)
                                      VALUE(P_OPT)
                                      VALUE(P_CHECKBOX)
                                      VALUE(P_DOSUM)
                                      VALUE(P_HEADER).


  WA_FIELDCATALOG_7101-COL_POS    = P_COLNUM.
  WA_FIELDCATALOG_7101-FIELDNAME  = P_FIELDNAME.
  WA_FIELDCATALOG_7101-OUTPUTLEN  = P_TAM.
  WA_FIELDCATALOG_7101-EDIT       = P_EDIT.
  WA_FIELDCATALOG_7101-ICON       = P_ICON.
  WA_FIELDCATALOG_7101-HOTSPOT    = P_HOTSPOT.
  WA_FIELDCATALOG_7101-COL_OPT    = P_OPT.
  WA_FIELDCATALOG_7101-CHECKBOX   = P_CHECKBOX.
  WA_FIELDCATALOG_7101-DO_SUM     = P_DOSUM.
  WA_FIELDCATALOG_7101-COLTEXT    = P_HEADER.
  WA_FIELDCATALOG_7101-SCRTEXT_L  = P_HEADER.
  WA_FIELDCATALOG_7101-SCRTEXT_M  = P_HEADER.
  WA_FIELDCATALOG_7101-SCRTEXT_S  = P_HEADER.

  APPEND WA_FIELDCATALOG_7101 TO IT_FIELDCATALOG_7101.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  STATUS_7101  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_7101 OUTPUT.

  "BREAK-POINT .
  IF  G_ABAS-PRESSED_TAB = 'ABAS_F1'.
    IF IT_SAIDA_7101[] IS INITIAL.
      PERFORM BUSCA_F1_ENTRADA.
    ENDIF.
    PERFORM ALV_F1_ENTRADA.
  ELSE.
    "PERFORM BUSCA_F2_SAIDA.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_7000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_7000 OUTPUT.
  SET PF-STATUS 'PF7100'.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_7000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_7000 INPUT.
  CASE  SY-UCOMM.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
    WHEN 'BTN_BS'.
      REFRESH IT_SAIDA_7101[].
      PERFORM BUSCA_F1_ENTRADA.

  ENDCASE.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  BUSCA_PLACA  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE BUSCA_PLACA INPUT.

  V_PLACA_C = C_BUSCAR.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  HANDLE_HOTSPOT_CLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ES_ROW_NO_ROW_ID  text
*      -->P_E_COLUMN_ID_FIELDNAME  text
*----------------------------------------------------------------------*
FORM HANDLE_HOTSPOT_CLICK
         USING VALUE(ROW_ID)    LIKE LVC_S_ROID-ROW_ID
               VALUE(FIELDNAME) LIKE LVC_S_COL-FIELDNAME.

  READ TABLE IT_SAIDA_7101 INTO DATA(WA_SAIDA_7101) INDEX ROW_ID.

  CASE FIELDNAME.
    WHEN 'DOCNUM_NFE'.
      PERFORM MOSTRAR_DOC_FISCAL USING WA_SAIDA_7101-DOCNUM_NFE.
    WHEN 'VBELN'.
      PERFORM MOSTRAR_PEDIDO USING WA_SAIDA_7101-VBELN.
    WHEN 'MBLNR' OR 'MJAHR'.
      PERFORM MOSTRAR_DOC_MATERIAL USING WA_SAIDA_7101-MBLNR WA_SAIDA_7101-MJAHR.
    WHEN 'DOC_AVISO'.
      PERFORM MOSTRAR_REMESSA USING WA_SAIDA_7101-DOC_AVISO.
    WHEN 'OV_VBELN'.
      PERFORM MOSTRAR_ORDEM_VENDA USING WA_SAIDA_7101-OV_VBELN.
    WHEN 'VVBELN'.
      PERFORM MOSTRAR_ORDEM_VENDA USING WA_SAIDA_7101-VVBELN.
  ENDCASE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DOC_FISCAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_CTE_ALV_  text
*----------------------------------------------------------------------*
FORM MOSTRAR_DOC_FISCAL  USING P_FISCAL TYPE J_1BDOCNUM.

  DATA: GF_NFOBJN LIKE J_1BINTERF-NFOBJN.

  CHECK P_FISCAL IS NOT INITIAL.

  CALL FUNCTION 'J_1B_NF_DOC_READ_INTO_OBJECT'
    EXPORTING
      DOC_NUMBER         = P_FISCAL
    IMPORTING
      OBJ_NUMBER         = GF_NFOBJN
    EXCEPTIONS
      DOCUMENT_NOT_FOUND = 1
      DOCUM_LOCK         = 2
      OTHERS             = 3.

  CALL FUNCTION 'J_1B_NF_OBJECT_DISPLAY'
    EXPORTING
      OBJ_NUMBER         = GF_NFOBJN
    EXCEPTIONS
      OBJECT_NOT_FOUND   = 1
      SCR_CTRL_NOT_FOUND = 2
      OTHERS             = 3.

ENDFORM.                    " MOSTRAR_DOC_FISCAL

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_PEDIDO
*&---------------------------------------------------------------------*
FORM MOSTRAR_PEDIDO  USING  P_EBELN TYPE EBELN.

  IF P_EBELN IS NOT INITIAL.
    SET PARAMETER ID 'BES' FIELD P_EBELN.
    CALL TRANSACTION  'ME23N' AND SKIP FIRST SCREEN.
  ENDIF.

ENDFORM.                    " MOSTRAR_PEDIDO

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DOC_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM MOSTRAR_DOC_MATERIAL  USING P_MBLNR TYPE MBLNR
                                 P_MJAHR TYPE MJAHR.

  IF P_MBLNR IS NOT INITIAL.
    SET PARAMETER ID 'MBN' FIELD P_MBLNR.
    SET PARAMETER ID 'MJA' FIELD P_MJAHR.
    "CALL TRANSACTION 'MB03' AND SKIP FIRST SCREEN.
    CALL TRANSACTION 'MIGO_GO' AND SKIP FIRST SCREEN.
  ENDIF.

ENDFORM.                    " MOSTRAR_DOC_MATERIAL

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_REMESSA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM MOSTRAR_REMESSA  USING P_VBELN TYPE VBELN_VL.

  IF P_VBELN IS NOT INITIAL.
    SET PARAMETER ID 'VL'  FIELD P_VBELN.
    SET PARAMETER ID 'VLM' FIELD P_VBELN.
    CALL TRANSACTION 'VL33N' AND SKIP FIRST SCREEN.
  ENDIF.

ENDFORM.                    " MOSTRAR_DOC_MATERIAL

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_ORDEM_VENDA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_SAIDA_7101_VVBELN  text
*----------------------------------------------------------------------*
FORM MOSTRAR_ORDEM_VENDA  USING P_VVBELN TYPE VBELN_VA.
  IF P_VVBELN IS NOT INITIAL.
    SET PARAMETER ID 'AUN'  FIELD P_VVBELN.
    CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
  ENDIF.
ENDFORM.
