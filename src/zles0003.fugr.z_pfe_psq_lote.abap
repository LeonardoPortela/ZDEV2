FUNCTION Z_PFE_PSQ_LOTE.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(PNRLOTE) TYPE  LXHME_RANGE_C10_T OPTIONAL
*"     REFERENCE(PDTPOSI) TYPE  LXHME_RANGE_DATE_T OPTIONAL
*"     REFERENCE(PCDADMI) TYPE  LXHME_RANGE_C10_T OPTIONAL
*"     REFERENCE(PEMPRES) TYPE  LXHME_RANGE_C4_T OPTIONAL
*"     REFERENCE(PFILIAL) TYPE  LXHME_RANGE_C4_T OPTIONAL
*"     REFERENCE(PDTAVEN) TYPE  LXHME_RANGE_DATE_T OPTIONAL
*"     REFERENCE(PTIPO) TYPE  LXHME_RANGE_C1_T OPTIONAL
*"     REFERENCE(PSTATUS) TYPE  LXHME_RANGE_C1_T OPTIONAL
*"     REFERENCE(PCONTRA) TYPE  LXHME_RANGE_C12_T OPTIONAL
*"     REFERENCE(PTRANS) TYPE  LXHME_RANGE_C10_T OPTIONAL
*"     REFERENCE(PDACTE) TYPE  ZRANGE_C9_TT OPTIONAL
*"     REFERENCE(PBAIXA) TYPE  LXHME_RANGE_DATE_T OPTIONAL
*"     REFERENCE(PDTPOS) TYPE  LXHME_RANGE_DATE_T OPTIONAL
*"  TABLES
*"      IT_LOTES STRUCTURE  ZPFE_LOTE OPTIONAL
*"      IT_LOTES_ALV STRUCTURE  ZPFE_LOTE_ALV OPTIONAL
*"----------------------------------------------------------------------

  TYPES BEGIN OF WA_DIF.
  TYPES: VL_DIFERENCA TYPE ZPFE_LOTE_ITEM-VL_DIFERENCA,
         TKNUM        TYPE ZPFE_LOTE_ITEM-TKNUM,
         CTENUM       TYPE ZPFE_LOTE_ITEM-CTENUM,
         NUCONTRATO   TYPE ZPFE_LOTE_ITEM-NUCONTRATO,
         DT_BAIXA     TYPE ZPFE_LOTE_ITEM-DT_BAIXA.
*         status       TYPE zpfe_lote_item-status,
*         vl_conferido  TYPE zpfe_lote_item-vl_conferido.
  TYPES END OF WA_DIF.

  DATA: IT_ADMINISTRA TYPE TABLE OF LFA1,
        IT_BUKRS      TYPE TABLE OF T001,
        IT_BRANCH     TYPE TABLE OF J_1BBRANCH,
        IT_LOTESC     TYPE TABLE OF ZPFE_LOTE,
        IT_VTPA       TYPE TABLE OF VTPA,
        WA_ADMINISTRA TYPE LFA1,
        WA_BUKRS      TYPE T001,
        WA_BRANCH     TYPE J_1BBRANCH,
        WA_LOTES      TYPE ZPFE_LOTE,
        IT_LOTES_ITEM TYPE TABLE OF WA_DIF WITH HEADER LINE,
        WA_LOTES_ALV  TYPE ZPFE_LOTE_ALV,
        P_TIPCONTABIL TYPE ZTIPCONTABIL,
        WA_VTPA       TYPE VTPA,
        TL_LOTE_ITEM  TYPE TABLE OF ZPFE_LOTE_ITEM WITH HEADER LINE,
        WL_TABIX      TYPE SY-TABIX.

  DATA: IT_ITENS     TYPE TABLE OF ZPFE_LOTE_ITEM WITH HEADER LINE.

  CLEAR: IT_LOTES[],
         IT_LOTES_ALV[],
         IT_ITENS[],
         TL_LOTE_ITEM[].

  REFRESH: IT_VTPA[].

  IF NOT ( PCONTRA[] IS INITIAL )
      OR ( NOT PTRANS[] IS INITIAL )
      OR ( NOT PDACTE IS INITIAL )
      OR ( NOT PBAIXA IS INITIAL ).

    CALL FUNCTION 'Z_PFE_PSQ_ITENS'
      EXPORTING
        P_PESQUISAR = 'X'
        PCONTRA     = PCONTRA[]
        PLOTE       = PNRLOTE[]
        PTRANS      = PTRANS[]
        PDACTE      = PDACTE[]
        PBAIXA      = PBAIXA[]
      TABLES
        P_ITENS     = IT_ITENS.

    IF SY-SUBRC IS NOT INITIAL.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    SELECT *
    INTO TABLE IT_LOTES
    FROM ZPFE_LOTE
    FOR ALL ENTRIES IN IT_ITENS
   WHERE NM_LOTE        EQ IT_ITENS-NM_LOTE
     AND DT_POSICAO     IN PDTPOSI
     AND CD_ADIMINISTRA IN PCDADMI
     AND BUKRS          IN PEMPRES
     AND BRANCH         IN PFILIAL
     AND DT_VENCIMENTO  IN PDTAVEN
     AND TPLOTE         IN PTIPO
     AND STATUS         IN PSTATUS
     AND AUGBL          IN PDTPOS.

    CHECK SY-SUBRC IS INITIAL.

  ELSE.

    SELECT *
    INTO TABLE IT_LOTES
    FROM ZPFE_LOTE
   WHERE NM_LOTE        IN PNRLOTE
     AND DT_POSICAO     IN PDTPOSI
     AND CD_ADIMINISTRA IN PCDADMI
     AND BUKRS          IN PEMPRES
     AND BRANCH         IN PFILIAL
     AND DT_VENCIMENTO  IN PDTAVEN
     AND TPLOTE         IN PTIPO
     AND STATUS         IN PSTATUS.

    CHECK SY-SUBRC IS INITIAL.

  ENDIF.

  CLEAR: IT_LOTESC[].
  MOVE IT_LOTES[] TO IT_LOTESC[].
  SORT IT_LOTESC BY CD_ADIMINISTRA.
  DELETE ADJACENT DUPLICATES FROM IT_LOTESC COMPARING CD_ADIMINISTRA.

  SELECT * INTO TABLE IT_ADMINISTRA
    FROM LFA1
     FOR ALL ENTRIES IN IT_LOTESC
   WHERE LIFNR EQ IT_LOTESC-CD_ADIMINISTRA.

  CLEAR: IT_LOTESC[].
  MOVE IT_LOTES[] TO IT_LOTESC[].
  SORT IT_LOTESC BY BUKRS.
  DELETE ADJACENT DUPLICATES FROM IT_LOTESC COMPARING BUKRS.

  SELECT * INTO TABLE IT_BUKRS
    FROM T001
     FOR ALL ENTRIES IN IT_LOTESC
   WHERE BUKRS EQ IT_LOTESC-BUKRS.

  CLEAR: IT_LOTESC[].
  MOVE IT_LOTES[] TO IT_LOTESC[].
  SORT IT_LOTESC BY BUKRS BRANCH.
  DELETE ADJACENT DUPLICATES FROM IT_LOTESC COMPARING BUKRS BRANCH.

  SELECT * INTO TABLE IT_BRANCH
    FROM J_1BBRANCH
     FOR ALL ENTRIES IN IT_LOTESC
   WHERE BUKRS  EQ IT_LOTESC-BUKRS
     AND BRANCH EQ IT_LOTESC-BRANCH.

  LOOP AT IT_LOTES INTO WA_LOTES.

    CLEAR: WA_LOTES_ALV.

    MOVE-CORRESPONDING WA_LOTES TO WA_LOTES_ALV.

    READ TABLE IT_ADMINISTRA INTO WA_ADMINISTRA WITH KEY LIFNR = WA_LOTES-CD_ADIMINISTRA.
    IF SY-SUBRC IS INITIAL.
      WA_LOTES_ALV-NM_ADIMINISTRA = WA_ADMINISTRA-NAME1.
    ENDIF.

    READ TABLE IT_BUKRS INTO WA_BUKRS WITH KEY BUKRS = WA_LOTES-BUKRS.
    IF SY-SUBRC IS INITIAL.
      WA_LOTES_ALV-BUTXT = WA_BUKRS-BUTXT.
    ENDIF.

    READ TABLE IT_BRANCH INTO WA_BRANCH WITH KEY BUKRS  = WA_LOTES-BUKRS
                                                 BRANCH = WA_LOTES-BRANCH.
    IF SY-SUBRC IS INITIAL.
      WA_LOTES_ALV-BRATXT = WA_BRANCH-NAME.
    ENDIF.

    CASE WA_LOTES_ALV-STATUS.
      WHEN 'I'.
        WA_LOTES_ALV-ICOSTATUS = ICON_WARNING.
      WHEN 'G'.
        WA_LOTES_ALV-ICOSTATUS = ICON_ACTIVITY.
      WHEN 'E'.
        WA_LOTES_ALV-ICOSTATUS = ICON_DEFECT.
      WHEN 'F'.
        WA_LOTES_ALV-ICOSTATUS = ICON_RELEASE.
      WHEN 'C'.
        WA_LOTES_ALV-ICOSTATUS = ICON_COMPLETE.
    ENDCASE.

    CASE WA_LOTES-TP_PLANO_ADMINISTRADORA.
      WHEN ZCL_CIOT=>ST_TP_PLANO_POS_PAGO.
        WA_LOTES_ALV-ICOSTATUS_PLANO = ICON_PDIR_FOREWARD.
      WHEN ZCL_CIOT=>ST_TP_PLANO_PRE_PAGO.
        WA_LOTES_ALV-ICOSTATUS_PLANO = ICON_PDIR_BACK.
      WHEN OTHERS.
        WA_LOTES_ALV-ICOSTATUS_PLANO = ICON_PDIR_FOREWARD.
    ENDCASE.

    CALL FUNCTION 'Z_PFE_LOTE_FINAN_PAGO'
      EXPORTING
        P_NM_LOTE           = WA_LOTES_ALV-NM_LOTE
      CHANGING
        NR_DOC_COMPENSACAO  = WA_LOTES_ALV-AUGBL
        DT_DOC_COMPENSACAO  = WA_LOTES_ALV-AUGDT
      EXCEPTIONS
        SEM_LOTE            = 1
        SEM_FINANCEIRO      = 2
        SEM_BKPF            = 3
        BKPF_ESTORNADA      = 4
        FINANCEIRO_NAO_PAGO = 5
        OTHERS              = 6.

    WA_LOTES-AUGBL = WA_LOTES_ALV-AUGBL.
    WA_LOTES-AUGDT = WA_LOTES_ALV-AUGDT.
    WA_LOTES_ALV-CK_UTILIZAR = SPACE.
    WA_LOTES_ALV-ICOALERTA   = ICON_SYSTEM_OKAY.
    WA_LOTES_ALV-VL_UTILIZAR = 0.

    CALL FUNCTION 'Z_PFE_TIPO_CONTAB'
      EXPORTING
        P_DT_POSICAO  = WA_LOTES_ALV-DT_POSICAO
      IMPORTING
        P_TIPCONTABIL = P_TIPCONTABIL.

    IF WA_LOTES-VL_AC_DC_LOTE NE 0.
      WA_LOTES_ALV-ROWCOLOR = 'C610'.
    ENDIF.

    IF ( P_TIPCONTABIL EQ 'FC' ) AND ( WA_LOTES-CD_ADIMINISTRA IS NOT INITIAL ) AND ( WA_LOTES-STATUS EQ 'I' ).

      SELECT I~VL_DIFERENCA I~TKNUM I~CTENUM I~NUCONTRATO I~DT_BAIXA
        INTO TABLE IT_LOTES_ITEM
        FROM ZPFE_LOTE_ITEM AS I
       INNER JOIN ZPFE_LOTE AS L ON L~NM_LOTE EQ I~NM_LOTE
       WHERE L~CD_ADIMINISTRA EQ WA_LOTES-CD_ADIMINISTRA
         AND I~VL_DIFERENCA NE 0
         AND I~CK_UTILIZADO EQ SPACE
         AND I~DT_BAIXA     IN PBAIXA.

      IF NOT IT_LOTES_ITEM[] IS INITIAL.
        WA_LOTES_ALV-CK_UTILIZAR = 'X'.
        WA_LOTES_ALV-ICOALERTA   = ICON_MESSAGE_WARNING_SMALL.
        WA_LOTES_ALV-VL_UTILIZAR = 0.
        LOOP AT IT_LOTES_ITEM.
          WA_LOTES_ALV-VL_UTILIZAR = WA_LOTES_ALV-VL_UTILIZAR + IT_LOTES_ITEM-VL_DIFERENCA.
        ENDLOOP.

      ENDIF.
    ENDIF.

    APPEND WA_LOTES_ALV TO IT_LOTES_ALV.

  ENDLOOP.

  IF IT_LOTES[] IS NOT INITIAL.

    IF PDTPOS[] IS NOT INITIAL.
      SELECT *
      FROM ZPFE_LOTE_ITEM
      INTO TABLE TL_LOTE_ITEM
      FOR ALL ENTRIES IN IT_LOTES_ALV
       WHERE NM_LOTE    EQ IT_LOTES_ALV-NM_LOTE
*         AND status     EQ 'C'
         AND TKNUM      IN PTRANS
         AND NUCONTRATO IN PCONTRA
         AND CTENUM     IN PDACTE
         AND DT_BAIXA   IN PDTPOS.
    ELSE.
      SELECT *
        FROM ZPFE_LOTE_ITEM
        INTO TABLE TL_LOTE_ITEM
        FOR ALL ENTRIES IN IT_LOTES_ALV
         WHERE NM_LOTE    EQ IT_LOTES_ALV-NM_LOTE
*           AND status     EQ 'C'
           AND TKNUM      IN PTRANS
           AND NUCONTRATO IN PCONTRA
           AND CTENUM     IN PDACTE
           AND DT_BAIXA   IN PBAIXA.
    ENDIF.

    SORT TL_LOTE_ITEM BY NM_LOTE.
    LOOP AT IT_LOTES_ALV INTO WA_LOTES_ALV.
      WL_TABIX = SY-TABIX.
      CLEAR:  WA_LOTES_ALV-VL_CTRL_SALDO, WA_LOTES_ALV-VL_UTILIZAR.
      LOOP AT TL_LOTE_ITEM WHERE NM_LOTE EQ WA_LOTES_ALV-NM_LOTE.
        IF TL_LOTE_ITEM-STATUS EQ 'C'.
          ADD TL_LOTE_ITEM-VL_CONFERIDO TO WA_LOTES_ALV-VL_CTRL_SALDO.
        ENDIF.
        IF TL_LOTE_ITEM-CK_CONFERIDO IS NOT INITIAL.
          ADD TL_LOTE_ITEM-VL_CONF_ADM TO WA_LOTES_ALV-VL_PG_CONF.
        ENDIF.
        ADD TL_LOTE_ITEM-VL_AJUS_ADM TO WA_LOTES_ALV-VL_UTILIZAR.
      ENDLOOP.
      WA_LOTES_ALV-VL_CTRL_SALDO = WA_LOTES_ALV-VL_CONFI_LOTE - WA_LOTES_ALV-VL_CTRL_SALDO.
      WA_LOTES_ALV-VL_PG_CONF    = WA_LOTES_ALV-VL_CONFI_LOTE - WA_LOTES_ALV-VL_PG_CONF.
      MODIFY IT_LOTES_ALV FROM  WA_LOTES_ALV INDEX WL_TABIX TRANSPORTING VL_CTRL_SALDO VL_PG_CONF VL_UTILIZAR.
    ENDLOOP.

  ENDIF.
  SORT: IT_LOTES_ALV BY NM_LOTE,
        IT_LOTES     BY NM_LOTE.

ENDFUNCTION.
