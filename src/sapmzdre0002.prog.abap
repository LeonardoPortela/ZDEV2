*&---------------------------------------------------------------------*
*& Report  SAPMZDRE0002
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT SAPMZDRE0002 MESSAGE-ID ZDRE.

TYPE-POOLS: ICON.

RANGES: S_BUKRS   FOR ZGL020_DRE_DADOS-BUKRS,
        S_VERSN   FOR ZGL020_DRE_DADOS-VERSN,
        S_VBUND   FOR ZGL029_DRE_DADOS-VBUND.

TYPES:
  BEGIN OF TY_FILE,
    FIELD(1200),
  END OF TY_FILE.

*----------------------------------------------------------------------*
* TABLES
*----------------------------------------------------------------------*
TABLES: ZGL020_DRE_DADOS.

*----------------------------------------------------------------------*
* Objetos TREE
*----------------------------------------------------------------------*
DATA: TREE1               TYPE REF TO CL_GUI_ALV_TREE,
      GT_ZGL030_EST       TYPE TABLE OF ZGL030_EST_D WITH HEADER LINE,
      IT_ZGL029_DRE_DADOS TYPE TABLE OF ZGL029_DRE_DADOS WITH HEADER LINE,
      LT_LIST_COMMENTARY  TYPE SLIS_T_LISTHEADER,
      L_HIERARCHY_HEADER  TYPE TREEV_HHDR,
      GT_FIELDCATALOG     TYPE LVC_T_FCAT,
      VG_REL(1),
      OK-CODE             TYPE SY-UCOMM.

DATA: P_WINDOW_TITLE TYPE C.


DATA:
  "VG_NIVEL_EST  TYPE CHAR02,
  VG_NIVEL_EST(02) TYPE C,
  WG_FILE_LOCAL TYPE RLGRAP-FILENAME,
  IT_EXCEL      TYPE TABLE OF ZGL030_EST_D WITH HEADER LINE,
  IT_FILE       TYPE TABLE OF TY_FILE WITH HEADER LINE.

DATA: IT_ZGL030_EST       TYPE TABLE OF ZGL030_EST_D WITH HEADER LINE,
      IT_ZGL030_EST_AUX   TYPE TABLE OF ZGL030_EST_D WITH HEADER LINE,
      IT_ZGL015_DRE_EST02 TYPE TABLE OF ZGL015_DRE_EST02 WITH HEADER LINE,
      WA_ZGLT057          TYPE ZGLT057.

DATA:    BEGIN OF TG_CONSOL OCCURS 0,
           BUKRS     TYPE ZGL029_DRE_DADOS-BUKRS,
           VERSN     TYPE ZGL029_DRE_DADOS-VERSN,
           MONAT     TYPE ZGL029_DRE_DADOS-MONAT,
           GJAHR     TYPE ZGL029_DRE_DADOS-GJAHR,
           SAKNR     TYPE ZGL029_DRE_DADOS-SAKNR,
           KOSTL     TYPE ZGL029_DRE_DADOS-KOSTL,
           PRCTR     TYPE ZGL029_DRE_DADOS-PRCTR,
           MATKL     TYPE ZGL029_DRE_DADOS-MATKL,
           VBUND     TYPE ZGL029_DRE_DADOS-VBUND,
           QTD_TON   TYPE ZGL029_DRE_DADOS-QTD_TON,
           VLR_REA   TYPE ZGL029_DRE_DADOS-VLR_REA,
           VLR_DOLAR TYPE ZGL029_DRE_DADOS-VLR_DOLAR,
           VLR_GRUPO TYPE ZGL029_DRE_DADOS-VLR_GRUPO,
         END OF TG_CONSOL.
************************************************************************
* Variaveis ALV
************************************************************************
*& Declaração de Objetos/Classes                                      &*
*&--------------------------------------------------------------------&*
************************************************************************

DATA:
  WA_STABLE     TYPE LVC_S_STBL,
  WA_LAYOUT     TYPE LVC_S_LAYO,
  IS_STABLE     TYPE LVC_S_STBL VALUE 'XX',
  WG_X_VARIANT  LIKE DISVARIANT,

  GRID1         TYPE REF TO CL_GUI_ALV_GRID,
  OBG_CONTEINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
  G_CC          TYPE SCRFNAME VALUE 'CC_ELIM'.


* Criação de tabela dinamica
DATA: T_FIELDCATALOG TYPE LVC_T_FCAT,
      W_FIELDCATALOG TYPE LVC_S_FCAT.

CONSTANTS:
         C_X               TYPE C VALUE 'X'.
*
*----------------------------------------------------------------------*
* TELA DE SELEÇÃO
*----------------------------------------------------------------------*
DATA       : BEGIN   OF   T_VERSN OCCURS 0,
               VERSN TYPE ZGL020_DRE_DADOS-VERSN,
             END     OF   T_VERSN.

DATA       : R_VERSN TYPE TABLE OF DDSHRETVAL WITH HEADER LINE,
             IT_DYNP TYPE STANDARD TABLE OF DYNPREAD WITH HEADER LINE,
             V_BUKRS TYPE ZGL020_DRE_DADOS-BUKRS,
             V_GJAHR TYPE ZGL020_DRE_DADOS-GJAHR.

SELECTION-SCREEN: BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
PARAMETERS    : P_BUKRS TYPE ZGL020_DRE_DADOS-BUKRS OBLIGATORY,
                P_GJAHR TYPE ZGL020_DRE_DADOS-GJAHR OBLIGATORY.
SELECT-OPTIONS: P_MONAT  FOR ZGL020_DRE_DADOS-MONAT OBLIGATORY NO-EXTENSION.
PARAMETERS    : P_VERSN TYPE ZGL020_DRE_DADOS-VERSN OBLIGATORY,
                P_WAERS TYPE T005-WAERS OBLIGATORY.

SELECTION-SCREEN: END OF BLOCK B1.


SELECTION-SCREEN: BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-002.

PARAMETERS: C_PESO  AS CHECKBOX,
            C_ANAH  AS CHECKBOX,
            C_ANAV  AS CHECKBOX,
            C_MIL   AS CHECKBOX,
            C_CON   AS CHECKBOX USER-COMMAND ACT DEFAULT ' ',
            P_BUKR2 TYPE ZGL020_DRE_DADOS-BUKRS MODIF ID A,
            P_VERS2 TYPE ZGL020_DRE_DADOS-VERSN MODIF ID A.
SELECTION-SCREEN: END OF BLOCK B2.

*SELECTION-SCREEN: BEGIN OF BLOCK B3 WITH FRAME TITLE TEXT-003.
*PARAMETERS: C_VERIF AS CHECKBOX DEFAULT ' '.
*SELECTION-SCREEN: END OF BLOCK B3.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_VERSN.

  REFRESH IT_DYNP.
  IT_DYNP-FIELDNAME = 'P_BUKRS'.
  APPEND IT_DYNP.
  IT_DYNP-FIELDNAME = 'P_GJAHR'.
  APPEND IT_DYNP.

  CALL FUNCTION 'DYNP_VALUES_READ'
    EXPORTING
      DYNAME               = SY-CPROG
      DYNUMB               = SY-DYNNR
    TABLES
      DYNPFIELDS           = IT_DYNP
    EXCEPTIONS
      INVALID_ABAPWORKAREA = 0
      INVALID_DYNPROFIELD  = 0
      INVALID_DYNPRONAME   = 0
      INVALID_DYNPRONUMMER = 0
      INVALID_REQUEST      = 0
      NO_FIELDDESCRIPTION  = 0
      INVALID_PARAMETER    = 0
      UNDEFIND_ERROR       = 0
      DOUBLE_CONVERSION    = 0
      OTHERS               = 0.
  CLEAR : V_BUKRS, V_GJAHR.
  IF SY-SUBRC = 0.
    READ TABLE IT_DYNP WITH KEY FIELDNAME = 'P_BUKRS'.
    V_BUKRS = IT_DYNP-FIELDVALUE.
    READ TABLE IT_DYNP WITH KEY FIELDNAME = 'P_GJAHR'.
    V_GJAHR = IT_DYNP-FIELDVALUE.
  ENDIF.
  REFRESH: T_VERSN.
  SELECT DISTINCT VERSN
    INTO TABLE T_VERSN
    FROM  ZGL020_DRE_DADOS
    WHERE BUKRS     = V_BUKRS
    AND   GJAHR     = V_GJAHR
    AND   MONAT    IN P_MONAT.

  MESSAGE S027 INTO P_WINDOW_TITLE.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'VERSN'
      DYNPPROG        = SY-REPID
      DYNPNR          = '1000'
      DYNPROFIELD     = 'P_VERSN'
      WINDOW_TITLE    = P_WINDOW_TITLE
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = T_VERSN[]
      RETURN_TAB      = R_VERSN[]
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.
  IF SY-SUBRC <> 0.
  ENDIF.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_VERS2.
  REFRESH IT_DYNP.
  IT_DYNP-FIELDNAME = 'P_BUKR2'.
  APPEND IT_DYNP.
  IT_DYNP-FIELDNAME = 'P_GJAHR'.
  APPEND IT_DYNP.

  CALL FUNCTION 'DYNP_VALUES_READ'
    EXPORTING
      DYNAME               = SY-CPROG
      DYNUMB               = SY-DYNNR
    TABLES
      DYNPFIELDS           = IT_DYNP
    EXCEPTIONS
      INVALID_ABAPWORKAREA = 0
      INVALID_DYNPROFIELD  = 0
      INVALID_DYNPRONAME   = 0
      INVALID_DYNPRONUMMER = 0
      INVALID_REQUEST      = 0
      NO_FIELDDESCRIPTION  = 0
      INVALID_PARAMETER    = 0
      UNDEFIND_ERROR       = 0
      DOUBLE_CONVERSION    = 0
      OTHERS               = 0.
  CLEAR : V_BUKRS, V_GJAHR.
  IF SY-SUBRC = 0.
    READ TABLE IT_DYNP WITH KEY FIELDNAME = 'P_BUKR2'.
    V_BUKRS = IT_DYNP-FIELDVALUE.
    READ TABLE IT_DYNP WITH KEY FIELDNAME = 'P_GJAHR'.
    V_GJAHR = IT_DYNP-FIELDVALUE.
  ENDIF.
  REFRESH: T_VERSN.
  SELECT DISTINCT VERSN
    INTO TABLE T_VERSN
    FROM  ZGL020_DRE_DADOS
    WHERE BUKRS     = V_BUKRS
    AND   GJAHR     = V_GJAHR
    AND   MONAT    IN P_MONAT.

  MESSAGE S027 INTO P_WINDOW_TITLE.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'VERSN'
      DYNPPROG        = SY-REPID
      DYNPNR          = '1000'
      DYNPROFIELD     = 'P_VERS2'
      WINDOW_TITLE    = P_WINDOW_TITLE
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = T_VERSN[]
      RETURN_TAB      = R_VERSN[]
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.
  IF SY-SUBRC <> 0.
  ENDIF.

AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    IF C_CON = 'X'.
      IF SCREEN-GROUP1 = 'A'.
        SCREEN-ACTIVE = 1.
      ENDIF.
    ELSE.
      IF SCREEN-GROUP1 = 'A'.
        SCREEN-ACTIVE = 0.
        CLEAR: P_BUKR2,P_VERS2.
      ENDIF.
    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.

*&---------------------------------------------------------------------*
*& START OF SELECTION
*&---------------------------------------------------------------------*
START-OF-SELECTION.

  CALL SCREEN 0100.

END-OF-SELECTION.


*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.

  DATA: WA_ZGL015_DRE_EST08 TYPE ZGL015_DRE_EST08.

  IF VG_REL = 'X'.
    EXIT.
  ENDIF.

  VG_REL = 'X'.
  DATA: FCODE TYPE TABLE OF SY-UCOMM.
  REFRESH: FCODE.
  IF C_CON  IS INITIAL.
    APPEND 'CONSOL' TO FCODE.
  ENDIF.

  SET PF-STATUS '0100' EXCLUDING FCODE.
  SET TITLEBAR  '0100'.

  DATA: WA_MES LIKE T247,
        IT_MES LIKE STANDARD TABLE OF WA_MES.

  CALL FUNCTION 'MONTH_NAMES_GET'
    EXPORTING
      LANGUAGE    = SY-LANGU
    TABLES
      MONTH_NAMES = IT_MES.


  DATA: L_TREE_CONTAINER_NAME(30) TYPE C,
        L_CUSTOM_CONTAINER        TYPE REF TO CL_GUI_CUSTOM_CONTAINER.


  REFRESH IT_ZGL030_EST.

  SELECT SINGLE * INTO WA_ZGL015_DRE_EST08
    FROM ZGL015_DRE_EST08 "#EC CI_DB_OPERATION_OK[2389136]
   WHERE BUKRS_B EQ P_BUKRS "#EC CI_DB_OPERATION_OK[2431747]
     AND VERSN   EQ P_VERSN.

  IF SY-SUBRC IS NOT INITIAL. "#EC CI_DB_OPERATION_OK[2431747]
    WA_ZGL015_DRE_EST08-BUKRS = P_BUKRS.
    WA_ZGL015_DRE_EST08-VERSN = P_VERSN.
  ENDIF.

  SELECT * INTO TABLE IT_ZGL015_DRE_EST02
    FROM ZGL015_DRE_EST02
   WHERE BUKRS EQ WA_ZGL015_DRE_EST08-BUKRS
     AND VERSN EQ WA_ZGL015_DRE_EST08-VERSN.

  IF P_MONAT-HIGH IS INITIAL.
    P_MONAT-HIGH = P_MONAT-LOW.
  ENDIF.

  CALL FUNCTION 'Z_PESQUISA_DRE'
    EXPORTING
      I_BUKRS      = P_BUKRS
      I_GJAHR      = P_GJAHR
      I_MONATI     = P_MONAT-LOW
      I_MONATF     = P_MONAT-HIGH
      I_VERSN      = P_VERSN
      I_WAERS      = P_WAERS
      I_PESO       = C_PESO
      I_ANAH       = C_ANAH
      I_ANAV       = C_ANAV
      I_MIL        = C_MIL
      I_CON        = C_CON
      I_BUKRS2     = P_BUKR2
      I_VERSN2     = P_VERS2
    TABLES
      T_ZGL030_EST = IT_ZGL030_EST.

  IT_EXCEL[] = IT_ZGL030_EST[].
  IF TREE1 IS NOT INITIAL.
    CALL METHOD TREE1->FREE.
  ENDIF.
  IF L_CUSTOM_CONTAINER IS NOT INITIAL.
    CALL METHOD L_CUSTOM_CONTAINER->FREE.
  ENDIF.
  REFRESH: GT_ZGL030_EST, LT_LIST_COMMENTARY.
  CLEAR: TREE1, L_CUSTOM_CONTAINER.


  IF TREE1 IS INITIAL.
    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        I_STRUCTURE_NAME = 'ZGL030_EST'
      CHANGING
        CT_FIELDCAT      = GT_FIELDCATALOG.

    DATA: LS_FIELDCATALOG TYPE LVC_S_FCAT.
    LOOP AT GT_FIELDCATALOG INTO LS_FIELDCATALOG.
      IF 'VLR_QTD_ANA' CS LS_FIELDCATALOG-FIELDNAME+0(3).
        IF '01_02_03_04_05_06_07_08_09_10_11_12' CS LS_FIELDCATALOG-FIELDNAME+7(2)
           AND LS_FIELDCATALOG-FIELDNAME+7(2) NE ''
           AND LS_FIELDCATALOG-FIELDNAME+0(3) = 'VLR'.
          READ TABLE IT_MES INTO WA_MES WITH KEY MNR = LS_FIELDCATALOG-FIELDNAME+7(2).
          CONCATENATE '' WA_MES-LTX P_WAERS INTO LS_FIELDCATALOG-COLTEXT   SEPARATED BY SPACE.
          CONCATENATE '' WA_MES-LTX P_WAERS INTO LS_FIELDCATALOG-SCRTEXT_L SEPARATED BY SPACE.
          CONCATENATE '' WA_MES-LTX P_WAERS INTO LS_FIELDCATALOG-SCRTEXT_M SEPARATED BY SPACE.
          CONCATENATE '' WA_MES-LTX P_WAERS INTO LS_FIELDCATALOG-SCRTEXT_S SEPARATED BY SPACE.
          IF C_MIL = 'X'.
            LS_FIELDCATALOG-EDIT_MASK = '==DEC0'.
          ENDIF.
        ELSEIF LS_FIELDCATALOG-FIELDNAME+0(3) = 'VLR'.
          CONCATENATE '' 'Acum.' P_WAERS INTO LS_FIELDCATALOG-COLTEXT   SEPARATED BY SPACE.
          CONCATENATE '' 'Acum.' P_WAERS INTO LS_FIELDCATALOG-SCRTEXT_L SEPARATED BY SPACE.
          CONCATENATE '' 'Acum.' P_WAERS INTO LS_FIELDCATALOG-SCRTEXT_M SEPARATED BY SPACE.
          CONCATENATE '' 'Acum.' P_WAERS INTO LS_FIELDCATALOG-SCRTEXT_S SEPARATED BY SPACE.
          IF C_MIL = 'X'.
            LS_FIELDCATALOG-EDIT_MASK = '==DEC0'.
          ENDIF.
        ENDIF.
        IF  LS_FIELDCATALOG-FIELDNAME+0(3) = 'QTD'.
          LS_FIELDCATALOG-COLTEXT    = TEXT-019.
          LS_FIELDCATALOG-COLTEXT    = TEXT-019.
          LS_FIELDCATALOG-SCRTEXT_L  = TEXT-019.
          LS_FIELDCATALOG-SCRTEXT_M  = TEXT-019.
          LS_FIELDCATALOG-SCRTEXT_S  = TEXT-019.
          IF C_MIL = 'X'.
            LS_FIELDCATALOG-EDIT_MASK = '==DEC0'.
          ENDIF.
        ENDIF.
        IF  LS_FIELDCATALOG-FIELDNAME+0(7) = 'ANA_VER'.
          LS_FIELDCATALOG-COLTEXT    = TEXT-019.
          LS_FIELDCATALOG-COLTEXT    = 'An.Vert.%'.
          LS_FIELDCATALOG-SCRTEXT_L  = 'An.Vert.%'.
          LS_FIELDCATALOG-SCRTEXT_M  = 'An.Vert.%'.
          LS_FIELDCATALOG-SCRTEXT_S  = 'An.Vert.%'.
          LS_FIELDCATALOG-EDIT_MASK = '==DEC2'.
        ENDIF.
        IF  LS_FIELDCATALOG-FIELDNAME+0(7) = 'ANA_HOR'.
          LS_FIELDCATALOG-COLTEXT    = 'An.Hor.%'.
          LS_FIELDCATALOG-SCRTEXT_L  = 'An.Hor.%'.
          LS_FIELDCATALOG-SCRTEXT_M  = 'An.Hor.%'.
          LS_FIELDCATALOG-SCRTEXT_S  = 'An.Hor.%'.
          LS_FIELDCATALOG-EDIT_MASK = '==DEC2'.
        ELSE.
          LS_FIELDCATALOG-DO_SUM = 'X'.
        ENDIF.

        LS_FIELDCATALOG-OUTPUTLEN = '20'.
        IF LS_FIELDCATALOG-FIELDNAME+0(7) = 'VLR_ACM' OR
           LS_FIELDCATALOG-FIELDNAME+0(7) = 'QTD_ACM'.
          LS_FIELDCATALOG-OUTPUTLEN = '25'.
        ENDIF.
        IF '01_02_03_04_05_06_07_08_09_10_11_12' CS LS_FIELDCATALOG-FIELDNAME+7(2)
           AND LS_FIELDCATALOG-FIELDNAME+7(2) NE ''.
          IF P_MONAT-HIGH IS NOT   INITIAL.
            IF LS_FIELDCATALOG-FIELDNAME+7(2) NOT BETWEEN P_MONAT-LOW AND P_MONAT-HIGH.
              LS_FIELDCATALOG-NO_OUT = 'X'.
              LS_FIELDCATALOG-KEY    = ''.
            ENDIF.
          ELSEIF LS_FIELDCATALOG-FIELDNAME+7(2) NE P_MONAT-LOW.
            LS_FIELDCATALOG-NO_OUT = 'X'.
            LS_FIELDCATALOG-KEY    = ''.
          ENDIF.
        ENDIF.
        IF LS_FIELDCATALOG-FIELDNAME+0(3) = 'QTD' AND C_PESO NE 'X'.
          LS_FIELDCATALOG-NO_OUT = 'X'.
          LS_FIELDCATALOG-KEY    = ''.
        ENDIF.
        IF LS_FIELDCATALOG-FIELDNAME+0(5) = 'ANA_H' AND C_ANAH NE 'X'.
          LS_FIELDCATALOG-NO_OUT = 'X'.
          LS_FIELDCATALOG-KEY    = ''.
        ENDIF.
        IF LS_FIELDCATALOG-FIELDNAME+0(5) = 'ANA_V' AND C_ANAV NE 'X'.
          LS_FIELDCATALOG-NO_OUT = 'X'.
          LS_FIELDCATALOG-KEY    = ''.
        ENDIF.
      ELSE.
        LS_FIELDCATALOG-NO_OUT = 'X'.
        LS_FIELDCATALOG-KEY    = ''.
      ENDIF.

      MODIFY GT_FIELDCATALOG FROM LS_FIELDCATALOG.
      CLEAR LS_FIELDCATALOG.
    ENDLOOP.


    L_TREE_CONTAINER_NAME = 'TREE1'.

    CREATE OBJECT L_CUSTOM_CONTAINER
      EXPORTING
        CONTAINER_NAME              = L_TREE_CONTAINER_NAME
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    IF SY-SUBRC <> 0.
      MESSAGE X208(00) WITH 'ERROR'.                        "#EC NOTEXT
    ENDIF.

    CREATE OBJECT TREE1
      EXPORTING
        PARENT                      = L_CUSTOM_CONTAINER
        NODE_SELECTION_MODE         = CL_GUI_COLUMN_TREE=>NODE_SEL_MODE_MULTIPLE
        ITEM_SELECTION              = SPACE
        NO_HTML_HEADER              = ''
        NO_TOOLBAR                  = ''
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        ILLEGAL_NODE_SELECTION_MODE = 5
        FAILED                      = 6
        ILLEGAL_COLUMN_NAME         = 7.
    IF SY-SUBRC <> 0.
      MESSAGE X208(00) WITH 'ERROR'.                        "#EC NOTEXT
    ENDIF.

    PERFORM F_HIERARCHY_HEADER_ CHANGING L_HIERARCHY_HEADER.

    PERFORM F_CABECALHO USING LT_LIST_COMMENTARY.

    CALL METHOD TREE1->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_HIERARCHY_HEADER = L_HIERARCHY_HEADER
        IT_LIST_COMMENTARY  = LT_LIST_COMMENTARY
        "i_logo              = l_logo
        "i_background_id     = 'ALV_BACKGROUND'
        "i_save              = 'A'
        "is_variant          = ls_variant
      CHANGING
        IT_OUTTAB           = GT_ZGL030_EST[] "table must be emty !!
        IT_FIELDCATALOG     = GT_FIELDCATALOG.

    DATA: VKEY_NIVEL00 TYPE LVC_NKEY,
          VKEY_NIVEL01 TYPE LVC_NKEY,
          VKEY_NIVEL02 TYPE LVC_NKEY,
          VKEY_NIVEL03 TYPE LVC_NKEY,
          VKEY_NIVEL04 TYPE LVC_NKEY,
          VKEY_NIVEL05 TYPE LVC_NKEY,
          VKEY_SAKNR   TYPE LVC_NKEY,
          VKEY_KOSTL   TYPE LVC_NKEY,
          VKEY_PRCTR   TYPE LVC_NKEY,
          VKEY_MATKL   TYPE LVC_NKEY,
          VKEY_ULTIMO  TYPE LVC_NKEY.

    DATA:  V_LOOPI      TYPE I,
           V_LOOPF      TYPE I,
           V_REAC(10),
           V_HORC(10),
           V_MES(02),
           V_POS        TYPE I,
           W_ZGL030_EST TYPE ZGL030_EST_D.

    FIELD-SYMBOLS: <FS_REA> TYPE ANY,
                   <FS_ANT> TYPE ANY,
                   <FS_RTO> TYPE ANY,
                   <FS_HOR> TYPE ANY.


    IT_ZGL030_EST_AUX[] = IT_ZGL030_EST[].
    DELETE IT_ZGL030_EST_AUX WHERE SAKNR IS NOT INITIAL.

    LOOP AT IT_ZGL030_EST_AUX.
      CLEAR W_ZGL030_EST.
      V_POS = STRLEN( IT_ZGL030_EST_AUX-NIVEL ).
      IF V_POS = 2.
        LOOP AT IT_ZGL030_EST WHERE NIVEL+0(2)  = IT_ZGL030_EST_AUX-NIVEL+0(2).
          PERFORM TOT_NODE_ALV USING IT_ZGL030_EST.
        ENDLOOP.
      ELSEIF V_POS = 5.
        LOOP AT IT_ZGL030_EST WHERE NIVEL+0(5)  = IT_ZGL030_EST_AUX-NIVEL+0(5).
          PERFORM TOT_NODE_ALV USING IT_ZGL030_EST.
        ENDLOOP.
      ELSEIF V_POS = 8.
        LOOP AT IT_ZGL030_EST WHERE NIVEL+0(8)  = IT_ZGL030_EST_AUX-NIVEL+0(8).
          PERFORM TOT_NODE_ALV USING IT_ZGL030_EST.
        ENDLOOP.
      ELSEIF V_POS = 11.
        LOOP AT IT_ZGL030_EST WHERE NIVEL+0(11)  = IT_ZGL030_EST_AUX-NIVEL+0(11).
          PERFORM TOT_NODE_ALV USING IT_ZGL030_EST.
        ENDLOOP.
      ELSEIF V_POS = 14.
        LOOP AT IT_ZGL030_EST WHERE NIVEL+0(14)  = IT_ZGL030_EST_AUX-NIVEL+0(14).
          PERFORM TOT_NODE_ALV USING IT_ZGL030_EST.
        ENDLOOP.
      ENDIF.
      PERFORM HOR_NODE_ALV CHANGING W_ZGL030_EST.
      READ TABLE IT_ZGL030_EST WITH KEY NIVEL = IT_ZGL030_EST_AUX-NIVEL
                                        SAKNR = ''.
      MODIFY IT_ZGL030_EST FROM W_ZGL030_EST INDEX SY-TABIX TRANSPORTING ANA_HOR01
                                                                         ANA_HOR02
                                                                         ANA_HOR03
                                                                         ANA_HOR04
                                                                         ANA_HOR05
                                                                         ANA_HOR06
                                                                         ANA_HOR07
                                                                         ANA_HOR08
                                                                         ANA_HOR09
                                                                         ANA_HOR10
                                                                         ANA_HOR11
                                                                         ANA_HOR12.

    ENDLOOP.


    LOOP AT IT_ZGL030_EST.

      ON CHANGE OF IT_ZGL030_EST-NIVEL(2).
        PERFORM ADD_NODE_ALV USING IT_ZGL030_EST '' CHANGING VKEY_NIVEL01.
        VKEY_NIVEL00 = VKEY_NIVEL01.
      ENDON.

      ON CHANGE OF IT_ZGL030_EST-NIVEL+3(2).
        VG_NIVEL_EST = IT_ZGL030_EST-NIVEL+3(2).
        IF NOT VG_NIVEL_EST IS INITIAL.
          PERFORM ADD_NODE_ALV USING IT_ZGL030_EST VKEY_NIVEL01 CHANGING VKEY_NIVEL02.
          VKEY_NIVEL00 = VKEY_NIVEL02.
        ENDIF.
      ENDON.

      ON CHANGE OF IT_ZGL030_EST-NIVEL+6(2).
        VG_NIVEL_EST = IT_ZGL030_EST-NIVEL+6(2).
        IF NOT VG_NIVEL_EST IS INITIAL.
          PERFORM ADD_NODE_ALV USING IT_ZGL030_EST VKEY_NIVEL02 CHANGING VKEY_NIVEL03.
          VKEY_NIVEL00 = VKEY_NIVEL03.
        ENDIF.
      ENDON.

      ON CHANGE OF IT_ZGL030_EST-NIVEL+9(2).
        VG_NIVEL_EST = IT_ZGL030_EST-NIVEL+9(2).
        IF NOT VG_NIVEL_EST IS INITIAL.
          PERFORM ADD_NODE_ALV USING IT_ZGL030_EST VKEY_NIVEL03 CHANGING VKEY_NIVEL04.
          VKEY_NIVEL00 = VKEY_NIVEL04.
        ENDIF.
      ENDON.

      ON CHANGE OF IT_ZGL030_EST-NIVEL+12(2).
        VG_NIVEL_EST = IT_ZGL030_EST-NIVEL+12(2).
        IF NOT VG_NIVEL_EST IS INITIAL.
          PERFORM ADD_NODE_ALV USING IT_ZGL030_EST VKEY_NIVEL04 CHANGING VKEY_NIVEL05.
          VKEY_NIVEL00 = VKEY_NIVEL05.
        ENDIF.
      ENDON.

      ON CHANGE OF IT_ZGL030_EST-SAKNR.
        IF IT_ZGL030_EST-SAKNR IS NOT INITIAL.
          PERFORM ADD_NODE_SAKNR_ALV USING IT_ZGL030_EST VKEY_NIVEL00 CHANGING VKEY_ULTIMO.
        ENDIF.
      ENDON.

      ON CHANGE OF IT_ZGL030_EST-KOSTL.
        IF IT_ZGL030_EST-KOSTL IS NOT INITIAL.
          PERFORM ADD_NODE_COMPLETE USING IT_ZGL030_EST VKEY_ULTIMO CHANGING VKEY_KOSTL.
        ENDIF.
      ENDON.

      ON CHANGE OF IT_ZGL030_EST-PRCTR.
        IF IT_ZGL030_EST-PRCTR IS NOT INITIAL.
          PERFORM ADD_NODE_COMPLETE USING IT_ZGL030_EST VKEY_ULTIMO CHANGING VKEY_PRCTR.
        ENDIF.
      ENDON.

      ON CHANGE OF IT_ZGL030_EST-MATKL.
        IF IT_ZGL030_EST-MATKL IS NOT INITIAL.
          PERFORM ADD_NODE_COMPLETE USING IT_ZGL030_EST VKEY_ULTIMO CHANGING VKEY_MATKL.
        ENDIF.
      ENDON.
    ENDLOOP.

* calculate totals
    CALL METHOD TREE1->UPDATE_CALCULATIONS.

* this method must be called to send the data to the frontend
    CALL METHOD TREE1->FRONTEND_UPDATE.

*      optimize column-width
    CALL METHOD TREE1->COLUMN_OPTIMIZE
      EXPORTING
        I_START_COLUMN = TREE1->C_HIERARCHY_COLUMN_NAME
        I_END_COLUMN   = TREE1->C_HIERARCHY_COLUMN_NAME.

  ENDIF.

ENDMODULE.                 " STATUS_0100  OUTPUT

*&---------------------------------------------------------------------*
*&      Form  ADD_NODE_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_ZGL030_EST  text
*      -->VKEY_RELAT       text
*      -->P_VKEY_NIVEL     text
*----------------------------------------------------------------------*
FORM ADD_NODE_ALV  USING    P_IT_ZGL030_EST TYPE ZGL030_EST_D
                             VKEY_RELAT      TYPE LVC_NKEY
                    CHANGING P_VKEY_NIVEL    TYPE LVC_NKEY.

  DATA: L_NODE_TEXT    TYPE LVC_VALUE,
        LS_ZGL029_EST  TYPE ZGL029_EST,
        LT_ITEM_LAYOUT TYPE LVC_T_LAYI,
        LS_ITEM_LAYOUT TYPE LVC_S_LAYI,
        VG_ACHOU       TYPE C LENGTH 1.

  DATA: LS_NODE TYPE LVC_S_LAYN.

  CLEAR: IT_ZGL015_DRE_EST02.
  READ TABLE IT_ZGL015_DRE_EST02 WITH KEY NIVEL = P_IT_ZGL030_EST-NIVEL.

  LS_ITEM_LAYOUT-FIELDNAME = TREE1->C_HIERARCHY_COLUMN_NAME.
  APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
  CONCATENATE P_IT_ZGL030_EST-NIVEL '-' P_IT_ZGL030_EST-NITXT INTO L_NODE_TEXT SEPARATED BY SPACE.
  IF NOT SY-SUBRC IS INITIAL.
    LS_NODE-N_IMAGE   = ICON_NEXT_NODE.
    LS_NODE-EXP_IMAGE = ICON_PREVIOUS_NODE.
    LS_NODE-N_IMAGE   = ICON_NEXT_NODE.
    LS_NODE-EXP_IMAGE = ICON_PREVIOUS_NODE.
  ELSEIF ( SY-SUBRC IS INITIAL ) AND ( IT_ZGL015_DRE_EST02-NIVEL_TOTAL IS INITIAL ).
    LS_NODE-N_IMAGE   = ICON_NEXT_NODE.
    LS_NODE-EXP_IMAGE = ICON_PREVIOUS_NODE.
  ELSE.
    LS_NODE-N_IMAGE   = ICON_SUM.
    LS_NODE-EXP_IMAGE = ICON_SUM.
  ENDIF.

  CALL METHOD TREE1->ADD_NODE
    EXPORTING
      I_RELAT_NODE_KEY = VKEY_RELAT
      I_RELATIONSHIP   = CL_GUI_COLUMN_TREE=>RELAT_LAST_CHILD
      I_NODE_TEXT      = L_NODE_TEXT
      IS_OUTTAB_LINE   = P_IT_ZGL030_EST
      IS_NODE_LAYOUT   = LS_NODE
      IT_ITEM_LAYOUT   = LT_ITEM_LAYOUT
    IMPORTING
      E_NEW_NODE_KEY   = P_VKEY_NIVEL.

ENDFORM.                    " ADD_NODE_ALV

*&---------------------------------------------------------------------*
*&      Form  TOT_NODE_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_ZGL030_EST  text
*      -->VKEY_RELAT       text
*      -->P_VKEY_NIVEL     text
*----------------------------------------------------------------------*
FORM TOT_NODE_ALV  USING    P_IT_ZGL030_EST TYPE ZGL030_EST_D.

  V_LOOPI = P_MONAT-LOW.
  V_LOOPF = P_MONAT-HIGH.
  IF V_LOOPF = 0.
    V_LOOPF = V_LOOPI.
  ENDIF.

  WHILE V_LOOPI LE V_LOOPF.
    V_MES = V_LOOPI.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = V_MES
      IMPORTING
        OUTPUT = V_MES.
    CONCATENATE 'VLR_REA' V_MES INTO V_REAC.
    ASSIGN COMPONENT V_REAC OF STRUCTURE P_IT_ZGL030_EST TO <FS_REA>.
    ASSIGN COMPONENT V_REAC OF STRUCTURE W_ZGL030_EST  TO <FS_RTO>.
    ADD <FS_REA> TO <FS_RTO>.

    ADD 1 TO V_LOOPI.
  ENDWHILE.


ENDFORM.                    " ADD_NODE_ALV

*&---------------------------------------------------------------------*
*&      Form  hor_NODE_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_ZGL030_EST  text
*----------------------------------------------------------------------*
FORM HOR_NODE_ALV  CHANGING  P_IT_ZGL030_EST TYPE ZGL030_EST_D.

  V_LOOPI = P_MONAT-LOW.
  V_LOOPF = P_MONAT-HIGH.
  IF V_LOOPF = 0.
    V_LOOPF = V_LOOPI.
  ENDIF.

  WHILE V_LOOPI LE V_LOOPF.
    V_MES = V_LOOPI.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = V_MES
      IMPORTING
        OUTPUT = V_MES.
    CONCATENATE 'VLR_REA' V_MES INTO V_REAC.
    CONCATENATE 'ANA_HOR' V_MES INTO V_HORC.
    ASSIGN COMPONENT V_REAC OF STRUCTURE P_IT_ZGL030_EST TO <FS_REA>.
    "
    ASSIGN COMPONENT V_HORC OF STRUCTURE P_IT_ZGL030_EST    TO <FS_HOR>.
    IF V_MES NE '01'.
      V_MES = V_LOOPI - 1.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = V_MES
        IMPORTING
          OUTPUT = V_MES.
      CONCATENATE 'VLR_REA' V_MES INTO V_REAC.
      ASSIGN COMPONENT V_REAC OF STRUCTURE P_IT_ZGL030_EST TO <FS_ANT>.

      IF <FS_ANT> NE 0.
        "FS_HOR> = ( ( <FS_REA> - <FS_ANT> ) / <FS_REA> ) * 100.
        <FS_HOR> = ( ( <FS_REA> - <FS_ANT> ) / <FS_ANT> ) * 100.
      ENDIF.
    ENDIF.

    ADD 1 TO V_LOOPI.
  ENDWHILE.


ENDFORM.                    " ADD_NODE_ALV
*&---------------------------------------------------------------------*
*&      Form  ADD_NODE_COMPLETE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ADD_NODE_COMPLETE  USING    P_IT_ZGL030_EST TYPE ZGL030_EST_D
                                 P_VKEY_NIVEL00  TYPE LVC_NKEY
                        CHANGING P_VKEY_ULTIMO   TYPE LVC_NKEY.

  DATA: L_NODE_TEXT TYPE LVC_VALUE.

* set item-layout
  DATA: LT_ITEM_LAYOUT TYPE LVC_T_LAYI,
        LS_ITEM_LAYOUT TYPE LVC_S_LAYI,
        LS_NODE        TYPE LVC_S_LAYN,
        V_REAC(10),
        V_QTDC(10),
        V_VERC(10),
        V_HORC(10),
        V_MES(02),
        V_LOOPI        TYPE I,
        V_LOOPF        TYPE I.

  V_LOOPI = P_MONAT-LOW.
  V_LOOPF = P_MONAT-HIGH.
  IF V_LOOPF = 0.
    V_LOOPF = V_LOOPI.
  ENDIF.

  WHILE V_LOOPI LE V_LOOPF.
    V_MES = V_LOOPI.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = V_MES
      IMPORTING
        OUTPUT = V_MES.
    CONCATENATE 'VLR_REA' V_MES INTO V_REAC.
    CONCATENATE 'QTD_TON' V_MES INTO V_QTDC.
    CONCATENATE 'ANA_VER' V_MES INTO V_VERC.
    CONCATENATE 'ANA_HOR' V_MES INTO V_HORC.

    LS_ITEM_LAYOUT-FIELDNAME = TREE1->C_HIERARCHY_COLUMN_NAME.
    APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
    CLEAR LS_ITEM_LAYOUT.
    LS_ITEM_LAYOUT-FIELDNAME = V_REAC.
    LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
    APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
    IF C_PESO = 'X'.
      LS_ITEM_LAYOUT-FIELDNAME = V_QTDC.
      LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
      APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
    ENDIF.
    IF C_ANAV = 'X'.
      LS_ITEM_LAYOUT-FIELDNAME = V_VERC.
      LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
      APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
    ENDIF.
    IF C_ANAH = 'X'.
      LS_ITEM_LAYOUT-FIELDNAME = V_HORC.
      LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
      APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
    ENDIF.
    ADD 1 TO V_LOOPI.
  ENDWHILE.

  LS_ITEM_LAYOUT-FIELDNAME = 'VLR_ACM'.
  LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
  APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.

  LS_ITEM_LAYOUT-FIELDNAME = 'QTD_ACM'.
  LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
  APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.

  IF NOT P_IT_ZGL030_EST-KOSTL IS INITIAL.
    CONCATENATE P_IT_ZGL030_EST-KOSTL '-' P_IT_ZGL030_EST-LTEXT_CC INTO L_NODE_TEXT SEPARATED BY SPACE.
    LS_NODE-N_IMAGE   = ICON_BIW_APPLICATION.
    LS_NODE-EXP_IMAGE = ICON_BIW_APPLICATION.
  ELSEIF NOT P_IT_ZGL030_EST-PRCTR IS INITIAL.
    CONCATENATE P_IT_ZGL030_EST-PRCTR '-' P_IT_ZGL030_EST-LTEXT_CL INTO L_NODE_TEXT SEPARATED BY SPACE.
    LS_NODE-N_IMAGE   = ICON_BIW_INFO_AREA.
    LS_NODE-EXP_IMAGE = ICON_BIW_INFO_AREA.
  ELSEIF NOT P_IT_ZGL030_EST-MATKL IS INITIAL.
    CONCATENATE P_IT_ZGL030_EST-MATKL '-' P_IT_ZGL030_EST-WGBEZ60 INTO L_NODE_TEXT SEPARATED BY SPACE.
    LS_NODE-N_IMAGE   = ICON_BIW_INFO_CUBE.
    LS_NODE-EXP_IMAGE = ICON_BIW_INFO_CUBE.
  ENDIF.
  CALL METHOD TREE1->ADD_NODE
    EXPORTING
      I_RELAT_NODE_KEY = P_VKEY_NIVEL00
      I_RELATIONSHIP   = CL_GUI_COLUMN_TREE=>RELAT_LAST_CHILD
      IS_OUTTAB_LINE   = P_IT_ZGL030_EST
      I_NODE_TEXT      = L_NODE_TEXT
      IS_NODE_LAYOUT   = LS_NODE
      IT_ITEM_LAYOUT   = LT_ITEM_LAYOUT
    IMPORTING
      E_NEW_NODE_KEY   = P_VKEY_ULTIMO.

ENDFORM.                    " ADD_NODE_COMPLETE

*&---------------------------------------------------------------------*
*&      Form  ADD_NODE_SAKNR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ADD_NODE_SAKNR_ALV  USING    P_ZGL030_EST    TYPE ZGL030_EST_D
                                  P_VKEY_NIVEL00  TYPE LVC_NKEY
                         CHANGING P_VKEY_SAKNR    TYPE LVC_NKEY.

  DATA: L_NODE_TEXT    TYPE LVC_VALUE,
        LS_ZGL029_EST  TYPE ZGL029_EST,
        LT_ITEM_LAYOUT TYPE LVC_T_LAYI,
        LS_ITEM_LAYOUT TYPE LVC_S_LAYI,
        LS_NODE        TYPE LVC_S_LAYN,
        V_REAC(10),
        V_QTDC(10),
        V_VERC(10),
        V_HORC(10),
        V_MES(02),
        V_LOOPI        TYPE I,
        V_LOOPF        TYPE I.

  FIELD-SYMBOLS: <FS_REA> TYPE ANY,
                 <FS_QTD> TYPE ANY,
                 <FS_VER> TYPE ANY,
                 <FS_HOR> TYPE ANY.


  V_LOOPI = P_MONAT-LOW.
  V_LOOPF = P_MONAT-HIGH.
  IF V_LOOPF = 0.
    V_LOOPF = V_LOOPI.
  ENDIF.
  WHILE V_LOOPI LE V_LOOPF.
    V_MES = V_LOOPI.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = V_MES
      IMPORTING
        OUTPUT = V_MES.
    CONCATENATE 'VLR_REA' V_MES INTO V_REAC.
    CONCATENATE 'QTD_TON' V_MES INTO V_QTDC.
    CONCATENATE 'ANA_VER' V_MES INTO V_VERC.
    CONCATENATE 'ANA_HOR' V_MES INTO V_HORC.

    ASSIGN COMPONENT V_REAC OF STRUCTURE P_ZGL030_EST TO <FS_REA>.
    ASSIGN COMPONENT V_QTDC OF STRUCTURE P_ZGL030_EST TO <FS_QTD>.
    ASSIGN COMPONENT V_VERC OF STRUCTURE P_ZGL030_EST TO <FS_VER>.
    ASSIGN COMPONENT V_HORC OF STRUCTURE P_ZGL030_EST TO <FS_HOR>.
    IF ( <FS_REA> NE 0 ) OR ( <FS_VER> NE 0 ) OR ( <FS_QTD> NE 0 ) OR ( <FS_HOR> NE 0 ).
      LS_ITEM_LAYOUT-FIELDNAME = TREE1->C_HIERARCHY_COLUMN_NAME.
      APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
      CLEAR LS_ITEM_LAYOUT.
      LS_ITEM_LAYOUT-FIELDNAME =  V_REAC.
      LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
      APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
      "
      IF C_PESO = 'X'.
        LS_ITEM_LAYOUT-FIELDNAME = V_QTDC.
        LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
        APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
      ENDIF.
      "
      IF C_ANAV = 'X'.
        LS_ITEM_LAYOUT-FIELDNAME = V_VERC.
        LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
        APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
      ENDIF.
      "
      IF C_ANAH = 'X'.
        LS_ITEM_LAYOUT-FIELDNAME = V_HORC.
        LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
        APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
      ENDIF.
    ELSE.
      LS_ITEM_LAYOUT-FIELDNAME = TREE1->C_HIERARCHY_COLUMN_NAME.
      APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
    ENDIF.

    LS_NODE-N_IMAGE   = ICON_SUBSCRIPTION.
    LS_NODE-EXP_IMAGE = ICON_OUTBOX.
    CONCATENATE P_ZGL030_EST-SAKNR '-' P_ZGL030_EST-TXT50 INTO L_NODE_TEXT SEPARATED BY SPACE.
    ADD 1 TO V_LOOPI.
  ENDWHILE.
  IF  ( P_ZGL030_EST-VLR_ACM NE 0 )  OR ( P_ZGL030_EST-QTD_ACM NE 0 ).
    LS_ITEM_LAYOUT-FIELDNAME = 'QTD_ACM'.
    LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
    APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
    LS_ITEM_LAYOUT-FIELDNAME = 'VLR_ACM'.
    LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
    APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
  ELSE.
    LS_ITEM_LAYOUT-FIELDNAME = TREE1->C_HIERARCHY_COLUMN_NAME.
    APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
  ENDIF.

  LS_NODE-N_IMAGE   = ICON_SUBSCRIPTION.
  LS_NODE-EXP_IMAGE = ICON_OUTBOX.
  CONCATENATE P_ZGL030_EST-SAKNR '-' P_ZGL030_EST-TXT50 INTO L_NODE_TEXT SEPARATED BY SPACE.

  CALL METHOD TREE1->ADD_NODE
    EXPORTING
      I_RELAT_NODE_KEY = P_VKEY_NIVEL00
      I_RELATIONSHIP   = CL_GUI_COLUMN_TREE=>RELAT_LAST_CHILD
      I_NODE_TEXT      = L_NODE_TEXT
      IS_OUTTAB_LINE   = P_ZGL030_EST
      IS_NODE_LAYOUT   = LS_NODE
      IT_ITEM_LAYOUT   = LT_ITEM_LAYOUT
    IMPORTING
      E_NEW_NODE_KEY   = P_VKEY_SAKNR.


ENDFORM.                    " ADD_NODE_SAKNR_ALV

*&---------------------------------------------------------------------*
*&      Form  F_HIERARCHY_HEADER_
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_L_HIERARCHY_HEADER  text
*----------------------------------------------------------------------*
FORM F_HIERARCHY_HEADER_  CHANGING P_HIERARCHY_HEADER TYPE TREEV_HHDR.

  P_HIERARCHY_HEADER-HEADING = 'Itens'.
  P_HIERARCHY_HEADER-TOOLTIP = 'Itens'.
  P_HIERARCHY_HEADER-WIDTH = 35.
  P_HIERARCHY_HEADER-WIDTH_PIX = ''.

ENDFORM.                    " F_HIERARCHY_HEADER_
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.

  DATA: LC_POPER TYPE POPER.

  CASE SY-UCOMM.
    WHEN 'VERIFICA'.
      PERFORM PESQUISAR_DIFERENCAS.
      CALL SCREEN 0300.
    WHEN 'DADOS'.

      MOVE P_MONAT-LOW TO LC_POPER.

      SUBMIT ZGLT068 WITH P_BUKRS EQ P_BUKRS
                     WITH P_GJAHR EQ P_GJAHR
                     WITH P_POPER EQ LC_POPER
                     WITH VOBJETO EQ ABAP_TRUE
                     AND RETURN.
    WHEN 'BACK' OR 'UP'.
      LEAVE TO SCREEN 0.
    WHEN 'CONSOL'.

      REFRESH: S_BUKRS,S_VERSN,S_VBUND.
      CLEAR:   S_BUKRS,S_VERSN,S_VBUND.

      S_BUKRS-LOW    = P_BUKRS.
      S_BUKRS-SIGN   = 'I'.
      S_BUKRS-OPTION = 'EQ'.
      APPEND S_BUKRS.

      S_BUKRS-LOW    = P_BUKR2.
      S_BUKRS-SIGN   = 'I'.
      S_BUKRS-OPTION = 'EQ'.
      APPEND S_BUKRS.

      SELECT SINGLE *
         FROM ZGLT057
       INTO WA_ZGLT057
       WHERE BUKRS_1  = P_BUKRS
       AND   VERSN_1  = P_VERSN
       AND   BUKRS_2  = P_BUKR2
       AND   STATUS  = ''.

      IF SY-SUBRC NE 0.
        EXIT.
      ENDIF.

      WA_ZGLT057-VERSN_2 = P_VERS2.

      " Dados processados sociedade parceira para DRE - MÊS
      SELECT * INTO TABLE IT_ZGL029_DRE_DADOS
        FROM ZGL029_DRE_DADOS
        WHERE BUKRS EQ P_BUKRS
         AND  VERSN EQ P_VERSN
         AND  MONAT IN P_MONAT
         AND  GJAHR EQ P_GJAHR
         AND  VBUND EQ WA_ZGLT057-VBUND_1
        AND EXISTS ( SELECT * FROM ZGLT060
                      WHERE ZGLT060~BUKRS1  = P_BUKRS
                      AND   ZGLT060~WAERS   = P_WAERS
                      AND   ZGLT060~CTA_LAN = ZGL029_DRE_DADOS~SAKNR ).

      SELECT * APPENDING TABLE IT_ZGL029_DRE_DADOS
        FROM ZGL029_DRE_DADOS
        WHERE BUKRS EQ P_BUKR2
         AND  VERSN EQ WA_ZGLT057-VERSN_2
         AND  MONAT IN P_MONAT
         AND  GJAHR EQ P_GJAHR
         AND  VBUND EQ WA_ZGLT057-VBUND_2
        AND EXISTS ( SELECT * FROM ZGLT060
                      WHERE ZGLT060~BUKRS1  = P_BUKR2
                      AND   ZGLT060~WAERS   = P_WAERS
                      AND   ZGLT060~CTA_LAN = ZGL029_DRE_DADOS~SAKNR ).

***************************************************************************************
      " Inserindo contas virtuais - Empresa 1
      SELECT ZGL029_DRE_DADOS~MANDT
              ZGLT060~BUKRS2
              ZGL029_DRE_DADOS~VERSN   "*******
              ZGL029_DRE_DADOS~MONAT
              ZGL029_DRE_DADOS~GJAHR
              ZGLT060~CTA_VIRTUAL
              ZGLT060~KOSTL2
              ZGLT060~PRCTR2
              ZGLT060~MATKL2
              ZGL029_DRE_DADOS~VBUND     "*******
              ZGL029_DRE_DADOS~QTD_TON
              ZGL029_DRE_DADOS~VLR_REA
              ZGL029_DRE_DADOS~VLR_DOLAR
        ZGL029_DRE_DADOS~VLR_GRUPO
      APPENDING TABLE IT_ZGL029_DRE_DADOS
      FROM ZGL029_DRE_DADOS
      INNER JOIN ZGLT060
        ON  ZGLT060~BUKRS1  = ZGL029_DRE_DADOS~BUKRS
        AND ZGLT060~WAERS   = P_WAERS
        AND ZGLT060~BUKRS2  = P_BUKR2
        AND ZGLT060~CTA_LAN = ZGL029_DRE_DADOS~SAKNR
        AND ZGLT060~CTA_VIRTUAL NE ''
        AND ZGLT060~KOSTL1  = ZGL029_DRE_DADOS~KOSTL
        AND ZGLT060~PRCTR1  = ZGL029_DRE_DADOS~PRCTR
        AND ZGLT060~MATKL1  = ZGL029_DRE_DADOS~MATKL
      WHERE ZGL029_DRE_DADOS~BUKRS EQ P_BUKRS
       AND  ZGL029_DRE_DADOS~VERSN EQ P_VERSN
       AND  ZGL029_DRE_DADOS~MONAT IN P_MONAT
       AND  ZGL029_DRE_DADOS~GJAHR EQ P_GJAHR
       AND  ZGL029_DRE_DADOS~VBUND EQ WA_ZGLT057-VBUND_1.

      " Inserindo contas virtuais - Empresa 2
      SELECT ZGL029_DRE_DADOS~MANDT
          ZGLT060~BUKRS2
          ZGL029_DRE_DADOS~VERSN
          ZGL029_DRE_DADOS~MONAT
          ZGL029_DRE_DADOS~GJAHR
          ZGLT060~CTA_VIRTUAL
          ZGLT060~KOSTL2
          ZGLT060~PRCTR2
          ZGLT060~MATKL2
          ZGL029_DRE_DADOS~VBUND
          ZGL029_DRE_DADOS~QTD_TON
          ZGL029_DRE_DADOS~VLR_REA
          ZGL029_DRE_DADOS~VLR_DOLAR
          ZGL029_DRE_DADOS~VLR_GRUPO
     APPENDING TABLE IT_ZGL029_DRE_DADOS
     FROM ZGL029_DRE_DADOS
     INNER JOIN ZGLT060
       ON  ZGLT060~BUKRS1  = ZGL029_DRE_DADOS~BUKRS
       AND ZGLT060~BUKRS2  = P_BUKRS
       AND ZGLT060~WAERS   = P_WAERS
       AND ZGLT060~CTA_LAN = ZGL029_DRE_DADOS~SAKNR
       AND ZGLT060~CTA_VIRTUAL NE ''
       AND ZGLT060~KOSTL1  = ZGL029_DRE_DADOS~KOSTL
       AND ZGLT060~PRCTR1  = ZGL029_DRE_DADOS~PRCTR
       AND ZGLT060~MATKL1  = ZGL029_DRE_DADOS~MATKL
     WHERE BUKRS EQ P_BUKR2
      AND  VERSN EQ WA_ZGLT057-VERSN_2
      AND  MONAT IN P_MONAT
      AND  GJAHR EQ P_GJAHR
      AND  VBUND EQ WA_ZGLT057-VBUND_2.

      REFRESH TG_CONSOL.
      LOOP AT IT_ZGL029_DRE_DADOS.
        IF IT_ZGL029_DRE_DADOS-BUKRS = P_BUKRS.
          IF IT_ZGL029_DRE_DADOS-VERSN NE P_VERSN.
            IT_ZGL029_DRE_DADOS-VERSN = P_VERSN.
            IT_ZGL029_DRE_DADOS-VBUND = WA_ZGLT057-VBUND_1.
            IT_ZGL029_DRE_DADOS-VLR_REA = IT_ZGL029_DRE_DADOS-VLR_REA * -1.
            IT_ZGL029_DRE_DADOS-VLR_DOLAR = IT_ZGL029_DRE_DADOS-VLR_DOLAR * -1.
            IT_ZGL029_DRE_DADOS-VLR_GRUPO = IT_ZGL029_DRE_DADOS-VLR_GRUPO * -1.
            IT_ZGL029_DRE_DADOS-QTD_TON = IT_ZGL029_DRE_DADOS-QTD_TON * -1.
          ENDIF.
        ELSE.
          IF IT_ZGL029_DRE_DADOS-VERSN NE WA_ZGLT057-VERSN_2.
            IT_ZGL029_DRE_DADOS-VERSN = WA_ZGLT057-VERSN_2.
            IT_ZGL029_DRE_DADOS-VBUND = WA_ZGLT057-VBUND_2.
            IT_ZGL029_DRE_DADOS-VLR_REA = IT_ZGL029_DRE_DADOS-VLR_REA * -1.
            IT_ZGL029_DRE_DADOS-VLR_DOLAR = IT_ZGL029_DRE_DADOS-VLR_DOLAR * -1.
            IT_ZGL029_DRE_DADOS-VLR_GRUPO = IT_ZGL029_DRE_DADOS-VLR_GRUPO * -1.
            IT_ZGL029_DRE_DADOS-QTD_TON = IT_ZGL029_DRE_DADOS-QTD_TON * -1.
          ENDIF.
        ENDIF.
        MOVE-CORRESPONDING IT_ZGL029_DRE_DADOS TO TG_CONSOL.
        APPEND TG_CONSOL.
      ENDLOOP.

      CALL SCREEN 0200 STARTING AT 005 03
                       ENDING   AT 180 20.
    WHEN 'CEXCEL'.
      CLEAR: WG_FILE_LOCAL.
      WG_FILE_LOCAL = 'C:\Temp\'.
      CALL SCREEN 1105 STARTING AT 07 05 ENDING AT 75 10.
      IF SY-UCOMM EQ 'SAVE'.
        SY-UCOMM  = 'CEXCEL'.
        IF IT_EXCEL[] IS NOT INITIAL.
          PERFORM EXPORTA_DADOS.
        ENDIF.
      ENDIF.
    WHEN 'CANCEL'.
      LEAVE PROGRAM.
  ENDCASE.
ENDMODULE.                 " USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*&      Form  F_CABECALHO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_VL_LIST_COMMENTARY  text
*----------------------------------------------------------------------*
FORM F_CABECALHO  USING    P_LIST_COMMENTARY TYPE SLIS_T_LISTHEADER.

  DATA: WA_MES    LIKE T247,
        IT_MES    LIKE STANDARD TABLE OF WA_MES,
        VG_TITULO LIKE ZGL001_DRE_EST-VSTXT.

  DATA: VL_LINE    TYPE SLIS_LISTHEADER,
        VL_TXT     TYPE C LENGTH 50,
        VL_TXT2    TYPE C LENGTH 50,
        VL_EMPRESA TYPE C LENGTH 50,
        VL_DATA    TYPE C LENGTH 14,
        VL_HORA    TYPE C LENGTH 8.

  CALL FUNCTION 'MONTH_NAMES_GET'
    EXPORTING
      LANGUAGE    = SY-LANGU
    TABLES
      MONTH_NAMES = IT_MES.

  READ TABLE IT_MES INTO WA_MES WITH KEY MNR = P_MONAT-LOW.

  VL_TXT = WA_MES-LTX.

  SELECT SINGLE BUTXT
    FROM T001
    INTO VL_EMPRESA
   WHERE BUKRS EQ P_BUKRS.

  CONCATENATE VG_TITULO '[' VL_TXT  INTO VL_TXT.

  IF P_MONAT-HIGH IS INITIAL.
    CONCATENATE  VL_TXT ']' INTO VL_TXT.
  ELSE.
    READ TABLE IT_MES INTO WA_MES WITH KEY MNR = P_MONAT-HIGH.
    VL_TXT2 = WA_MES-LTX.
    CONCATENATE  VL_TXT  '-' VL_TXT2 ']' INTO VL_TXT.
  ENDIF.
  MESSAGE S028 WITH VL_TXT P_GJAHR INTO VL_TXT.
  "CONCATENATE  VL_TXT 'de' P_GJAHR INTO VL_TXT SEPARATED BY SPACE.
  CLEAR VL_LINE.
  VL_LINE-TYP  = 'H'.
  VL_LINE-INFO = VL_TXT.
  APPEND VL_LINE TO P_LIST_COMMENTARY.

  CLEAR VL_LINE.
  VL_LINE-TYP  = 'S'.
  VL_LINE-KEY = VL_EMPRESA.
  APPEND VL_LINE TO P_LIST_COMMENTARY.

  CLEAR VL_LINE.
  VL_LINE-TYP  = 'S'.
  VL_LINE-KEY  = TEXT-004.
  VL_LINE-INFO = P_WAERS.
  APPEND VL_LINE TO P_LIST_COMMENTARY.

  CLEAR VL_LINE.
  VL_LINE-TYP  = 'S'.
  VL_LINE-KEY  = TEXT-005.
  "VL_LINE-KEY = 'Estrutura:'.
  VL_LINE-INFO = P_VERSN.
  APPEND VL_LINE TO P_LIST_COMMENTARY.


  CONCATENATE SY-DATUM+6(2)
              '.' SY-DATUM+4(2)
              '.' SY-DATUM(4) INTO VL_DATA.

  CONCATENATE SY-UZEIT(2)
              ':' SY-UZEIT+2(2)
              ':' SY-UZEIT+4(2) INTO VL_HORA.

  MESSAGE S010 WITH SY-UNAME VL_DATA VL_HORA INTO VL_TXT.
  "CONCATENATE  SY-UNAME 'em' VL_DATA '-' VL_HORA INTO VL_TXT SEPARATED BY SPACE.

  CLEAR VL_LINE.
  VL_LINE-TYP  = 'S'.
  VL_LINE-KEY  = TEXT-006.
  "VL_LINE-KEY  = 'Gerado por:'.
  VL_LINE-INFO = VL_TXT.
  APPEND VL_LINE TO P_LIST_COMMENTARY.
ENDFORM.                    "F_CABECALHO
*&---------------------------------------------------------------------*
*&      Form  EXPORTA_DADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM EXPORTA_DADOS .
  DATA: VLR_REA(20),
        VLR_VER(20),
        VLR_HOR(20),
        QTD_TON(20),
        V_CAMINHO    TYPE STRING,
        WL_CONT      TYPE SY-TABIX,
        TX_AUX       TYPE C,
        IT_EXCEL_AUX LIKE TABLE OF IT_EXCEL WITH HEADER LINE.

  DATA:  V_LOOPI    TYPE I,
         V_LOOPF    TYPE I,
         V_MESAN    TYPE I,
         V_REAC(10),
         V_QTDC(10),
         V_VERC(10),
         V_HORC(10),
         V_MES(02).

  FIELD-SYMBOLS: <FS_REA> TYPE ANY,
                 <FS_R03> TYPE ANY,
                 <FS_ANT> TYPE ANY,
                 <FS_QTD> TYPE ANY,
                 <FS_VER> TYPE ANY,
                 <FS_HOR> TYPE ANY.

  REFRESH: IT_FILE.

*  LOOP AT IT_EXCEL.
*    COLLECT IT_EXCEL INTO IT_EXCEL_AUX.
*  ENDLOOP.
*
*  IT_EXCEL[] = IT_EXCEL_AUX[].

  DELETE IT_EXCEL WHERE SAKNR IS INITIAL.
  LOOP AT IT_EXCEL.
    IF SY-TABIX EQ 1.

      "Empresa
      MESSAGE S016 INTO TX_AUX.
      CONCATENATE TX_AUX ';' INTO IT_FILE-FIELD.

      "Estrutura
      MESSAGE S017 INTO TX_AUX.
      CONCATENATE IT_FILE-FIELD TX_AUX ';' INTO IT_FILE-FIELD.

      ""Mês
      "MESSAGE S018 INTO TX_AUX.
      "CONCATENATE IT_FILE-FIELD TX_AUX ';' INTO IT_FILE-FIELD.

      "Ano
      MESSAGE S019 INTO TX_AUX.
      CONCATENATE IT_FILE-FIELD TX_AUX ';' INTO IT_FILE-FIELD.

      "Nível
      MESSAGE S020 INTO TX_AUX.
      CONCATENATE IT_FILE-FIELD TX_AUX ';' INTO IT_FILE-FIELD.

      "Moeda
      MESSAGE S030 INTO TX_AUX.
      CONCATENATE IT_FILE-FIELD TX_AUX ';' INTO IT_FILE-FIELD.

      "Conta
      MESSAGE S021 INTO TX_AUX.
      CONCATENATE IT_FILE-FIELD TX_AUX ';' INTO IT_FILE-FIELD.

      "Descrição
      MESSAGE S022 INTO TX_AUX.
      CONCATENATE IT_FILE-FIELD TX_AUX ';' INTO IT_FILE-FIELD.

      "Centro de Custo
      MESSAGE S031 INTO TX_AUX.
      CONCATENATE IT_FILE-FIELD TX_AUX ';' INTO IT_FILE-FIELD.

      "Tipo Centro de Custo
      MESSAGE S035 INTO TX_AUX.
      CONCATENATE IT_FILE-FIELD TX_AUX ';' INTO IT_FILE-FIELD.

      "Descrição Centro de Custo
      MESSAGE S036 INTO TX_AUX.
      CONCATENATE IT_FILE-FIELD TX_AUX ';' INTO IT_FILE-FIELD.

      "Centro de Lucro
      MESSAGE S032 INTO TX_AUX.
      CONCATENATE IT_FILE-FIELD TX_AUX ';' INTO IT_FILE-FIELD.

      "Descrição Centro de Lucro
      MESSAGE S037 INTO TX_AUX.
      CONCATENATE IT_FILE-FIELD TX_AUX ';' INTO IT_FILE-FIELD.

      "Material
      MESSAGE S038 INTO TX_AUX.
      CONCATENATE IT_FILE-FIELD TX_AUX ';' INTO IT_FILE-FIELD.

      "Descrição do Material
      MESSAGE S039 INTO TX_AUX.
      CONCATENATE IT_FILE-FIELD TX_AUX ';' INTO IT_FILE-FIELD.

      "IT_FILE-FIELD = 'Empresa;Estrutura;Ano;Nivel;Moeda;Conta;Descrição;C.Custo;Tp.CC;Descr.Custo;C.Lucro;Descr.Lucro;Material;Descr.Material'.
      V_LOOPI = P_MONAT-LOW.
      V_LOOPF = P_MONAT-HIGH.
      IF V_LOOPF = 0.
        V_LOOPF = V_LOOPI.
      ENDIF.
      WHILE V_LOOPI LE V_LOOPF.
        V_MES = V_LOOPI.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = V_MES
          IMPORTING
            OUTPUT = V_MES.
        "
        CONCATENATE 'QTD' V_MES INTO V_QTDC.
        IF C_PESO IS NOT INITIAL.
          CONCATENATE IT_FILE-FIELD V_QTDC INTO IT_FILE-FIELD SEPARATED BY ';'.
        ENDIF.

        CONCATENATE 'VALOR' V_MES '-' P_WAERS INTO V_REAC.
        CONCATENATE IT_FILE-FIELD V_REAC  INTO IT_FILE-FIELD SEPARATED BY ';'.


        CONCATENATE 'ANA_VER' V_MES INTO V_VERC.
        CONCATENATE 'ANA_HOR' V_MES INTO V_HORC.
        IF C_ANAV IS NOT INITIAL.
          CONCATENATE IT_FILE-FIELD V_VERC INTO IT_FILE-FIELD SEPARATED BY ';'.
        ENDIF.
        IF C_ANAH IS NOT INITIAL.
          CONCATENATE IT_FILE-FIELD V_HORC INTO IT_FILE-FIELD SEPARATED BY ';'.
        ENDIF.
        ADD 1 TO V_LOOPI.
      ENDWHILE.
      CONCATENATE IT_FILE-FIELD ';' INTO IT_FILE-FIELD.
      APPEND IT_FILE.
    ENDIF.

    CONCATENATE P_BUKRS
                P_VERSN
                P_GJAHR
                IT_EXCEL-NIVEL
                P_WAERS
                IT_EXCEL-SAKNR
                IT_EXCEL-TXT50
                IT_EXCEL-KOSTL
                IT_EXCEL-KOSAR
                IT_EXCEL-LTEXT_CC
                IT_EXCEL-PRCTR
                IT_EXCEL-LTEXT_CL
                IT_EXCEL-MATKL
                IT_EXCEL-WGBEZ60
                INTO IT_FILE-FIELD SEPARATED BY ';'.

    V_LOOPI = P_MONAT-LOW.
    V_LOOPF = P_MONAT-HIGH.
    IF V_LOOPF = 0.
      V_LOOPF = V_LOOPI.
    ENDIF.
    CLEAR: QTD_TON, VLR_REA, VLR_VER, VLR_HOR.
    WHILE V_LOOPI LE V_LOOPF.
      V_MES = V_LOOPI.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = V_MES
        IMPORTING
          OUTPUT = V_MES.
      CONCATENATE 'VLR_REA' V_MES INTO V_REAC.
      CONCATENATE 'QTD_TON' V_MES INTO V_QTDC.
      CONCATENATE 'ANA_VER' V_MES INTO V_VERC.
      CONCATENATE 'ANA_HOR' V_MES INTO V_HORC.
      "
      IF C_PESO IS NOT INITIAL.
        ASSIGN COMPONENT V_QTDC OF STRUCTURE IT_EXCEL TO <FS_QTD>.
        WRITE <FS_QTD> TO QTD_TON.
        WL_CONT = STRLEN( QTD_TON ).
        SUBTRACT 1 FROM WL_CONT.
        IF QTD_TON+WL_CONT(1) EQ '-'.
          TRANSLATE QTD_TON USING '- '.
          CONCATENATE '-' QTD_TON INTO QTD_TON.
        ENDIF.
        CONCATENATE IT_FILE-FIELD QTD_TON INTO IT_FILE-FIELD SEPARATED BY ';'.
      ENDIF.

      ASSIGN COMPONENT V_REAC OF STRUCTURE IT_EXCEL TO <FS_REA>.
      WRITE <FS_REA>  TO VLR_REA.
      WL_CONT = STRLEN( VLR_REA ).
      SUBTRACT 1 FROM WL_CONT.
      IF VLR_REA+WL_CONT(1) EQ '-'.
        TRANSLATE VLR_REA USING '- '.
        CONCATENATE '-' VLR_REA INTO VLR_REA.
      ENDIF.
      CONCATENATE IT_FILE-FIELD VLR_REA INTO IT_FILE-FIELD SEPARATED BY ';'.

      IF C_ANAV IS NOT INITIAL.
        ASSIGN COMPONENT V_VERC OF STRUCTURE IT_EXCEL TO <FS_VER>.
        WRITE <FS_VER> TO VLR_VER.
        WL_CONT = STRLEN( VLR_VER ).
        SUBTRACT 1 FROM WL_CONT.
        IF VLR_VER+WL_CONT(1) EQ '-'.
          TRANSLATE VLR_VER USING '- '.
          CONCATENATE '-' VLR_VER INTO VLR_VER.
        ENDIF.
        "
        CONCATENATE IT_FILE-FIELD VLR_VER INTO IT_FILE-FIELD SEPARATED BY ';'.
      ENDIF.
      IF C_ANAH IS NOT INITIAL.
        ASSIGN COMPONENT V_HORC OF STRUCTURE IT_EXCEL TO <FS_HOR>.
        WRITE <FS_HOR> TO VLR_HOR.
        WL_CONT = STRLEN( VLR_HOR ).
        SUBTRACT 1 FROM WL_CONT.
        IF VLR_HOR+WL_CONT(1) EQ '-'.
          TRANSLATE VLR_HOR USING '- '.
          CONCATENATE '-' VLR_HOR INTO VLR_HOR.
        ENDIF.
        "
        CONCATENATE IT_FILE-FIELD VLR_HOR INTO IT_FILE-FIELD SEPARATED BY ';'.
      ENDIF.
      "
      ADD 1 TO V_LOOPI.
    ENDWHILE.
    CONCATENATE IT_FILE-FIELD ';' INTO IT_FILE-FIELD.
    APPEND IT_FILE.
    CLEAR: IT_FILE, QTD_TON, VLR_REA, VLR_VER, VLR_HOR.
  ENDLOOP.

  WL_CONT = STRLEN( WG_FILE_LOCAL ).
  SUBTRACT 4 FROM WL_CONT.
  IF WG_FILE_LOCAL+WL_CONT(4) NE '.CSV'.
    CONCATENATE WG_FILE_LOCAL '.CSV' INTO V_CAMINHO.
  ELSE.
    MOVE WG_FILE_LOCAL TO V_CAMINHO.
  ENDIF.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
*     bin_filesize            = numbytes
      FILENAME                = V_CAMINHO
      FILETYPE                = 'ASC'
    TABLES
      DATA_TAB                = IT_FILE
    EXCEPTIONS
      FILE_WRITE_ERROR        = 1
      NO_BATCH                = 2
      GUI_REFUSE_FILETRANSFER = 3
      INVALID_TYPE            = 4
      NO_AUTHORITY            = 5
      UNKNOWN_ERROR           = 6.
ENDFORM.                    " EXPORTA_DADOS

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_1105  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_1105 INPUT.

  CASE SY-UCOMM.
    WHEN 'SAVE'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.                 " USER_COMMAND_1105  INPUT
*&---------------------------------------------------------------------*
*&      Module  STATUS_1105  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_1105 OUTPUT.
  SET PF-STATUS 'PF1103'.
  SET TITLEBAR 'TL1105'.

ENDMODULE.                 " STATUS_1105  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  BUSCA_FILE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE BUSCA_FILE INPUT.


  CALL FUNCTION 'KD_GET_FILENAME_ON_F4'
    EXPORTING
      FIELD_NAME    = 'C:\'
    CHANGING
      FILE_NAME     = WG_FILE_LOCAL
    EXCEPTIONS
      MASK_TOO_LONG = 1
      OTHERS        = 2.
  CASE SY-SUBRC.
    WHEN 1.
      MESSAGE E014.
    WHEN 2.
      MESSAGE E015.
  ENDCASE.
ENDMODULE.                 " BUSCA_FILE  INPUT
*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0200 OUTPUT.
  SET PF-STATUS '0200'.
  SET TITLEBAR '0200'.

ENDMODULE.                 " STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0200 INPUT.
  CASE OK-CODE.
    WHEN 'BACK'.
      SET SCREEN 0.
    WHEN 'CANCEL'.
      SET SCREEN 0.
    WHEN 'EXIT'.
      LEAVE PROGRAM.
  ENDCASE.
ENDMODULE.                 " USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*&      Module  CRIA_OBJETOS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE CRIA_OBJETOS_0200 OUTPUT.
  DATA:
    TL_FILTER   TYPE LVC_T_FILT,
    WL_FILTER   TYPE LVC_S_FILT,
    TL_FUNCTION TYPE UI_FUNCTIONS,
    WL_FUNCTION LIKE TL_FUNCTION WITH HEADER LINE.

  WA_LAYOUT-ZEBRA      = C_X.
  WA_LAYOUT-NO_ROWMARK = C_X.
  WA_STABLE-ROW        = C_X.
  WA_LAYOUT-NO_TOOLBAR = ' '.
  WA_LAYOUT-GRID_TITLE = ' '.
  "GRID1

  IF OBG_CONTEINER IS INITIAL.
    CREATE OBJECT OBG_CONTEINER
      EXPORTING
        CONTAINER_NAME = G_CC.


    CREATE OBJECT GRID1
      EXPORTING
        I_PARENT = OBG_CONTEINER.

    PERFORM MONTAR_LAYOUT.

    REFRESH: TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
    APPEND WL_FUNCTION TO TL_FUNCTION.
    WL_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND WL_FUNCTION TO TL_FUNCTION.

    WG_X_VARIANT-REPORT = SY-REPID. "Enable users save own LAYOUTs
    CALL METHOD GRID1->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_VARIANT           = WG_X_VARIANT
        IS_LAYOUT            = WA_LAYOUT
        IT_TOOLBAR_EXCLUDING = TL_FUNCTION
        I_SAVE               = 'X'
        I_DEFAULT            = 'X'
      CHANGING
        IT_FILTER            = TL_FILTER
        IT_FIELDCATALOG      = T_FIELDCATALOG[]
        IT_OUTTAB            = TG_CONSOL[].

  ELSE.
    CALL METHOD GRID1->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = WA_STABLE.
  ENDIF.
ENDMODULE.                 " CRIA_OBJETOS_0200  OUTPUT
*&---------------------------------------------------------------------*
*&      Form  MONTAR_LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM MONTAR_LAYOUT .
  REFRESH T_FIELDCATALOG.

  DATA: TEXTO_01 TYPE SCRTEXT_L,
        TEXTO_02 TYPE SCRTEXT_L,
        TEXTO_03 TYPE SCRTEXT_L,
        TEXTO_04 TYPE SCRTEXT_L,
        TEXTO_05 TYPE SCRTEXT_L,
        TEXTO_06 TYPE SCRTEXT_L,
        TEXTO_07 TYPE SCRTEXT_L,
        TEXTO_08 TYPE SCRTEXT_L,
        TEXTO_09 TYPE SCRTEXT_L,
        TEXTO_10 TYPE SCRTEXT_L,
        TEXTO_11 TYPE SCRTEXT_L,
        TEXTO_12 TYPE SCRTEXT_L.

  TEXTO_01 = TEXT-007.
  TEXTO_02 = TEXT-008.
  TEXTO_03 = TEXT-009.
  TEXTO_04 = TEXT-010.
  TEXTO_05 = TEXT-011.
  TEXTO_06 = TEXT-012.
  TEXTO_07 = TEXT-013.
  TEXTO_08 = TEXT-014.
  TEXTO_09 = TEXT-015.
  TEXTO_10 = TEXT-016.
  TEXTO_11 = TEXT-017.
  TEXTO_12 = TEXT-018.

  PERFORM MONTAR_ESTRUTURA USING:
         1 ' '           ' '        'TG_CONSOL' 'BUKRS'      TEXTO_01    '08' ' ' ' ' ' ',
         1 ' '           ' '        'TG_CONSOL' 'MONAT'      TEXTO_02    '08' ' ' ' ' ' ',
         1 ' '           ' '        'TG_CONSOL' 'GJAHR'      TEXTO_03    '08' ' ' ' ' ' ',
         1 ' '           ' '        'TG_CONSOL' 'SAKNR'      TEXTO_04    '10' ' ' ' ' ' ',
         1 ' '           ' '        'TG_CONSOL' 'KOSTL'      TEXTO_05    '10' ' ' ' ' ' ',
         1 ' '           ' '        'TG_CONSOL' 'PRCTR'      TEXTO_06    '10' ' ' ' ' ' ',
         1 ' '           ' '        'TG_CONSOL' 'MATKL'      TEXTO_07    '10' ' ' ' ' ' ',
         1 ' '           ' '        'TG_CONSOL' 'VBUND'      TEXTO_08    '08' ' ' ' ' ' ',
         1 ' '           ' '        'TG_CONSOL' 'QTD_TON'    TEXTO_09    '20' ' ' ' ' ' ',
         1 ' '           ' '        'TG_CONSOL' 'VLR_REA'    TEXTO_10    '20' ' ' ' ' ' ',
         1 ' '           ' '        'TG_CONSOL' 'VLR_DOLAR'  TEXTO_11    '20' ' ' ' ' ' ',
         1 ' '           ' '        'TG_CONSOL' 'VLR_GRUPO'  TEXTO_12    '20' ' ' ' ' ' '.
ENDFORM.                    " MONTAR_LAYOUT

*&---------------------------------------------------------------------*
*&      Form  MONTAR_ESTRUTURA
*&---------------------------------------------------------------------*
FORM MONTAR_ESTRUTURA USING VALUE(P_COL_POS)       TYPE I
                            VALUE(P_REF_TABNAME)   LIKE DD02D-TABNAME
                            VALUE(P_REF_FIELDNAME) LIKE DD03D-FIELDNAME
                            VALUE(P_TABNAME)       LIKE DD02D-TABNAME
                            VALUE(P_FIELD)         LIKE DD03D-FIELDNAME
                            VALUE(P_SCRTEXT_L)     LIKE DD03P-SCRTEXT_L
                            VALUE(P_OUTPUTLEN)
                            VALUE(P_EDIT)
                            VALUE(P_SUM)
                            VALUE(P_EMPHASIZE).

  CLEAR W_FIELDCATALOG.
  W_FIELDCATALOG-FIELDNAME     = P_FIELD.
  W_FIELDCATALOG-TABNAME       = P_TABNAME.
  W_FIELDCATALOG-REF_TABLE     = P_REF_TABNAME.
  W_FIELDCATALOG-REF_FIELD     = P_REF_FIELDNAME.
  W_FIELDCATALOG-KEY           = ' '.
  W_FIELDCATALOG-EDIT          = P_EDIT.
  W_FIELDCATALOG-DO_SUM        = P_SUM.

  W_FIELDCATALOG-COL_POS         = P_COL_POS.
  IF P_OUTPUTLEN IS NOT INITIAL.
    W_FIELDCATALOG-OUTPUTLEN      = P_OUTPUTLEN.
  ENDIF.

  W_FIELDCATALOG-NO_OUT        = ' '.
  W_FIELDCATALOG-COLTEXT       = P_SCRTEXT_L.
  W_FIELDCATALOG-REPTEXT       = P_SCRTEXT_L.
  W_FIELDCATALOG-SCRTEXT_S     = P_SCRTEXT_L.
  W_FIELDCATALOG-SCRTEXT_M     = P_SCRTEXT_L.
  W_FIELDCATALOG-SCRTEXT_L     = P_SCRTEXT_L.
  W_FIELDCATALOG-EMPHASIZE     = P_EMPHASIZE.

  APPEND W_FIELDCATALOG TO T_FIELDCATALOG.

ENDFORM.                    " montar_estrutura

INCLUDE MZDRE0002_0300.
