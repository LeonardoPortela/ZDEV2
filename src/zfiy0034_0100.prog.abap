*----------------------------------------------------------------------*
***INCLUDE ZFIY0034_0100.
*----------------------------------------------------------------------*
DATA: OK_CODE TYPE SY-UCOMM.

DATA: G_CUSTOM_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      DG_DYNDOC_ID       TYPE REF TO CL_DD_DOCUMENT,
      DG_SPLITTER        TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_SPLITTER_2      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_PARENT_HTML     TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_HTML1    TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_HTML2    TYPE REF TO CL_GUI_CONTAINER,
      PICTURE            TYPE REF TO CL_GUI_PICTURE,
      DG_PARENT_ALV      TYPE REF TO CL_GUI_CONTAINER,
      G_ALV              TYPE REF TO CL_GUI_ALV_GRID,
      GS_LAYOUT          TYPE LVC_S_LAYO,
      GS_VARIANT         TYPE DISVARIANT,
      IT_FIELDCATALOG    TYPE LVC_T_FCAT,
      TABLE_ELEMENT      TYPE REF TO CL_DD_TABLE_ELEMENT,
      TABLE_ELEMENT2     TYPE REF TO CL_DD_TABLE_ELEMENT,
      COLUMN             TYPE REF TO CL_DD_AREA,
      COLUMN_1           TYPE REF TO CL_DD_AREA,
      COLUMN_2           TYPE REF TO CL_DD_AREA,
      DG_HTML_CNTRL      TYPE REF TO CL_GUI_HTML_VIEWER.

DATA: IT_EXCLUDE_FCODE TYPE UI_FUNCTIONS,
      WA_EXCLUDE_FCODE LIKE LINE OF IT_EXCLUDE_FCODE.

DATA: GS_SCROLL_COL TYPE LVC_S_COL,
      GS_SCROLL_ROW TYPE LVC_S_ROID.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.
  CASE OK_CODE.
    WHEN 'GERAR_TXT'.
      PERFORM GERAR_ARQUIVO_TEXTO.
      CLEAR: OK_CODE.
    WHEN ''.
      CLEAR: OK_CODE.
  ENDCASE.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100_EXIT INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.

  DATA: URL(255)                TYPE C,
        P_TEXT                  TYPE SDYDO_TEXT_ELEMENT,
        SDYDO_TEXT_ELEMENT(255),
        P_TEXT_TABLE            TYPE SDYDO_TEXT_TABLE.

  SET PF-STATUS 'PF0100'.
  SET TITLEBAR 'TL0100'.

  IF G_CUSTOM_CONTAINER IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    IF SY-SUBRC <> 0.
      MESSAGE A000(TREE_CONTROL_MSG).
    ENDIF.

    CREATE OBJECT DG_SPLITTER
      EXPORTING
        PARENT  = G_CUSTOM_CONTAINER
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_HTML.

    CREATE OBJECT DG_SPLITTER_2
      EXPORTING
        PARENT  = DG_PARENT_HTML
        ROWS    = 1
        COLUMNS = 2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_HTML1.

    CALL METHOD DG_SPLITTER_2->SET_COLUMN_WIDTH
      EXPORTING
        ID    = 1
        WIDTH = 40.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 2
      RECEIVING
        CONTAINER = DG_PARENT_HTML2.

    CREATE OBJECT PICTURE
      EXPORTING
        PARENT = DG_PARENT_HTML2.

    PERFORM F_PEGA_IMAGEM USING 'LOGO_NOVO' CHANGING URL.

    CALL METHOD PICTURE->LOAD_PICTURE_FROM_URL
      EXPORTING
        URL = URL.

    CALL METHOD PICTURE->SET_DISPLAY_MODE
      EXPORTING
        DISPLAY_MODE = PICTURE->DISPLAY_MODE_FIT_CENTER.

    CALL METHOD DG_SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_ALV.

    CALL METHOD DG_SPLITTER->SET_ROW_HEIGHT
      EXPORTING
        ID     = 1
        HEIGHT = 16.

    CREATE OBJECT G_ALV
      EXPORTING
        I_PARENT = DG_PARENT_ALV.

    PERFORM FILL_IT_FIELDCATALOG.

*   Fill info for layout variant
    PERFORM FILL_GS_VARIANT.

*   Set layout parameters for ALV grid
    "GS_LAYOUT-GRID_TITLE = TEXT-100.
    GS_LAYOUT-SEL_MODE   = 'A'.

    CALL METHOD G_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT
        IS_VARIANT           = GS_VARIANT
        IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
        I_SAVE               = 'A'
      CHANGING
        IT_FIELDCATALOG      = IT_FIELDCATALOG
        IT_OUTTAB            = IT_OPE_PER[].

    CREATE OBJECT DG_DYNDOC_ID
      EXPORTING
        STYLE = 'ALV_GRID'.

    CALL METHOD DG_DYNDOC_ID->INITIALIZE_DOCUMENT.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 1
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT.

    CALL METHOD TABLE_ELEMENT->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN.

    CALL METHOD TABLE_ELEMENT->SET_COLUMN_STYLE
      EXPORTING
        COL_NO    = 1
        SAP_ALIGN = 'CENTER'
        SAP_STYLE = CL_DD_DOCUMENT=>HEADING.

    P_TEXT = TEXT-008.

    CALL METHOD COLUMN->ADD_TEXT
      EXPORTING
        TEXT      = P_TEXT
        SAP_STYLE = 'HEADING'.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 2
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT2.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      EXPORTING
        SAP_STYLE   = 'SAP_BOLD'
        STYLE_CLASS = 'SAP_BOLD'
      IMPORTING
        COLUMN      = COLUMN_1.

    CLEAR: P_TEXT_TABLE.

    SDYDO_TEXT_ELEMENT = 'Sociedad'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

    SDYDO_TEXT_ELEMENT = 'Ejercicio'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

    SDYDO_TEXT_ELEMENT = 'Período contable'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

    SDYDO_TEXT_ELEMENT = 'División'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

    CALL METHOD COLUMN_1->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE
        FIX_LINES  = 'X'.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN_2.

    CALL METHOD TABLE_ELEMENT2->SET_COLUMN_STYLE
      EXPORTING
        COL_NO       = 2
        SAP_ALIGN    = 'LEFT'
        SAP_FONTSIZE = CL_DD_DOCUMENT=>MEDIUM.

    CLEAR: P_TEXT_TABLE.

*PBUKRS	Sociedad
    SELECT SINGLE BUTXT INTO @DATA(LC_BUTXT)
      FROM T001
     WHERE BUKRS EQ @PBUKRS-LOW.

    CONCATENATE PBUKRS-LOW '-' LC_BUTXT INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

    SDYDO_TEXT_ELEMENT = PGJAHR-LOW.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

    SDYDO_TEXT_ELEMENT = PPOPER-LOW.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

*    IF PRBUSA-LOW IS INITIAL AND PRBUSA-HIGH IS INITIAL.
*      SDYDO_TEXT_ELEMENT = '*'.
*      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
*    ELSEIF PRBUSA-LOW IS NOT INITIAL AND PRBUSA-HIGH IS INITIAL.
*      SDYDO_TEXT_ELEMENT = PRBUSA-LOW.
*      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
*    ELSEIF PRBUSA-LOW IS NOT INITIAL AND PRBUSA-HIGH IS NOT INITIAL.
*      CONCATENATE PRBUSA-LOW ' - ' PRBUSA-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
*      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
*    ELSEIF PRBUSA-LOW IS INITIAL AND PRBUSA-HIGH IS NOT INITIAL.
*      CONCATENATE '* - ' PRBUSA-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
*      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
*    ENDIF.

    CALL METHOD COLUMN_2->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE
        FIX_LINES  = 'X'.

    CALL METHOD DG_DYNDOC_ID->MERGE_DOCUMENT.

    CREATE OBJECT DG_HTML_CNTRL
      EXPORTING
        PARENT = DG_PARENT_HTML1.

    DG_DYNDOC_ID->HTML_CONTROL = DG_HTML_CNTRL.

    CALL METHOD DG_DYNDOC_ID->DISPLAY_DOCUMENT
      EXPORTING
        REUSE_CONTROL      = 'X'
        PARENT             = DG_PARENT_HTML1
      EXCEPTIONS
        HTML_DISPLAY_ERROR = 1.
  ENDIF.

  CALL METHOD G_ALV->REFRESH_TABLE_DISPLAY.

  CALL METHOD G_ALV->GET_SCROLL_INFO_VIA_ID
    IMPORTING
      ES_COL_INFO = GS_SCROLL_COL
      ES_ROW_NO   = GS_SCROLL_ROW.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  F_PEGA_IMAGEM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0190   text
*      <--P_URL  text
*----------------------------------------------------------------------*
FORM F_PEGA_IMAGEM  USING    NOME_LOGO
                    CHANGING URL.

  DATA: BEGIN OF GRAPHIC_TABLE OCCURS 0,
          LINE(255) TYPE X,
        END OF GRAPHIC_TABLE.
  DATA: L_GRAPHIC_XSTR TYPE XSTRING.
  DATA: GRAPHIC_SIZE   TYPE I.
  DATA: L_GRAPHIC_CONV TYPE I.
  DATA: L_GRAPHIC_OFFS TYPE I.

  REFRESH GRAPHIC_TABLE.
  CALL METHOD CL_SSF_XSF_UTILITIES=>GET_BDS_GRAPHIC_AS_BMP
    EXPORTING
      P_OBJECT = 'GRAPHICS'
      P_NAME   = NOME_LOGO
      P_ID     = 'BMAP'
      P_BTYPE  = 'BCOL'
    RECEIVING
      P_BMP    = L_GRAPHIC_XSTR.

  GRAPHIC_SIZE = XSTRLEN( L_GRAPHIC_XSTR ).
  L_GRAPHIC_CONV = GRAPHIC_SIZE.
  L_GRAPHIC_OFFS = 0.
  WHILE L_GRAPHIC_CONV > 255.
    GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(255).
    APPEND GRAPHIC_TABLE.
    L_GRAPHIC_OFFS = L_GRAPHIC_OFFS + 255.
    L_GRAPHIC_CONV = L_GRAPHIC_CONV - 255.
  ENDWHILE.
  GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(L_GRAPHIC_CONV).
  APPEND GRAPHIC_TABLE.
  CALL FUNCTION 'DP_CREATE_URL'
    EXPORTING
      TYPE     = 'IMAGE'
      SUBTYPE  = 'X-UNKNOWN'
      SIZE     = GRAPHIC_SIZE
      LIFETIME = 'T'
    TABLES
      DATA     = GRAPHIC_TABLE
    CHANGING
      URL      = URL.
ENDFORM.                    " F_PEGA_IMAGEM


*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG
*&---------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG .

  DATA: LC_COL_POS  TYPE LVC_COLPOS.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_OPE_PER'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG.

ENDFORM.                    " FILL_IT_FIELDCATALOG


*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT
*&---------------------------------------------------------------------*
FORM FILL_GS_VARIANT .

  GS_VARIANT-REPORT      = SY-REPID.
  GS_VARIANT-HANDLE      = '0100'.
  GS_VARIANT-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT-USERNAME    = ABAP_FALSE.
  GS_VARIANT-VARIANT     = ABAP_FALSE.
  GS_VARIANT-TEXT        = ABAP_FALSE.
  GS_VARIANT-DEPENDVARS  = ABAP_FALSE.

ENDFORM.                    " FILL_GS_VARIANT

*&---------------------------------------------------------------------*
*&      Form  GERAR_ARQUIVO_TEXTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GERAR_ARQUIVO_TEXTO .

  DATA: LC_FILENAME	TYPE STRING,
        LC_PATH	    TYPE STRING,
        LC_FULLPATH	TYPE STRING.

  DATA: WA_TEXTO TYPE C LENGTH 215,
        IT_TEXTO TYPE TABLE OF STRING,
        VALOR    TYPE P LENGTH 16 DECIMALS 0.

  CLEAR: IT_TEXTO.

*TP_OPERACION       1 Type  ZDE_TP_OPERACION      CHAR  01 0 Tipo Operación
*CD_NORMA           1 Type  ZDE_CODIGO_NORMA      CHAR  02 0 Código de norma
*DT_BUDAT           1 Type  BUDAT                 DATS  08 0 Fecha de contabilización en el documento
*TP_COMBROB         1 Type  ZDE_TP_COMBROP        CHAR  02 0 Tipo Comprob Origen de Ret. Perc.
*LT_COMPROBANTE     1 Type  ZDE_LETRA_COMPROB     CHAR  01 0 Letra Comprobante
*NR_COMPROBANTE     1 Type  BELNR_D               CHAR  16 0 Número de un documento contable
*DT_COMPROBANTE     1 Type  BUDAT                 DATS  08 0 Fecha de contabilización en el documento
*NM_MONTO_COMPRO    1 Type  ZDE_MONTO_COMPRO      CURR  13 2 Monto Comprobante
*NM_CERT_PROPIO
*TP_DOC             1 Type  ZDE_TP_DOC            CHAR  01 0 Tipo Doc
*NR_CUIT            1 Type  ZDE_CUIT              CHAR  11 0 CUIT
*TP_SITUACION_IIBB  1 Type  ZDE_TP_SITUACION_IIBB CHAR  01 0 Situacion IIBB Retenido
*NR_INSCRIP_IIBB    1 Type  ZDE_NR_INSCRIP_IIBB   CHAR  11 0 N° Inscrip IIBB
*TP_SITUACION_IVA   1 Type  ZDE_TP_SITUACION_IVA  CHAR  01 0 Situación iva
*NM_RAZON_SOCIAL    1 Type  ZDE_RAZON_SOCIAL      CHAR  35 0 Razón Social
*NM_OTROS_CONCEPTOS 1 Type  ZDE_OTROS_CONCEP      CURR  13 2 Imp Otros conceptos
*NM_IMPORTE_IVA     1 Type  ZDE_IMPORTE_IVA       CURR  13 2 Importe IVA
*NM_MONTO_SUJ_RET   1 Type  ZDE_MONTO_SUJ_RET     CURR  13 2 Monto Sujeto Ret. Perc.
*NM_ALICUOTA        1 Type  ZDE_ALICUOTA          DEC   04 2 Alícuota
*NM_RET_PRACTICADA  1 Type  ZDE_RET_PRACTICADA    CURR  13 2 Ret. / Perc. Practicada
*NM_MONTO_TOTAL     1 Type  ZDE_MONTO_TOTAL_RET   CURR  13 2 Monto Total Retenido

  DATA: TX_TP_OPERACION(01),
        TX_CD_NORMA(03),
        TX_DT_BUDAT(10),
        TX_TP_COMBROB(02),
        TX_LT_COMPROBANTE(01),
        TX_DT_COMPROBANTE(10),
        TX_NR_COMPROBANTE(16),
        TX_NM_CERT_PROPIO(16),
        TX_TP_DOC(01),
        TX_NR_CUIT(11),
        TX_TP_SITUACION_IIBB(01),
        TX_NR_INSCRIP_IIBB(11),
        TX_TP_SITUACION_IVA(01),
        TX_NM_RAZON_SOCIAL(30),
        TX_NM_MONTO_COMPRO(16),
        TX_NM_OTROS_CONCEPTOS(16),
        TX_NM_IMPORTE_IVA(16),
        TX_NM_MONTO_SUJ_RET(16),
        TX_NM_ALICUOTA(05),
        TX_NM_RET_PRACTICADA(16),
        TX_NM_MONTO_TOTAL(16).

  LOOP AT IT_OPE_PER INTO DATA(WA_OPE_PER).

    CLEAR: WA_TEXTO.
    WRITE WA_OPE_PER-TP_OPERACION       TO TX_TP_OPERACION.
    WRITE WA_OPE_PER-CD_NORMA           TO TX_CD_NORMA.
    WRITE WA_OPE_PER-DT_BUDAT           TO TX_DT_BUDAT.
    WRITE WA_OPE_PER-TP_COMBROB         TO TX_TP_COMBROB.
    WRITE WA_OPE_PER-LT_COMPROBANTE     TO TX_LT_COMPROBANTE.
    WRITE WA_OPE_PER-NR_COMPROBANTE     TO TX_NR_COMPROBANTE.
    WRITE WA_OPE_PER-DT_COMPROBANTE     TO TX_DT_COMPROBANTE.
    WRITE WA_OPE_PER-NM_CERT_PROPIO     TO TX_NM_CERT_PROPIO.
    WRITE WA_OPE_PER-TP_DOC             TO TX_TP_DOC.
    WRITE WA_OPE_PER-NR_CUIT            TO TX_NR_CUIT.
    WRITE WA_OPE_PER-TP_SITUACION_IIBB  TO TX_TP_SITUACION_IIBB.
    WRITE WA_OPE_PER-NR_INSCRIP_IIBB    TO TX_NR_INSCRIP_IIBB.
    WRITE WA_OPE_PER-TP_SITUACION_IVA   TO TX_TP_SITUACION_IVA.
    WRITE WA_OPE_PER-NM_RAZON_SOCIAL    TO TX_NM_RAZON_SOCIAL.

    IF TX_NM_CERT_PROPIO IS INITIAL.
      TX_NM_CERT_PROPIO = '0'.
    ENDIF.

    VALOR = WA_OPE_PER-NM_MONTO_COMPRO * 100.
    MOVE VALOR TO TX_NM_MONTO_COMPRO.
    CONDENSE TX_NM_MONTO_COMPRO NO-GAPS.

    VALOR = WA_OPE_PER-NM_IMPORTE_IVA * 100.
    MOVE VALOR TO TX_NM_IMPORTE_IVA.
    CONDENSE TX_NM_MONTO_COMPRO NO-GAPS.

    VALOR = WA_OPE_PER-NM_OTROS_CONCEPTOS * 100.
    MOVE VALOR TO TX_NM_OTROS_CONCEPTOS.
    CONDENSE TX_NM_OTROS_CONCEPTOS NO-GAPS.

    VALOR = WA_OPE_PER-NM_MONTO_SUJ_RET * 100.
    MOVE VALOR TO TX_NM_MONTO_SUJ_RET.
    CONDENSE TX_NM_MONTO_SUJ_RET NO-GAPS.

    VALOR = WA_OPE_PER-NM_ALICUOTA * 100.
    MOVE VALOR TO TX_NM_ALICUOTA.
    CONDENSE TX_NM_ALICUOTA NO-GAPS.

    VALOR = WA_OPE_PER-NM_RET_PRACTICADA * 100.
    MOVE VALOR TO TX_NM_RET_PRACTICADA.
    CONDENSE TX_NM_RET_PRACTICADA NO-GAPS.

    VALOR = WA_OPE_PER-NM_MONTO_TOTAL * 100.
    MOVE VALOR TO TX_NM_MONTO_TOTAL.
    CONDENSE TX_NM_MONTO_TOTAL NO-GAPS.

    REPLACE ALL OCCURRENCES OF '.' IN TX_DT_BUDAT WITH '/'.
    REPLACE ALL OCCURRENCES OF '.' IN TX_DT_COMPROBANTE WITH '/'.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_TP_OPERACION IMPORTING OUTPUT = TX_TP_OPERACION.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_CD_NORMA IMPORTING OUTPUT = TX_CD_NORMA.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_DT_BUDAT IMPORTING OUTPUT = TX_DT_BUDAT.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_TP_COMBROB IMPORTING OUTPUT = TX_TP_COMBROB.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_LT_COMPROBANTE IMPORTING OUTPUT = TX_LT_COMPROBANTE.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_NR_COMPROBANTE IMPORTING OUTPUT = TX_NR_COMPROBANTE.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_DT_COMPROBANTE IMPORTING OUTPUT = TX_DT_COMPROBANTE.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_NM_MONTO_COMPRO IMPORTING OUTPUT = TX_NM_MONTO_COMPRO.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_NM_CERT_PROPIO IMPORTING OUTPUT = TX_NM_CERT_PROPIO.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_TP_DOC IMPORTING OUTPUT = TX_TP_DOC.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_NR_CUIT IMPORTING OUTPUT = TX_NR_CUIT.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_TP_SITUACION_IIBB IMPORTING OUTPUT = TX_TP_SITUACION_IIBB.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_NR_INSCRIP_IIBB IMPORTING OUTPUT = TX_NR_INSCRIP_IIBB.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_TP_SITUACION_IVA IMPORTING OUTPUT = TX_TP_SITUACION_IVA.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_NM_RAZON_SOCIAL IMPORTING OUTPUT = TX_NM_RAZON_SOCIAL.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_NM_OTROS_CONCEPTOS IMPORTING OUTPUT = TX_NM_OTROS_CONCEPTOS.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_NM_IMPORTE_IVA IMPORTING OUTPUT = TX_NM_IMPORTE_IVA.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_NM_MONTO_SUJ_RET IMPORTING OUTPUT = TX_NM_MONTO_SUJ_RET.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_NM_ALICUOTA IMPORTING OUTPUT = TX_NM_ALICUOTA.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_NM_RET_PRACTICADA IMPORTING OUTPUT = TX_NM_RET_PRACTICADA.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT' EXPORTING INPUT = TX_NM_MONTO_TOTAL IMPORTING OUTPUT = TX_NM_MONTO_TOTAL.

    CONCATENATE TX_NM_MONTO_COMPRO+1(13)    ',' TX_NM_MONTO_COMPRO+14(2)    INTO TX_NM_MONTO_COMPRO.
    CONCATENATE TX_NM_OTROS_CONCEPTOS+1(13) ',' TX_NM_OTROS_CONCEPTOS+14(2) INTO TX_NM_OTROS_CONCEPTOS.
    CONCATENATE TX_NM_IMPORTE_IVA+1(13)     ',' TX_NM_IMPORTE_IVA+14(2)     INTO TX_NM_IMPORTE_IVA.
    CONCATENATE TX_NM_MONTO_SUJ_RET+1(13)   ',' TX_NM_MONTO_SUJ_RET+14(2)   INTO TX_NM_MONTO_SUJ_RET.
    CONCATENATE TX_NM_RET_PRACTICADA+1(13)  ',' TX_NM_RET_PRACTICADA+14(2)  INTO TX_NM_RET_PRACTICADA.
    CONCATENATE TX_NM_MONTO_TOTAL+1(13)     ',' TX_NM_MONTO_TOTAL+14(2)     INTO TX_NM_MONTO_TOTAL.
    CONCATENATE TX_NM_ALICUOTA+1(2)         ',' TX_NM_ALICUOTA+3(2)         INTO TX_NM_ALICUOTA.

    CONCATENATE TX_TP_OPERACION
                TX_CD_NORMA
                TX_DT_BUDAT
                TX_TP_COMBROB
                TX_LT_COMPROBANTE
                TX_NR_COMPROBANTE
                TX_DT_COMPROBANTE
                TX_NM_MONTO_COMPRO
                TX_NM_CERT_PROPIO
                TX_TP_DOC
                TX_NR_CUIT
                TX_TP_SITUACION_IIBB
                TX_NR_INSCRIP_IIBB
                TX_TP_SITUACION_IVA
                TX_NM_RAZON_SOCIAL
                TX_NM_OTROS_CONCEPTOS
                TX_NM_IMPORTE_IVA
                TX_NM_MONTO_SUJ_RET
                TX_NM_ALICUOTA
                TX_NM_RET_PRACTICADA
                TX_NM_MONTO_TOTAL    INTO WA_TEXTO RESPECTING BLANKS.
    APPEND WA_TEXTO TO IT_TEXTO.

  ENDLOOP.

  CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_SAVE_DIALOG
    CHANGING
      FILENAME                  = LC_FILENAME
      PATH                      = LC_PATH
      FULLPATH                  = LC_FULLPATH
    EXCEPTIONS
      CNTL_ERROR                = 1
      ERROR_NO_GUI              = 2
      NOT_SUPPORTED_BY_GUI      = 3
      INVALID_DEFAULT_FILE_NAME = 4
      OTHERS                    = 5.

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CHECK LC_FILENAME IS NOT INITIAL.
  CHECK LC_FULLPATH IS NOT INITIAL.

  CALL METHOD CL_GUI_FRONTEND_SERVICES=>GUI_DOWNLOAD
    EXPORTING
      FILENAME                = LC_FULLPATH
    CHANGING
      DATA_TAB                = IT_TEXTO
    EXCEPTIONS
      FILE_WRITE_ERROR        = 1
      NO_BATCH                = 2
      GUI_REFUSE_FILETRANSFER = 3
      INVALID_TYPE            = 4
      NO_AUTHORITY            = 5
      UNKNOWN_ERROR           = 6
      HEADER_NOT_ALLOWED      = 7
      SEPARATOR_NOT_ALLOWED   = 8
      FILESIZE_NOT_ALLOWED    = 9
      HEADER_TOO_LONG         = 10
      DP_ERROR_CREATE         = 11
      DP_ERROR_SEND           = 12
      DP_ERROR_WRITE          = 13
      UNKNOWN_DP_ERROR        = 14
      ACCESS_DENIED           = 15
      DP_OUT_OF_MEMORY        = 16
      DISK_FULL               = 17
      DP_TIMEOUT              = 18
      FILE_NOT_FOUND          = 19
      DATAPROVIDER_EXCEPTION  = 20
      CONTROL_FLUSH_ERROR     = 21
      NOT_SUPPORTED_BY_GUI    = 22
      ERROR_NO_GUI            = 23
      OTHERS                  = 24.

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.
