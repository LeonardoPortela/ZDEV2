*&---------------------------------------------------------------------*
*& Report  ZFIR062
*&
*&---------------------------------------------------------------------*
*& JOB - Reclassificação de Contas de Variação
*&
*&---------------------------------------------------------------------*
REPORT ZFIR062.

TABLES: ZFIT0139, BSIS.

TYPES: BEGIN OF TY_ANLA,
         ANLN1 TYPE ANLA-ANLN1,
         ANLN2 TYPE ANLA-ANLN2,
       END OF TY_ANLA.

DATA: BEGIN OF TG_BSAK OCCURS 0.
        INCLUDE STRUCTURE BSAK.
      DATA: END OF TG_BSAK.

DATA: BEGIN OF TG_BSAD OCCURS 0.
        INCLUDE STRUCTURE BSAD.
      DATA: END OF TG_BSAD.

DATA: BEGIN OF TG_BSE_CLR OCCURS 0.
        INCLUDE STRUCTURE BSE_CLR.
      DATA: END OF TG_BSE_CLR.

DATA: BEGIN OF TG_T030H OCCURS 0,
        HKONT TYPE T030H-HKONT,
        LHREA TYPE T030H-LHREA,
      END OF TG_T030H.

DATA: BEGIN OF TG_SKA1 OCCURS 0,
        KTOPL TYPE SKA1-KTOPL,
        KTOKS TYPE SKA1-KTOKS,
        SAKNR TYPE SKA1-SAKNR,
        TXT50 TYPE SKAT-TXT50,
      END OF TG_SKA1.

DATA: TG_BSIS_VAR  TYPE TABLE OF BSIS       WITH HEADER LINE,
      TG_BSIS      TYPE TABLE OF BSIS       WITH HEADER LINE,
      TG_BKPF      TYPE TABLE OF BKPF       WITH HEADER LINE,
      TG_BSAK_IMOB LIKE TABLE OF TG_BSAK    WITH HEADER LINE,
      TG_BSAD_IMOB LIKE TABLE OF TG_BSAD    WITH HEADER LINE,
      TG_ANLA_COMP TYPE TABLE OF TY_ANLA    WITH HEADER LINE,
      TG_0139      TYPE TABLE OF ZFIT0139   WITH HEADER LINE.

RANGES: R_BSCHL_IMOBILIZADO FOR BSIS-BSCHL.

*----------------------------------------------------------------------*
* TELA DE SELEÇÃO
*----------------------------------------------------------------------*

SELECTION-SCREEN: BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS: P_BUDAT FOR BSIS-BUDAT.
SELECTION-SCREEN: END OF BLOCK B1.

START-OF-SELECTION.

  SELECT SINGLE COUNT( * ) INTO @DATA(_JOB)
    FROM TBTCO
   WHERE JOBNAME EQ 'ZFIR062_JOB'
     AND STATUS  EQ 'R'.

  CHECK ( _JOB EQ 1 ) OR ( P_BUDAT[] IS NOT INITIAL ).

  PERFORM: F_SELECIONA_DADOS,
           F_PROCESSA_DADOS.

FORM F_SELECIONA_DADOS.

  PERFORM F_LIMPA_VARIAVEIS.

  IF P_BUDAT[] IS INITIAL.
    P_BUDAT-SIGN   = 'I'.
    P_BUDAT-OPTION = 'EQ'.
    P_BUDAT-LOW    = SY-DATUM.
    APPEND P_BUDAT.
  ENDIF.

*-------------------------------------------------------------------*
*  Busca de documentos contabil c/ Variação
*-------------------------------------------------------------------*

  "Razão Fornecedor
  SELECT *
    FROM BSIS AS A APPENDING CORRESPONDING FIELDS OF TABLE TG_BSIS_VAR
   WHERE A~BUDAT IN P_BUDAT
     AND EXISTS ( SELECT B~SAKNR "#EC CI_DB_OPERATION_OK[2431747]
                    FROM SKA1 AS B "#EC CI_DB_OPERATION_OK[2389136]
                   WHERE B~KTOPL EQ '0050'
                     AND B~SAKNR EQ A~HKONT
                     AND B~KTOKS IN ( 'YB05','YB06','YB07','YB08' ) )
     AND EXISTS ( SELECT B~BELNR
                    FROM BSAK AS B
                   WHERE B~BUKRS EQ A~BUKRS
                     AND B~AUGBL EQ A~BELNR ).

  "Razão Cliente
  SELECT *
    FROM BSIS AS A APPENDING CORRESPONDING FIELDS OF TABLE TG_BSIS_VAR
   WHERE A~BUDAT IN P_BUDAT
     AND EXISTS ( SELECT B~SAKNR "#EC CI_DB_OPERATION_OK[2389136]
                    FROM SKA1 AS B "#EC CI_DB_OPERATION_OK[2431747]
                   WHERE B~KTOPL EQ '0050'
                     AND B~SAKNR EQ A~HKONT
                     AND B~KTOKS IN ( 'YB05','YB06','YB07','YB08' ) )
     AND EXISTS ( SELECT B~BELNR
                    FROM BSAD AS B
                   WHERE B~BUKRS EQ A~BUKRS
                     AND B~AUGBL EQ A~BELNR ).

  SORT TG_BSIS_VAR                                   BY BUKRS HKONT AUGDT AUGBL ZUONR GJAHR BELNR BUZEI.
  DELETE ADJACENT DUPLICATES FROM TG_BSIS_VAR COMPARING BUKRS HKONT AUGDT AUGBL ZUONR GJAHR BELNR BUZEI.

  CHECK TG_BSIS_VAR[] IS NOT INITIAL.

  "Partidas Fornecedor
  SELECT *
    FROM BSAK INTO TABLE TG_BSAK
     FOR ALL ENTRIES IN TG_BSIS_VAR
   WHERE BUKRS EQ TG_BSIS_VAR-BUKRS
     AND AUGBL EQ TG_BSIS_VAR-BELNR.

  "Partidas Cliente
  SELECT *
    FROM BSAD INTO TABLE TG_BSAD
     FOR ALL ENTRIES IN TG_BSIS_VAR
   WHERE BUKRS EQ TG_BSIS_VAR-BUKRS
     AND AUGBL EQ TG_BSIS_VAR-BELNR.

  IF TG_BSAK[] IS NOT INITIAL.
    SELECT *
      FROM BSE_CLR APPENDING TABLE TG_BSE_CLR
       FOR ALL ENTRIES IN TG_BSAK
     WHERE BUKRS_CLR = TG_BSAK-BUKRS
       AND BELNR_CLR = TG_BSAK-AUGBL
       AND BELNR     = TG_BSAK-BELNR.

    SELECT *
      FROM BSIS APPENDING CORRESPONDING FIELDS OF TABLE TG_BSIS
       FOR ALL ENTRIES IN TG_BSAK
     WHERE BUKRS  = TG_BSAK-BUKRS
       AND BELNR  = TG_BSAK-AUGBL.

    SELECT HKONT LHREA
      FROM T030H APPENDING TABLE TG_T030H
       FOR ALL ENTRIES IN TG_BSAK
     WHERE KTOPL EQ '0050'
       AND HKONT EQ TG_BSAK-HKONT.

    SELECT *
      FROM BKPF APPENDING CORRESPONDING FIELDS OF TABLE TG_BKPF
       FOR ALL ENTRIES IN TG_BSAK
     WHERE BUKRS  = TG_BSAK-BUKRS
       AND BELNR  = TG_BSAK-AUGBL.
  ENDIF.

  IF TG_BSAD[] IS NOT INITIAL.
    SELECT *
      FROM BSE_CLR APPENDING TABLE TG_BSE_CLR
       FOR ALL ENTRIES IN TG_BSAD
     WHERE BUKRS_CLR = TG_BSAD-BUKRS
       AND BELNR_CLR = TG_BSAD-AUGBL
       AND BELNR     = TG_BSAD-BELNR.

    SELECT *
      FROM BSIS APPENDING CORRESPONDING FIELDS OF TABLE TG_BSIS
       FOR ALL ENTRIES IN TG_BSAD
     WHERE BUKRS  = TG_BSAD-BUKRS
       AND BELNR  = TG_BSAD-AUGBL.

    SELECT HKONT LHREA
      FROM T030H APPENDING TABLE TG_T030H
      FOR ALL ENTRIES IN TG_BSAD
     WHERE KTOPL EQ '0050'
       AND HKONT EQ TG_BSAD-HKONT.

    SELECT *
      FROM BKPF APPENDING CORRESPONDING FIELDS OF TABLE TG_BKPF
       FOR ALL ENTRIES IN TG_BSAD
     WHERE BUKRS  = TG_BSAD-BUKRS
       AND BELNR  = TG_BSAD-AUGBL.
  ENDIF.


ENDFORM.

FORM F_PROCESSA_DADOS.

  PERFORM F_PROCESSA_IMOBILIZADO.

ENDFORM.

FORM F_PROCESSA_IMOBILIZADO.

  DATA: V_DT_ATUALIZA TYPE ERDAT.

  CLEAR: R_BSCHL_IMOBILIZADO[].

  SORT: TG_BSIS  BY BUKRS BELNR,
        TG_T030H BY HKONT.

  "Definir Chaves de Lançamento de Imobilizado.
  R_BSCHL_IMOBILIZADO-SIGN   = 'I'.
  R_BSCHL_IMOBILIZADO-OPTION = 'EQ'.
  R_BSCHL_IMOBILIZADO-LOW    = '70'.
  APPEND R_BSCHL_IMOBILIZADO.

  R_BSCHL_IMOBILIZADO-LOW    = '75'.
  APPEND R_BSCHL_IMOBILIZADO.

  TG_BSAK_IMOB[] = TG_BSAK[].
  TG_BSAD_IMOB[] = TG_BSAD[].

  LOOP AT TG_BSAK_IMOB.

    CHECK TG_BSAK_IMOB-BELNR EQ TG_BSAK_IMOB-AUGBL.

    READ TABLE TG_BKPF WITH KEY BUKRS = TG_BSAK_IMOB-BUKRS
                                BELNR = TG_BSAK_IMOB-AUGBL.

    CHECK ( SY-SUBRC = 0 ) AND ( TG_BKPF-STBLG IS INITIAL ).

    "Check se documento de compensação contém partidas de imobilizado.
    DATA(_IMOB_CHECK) = ''.
    LOOP AT TG_BSIS WHERE BUKRS EQ TG_BSAK_IMOB-BUKRS
                      AND BELNR EQ TG_BSAK_IMOB-AUGBL
                      AND BSCHL IN R_BSCHL_IMOBILIZADO.
      _IMOB_CHECK = 'X'.
      EXIT.
    ENDLOOP.

    CHECK _IMOB_CHECK IS NOT INITIAL.

    "Carrega conta de variação da partida.
    "READ TABLE TG_T030H WITH KEY HKONT = TG_BSAK_IMOB-HKONT BINARY SEARCH.
    "CHECK ( SY-SUBRC = 0 ) AND ( TG_T030H-LHREA IS NOT INITIAL ).

    "Check se gerou variação no documento de compensação.
    DATA(_VAR_CHECK) = ''.
    LOOP AT TG_BSE_CLR WHERE BUKRS_CLR EQ TG_BSAK_IMOB-BUKRS
                         AND BELNR_CLR EQ TG_BSAK_IMOB-AUGBL
                         AND ( ( RDIFF NE 0 ) OR ( RDIF2 NE 0 ) OR ( RDIF3 NE 0 ) ).
      _VAR_CHECK = 'X'.
    ENDLOOP.

    CHECK _VAR_CHECK IS NOT INITIAL.

    "Check se documento de compensação possui mais de um imobilizado. Caso tenha, não deve ser processado.
    CLEAR: TG_ANLA_COMP[].
    LOOP AT TG_BSAK WHERE BUKRS EQ TG_BSAK_IMOB-BUKRS
                      AND BELNR EQ TG_BSAK_IMOB-AUGBL
                      AND ANLN1 IS NOT INITIAL.

      CLEAR: TG_ANLA_COMP.
      TG_ANLA_COMP-ANLN1 = TG_BSAK_IMOB-ANLN1.
      TG_ANLA_COMP-ANLN2 = TG_BSAK_IMOB-ANLN2.
      APPEND TG_ANLA_COMP.
    ENDLOOP.

    SORT TG_ANLA_COMP                                   BY ANLN1 ANLN2.
    DELETE ADJACENT DUPLICATES FROM TG_ANLA_COMP COMPARING ANLN1 ANLN2.

    CHECK LINES( TG_ANLA_COMP[] ) EQ 1.

    READ TABLE TG_ANLA_COMP INDEX 1.

    "Check se possui um documento Contabil gerado.
    CLEAR: TG_0139[].
    SELECT *
      FROM ZFIT0139 INTO TABLE TG_0139
     WHERE BUKRS EQ TG_BSAK_IMOB-BUKRS
       AND AUGBL EQ TG_BSAK_IMOB-AUGBL.

    DATA(_CHECK_CTB_GER) = ''.
    LOOP AT TG_0139 WHERE STBLG_GER IS INITIAL  "Não foi estornado
                      AND ANULADO   IS INITIAL. "Não foi anulado.

      _CHECK_CTB_GER = 'X'.
    ENDLOOP.

    CHECK _CHECK_CTB_GER IS INITIAL.

    DATA(_ZIB_GER) = ''.
    PERFORM F_GERAR_DOC_CTB_IMOB  USING TG_BSAK_IMOB-BUKRS
                                        TG_BSAK_IMOB-AUGBL
                                        TG_BSAK_IMOB-AUGDT
                                        TG_BSAK_IMOB-LIFNR
                                        TG_ANLA_COMP
                                        'K'
                              CHANGING _ZIB_GER.
  ENDLOOP.

  LOOP AT TG_BSAD_IMOB.

    CHECK TG_BSAD_IMOB-BELNR EQ TG_BSAD_IMOB-AUGBL.

    READ TABLE TG_BKPF WITH KEY BUKRS = TG_BSAD_IMOB-BUKRS
                                BELNR = TG_BSAD_IMOB-AUGBL.

    CHECK ( SY-SUBRC = 0 ) AND ( TG_BKPF-STBLG IS INITIAL ).

    "Check se documento de compensação contém partidas de imobilizado.
    _IMOB_CHECK = ''.
    LOOP AT TG_BSIS WHERE BUKRS EQ TG_BSAD_IMOB-BUKRS
                      AND BELNR EQ TG_BSAD_IMOB-AUGBL
                      AND BSCHL IN R_BSCHL_IMOBILIZADO.
      _IMOB_CHECK = 'X'.
      EXIT.
    ENDLOOP.

    CHECK _IMOB_CHECK IS NOT INITIAL.

    "Carrega conta de variação da partida.
    "READ TABLE TG_T030H WITH KEY HKONT = TG_BSAD_IMOB-HKONT BINARY SEARCH.
    "CHECK ( SY-SUBRC = 0 ) AND ( TG_T030H-LHREA IS NOT INITIAL ).

    "Check se gerou variação no documento de compensação.
    _VAR_CHECK = ''.
    LOOP AT TG_BSE_CLR WHERE BUKRS_CLR EQ TG_BSAD_IMOB-BUKRS
                         AND BELNR_CLR EQ TG_BSAD_IMOB-AUGBL
                         AND ( ( RDIFF NE 0 ) OR ( RDIF2 NE 0 ) OR ( RDIF3 NE 0 ) ).
      _VAR_CHECK = 'X'.
    ENDLOOP.

    CHECK _VAR_CHECK IS NOT INITIAL.

    "Check se documento de compensação possui mais de um imobilizado. Caso tenha, não deve ser processado.
    CLEAR: TG_ANLA_COMP[].
    LOOP AT TG_BSAK WHERE BUKRS EQ TG_BSAD_IMOB-BUKRS
                      AND BELNR EQ TG_BSAD_IMOB-AUGBL
                      AND ANLN1 IS NOT INITIAL.

      CLEAR: TG_ANLA_COMP.
      TG_ANLA_COMP-ANLN1 = TG_BSAD_IMOB-ANLN1.
      TG_ANLA_COMP-ANLN2 = TG_BSAD_IMOB-ANLN2.
      APPEND TG_ANLA_COMP.
    ENDLOOP.

    SORT TG_ANLA_COMP                                   BY ANLN1 ANLN2.
    DELETE ADJACENT DUPLICATES FROM TG_ANLA_COMP COMPARING ANLN1 ANLN2.

    CHECK LINES( TG_ANLA_COMP[] ) EQ 1.

    READ TABLE TG_ANLA_COMP INDEX 1.

    "Check se possui um documento Contabil gerado.
    CLEAR: TG_0139[].
    SELECT *
      FROM ZFIT0139 INTO TABLE TG_0139
     WHERE BUKRS EQ TG_BSAD_IMOB-BUKRS
       AND AUGBL EQ TG_BSAD_IMOB-AUGBL.

    _CHECK_CTB_GER = ''.
    LOOP AT TG_0139 WHERE STBLG_GER IS INITIAL  "Não foi estornado
                      AND ANULADO   IS INITIAL. "Não foi anulado.
      _CHECK_CTB_GER = 'X'.
    ENDLOOP.

    CHECK _CHECK_CTB_GER IS INITIAL.

    _ZIB_GER = ''.
    PERFORM F_GERAR_DOC_CTB_IMOB USING TG_BSAD_IMOB-BUKRS
                                       TG_BSAD_IMOB-AUGBL
                                       TG_BSAD_IMOB-AUGDT
                                       TG_BSAD_IMOB-KUNNR
                                       TG_ANLA_COMP
                                       'K'
                              CHANGING _ZIB_GER.
  ENDLOOP.

  "Atualizar Documentos Contabeis
  V_DT_ATUALIZA = SY-DATUM - 2.
  PERFORM F_ATUALIZA_DOC_CTB USING V_DT_ATUALIZA.

  "Processar estornos
  PERFORM F_PROC_ESTORNO.


ENDFORM.


FORM F_ATUALIZA_DOC_CTB USING P_DATA_INI TYPE ERDAT.

  DATA: WL_ZIB_CHV TYPE ZIB_CONTABIL_CHV,
        WL_ZIB_ERR TYPE ZIB_CONTABIL_ERR.

  CHECK P_DATA_INI IS NOT INITIAL.

  "Pega Ultimo Seq Gerado
  SELECT *
    FROM ZFIT0139 INTO TABLE @DATA(_TG_0139)
   WHERE DT_REGISTRO >= @P_DATA_INI
     AND ST_PROC     EQ ''
     AND ANULADO     EQ ''.

  LOOP AT _TG_0139 INTO DATA(_WL_0139).

    PERFORM F_RETORNA_STATUS_ZIB USING _WL_0139-OBJ_KEY
                              CHANGING WL_ZIB_CHV
                                       WL_ZIB_ERR.

    DATA(_MODIFY) = ''.
    IF ( WL_ZIB_CHV IS NOT INITIAL ) AND ( WL_ZIB_CHV-BELNR IS NOT INITIAL ).
      _WL_0139-ST_PROC   = '1'. "Processado com sucesso
      _WL_0139-BELNR_GER = WL_ZIB_CHV-BELNR.
      _MODIFY = 'X'.
    ELSEIF ( WL_ZIB_ERR IS NOT INITIAL ).
      _WL_0139-ST_PROC   = '2'. "Erro no processamento
      _MODIFY = 'X'.
    ENDIF.

    IF _MODIFY = 'X'.
      MODIFY ZFIT0139 FROM _WL_0139.
    ENDIF.

  ENDLOOP.

ENDFORM.


FORM F_LIMPA_VARIAVEIS.

  CLEAR: TG_BSAK[],
         TG_BSAD[],
         TG_BSIS[],
         TG_BKPF[],
         TG_BSE_CLR[],
         TG_SKA1[].

ENDFORM.


FORM F_GERAR_DOC_CTB_IMOB USING P_BUKRS
                                P_AUGBL
                                P_AUGDT
                                P_PARID
                                P_IMOB TYPE TY_ANLA
                                P_KOART
                       CHANGING C_ZIB_GERADA.

  DATA: WL_ZIB_CONTABIL TYPE ZIB_CONTABIL,
        IT_ZIB_CONTABIL TYPE TABLE OF ZIB_CONTABIL,
        V_CALC_1        TYPE P DECIMALS 10,
        V_DMBTR_CTB     TYPE BSIS-DMBTR,
        WL_ZFIT0139     TYPE ZFIT0139,
        V_SEQITEM       TYPE ZIB_CONTABIL-SEQITEM.

  DATA: V_CTB_SEQ TYPE ZFIT0139-SEQ,
        DATA(10)  TYPE C,
        DIA(2)    TYPE C,
        MES(2)    TYPE C,
        ANO(4)    TYPE C.

  CLEAR: C_ZIB_GERADA, V_CTB_SEQ, IT_ZIB_CONTABIL[].

  SELECT SINGLE *
    FROM BKPF INTO @DATA(_WL_BKPF)
   WHERE BUKRS = @P_BUKRS
     AND BELNR = @P_AUGBL.

  CHECK SY-SUBRC = 0.

  "Pega Ultimo Seq Gerado
  SELECT *
    FROM ZFIT0139 INTO TABLE @DATA(_TG_0139)
   WHERE BUKRS   EQ @P_BUKRS
     AND AUGBL   EQ @P_AUGBL.

  SORT: _TG_0139 BY BUKRS AUGBL SEQ DESCENDING.
  LOOP AT _TG_0139 INTO DATA(_WL_0139).
    V_CTB_SEQ = _WL_0139-SEQ.
    EXIT.
  ENDLOOP.

  ADD 1 TO V_CTB_SEQ.

  DATA(V_OBJ_KEY) = 'VRAA' && P_BUKRS && P_AUGBL && V_CTB_SEQ.

  DIA = SY-DATUM+6(2).
  MES = SY-DATUM+4(2).
  ANO = SY-DATUM(4).

  CONCATENATE DIA '.' MES '.' ANO INTO DATA.

  SELECT SINGLE *
    FROM ZIB_CONTABIL INTO @DATA(_WL_ZIB)
   WHERE OBJ_KEY EQ @V_OBJ_KEY.

  CHECK ( SY-SUBRC NE 0 ).

  V_SEQITEM = 0.

  LOOP AT TG_BSIS_VAR WHERE BUKRS = P_BUKRS
                        AND BELNR = P_AUGBL.

    "----------------------------------------------------------------*
    " Reverte conta Variação
    "----------------------------------------------------------------*

    CLEAR: WL_ZIB_CONTABIL.

    ADD 1 TO V_SEQITEM.

    WL_ZIB_CONTABIL-OBJ_KEY     = V_OBJ_KEY.
    WL_ZIB_CONTABIL-SEQITEM     = V_SEQITEM.
    WL_ZIB_CONTABIL-BUKRS       = TG_BSIS_VAR-BUKRS.
    WL_ZIB_CONTABIL-HKONT       = TG_BSIS_VAR-HKONT.
    WL_ZIB_CONTABIL-ZUONR       = TG_BSIS_VAR-ZUONR.
    WL_ZIB_CONTABIL-BUDAT       = DATA.
    WL_ZIB_CONTABIL-BLDAT       = DATA.
    WL_ZIB_CONTABIL-BLART       = TG_BSIS_VAR-BLART.
    WL_ZIB_CONTABIL-MONAT       = MES.
    WL_ZIB_CONTABIL-GJAHR       = ANO.
    WL_ZIB_CONTABIL-GSBER       = TG_BSIS_VAR-GSBER.
    WL_ZIB_CONTABIL-WRBTR       = TG_BSIS_VAR-WRBTR.
    WL_ZIB_CONTABIL-DMBTR       = TG_BSIS_VAR-DMBTR.
    WL_ZIB_CONTABIL-DMBE2       = TG_BSIS_VAR-DMBE2.
    WL_ZIB_CONTABIL-DMBE3       = TG_BSIS_VAR-DMBE3.
    WL_ZIB_CONTABIL-WAERS       = TG_BSIS_VAR-WAERS.
    WL_ZIB_CONTABIL-WAERS_I     = 'X'.
    WL_ZIB_CONTABIL-WAERS_F     = _WL_BKPF-HWAE2.
    WL_ZIB_CONTABIL-WAERS_G     = _WL_BKPF-HWAE3.
    WL_ZIB_CONTABIL-INTERFACE   = '00'.
    WL_ZIB_CONTABIL-BKTXT       = 'Reclass. Conta Variação'.

    WL_ZIB_CONTABIL-BUPLA       = TG_BSIS_VAR-BUPLA.
    WL_ZIB_CONTABIL-KIDNO       = TG_BSIS_VAR-KIDNO.

    CASE TG_BSIS_VAR-BSCHL.
      WHEN '50'.
        WL_ZIB_CONTABIL-BSCHL       = '40'.
      WHEN '40'.
        WL_ZIB_CONTABIL-BSCHL       = '50'.
    ENDCASE.

    WL_ZIB_CONTABIL-RG_ATUALIZADO  = 'N'.
    APPEND WL_ZIB_CONTABIL TO IT_ZIB_CONTABIL.

    "----------------------------------------------------------------*
    " Lança na conta de Imobilizado
    "----------------------------------------------------------------*

    "Localiza partida de imobilizado no documento de compensação.
    DATA(_PART_IMOB) = ''.
    LOOP AT TG_BSIS WHERE BUKRS EQ P_BUKRS
                      AND BELNR EQ P_AUGBL
                      AND BSCHL IN R_BSCHL_IMOBILIZADO.
      _PART_IMOB = 'X'.
      EXIT.
    ENDLOOP.

    IF _PART_IMOB IS INITIAL.
      RETURN.
    ENDIF.

    CLEAR: WL_ZIB_CONTABIL.

    ADD 1 TO V_SEQITEM.

    WL_ZIB_CONTABIL-OBJ_KEY     = V_OBJ_KEY.
    WL_ZIB_CONTABIL-SEQITEM     = V_SEQITEM.
    WL_ZIB_CONTABIL-BUKRS       = TG_BSIS-BUKRS.
    WL_ZIB_CONTABIL-HKONT       = TG_BSIS-HKONT.
    WL_ZIB_CONTABIL-ZUONR       = TG_BSIS-ZUONR.
    WL_ZIB_CONTABIL-BUDAT       = DATA.
    WL_ZIB_CONTABIL-BLDAT       = DATA.
    WL_ZIB_CONTABIL-BLART       = TG_BSIS-BLART.
    WL_ZIB_CONTABIL-MONAT       = MES.
    WL_ZIB_CONTABIL-GJAHR       = ANO.
    WL_ZIB_CONTABIL-GSBER       = TG_BSIS-GSBER.
    WL_ZIB_CONTABIL-WRBTR       = TG_BSIS_VAR-WRBTR.
    WL_ZIB_CONTABIL-DMBTR       = TG_BSIS_VAR-DMBTR.
    WL_ZIB_CONTABIL-DMBE2       = TG_BSIS_VAR-DMBE2.
    WL_ZIB_CONTABIL-DMBE3       = TG_BSIS_VAR-DMBE3.
    WL_ZIB_CONTABIL-INTERFACE   = '00'.
    WL_ZIB_CONTABIL-BKTXT       = 'Reclass. Conta Variação'.
    WL_ZIB_CONTABIL-WAERS       = TG_BSIS_VAR-WAERS.
    WL_ZIB_CONTABIL-WAERS_I     = 'X'.
    WL_ZIB_CONTABIL-WAERS_F     = _WL_BKPF-HWAE2.
    WL_ZIB_CONTABIL-WAERS_G     = _WL_BKPF-HWAE3.
    WL_ZIB_CONTABIL-BUPLA       = TG_BSIS-BUPLA.
    WL_ZIB_CONTABIL-KIDNO       = TG_BSIS-KIDNO.
    WL_ZIB_CONTABIL-ANLN1       = P_IMOB-ANLN1.
    WL_ZIB_CONTABIL-ANLN2       = P_IMOB-ANLN2.
    CASE TG_BSIS_VAR-BSCHL.
      WHEN '50'.
        WL_ZIB_CONTABIL-BSCHL       = '75'.
      WHEN '40'.
        WL_ZIB_CONTABIL-BSCHL       = '70'.
    ENDCASE.

    WL_ZIB_CONTABIL-RG_ATUALIZADO  = 'N'.
    APPEND WL_ZIB_CONTABIL TO IT_ZIB_CONTABIL.

  ENDLOOP.

  CHECK IT_ZIB_CONTABIL[] IS NOT INITIAL.

  INSERT ZIB_CONTABIL FROM TABLE IT_ZIB_CONTABIL.

  IF ( SY-SUBRC NE 0 ).
    ROLLBACK WORK.
    RETURN.
  ENDIF.

  CLEAR: WL_ZFIT0139.
  WL_ZFIT0139-BUKRS       = P_BUKRS.
  WL_ZFIT0139-AUGBL       = P_AUGBL.
  WL_ZFIT0139-AUGDT       = P_AUGDT.
  WL_ZFIT0139-SEQ         = V_CTB_SEQ.
  WL_ZFIT0139-OBJ_KEY     = V_OBJ_KEY.
  WL_ZFIT0139-GJAHR_GER   = SY-DATUM(4).

  CASE P_KOART.
    WHEN 'D'.
      WL_ZFIT0139-KUNNR = P_PARID.
    WHEN 'K'.
      WL_ZFIT0139-LIFNR = P_PARID.
  ENDCASE.

  WL_ZFIT0139-DT_REGISTRO = SY-DATUM.
  WL_ZFIT0139-HR_REGISTRO = SY-UZEIT.

  MODIFY ZFIT0139 FROM WL_ZFIT0139.
  IF ( SY-SUBRC EQ 0 ).
    C_ZIB_GERADA = 'X'.
  ELSE.
    ROLLBACK WORK.
    RETURN.
  ENDIF.

ENDFORM.

FORM F_RETORNA_STATUS_ZIB USING P_OBJKEY TYPE ZIB_CONTABIL-OBJ_KEY
                       CHANGING P_ZIBCHV TYPE ZIB_CONTABIL_CHV
                                P_ZIBERR TYPE ZIB_CONTABIL_ERR.

  CLEAR: P_ZIBCHV, P_ZIBERR.

  CHECK P_OBJKEY IS NOT INITIAL.

  SELECT SINGLE *
    FROM ZIB_CONTABIL_CHV INTO P_ZIBCHV
   WHERE OBJ_KEY = P_OBJKEY.

  IF ( SY-SUBRC NE 0 ).
    SELECT SINGLE *
      FROM ZIB_CONTABIL_ERR INTO P_ZIBERR
     WHERE OBJ_KEY = P_OBJKEY.
  ENDIF.

ENDFORM.


FORM F_PROC_ESTORNO.

  DATA: TG_0139_ESTORNO TYPE TABLE OF ZFIT0139 WITH HEADER LINE.

  DATA: V_STBLG TYPE BKPF-STBLG.

  RANGES: R_DATA_ESTORNO FOR BKPF-CPUDT.

  R_DATA_ESTORNO-SIGN   = 'I'.

  IF P_BUDAT-LOW IS NOT INITIAL.
    R_DATA_ESTORNO-OPTION = 'EQ'.
    R_DATA_ESTORNO-LOW    = P_BUDAT-LOW.
  ELSE.
    R_DATA_ESTORNO-OPTION = 'GE'.
    R_DATA_ESTORNO-LOW    = SY-DATUM - 1.
  ENDIF.

  APPEND R_DATA_ESTORNO.

  SELECT *
    FROM BKPF AS A INTO TABLE @DATA(_TG_BKPF)
   WHERE A~CPUDT IN @R_DATA_ESTORNO
     AND A~STBLG NE ''
     AND EXISTS ( SELECT BELNR
                    FROM ZFIT0139 AS B
                   WHERE B~BUKRS  = A~BUKRS
                     AND B~AUGBL  = A~STBLG ).

  LOOP AT _TG_BKPF INTO DATA(_WL_BKPF).

    CHECK _WL_BKPF-STBLG IS NOT INITIAL.

    CLEAR: TG_0139_ESTORNO[].

    SELECT *
      FROM ZFIT0139 INTO TABLE TG_0139_ESTORNO
     WHERE BUKRS  = _WL_BKPF-BUKRS
       AND AUGBL  = _WL_BKPF-STBLG.

    LOOP AT TG_0139_ESTORNO WHERE STBLG_GER IS INITIAL     "Não foi estornado
                              AND ANULADO   IS INITIAL.    "Não foi anulado.

      UPDATE ZFIT0139 SET ESTORNADO = 'X'
       WHERE OBJ_KEY EQ TG_0139_ESTORNO-OBJ_KEY.

      COMMIT WORK.


      PERFORM F_ESTORNO_CTB USING TG_0139_ESTORNO-BUKRS
                                  TG_0139_ESTORNO-BELNR_GER
                                  TG_0139_ESTORNO-GJAHR_GER
                                  _WL_BKPF-BUDAT "Data do Estorno
                                  TG_0139_ESTORNO-OBJ_KEY
                         CHANGING V_STBLG.

      IF V_STBLG IS NOT INITIAL.
        UPDATE ZFIT0139 SET STBLG_GER = V_STBLG
                            ESTORNADO = 'X'
         WHERE OBJ_KEY EQ TG_0139_ESTORNO-OBJ_KEY.
      ENDIF.
    ENDLOOP.

  ENDLOOP.

ENDFORM.


FORM F_ESTORNO_CTB USING P_BUKRS
                         P_BELNR
                         P_GJAHR
                         P_DATA
                         P_OBJ_KEY
                CHANGING P_STBLG.

  DATA: IT_DTA   TYPE STANDARD TABLE OF BDCDATA,
        WA_DTA   TYPE BDCDATA,
        WG_BDC   TYPE BDCDATA,
        TG_BDC   TYPE TABLE OF BDCDATA,
        TG_MSG   TYPE TABLE OF BDCMSGCOLL,
        WG_MSG   TYPE BDCMSGCOLL,
        OPT      TYPE CTU_PARAMS,
        VL_STBLG TYPE BKPF-STBLG,
        VL_DATA  TYPE DATS.

  DATA:  IT_DOCUMENT  TYPE TABLE OF ZFIE_DOCUMENT INITIAL SIZE 0 WITH HEADER LINE.
  DATA:  W_DOCUMENT  TYPE ZFIE_DOCUMENT.
  DATA: W_ZIB_CONTABIL TYPE ZIB_CONTABIL.
  DATA: T_ZIB_CONTABIL TYPE TABLE OF ZIB_CONTABIL.
  DATA: XOBJKEY TYPE ZIB_CONTABIL-OBJ_KEY.
  DATA: Z_COD_CHAV TYPE CHAR05,
        W_OBJ_KEY  TYPE CHAR15.

  CLEAR: P_STBLG.

  CHECK ( P_BUKRS IS NOT INITIAL ) AND
        ( P_BELNR IS NOT INITIAL ) AND
        ( P_GJAHR IS NOT INITIAL ) AND
        ( P_DATA  IS NOT INITIAL ).

  SELECT SINGLE *
    FROM BKPF INTO @DATA(_WL_BKPF)
   WHERE BUKRS = @P_BUKRS
     AND BELNR = @P_BELNR.

  CHECK SY-SUBRC = 0.

  CONCATENATE _WL_BKPF-BUDAT+6(2) _WL_BKPF-BUDAT+4(2) _WL_BKPF-BUDAT(4) INTO VL_DATA.

*  FREE: IT_DTA.
*  DEFINE SHDB.
*    CLEAR WA_DTA.
*    WA_DTA-PROGRAM   = &1.
*    WA_DTA-DYNPRO    = &2.
*    WA_DTA-DYNBEGIN  = &3.
*    WA_DTA-FNAM      = &4.
*    WA_DTA-FVAL      = &5.
*    APPEND WA_DTA TO IT_DTA.
*  END-OF-DEFINITION.
*
*  SHDB:
*  'SAPMF05A' '0105' 'X'  ' '           ' ',
*  ' '        ' '    ' '  'BDC_CURSOR'  'UF05A-STGRD',
*  ' '        ' '    ' '  'BDC_OKCODE'  '=BU',
*  ' '        ' '    ' '  'RF05A-BELNS' P_BELNR ,
*  ' '        ' '    ' '  'BKPF-BUKRS'  P_BUKRS,
*  ' '        ' '    ' '  'RF05A-GJAHS' P_GJAHR,
*  ' '        ' '    ' '  'UF05A-STGRD' '02',
*  ' '        ' '    ' '  'BSIS-BUDAT'  VL_DATA.
*
*  OPT-DISMODE = 'N'.
*  CALL TRANSACTION 'FB08' USING IT_DTA OPTIONS FROM OPT.
*
*  SELECT SINGLE STBLG
*    FROM BKPF INTO VL_STBLG
*   WHERE BUKRS = P_BUKRS
*     AND BELNR = P_BELNR
*     AND GJAHR = P_GJAHR.
*
*  CHECK ( SY-SUBRC = 0 ) AND ( VL_STBLG IS NOT INITIAL ).

  "Construi a chave de referencia.
  W_OBJ_KEY   = P_OBJ_KEY+5(15).
  Z_COD_CHAV  = |{ P_OBJ_KEY(4) }E|.
  W_OBJ_KEY = |{ W_OBJ_KEY ALPHA = IN }|.
  XOBJKEY   = |{ Z_COD_CHAV }{ W_OBJ_KEY }|.

  SELECT *
  FROM ZIB_CONTABIL
  INTO TABLE T_ZIB_CONTABIL
    WHERE OBJ_KEY EQ P_OBJ_KEY.

  IF T_ZIB_CONTABIL IS NOT INITIAL.
    LOOP AT T_ZIB_CONTABIL ASSIGNING FIELD-SYMBOL(<L_ZIB>).

      <L_ZIB>-OBJ_KEY = XOBJKEY.

      CASE <L_ZIB>-BSCHL.
        WHEN '40'.
          <L_ZIB>-BSCHL = '50'.
        WHEN '50'.
          <L_ZIB>-BSCHL = '40'.
        WHEN '70'.
          <L_ZIB>-BSCHL = '75'.
        WHEN '75'.
          <L_ZIB>-BSCHL = '70'.
        WHEN OTHERS.
      ENDCASE.

      <L_ZIB>-BUDAT         = |{ SY-DATUM+6(02) }.{ SY-DATUM+4(2) }.{ SY-DATUM(4) }|.
      <L_ZIB>-BLDAT         = |{ VL_DATA(2) }.{ VL_DATA+2(2) }.{ VL_DATA+4(4) }|.
      <L_ZIB>-MONAT         = |{ SY-DATUM+4(2) }|.
      <L_ZIB>-GJAHR         = |{ SY-DATUM(4) }|.
      <L_ZIB>-RG_ATUALIZADO = 'N'.

      MOVE-CORRESPONDING <L_ZIB> TO W_DOCUMENT.
      APPEND W_DOCUMENT TO IT_DOCUMENT.
      CLEAR: W_DOCUMENT.
    ENDLOOP.

    "Gravar na zib_contabil.
    MODIFY ZIB_CONTABIL FROM TABLE T_ZIB_CONTABIL.
    COMMIT WORK.
  ENDIF.

  "Processar dado """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  CALL FUNCTION 'Z_FI_MANYDOCUMENT_PROCESSA'
    TABLES
      IT_DOCUMENT = IT_DOCUMENT.
  COMMIT WORK AND WAIT.

*  LOOP AT IT_DOCUMENT ASSIGNING FIELD-SYMBOL(<W_DOC>).
  SELECT SINGLE * INTO @DATA(E_DOCUMENTO)
    FROM BKPF
   WHERE AWKEY EQ @XOBJKEY.

  IF SY-SUBRC IS NOT INITIAL.
    SELECT * APPENDING TABLE @DATA(E_ERROS)
      FROM ZIB_CONTABIL_ERR
     WHERE OBJ_KEY EQ @XOBJKEY.
  ELSE.
    P_STBLG = E_DOCUMENTO-BELNR.
  ENDIF.

  CLEAR: XOBJKEY.
*  ENDLOOP.

ENDFORM.
