*&---------------------------------------------------------------------*
*& Report  ZLESR0097
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZLESR0097.

TABLES: ZLEST0019, MAKT, ZDE_FERROVIARIO_NOTAS2_ALV.

*&--------------------------------------------------------------------&*
*& Classes Locais                                                     &*
*&--------------------------------------------------------------------&*

*---------- Definition -----------------------------------------------*
CLASS LCL_EVENT_HANDLER_0001 DEFINITION.
  PUBLIC SECTION.
    METHODS HANDLE_HOTSPOT_CLICK FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID IMPORTING E_COLUMN_ID ES_ROW_NO.
ENDCLASS.                    "lcl_event_handler DEFINITION

DATA: EVENT_HANDLER_0001      TYPE REF TO LCL_EVENT_HANDLER_0001.

*---------- Implementation -------------------------------------------*
CLASS LCL_EVENT_HANDLER_0001 IMPLEMENTATION.
  METHOD HANDLE_HOTSPOT_CLICK.
    PERFORM HANDLE_HOTSPOT_CLICK_0001 USING ES_ROW_NO-ROW_ID E_COLUMN_ID-FIELDNAME.
  ENDMETHOD.                    "handle_hotspot_click
ENDCLASS.                    "lcl_event_handler IMPLEMENTATION

DATA: OK_CODE       TYPE SY-UCOMM.

DATA: CTL_CON_0001       TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      GS_LAY_0001        TYPE LVC_S_LAYO,
      GS_VAR_0001        TYPE DISVARIANT,
      GS_SCROLL_COL_0001 TYPE LVC_S_COL,
      GS_SCROLL_ROW_0001 TYPE LVC_S_ROID,
      IT_CATALOG_0001    TYPE LVC_T_FCAT,
      CTL_ALV_0001       TYPE REF TO CL_GUI_ALV_GRID.

DATA: IT_EXCLUDE_0001 TYPE UI_FUNCTIONS,
      WA_EXCLUDE_0001 LIKE LINE OF IT_EXCLUDE_0001.

DATA: IT_ZLEST0019_L2_20 TYPE TABLE OF ZLEST0019_L2_20 WITH HEADER LINE,
      IT_ZLEST0019_L2_30 TYPE TABLE OF ZLEST0019_L2_30 WITH HEADER LINE,
      IT_ZLEST0019_L3_20 TYPE TABLE OF ZLEST0019_L3_20 WITH HEADER LINE,
      IT_ZLEST0019_L3_30 TYPE TABLE OF ZLEST0019_L3_30 WITH HEADER LINE,
      IT_T001            TYPE TABLE OF T001            WITH HEADER LINE,
      IT_J_1BBRANCH      TYPE TABLE OF J_1BBRANCH      WITH HEADER LINE,
      IT_LFA1            TYPE TABLE OF LFA1            WITH HEADER LINE,
      IT_NOTAS_ALV       TYPE TABLE OF ZDE_FERROVIARIO_NOTAS2_ALV WITH HEADER LINE,
      IT_MAKT            TYPE TABLE OF MAKT WITH HEADER LINE.

SELECTION-SCREEN: BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
PARAMETERS:     P_BASE   TYPE ZLEST0019-ERDAT DEFAULT SY-DATUM OBLIGATORY.
SELECT-OPTIONS: P_ERDATS FOR ZLEST0019-ERDAT   NO-EXTENSION, " Período data Saída
                P_ERDATC FOR ZLEST0019-ERDAT   NO-EXTENSION. " Período data Chegada
SELECTION-SCREEN: END OF BLOCK B1.

SELECTION-SCREEN: BEGIN OF BLOCK B3 WITH FRAME TITLE TEXT-003.
SELECT-OPTIONS: P_ZPLACA FOR ZLEST0019-IDVAGAO, "NO-EXTENSION NO INTERVALS, " Placa do Vagão
                P_DCL    FOR ZLEST0019-DCL. "NO-EXTENSION NO INTERVALS. " DCL
SELECTION-SCREEN: END OF BLOCK B3.

SELECTION-SCREEN: BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-005.
SELECT-OPTIONS: P_BUKRS  FOR ZLEST0019-BUKRS  NO-EXTENSION NO INTERVALS, " Empresa
                P_WERKS  FOR ZLEST0019-BRANCH NO-EXTENSION NO INTERVALS, " Filial de Carregamento
                P_MATNR  FOR MAKT-MATNR       NO-EXTENSION NO INTERVALS, " Material
                P_NFENUM FOR ZLEST0019-NFENUM NO-EXTENSION NO INTERVALS. "Número de Nota Fiscal
SELECTION-SCREEN: END OF BLOCK B2.

*SELECTION-SCREEN: BEGIN OF BLOCK B6 WITH FRAME TITLE TEXT-006.
*PARAMETERS: CK_CARGA AS CHECKBOX.
*SELECTION-SCREEN: END OF BLOCK B6.

START-OF-SELECTION.

  DATA: IT_DCLS       TYPE ZDE_DCL_RANGES_T,
        WA_DCL        TYPE ZDE_DCL_RANGES,
        QTD_REGISTROS TYPE I,
        VG_TABIX      TYPE SY-TABIX.

  CLEAR: IT_DCLS, IT_NOTAS_ALV[], IT_LFA1[].

*  IF CK_CARGA IS NOT INITIAL.
*    PERFORM CARGA_DE_TABELAS(ZLESR0095).
*    RETURN.
*  ENDIF.

  LOOP AT P_DCL.
    MOVE-CORRESPONDING P_DCL TO WA_DCL.

    IF WA_DCL-LOW IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = WA_DCL-LOW
        IMPORTING
          OUTPUT = WA_DCL-LOW.
    ENDIF.

    IF WA_DCL-HIGH IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = WA_DCL-HIGH
        IMPORTING
          OUTPUT = WA_DCL-HIGH.
    ENDIF.
    APPEND WA_DCL TO IT_DCLS.
  ENDLOOP.

  SELECT * INTO TABLE IT_ZLEST0019_L2_20
    FROM ZLEST0019_L2_20
   WHERE ERDAT      LE P_BASE
     AND DTADECARGA IN P_ERDATS
     AND IDVAGAO    IN P_ZPLACA
     AND DCL        IN IT_DCLS.

  CHECK SY-SUBRC IS INITIAL.

  SORT IT_ZLEST0019_L2_20 BY IDVAGAO DCL.

  SELECT * INTO TABLE IT_LFA1
    FROM LFA1
     FOR ALL ENTRIES IN IT_ZLEST0019_L2_20
   WHERE STCD1 EQ IT_ZLEST0019_L2_20-CNPJFERRO.

  SORT IT_LFA1 BY STCD1.

  SELECT * INTO TABLE IT_ZLEST0019_L2_30
    FROM ZLEST0019_L2_30
     FOR ALL ENTRIES IN IT_ZLEST0019_L2_20
   WHERE DCL       EQ IT_ZLEST0019_L2_20-DCL
     AND ID_REFKEY EQ IT_ZLEST0019_L2_20-ID_REFKEY
     AND BUKRS     IN P_BUKRS
     AND BRANCH    IN P_WERKS
     AND NFENUM    IN P_NFENUM
     AND MATNR     IN P_MATNR.

  CHECK SY-SUBRC IS INITIAL.

  SELECT * INTO TABLE IT_MAKT
    FROM MAKT
    FOR ALL ENTRIES IN IT_ZLEST0019_L2_30
   WHERE SPRAS EQ SY-LANGU
     AND MATNR EQ IT_ZLEST0019_L2_30-MATNR.

  SORT IT_MAKT BY MATNR.

  IF IT_ZLEST0019_L2_20[] IS NOT INITIAL.

    SELECT * INTO TABLE IT_ZLEST0019_L3_20
      FROM ZLEST0019_L3_20
       FOR ALL ENTRIES IN IT_ZLEST0019_L2_20
     WHERE ERDAT     LE P_BASE
       AND IDVAGAO   EQ IT_ZLEST0019_L2_20-IDVAGAO
       AND DCL       EQ IT_ZLEST0019_L2_20-DCL.

    IF SY-SUBRC IS INITIAL.
      SELECT * INTO TABLE IT_ZLEST0019_L3_30
        FROM ZLEST0019_L3_30
         FOR ALL ENTRIES IN IT_ZLEST0019_L3_20
       WHERE DCL         EQ IT_ZLEST0019_L3_20-DCL
         AND CNPJFERRO   EQ IT_ZLEST0019_L3_20-CNPJFERRO
         AND ID_REFKEY   EQ IT_ZLEST0019_L3_20-ID_REFKEY
         AND DTACHEGADA  IN P_ERDATC.
    ENDIF.

    SORT IT_ZLEST0019_L3_20 BY IDVAGAO DCL.
    SORT IT_ZLEST0019_L3_30 BY DCL CNPJFERRO ID_REFKEY BUKRS BRANCH NFENUM NFNUM.

  ENDIF.


  DESCRIBE TABLE IT_ZLEST0019_L2_20 LINES QTD_REGISTROS.

  PERFORM MOSTRA_TEXTO_P USING 'Gerando Relatório' QTD_REGISTROS 0.

  LOOP AT IT_ZLEST0019_L2_20.

    VG_TABIX = SY-TABIX.

    CLEAR: IT_NOTAS_ALV.
    IT_NOTAS_ALV-DCL        = IT_ZLEST0019_L2_20-DCL.
    IT_NOTAS_ALV-SERIEDCL   = IT_ZLEST0019_L2_20-SERIEDCL.
    IT_NOTAS_ALV-FORN_CNPJ  = IT_ZLEST0019_L2_20-CNPJFERRO.

    READ TABLE IT_LFA1 WITH KEY STCD1 = IT_NOTAS_ALV-FORN_CNPJ BINARY SEARCH.
    IF SY-SUBRC IS INITIAL.
      IT_NOTAS_ALV-FORN_NAME = IT_LFA1-NAME1.
    ENDIF.

    IT_NOTAS_ALV-IDVAGAO    = IT_ZLEST0019_L2_20-IDVAGAO.
    LOOP AT IT_ZLEST0019_L2_30 WHERE DCL       EQ IT_ZLEST0019_L2_20-DCL
                                 AND ID_REFKEY EQ IT_ZLEST0019_L2_20-ID_REFKEY.

      CLEAR: IT_NOTAS_ALV-BUKRS,
             IT_NOTAS_ALV-BRANCH,
             IT_NOTAS_ALV-CD_MATERIAL,
             IT_NOTAS_ALV-DS_MATERIAL,
             IT_NOTAS_ALV-DOCNUM,
             IT_NOTAS_ALV-NFENUM,
             IT_NOTAS_ALV-PESO_NOTA,
             IT_NOTAS_ALV-SAI_DT_SAIDA,
             IT_NOTAS_ALV-SAI_PS_SAIDA,
             IT_NOTAS_ALV-DIFERENCA_PESO,
             IT_NOTAS_ALV-CHG_DT_CHEGADA,
             IT_NOTAS_ALV-CHG_PS_CHEGADA.

      IT_NOTAS_ALV-BUKRS         = IT_ZLEST0019_L2_30-BUKRS.
      IT_NOTAS_ALV-BRANCH        = IT_ZLEST0019_L2_30-BRANCH.
      IT_NOTAS_ALV-CD_MATERIAL   = IT_ZLEST0019_L2_30-MATNR.

      READ TABLE IT_MAKT WITH KEY MATNR = IT_ZLEST0019_L2_30-MATNR BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        IT_NOTAS_ALV-DS_MATERIAL = IT_MAKT-MAKTX.
      ENDIF.
      IT_NOTAS_ALV-DOCNUM        = IT_ZLEST0019_L2_30-DOCNUM.
      IT_NOTAS_ALV-NFENUM        = IT_ZLEST0019_L2_30-NFENUM.
      IT_NOTAS_ALV-PESO_NOTA     = IT_ZLEST0019_L2_30-PESONF.
      IT_NOTAS_ALV-SAI_DT_SAIDA  = IT_ZLEST0019_L2_20-DTADECARGA.
      IT_NOTAS_ALV-SAI_PS_SAIDA  = IT_ZLEST0019_L2_30-PESODVAGAO.
      IT_NOTAS_ALV-DIFERENCA_PESO = 0.

      READ TABLE IT_ZLEST0019_L3_20 WITH KEY IDVAGAO = IT_ZLEST0019_L2_20-IDVAGAO
                                             DCL     = IT_ZLEST0019_L2_20-DCL BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        READ TABLE IT_ZLEST0019_L3_30
        WITH KEY DCL       = IT_ZLEST0019_L3_20-DCL
                 CNPJFERRO = IT_ZLEST0019_L3_20-CNPJFERRO
                 ID_REFKEY = IT_ZLEST0019_L3_20-ID_REFKEY
                 BUKRS     = IT_ZLEST0019_L2_30-BUKRS
                 BRANCH    = IT_ZLEST0019_L2_30-BRANCH
                 NFENUM    = IT_ZLEST0019_L2_30-NFENUM
                 NFNUM     = IT_ZLEST0019_L2_30-NFNUM BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          IT_NOTAS_ALV-CHG_DT_CHEGADA = IT_ZLEST0019_L3_30-DTACHEGADA.
          IT_NOTAS_ALV-CHG_PS_CHEGADA = IT_ZLEST0019_L3_30-PESODVAGAO.
          IT_NOTAS_ALV-DIFERENCA_PESO = IT_NOTAS_ALV-CHG_PS_CHEGADA - IT_NOTAS_ALV-SAI_PS_SAIDA.
        ELSE.
          IT_NOTAS_ALV-CHG_DT_CHEGADA = IT_ZLEST0019_L3_20-DTADECARGA.
          IT_NOTAS_ALV-CHG_PS_CHEGADA = 0.
          IT_NOTAS_ALV-DIFERENCA_PESO = IT_NOTAS_ALV-CHG_PS_CHEGADA - IT_NOTAS_ALV-SAI_PS_SAIDA.
        ENDIF.
      ENDIF.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          INPUT  = IT_NOTAS_ALV-DCL
        IMPORTING
          OUTPUT = IT_NOTAS_ALV-DCL.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          INPUT  = IT_NOTAS_ALV-NFENUM
        IMPORTING
          OUTPUT = IT_NOTAS_ALV-NFENUM.

      IF P_ERDATC IS NOT INITIAL.
        IF IT_NOTAS_ALV-CHG_DT_CHEGADA GE P_ERDATC-LOW AND IT_NOTAS_ALV-CHG_DT_CHEGADA LE P_ERDATC-HIGH.
          APPEND IT_NOTAS_ALV.
        ENDIF.
      ELSE.
        APPEND IT_NOTAS_ALV.
      ENDIF.

    ENDLOOP.

    PERFORM MOSTRA_TEXTO_P USING 'Gerando Relatório' QTD_REGISTROS VG_TABIX.

  ENDLOOP.

  IF IT_NOTAS_ALV[] IS NOT INITIAL.
    CALL SCREEN 0001.
  ENDIF.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0001 OUTPUT.
  SET PF-STATUS 'PF0001'.
  SET TITLEBAR 'TL001'.

                                                            "ALV_0001
  IF CTL_CON_0001 IS INITIAL.

    CREATE OBJECT CTL_CON_0001
      EXPORTING
        CONTAINER_NAME = 'ALV_0001'.

    CREATE OBJECT CTL_ALV_0001
      EXPORTING
        I_PARENT = CTL_CON_0001.

    PERFORM FILL_IT_FIELDCATALOG_0001.
*   Fill info for layout variant

    PERFORM FILL_GS_VARIANT_0001.
*   Set layout parameters for ALV grid

    GS_LAY_0001-SEL_MODE   = 'A'.
    GS_LAY_0001-ZEBRA      = ABAP_TRUE.

    CALL METHOD CTL_ALV_0001->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAY_0001
        IS_VARIANT           = GS_VAR_0001
        I_DEFAULT            = SPACE
        I_SAVE               = 'A'
        IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_0001
      CHANGING
        IT_FIELDCATALOG      = IT_CATALOG_0001
        IT_OUTTAB            = IT_NOTAS_ALV[].

    CALL METHOD CTL_ALV_0001->REFRESH_TABLE_DISPLAY.

    CREATE OBJECT EVENT_HANDLER_0001.
    SET HANDLER EVENT_HANDLER_0001->HANDLE_HOTSPOT_CLICK FOR CTL_ALV_0001.

  ELSE.
    CALL METHOD CTL_ALV_0001->REFRESH_TABLE_DISPLAY.
  ENDIF.

  CALL METHOD CTL_ALV_0001->GET_SCROLL_INFO_VIA_ID
    IMPORTING
      ES_COL_INFO = GS_SCROLL_COL_0001
      ES_ROW_NO   = GS_SCROLL_ROW_0001.


ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0001_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0001_EXIT INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG_0001
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG_0001 .

  DATA: LC_COL_POS TYPE LVC_COLPOS.

  FIELD-SYMBOLS: <FS_CAT_0001> TYPE LVC_S_FCAT.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_FERROVIARIO_NOTAS2_ALV'
    CHANGING
      CT_FIELDCAT      = IT_CATALOG_0001.

  LC_COL_POS = 1.

  LOOP AT IT_CATALOG_0001 ASSIGNING <FS_CAT_0001>.
    <FS_CAT_0001>-COL_POS = LC_COL_POS.
    <FS_CAT_0001>-TABNAME = 'IT_NOTAS_ALV'.
    ADD 1 TO LC_COL_POS.

    IF <FS_CAT_0001>-FIELDNAME EQ 'DOCNUM'.
      <FS_CAT_0001>-HOTSPOT = ABAP_TRUE.
    ENDIF.

    CASE <FS_CAT_0001>-DATATYPE.
      WHEN 'QUAN'.
        <FS_CAT_0001>-DO_SUM    = ABAP_TRUE.
        <FS_CAT_0001>-OUTPUTLEN = 15.
      WHEN 'CURR'.
        <FS_CAT_0001>-DO_SUM    = ABAP_TRUE.
        <FS_CAT_0001>-OUTPUTLEN = 15.
    ENDCASE.
  ENDLOOP.

ENDFORM.                    " FILL_IT_FIELDCATALOG_0001

*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT_0001
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FILL_GS_VARIANT_0001 .

  GS_VAR_0001-REPORT      = SY-REPID.
  GS_VAR_0001-HANDLE      = '0001'.
  GS_VAR_0001-LOG_GROUP   = ABAP_FALSE.
  GS_VAR_0001-USERNAME    = ABAP_FALSE.
  GS_VAR_0001-VARIANT     = ABAP_FALSE.
  GS_VAR_0001-TEXT        = ABAP_FALSE.
  GS_VAR_0001-DEPENDVARS  = ABAP_FALSE.

ENDFORM.                    " FILL_GS_VARIANT_0001

*&---------------------------------------------------------------------*
*&      Form  MOSTRA_TEXTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_2463   text
*----------------------------------------------------------------------*
FORM MOSTRA_TEXTO_P  USING P_TEXTO
                           P_TOTAL   TYPE I
                           P_POSICAO TYPE I.

  DATA: VMSG(100),
        P_PERCENTAGE(20),
        P_PERCE TYPE I.

  MOVE P_TEXTO TO VMSG.

  IF P_TOTAL NE 0.
    P_PERCE = ( P_POSICAO * 100 ) / P_TOTAL.
  ENDIF.

  WRITE P_PERCE TO P_PERCENTAGE.

  CALL FUNCTION 'TH_REDISPATCH'.

  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = P_PERCENTAGE
      TEXT       = VMSG.

ENDFORM.                    " MOSTRA_TEXTO

*&---------------------------------------------------------------------*
*&      Form  MOSTRA_TEXTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_2463   text
*----------------------------------------------------------------------*
FORM MOSTRA_TEXTO  USING  P_TEXTO.

  DATA: VMSG(50).

  MOVE P_TEXTO TO VMSG.

  CALL FUNCTION 'TH_REDISPATCH'.

  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      TEXT = VMSG.

ENDFORM.                    " MOSTRA_TEXTO

*&---------------------------------------------------------------------*
*&      Form  HANDLE_HOTSPOT_CLICK_0001
*&---------------------------------------------------------------------*
FORM HANDLE_HOTSPOT_CLICK_0001
         USING VALUE(ROW_ID)    LIKE LVC_S_ROID-ROW_ID
               VALUE(FIELDNAME) LIKE LVC_S_COL-FIELDNAME.

  READ TABLE IT_NOTAS_ALV INDEX ROW_ID INTO IT_NOTAS_ALV.

  CASE FIELDNAME.
    WHEN 'DOCNUM'.
      PERFORM MOSTRAR_DOC_FISCAL USING IT_NOTAS_ALV-DOCNUM.
  ENDCASE.

ENDFORM.                    " HANDLE_HOTSPOT_CLICK

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DOC_FISCAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_CTE_ALV_  text
*----------------------------------------------------------------------*
FORM MOSTRAR_DOC_FISCAL  USING P_FISCAL TYPE J_1BDOCNUM.

  DATA: GF_NFOBJN LIKE J_1BINTERF-NFOBJN.

  CHECK P_FISCAL IS NOT INITIAL.

  CALL FUNCTION 'J_1B_NF_DOC_READ_INTO_OBJECT'
    EXPORTING
      DOC_NUMBER         = P_FISCAL
    IMPORTING
      OBJ_NUMBER         = GF_NFOBJN
    EXCEPTIONS
      DOCUMENT_NOT_FOUND = 1
      DOCUM_LOCK         = 2
      OTHERS             = 3.

  CALL FUNCTION 'J_1B_NF_OBJECT_DISPLAY'
    EXPORTING
      OBJ_NUMBER         = GF_NFOBJN
    EXCEPTIONS
      OBJECT_NOT_FOUND   = 1
      SCR_CTRL_NOT_FOUND = 2
      OTHERS             = 3.

ENDFORM.                    " MOSTRAR_DOC_FISCAL
