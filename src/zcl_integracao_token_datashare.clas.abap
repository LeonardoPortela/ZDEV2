CLASS ZCL_INTEGRACAO_TOKEN_DATASHARE DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES ZIF_INTEGRACAO_INJECT .
    INTERFACES ZIF_INTEGRACAO_TOKEN_DATASHARE .

    METHODS CONSTRUCTOR .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_INTEGRACAO_TOKEN_DATASHARE IMPLEMENTATION.


  METHOD CONSTRUCTOR.

    ME->ZIF_INTEGRACAO_INJECT~AT_ID_INTERFACE    = ZIF_INTEGRACAO=>AT_ID_INTERFACE_DATASHARE.
    ME->ZIF_INTEGRACAO_INJECT~AT_TP_INTEGRACAO   = ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_OUTBOUND.
    ME->ZIF_INTEGRACAO_INJECT~AT_TP_CANAL        = ZIF_INTEGRACAO=>AT_TP_CANAL_COMUNICA_HTTP.
    ME->ZIF_INTEGRACAO_INJECT~AT_TP_SINCRONIA    = ZIF_INTEGRACAO=>AT_TP_SINCRONIA_SINCRONA.
    ME->ZIF_INTEGRACAO_INJECT~AT_AUTENTICA_OPUS  = ZIF_INTEGRACAO=>AT_ID_INTERFACE_AUT_OPUS_NAO.
    ME->ZIF_INTEGRACAO_INJECT~AT_SEND_AUTENTICAO = ZIF_INTEGRACAO=>AT_ID_INTERFACE_AUT_SEND_SIM.
    ME->ZIF_INTEGRACAO_INJECT~AT_AUTENTICA_MODULE = 'datasharing'.

    ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_NOT_CONTENT_LENGTH = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~GET_FORM_REQUEST_HTTP.
    R_IF_INTEGRACAO_INJECT = ME.
    E_FORM_FIELDS = ME->ZIF_INTEGRACAO_INJECT~AT_FORM_FIELDS.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~GET_HEADER_REQUEST_HTTP.
    R_IF_INTEGRACAO_INJECT = ME.
    E_HEADER_FIELDS = ME->ZIF_INTEGRACAO_INJECT~AT_HEADER_FIELDS.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_BEFORE_ERROR_OUTBOUND_MSG.
    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO              = ABAP_FALSE.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_BEFORE_SEND_OUTBOUND_MSG.
    R_IF_INTEGRACAO_INJECT = ME.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_FORM_REQUEST_HTTP.
    R_IF_INTEGRACAO_INJECT = ME.
    ME->ZIF_INTEGRACAO_INJECT~AT_FORM_FIELDS = I_FORM_FIELDS.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_HEADER_REQUEST_HTTP.
    R_IF_INTEGRACAO_INJECT = ME.
    ME->ZIF_INTEGRACAO_INJECT~AT_HEADER_FIELDS = I_HEADER_FIELDS.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_INTEGRAR_INBOUND.
    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO              = ABAP_TRUE.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_INTEGRAR_RETORNO.
    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO              = ABAP_TRUE.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_PROCESSA_INBOUND.
    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO              = ABAP_TRUE.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_PROCESSA_RETORNO.
    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO              = ABAP_TRUE.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_TOKEN_DATASHARE~GET_INSTANCE.

    IF ZIF_INTEGRACAO_TOKEN_DATASHARE~AT_IF_INTEGRACAO_TOKEN IS NOT BOUND.
      CREATE OBJECT ZIF_INTEGRACAO_TOKEN_DATASHARE~AT_IF_INTEGRACAO_TOKEN
        TYPE ZCL_INTEGRACAO_TOKEN_DATASHARE.
    ENDIF.

    R_IF_INTEGRACAO_TOKEN = ZIF_INTEGRACAO_TOKEN_DATASHARE~AT_IF_INTEGRACAO_TOKEN.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_TOKEN_DATASHARE~GET_TOKEN.

    DATA: L_XML               TYPE STRING,
          L_TABLE_TIMESTAMP   TYPE P,
          L_CURRENT_TIMESTAMP TYPE P.

    DATA: LT_ZINTEGRACAO0001 TYPE STANDARD TABLE OF ZINTEGRACAO0001,
          LT_TVARVC          TYPE STANDARD TABLE OF TVARVC,
          WL_TOKEN           TYPE ZWSTOKEN.

    DATA: DATA_INICIAL TYPE DATS,
          DATA_FINAL   TYPE DATS,
          HORA_INICIAL TYPE TIMS,
          HORA_FINAL   TYPE TIMS,
          VL_RESULT    TYPE SYTABIX.


    R_IF_INTEGRACAO_TOKEN = ME.

*--------------------------------------------------------------------------------------------------------------------*
*  Verificação Existencia Token Valido
*--------------------------------------------------------------------------------------------------------------------*
    SELECT SINGLE *
      FROM ZINTEGRACAO0001 INTO @DATA(LS_ZINTEGRACAO0001)
      WHERE ID_TOKEN EQ '0002'.

    IF SY-SUBRC IS INITIAL.

      L_TABLE_TIMESTAMP   = LS_ZINTEGRACAO0001-TIME_STAMP.

      GET TIME STAMP FIELD DATA(L_TIMESTAMP_BEFORE).
      L_CURRENT_TIMESTAMP = L_TIMESTAMP_BEFORE.

      IF CL_ABAP_TSTMP=>SUBTRACT( TSTMP1 = L_CURRENT_TIMESTAMP
                                  TSTMP2 = L_TABLE_TIMESTAMP ) < LS_ZINTEGRACAO0001-EXPIRES_IN.

        "Token ainda está válido.
        CONCATENATE LS_ZINTEGRACAO0001-TOKEN_TYPE LS_ZINTEGRACAO0001-ACCESS_TOKEN INTO DATA(L_HEADER_TOKEN) SEPARATED BY SPACE.
        CLEAR: ME->ZIF_INTEGRACAO_INJECT~AT_HEADER_FIELDS.

        ME->ZIF_INTEGRACAO_INJECT~AT_HEADER_FIELDS =
        VALUE #(
                  ( NAME  = 'Authorization'   VALUE = L_HEADER_TOKEN )
               ).

        EXIT.
      ENDIF.

    ENDIF.

*--------------------------------------------------------------------------------------------------------------------*
*  Verificação Existencia Token Valido - Fim
*--------------------------------------------------------------------------------------------------------------------*

    FREE: L_XML.

    SELECT *
      FROM ZAUTH_WEBSERVICE
      INTO TABLE @DATA(LT_WERBSERVICE)
      WHERE SERVICE EQ 'TOKEN_DATASHARE'.

    IF SY-SUBRC IS INITIAL.
      READ TABLE LT_WERBSERVICE INTO DATA(LS_WEBSERVICE) INDEX 1.
      IF SY-SUBRC IS INITIAL.

        ME->ZIF_INTEGRACAO_INJECT~AT_HEADER_FIELDS =
        VALUE #(
                  ( NAME  = '~request_method' VALUE = LS_WEBSERVICE-METHOD )
                  ( NAME  = 'Content-Type'    VALUE = 'application/json; charset=UTF-8' )
                  ( NAME  = 'Accept-Charset'  VALUE = 'utf-8' )
               ).

      ENDIF.

      WL_TOKEN =
      VALUE #(
                MODULE   = ME->ZIF_INTEGRACAO_INJECT~AT_AUTENTICA_MODULE
                USERNAME = LS_WEBSERVICE-USERNAME
                PASSWORD = LS_WEBSERVICE-PASSWORD
      ).

      CALL METHOD /UI2/CL_JSON=>SERIALIZE
        EXPORTING
          DATA        = WL_TOKEN
          PRETTY_NAME = /UI2/CL_JSON=>PRETTY_MODE-CAMEL_CASE
        RECEIVING
          R_JSON      = L_XML.

    ENDIF.

    ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_BODY = L_XML.

    ME->ZIF_INTEGRACAO_TOKEN_DATASHARE~SET_DS_URL( ).
    ME->ZIF_INTEGRACAO_TOKEN_DATASHARE~SET_SEND_MSG( IMPORTING E_ACCESS_TOKEN = DATA(E_ACCESS_TOKEN)
                                                               E_TOKEN_TYPE   = DATA(E_TOKEN_TYPE)
                                                               E_EXPIRES_IN   = DATA(E_EXPIRES_IN)
                                                              ).

    GET TIME STAMP FIELD DATA(L_TIMESTAMP_AFTER).

    IF E_EXPIRES_IN IS NOT INITIAL.

*      "// convertendo a data e hora para calcular o milisegundos
*      "// "expiresIn": "2022-11-16T17:06:34.1072121-04:00",

      DATA_INICIAL = SY-DATUM.
      DATA_FINAL = |{ E_EXPIRES_IN(4) }{ E_EXPIRES_IN+5(2) }{ E_EXPIRES_IN+8(2) }|.

      HORA_INICIAL = SY-UZEIT.
      HORA_FINAL = |{ E_EXPIRES_IN+11(2) }{ E_EXPIRES_IN+14(2) }{ E_EXPIRES_IN+17(2) }|.

*     "// Convertendo periodo em milisegundos
      CALL FUNCTION 'SWI_DURATION_DETERMINE'
        EXPORTING
          START_DATE = DATA_INICIAL
          END_DATE   = DATA_FINAL
          START_TIME = HORA_INICIAL
          END_TIME   = HORA_FINAL
        IMPORTING
          DURATION   = VL_RESULT.

    ENDIF.

    APPEND VALUE #( ID_TOKEN     = '0002'
                    ACCESS_TOKEN = E_ACCESS_TOKEN
                    TOKEN_TYPE   = E_TOKEN_TYPE
                    EXPIRES_IN   = VL_RESULT - 300
                    TIME_STAMP   = L_TIMESTAMP_AFTER
                  ) TO LT_ZINTEGRACAO0001.

    MODIFY ZINTEGRACAO0001 FROM TABLE LT_ZINTEGRACAO0001.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_TOKEN_DATASHARE~SET_DS_URL.

    DATA: LT_WERBSERVICE TYPE STANDARD TABLE OF ZAUTH_WEBSERVICE.

    DATA: WA_WEBSERVICE TYPE ZAUTH_WEBSERVICE.

    R_IF_INTEGRACAO_TOKEN  = ME.

    SELECT *
      FROM ZAUTH_WEBSERVICE
      INTO TABLE LT_WERBSERVICE
      WHERE SERVICE EQ 'TOKEN_DATASHARE'.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_INTEGRACAO
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_INTEGRACAO=>ZCX_SERVICO_HTTP_CONFIG-MSGID
                            MSGNO = ZCX_INTEGRACAO=>ZCX_SERVICO_HTTP_CONFIG-MSGNO
                            ATTR1 = 'C'
                            ATTR2 = 'C1' )
          MSGID  = ZCX_INTEGRACAO=>ZCX_SERVICO_HTTP_CONFIG-MSGID
          MSGNO  = ZCX_INTEGRACAO=>ZCX_SERVICO_HTTP_CONFIG-MSGNO
          MSGTY  = 'E'
          MSGV1  = 'C'
          MSGV2  = 'C1'.
    ENDIF.

    SORT LT_WERBSERVICE BY SERVICE.

    ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_FORMATO      = 'JSON'.
    READ TABLE LT_WERBSERVICE INTO WA_WEBSERVICE WITH KEY SERVICE = 'TOKEN_DATASHARE' BINARY SEARCH.
    IF SY-SUBRC IS INITIAL.
      ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_URL = WA_WEBSERVICE-URL.
    ENDIF.

    ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_METODO = IF_REST_MESSAGE=>GC_METHOD_POST.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_TOKEN_DATASHARE~SET_SEND_MSG.

    TYPES: BEGIN OF TY_RETORNO,
             ACCESS     TYPE STRING,
             TOKEN_TYPE TYPE STRING,
             EXPIRESIN  TYPE STRING,
           END OF TY_RETORNO.

    DATA: LC_INTEGRAR TYPE REF TO ZCL_INTEGRACAO,
          LC_RETORNO  TYPE TY_RETORNO.

    R_IF_INTEGRACAO_TOKEN = ME.

    CREATE OBJECT LC_INTEGRAR.

*    me->zif_integracao_inject~at_info_request_http-ds_content_type = 'application/x-www-form-urlencoded'.
*    lc_integrar->zif_integracao~at_form_fields = me->zif_integracao_inject~at_form_fields.

    "Cria MSG para Integração via HTTP
    LC_INTEGRAR->ZIF_INTEGRACAO~SET_MSG_INJECT( I_MSG = CAST #( ME )
      )->SET_NEW_MSG( IMPORTING E_ID_INTEGRACAO = DATA(E_ID_INTEGRACAO)
      )->SET_OUTBOUND_MSG(
      )->SET_PROCESSAR_RETORNO(
      )->SET_INTEGRAR_RETORNO(
      )->GET_REGISTRO( IMPORTING E_INTEGRACAO = DATA(E_INTEGRACAO)
      )->FREE(
      ).

    FREE: LC_INTEGRAR.
    CLEAR: LC_INTEGRAR.

    /UI2/CL_JSON=>DESERIALIZE( EXPORTING JSON = E_INTEGRACAO-DS_DATA_RETORNO CHANGING DATA = LC_RETORNO ).

    E_ACCESS_TOKEN = LC_RETORNO-ACCESS.
    E_TOKEN_TYPE   = 'Bearer'.
    E_EXPIRES_IN   = LC_RETORNO-EXPIRESIN.

    CONCATENATE E_TOKEN_TYPE E_ACCESS_TOKEN INTO DATA(L_HEADER_TOKEN) SEPARATED BY SPACE.
    CLEAR: ME->ZIF_INTEGRACAO_INJECT~AT_HEADER_FIELDS.
    APPEND VALUE #( NAME = 'Authorization'  VALUE = L_HEADER_TOKEN ) TO ME->ZIF_INTEGRACAO_INJECT~AT_HEADER_FIELDS.

  ENDMETHOD.
ENDCLASS.
