*----------------------------------------------------------------------*
***INCLUDE MZMEMORANDO_2000 .
*----------------------------------------------------------------------*

*----------------------------------------------------------------------*
* Variáveis Locais
*----------------------------------------------------------------------*
DATA: VG_NOME_EMISSOR  TYPE NAME1_GP,
      VG_NOME_MATERIAL TYPE MAKTG.

*&---------------------------------------------------------------------*
*&      Module  STATUS_2001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_2001 OUTPUT.


  DATA: VG_NOTAS TYPE SY-SUBRC.

  IF VG_DYNNR_TAB IS INITIAL.
    VG_DYNNR_TAB = C_2002.
  ENDIF.

  IF VG_DYNNR_CAD IS INITIAL.
    VG_DYNNR_CAD = C_2005.
  ENDIF.

  CASE VG_DYNNR_TAB.
    WHEN C_2002.
      TABMEMO-ACTIVETAB = C_TABMM.
    WHEN C_2003.
      TABMEMO-ACTIVETAB = C_TABCD.
  ENDCASE.

  CASE VG_DYNNR_CAD.
    WHEN C_2005.
      TABNOTA-ACTIVETAB = C_TABNX.
    WHEN C_2006.
      TABNOTA-ACTIVETAB = C_TABBL.
  ENDCASE.

ENDMODULE.                 " STATUS_2001  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_2000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_2000 INPUT.

  CASE OK_CODE.
    WHEN C_SAVE.
      CLEAR: OK_CODE.
      PERFORM SALVAR_MEMORANDO.
    WHEN C_BLNOVO.
      CLEAR: OK_CODE.
      PERFORM NOVO_CONHECIMENTO.
    WHEN C_BLDELT.
      CLEAR: OK_CODE.
      PERFORM ELIMINAR_CONHECIMENTO.
    WHEN C_ADDMEMO.
      CLEAR: OK_CODE.
      PERFORM ADD_MEMORANDO.
    WHEN C_ALTMEMO.
      CLEAR: OK_CODE.
      PERFORM ALT_MEMORANDO.
*    WHEN C_DELMEMO.
*      CLEAR: OK_CODE.
*      PERFORM DEL_MEMORANDO.
    WHEN C_CPLNF.
      CLEAR: OK_CODE.
      PERFORM POPULA_TELA_NOTA_MEMORANDOS.
    WHEN C_CSNFMM.
      CLEAR: OK_CODE.
      PERFORM LANCAR_NOTAS.
    WHEN C_CSNFMS.
      CLEAR: OK_CODE.
      PERFORM LANCAR_NOTAS_S.
    WHEN C_NFPROPRIA.
      CLEAR: OK_CODE.
      IF NOT ZDOC_MEMO_NF_EXP-DOCNUM IS INITIAL.
        PERFORM VISUALIZAR_NOTA USING ZDOC_MEMO_NF_EXP-DOCNUM.
      ENDIF.
    WHEN C_BACKV OR C_EXITV OR C_CANCELV.
      CLEAR: OK_CODE, L_RESP.
      PERFORM SAIR_MEMORANDO.
    WHEN 'BTNALL'.
      PERFORM SELECT_ALL_LINES.
    WHEN 'BTNNONE'.
      PERFORM SELECT_NONE_LINES.

  ENDCASE.

ENDMODULE.                 " USER_COMMAND_2000  INPUT

*&---------------------------------------------------------------------*
*&      Form  SALVAR_MEMORANDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SALVAR_MEMORANDO .

  DATA: VG_ZDOC_MEMORANDO TYPE ZDOC_MEMO_NF_EXP,
        VG_ZDOC_MEMORAND_ TYPE ZDOC_MEMO_NF_EXP,
        VG_CONHEC         TYPE ZDOC_MEMO_NOMEAC,
        DADOS_CLI         TYPE KNA1,
        DADOS_FOR         TYPE LFA1,
        VG_NR_CONHEC      TYPE ZNR_CON,
        VG_QTD            TYPE I,
        VG_TABIX          TYPE SY-TABIX,
        IT_NAO_DUBLICADOS TYPE TABLE OF ZMEMO_MEMORANDO_TELA INITIAL SIZE 0 WITH HEADER LINE,
        IT_DUBLICADOS     TYPE TABLE OF ZMEMO_MEMORANDO_TELA INITIAL SIZE 0 WITH HEADER LINE.

  IF VG_TOTAL_MEMORANDOS GT ZDOC_MEMO_NF_EXP-QUANTIDADE.
    MESSAGE E090 DISPLAY LIKE C_S.
    EXIT.
  ENDIF.
  CHECK NOT VG_ALTEROU_MEMORANDO IS INITIAL.

  "Verificar campos.
  IF ZDOC_MEMO_NF_EXP-SERIE IS INITIAL.           MESSAGE E004 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMO_NF_EXP-NUMERO_NOTA IS INITIAL.     MESSAGE E004 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMO_NF_EXP-EMISSOR IS INITIAL.         MESSAGE E005 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMO_NF_EXP-DT_EMISSAO_NOTA IS INITIAL. MESSAGE E007 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMO_NF_EXP-MATERIAL IS INITIAL.        MESSAGE E008 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMO_NF_EXP-QUANTIDADE IS INITIAL.      MESSAGE E009 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMO_NF_EXP-UNIDADE IS INITIAL.         MESSAGE E010 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMO_NF_EXP-MOEDA IS INITIAL.           MESSAGE E011 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMO_NF_EXP-VALOR_UNITARIO IS INITIAL.  MESSAGE E012 DISPLAY LIKE C_S.   ENDIF.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = ZDOC_MEMO_NF_EXP-NUMERO_NOTA
    IMPORTING
      OUTPUT = ZDOC_MEMO_NF_EXP-NUMERO_NOTA.

  "Verificar se possui dublicidade para finalidade normal
  MOVE-CORRESPONDING ZDOC_MEMO_NF_EXP TO VG_ZDOC_MEMORAND_.
  IF ZDOC_MEMO_NF_EXP-NR_NOTA_EXP IS INITIAL.
    SELECT SINGLE * INTO VG_ZDOC_MEMORANDO
      FROM ZDOC_MEMO_NF_EXP
     WHERE SERIE       EQ VG_ZDOC_MEMORAND_-SERIE
       AND NUMERO_NOTA EQ VG_ZDOC_MEMORAND_-NUMERO_NOTA
       AND NFE         EQ VG_ZDOC_MEMORAND_-NFE
       AND EMISSOR     EQ VG_ZDOC_MEMORAND_-EMISSOR
       AND PROPRIO     EQ VG_ZDOC_MEMORAND_-PROPRIO.
  ELSE.
    SELECT SINGLE * INTO VG_ZDOC_MEMORANDO
      FROM ZDOC_MEMO_NF_EXP
     WHERE SERIE        EQ VG_ZDOC_MEMORAND_-SERIE
       AND NUMERO_NOTA  EQ VG_ZDOC_MEMORAND_-NUMERO_NOTA
       AND NFE          EQ VG_ZDOC_MEMORAND_-NFE
       AND EMISSOR      EQ VG_ZDOC_MEMORAND_-EMISSOR
       AND PROPRIO      EQ VG_ZDOC_MEMORAND_-PROPRIO
       AND NR_NOTA_EXP  NE VG_ZDOC_MEMORAND_-NR_NOTA_EXP.
  ENDIF.

  IF SY-SUBRC EQ 0.
    MESSAGE E002 WITH VG_ZDOC_MEMORANDO-NR_NOTA_EXP DISPLAY LIKE C_S.
  ENDIF.

  "Verifica se Temos pelo menos em memorando lançado
  DESCRIBE TABLE IT_MEMORANDO_TELA LINES VG_QTD.

  IF NOT ( VG_QTD GT 0 ).
    MESSAGE E028 DISPLAY LIKE C_S.
  ENDIF.

*  MOVE it_memorando_tela[] TO it_nao_dublicados[].
*
*  DELETE ADJACENT DUPLICATES FROM it_nao_dublicados
*             COMPARING nr_complemento representante remetente.
*
*  LOOP AT it_memorando_tela INTO wa_memorando_tela.
*    READ TABLE it_nao_dublicados WITH KEY nr_complemento = wa_memorando_tela-nr_complemento
*                                          direcao        = wa_memorando_tela-direcao
*                                          remetente      = wa_memorando_tela-remetente
*                                          formulario     = wa_memorando_tela-formulario
*                                          seq            = wa_memorando_tela-seq.
*    IF sy-subrc NE 0.
*      MESSAGE e036 WITH wa_memorando_tela-direcao wa_memorando_tela-remetente.
*    ENDIF.
*  ENDLOOP.

  LOOP AT IT_MEMORANDO_TELA INTO WA_MEMORANDO_TELA.
    DESCRIBE TABLE IT_MEMORANDO_TELA LINES VG_QTD.
  ENDLOOP.

  "Verifica alteração ou inserção
  "Se inserção pegar próximo código
  IF ZDOC_MEMO_NF_EXP-NR_NOTA_EXP IS INITIAL.
    SELECT MAX( NR_NOTA_EXP )
      INTO ZDOC_MEMO_NF_EXP-NR_NOTA_EXP
      FROM ZDOC_MEMO_NF_EXP.

    IF ZDOC_MEMO_NF_EXP-NR_NOTA_EXP IS INITIAL.
      ZDOC_MEMO_NF_EXP-NR_NOTA_EXP = 1.
    ELSE.
      ZDOC_MEMO_NF_EXP-NR_NOTA_EXP = ZDOC_MEMO_NF_EXP-NR_NOTA_EXP + 1.
    ENDIF.
  ENDIF.

  "Alteração de dados de memorando
  DELETE IT_CONHEC WHERE NR_CONHEC = VG_NR_CONHEC OR DT_CONHEC EQ VG_NR_CONHEC.

  DELETE FROM ZDOC_MEMO_NOMEAC WHERE NR_NOTA_EXP EQ ZDOC_MEMO_NF_EXP-NR_NOTA_EXP.

  IF ZDOC_MEMO_NF_EXP-PROPRIO IS INITIAL.
    CLEAR ZDOC_MEMO_NF_EXP-DOCNUM.
  ENDIF.

  MODIFY ZDOC_MEMO_NF_EXP FROM ZDOC_MEMO_NF_EXP.

  LOOP AT IT_CONHEC INTO WA_CONHEC.
    MOVE-CORRESPONDING WA_CONHEC TO VG_CONHEC.
    VG_CONHEC-NR_NOTA_EXP = ZDOC_MEMO_NF_EXP-NR_NOTA_EXP.
    MODIFY ZDOC_MEMO_NOMEAC FROM VG_CONHEC.
  ENDLOOP.

*  LOOP AT IT_MEMORANDO_DELE INTO WA_MEMORANDO_TELA.
*    DELETE FROM ZDOC_MEMO_NOTA WHERE NR_MEMORANDO EQ WA_MEMORANDO_TELA-NR_MEMORANDO.
*    DELETE FROM ZDOC_MEMORANDO WHERE NR_MEMORANDO EQ WA_MEMORANDO_TELA-NR_MEMORANDO.
*  ENDLOOP.
*  CLEAR: IT_MEMORANDO_DELE[].

  LOOP AT IT_MEMORANDO_TELA INTO WA_MEMORANDO_TELA.
    VG_TABIX = SY-TABIX.
    MOVE-CORRESPONDING WA_MEMORANDO_TELA TO ZDOC_MEMORANDO.

    IF ZDOC_MEMORANDO-NR_MEMORANDO IS INITIAL.
      IF ZDOC_MEMORANDO-DIRECAO EQ 1.
        CALL FUNCTION 'Z_MEMO_PROX_NUMERO'
          EXPORTING
            DIRECAO       = ZDOC_MEMORANDO-DIRECAO
            REMETENTE     = ZDOC_MEMORANDO-REMETENTE
            REPRESENTANTE = ZDOC_MEMORANDO-REPRESENTANTE
          IMPORTING
            NUMERO        = ZDOC_MEMORANDO-NUMERO_MEMO
          EXCEPTIONS
            LOCAL_NEGOCIO = 1
            NUMERO_MEMO   = 2
            OTHERS        = 3.
        IF SY-SUBRC <> 0.
          MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.
      ENDIF.

      SELECT MAX( NR_MEMORANDO )
        INTO ZDOC_MEMORANDO-NR_MEMORANDO
        FROM ZDOC_MEMORANDO.

      IF ZDOC_MEMORANDO-NR_MEMORANDO IS INITIAL.
        ZDOC_MEMORANDO-NR_MEMORANDO = 1.
      ELSE.
        ZDOC_MEMORANDO-NR_MEMORANDO = ZDOC_MEMORANDO-NR_MEMORANDO + 1.
      ENDIF.

      WA_MEMORANDO_TELA-NUMERO_MEMO  = ZDOC_MEMORANDO-NUMERO_MEMO.
      WA_MEMORANDO_TELA-NR_MEMORANDO = ZDOC_MEMORANDO-NR_MEMORANDO.
      WA_MEMORANDO_TELA-NR_NOTA_EXP  = ZDOC_MEMO_NF_EXP-NR_NOTA_EXP.

      MODIFY IT_MEMORANDO_TELA INDEX VG_TABIX FROM WA_MEMORANDO_TELA TRANSPORTING NUMERO_MEMO NR_MEMORANDO NR_NOTA_EXP.
    ENDIF.

    CALL FUNCTION 'CONVERSION_EXIT_ZDDEX_INPUT'
      EXPORTING
        INPUT  = ZDOC_MEMORANDO-NR_DDE
      IMPORTING
        OUTPUT = ZDOC_MEMORANDO-NR_DDE.

    CALL FUNCTION 'CONVERSION_EXIT_ZREEX_INPUT'
      EXPORTING
        INPUT  = ZDOC_MEMORANDO-NR_RE
      IMPORTING
        OUTPUT = ZDOC_MEMORANDO-NR_RE.

    CLEAR: DADOS_FOR.
    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO   = ZDOC_MEMORANDO-REMETENTE
        P_PARTYPE    = C_V
      CHANGING
        WA_INFO_PART = DADOS_FOR.
    ZDOC_MEMORANDO-PAIS_ORIGEM = DADOS_FOR-LAND1.
    ZDOC_MEMORANDO-UF_ORIGEM   = DADOS_FOR-REGIO.

    ZDOC_MEMORANDO-NR_NOTA_EXP    = ZDOC_MEMO_NF_EXP-NR_NOTA_EXP.
    MODIFY ZDOC_MEMORANDO FROM ZDOC_MEMORANDO.

  ENDLOOP.

  COMMIT WORK.

  MESSAGE S003 WITH ZDOC_MEMO_NF_EXP-NR_NOTA_EXP DISPLAY LIKE C_S.

  VG_CONSUL_MEMO = C_X.
  CLEAR VG_ALTEROU_MEMORANDO.

  PERFORM ATUALIZA_MEMORANDOS_TELA.

ENDFORM.                    " SALVAR_MEMORANDO
*&---------------------------------------------------------------------*
*&      Module  SET_UPDATE_FLAG  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SET_UPDATE_FLAG INPUT.

  VG_ALTEROU_MEMORANDO = C_X.

  DATA: DADOS_CLIENTE TYPE KNA1.

  CLEAR: VG_NOME_EMISSOR.

  IF NOT ZDOC_MEMO_NF_EXP-EMISSOR IS INITIAL.
    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO = ZDOC_MEMO_NF_EXP-EMISSOR
        P_PARTYPE  = C_C
      CHANGING
        WA_INFO_C  = DADOS_CLIENTE.

    IF TERCEIRO IS INITIAL.
      IF DADOS_CLIENTE-KTOKD EQ C_ZCIC.
        ZDOC_MEMO_NF_EXP-PROPRIO = C_X.
        IF ZDOC_MEMO_NF_EXP-DOCNUM IS INITIAL.
          MESSAGE E044 DISPLAY LIKE C_S.
        ENDIF.
      ELSE.
        CLEAR: ZDOC_MEMO_NF_EXP-PROPRIO, ZDOC_MEMO_NF_EXP-DOCNUM.
      ENDIF.
    ELSE.
      ZDOC_MEMORANDO-DIRECAO = 2.
      CLEAR: ZDOC_MEMO_NF_EXP-PROPRIO, ZDOC_MEMO_NF_EXP-DOCNUM.
    ENDIF.
  ENDIF.

  IF ( NOT ZDOC_MEMO_NF_EXP-QUANTIDADE IS INITIAL ) AND ( NOT ZDOC_MEMO_NF_EXP-VALOR_UNITARIO IS INITIAL ).
    ZDOC_MEMO_NF_EXP-VALOR_TOTAL = ZDOC_MEMO_NF_EXP-QUANTIDADE * ZDOC_MEMO_NF_EXP-VALOR_UNITARIO.
  ELSEIF ( NOT ZDOC_MEMO_NF_EXP-QUANTIDADE IS INITIAL ) AND ( NOT ZDOC_MEMO_NF_EXP-VALOR_TOTAL IS INITIAL ).
    ZDOC_MEMO_NF_EXP-VALOR_UNITARIO = ZDOC_MEMO_NF_EXP-VALOR_TOTAL / ZDOC_MEMO_NF_EXP-QUANTIDADE.
  ENDIF.

  IF NOT ZDOC_MEMO_NF_EXP-DOCNUM IS INITIAL.
    ZDOC_MEMO_NF_EXP-PROPRIO = C_X.
  ENDIF.

ENDMODULE.                 " SET_UPDATE_FLAG  INPUT

*&---------------------------------------------------------------------*
*&      Module  SET_UPDATE_FLAG_CONHEC  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SET_UPDATE_FLAG_CONHEC INPUT.

  VG_ALTEROU_MEMORANDO = C_X.

  IF IT_CONHEC-SEQU IS INITIAL.
    IT_CONHEC-SEQU = SEQU.
    SEQU = SEQU + 1.
  ENDIF.

  READ TABLE IT_CONHEC INTO WA_CONHEC WITH KEY NR_CONHEC = IT_CONHEC-NR_CONHEC.
  IF SY-SUBRC NE 0.
    READ TABLE IT_CONHEC INTO WA_CONHEC WITH KEY SEQU = IT_CONHEC-SEQU.
    IF SY-SUBRC EQ 0.
      MODIFY IT_CONHEC INDEX SY-TABIX FROM IT_CONHEC TRANSPORTING NR_CONHEC DT_CONHEC.
    ELSE.
      APPEND IT_CONHEC TO IT_CONHEC.
    ENDIF.
  ENDIF.

  SORT IT_CONHEC[] BY NR_CONHEC.

ENDMODULE.                 " SET_UPDATE_FLAG_CONHEC  INPUT

*&---------------------------------------------------------------------*
*&      Form  NOVO_CONHECIMENTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM NOVO_CONHECIMENTO .

  CLEAR: WA_CONHEC.
  WA_CONHEC-SEQU = SEQU.
  APPEND WA_CONHEC TO IT_CONHEC.
  SEQU = SEQU + 1.

ENDFORM.                    " NOVO_CONHECIMENTO

*&---------------------------------------------------------------------*
*&      Form  ELIMINAR_CONHECIMENTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ELIMINAR_CONHECIMENTO .

  DATA: VG_VERIFICA_SELECAO TYPE SY-SUBRC.

  PERFORM VERIFICA_SELECAO_CONHEC USING VG_VERIFICA_SELECAO.

  IF VG_VERIFICA_SELECAO EQ 0.

    VG_ALTEROU_MEMORANDO = C_X.

    DELETE IT_CONHEC WHERE MARK EQ C_X.

    SEQU = 1.
    LOOP AT IT_CONHEC INTO WA_CONHEC.
      WA_CONHEC-SEQU = SEQU.
      MODIFY IT_CONHEC INDEX SY-TABIX FROM WA_CONHEC TRANSPORTING SEQU.
      SEQU = SEQU + 1.
    ENDLOOP.

    SORT IT_CONHEC[] BY NR_CONHEC.

  ENDIF.

ENDFORM.                    " ELIMINAR_CONHECIMENTO

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_SELECAO_CONHEC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_VG_VERIFICA_SELECAO  text
*----------------------------------------------------------------------*
FORM VERIFICA_SELECAO_CONHEC  USING  P_VG_VERIFICA_SELECAO TYPE SY-SUBRC.

  READ TABLE IT_CONHEC INTO WA_CONHEC WITH KEY MARK = C_X.
  P_VG_VERIFICA_SELECAO = SY-SUBRC.

  IF SY-SUBRC NE 0.
    MESSAGE TEXT-E02 TYPE C_E DISPLAY LIKE C_S.
  ENDIF.

ENDFORM.                    " VERIFICA_SELECAO_CONHEC

*&---------------------------------------------------------------------*
*&      Form  SAIR_MEMORANDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SAIR_MEMORANDO .

  DATA: ANSWER TYPE C LENGTH 1.

  IF NOT VG_ALTEROU_MEMORANDO IS INITIAL.

    CALL FUNCTION 'POPUP_TO_CONFIRM_STEP'
      EXPORTING
        TITEL     = TEXT-001
        TEXTLINE1 = TEXT-002
        TEXTLINE2 = TEXT-003
      IMPORTING
        ANSWER    = ANSWER.

    CASE ANSWER.
      WHEN C_J.
        PERFORM SALVAR_MEMORANDO.
      WHEN C_N.
        CLEAR VG_ALTEROU_MEMORANDO.
        VG_DYNNR_000 = VG_DYNNR_ANT.
        LOOP AT IT_MEMORANDOS INTO WA_MEMORANDO WHERE NR_NOTA_EXP EQ ZDOC_MEMO_NF_EXP-NR_NOTA_EXP.
          PERFORM DESBLOQUEIA USING WA_MEMORANDO-NR_MEMORANDO.
        ENDLOOP.
        CLEAR: ZDOC_MEMO_NF_EXP, ZDOC_MEMORANDO, VG_ALTEROU_MEMORANDO, IT_CONHEC[], WA_CONHEC.
      WHEN C_A.
        EXIT.
    ENDCASE.

  ELSE.
    VG_DYNNR_000 = VG_DYNNR_ANT.
    LOOP AT IT_MEMORANDOS INTO WA_MEMORANDO WHERE NR_NOTA_EXP EQ ZDOC_MEMO_NF_EXP-NR_NOTA_EXP.
      PERFORM DESBLOQUEIA USING WA_MEMORANDO-NR_MEMORANDO.
    ENDLOOP.
    CLEAR: ZDOC_MEMO_NF_EXP, ZDOC_MEMORANDO, VG_ALTEROU_MEMORANDO, IT_CONHEC[], WA_CONHEC, IT_MEMORANDO_DELE[].
  ENDIF.

ENDFORM.                    " SAIR_MEMORANDO

*&---------------------------------------------------------------------*
*&      Module  STATUS_2002  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_2002 OUTPUT.

  VG_TOTAL_MEMORANDOS = 0.

  LOOP AT IT_MEMORANDO_TELA INTO WA_MEMORANDO_TELA.
    IF WA_MEMORANDO_TELA-CANCELADO IS INITIAL.
      VG_TOTAL_MEMORANDOS = VG_TOTAL_MEMORANDOS + WA_MEMORANDO_TELA-QUANTIDADE_MEMO.
    ENDIF.
  ENDLOOP.

ENDMODULE.                 " STATUS_2002  OUTPUT


*&---------------------------------------------------------------------*
*&      Module  BLOQUEIA  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE BLOQUEIA OUTPUT.
  IF NOT VG_CONSUL_MEMO IS INITIAL.
    LOOP AT SCREEN.
      IF SCREEN-NAME(9) = 'IT_CONHEC'.
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDMODULE.                 " BLOQUEIA  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_2003  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_2003 OUTPUT.

  DATA: VG_NOTAS2     TYPE SY-SUBRC,
        WA_J_1BBRANCH TYPE J_1BBRANCH,
        DADOS_CLI     TYPE LFA1,
*        NR_RE_AUX TYPE C LENGTH 18,
        BUKRS_REP     TYPE BUKRS,
        BUKRS_REM     TYPE BUKRS,
        WA_DOC_MEMO   TYPE ZDOC_MEMORANDO.

  CLEAR: VG_NOME_REMETENTE,
         VG_NOME_PAIS_ORIGEM,
         VG_NOME_PAIS_DESTINO,
         VG_NOME_UF_ORIGEM,
         VG_NOME_REPRESENTANTE,
         NR_RE_AUX,
         VG_NOME_NR_RE,
         VG_NOME_TRANSPORTADOR.

  VG_2004_9999 = C_9999.
*  IF  VG_CONSUL_MEMO = 'X'.
*    CLEAR VG_NOVO_LANC.
*    IF VG_TOTAL_MEMORANDOS LT ZDOC_MEMO_NF_EXP-QUANTIDADE. "ALRS
*      CLEAR VG_CONSUL_MEMO.
*      VG_NOVO_LANC = 'X'.
*      FG_MEMO = 'X'.
*    ENDIF.
*  ENDIF.

  VG_TOTAL_MEMORANDOS = 0.

  LOOP AT IT_MEMORANDO_TELA INTO WA_MEMORANDO_TELA_AUX.
    IF WA_MEMORANDO_TELA_AUX-CANCELADO IS INITIAL.
      VG_TOTAL_MEMORANDOS = VG_TOTAL_MEMORANDOS + WA_MEMORANDO_TELA_AUX-QUANTIDADE_MEMO.
    ENDIF.
  ENDLOOP.

  IF VG_TOTAL_MEMORANDOS LT ZDOC_MEMO_NF_EXP-QUANTIDADE. "ALRS
    CLEAR VG_CONSUL_MEMO.
    "VG_NOVO_LANC = 'X'.
  ELSE.
    IF WA_MEMORANDO_TELA-STATUS EQ 'P' OR WA_MEMORANDO_TELA-STATUS EQ ' '.
      VG_CONSUL_MEMO = ' '.
    ENDIF.
  ENDIF.


  IF NOT ZDOC_MEMORANDO-NR_MEMORANDO IS INITIAL.
    SELECT SINGLE * INTO WA_DOC_MEMO
      FROM ZDOC_MEMORANDO
     WHERE NR_MEMORANDO EQ ZDOC_MEMORANDO-NR_MEMORANDO.

    IF NOT WA_DOC_MEMO-CANCELADO IS INITIAL.
      VG_CONSUL_MEMO = C_X.
    ENDIF.
  ENDIF.

  IF NOT VG_CONSUL_MEMO IS INITIAL.

    LOOP AT SCREEN.
      IF ( SCREEN-NAME(14) = 'ZDOC_MEMORANDO' ) OR ( SCREEN-NAME = 'TERCEIRO' ).
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
        MODIFY SCREEN.
      ENDIF.
      IF SCREEN-NAME = 'BT06'.
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
        MODIFY SCREEN.
      ENDIF.
      IF SCREEN-NAME = 'BT07'.
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
        MODIFY SCREEN.
      ENDIF.
      IF SCREEN-NAME = 'BT08'.
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.

    "ELSEIF NOT zdoc_memorando-nr_memorando IS INITIAL.
  ELSEIF VG_NOVO_LANC IS INITIAL.

    PERFORM NOTA_ENTRADA_VINCULADA_MEMO USING ZDOC_MEMORANDO-NR_MEMORANDO VG_NOTAS2.

    LOOP AT SCREEN.

      IF VG_NOTAS2 EQ 0.
        IF ( SCREEN-NAME = 'ZDOC_MEMORANDO-QUANTIDADE_MEMO' ).
          SCREEN-OUTPUT = '1'.
          SCREEN-INPUT  = '0'.
          MODIFY SCREEN.
        ENDIF.
      ENDIF.

      IF SCREEN-NAME = 'ZDOC_MEMORANDO-NUMERO_MEMO'.
        CASE ZDOC_MEMORANDO-DIRECAO.
          WHEN 1.
            SCREEN-OUTPUT = '1'.
            SCREEN-INPUT  = '0'.
            MODIFY SCREEN.
        ENDCASE.
      ENDIF.

      IF ( ZDOC_MEMORANDO-STATUS NE SPACE ) AND ( ZDOC_MEMORANDO-STATUS NE 'P' ).
        IF ( SCREEN-NAME(14) = 'ZDOC_MEMORANDO' ) OR ( SCREEN-NAME = 'TERCEIRO' ).
          SCREEN-OUTPUT = '1'.
          SCREEN-INPUT  = '0'.
          MODIFY SCREEN.
        ENDIF.
      ENDIF.

      IF ( SCREEN-NAME = 'ZDOC_MEMORANDO-TP_FINALIDADE' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMORANDO-REMETENTE' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMORANDO-REPRESENTANTE' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMORANDO-DIRECAO' ) OR
"         ( screen-name = 'ZDOC_MEMORANDO-DT_EMISSAO_MEMO' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMORANDO-PAIS_ORIGEM' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMORANDO-UF_ORIGEM' ).
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
        MODIFY SCREEN.
      ENDIF.

      IF SCREEN-NAME = 'BT06'.
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
        MODIFY SCREEN.
      ENDIF.
      IF SCREEN-NAME = 'BT07'.
        SCREEN-OUTPUT = '0'.
        SCREEN-INPUT  = '1'.
        MODIFY SCREEN.
      ENDIF.
      IF SCREEN-NAME = 'BT08'.
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
*        SCREEN-OUTPUT = '0'.
*        SCREEN-INPUT  = '1'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ELSE.

    LOOP AT SCREEN.

      IF NOT ( ( SCREEN-NAME = 'ZDOC_MEMORANDO-NR_MEMORANDO' ) OR
               ( SCREEN-NAME = 'ZDOC_MEMORANDO-STATUS' ) OR
               ( SCREEN-NAME = 'ZDOC_MEMORANDO-REMETENTE' ) OR
               ( SCREEN-NAME = 'ZDOC_MEMORANDO-REPRESENTANTE' ) OR
               ( SCREEN-NAME = 'ZDOC_MEMORANDO-PAIS_ORIGEM' ) OR
               ( SCREEN-NAME = 'ZDOC_MEMORANDO-UF_ORIGEM' ) OR
               ( SCREEN-NAME = 'VG_NOME_REMETENTE' ) OR
               ( SCREEN-NAME = 'VG_NOME_TRANSPORTADOR' ) OR
               ( SCREEN-NAME = 'VG_NOME_REPRESENTANTE' ) OR
               ( SCREEN-NAME = 'VG_NOME_PAIS_ORIGEM' ) OR
               ( SCREEN-NAME = 'VG_NOME_UF_ORIGEM' ) OR
               ( SCREEN-NAME = 'VG_NOME_PAIS_DESTINO' ) OR
               ( SCREEN-NAME = 'ZDOC_MEMORANDO-RESPONSAVEL' ) OR
               ( SCREEN-NAME = 'ZDOC_MEMORANDO-NR_COMPLEMENTO' ) OR
               ( SCREEN-NAME = 'ZDOC_MEMORANDO-ID_TRANSPORTE' ) OR
               ( SCREEN-NAME = 'ZDOC_MEMORANDO-DS_NOME_TRANSPOR' ) ).
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '1'.
        MODIFY SCREEN.
      ENDIF.

      IF ( VG_DYNNR_ANT EQ C_5000 ) OR ( VG_DYNNR_ANT EQ C_5050 ).
        IF ( SCREEN-NAME = 'ZDOC_MEMORANDO-REMETENTE' ) OR ( SCREEN-NAME = 'ZDOC_MEMORANDO-REPRESENTANTE' )
        OR ( SCREEN-NAME = 'ZDOC_MEMORANDO-DIRECAO' ).
          SCREEN-OUTPUT = '1'.
          SCREEN-INPUT  = '0'.
          MODIFY SCREEN.
        ENDIF.
      ENDIF.

      IF SCREEN-NAME = 'BT06'.
        SCREEN-OUTPUT = '0'.
        SCREEN-INPUT  = '1'.
        MODIFY SCREEN.
      ENDIF.
      IF SCREEN-NAME = 'BT07'.
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
        MODIFY SCREEN.
      ENDIF.
      IF SCREEN-NAME = 'BT08'.
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF  L_RESP IS NOT INITIAL.
    LOOP AT SCREEN.
      IF SCREEN-NAME = 'ZDOC_MEMORANDO-RESPONSAVEL'.
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '1'.
        MODIFY SCREEN.
      ELSE.
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF ZDOC_MEMORANDO-DIRECAO IS INITIAL.
    ZDOC_MEMORANDO-DIRECAO = C_1.
  ENDIF.

  IF NOT ZDOC_MEMORANDO-REPRESENTANTE IS INITIAL.
    SELECT SINGLE NAME1 INTO VG_NOME_REPRESENTANTE
      FROM KNA1
     WHERE KUNNR EQ ZDOC_MEMORANDO-REPRESENTANTE.
  ENDIF.

  IF NOT ZDOC_MEMORANDO-REMETENTE IS INITIAL.
    CLEAR: DADOS_CLI.
    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO   = ZDOC_MEMORANDO-REMETENTE
        P_PARTYPE    = C_V
      CHANGING
        WA_INFO_PART = DADOS_CLI.
    VG_NOME_REMETENTE          = DADOS_CLI-NAME1.
    ZDOC_MEMORANDO-PAIS_ORIGEM = DADOS_CLI-LAND1.
    ZDOC_MEMORANDO-UF_ORIGEM   = DADOS_CLI-REGIO.
  ENDIF.

  IF NOT ZDOC_MEMORANDO-PAIS_ORIGEM IS INITIAL.
    SELECT SINGLE LANDX INTO VG_NOME_PAIS_ORIGEM
      FROM T005T
     WHERE SPRAS EQ SY-LANGU
       AND LAND1 EQ ZDOC_MEMORANDO-PAIS_ORIGEM.
  ENDIF.

  IF NOT ZDOC_MEMORANDO-UF_ORIGEM IS INITIAL.
    SELECT SINGLE BEZEI INTO VG_NOME_UF_ORIGEM
      FROM T005U
     WHERE SPRAS EQ SY-LANGU
       AND LAND1 EQ ZDOC_MEMORANDO-PAIS_ORIGEM
       AND BLAND EQ ZDOC_MEMORANDO-UF_ORIGEM.
  ENDIF.

  IF NOT ZDOC_MEMORANDO-TRANSPORTADOR IS INITIAL.
    SELECT SINGLE NAME1 INTO VG_NOME_TRANSPORTADOR
      FROM LFA1
     WHERE LIFNR EQ ZDOC_MEMORANDO-TRANSPORTADOR.
  ENDIF.

*   INICIO
*   ADICIONANDO AUTOMATICO O ID_TRANSPORTE E DS_NOME_TRANSPOR

  DATA(_IS_DUE) = ABAP_FALSE.
  CALL FUNCTION 'ZDUE_CHECK_NR_RE'
    EXPORTING
      I_NUMERO  = ZDOC_MEMORANDO-NR_RE
    IMPORTING
      E_IS_DUE  = _IS_DUE.

  IF _IS_DUE EQ ABAP_FALSE.

    WRITE ZDOC_MEMORANDO-NR_RE USING EDIT MASK '__/_______-___' TO NR_RE_AUX.

    IF NOT ZDOC_MEMORANDO-NR_RE IS INITIAL.
      SELECT SINGLE ID_NOMEACAO_TRAN ID_PAIS_DESTINO INTO (VG_NOME_NR_RE, VG_PAIS_DESTINO)
        FROM ZREG_EXPORTACAO
       WHERE NR_REGISTRO_EXPO EQ NR_RE_AUX.
    ENDIF.

  ELSE.

    SELECT SINGLE * INTO @DATA(_WL_0170)
      FROM ZSDT0170
     WHERE NUMERO_DUE = @ZDOC_MEMORANDO-NR_RE.

    IF SY-SUBRC EQ 0.
      VG_NOME_NR_RE = _WL_0170-ID_NOMEACAO_TRAN.

      SELECT SINGLE * INTO @DATA(_WL_0174)
        FROM ZSDT0174
       WHERE ID_DUE = @_WL_0170-ID_DUE.

      IF SY-SUBRC EQ 0.
        VG_PAIS_DESTINO =  _WL_0174-DESTINO_COUNTRY.
      ENDIF.
    ENDIF.
  ENDIF.

  IF NOT VG_NOME_NR_RE IS INITIAL.
    SELECT SINGLE ID_TRANSPORTE INTO ZDOC_MEMORANDO-ID_TRANSPORTE
      FROM ZNOM_TRANSPORTE
     WHERE ID_NOMEACAO_TRAN EQ VG_NOME_NR_RE.
  ENDIF.

  IF VG_NOME_NR_RE IS NOT INITIAL.
    IF VG_PAIS_DESTINO IS NOT INITIAL.
      ZDOC_MEMORANDO-PAIS_DESTINO = VG_PAIS_DESTINO.
    ELSE.
      SELECT SINGLE SG_PAIS_DESTINO INTO ZDOC_MEMORANDO-PAIS_DESTINO
        FROM ZNOM_CONHEC
        WHERE ID_NOMEACAO_TRAN EQ VG_NOME_NR_RE.
    ENDIF.
  ENDIF.

  IF NOT ZDOC_MEMORANDO-ID_TRANSPORTE IS INITIAL.
    SELECT SINGLE DS_NOME_TRANSPOR INTO ZDOC_MEMORANDO-DS_NOME_TRANSPOR
      FROM ZNOM_TRANSPORTE
     WHERE ID_TRANSPORTE EQ ZDOC_MEMORANDO-ID_TRANSPORTE.
  ENDIF.

  IF NOT ZDOC_MEMORANDO-PAIS_DESTINO IS INITIAL.
    SELECT SINGLE LANDX INTO VG_NOME_PAIS_DESTINO
      FROM T005T
     WHERE SPRAS EQ SY-LANGU
       AND LAND1 EQ ZDOC_MEMORANDO-PAIS_DESTINO.
  ENDIF.

* Em caso de Tranferencia entre filiais da mesma empresa executa o Verifica_tela_Trans
  IF ( NOT ZDOC_MEMORANDO-REMETENTE IS INITIAL ) AND ( NOT ZDOC_MEMORANDO-REPRESENTANTE IS INITIAL ).

    SELECT SINGLE BUKRS INTO BUKRS_REM
      FROM T001K
      WHERE BWKEY EQ ZDOC_MEMORANDO-REMETENTE+6.

    SELECT SINGLE BUKRS INTO BUKRS_REP
      FROM T001K
      WHERE BWKEY EQ ZDOC_MEMORANDO-REPRESENTANTE+6.

    IF BUKRS_REM EQ BUKRS_REP.
      PERFORM VERIFICA_TELA_TRANSF USING ZDOC_MEMORANDO-REMETENTE ZDOC_MEMORANDO-REPRESENTANTE CHANGING VG_2004_9999.
    ENDIF.

  ENDIF.

  IF VG_2004_9999 EQ C_2004.

    CASE ZDOC_MEMORANDO-DIRECAO.
      WHEN C_1.
        "Entada
        ZDOC_MEMORANDO-TP_TRANSF = C_M.
        ZDOC_MEMORANDO-BRANCH    = ZDOC_MEMORANDO-REMETENTE+6(4).
      WHEN C_2.
        "Saída
        ZDOC_MEMORANDO-TP_TRANSF = C_R.
        ZDOC_MEMORANDO-BRANCH    = ZDOC_MEMORANDO-REPRESENTANTE+6(4).
    ENDCASE.

    SELECT SINGLE * INTO WA_J_1BBRANCH
      FROM J_1BBRANCH
     WHERE BRANCH EQ ZDOC_MEMORANDO-BRANCH.

    ZDOC_MEMORANDO-BUKRS = WA_J_1BBRANCH-BUKRS.
    VG_NOME_BRANCH       = WA_J_1BBRANCH-NAME.

  ELSE.
    CLEAR: ZDOC_MEMORANDO-TP_TRANSF, ZDOC_MEMORANDO-BUKRS, ZDOC_MEMORANDO-BRANCH.
  ENDIF.

ENDMODULE.                 " STATUS_2003  OUTPUT

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_OBR_MEMO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM VERIFICA_OBR_MEMO .

  DATA: VG_VERIFICA_SELECAO TYPE SY-SUBRC,
        DADOS_CLI           TYPE KNA1,
        DADOS_FOR           TYPE LFA1,
        VG_BUKRS            TYPE BUKRS,
        VG_BRANCH           TYPE J_1BBRANC_,
        VG_MEMO             TYPE Z_MEMO_NUMERO,
        VG_SALDO_DISP       TYPE J_1BNETQTY,
        WA_ZDOC_MEMO_FORM   TYPE ZDOC_MEMO_FORM.

  IF ZDOC_MEMORANDO-TP_FINALIDADE IS INITIAL.   MESSAGE E024 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMORANDO-DIRECAO       IS INITIAL.   MESSAGE E043 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMORANDO-REPRESENTANTE IS INITIAL.   MESSAGE E035 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMORANDO-REMETENTE IS INITIAL.       MESSAGE E006 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMORANDO-FORMULARIO IS INITIAL.      MESSAGE E038 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMORANDO-DT_EMISSAO_MEMO IS INITIAL. MESSAGE E021 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMORANDO-PAIS_DESTINO IS INITIAL.    MESSAGE E016 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMORANDO-NR_RE IS INITIAL.           MESSAGE E019 DISPLAY LIKE C_S.   ENDIF.
  IF ZDOC_MEMORANDO-DT_RE IS INITIAL.           MESSAGE E020 DISPLAY LIKE C_S.   ENDIF.

  DATA(_IS_DUE) = ABAP_FALSE.
  CALL FUNCTION 'ZDUE_CHECK_NR_RE'
    EXPORTING
      I_NUMERO  = ZDOC_MEMORANDO-NR_RE
    IMPORTING
      E_IS_DUE  = _IS_DUE.

  IF _IS_DUE EQ ABAP_FALSE.
    IF ZDOC_MEMORANDO-NR_DDE IS INITIAL.          MESSAGE E017 DISPLAY LIKE C_S.   ENDIF.
    IF ZDOC_MEMORANDO-DT_DDE IS INITIAL.          MESSAGE E018 DISPLAY LIKE C_S.   ENDIF.
  ENDIF.

  PERFORM VERIFICA_TER_INTERCOMPANY_M USING ZDOC_MEMORANDO VG_VERIFICA_SELECAO SPACE.
  IF NOT VG_VERIFICA_SELECAO IS INITIAL.
    IF ZDOC_MEMORANDO-RESPONSAVEL IS INITIAL.
      MESSAGE E042 DISPLAY LIKE C_S.
    ENDIF.
  ENDIF.

  IF ( ZDOC_MEMORANDO-DIRECAO EQ 2 ) AND ( ZDOC_MEMORANDO-NUMERO_MEMO IS INITIAL ).
    MESSAGE E073.
  ELSE.
    IF ( ZDOC_MEMORANDO-NR_MEMORANDO IS INITIAL ) AND ( ZDOC_MEMORANDO-DIRECAO EQ 1 ).
      PERFORM VERIFICA_TER_SEQ_NUMERACAO USING ZDOC_MEMORANDO VG_VERIFICA_SELECAO VG_BUKRS VG_BRANCH.
      IF NOT VG_VERIFICA_SELECAO IS INITIAL.
        MESSAGE E058 DISPLAY LIKE C_S WITH VG_BUKRS VG_BRANCH.
      ENDIF.
    ENDIF.
  ENDIF.

  PERFORM VERIFICA_TER_FORMULARIO USING ZDOC_MEMORANDO VG_VERIFICA_SELECAO VG_BUKRS VG_BRANCH WA_ZDOC_MEMO_FORM.
  IF NOT VG_VERIFICA_SELECAO IS INITIAL.
    MESSAGE E066 DISPLAY LIKE C_S WITH ZDOC_MEMORANDO-FORMULARIO VG_BUKRS VG_BRANCH.
  ENDIF.

  IF NOT WA_ZDOC_MEMO_FORM IS INITIAL.
    IF WA_ZDOC_MEMO_FORM-TP_MOD_IMP IS INITIAL.
      MESSAGE E078 DISPLAY LIKE C_S WITH ZDOC_MEMORANDO-FORMULARIO VG_BUKRS VG_BRANCH.
    ENDIF.
  ENDIF.

  PERFORM VERIFICA_USO_FORMULARIO USING ZDOC_MEMORANDO VG_VERIFICA_SELECAO VG_MEMO WA_ZDOC_MEMO_FORM.
  IF NOT VG_VERIFICA_SELECAO IS INITIAL.
    MESSAGE E067 DISPLAY LIKE C_S WITH ZDOC_MEMORANDO-FORMULARIO VG_MEMO.
  ENDIF.

  PERFORM VERIFICA_FORM_INUTILIZADO USING ZDOC_MEMORANDO VG_VERIFICA_SELECAO.
  IF NOT VG_VERIFICA_SELECAO IS INITIAL.
    MESSAGE E069 DISPLAY LIKE C_S WITH ZDOC_MEMORANDO-FORMULARIO.
  ENDIF.

  PERFORM VERIFICA_SALDO_REMETENTE USING ZDOC_MEMO_NF_EXP ZDOC_MEMORANDO VG_VERIFICA_SELECAO VG_SALDO_DISP.
  IF NOT VG_VERIFICA_SELECAO IS INITIAL.
    CASE ZDOC_MEMORANDO-DIRECAO.
*      WHEN 1. "Entrada """Removido a direção 1, mais a frete senão tiver saldo não tera nenhuma nota para vincular.
*        MESSAGE E071 DISPLAY LIKE C_S WITH VG_SALDO_DISP ZDOC_MEMORANDO-REMETENTE.
      WHEN 2. "Saída
        MESSAGE E072 DISPLAY LIKE C_S WITH VG_SALDO_DISP ZDOC_MEMORANDO-REPRESENTANTE.
    ENDCASE.
  ENDIF.

  CLEAR: DADOS_CLI, DADOS_FOR.

  IF ZDOC_MEMORANDO-DIRECAO EQ C_2.

    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO   = ZDOC_MEMORANDO-REMETENTE
        P_PARTYPE    = C_V
      CHANGING
        WA_INFO_PART = DADOS_FOR.

    IF DADOS_FOR-KTOKK NE C_ZFIC.
      MESSAGE E045 DISPLAY LIKE C_S.
    ENDIF.

  ELSEIF ZDOC_MEMORANDO-DIRECAO EQ C_1.

    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO = ZDOC_MEMORANDO-REPRESENTANTE
        P_PARTYPE  = C_C
      CHANGING
        WA_INFO_C  = DADOS_CLI.

    IF DADOS_CLI-KTOKD NE C_ZCIC.
      MESSAGE E046 DISPLAY LIKE C_S.
    ENDIF.

  ENDIF.

  PERFORM VERIFICA_TELA_TRANSF USING ZDOC_MEMORANDO-REMETENTE ZDOC_MEMORANDO-REPRESENTANTE CHANGING VG_2004_9999.

  IF VG_2004_9999 EQ C_2004.

    CASE ZDOC_MEMORANDO-DIRECAO.
      WHEN C_1.
        "Entada
        ZDOC_MEMORANDO-TP_TRANSF = C_M.
        ZDOC_MEMORANDO-BRANCH    = ZDOC_MEMORANDO-REMETENTE+6(4).
      WHEN C_2.
        "Saída
        ZDOC_MEMORANDO-TP_TRANSF = C_R.
        ZDOC_MEMORANDO-BRANCH    = ZDOC_MEMORANDO-REPRESENTANTE+6(4).
    ENDCASE.

    SELECT SINGLE * INTO WA_J_1BBRANCH
      FROM J_1BBRANCH
     WHERE BRANCH EQ ZDOC_MEMORANDO-BRANCH.

    ZDOC_MEMORANDO-BUKRS = WA_J_1BBRANCH-BUKRS.

  ELSE.
    CLEAR: ZDOC_MEMORANDO-TP_TRANSF, ZDOC_MEMORANDO-BUKRS, ZDOC_MEMORANDO-BRANCH.
  ENDIF.


ENDFORM.                    " VERIFICA_OBR_MEMO

*&---------------------------------------------------------------------*
*&      Form  CARREGA_DESCRICOES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM CARREGA_DESCRICOES .

  IF NOT WA_MEMORANDO_TELA-REPRESENTANTE IS INITIAL.
    SELECT SINGLE NAME1 INTO WA_MEMORANDO_TELA-VG_NOME_REPRESENTANTE
      FROM KNA1
     WHERE KUNNR EQ WA_MEMORANDO_TELA-REPRESENTANTE.
  ENDIF.

  IF NOT WA_MEMORANDO_TELA-REMETENTE IS INITIAL.
    SELECT SINGLE NAME1 INTO WA_MEMORANDO_TELA-VG_NOME_REMETENTE
      FROM LFA1
     WHERE LIFNR EQ WA_MEMORANDO_TELA-REMETENTE.
  ENDIF.

  IF NOT WA_MEMORANDO_TELA-TRANSPORTADOR IS INITIAL.
    SELECT SINGLE NAME1 INTO WA_MEMORANDO_TELA-VG_NOME_TRANSPORTADOR
      FROM LFA1
     WHERE LIFNR EQ WA_MEMORANDO_TELA-TRANSPORTADOR.
  ENDIF.

  IF NOT WA_MEMORANDO_TELA-PAIS_ORIGEM IS INITIAL.
    SELECT SINGLE LANDX INTO WA_MEMORANDO_TELA-VG_NOME_PAIS_ORIGEM
      FROM T005T
     WHERE SPRAS EQ SY-LANGU
       AND LAND1 EQ WA_MEMORANDO_TELA-PAIS_ORIGEM.
  ENDIF.

  IF NOT WA_MEMORANDO_TELA-UF_ORIGEM IS INITIAL.
    SELECT SINGLE BEZEI INTO WA_MEMORANDO_TELA-VG_NOME_UF_ORIGEM
      FROM T005U
     WHERE SPRAS EQ SY-LANGU
       AND LAND1 EQ WA_MEMORANDO_TELA-PAIS_ORIGEM
       AND BLAND EQ WA_MEMORANDO_TELA-UF_ORIGEM.
  ENDIF.

  IF NOT WA_MEMORANDO_TELA-PAIS_DESTINO IS INITIAL.
    SELECT SINGLE LANDX INTO WA_MEMORANDO_TELA-VG_NOME_PAIS_DESTINO
      FROM T005T
     WHERE SPRAS EQ SY-LANGU
       AND LAND1 EQ WA_MEMORANDO_TELA-PAIS_DESTINO.
  ENDIF.

ENDFORM.                    " CARREGA_DESCRICOES

*&---------------------------------------------------------------------*
*&      Form  ADD_MEMORANDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ADD_MEMORANDO .

  DATA: VG_TOTAL            TYPE J_1BNETQTY,
        VG_VERIFICA_SELECAO TYPE SY-SUBRC,
        DADOS_CLI           TYPE LFA1.

  PERFORM VERIFICA_OBR_MEMO.

  VG_TOTAL_MEMORANDOS = 0.

  LOOP AT IT_MEMORANDO_TELA INTO WA_MEMORANDO_TELA.
    IF ( WA_MEMORANDO_TELA-CANCELADO IS INITIAL ) AND ( WA_MEMORANDO_TELA-DIRECAO EQ ZDOC_MEMORANDO-DIRECAO ).
      VG_TOTAL_MEMORANDOS = VG_TOTAL_MEMORANDOS + WA_MEMORANDO_TELA-QUANTIDADE_MEMO.
    ENDIF.
  ENDLOOP.

  VG_TOTAL = VG_TOTAL_MEMORANDOS + ZDOC_MEMORANDO-QUANTIDADE_MEMO.

  IF VG_TOTAL GT ZDOC_MEMO_NF_EXP-QUANTIDADE.
    MESSAGE E029 DISPLAY LIKE C_S.
  ENDIF.

  VG_TOTAL_MEMORANDOS = VG_TOTAL.

  PERFORM VERIFICA_TER_INTERCOMPANY_M USING ZDOC_MEMORANDO VG_VERIFICA_SELECAO SPACE.
  IF VG_VERIFICA_SELECAO IS INITIAL.
    PERFORM RESPONSAVEL_MEMORANDO USING ZDOC_MEMORANDO-RESPONSAVEL.
  ENDIF.

  IF NOT ZDOC_MEMORANDO-REMETENTE IS INITIAL.
    CLEAR: DADOS_CLI.
    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO   = ZDOC_MEMORANDO-REMETENTE
        P_PARTYPE    = C_V
      CHANGING
        WA_INFO_PART = DADOS_CLI.
    ZDOC_MEMORANDO-PAIS_ORIGEM = DADOS_CLI-LAND1.
    ZDOC_MEMORANDO-UF_ORIGEM   = DADOS_CLI-REGIO.
  ENDIF.

  MOVE-CORRESPONDING ZDOC_MEMORANDO TO WA_MEMORANDO_TELA.

  PERFORM CARREGA_DESCRICOES.

  WA_MEMORANDO_TELA-STATUS      = SPACE.
  WA_MEMORANDO_TELA-MARK        = C_X.
  WA_MEMORANDO_TELA-NR_NOTA_EXP = ZDOC_MEMO_NF_EXP-NR_NOTA_EXP.
  WA_MEMORANDO_TELA-SEQ         = SEQU_MEMORANDO + 1.
  SEQU_MEMORANDO = SEQU_MEMORANDO + 1.

  APPEND WA_MEMORANDO_TELA TO IT_MEMORANDO_TELA.

  VG_DYNNR_TAB = C_2002.

ENDFORM.                    " ADD_MEMORANDO

*&---------------------------------------------------------------------*
*&      Form  ALT_MEMORANDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ALT_MEMORANDO .

  DATA: VG_TOTAL  TYPE J_1BNETQTY,
        DADOS_CLI TYPE LFA1,
        VG_TABIX  TYPE SY-TABIX.


  PERFORM VERIFICAR_MEMO_PROTOCOLADO USING ZDOC_MEMORANDO-NR_MEMORANDO.

  PERFORM VERIFICA_OBR_MEMO.

  VG_TOTAL_MEMORANDOS = 0.

  LOOP AT IT_MEMORANDO_TELA INTO WA_MEMORANDO_TELA.
    IF ( WA_MEMORANDO_TELA-CANCELADO IS INITIAL ) AND ( WA_MEMORANDO_TELA-DIRECAO EQ ZDOC_MEMORANDO-DIRECAO )
         AND ( WA_MEMORANDO_TELA-NR_MEMORANDO NE ZDOC_MEMORANDO-NR_MEMORANDO ).
      VG_TOTAL_MEMORANDOS = VG_TOTAL_MEMORANDOS + WA_MEMORANDO_TELA-QUANTIDADE_MEMO.
    ENDIF.
  ENDLOOP.

  VG_TOTAL = VG_TOTAL_MEMORANDOS + ZDOC_MEMORANDO-QUANTIDADE_MEMO.

  IF VG_TOTAL GT ZDOC_MEMO_NF_EXP-QUANTIDADE.
    MESSAGE E029 DISPLAY LIKE C_S.
  ENDIF.

  VG_TOTAL_MEMORANDOS = VG_TOTAL.

  IF NOT ZDOC_MEMORANDO-REMETENTE IS INITIAL.
    CLEAR: DADOS_CLI.
    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO   = ZDOC_MEMORANDO-REMETENTE
        P_PARTYPE    = C_V
      CHANGING
        WA_INFO_PART = DADOS_CLI.
    ZDOC_MEMORANDO-PAIS_ORIGEM = DADOS_CLI-LAND1.
    ZDOC_MEMORANDO-UF_ORIGEM   = DADOS_CLI-REGIO.
  ENDIF.

  MOVE-CORRESPONDING ZDOC_MEMORANDO TO WA_MEMORANDO_TELA.

  LOOP AT IT_MEMORANDO_TELA WHERE NR_MEMORANDO EQ WA_MEMORANDO_TELA-NR_MEMORANDO.
    VG_TABIX = SY-TABIX.
    WA_MEMORANDO_TELA-MARK   = C_X.
    PERFORM DESBLOQUEIA USING WA_MEMORANDO_TELA-NR_MEMORANDO.
    " Altera o memorando se somente 1 foi solicitao
    MODIFY IT_MEMORANDO_TELA INDEX VG_TABIX FROM WA_MEMORANDO_TELA TRANSPORTING TP_FINALIDADE NR_COMPLEMENTO REPRESENTANTE REMETENTE TRANSPORTADOR
                                                                                DT_EMISSAO_MEMO QUANTIDADE_MEMO NUMERO_MEMO FORMULARIO PAIS_ORIGEM
                                                                                UF_ORIGEM PAIS_DESTINO OBSERVACAO RESPONSAVEL STATUS NR_DDE DT_DDE
                                                                                NR_RE DT_RE MARK DIRECAO TP_TRANSF BUKRS BRANCH.
  ENDLOOP.

  "Camila
  " Altera demais memorandos que foram selecionado.

  CLEAR: WA_MEMORANDO_TELA_ALT, WA_MEMORANDO_TELA_AUX, VG_TABIX.
  READ TABLE IT_MEMORANDO_TELA INTO WA_MEMORANDO_TELA_ALT WITH KEY NR_MEMORANDO = WA_MEMORANDO_TELA-NR_MEMORANDO.

  IT_MEMORANDO_TELA_AUX[] = IT_MEMORANDO_TELA[].

  LOOP AT IT_MEMORANDO_TELA_AUX INTO WA_MEMORANDO_TELA_AUX WHERE NR_MEMORANDO NE WA_MEMORANDO_TELA-NR_MEMORANDO.
    VG_TABIX = SY-TABIX.
    "Pego os campos do memorando alterado
    "Pais Destino - Nº DDE - DT DDE - Nº Re - DT RE - Transportador
    IF L_RESP IS INITIAL. " Edita somente o responsavel
      IF WA_MEMORANDO_TELA_AUX-STATUS NE 'F' AND
         WA_MEMORANDO_TELA_AUX-STATUS NE 'T' AND
         WA_MEMORANDO_TELA_AUX-STATUS NE 'I'.
        MODIFY IT_MEMORANDO_TELA
         INDEX VG_TABIX
          FROM WA_MEMORANDO_TELA_ALT
          TRANSPORTING PAIS_DESTINO NR_DDE DT_DDE NR_RE DT_RE TRANSPORTADOR OBSERVACAO DT_EMISSAO_MEMO.
      ENDIF.
    ELSE.
      MODIFY IT_MEMORANDO_TELA
       INDEX VG_TABIX
        FROM WA_MEMORANDO_TELA_ALT
        TRANSPORTING RESPONSAVEL.
    ENDIF.

  ENDLOOP.
  "Fim Camila

  CLEAR L_RESP.
  VG_DYNNR_TAB = C_2002.


ENDFORM.                    " ALT_MEMORANDO

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_2003  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_2003 INPUT.

  IF SY-UCOMM EQ C_TABMM.
    CLEAR: OK_CODE.
    VG_DYNNR_TAB = C_2002.
    PERFORM DESBLOQUEIA USING WA_MEMORANDO_TELA-NR_MEMORANDO.
  ENDIF.

ENDMODULE.                 " USER_COMMAND_2003  INPUT

*&---------------------------------------------------------------------*
*&      Form  POPULA_TELA_NOTA_MEMORANDOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM POPULA_TELA_NOTA_MEMORANDOS .

  DATA: WA_J_1BNFDOC TYPE J_1BNFDOC,
        WA_J_1BNFLIN TYPE J_1BNFLIN,
        WA_J_CABE    TYPE J_1BINDOC,
        WA_ACTIVE    TYPE J_1BNFE_ACTIVE,
        VG_DOCNUM    TYPE J_1BDOCNUM,
        VG_VBELN     TYPE VBELN_VF,
        VG_POSNR     TYPE POSNR_VF,
        WA_VBRP      TYPE VBRP.

  DATA: IT_MEMORANDO       TYPE TABLE OF ZDOC_MEMORANDO   INITIAL SIZE 0 WITH HEADER LINE,
        IT_CONHEC          TYPE TABLE OF ZDOC_MEMO_NOMEAC INITIAL SIZE 0 WITH HEADER LINE,
        IT_NOTAS_MEMORANDO TYPE TABLE OF ZDOC_MEMO_NOTA   INITIAL SIZE 0 WITH HEADER LINE,
        WA_NOTA_EXPORTACAO TYPE ZDOC_MEMO_NF_EXP.

  VG_DOCNUM = ZDOC_MEMO_NF_EXP-DOCNUM.

  CALL FUNCTION 'Z_MEMO_ADD_NFE'
    EXPORTING
      VG_DOCNUM                = VG_DOCNUM
      P_GRAVAR                 = C_S
    TABLES
      IT_MEMORANDO             = IT_MEMORANDO
      IT_CONHEC                = IT_CONHEC
      IT_NOTAS_MEMORANDO       = IT_NOTAS_MEMORANDO
    CHANGING
      WA_MEMO_NF_EXP           = WA_NOTA_EXPORTACAO
    EXCEPTIONS
      DOCN_LOCALIZADO          = 1
      DOCN_MEMORANDO           = 2
      DOCN_CANCELADO           = 3
      DOCN_CANCELADO_AUT       = 4
      DOCN_NELETRONICO         = 5
      DOCN_RESPRES_LEGAL       = 6
      DOCN_RE_NAO_ENCONTRADA   = 7
      DOCN_DDE_NAO_ENCONTRADA  = 8
      PAIS_NAO_ENCONTRADO      = 9
      DOCN_DDE_NAO_ENCONTRADA2 = 10
      SEM_SALDO_COMPROVAR      = 11
      OTHERS                   = 12.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ELSE.


    IF ( IT_NOTAS_MEMORANDO[] IS INITIAL ).
      MESSAGE E000 WITH 'CFOP NÃO PARAMETRIZADO' 'PARA GERAR MEMORANDO DE EXPORTAÇÃO.'.
    ELSE.

      MOVE-CORRESPONDING WA_NOTA_EXPORTACAO TO ZDOC_MEMO_NF_EXP.

      PERFORM POPULAR_MEMORANDOS.
      PERFORM POPULAR_CONHEC_MEMORANDO.

      VG_DYNNR_TAB = C_2002.
      VG_DYNNR_CAD = C_2005.

    ENDIF.
  ENDIF.

ENDFORM.                    " POPULA_TELA_NOTA_MEMORANDOS

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_2002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_2002 INPUT.

  " Preciso verificar a seleção que foi feita pelo usuário
  DATA : CTR TYPE I.
  CLEAR: CTR, IT_MEMORANDO_TELA_AUX.

  IF OK_CODE EQ C_TABCD.
    IT_MEMORANDO_TELA_AUX[] = IT_MEMORANDO_TELA[].
    DELETE IT_MEMORANDO_TELA_AUX[] WHERE MARK   EQ SPACE.
    DESCRIBE TABLE IT_MEMORANDO_TELA_AUX LINES  CTR.

    IF CTR > 1. " Mais de uma linha selecionada

      CTR = 0.

      DELETE IT_MEMORANDO_TELA_AUX[] WHERE MARK   EQ SPACE.
      DELETE IT_MEMORANDO_TELA_AUX[] WHERE STATUS EQ SPACE.
      DELETE IT_MEMORANDO_TELA_AUX[] WHERE STATUS EQ 'P'.

      DESCRIBE TABLE IT_MEMORANDO_TELA_AUX LINES  CTR.

      IF CTR > 0.
        MESSAGE I089 DISPLAY LIKE C_S.
        EXIT.
      ENDIF.

    ENDIF.
  ENDIF.

  CLEAR WA_MEMORANDO_TELA.

  IF OK_CODE EQ C_TABCD.
    CLEAR: OK_CODE.
    CLEAR: WA_MEMORANDO_TELA.
    READ TABLE IT_MEMORANDO_TELA INTO WA_MEMORANDO_TELA WITH KEY MARK = C_X.
    IF SY-SUBRC EQ 0.
      IF NOT WA_MEMORANDO_TELA-NR_MEMORANDO IS INITIAL.
        PERFORM VERIFICA_BLOQUEIO USING WA_MEMORANDO_TELA-NR_MEMORANDO.
      ENDIF.
      VG_DYNNR_TAB = C_2003.
      MOVE-CORRESPONDING WA_MEMORANDO_TELA TO ZDOC_MEMORANDO.
      VG_TOTAL_MEMORANDOS = VG_TOTAL_MEMORANDOS - ZDOC_MEMORANDO-QUANTIDADE_MEMO.
      CLEAR: VG_NOVO_LANC.
    ELSE.
      CLEAR: ZDOC_MEMORANDO.
      VG_DYNNR_TAB = C_2003.
      VG_NOVO_LANC = C_X.
    ENDIF.
  ENDIF.


ENDMODULE.                 " USER_COMMAND_2002  INPUT

*&---------------------------------------------------------------------*
*&      Form  RESPONSAVEL_MEMORANDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_VG_RESPONSAVEL  text
*----------------------------------------------------------------------*
FORM RESPONSAVEL_MEMORANDO  USING  VG_RESPONSAVEL TYPE CHAR50.

  DATA: WA_SETLEAF TYPE SETLEAF,
        VG_KOKRS   TYPE KOKRS,
        VG_KOSTL   TYPE KOSTL.

  "Opter Área de contabilidade de custos
  SELECT SINGLE * INTO WA_SETLEAF
    FROM SETLEAF
   WHERE SETNAME EQ 'ZMEMORANDO_KOKRS'.

  VG_KOKRS = WA_SETLEAF-VALFROM.

  "Opter Centro de custo
  SELECT SINGLE * INTO WA_SETLEAF
    FROM SETLEAF
   WHERE SETNAME EQ 'ZMEMORANDO_KOSTL'.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = WA_SETLEAF-VALFROM
    IMPORTING
      OUTPUT = VG_KOSTL.

  "Informações de Centro de Custo
  SELECT SINGLE VERAK INTO VG_RESPONSAVEL
    FROM CSKS
   WHERE KOKRS EQ VG_KOKRS
     AND KOSTL EQ VG_KOSTL.

ENDFORM.                    " RESPONSAVEL_MEMORANDO


*&---------------------------------------------------------------------*
*&      Form  DEL_MEMORANDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*FORM DEL_MEMORANDO .
*
*  PERFORM VERIFICAR_MEMO_PROTOCOLADO USING WA_MEMORANDO_TELA-NR_MEMORANDO.
*
*  READ TABLE IT_MEMORANDO_TELA INTO WA_MEMORANDO_TELA WITH KEY MARK = C_X.
*  CLEAR: WA_MEMORANDO_TELA-MARK.
*  APPEND WA_MEMORANDO_TELA TO IT_MEMORANDO_DELE.
*  DELETE IT_MEMORANDO_TELA WHERE MARK EQ C_X.
*  VG_DYNNR_TAB = C_2002.
*  VG_ALTEROU_MEMORANDO = C_X.
*
*ENDFORM.                    " DEL_MEMORANDO

*&---------------------------------------------------------------------*
*&      Module  SET_UPDATE_FLAG_MEMO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SET_UPDATE_FLAG_MEMO INPUT.

  IF TERCEIRO IS NOT INITIAL.
    ZDOC_MEMORANDO-DIRECAO = 2.
  ENDIF.

  VG_ALTEROU_MEMORANDO = C_X.
ENDMODULE.                 " SET_UPDATE_FLAG_MEMO  INPUT

*----------------------------------------------------------------------*
*  MODULE tab_conhec_change_tc_attr OUTPUT
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
MODULE TAB_CONHEC_CHANGE_TC_ATTR OUTPUT.
  DESCRIBE TABLE IT_CONHEC LINES TAB_CONHEC-LINES.
ENDMODULE.                    "TAB_CONHEC_CHANGE_TC_ATTR OUTPUT

*----------------------------------------------------------------------*
*  MODULE tab_conhec_mark INPUT
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
MODULE TAB_CONHEC_MARK INPUT.
  DATA: G_TAB_CONHEC_WA2 LIKE LINE OF IT_CONHEC.
  IF TAB_CONHEC-LINE_SEL_MODE = 1
  AND IT_CONHEC-MARK = C_X.
    LOOP AT IT_CONHEC INTO G_TAB_CONHEC_WA2
      WHERE MARK = C_X.
      G_TAB_CONHEC_WA2-MARK = ''.
      MODIFY IT_CONHEC
        FROM G_TAB_CONHEC_WA2
        TRANSPORTING MARK.
    ENDLOOP.
  ENDIF.
  MODIFY IT_CONHEC
    INDEX TAB_CONHEC-CURRENT_LINE
    TRANSPORTING MARK.
ENDMODULE.                    "TAB_CONHEC_MARK INPUT

*&SPWIZARD: OUTPUT MODULE FOR TC 'TAB_MEMO_TODOS'. DO NOT CHANGE THIS LI
*&SPWIZARD: UPDATE LINES FOR EQUIVALENT SCROLLBAR
MODULE TAB_MEMO_TODOS_CHANGE_TC_ATTR OUTPUT.
  DESCRIBE TABLE IT_MEMORANDO_TELA LINES TAB_MEMO_TODOS-LINES.
ENDMODULE.                    "TAB_MEMO_TODOS_CHANGE_TC_ATTR OUTPUT

*&SPWIZARD: INPUT MODUL FOR TC 'TAB_MEMO_TODOS'. DO NOT CHANGE THIS LINE
*&SPWIZARD: MARK TABLE
MODULE TAB_MEMO_TODOS_MARK INPUT.
  DATA: G_TAB_MEMO_TODOS_WA2 LIKE LINE OF IT_MEMORANDO_TELA.
  IF TAB_MEMO_TODOS-LINE_SEL_MODE = 1
  AND IT_MEMORANDO_TELA-MARK = C_X.
    LOOP AT IT_MEMORANDO_TELA INTO G_TAB_MEMO_TODOS_WA2
      WHERE MARK = C_X.
      G_TAB_MEMO_TODOS_WA2-MARK = ''.
      MODIFY IT_MEMORANDO_TELA
        FROM G_TAB_MEMO_TODOS_WA2
        TRANSPORTING MARK.
    ENDLOOP.
  ENDIF.
  MODIFY IT_MEMORANDO_TELA
    INDEX TAB_MEMO_TODOS-CURRENT_LINE
    TRANSPORTING MARK.
ENDMODULE.                    "TAB_MEMO_TODOS_MARK INPUT

*&---------------------------------------------------------------------*
*&      Form  ATUALIZA_MEMORANDOS_TELA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ATUALIZA_MEMORANDOS_TELA .

  DATA: VG_TABIX       TYPE SY-TABIX,
        WA_EMISSOR     TYPE ZMEMO_CLIENTE,
        DADOS_CLIENTE  TYPE KNA1,
        DADOS_FORNECE  TYPE LFA1,
        VG_CPF         TYPE C LENGTH 14,
        VG_CNPJ        TYPE C LENGTH 18,
        IT_EMISSOR     TYPE TABLE OF ZMEMO_CLIENTE INITIAL SIZE 0 WITH HEADER LINE,
        IT_REMETENTE   TYPE TABLE OF ZMEMO_CLIENTE INITIAL SIZE 0 WITH HEADER LINE,
        IT_MEMORANDOS2 TYPE TABLE OF ZMEMO_MEMORANDO INITIAL SIZE 0 WITH HEADER LINE.

  MOVE IT_MEMORANDOS[] TO IT_MEMORANDOS2[].

  LOOP AT IT_MEMORANDOS INTO WA_MEMORANDO WHERE NR_NOTA_EXP EQ ZDOC_MEMO_NF_EXP-NR_NOTA_EXP.
    PERFORM DESBLOQUEIA USING WA_MEMORANDO-NR_MEMORANDO.
  ENDLOOP.

  CLEAR: IT_MEMORANDOS[].

  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE IT_MEMORANDOS
    FROM ZDOC_MEMORANDO AS ME
   INNER JOIN ZDOC_MEMO_NF_EXP AS NF ON NF~NR_NOTA_EXP EQ ME~NR_NOTA_EXP
    FOR ALL ENTRIES IN IT_MEMORANDOS2
   WHERE ME~NR_MEMORANDO EQ IT_MEMORANDOS2-NR_MEMORANDO.

  "Informações do exportador da nota de exportação
  MOVE IT_MEMORANDOS[] TO IT_MEMORANDOS_AUX[].
  SORT IT_MEMORANDOS_AUX BY EMISSOR.
  DELETE ADJACENT DUPLICATES FROM IT_MEMORANDOS_AUX COMPARING EMISSOR.
  CLEAR: IT_EMISSOR.

  LOOP AT IT_MEMORANDOS_AUX INTO WA_MEMORANDO.
    CLEAR: DADOS_CLIENTE.

    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO = WA_MEMORANDO-EMISSOR
        P_PARTYPE  = C_C
      CHANGING
        WA_INFO_C  = DADOS_CLIENTE.

    WA_EMISSOR-COD  = WA_MEMORANDO-EMISSOR.
    WA_EMISSOR-NOME = DADOS_CLIENTE-NAME1.
    IF DADOS_CLIENTE-STKZN IS INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_CGCBR_OUTPUT'
        EXPORTING
          INPUT  = DADOS_CLIENTE-STCD1
        IMPORTING
          OUTPUT = VG_CNPJ.
      WA_EMISSOR-CNPJ = VG_CNPJ.
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_CPFBR_OUTPUT'
        EXPORTING
          INPUT  = DADOS_CLIENTE-STCD2
        IMPORTING
          OUTPUT = VG_CPF.
      WA_EMISSOR-CNPJ = VG_CPF.
    ENDIF.

    APPEND WA_EMISSOR TO IT_EMISSOR.
  ENDLOOP.
  SORT IT_EMISSOR BY COD.

  "Informações do remetente da nota de exportação
  MOVE IT_MEMORANDOS[] TO IT_MEMORANDOS_AUX[].
  SORT IT_MEMORANDOS_AUX BY REMETENTE.
  DELETE ADJACENT DUPLICATES FROM IT_MEMORANDOS_AUX COMPARING REMETENTE.
  CLEAR: IT_REMETENTE.

  LOOP AT IT_MEMORANDOS_AUX INTO WA_MEMORANDO.
    CLEAR: DADOS_FORNECE.

    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO   = WA_MEMORANDO-REMETENTE
        P_PARTYPE    = C_V
      CHANGING
        WA_INFO_PART = DADOS_FORNECE.

    WA_EMISSOR-COD  = WA_MEMORANDO-REMETENTE.
    WA_EMISSOR-NOME = DADOS_FORNECE-NAME1.
    IF DADOS_FORNECE-STKZN IS INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_CGCBR_OUTPUT'
        EXPORTING
          INPUT  = DADOS_FORNECE-STCD1
        IMPORTING
          OUTPUT = VG_CNPJ.
      WA_EMISSOR-CNPJ = VG_CNPJ.
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_CPFBR_OUTPUT'
        EXPORTING
          INPUT  = DADOS_FORNECE-STCD2
        IMPORTING
          OUTPUT = VG_CPF.
      WA_EMISSOR-CNPJ = VG_CPF.
    ENDIF.

    APPEND WA_EMISSOR TO IT_REMETENTE.
  ENDLOOP.
  SORT IT_REMETENTE BY COD.

  LOOP AT IT_MEMORANDOS INTO WA_MEMORANDO.
    VG_TABIX = SY-TABIX.
    "Emissor
    READ TABLE IT_EMISSOR INTO WA_EMISSOR WITH KEY COD = WA_MEMORANDO-EMISSOR BINARY SEARCH.
    WA_MEMORANDO-EMISSORN    = WA_EMISSOR-NOME.
    WA_MEMORANDO-EMISSORCNPJ = WA_EMISSOR-CNPJ.
    "Remetente
    READ TABLE IT_REMETENTE INTO WA_EMISSOR WITH KEY COD = WA_MEMORANDO-REMETENTE BINARY SEARCH.
    WA_MEMORANDO-REMETENTEN    = WA_EMISSOR-NOME.
    WA_MEMORANDO-REMETENTECNPJ = WA_EMISSOR-CNPJ.

    PERFORM STATUS_MEMORANDO USING WA_MEMORANDO CHANGING WA_MEMORANDO-ICONE.

    MODIFY IT_MEMORANDOS INDEX VG_TABIX FROM WA_MEMORANDO TRANSPORTING EMISSORN EMISSORCNPJ REMETENTEN REMETENTECNPJ ICONE.
  ENDLOOP.

  SORT IT_MEMORANDOS[] BY NUMERO_NOTA NUMERO_MEMO.

ENDFORM.                    " ATUALIZA_MEMORANDOS_TELA

*&---------------------------------------------------------------------*
*&      Form  NOTA_ENTRADA_VINCULADA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM NOTA_ENTRADA_VINCULADA  USING    P_NOTA_EXP  TYPE Z_MEMORANDO
                                      VG_NOTAS    TYPE SY-SUBRC.

  DATA: WA_NOTA TYPE ZDOC_MEMO_NF_EXP.

  SELECT SINGLE * INTO WA_NOTA
    FROM ZDOC_MEMO_NF_EXP AS X
   WHERE NR_NOTA_EXP EQ P_NOTA_EXP
     AND EXISTS ( SELECT *
                    FROM ZDOC_MEMORANDO AS M
                     INNER JOIN ZDOC_MEMO_NOTA AS N ON N~NR_MEMORANDO EQ M~NR_MEMORANDO
                   WHERE M~NR_NOTA_EXP EQ X~NR_NOTA_EXP ).

  VG_NOTAS = SY-SUBRC.

ENDFORM.                    " NOTA_ENTRADA_VINCULADA

*&---------------------------------------------------------------------*
*&      Form  NOTA_ENTRADA_VINCULADA_MEMO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM NOTA_ENTRADA_VINCULADA_MEMO  USING    MEMORANDO TYPE Z_MEMORANDO
                                           VG_NOTAS  TYPE SY-SUBRC.

  DATA: WA_MEMORANDO TYPE ZDOC_MEMORANDO.

  SELECT SINGLE * INTO WA_MEMORANDO
    FROM ZDOC_MEMORANDO AS M
   WHERE NR_MEMORANDO EQ MEMORANDO
     AND EXISTS ( SELECT *
                    FROM ZDOC_MEMO_NOTA AS N
                   WHERE N~NR_MEMORANDO EQ M~NR_MEMORANDO ).

  VG_NOTAS = SY-SUBRC.

ENDFORM.                    " NOTA_ENTRADA_VINCULADA_MEMO

*&---------------------------------------------------------------------*
*&      Form  LANCAR_NOTAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM LANCAR_NOTAS .

  DATA: VG_VERIFICA_SELECAO TYPE SY-SUBRC.

  PERFORM VERIFICA_SELECAO_MEMO USING VG_VERIFICA_SELECAO.

  IF WA_MEMORANDO_TELA-CANCELADO IS INITIAL.
    IF VG_VERIFICA_SELECAO EQ 0.
      IF WA_MEMORANDO_TELA-DIRECAO EQ C_1.
        PERFORM VERIFICA_BLOQUEIO USING WA_MEMORANDO_TELA-NR_MEMORANDO.
        IF SY-TCODE EQ 'ZMEMO01N'.
          VG_4002_6002     = C_4003.
        ELSE.
          VG_4002_6002     = C_4002.
        ENDIF.
        VG_DYNNR_N1      = VG_DYNNR_ANT.
        VG_DYNNR_ANT     = VG_DYNNR_000.
        VG_DYNNR_000     = C_4000.
        J_1BNFDOC-DOCDAT = SY-DATUM.
        J_1BNFDOC-PSTDAT = SY-DATUM.
        VG_QTD_VINCU     = 0.
        MOVE-CORRESPONDING WA_MEMORANDO_TELA TO ZDOC_MEMORANDO.
        PERFORM POPULAR_NOTAS_VINCULADAS USING ZDOC_MEMORANDO-NR_MEMORANDO.
      ELSE.
        MESSAGE TEXT-E08 TYPE C_E DISPLAY LIKE C_S.
      ENDIF.
    ENDIF.
  ELSE.
    WA_MEMORANDO-DIRECAO = C_1.
    CALL SCREEN 1006.
  ENDIF.

ENDFORM.                    " LANCAR_NOTAS

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_SELECAO_MEMO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM VERIFICA_SELECAO_MEMO  USING  VG_VERIFICA_SELECAO TYPE SY-SUBRC.

  READ TABLE IT_MEMORANDO_TELA INTO WA_MEMORANDO_TELA WITH KEY MARK = C_X.
  VG_VERIFICA_SELECAO = SY-SUBRC.

  IF SY-SUBRC NE 0.
    MESSAGE TEXT-E01 TYPE C_E DISPLAY LIKE C_S.
  ENDIF.

ENDFORM.                    " VERIFICA_SELECAO_MEMO

*&---------------------------------------------------------------------*
*&      Form  LANCAR_NOTAS_S
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM LANCAR_NOTAS_S .

  DATA: VG_VERIFICA_SELECAO TYPE SY-SUBRC.

  PERFORM VERIFICA_SELECAO_MEMO USING VG_VERIFICA_SELECAO.

  IF WA_MEMORANDO_TELA-CANCELADO IS INITIAL.
    IF VG_VERIFICA_SELECAO EQ 0.
      IF WA_MEMORANDO_TELA-DIRECAO EQ C_2.
        PERFORM VERIFICA_BLOQUEIO USING WA_MEMORANDO_TELA-NR_MEMORANDO.
        IF SY-TCODE EQ 'ZMEMO01N'.
          VG_4002_6002     = C_6003.
        ELSE.
          VG_4002_6002     = C_6002.
        ENDIF.
        VG_DYNNR_N1      = VG_DYNNR_ANT.
        VG_DYNNR_ANT     = VG_DYNNR_000.
        VG_DYNNR_000     = C_6000.
        J_1BNFDOC-DOCDAT = SY-DATUM.
        J_1BNFDOC-PSTDAT = SY-DATUM.
        VG_QTD_VINCU     = 0.
        MOVE-CORRESPONDING WA_MEMORANDO_TELA TO ZDOC_MEMORANDO.
        PERFORM POPULAR_NOTAS_VINCULADAS_S USING ZDOC_MEMORANDO-NR_MEMORANDO.
      ELSE.
        MESSAGE TEXT-E09 TYPE C_E DISPLAY LIKE C_S.
      ENDIF.
    ENDIF.
  ELSE.
    WA_MEMORANDO-DIRECAO = C_2.
    CALL SCREEN 1006.
  ENDIF.

ENDFORM.                    " LANCAR_NOTAS_S

*&---------------------------------------------------------------------*
*&      Module  STATUS_2000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_2000 OUTPUT.

  IF VG_DYNNR_N1 IS NOT INITIAL.
    VG_DYNNR_ANT = VG_DYNNR_N1.
    CLEAR: VG_DYNNR_N1.
    IF TABMEMO-ACTIVETAB = C_TABCD.
      READ TABLE IT_MEMORANDO_TELA INTO WA_MEMORANDO_TELA WITH KEY MARK = C_X.
      IF SY-SUBRC IS INITIAL.
        PERFORM DESBLOQUEIA USING WA_MEMORANDO_TELA-NR_MEMORANDO.
        MOVE-CORRESPONDING WA_MEMORANDO_TELA TO ZDOC_MEMORANDO.
      ENDIF.
    ENDIF.
  ENDIF.

ENDMODULE.                 " STATUS_2000  OUTPUT

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_TER_INTERCOMPANY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM VERIFICA_TER_INTERCOMPANY  USING    MEMORANDO TYPE ZMEMO_MEMORANDO_TELA
                                         VG_VERIFICA_SELECAO TYPE SY-SUBRC
                                         INTERCOMPANY TYPE C.

  DATA: DADOS_CLI TYPE LFA1.

  IF ZDOC_MEMO_NF_EXP-PROPRIO IS INITIAL.
    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO   = MEMORANDO-REMETENTE
        P_PARTYPE    = C_V
      CHANGING
        WA_INFO_PART = DADOS_CLI.

    IF ( DADOS_CLI-KTOKK EQ C_ZFIC ) AND ( NOT INTERCOMPANY IS INITIAL ).
      VG_VERIFICA_SELECAO = 0.
    ELSEIF ( DADOS_CLI-KTOKK NE C_ZFIC ) AND ( INTERCOMPANY IS INITIAL ).
      VG_VERIFICA_SELECAO = 0.
    ELSE.
      IF INTERCOMPANY IS INITIAL.
        VG_VERIFICA_SELECAO = 4.
        MESSAGE TEXT-E07 TYPE C_E DISPLAY LIKE C_S.
      ELSE.
        VG_VERIFICA_SELECAO = 4.
        MESSAGE TEXT-E06 TYPE C_E DISPLAY LIKE C_S.
      ENDIF.
    ENDIF.

  ELSE.
    IF NOT INTERCOMPANY IS INITIAL.
      VG_VERIFICA_SELECAO = 4.
      MESSAGE TEXT-E05 TYPE C_E DISPLAY LIKE C_S.
    ELSE.
      VG_VERIFICA_SELECAO = 0.
    ENDIF.
  ENDIF.

ENDFORM.                    " VERIFICA_TER_INTERCOMPANY

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_TER_INTERCOMPANY_M
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM VERIFICA_TER_INTERCOMPANY_M  USING  MEMORANDO TYPE ZDOC_MEMORANDO
                                         VG_VERIFICA_SELECAO TYPE SY-SUBRC
                                         INTERCOMPANY TYPE C.

  DATA: DADOS_CLI TYPE LFA1.

  IF ZDOC_MEMO_NF_EXP-PROPRIO IS INITIAL.
    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO   = MEMORANDO-REMETENTE
        P_PARTYPE    = C_V
      CHANGING
        WA_INFO_PART = DADOS_CLI.

    IF ( DADOS_CLI-KTOKK EQ C_ZFIC ) AND ( NOT INTERCOMPANY IS INITIAL ).
      VG_VERIFICA_SELECAO = 0.
    ELSEIF ( DADOS_CLI-KTOKK NE C_ZFIC ) AND ( INTERCOMPANY IS INITIAL ).
      VG_VERIFICA_SELECAO = 0.
    ELSE.
      IF INTERCOMPANY IS INITIAL.
        VG_VERIFICA_SELECAO = 4.
      ELSE.
        VG_VERIFICA_SELECAO = 4.
      ENDIF.
    ENDIF.

  ELSE.
    IF NOT INTERCOMPANY IS INITIAL.
      VG_VERIFICA_SELECAO = 4.
    ELSE.
      VG_VERIFICA_SELECAO = 0.
    ENDIF.
  ENDIF.

ENDFORM.                    " VERIFICA_TER_INTERCOMPANY

*&---------------------------------------------------------------------*
*&      Module  ZINTERCOMPANY  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE ZINTERCOMPANY INPUT.

*  DATA: dados_cliente TYPE kna1.
*
*  IF NOT zdoc_memo_nf_exp-emissor IS INITIAL.
*    CALL FUNCTION 'Z_PARCEIRO_INFO'
*      EXPORTING
*        p_parceiro = zdoc_memo_nf_exp-emissor
*        p_partype  = c_c
*      CHANGING
*        wa_info_c  = dados_cliente.
*
*    IF dados_cliente-ktokd EQ c_zcic.
*      zdoc_memo_nf_exp-proprio = c_x.
*      IF zdoc_memo_nf_exp-docnum IS INITIAL.
*        MESSAGE e044 DISPLAY LIKE c_s.
*      ENDIF.
*    ELSE.
*      CLEAR: zdoc_memo_nf_exp-proprio, zdoc_memo_nf_exp-docnum.
*    ENDIF.
*  ENDIF.

ENDMODULE.                 " ZINTERCOMPANY  INPUT

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_TELA_TRANSF
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM VERIFICA_TELA_TRANSF  USING    VG_REMETENTE     TYPE LIFNR
                                    VG_REPRESENTANTE TYPE KUNNR
                           CHANGING VG_TELA          TYPE SY-DYNNR.

  DATA: DD_CLIENTE TYPE KNA1,
        DD_FORNECE TYPE LFA1.

  VG_TELA = C_9999.

  CALL FUNCTION 'Z_PARCEIRO_INFO'
    EXPORTING
      P_PARCEIRO = VG_REPRESENTANTE
      P_PARTYPE  = C_C
    CHANGING
      WA_INFO_C  = DD_CLIENTE.

  CHECK DD_CLIENTE-KTOKD EQ C_ZCIC.

  CALL FUNCTION 'Z_PARCEIRO_INFO'
    EXPORTING
      P_PARCEIRO   = VG_REMETENTE
      P_PARTYPE    = C_V
    CHANGING
      WA_INFO_PART = DD_FORNECE.

  CHECK DD_FORNECE-KTOKK EQ C_ZFIC.

  VG_TELA = C_2004.

ENDFORM.                    " VERIFICA_TELA_TRANSF

*&---------------------------------------------------------------------*
*&      Module  STATUS_2004  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_2004 OUTPUT.
*  SET PF-STATUS 'xxxxxxxx'.
*  SET TITLEBAR 'xxx'.

ENDMODULE.                 " STATUS_2004  OUTPUT

*&---------------------------------------------------------------------*
*&      Form  NOTA_SAIDA_VINCULADA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM NOTA_SAIDA_VINCULADA  USING    P_NOTA_EXP  TYPE Z_MEMORANDO
                                    VG_NOTAS    TYPE SY-SUBRC.

  DATA: WA_NOTA TYPE ZDOC_MEMO_NF_EXP.

  SELECT SINGLE * INTO WA_NOTA
    FROM ZDOC_MEMO_NF_EXP AS X
   WHERE NR_NOTA_EXP EQ P_NOTA_EXP
     AND EXISTS ( SELECT *
                    FROM ZDOC_MEMORANDO AS M
                     INNER JOIN ZDOC_MEMO_NOTA_S AS N ON N~NR_MEMORANDO EQ M~NR_MEMORANDO
                   WHERE M~NR_NOTA_EXP EQ X~NR_NOTA_EXP ).

  VG_NOTAS = SY-SUBRC.

ENDFORM.                    " NOTA_SAIDA_VINCULADA

*&---------------------------------------------------------------------*
*&      Form  VERIFICAR_MEMO_PROTOCOLADO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM VERIFICAR_MEMO_PROTOCOLADO  USING  VG_MEMORANDO TYPE Z_MEMORANDO.

  DATA: WA_ZDOC_MEMO_PRO_ME TYPE ZDOC_MEMO_PRO_ME,
        WA_ZDOC_MEMO_PROTOC TYPE ZDOC_MEMO_PROTOC.

  SELECT SINGLE * INTO WA_ZDOC_MEMO_PRO_ME
    FROM ZDOC_MEMO_PRO_ME
   WHERE NR_MEMORANDO EQ VG_MEMORANDO.

  CHECK SY-SUBRC IS INITIAL.

  SELECT SINGLE * INTO WA_ZDOC_MEMO_PROTOC
    FROM ZDOC_MEMO_PROTOC
   WHERE NR_PROTOCOLO EQ WA_ZDOC_MEMO_PRO_ME-NR_PROTOCOLO.

  IF L_RESP IS INITIAL.
    MESSAGE E000 WITH 'Memorando protocolado por:' WA_ZDOC_MEMO_PROTOC-EMISSOR 'Protocolo:' WA_ZDOC_MEMO_PROTOC-NR_PROTOCOLO  DISPLAY LIKE C_S.
  ENDIF.

ENDFORM.                    " VERIFICAR_MEMO_PROTOCOLADO

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_TER_SEQ_NUMERACAO
*&---------------------------------------------------------------------*
*       Verifica sequência de numeração de memorandos de exportação
*       por empresa e filial
*----------------------------------------------------------------------*
FORM VERIFICA_TER_SEQ_NUMERACAO  USING   MEMORANDO TYPE ZDOC_MEMORANDO
                                         VG_VERIFICA_SELECAO TYPE SY-SUBRC
                                         VG_BUKRS            TYPE BUKRS
                                         VG_BRANCH           TYPE J_1BBRANC_.

  DATA: WA_J_1BBRANCH   TYPE J_1BBRANCH,
        WA_ZDOC_MEMO_NR TYPE ZDOC_MEMO_NR.

  DATA: WA_T001W TYPE T001W.

  CASE MEMORANDO-DIRECAO.
    WHEN 1. "Entrada
      "Quando direção for entrada o representante do "produtor" sempre
      "será um local de negócio

      SELECT SINGLE * FROM T001W INTO WA_T001W WHERE WERKS EQ MEMORANDO-REPRESENTANTE+6(4).

      IF ( SY-SUBRC NE 0 ).
        MESSAGE E004 DISPLAY LIKE C_S.
      ELSE.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = MEMORANDO-REPRESENTANTE
          IMPORTING
            OUTPUT = VG_BRANCH.
      ENDIF.

    WHEN 2. "Saída
      "Quando direção for saída o remetente da mercadoria sempre será
      "um local de negócio
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = MEMORANDO-REMETENTE
        IMPORTING
          OUTPUT = VG_BRANCH.
  ENDCASE.

  SELECT SINGLE * INTO WA_J_1BBRANCH
    FROM J_1BBRANCH
   WHERE BRANCH EQ VG_BRANCH.

  VG_VERIFICA_SELECAO = SY-SUBRC.

  CHECK VG_VERIFICA_SELECAO IS INITIAL.

  VG_BUKRS = WA_J_1BBRANCH-BUKRS.

  SELECT SINGLE * INTO WA_ZDOC_MEMO_NR
    FROM ZDOC_MEMO_NR
   WHERE BUKRS  EQ WA_J_1BBRANCH-BUKRS
     AND BRANCH	EQ WA_J_1BBRANCH-BRANCH.

  VG_VERIFICA_SELECAO = SY-SUBRC.

ENDFORM.                    " VERIFICA_TER_SEQ_NUMERACAO

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_TER_FORMULARIO
*&---------------------------------------------------------------------*
*       Verifica Numero de Formulário informado
*----------------------------------------------------------------------*
FORM VERIFICA_TER_FORMULARIO  USING MEMORANDO TYPE ZDOC_MEMORANDO
                                    VG_VERIFICA_SELECAO TYPE SY-SUBRC
                                    VG_BUKRS            TYPE BUKRS
                                    VG_BRANCH           TYPE J_1BBRANC_
                                    WA_ZDOC_MEMO_FORM   TYPE ZDOC_MEMO_FORM.

  DATA: WA_J_1BBRANCH     TYPE J_1BBRANCH.

  VG_VERIFICA_SELECAO = 0.

  CHECK MEMORANDO-DIRECAO EQ 1.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = MEMORANDO-REPRESENTANTE
    IMPORTING
      OUTPUT = VG_BRANCH.

  SELECT SINGLE * INTO WA_J_1BBRANCH
    FROM J_1BBRANCH
   WHERE BRANCH EQ VG_BRANCH.

  VG_VERIFICA_SELECAO = SY-SUBRC.

  CHECK VG_VERIFICA_SELECAO IS INITIAL.

  VG_BUKRS = WA_J_1BBRANCH-BUKRS.

  SELECT SINGLE * INTO WA_ZDOC_MEMO_FORM
    FROM ZDOC_MEMO_FORM
   WHERE BUKRS        EQ WA_J_1BBRANCH-BUKRS
     AND BRANCH	      EQ WA_J_1BBRANCH-BRANCH
     AND FORM_INICIAL LE MEMORANDO-FORMULARIO
     AND FORM_FINAL   GE MEMORANDO-FORMULARIO.

  VG_VERIFICA_SELECAO = SY-SUBRC.

ENDFORM.                    " VERIFICA_TER_FORMULARIO

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_USO_FORMULARIO
*&---------------------------------------------------------------------*
*       Verifica utilização de formulario
*----------------------------------------------------------------------*
FORM VERIFICA_USO_FORMULARIO  USING MEMORANDO           TYPE ZDOC_MEMORANDO
                                    VG_VERIFICA_SELECAO TYPE SY-SUBRC
                                    VG_MEMO             TYPE Z_MEMO_NUMERO
                                    WA_ZDOC_MEMO_FORM   TYPE ZDOC_MEMO_FORM.

  DATA: IT_DOC_MEMO TYPE TABLE OF ZDOC_MEMORANDO INITIAL SIZE 0 WITH HEADER LINE,
        WA_DOC_MEMO TYPE ZDOC_MEMORANDO,
        VG_BRANCH   TYPE J_1BBRANCH-BRANCH,
        WA_FORM     TYPE ZDOC_MEMO_FORM.

  VG_VERIFICA_SELECAO = 0.

  CHECK MEMORANDO-DIRECAO EQ 1.

  IF WA_ZDOC_MEMO_FORM-TP_MOD_IMP EQ '1'.
    SELECT * INTO TABLE IT_DOC_MEMO
      FROM ZDOC_MEMORANDO
     WHERE FORMULARIO   EQ MEMORANDO-FORMULARIO
       AND NR_MEMORANDO NE MEMORANDO-NR_MEMORANDO
       AND DIRECAO      EQ MEMORANDO-DIRECAO.
  ELSEIF WA_ZDOC_MEMO_FORM-TP_MOD_IMP EQ '2'.
    SELECT * INTO TABLE IT_DOC_MEMO
      FROM ZDOC_MEMORANDO
     WHERE FORMULARIO    EQ MEMORANDO-FORMULARIO
       AND NR_MEMORANDO  NE MEMORANDO-NR_MEMORANDO
       AND DIRECAO       EQ MEMORANDO-DIRECAO
       AND REPRESENTANTE EQ MEMORANDO-REPRESENTANTE.
  ENDIF.

  LOOP AT IT_DOC_MEMO INTO WA_DOC_MEMO.

    CLEAR: WA_J_1BBRANCH.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = WA_DOC_MEMO-REPRESENTANTE
      IMPORTING
        OUTPUT = VG_BRANCH.

    SELECT SINGLE * INTO WA_J_1BBRANCH
      FROM J_1BBRANCH
     WHERE BRANCH EQ VG_BRANCH.

    SELECT SINGLE * INTO WA_FORM
      FROM ZDOC_MEMO_FORM
     WHERE BUKRS        EQ WA_J_1BBRANCH-BUKRS
       AND BRANCH	      EQ WA_J_1BBRANCH-BRANCH
       AND FORM_INICIAL LE WA_DOC_MEMO-FORMULARIO
       AND FORM_FINAL   GE WA_DOC_MEMO-FORMULARIO.

    IF SY-SUBRC IS INITIAL.
      IF WA_FORM-TP_MOD_IMP EQ WA_ZDOC_MEMO_FORM-TP_MOD_IMP.
        VG_MEMO = WA_DOC_MEMO-NUMERO_MEMO.
        VG_VERIFICA_SELECAO = 4.
      ENDIF.
    ENDIF.

  ENDLOOP.

ENDFORM.                    " VERIFICA_USO_FORMULARIO

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_FORM_INUTILIZADO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ZDOC_MEMORANDO  text
*      -->P_VG_VERIFICA_SELECAO  text
*----------------------------------------------------------------------*
FORM VERIFICA_FORM_INUTILIZADO  USING  MEMORANDO TYPE ZDOC_MEMORANDO
                                       VG_VERIFICA_SELECAO TYPE SY-SUBRC.

  DATA: WA_J_1BBRANCH     TYPE J_1BBRANCH,
        WA_ZDOC_MEMO_FORM TYPE ZDOC_MEMO_FORM_U,
        VG_BRANCH         TYPE J_1BBRANC_,
        VG_BUKRS          TYPE BUKRS.

  VG_VERIFICA_SELECAO = 0.

  CHECK MEMORANDO-DIRECAO EQ 1.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = MEMORANDO-REPRESENTANTE
    IMPORTING
      OUTPUT = VG_BRANCH.

  SELECT SINGLE * INTO WA_J_1BBRANCH
    FROM J_1BBRANCH
   WHERE BRANCH EQ VG_BRANCH.

  VG_VERIFICA_SELECAO = SY-SUBRC.

  CHECK VG_VERIFICA_SELECAO IS INITIAL.

  VG_BUKRS = WA_J_1BBRANCH-BUKRS.

  SELECT SINGLE * INTO WA_ZDOC_MEMO_FORM
    FROM ZDOC_MEMO_FORM_U
   WHERE BUKRS        EQ WA_J_1BBRANCH-BUKRS
     AND BRANCH	      EQ WA_J_1BBRANCH-BRANCH
     AND FORMULARIO   EQ MEMORANDO-FORMULARIO.

  IF SY-SUBRC IS INITIAL.
    VG_VERIFICA_SELECAO = 4.
  ELSE.
    VG_VERIFICA_SELECAO = 0.
  ENDIF.

ENDFORM.                    " VERIFICA_FORM_INUTILIZADO

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_SALDO_REMETENTE
*&---------------------------------------------------------------------*
*       Verifica saldo remetente mercadoria
*----------------------------------------------------------------------*
FORM VERIFICA_SALDO_REMETENTE  USING NF_EXP              TYPE ZDOC_MEMO_NF_EXP
                                     MEMORANDO           TYPE ZDOC_MEMORANDO
                                     VG_VERIFICA_SELECAO TYPE SY-SUBRC
                                     VG_SALDO_DISP       TYPE J_1BNETQTY.

  DATA: WA_J_1BBRANCH  TYPE J_1BBRANCH,
        VG_BRANCH      TYPE  J_1BBRANC_,
        VG_BUKRS       TYPE BUKRS,
        GS_EXPORT      TYPE LXHME_RANGE_C10,
        IT_EXPORT      TYPE TABLE OF LXHME_RANGE_C10,
        GS_DATA        TYPE LXHME_RANGE_DATE,
        IT_DATA        TYPE TABLE OF LXHME_RANGE_DATE,
        IT_EXPORTACOES TYPE TABLE OF ZEXPORT_ACOMP INITIAL SIZE 0 WITH HEADER LINE,
        WA_EXPORTACOES TYPE ZEXPORT_ACOMP,
        WA_MEMO        TYPE ZDOC_MEMORANDO,
        QUANTACOMP1    TYPE J_1BNETQTY.

  VG_VERIFICA_SELECAO = 0.
  VG_SALDO_DISP       = 0.

  CASE MEMORANDO-DIRECAO.
    WHEN 1. "Entrada
      "Quando direção for entrada o representante do "produtor" sempre
      "será um local de negócio
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = MEMORANDO-REPRESENTANTE
        IMPORTING
          OUTPUT = VG_BRANCH.


      GS_EXPORT-SIGN   = 'I'.
      GS_EXPORT-OPTION = 'EQ'.
      GS_EXPORT-LOW    = MEMORANDO-REMETENTE.
      GS_EXPORT-HIGH   = MEMORANDO-REMETENTE.
      APPEND GS_EXPORT TO IT_EXPORT.

    WHEN 2. "Saída
      "Quando direção for saída o remetente da mercadoria sempre será
      "um local de negócio
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = MEMORANDO-REMETENTE
        IMPORTING
          OUTPUT = VG_BRANCH.


      GS_EXPORT-SIGN   = 'I'.
      GS_EXPORT-OPTION = 'EQ'.
      GS_EXPORT-LOW    = MEMORANDO-REPRESENTANTE.
      GS_EXPORT-HIGH   = MEMORANDO-REPRESENTANTE.
      APPEND GS_EXPORT TO IT_EXPORT.

  ENDCASE.

  GS_DATA-SIGN   = 'I'.
  GS_DATA-OPTION = 'GE'.
  GS_DATA-LOW    = '20101001'.
  APPEND GS_DATA TO IT_DATA.

  SELECT SINGLE * INTO WA_J_1BBRANCH
    FROM J_1BBRANCH
   WHERE BRANCH EQ VG_BRANCH.

  VG_VERIFICA_SELECAO = SY-SUBRC.

  CHECK VG_VERIFICA_SELECAO IS INITIAL.

  VG_BUKRS = WA_J_1BBRANCH-BUKRS.

  CALL FUNCTION 'Z_EXPORT_TERCEIRO_ACOMP'
    EXPORTING
      P_BUKRS          = VG_BUKRS
      P_WERKS          = VG_BRANCH
      P_MATNR          = NF_EXP-MATERIAL
      T_EXPORT         = IT_EXPORT[]
      T_PERIOD         = IT_DATA[]
      EXPORTADORES     = C_X
      NOTAS_EXPORTACAO = C_X
      P_DIRECAO        = MEMORANDO-DIRECAO
    TABLES
      IT_EXPORTACOES   = IT_EXPORTACOES
    EXCEPTIONS
      CFOPS_SAIDA      = 1
      OTHERS           = 2.

  IF NOT MEMORANDO-NR_MEMORANDO IS INITIAL.
    SELECT SINGLE *
      INTO WA_MEMO
      FROM ZDOC_MEMORANDO
     WHERE NR_MEMORANDO EQ MEMORANDO-NR_MEMORANDO.
    IF SY-SUBRC IS INITIAL.
      VG_SALDO_DISP = WA_MEMO-QUANTIDADE_MEMO.
    ENDIF.
  ENDIF.

  IF ( IT_EXPORTACOES[] IS INITIAL ) AND ( VG_SALDO_DISP LE 0 ).
    VG_VERIFICA_SELECAO = 4.
  ELSE.

    WA_EXPORTACOES-QUANTACOMP = 0.

    IF NOT IT_EXPORTACOES[] IS INITIAL.
*      READ TABLE IT_EXPORTACOES INDEX 1 INTO WA_EXPORTACOES.
      LOOP AT IT_EXPORTACOES INTO WA_EXPORTACOES.
        QUANTACOMP1 = QUANTACOMP1 + WA_EXPORTACOES-QUANTACOMP.
      ENDLOOP.
      WA_EXPORTACOES-QUANTACOMP = QUANTACOMP1.
    ENDIF.

    IF VG_SALDO_DISP GT 0.
      WA_EXPORTACOES-QUANTACOMP = WA_EXPORTACOES-QUANTACOMP + VG_SALDO_DISP.
      VG_SALDO_DISP = 0.
    ENDIF.

    IF WA_EXPORTACOES-QUANTACOMP GE MEMORANDO-QUANTIDADE_MEMO.
      VG_SALDO_DISP       = WA_EXPORTACOES-QUANTACOMP.
      VG_VERIFICA_SELECAO = 0.
    ELSE.
      VG_SALDO_DISP       = WA_EXPORTACOES-QUANTACOMP.
      VG_VERIFICA_SELECAO = 4.
    ENDIF.
  ENDIF.

ENDFORM.                    " VERIFICA_SALDO_REMETENTE

*&---------------------------------------------------------------------*
*&      Module  STATUS_2005  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_2005 OUTPUT.

  IF NOT VG_CONSUL_MEMO IS INITIAL.
    LOOP AT SCREEN.
      IF SCREEN-NAME(16) = 'ZDOC_MEMO_NF_EXP' OR SCREEN-NAME = 'TERCEIRO'.
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
        MODIFY SCREEN.
      ENDIF.
      IF ( SCREEN-NAME = 'BT01' ) OR ( SCREEN-NAME = 'BT02' ).
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ELSEIF NOT ZDOC_MEMO_NF_EXP-NR_NOTA_EXP IS INITIAL.
    PERFORM NOTA_ENTRADA_VINCULADA USING ZDOC_MEMO_NF_EXP-NR_NOTA_EXP VG_NOTAS.
    IF NOT VG_NOTAS EQ 0.
      PERFORM NOTA_SAIDA_VINCULADA USING ZDOC_MEMO_NF_EXP-NR_NOTA_EXP VG_NOTAS.
    ENDIF.
    LOOP AT SCREEN.
      IF ( VG_NOTAS EQ 0 ).
        IF ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-MATERIAL' ) OR ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-UNIDADE' ).
          SCREEN-OUTPUT = '1'.
          SCREEN-INPUT  = '0'.
          MODIFY SCREEN.
        ENDIF.
      ENDIF.
      IF ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-SERIE' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-NUMERO_NOTA' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-NFE' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-PROPRIO' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-DOCNUM' ) OR
         ( SCREEN-NAME = 'TERCEIRO' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-QUANTIDADE' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-VALOR_TOTAL' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-VALOR_UNITARIO' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-MOEDA' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-DT_EMISSAO_NOTA' ) OR
         ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-EMISSOR' ).
*         ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-CHV_NFE_TERC').
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
        MODIFY SCREEN.
      ENDIF.
      IF ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-PROPRIO' ) AND
         ( NOT ZDOC_MEMO_NF_EXP-DOCNUM IS INITIAL ).
        SCREEN-OUTPUT = '1'.
        SCREEN-INPUT  = '0'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.

  ELSE.
    LOOP AT SCREEN.
      IF VG_DYNNR_ANT EQ C_5000.
        IF ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-PROPRIO' )
        OR ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-DOCNUM' )
        OR ( SCREEN-NAME = 'TERCEIRO' )
        OR ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-MATERIAL' ).
          SCREEN-OUTPUT = '1'.
          SCREEN-INPUT  = '0'.
          MODIFY SCREEN.
        ENDIF.
      ELSE.
        IF ( SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-PROPRIO')
*             SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-CHV_NFE_TERC')
          AND
           ( NOT ZDOC_MEMO_NF_EXP-DOCNUM IS INITIAL ).
          SCREEN-OUTPUT = '1'.
          SCREEN-INPUT  = '0'.
          MODIFY SCREEN.
        ENDIF.
      ENDIF.
      IF NOT ZDOC_MEMO_NF_EXP-PROPRIO IS INITIAL.
        IF SCREEN-NAME = 'ZDOC_MEMO_NF_EXP-CHV_NFE_TERC'.
          SCREEN-OUTPUT = '1'.
          SCREEN-INPUT  = '0'.
          MODIFY SCREEN.
        ENDIF.
        CLEAR ZDOC_MEMO_NF_EXP-CHV_NFE_TERC.
      ENDIF.

      IF TERCEIRO IS INITIAL.
        IF SCREEN-NAME = 'TERCEIRO'.
          SCREEN-OUTPUT = '1'.
          SCREEN-INPUT  = '0'.
          MODIFY SCREEN.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

  CLEAR: VG_NOME_EMISSOR,
         VG_NOME_MATERIAL.

  IF NOT ZDOC_MEMO_NF_EXP-EMISSOR IS INITIAL.
    SELECT SINGLE NAME1 INTO VG_NOME_EMISSOR
      FROM KNA1
     WHERE KUNNR EQ ZDOC_MEMO_NF_EXP-EMISSOR.
  ENDIF.

  IF NOT ZDOC_MEMO_NF_EXP-MATERIAL IS INITIAL.
    SELECT SINGLE MAKTG INTO VG_NOME_MATERIAL
      FROM MAKT
     WHERE SPRAS EQ SY-LANGU
       AND MATNR EQ ZDOC_MEMO_NF_EXP-MATERIAL.
  ENDIF.

ENDMODULE.                 " STATUS_2005  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_2001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_2001 INPUT.

  CASE OK_CODE.
    WHEN C_TABNX.
      CLEAR: OK_CODE.
      VG_DYNNR_CAD = C_2005.
    WHEN C_TABBL.
      CLEAR: OK_CODE.
      VG_DYNNR_CAD = C_2006.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_2001  INPUT

*&      Form  SELECT_ALL_LINES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SELECT_ALL_LINES .
  LOOP AT IT_MEMORANDO_TELA .
    IT_MEMORANDO_TELA-MARK = 'X'.
    MODIFY IT_MEMORANDO_TELA.
  ENDLOOP.

ENDFORM.                    " SELECT_ALL_LINES
*&---------------------------------------------------------------------*
*&      Form  SELECT_NONE_LINES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SELECT_NONE_LINES .
  LOOP AT IT_MEMORANDO_TELA .
    IT_MEMORANDO_TELA-MARK = ' '.
    MODIFY IT_MEMORANDO_TELA.
  ENDLOOP.
ENDFORM.                    " SELECT_NONE_LINES
