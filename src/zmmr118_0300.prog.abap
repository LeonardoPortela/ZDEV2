*----------------------------------------------------------------------*
***INCLUDE ZMMR118_0300.
*----------------------------------------------------------------------*

DATA: CT_SPLITTER_A        TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      CT_CONTAINER_A_01_01 TYPE REF TO CL_GUI_CONTAINER,
      CT_CONTAINER_A_02_01 TYPE REF TO CL_GUI_CONTAINER,
      CT_SPLITTER_B        TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      CT_CONTAINER_B_01_01 TYPE REF TO CL_GUI_CONTAINER,
      CT_CONTAINER_B_01_02 TYPE REF TO CL_GUI_CONTAINER,
      CT_ALV_ITENS_NFE     TYPE REF TO CL_GUI_ALV_GRID,
      CT_ALV_CTE           TYPE REF TO CL_GUI_ALV_GRID,
      CT_SPLITTER_C        TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      CT_CONTAINER_C_01_01 TYPE REF TO CL_GUI_CONTAINER,
      CT_CONTAINER_C_01_02 TYPE REF TO CL_GUI_CONTAINER,
      CT_ALV_ITENS_PEDI    TYPE REF TO CL_GUI_ALV_GRID.

"Para Tree de Pedidos """"""""""""""""""""""""""""""""""""""""""""""""""
CLASS: LCL_APPLICATION_PEDIDOS DEFINITION DEFERRED,
       LCL_TREE_EVENT_PEDIDOS  DEFINITION DEFERRED.

DATA: CT_TREE_PEDIDOS        TYPE REF TO CL_GUI_COLUMN_TREE,
      CT_APPLICATION_PEDIDOS TYPE REF TO LCL_APPLICATION_PEDIDOS,
      TREE_EVENT_PEDIDOS     TYPE REF TO LCL_TREE_EVENT_PEDIDOS,
      NODE_TABLE_PEDIDOS     TYPE TREEV_NTAB,
      ITEM_TABLE_PEDIDOS     TYPE STANDARD TABLE OF MTREEITM,
      E_EKPO_PEDIDOS         TYPE ZDE_EKPO_HELP_SALDO_T.

CONSTANTS:
  BEGIN OF C_TREE_PEDIDOS,
    COLUMN1 TYPE TV_ITMNAME VALUE 'Pedido',
    COLUMN2 TYPE TV_ITMNAME VALUE 'Material',
    COLUMN3 TYPE TV_ITMNAME VALUE 'Saldo',
    COLUMN4 TYPE TV_ITMNAME VALUE 'Preco',
    COLUMN5 TYPE TV_ITMNAME VALUE 'Usuario',
  END OF C_TREE_PEDIDOS.
"Para Tree de Pedidos """"""""""""""""""""""""""""""""""""""""""""""""""

"Para Evento Drag In Drop """"""""""""""""""""""""""""""""""""""""""""""
DATA: CT_DRAGDROP_TREE_PEDIDOS TYPE REF TO CL_DRAGDROP,
      CT_DRAGDROP_ALV_PEDI     TYPE REF TO CL_DRAGDROP,
      LC_HANDLE_TREE_PEDIDOS   TYPE I,
      LC_HANDLE_ALV_PEDI       TYPE I.

"Para Evento Drag In Drop """"""""""""""""""""""""""""""""""""""""""""""

CLASS LCL_APPLICATION_PEDIDOS DEFINITION.
  PUBLIC SECTION.
    METHODS:
      HANDLE_NODE_DOUBLE_CLICK  FOR EVENT NODE_DOUBLE_CLICK  OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY,
      HANDLE_EXPAND_NO_CHILDREN FOR EVENT EXPAND_NO_CHILDREN OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY,
      HANDLE_ITEM_DOUBLE_CLICK  FOR EVENT ITEM_DOUBLE_CLICK  OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY ITEM_NAME,
      HANDLE_BUTTON_CLICK       FOR EVENT BUTTON_CLICK       OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY ITEM_NAME,
      HANDLE_LINK_CLICK         FOR EVENT LINK_CLICK         OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY ITEM_NAME,
      HANDLE_CHECKBOX_CHANGE    FOR EVENT CHECKBOX_CHANGE    OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY ITEM_NAME CHECKED.
ENDCLASS.                    "LCL_APPLICATION DEFINITION

CLASS LCL_TREE_EVENT_PEDIDOS DEFINITION.
  PUBLIC SECTION.
    METHODS HANDLE_DOUBLE_CLICK  FOR EVENT NODE_DOUBLE_CLICK OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY.
    METHODS HANDLE_ON_DRAG FOR EVENT ON_DRAG OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY ITEM_NAME DRAG_DROP_OBJECT.
  PRIVATE SECTION.
ENDCLASS.

*----------------------------------------------------------------------*
*       CLASS LCL_APPLICATION IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_APPLICATION_PEDIDOS IMPLEMENTATION.

  METHOD  HANDLE_NODE_DOUBLE_CLICK.
  ENDMETHOD.                    "HANDLE_NODE_DOUBLE_CLICK

  METHOD  HANDLE_ITEM_DOUBLE_CLICK.
  ENDMETHOD.                    "HANDLE_ITEM_DOUBLE_CLICK

  METHOD  HANDLE_LINK_CLICK.
    PERFORM MOSTRAR_NODE USING NODE_KEY ITEM_NAME.
  ENDMETHOD.                    "HANDLE_LINK_CLICK

  METHOD  HANDLE_BUTTON_CLICK.
  ENDMETHOD.                    "HANDLE_BUTTON_CLICK

  METHOD  HANDLE_CHECKBOX_CHANGE.
  ENDMETHOD.                    "HANDLE_CHECKBOX_CHANGE

  METHOD HANDLE_EXPAND_NO_CHILDREN.
  ENDMETHOD.                    "HANDLE_EXPAND_NO_CHILDREN

ENDCLASS.                    "LCL_APPLICATION IMPLEMENTATION

*---------------------------------------------------------------------*
*       CLASS LCL_TREE_EVENT_PEDIDOS IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS LCL_TREE_EVENT_PEDIDOS IMPLEMENTATION.

* handle double_click
  METHOD HANDLE_DOUBLE_CLICK.
    CHECK NOT NODE_KEY IS INITIAL.
    READ TABLE ITEM_TABLE_PEDIDOS WITH KEY NODE_KEY = NODE_KEY ITEM_NAME = C_TREE_PEDIDOS-COLUMN1 INTO DATA(WA_ITEM_TABLE).
    CHECK SY-SUBRC IS INITIAL.
    READ TABLE E_EKPO_PEDIDOS WITH KEY EBELN = WA_ITEM_TABLE-TEXT(10) EBELP = WA_ITEM_TABLE-TEXT+11(5) INTO DATA(WA_EKPO_T).
    CHECK SY-SUBRC IS INITIAL.
    ZCL_PEDIDO_COMPRA=>SHOW_PEDIDO( I_EBELN = WA_EKPO_T-EBELN ).
  ENDMETHOD.

* Drag & Drop
  METHOD HANDLE_ON_DRAG.
    CHECK NOT NODE_KEY IS INITIAL.
    DATA: L_OBJ TYPE REF TO LCL_DRAGDROP_OBJ_TREE.
    CREATE OBJECT L_OBJ.
    L_OBJ->NODE = NODE_KEY.
    DRAG_DROP_OBJECT->OBJECT = L_OBJ.
  ENDMETHOD.

ENDCLASS.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0300 OUTPUT.

  IF SB_TELA_0300 IS INITIAL.
    SB_TELA_0300 = TL_0301.
  ENDIF.

  CLEAR: IT_UCOMM[], IT_UCOMM.

  CASE ZIB_NFE_DIST_TER-CK_FISCAL.
    WHEN ABAP_TRUE.
      APPEND 'EXECUTAR' TO IT_UCOMM.
    WHEN ABAP_FALSE.
      APPEND 'ESTORNAR' TO IT_UCOMM.
  ENDCASE.

  SET PF-STATUS 'PF0300' EXCLUDING IT_UCOMM.
  SET TITLEBAR 'TL0200' WITH ZIB_NFE_DIST_TER-CHAVE_NFE.

  IF CT_SPLITTER_A IS INITIAL.

    CREATE OBJECT CT_SPLITTER_A
      EXPORTING
        PARENT  = CL_GUI_CONTAINER=>SCREEN0
        ROWS    = 2
        COLUMNS = 1.

    "Nota Fiscal
    CT_CONTAINER_A_01_01 = CT_SPLITTER_A->GET_CONTAINER( ROW = 1 COLUMN = 1 ).

    "Pedidos da Nota Fiscal
    CT_CONTAINER_A_02_01 = CT_SPLITTER_A->GET_CONTAINER( ROW = 2 COLUMN = 1 ).

    CREATE OBJECT CT_SPLITTER_B
      EXPORTING
        PARENT  = CT_CONTAINER_A_01_01
        ROWS    = 1
        COLUMNS = 2.

    "Nota Fiscal - CabeÃ§alho da Nota Fiscal
    CT_CONTAINER_B_01_01 = CT_SPLITTER_B->GET_CONTAINER( ROW = 1 COLUMN = 1 ).

    "Nota Fiscal - Itens da nota Fiscal - ALV
    CT_CONTAINER_B_01_02 = CT_SPLITTER_B->GET_CONTAINER( ROW = 1 COLUMN = 2 ).
    PERFORM CRIAR_ALV_ITENS_NOTA_FISCAL USING CT_CONTAINER_B_01_02.

    CREATE OBJECT CT_SPLITTER_C
      EXPORTING
        PARENT  = CT_CONTAINER_A_02_01
        ROWS    = 1
        COLUMNS = 2.

    "Drag in Drop
    PERFORM CRIAR_DRAG_IN_DROP.

    "Pedidos da Nota Fiscal - Pedidos - TREE
    CT_CONTAINER_C_01_01 = CT_SPLITTER_C->GET_CONTAINER( ROW = 1 COLUMN = 1 ).
    PERFORM CRIAR_TREE_PEDIDOS USING CT_CONTAINER_C_01_01.

    "Pedidos da Nota Fiscal - Itens de Pedidos Selecionados - ALV
    CT_CONTAINER_C_01_02 = CT_SPLITTER_C->GET_CONTAINER( ROW = 1 COLUMN = 2 ).
    PERFORM CRIAR_ALV_ITENS_PEDIDOS USING CT_CONTAINER_C_01_02.

  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0300 INPUT.

  CASE OK_CODE.
    WHEN 'BUSCAR_PED'.
      CLEAR: OK_CODE.
      PERFORM PESQUISA_PEDIDOS_0300.
      CLEAR: OK_CODE.

    WHEN 'EXECUTAR'.
      CLEAR: OK_CODE.
      TRY.
*          OBJ_NFE->set_ck_politica( i_ck_pol = ZDE_NFE_DIST_ALV-ck_pol ).
          OBJ_NFE->SET_ACEITAR_DOCUMENTO( ).
          OBJ_NFE->SET_ACEITAR_FISICO( ).
          OBJ_NFE->SET_ACEITAR_FATURAR( I_CK_SOMENTE_VALIDAR = ABAP_TRUE ).
          DATA(I_GRAVOU_0300) = OBJ_NFE->ZIF_CADASTRO~GRAVAR_REGISTRO( ).
          CHECK I_GRAVOU_0300 EQ ABAP_TRUE.
          PERFORM LIMPAR_TELA_0300.
          LEAVE TO SCREEN 0.
        CATCH ZCX_NFE_INBOUND_EXCEPTION INTO EX_NFE_INBOUND.
          EX_NFE_INBOUND->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
        CATCH ZCX_CADASTRO INTO EX_CADASTRO.
          EX_CADASTRO->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
        CATCH ZCX_PEDIDO_COMPRA_EXCEPTION INTO EX_PEDIDO_COMPRA.
          EX_PEDIDO_COMPRA->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
      ENDTRY.

    WHEN 'ESTORNAR'.
      CLEAR: OK_CODE.
      TRY.
          OBJ_NFE->NFE_INBOUND_CANCELA_FISICO( ).
          OBJ_NFE->NFE_INBOUND_CANCELA_ACEITE( ).
          PERFORM LIMPAR_TELA_0300.
          LEAVE TO SCREEN 0.
        CATCH ZCX_NFE_INBOUND_EXCEPTION INTO EX_NFE_INBOUND.
          EX_NFE_INBOUND->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
        CATCH ZCX_CADASTRO INTO EX_CADASTRO.
          EX_CADASTRO->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
        CATCH ZCX_PEDIDO_COMPRA_EXCEPTION INTO EX_PEDIDO_COMPRA.
          EX_PEDIDO_COMPRA->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
      ENDTRY.

  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  CRIAR_ALV_ITENS_NOTA_FISCAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_CT_CONTAINER_B_01_02  text
*----------------------------------------------------------------------*
FORM CRIAR_ALV_ITENS_NOTA_FISCAL  USING  CT_CONTAINER TYPE REF TO CL_GUI_CONTAINER.

  DATA: WA_ALV_ITENS      TYPE DISVARIANT,
        WA_LAYOUT_ITENS   TYPE LVC_S_LAYO,
        WA_STBL_ITENS     TYPE LVC_S_STBL,
        IT_FIELDCAT_ITENS TYPE LVC_T_FCAT.

  DATA: I_CONTADOR_2 TYPE LVC_COLPOS,
        WA_COLUNA    TYPE LVC_S_FCAT.

  CHECK CT_ALV_ITENS_NFE IS INITIAL.

  CREATE OBJECT CT_ALV_ITENS_NFE
    EXPORTING
      I_PARENT = CT_CONTAINER.

  "Variante
  WA_ALV_ITENS-REPORT      = SY-REPID.
  WA_ALV_ITENS-HANDLE      = '0301'.
  WA_ALV_ITENS-LOG_GROUP   = ABAP_FALSE.
  WA_ALV_ITENS-USERNAME    = ABAP_FALSE.
  WA_ALV_ITENS-VARIANT     = ABAP_FALSE.
  WA_ALV_ITENS-TEXT        = ABAP_FALSE.
  WA_ALV_ITENS-DEPENDVARS  = ABAP_FALSE.

  "LayOut
  WA_LAYOUT_ITENS-ZEBRA      = ABAP_TRUE.
  WA_LAYOUT_ITENS-STYLEFNAME = 'STYLE'.
  WA_LAYOUT_ITENS-SEL_MODE   = 'A'.
  WA_LAYOUT_ITENS-INFO_FNAME = 'LINE_COLOR'.
  WA_LAYOUT_ITENS-CTAB_FNAME = 'COLOR_CELL'.
  "WA_LAYOUT_ITENS-S_DRAGDROP-ROW_DDID = G_HANDLE_ALV.

  "Controle VLA: estabilidade refresh
  WA_STBL_ITENS-ROW = ABAP_TRUE.
  WA_STBL_ITENS-COL = ABAP_TRUE.

  "CatÃ¡logo de Itens de Nota Fiscal
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_NFE_DIST_ITM_ALV'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCAT_ITENS.

  I_CONTADOR_2 = 14.

  LOOP AT IT_FIELDCAT_ITENS ASSIGNING FIELD-SYMBOL(<FS_CATALAGO_ITENS>).
    <FS_CATALAGO_ITENS>-EDIT = ABAP_FALSE.
    CASE <FS_CATALAGO_ITENS>-FIELDNAME.
      WHEN 'PROD_ITEM'.
        <FS_CATALAGO_ITENS>-COL_POS   = 01.
        <FS_CATALAGO_ITENS>-OUTPUTLEN = 03.
      WHEN 'PROD_CODIGO'.
        <FS_CATALAGO_ITENS>-COL_POS   = 02.
        <FS_CATALAGO_ITENS>-OUTPUTLEN = 08.
      WHEN 'PROD_DESCRICAO'.
        <FS_CATALAGO_ITENS>-COL_POS   = 03.
        <FS_CATALAGO_ITENS>-OUTPUTLEN = 18.
      WHEN 'PROD_NCM'.
        <FS_CATALAGO_ITENS>-COL_POS   = 04.
        <FS_CATALAGO_ITENS>-OUTPUTLEN = 10.
      WHEN 'PROD_UND_COMERCI'.
        <FS_CATALAGO_ITENS>-COL_POS   = 05.
        <FS_CATALAGO_ITENS>-OUTPUTLEN = 04.
      WHEN 'PROD_QTD_COMERCI'.
        <FS_CATALAGO_ITENS>-COL_POS   = 06.
        <FS_CATALAGO_ITENS>-DO_SUM    = ABAP_TRUE.
        <FS_CATALAGO_ITENS>-OUTPUTLEN = 10.
      WHEN 'PROD_VLR_UND_COM'.
        <FS_CATALAGO_ITENS>-COL_POS   = 07.
        <FS_CATALAGO_ITENS>-OUTPUTLEN = 08.
      WHEN 'PROD_VLR_TOTAL_B'.
        <FS_CATALAGO_ITENS>-COL_POS   = 08.
        <FS_CATALAGO_ITENS>-DO_SUM    = ABAP_TRUE.
        <FS_CATALAGO_ITENS>-OUTPUTLEN = 10.
      WHEN 'COF_CST'.
        <FS_CATALAGO_ITENS>-SCRTEXT_L = 'COFINS'.
        <FS_CATALAGO_ITENS>-SCRTEXT_M = 'CO'.
        <FS_CATALAGO_ITENS>-SCRTEXT_S = 'CO'.
        <FS_CATALAGO_ITENS>-COL_POS   = 09.
        <FS_CATALAGO_ITENS>-OUTPUTLEN = 02.
      WHEN 'PIS_CST'.
        <FS_CATALAGO_ITENS>-SCRTEXT_L = 'PIS'.
        <FS_CATALAGO_ITENS>-SCRTEXT_M = 'PI'.
        <FS_CATALAGO_ITENS>-SCRTEXT_S = 'PI'.
        <FS_CATALAGO_ITENS>-COL_POS   = 10.
        <FS_CATALAGO_ITENS>-OUTPUTLEN = 02.
      WHEN 'IPI_CST'.
        <FS_CATALAGO_ITENS>-SCRTEXT_L = 'IPI'.
        <FS_CATALAGO_ITENS>-SCRTEXT_M = 'IP'.
        <FS_CATALAGO_ITENS>-SCRTEXT_S = 'IP'.
        <FS_CATALAGO_ITENS>-COL_POS   = 11.
        <FS_CATALAGO_ITENS>-OUTPUTLEN = 02.
      WHEN 'ICMS_CST'.
        <FS_CATALAGO_ITENS>-SCRTEXT_L = 'ICMS'.
        <FS_CATALAGO_ITENS>-SCRTEXT_M = 'IC'.
        <FS_CATALAGO_ITENS>-SCRTEXT_S = 'IC'.
        <FS_CATALAGO_ITENS>-COL_POS   = 12.
        <FS_CATALAGO_ITENS>-OUTPUTLEN = 02.
      WHEN OTHERS.
        <FS_CATALAGO_ITENS>-NO_OUT  = ABAP_TRUE.
        <FS_CATALAGO_ITENS>-COL_POS = I_CONTADOR_2.
        ADD 1 TO I_CONTADOR_2.
    ENDCASE.
  ENDLOOP.

  CALL METHOD CT_ALV_ITENS_NFE->SET_TABLE_FOR_FIRST_DISPLAY
    EXPORTING
      IS_VARIANT                    = WA_ALV_ITENS
      I_SAVE                        = 'A'
      IS_LAYOUT                     = WA_LAYOUT_ITENS
    CHANGING
      IT_OUTTAB                     = IT_ITENS_ALV[]
      IT_FIELDCATALOG               = IT_FIELDCAT_ITENS
    EXCEPTIONS
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      OTHERS                        = 4.

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CRIAR_ALV_ITENS_PEDIDOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_CT_CONTAINER_C_01_02  text
*----------------------------------------------------------------------*
FORM CRIAR_ALV_ITENS_PEDIDOS  USING CT_CONTAINER TYPE REF TO CL_GUI_CONTAINER.

  DATA: WA_ALV_PEDI      TYPE DISVARIANT,
        WA_LAYOUT_PEDI   TYPE LVC_S_LAYO,
        WA_STBL_PEDI     TYPE LVC_S_STBL,
        IT_FIELDCAT_PEDI TYPE LVC_T_FCAT.

  DATA: I_CONTADOR_2 TYPE LVC_COLPOS,
        WA_COLUNA    TYPE LVC_S_FCAT.

  CHECK CT_ALV_ITENS_PEDI IS INITIAL.

  CREATE OBJECT CT_ALV_ITENS_PEDI
    EXPORTING
      I_PARENT = CT_CONTAINER.

  "Variante
  WA_ALV_PEDI-REPORT      = SY-REPID.
  WA_ALV_PEDI-HANDLE      = '0300'.
  WA_ALV_PEDI-LOG_GROUP   = ABAP_FALSE.
  WA_ALV_PEDI-USERNAME    = ABAP_FALSE.
  WA_ALV_PEDI-VARIANT     = ABAP_FALSE.
  WA_ALV_PEDI-TEXT        = ABAP_FALSE.
  WA_ALV_PEDI-DEPENDVARS  = ABAP_FALSE.

  "LayOut
  WA_LAYOUT_PEDI-ZEBRA      = ABAP_TRUE.
  WA_LAYOUT_PEDI-STYLEFNAME = 'STYLE'.
  WA_LAYOUT_PEDI-SEL_MODE   = 'A'.
  WA_LAYOUT_PEDI-INFO_FNAME = 'LINE_COLOR'.
  WA_LAYOUT_PEDI-CTAB_FNAME = 'COLOR_CELL'.
  WA_LAYOUT_PEDI-S_DRAGDROP-ROW_DDID = LC_HANDLE_ALV_PEDI.

  "Controle VLA: estabilidade refresh
  WA_STBL_PEDI-ROW = ABAP_TRUE.
  WA_STBL_PEDI-COL = ABAP_TRUE.

  "CatÃ¡logo de Itens de Nota Fiscal
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_NFE_DIST_PED_ALV'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCAT_PEDI.

  I_CONTADOR_2 = 3.

  WA_COLUNA-FIELDNAME = 'ICO_FUNC_LOTE'.
  APPEND WA_COLUNA TO IT_FIELDCAT_PEDI.

  WA_COLUNA-FIELDNAME = 'SELECIONADO'.
  APPEND WA_COLUNA TO IT_FIELDCAT_PEDI.

  LOOP AT IT_FIELDCAT_PEDI ASSIGNING FIELD-SYMBOL(<FS_CATALAGO_PEDI>).
    <FS_CATALAGO_PEDI>-EDIT = ABAP_FALSE.
    CASE <FS_CATALAGO_PEDI>-FIELDNAME.
      WHEN 'SELECIONADO'.
        "<FS_CATALAGO_PEDI>-STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_BUTTON.
        <FS_CATALAGO_PEDI>-SCRTEXT_L = 'Selecionado'.
        <FS_CATALAGO_PEDI>-SCRTEXT_M = 'Selecionado'.
        <FS_CATALAGO_PEDI>-SCRTEXT_S = 'Selecionado'.
        <FS_CATALAGO_PEDI>-JUST      = 'C'.
        <FS_CATALAGO_PEDI>-COL_POS   = 01.
        <FS_CATALAGO_PEDI>-OUTPUTLEN = 03.
        <FS_CATALAGO_PEDI>-CHECKBOX  = ABAP_TRUE.
        <FS_CATALAGO_PEDI>-EDIT      = OBJ_NFE->ZIF_CADASTRO~VALIDA_ATRIBUTO_ALTERAVEL( EXPORTING I_CAMPO = '' ).
      WHEN 'ICO_FUNC_LOTE'.
        <FS_CATALAGO_PEDI>-STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_BUTTON.
        <FS_CATALAGO_PEDI>-SCRTEXT_L = 'Lote'.
        <FS_CATALAGO_PEDI>-SCRTEXT_M = 'Lote'.
        <FS_CATALAGO_PEDI>-SCRTEXT_S = 'Lote'.
        <FS_CATALAGO_PEDI>-ICON      = ABAP_TRUE.
        <FS_CATALAGO_PEDI>-JUST      = 'C'.
        <FS_CATALAGO_PEDI>-COL_POS   = 01.
        <FS_CATALAGO_PEDI>-OUTPUTLEN = 03.
      WHEN OTHERS.
        <FS_CATALAGO_PEDI>-NO_OUT  = ABAP_TRUE.
        <FS_CATALAGO_PEDI>-COL_POS = I_CONTADOR_2.
        ADD 1 TO I_CONTADOR_2.
    ENDCASE.
  ENDLOOP.

  CALL METHOD CT_ALV_ITENS_PEDI->SET_TABLE_FOR_FIRST_DISPLAY
    EXPORTING
      IS_VARIANT                    = WA_ALV_PEDI
      I_SAVE                        = 'A'
      IS_LAYOUT                     = WA_LAYOUT_PEDI
    CHANGING
      IT_OUTTAB                     = IT_PEDI_ITENS_ALV[]
      IT_FIELDCATALOG               = IT_FIELDCAT_PEDI
    EXCEPTIONS
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      OTHERS                        = 4.

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CRIAR_TREE_PEDIDOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_CT_CONTAINER_C_01_01  text
*----------------------------------------------------------------------*
FORM CRIAR_TREE_PEDIDOS  USING  CT_CONTAINER TYPE REF TO CL_GUI_CONTAINER.

  DATA: HIERARCHY_HEADER TYPE TREEV_HHDR.
  DATA: LT_EVENTS TYPE CNTL_SIMPLE_EVENTS,
        L_EVENT   TYPE CNTL_SIMPLE_EVENT.

  CHECK CT_TREE_PEDIDOS IS INITIAL.
  CHECK CT_APPLICATION_PEDIDOS IS INITIAL.

  HIERARCHY_HEADER-HEADING = TEXT-001.
  HIERARCHY_HEADER-WIDTH   = 31.

  CREATE OBJECT CT_TREE_PEDIDOS
    EXPORTING
      PARENT                = CT_CONTAINER
      NODE_SELECTION_MODE   = CL_GUI_COLUMN_TREE=>NODE_SEL_MODE_SINGLE
      ITEM_SELECTION        = 'X'
      HIERARCHY_COLUMN_NAME = C_TREE_PEDIDOS-COLUMN1
      HIERARCHY_HEADER      = HIERARCHY_HEADER.

* define the events which will be passed to the backend
  CREATE OBJECT CT_APPLICATION_PEDIDOS.
  SET HANDLER CT_APPLICATION_PEDIDOS->HANDLE_NODE_DOUBLE_CLICK  FOR CT_TREE_PEDIDOS.
  SET HANDLER CT_APPLICATION_PEDIDOS->HANDLE_ITEM_DOUBLE_CLICK  FOR CT_TREE_PEDIDOS.
  SET HANDLER CT_APPLICATION_PEDIDOS->HANDLE_EXPAND_NO_CHILDREN FOR CT_TREE_PEDIDOS.
  SET HANDLER CT_APPLICATION_PEDIDOS->HANDLE_LINK_CLICK         FOR CT_TREE_PEDIDOS.
  SET HANDLER CT_APPLICATION_PEDIDOS->HANDLE_BUTTON_CLICK       FOR CT_TREE_PEDIDOS.
  SET HANDLER CT_APPLICATION_PEDIDOS->HANDLE_CHECKBOX_CHANGE    FOR CT_TREE_PEDIDOS.

  CT_TREE_PEDIDOS->ADD_COLUMN( NAME  = C_TREE_PEDIDOS-COLUMN2 WIDTH =  30 HEADER_TEXT =  TEXT-002 ).
  CT_TREE_PEDIDOS->ADD_COLUMN( NAME  = C_TREE_PEDIDOS-COLUMN3 WIDTH =  18 HEADER_TEXT =  TEXT-003 ).
  CT_TREE_PEDIDOS->ADD_COLUMN( NAME  = C_TREE_PEDIDOS-COLUMN4 WIDTH =  18 HEADER_TEXT =  TEXT-004 ).
  CT_TREE_PEDIDOS->ADD_COLUMN( NAME  = C_TREE_PEDIDOS-COLUMN5 WIDTH =  20 HEADER_TEXT =  TEXT-007 ).

  CLEAR L_EVENT.
  L_EVENT-EVENTID = CL_GUI_COLUMN_TREE=>EVENTID_NODE_DOUBLE_CLICK.
  L_EVENT-APPL_EVENT = 'X'.
  APPEND L_EVENT TO LT_EVENTS.

  CLEAR L_EVENT.
  L_EVENT-EVENTID = CL_GUI_COLUMN_TREE=>EVENTID_EXPAND_NO_CHILDREN.
  APPEND L_EVENT TO LT_EVENTS.

  CLEAR L_EVENT.
  L_EVENT-EVENTID = CL_GUI_COLUMN_TREE=>EVENTID_HEADER_CLICK.
  APPEND L_EVENT TO LT_EVENTS.

  CT_TREE_PEDIDOS->SET_REGISTERED_EVENTS( EVENTS = LT_EVENTS ).

  CREATE OBJECT TREE_EVENT_PEDIDOS.
  SET HANDLER TREE_EVENT_PEDIDOS->HANDLE_DOUBLE_CLICK FOR CT_TREE_PEDIDOS.
  SET HANDLER TREE_EVENT_PEDIDOS->HANDLE_ON_DRAG FOR CT_TREE_PEDIDOS.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CRIAR_DRAG_IN_DROP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CRIAR_DRAG_IN_DROP .
*
  CHECK CT_DRAGDROP_TREE_PEDIDOS IS INITIAL.
  CHECK CT_DRAGDROP_ALV_PEDI IS INITIAL.

  CREATE OBJECT CT_DRAGDROP_TREE_PEDIDOS.
  CREATE OBJECT CT_DRAGDROP_ALV_PEDI.

  CT_DRAGDROP_TREE_PEDIDOS->ADD( FLAVOR = 'LINE' DRAGSRC = ABAP_TRUE DROPTARGET = ABAP_FALSE EFFECT = CL_DRAGDROP=>MOVE ).
  CT_DRAGDROP_ALV_PEDI->ADD( FLAVOR = 'LINE' DRAGSRC = ABAP_FALSE DROPTARGET = ABAP_TRUE EFFECT = CL_DRAGDROP=>MOVE ).

  "Handle para Node da Tree Drag
  CT_DRAGDROP_TREE_PEDIDOS->GET_HANDLE( IMPORTING HANDLE = LC_HANDLE_TREE_PEDIDOS ).

  "Handle para Alv Drop
  CT_DRAGDROP_ALV_PEDI->GET_HANDLE( IMPORTING HANDLE = LC_HANDLE_ALV_PEDI ).

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0300_EXIT INPUT.

  PERFORM LIMPAR_TELA_0300.
  LEAVE TO SCREEN 0.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  LIMPAR_TELA_0300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM LIMPAR_TELA_0300 .

  IF CT_TREE_PEDIDOS IS NOT INITIAL.
    CT_TREE_PEDIDOS->FREE( ).
  ENDIF.

  IF CT_ALV_ITENS_PEDI IS NOT INITIAL.
    CT_ALV_ITENS_PEDI->FREE( ).
  ENDIF.

  IF CT_CONTAINER_C_01_02 IS NOT INITIAL.
    CT_CONTAINER_C_01_02->FREE( ).
  ENDIF.

  IF CT_CONTAINER_C_01_01 IS NOT INITIAL.
    CT_CONTAINER_C_01_01->FREE( ).
  ENDIF.

  IF CT_SPLITTER_C IS NOT INITIAL.
    CT_SPLITTER_C->FREE( ).
  ENDIF.

  IF CT_ALV_ITENS_NFE IS NOT INITIAL.
    CT_ALV_ITENS_NFE->FREE( ).
  ENDIF.

  IF CT_CONTAINER_B_01_02 IS NOT INITIAL.
    CT_CONTAINER_B_01_02->FREE( ).
  ENDIF.

  IF CT_CONTAINER_B_01_01 IS NOT INITIAL.
    CT_CONTAINER_B_01_01->FREE( ).
  ENDIF.

  IF CT_SPLITTER_B IS NOT INITIAL.
    CT_SPLITTER_B->FREE( ).
  ENDIF.

  IF CT_CONTAINER_A_02_01 IS NOT INITIAL.
    CT_CONTAINER_A_02_01->FREE( ).
  ENDIF.

  IF CT_CONTAINER_A_01_01 IS NOT INITIAL.
    CT_CONTAINER_A_01_01->FREE( ).
  ENDIF.

  IF CT_SPLITTER_A IS NOT INITIAL.
    CT_SPLITTER_A->FREE( ).
  ENDIF.

  CLEAR: CT_DRAGDROP_ALV_PEDI,
         CT_DRAGDROP_TREE_PEDIDOS,
         TREE_EVENT_PEDIDOS,
         CT_APPLICATION_PEDIDOS,
         CT_TREE_PEDIDOS,
         CT_ALV_ITENS_PEDI,
         CT_CONTAINER_C_01_02,
         CT_CONTAINER_C_01_01,
         CT_SPLITTER_C,
         CT_ALV_ITENS_NFE,
         CT_CONTAINER_B_01_02,
         CT_CONTAINER_B_01_01,
         CT_SPLITTER_B,
         CT_CONTAINER_A_02_01,
         CT_CONTAINER_A_01_01,
         CT_SPLITTER_A.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  PESQUISA_PEDIDOS_0300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM PESQUISA_PEDIDOS_0300 .

  DATA: NODE           TYPE TREEV_NODE,
        NODE_PEDIDO    TYPE TREEV_NODE,
        ITEM           TYPE MTREEITM,
        QTD_ITENS      TYPE I,
        IT_FILTRO_1    TYPE ZDE_EKPO_HELP_SALDO_T,
        WA_FILTRO_1    TYPE ZDE_EKPO_HELP_SALDO,
        LC_MENGE_EKBE  TYPE C LENGTH 18, "1 Tipo  ZDE_VOLUME_UTLIZADO QUAN  13  3 Volume Ãtilizado
        LC_MENGE_SALDO TYPE C LENGTH 18, "1 Tipo ZDE_VOLUME_SALDO  QUAN  13  3 Saldo
        LC_PRECO       TYPE C LENGTH 17,
        WA_EKPO_V      TYPE ZDE_EKPO_HELP_SALDO,
        LC_PEDIDO      TYPE REF TO ZCL_PEDIDO_COMPRA.

  CLEAR: NODE_TABLE_PEDIDOS,
         ITEM_TABLE_PEDIDOS,
         NODE_TABLE_PEDIDOS[],
         ITEM_TABLE_PEDIDOS[].

  CT_TREE_PEDIDOS->DELETE_ALL_NODES( ).

  CREATE OBJECT LC_PEDIDO.

  LC_PEDIDO->GET_PEDIDO_COMPRA_CHAVE_E(
    EXPORTING
      I_LIFNR               = ZIB_NFE_DIST_TER-P_EMISSOR " NÂº conta do fornecedor
      I_BUKRS               = ZIB_NFE_DIST_TER-E_TOMADORA    " Empresa
      I_WERKS               = ZIB_NFE_DIST_TER-F_TOMADORA    " Centro
      I_ABRIR_TELA          = ABAP_FALSE
    IMPORTING
       E_EKPO_T             = E_EKPO_T
    EXCEPTIONS
      NAO_ENCONTRADO_PEDIDO = 1
      OTHERS                = 2
  ).

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE 'W' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    EXIT.
  ENDIF.

  CHECK E_EKPO_T IS NOT INITIAL.

  SELECT * INTO TABLE @DATA(IT_MAKT)
    FROM MAKT
     FOR ALL ENTRIES IN @E_EKPO_T
   WHERE SPRAS EQ @SY-LANGU
     AND MATNR EQ @E_EKPO_T-MATNR.

  SORT IT_MAKT BY MATNR.

  QTD_ITENS = 1.
  SORT E_EKPO_T ASCENDING BY EBELN.
  CLEAR: WA_EKPO_V.

  LOOP AT E_EKPO_T INTO DATA(WA_EKPO_T).

    WRITE WA_EKPO_T-MENGE_EKBE  TO LC_MENGE_EKBE.
    WRITE WA_EKPO_T-MENGE_SALDO TO LC_MENGE_SALDO.
    WRITE WA_EKPO_T-NETPR       TO LC_PRECO.

    "Inclui Pedido
    IF WA_EKPO_V-EBELN NE WA_EKPO_T-EBELN.
      CLEAR: NODE_PEDIDO.
      NODE_PEDIDO-NODE_KEY   = QTD_ITENS.
      NODE_PEDIDO-HIDDEN     = ' '.                 " The node is visible,
      NODE_PEDIDO-DISABLED   = ' '.                 " selectable,
      NODE_PEDIDO-ISFOLDER   = ABAP_TRUE.                 " a folder.
      NODE_PEDIDO-EXPANDER   = ABAP_TRUE.
      NODE_PEDIDO-N_IMAGE    = ICON_DELIVERY_COMPLETE.
      NODE_PEDIDO-EXP_IMAGE  = ICON_DELIVERY_COMPLETE.
      NODE_PEDIDO-DRAGDROPID = LC_HANDLE_TREE_PEDIDOS.
      APPEND NODE_PEDIDO TO NODE_TABLE_PEDIDOS.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE_PEDIDOS-COLUMN1.
      ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_FONT_DEFAULT. " Text Item
      ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
      ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_INTENSIFIED.
      ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
      ITEM-TEXT      = WA_EKPO_T-EBELN.
      APPEND ITEM TO ITEM_TABLE_PEDIDOS.
      ADD 1 TO QTD_ITENS.

      WA_EKPO_V-EBELN = WA_EKPO_T-EBELN.
    ENDIF.

    CLEAR: NODE.
    NODE-RELATKEY   = NODE_PEDIDO-NODE_KEY.
    NODE-NODE_KEY   = QTD_ITENS.
    NODE-HIDDEN     = ' '.                 " The node is visible,
    NODE-DISABLED   = ' '.                 " selectable,
    NODE-ISFOLDER   = ' '.                 " a folder.
    NODE-EXPANDER   = ' '.
    NODE-N_IMAGE    = ICON_DELIVERY.
    NODE-EXP_IMAGE  = ICON_DELIVERY.
    NODE-DRAGDROPID = LC_HANDLE_TREE_PEDIDOS.
    APPEND NODE TO NODE_TABLE_PEDIDOS.

    CLEAR ITEM.
    ITEM-NODE_KEY  = NODE-NODE_KEY.
    ITEM-ITEM_NAME = C_TREE_PEDIDOS-COLUMN1.
    ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_FONT_DEFAULT. " Text Item
    ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
    ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_INTENSIFIED.
    ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
    CONCATENATE WA_EKPO_T-EBELN WA_EKPO_T-EBELP INTO ITEM-TEXT SEPARATED BY '-'.
    APPEND ITEM TO ITEM_TABLE_PEDIDOS.

    READ TABLE IT_MAKT INTO DATA(WA_MAKT) WITH KEY MATNR = WA_EKPO_T-MATNR BINARY SEARCH.

    CLEAR ITEM.
    ITEM-NODE_KEY  = NODE-NODE_KEY.
    ITEM-ITEM_NAME = C_TREE_PEDIDOS-COLUMN2.
    ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
    ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
    ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
    ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
    ITEM-TEXT      = WA_MAKT-MAKTX.
    APPEND ITEM TO ITEM_TABLE_PEDIDOS.

    CLEAR ITEM.
    ITEM-NODE_KEY  = NODE-NODE_KEY.
    ITEM-ITEM_NAME = C_TREE_PEDIDOS-COLUMN3.
    ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
    ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
    ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_EMPHASIZED_POSITIVE.
    ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
    ITEM-TEXT      = LC_MENGE_SALDO.
    APPEND ITEM TO ITEM_TABLE_PEDIDOS.

    CLEAR ITEM.
    ITEM-NODE_KEY  = NODE-NODE_KEY.
    ITEM-ITEM_NAME = C_TREE_PEDIDOS-COLUMN4.
    ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
    ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
    ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_EMPHASIZED_POSITIVE.
    ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
    ITEM-TEXT      = LC_PRECO.
    APPEND ITEM TO ITEM_TABLE_PEDIDOS.

    CLEAR ITEM.
    ITEM-NODE_KEY  = NODE-NODE_KEY.
    ITEM-ITEM_NAME = C_TREE_PEDIDOS-COLUMN5.
    ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
    ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
    ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
    ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
    ITEM-TEXT      = WA_EKPO_T-ERNAM.
    APPEND ITEM TO ITEM_TABLE_PEDIDOS.

    CLEAR: WA_MAKT.
    ADD 1 TO QTD_ITENS.
  ENDLOOP.

  CALL METHOD CT_TREE_PEDIDOS->ADD_NODES_AND_ITEMS
    EXPORTING
      NODE_TABLE                     = NODE_TABLE_PEDIDOS
      ITEM_TABLE                     = ITEM_TABLE_PEDIDOS
      ITEM_TABLE_STRUCTURE_NAME      = 'MTREEITM'
    EXCEPTIONS
      FAILED                         = 1
      CNTL_SYSTEM_ERROR              = 3
      ERROR_IN_TABLES                = 4
      DP_ERROR                       = 5
      TABLE_STRUCTURE_NAME_NOT_FOUND = 6.

ENDFORM.
