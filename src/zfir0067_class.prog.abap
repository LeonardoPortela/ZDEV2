*&---------------------------------------------------------------------*
*&  Include           ZFIR0067_CLASS
*&---------------------------------------------------------------------*


*----------------------------------------------------------------------*
* Classes Implemetation
*----------------------------------------------------------------------*

CLASS LCL_TREE_EVENT_RECEIVER IMPLEMENTATION.

*Implement your event handler methods.

  METHOD HANDLE_NODE_DOUBLE_CLICK.

    DATA: LV_NODEKEY        TYPE LVC_NKEY.
    DATA: LT_SELECTED_NODES TYPE LVC_T_NKEY,
          L_SELECTED_NODE   TYPE LVC_NKEY.
*You can get node key :get  directly by above event exporting parameters NODE_KEY
    LV_NODEKEY = NODE_KEY.
*You can get node key too,use this method
    CALL METHOD G_TREE->GET_SELECTED_NODES
       CHANGING
          CT_SELECTED_NODES = LT_SELECTED_NODES.

    READ TABLE LT_SELECTED_NODES INTO L_SELECTED_NODE  INDEX 1.
*You can get values of alv tree table line by double click node of line
    READ TABLE IT_ALV_TREE INTO WA_ALV_TREE INDEX L_SELECTED_NODE.

    CLEAR: WA_SAIDA_MOV_FLX, WA_SAI_AJUSTE, WA_SAI_AJUSTE_COPY, WA_MOV_AJUSTE.
    REFRESH: IT_SAIDA_MOV_FLX, IT_SAI_AJUSTE.

    IF WA_ALV_TREE-NIVEL IS NOT INITIAL.

      IF WA_ALV_TREE-TP_PREV = 'T'.  " Ajuste(Tesouraria)

        READ TABLE IT_MOV_AJUSTE INTO WA_MOV_AJUSTE WITH KEY BUKRS  = WA_ALV_TREE-BUKRS
                                                             CODIGO = WA_ALV_TREE-CODIGO.

        IF SY-SUBRC = 0. "Caso já tenha um registro de Ajuste para a Empresa e Cod. Flx.
          MOVE-CORRESPONDING WA_MOV_AJUSTE TO WA_SAI_AJUSTE.
        ELSE.
          MOVE-CORRESPONDING WA_ALV_TREE   TO WA_SAI_AJUSTE.
        ENDIF.

        WA_SAI_AJUSTE_COPY = WA_SAI_AJUSTE.

        APPEND WA_SAI_AJUSTE TO IT_SAI_AJUSTE.

        CALL METHOD G_TREE->GET_EXPANDED_NODES
          CHANGING
            CT_EXPANDED_NODES = VG_NODE_KEY.

        CALL SCREEN 0107 STARTING AT 02 02 ENDING AT 160 05.

        IF G_TREE IS NOT INITIAL.
          CALL METHOD G_TREE->FREE.
          CALL METHOD CL_GUI_CFW=>FLUSH.
          FREE: G_TREE.
        ENDIF.

        CALL SCREEN 0100.

      ELSE.

        MOVE-CORRESPONDING WA_ALV_TREE TO WA_SAIDA_MOV_FLX.
        APPEND WA_SAIDA_MOV_FLX TO IT_SAIDA_MOV_FLX.

        CALL SCREEN 0101 STARTING AT 02 02 ENDING AT 160 05.

      ENDIF.

    ENDIF.

  ENDMETHOD.


ENDCLASS.



CLASS LCL_EVENT_HANDLER_0101 IMPLEMENTATION.                "

  METHOD HANDLE_HOTSPOT_CLICK.
    PERFORM HANDLE_HOTSPOT_CLICK USING E_ROW_ID E_COLUMN_ID ES_ROW_NO.
  ENDMETHOD.                    "handle_hotspot_click


  METHOD USER_COMMAND.
  ENDMETHOD.                    "ON_F4

  METHOD ON_DATA_CHANGED_FINISHED.
  ENDMETHOD.


  METHOD ON_F4.
  ENDMETHOD.                    "ON_F4


  METHOD ON_DATA_CHANGED.
  ENDMETHOD.                    "ON_DATA_CHANGED


ENDCLASS.           "lcl_event_handler_0102 IMPLEMENTATION


CLASS LCL_ALV_TOOLBAR_BLOQ_MOV IMPLEMENTATION.
  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT C_ALV_TOOLBARMANAGER
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.
  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    TY_TOOLBAR-ICON      = ICON_DELETE_ROW.
    TY_TOOLBAR-FUNCTION  = 'DEL'.
    TY_TOOLBAR-TEXT      = ''.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-ICON      = ICON_SYSTEM_SAVE.
    TY_TOOLBAR-FUNCTION  = 'SAVE'.
    TY_TOOLBAR-TEXT      = 'Salvar'.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-ICON      = ICON_LOCKED.
    TY_TOOLBAR-FUNCTION  = 'BLOQ'.
    TY_TOOLBAR-TEXT      = 'Bloquear'.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-ICON      = ICON_UNLOCKED.
    TY_TOOLBAR-FUNCTION  = 'DESBLOQ'.
    TY_TOOLBAR-TEXT      = 'Desbloquear'.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.



    CALL METHOD C_ALV_TOOLBARMANAGER->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    CASE E_UCOMM.
      WHEN 'DEL'.
        PERFORM DEL_BLOQ_MOV.
      WHEN 'SAVE'.
        PERFORM SAVE_LCTOS_BMOV.
      WHEN 'BLOQ'.
        PERFORM MUDA_STATUS_BLOQUEIO USING '@06@'.
      WHEN 'DESBLOQ'.
        PERFORM MUDA_STATUS_BLOQUEIO USING '@07@'.

    ENDCASE.

  ENDMETHOD.                    "HANDLE_USER_COMMAND

ENDCLASS.                    "lcl_alv_toolbar IMPLEMENTATION

CLASS LCL_ALV_TOOLBAR_MOV_AJUSTE IMPLEMENTATION.
  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT C_ALV_TOOLBARMANAGER
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.
  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    TY_TOOLBAR-ICON      = ICON_CHANGE_TEXT.
    TY_TOOLBAR-FUNCTION  = 'COMENTEARIOS'.
    TY_TOOLBAR-TEXT      = 'Comentários'.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    CALL METHOD C_ALV_TOOLBARMANAGER->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    DATA: V_DT_AJUSTE TYPE ZFIT0149-DATA.

    CASE E_UCOMM.
      WHEN 'COMENTEARIOS'.

       CALL METHOD OBJ_ALV_AJUSTE->GET_SELECTED_CELLS
          IMPORTING
            ET_CELL = IT_SELECTEDCELL.

        LOOP AT IT_SELECTEDCELL INTO WA_SELECTEDCELL.

          READ TABLE IT_SAI_AJUSTE INTO WA_SAI_AJUSTE INDEX WA_SELECTEDCELL-ROW_ID-INDEX.
          IF SY-SUBRC = 0.

            CLEAR: WG_COMENT_AJUSTE.

            PERFORM F_GET_DIA_AJUSTE USING WA_SELECTEDCELL-COL_ID
                                  CHANGING V_DT_AJUSTE.

            IF V_DT_AJUSTE IS INITIAL.
              MESSAGE 'Dia de ajuste não foi encontrado!' TYPE 'S'.
              RETURN.
            ENDIF.

            WG_COMENT_AJUSTE-BUKRS  = WA_SAI_AJUSTE-BUKRS.
            WG_COMENT_AJUSTE-CODIGO = WA_SAI_AJUSTE-CODIGO.
            WG_COMENT_AJUSTE-DATA   = V_DT_AJUSTE.

            SELECT SINGLE COMENTARIO
              FROM ZFIT0149 INTO WG_COMENT_AJUSTE-COMENTARIO
             WHERE BUKRS  EQ WG_COMENT_AJUSTE-BUKRS
               AND CODIGO EQ WG_COMENT_AJUSTE-CODIGO
               AND DATA   EQ WG_COMENT_AJUSTE-DATA.

            CALL SCREEN 0108 STARTING AT 08 08.

          ENDIF.
        ENDLOOP.

    ENDCASE.

  ENDMETHOD.                    "HANDLE_USER_COMMAND

ENDCLASS.                    "lcl_alv_toolbar IMPLEMENTATION

CLASS LCL_EVENT_HANDLER_0107 IMPLEMENTATION.                "


  METHOD ON_DATA_CHANGED_FINISHED.
  ENDMETHOD.

  METHOD ON_DATA_CHANGED.
  ENDMETHOD.                    "ON_DATA_CHANGED


ENDCLASS.           "lcl_event_handler_0102 IMPLEMENTATION

CLASS LCL_EVENT_HANDLER_0103V1 IMPLEMENTATION.

  METHOD HANDLE_HOTSPOT_CLICK.
    PERFORM HANDLE_HOTSPOT_CLICK_VAR USING E_ROW_ID E_COLUMN_ID ES_ROW_NO 'V1'.
  ENDMETHOD.                    "handle_hotspot_click

ENDCLASS.                    "LCL_EVENT_HANDLER IMPLEMENTATION

CLASS LCL_EVENT_HANDLER_0103V2 IMPLEMENTATION.

  METHOD HANDLE_HOTSPOT_CLICK.
    PERFORM HANDLE_HOTSPOT_CLICK_VAR USING E_ROW_ID E_COLUMN_ID ES_ROW_NO 'V2'.
  ENDMETHOD.                    "handle_hotspot_click

ENDCLASS.                    "LCL_EVENT_HANDLER IMPLEMENTATION

FORM HANDLE_HOTSPOT_CLICK_VAR  USING  I_ROW_ID     TYPE LVC_S_ROW
                                      I_COLUMN_ID  TYPE LVC_S_COL
                                      IS_ROW_NO    TYPE LVC_S_ROID
                                      I_ALV_VERSAO TYPE C.

 DATA: GT_BDC         TYPE TABLE OF BDCDATA,
       GW_BDC         TYPE BDCDATA.

  DATA: WL_SAIDA_VAR TYPE TY_SAIDA_VAR,
        OPT TYPE CTU_PARAMS.

  CASE I_ALV_VERSAO.
    WHEN 'V1'.
      READ TABLE IT_SAIDA_VAR1 INTO WL_SAIDA_VAR INDEX I_ROW_ID.
    WHEN 'V2'.
      READ TABLE IT_SAIDA_VAR2 INTO WL_SAIDA_VAR INDEX I_ROW_ID.
  ENDCASE.

  CHECK SY-SUBRC = 0.

  CASE I_COLUMN_ID.
    WHEN: 'BELNR'.
      SET PARAMETER ID 'BLN' FIELD WL_SAIDA_VAR-BELNR.
      SET PARAMETER ID 'BUK' FIELD WL_SAIDA_VAR-BUKRS.
      CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
    WHEN: 'AUGBL'.
      SET PARAMETER ID 'BLN' FIELD WL_SAIDA_VAR-AUGBL.
      SET PARAMETER ID 'BUK' FIELD WL_SAIDA_VAR-BUKRS.
      CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
    WHEN: 'NRO_SOL'.
      REFRESH: GT_BDC.

      PERFORM F_PREENCHER_DYNPRO USING:
            'X' 'ZSDR0022'                      '0050',
            ' ' 'WG_HEADER-NRO_SOL_OV'          WL_SAIDA_VAR-NRO_SOL,
            ' ' 'BDC_OKCODE'                    'ATUAL'.
      OPT-DISMODE = 'E'.
      OPT-DEFSIZE = ' '.

      CALL TRANSACTION 'ZSDT0062' USING GT_BDC OPTIONS FROM OPT.

  ENDCASE.

ENDFORM.                    "HANDLE_HOTSPOT_CLICK

FORM F_PREENCHER_DYNPRO   USING L_START TYPE C L_NAME TYPE C L_VALUE.
  MOVE L_START TO GW_BDC-DYNBEGIN.
  IF L_START = 'X'.
    MOVE:
  L_NAME  TO GW_BDC-PROGRAM,
  L_VALUE TO GW_BDC-DYNPRO.
  ELSE.
    MOVE:
      L_NAME  TO GW_BDC-FNAM,
      L_VALUE TO GW_BDC-FVAL.
  ENDIF.
  APPEND GW_BDC TO GT_BDC.
  CLEAR: GW_BDC.
ENDFORM.
