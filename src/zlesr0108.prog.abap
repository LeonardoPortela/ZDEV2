*&---------------------------------------------------------------------*
*& Report  ZLESR0108
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZLESR0108.

TABLES: ZLEST0141.

TYPES: BEGIN OF TY_J_1BNFE_ACTIVE,
         DOCNUM    TYPE J_1BNFE_ACTIVE-DOCNUM,
         BUKRS     TYPE J_1BNFE_ACTIVE-BUKRS,
         CREDAT    TYPE J_1BNFE_ACTIVE-CREDAT,
         LIFNR_ADT TYPE LFA1-LIFNR,
         NFNUM9    TYPE J_1BNFE_ACTIVE-NFNUM9,
       END OF TY_J_1BNFE_ACTIVE,

       BEGIN OF TY_J_1BNFDOC,
         DOCNUM         TYPE J_1BNFDOC-DOCNUM,
         DIRECT         TYPE J_1BNFDOC-DIRECT,
         AUTOM_INCOMING TYPE J_1BNFDOC-AUTOM_INCOMING,
         NFTYPE         TYPE J_1BNFDOC-NFTYPE,
       END OF TY_J_1BNFDOC.


RANGES: R_MODEL  FOR J_1BNFE_ACTIVE-MODEL,
        R_FORM   FOR J_1BNFE_ACTIVE-FORM,
        R_CREDAT FOR J_1BNFE_ACTIVE-CREDAT.

DATA: TG_J_1BNFE_ACTIVE TYPE TABLE OF TY_J_1BNFE_ACTIVE WITH HEADER LINE,
      "TG_J_ACTIVE_DATA  TYPE TABLE OF TY_J_1BNFE_ACTIVE WITH HEADER LINE,
      TG_J_1BNFDOC      TYPE TABLE OF TY_J_1BNFDOC      WITH HEADER LINE,
      TG_ZCTE_CIOT      TYPE TABLE OF ZCTE_CIOT         WITH HEADER LINE,
      TG_VTTK           TYPE TABLE OF VTTK              WITH HEADER LINE,
      TG_VTTP           TYPE TABLE OF VTTP              WITH HEADER LINE,
      TG_LIPS           TYPE TABLE OF LIPS              WITH HEADER LINE,
      TG_TVRO           TYPE TABLE OF TVRO              WITH HEADER LINE,
      TG_DOC_ESTORNO    TYPE TABLE OF J_1BNFDOC         WITH HEADER LINE,
      TG_ZIB_NFE        TYPE TABLE OF ZIB_NFE           WITH HEADER LINE.

SELECTION-SCREEN: BEGIN OF BLOCK B1 WITH FRAME.
SELECT-OPTIONS: P_DATA  FOR ZLEST0141-DATA NO-EXTENSION NO INTERVALS.
PARAMETER P_PROC TYPE C NO-DISPLAY.
SELECTION-SCREEN: END OF BLOCK B1.

DATA: VG_DATA_PROC TYPE ZLEST0141-DATA.

START-OF-SELECTION.

  DATA: VG_JOB      TYPE I.

  SELECT SINGLE COUNT( * ) INTO VG_JOB
    FROM TBTCO
   WHERE JOBNAME EQ 'ZLESR0108_JOB'
     AND STATUS EQ 'R'.

  IF ( VG_JOB EQ 1 ) OR ( P_PROC IS NOT INITIAL ).
    PERFORM: F_SELECIONA_DADOS,
             F_PROCESSAR_DADOS.
  ENDIF.

FORM F_SELECIONA_DADOS .

  DATA: V_DEL_REG TYPE C,
        V_CANDAT  TYPE J_1BNFDOC-CANDAT.

  PERFORM: F_INICIAR_VARIAVEIS.

  IF P_DATA-LOW IS NOT INITIAL.
    VG_DATA_PROC = P_DATA-LOW.
  ELSE.
    VG_DATA_PROC = SY-DATUM.
  ENDIF.

  R_MODEL-SIGN   = 'I'.
  R_MODEL-OPTION = 'EQ'.
  R_MODEL-LOW = '57'.
  APPEND R_MODEL.

  R_FORM-SIGN   = 'I'.
  R_FORM-OPTION = 'NE'.
  R_FORM-LOW    = SPACE.
  APPEND R_FORM.

  R_CREDAT-SIGN   = 'I'.
  R_CREDAT-OPTION = 'EQ'.
  R_CREDAT-LOW    = VG_DATA_PROC - 1.
  APPEND R_CREDAT.

  "Get Movimentação do dia anterior
  SELECT *
    FROM J_1BNFE_ACTIVE INTO CORRESPONDING FIELDS OF TABLE TG_J_1BNFE_ACTIVE
   WHERE DOCSTA      EQ '1'
     AND DIRECT      EQ '2'
     AND CANCEL      EQ ''
     AND CREDAT      IN R_CREDAT
     AND MODEL       IN R_MODEL
     AND FORM        IN R_FORM
     AND CRENAM      NE 'INTERFACE'.

  IF TG_J_1BNFE_ACTIVE[] IS NOT INITIAL.

    SELECT *
      FROM J_1BNFDOC INTO CORRESPONDING FIELDS OF TABLE TG_J_1BNFDOC
       FOR ALL ENTRIES IN TG_J_1BNFE_ACTIVE
     WHERE DOCNUM EQ TG_J_1BNFE_ACTIVE-DOCNUM
       AND CANDAT EQ V_CANDAT.

    SELECT *
      FROM ZCTE_CIOT INTO TABLE TG_ZCTE_CIOT
       FOR ALL ENTRIES IN TG_J_1BNFE_ACTIVE
     WHERE DOCNUM EQ TG_J_1BNFE_ACTIVE-DOCNUM.

    DELETE TG_ZCTE_CIOT WHERE TKNUM IS INITIAL.

    CHECK TG_ZCTE_CIOT[] IS NOT INITIAL.

    SELECT *
      FROM VTTK INTO TABLE TG_VTTK
       FOR ALL ENTRIES IN TG_ZCTE_CIOT
     WHERE TKNUM = TG_ZCTE_CIOT-TKNUM.

    CHECK TG_VTTK[] IS NOT INITIAL.

    SELECT *
      FROM VTTP INTO TABLE TG_VTTP
       FOR ALL ENTRIES IN TG_VTTK
     WHERE TKNUM = TG_VTTK-TKNUM.

    IF TG_VTTP[] IS NOT INITIAL.
      SELECT *
        FROM LIPS INTO TABLE TG_LIPS
         FOR ALL ENTRIES IN TG_VTTP
       WHERE VBELN = TG_VTTP-VBELN.
    ENDIF.

    SELECT *
      FROM TVRO INTO TABLE TG_TVRO
       FOR ALL ENTRIES IN TG_VTTK
     WHERE ROUTE = TG_VTTK-ROUTE.

    LOOP AT TG_J_1BNFE_ACTIVE.
      CLEAR: V_DEL_REG, TG_ZCTE_CIOT, TG_J_1BNFDOC.

      READ TABLE TG_J_1BNFDOC WITH KEY DOCNUM = TG_J_1BNFE_ACTIVE-DOCNUM.

      IF SY-SUBRC NE 0.
        V_DEL_REG = 'X'.
      ELSE.
        IF TG_J_1BNFDOC-NFTYPE EQ 'F2'.
          V_DEL_REG = 'X'.
        ENDIF.

        READ TABLE TG_ZCTE_CIOT WITH KEY DOCNUM = TG_J_1BNFE_ACTIVE-DOCNUM.
        IF ( SY-SUBRC NE 0 ) OR
           ( TG_ZCTE_CIOT-TP_PLANO_ADMINISTRADORA NE '02'  ) OR "Pré Pago
           ( TG_ZCTE_CIOT-ST_CIOT NE '5' AND "Creditado
             TG_ZCTE_CIOT-ST_CIOT NE '6' AND "Fechado (Pago Cockpit)
             TG_ZCTE_CIOT-ST_CIOT NE '9' ).  "Sem TipFrete (Frete Próprio)
          V_DEL_REG = 'X'.
        ELSE.

          READ TABLE TG_VTTK WITH KEY TKNUM = TG_ZCTE_CIOT-TKNUM.
          IF ( SY-SUBRC NE 0 ) OR ( TG_VTTK-ROUTE IS INITIAL ) OR ( TG_ZCTE_CIOT-TKNUM IS INITIAL ).
            V_DEL_REG = 'X'.
          ELSE.
            READ TABLE TG_TVRO WITH KEY ROUTE = TG_VTTK-ROUTE.
            IF ( SY-SUBRC NE 0 ) OR ( TG_TVRO-TRAZTD IS INITIAL ).
              V_DEL_REG = 'X'.
            ENDIF.
          ENDIF.

        ENDIF.

      ENDIF.

      IF V_DEL_REG = 'X'.
        DELETE TG_J_1BNFE_ACTIVE.
      ENDIF.
    ENDLOOP.

    SELECT *
      FROM ZIB_NFE INTO TABLE TG_ZIB_NFE
       FOR ALL ENTRIES IN TG_J_1BNFE_ACTIVE
     WHERE DOCNUM = TG_J_1BNFE_ACTIVE-DOCNUM.

  ENDIF.

  "Check Documentos Estornados
  SELECT *
    FROM J_1BNFDOC AS A INTO TABLE TG_DOC_ESTORNO
   WHERE A~CANDAT  IN R_CREDAT
     AND A~CANDAT  NE V_CANDAT
     AND EXISTS ( SELECT *
                    FROM ZLEST0141_RESUMO AS B
                   WHERE B~DOCNUM = A~DOCNUM ).

  LOOP AT TG_DOC_ESTORNO.
    SELECT SINGLE *
      FROM ZLEST0141_RESUMO INTO @DATA(_WL_0141_RESUMO)
     WHERE DOCNUM = @TG_DOC_ESTORNO-DOCNUM.

    IF SY-SUBRC EQ 0.
      _WL_0141_RESUMO-CANDAT            = TG_DOC_ESTORNO-CANDAT.
      _WL_0141_RESUMO-DT_SALDO_ESTORNO  = TG_DOC_ESTORNO-CANDAT + 1.

      PERFORM F_PROXIMO_DIA_UTIL CHANGING _WL_0141_RESUMO-DT_SALDO_ESTORNO. "Caso não for dia util, jogar para o proxio dia util.

      _WL_0141_RESUMO-SALDO_ESTORNO     = _WL_0141_RESUMO-VLR_FRETE.
      MODIFY ZLEST0141_RESUMO FROM _WL_0141_RESUMO.
      COMMIT WORK.
    ENDIF.
  ENDLOOP.

ENDFORM.

FORM F_PROCESSAR_DADOS .

  DATA: V_VALOR_CTE         TYPE ZLEST0140-VALOR,
        V_DT_MOV_ANT        TYPE ZLEST0141-DATA,
        TG_0140             TYPE TABLE OF ZLEST0140 WITH HEADER LINE,
        WL_ZLEST0141        TYPE ZLEST0141,
        IT_ZLEST0141        TYPE TABLE OF ZLEST0141,
        WL_ZLEST0141_RESUMO TYPE ZLEST0141_RESUMO,
        V_DT_TMP            TYPE ZLEST0141-DATA,
        TG_RESUMO_TEMP      TYPE TABLE OF ZLEST0141_RESUMO.

  DATA: TG_ZLEST0141_RESUMO TYPE TABLE OF ZLEST0141_RESUMO WITH HEADER LINE.

  CLEAR: IT_ZLEST0141[].

  CLEAR: TG_0140[].
  SELECT *
    FROM ZLEST0140 INTO TABLE TG_0140
   WHERE DATA EQ VG_DATA_PROC.

  CHECK TG_0140[] IS NOT INITIAL.

  LOOP AT TG_0140.

    CLEAR: WL_ZLEST0141.

    WL_ZLEST0141-BUKRS = TG_0140-BUKRS.
    WL_ZLEST0141-LIFNR = TG_0140-LIFNR.
    WL_ZLEST0141-DATA  = TG_0140-DATA.

    WL_ZLEST0141-DT_ADTO = WL_ZLEST0141-DATA.
    PERFORM F_PROXIMO_DIA_UTIL CHANGING WL_ZLEST0141-DT_ADTO.

    IF WL_ZLEST0141-DATA = WL_ZLEST0141-DT_ADTO. "Se não incrementou data, é dia util
      WL_ZLEST0141-DIA_UTIL = ABAP_TRUE.
      CLEAR: WL_ZLEST0141-DT_ADTO.
    ENDIF.

    SELECT SINGLE *
      FROM ZLEST0141 INTO @DATA(_WL_0141_CTB)
     WHERE BUKRS EQ @WL_ZLEST0141-BUKRS
       AND DATA  EQ @WL_ZLEST0141-DATA.

    IF SY-SUBRC EQ 0.
      CHECK ( _WL_0141_CTB-LOTE IS INITIAL ) AND ( _WL_0141_CTB-SEM_SLD_PGTO IS INITIAL ).
    ENDIF.

    CLEAR: TG_ZLEST0141_RESUMO[].
    SELECT *
      FROM ZLEST0141_RESUMO INTO TABLE TG_ZLEST0141_RESUMO
     WHERE BUKRS = WL_ZLEST0141-BUKRS
       AND DATA  = WL_ZLEST0141-DATA.

    "Valida se Data do Saldo Frete, já foi gerado Contabil
    DATA(_USE_DT_SALDO_FRETE) = ABAP_FALSE.
    LOOP AT TG_ZLEST0141_RESUMO.
      SELECT SINGLE *
        FROM ZLEST0141 INTO @DATA(_WL_0141_TMP)
       WHERE BUKRS = @TG_ZLEST0141_RESUMO-BUKRS
         AND DATA  = @TG_ZLEST0141_RESUMO-DT_SALDO_FRETE.

      IF ( SY-SUBRC EQ 0 ) AND ( ( _WL_0141_CTB-LOTE IS NOT INITIAL ) OR ( _WL_0141_CTB-SEM_SLD_PGTO IS NOT INITIAL ) ).
        _USE_DT_SALDO_FRETE = ABAP_TRUE.
        EXIT.
      ENDIF.
    ENDLOOP.

    CHECK _USE_DT_SALDO_FRETE = ABAP_FALSE.

*------------------------------------------------------------------------------------------------------------*
*   Transferencia de Saldo de Frete para dia Util(Situações onde é cadastrado dia "não util" na ZLES0145)
*------------------------------------------------------------------------------------------------------------*

    IF WL_ZLEST0141-DIA_UTIL = ABAP_FALSE.
      CLEAR TG_RESUMO_TEMP[].
      SELECT *
       FROM ZLEST0141_RESUMO INTO TABLE TG_RESUMO_TEMP
      WHERE BUKRS = WL_ZLEST0141-BUKRS
        AND DT_SALDO_FRETE =  WL_ZLEST0141-DATA
        AND LIFNR = WL_ZLEST0141-LIFNR.

      V_DT_TMP = WL_ZLEST0141-DATA.

      PERFORM F_PROXIMO_DIA_UTIL CHANGING V_DT_TMP. "CASO NÃO FOR DIA UTIL, JOGAR PARA O PROXIO DIA UTIL.

      LOOP AT TG_RESUMO_TEMP INTO DATA(WA_0141_RESUMO).

        WA_0141_RESUMO-DT_SALDO_FRETE = V_DT_TMP.
        WA_0141_RESUMO-TRANSF_DT_SD_FRE = ABAP_TRUE.
        WA_0141_RESUMO-DT_SLD_FRE_OLD = WL_ZLEST0141-DATA.

        MODIFY ZLEST0141_RESUMO FROM WA_0141_RESUMO.
      ENDLOOP.

*    ELSE.
*      CLEAR TG_RESUMO_TEMP[].
*      SELECT *
*       FROM ZLEST0141_RESUMO INTO TABLE TG_RESUMO_TEMP
*      WHERE BUKRS = WL_ZLEST0141-BUKRS
*        AND DT_SLD_FRE_OLD = WL_ZLEST0141-DATA
*        AND LIFNR = WL_ZLEST0141-LIFNR
*        AND TRANSF_DT_SD_FRE = ABAP_TRUE.
*
*      LOOP AT TG_RESUMO_TEMP INTO DATA(WA_0141_RESUMO2).
*
*        WA_0141_RESUMO2-DT_SALDO_FRETE = WA_0141_RESUMO2-DT_SLD_FRE_OLD.
*
*        MODIFY ZLEST0141_RESUMO FROM WA_0141_RESUMO2.
*      ENDLOOP.



    ENDIF.


*------------------------------------------------------------------*
*   Validações Mov. Dia anterior
*------------------------------------------------------------------*
    V_DT_MOV_ANT = WL_ZLEST0141-DATA - 1.
    SELECT SINGLE *
      FROM ZLEST0141 INTO _WL_0141_TMP
     WHERE BUKRS = WL_ZLEST0141-BUKRS
       AND DATA  = V_DT_MOV_ANT.

    CHECK SY-SUBRC EQ 0. "Obrigatório Movimento ter registro do movimento do dia anterior

    IF _WL_0141_TMP-DIA_UTIL EQ ABAP_TRUE.
      "Obrigatório Geração Doc.Contabil ou Confirmação "Sem Saldo Pagar" no movimento do dia anterior caso for dia util
      CHECK ( _WL_0141_TMP-LOTE IS NOT INITIAL ) OR ( _WL_0141_TMP-SEM_SLD_PGTO IS NOT INITIAL ).
    ENDIF.


*--------------------------------------------------------------------------*
*   Gerar Resumo
*--------------------------------------------------------------------------*
    DELETE FROM ZLEST0141_RESUMO WHERE BUKRS = WL_ZLEST0141-BUKRS
                                   AND DATA  = WL_ZLEST0141-DATA.

    LOOP AT TG_J_1BNFE_ACTIVE WHERE BUKRS  EQ TG_0140-BUKRS
                                AND CREDAT IN R_CREDAT.

      CLEAR: TG_ZCTE_CIOT, TG_VTTK, TG_VTTP, TG_LIPS, TG_TVRO.

      READ TABLE TG_ZCTE_CIOT WITH KEY DOCNUM = TG_J_1BNFE_ACTIVE-DOCNUM.
      CHECK ( SY-SUBRC EQ 0 ) AND ( TG_ZCTE_CIOT-TKNUM IS NOT INITIAL ).

      READ TABLE TG_VTTK WITH KEY TKNUM = TG_ZCTE_CIOT-TKNUM.
      CHECK ( SY-SUBRC EQ 0 ) AND ( TG_VTTK-ROUTE IS NOT INITIAL ).

      READ TABLE TG_VTTP WITH KEY TKNUM = TG_VTTK-TKNUM.
      IF ( SY-SUBRC EQ 0 ) AND ( TG_VTTP-VBELN IS NOT INITIAL ).
        READ TABLE TG_LIPS WITH KEY VBELN = TG_VTTP-VBELN.
      ENDIF.

      READ TABLE TG_TVRO WITH KEY ROUTE = TG_VTTK-ROUTE.
      CHECK ( SY-SUBRC EQ 0 ) AND ( TG_TVRO-TRAZTD IS NOT INITIAL ).

      CLEAR: WL_ZLEST0141_RESUMO.

      WL_ZLEST0141_RESUMO-BUKRS             = TG_J_1BNFE_ACTIVE-BUKRS.
      WL_ZLEST0141_RESUMO-DATA              = WL_ZLEST0141-DATA.
      WL_ZLEST0141_RESUMO-DIA_UTIL          = WL_ZLEST0141-DIA_UTIL.
      WL_ZLEST0141_RESUMO-DT_MOVTO          = WL_ZLEST0141-DATA.
      WL_ZLEST0141_RESUMO-DT_ADTO           = WL_ZLEST0141-DT_ADTO.
      WL_ZLEST0141_RESUMO-DOCNUM            = TG_J_1BNFE_ACTIVE-DOCNUM.
      WL_ZLEST0141_RESUMO-LIFNR             = WL_ZLEST0141-LIFNR.
      WL_ZLEST0141_RESUMO-VLR_MOV           = TG_ZCTE_CIOT-VLR_ADIANTAMENTO.
      WL_ZLEST0141_RESUMO-VLR_FRETE         = TG_ZCTE_CIOT-VLR_FRETE.
      WL_ZLEST0141_RESUMO-ROUTE             = TG_VTTK-ROUTE.
      WL_ZLEST0141_RESUMO-EMISSOR           = TG_ZCTE_CIOT-EMISSOR.
      WL_ZLEST0141_RESUMO-NFENUM            = TG_J_1BNFE_ACTIVE-NFNUM9.
      WL_ZLEST0141_RESUMO-DT_SALDO_FRETE    = TG_J_1BNFE_ACTIVE-CREDAT.
      WL_ZLEST0141_RESUMO-MATKL             = TG_LIPS-MATKL.

      READ TABLE TG_ZIB_NFE WITH KEY DOCNUM = TG_J_1BNFE_ACTIVE-DOCNUM.
      IF ( SY-SUBRC EQ 0 ) AND ( TG_ZIB_NFE-DATE_AUT_1 IS NOT INITIAL ).
        WL_ZLEST0141_RESUMO-DT_SALDO_FRETE = TG_ZIB_NFE-DATE_AUT_1.
      ENDIF.

      PERFORM F_ATRIB_DT_SALDO_FRETE USING TG_TVRO-TRAZTD
                                  CHANGING WL_ZLEST0141_RESUMO-DT_SALDO_FRETE.

      ADD 1 TO WL_ZLEST0141_RESUMO-DT_SALDO_FRETE. "Adicionando 1 dia, pois o processamento é feito pegando CT-e's do dia anterior
      PERFORM F_PROXIMO_DIA_UTIL CHANGING WL_ZLEST0141_RESUMO-DT_SALDO_FRETE. "Caso não for dia util, jogar para o proxio dia util.

      WL_ZLEST0141_RESUMO-SALDO_FRETE       = TG_ZCTE_CIOT-VLR_FRETE - TG_ZCTE_CIOT-VLR_ADIANTAMENTO.
      WL_ZLEST0141_RESUMO-DATA_REG          = SY-DATUM.
      WL_ZLEST0141_RESUMO-HORA_REG          = SY-UZEIT.
      MODIFY ZLEST0141_RESUMO FROM WL_ZLEST0141_RESUMO.

    ENDLOOP.

*    IF WL_ZLEST0141-DIA_UTIL EQ ABAP_TRUE.
*      "Transportar Lançamentos de dias não uteis, para a data corretente(dia util)
*      CLEAR: TG_ZLEST0141_RESUMO[].
*      SELECT *
*        FROM ZLEST0141_RESUMO INTO CORRESPONDING FIELDS OF TABLE TG_ZLEST0141_RESUMO
*       WHERE BUKRS            = WL_ZLEST0141-BUKRS
*         AND DT_ADTO          = WL_ZLEST0141-DATA
*         AND LIFNR            = WL_ZLEST0141-LIFNR
*         AND DIA_UTIL         = ABAP_FALSE.
*
*      LOOP AT TG_ZLEST0141_RESUMO.
*        CLEAR: WL_ZLEST0141_RESUMO.
*
*        MOVE-CORRESPONDING TG_ZLEST0141_RESUMO TO WL_ZLEST0141_RESUMO.
*        WL_ZLEST0141_RESUMO-DATA     = WL_ZLEST0141-DATA.
*        WL_ZLEST0141_RESUMO-DIA_UTIL = ABAP_TRUE.
*        MODIFY ZLEST0141_RESUMO FROM WL_ZLEST0141_RESUMO.
*      ENDLOOP.
*    ENDIF.

*--------------------------------------------------------------------------*
*   Fim Gerar Resumo
*--------------------------------------------------------------------------*

    WL_ZLEST0141-DATA_REG = SY-DATUM.
    WL_ZLEST0141-HORA_REG = SY-UZEIT.

    MODIFY ZLEST0141 FROM WL_ZLEST0141.

    APPEND WL_ZLEST0141 TO IT_ZLEST0141.

  ENDLOOP.

  PERFORM F_ATUALIZA_RESUMO_OUT_VALORES.

  LOOP AT IT_ZLEST0141 INTO WL_ZLEST0141.

    SELECT SINGLE SALDO_OUTROS FROM ZLEST0141
      INTO WL_ZLEST0141-SALDO_OUTROS
      WHERE BUKRS = WL_ZLEST0141-BUKRS AND
            DATA  = WL_ZLEST0141-DATA.

*---------------------------------------------------------------------*
*   Calcular Saldo Movimento
*---------------------------------------------------------------------*
    CLEAR: TG_ZLEST0141_RESUMO[], WL_ZLEST0141-VLR_MOV.
    SELECT *
      FROM ZLEST0141_RESUMO INTO TABLE TG_ZLEST0141_RESUMO
     WHERE BUKRS          = WL_ZLEST0141-BUKRS
       AND DATA           = WL_ZLEST0141-DATA
       AND LIFNR          = WL_ZLEST0141-LIFNR.

    LOOP AT TG_ZLEST0141_RESUMO.
      ADD TG_ZLEST0141_RESUMO-VLR_MOV TO WL_ZLEST0141-VLR_MOV.
    ENDLOOP.

    "Saldo Movimento dias não uteis
    CLEAR: TG_ZLEST0141_RESUMO[].
    SELECT *
      FROM ZLEST0141_RESUMO INTO CORRESPONDING FIELDS OF TABLE TG_ZLEST0141_RESUMO
     WHERE BUKRS            = WL_ZLEST0141-BUKRS
       AND DT_ADTO          = WL_ZLEST0141-DATA
       AND LIFNR            = WL_ZLEST0141-LIFNR.

    LOOP AT TG_ZLEST0141_RESUMO.
      ADD TG_ZLEST0141_RESUMO-VLR_MOV TO WL_ZLEST0141-VLR_MOV.
    ENDLOOP.

*---------------------------------------------------------------------*
*   Calcular Saldo Frete
*---------------------------------------------------------------------*
    CLEAR: TG_ZLEST0141_RESUMO[], WL_ZLEST0141-SALDO_FRETE.
    SELECT *
      FROM ZLEST0141_RESUMO INTO TABLE TG_ZLEST0141_RESUMO
     WHERE BUKRS          = WL_ZLEST0141-BUKRS
       AND DT_SALDO_FRETE = WL_ZLEST0141-DATA
       AND LIFNR          = WL_ZLEST0141-LIFNR.

    LOOP AT TG_ZLEST0141_RESUMO.
      ADD TG_ZLEST0141_RESUMO-SALDO_FRETE TO WL_ZLEST0141-SALDO_FRETE.
    ENDLOOP.

*---------------------------------------------------------------------*
*   Calcular Saldo Estorno
*---------------------------------------------------------------------*
    CLEAR: TG_ZLEST0141_RESUMO[], WL_ZLEST0141-SALDO_ESTORNO.
    SELECT *
      FROM ZLEST0141_RESUMO INTO TABLE TG_ZLEST0141_RESUMO
     WHERE BUKRS            = WL_ZLEST0141-BUKRS
       AND DT_SALDO_ESTORNO = WL_ZLEST0141-DATA
       AND LIFNR            = WL_ZLEST0141-LIFNR.

    LOOP AT TG_ZLEST0141_RESUMO.
      ADD TG_ZLEST0141_RESUMO-SALDO_ESTORNO TO WL_ZLEST0141-SALDO_ESTORNO.
    ENDLOOP.

    MODIFY ZLEST0141 FROM WL_ZLEST0141.

  ENDLOOP.

ENDFORM.

FORM F_INICIAR_VARIAVEIS .

  CLEAR: R_MODEL[], R_FORM[], R_CREDAT[].

  CLEAR: TG_J_1BNFE_ACTIVE[],
         TG_J_1BNFDOC[],
         TG_ZCTE_CIOT[],
         TG_VTTK[],
         TG_ZIB_NFE[],
         TG_TVRO[].


ENDFORM.

FORM F_GET_VALOR_CTE USING P_DOCNUM TYPE J_1BNFDOC-DOCNUM
                  CHANGING P_NETWR.

  DATA: TG_LIN         TYPE TABLE OF J_1BNFLIN WITH HEADER LINE,
        TG_TAX         TYPE J_1BNFSTX OCCURS 10 WITH HEADER LINE,
        V_NETWR        TYPE J_1BNFLIN-NETWR,
        LX_CTE_RELATED TYPE ABAP_BOOL VALUE ABAP_FALSE,
        WA_LIN_E       TYPE J_1BNFLIN,
        WA_LIN_I       TYPE J_1BINLIN.

  CLEAR: V_NETWR, P_NETWR.

  CHECK P_DOCNUM IS NOT INITIAL.

  SELECT SINGLE *
    FROM J_1BNFDOC INTO @DATA(WL_DOC)
   WHERE DOCNUM = @P_DOCNUM.

  CHECK SY-SUBRC = 0.

  SELECT *
    FROM J_1BNFLIN INTO TABLE TG_LIN
   WHERE DOCNUM = P_DOCNUM.

  CHECK TG_LIN[] IS NOT INITIAL.

  LX_CTE_RELATED = 'X'.

  LOOP AT TG_LIN.

    CLEAR: WA_LIN_E, WA_LIN_I, TG_TAX[].

    MOVE-CORRESPONDING TG_LIN TO WA_LIN_E.

    SELECT *
      FROM J_1BNFSTX INTO TABLE TG_TAX
     WHERE DOCNUM = TG_LIN-DOCNUM
       AND ITMNUM = TG_LIN-ITMNUM.

    CALL FUNCTION 'J_1B_NF_VALUE_DETERMINATION_I'
      EXPORTING
        NF_ITEM                 = WA_LIN_E
        IV_NF_DIRECTION         = WL_DOC-DIRECT
        IX_POSTED_WITH_XML_DATA = WL_DOC-AUTOM_INCOMING
        IX_CTE_RELATED          = LX_CTE_RELATED
      IMPORTING
        EXT_ITEM                = WA_LIN_I
      TABLES
        NF_ITEM_TAX             = TG_TAX.

    IF WA_LIN_I-NFTOT > 0 .
      ADD WA_LIN_I-NFTOT TO V_NETWR.
    ELSEIF WA_LIN_I-NFNETT > 0 .
      ADD WA_LIN_I-NFNETT TO V_NETWR.
    ELSEIF WA_LIN_I-NETWRT > 0.
      ADD WA_LIN_I-NETWRT TO V_NETWR.
    ENDIF.

  ENDLOOP.

  P_NETWR = V_NETWR.

ENDFORM.

FORM F_ATRIB_DT_SALDO_FRETE  USING P_TRAZTD         TYPE TVRO-TRAZTD
                          CHANGING P_DT_SALDO_FRETE TYPE SY-DATUM.

  DATA: V_DIAS    TYPE C LENGTH 100,
        V_TRAZTD  TYPE C LENGTH 100,
        V_HORAS_I TYPE I,
        V_DIAS_I  TYPE I.

  V_TRAZTD = P_TRAZTD.

  CHECK V_TRAZTD IS NOT INITIAL.

  REPLACE ALL OCCURRENCES OF '.' IN V_TRAZTD WITH ''.
  CONDENSE V_TRAZTD NO-GAPS.

  CALL FUNCTION 'CONVERSION_EXIT_TSTRG_OUTPUT'
    EXPORTING
      INPUT  = V_TRAZTD
    IMPORTING
      OUTPUT = V_DIAS.

  REPLACE ALL OCCURRENCES OF ',' IN V_DIAS WITH '.'.
  CONDENSE V_DIAS NO-GAPS.

  V_DIAS_I = V_DIAS.

  CHECK V_DIAS_I > 0.

  P_DT_SALDO_FRETE = P_DT_SALDO_FRETE + V_DIAS_I.

ENDFORM.

FORM F_PROXIMO_DIA_UTIL CHANGING P_DATA TYPE SY-DATUM.

  DATA: V_DATA_AUX TYPE SY-DATUM.

  CHECK P_DATA IS NOT INITIAL.

  V_DATA_AUX = P_DATA.

  "Jogar para o proximo dia útil
  ZCL_MIRO=>GET_PROXIMO_DIA_UTIL(
    EXPORTING
      I_DATA_BASE = V_DATA_AUX
      I_SIGNUM    = '+'
      I_CK_DATA_ZLES0145 = 'X'
    RECEIVING
      R_DATA      = V_DATA_AUX
    EXCEPTIONS
      ERRO        = 1
      OTHERS      = 2 ).

  IF ( V_DATA_AUX IS NOT INITIAL ) AND ( V_DATA_AUX NE P_DATA ).
    P_DATA = V_DATA_AUX.
  ENDIF.

ENDFORM.

FORM F_ATUALIZA_RESUMO_OUT_VALORES.

  DATA: V_DATA_POSICAO TYPE ZDT_POSICAO,
        V_MSG_RETORNO  TYPE CHAR10.

  V_DATA_POSICAO = SY-DATUM.

  CALL FUNCTION 'ZLESF0141_RES_OUTROS_VALORES'
    EXPORTING
      V_DATA_POSICAO = V_DATA_POSICAO    " Dt. de Posição
    IMPORTING
      MSG_RETORNO    = V_MSG_RETORNO.    " Retorno do processamento

ENDFORM.
