*----------------------------------------------------------------------*
***INCLUDE ZLESR0105_STATUS_0200.
*----------------------------------------------------------------------*

CLASS LCL_EVENT_HANDLER DEFINITION DEFERRED.
CLASS LCL_ALV_TOOLBAR   DEFINITION DEFERRED.
CLASS LCL_ALV_TOOLBAR_2 DEFINITION DEFERRED.
CLASS LCL_APPLICATION   DEFINITION DEFERRED.

TYPES: BEGIN OF TY_NODE_INFO.
TYPES: NODE_KEY      TYPE  TV_NODEKEY,
       ITEM_NAME     TYPE  TV_ITMNAME,
       TP_MOVIMENTO  TYPE ZTP_MOV,
       CH_REFERENCIA TYPE ZCH_REF,
       TIPO          TYPE CHAR03,
       DOC_PART_1    TYPE CHAR30,
       DOC_PART_2    TYPE CHAR30,
       DOC_PART_3    TYPE CHAR30,
       DOC_REF       TYPE CHAR30,
       AV_VBELN      TYPE VBELN_VL.
TYPES: END OF TY_NODE_INFO.

CONSTANTS:
  BEGIN OF C_TREE,
    COLUMN1 TYPE TV_ITMNAME VALUE 'Documentos',
    COLUMN2 TYPE TV_ITMNAME VALUE 'Imprimir',
    COLUMN3 TYPE TV_ITMNAME VALUE 'Descricao',
  END OF C_TREE.

DATA: DG_SPLITTER          TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      CTL_CCCONTAINER      TYPE REF TO CL_GUI_CONTAINER,
      CTL_CCCONTAINER2     TYPE REF TO CL_GUI_CONTAINER,
      CTL_CCCONTAINER2A    TYPE REF TO CL_GUI_CONTAINER,
      CTL_CCCONTAINER2B    TYPE REF TO CL_GUI_CONTAINER,
      CTL_ALV              TYPE REF TO CL_GUI_ALV_GRID,
      CTL_ALV2             TYPE REF TO CL_GUI_ALV_GRID,
      OBG_TOOLBAR          TYPE REF TO LCL_ALV_TOOLBAR,
      OBG_TOOLBAR_2        TYPE REF TO LCL_ALV_TOOLBAR_2,
      OBJ_TOOLBARMANAGER   TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,
      OBJ_TOOLBARMANAGER_2 TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,
      DG_SPLITTER_2        TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      TREE                 TYPE REF TO CL_GUI_COLUMN_TREE,
      G_APPLICATION        TYPE REF TO LCL_APPLICATION.

DATA: IT_FIELDCATALOG   TYPE LVC_T_FCAT,
      IT_FIELDCATALOG_2 TYPE LVC_T_FCAT,
      WA_FIELDCATALOG   TYPE LVC_S_FCAT,
      IT_EXCEPT_QINFO   TYPE LVC_T_QINF,
      GS_VARIANT        TYPE DISVARIANT,
      GS_VARIANT_2      TYPE DISVARIANT,
      GS_LAYOUT         TYPE LVC_S_LAYO,
      GS_LAYOUT_2       TYPE LVC_S_LAYO,
      IT_EXCLUDE_FCODE  TYPE UI_FUNCTIONS,
      WA_EXCLUDE_FCODE  LIKE LINE OF IT_EXCLUDE_FCODE,
      GS_SCROLL_COL     TYPE LVC_S_COL,
      GS_SCROLL_ROW     TYPE LVC_S_ROID,
      GS_SCROLL_COL_2   TYPE LVC_S_COL,
      GS_SCROLL_ROW_2   TYPE LVC_S_ROID,
      IT_SELECTED_ROWS  TYPE LVC_T_ROW,
      WA_SELECTED_ROWS  TYPE LVC_S_ROW,
      NODE_TABLE        TYPE TREEV_NTAB,
      ITEM_TABLE        TYPE STANDARD TABLE OF MTREEITM,
      EVENTS            TYPE CNTL_SIMPLE_EVENTS.

DATA: IT_RETORNO_ALV          TYPE TABLE OF TY_ITENS_ALV WITH HEADER LINE,
      IT_RETORNO_ALV_SEL      TYPE TABLE OF TY_ITENS_ALV WITH HEADER LINE,
      IT_ROMANEIO_ENTRADA     TYPE TABLE OF ZSDT0001 WITH HEADER LINE,
      IT_ROMANEIO_ENTRADA_SEL TYPE TABLE OF ZSDT0001 WITH HEADER LINE,
      WA_CARGA_ROMANEIO       TYPE TY_ITENS_ALV,
      IT_TREE_INFO            TYPE TABLE OF TY_NODE_INFO WITH HEADER LINE.

DATA: CK_MOSTRAR_ENTRADA TYPE CHAR01,
      CK_MOSTRAR_LOGS    TYPE CHAR01,
      CK_REGISTRO_LOG    TYPE CHAR01,
      QT_ROWS_SPLITTER   TYPE I.

DATA: EVENT_HANDLER      TYPE REF TO LCL_EVENT_HANDLER.

CLASS LCL_ALV_TOOLBAR DEFINITION.
  PUBLIC SECTION.
*Constructor
    METHODS: CONSTRUCTOR         IMPORTING IO_ALV_GRID TYPE REF TO CL_GUI_ALV_GRID,
      ON_TOOLBAR          FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID IMPORTING E_OBJECT,
      HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID IMPORTING E_UCOMM.
ENDCLASS.                    "lcl_alv_toolbar DEFINITION

CLASS LCL_ALV_TOOLBAR_2 DEFINITION.
  PUBLIC SECTION.
*Constructor
    METHODS: CONSTRUCTOR  IMPORTING IO_ALV_GRID TYPE REF TO CL_GUI_ALV_GRID,
      ON_TOOLBAR          FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID IMPORTING E_OBJECT,
      HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID IMPORTING E_UCOMM.
ENDCLASS.                    "lcl_alv_toolbar DEFINITION

CLASS LCL_EVENT_HANDLER DEFINITION.
  PUBLIC SECTION.
    METHODS HANDLE_HOTSPOT_CLICK FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID IMPORTING E_COLUMN_ID ES_ROW_NO.
    METHODS HANDLE_DOUBLE_CLICK  FOR EVENT DOUBLE_CLICK  OF CL_GUI_ALV_GRID IMPORTING E_ROW E_COLUMN ES_ROW_NO.
ENDCLASS.                    "lcl_event_handler DEFINITION

CLASS LCL_APPLICATION DEFINITION.
  PUBLIC SECTION.
    METHODS:
      HANDLE_LINK_CLICK   FOR EVENT LINK_CLICK OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY ITEM_NAME,
      HANDLE_DOUBLE_CLICK FOR EVENT NODE_DOUBLE_CLICK OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY.
ENDCLASS.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0200 OUTPUT.

  DATA: HIERARCHY_HEADER TYPE TREEV_HHDR,
        EVENT            TYPE CNTL_SIMPLE_EVENT.

  SET PF-STATUS 'PF0200'.

  CASE PTIPCA.
    WHEN ZIF_CARGA=>ST_TP_CARGA_ENTRADA_FOB.
      SET TITLEBAR 'TL0200'.
    WHEN ZIF_CARGA=>ST_TP_CARGA_SAIDA_OPUS.
      SET TITLEBAR 'TL0201'.
    WHEN ZIF_CARGA=>ST_TP_CARGA_SAIDA_ENT_FOB.
      SET TITLEBAR 'TL0202'.
  ENDCASE.

  IF QT_ROWS_SPLITTER IS INITIAL.
    QT_ROWS_SPLITTER = 1.
  ENDIF.

  IF IT_RETORNO_ALV[] IS INITIAL.
    PERFORM CARREGA_SAIDA.
  ENDIF.

  IF CK_CONFER_CARGA EQ ABAP_TRUE.
    CK_MOSTRAR_ENTRADA = ABAP_TRUE.
    READ TABLE IT_RETORNO_ALV INDEX 1 ASSIGNING FIELD-SYMBOL(<RETORNO_ALV_SEL>).
    PERFORM CARREGAR_ENTRADA USING <RETORNO_ALV_SEL>.
    QT_ROWS_SPLITTER = 2.
    CLEAR: CK_CONFER_CARGA.
  ENDIF.

  IF DG_SPLITTER IS INITIAL.

    CREATE OBJECT DG_SPLITTER
      EXPORTING
        PARENT  = CL_GUI_CONTAINER=>SCREEN0
        ROWS    = QT_ROWS_SPLITTER
        COLUMNS = 1.

    CTL_CCCONTAINER = DG_SPLITTER->GET_CONTAINER( ROW = 1 COLUMN = 1 ).

    CREATE OBJECT CTL_ALV
      EXPORTING
        I_PARENT = CTL_CCCONTAINER.

    PERFORM FILL_IT_FIELDCATALOG.

    "Hints
    PERFORM FILL_IT_HINTS.

*   Fill info for layout variant
    PERFORM FILL_GS_VARIANT.

*   Set layout parameters for ALV grid
    "GS_LAYOUT-GRID_TITLE = TEXT-100.
    GS_LAYOUT-SEL_MODE   = 'A'.
    GS_LAYOUT-INFO_FNAME = 'LINE_COLOR'.
    GS_LAYOUT-STYLEFNAME = 'STYLE'.
    GS_LAYOUT-CTAB_FNAME = 'COLOR_CELL'.
    GS_LAYOUT-ZEBRA      = ABAP_FALSE.

    CLEAR: IT_EXCLUDE_FCODE, IT_EXCLUDE_FCODE[].

    CREATE OBJECT OBG_TOOLBAR
      EXPORTING
        IO_ALV_GRID = CTL_ALV.

    SET HANDLER OBG_TOOLBAR->ON_TOOLBAR FOR CTL_ALV.
    SET HANDLER OBG_TOOLBAR->HANDLE_USER_COMMAND FOR CTL_ALV.

    CALL METHOD CTL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT
        IS_VARIANT           = GS_VARIANT
        IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
        I_SAVE               = 'A'
        IT_EXCEPT_QINFO      = IT_EXCEPT_QINFO
      CHANGING
        IT_FIELDCATALOG      = IT_FIELDCATALOG
        IT_OUTTAB            = IT_RETORNO_ALV[].

    CREATE OBJECT EVENT_HANDLER.
    SET HANDLER EVENT_HANDLER->HANDLE_HOTSPOT_CLICK FOR CTL_ALV.
    SET HANDLER EVENT_HANDLER->HANDLE_DOUBLE_CLICK  FOR CTL_ALV.

    IF QT_ROWS_SPLITTER EQ 2 .

      CTL_CCCONTAINER2 = DG_SPLITTER->GET_CONTAINER( ROW = 2 COLUMN = 1 ).

      CREATE OBJECT DG_SPLITTER_2
        EXPORTING
          PARENT  = CTL_CCCONTAINER2
          ROWS    = 1
          COLUMNS = 2.

      DG_SPLITTER_2->SET_COLUMN_WIDTH( ID = 2 WIDTH = 30 ).

      CTL_CCCONTAINER2A = DG_SPLITTER_2->GET_CONTAINER( ROW = 1 COLUMN = 1 ).
      CTL_CCCONTAINER2B = DG_SPLITTER_2->GET_CONTAINER( ROW = 1 COLUMN = 2 ).

      "ALV ROMANEIOS DE ENTRADA
      CREATE OBJECT CTL_ALV2
        EXPORTING
          I_PARENT = CTL_CCCONTAINER2A.

      PERFORM FILL_IT_FIELDCATALOG_2.
      PERFORM FILL_IT_HINTS_2.
      PERFORM FILL_GS_VARIANT_2.

      CONCATENATE 'Ticket:'  WA_CARGA_ROMANEIO-NR_TICKET
                  'Placa:'   WA_CARGA_ROMANEIO-DS_PLACA_TRATOR
                  'Produto:' WA_CARGA_ROMANEIO-DS_PRODUTO
             INTO GS_LAYOUT_2-GRID_TITLE SEPARATED BY SPACE.
      GS_LAYOUT_2-SEL_MODE   = 'A'.
      GS_LAYOUT_2-INFO_FNAME = 'ROWCOLOR'.
      GS_LAYOUT_2-STYLEFNAME = 'STYLE'.
      GS_LAYOUT_2-CTAB_FNAME = 'COLOR_CELL'.
      GS_LAYOUT_2-ZEBRA      = ABAP_FALSE.

      CREATE OBJECT OBG_TOOLBAR_2
        EXPORTING
          IO_ALV_GRID = CTL_ALV2.

      SET HANDLER OBG_TOOLBAR_2->ON_TOOLBAR FOR CTL_ALV2.
      SET HANDLER OBG_TOOLBAR_2->HANDLE_USER_COMMAND FOR CTL_ALV2.

      CALL METHOD CTL_ALV2->SET_TABLE_FOR_FIRST_DISPLAY
        EXPORTING
          IS_LAYOUT       = GS_LAYOUT_2
          IS_VARIANT      = GS_VARIANT_2
          I_SAVE          = 'A'
        CHANGING
          IT_FIELDCATALOG = IT_FIELDCATALOG_2
          IT_OUTTAB       = IT_ROMANEIO_ENTRADA[].

      DATA: P_INUTIL TYPE REF TO CL_GUI_DOCKING_CONTAINER.

      PERFORM CRIA_ALV_DOCUMENTOS USING 1 CTL_CCCONTAINER2B P_INUTIL.

      PERFORM ATUALIZA_TREE USING WA_CARGA_ROMANEIO-ID_CARGA.

    ENDIF.

  ENDIF.

  IF ( GB_ST_CARGA_EST = 'W' OR GB_ST_CARGA = 'W' ) AND ( OBG_TOOLBAR_2 IS NOT INITIAL AND  CTL_ALV2 IS NOT INITIAL ).
    CTL_ALV2->REFRESH_TABLE_DISPLAY( ).
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0200_EXIT INPUT.

  PERFORM LIMPA_TELA_0200.
  LEAVE TO SCREEN 0.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  LIMPA_TELA_0200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM LIMPA_TELA_0200 .

  PERFORM TIME_ESTORNO USING ABAP_FALSE.
  PERFORM TIME USING ABAP_FALSE.

  IF TREE IS NOT INITIAL.
    TREE->FREE( ).
  ENDIF.
  CLEAR: TREE.

  CLEAR: G_APPLICATION, OBG_TOOLBAR_2, EVENT_HANDLER.

  IF CTL_ALV2 IS NOT INITIAL.
    CTL_ALV2->FREE( ).
  ENDIF.
  CLEAR: CTL_ALV2.

  IF CTL_CCCONTAINER2B IS NOT INITIAL.
    CTL_CCCONTAINER2B->FREE( ).
  ENDIF.
  CLEAR: CTL_CCCONTAINER2B.

  IF CTL_CCCONTAINER2A IS NOT INITIAL.
    CTL_CCCONTAINER2A->FREE( ).
  ENDIF.
  CLEAR: CTL_CCCONTAINER2A.

  IF DG_SPLITTER_2 IS NOT INITIAL.
    DG_SPLITTER_2->FREE( ).
  ENDIF.
  CLEAR: DG_SPLITTER_2.

  IF CTL_CCCONTAINER2 IS NOT INITIAL.
    CTL_CCCONTAINER2->FREE( ).
  ENDIF.
  CLEAR: CTL_CCCONTAINER2.

  IF CTL_ALV IS NOT INITIAL.
    CTL_ALV->FREE( ).
  ENDIF.
  CLEAR: CTL_ALV.

  CLEAR: OBG_TOOLBAR.

  IF CTL_CCCONTAINER IS NOT INITIAL.
    CTL_CCCONTAINER->FREE( ).
  ENDIF.
  CLEAR: CTL_CCCONTAINER.

  IF DG_SPLITTER IS NOT INITIAL.
    DG_SPLITTER->FREE( ).
  ENDIF.
  CLEAR: DG_SPLITTER.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG .

  DATA: LC_COL_POS  TYPE LVC_COLPOS.

  FIELD-SYMBOLS: <FS_CAT> TYPE LVC_S_FCAT.

  CLEAR: IT_FIELDCATALOG[].

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_ZSDT0001CG_ALV'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG.

  WA_FIELDCATALOG-FIELDNAME = 'ICO_CARGA'.
  WA_FIELDCATALOG-DATATYPE  = 'CHAR'.
  WA_FIELDCATALOG-INTTYPE   = 'C'.
  WA_FIELDCATALOG-INTLEN    = '000004'.
  WA_FIELDCATALOG-LOWERCASE = 'X'.
  WA_FIELDCATALOG-DOMNAME   = 'CHAR04'.
  WA_FIELDCATALOG-SCRTEXT_L = TEXT-005.
  WA_FIELDCATALOG-SCRTEXT_M = TEXT-005.
  WA_FIELDCATALOG-SCRTEXT_S = TEXT-005.
  APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

  LOOP AT IT_FIELDCATALOG ASSIGNING <FS_CAT>.
    <FS_CAT>-TABNAME = 'ZDE_ZSDT0001CG_ALV'.

    CASE <FS_CAT>-FIELDNAME.
      WHEN 'ICO_CARGA'.
        <FS_CAT>-HOTSPOT = ABAP_TRUE.
        <FS_CAT>-ICON    = ABAP_TRUE.
        <FS_CAT>-JUST    = 'C'.
        <FS_CAT>-COL_POS = 1.
*      WHEN 'ICO_ST_FISCAL'.
*        <FS_CAT>-HOTSPOT = ABAP_TRUE.
*        <FS_CAT>-ICON    = ABAP_TRUE.
*        <FS_CAT>-JUST    = 'C'.
*      WHEN 'ICO_ST_FISICO'.
*        <FS_CAT>-HOTSPOT = ABAP_TRUE.
*        <FS_CAT>-ICON    = ABAP_TRUE.
*        <FS_CAT>-JUST    = 'C'.
*      WHEN 'ICO_ST_ARMAZEM'.
*        <FS_CAT>-HOTSPOT = ABAP_TRUE.
*        <FS_CAT>-ICON    = ABAP_TRUE.
*        <FS_CAT>-JUST    = 'C'.
*      WHEN 'DOCNUM_NFE'.
*        <FS_CAT>-HOTSPOT = ABAP_TRUE.
*      WHEN 'EBELN' OR 'BELNR' OR 'VBELN' OR 'TKNUM' OR 'FKNUM' OR 'MBLNR' OR 'MJAHR'.
*        <FS_CAT>-HOTSPOT = ABAP_TRUE.
*      WHEN 'GJAHR'.
*        <FS_CAT>-OUTPUTLEN = 05.
    ENDCASE.
*
    IF <FS_CAT>-FIELDNAME <> 'ICO_CARGA'.
      <FS_CAT>-COL_POS = LC_COL_POS.
      ADD 1 TO LC_COL_POS.
    ENDIF.

  ENDLOOP.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_HINTS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_HINTS .

  DATA: IT_DD07V        TYPE TABLE OF DD07V WITH HEADER LINE,
        WA_EXCEPT_QINFO LIKE LINE OF IT_EXCEPT_QINFO,
        LC_TP_STATUS    TYPE ZDE_STATUS_CARGA,
        LC_ICO_CARGA    TYPE CHAR04.
*
  CLEAR: IT_EXCEPT_QINFO[].
*
  "Informações Documento
  CALL FUNCTION 'GET_DOMAIN_VALUES'
    EXPORTING
      DOMNAME    = 'ZDM_STATUS_CARGA'
    TABLES
      VALUES_TAB = IT_DD07V.

  LOOP AT IT_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
    WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
    LC_TP_STATUS = CONV #( IT_DD07V-DOMVALUE_L ).
    PERFORM SETA_ICONE_STATUS USING LC_TP_STATUS CHANGING LC_ICO_CARGA.
    WA_EXCEPT_QINFO-VALUE = LC_ICO_CARGA.
    WA_EXCEPT_QINFO-TEXT  = IT_DD07V-DDTEXT.
    WA_EXCEPT_QINFO-TABNAME   = 'ZDE_ZSDT0001CG_ALV'.
    WA_EXCEPT_QINFO-FIELDNAME = 'ICO_CARGA'.
    APPEND WA_EXCEPT_QINFO TO IT_EXCEPT_QINFO.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_GS_VARIANT .

  GS_VARIANT-REPORT      = SY-REPID.
  GS_VARIANT-HANDLE      = '0200'.
  GS_VARIANT-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT-USERNAME    = ABAP_FALSE.
  GS_VARIANT-VARIANT     = ABAP_FALSE.
  GS_VARIANT-TEXT        = ABAP_FALSE.
  GS_VARIANT-DEPENDVARS  = ABAP_FALSE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  GET_SCROLL_INFO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SCROLL_INFO INPUT.

  IF CTL_ALV IS NOT INITIAL.
    CALL METHOD CTL_ALV->GET_SCROLL_INFO_VIA_ID
      IMPORTING
        ES_COL_INFO = GS_SCROLL_COL
        ES_ROW_NO   = GS_SCROLL_ROW.
  ENDIF.

  IF CTL_ALV2 IS NOT INITIAL.
    CALL METHOD CTL_ALV2->GET_SCROLL_INFO_VIA_ID
      IMPORTING
        ES_COL_INFO = GS_SCROLL_COL_2
        ES_ROW_NO   = GS_SCROLL_ROW_2.
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  GET_SELECTED_ROWS  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SELECTED_ROWS INPUT.

  IF CTL_ALV IS NOT INITIAL.
    CLEAR IT_SELECTED_ROWS.
    CALL METHOD CTL_ALV->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = IT_SELECTED_ROWS.

    CLEAR: IT_RETORNO_ALV_SEL[], IT_RETORNO_ALV_SEL.

    LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
      READ TABLE IT_RETORNO_ALV INTO DATA(WA_RETORNO) INDEX WA_SELECTED_ROWS-INDEX.
      APPEND WA_RETORNO TO IT_RETORNO_ALV_SEL.
    ENDLOOP.
  ENDIF.

  IF CTL_ALV2 IS NOT INITIAL.
    CLEAR IT_SELECTED_ROWS.
    CALL METHOD CTL_ALV2->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = IT_SELECTED_ROWS.

    CLEAR: IT_ROMANEIO_ENTRADA_SEL[], IT_ROMANEIO_ENTRADA_SEL.

    LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
      READ TABLE IT_ROMANEIO_ENTRADA INTO DATA(WA_ROMANEIO) INDEX WA_SELECTED_ROWS-INDEX.
      APPEND WA_ROMANEIO TO IT_ROMANEIO_ENTRADA_SEL.
    ENDLOOP.
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  ATUALIZA_TELA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ATUALIZA_TELA USING CK_AJUSTA_TITULO TYPE CHAR01.

  DATA: GS_ALV_REFRES_COND TYPE LVC_S_STBL.

  IF DG_SPLITTER IS NOT INITIAL.
    DG_SPLITTER->GET_ROWS( IMPORTING RESULT = DATA(QTD_LINHAS) ).
    IF QTD_LINHAS NE QT_ROWS_SPLITTER.
      PERFORM LIMPA_TELA_0200.
      EXIT.
    ENDIF.
  ENDIF.

  IF CTL_ALV IS NOT INITIAL.
    GS_ALV_REFRES_COND-ROW = ABAP_TRUE.
    GS_ALV_REFRES_COND-COL = ABAP_TRUE.

    CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE      = GS_ALV_REFRES_COND
        I_SOFT_REFRESH = ABAP_TRUE.
  ENDIF.

  IF CTL_ALV2 IS NOT INITIAL.

    GS_ALV_REFRES_COND-ROW = ABAP_TRUE.
    GS_ALV_REFRES_COND-COL = ABAP_TRUE.

    CALL METHOD CTL_ALV2->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE      = GS_ALV_REFRES_COND
        I_SOFT_REFRESH = ABAP_TRUE.

    IF CK_AJUSTA_TITULO EQ ABAP_TRUE.
      CONCATENATE 'Ticket:'  WA_CARGA_ROMANEIO-NR_TICKET
                  'Placa:'   WA_CARGA_ROMANEIO-DS_PLACA_TRATOR
                  'Produto:' WA_CARGA_ROMANEIO-DS_PRODUTO
             INTO GS_LAYOUT_2-GRID_TITLE SEPARATED BY SPACE.

      GS_LAYOUT_2-SEL_MODE   = 'A'.
      GS_LAYOUT_2-INFO_FNAME = 'ROWCOLOR'.
      GS_LAYOUT_2-STYLEFNAME = 'STYLE'.
      GS_LAYOUT_2-CTAB_FNAME = 'COLOR_CELL'.
      GS_LAYOUT_2-ZEBRA      = ABAP_FALSE.

      CTL_ALV2->SET_FRONTEND_LAYOUT( IS_LAYOUT = GS_LAYOUT_2 ).
    ENDIF.

  ENDIF.

  PERFORM ATUALIZA_TREE USING WA_CARGA_ROMANEIO-ID_CARGA.

  CALL METHOD CL_GUI_CFW=>FLUSH.

ENDFORM.                    " ATUALIZA_TELA

*&---------------------------------------------------------------------*
*&      Form  CARREGA_SAIDA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CARREGA_SAIDA .

  LOOP AT IT_RETORNO INTO DATA(WA_RETORNO).
    MOVE-CORRESPONDING WA_RETORNO TO IT_RETORNO_ALV.
    PERFORM SETA_ICONE_STATUS USING IT_RETORNO_ALV-TP_STATUS CHANGING IT_RETORNO_ALV-ICO_CARGA.
    APPEND IT_RETORNO_ALV.
  ENDLOOP.

ENDFORM.

CLASS LCL_EVENT_HANDLER IMPLEMENTATION.
  METHOD HANDLE_HOTSPOT_CLICK.
    PERFORM HANDLE_HOTSPOT_CLICK USING ES_ROW_NO-ROW_ID E_COLUMN_ID-FIELDNAME.
  ENDMETHOD.                    "handle_hotspot_click

  METHOD HANDLE_DOUBLE_CLICK.
    PERFORM HANDLE_DOUBLE_CLICK USING E_ROW.
  ENDMETHOD.                    "HANDLE_DOUBLE_CLICK

ENDCLASS.                    "lcl_event_handler IMPLEMENTATION

CLASS LCL_APPLICATION IMPLEMENTATION.
  METHOD HANDLE_LINK_CLICK.
    PERFORM  MOSTRA_INFO_NODE_ITEM USING NODE_KEY ITEM_NAME.
  ENDMETHOD.

  METHOD HANDLE_DOUBLE_CLICK.
    PERFORM MOSTRA_INFO_NODE_CLICK USING NODE_KEY.
  ENDMETHOD.

ENDCLASS.
*&---------------------------------------------------------------------*
*&      Form  HANDLE_HOTSPOT_CLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM HANDLE_HOTSPOT_CLICK
         USING VALUE(ROW_ID)    LIKE LVC_S_ROID-ROW_ID
               VALUE(FIELDNAME) LIKE LVC_S_COL-FIELDNAME.

  READ TABLE IT_RETORNO_ALV INDEX ROW_ID ASSIGNING FIELD-SYMBOL(<FS_RETORNO>).

  CASE FIELDNAME.
    WHEN 'ICO_CARGA'.
      PERFORM MOSTRAR_CARGA USING <FS_RETORNO>-ID_CARGA CHANGING <FS_RETORNO>.

      IF CK_MOSTRAR_ENTRADA EQ ABAP_TRUE.
        PERFORM CARREGAR_ENTRADA USING <FS_RETORNO>.
        QT_ROWS_SPLITTER  = 2.
      ENDIF.

      PERFORM ATUALIZA_TELA USING ABAP_TRUE.
      LEAVE TO SCREEN 0200.
  ENDCASE.

ENDFORM.                    " HANDLE_HOTSPOT_CLICK

*&---------------------------------------------------------------------*
*&      Form  HANDLE_DOUBLE_CLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_E_ROW  text
*----------------------------------------------------------------------*
FORM HANDLE_DOUBLE_CLICK  USING P_ROW TYPE LVC_S_ROW.

  DATA: LC_ROW TYPE LVC_T_ROW.

  CHECK P_ROW-INDEX IS NOT INITIAL.

  IF P_ROW-ROWTYPE IS INITIAL.

    APPEND P_ROW TO LC_ROW.

    CALL METHOD CTL_ALV->SET_SELECTED_ROWS
      EXPORTING
        IT_INDEX_ROWS = LC_ROW.

    READ TABLE IT_RETORNO_ALV INDEX P_ROW-INDEX ASSIGNING FIELD-SYMBOL(<FS_RETORNO>).

    CK_MOSTRAR_ENTRADA = ABAP_TRUE.
    PERFORM CARREGAR_ENTRADA USING <FS_RETORNO>.
    QT_ROWS_SPLITTER   = 2.
    PERFORM ATUALIZA_TELA USING ABAP_TRUE.
    LEAVE TO SCREEN 0200.

  ENDIF.

ENDFORM.                    " HANDLE_DOUBLE_CLICK

*----------------------------------------------------------------------*
*       CLASS LCL_ALV_TOOLBAR IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_ALV_TOOLBAR IMPLEMENTATION.

  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT OBJ_TOOLBARMANAGER
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.

  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    DATA: TY_TOOLBAR   TYPE STB_BUTTON.
*    "Separador
    TY_TOOLBAR-BUTN_TYPE = 3.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

*    "Marcar Todos os Documentos
*    TY_TOOLBAR-ICON      = ICON_USED_RELATION.
*    TY_TOOLBAR-FUNCTION  = 'ENTRADA'.
*    TY_TOOLBAR-QUICKINFO = TEXT-006.
*    TY_TOOLBAR-TEXT      = TEXT-006.
*    TY_TOOLBAR-BUTN_TYPE = 0.
*    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*    CLEAR TY_TOOLBAR.

    "Editar Nota Fiscal
    TY_TOOLBAR-ICON      = ICON_MAPPED_RELATION.
    TY_TOOLBAR-FUNCTION  = 'SAIDA'.
    TY_TOOLBAR-QUICKINFO = TEXT-007.
    TY_TOOLBAR-TEXT      = TEXT-007.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR: TY_TOOLBAR.

    CASE PTIPCA.
      WHEN ZIF_CARGA=>ST_TP_CARGA_ENTRADA_FOB.

        TY_TOOLBAR-ICON      = ICON_SUBMIT.
        TY_TOOLBAR-FUNCTION  = 'AUTOMATICO'.
        TY_TOOLBAR-QUICKINFO = TEXT-037.
        TY_TOOLBAR-TEXT      = TEXT-036.
        TY_TOOLBAR-BUTN_TYPE = 0.
        APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
        CLEAR: TY_TOOLBAR.

      WHEN ZIF_CARGA=>ST_TP_CARGA_SAIDA_OPUS.
      WHEN ZIF_CARGA=>ST_TP_CARGA_SAIDA_ENT_FOB.

        TY_TOOLBAR-ICON      = ICON_SUBMIT.
        TY_TOOLBAR-FUNCTION  = 'AUTOMATICO'.
        TY_TOOLBAR-QUICKINFO = TEXT-037.
        TY_TOOLBAR-TEXT      = TEXT-036.
        TY_TOOLBAR-BUTN_TYPE = 0.
        APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
        CLEAR: TY_TOOLBAR.

    ENDCASE.

    CALL METHOD OBJ_TOOLBARMANAGER->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    DATA: ET_INDEX_ROWS	TYPE LVC_T_ROW.

    CALL METHOD CTL_ALV->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = ET_INDEX_ROWS.

    CLEAR: IT_RETORNO_ALV_SEL[].

    IF ET_INDEX_ROWS[] IS INITIAL.
      READ TABLE IT_RETORNO_ALV INTO DATA(WA_RETORNO_ALV) INDEX 1.
      CHECK SY-SUBRC IS INITIAL.
      APPEND WA_RETORNO_ALV TO IT_RETORNO_ALV_SEL.
    ELSE.
      LOOP AT ET_INDEX_ROWS INTO DATA(WA_INDEX_ROWS).
        READ TABLE IT_RETORNO_ALV INTO WA_RETORNO_ALV INDEX WA_INDEX_ROWS-INDEX.
        APPEND WA_RETORNO_ALV TO IT_RETORNO_ALV_SEL.
      ENDLOOP.
    ENDIF.

    CASE E_UCOMM.
      WHEN 'ENTRADA'.

        PERFORM LIMPA_TELA_0200.
        IF IT_RETORNO_ALV_SEL[] IS INITIAL.
          CK_MOSTRAR_ENTRADA = ABAP_FALSE.
          QT_ROWS_SPLITTER   = 1.
        ELSE.
          CK_MOSTRAR_ENTRADA = ABAP_TRUE.
          READ TABLE IT_RETORNO_ALV_SEL INDEX 1 INTO DATA(WA_RETORNO_ALV_SEL).

          LOOP AT IT_RETORNO_ALV ASSIGNING FIELD-SYMBOL(<FS_RETORNO>).
            CLEAR: <FS_RETORNO>-LINE_COLOR.
          ENDLOOP.

          READ TABLE IT_RETORNO_ALV ASSIGNING <FS_RETORNO> WITH KEY ID_CARGA = WA_RETORNO_ALV_SEL-ID_CARGA.
          IF <FS_RETORNO> IS ASSIGNED.
            <FS_RETORNO>-LINE_COLOR = CS_LINE_COLOR_SELECIONADA.
          ENDIF.

          PERFORM CARREGAR_ENTRADA USING WA_RETORNO_ALV_SEL.
          QT_ROWS_SPLITTER   = 2.
        ENDIF.
        LEAVE TO SCREEN 0200.

      WHEN 'SAIDA'.

        PERFORM CHAMAR_SAIDA USING WA_RETORNO_ALV.

      WHEN 'AUTOMATICO'.
        CASE PTIPCA.
          WHEN ZIF_CARGA=>ST_TP_CARGA_ENTRADA_FOB.
            PERFORM CHAMAR_SAIDA_AUTOMATICA USING WA_RETORNO_ALV ABAP_TRUE.
          WHEN ZIF_CARGA=>ST_TP_CARGA_SAIDA_OPUS.
          WHEN ZIF_CARGA=>ST_TP_CARGA_SAIDA_ENT_FOB.
            PERFORM CHAMAR_SAIDA_AUTOMATICA USING WA_RETORNO_ALV ABAP_FALSE.
        ENDCASE.
    ENDCASE.
  ENDMETHOD. "zm_handle_user_command

ENDCLASS.                    "LCL_ALV_TOOLBAR_N55 IMPLEMENTATION

*&---------------------------------------------------------------------*
*&      Form  CARREGAR_ENTRADA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_RETORNO_ALV_SEL  text
*----------------------------------------------------------------------*
FORM CARREGAR_ENTRADA  USING P_CARGA TYPE TY_ITENS_ALV.

  DATA: OBJ_CARGA TYPE REF TO ZIF_CARGA.

  CLEAR: IT_ROMANEIO_ENTRADA[]    , IT_ROMANEIO_ENTRADA,
         IT_ROMANEIO_ENTRADA_SEL[], IT_ROMANEIO_ENTRADA_SEL.

  CASE PTIPCA.
    WHEN ZIF_CARGA=>ST_TP_CARGA_ENTRADA_FOB.
      CREATE OBJECT OBJ_CARGA TYPE ZCL_CARGA_RECEBIMENTO.
    WHEN ZIF_CARGA=>ST_TP_CARGA_SAIDA_OPUS.
      CREATE OBJECT OBJ_CARGA TYPE ZCL_CARGA_SAIDA_OPUS.
    WHEN ZIF_CARGA=>ST_TP_CARGA_SAIDA_ENT_FOB.
      CREATE OBJECT OBJ_CARGA TYPE ZCL_CARGA_SAIDA.
  ENDCASE.

  IF GB_ID_CARGA NE P_CARGA-ID_CARGA.
    CLEAR: GB_ID_CARGA, GB_ST_CARGA.
    PERFORM TIME USING ABAP_FALSE.
  ENDIF.

  IF GB_ID_CARGA_EST NE P_CARGA-ID_CARGA.
    CLEAR: GB_ID_CARGA_EST, GB_ST_CARGA_EST.
    PERFORM TIME_ESTORNO USING ABAP_FALSE.
  ENDIF.

  TRY .
      OBJ_CARGA->GET_ROMANEIO_ENTRADA( EXPORTING I_ID_CARGA  = P_CARGA-ID_CARGA IMPORTING E_ROMANEIOS = DATA(ROMANEIOS_ENTRADA) ).
      OBJ_CARGA->GET_ROMANEIO_SAIDA( EXPORTING I_ID_CARGA  = P_CARGA-ID_CARGA IMPORTING E_ROMANEIOS = DATA(ROMANEIOS_SAIDA) ).
    CATCH ZCX_CARGA.
  ENDTRY.

  LOOP AT ROMANEIOS_ENTRADA INTO DATA(WA_ENTRADA).
    APPEND WA_ENTRADA TO IT_ROMANEIO_ENTRADA.
  ENDLOOP.

  LOOP AT ROMANEIOS_SAIDA INTO WA_ENTRADA.
    APPEND WA_ENTRADA TO IT_ROMANEIO_ENTRADA.
  ENDLOOP.

  WA_CARGA_ROMANEIO = P_CARGA.

  LOOP AT IT_RETORNO_ALV ASSIGNING FIELD-SYMBOL(<FS_RETORNO>).
    CLEAR: <FS_RETORNO>-LINE_COLOR.
  ENDLOOP.

  READ TABLE IT_RETORNO_ALV WITH KEY ID_CARGA = P_CARGA-ID_CARGA ASSIGNING <FS_RETORNO>.
  IF <FS_RETORNO> IS ASSIGNED.
    <FS_RETORNO>-LINE_COLOR = CS_LINE_COLOR_SELECIONADA.
  ENDIF.

  CLEAR: OBJ_CARGA.

ENDFORM.



*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG_2 .

  DATA: LC_COL_POS  TYPE LVC_COLPOS.

  FIELD-SYMBOLS: <FS_CAT> TYPE LVC_S_FCAT.

  CLEAR: IT_FIELDCATALOG_2[].

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZSDT0001'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG_2.

*  WA_FIELDCATALOG-FIELDNAME = 'ICO_CARGA'.
*  WA_FIELDCATALOG-DATATYPE  = 'CHAR'.
*  WA_FIELDCATALOG-INTTYPE   = 'C'.
*  WA_FIELDCATALOG-INTLEN    = '000004'.
*  WA_FIELDCATALOG-LOWERCASE = 'X'.
*  WA_FIELDCATALOG-DOMNAME   = 'CHAR04'.
*  WA_FIELDCATALOG-SCRTEXT_L = TEXT-005.
*  WA_FIELDCATALOG-SCRTEXT_M = TEXT-005.
*  WA_FIELDCATALOG-SCRTEXT_S = TEXT-005.
*  APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

*  LOOP AT IT_FIELDCATALOG ASSIGNING <FS_CAT>.
*    <FS_CAT>-TABNAME = 'ZDE_ZSDT0001CG_ALV'.
*
*    CASE <FS_CAT>-FIELDNAME.
*      WHEN 'ICO_CARGA'.
*        <FS_CAT>-HOTSPOT = ABAP_TRUE.
*        <FS_CAT>-ICON    = ABAP_TRUE.
*        <FS_CAT>-JUST    = 'C'.
*        <FS_CAT>-COL_POS = 1.
**      WHEN 'ICO_ST_FISCAL'.
**        <FS_CAT>-HOTSPOT = ABAP_TRUE.
**        <FS_CAT>-ICON    = ABAP_TRUE.
**        <FS_CAT>-JUST    = 'C'.
**      WHEN 'ICO_ST_FISICO'.
**        <FS_CAT>-HOTSPOT = ABAP_TRUE.
**        <FS_CAT>-ICON    = ABAP_TRUE.
**        <FS_CAT>-JUST    = 'C'.
**      WHEN 'ICO_ST_ARMAZEM'.
**        <FS_CAT>-HOTSPOT = ABAP_TRUE.
**        <FS_CAT>-ICON    = ABAP_TRUE.
**        <FS_CAT>-JUST    = 'C'.
**      WHEN 'DOCNUM_NFE'.
**        <FS_CAT>-HOTSPOT = ABAP_TRUE.
**      WHEN 'EBELN' OR 'BELNR' OR 'VBELN' OR 'TKNUM' OR 'FKNUM' OR 'MBLNR' OR 'MJAHR'.
**        <FS_CAT>-HOTSPOT = ABAP_TRUE.
**      WHEN 'GJAHR'.
**        <FS_CAT>-OUTPUTLEN = 05.
*    ENDCASE.
**
*    IF <FS_CAT>-FIELDNAME <> 'ICO_CARGA'.
*      <FS_CAT>-COL_POS = LC_COL_POS.
*      ADD 1 TO LC_COL_POS.
*    ENDIF.
*
*  ENDLOOP.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_HINTS_2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_HINTS_2 .

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_GS_VARIANT_2 .

  GS_VARIANT_2-REPORT      = SY-REPID.
  GS_VARIANT_2-HANDLE      = '0201'.
  GS_VARIANT_2-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT_2-USERNAME    = ABAP_FALSE.
  GS_VARIANT_2-VARIANT     = ABAP_FALSE.
  GS_VARIANT_2-TEXT        = ABAP_FALSE.
  GS_VARIANT_2-DEPENDVARS  = ABAP_FALSE.

ENDFORM.

*----------------------------------------------------------------------*
*       CLASS LCL_ALV_TOOLBAR_2 IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_ALV_TOOLBAR_2 IMPLEMENTATION.

  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT OBJ_TOOLBARMANAGER_2
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.

  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    DATA: TY_TOOLBAR   TYPE STB_BUTTON.
*    "Separador
    TY_TOOLBAR-BUTN_TYPE = 3.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

*    "Marcar Todos os Documentos
*    TY_TOOLBAR-ICON      = ICON_USED_RELATION.
*    TY_TOOLBAR-FUNCTION  = 'GROMANEIO'.
*    TY_TOOLBAR-QUICKINFO = TEXT-008.
*    TY_TOOLBAR-TEXT      = TEXT-008.
*    TY_TOOLBAR-BUTN_TYPE = 0.
*    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*    CLEAR TY_TOOLBAR.

    "Atualizar
    TY_TOOLBAR-ICON      = ICON_REFRESH.
    TY_TOOLBAR-FUNCTION  = 'ATUALIZAR'.
    TY_TOOLBAR-QUICKINFO = TEXT-011.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR: TY_TOOLBAR.

    "Mensagens de Interface
    TY_TOOLBAR-ICON      = ICON_DISPLAY_NOTE.
    TY_TOOLBAR-FUNCTION  = 'MSGINTERF'.
    TY_TOOLBAR-QUICKINFO = TEXT-013.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR: TY_TOOLBAR.

*    "Criar Entrada
*    TY_TOOLBAR-ICON      = ICON_MAPPED_RELATION.
*    TY_TOOLBAR-FUNCTION  = 'GESTOQUE'.
*    TY_TOOLBAR-QUICKINFO = TEXT-009.
*    TY_TOOLBAR-TEXT      = TEXT-009.
*    TY_TOOLBAR-BUTN_TYPE = 0.
*    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*    CLEAR: TY_TOOLBAR.
*
**    "Separador
*    TY_TOOLBAR-BUTN_TYPE = 3.
*    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*    CLEAR TY_TOOLBAR.
*
*    "Estornar Entrada
*    TY_TOOLBAR-ICON      = ICON_WF_WORKITEM_ERROR.
*    TY_TOOLBAR-FUNCTION  = 'GESTORNA'.
*    TY_TOOLBAR-QUICKINFO = TEXT-012.
*    TY_TOOLBAR-TEXT      = TEXT-012.
*    TY_TOOLBAR-BUTN_TYPE = 0.
*    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*    CLEAR: TY_TOOLBAR.
*
*    IF GB_ST_CARGA EQ 'W' OR GB_ST_CARGA_EST EQ 'W'.
**    "Separador
*      TY_TOOLBAR-BUTN_TYPE = 3.
*      APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*      CLEAR TY_TOOLBAR.
*      "Estornar Entrada
*      TY_TOOLBAR-ICON      = ICON_ACTIVITY.
*      TY_TOOLBAR-QUICKINFO = TEXT-019.
*      TY_TOOLBAR-BUTN_TYPE = 0.
*      APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*      CLEAR: TY_TOOLBAR.
*    ENDIF.

    CALL METHOD OBJ_TOOLBARMANAGER_2->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    DATA: LC_ST_CARGA     TYPE CHAR01,
          LC_ST_CARGA_EST TYPE CHAR01.

    DATA: ET_INDEX_ROWS	TYPE LVC_T_ROW.

    CALL METHOD CTL_ALV2->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = ET_INDEX_ROWS.

    CLEAR: IT_ROMANEIO_ENTRADA_SEL[].

    LOOP AT ET_INDEX_ROWS INTO DATA(WA_INDEX_ROWS).
      READ TABLE IT_ROMANEIO_ENTRADA INTO DATA(WA_ROMANEIO) INDEX WA_INDEX_ROWS-INDEX.
      APPEND WA_ROMANEIO TO IT_ROMANEIO_ENTRADA_SEL.
    ENDLOOP.

    CASE E_UCOMM.
      WHEN 'MSGINTERF'.
        PERFORM MOSTRA_MSG_INTERFACE USING WA_CARGA_ROMANEIO-ID_CARGA.
      WHEN 'GESTOQUE'.
        IF GB_ST_CARGA EQ 'E'.
          PERFORM MOSTRA_MSG_INTERFACE USING WA_CARGA_ROMANEIO-ID_CARGA.
          CLEAR: GB_ST_CARGA.
        ELSE.

          LC_ST_CARGA = GB_ST_CARGA.

          CLEAR: GB_ST_CARGA.
          READ TABLE IT_RETORNO_ALV WITH KEY ID_CARGA = WA_CARGA_ROMANEIO-ID_CARGA ASSIGNING FIELD-SYMBOL(<FS_CARGA_ENTRADA>).
          PERFORM GERAR_ENTRADA_ESTOQUE USING WA_CARGA_ROMANEIO-ID_CARGA CHANGING <FS_CARGA_ENTRADA>.
          PERFORM CARREGAR_ENTRADA USING WA_CARGA_ROMANEIO.
          PERFORM ATUALIZA_TELA USING ABAP_FALSE.

          IF LC_ST_CARGA IS INITIAL.
            LEAVE TO SCREEN 0200.
          ELSE.
            CLEAR: GB_ST_CARGA.
          ENDIF.

        ENDIF.
      WHEN 'ATUALIZAR'.
        PERFORM CARREGAR_ENTRADA USING WA_CARGA_ROMANEIO.
        PERFORM ATUALIZA_TELA USING ABAP_FALSE.
        LEAVE TO SCREEN 0200.
      WHEN 'GESTORNA'.
        IF GB_ST_CARGA_EST EQ 'E'.
          PERFORM MOSTRA_MSG_INTERFACE USING WA_CARGA_ROMANEIO-ID_CARGA.
          CLEAR: GB_ST_CARGA_EST.
        ELSE.

          LC_ST_CARGA_EST = GB_ST_CARGA_EST.

          READ TABLE IT_RETORNO_ALV WITH KEY ID_CARGA = WA_CARGA_ROMANEIO-ID_CARGA ASSIGNING <FS_CARGA_ENTRADA>.
          PERFORM ESTORNAR_ENTRADA_ESTOQUE USING WA_CARGA_ROMANEIO-ID_CARGA CHANGING <FS_CARGA_ENTRADA>.
          PERFORM CARREGAR_ENTRADA USING WA_CARGA_ROMANEIO.
          PERFORM ATUALIZA_TELA USING ABAP_FALSE.
          IF LC_ST_CARGA_EST IS INITIAL.
            LEAVE TO SCREEN 0200.
          ELSE.
            CLEAR: GB_ST_CARGA_EST.
          ENDIF.

        ENDIF.
    ENDCASE.
  ENDMETHOD. "zm_handle_user_command

ENDCLASS.                    "LCL_ALV_TOOLBAR_N55 IMPLEMENTATION

*&---------------------------------------------------------------------*
*&      Form  ATUALIZA_TREE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ATUALIZA_TREE USING P_ID_CARGA TYPE ZDE_ID_CARGA.

  DATA: OBJ_CARGA         TYPE REF TO ZIF_CARGA,
        OBJ_PEDAFIO_REPOM TYPE REF TO ZCL_REPOM_VIAGEM_VPR,
        WA_REGISTRO       TYPE ZLEST0123,
        NODE              TYPE TREEV_NODE,
        ITEM              TYPE MTREEITM,
        QTD_ITENS         TYPE I,
        IT_NODE           TYPE TREEV_NKS,
        ST_CIOT           TYPE RANGE OF ZST_CIOT,
        LC_TEXTO          TYPE STRING.

  CHECK TREE IS NOT INITIAL.

  TREE->DELETE_ALL_NODES( ).

  CLEAR: NODE_TABLE[], ITEM_TABLE[], IT_TREE_INFO[], IT_TREE_INFO.

  CASE PTIPCA.
    WHEN ZIF_CARGA=>ST_TP_CARGA_ENTRADA_FOB.
      CREATE OBJECT OBJ_CARGA TYPE ZCL_CARGA_RECEBIMENTO.
    WHEN ZIF_CARGA=>ST_TP_CARGA_SAIDA_OPUS.
      CREATE OBJECT OBJ_CARGA TYPE ZCL_CARGA_SAIDA_OPUS.
    WHEN ZIF_CARGA=>ST_TP_CARGA_SAIDA_ENT_FOB.
      CREATE OBJECT OBJ_CARGA TYPE ZCL_CARGA_SAIDA.
  ENDCASE.

  TRY .
      OBJ_CARGA->SET_REGISTRO( EXPORTING I_ID_CARGA = P_ID_CARGA  I_NO_ENQUEUE = ABAP_TRUE ).
      OBJ_CARGA->GET_ROMANEIO_ENTRADA( EXPORTING I_ID_CARGA  = P_ID_CARGA IMPORTING E_ROMANEIOS = DATA(ROMANEIOS) ).
      OBJ_CARGA->GET_INFO_ALV_APRESENTACAO( IMPORTING E_APRESENTACAO = DATA(LC_CARGA) ).


      QTD_ITENS = 0.

      IF LC_CARGA-CARGA-CK_FRETE_ENTRADA EQ ABAP_TRUE.

        LOOP AT LC_CARGA-NOTAS INTO DATA(WA_NOTA_ENTRADA).

          ADD 1 TO QTD_ITENS.
          NODE-NODE_KEY   = QTD_ITENS.
          CONDENSE NODE-NODE_KEY NO-GAPS.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = NODE-NODE_KEY
            IMPORTING
              OUTPUT = NODE-NODE_KEY.

          NODE-HIDDEN     = ' '. " The node is visible,
          NODE-DISABLED   = ' '. " selectable,
          NODE-ISFOLDER   = 'X'. " a folder.
          NODE-EXPANDER   = ABAP_TRUE.

          CLEAR ITEM.
          ITEM-NODE_KEY  = NODE-NODE_KEY.
          ITEM-ITEM_NAME = C_TREE-COLUMN1.
          ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_FONT_DEFAULT. " Text Item
          ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
          ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_INTENSIFIED.
          ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
          CONCATENATE WA_NOTA_ENTRADA-ID_FORNECEDOR WA_NOTA_ENTRADA-NR_NOTA INTO ITEM-TEXT SEPARATED BY SPACE.
          CONCATENATE ITEM-TEXT '-' WA_NOTA_ENTRADA-NM_SERIE INTO ITEM-TEXT.
          CONCATENATE 'Frete da Entrada' ITEM-TEXT INTO ITEM-TEXT SEPARATED BY SPACE.
          APPEND NODE-NODE_KEY TO IT_NODE.

          DATA(LC_AUTORIZADO) = ABAP_TRUE.
          IF WA_NOTA_ENTRADA-FTE_DOCNUM IS NOT INITIAL.
            TRY .
                ZCL_DOC_ELETRONICO=>ZIF_DOC_ELETRONICO~GET_INSTANCE( I_DOCNUM = WA_NOTA_ENTRADA-FTE_DOCNUM
                  )->SET_REGISTRO(
                  EXPORTING
                    I_DOCNUM           = WA_NOTA_ENTRADA-FTE_DOCNUM    " Nº documento
                    I_SEM_BLOQUEIO     = ABAP_TRUE
                  )->GET_CK_AUTORIZADO_USO(
                  ).
              CATCH ZCX_DOC_ELETRONICO.    " .
                LC_AUTORIZADO = ABAP_FALSE.
            ENDTRY.
          ENDIF.

          IF WA_NOTA_ENTRADA-FTE_DOCNUM IS INITIAL OR LC_AUTORIZADO EQ ABAP_FALSE.
            NODE-N_IMAGE    = ICON_IMPORT_TRANSPORT_REQUEST.
            NODE-EXP_IMAGE  = ICON_IMPORT_TRANSPORT_REQUEST.
          ELSE.
            NODE-N_IMAGE    = ICON_IMPORT_ALL_REQUESTS.
            NODE-EXP_IMAGE  = ICON_IMPORT_ALL_REQUESTS.
          ENDIF.
          APPEND NODE TO NODE_TABLE.
          APPEND ITEM TO ITEM_TABLE.

          IF WA_NOTA_ENTRADA-PO_NUMBER IS INITIAL.
            CONTINUE.
          ENDIF.

          "'FPO -> "Pedido de Compra
          PERFORM ADD_DOCUMENTO_TREE USING 'F' '' WA_NOTA_ENTRADA-PO_NUMBER WA_NOTA_ENTRADA-PO_ITEM  '' 'FPO' NODE ITEM '' WA_NOTA_ENTRADA-AV_VBELN CHANGING QTD_ITENS.

          IF WA_NOTA_ENTRADA-AV_VBELN IS INITIAL.
            CONTINUE.
          ENDIF.

          "'FAV -> "Avido de Recebimento
          PERFORM ADD_DOCUMENTO_TREE USING 'F' '' WA_NOTA_ENTRADA-AV_VBELN  '' '' 'FAV' NODE ITEM '' WA_NOTA_ENTRADA-AV_VBELN CHANGING QTD_ITENS.

          IF WA_NOTA_ENTRADA-FTE_TKNUM IS INITIAL.
            CONTINUE.
          ENDIF.
          PERFORM ADD_DOCUMENTO_TREE USING 'F' '' WA_NOTA_ENTRADA-FTE_TKNUM   ''    '' 'FDT' NODE ITEM '' WA_NOTA_ENTRADA-AV_VBELN CHANGING QTD_ITENS.

          CALL METHOD ZCL_REPOM_VIAGEM_VPR=>GET_ID_PROC_CLIENTE_VT
            EXPORTING
              I_TKNUM           = WA_NOTA_ENTRADA-FTE_TKNUM
            RECEIVING
              E_ID_PROC_CLIENTE = DATA(LC_ID_PROC_CLIENTE)
            EXCEPTIONS
              NAO_ENCONTRADO    = 1
              OTHERS            = 2.

          IF SY-SUBRC IS INITIAL.
            CREATE OBJECT OBJ_PEDAFIO_REPOM
              EXPORTING
                I_ID_PROC_CLIENTE = LC_ID_PROC_CLIENTE.

            OBJ_PEDAFIO_REPOM->ZIF_CADASTRO~GET_REGISTRO( IMPORTING E_REGISTRO = WA_REGISTRO ).
            CLEAR: OBJ_PEDAFIO_REPOM.
            PERFORM ADD_DOCUMENTO_TREE USING 'F' '' WA_REGISTRO-ID_VIAGEM_CODIGO  '' WA_REGISTRO-ID_PROC_CLIENTE 'FP1' NODE ITEM '' WA_NOTA_ENTRADA-AV_VBELN CHANGING QTD_ITENS.
          ENDIF.

          IF WA_NOTA_ENTRADA-FTE_FKNUM IS INITIAL.
            CONTINUE.
          ENDIF.

          PERFORM ADD_DOCUMENTO_TREE USING 'F' '' WA_NOTA_ENTRADA-FTE_FKNUM  ''    '' 'FDC' NODE ITEM '' WA_NOTA_ENTRADA-AV_VBELN CHANGING QTD_ITENS.

          IF WA_NOTA_ENTRADA-FTE_VBELN_VA IS INITIAL.
            CONTINUE.
          ENDIF.
          PERFORM ADD_DOCUMENTO_TREE USING 'F' '' WA_NOTA_ENTRADA-FTE_VBELN_VA  ''    '' 'FOT' NODE ITEM '' WA_NOTA_ENTRADA-AV_VBELN CHANGING QTD_ITENS.

          IF WA_NOTA_ENTRADA-FTE_VBELN_VF IS INITIAL.
            CONTINUE.
          ENDIF.
          PERFORM ADD_DOCUMENTO_TREE USING 'F' '' WA_NOTA_ENTRADA-FTE_VBELN_VF ''    '' 'FFT' NODE ITEM '' WA_NOTA_ENTRADA-AV_VBELN CHANGING QTD_ITENS.

          IF WA_NOTA_ENTRADA-FTE_DOCNUM IS INITIAL.
            CONTINUE.
          ENDIF.
          PERFORM ADD_DOCUMENTO_TREE USING 'F' '' WA_NOTA_ENTRADA-FTE_DOCNUM ''    '' 'FFF' NODE ITEM '' WA_NOTA_ENTRADA-AV_VBELN CHANGING QTD_ITENS.

          ST_CIOT = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = '5' HIGH = '5' ) ( LOW = '6' HIGH = '6' ) ).
          SELECT SINGLE * INTO @DATA(WA_CONTRATO)
            FROM ZCTE_CIOT
           WHERE DOCNUM  EQ @WA_NOTA_ENTRADA-FTE_DOCNUM
             AND ST_CIOT IN @ST_CIOT.

          IF SY-SUBRC IS INITIAL.
            "'SCV -> "Contrato de Viagem
            PERFORM ADD_DOCUMENTO_TREE USING 'F' '' WA_CONTRATO-NUCONTRATO '' WA_CONTRATO-DOCNUM 'FCV' NODE ITEM '' WA_NOTA_ENTRADA-AV_VBELN CHANGING QTD_ITENS.
          ENDIF.

          SELECT SINGLE * INTO @DATA(WA_MDFE)
            FROM ZSDT0105 AS VC
           WHERE VC~DOCNUM EQ @WA_NOTA_ENTRADA-FTE_DOCNUM
             AND EXISTS ( SELECT * FROM ZSDT0102 AS MD WHERE MD~NMDFE EQ VC~NMDFE AND STATUS EQ '1' ).

          IF SY-SUBRC IS INITIAL.
            PERFORM ADD_DOCUMENTO_TREE USING 'F' '' WA_MDFE-DOCNUM_REF '' WA_MDFE-NMDFE 'FMD' NODE ITEM '' WA_NOTA_ENTRADA-AV_VBELN CHANGING QTD_ITENS.
          ENDIF.

        ENDLOOP.

      ENDIF.

      LOOP AT ROMANEIOS INTO DATA(WA_ROMANEIO).
        ADD 1 TO QTD_ITENS.
        NODE-NODE_KEY   = QTD_ITENS.
        CONDENSE NODE-NODE_KEY NO-GAPS.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = NODE-NODE_KEY
          IMPORTING
            OUTPUT = NODE-NODE_KEY.

        NODE-HIDDEN     = ' '. " The node is visible,
        NODE-DISABLED   = ' '. " selectable,
        NODE-ISFOLDER   = 'X'. " a folder.
        NODE-EXPANDER   = ABAP_TRUE.

        CLEAR ITEM.
        ITEM-NODE_KEY  = NODE-NODE_KEY.
        ITEM-ITEM_NAME = C_TREE-COLUMN1.
        ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_FONT_DEFAULT. " Text Item
        ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
        ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_INTENSIFIED.
        ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
        CONCATENATE 'Romaneio Entrada' WA_ROMANEIO-NR_ROMANEIO INTO ITEM-TEXT SEPARATED BY SPACE.
        APPEND NODE-NODE_KEY TO IT_NODE.

        READ TABLE LC_CARGA-NOTAS WITH KEY CH_REFERENCIA_ENT = WA_ROMANEIO-CH_REFERENCIA INTO DATA(WA_NOTA).
        IF SY-SUBRC IS INITIAL.

          IF WA_NOTA-DOCNUM IS INITIAL.
            NODE-N_IMAGE    = ICON_WF_WORKITEM_WAITING.
            NODE-EXP_IMAGE  = ICON_WF_WORKITEM_WAITING.
          ELSE.
            NODE-N_IMAGE    = ICON_WF_WORKITEM_COMPLETED.
            NODE-EXP_IMAGE  = ICON_WF_WORKITEM_COMPLETED.
          ENDIF.
          APPEND NODE TO NODE_TABLE.
          APPEND ITEM TO ITEM_TABLE.

          CLEAR: ITEM.
          ITEM-NODE_KEY  = NODE-NODE_KEY.
          ITEM-ITEM_NAME = C_TREE-COLUMN2.
          ITEM-CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_LINK.
          ITEM-TEXT      = 'PDF'.
          ITEM-T_IMAGE   = ICON_PDF.
          APPEND ITEM TO ITEM_TABLE.

          CLEAR: IT_TREE_INFO.
          IT_TREE_INFO-TP_MOVIMENTO  = 'E'.
          IT_TREE_INFO-CH_REFERENCIA = WA_ROMANEIO-CH_REFERENCIA.
          IT_TREE_INFO-NODE_KEY      = NODE-NODE_KEY.
          IT_TREE_INFO-ITEM_NAME     = C_TREE-COLUMN2.
          IT_TREE_INFO-TIPO          = 'ERO'.
          APPEND IT_TREE_INFO.

          CLEAR: ITEM.
          ITEM-NODE_KEY  = NODE-NODE_KEY.
          ITEM-ITEM_NAME = C_TREE-COLUMN3.
          ITEM-CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_LINK.
          ITEM-TEXT      = 'Romaneio'.
          ITEM-T_IMAGE   = ICON_OUTPUT_REQUEST.
          APPEND ITEM TO ITEM_TABLE.

          CLEAR: IT_TREE_INFO.
          IT_TREE_INFO-TP_MOVIMENTO  = 'E'.
          IT_TREE_INFO-CH_REFERENCIA = WA_ROMANEIO-CH_REFERENCIA.
          IT_TREE_INFO-NODE_KEY      = NODE-NODE_KEY.
          IT_TREE_INFO-ITEM_NAME     = C_TREE-COLUMN3.
          IT_TREE_INFO-TIPO          = 'ETK'.
          APPEND IT_TREE_INFO.

          "'EPO -> "Pedido de Compra
          PERFORM ADD_DOCUMENTO_TREE USING 'E' WA_ROMANEIO-CH_REFERENCIA WA_NOTA-PO_NUMBER WA_NOTA-PO_ITEM  '' 'EPO' NODE ITEM '' '' CHANGING QTD_ITENS.
          "'EAV -> "Avido de Recebimento
          PERFORM ADD_DOCUMENTO_TREE USING 'E' WA_ROMANEIO-CH_REFERENCIA WA_NOTA-AV_VBELN  ''               '' 'EAV' NODE ITEM '' '' CHANGING QTD_ITENS.
          "'EDM -> "Documento de Material
          PERFORM ADD_DOCUMENTO_TREE USING 'E' WA_ROMANEIO-CH_REFERENCIA WA_NOTA-MM_MBLNR  WA_NOTA-MM_MJAHR '' 'EDM' NODE ITEM '' '' CHANGING QTD_ITENS.
          "'EFT -> "Documento de Faturamento
          PERFORM ADD_DOCUMENTO_TREE USING 'E' WA_ROMANEIO-CH_REFERENCIA WA_NOTA-FT_BELNR  WA_NOTA-FT_GJAHR '' 'EFT' NODE ITEM '' '' CHANGING QTD_ITENS.
          "'EFS -> "Documento Fiscal
          PERFORM ADD_DOCUMENTO_TREE USING 'E' WA_ROMANEIO-CH_REFERENCIA WA_NOTA-DOCNUM    ''               '' 'EFS' NODE ITEM '' '' CHANGING QTD_ITENS.
          "'EMS -> "Documento de Material - Sobra
          PERFORM ADD_DOCUMENTO_TREE USING 'E' WA_ROMANEIO-CH_REFERENCIA WA_NOTA-MM_MBLNR_SOBRA  WA_NOTA-MM_MJAHR_SOBRA '' 'EMS' NODE ITEM '' '' CHANGING QTD_ITENS.

        ELSE.
          NODE-N_IMAGE    = ICON_WF_WORKITEM_READY.
          NODE-EXP_IMAGE  = ICON_WF_WORKITEM_READY.
          APPEND NODE TO NODE_TABLE.
          APPEND ITEM TO ITEM_TABLE.
        ENDIF.
      ENDLOOP.

      " SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA
      " SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA SAÍDA
      OBJ_CARGA->GET_ROMANEIO_SAIDA( EXPORTING I_ID_CARGA  = P_ID_CARGA IMPORTING E_ROMANEIOS = ROMANEIOS ).

      LOOP AT ROMANEIOS INTO WA_ROMANEIO.
        ADD 1 TO QTD_ITENS.
        NODE-NODE_KEY   = QTD_ITENS.
        CONDENSE NODE-NODE_KEY NO-GAPS.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = NODE-NODE_KEY
          IMPORTING
            OUTPUT = NODE-NODE_KEY.

        NODE-HIDDEN     = ' '. " The node is visible,
        NODE-DISABLED   = ' '. " selectable,
        NODE-ISFOLDER   = 'X'. " a folder.
        NODE-EXPANDER   = ABAP_TRUE.

        CLEAR ITEM.
        ITEM-NODE_KEY  = NODE-NODE_KEY.
        ITEM-ITEM_NAME = C_TREE-COLUMN1.
        ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_FONT_DEFAULT. " Text Item
        ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
        ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_INTENSIFIED.
        ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
        CONCATENATE 'Romaneio Saída' WA_ROMANEIO-NR_ROMANEIO INTO ITEM-TEXT SEPARATED BY SPACE.

        APPEND NODE-NODE_KEY TO IT_NODE.

        IF WA_ROMANEIO-ST_PROC IS NOT INITIAL.

          IF WA_ROMANEIO-ST_PROC NE '99'.
            NODE-N_IMAGE    = ICON_WF_WORKITEM_WAITING.
            NODE-EXP_IMAGE  = ICON_WF_WORKITEM_WAITING.
          ELSE.
            NODE-N_IMAGE    = ICON_WF_WORKITEM_COMPLETED.
            NODE-EXP_IMAGE  = ICON_WF_WORKITEM_COMPLETED.
          ENDIF.

          APPEND NODE TO NODE_TABLE.
          APPEND ITEM TO ITEM_TABLE.

          CLEAR: ITEM.
          ITEM-NODE_KEY  = NODE-NODE_KEY.
          ITEM-ITEM_NAME = C_TREE-COLUMN2.
          ITEM-CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_LINK.
          ITEM-TEXT      = 'PDF'.
          ITEM-T_IMAGE   = ICON_PDF.
          APPEND ITEM TO ITEM_TABLE.

          CLEAR: IT_TREE_INFO.
          IT_TREE_INFO-TP_MOVIMENTO  = 'S'.
          IT_TREE_INFO-CH_REFERENCIA = WA_ROMANEIO-CH_REFERENCIA.
          IT_TREE_INFO-NODE_KEY      = NODE-NODE_KEY.
          IT_TREE_INFO-ITEM_NAME     = C_TREE-COLUMN2.
          IT_TREE_INFO-TIPO          = 'SRO'.
          APPEND IT_TREE_INFO.

          CLEAR: ITEM.
          ITEM-NODE_KEY  = NODE-NODE_KEY.
          ITEM-ITEM_NAME = C_TREE-COLUMN3.
          ITEM-CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_LINK.
          ITEM-TEXT      = 'Romaneio'.
          ITEM-T_IMAGE   = ICON_OUTPUT_REQUEST.
          APPEND ITEM TO ITEM_TABLE.

          CLEAR: IT_TREE_INFO.
          IT_TREE_INFO-TP_MOVIMENTO  = 'E'.
          IT_TREE_INFO-CH_REFERENCIA = WA_ROMANEIO-CH_REFERENCIA.
          IT_TREE_INFO-NODE_KEY      = NODE-NODE_KEY.
          IT_TREE_INFO-ITEM_NAME     = C_TREE-COLUMN3.
          IT_TREE_INFO-TIPO          = 'STK'.
          APPEND IT_TREE_INFO.

          "'SDM -> "Documento de Material
          PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_ROMANEIO-DOC_MATERIAL_E WA_ROMANEIO-ANO_MATERIAL_E '' 'SDM' NODE ITEM '' '' CHANGING QTD_ITENS.

          CASE OBJ_CARGA->CARGA-IN_TRANSFERENCIA.
            WHEN ABAP_TRUE.
              "'SOV -> "Ordem de Venda
              PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_ROMANEIO-VBELN        ''    '' 'SPO' NODE ITEM '' '' CHANGING QTD_ITENS.
            WHEN ABAP_FALSE.
              "'SOV -> "Ordem de Venda
              PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_ROMANEIO-VBELN        ''    '' 'SOV' NODE ITEM '' '' CHANGING QTD_ITENS.
          ENDCASE.

          "'SRM -> "Remessa
          PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_ROMANEIO-DOC_REM      ''    '' 'SRM' NODE ITEM '' '' CHANGING QTD_ITENS.

          "'SVF -> "Fatura Da Mercadoria
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = WA_ROMANEIO-FATURA_PROD
            IMPORTING
              OUTPUT = WA_ROMANEIO-FATURA_PROD.

          PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_ROMANEIO-FATURA_PROD  ''    '' 'SVF' NODE ITEM '' '' CHANGING QTD_ITENS.

          "'SFS -> "Documento Fiscal Mercadoria
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = WA_ROMANEIO-NRO_NF_PROD
            IMPORTING
              OUTPUT = WA_ROMANEIO-NRO_NF_PROD.

          PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_ROMANEIO-NRO_NF_PROD  ''    '' 'SFS' NODE ITEM '' '' CHANGING QTD_ITENS.

          SELECT SINGLE * INTO @WA_MDFE
            FROM ZSDT0105 AS VC
           WHERE VC~DOCNUM EQ @WA_ROMANEIO-NRO_NF_PROD
             AND EXISTS ( SELECT * FROM ZSDT0102 AS MD WHERE MD~NMDFE EQ VC~NMDFE AND STATUS EQ '1' ).

          IF SY-SUBRC IS INITIAL.
            "'SMD -> "MDFE
            PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_MDFE-DOCNUM_REF '' WA_MDFE-NMDFE 'SMD' NODE ITEM '' '' CHANGING QTD_ITENS.
          ENDIF.

          "'SDT -> "Documento de Transporte
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = WA_ROMANEIO-DOC_TRANSP
            IMPORTING
              OUTPUT = WA_ROMANEIO-DOC_TRANSP.

          PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_ROMANEIO-DOC_TRANSP   ''    '' 'SDT' NODE ITEM '' '' CHANGING QTD_ITENS.

          IF WA_ROMANEIO-DOC_TRANSP IS NOT INITIAL.

            CALL METHOD ZCL_REPOM_VIAGEM_VPR=>GET_ID_PROC_CLIENTE_VT
              EXPORTING
                I_TKNUM           = WA_ROMANEIO-DOC_TRANSP
              RECEIVING
                E_ID_PROC_CLIENTE = LC_ID_PROC_CLIENTE
              EXCEPTIONS
                NAO_ENCONTRADO    = 1
                OTHERS            = 2.

            IF SY-SUBRC IS INITIAL.
              CREATE OBJECT OBJ_PEDAFIO_REPOM
                EXPORTING
                  I_ID_PROC_CLIENTE = LC_ID_PROC_CLIENTE.

              OBJ_PEDAFIO_REPOM->ZIF_CADASTRO~GET_REGISTRO( IMPORTING E_REGISTRO = WA_REGISTRO ).
              CLEAR: OBJ_PEDAFIO_REPOM.
              PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_REGISTRO-ID_VIAGEM_CODIGO  '' WA_REGISTRO-ID_PROC_CLIENTE 'SP1' NODE ITEM '' '' CHANGING QTD_ITENS.
            ENDIF.

          ENDIF.

          "'SDC -> "Documento de Custo
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = WA_ROMANEIO-FKNUM
            IMPORTING
              OUTPUT = WA_ROMANEIO-FKNUM.
          PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_ROMANEIO-FKNUM        ''    '' 'SDC' NODE ITEM '' '' CHANGING QTD_ITENS.

          "'SOT -> "Ordem de Venda Frete
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = WA_ROMANEIO-OV_FRETE
            IMPORTING
              OUTPUT = WA_ROMANEIO-OV_FRETE.
          PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_ROMANEIO-OV_FRETE     ''    '' 'SOT' NODE ITEM '' '' CHANGING QTD_ITENS.

          "'SFT -> "Fatura do Frete
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = WA_ROMANEIO-FATURA_FRETE
            IMPORTING
              OUTPUT = WA_ROMANEIO-FATURA_FRETE.
          PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_ROMANEIO-FATURA_FRETE ''    '' 'SFT' NODE ITEM '' '' CHANGING QTD_ITENS.

          "'SFF -> "Documento Fiscal Frete
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = WA_ROMANEIO-NRO_NF_FRETE
            IMPORTING
              OUTPUT = WA_ROMANEIO-NRO_NF_FRETE.
          PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_ROMANEIO-NRO_NF_FRETE ''    '' 'SFF' NODE ITEM '' '' CHANGING QTD_ITENS.

          IF WA_ROMANEIO-NRO_NF_FRETE IS NOT INITIAL.

            ST_CIOT = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = '5' HIGH = '5' ) ( LOW = '6' HIGH = '6' ) ).
            SELECT SINGLE * INTO @WA_CONTRATO
              FROM ZCTE_CIOT
             WHERE DOCNUM  EQ @WA_ROMANEIO-NRO_NF_FRETE
               AND ST_CIOT IN @ST_CIOT.

            IF SY-SUBRC IS INITIAL.
              "'SCV -> "Contrato de Viagem
              PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_CONTRATO-NUCONTRATO '' WA_CONTRATO-DOCNUM 'SCV' NODE ITEM '' '' CHANGING QTD_ITENS.
            ENDIF.

            SELECT SINGLE * INTO @WA_MDFE
              FROM ZSDT0105 AS VC
             WHERE VC~DOCNUM EQ @WA_ROMANEIO-NRO_NF_FRETE
               AND EXISTS ( SELECT * FROM ZSDT0102 AS MD WHERE MD~NMDFE EQ VC~NMDFE AND STATUS EQ '1' ).

            IF SY-SUBRC IS INITIAL.
              "'SMD -> "MDFE
              PERFORM ADD_DOCUMENTO_TREE USING 'S' WA_ROMANEIO-CH_REFERENCIA WA_MDFE-DOCNUM_REF '' WA_MDFE-NMDFE 'SMD' NODE ITEM '' '' CHANGING QTD_ITENS.
            ENDIF.

          ENDIF.

        ELSE.
          NODE-N_IMAGE    = ICON_WF_WORKITEM_READY.
          NODE-EXP_IMAGE  = ICON_WF_WORKITEM_READY.
          APPEND NODE TO NODE_TABLE.
          APPEND ITEM TO ITEM_TABLE.

          CLEAR: ITEM.
          ITEM-NODE_KEY  = NODE-NODE_KEY.
          ITEM-ITEM_NAME = C_TREE-COLUMN2.
          ITEM-CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_LINK.
          ITEM-TEXT      = 'PDF'.
          ITEM-T_IMAGE   = ICON_PDF.
          APPEND ITEM TO ITEM_TABLE.

          CLEAR: IT_TREE_INFO.
          IT_TREE_INFO-TP_MOVIMENTO  = 'S'.
          IT_TREE_INFO-CH_REFERENCIA = WA_ROMANEIO-CH_REFERENCIA.
          IT_TREE_INFO-NODE_KEY      = NODE-NODE_KEY.
          IT_TREE_INFO-ITEM_NAME     = C_TREE-COLUMN2.
          IT_TREE_INFO-TIPO          = 'SRO'.
          APPEND IT_TREE_INFO.

          CLEAR: ITEM.
          ITEM-NODE_KEY  = NODE-NODE_KEY.
          ITEM-ITEM_NAME = C_TREE-COLUMN3.
          ITEM-CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_LINK.
          ITEM-TEXT      = 'Romaneio'.
          ITEM-T_IMAGE   = ICON_OUTPUT_REQUEST.
          APPEND ITEM TO ITEM_TABLE.

          CLEAR: IT_TREE_INFO.
          IT_TREE_INFO-TP_MOVIMENTO  = 'E'.
          IT_TREE_INFO-CH_REFERENCIA = WA_ROMANEIO-CH_REFERENCIA.
          IT_TREE_INFO-NODE_KEY      = NODE-NODE_KEY.
          IT_TREE_INFO-ITEM_NAME     = C_TREE-COLUMN3.
          IT_TREE_INFO-TIPO          = 'STK'.
          APPEND IT_TREE_INFO.

        ENDIF.
      ENDLOOP.

      "WorkFlow de Aprovaçõe de Manutenções """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      "WorkFlow de Aprovaçõe de Manutenções """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      "WorkFlow de Aprovaçõe de Manutenções """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      DESCRIBE TABLE LC_CARGA-SOLICITACOES LINES DATA(LC_QTD_SOLICITACOES).

      IF LC_QTD_SOLICITACOES IS NOT INITIAL.
        ADD 1 TO QTD_ITENS.
        NODE-NODE_KEY   = QTD_ITENS.
        CONDENSE NODE-NODE_KEY NO-GAPS.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = NODE-NODE_KEY
          IMPORTING
            OUTPUT = NODE-NODE_KEY.

        NODE-HIDDEN     = ' '. " The node is visible,
        NODE-DISABLED   = ' '. " selectable,
        NODE-ISFOLDER   = 'X'. " a folder.
        NODE-EXPANDER   = ABAP_TRUE.

        CLEAR ITEM.
        ITEM-NODE_KEY  = NODE-NODE_KEY.
        ITEM-ITEM_NAME = C_TREE-COLUMN1.
        ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_FONT_DEFAULT. " Text Item
        ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
        ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_INTENSIFIED.
        ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
        ITEM-TEXT      = 'WorkFlow SoftExpert'.
        APPEND NODE-NODE_KEY TO IT_NODE.

        APPEND NODE TO NODE_TABLE.
        APPEND ITEM TO ITEM_TABLE.

      ENDIF.

      LOOP AT LC_CARGA-SOLICITACOES INTO DATA(WA_SOLICITACOES).
        "'OID -> "Solicitações de Manutenção
        LC_TEXTO = WA_SOLICITACOES-SE_RECORDID.
        PERFORM ADD_DOCUMENTO_TREE
           USING 'O' '' LC_CARGA-CARGA-ID_CARGA WA_SOLICITACOES-ID_SOLICITACAO WA_SOLICITACOES-SE_RECORDID 'OID' NODE ITEM LC_TEXTO ''
        CHANGING QTD_ITENS.
      ENDLOOP.
      "WorkFlow de Aprovaçõe de Manutenções """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      "WorkFlow de Aprovaçõe de Manutenções """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      "WorkFlow de Aprovaçõe de Manutenções """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    CATCH ZCX_CARGA INTO DATA(EX_CARGA).
      EX_CARGA->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
    CATCH ZCX_ORDEM_CARREGAMENTO INTO DATA(EX_ORDEM).
      EX_ORDEM->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
  ENDTRY.

  TRY .
      OBJ_CARGA->FREE( ).
    CATCH ZCX_CARGA.
  ENDTRY.

  CALL METHOD TREE->ADD_NODES_AND_ITEMS
    EXPORTING
      NODE_TABLE                     = NODE_TABLE
      ITEM_TABLE                     = ITEM_TABLE
      ITEM_TABLE_STRUCTURE_NAME      = 'MTREEITM'
    EXCEPTIONS
      FAILED                         = 1
      CNTL_SYSTEM_ERROR              = 3
      ERROR_IN_TABLES                = 4
      DP_ERROR                       = 5
      TABLE_STRUCTURE_NAME_NOT_FOUND = 6.

  TREE->EXPAND_NODES( EXPORTING NODE_KEY_TABLE = IT_NODE
    EXCEPTIONS
      FAILED                  = 1
      CNTL_SYSTEM_ERROR       = 2
      ERROR_IN_NODE_KEY_TABLE = 3
      DP_ERROR                = 4
      OTHERS                  = 5 ).

  SORT IT_TREE_INFO BY NODE_KEY ITEM_NAME.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ADD_DOCUMENTO_TREE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_NOTA_PO_NUMBER  text
*      -->P_1619   text
*----------------------------------------------------------------------*
FORM ADD_DOCUMENTO_TREE  USING P_TIPO_MOV      TYPE ZTP_MOV
                               P_CH_REFERENCIA TYPE ZCH_REF
                               P_DOCUMENTO
                               P_DOCUMENTO2
                               P_DOCUMENTO_REF
                               P_TIPO       TYPE CHAR03
                               NODE         TYPE TREEV_NODE
                               ITEM         TYPE MTREEITM
                               P_TEXTO      TYPE STRING
                               P_AV_VBELN   TYPE VBELN_VL
                      CHANGING P_QTD_ITENS  TYPE I.
  DATA: NODE_ TYPE TREEV_NODE,
        ITEM_ TYPE MTREEITM.

  CHECK P_DOCUMENTO IS NOT INITIAL.
  CHECK P_TIPO IS NOT INITIAL.

  ADD 1 TO P_QTD_ITENS.

  CLEAR: NODE_, ITEM_.
  NODE_-RELATKEY = NODE-NODE_KEY.
  NODE_-RELATSHIP  = CL_GUI_COLUMN_TREE=>RELAT_LAST_CHILD.
  NODE_-NODE_KEY = P_QTD_ITENS.

  CONDENSE NODE_-NODE_KEY NO-GAPS.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = NODE_-NODE_KEY
    IMPORTING
      OUTPUT = NODE_-NODE_KEY.

  IT_TREE_INFO-TP_MOVIMENTO  = P_TIPO_MOV.
  IT_TREE_INFO-CH_REFERENCIA = P_CH_REFERENCIA.
  IT_TREE_INFO-DOC_PART_1    = P_DOCUMENTO.
  IT_TREE_INFO-DOC_PART_2    = P_DOCUMENTO2.
  IT_TREE_INFO-DOC_REF       = P_DOCUMENTO_REF.
  IT_TREE_INFO-NODE_KEY      = NODE_-NODE_KEY.
  IT_TREE_INFO-ITEM_NAME     = C_TREE-COLUMN1.
  IT_TREE_INFO-TIPO          = P_TIPO.
  IT_TREE_INFO-AV_VBELN      = P_AV_VBELN.
  APPEND IT_TREE_INFO.

  ITEM_-NODE_KEY  = NODE_-NODE_KEY.
  ITEM_-ITEM_NAME = C_TREE-COLUMN1.
  ITEM_-CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_LINK. " Text Item
  ITEM_-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
  ITEM_-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
  ITEM_-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
  IF P_TEXTO IS NOT INITIAL.
    ITEM_-TEXT = P_TEXTO.
  ELSE.
    "ITEM_-T_IMAGE   = ICON_GOS_SERVICES.
    IF P_DOCUMENTO2 IS NOT INITIAL.
      CONCATENATE P_DOCUMENTO P_DOCUMENTO2 INTO ITEM_-TEXT SEPARATED BY '-'.
    ELSE.
      ITEM_-TEXT = P_DOCUMENTO.
    ENDIF.
  ENDIF.
  APPEND ITEM_ TO ITEM_TABLE.

  CASE P_TIPO.

      "Frete de Entrada
    WHEN 'FPO'. "Pedido de Compra
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'FAV'. "Avido de Recebimento
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'FDT'. "Documento de Transporte
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'FP1'. "Pedágio REPOM
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'FDC'. "Documento de Custo
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'FOT'. "Ordem de Venda do Frete
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'FFT'. "Fatura do Frete
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'FFF'. "Documento Fiscal Frete
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'FCV'. "Contrato de Viagem
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'FMD'. "MDFE
      NODE_-N_IMAGE    = ICON_ORDER.

      "Entrada
    WHEN 'EPO'. "Pedido de Compra
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'EAV'. "Avido de Recebimento
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'EDM'. "Documento de Material
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'EFT'. "Documento de Faturamento
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'EFS'. "Documento Fiscal
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'EMS'. "Documento de Material - Sobra
      NODE_-N_IMAGE    = ICON_ORDER.

      "Saída
    WHEN 'SDM'. "Documento de Material Entrada Ajuste Sobra
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'SPO'. "Pedido de Transferência
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'SOV'. "Ordem de Venda da Mercadoria
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'SRM'. "Remessa
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'SVF'. "Fatura Da Mercadoria
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'SFS'. "Documento Fiscal Mercadoria
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'SDT'. "Documento de Transporte
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'SP1'. "Pedágio REPOM
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'SDC'. "Documento de Custo
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'SOT'. "Ordem de Venda do Frete
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'SFT'. "Fatura do Frete
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'SFF'. "Documento Fiscal Frete
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'SCV'. "Contrato de Viagem
      NODE_-N_IMAGE    = ICON_ORDER.
    WHEN 'SMD'. "MDFE
      NODE_-N_IMAGE    = ICON_ORDER.

      "Workflow de Aprovação
    WHEN 'OID'.
      NODE_-N_IMAGE    = ICON_WORKFLOW_ACTIVITY.
  ENDCASE.

  APPEND NODE_ TO NODE_TABLE.

  "Documento Fiscal Mercadoria
  IF P_TIPO EQ 'EFS' OR P_TIPO EQ 'SFS' OR P_TIPO EQ 'SFF' OR P_TIPO EQ 'FFF'.

    SELECT SINGLE * INTO @DATA(WA_J_1BNFDOC)
      FROM J_1BNFDOC
     WHERE DOCNUM EQ @P_DOCUMENTO.

    IF WA_J_1BNFDOC-FORM IS NOT INITIAL.

      CLEAR: ITEM_, IT_TREE_INFO.
      ITEM_-NODE_KEY  = NODE_-NODE_KEY.
      ITEM_-ITEM_NAME = C_TREE-COLUMN2.
      ITEM_-CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_LINK.
      CASE P_TIPO.
        WHEN 'FFF'.
          ITEM_-TEXT = 'DACTE'.
        WHEN 'EFS'.
          ITEM_-TEXT = 'DANFE'.
        WHEN 'SFS'.
          ITEM_-TEXT = 'DANFE'.
        WHEN 'SFF'.
          ITEM_-TEXT = 'DACTE'.
      ENDCASE.

      CLEAR: IT_TREE_INFO.
      IT_TREE_INFO-TP_MOVIMENTO  = P_TIPO_MOV.
      IT_TREE_INFO-CH_REFERENCIA = P_CH_REFERENCIA.
      IT_TREE_INFO-NODE_KEY      = NODE_-NODE_KEY.
      IT_TREE_INFO-ITEM_NAME     = C_TREE-COLUMN2.
      IT_TREE_INFO-TIPO          = P_TIPO.
      IT_TREE_INFO-AV_VBELN      = P_AV_VBELN.

      CALL FUNCTION 'Z_SD_PRINT_NFE_CTE'
        EXPORTING
          DOC_NUMERO     = P_DOCUMENTO
          IMPRIMIR       = SPACE
        EXCEPTIONS
          NAO_LOCALIZADO = 1
          OTHERS         = 2.

      IF SY-SUBRC IS NOT INITIAL.
        ITEM_-T_IMAGE = ICON_BEN_OFFER_DEFAULT.
      ELSE.
        IT_TREE_INFO-DOC_PART_1 = P_DOCUMENTO.
        ITEM_-T_IMAGE = ICON_PRINT.
      ENDIF.
      APPEND IT_TREE_INFO.
      APPEND ITEM_ TO ITEM_TABLE.

    ENDIF.

  ENDIF.

  IF P_TIPO EQ 'SP1' OR P_TIPO EQ 'FP1'. "Pedágio REPOM
    CLEAR: ITEM_, IT_TREE_INFO.
    ITEM_-NODE_KEY  = NODE_-NODE_KEY.
    ITEM_-ITEM_NAME = C_TREE-COLUMN2.
    ITEM_-CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_LINK.
    ITEM_-TEXT      = 'Pedágio'.
    ITEM_-T_IMAGE   = ICON_PRINT.
    APPEND ITEM_ TO ITEM_TABLE.

    CLEAR: IT_TREE_INFO.
    IT_TREE_INFO-TP_MOVIMENTO  = P_TIPO_MOV.
    IT_TREE_INFO-CH_REFERENCIA = P_CH_REFERENCIA.
    IT_TREE_INFO-NODE_KEY      = NODE_-NODE_KEY.
    IT_TREE_INFO-ITEM_NAME     = C_TREE-COLUMN2.
    IT_TREE_INFO-TIPO          = P_TIPO.
    IT_TREE_INFO-DOC_REF       = P_DOCUMENTO_REF.
    IT_TREE_INFO-DOC_PART_1    = P_DOCUMENTO.
    IT_TREE_INFO-AV_VBELN      = P_AV_VBELN.
    APPEND IT_TREE_INFO.
  ENDIF.

  IF P_TIPO EQ 'SCV' OR P_TIPO EQ 'FCV'. "Contrato de Viagem
    CLEAR: ITEM_, IT_TREE_INFO.
    ITEM_-NODE_KEY  = NODE_-NODE_KEY.
    ITEM_-ITEM_NAME = C_TREE-COLUMN2.
    ITEM_-CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_LINK.
    ITEM_-TEXT      = 'Viagem'.
    ITEM_-T_IMAGE   = ICON_PRINT.
    APPEND ITEM_ TO ITEM_TABLE.

    CLEAR: IT_TREE_INFO.
    IT_TREE_INFO-TP_MOVIMENTO  = P_TIPO_MOV.
    IT_TREE_INFO-CH_REFERENCIA = P_CH_REFERENCIA.
    IT_TREE_INFO-NODE_KEY      = NODE_-NODE_KEY.
    IT_TREE_INFO-ITEM_NAME     = C_TREE-COLUMN2.
    IT_TREE_INFO-TIPO          = P_TIPO.
    IT_TREE_INFO-DOC_REF       = P_DOCUMENTO_REF.
    IT_TREE_INFO-DOC_PART_1    = P_DOCUMENTO.
    IT_TREE_INFO-AV_VBELN      = P_AV_VBELN.
    APPEND IT_TREE_INFO.
  ENDIF.

  IF P_TIPO EQ 'OID'.
    CLEAR: ITEM_, IT_TREE_INFO.
    ITEM_-NODE_KEY  = NODE_-NODE_KEY.
    ITEM_-ITEM_NAME = C_TREE-COLUMN2.
    ITEM_-CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_LINK.
    ITEM_-TEXT      = 'SMR'.
    ITEM_-T_IMAGE   = ICON_WORKFLOW_WAIT_FOR_EVENTS.
    APPEND ITEM_ TO ITEM_TABLE.

    CLEAR: IT_TREE_INFO.
    IT_TREE_INFO-TP_MOVIMENTO  = P_TIPO_MOV.
    IT_TREE_INFO-CH_REFERENCIA = P_CH_REFERENCIA.
    IT_TREE_INFO-NODE_KEY      = NODE_-NODE_KEY.
    IT_TREE_INFO-ITEM_NAME     = C_TREE-COLUMN2.
    IT_TREE_INFO-TIPO          = P_TIPO.
    IT_TREE_INFO-DOC_REF       = P_DOCUMENTO_REF.
    IT_TREE_INFO-DOC_PART_1    = P_DOCUMENTO. "Carga
    IT_TREE_INFO-DOC_PART_2    = P_DOCUMENTO2. "Solicitação
    IT_TREE_INFO-DOC_PART_3    = P_DOCUMENTO_REF. "Identificador SE
    APPEND IT_TREE_INFO.
  ENDIF.

  IF P_TIPO EQ 'SMD' OR P_TIPO EQ 'FMD'. "MDFE
    CLEAR: ITEM_, IT_TREE_INFO.
    ITEM_-NODE_KEY  = NODE_-NODE_KEY.
    ITEM_-ITEM_NAME = C_TREE-COLUMN2.
    ITEM_-CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_LINK.
    ITEM_-TEXT      = 'DAMDFE'.
    ITEM_-T_IMAGE   = ICON_PRINT.
    APPEND ITEM_ TO ITEM_TABLE.

    CLEAR: IT_TREE_INFO.
    IT_TREE_INFO-TP_MOVIMENTO  = P_TIPO_MOV.
    IT_TREE_INFO-CH_REFERENCIA = P_CH_REFERENCIA.
    IT_TREE_INFO-NODE_KEY      = NODE_-NODE_KEY.
    IT_TREE_INFO-ITEM_NAME     = C_TREE-COLUMN2.
    IT_TREE_INFO-TIPO          = P_TIPO.
    IT_TREE_INFO-DOC_REF       = P_DOCUMENTO.     "DOCNUM MDF-e
    IT_TREE_INFO-DOC_PART_1    = P_DOCUMENTO_REF. "Número da MDF-e
    IT_TREE_INFO-AV_VBELN      = P_AV_VBELN. "Número da MDF-e
    APPEND IT_TREE_INFO.
  ENDIF.

  CLEAR: ITEM_.
  ITEM_-NODE_KEY  = NODE_-NODE_KEY.
  ITEM_-ITEM_NAME = C_TREE-COLUMN3.
  ITEM_-CLASS     = CL_GUI_COLUMN_TREE=>ITEM_CLASS_TEXT.
  CASE P_TIPO.

      "Frete de Entrada
    WHEN 'FPO'.
      ITEM_-TEXT = 'Pedido de Compra'.
    WHEN 'FAV'.
      ITEM_-TEXT = 'Aviso de Recebimento'.
    WHEN 'FDT'.
      ITEM_-TEXT = 'Documento de Transporte'.
    WHEN 'FP1'.
      ITEM_-TEXT = 'Pedágio REPOM'.
    WHEN 'FDC'.
      ITEM_-TEXT = 'Documento de Custo'.
    WHEN 'FOT'.
      ITEM_-TEXT = 'Ordem de Venda do Frete'.
    WHEN 'FFT'.
      ITEM_-TEXT = 'Fatura do Frete'.
    WHEN 'FFF'.
      ITEM_-TEXT = 'CT-e'.
    WHEN 'FCV'.
      ITEM_-TEXT = 'Contrato de Viagem'.
    WHEN 'FMD'. "MDFE
      ITEM_-TEXT = 'MDFE'.

      "Entrada
    WHEN 'EPO'.
      ITEM_-TEXT = 'Pedido de Compra'.
    WHEN 'EAV'.
      ITEM_-TEXT = 'Aviso de Recebimento'.
    WHEN 'EDM'.
      ITEM_-TEXT = 'Documento de Material'.
    WHEN 'EFT'.
      ITEM_-TEXT = 'Documento de Faturamento'.
    WHEN 'EFS'.
      ITEM_-TEXT = 'Documento Fiscal'.
    WHEN 'EMS'.
      ITEM_-TEXT = 'Documento de Material Sobra'.

      "Saída
    WHEN 'SDM'.
      ITEM_-TEXT = 'Documento de Material Sobra'.
    WHEN 'SPO'.
      ITEM_-TEXT = 'Pedido de Compra - Transferência'.
    WHEN 'SOV'.
      ITEM_-TEXT = 'Ordem de Venda da Mercadoria'.
    WHEN 'SRM'.
      ITEM_-TEXT = 'Remessa'.
    WHEN 'SVF'.
      ITEM_-TEXT = 'Fatura Da Mercadoria'.
    WHEN 'SFS'.
      ITEM_-TEXT = 'NF-e'.
    WHEN 'SDT'.
      ITEM_-TEXT = 'Documento de Transporte'.
    WHEN 'SP1'.
      ITEM_-TEXT = 'Pedágio REPOM'.
    WHEN 'SDC'.
      ITEM_-TEXT = 'Documento de Custo'.
    WHEN 'SOT'.
      ITEM_-TEXT = 'Ordem de Venda do Frete'.
    WHEN 'SFT'.
      ITEM_-TEXT = 'Fatura do Frete'.
    WHEN 'SFF'.
      ITEM_-TEXT = 'CT-e'.
    WHEN 'SCV'.
      ITEM_-TEXT = 'Contrato de Viagem'.
    WHEN 'SMD'. "MDFE
      ITEM_-TEXT = 'MDFE'.

      "Workflow de Aprovação
    WHEN 'OID'.
      ITEM_-TEXT = 'Solicitação de Manutenção'.
  ENDCASE.
  CHECK ITEM_-TEXT IS NOT INITIAL.
  APPEND ITEM_ TO ITEM_TABLE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  MOSTRA_INFO_NODE_ITEM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_NODE_KEY  text
*      -->P_ITEM_NAME  text
*----------------------------------------------------------------------*
FORM MOSTRA_INFO_NODE_ITEM  USING P_NODE_KEY TYPE  TV_NODEKEY P_ITEM_NAME TYPE  TV_ITMNAME.

  DATA: P_FISCAL           TYPE J_1BDOCNUM,
        P_BELNR            TYPE RE_BELNR,
        P_GJAHR            TYPE GJAHR,
        P_MBLNR            TYPE MBLNR,
        P_MJAHR            TYPE MJAHR,
        P_VBELN            TYPE VBELN_VL,
        P_EBELN            TYPE EBELN,
        P_TKNUM            TYPE TKNUM,
        P_FKNUM            TYPE FKNUM,
        P_NMDFE            TYPE J_1BNFNUM9,
        P_ID_PROC_CLIENTE  TYPE  ZDE_ID_PROC_CLIENTE,
        P_ID_CARGA         TYPE  ZDE_ID_CARGA,
        O_ID_SOLICITACAO   TYPE ZDE_ID_SOL_AJUSTE,
        P_SE_IDENTIFICADOR TYPE ZDE_SE_RECORDID_WORKFLOW.

  READ TABLE IT_TREE_INFO INTO DATA(WA_INFO_TRE)
    WITH KEY NODE_KEY = P_NODE_KEY ITEM_NAME = P_ITEM_NAME BINARY SEARCH.

  IF SY-SUBRC IS INITIAL.

    CASE WA_INFO_TRE-ITEM_NAME.
      WHEN C_TREE-COLUMN1.
        CASE WA_INFO_TRE-TIPO.

          WHEN 'FPO'. "Pedido de Compra
            P_EBELN = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_PEDIDO USING P_EBELN.
          WHEN 'FAV'. "Avido de Recebimento
            P_VBELN = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_AVISO USING P_VBELN.
          WHEN 'FDT'. "Documento de Transporte
            P_TKNUM = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_DOC_TRANSPORTE USING P_TKNUM.
          WHEN 'FP1'. "Pedágio REPOM
            P_ID_PROC_CLIENTE = CONV #( WA_INFO_TRE-DOC_REF ).
            PERFORM MOSTRAR_PEDAGIO_REPOM USING P_ID_PROC_CLIENTE.
          WHEN 'FDC'. "Documento de Custo
            P_FKNUM = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_DOC_CUSTO USING P_FKNUM.
          WHEN 'FOT'. "Ordem de Venda Frete
            P_VBELN = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_ORDEM_VENDA USING P_VBELN.
          WHEN 'FFT'. "Fatura do Frete
            P_VBELN = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_FATURA_VF USING P_VBELN.
          WHEN 'FFF'. "Documento Fiscal Frete
            P_FISCAL = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_DOC_FISCAL USING P_FISCAL.

          WHEN 'EPO'. "Pedido de Compra
            P_EBELN = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_PEDIDO USING P_EBELN.
          WHEN 'EAV'. "Avido de Recebimento
            P_VBELN = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_AVISO USING P_VBELN.
          WHEN 'EDM'. "Documento de Material
            P_MBLNR = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            P_MJAHR = CONV #( WA_INFO_TRE-DOC_PART_2 ).
            PERFORM MOSTRAR_DOC_MATERIAL USING P_MBLNR P_MJAHR.
          WHEN 'EMS'. "Documento de Material - Sobra
            P_MBLNR = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            P_MJAHR = CONV #( WA_INFO_TRE-DOC_PART_2 ).
            PERFORM MOSTRAR_DOC_MATERIAL USING P_MBLNR P_MJAHR.
          WHEN 'EFT'. "Documento de Faturamento
            P_BELNR = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            P_GJAHR = CONV #( WA_INFO_TRE-DOC_PART_2 ).
            PERFORM MOSTRAR_FATURA USING P_BELNR P_GJAHR.
          WHEN 'EFS'. "Documento Fiscal
            P_FISCAL = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_DOC_FISCAL USING P_FISCAL.
          WHEN 'SDM'. "Documento de Material Sobra
            P_MBLNR = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            P_MJAHR = CONV #( WA_INFO_TRE-DOC_PART_2 ).
            PERFORM MOSTRAR_DOC_MATERIAL USING P_MBLNR P_MJAHR.
          WHEN 'SPO'. "Pedido de Compra de Transferencia
            P_EBELN = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_PEDIDO USING P_EBELN.
          WHEN 'SOV'. "Ordem de Venda Mercadoria
            P_VBELN = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_ORDEM_VENDA USING P_VBELN.
          WHEN 'SRM'. "Remessa
            P_VBELN = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_REMESSA USING P_VBELN.
          WHEN 'SVF'. "Fatura Da Mercadoria
            P_VBELN = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_FATURA_VF USING P_VBELN.
          WHEN 'SFS'. "Documento Fiscal Mercadoria
            P_FISCAL = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_DOC_FISCAL USING P_FISCAL.
          WHEN 'SDT'. "Documento de Transporte
            P_TKNUM = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_DOC_TRANSPORTE USING P_TKNUM.
          WHEN 'SP1'. "Pedágio REPOM
            P_ID_PROC_CLIENTE = CONV #( WA_INFO_TRE-DOC_REF ).
            PERFORM MOSTRAR_PEDAGIO_REPOM USING P_ID_PROC_CLIENTE.
          WHEN 'SDC'. "Documento de Custo
            P_FKNUM = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_DOC_CUSTO USING P_FKNUM.
          WHEN 'SOT'. "Ordem de Venda Frete
            P_VBELN = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_ORDEM_VENDA USING P_VBELN.
          WHEN 'SFT'. "Fatura do Frete
            P_VBELN = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_FATURA_VF USING P_VBELN.
          WHEN 'SFF'. "Documento Fiscal Frete
            P_FISCAL = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM MOSTRAR_DOC_FISCAL USING P_FISCAL.
          WHEN 'OID'. "Solicitação de Manutenção
            P_ID_CARGA = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            P_ID_PROC_CLIENTE = CONV #( WA_INFO_TRE-DOC_PART_2 ).
            PERFORM MOSTRAR_SOLICITACAO_MANUT USING P_ID_CARGA P_ID_PROC_CLIENTE.
        ENDCASE.
      WHEN C_TREE-COLUMN2.
        CASE WA_INFO_TRE-TIPO.

            "Frete de Entrada
          WHEN 'FP1'. "Pedágio REPOM
            P_ID_PROC_CLIENTE = CONV #( WA_INFO_TRE-DOC_REF ).
            PERFORM IMPRIMIR_PEDAGIO_REPOM USING P_ID_PROC_CLIENTE.
          WHEN 'FFF'. "Documento Fiscal Frete
            CHECK WA_INFO_TRE-DOC_PART_1 IS NOT INITIAL.
            P_FISCAL = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM IMPRIMIR_DOC_FISCAL USING P_FISCAL.
          WHEN 'FCV'. "Contrato de Viagem Administradora
            CHECK WA_INFO_TRE-DOC_PART_1 IS NOT INITIAL.
            P_FISCAL = CONV #( WA_INFO_TRE-DOC_REF ).
            PERFORM IMPRIMIR_CTR_VIAGEM USING P_FISCAL.
          WHEN 'FMD'. "MDFE
            CHECK WA_INFO_TRE-DOC_PART_1 IS NOT INITIAL.
            P_NMDFE  = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            P_FISCAL = CONV #( WA_INFO_TRE-DOC_REF ).
            PERFORM IMPRIMIR_MDFE USING P_NMDFE P_FISCAL.

            "Entrada
          WHEN 'ERO'. "Romaneio de Entrada (PDF)
            PERFORM IMPRIMIR_ROMANEIO USING WA_INFO_TRE-CH_REFERENCIA.
          WHEN 'EFS'. "Documento Fiscal Entrada Própria
            P_FISCAL = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM IMPRIMIR_DOC_FISCAL USING P_FISCAL.

            "Saída
          WHEN 'SRO'. "Romaneio de Saída (PDF)
            PERFORM IMPRIMIR_ROMANEIO USING WA_INFO_TRE-CH_REFERENCIA.
          WHEN 'SFS'. "Documento Fiscal Mercadoria
            CHECK WA_INFO_TRE-DOC_PART_1 IS NOT INITIAL.
            P_FISCAL = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM IMPRIMIR_DOC_FISCAL USING P_FISCAL.
          WHEN 'SP1'. "Pedágio REPOM
            P_ID_PROC_CLIENTE = CONV #( WA_INFO_TRE-DOC_REF ).
            PERFORM IMPRIMIR_PEDAGIO_REPOM USING P_ID_PROC_CLIENTE.
          WHEN 'SFF'. "Documento Fiscal Frete
            CHECK WA_INFO_TRE-DOC_PART_1 IS NOT INITIAL.
            P_FISCAL = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            PERFORM IMPRIMIR_DOC_FISCAL USING P_FISCAL.
          WHEN 'SCV'. "Contrato de Viagem Administradora
            CHECK WA_INFO_TRE-DOC_PART_1 IS NOT INITIAL.
            P_FISCAL = CONV #( WA_INFO_TRE-DOC_REF ).
            PERFORM IMPRIMIR_CTR_VIAGEM USING P_FISCAL.
          WHEN 'SMD'. "MDFE
            CHECK WA_INFO_TRE-DOC_PART_1 IS NOT INITIAL.
            P_NMDFE  = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            P_FISCAL = CONV #( WA_INFO_TRE-DOC_REF ).
            PERFORM IMPRIMIR_MDFE USING P_NMDFE P_FISCAL.

            "Workflow de Aprovação
          WHEN 'OID'. "Solicitação de Manutenção
            P_ID_CARGA = CONV #( WA_INFO_TRE-DOC_PART_1 ).
            P_ID_PROC_CLIENTE  = CONV #( WA_INFO_TRE-DOC_PART_2 ).
            P_SE_IDENTIFICADOR = CONV #( WA_INFO_TRE-DOC_PART_3 ).
            PERFORM MOSTRAR_SOLICITACAO_MANUT_SE USING P_ID_CARGA P_ID_PROC_CLIENTE P_SE_IDENTIFICADOR.
        ENDCASE.
      WHEN C_TREE-COLUMN3.
        CASE WA_INFO_TRE-TIPO.
          WHEN 'ETK'. "Romaneio de Entrada (Romaneio)
            PERFORM IMPRIMIR_TICKET USING WA_INFO_TRE-CH_REFERENCIA.
          WHEN 'STK'. "Romaneio de Saída (Romaneio)
            PERFORM IMPRIMIR_TICKET USING WA_INFO_TRE-CH_REFERENCIA.
        ENDCASE.
    ENDCASE.

  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DOC_FISCAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_CTE_ALV_  text
*----------------------------------------------------------------------*
FORM MOSTRAR_DOC_FISCAL  USING P_FISCAL TYPE J_1BDOCNUM.

  DATA: GF_NFOBJN LIKE J_1BINTERF-NFOBJN.

  CHECK P_FISCAL IS NOT INITIAL.

  CALL FUNCTION 'J_1B_NF_DOC_READ_INTO_OBJECT'
    EXPORTING
      DOC_NUMBER         = P_FISCAL
    IMPORTING
      OBJ_NUMBER         = GF_NFOBJN
    EXCEPTIONS
      DOCUMENT_NOT_FOUND = 1
      DOCUM_LOCK         = 2
      OTHERS             = 3.

  CALL FUNCTION 'J_1B_NF_OBJECT_DISPLAY'
    EXPORTING
      OBJ_NUMBER         = GF_NFOBJN
    EXCEPTIONS
      OBJECT_NOT_FOUND   = 1
      SCR_CTRL_NOT_FOUND = 2
      OTHERS             = 3.

  CALL FUNCTION 'J_1B_NF_OBJECT_DROP'
    EXPORTING
      OBJ_NUMBER       = GF_NFOBJN
    EXCEPTIONS
      OBJECT_NOT_FOUND = 1
      OTHERS           = 2.

ENDFORM.                    " MOSTRAR_DOC_FISCAL

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DOC_FISCAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_CTE_ALV_  text
*----------------------------------------------------------------------*
FORM MOSTRAR_MONITOR_ELETRONICO  USING P_FISCAL TYPE J_1BDOCNUM .

  DATA: GF_NFOBJN LIKE J_1BINTERF-NFOBJN.

  CHECK P_FISCAL IS NOT INITIAL.

  SELECT SINGLE * INTO @DATA(WA_J_1BNFDOC)
    FROM J_1BNFDOC
   WHERE DOCNUM EQ @P_FISCAL.

  SET PARAMETER ID 'Z_MY_PARAMETER_1' FIELD WA_J_1BNFDOC-DOCNUM.
  SET PARAMETER ID 'Z_MY_PARAMETER_2' FIELD WA_J_1BNFDOC-BUKRS.

  IF WA_J_1BNFDOC-FORM IS NOT INITIAL.
    CASE WA_J_1BNFDOC-MODEL.
      WHEN '55'.
        CALL TRANSACTION 'ZNFE' AND SKIP FIRST SCREEN.
      WHEN '57'.
        CALL TRANSACTION 'ZCTE' AND SKIP FIRST SCREEN.
    ENDCASE.
  ELSE.
    CASE WA_J_1BNFDOC-MODEL.
      WHEN '55'.
        CALL TRANSACTION 'ZNFE_TERC' AND SKIP FIRST SCREEN.
      WHEN '57'.
        CALL TRANSACTION 'ZCTE_TERC' AND SKIP FIRST SCREEN.
    ENDCASE.
  ENDIF.

ENDFORM.                    " MOSTRAR_DOC_FISCAL

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_DOC_FISCAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_CTE_ALV_  text
*----------------------------------------------------------------------*
FORM IMPRIMIR_DOC_FISCAL  USING P_FISCAL TYPE J_1BDOCNUM.

  CHECK P_FISCAL IS NOT INITIAL.

  CALL FUNCTION 'Z_SD_PRINT_NFE_CTE'
    EXPORTING
      DOC_NUMERO     = P_FISCAL
    EXCEPTIONS
      NAO_LOCALIZADO = 1
      OTHERS         = 2.

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    " MOSTRAR_DOC_FISCAL

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_CTR_VIAGEM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_CTE_ALV_  text
*----------------------------------------------------------------------*
FORM IMPRIMIR_CTR_VIAGEM USING P_FISCAL TYPE J_1BDOCNUM.

  CHECK P_FISCAL IS NOT INITIAL.

  CALL FUNCTION 'Z_SD_IMPRIMIR_CTR_CIOT'
    EXPORTING
      P_CTE_AVULSO = P_FISCAL
    EXCEPTIONS
      NAO_CIOT     = 1
      ERRO_STATUS  = 2
      ERROR        = 3
      OTHERS       = 4.

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    " IMPRIMIR_CTR_VIAGEM

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_FATURA
*&---------------------------------------------------------------------*
FORM MOSTRAR_FATURA  USING    P_BELNR TYPE RE_BELNR
                              P_GJAHR TYPE GJAHR.
  IF P_BELNR IS NOT INITIAL AND P_GJAHR IS NOT INITIAL.
    SET PARAMETER ID 'RBN' FIELD P_BELNR.
    SET PARAMETER ID 'GJR' FIELD P_GJAHR.
    CALL TRANSACTION 'MIR4' AND SKIP FIRST SCREEN.
  ENDIF.
ENDFORM.                    " MOSTRAR_FATURA

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DOC_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM MOSTRAR_DOC_MATERIAL  USING P_MBLNR TYPE MBLNR
                                 P_MJAHR TYPE MJAHR.

  IF P_MBLNR IS NOT INITIAL.
    SET PARAMETER ID 'MBN' FIELD P_MBLNR.
    SET PARAMETER ID 'MJA' FIELD P_MJAHR.
    CALL TRANSACTION 'MIGO_GO' AND SKIP FIRST SCREEN.
  ENDIF.

ENDFORM.                    " MOSTRAR_DOC_MATERIAL

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_AVISO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM MOSTRAR_AVISO USING P_VBELN TYPE VBELN_VL.

  IF P_VBELN IS NOT INITIAL.
    SET PARAMETER ID 'VL'  FIELD P_VBELN.
    SET PARAMETER ID 'VLM' FIELD P_VBELN.
    CALL TRANSACTION 'VL33N' AND SKIP FIRST SCREEN.
  ENDIF.

ENDFORM.                    " MOSTRAR_AVISO

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_REMESSA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM MOSTRAR_REMESSA USING P_VBELN TYPE VBELN_VL.

  IF P_VBELN IS NOT INITIAL.
    SET PARAMETER ID 'VL'  FIELD P_VBELN.
    CALL TRANSACTION 'VL03N' AND SKIP FIRST SCREEN.
  ENDIF.

ENDFORM.                    " MOSTRAR_REMESSA

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_PEDIDO
*&---------------------------------------------------------------------*
FORM MOSTRAR_PEDIDO  USING  P_EBELN TYPE EBELN.

  IF P_EBELN IS NOT INITIAL.
    SET PARAMETER ID 'BES' FIELD P_EBELN.
    CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.
  ENDIF.

ENDFORM.                    " MOSTRAR_PEDIDO

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_FATURA_VF
*&---------------------------------------------------------------------*
FORM MOSTRAR_FATURA_VF USING P_VBELN TYPE VBELN_VF.

  IF P_VBELN IS NOT INITIAL.
    SET PARAMETER ID 'VF'    FIELD P_VBELN.
    CALL TRANSACTION 'VF03' AND SKIP FIRST SCREEN.
  ENDIF.

ENDFORM.                    " MOSTRAR_FATURA_VF

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_SOLICITACAO_MANUT
*&---------------------------------------------------------------------*
FORM MOSTRAR_SOLICITACAO_MANUT USING P_ID_CARGA TYPE ZDE_ID_CARGA P_ID_SOLICITACAO TYPE ZDE_ID_SOL_AJUSTE.

  IF P_ID_SOLICITACAO IS NOT INITIAL AND P_ID_CARGA IS NOT INITIAL.
    SUBMIT ZMMR126 WITH PCK_CAD  EQ ABAP_TRUE
                   WITH PMANUT   EQ ABAP_TRUE
                   WITH PSAFRA   EQ PSAFRA
                   WITH PEMPRE   EQ PEMPRE
                   WITH PFILIA   EQ PFILIA
                   WITH PIDCARGA EQ P_ID_CARGA
                   WITH PIDSOLIC EQ P_ID_SOLICITACAO AND RETURN.
  ENDIF.

ENDFORM.                    " MOSTRAR_SOLICITACAO_MANUT

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_SOLICITACAO_MANUT_se
*&---------------------------------------------------------------------*
FORM MOSTRAR_SOLICITACAO_MANUT_SE USING P_ID_CARGA TYPE ZDE_ID_CARGA P_ID_SOLICITACAO TYPE ZDE_ID_SOL_AJUSTE P_SE_IDENTIFICADOR TYPE ZDE_SE_RECORDID_WORKFLOW.

  IF P_ID_SOLICITACAO IS NOT INITIAL AND P_ID_CARGA IS NOT INITIAL AND P_SE_IDENTIFICADOR IS NOT INITIAL.

  ENDIF.

ENDFORM.                    " MOSTRAR_SOLICITACAO_MANUT_SE

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DOC_TRANSPORTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM MOSTRAR_DOC_TRANSPORTE USING P_TKNUM TYPE TKNUM.

  IF P_TKNUM IS NOT INITIAL.
    SET PARAMETER ID 'TNR' FIELD P_TKNUM.
    CALL TRANSACTION 'VT03N' AND SKIP FIRST SCREEN.
  ENDIF.

ENDFORM.                    " MOSTRAR_DOC_TRANSPORTE

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_PEDAGIO_REPOM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM MOSTRAR_PEDAGIO_REPOM USING P_ID_PROC_CLIENTE TYPE  ZDE_ID_PROC_CLIENTE.

  IF P_ID_PROC_CLIENTE IS NOT INITIAL.
    CALL FUNCTION 'Z_REPOM_CADASTRO_PEDAGIO'
      EXPORTING
        I_CONSULTA        = ABAP_TRUE
        I_ID_PROC_CLIENTE = P_ID_PROC_CLIENTE.
  ENDIF.

ENDFORM.                    " MOSTRAR_PEDAGIO_REPOM

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_PEDAGIO_REPOM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM IMPRIMIR_PEDAGIO_REPOM USING P_ID_PROC_CLIENTE TYPE  ZDE_ID_PROC_CLIENTE.

  IF P_ID_PROC_CLIENTE IS NOT INITIAL.

    ZCL_REPOM_VIAGEM_VPR=>IMPRIMIR_VIAGEM(
      EXPORTING
        I_ID_PROC_CLIENTE = P_ID_PROC_CLIENTE
      EXCEPTIONS
        ERRO              = 1
        OTHERS            = 2 ).

    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDIF.

ENDFORM.                    " IMPRIMIR_PEDAGIO_REPOM

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DOC_CUSTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM MOSTRAR_DOC_CUSTO USING P_FKNUM TYPE FKNUM.

  IF P_FKNUM IS NOT INITIAL.
    SET PARAMETER ID 'FKK'    FIELD P_FKNUM.
    CALL TRANSACTION 'VI03' AND SKIP FIRST SCREEN.
  ENDIF.

ENDFORM.                    " MOSTRAR_DOC_CUSTO

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_ORDEM_VENDA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM MOSTRAR_ORDEM_VENDA USING P_VBELN TYPE VBELN_VA.

  IF P_VBELN IS NOT INITIAL.
    SET PARAMETER ID 'AUN'  FIELD P_VBELN.
    CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
  ENDIF.

ENDFORM.                    " MOSTRAR_DOC_CUSTO

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_MDFE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_NMDFE  text
*      -->P_P_FISCAL  text
*----------------------------------------------------------------------*
FORM IMPRIMIR_MDFE  USING  P_NMDFE  TYPE J_1BNFNUM9
                           P_FISCAL TYPE J_1BDOCNUM.

  DATA: LC_MDFE TYPE REF TO ZCL_MDFE.

  CHECK P_NMDFE IS NOT INITIAL.
  CHECK P_FISCAL IS NOT INITIAL.

  CREATE OBJECT LC_MDFE
    EXPORTING
      I_NMDFE  = P_NMDFE
      I_DOCNUM = P_FISCAL.

  LC_MDFE->PRINT_MDFE( ).

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CHAMAR_SAIDA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_RETORNO_ALV  text
*----------------------------------------------------------------------*
FORM CHAMAR_SAIDA  USING  P_RETORNO_ALV TYPE TY_ITENS_ALV.

  DATA: OBJ_CARGA TYPE REF TO ZIF_CARGA,
        RG_DATAS  TYPE RANGE OF ZSDT0001-DT_MOVIMENTO,
        RG_CHAVES TYPE RANGE OF ZSDT0001-CH_REFERENCIA,
        WA_CHAVES LIKE LINE OF RG_CHAVES.

  CASE PTIPCA.
    WHEN ZIF_CARGA=>ST_TP_CARGA_ENTRADA_FOB.
      CREATE OBJECT OBJ_CARGA TYPE ZCL_CARGA_RECEBIMENTO.
    WHEN ZIF_CARGA=>ST_TP_CARGA_SAIDA_OPUS.
      CREATE OBJECT OBJ_CARGA TYPE ZCL_CARGA_SAIDA_OPUS.
    WHEN ZIF_CARGA=>ST_TP_CARGA_SAIDA_ENT_FOB.
      CREATE OBJECT OBJ_CARGA TYPE ZCL_CARGA_SAIDA.
  ENDCASE.

  TRY .
      OBJ_CARGA->GET_CABECALHO_CARGA( EXPORTING I_ID_CARGA = P_RETORNO_ALV-ID_CARGA IMPORTING E_ZSDT0001CG = DATA(E_ZSDT0001CG)
        )->GET_ROMANEIO_SAIDA( EXPORTING I_ID_CARGA  = P_RETORNO_ALV-ID_CARGA IMPORTING E_ROMANEIOS = DATA(LC_ROMANEIOS) ).
    CATCH ZCX_CARGA.
  ENDTRY.

  TRY .
      OBJ_CARGA->FREE( ).
    CATCH ZCX_CARGA.
  ENDTRY.
  CLEAR: OBJ_CARGA.

  IF LC_ROMANEIOS[] IS INITIAL.
    EXIT.
  ENDIF.

  LOOP AT LC_ROMANEIOS INTO DATA(WA_ROMANEIO).
    WA_CHAVES-SIGN   = 'I'.
    WA_CHAVES-OPTION = 'EQ'.
    WA_CHAVES-LOW    = WA_ROMANEIO-CH_REFERENCIA.
    WA_CHAVES-HIGH   = WA_ROMANEIO-CH_REFERENCIA.
    APPEND WA_CHAVES TO RG_CHAVES.
  ENDLOOP.

  CASE E_ZSDT0001CG-TP_CARGA.
    WHEN ZIF_CARGA=>ST_TP_CARGA_ENTRADA_FOB OR SPACE.

      "CASE E_ZSDT0001CG-IN_TRANSFERENCIA.
      "  WHEN ABAP_FALSE.
      SUBMIT ZLESR0102 WITH P_BUKRS  EQ WA_ROMANEIO-BUKRS
                       WITH P_BRANCH EQ WA_ROMANEIO-BRANCH
                       WITH S_DATA   IN RG_DATAS
                       WITH R_CP_01  EQ ABAP_FALSE
                       WITH R_CP_09  EQ ABAP_TRUE
                       WITH R_DT_A   EQ ABAP_FALSE
                       WITH R_DT_T   EQ ABAP_TRUE
                       WITH S_CHAVE  IN RG_CHAVES
                       WITH P_INTER  EQ ZCL_ROMANEIO=>INTERFACE_CARGA_SAP
                       AND RETURN.
      " WHEN ABAP_TRUE.
      "   SUBMIT ZLESR0086 WITH P_BUKRS  EQ WA_ROMANEIO-BUKRS
      "                    WITH P_BRANCH EQ WA_ROMANEIO-BRANCH
      "                    WITH S_CHAVE  IN RG_CHAVES
      "                    WITH P_INTER  EQ ZCL_ROMANEIO=>INTERFACE_CARGA_SAP
      "                    AND RETURN.
      "ENDCASE.

    WHEN ZIF_CARGA=>ST_TP_CARGA_SAIDA_OPUS.

      SUBMIT ZLESR0102 WITH P_BUKRS  EQ WA_ROMANEIO-BUKRS
                       WITH P_BRANCH EQ WA_ROMANEIO-BRANCH
                       WITH S_DATA   IN RG_DATAS
                       WITH R_CP_01  EQ ABAP_TRUE
                       WITH R_CP_09  EQ ABAP_FALSE
                       WITH R_DT_A   EQ ABAP_FALSE
                       WITH R_DT_T   EQ ABAP_TRUE
                       WITH S_CHAVE  IN RG_CHAVES
                       WITH P_INTER  EQ ZCL_ROMANEIO=>INTERFACE_IB_ROMANEIO
                       AND RETURN.

    WHEN ZIF_CARGA=>ST_TP_CARGA_SAIDA_ENT_FOB.

      SUBMIT ZLESR0102 WITH P_BUKRS  EQ WA_ROMANEIO-BUKRS
                       WITH P_BRANCH EQ WA_ROMANEIO-BRANCH
                       WITH S_DATA   IN RG_DATAS
                       WITH R_CP_01  EQ ABAP_TRUE
                       WITH R_CP_09  EQ ABAP_FALSE
                       WITH R_DT_A   EQ ABAP_FALSE
                       WITH R_DT_T   EQ ABAP_TRUE
                       WITH S_CHAVE  IN RG_CHAVES
                       WITH P_INTER  EQ ZCL_ROMANEIO=>INTERFACE_CARGA_SAP
                       AND RETURN.

  ENDCASE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  MOSTRA_INFO_NODE_CLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_NODE_KEY  text
*----------------------------------------------------------------------*
FORM MOSTRA_INFO_NODE_CLICK USING P_NODE_KEY TYPE  TV_NODEKEY.

  DATA: P_FISCAL TYPE J_1BDOCNUM.

  READ TABLE IT_TREE_INFO INTO DATA(WA_INFO_TRE)
    WITH KEY NODE_KEY = P_NODE_KEY ITEM_NAME = C_TREE-COLUMN1 BINARY SEARCH.

  IF SY-SUBRC IS INITIAL.

    CASE WA_INFO_TRE-TIPO.

        "Frete de Entrada
      WHEN 'FAV'. "Avido de Recebimento
      WHEN 'FDT'. "Documento de Transporte
      WHEN 'FP1'. "Pedágio REPOM
      WHEN 'FDC'. "Documento de Custo
      WHEN 'FOT'. "Ordem de Venda Frete
      WHEN 'FFT'. "Fatura do Frete
      WHEN 'FFF'. "Documento Fiscal Frete
        P_FISCAL = CONV #( WA_INFO_TRE-DOC_PART_1 ).
        PERFORM MOSTRAR_MONITOR_ELETRONICO USING P_FISCAL.
        PERFORM CARREGAR_ENTRADA USING WA_CARGA_ROMANEIO.
        PERFORM ATUALIZA_TELA USING ABAP_FALSE.
        LEAVE TO SCREEN 0200.

        "Entrada
      WHEN 'EPO'. "Pedido de Compra
      WHEN 'EAV'. "Avido de Recebimento
      WHEN 'EDM'. "Documento de Material
      WHEN 'EFT'. "Documento de Faturamento
      WHEN 'EFS'. "Documento Fiscal
        P_FISCAL = CONV #( WA_INFO_TRE-DOC_PART_1 ).
        PERFORM MOSTRAR_MONITOR_ELETRONICO USING P_FISCAL.
        PERFORM CARREGAR_ENTRADA USING WA_CARGA_ROMANEIO.
        PERFORM ATUALIZA_TELA USING ABAP_FALSE.
        LEAVE TO SCREEN 0200.

        "Saída
      WHEN 'SOV'. "Ordem de Venda Mercadoria
      WHEN 'SRM'. "Remessa
      WHEN 'SVF'. "Fatura Da Mercadoria
      WHEN 'SFS'. "Documento Fiscal Mercadoria
        P_FISCAL = CONV #( WA_INFO_TRE-DOC_PART_1 ).
        PERFORM MOSTRAR_MONITOR_ELETRONICO USING P_FISCAL.
        PERFORM CARREGAR_ENTRADA USING WA_CARGA_ROMANEIO.
        PERFORM ATUALIZA_TELA USING ABAP_FALSE.
        LEAVE TO SCREEN 0200.
      WHEN 'SDT'. "Documento de Transporte
      WHEN 'SP1'. "Pedágio REPOM
      WHEN 'SDC'. "Documento de Custo
      WHEN 'SOT'. "Ordem de Venda Frete
      WHEN 'SFT'. "Fatura do Frete
      WHEN 'SFF'. "Documento Fiscal Frete
        P_FISCAL = CONV #( WA_INFO_TRE-DOC_PART_1 ).
        PERFORM MOSTRAR_MONITOR_ELETRONICO USING P_FISCAL.
        PERFORM CARREGAR_ENTRADA USING WA_CARGA_ROMANEIO.
        PERFORM ATUALIZA_TELA USING ABAP_FALSE.
        LEAVE TO SCREEN 0200.
    ENDCASE.

  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0200 INPUT.

  CASE OK_CODE.
    WHEN 'REFRESH_EN'.
      CLEAR: OK_CODE.
      OBG_TOOLBAR_2->HANDLE_USER_COMMAND( EXPORTING E_UCOMM = 'GESTOQUE' ).
    WHEN 'REFRESH_ES'.
      CLEAR: OK_CODE.
      OBG_TOOLBAR_2->HANDLE_USER_COMMAND( EXPORTING E_UCOMM = 'GESTORNA' ).
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  CRIA_ALV_DOCUMENTOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_CL_GUI_CONTAINER  text
*----------------------------------------------------------------------*
FORM CRIA_ALV_DOCUMENTOS  USING  P_NUMERO    TYPE I
                                 P_CONTAINER TYPE REF TO CL_GUI_CONTAINER
                                 P_DOCKING   TYPE REF TO CL_GUI_DOCKING_CONTAINER.

  "ALV DOCUMENTOS DO FLUXO
  CLEAR: EVENTS.

  " link click
  EVENT-EVENTID    = CL_GUI_COLUMN_TREE=>EVENTID_LINK_CLICK.
  EVENT-APPL_EVENT = 'X'.
  APPEND EVENT TO EVENTS.

  " link click
  EVENT-EVENTID    = CL_GUI_COLUMN_TREE=>EVENTID_NODE_DOUBLE_CLICK.
  EVENT-APPL_EVENT = 'X'.
  APPEND EVENT TO EVENTS.

  CREATE OBJECT G_APPLICATION.
  HIERARCHY_HEADER-HEADING = TEXT-010.
  HIERARCHY_HEADER-WIDTH   = 44.

  CASE P_NUMERO.
    WHEN 1.
      CREATE OBJECT TREE
        EXPORTING
          PARENT                = P_CONTAINER
          NODE_SELECTION_MODE   = TREE->NODE_SEL_MODE_SINGLE
          ITEM_SELECTION        = 'X'
          HIERARCHY_COLUMN_NAME = C_TREE-COLUMN1
          HIERARCHY_HEADER      = HIERARCHY_HEADER.
    WHEN 2.
      CREATE OBJECT TREE
        EXPORTING
          PARENT                = P_DOCKING
          NODE_SELECTION_MODE   = TREE->NODE_SEL_MODE_SINGLE
          ITEM_SELECTION        = 'X'
          HIERARCHY_COLUMN_NAME = C_TREE-COLUMN1
          HIERARCHY_HEADER      = HIERARCHY_HEADER.
  ENDCASE.

  TREE->SET_REGISTERED_EVENTS( EXPORTING EVENTS = EVENTS
    EXCEPTIONS
      CNTL_ERROR                = 1
      CNTL_SYSTEM_ERROR         = 2
      ILLEGAL_EVENT_COMBINATION = 3
      OTHERS                    = 4 ).

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  SET HANDLER G_APPLICATION->HANDLE_LINK_CLICK FOR TREE.
  SET HANDLER G_APPLICATION->HANDLE_DOUBLE_CLICK FOR TREE.

  TREE->ADD_COLUMN(
    EXPORTING
      NAME                         = C_TREE-COLUMN2
      ALIGNMENT                    = CL_GUI_COLUMN_TREE=>ALIGN_LEFT
      WIDTH                        = 18
      HEADER_IMAGE                 = 'ICON_PRINT'
      HEADER_TEXT                  = 'Imprimir'
    EXCEPTIONS
      COLUMN_EXISTS                = 1
      ILLEGAL_COLUMN_NAME          = 2
      TOO_MANY_COLUMNS             = 3
      ILLEGAL_ALIGNMENT            = 4
      DIFFERENT_COLUMN_TYPES       = 5
      CNTL_SYSTEM_ERROR            = 6
      FAILED                       = 7
      PREDECESSOR_COLUMN_NOT_FOUND = 8
      OTHERS                       = 9 ).

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  TREE->ADD_COLUMN(
    EXPORTING
      NAME                         = C_TREE-COLUMN3
      ALIGNMENT                    = CL_GUI_COLUMN_TREE=>ALIGN_LEFT
      WIDTH                        = 30
      HEADER_IMAGE                 = 'ICON_PRINT'
      HEADER_TEXT                  = 'Descrição Documento'
    EXCEPTIONS
      COLUMN_EXISTS                = 1
      ILLEGAL_COLUMN_NAME          = 2
      TOO_MANY_COLUMNS             = 3
      ILLEGAL_ALIGNMENT            = 4
      DIFFERENT_COLUMN_TYPES       = 5
      CNTL_SYSTEM_ERROR            = 6
      FAILED                       = 7
      PREDECESSOR_COLUMN_NOT_FOUND = 8
      OTHERS                       = 9 ).

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_ROMANEIO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_INFO_TRE_CH_REFERENCIA  text
*----------------------------------------------------------------------*
FORM IMPRIMIR_ROMANEIO  USING P_CH_ROMANEIO TYPE ZCH_REF.

  DATA: OBJ_ROMANEIO TYPE REF TO ZCL_ROMANEIO.

  TRY .
      CREATE OBJECT OBJ_ROMANEIO.
      OBJ_ROMANEIO->SET_REGISTRO( I_ID_REGISTRO = P_CH_ROMANEIO ).
      CHECK SY-SUBRC IS INITIAL.
      OBJ_ROMANEIO->IMPRIMIR_PRD( ).
    CATCH ZCX_CADASTRO INTO EX_CADASTRO.
      EX_CADASTRO->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
    CATCH ZCX_ROMANEIO INTO EX_ROMANEIO.
      EX_ROMANEIO->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
  ENDTRY.

  CLEAR: OBJ_ROMANEIO.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_TICKET
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_INFO_TRE_CH_REFERENCIA  text
*----------------------------------------------------------------------*
FORM IMPRIMIR_TICKET  USING P_CH_ROMANEIO TYPE ZCH_REF.

  DATA: OBJ_ROMANEIO TYPE REF TO ZCL_ROMANEIO.

  TRY .
      CREATE OBJECT OBJ_ROMANEIO.
      OBJ_ROMANEIO->SET_REGISTRO( I_ID_REGISTRO = P_CH_ROMANEIO ).
      CHECK SY-SUBRC IS INITIAL.
      OBJ_ROMANEIO->IMPRIMIR_TICKET( ).
    CATCH ZCX_CADASTRO INTO EX_CADASTRO.
      EX_CADASTRO->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
    CATCH ZCX_ROMANEIO INTO EX_ROMANEIO.
      EX_ROMANEIO->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
  ENDTRY.

  OBJ_ROMANEIO->LIMPAR_REGISTRO( ).
  CLEAR: OBJ_ROMANEIO.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CHAMAR_SAIDA_AUTOMATICA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_RETORNO_ALV  text
*----------------------------------------------------------------------*
FORM CHAMAR_SAIDA_AUTOMATICA  USING P_RETORNO_ALV TYPE TY_ITENS_ALV P_ENTRADA TYPE CHAR01.

  DATA: OBJ_CARGA TYPE REF TO ZIF_CARGA.

  DATA: ANSWER TYPE C LENGTH 1.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      TITLEBAR              = 'Gerar Faturamento em backgorund'
      TEXT_QUESTION         = 'Deseja Gerar fatuamento em backgorund?'
      TEXT_BUTTON_1         = 'Sim'
      ICON_BUTTON_1         = 'ICON_CHECKED'
      TEXT_BUTTON_2         = 'Não'
      ICON_BUTTON_2         = 'ICON_INCOMPLETE'
      DEFAULT_BUTTON        = '1'
      DISPLAY_CANCEL_BUTTON = 'X'
    IMPORTING
      ANSWER                = ANSWER
    EXCEPTIONS
      TEXT_NOT_FOUND        = 1
      OTHERS                = 2.

  CASE ANSWER.
    WHEN '1'.

      CASE P_ENTRADA.
        WHEN ABAP_FALSE.

          TRY .

              DATA: NUMBER           TYPE TBTCJOB-JOBCOUNT,
                    NAME             TYPE TBTCJOB-JOBNAME,
                    PRINT_PARAMETERS TYPE PRI_PARAMS.

              DATA(LC_USER_JOB) = ZCL_JOB=>GET_USER_JOB( ).

              CONCATENATE 'JOB_SAIDA_AUTOMATICA' P_RETORNO_ALV-ID_CARGA INTO NAME SEPARATED BY '_'.

              TRY .
                  ZCL_JOB=>GET_JOB_EXECUCAO( I_JOB_NAME = NAME ).
                  EXIT.
                CATCH ZCX_JOB.
              ENDTRY.

              TRY .
                  ZCL_JOB=>GET_JOB_ESCALONADO( I_JOB_NAME = NAME ).
                  EXIT.
                CATCH ZCX_JOB.
              ENDTRY.

              CALL FUNCTION 'JOB_OPEN'
                EXPORTING
                  JOBNAME          = NAME
                IMPORTING
                  JOBCOUNT         = NUMBER
                EXCEPTIONS
                  CANT_CREATE_JOB  = 1
                  INVALID_JOB_DATA = 2
                  JOBNAME_MISSING  = 3
                  OTHERS           = 4.

              IF SY-SUBRC IS INITIAL.
                SUBMIT ZMMR126_JOB TO SAP-SPOOL SPOOL PARAMETERS PRINT_PARAMETERS
                WITHOUT SPOOL DYNPRO VIA JOB NAME NUMBER NUMBER
                  WITH PIDCARGA EQ P_RETORNO_ALV-ID_CARGA
                  USER LC_USER_JOB
                   AND RETURN.

                IF SY-SUBRC IS INITIAL.
                  CALL FUNCTION 'JOB_CLOSE'
                    EXPORTING
                      JOBCOUNT             = NUMBER
                      JOBNAME              = NAME
                      STRTIMMED            = 'X'
                    EXCEPTIONS
                      CANT_START_IMMEDIATE = 1
                      INVALID_STARTDATE    = 2
                      JOBNAME_MISSING      = 3
                      JOB_CLOSE_FAILED     = 4
                      JOB_NOSTEPS          = 5
                      JOB_NOTEX            = 6
                      LOCK_FAILED          = 7
                      OTHERS               = 8.

                  IF SY-SUBRC IS NOT INITIAL.
                    DATA(CK_ERRO) = ABAP_TRUE.
                    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO DATA(MTEXT) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
                    CALL FUNCTION 'BP_JOB_DELETE'
                      EXPORTING
                        JOBCOUNT                 = NUMBER
                        JOBNAME                  = NAME
                      EXCEPTIONS
                        CANT_DELETE_EVENT_ENTRY  = 1
                        CANT_DELETE_JOB          = 2
                        CANT_DELETE_JOBLOG       = 3
                        CANT_DELETE_STEPS        = 4
                        CANT_DELETE_TIME_ENTRY   = 5
                        CANT_DERELEASE_SUCCESSOR = 6
                        CANT_ENQ_PREDECESSOR     = 7
                        CANT_ENQ_SUCCESSOR       = 8
                        CANT_ENQ_TBTCO_ENTRY     = 9
                        CANT_UPDATE_PREDECESSOR  = 10
                        CANT_UPDATE_SUCCESSOR    = 11
                        COMMIT_FAILED            = 12
                        JOBCOUNT_MISSING         = 13
                        JOBNAME_MISSING          = 14
                        JOB_DOES_NOT_EXIST       = 15
                        JOB_IS_ALREADY_RUNNING   = 16
                        NO_DELETE_AUTHORITY      = 17
                        OTHERS                   = 18.
                    IF SY-SUBRC IS NOT INITIAL.
                      CK_ERRO = ABAP_FALSE.
                    ENDIF.
                  ENDIF.
                ELSE.
                  CK_ERRO = ABAP_TRUE.
                  MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
                  CALL FUNCTION 'BP_JOB_DELETE'
                    EXPORTING
                      JOBCOUNT                 = NUMBER
                      JOBNAME                  = NAME
                    EXCEPTIONS
                      CANT_DELETE_EVENT_ENTRY  = 1
                      CANT_DELETE_JOB          = 2
                      CANT_DELETE_JOBLOG       = 3
                      CANT_DELETE_STEPS        = 4
                      CANT_DELETE_TIME_ENTRY   = 5
                      CANT_DERELEASE_SUCCESSOR = 6
                      CANT_ENQ_PREDECESSOR     = 7
                      CANT_ENQ_SUCCESSOR       = 8
                      CANT_ENQ_TBTCO_ENTRY     = 9
                      CANT_UPDATE_PREDECESSOR  = 10
                      CANT_UPDATE_SUCCESSOR    = 11
                      COMMIT_FAILED            = 12
                      JOBCOUNT_MISSING         = 13
                      JOBNAME_MISSING          = 14
                      JOB_DOES_NOT_EXIST       = 15
                      JOB_IS_ALREADY_RUNNING   = 16
                      NO_DELETE_AUTHORITY      = 17
                      OTHERS                   = 18.
                  IF SY-SUBRC IS NOT INITIAL.
                    CK_ERRO = ABAP_FALSE.
                  ENDIF.
                ENDIF.
              ENDIF.
            CATCH ZCX_JOB INTO EX_JOB.
              EX_JOB->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
          ENDTRY.
        WHEN ABAP_TRUE.

          TRY .

              CREATE OBJECT OBJ_CARGA TYPE ZCL_CARGA_RECEBIMENTO.
              OBJ_CARGA->SET_REGISTRO( EXPORTING I_ID_CARGA = P_RETORNO_ALV-ID_CARGA
                )->SET_EMITIR_DOC_SAIDAS(
                )->FREE(
                ).
              FREE OBJ_CARGA.

            CATCH ZCX_CARGA INTO EX_CARGA.
              FREE OBJ_CARGA.
              EX_CARGA->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S'  I_MSGTY_DISPLAY = 'E' ).
            CATCH ZCX_JOB INTO EX_JOB.
              FREE OBJ_CARGA.
              EX_JOB->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S'  I_MSGTY_DISPLAY = 'E' ).
          ENDTRY.

      ENDCASE.

    WHEN '2'.

      CHECK P_ENTRADA EQ ABAP_FALSE.

      TRY .
          ZCL_CARGA_SAIDA=>ZIF_CARGA~GET_INSTANCE(
            )->SET_REGISTRO(
            EXPORTING
              I_ID_CARGA   = P_RETORNO_ALV-ID_CARGA
            )->SET_EMITIR_DOC_SAIDAS(
            ).

        CATCH ZCX_CARGA INTO EX_CARGA.
          EX_CARGA->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
        CATCH ZCX_JOB INTO EX_JOB.
          EX_JOB->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
      ENDTRY.

  ENDCASE.

ENDFORM.
