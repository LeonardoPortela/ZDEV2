FUNCTION Z_SD_INFO_CTE_NOTAS.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(P_CTE_AVULSO) TYPE  J_1BDOCNUM
*"     REFERENCE(P_CTE_GERA) TYPE  CHAR01 OPTIONAL
*"  EXPORTING
*"     REFERENCE(DESTINATARIO) TYPE  J_1BNFNAD
*"  TABLES
*"      IT_CTE_INFO_NOTA STRUCTURE  ZCTE_INFO_NOTA OPTIONAL
*"      IT_NF_PARTNER STRUCTURE  J_1BNFNAD OPTIONAL
*"      IT_T001W STRUCTURE  T001W OPTIONAL
*"  EXCEPTIONS
*"      SEM_NOTAS
*"----------------------------------------------------------------------

  TYPES: BEGIN OF Y_VBFA,
           VBELN        TYPE VBFA-VBELN,
           POSNN        TYPE VBFA-POSNN,
           VBELN_35(35) TYPE C,
         END OF Y_VBFA,

         BEGIN OF Y_VBFA_DOCM,
           VBELN        TYPE VBFA-VBELN,
           MJAHR        TYPE VBFA-MJAHR,
           POSNN        TYPE VBFA-POSNN,
           VBELN_35(35) TYPE C,
         END OF Y_VBFA_DOCM,

         BEGIN OF Y_LIPS,
           VBELN        TYPE LIPS-VBELN,
           VGBEL        TYPE LIPS-VGBEL,
           VGPOS        TYPE LIPS-VGPOS,
           WERKS        TYPE LIPS-WERKS,
           VBELN_16(16) TYPE C,
         END OF Y_LIPS,

         BEGIN OF Y_EKBE,
           EBELN TYPE EKBE-EBELN,
           EBELP TYPE EKBE-EBELP,
           GJAHR TYPE EKBE-GJAHR,
           BELNR TYPE EKBE-BELNR,
           XBLNR TYPE EKBE-XBLNR,
         END OF Y_EKBE,

         BEGIN OF Y_RBKP,
           BELNR TYPE RBKP-BELNR,
           GJAHR TYPE RBKP-GJAHR,
         END OF Y_RBKP,

         BEGIN OF Y_REFLIN,
           REFKEY(35) TYPE C,
         END OF Y_REFLIN.

  DATA: WA_CTE_ITEM       LIKE J_1BNFLIN,
        WA_FATURA_SERVICO LIKE VBRP,
        WA_ORDEM_VENDA    LIKE VBAK,
        WA_DOC_TRANSP     LIKE VTTK,
        WA_ITEM_TRANSP    TYPE VTTP,
        IT_ITEM_NOTA      TYPE TABLE OF J_1BNFLIN WITH HEADER LINE,
        IT_ZLEST0110      TYPE TABLE OF ZLEST0110 WITH HEADER LINE,
        WA_ITEM_NOTA      TYPE J_1BNFLIN,
        WA_CAB_NOTA       TYPE J_1BNFDOC,
        WA_ACT_NOTA       TYPE J_1BNFE_ACTIVE,
        WA_NOTA_CTE       TYPE ZCTE_INFO_NOTA,
        R_SUFRAMA         TYPE KVERM,
        WK_HEADER_ADD     TYPE J_1BINDOC,
        WA_NF_ITEM        TYPE J_1BNFLIN,
        IT_NF_ITEM        TYPE TABLE OF J_1BNFLIN INITIAL SIZE 0 WITH HEADER LINE,
        IT_NF_ITEM_TAX    TYPE TABLE OF J_1BNFSTX INITIAL SIZE 0 WITH HEADER LINE,
        IT_HEADER_MSG     TYPE TABLE OF J_1BNFFTX INITIAL SIZE 0 WITH HEADER LINE,
        IT_REFER_MSG      TYPE TABLE OF J_1BNFREF INITIAL SIZE 0 WITH HEADER LINE,
        WA_INFO_PART      TYPE LFA1,
        DESTINATARIO_AUX  TYPE J_1BNFNAD,
        VL_NTGEW          TYPE J_1BNFDOC-NTGEW,
        VL_GEWEI          TYPE J_1BNFDOC-GEWEI,
        TL_LIPS           TYPE TABLE OF LIPS,
        WA_LIPS           TYPE LIPS,
        WA_ZLEST0110      TYPE ZLEST0110.

  DATA: TABIX.

  IF P_CTE_GERA IS INITIAL.

    SELECT * INTO TABLE IT_CTE_INFO_NOTA
      FROM ZCTE_INFO_NOTA
     WHERE DOCNUM EQ P_CTE_AVULSO.

    CLEAR WA_NOTA_CTE.

    LOOP AT IT_CTE_INFO_NOTA INTO WA_NOTA_CTE .

      SELECT SINGLE * INTO @WA_ACT_NOTA
        FROM J_1BNFE_ACTIVE
       WHERE DOCNUM EQ @WA_NOTA_CTE-DOCNUM_NF
         AND DOCNUM NE @SPACE.

      IF SY-SUBRC IS INITIAL.
        WA_NOTA_CTE-DOCNUM9 = WA_ACT_NOTA-DOCNUM9 .
        CONCATENATE WA_ACT_NOTA-REGIO
                    WA_ACT_NOTA-NFYEAR
                    WA_ACT_NOTA-NFMONTH
                    WA_ACT_NOTA-STCD1
                    WA_ACT_NOTA-MODEL
                    WA_ACT_NOTA-SERIE
                    WA_ACT_NOTA-NFNUM9
                    WA_ACT_NOTA-DOCNUM9
                    WA_ACT_NOTA-CDV INTO WA_NOTA_CTE-CHAVE.

        MODIFY IT_CTE_INFO_NOTA FROM WA_NOTA_CTE.
      ENDIF.


      "append wa_nota_cte to it_cte_info_nota  .
    ENDLOOP.

  ELSE.

    "" Documento Normal
    SELECT SINGLE * INTO WA_CTE_ITEM
      FROM J_1BNFLIN
     WHERE DOCNUM EQ P_CTE_AVULSO.

    CHECK SY-SUBRC IS INITIAL.

    "Fatura do Servi√ßo
    SELECT SINGLE * INTO WA_FATURA_SERVICO
      FROM VBRP
     WHERE VBELN = WA_CTE_ITEM-REFKEY(10)
       AND POSNR = WA_CTE_ITEM-REFITM.

    CHECK SY-SUBRC IS INITIAL.

    "Ordem de Venda
    SELECT SINGLE * INTO WA_ORDEM_VENDA
      FROM VBAK
     WHERE VBELN = WA_FATURA_SERVICO-AUBEL.

    CHECK SY-SUBRC IS INITIAL.

    SELECT SINGLE * INTO WA_DOC_TRANSP
      FROM VTTK
     WHERE TKNUM = WA_ORDEM_VENDA-TKNUM.

    IF ( SY-SUBRC EQ 0 ). "Caso encontre uma VT!

      SELECT SINGLE *
        FROM VTTP INTO WA_ITEM_TRANSP
       WHERE TKNUM = WA_DOC_TRANSP-TKNUM.

      IF WA_DOC_TRANSP-SHTYP EQ 'Z025'.

        DATA: TL_SADRVB TYPE TABLE OF SADRVB.
        DATA: TL_VBPAVB TYPE TABLE OF VBPAVB.
        DATA: PARCEIRO  TYPE J_1BNFNAD.

        CALL FUNCTION 'SD_PARTNER_READ'
          EXPORTING
            F_VBELN  = WA_DOC_TRANSP-TKNUM
            OBJECT   = 'VTPA'
          TABLES
            I_XVBADR = TL_SADRVB
            I_XVBPA  = TL_VBPAVB.

        READ TABLE TL_VBPAVB INTO DATA(SL_VBPAVB) WITH KEY PARVW = 'PC'.
        IF SY-SUBRC IS INITIAL.
          CLEAR: PARCEIRO.
          PARCEIRO-PARVW = SL_VBPAVB-PARVW.
          PARCEIRO-PARID = SL_VBPAVB-LIFNR.
          APPEND PARCEIRO TO IT_NF_PARTNER.

          CLEAR: PARCEIRO.
          PARCEIRO-PARVW = 'RG'.
          PARCEIRO-PARID = SL_VBPAVB-LIFNR.
          APPEND PARCEIRO TO IT_NF_PARTNER.

          CLEAR: PARCEIRO.
          PARCEIRO-PARVW = 'AG'.
          PARCEIRO-PARID = SL_VBPAVB-LIFNR.
          APPEND PARCEIRO TO IT_NF_PARTNER.

        ENDIF.

        READ TABLE TL_VBPAVB INTO SL_VBPAVB WITH KEY PARVW = 'LR'.
        IF SY-SUBRC IS INITIAL.
          CLEAR: PARCEIRO.
          PARCEIRO-PARVW = SL_VBPAVB-PARVW.
          PARCEIRO-PARID = SL_VBPAVB-KUNNR.
          APPEND PARCEIRO TO IT_NF_PARTNER.
        ENDIF.

      ELSE.

        CALL FUNCTION 'Z_LES_NOTAS_VT'
          EXPORTING
            I_VTTK       = WA_DOC_TRANSP
          IMPORTING
            E_ZLEST0110  = WA_ZLEST0110
          TABLES
            IT_ITEM_NOTA = IT_ITEM_NOTA
            IT_ZLEST0110 = IT_ZLEST0110.

        IF IT_ITEM_NOTA[] IS INITIAL.

          IF IT_ZLEST0110[] IS NOT INITIAL.
            LOOP AT IT_ZLEST0110 INTO WA_ZLEST0110.
              CLEAR: WA_NOTA_CTE.
              MOVE-CORRESPONDING WA_ZLEST0110 TO WA_NOTA_CTE.
              WA_NOTA_CTE-DOCNUM = P_CTE_AVULSO.
              APPEND WA_NOTA_CTE TO IT_CTE_INFO_NOTA.
            ENDLOOP.
          ELSEIF WA_ZLEST0110 IS NOT INITIAL. " Se tiver Nota Fiscal de Terceiros Informada na ZLES0113
            MOVE-CORRESPONDING WA_ZLEST0110 TO WA_NOTA_CTE.
            WA_NOTA_CTE-DOCNUM = P_CTE_AVULSO.
            APPEND WA_NOTA_CTE TO IT_CTE_INFO_NOTA.
          ELSE.
            MESSAGE S027.
          ENDIF.
        ENDIF.

        SORT IT_ITEM_NOTA BY DOCNUM.
        DELETE ADJACENT DUPLICATES FROM IT_ITEM_NOTA COMPARING DOCNUM.

        LOOP AT IT_ITEM_NOTA INTO WA_ITEM_NOTA.

          CLEAR: WA_NOTA_CTE.

          CALL FUNCTION 'J_1B_NF_DOCUMENT_READ'
            EXPORTING
              DOC_NUMBER         = WA_ITEM_NOTA-DOCNUM
            IMPORTING
              DOC_HEADER         = WA_CAB_NOTA
            TABLES
              DOC_PARTNER        = IT_NF_PARTNER
              DOC_ITEM           = IT_NF_ITEM
              DOC_ITEM_TAX       = IT_NF_ITEM_TAX
              DOC_HEADER_MSG     = IT_HEADER_MSG
              DOC_REFER_MSG      = IT_REFER_MSG
            EXCEPTIONS
              DOCUMENT_NOT_FOUND = 1
              DOCUM_LOCK         = 2
              OTHERS             = 3.

          IF SY-SUBRC IS INITIAL.
            WA_NOTA_CTE-DOCNUM_NF  = WA_CAB_NOTA-DOCNUM.
            WA_NOTA_CTE-PARTYP     = WA_CAB_NOTA-PARTYP.
            WA_NOTA_CTE-NFE        = WA_CAB_NOTA-NFE.
            WA_NOTA_CTE-MODELO     = WA_CAB_NOTA-MODEL.
            WA_NOTA_CTE-SERIE      = WA_CAB_NOTA-SERIES.
            IF WA_NOTA_CTE-NFE IS INITIAL.
              WRITE WA_CAB_NOTA-NFNUM TO WA_NOTA_CTE-NUMERO.
            ELSE.
              WRITE WA_CAB_NOTA-NFENUM TO WA_NOTA_CTE-NUMERO.

              SELECT SINGLE * INTO WA_ACT_NOTA
                FROM J_1BNFE_ACTIVE
               WHERE DOCNUM EQ WA_ITEM_NOTA-DOCNUM.

              IF SY-SUBRC IS INITIAL.
                WA_NOTA_CTE-DOCNUM9 = WA_ACT_NOTA-DOCNUM9.
                WA_NOTA_CTE-CDV     = WA_ACT_NOTA-CDV.
                CONCATENATE WA_ACT_NOTA-REGIO WA_ACT_NOTA-NFYEAR WA_ACT_NOTA-NFMONTH WA_ACT_NOTA-STCD1
                            WA_ACT_NOTA-MODEL WA_ACT_NOTA-SERIE  WA_ACT_NOTA-NFNUM9 WA_ACT_NOTA-DOCNUM9
                            WA_ACT_NOTA-CDV
                       INTO WA_NOTA_CTE-CHAVE.
              ENDIF.
            ENDIF.

            IF WA_CAB_NOTA-FORM IS INITIAL.
              WA_NOTA_CTE-CLIENTE    = WA_CAB_NOTA-PARID.
            ELSE.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  INPUT  = WA_CAB_NOTA-BRANCH
                IMPORTING
                  OUTPUT = WA_NOTA_CTE-CLIENTE.
            ENDIF.

            CALL FUNCTION 'Z_PARCEIRO_INFO'
              EXPORTING
                P_PARCEIRO   = WA_CAB_NOTA-PARID
                P_PARTYPE    = WA_CAB_NOTA-PARTYP
              CHANGING
                WA_INFO_PART = WA_INFO_PART.

            WA_NOTA_CTE-NAME1   = WA_INFO_PART-NAME1.
            WA_NOTA_CTE-STCD1   = WA_INFO_PART-STCD1.
            WA_NOTA_CTE-STCD2   = WA_INFO_PART-STCD2.
            WA_NOTA_CTE-PFISICA = WA_INFO_PART-STKZN.

            WA_NOTA_CTE-DOCNUM     = P_CTE_AVULSO.
            WA_NOTA_CTE-DTEMISSAO  = WA_CAB_NOTA-DOCDAT.

            CALL FUNCTION 'J_1B_NF_VALUE_DETERMINATION'
              EXPORTING
                NF_HEADER   = WA_CAB_NOTA
              IMPORTING
                EXT_HEADER  = WK_HEADER_ADD
              TABLES
                NF_ITEM     = IT_NF_ITEM
                NF_ITEM_TAX = IT_NF_ITEM_TAX.

            WA_NOTA_CTE-VL_BC          = WK_HEADER_ADD-ICMSBASE.
            WA_NOTA_CTE-VL_ICMS        = WK_HEADER_ADD-ICMSVAL.
            WA_NOTA_CTE-VL_BC_ST       = WK_HEADER_ADD-ICSTBASE.
            WA_NOTA_CTE-VL_ST          = WK_HEADER_ADD-ICSTVAL.
            WA_NOTA_CTE-VL_PRODUTOS    = WK_HEADER_ADD-NFNET.
            WA_NOTA_CTE-VL_NOTA_FISCAL = WK_HEADER_ADD-NFTOT.
            WA_NOTA_CTE-CFOP           = WA_ITEM_NOTA-CFOP.
            WA_NOTA_CTE-MATERIAL       = WA_ITEM_NOTA-MATNR.

            CALL FUNCTION 'Z_SD_BUSCA_SUFRAMA'
              EXPORTING
                P_PARID   = WA_NOTA_CTE-CLIENTE
                P_EMPRESA = WA_CAB_NOTA-BUKRS
              IMPORTING
                R_SUFRAMA = R_SUFRAMA.

            MOVE R_SUFRAMA TO WA_NOTA_CTE-PIN_SUFRAMA.

            WA_NOTA_CTE-QUANTIDADE = 0.
            WA_NOTA_CTE-PESO_FISCAL = 0.
            LOOP AT IT_NF_ITEM INTO WA_NF_ITEM.
              ADD WA_NF_ITEM-MENGE TO WA_NOTA_CTE-QUANTIDADE.
              WA_NOTA_CTE-UNIDADE = WA_NF_ITEM-MEINS.

              IF ( WA_DOC_TRANSP-ABFER = '2' ).
                SELECT SINGLE A~* INTO @DATA(_WL_LIPS)
                  FROM ZMMT_EE_ZGR_DOCS AS B INNER JOIN LIPS AS A ON B~AV_VBELN = A~VBELN
                 WHERE B~AV_VBELN EQ @WA_ITEM_TRANSP-VBELN
                   AND B~DOCNUM   EQ @WA_NF_ITEM-DOCNUM.
                IF ( SY-SUBRC = 0 ) AND ( _WL_LIPS-LFIMG > 0 ).
                  WA_NOTA_CTE-PESO_FISCAL = _WL_LIPS-LFIMG.
                  WA_NOTA_CTE-QUANTIDADE  = _WL_LIPS-BRGEW.
                ENDIF.
              ENDIF.
            ENDLOOP.

            IF WA_NOTA_CTE-UNIDADE <> 'KG'.

              SELECT SINGLE NTGEW GEWEI
                INTO (VL_NTGEW, VL_GEWEI)
                FROM J_1BNFDOC
               WHERE DOCNUM = WA_NOTA_CTE-DOCNUM_NF.

              IF NOT ( VL_NTGEW IS INITIAL ).
                WA_NOTA_CTE-QUANTIDADE = VL_NTGEW.
              ELSE.
                IF NOT TL_LIPS[] IS INITIAL.
                  CLEAR: WA_LIPS, WA_NOTA_CTE-QUANTIDADE, WA_NOTA_CTE-PESO_FISCAL.
                  LOOP AT TL_LIPS INTO WA_LIPS.
                    WA_NOTA_CTE-QUANTIDADE = WA_NOTA_CTE-QUANTIDADE + WA_LIPS-BRGEW.
                    WA_NOTA_CTE-PESO_FISCAL = WA_NOTA_CTE-PESO_FISCAL + WA_LIPS-LFIMG.
                  ENDLOOP.
                ENDIF.
              ENDIF.
              WA_NOTA_CTE-UNIDADE    = VL_GEWEI.

            ENDIF.

            "Algodao
            IF WA_NOTA_CTE-DOCNUM_NF IS NOT INITIAL.
              SELECT SINGLE *
                FROM J_1BNFLIN INTO @DATA(_WL_LIN_NF)
               WHERE DOCNUM EQ @WA_NOTA_CTE-DOCNUM_NF.

              IF ( SY-SUBRC EQ 0 ) AND ( ( _WL_LIN_NF-MATKL EQ '700330' ) OR ( _WL_LIN_NF-MATKL EQ '700140' ) ).
                SELECT SINGLE *
                  FROM J_1BNFDOC INTO @DATA(_WL_DOC_NF)
                 WHERE DOCNUM EQ @_WL_LIN_NF-DOCNUM.

                IF ( SY-SUBRC EQ 0 ) AND ( _WL_DOC_NF-BRGEW IS NOT INITIAL ).
                  WA_NOTA_CTE-QUANTIDADE = _WL_DOC_NF-BRGEW.
                  WA_NOTA_CTE-UNIDADE    = _WL_DOC_NF-GEWEI.
                ENDIF.
              ENDIF.
            ENDIF.

            APPEND WA_NOTA_CTE TO IT_CTE_INFO_NOTA.
          ENDIF.

          IF WA_CAB_NOTA-DIRECT NE '1'.

            IF WA_CAB_NOTA-PARVW EQ C_WE.
              DESTINATARIO-PARVW = WA_CAB_NOTA-PARVW.
              DESTINATARIO-PARID = WA_CAB_NOTA-PARID.
            ELSE.
              " Modifica√ß√£o do Destinatario da Mercadoria.
              READ TABLE IT_NF_PARTNER INTO DESTINATARIO WITH KEY PARVW  = C_WE.
            ENDIF.
            "Comentando codigo abaixo - Regra ser√° analisada novamente -> CS2017000328
*          READ TABLE IT_NF_PARTNER INTO DESTINATARIO_AUX WITH KEY PARVW = C_AG.
*          IF ( DESTINATARIO-PARID EQ DESTINATARIO_AUX-PARID ).
*            CLEAR: DESTINATARIO, DESTINATARIO_AUX.
*            READ TABLE IT_NF_PARTNER INTO DESTINATARIO WITH KEY PARVW  = C_LR.
*          ENDIF.
          ENDIF.
        ENDLOOP.

      ENDIF.
    ENDIF.

  ENDIF.

ENDFUNCTION.
