class ZCL_VEICULOS definition
  public
  final
  create public .

public section.

  interfaces ZIF_VEICULOS .
protected section.
private section.
ENDCLASS.



CLASS ZCL_VEICULOS IMPLEMENTATION.


  METHOD ZIF_VEICULOS~GET_CK_VEICULO_REBOQUE.

    R_IF_VEICULOS = ME.

    CHECK ME->ZIF_VEICULOS~AT_VEICULO-TP_VEICULO EQ '0'.

    RAISE EXCEPTION TYPE ZCX_VEICULOS
      EXPORTING
        TEXTID    = VALUE #( MSGID     = ZCX_VEICULOS=>ZCX_VEICULO_NAO_REBOQUE-MSGID
                             MSGNO     = ZCX_VEICULOS=>ZCX_VEICULO_NAO_REBOQUE-MSGNO
                             ATTR1     = ME->ZIF_VEICULOS~AT_VEICULO-PC_VEICULO )
        MSGID     = ZCX_VEICULOS=>ZCX_VEICULO_NAO_REBOQUE-MSGID
        MSGNO     = ZCX_VEICULOS=>ZCX_VEICULO_NAO_REBOQUE-MSGNO
        MSGTY     = 'E'
        MSGV1     = CONV #( ME->ZIF_VEICULOS~AT_VEICULO-PC_VEICULO )
        TRANSACAO = 'ZLES0003'.

  ENDMETHOD.


  METHOD ZIF_VEICULOS~GET_CK_VEICULO_TRACAO.

    R_IF_VEICULOS = ME.

    CHECK ME->ZIF_VEICULOS~AT_VEICULO-TP_VEICULO NE '0'.

    RAISE EXCEPTION TYPE ZCX_VEICULOS
      EXPORTING
        TEXTID    = VALUE #( MSGID     = ZCX_VEICULOS=>ZCX_VEICULO_NAO_TRACAO-MSGID
                             MSGNO     = ZCX_VEICULOS=>ZCX_VEICULO_NAO_TRACAO-MSGNO
                             ATTR1     = ME->ZIF_VEICULOS~AT_VEICULO-PC_VEICULO )
        MSGID     = ZCX_VEICULOS=>ZCX_VEICULO_NAO_TRACAO-MSGID
        MSGNO     = ZCX_VEICULOS=>ZCX_VEICULO_NAO_TRACAO-MSGNO
        MSGTY     = 'E'
        MSGV1     = CONV #( ME->ZIF_VEICULOS~AT_VEICULO-PC_VEICULO )
        TRANSACAO = 'ZLES0003'.

  ENDMETHOD.


  METHOD ZIF_VEICULOS~GET_INSTANCE.

    IF ZIF_VEICULOS~AT_IF_VEICULOS IS NOT BOUND.
      CREATE OBJECT ZIF_VEICULOS~AT_IF_VEICULOS TYPE ZCL_VEICULOS.
    ENDIF.
    R_IF_VEICULOS = ZIF_VEICULOS~AT_IF_VEICULOS.

  ENDMETHOD.


  METHOD ZIF_VEICULOS~GET_TIPO_CONTRATO.

    R_IF_VEICULOS = ME.

    IF ME->ZIF_VEICULOS~AT_VEICULO-AGREGADO = 1.
      E_TIPO_CONTRATO = '0000000001'.
    ELSE.
      E_TIPO_CONTRATO = '0000000002'.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_VEICULOS~GET_VALIDA_PLACA.

    DATA(LC_PLACA) = COND STRING( WHEN I_PLACA IS INITIAL THEN ME->ZIF_VEICULOS~AT_VEICULO-PC_VEICULO ELSE I_PLACA ).

    FIND REGEX '[A-Z]{3}[0-9]{1}[A-Z]{1}[0-9]{2}' IN LC_PLACA.
    IF SY-SUBRC IS NOT INITIAL.
      FIND REGEX '[A-Z]{3}[0-9]{4}' IN LC_PLACA.
      IF SY-SUBRC IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_VEICULOS
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_VEICULOS=>ZCX_VEICULO_PLACA_PADRAO-MSGID
                              MSGNO = ZCX_VEICULOS=>ZCX_VEICULO_PLACA_PADRAO-MSGNO
                              ATTR1 = LC_PLACA )
            MSGID  = ZCX_VEICULOS=>ZCX_VEICULO_PLACA_PADRAO-MSGID
            MSGNO  = ZCX_VEICULOS=>ZCX_VEICULO_PLACA_PADRAO-MSGNO
            MSGTY  = 'E'
            MSGV1  = CONV #( LC_PLACA ).
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_VEICULOS~SET_VEICULO.

    R_IF_VEICULOS = ME.

    SELECT SINGLE * INTO @ME->ZIF_VEICULOS~AT_VEICULO
      FROM ZLEST0002
     WHERE PC_VEICULO EQ @I_PLACA.

    CHECK SY-SUBRC IS NOT INITIAL.

    RAISE EXCEPTION TYPE ZCX_VEICULOS
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_VEICULOS=>ZCX_VEICULO_NOT_FOUND-MSGID
                          MSGNO = ZCX_VEICULOS=>ZCX_VEICULO_NOT_FOUND-MSGNO
                          ATTR1 = CONV #( I_PLACA ) )
        MSGID  = ZCX_VEICULOS=>ZCX_VEICULO_NOT_FOUND-MSGID
        MSGNO  = ZCX_VEICULOS=>ZCX_VEICULO_NOT_FOUND-MSGNO
        MSGTY  = 'E'
        MSGV1  = CONV #( I_PLACA ).

  ENDMETHOD.
ENDCLASS.
