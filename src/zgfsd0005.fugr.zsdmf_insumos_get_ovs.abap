FUNCTION ZSDMF_INSUMOS_GET_OVS.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(IR_VBELN_VA) TYPE  FIP_T_VBELN_RANGE
*"     REFERENCE(IR_ERDAT) TYPE  FIP_T_ERDAT_RANGE OPTIONAL
*"     REFERENCE(IV_TODOS) TYPE  FLAG DEFAULT SPACE
*"     REFERENCE(IV_NO_DELETE) TYPE  FLAG DEFAULT SPACE
*"     REFERENCE(IR_AUART) TYPE  AUART DEFAULT 'ZFTE'
*"  EXPORTING
*"     REFERENCE(EV_ERRO)
*"  TABLES
*"      ET_OVS STRUCTURE  ZSDS085
*"----------------------------------------------------------------------

  DATA LT_DADOS TYPE ZSDC086.
  DATA LT_SET_IN TYPE TABLE OF RGSBV.
  DATA LT_SET_EX TYPE TABLE OF RGSBV.

  CLEAR: ET_OVS[], GR_GRUOP[].

  IF IR_AUART IS NOT INITIAL.
    DATA(R_AUART) = VALUE FIP_T_VBELN_RANGE( ( SIGN = 'I' OPTION = 'EQ' LOW  = IR_AUART  ) ).
  ENDIF.

  SELECT VBAP~VBELN VBAP~POSNR VBAP~MATNR VKBUR WERKS KNUMV KUNNR
         VBAK~ERDAT VBAP~WAERK KWMENG VBAP~GEWEI RFMNG VBTYP_V VBTYP_N LIFSP
    FROM VBAP
    INNER JOIN VBAK ON VBAP~VBELN = VBAK~VBELN
    LEFT JOIN VBEP ON VBEP~VBELN = VBAP~VBELN
                  AND VBEP~POSNR = VBAP~POSNR
    LEFT JOIN VBFA ON VBFA~VBELV = VBAP~VBELN
                  AND VBFA~POSNV = VBAP~POSNR
      INTO TABLE LT_DADOS
      WHERE VBAP~VBELN IN IR_VBELN_VA
        AND VBAK~ERDAT IN IR_ERDAT
        "AND vbfa~vbtyp_v = 'C'
        "AND vbfa~vbtyp_n <> 'J'
        AND VBAK~AUART IN R_AUART.

  "DELETE lt_dados WHERE vbtyp_n = 'J'.

  SORT LT_DADOS BY VBELN POSNR MATNR.

  PERFORM F_RETIRA_FATURADOS CHANGING LT_DADOS[].

  PERFORM F_CARREGA_SET USING 'ZSDT0087_ATU_IMPOSTOS_IN' CHANGING LT_SET_IN.
  PERFORM F_CARREGA_SET USING 'ZSDT0087_ATU_IMPOSTOS_EX' CHANGING LT_SET_EX.

  PERFORM F_CARREGA_GRUPOS USING LT_SET_IN LT_SET_EX.

  DELETE LT_DADOS WHERE LIFSP = '12'.
  "DELETE lt_dados WHERE rfmng = 0.

  CHECK LT_DADOS[] IS NOT INITIAL.

  SELECT VBELN,PARVW,VBPA~KUNNR,VBPA~LIFNR,LFA1~REGIO AS REGIO_LFA1,KNA1~REGIO AS REGIO_KNA1
      FROM VBPA
    LEFT JOIN LFA1 ON VBPA~LIFNR = LFA1~LIFNR
    LEFT JOIN KNA1 ON VBPA~KUNNR = KNA1~KUNNR
    INTO TABLE @DATA(LT_VBPA)
    FOR ALL ENTRIES IN @LT_DADOS
      WHERE VBELN = @LT_DADOS-VBELN
        AND PARVW IN ( 'PC', 'WE' ).

  SELECT DOC_SIMULACAO,VBELN,POSNR FROM ZSDT0041
    INTO TABLE @DATA(LT_0041)
    FOR ALL ENTRIES IN @LT_DADOS
    WHERE VBELN = @LT_DADOS-VBELN.

  SELECT DOC_SIMULACAO VBELN POSNV AS POSNR FROM ZSDT0090
    APPENDING TABLE LT_0041
      FOR ALL ENTRIES IN LT_DADOS
        WHERE VBELN = LT_DADOS-VBELN
          AND ESTORNO = SPACE.

  SELECT DOC_SIMULACAO VBELV POSNV FROM ZSDT0090
    APPENDING TABLE LT_0041
      FOR ALL ENTRIES IN LT_DADOS
        WHERE VBELV = LT_DADOS-VBELN
          AND ESTORNO = SPACE.

  SORT LT_0041 BY DOC_SIMULACAO VBELN POSNR.

  DELETE ADJACENT DUPLICATES FROM LT_0041 COMPARING DOC_SIMULACAO VBELN POSNR.

  IF LT_0041 IS NOT INITIAL.

    " comentado para gerar sempre o J, mas nao inteferir se aparece no grid ou nao...
*    SELECT doc_simulacao,vbelv,posnv FROM zsdt0090
*      INTO TABLE @DATA(lt_0090)
*        FOR ALL ENTRIES IN @lt_0041
*          WHERE doc_simulacao = @lt_0041-doc_simulacao
*            AND categoria = 'J'.

  ENDIF.

  SELECT MARA~MATNR,MAKTX,EXTWG FROM MARA
    INNER JOIN MAKT ON MAKT~MATNR = MARA~MATNR
                   AND SPRAS = @SY-LANGU
      INTO TABLE @DATA(LT_MARA)
        FOR ALL ENTRIES IN @LT_DADOS
          WHERE MARA~MATNR = @LT_DADOS-MATNR.

  SELECT KNUMV, KPOSN,KSCHL,KBETR,KWERT,KPEIN, KMEIN FROM V_KONV
    INTO TABLE @DATA(LT_KONV)
      FOR ALL ENTRIES IN @LT_DADOS
            WHERE KNUMV = @LT_DADOS-KNUMV
              AND KPOSN = @LT_DADOS-POSNR.

  CHECK SY-SUBRC EQ 0.

  "CLEAR gv_cache_j1btax.

  LOOP AT LT_DADOS ASSIGNING FIELD-SYMBOL(<FS_DADOS>).

    APPEND INITIAL LINE TO ET_OVS ASSIGNING FIELD-SYMBOL(<FS_OV>).

    <FS_OV>-DOC_SIMULACAO = VALUE #( LT_0041[ VBELN = <FS_DADOS>-VBELN ]-DOC_SIMULACAO DEFAULT '' ).
    <FS_OV>-MAKTX = VALUE #( LT_MARA[ MATNR = <FS_DADOS>-MATNR ]-MAKTX DEFAULT '' ).
    <FS_OV>-EXTWG = VALUE #( LT_MARA[ MATNR = <FS_DADOS>-MATNR ]-EXTWG DEFAULT '' ).

    <FS_OV>-OBJNR = <FS_DADOS>-VBELN && <FS_DADOS>-POSNR.

    <FS_OV>-SHIPFROM = VALUE #( LT_VBPA[ VBELN = <FS_DADOS>-VBELN PARVW = 'PC' ]-REGIO_LFA1 DEFAULT '' ).
    <FS_OV>-SHIPTO = VALUE #( LT_VBPA[ VBELN = <FS_DADOS>-VBELN PARVW = 'WE' ]-REGIO_KNA1 DEFAULT '' ).

    DATA(LV_KPEIN_ICMI) = VALUE #( LT_KONV[ KSCHL = 'ICMI' KPOSN = <FS_DADOS>-POSNR ]-KPEIN DEFAULT '1' ).

    IF LV_KPEIN_ICMI IS INITIAL.
      LV_KPEIN_ICMI = 1.
    ENDIF.

    <FS_OV>-KWERT_RB00 = VALUE #( LT_KONV[ KNUMV = <FS_DADOS>-KNUMV KSCHL = 'RB00' KPOSN = <FS_DADOS>-POSNR ]-KWERT DEFAULT '' ).
    <FS_OV>-KWERT_PR00 = VALUE #( LT_KONV[ KNUMV = <FS_DADOS>-KNUMV KSCHL = 'PR00' KPOSN = <FS_DADOS>-POSNR ]-KBETR DEFAULT '' ).
    <FS_OV>-KWERT_ICMI = VALUE #( LT_KONV[ KNUMV = <FS_DADOS>-KNUMV KSCHL = 'ICMI' KPOSN = <FS_DADOS>-POSNR ]-KWERT DEFAULT '' ) / LV_KPEIN_ICMI.
    <FS_OV>-KBETR_ICBS = VALUE #( LT_KONV[ KNUMV = <FS_DADOS>-KNUMV KSCHL = 'ICBS' KPOSN = <FS_DADOS>-POSNR ]-KBETR DEFAULT '' ) / 10.
    <FS_OV>-KBETR_ICVA = VALUE #( LT_KONV[ KNUMV = <FS_DADOS>-KNUMV KSCHL = 'ICVA' KPOSN = <FS_DADOS>-POSNR ]-KBETR DEFAULT '' ) / 10.

    <FS_OV>-VLR_ICMS = <FS_OV>-KWERT_ICMI * ( <FS_OV>-KBETR_ICBS / 100 ).
    <FS_OV>-VLR_ICVA = <FS_OV>-VLR_ICMS * ( <FS_OV>-KBETR_ICVA / 100 ).
    <FS_OV>-VLR_LIQ = <FS_OV>-KWERT_ICMI - <FS_OV>-VLR_ICVA.

*    READ TABLE lt_0090 TRANSPORTING NO FIELDS
*      WITH KEY doc_simulacao = <fs_ov>-doc_simulacao
*               vbelv = <fs_dados>-vbeln
*               posnv = <fs_dados>-posnr.
*
*    IF sy-subrc EQ 0.
*      <fs_ov>-status_atu = gc_ja_atu.
*    ELSE.
    <FS_OV>-STATUS_ATU = GC_POSSIVEL.
*    ENDIF.

*    IF <fs_ov>-shipfrom = <fs_ov>-shipto .
*
*      <fs_ov>-vlr_diferenca = 0.
*
*    ELSE.

*    ENDIF.


    <FS_OV>-VBELN = <FS_DADOS>-VBELN.
    <FS_OV>-POSNR = <FS_DADOS>-POSNR.
    <FS_OV>-MATNR = <FS_DADOS>-MATNR.
    <FS_OV>-VKBUR = <FS_DADOS>-VKBUR.
    <FS_OV>-KUNNR = <FS_DADOS>-KUNNR.
    <FS_OV>-WERKS = <FS_DADOS>-WERKS.
    <FS_OV>-ERDAT = <FS_DADOS>-ERDAT.
    <FS_OV>-WAERK = <FS_DADOS>-WAERK.
    <FS_OV>-KNUMV = <FS_DADOS>-KNUMV.
    <FS_OV>-KWMENG = <FS_DADOS>-KWMENG.
    <FS_OV>-GEWEI = <FS_DADOS>-GEWEI.

    PERFORM F_APLICAR_J1BTAX2 CHANGING <FS_OV> .

    PERFORM F_APLICAR_REGRA_EX USING LT_SET_EX CHANGING <FS_OV> .

    <FS_OV>-ASSOCIADO = SPACE.
    <FS_OV>-ASSOCIADO_COLOR = SPACE.

    <FS_OV>-GEWEI_PR00 = VALUE #( LT_KONV[ KSCHL = 'PR00' KPOSN = <FS_DADOS>-POSNR ]-KMEIN DEFAULT <FS_OV>-GEWEI ).

    IF <FS_OV>-GEWEI_PR00 = 'TO' AND <FS_OV>-GEWEI = 'KG'.

      <FS_OV>-KWMENG_PR00 = <FS_OV>-KWMENG / 1000.

    ENDIF.

  ENDLOOP.

  CHECK IV_NO_DELETE IS INITIAL.

  DELETE ET_OVS WHERE ( EXTWG <> '100' AND EXTWG <> '104' ).
  DELETE ET_OVS WHERE VLR_DIFERENCA = 0.

  IF IV_TODOS = ABAP_FALSE.
    DELETE ET_OVS WHERE STATUS_ATU IS NOT INITIAL.
  ENDIF.

  SORT ET_OVS BY DOC_SIMULACAO VBELN POSNR ASCENDING.

ENDFUNCTION.
