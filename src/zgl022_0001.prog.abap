*----------------------------------------------------------------------*
***INCLUDE ZGL022_0001 .
*----------------------------------------------------------------------*

DATA: DG_DYNDOC_ID     TYPE REF TO CL_DD_DOCUMENT.

DATA: BEGIN OF GRAPHIC_TABLE OCCURS 0,
        LINE(255) TYPE X,
      END OF GRAPHIC_TABLE.

DATA: L_GRAPHIC_XSTR TYPE XSTRING.
DATA: GRAPHIC_SIZE   TYPE I.
DATA: L_GRAPHIC_CONV TYPE I.
DATA: L_GRAPHIC_OFFS TYPE I.

*---------- Definition -----------------------------------------------*
CLASS LCL_EVENT_HANDLER DEFINITION.
  PUBLIC SECTION.
    METHODS HANDLE_HOTSPOT_CLICK
                  FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
      IMPORTING E_COLUMN_ID
                  ES_ROW_NO.
*    METHODS TOP_OF_PAGE
*      FOR EVENT TOP_OF_PAGE OF CL_GUI_ALV_GRID
*      IMPORTING E_DYNDOC_ID.
ENDCLASS.                    "lcl_event_handler DEFINITION

*---------- Inclementação  -------------------------------------------*
CLASS LCL_EVENT_HANDLER IMPLEMENTATION.
  METHOD HANDLE_HOTSPOT_CLICK.
    PERFORM HANDLE_HOTSPOT_CLICK
       USING ES_ROW_NO-ROW_ID
             E_COLUMN_ID-FIELDNAME.
  ENDMETHOD.                    "handle_hotspot_click
*  METHOD TOP_OF_PAGE.
*    PERFORM EVENT_TOP_OF_PAGE USING DG_DYNDOC_ID.
*  ENDMETHOD.
ENDCLASS.                    "lcl_event_handler IMPLEMENTATION

*&---------------------------------------------------------------------*
* DATA DEFINITION ALV
*&---------------------------------------------------------------------*
DATA: GF_FIRST_DISPLAY TYPE C VALUE 'X',
      CTL_CCCONTAINER  TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      DG_SPLITTER      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_SPLITTER_2    TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      PICTURE          TYPE REF TO CL_GUI_PICTURE,
      DG_PARENT_HTML   TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_HTML1  TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_HTML2  TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_GRID   TYPE REF TO CL_GUI_CONTAINER,
      DG_HTML_CNTRL    TYPE REF TO CL_GUI_HTML_VIEWER,
      CTL_ALV_RESUMO   TYPE REF TO CL_GUI_ALV_GRID,
      GS_SCROLL_COL    TYPE LVC_S_COL,
      GS_SCROLL_ROW    TYPE LVC_S_ROID,
      GS_LAYOUT        TYPE LVC_S_LAYO,
      GS_VARIANT       TYPE DISVARIANT,
      IT_EXCLUDE_FCODE TYPE UI_FUNCTIONS,
      IT_FIELDCATALOG  TYPE LVC_T_FCAT,
      OK_CODE          LIKE SY-UCOMM,
      EVENT_HANDLER    TYPE REF TO LCL_EVENT_HANDLER,
      OK_CODE_0002     LIKE SY-UCOMM,
      IT_LFB1          TYPE TABLE OF LFB1 WITH HEADER LINE,
      IT_LFA1          TYPE TABLE OF LFA1 WITH HEADER LINE,
      IT_KNB1          TYPE TABLE OF KNB1 WITH HEADER LINE,
      IT_KNA1          TYPE TABLE OF KNA1 WITH HEADER LINE,
      IT_KNC1          TYPE TABLE OF KNC1 WITH HEADER LINE,
      IT_KNC3          TYPE TABLE OF KNC3 WITH HEADER LINE,
      IT_LFC1          TYPE TABLE OF LFC1 WITH HEADER LINE,
      IT_LFC3          TYPE TABLE OF LFC3 WITH HEADER LINE,
      WA_KNC1          TYPE KNC1,
      WA_LFC1          TYPE LFC1.

*&---------------------------------------------------------------------*
*&      Form  HANDLE_HOTSPOT_CLICK_0102
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ES_ROW_NO_ROW_ID  text
*      -->P_E_COLUMN_ID_FIELDNAME  text
*----------------------------------------------------------------------*
FORM HANDLE_HOTSPOT_CLICK
       USING VALUE(ROW_ID)    LIKE LVC_S_ROID-ROW_ID
             VALUE(FIELDNAME) LIKE LVC_S_COL-FIELDNAME.

  CASE FIELDNAME.
    WHEN 'ICONE'.
*   Copy the selected cancellation reason to the document

      READ TABLE IT_RESUMO_ALV INDEX ROW_ID INTO WA_RESUMO_ALV.
      MOVE-CORRESPONDING WA_RESUMO_ALV TO WA_RESUMO.
      CASE WA_RESUMO-TIPO.
        WHEN 'K'. "K  Fornecedores
          PERFORM BUSCA_DADOS_SALDO_FORNECEDOR.
          CALL SCREEN 0002 STARTING AT 35 10 ENDING AT 125 25.
        WHEN 'D'. "D  Clientes
          PERFORM BUSCA_DADOS_SALDO_CLIENTE.
          CALL SCREEN 0002 STARTING AT 35 10 ENDING AT 125 25.
      ENDCASE.

  ENDCASE.

ENDFORM.                    " HANDLE_HOTSPOT_CLICK_0102

*&---------------------------------------------------------------------*
*&      Module  CREATE_OBJECTS  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE CREATE_OBJECTS OUTPUT.

  DATA: URL(255) TYPE C.

* Create container and ALV objects only once
  IF GF_FIRST_DISPLAY = 'X'.
    IF S_ESTRB NE '2'.
      PERFORM AJUSTA_TOTAIS.
    ENDIF.

*   Create object for container
    CREATE OBJECT CTL_CCCONTAINER
      EXPORTING
        CONTAINER_NAME = 'ALV_0001'.

    IF DG_DYNDOC_ID IS INITIAL.
      CREATE OBJECT DG_DYNDOC_ID
        EXPORTING
          STYLE = 'ALV_GRID'.
    ENDIF.

    CREATE OBJECT DG_SPLITTER
      EXPORTING
        PARENT  = CTL_CCCONTAINER
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_HTML.

    CREATE OBJECT DG_SPLITTER_2
      EXPORTING
        PARENT  = DG_PARENT_HTML
        ROWS    = 1
        COLUMNS = 2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_HTML1.

    CALL METHOD DG_SPLITTER_2->SET_COLUMN_WIDTH
      EXPORTING
        ID    = 1
        WIDTH = 40.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 2
      RECEIVING
        CONTAINER = DG_PARENT_HTML2.

    CREATE OBJECT PICTURE
      EXPORTING
        PARENT = DG_PARENT_HTML2.

    PERFORM F_PEGA_IMAGEM USING 'LOGO_NOVO' CHANGING URL.

    CALL METHOD PICTURE->LOAD_PICTURE_FROM_URL
      EXPORTING
        URL = URL.

    CALL METHOD PICTURE->SET_DISPLAY_MODE
      EXPORTING
        DISPLAY_MODE = PICTURE->DISPLAY_MODE_FIT_CENTER.

    CALL METHOD DG_SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_GRID.

    CALL METHOD DG_SPLITTER->SET_ROW_HEIGHT
      EXPORTING
        ID     = 1
        HEIGHT = 15.

*   Create object for ALV grid inside container
    CREATE OBJECT CTL_ALV_RESUMO
      EXPORTING
        I_PARENT = DG_PARENT_GRID.

*   Fill field catalog
    PERFORM FILL_IT_FIELDCATALOG.

*   Fill info for layout variant
    PERFORM FILL_GS_VARIANT.

    "GS_LAYOUT-SEL_MODE = 'A'.
    GS_LAYOUT-ZEBRA      = 'X'.
    "GS_LAYOUT-CTAB_FNAME = 'CELLCOLOR'.

*   Create Object for Event Handler
    CREATE OBJECT EVENT_HANDLER.
    SET HANDLER EVENT_HANDLER->HANDLE_HOTSPOT_CLICK FOR CTL_ALV_RESUMO.
*    SET HANDLER EVENT_HANDLER->TOP_OF_PAGE          FOR CTL_ALV_RESUMO.

*   Send data to ALV grid
    CALL METHOD CTL_ALV_RESUMO->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT
        IS_VARIANT           = GS_VARIANT
        I_SAVE               = 'A'
        IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
      CHANGING
        IT_FIELDCATALOG      = IT_FIELDCATALOG
        IT_OUTTAB            = IT_RESUMO_ALV[].

    PERFORM CRIA_HTML_CAB.

    CLEAR: GF_FIRST_DISPLAY.

  ENDIF.

  CALL METHOD CTL_ALV_RESUMO->REFRESH_TABLE_DISPLAY.

  CALL METHOD CTL_ALV_RESUMO->SET_SCROLL_INFO_VIA_ID
    EXPORTING
      IS_COL_INFO = GS_SCROLL_COL
      IS_ROW_NO   = GS_SCROLL_ROW.

ENDMODULE.                 " CREATE_OBJECTS  OUTPUT


*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FILL_GS_VARIANT .

  GS_VARIANT-REPORT      = SY-REPID.
  GS_VARIANT-HANDLE      = SPACE.
  GS_VARIANT-LOG_GROUP   = SPACE.
  GS_VARIANT-USERNAME    = SPACE.
  GS_VARIANT-VARIANT     = SPACE.
  GS_VARIANT-TEXT        = SPACE.
  GS_VARIANT-DEPENDVARS  = SPACE.

ENDFORM.                    " FILL_GS_VARIANT

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG .

  DATA: WA_FIELDCATALOG TYPE LVC_S_FCAT,
        LC_POS          TYPE LVC_COLPOS,
        LC_EXIT_CONV    TYPE CONVEXIT.

  CLEAR: IT_FIELDCATALOG.

  LC_POS = 0.

  ADD 1 TO LC_POS.
  CLEAR: WA_FIELDCATALOG.
  WA_FIELDCATALOG-FIELDNAME = 'ICONE'.
  WA_FIELDCATALOG-COL_POS   = LC_POS.
  WA_FIELDCATALOG-REPTEXT   = 'Detalhe'.
  WA_FIELDCATALOG-OUTPUTLEN = 4.
  WA_FIELDCATALOG-HOTSPOT   = 'X'.
  WA_FIELDCATALOG-ICON      = 'X'.
  APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

  ADD 1 TO LC_POS.
  CLEAR: WA_FIELDCATALOG.
  WA_FIELDCATALOG-FIELDNAME = 'BALANCO'.
  WA_FIELDCATALOG-COL_POS   = LC_POS.
  WA_FIELDCATALOG-REPTEXT   = 'Balanço'.
  WA_FIELDCATALOG-OUTPUTLEN = 30.
  APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

  ADD 1 TO LC_POS.
  CLEAR: WA_FIELDCATALOG.
  WA_FIELDCATALOG-FIELDNAME = 'NOTA'.
  WA_FIELDCATALOG-COL_POS   = LC_POS.
  WA_FIELDCATALOG-REPTEXT   = 'Nota'.
  WA_FIELDCATALOG-OUTPUTLEN = 30.
  APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

  LC_EXIT_CONV = 'ALPHA'.
  ADD 1 TO LC_POS.
  CLEAR: WA_FIELDCATALOG.
  WA_FIELDCATALOG-TABNAME   = 'IT_RESUMO_ALV'.
  WA_FIELDCATALOG-FIELDNAME = 'CONTA'.
  WA_FIELDCATALOG-COL_POS   = LC_POS.
  WA_FIELDCATALOG-REPTEXT   = 'Conta'.
  WA_FIELDCATALOG-OUTPUTLEN = 10.
  WA_FIELDCATALOG-CONVEXIT  = LC_EXIT_CONV.
  WA_FIELDCATALOG-JUST      = 'R'.
  APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

  ADD 1 TO LC_POS.
  CLEAR: WA_FIELDCATALOG.
  WA_FIELDCATALOG-FIELDNAME = 'DS_CONTA'.
  WA_FIELDCATALOG-COL_POS   = LC_POS.
  WA_FIELDCATALOG-REPTEXT   = 'Descrição'.
  WA_FIELDCATALOG-OUTPUTLEN = 35.
  APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

  ADD 1 TO LC_POS.
  CLEAR: WA_FIELDCATALOG.
  WA_FIELDCATALOG-FIELDNAME = 'VL_FECHAMENTO'.
  WA_FIELDCATALOG-COL_POS   = LC_POS.
  CONCATENATE S_MES_F(2) '/' S_MES_F+2(4) INTO WA_FIELDCATALOG-REPTEXT.
  "WA_FIELDCATALOG-REPTEXT   = 'Vl. Fechameno'.
  WA_FIELDCATALOG-OUTPUTLEN = 15.
  WA_FIELDCATALOG-DO_SUM    = 'X'.
  APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

  IF ( S_MES_U IS NOT INITIAL ) AND ( S_MES_U NE S_MES_C ).
    ADD 1 TO LC_POS.
    CLEAR: WA_FIELDCATALOG.
    WA_FIELDCATALOG-FIELDNAME = 'VL_ULTIMO'.
    WA_FIELDCATALOG-COL_POS   = LC_POS.
    "WA_FIELDCATALOG-REPTEXT   = 'Vl. Ult. Fechamento'.
    CONCATENATE S_MES_U(2) '/' S_MES_U+2(4) INTO WA_FIELDCATALOG-REPTEXT.
    WA_FIELDCATALOG-OUTPUTLEN = 15.
    WA_FIELDCATALOG-DO_SUM    = 'X'.
    APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.
  ENDIF.

  IF S_MES_C IS NOT INITIAL.
    ADD 1 TO LC_POS.
    CLEAR: WA_FIELDCATALOG.
    WA_FIELDCATALOG-FIELDNAME = 'VL_COMPARATIVO'.
    WA_FIELDCATALOG-COL_POS   = LC_POS.
    "WA_FIELDCATALOG-REPTEXT   = 'Vl. Comparação'.
    CONCATENATE S_MES_C(2) '/' S_MES_C+2(4) INTO WA_FIELDCATALOG-REPTEXT.
    WA_FIELDCATALOG-OUTPUTLEN = 15.
    WA_FIELDCATALOG-DO_SUM    = 'X'.
    APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.
  ENDIF.

  """"""""""""""""""""""""""""""""""""""""""""""
  IF S_ESTRB EQ '2' OR S_ESTRB EQ '3'.

    ADD 1 TO LC_POS.
    CLEAR: WA_FIELDCATALOG.
    WA_FIELDCATALOG-FIELDNAME = 'OBJ_CUSTO'.
    WA_FIELDCATALOG-COL_POS   = LC_POS.
    WA_FIELDCATALOG-REPTEXT   = 'T.Custo'.
    WA_FIELDCATALOG-OUTPUTLEN = 35.
    APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

    ADD 1 TO LC_POS.
    CLEAR: WA_FIELDCATALOG.
    WA_FIELDCATALOG-FIELDNAME = 'OBJ_CUSTO_TX'.
    WA_FIELDCATALOG-COL_POS   = LC_POS.
    WA_FIELDCATALOG-REPTEXT   = 'Desc. Custo'.
    WA_FIELDCATALOG-OUTPUTLEN = 35.
    APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

    ADD 1 TO LC_POS.
    CLEAR: WA_FIELDCATALOG.
    WA_FIELDCATALOG-FIELDNAME = 'OBJ_LUCRO'.
    WA_FIELDCATALOG-COL_POS   = LC_POS.
    WA_FIELDCATALOG-REPTEXT   = 'C.Lucro'.
    WA_FIELDCATALOG-OUTPUTLEN = 35.
    APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

    ADD 1 TO LC_POS.
    CLEAR: WA_FIELDCATALOG.
    WA_FIELDCATALOG-FIELDNAME = 'OBJ_LUCRO_TX'.
    WA_FIELDCATALOG-COL_POS   = LC_POS.
    WA_FIELDCATALOG-REPTEXT   = 'Desc. Centro de Lucro'.
    WA_FIELDCATALOG-OUTPUTLEN = 35.
    APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

    ADD 1 TO LC_POS.
    CLEAR: WA_FIELDCATALOG.
    WA_FIELDCATALOG-FIELDNAME = 'OBJ_GRUPO'.
    WA_FIELDCATALOG-COL_POS   = LC_POS.
    WA_FIELDCATALOG-REPTEXT   = 'G.Mercadoria'.
    WA_FIELDCATALOG-OUTPUTLEN = 35.
    APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

    ADD 1 TO LC_POS.
    CLEAR: WA_FIELDCATALOG.
    WA_FIELDCATALOG-FIELDNAME = 'OBJ_GRUPO_TX'.
    WA_FIELDCATALOG-COL_POS   = LC_POS.
    WA_FIELDCATALOG-REPTEXT   = 'Desc. Grupo Merc.'.
    WA_FIELDCATALOG-OUTPUTLEN = 35.
    APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

  ENDIF.
  """"""""""""""""""""""""""""""""""""""""""""""

ENDFORM.                    " FILL_IT_FIELDCATALOG

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0001 INPUT.

ENDMODULE.                 " USER_COMMAND_0001  INPUT


*&---------------------------------------------------------------------*
*&      Form  BUSCA_DADOS_SALDO_FORNECEDOR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM BUSCA_DADOS_SALDO_FORNECEDOR .

  DATA: IT_CONTAS            TYPE ZCT_EMP_CONTAS,
        WA_CONTAS            TYPE ZLC_EMP_CONTAS,
        VG_LAST_DAY          TYPE SY-DATUM,
        VG_MONAT             TYPE MONAT,
        IT_BSXS              TYPE TABLE OF BSIS WITH HEADER LINE,
        IT_BSXK              TYPE TABLE OF BSIK WITH HEADER LINE,
        IT_BSXD              TYPE TABLE OF BSID WITH HEADER LINE,
        IT_SALDO_CONTAS      TYPE TABLE OF ZDE_FI_GL_SALDO_FAGLFLEXT WITH HEADER LINE,
        IT_SALDO_PARCEIRO    TYPE TABLE OF ZDE_FI_GL_SALDO_FAGLFLEXT WITH HEADER LINE,
        IT_SALDO_PAR_CTA     TYPE TABLE OF ZDE_FI_GL_SALDO_FAGLFLEXT2 WITH HEADER LINE,
        VG_RAZAO_ESPECIAL(1),
        IT_T074              TYPE TABLE OF T074 WITH HEADER LINE.

  "VG_RAZAO_ESPECIAL = ABAP_FALSE.

  "PERFORM VERIFICA_RAZAO_ESPECIAL TABLES IT_T074 USING WA_RESUMO-CONTA VG_RAZAO_ESPECIAL.

  CLEAR: IT_CONTAS.
  "IF VG_RAZAO_ESPECIAL EQ ABAP_FALSE.
  WA_CONTAS-BUKRS = WA_RESUMO-EMPRESA.
  WA_CONTAS-SAKNR = WA_RESUMO-CONTA.
  APPEND WA_CONTAS TO IT_CONTAS.
  "ELSE.
  "  DELETE ADJACENT DUPLICATES FROM IT_T074 COMPARING SKONT UMSKZ.
  "  LOOP AT IT_T074 WHERE KOART EQ 'K'.
  "    WA_CONTAS-BUKRS = WA_RESUMO-EMPRESA.
  "    WA_CONTAS-SAKNR = WA_RESUMO-CONTA.
  "    WA_CONTAS-UMSKZ = IT_T074-UMSKZ.
  "    APPEND WA_CONTAS TO IT_CONTAS.
  "  ENDLOOP.
  "ENDIF.

  CONCATENATE LC_ANO_F LC_MES_F '01' INTO VG_LAST_DAY.

  CALL FUNCTION 'BKK_GET_MONTH_LASTDAY'
    EXPORTING
      I_DATE = VG_LAST_DAY
    IMPORTING
      E_DATE = VG_LAST_DAY.

  IF S_BUKR2 IS INITIAL.
    CALL FUNCTION 'Z_FI_GL_SALDO_BSIX'
      EXPORTING
        P_DT_POSICAO      = VG_LAST_DAY
        CONTAS            = IT_CONTAS
        WAERS             = S_MOEDA
        P_VERIFICA_RZ_ESP = ABAP_TRUE
      TABLES
        IT_BSXS           = IT_BSXS
        IT_BSXK           = IT_BSXK
        IT_BSXD           = IT_BSXD
        IT_SALDO_CONTAS   = IT_SALDO_CONTAS
        IT_SALDO_PARCEIRO = IT_SALDO_PARCEIRO
        IT_SALDO_CTA_PARC = IT_SALDO_PAR_CTA.
  ELSE.
    CALL FUNCTION 'Z_FI_GL_SALDO_BSIX'
      EXPORTING
        P_DT_POSICAO         = VG_LAST_DAY
        CONTAS               = IT_CONTAS
        WAERS                = S_MOEDA
        P_GERAR_SOC_PARCEIRA = ABAP_TRUE
        P_VERIFICA_RZ_ESP    = ABAP_TRUE
      TABLES
        IT_BSXS              = IT_BSXS
        IT_BSXK              = IT_BSXK
        IT_BSXD              = IT_BSXD
        IT_SALDO_CONTAS      = IT_SALDO_CONTAS
        IT_SALDO_PARCEIRO    = IT_SALDO_PARCEIRO
        IT_SALDO_CTA_PARC    = IT_SALDO_PAR_CTA.
  ENDIF.

  PERFORM LIMPA_SOC_PARCEIROS TABLES IT_SALDO_PAR_CTA.

  "Busca dados dos fornecedores
  IF IT_BSXK[] IS NOT INITIAL.
    SELECT *
      INTO TABLE IT_LFA1
      FROM LFA1
       FOR ALL ENTRIES IN IT_BSXK
     WHERE LIFNR EQ IT_BSXK-LIFNR.

    SORT IT_LFA1 BY LIFNR.

    SELECT *
      INTO TABLE IT_LFB1
      FROM LFB1
       FOR ALL ENTRIES IN IT_BSXK
     WHERE LIFNR EQ IT_BSXK-LIFNR
       AND BUKRS EQ WA_RESUMO-EMPRESA.

    SORT IT_LFB1 BY LIFNR.
  ENDIF.

  "Totalizar Resultado por fornecedor.
  WA_PARTNER-CONTA = WA_RESUMO-CONTA.
  "Desc. Conta """"""""""""""""""""""""""""""""""""""""""""""""""""""
  READ TABLE IT_SKAT WITH KEY SAKNR = WA_RESUMO-CONTA BINARY SEARCH.
  IF SY-SUBRC IS INITIAL.
    WA_PARTNER-DS_CONTA = IT_SKAT-TXT50.
  ENDIF.
  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  CLEAR: IT_PARTNER,
         IT_PARTNER_ALV.

  MOVE LC_MES_F TO VG_MONAT.

  IF VG_MONAT EQ 12.
    VG_MONAT = 15.
  ENDIF.

  LOOP AT IT_LFA1.
    WA_PARTNER-PARTNER   = IT_LFA1-LIFNR.
    WA_PARTNER-NOME      = IT_LFA1-NAME1.
    READ TABLE IT_LFB1 WITH KEY LIFNR = IT_LFA1-LIFNR BINARY SEARCH.
    IF SY-SUBRC IS INITIAL.
      WA_PARTNER-CONTA_CTR = IT_LFB1-AKONT.
    ENDIF.
    WA_PARTNER-SALDO     = 0.

    LOOP AT IT_SALDO_PAR_CTA WHERE PARID EQ IT_LFA1-LIFNR.
      CASE IT_SALDO_PAR_CTA-RLDNR.
        WHEN 'S'.
          WA_PARTNER-SALDO = WA_PARTNER-SALDO + IT_SALDO_PAR_CTA-SLVT.
        WHEN 'H'.
          WA_PARTNER-SALDO = WA_PARTNER-SALDO - IT_SALDO_PAR_CTA-SLVT.
      ENDCASE.
    ENDLOOP.

    APPEND WA_PARTNER TO IT_PARTNER.
  ENDLOOP.

  MOVE IT_PARTNER TO IT_PARTNER_ALV.

ENDFORM.                    " BUSCA_DADOS_SALDO_FORNECEDOR

*&---------------------------------------------------------------------*
*&      Form  SALDO_LFC1
*&---------------------------------------------------------------------*
*       Constroi saldo final
*----------------------------------------------------------------------*
FORM SALDO_LFC1  USING    P_LFC1   TYPE LFC1
                          P_LC_MES TYPE CHAR02
                 CHANGING SALDO TYPE HSLXX12.

  DATA: LC_D   TYPE C LENGTH 512,
        LC_C   TYPE C LENGTH 512,
        LC_MES TYPE CHAR02,
        LC_M   TYPE I.

  FIELD-SYMBOLS: <DEBITO>  TYPE UMXXH,
                 <CREDITO> TYPE UMXXH.

  MOVE P_LC_MES TO LC_M.

  IF LC_M EQ 1.
    "Débito - Crédito + Saldo
    SALDO = P_LFC1-UM01S - P_LFC1-UM01H + P_LFC1-UMSAV.
  ELSEIF ( LC_M GT 1 ) AND ( LC_M LT 12 ).

    CONCATENATE 'P_LFC1-UM' P_LC_MES 'S' INTO LC_D.
    ASSIGN (LC_D) TO <DEBITO>.

    CONCATENATE 'P_LFC1-UM' P_LC_MES 'H' INTO LC_C.
    ASSIGN (LC_C) TO <CREDITO>.

    LC_M = LC_M - 1.
    MOVE LC_M TO LC_MES.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = LC_MES
      IMPORTING
        OUTPUT = LC_MES.

    PERFORM SALDO_LFC1 USING P_LFC1 LC_MES CHANGING SALDO.
    SALDO = <DEBITO> - <CREDITO> + SALDO.

  ELSEIF LC_M EQ 12.
    LC_MES = '11'.
    PERFORM SALDO_LFC1 USING P_LFC1 LC_MES CHANGING SALDO.
    "Débito - Crédito + Saldo
    SALDO = P_LFC1-UM12S - P_LFC1-UM12H + SALDO +
            P_LFC1-UM13S - P_LFC1-UM13H +
            P_LFC1-UM14S - P_LFC1-UM14H +
            P_LFC1-UM15S - P_LFC1-UM15H +
            P_LFC1-UM16S - P_LFC1-UM16H .
  ENDIF.

ENDFORM.                    " SALDO_LFC1

*&---------------------------------------------------------------------*
*&      Form  CONTAINER_HTML
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM CONTAINER_HTML .

  DATA : DL_LENGTH        TYPE I,                           " Length
         DL_BACKGROUND_ID TYPE SDYDO_KEY VALUE SPACE. " Background_id

  IF DG_HTML_CNTRL IS INITIAL.
    CREATE OBJECT DG_HTML_CNTRL
      EXPORTING
        PARENT = DG_PARENT_HTML1.
  ENDIF.

  CALL FUNCTION 'REUSE_ALV_GRID_COMMENTARY_SET'
    EXPORTING
      DOCUMENT = DG_DYNDOC_ID
      BOTTOM   = SPACE
    IMPORTING
      LENGTH   = DL_LENGTH.

  CALL METHOD DG_DYNDOC_ID->MERGE_DOCUMENT.

  CALL METHOD DG_DYNDOC_ID->SET_DOCUMENT_BACKGROUND
    EXPORTING
      PICTURE_ID = DL_BACKGROUND_ID.

  DG_DYNDOC_ID->HTML_CONTROL = DG_HTML_CNTRL.

  CALL METHOD DG_DYNDOC_ID->DISPLAY_DOCUMENT
    EXPORTING
      REUSE_CONTROL      = 'X'
      PARENT             = DG_PARENT_HTML1
    EXCEPTIONS
      HTML_DISPLAY_ERROR = 1.

ENDFORM.                    " CONTAINER_HTML

*&---------------------------------------------------------------------*
*&      Form  ADD_TEXT
*&---------------------------------------------------------------------*
*       To add Text
*----------------------------------------------------------------------*
FORM ADD_TEXT USING P_TEXT  TYPE SDYDO_TEXT_ELEMENT
                    P_STYLE TYPE SDYDO_ATTRIBUTE
                    P_SIZE  TYPE SDYDO_ATTRIBUTE
                    P_COLOR TYPE SDYDO_ATTRIBUTE.

* Adding text
  CALL METHOD DG_DYNDOC_ID->ADD_TEXT
    EXPORTING
      TEXT          = P_TEXT
      SAP_STYLE     = P_STYLE
      SAP_FONTSIZE  = P_SIZE
      SAP_COLOR     = P_COLOR
      SAP_FONTSTYLE = CL_DD_AREA=>SANS_SERIF.

  "SAP_STYLE    = CL_DD_AREA=>HEADING
  "SAP_FONTSIZE = CL_DD_AREA=>EXTRA_LARGE
  "SAP_COLOR    = CL_DD_AREA=>LIST_HEADING_INT.

ENDFORM.                    " ADD_TEXT

*&---------------------------------------------------------------------*
*&      Form  EVENT_TOP_OF_PAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->DG_DYNDOC_ID  text
*----------------------------------------------------------------------*
FORM EVENT_TOP_OF_PAGE USING DG_DYNDOC_ID TYPE REF TO CL_DD_DOCUMENT.

  DATA : DL_TEXT(255) TYPE C,  "Text
         WA_ZGLT039   TYPE ZGLT039.

  DL_TEXT = 'Planilha Acessória – Contas Razão'.
  PERFORM ADD_TEXT USING DL_TEXT CL_DD_AREA=>HEADING CL_DD_AREA=>EXTRA_LARGE CL_DD_AREA=>LIST_HEADING.
  CALL METHOD DG_DYNDOC_ID->NEW_LINE.

  CLEAR: DL_TEXT.
  LOOP AT S_BUKRS.
    IF DL_TEXT IS INITIAL.
      CONCATENATE 'Empresa: ' S_BUKRS-LOW INTO DL_TEXT.
    ELSE.
      CONCATENATE DL_TEXT ',' INTO DL_TEXT SEPARATED BY SPACE.
      CONCATENATE DL_TEXT S_BUKRS-LOW INTO DL_TEXT.
    ENDIF.
  ENDLOOP.
  PERFORM ADD_TEXT USING DL_TEXT '' CL_DD_AREA=>MEDIUM ''.
  CALL METHOD DG_DYNDOC_ID->NEW_LINE.

  CONCATENATE 'Período de Fechamento:' S_MES_F(2) '/' S_MES_F+2(4) INTO DL_TEXT SEPARATED BY SPACE.
  PERFORM ADD_TEXT USING DL_TEXT '' CL_DD_AREA=>MEDIUM ''.
  CALL METHOD DG_DYNDOC_ID->NEW_LINE.

  IF S_MES_C IS NOT INITIAL.
    CONCATENATE 'Período de Comparativo:' S_MES_C(2) '/' S_MES_C+2(4) INTO DL_TEXT SEPARATED BY SPACE.
    PERFORM ADD_TEXT USING DL_TEXT '' CL_DD_AREA=>MEDIUM ''.
    CALL METHOD DG_DYNDOC_ID->NEW_LINE.
  ENDIF.

  IF S_MES_U IS NOT INITIAL.
    CONCATENATE 'Último Ex. Encerrado:' S_MES_U(2) '/' S_MES_U+2(4) INTO DL_TEXT SEPARATED BY SPACE.
    PERFORM ADD_TEXT USING DL_TEXT '' CL_DD_AREA=>MEDIUM ''.
    CALL METHOD DG_DYNDOC_ID->NEW_LINE.
  ENDIF.

  IF S_NTCL IS NOT INITIAL.
    SELECT SINGLE * INTO WA_ZGLT039
      FROM ZGLT039
     WHERE CODIGO EQ S_NTCL.
    IF SY-SUBRC IS INITIAL.
      CONCATENATE 'Class. Balanço:' WA_ZGLT039-CODIGO '-' WA_ZGLT039-DESCR INTO DL_TEXT SEPARATED BY SPACE.
      PERFORM ADD_TEXT USING DL_TEXT '' CL_DD_AREA=>MEDIUM ''.
      CALL METHOD DG_DYNDOC_ID->NEW_LINE.
    ENDIF.
  ENDIF.

  IF S_NOTA IS NOT INITIAL.
    SELECT SINGLE * INTO WA_ZGLT039
      FROM ZGLT039
     WHERE COD_NOTA EQ S_NOTA.
    IF SY-SUBRC IS INITIAL.
      CONCATENATE 'Class. Nota:' WA_ZGLT039-COD_NOTA '-' WA_ZGLT039-DESCR_NOTA INTO DL_TEXT SEPARATED BY SPACE.
      PERFORM ADD_TEXT USING DL_TEXT '' CL_DD_AREA=>MEDIUM ''.
      CALL METHOD DG_DYNDOC_ID->NEW_LINE.
    ENDIF.
  ENDIF.

  PERFORM CONTAINER_HTML.

ENDFORM.                    "EVENT_TOP_OF_PAGE

*&---------------------------------------------------------------------*
*&      Form  BUSCA_DADOS_SALDO_CLIENTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM BUSCA_DADOS_SALDO_CLIENTE .

  DATA: IT_CONTAS            TYPE ZCT_EMP_CONTAS,
        WA_CONTAS            TYPE ZLC_EMP_CONTAS,
        VG_LAST_DAY          TYPE SY-DATUM,
        VG_MONAT             TYPE MONAT,
        IT_BSXS              TYPE TABLE OF BSIS WITH HEADER LINE,
        IT_BSXK              TYPE TABLE OF BSIK WITH HEADER LINE,
        IT_BSXD              TYPE TABLE OF BSID WITH HEADER LINE,
        IT_SALDO_CONTAS      TYPE TABLE OF ZDE_FI_GL_SALDO_FAGLFLEXT WITH HEADER LINE,
        IT_SALDO_PARCEIRO    TYPE TABLE OF ZDE_FI_GL_SALDO_FAGLFLEXT WITH HEADER LINE,
        IT_SALDO_PAR_CTA     TYPE TABLE OF ZDE_FI_GL_SALDO_FAGLFLEXT2 WITH HEADER LINE,
        VG_RAZAO_ESPECIAL(1),
        IT_T074              TYPE TABLE OF T074 WITH HEADER LINE.

  "VG_RAZAO_ESPECIAL = ABAP_FALSE.

  "PERFORM VERIFICA_RAZAO_ESPECIAL TABLES IT_T074 USING WA_RESUMO-CONTA VG_RAZAO_ESPECIAL.

  "CLEAR: IT_CONTAS.
  "IF VG_RAZAO_ESPECIAL EQ ABAP_FALSE.
  WA_CONTAS-BUKRS = WA_RESUMO-EMPRESA.
  WA_CONTAS-SAKNR = WA_RESUMO-CONTA.
  APPEND WA_CONTAS TO IT_CONTAS.
  "ELSE.
  "  DELETE ADJACENT DUPLICATES FROM IT_T074 COMPARING SKONT UMSKZ.
  "  LOOP AT IT_T074 WHERE KOART EQ 'D'.
  "    WA_CONTAS-BUKRS = WA_RESUMO-EMPRESA.
  "    WA_CONTAS-SAKNR = WA_RESUMO-CONTA.
  "    WA_CONTAS-UMSKZ = IT_T074-UMSKZ.
  "    APPEND WA_CONTAS TO IT_CONTAS.
  "  ENDLOOP.
  "ENDIF.

  CONCATENATE LC_ANO_F LC_MES_F '01' INTO VG_LAST_DAY.

  CALL FUNCTION 'BKK_GET_MONTH_LASTDAY'
    EXPORTING
      I_DATE = VG_LAST_DAY
    IMPORTING
      E_DATE = VG_LAST_DAY.

  IF S_BUKR2 IS INITIAL.
    CALL FUNCTION 'Z_FI_GL_SALDO_BSIX'
      EXPORTING
        P_DT_POSICAO      = VG_LAST_DAY
        CONTAS            = IT_CONTAS
        WAERS             = S_MOEDA
        P_VERIFICA_RZ_ESP = ABAP_TRUE
      TABLES
        IT_BSXS           = IT_BSXS
        IT_BSXK           = IT_BSXK
        IT_BSXD           = IT_BSXD
        IT_SALDO_CONTAS   = IT_SALDO_CONTAS
        IT_SALDO_PARCEIRO = IT_SALDO_PARCEIRO
        IT_SALDO_CTA_PARC = IT_SALDO_PAR_CTA.
  ELSE.
    CALL FUNCTION 'Z_FI_GL_SALDO_BSIX'
      EXPORTING
        P_DT_POSICAO         = VG_LAST_DAY
        CONTAS               = IT_CONTAS
        WAERS                = S_MOEDA
        P_GERAR_SOC_PARCEIRA = ABAP_TRUE
        P_VERIFICA_RZ_ESP    = ABAP_TRUE
      TABLES
        IT_BSXS              = IT_BSXS
        IT_BSXK              = IT_BSXK
        IT_BSXD              = IT_BSXD
        IT_SALDO_CONTAS      = IT_SALDO_CONTAS
        IT_SALDO_PARCEIRO    = IT_SALDO_PARCEIRO
        IT_SALDO_CTA_PARC    = IT_SALDO_PAR_CTA.
  ENDIF.

  PERFORM LIMPA_SOC_PARCEIROS TABLES IT_SALDO_PAR_CTA.

  "Busca dados dos clientes
  IF IT_BSXD[] IS NOT INITIAL.
    SELECT *
      INTO TABLE IT_KNA1
      FROM KNA1
       FOR ALL ENTRIES IN IT_BSXD
     WHERE KUNNR EQ IT_BSXD-KUNNR.

    SORT IT_KNA1 BY KUNNR.

    "Buscar forncedores que movimentam a mesma conta razão.
    SELECT *
      INTO TABLE IT_KNB1
      FROM KNB1
       FOR ALL ENTRIES IN IT_BSXD
     WHERE KUNNR EQ IT_BSXD-KUNNR
       AND BUKRS EQ WA_RESUMO-EMPRESA.
  ENDIF.

  CLEAR: IT_PARTNER, IT_PARTNER_ALV.

  "Totalizar Resultado por fornecedor.
  WA_PARTNER-CONTA = WA_RESUMO-CONTA.
  "Desc. Conta """"""""""""""""""""""""""""""""""""""""""""""""""""""
  READ TABLE IT_SKAT WITH KEY SAKNR = WA_RESUMO-CONTA BINARY SEARCH.
  IF SY-SUBRC IS INITIAL.
    WA_PARTNER-DS_CONTA = IT_SKAT-TXT50.
  ENDIF.
  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  LOOP AT IT_KNA1.
    WA_PARTNER-PARTNER = IT_KNA1-KUNNR.
    WA_PARTNER-NOME    = IT_KNA1-NAME1.
    WA_PARTNER-SALDO   = 0.

    READ TABLE IT_KNB1 WITH KEY KUNNR = IT_KNA1-KUNNR BINARY SEARCH.
    IF SY-SUBRC IS INITIAL.
      WA_PARTNER-CONTA_CTR = IT_KNB1-AKONT.
    ENDIF.

    LOOP AT IT_SALDO_PAR_CTA WHERE PARID EQ IT_KNA1-KUNNR.
      CASE IT_SALDO_PAR_CTA-RLDNR.
        WHEN 'S'.
          WA_PARTNER-SALDO = WA_PARTNER-SALDO + IT_SALDO_PAR_CTA-SLVT.
        WHEN 'H'.
          WA_PARTNER-SALDO = WA_PARTNER-SALDO - IT_SALDO_PAR_CTA-SLVT.
      ENDCASE.
    ENDLOOP.

    APPEND WA_PARTNER TO IT_PARTNER.
  ENDLOOP.

  MOVE IT_PARTNER TO IT_PARTNER_ALV.

ENDFORM.                    " BUSCA_DADOS_SALDO_CLIENTE

*&---------------------------------------------------------------------*
*&      Form  SALDO_KNC1
*&---------------------------------------------------------------------*
*       Constroi saldo final
*----------------------------------------------------------------------*
FORM SALDO_KNC1  USING    P_KNC1   TYPE KNC1
                          P_LC_MES TYPE CHAR02
                 CHANGING SALDO TYPE HSLXX12.

  DATA: LC_D   TYPE C LENGTH 512,
        LC_C   TYPE C LENGTH 512,
        LC_MES TYPE CHAR02,
        LC_M   TYPE I.

  FIELD-SYMBOLS: <DEBITO>  TYPE UMXXH,
                 <CREDITO> TYPE UMXXH.

  MOVE P_LC_MES TO LC_M.

  IF LC_M EQ 1.
    "Débito - Crédito + Saldo
    SALDO = P_KNC1-UM01S - P_KNC1-UM01H + P_KNC1-UMSAV.
  ELSEIF ( LC_M GT 1 ) AND ( LC_M LT 12 ).

    CONCATENATE 'P_KNC1-UM' P_LC_MES 'S' INTO LC_D.
    ASSIGN (LC_D) TO <DEBITO>.

    CONCATENATE 'P_KNC1-UM' P_LC_MES 'H' INTO LC_C.
    ASSIGN (LC_C) TO <CREDITO>.

    LC_M = LC_M - 1.
    MOVE LC_M TO LC_MES.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = LC_MES
      IMPORTING
        OUTPUT = LC_MES.

    PERFORM SALDO_KNC1 USING P_KNC1 LC_MES CHANGING SALDO.
    SALDO = <DEBITO> - <CREDITO> + SALDO.

  ELSEIF LC_M EQ 12.
    LC_MES = '11'.
    PERFORM SALDO_KNC1 USING P_KNC1 LC_MES CHANGING SALDO.
    "Débito - Crédito + Saldo
    SALDO = P_KNC1-UM12S - P_KNC1-UM12H + SALDO +
            P_KNC1-UM13S - P_KNC1-UM13H +
            P_KNC1-UM14S - P_KNC1-UM14H +
            P_KNC1-UM15S - P_KNC1-UM15H +
            P_KNC1-UM16S - P_KNC1-UM16H .
  ENDIF.

ENDFORM.                    " SALDO_KNC1


*&---------------------------------------------------------------------*
*&      Form  F_PEGA_IMAGEM
*&---------------------------------------------------------------------*
FORM F_PEGA_IMAGEM  USING    NOME_LOGO
                    CHANGING URL.

  REFRESH GRAPHIC_TABLE.
  CALL METHOD CL_SSF_XSF_UTILITIES=>GET_BDS_GRAPHIC_AS_BMP
    EXPORTING
      P_OBJECT = 'GRAPHICS'
      P_NAME   = NOME_LOGO
      P_ID     = 'BMAP'
      P_BTYPE  = 'BCOL'
    RECEIVING
      P_BMP    = L_GRAPHIC_XSTR.

  GRAPHIC_SIZE = XSTRLEN( L_GRAPHIC_XSTR ).
  L_GRAPHIC_CONV = GRAPHIC_SIZE.
  L_GRAPHIC_OFFS = 0.
  WHILE L_GRAPHIC_CONV > 255.
    GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(255).
    APPEND GRAPHIC_TABLE.
    L_GRAPHIC_OFFS = L_GRAPHIC_OFFS + 255.
    L_GRAPHIC_CONV = L_GRAPHIC_CONV - 255.
  ENDWHILE.
  GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(L_GRAPHIC_CONV).
  APPEND GRAPHIC_TABLE.
  CALL FUNCTION 'DP_CREATE_URL'
    EXPORTING
      TYPE     = 'IMAGE'
      SUBTYPE  = 'X-UNKNOWN'
      SIZE     = GRAPHIC_SIZE
      LIFETIME = 'T'
    TABLES
      DATA     = GRAPHIC_TABLE
    CHANGING
      URL      = URL.
ENDFORM.                    " F_PEGA_IMAGEM

*&---------------------------------------------------------------------*
*&      Form  CRIA_HTML_CAB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CRIA_HTML_CAB .

  DATA: COLUMN                  TYPE REF TO CL_DD_AREA,
        COLUMN_1                TYPE REF TO CL_DD_AREA,
        COLUMN_2                TYPE REF TO CL_DD_AREA,
        TABLE_ELEMENT           TYPE REF TO CL_DD_TABLE_ELEMENT,
        TABLE_ELEMENT2          TYPE REF TO CL_DD_TABLE_ELEMENT,
        P_TEXT                  TYPE SDYDO_TEXT_ELEMENT,
        P_TEXT_TABLE            TYPE SDYDO_TEXT_TABLE,
        WA_T001                 TYPE T001,
        WA_ZGLT039              TYPE ZGLT039,
        SDYDO_TEXT_ELEMENT(255),
        VG_MES(2), VG_ANO(4),
        QTD                     TYPE I.

  CALL METHOD DG_DYNDOC_ID->INITIALIZE_DOCUMENT.

  CALL METHOD DG_DYNDOC_ID->ADD_TABLE
    EXPORTING
      NO_OF_COLUMNS = 1
      BORDER        = '0'
      WIDTH         = '100%'
    IMPORTING
      TABLE         = TABLE_ELEMENT.

  CALL METHOD TABLE_ELEMENT->ADD_COLUMN
    IMPORTING
      COLUMN = COLUMN.

  CALL METHOD TABLE_ELEMENT->SET_COLUMN_STYLE
    EXPORTING
      COL_NO    = 1
      SAP_ALIGN = 'CENTER'
      SAP_STYLE = CL_DD_DOCUMENT=>HEADING.

  P_TEXT = 'Contas Razão'.
  CALL METHOD COLUMN->ADD_TEXT
    EXPORTING
      TEXT      = P_TEXT
      SAP_STYLE = 'HEADING'.

  CALL METHOD DG_DYNDOC_ID->ADD_TABLE
    EXPORTING
      NO_OF_COLUMNS = 2
      BORDER        = '0'
      WIDTH         = '100%'
    IMPORTING
      TABLE         = TABLE_ELEMENT2.

  CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
    IMPORTING
      COLUMN = COLUMN_1.

  CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
    IMPORTING
      COLUMN = COLUMN_2.

  CALL METHOD TABLE_ELEMENT2->SET_COLUMN_STYLE
    EXPORTING
      COL_NO       = 1
      SAP_ALIGN    = 'LEFT'
      SAP_FONTSIZE = CL_DD_DOCUMENT=>MEDIUM.

  CALL METHOD TABLE_ELEMENT2->SET_COLUMN_STYLE
    EXPORTING
      COL_NO       = 2
      SAP_ALIGN    = 'LEFT'
      SAP_FONTSIZE = CL_DD_DOCUMENT=>MEDIUM.

  SDYDO_TEXT_ELEMENT = 'Empresa: '.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  IF S_BUKR2 IS NOT INITIAL.
    SDYDO_TEXT_ELEMENT = 'Empresa: '.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
  ENDIF.

  SDYDO_TEXT_ELEMENT = 'Periodo(s): '.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  SDYDO_TEXT_ELEMENT = 'Moeda: '.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  IF S_CONTA-LOW IS NOT INITIAL.
    SDYDO_TEXT_ELEMENT = 'Conta Razão: '.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
  ENDIF.

  IF S_NTCL IS NOT INITIAL.
    SDYDO_TEXT_ELEMENT = 'Class. Balanço: '.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
  ENDIF.

  IF S_NOTA IS NOT INITIAL.
    SDYDO_TEXT_ELEMENT = 'Class. Nota: '.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
  ENDIF.

  SDYDO_TEXT_ELEMENT = 'Data: '.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  CALL METHOD COLUMN_1->ADD_TEXT
    EXPORTING
      TEXT_TABLE = P_TEXT_TABLE
      FIX_LINES  = 'X'.

  CLEAR: P_TEXT_TABLE, SDYDO_TEXT_ELEMENT.

  DESCRIBE TABLE S_BUKRS LINES QTD.

  IF QTD = 1.
    READ TABLE S_BUKRS INDEX 1.
    SELECT SINGLE * INTO WA_T001 FROM T001 WHERE BUKRS EQ S_BUKRS-LOW.
    SDYDO_TEXT_ELEMENT = WA_T001-BUTXT.
  ELSE.
    LOOP AT S_BUKRS.
      IF SDYDO_TEXT_ELEMENT IS INITIAL.
        SELECT SINGLE * INTO WA_T001 FROM T001 WHERE BUKRS EQ S_BUKRS-LOW.
        SDYDO_TEXT_ELEMENT = S_BUKRS-LOW.
      ELSE.
        CONCATENATE SDYDO_TEXT_ELEMENT ',' INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        CONCATENATE SDYDO_TEXT_ELEMENT S_BUKRS-LOW INTO SDYDO_TEXT_ELEMENT.
      ENDIF.
    ENDLOOP.
  ENDIF.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  IF S_BUKR2 IS NOT INITIAL.
    SELECT SINGLE * INTO WA_T001 FROM T001 WHERE BUKRS EQ S_BUKR2.
    SDYDO_TEXT_ELEMENT = WA_T001-BUTXT.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
  ENDIF.

  CONCATENATE S_MES_F(2) '/' S_MES_F+2(4) INTO SDYDO_TEXT_ELEMENT.
  IF S_MES_U IS NOT INITIAL.
    CONCATENATE SDYDO_TEXT_ELEMENT ' - ' S_MES_U(2) '/' S_MES_U+2(4) INTO SDYDO_TEXT_ELEMENT.
  ENDIF.
  IF S_MES_C IS NOT INITIAL.
    CONCATENATE SDYDO_TEXT_ELEMENT ' - ' S_MES_C(2) '/' S_MES_C+2(4) INTO SDYDO_TEXT_ELEMENT.
  ENDIF.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  SDYDO_TEXT_ELEMENT = S_MOEDA.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  IF S_CONTA-LOW IS NOT INITIAL.
    SDYDO_TEXT_ELEMENT = S_CONTA-LOW.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
  ENDIF.

  IF S_NTCL IS NOT INITIAL.
    SELECT SINGLE * INTO WA_ZGLT039
      FROM ZGLT039
     WHERE CODIGO EQ S_NTCL.
    IF SY-SUBRC IS INITIAL.
      CONCATENATE WA_ZGLT039-CODIGO '-' WA_ZGLT039-DESCR INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.
  ENDIF.

  IF S_NOTA IS NOT INITIAL.
    SELECT SINGLE * INTO WA_ZGLT039
      FROM ZGLT039
     WHERE COD_NOTA EQ S_NOTA.
    IF SY-SUBRC IS INITIAL.
      CONCATENATE WA_ZGLT039-COD_NOTA '-' WA_ZGLT039-DESCR_NOTA INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.
  ENDIF.

  WRITE SY-DATUM TO SDYDO_TEXT_ELEMENT.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  CALL METHOD COLUMN_2->ADD_TEXT
    EXPORTING
      TEXT_TABLE = P_TEXT_TABLE
      FIX_LINES  = 'X'.

  PERFORM CONTAINER_HTML.

ENDFORM.                    " CRIA_HTML_CAB

*&---------------------------------------------------------------------*
*&      Module  STATUS_0001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0001 OUTPUT.

  SET TITLEBAR 'TL0001'.

      CASE sy-ucomm.
    WHEN 'QUIT' OR 'CANCEL' OR 'BACK' OR 'EXIT' OR 'RW'.
      LEAVE TO SCREEN 0.
    "WHEN .
    "WHEN OTHERS.
  ENDCASE.

ENDMODULE.                 " STATUS_0001  OUTPUT

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_RAZAO_ESPECIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM VERIFICA_RAZAO_ESPECIAL  TABLES P_T074 STRUCTURE T074
                               USING P_CONTA     TYPE SAKNR
                                     P_RAZAO_ESP TYPE CHAR01.

  DATA: WT_T001 TYPE T001.

  SELECT SINGLE * INTO WT_T001
    FROM T001
   WHERE BUKRS IN S_BUKRS.

  SELECT *
    INTO TABLE P_T074
    FROM T074
   WHERE KTOPL EQ WT_T001-KTOPL
     AND SKONT EQ P_CONTA.

  IF SY-SUBRC IS INITIAL.
    P_RAZAO_ESP = ABAP_TRUE.
  ENDIF.

ENDFORM.                    " VERIFICA_RAZAO_ESPECIAL

*&---------------------------------------------------------------------*
*&      Form  AJUSTA_TOTAIS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM AJUSTA_TOTAIS .

  DATA: WT_T001 TYPE T001.

  SELECT SINGLE * INTO WT_T001
    FROM T001
   WHERE BUKRS IN S_BUKRS.

  IF ( WT_T001-WAERS EQ 'PYG' ) AND ( S_MOEDA EQ 'PYG' ).
    LOOP AT IT_RESUMO.
      IT_RESUMO-VL_FECHAMENTO  = IT_RESUMO-VL_FECHAMENTO  * 100.
      IT_RESUMO-VL_COMPARATIVO = IT_RESUMO-VL_COMPARATIVO * 100.
      IT_RESUMO-VL_ULTIMO      = IT_RESUMO-VL_ULTIMO      * 100.
      MODIFY IT_RESUMO INDEX SY-TABIX TRANSPORTING VL_FECHAMENTO VL_COMPARATIVO VL_ULTIMO.
    ENDLOOP.
    LOOP AT IT_RESUMO_ALV.
      IT_RESUMO_ALV-VL_FECHAMENTO  = IT_RESUMO_ALV-VL_FECHAMENTO  * 100.
      IT_RESUMO_ALV-VL_COMPARATIVO = IT_RESUMO_ALV-VL_COMPARATIVO * 100.
      IT_RESUMO_ALV-VL_ULTIMO      = IT_RESUMO_ALV-VL_ULTIMO      * 100.
      MODIFY IT_RESUMO_ALV INDEX SY-TABIX TRANSPORTING VL_FECHAMENTO VL_COMPARATIVO VL_ULTIMO.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " AJUSTA_TOTAIS

*&---------------------------------------------------------------------*
*&      Form  LIMPA_SOC_PARCEIROS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_SALDO_PARCEIRO  text
*----------------------------------------------------------------------*
FORM LIMPA_SOC_PARCEIROS  TABLES P_IT_SALDO_PARCEIRO STRUCTURE ZDE_FI_GL_SALDO_FAGLFLEXT2.

  DATA: IT_ZGLT060    TYPE TABLE OF ZGLT060 WITH HEADER LINE,
        IT_ZGLT057    TYPE TABLE OF ZGLT057 WITH HEADER LINE,
        WA_ZFIT0039   TYPE ZFIT0039,
        WA_ZFIT0039_B TYPE ZFIT0039.

  CLEAR: IT_ZGLT060[].

  CHECK S_BUKR2 IS NOT INITIAL.

  SELECT SINGLE * INTO WA_ZFIT0039   FROM ZFIT0039 WHERE BUKRS EQ S_BUKRS-LOW.
  SELECT SINGLE * INTO WA_ZFIT0039_B FROM ZFIT0039 WHERE BUKRS EQ S_BUKR2.

  SELECT *
    INTO TABLE IT_ZGLT060
    FROM ZGLT060
   WHERE BUKRS1 EQ S_BUKRS-LOW
     AND WAERS  EQ S_MOEDA.

  SELECT *
    APPENDING TABLE IT_ZGLT060
    FROM ZGLT060
   WHERE BUKRS1 EQ S_BUKR2
     AND WAERS  EQ S_MOEDA.

  SELECT *
    INTO TABLE IT_ZGLT057
    FROM ZGLT057
   WHERE BUKRS_1 EQ S_BUKRS-LOW
     AND BUKRS_2 EQ S_BUKR2
     AND VERSN_1 EQ WA_ZFIT0039-VERSN
     AND VERSN_2 EQ WA_ZFIT0039_B-VERSN.

  READ TABLE IT_ZGLT057 INDEX 1.
  IF SY-SUBRC IS INITIAL.
    LOOP AT IT_ZGLT060 WHERE CK_NSOC_PARCEIRA EQ ABAP_FALSE.
      DELETE P_IT_SALDO_PARCEIRO WHERE RBUKRS EQ IT_ZGLT057-BUKRS_1
                                   AND RASSC  EQ IT_ZGLT057-VBUND_1
                                   AND RACCT  EQ IT_ZGLT060-CTA_LAN.

      DELETE P_IT_SALDO_PARCEIRO WHERE RBUKRS EQ IT_ZGLT057-BUKRS_2
                                   AND RASSC  EQ IT_ZGLT057-VBUND_2
                                   AND RACCT  EQ IT_ZGLT060-CTA_LAN.
    ENDLOOP.
  ENDIF.

  LOOP AT IT_ZGLT060 WHERE CK_NSOC_PARCEIRA EQ ABAP_TRUE.
    DELETE P_IT_SALDO_PARCEIRO WHERE RBUKRS EQ IT_ZGLT060-BUKRS1
                                 AND RACCT  EQ IT_ZGLT060-CTA_LAN.
  ENDLOOP.

ENDFORM.                    " LIMPA_SOC_PARCEIROS
