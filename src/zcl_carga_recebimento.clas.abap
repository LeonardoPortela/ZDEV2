CLASS ZCL_CARGA_RECEBIMENTO DEFINITION
  PUBLIC
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES ZIF_CARGA .
  PROTECTED SECTION.
  PRIVATE SECTION.

    ALIASES CARGA
      FOR ZIF_CARGA~CARGA .
    ALIASES CK_ALTEROU
      FOR ZIF_CARGA~CK_ALTEROU .
    ALIASES CLASSIFICACAO
      FOR ZIF_CARGA~CLASSIFICACAO .
    ALIASES CLASSIFICACAO_NOTAS
      FOR ZIF_CARGA~CLASSIFICACAO_NOTAS .
    ALIASES DOCUMENTO_FISCAL
      FOR ZIF_CARGA~DOCUMENTO_FISCAL .
    ALIASES DOCUMENTO_FISCAL_IMP_RET
      FOR ZIF_CARGA~DOCUMENTO_FISCAL_IMP_RET .
    ALIASES RESULTADO
      FOR ZIF_CARGA~RESULTADO .
    ALIASES ST_GMO_NAO_TESTADO
      FOR ZIF_CARGA~ST_GMO_NAO_TESTADO .
    ALIASES ST_GMO_NEGATIVO
      FOR ZIF_CARGA~ST_GMO_NEGATIVO .
    ALIASES ST_GMO_POSITIVO
      FOR ZIF_CARGA~ST_GMO_POSITIVO .
    ALIASES ST_INTERFACE_AVISO
      FOR ZIF_CARGA~ST_INTERFACE_AVISO .
    ALIASES ST_INTERFACE_MIGO
      FOR ZIF_CARGA~ST_INTERFACE_MIGO .
    ALIASES ST_INTERFACE_MIRO
      FOR ZIF_CARGA~ST_INTERFACE_MIRO .
    ALIASES ST_MODEL_FISCAL_ELETRONICO
      FOR ZIF_CARGA~ST_MODEL_FISCAL_ELETRONICO .
    ALIASES ST_MODEL_FISCAL_PAPEL
      FOR ZIF_CARGA~ST_MODEL_FISCAL_PAPEL .
    ALIASES ST_STATUS_ABERTO
      FOR ZIF_CARGA~ST_STATUS_ABERTO .
    ALIASES ST_STATUS_CANCELADA
      FOR ZIF_CARGA~ST_STATUS_CANCELADA .
    ALIASES ST_STATUS_CONFERIDO
      FOR ZIF_CARGA~ST_STATUS_CONFERIDO .
    ALIASES ST_STATUS_ESTORNO_BLOQUEIO
      FOR ZIF_CARGA~ST_STATUS_ESTORNO_BLOQUEIO .
    ALIASES ST_STATUS_ESTORNO_ERRO
      FOR ZIF_CARGA~ST_STATUS_ESTORNO_ERRO .
    ALIASES ST_STATUS_ESTORNO_EXECUTADO
      FOR ZIF_CARGA~ST_STATUS_ESTORNO_EXECUTADO .
    ALIASES ST_STATUS_ESTORNO_SEM
      FOR ZIF_CARGA~ST_STATUS_ESTORNO_SEM .
    ALIASES ST_STATUS_ESTORNO_SOLICITADO
      FOR ZIF_CARGA~ST_STATUS_ESTORNO_SOLICITADO .
    ALIASES ST_STATUS_FECHADO
      FOR ZIF_CARGA~ST_STATUS_FECHADO .
    ALIASES ST_TP_CARACT_CLASS_ARDIDO
      FOR ZIF_CARGA~ST_TP_CARACT_CLASS_ARDIDO .
    ALIASES ST_TP_CARACT_CLASS_AVARIADO
      FOR ZIF_CARGA~ST_TP_CARACT_CLASS_AVARIADO .
    ALIASES ST_TP_CARACT_CLASS_ESVERDEADO
      FOR ZIF_CARGA~ST_TP_CARACT_CLASS_ESVERDEADO .
    ALIASES ST_TP_CARACT_CLASS_IMPUREZA
      FOR ZIF_CARGA~ST_TP_CARACT_CLASS_IMPUREZA .
    ALIASES ST_TP_CARACT_CLASS_QUEBRADO
      FOR ZIF_CARGA~ST_TP_CARACT_CLASS_QUEBRADO .
    ALIASES ST_TP_CARACT_CLASS_UMIDADE
      FOR ZIF_CARGA~ST_TP_CARACT_CLASS_UMIDADE .
    ALIASES ST_TP_FRETE_CFR
      FOR ZIF_CARGA~ST_TP_FRETE_CFR .
    ALIASES ST_TP_FRETE_CIF
      FOR ZIF_CARGA~ST_TP_FRETE_CIF .
    ALIASES ST_TP_FRETE_CIP
      FOR ZIF_CARGA~ST_TP_FRETE_CIP .
    ALIASES ST_TP_FRETE_CPT
      FOR ZIF_CARGA~ST_TP_FRETE_CPT .
    ALIASES ST_TP_FRETE_DAF
      FOR ZIF_CARGA~ST_TP_FRETE_DAF .
    ALIASES ST_TP_FRETE_DDP
      FOR ZIF_CARGA~ST_TP_FRETE_DDP .
    ALIASES ST_TP_FRETE_DDU
      FOR ZIF_CARGA~ST_TP_FRETE_DDU .
    ALIASES ST_TP_FRETE_DEQ
      FOR ZIF_CARGA~ST_TP_FRETE_DEQ .
    ALIASES ST_TP_FRETE_DES
      FOR ZIF_CARGA~ST_TP_FRETE_DES .
    ALIASES ST_TP_FRETE_EXW
      FOR ZIF_CARGA~ST_TP_FRETE_EXW .
    ALIASES ST_TP_FRETE_FAS
      FOR ZIF_CARGA~ST_TP_FRETE_FAS .
    ALIASES ST_TP_FRETE_FCA
      FOR ZIF_CARGA~ST_TP_FRETE_FCA .
    ALIASES ST_TP_FRETE_FOB
      FOR ZIF_CARGA~ST_TP_FRETE_FOB .
    ALIASES ADD_NOTA_FISCAL
      FOR ZIF_CARGA~ADD_NOTA_FISCAL .
    ALIASES BLOQUEAR_ENTRADA
      FOR ZIF_CARGA~BLOQUEAR_ENTRADA .
    ALIASES DESBLOQUEAR_ENTRADA
      FOR ZIF_CARGA~DESBLOQUEAR_ENTRADA .
    ALIASES EXCLUIR_NOTA_FISCAL
      FOR ZIF_CARGA~EXCLUIR_NOTA_FISCAL .
    ALIASES EXCLUIR_REGISTRO
      FOR ZIF_CARGA~EXCLUIR_REGISTRO .
    ALIASES FREE
      FOR ZIF_CARGA~FREE .
    ALIASES GERA_ERRO_GERAL
      FOR ZIF_CARGA~GERA_ERRO_GERAL .
    ALIASES GET_CALCULAR_SUBTOTAL
      FOR ZIF_CARGA~GET_CALCULAR_SUBTOTAL .
    ALIASES GET_CHECK_JOB_EXECUCAO
      FOR ZIF_CARGA~GET_CHECK_JOB_EXECUCAO .
    ALIASES GET_CHECK_JOB_EXECUCAO_ESTORNO
      FOR ZIF_CARGA~GET_CHECK_JOB_EXECUCAO_ESTORNO .
    ALIASES GET_FACTORY_TP_TRANSGENIA
      FOR ZIF_CARGA~GET_FACTORY_TP_TRANSGENIA .
    ALIASES GET_INFO_ALV_APRESENTACAO
      FOR ZIF_CARGA~GET_INFO_ALV_APRESENTACAO .
    ALIASES GET_INFO_ALV_APRESENTACAO_LOG
      FOR ZIF_CARGA~GET_INFO_ALV_APRESENTACAO_LOG .
    ALIASES GET_INFO_MESSAGEM_ESTORNO
      FOR ZIF_CARGA~GET_INFO_MESSAGEM_ESTORNO .
    ALIASES GET_INFO_ORDEM_VENDA
      FOR ZIF_CARGA~GET_INFO_ORDEM_VENDA .
    ALIASES GET_INFO_PLACA
      FOR ZIF_CARGA~GET_INFO_PLACA .
    ALIASES GET_LOGS_HISTORICO
      FOR ZIF_CARGA~GET_LOGS_HISTORICO .
    ALIASES GET_MENS_INTERFACE_ENTRADA
      FOR ZIF_CARGA~GET_MENS_INTERFACE_ENTRADA .
    ALIASES GET_NEW_ID_CARGA
      FOR ZIF_CARGA~GET_NEW_ID_CARGA .
    ALIASES GET_NEW_ID_CLASSIFICAO
      FOR ZIF_CARGA~GET_NEW_ID_CLASSIFICAO .
    ALIASES GET_NEW_ID_ENTRADA_ESTOQUE
      FOR ZIF_CARGA~GET_NEW_ID_ENTRADA_ESTOQUE .
    ALIASES GET_NOTA_FORNECEDOR_IE
      FOR ZIF_CARGA~GET_NOTA_FORNECEDOR_IE .
    ALIASES GET_PARTINER_ORDEM_VENDA
      FOR ZIF_CARGA~GET_PARTINER_ORDEM_VENDA .
    ALIASES GET_PEDIDO_COMPRA
      FOR ZIF_CARGA~GET_PEDIDO_COMPRA .
    ALIASES GET_RATEIA_DESCONTOS
      FOR ZIF_CARGA~GET_RATEIA_DESCONTOS .
    ALIASES GET_REGISTRO
      FOR ZIF_CARGA~GET_REGISTRO .
    ALIASES GET_RESULT_DESC_CLASSIFICACAO
      FOR ZIF_CARGA~GET_RESULT_DESC_CLASSIFICACAO .
    ALIASES GET_ROMANEIO_ENTRADA
      FOR ZIF_CARGA~GET_ROMANEIO_ENTRADA .
    ALIASES GET_ROMANEIO_SAIDA
      FOR ZIF_CARGA~GET_ROMANEIO_SAIDA .
    ALIASES GET_TP_STATUS
      FOR ZIF_CARGA~GET_TP_STATUS .
    ALIASES GRAVAR_REGISTRO
      FOR ZIF_CARGA~GRAVAR_REGISTRO .
    ALIASES LIMPAR_REGISTRO
      FOR ZIF_CARGA~LIMPAR_REGISTRO .
    ALIASES NOVO_REGISTRO
      FOR ZIF_CARGA~NOVO_REGISTRO .
    ALIASES PESQUISAR
      FOR ZIF_CARGA~PESQUISAR .
    ALIASES SET_ABRIR
      FOR ZIF_CARGA~SET_ABRIR .
    ALIASES SET_CANCELAR
      FOR ZIF_CARGA~SET_CANCELAR .
    ALIASES SET_CARGA
      FOR ZIF_CARGA~SET_CARGA .
    ALIASES SET_CONFERIDO
      FOR ZIF_CARGA~SET_CONFERIDO .
    ALIASES SET_DENQUEUE
      FOR ZIF_CARGA~SET_DENQUEUE .
    ALIASES SET_ENQUEUE
      FOR ZIF_CARGA~SET_ENQUEUE .
    ALIASES SET_FECHAR
      FOR ZIF_CARGA~SET_FECHAR .
    ALIASES SET_GERAR_ENTRADA_ESTOQUE
      FOR ZIF_CARGA~SET_GERAR_ENTRADA_ESTOQUE .
    ALIASES SET_GERAR_ESTORNO_ESTOQUE
      FOR ZIF_CARGA~SET_GERAR_ESTORNO_ESTOQUE .
    ALIASES SET_GERAR_ROMANEIO_ENTRADA
      FOR ZIF_CARGA~SET_GERAR_ROMANEIO_ENTRADA .
    ALIASES SET_GERAR_ROMANEIO_SAIDA
      FOR ZIF_CARGA~SET_GERAR_ROMANEIO_SAIDA .
    ALIASES SET_ID_CARGA
      FOR ZIF_CARGA~SET_ID_CARGA .
    ALIASES SET_ID_CLASSIFICACAO
      FOR ZIF_CARGA~SET_ID_CLASSIFICACAO .
    ALIASES SET_LOGS_ALTERACAO
      FOR ZIF_CARGA~SET_LOGS_ALTERACAO .
    ALIASES SET_ORDEM_CARREGAMENTO
      FOR ZIF_CARGA~SET_ORDEM_CARREGAMENTO .
    ALIASES SET_ORDEM_VENDA
      FOR ZIF_CARGA~SET_ORDEM_VENDA .
    ALIASES SET_PESOS_NOTAS
      FOR ZIF_CARGA~SET_PESOS_NOTAS .
    ALIASES SET_PROCESSAR_ENTRADA
      FOR ZIF_CARGA~SET_PROCESSAR_ENTRADA .
    ALIASES SET_PROCESSAR_ESTORNO
      FOR ZIF_CARGA~SET_PROCESSAR_ESTORNO .
    ALIASES SET_REGISTRO
      FOR ZIF_CARGA~SET_REGISTRO .
    ALIASES VALIDAR_EXCLUSAO
      FOR ZIF_CARGA~VALIDAR_EXCLUSAO .
    ALIASES VALIDAR_REGISTRO
      FOR ZIF_CARGA~VALIDAR_REGISTRO .
    ALIASES VALIDA_ATRIBUTO_ALTERAVEL
      FOR ZIF_CARGA~VALIDA_ATRIBUTO_ALTERAVEL .
    ALIASES VERIF_ESTORNO_PENDENTE
      FOR ZIF_CARGA~VERIF_ESTORNO_PENDENTE .
    ALIASES VERIF_ORDEM_CARREGAMENTO
      FOR ZIF_CARGA~VERIF_ORDEM_CARREGAMENTO .
ENDCLASS.



CLASS ZCL_CARGA_RECEBIMENTO IMPLEMENTATION.


  METHOD ZIF_CARGA~ADD_NOTA_FISCAL.

    DATA: VALOR               TYPE I,
          LC_NOTA             TYPE ZSDT0001NT,
          WA_NOTA             TYPE J_1BNFDOC,
          LC_NR_TOTAL_ENTRADA TYPE  ZDE_NR_QUANTIDADE,
          LC_NR_TOTAL_SAIDA   TYPE  ZDE_NR_QUANTIDADE.

    DATA: OB_FORNECEDOR TYPE REF TO ZCL_FORNECEDORES.


    R_CARGA = ME.

    DESCRIBE TABLE ME->DOCUMENTO_FISCAL LINES DATA(QTD_NOTAS_ENTRADA).

    LC_NR_TOTAL_ENTRADA = 0.

    LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_FISCAL).
      ADD WA_FISCAL-NR_QUANTIDADE TO LC_NR_TOTAL_ENTRADA.
    ENDLOOP.

    DATA: LC_NOTA_FISCAL TYPE ZSDT0001NT.
    MOVE-CORRESPONDING I_NOTA TO LC_NOTA_FISCAL.

    ME->ZIF_CARGA~GET_VALIDAR_NOTA_FISCAL( CHANGING I_NOTA_FISCAL = LC_NOTA_FISCAL ).

    "Verificar se o Documento já foi lançado na Carga
    IF LC_NOTA_FISCAL-ID_NOTA IS INITIAL.

      CLEAR: ME->ZIF_CARGA~CK_EXECUTAR_REVERSAO_ENTRADA.

      READ TABLE ME->DOCUMENTO_FISCAL
      WITH KEY ID_FORNECEDOR = LC_NOTA_FISCAL-ID_FORNECEDOR
               NR_NOTA       = LC_NOTA_FISCAL-NR_NOTA
               NM_SERIE      = LC_NOTA_FISCAL-NM_SERIE
      TRANSPORTING NO FIELDS.

      IF SY-SUBRC IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_FISCAL_INFORMADA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_NOTA_FISCAL_INFORMADA-MSGNO
                              ATTR1 = CONV #( LC_NOTA_FISCAL-NR_NOTA )
                              ATTR2 = CONV #( LC_NOTA_FISCAL-NM_SERIE )
                              ATTR3 = CONV #( LC_NOTA_FISCAL-ID_FORNECEDOR ) )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_NOTA_FISCAL_INFORMADA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_NOTA_FISCAL_INFORMADA-MSGID
            MSGV1  = CONV #( LC_NOTA_FISCAL-NR_NOTA )
            MSGV2  = CONV #( LC_NOTA_FISCAL-NM_SERIE )
            MSGV3  = CONV #( LC_NOTA_FISCAL-ID_FORNECEDOR ).
      ENDIF.
    ELSE.
      LOOP AT ME->DOCUMENTO_FISCAL TRANSPORTING NO FIELDS
        WHERE ID_FORNECEDOR EQ LC_NOTA_FISCAL-ID_FORNECEDOR
          AND NR_NOTA       EQ LC_NOTA_FISCAL-NR_NOTA
          AND NM_SERIE      EQ LC_NOTA_FISCAL-NM_SERIE
          AND ID_NOTA       NE LC_NOTA_FISCAL-ID_NOTA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_FISCAL_INFORMADA-MSGID MSGNO = ZCX_CARGA=>ZCX_NOTA_FISCAL_INFORMADA-MSGNO
                              ATTR1 = CONV #( LC_NOTA_FISCAL-NR_NOTA )
                              ATTR2 = CONV #( LC_NOTA_FISCAL-NM_SERIE )
                              ATTR3 = CONV #( LC_NOTA_FISCAL-ID_FORNECEDOR ) )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_NOTA_FISCAL_INFORMADA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_NOTA_FISCAL_INFORMADA-MSGID
            MSGV1  = CONV #( LC_NOTA_FISCAL-NR_NOTA )
            MSGV2  = CONV #( LC_NOTA_FISCAL-NM_SERIE )
            MSGV3  = CONV #( LC_NOTA_FISCAL-ID_FORNECEDOR ).
      ENDLOOP.
    ENDIF.

    MOVE-CORRESPONDING LC_NOTA_FISCAL TO E_NOTA.
    IF E_NOTA-NR_QUANTIDADE IS NOT INITIAL AND E_NOTA-NR_VALOR IS NOT INITIAL.
      TRY .
          VALOR = ( E_NOTA-NR_VALOR / E_NOTA-NR_QUANTIDADE ) * 1000.
          E_NOTA-NR_PRECO_SACA_60 = ( VALOR * 60 ) / 1000.
        CATCH CX_SY_ARITHMETIC_OVERFLOW.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ERRO_PRECO_SACA-MSGID MSGNO = ZCX_CARGA=>ZCX_ERRO_PRECO_SACA-MSGNO )
              MSGTY  = 'E'
              MSGNO  = ZCX_CARGA=>ZCX_ERRO_PRECO_SACA-MSGNO
              MSGID  = ZCX_CARGA=>ZCX_ERRO_PRECO_SACA-MSGID.
      ENDTRY.
    ENDIF.

    IF LC_NOTA_FISCAL-PO_NUMBER IS INITIAL AND ZCL_CFOP=>GET_CK_CFOP_RETORNO_AMAZEM( I_CFOP = LC_NOTA_FISCAL-CFOP ) EQ ABAP_TRUE.
      "Buscar Número de Pedido de Compra
      ZCL_PEDIDO_COMPRA=>GET_PEDIDO_COMPRA_CHAVE_E(
        EXPORTING
          I_LIFNR               = LC_NOTA_FISCAL-ID_FORNECEDOR
          I_BUKRS               = ME->CARGA-ID_BUKRS
          I_WERKS               = ME->CARGA-ID_BRANCH
          I_MATNR               = ME->CARGA-ID_PRODUTO
          I_LGORT               = 'ARMZ'
          I_CHARG               = CONV #( ME->CARGA-NR_SAFRA )
          I_EBELP               = '00010'
          I_BSTYP               = 'F'    " Categoria do documento de compras
          I_BSART               = 'ZARM'
          I_ABRIR_TELA          = ABAP_FALSE
        RECEIVING
          R_EKPO                = DATA(R_EKPO)    " Item do documento de compras
        EXCEPTIONS
          NAO_ENCONTRADO_PEDIDO = 1
          OTHERS                = 2
      ).

      IF SY-SUBRC IS INITIAL.
        LC_NOTA_FISCAL-PO_NUMBER = R_EKPO-EBELN.
        LC_NOTA_FISCAL-PO_ITEM   = R_EKPO-EBELP.
      ENDIF.
    ENDIF.

    IF LC_NOTA_FISCAL-ID_NOTA IS INITIAL.

      DESCRIBE TABLE ME->DOCUMENTO_FISCAL LINES DATA(LC_ITEM).
      ADD 1 TO LC_ITEM.
      E_NOTA-ID_NOTA = LC_ITEM.
      MOVE-CORRESPONDING E_NOTA TO LC_NOTA.
      LC_NOTA-ID_CARGA = ME->CARGA-ID_CARGA.
      E_NOTA-ID_CARGA = ME->CARGA-ID_CARGA.
      APPEND LC_NOTA TO ME->DOCUMENTO_FISCAL.
      ME->ZIF_CARGA~SET_GERA_IMPOSTO_NOTA( EXPORTING I_NOTA = LC_NOTA ).

      SELECT SINGLE MAKTX
        INTO E_NOTA-DS_PRODUTO
        FROM MAKT WHERE MATNR EQ E_NOTA-ID_PRODUTO
         AND SPRAS EQ SY-LANGU.

      "090  Nota Fiscal Incluída!
      "091  Nota Fiscal Modificada!

      IF E_NOTA-ID_ENTREGUE_POR IS NOT INITIAL.
        SELECT SINGLE NAME1
          INTO E_NOTA-DS_ENTREGUE_POR
          FROM LFA1 WHERE LIFNR EQ E_NOTA-ID_ENTREGUE_POR.
      ENDIF.

      "Tipo de Entrada
      SELECT SINGLE DS_ENTRADA
        INTO E_NOTA-DS_ENTRADA
        FROM ZSDT0001TETX
       WHERE ID_ENTRADA EQ E_NOTA-ID_ENTRADA.

      MESSAGE S090.



    ELSE.
      READ TABLE ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_NOTA>) WITH KEY ID_NOTA = LC_NOTA_FISCAL-ID_NOTA.

      MOVE-CORRESPONDING E_NOTA TO <FS_NOTA>.

      E_NOTA-ID_CARGA = ME->CARGA-ID_CARGA.
      <FS_NOTA>-ID_CARGA = ME->CARGA-ID_CARGA.

      ME->ZIF_CARGA~SET_GERA_IMPOSTO_NOTA( EXPORTING I_NOTA = <FS_NOTA> ).

      SELECT SINGLE NAME1
        INTO E_NOTA-DS_FORNECEDOR
        FROM LFA1 WHERE LIFNR EQ E_NOTA-ID_FORNECEDOR.

      SELECT SINGLE MAKTX
        INTO E_NOTA-DS_PRODUTO
        FROM MAKT WHERE MATNR EQ E_NOTA-ID_PRODUTO
         AND SPRAS EQ SY-LANGU.

      SELECT SINGLE DS_ENTRADA
        INTO E_NOTA-DS_ENTRADA
        FROM ZSDT0001TETX
       WHERE ID_ENTRADA EQ E_NOTA-ID_ENTRADA.

      IF E_NOTA-ID_ENTREGUE_POR IS NOT INITIAL.
        SELECT SINGLE NAME1
          INTO E_NOTA-DS_ENTREGUE_POR
          FROM LFA1 WHERE LIFNR EQ E_NOTA-ID_ENTREGUE_POR.
      ENDIF.

      MESSAGE S091.

    ENDIF.

    DESCRIBE TABLE ME->DOCUMENTO_FISCAL LINES DATA(QTD_NOTAS_SAIDA).

    LC_NR_TOTAL_SAIDA = 0.

    LOOP AT ME->DOCUMENTO_FISCAL INTO WA_FISCAL.
      ADD WA_FISCAL-NR_QUANTIDADE TO LC_NR_TOTAL_SAIDA.
    ENDLOOP.

    "Recalcula Distribuição de Pesos de Desconto
    IF LC_NR_TOTAL_SAIDA NE LC_NR_TOTAL_ENTRADA OR QTD_NOTAS_SAIDA NE QTD_NOTAS_ENTRADA.
      ME->ZIF_CARGA~SET_AJUSTAR_RAT_DESC_GERAL( ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~ADD_ORDEM_VENDA.
    R_INSTANCIA = ME.
  ENDMETHOD.


  METHOD ZIF_CARGA~BLOQUEAR_ENTRADA.

    R_CARGA = ME.

    CHECK ME->ZIF_CARGA~AT_NAO_GERAR_BLOQUEIOS EQ ABAP_FALSE.

    CALL FUNCTION 'ENQUEUE_EZMMT001'
      EXPORTING
        MODE_ZMMT_EE_ZGR = 'S'
        MANDT            = SY-MANDT
        OBJ_KEY          = I_OBJ_KEY
      EXCEPTIONS
        FOREIGN_LOCK     = 1
        SYSTEM_FAILURE   = 2
        OTHERS           = 3.

    IF SY-SUBRC IS NOT INITIAL.

      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGTY  = 'E'
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~DESBLOQUEAR_ENTRADA.

    R_CARGA = ME.

    CHECK ME->ZIF_CARGA~AT_NAO_GERAR_BLOQUEIOS EQ ABAP_FALSE.

    CALL FUNCTION 'DEQUEUE_EZMMT001'
      EXPORTING
        MODE_ZMMT_EE_ZGR = 'S'
        MANDT            = SY-MANDT
        OBJ_KEY          = I_OBJ_KEY.

  ENDMETHOD.


  METHOD ZIF_CARGA~EXCLUIR_NOTA_FISCAL.

    DATA: VALOR    TYPE I,
          WA_NOTAS TYPE ZDE_ZSDT0001NT_ALV.

    R_CARGA = ME.

    CLEAR: E_NOTAS.

    CHECK I_NOTA-ID_NOTA IS NOT INITIAL.

    IF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_TRUE AND I_NOTA-ID_NOTA EQ 1.

      LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_NOTAS>).

        MOVE-CORRESPONDING <FS_NOTAS> TO WA_NOTAS.

        ADD 1 TO VALOR.

        SELECT SINGLE NAME1
          INTO WA_NOTAS-DS_FORNECEDOR
          FROM LFA1
         WHERE LIFNR EQ WA_NOTAS-ID_FORNECEDOR.

        SELECT SINGLE MAKTX
          INTO WA_NOTAS-DS_PRODUTO
          FROM MAKT
         WHERE MATNR EQ WA_NOTAS-ID_PRODUTO
           AND SPRAS EQ SY-LANGU.

        APPEND WA_NOTAS TO E_NOTAS.

      ENDLOOP.

      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_FIRST_ROM_MANU_EXCLUI-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_FIRST_ROM_MANU_EXCLUI-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_FIRST_ROM_MANU_EXCLUI-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_FIRST_ROM_MANU_EXCLUI-MSGID.
    ENDIF.

    DELETE ME->DOCUMENTO_FISCAL WHERE ID_NOTA = I_NOTA-ID_NOTA.
    DELETE ME->DOCUMENTO_FISCAL_IMP_RET WHERE ID_NOTA = I_NOTA-ID_NOTA.

    IF SY-SUBRC IS INITIAL.
      VALOR = 1.
      LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING <FS_NOTAS>.

        <FS_NOTAS>-ID_NOTA = VALOR.
        MOVE-CORRESPONDING <FS_NOTAS> TO WA_NOTAS.

        ADD 1 TO VALOR.

        SELECT SINGLE NAME1
          INTO WA_NOTAS-DS_FORNECEDOR
          FROM LFA1
         WHERE LIFNR EQ WA_NOTAS-ID_FORNECEDOR.

        SELECT SINGLE MAKTX
          INTO WA_NOTAS-DS_PRODUTO
          FROM MAKT
         WHERE MATNR EQ WA_NOTAS-ID_PRODUTO
           AND SPRAS EQ SY-LANGU.

        APPEND WA_NOTAS TO E_NOTAS.

      ENDLOOP.

      LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_NOTA).
        ME->ZIF_CARGA~SET_GERA_IMPOSTO_NOTA( EXPORTING I_NOTA = WA_NOTA ).
      ENDLOOP.

      MESSAGE S092.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~EXCLUIR_REGISTRO.

    E_EXCLUIU = ABAP_FALSE.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~FREE.

    R_CARGA = ME.

    IF ME->CARGA-ID_CARGA IS NOT INITIAL.
      ME->SET_DENQUEUE( I_CARGA = ME->CARGA-ID_CARGA ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GERA_ERRO_GERAL.

    DATA: LC_TEXTO TYPE C LENGTH 200.
    LC_TEXTO = I_TEXTO.
    SY-MSGV1 = LC_TEXTO+000(50).
    SY-MSGV2 = LC_TEXTO+050(50).
    SY-MSGV3 = LC_TEXTO+100(50).
    SY-MSGV4 = LC_TEXTO+150(50).

    RAISE EXCEPTION TYPE ZCX_CARGA
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ERRO_GERAL-MSGID
                          MSGNO = ZCX_CARGA=>ZCX_ERRO_GERAL-MSGNO
                          ATTR1 = CONV #( SY-MSGV1 )
                          ATTR2 = CONV #( SY-MSGV2 )
                          ATTR3 = CONV #( SY-MSGV3 )
                          ATTR4 = CONV #( SY-MSGV4 ) )
        MSGID  = ZCX_CARGA=>ZCX_ERRO_GERAL-MSGID
        MSGNO  = ZCX_CARGA=>ZCX_ERRO_GERAL-MSGNO
        MSGTY  = 'E'
        MSGV1  = SY-MSGV1
        MSGV2  = SY-MSGV2
        MSGV3  = SY-MSGV3
        MSGV4  = SY-MSGV4.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CABECALHO_CARGA.

    R_CARGA = ME.

    SELECT SINGLE * INTO E_ZSDT0001CG FROM ZSDT0001CG WHERE ID_CARGA EQ I_ID_CARGA.
    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_NAO_ENCONTRADA-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_CARGA_NAO_ENCONTRADA-MSGNO
                            ATTR1 = CONV #( I_ID_CARGA ) )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_CARGA_NAO_ENCONTRADA-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_CARGA_NAO_ENCONTRADA-MSGID
          MSGV1  = CONV #( I_ID_CARGA ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CALCULAR_SUBTOTAL.
    R_CARGA = ME.
    E_PESO_SUBTOTAL = I_PESO_BRUTO - I_PESO_TARA.
  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CHECK_JOB_EXECUCAO.

    R_CARGA = ME.

    TRY .
        ZCL_JOB=>GET_JOB_EXECUCAO( I_JOB_NAME = ZCL_JOB=>ST_NAME_JOB_ENTRADA_ESTOQUE ).

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_JOB_ENTRADA_EXEC-MSGID MSGNO = ZCX_CARGA=>ZCX_JOB_ENTRADA_EXEC-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_JOB_ENTRADA_EXEC-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_JOB_ENTRADA_EXEC-MSGNO.

      CATCH ZCX_JOB.    "

    ENDTRY.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CHECK_JOB_EXECUCAO_ESTORNO.

    R_CARGA = ME.

    TRY .
        ZCL_JOB=>GET_JOB_EXECUCAO( I_JOB_NAME = ZCL_JOB=>ST_NAME_JOB_ESTORNO_ESTOQUE ).

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_JOB_ESTORNO_EXEC-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_JOB_ESTORNO_EXEC-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_JOB_ESTORNO_EXEC-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_JOB_ESTORNO_EXEC-MSGNO.

      CATCH ZCX_JOB.    "

    ENDTRY.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CK_CARGA_SEM_SOLIC_MANUT.

    IF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_TRUE.

      DATA: RG_STATUS      TYPE RANGE OF ZDE_ST_SOL_AJUSTE.
      DATA: RG_SOLICITACAO TYPE RANGE OF ZDE_ID_SOL_AJUSTE.

      IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO IS NOT INITIAL.
        RG_SOLICITACAO = VALUE #( SIGN = 'I' OPTION = 'NE'
                                   ( LOW = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO HIGH = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO ) ).
      ENDIF.

      RG_STATUS = VALUE #( SIGN = 'I' OPTION = 'EQ'
                            ( LOW = ZIF_CARGA=>ST_STATUS_MANUT_ABERTO  HIGH = ZIF_CARGA=>ST_STATUS_MANUT_ABERTO  )
                            ( LOW = ZIF_CARGA=>ST_STATUS_MANUT_ENVIADO HIGH = ZIF_CARGA=>ST_STATUS_MANUT_ENVIADO ) ).

      "2  Aprovado
      "3  Recusado
      "4  Cancelado

      SELECT SINGLE
             B~DT_SOLICITACAO,
             B~US_SOLICITACAO
        INTO @DATA(WA_ZSDT0001ACB)
        FROM ZSDT0001ACB AS B
       INNER JOIN ZSDT0001ACG  AS A ON A~ID_SOLICITACAO EQ B~ID_SOLICITACAO
       WHERE B~ID_SOLICITACAO  IN @RG_SOLICITACAO
         AND B~ID_SOLICITACAO  EQ A~ID_SOLICITACAO
         AND B~TP_STATUS       IN @RG_STATUS
         AND A~ID_CARGA_ORIGEM EQ @ME->CARGA-ID_CARGA.

      IF SY-SUBRC IS INITIAL.

        DATA: LC_DATE_EXTERNAL TYPE C LENGTH 10.

        CALL FUNCTION 'CONVERT_DATE_TO_EXTERNAL'
          EXPORTING
            DATE_INTERNAL            = WA_ZSDT0001ACB-DT_SOLICITACAO
          IMPORTING
            DATE_EXTERNAL            = LC_DATE_EXTERNAL
          EXCEPTIONS
            DATE_INTERNAL_IS_INVALID = 1
            OTHERS                   = 2.

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SOL_MANUT_RESERVADA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_SOL_MANUT_RESERVADA-MSGNO
                              ATTR1 = CONV #( WA_ZSDT0001ACB-US_SOLICITACAO )
                              ATTR2 = CONV #( LC_DATE_EXTERNAL ) )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_SOL_MANUT_RESERVADA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_SOL_MANUT_RESERVADA-MSGID
            MSGV1  = CONV #( WA_ZSDT0001ACB-US_SOLICITACAO )
            MSGV2  = CONV #( LC_DATE_EXTERNAL ).
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CK_DOC_TRANSPORTE_EXISTE.

    SELECT SINGLE * INTO @E_VTTK
      FROM VTTK
     WHERE ID_CARGA EQ @ME->CARGA-ID_CARGA.

    CHECK SY-SUBRC IS NOT INITIAL.

    RAISE EXCEPTION TYPE ZCX_CARGA
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_DOC_TRANSPORTE_NAO_EXISTE-MSGID
                          MSGNO = ZCX_CARGA=>ZCX_DOC_TRANSPORTE_NAO_EXISTE-MSGNO
                          ATTR1 = CONV #( ME->CARGA-ID_CARGA ) )
        MSGTY  = 'E'
        MSGID  = ZCX_CARGA=>ZCX_DOC_TRANSPORTE_NAO_EXISTE-MSGID
        MSGNO  = ZCX_CARGA=>ZCX_DOC_TRANSPORTE_NAO_EXISTE-MSGNO
        MSGV1  = CONV #( ME->CARGA-ID_CARGA ).

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CK_EXCLUIR_ROMANEIO_SAIDA.

    DATA: WA_ZSDT0001 TYPE ZSDT0001.

    R_INSTANCIA = ME.

    "CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

    ME->GET_ROMANEIO_SAIDA( EXPORTING I_ID_CARGA  = ME->CARGA-ID_CARGA IMPORTING E_ROMANEIOS = DATA(ROMANEIOS) ).

    LOOP AT ROMANEIOS INTO DATA(WA_ROMANEIO).

      "Consultar Romaneio
      IF I_CK_OPUS EQ ABAP_TRUE.
        TRY .
            DATA(LC_ROMANEIO) = ZCL_ROMANEIO=>GET_INSTANCE( ).
            LC_ROMANEIO->SET_REGISTRO( I_ID_REGISTRO = WA_ROMANEIO-CH_REFERENCIA ).
            LC_ROMANEIO->GET_REGISTRO( IMPORTING E_REGISTRO = WA_ZSDT0001 ).
            LC_ROMANEIO->GET_CONSULTA_STATUS_OPUS( IMPORTING E_STATUS = DATA(E_STATUS) ).
          CATCH ZCX_CADASTRO INTO DATA(EX_CADASTRO).

            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = EX_CADASTRO->MSGID
                                  MSGNO = EX_CADASTRO->MSGNO
                                  ATTR1 = EX_CADASTRO->MSGV1
                                  ATTR2 = EX_CADASTRO->MSGV2
                                  ATTR3 = EX_CADASTRO->MSGV3
                                  ATTR4 = EX_CADASTRO->MSGV4 )
                MSGTY  = 'E'
                MSGID  = EX_CADASTRO->MSGID
                MSGNO  = EX_CADASTRO->MSGNO
                MSGV1  = EX_CADASTRO->MSGV1
                MSGV2  = EX_CADASTRO->MSGV2
                MSGV3  = EX_CADASTRO->MSGV3
                MSGV4  = EX_CADASTRO->MSGV4.

          CATCH ZCX_ROMANEIO INTO DATA(EX_ROMANEIO).

            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = EX_ROMANEIO->MSGID
                                  MSGNO = EX_ROMANEIO->MSGNO
                                  ATTR1 = EX_ROMANEIO->MSGV1
                                  ATTR2 = EX_ROMANEIO->MSGV2
                                  ATTR3 = EX_ROMANEIO->MSGV3
                                  ATTR4 = EX_ROMANEIO->MSGV4 )
                MSGTY  = 'E'
                MSGID  = EX_ROMANEIO->MSGID
                MSGNO  = EX_ROMANEIO->MSGNO
                MSGV1  = EX_ROMANEIO->MSGV1
                MSGV2  = EX_ROMANEIO->MSGV2
                MSGV3  = EX_ROMANEIO->MSGV3
                MSGV4  = EX_ROMANEIO->MSGV4.

        ENDTRY.

        IF E_STATUS EQ ZIF_CARGA=>ST_STATUS_CONFERIDO OR E_STATUS EQ ZIF_CARGA=>ST_STATUS_FECHADO.

          DATA(TX_STATUS) = COND STRING( WHEN E_STATUS EQ ZIF_CARGA=>ST_STATUS_CONFERIDO THEN 'Conferido' ELSE 'Fechado' ).

          "Romaneio de Saída &MSGV1& está &MSGV2& no OPUS!
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ROM_STATUS_OPUS-MSGID
                                MSGNO = ZCX_CARGA=>ZCX_ROM_STATUS_OPUS-MSGNO
                                ATTR1 = WA_ZSDT0001-NR_ROMANEIO
                                ATTR2 = TX_STATUS )
              MSGTY  = 'E'
              MSGID  = ZCX_CARGA=>ZCX_ROM_STATUS_OPUS-MSGID
              MSGNO  = ZCX_CARGA=>ZCX_ROM_STATUS_OPUS-MSGNO
              MSGV1  = CONV #( WA_ZSDT0001-NR_ROMANEIO )
              MSGV2  = CONV #( TX_STATUS ).
        ENDIF.

      ENDIF.

      IF WA_ROMANEIO-ST_PROC IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ROMANEIO_SAIDA_DOC-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_ROMANEIO_SAIDA_DOC-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_ROMANEIO_SAIDA_DOC-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ROMANEIO_SAIDA_DOC-MSGNO.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CK_GERA_SOBRA.

    CLEAR: E_ZMMT0074.

    CHECK ME->CARGA-NM_PESO_DESCONTOS IS NOT INITIAL.

    "Verifica se Material Gera Sobra
    SELECT SINGLE * INTO @DATA(WA_SETLEAF)
      FROM SETLEAF
     WHERE SETNAME EQ 'RESIDUO'
       AND VALFROM EQ @ME->CARGA-ID_PRODUTO.

    IF SY-SUBRC IS INITIAL.
      SELECT SINGLE * INTO E_ZMMT0074
        FROM ZMMT0074
       WHERE WERKS       EQ ME->CARGA-ID_BRANCH
         AND MATNR       EQ ME->CARGA-ID_PRODUTO
         AND ENTRADA_ROM EQ 'S'.

      IF SY-SUBRC IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID    = VALUE #( MSGID  = ZCX_CARGA=>ZCX_PARAM_SOBRA_MATERIAL-MSGID
                                 MSGNO  = ZCX_CARGA=>ZCX_PARAM_SOBRA_MATERIAL-MSGNO
                                 ATTR1  = CONV #( ME->CARGA-ID_PRODUTO ) )
            MSGTY     = 'E'
            MSGID     = ZCX_CARGA=>ZCX_PARAM_SOBRA_MATERIAL-MSGID
            MSGNO     = ZCX_CARGA=>ZCX_PARAM_SOBRA_MATERIAL-MSGNO
            MSGV1     = CONV #( ME->CARGA-ID_PRODUTO )
            TRANSACAO = 'ZMM0112'.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CK_SAIDA_AUTOMATICA.

    R_INSTANCE = ME.

    SELECT SINGLE *
      FROM SETLEAF
      INTO @DATA(WA_SETLEAF)
     WHERE SETNAME EQ 'MAGGI_SAIDA_AUT_ZMM0127'
       AND VALFROM LE @ME->CARGA-ID_BRANCH
       AND VALTO GE @ME->CARGA-ID_BRANCH.

    CHECK SY-SUBRC IS NOT INITIAL.

    RAISE EXCEPTION TYPE ZCX_CARGA
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SAIDA_NAO_AUTOMATICA-MSGID MSGNO = ZCX_CARGA=>ZCX_SAIDA_NAO_AUTOMATICA-MSGNO )
        MSGTY  = 'E'
        MSGID  = ZCX_CARGA=>ZCX_SAIDA_NAO_AUTOMATICA-MSGID
        MSGNO  = ZCX_CARGA=>ZCX_SAIDA_NAO_AUTOMATICA-MSGNO.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CK_SOL_AJUSTE_NAO_PROC.

    R_CARGA = ME.

    IF ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CONFERIDO.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SOL_MANU_NAO_CONFE-MSGID MSGNO = ZCX_CARGA=>ZCX_SOL_MANU_NAO_CONFE-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_SOL_MANU_NAO_CONFE-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_SOL_MANU_NAO_CONFE-MSGNO.
    ENDIF.

    IF NOT ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_PROCESSOU_AJUSTE EQ ABAP_FALSE.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_SOL_MANUTENCAO_PROCESS-MSGID
                            MSGNO  = ZCX_CARGA=>ZCX_SOL_MANUTENCAO_PROCESS-MSGNO )
          MSGID  = ZCX_CARGA=>ZCX_SOL_MANUTENCAO_PROCESS-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_SOL_MANUTENCAO_PROCESS-MSGNO
          MSGTY  = 'E'.
    ENDIF.

    "A  Solicitação Aprovada
    "R  Solicitação Recusada
    "W  Solicitação Em Espera de Aprovação
    "S  Solicitação não gera Aprovação

    IF ( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA OR
         ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA ) AND
       ( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_COMERCIAL EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA OR
         ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_COMERCIAL EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA ) AND
       ( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FISCAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA OR
         ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FISCAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA ).
    ELSE.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_SOL_MANUTENCAO_WAIT-MSGID
                            MSGNO  = ZCX_CARGA=>ZCX_SOL_MANUTENCAO_WAIT-MSGNO )
          MSGID  = ZCX_CARGA=>ZCX_SOL_MANUTENCAO_WAIT-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_SOL_MANUTENCAO_WAIT-MSGNO
          MSGTY  = 'E'.
    ENDIF.

*    IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_FILIAL EQ ABAP_TRUE AND
*       ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA.
*      DATA(CK_APROVOU_FILIAL) = ABAP_TRUE.
*    ELSEIF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_FILIAL EQ ABAP_TRUE.
*      CK_APROVOU_FILIAL = ABAP_FALSE.
*    ENDIF.
*
*    IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_FISCAL EQ ABAP_TRUE AND
*       ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FISCAL EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA.
*      DATA(CK_APROVOU_FISCAL) = ABAP_TRUE.
*    ELSEIF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_FISCAL EQ ABAP_TRUE.
*      CK_APROVOU_FISCAL = ABAP_FALSE.
*    ENDIF.
*
*    IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_COMERCIAL EQ ABAP_TRUE AND
*       ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_COMERCIAL EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA.
*      DATA(CK_APROVOU_COMERCIAL) = ABAP_TRUE.
*    ELSEIF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_COMERCIAL EQ ABAP_TRUE.
*      CK_APROVOU_COMERCIAL = ABAP_FALSE.
*    ENDIF.
*
*    IF NOT CK_APROVOU_FILIAL    EQ ABAP_TRUE OR
*       NOT CK_APROVOU_FISCAL    EQ ABAP_TRUE OR
*       NOT CK_APROVOU_COMERCIAL EQ ABAP_TRUE.
*      RAISE EXCEPTION TYPE ZCX_CARGA
*        EXPORTING
*          TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_SOL_MANUTENCAO_WAIT-MSGID
*                            MSGNO  = ZCX_CARGA=>ZCX_SOL_MANUTENCAO_WAIT-MSGNO )
*          MSGID  = ZCX_CARGA=>ZCX_SOL_MANUTENCAO_WAIT-MSGID
*          MSGNO  = ZCX_CARGA=>ZCX_SOL_MANUTENCAO_WAIT-MSGNO
*          MSGTY  = 'E'.
*    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL.

    IF ME->CARGA-ID_PRODUTO IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NAO_INF_MATERIAL-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_NAO_INF_MATERIAL-MSGNO )
          MSGID  = ZCX_CARGA=>ZCX_NAO_INF_MATERIAL-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_NAO_INF_MATERIAL-MSGNO
          MSGTY  = 'E'.
    ENDIF.

    SELECT SINGLE * INTO @DATA(WA_MARA)
      FROM MARA
     WHERE MATNR EQ @ME->CARGA-ID_PRODUTO.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = WA_MARA-MATKL
      IMPORTING
        OUTPUT = WA_MARA-MATKL.

*1  Ardido/Queimado
*2  Queimados
*3  Mofados
*4  Picados
*5  Fermentados
*6  Germinados/Imaturos/Chochos
*7  Ardidos
*8  Gessados

    CASE WA_MARA-MATKL.

      WHEN ZIF_CARGA=>ST_GRUPO_ALGODAO_PLUMA. "Algodão

        CASE I_SUB_CARAC_AVA.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_MOF.
            E_CK_CARAC       = ABAP_FALSE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_FER.
            E_CK_CARAC       = ABAP_FALSE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GER.
            E_CK_CARAC       = ABAP_FALSE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARD.
            E_CK_CARAC       = ABAP_FALSE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GES.
            E_CK_CARAC       = ABAP_FALSE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
          WHEN OTHERS.
            E_CK_CARAC       = ABAP_FALSE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
        ENDCASE.

      WHEN '700170'. "Milho

        CASE I_SUB_CARAC_AVA.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_MOF.
            E_CK_CARAC       = ABAP_TRUE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_FER.
            E_CK_CARAC       = ABAP_TRUE.
            E_CK_OBRIGATORIO = ABAP_TRUE.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GER.
            E_CK_CARAC       = ABAP_TRUE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARD.
            E_CK_CARAC       = ABAP_TRUE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GES.
            E_CK_CARAC       = ABAP_TRUE.
            E_CK_OBRIGATORIO = ABAP_TRUE.
          WHEN OTHERS.
            E_CK_CARAC       = ABAP_FALSE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
        ENDCASE.

      WHEN '700110'. "Soja

        CASE I_SUB_CARAC_AVA.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ.
            E_CK_CARAC       = ABAP_TRUE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_QUE.
            E_CK_CARAC       = ABAP_TRUE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_MOF.
            E_CK_CARAC       = ABAP_TRUE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_PIC.
            E_CK_CARAC       = ABAP_TRUE.
            E_CK_OBRIGATORIO = ABAP_TRUE.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_FER.
            E_CK_CARAC       = ABAP_TRUE.
            E_CK_OBRIGATORIO = ABAP_TRUE.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GER.
            E_CK_CARAC       = ABAP_TRUE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
          WHEN OTHERS.
            E_CK_CARAC       = ABAP_FALSE.
            E_CK_OBRIGATORIO = ABAP_FALSE.
        ENDCASE.

      WHEN OTHERS.
        E_CK_CARAC       = ABAP_FALSE.
        E_CK_OBRIGATORIO = ABAP_FALSE.
    ENDCASE.



  ENDMETHOD.


  METHOD ZIF_CARGA~GET_DOCUMENTO_ENT_ESTORNADO.

    R_ESTORNADO = ABAP_TRUE.

    SELECT SINGLE * INTO @DATA(WA_ENTRADA)
      FROM ZMMT_EE_ZGR
     WHERE OBJ_KEY EQ @I_OBJ_KEY.

    CHECK SY-SUBRC IS INITIAL.

    SELECT SINGLE * INTO @DATA(WA_ENTRADA_DOCS)
      FROM ZMMT_EE_ZGR_DOCS
     WHERE OBJ_KEY EQ @I_OBJ_KEY.

    CHECK SY-SUBRC IS INITIAL.

*    IF WA_ENTRADA_DOCS-AV_VBELN IS NOT INITIAL.
*      "Verifica Aviso
*      SELECT SINGLE * INTO @DATA(WA_LIKP)
*        FROM LIKP
*       WHERE VBELN EQ @WA_ENTRADA_DOCS-AV_VBELN.
*
*      IF SY-SUBRC IS INITIAL.
*        R_ESTORNADO = ABAP_FALSE.
*      ENDIF.
*    ENDIF.

    IF WA_ENTRADA_DOCS-MM_MBLNR IS NOT INITIAL.
      "Verifica se Documento de Material foi Estornado
      SELECT SINGLE * INTO @DATA(WA_MKPF)
        FROM MSEG
       WHERE SMBLN EQ @WA_ENTRADA_DOCS-MM_MBLNR
         AND SJAHR EQ @WA_ENTRADA_DOCS-MM_MJAHR.

      IF SY-SUBRC IS NOT INITIAL.
        R_ESTORNADO = ABAP_FALSE.
      ENDIF.
    ENDIF.

    IF WA_ENTRADA_DOCS-FT_BELNR IS NOT INITIAL.
      "Verifica se Documento Fatura foi Estornado
      SELECT SINGLE * INTO @DATA(WA_RBKP)
        FROM RBKP
       WHERE BELNR EQ @WA_ENTRADA_DOCS-FT_BELNR
         AND GJAHR EQ @WA_ENTRADA_DOCS-FT_GJAHR.

      IF WA_RBKP-STBLG IS INITIAL AND SY-SUBRC IS INITIAL.
        R_ESTORNADO = ABAP_FALSE.
      ENDIF.
    ENDIF.

    IF WA_ENTRADA_DOCS-DOCNUM IS NOT INITIAL.
      "Verifica se Documento Fiscal foi estornado
      SELECT SINGLE * INTO @DATA(WA_J_1BNFDOC)
        FROM J_1BNFDOC
       WHERE DOCNUM EQ @WA_ENTRADA_DOCS-DOCNUM.

      IF SY-SUBRC IS INITIAL AND WA_J_1BNFDOC-CANCEL EQ ABAP_FALSE.
        R_ESTORNADO = ABAP_FALSE.
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_FACTORY_TP_TRANSGENIA.

*(Campo 1) IN_GMO
*(Campo 2) IN_SRR_DECLARADO
*(Campo 3) IN_SRR_DECLARADO_2
*(Campo 4) IN_TESTE_SRR_2
*(campo 5) IN_SRR_ORIGEM_PARTIC

    SELECT SINGLE * INTO @DATA(WA_MARA)
      FROM MARA
     WHERE MATNR EQ @ME->CARGA-ID_PRODUTO.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = WA_MARA-MATKL
      IMPORTING
        OUTPUT = WA_MARA-MATKL.

    CASE WA_MARA-MATKL.
      WHEN ZIF_CARGA=>ST_GRUPO_ALGODAO_PLUMA. "Algodão

        E_TP_TRANSGENIA = 'D1'.
        EXIT.

      WHEN '700300'. "Resíduo de Soja

        E_TP_TRANSGENIA = 'CO'.
        EXIT.

      WHEN '700170'. "Milho

        E_TP_TRANSGENIA = 'D1'.
        EXIT.

      WHEN '700110'. "Soja

        CASE ME->CLASSIFICACAO-IN_GMO.

*1: Se campo 1 = NEGATIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:
*CONVENCIONAL (CO) Desmarcar "Negativo"
          WHEN ZIF_CARGA=>ST_GMO_NEGATIVO.
            E_TP_TRANSGENIA = 'CO'.
            EXIT.
*2: Se campo 1 = POSITIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:
*RR TESTADO (T1) Desmarcar "Positivo"
          WHEN ZIF_CARGA=>ST_GMO_POSITIVO.
            E_TP_TRANSGENIA = 'T1'.
            EXIT.
        ENDCASE.

*4: Se campo 3 = SIM, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:
*RR2 DECLARADO (D2)  Desmarcar "Sim"
        IF ME->CLASSIFICACAO-IN_SRR_DECLARADO_2 EQ ABAP_TRUE.
          E_TP_TRANSGENIA = 'D2'.
          EXIT.
        ENDIF.

        CASE ME->CLASSIFICACAO-IN_TESTE_SRR_2.
*5: Se campo 4 = POSITIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:
*RR2 TESTADO (T2)  Desmarcar "Positivo"
          WHEN ZIF_CARGA=>ST_GMO_POSITIVO.
            E_TP_TRANSGENIA = 'T2'.
            EXIT.
*6: Se campo 4 = NEGATIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:
*RR1 DECLARADO (D1)  Desmarcar "Negativo"
          WHEN ZIF_CARGA=>ST_GMO_NEGATIVO.
            E_TP_TRANSGENIA = 'D1'.
            EXIT.
        ENDCASE.

*5: Se campo 5 = SIM, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:
*PARTICIPANTE (PA) Desmarcar "Negativo"
        IF ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC EQ ABAP_TRUE.
          E_TP_TRANSGENIA = 'PA'.
          EXIT.
        ENDIF.

      WHEN OTHERS.
        E_TP_TRANSGENIA = SPACE.
    ENDCASE.

    RAISE EXCEPTION TYPE ZCX_CARGA
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ERRO_DETERMINAR_TRANSG-MSGID
                          MSGNO = ZCX_CARGA=>ZCX_ERRO_DETERMINAR_TRANSG-MSGNO )
        MSGTY  = 'E'
        MSGNO  = ZCX_CARGA=>ZCX_ERRO_DETERMINAR_TRANSG-MSGNO
        MSGID  = ZCX_CARGA=>ZCX_ERRO_DETERMINAR_TRANSG-MSGID.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_ALV_APRESENTACAO.

    R_CARGA = ME.

    DATA: WA_NOTA_ALV        TYPE ZDE_ZSDT0001NT_ALV,
          WA_ORDEM_ALV       TYPE ZDE_ZSDT0001OV_ALV,
          WA_PEDIDO_ALV      TYPE ZDE_ZSDT0001EK_ALV,
          WA_SOLICITACAO_ALV TYPE ZDE_ZSDT0001ACB_ALV,
          WA_BLOCO_ALV       TYPE ZDE_ZSDT0001FD_ALV.

    CLEAR: E_APRESENTACAO.

    "Carga
    MOVE-CORRESPONDING ME->CARGA TO E_APRESENTACAO-CARGA.

    "Transgenia
    MOVE-CORRESPONDING ME->CLASSIFICACAO TO E_APRESENTACAO-CARGA.

    "Classificação
    LOOP AT ME->RESULTADO INTO DATA(WA_RESULTADO) WHERE ID_CLASSIFICACAO EQ ME->CARGA-ID_CLASSIFICACAO.
      CASE WA_RESULTADO-TP_CARACTERISTICA.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
          E_APRESENTACAO-CARGA-NR_PERC_UMI = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_UMI = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
          E_APRESENTACAO-CARGA-NR_PERC_IMP = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_IMP = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
          E_APRESENTACAO-CARGA-NR_PERC_AVA = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_AVA = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
          E_APRESENTACAO-CARGA-NR_PERC_ARD = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_ARD = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
          E_APRESENTACAO-CARGA-NR_PERC_QUE = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_QUE = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
          E_APRESENTACAO-CARGA-NR_PERC_ESV = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_ESV = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
          E_APRESENTACAO-CARGA-NR_PERC_CAR = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_CAR = WA_RESULTADO-NR_QUANTIDADE_COM.
      ENDCASE.
    ENDLOOP.

    "SubCaracterística da Classificação
    LOOP AT ME->ZIF_CARGA~RESULTADO_AVARIADO INTO DATA(WA_RESUL_AVARIADO) WHERE ID_CLASSIFICACAO EQ ME->CARGA-ID_CLASSIFICACAO.
      CASE WA_RESUL_AVARIADO-TP_SUB_CARAC_AVARIADO.
        WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ.
          E_APRESENTACAO-CARGA-NR_PERC_AVA_ARQ = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_QUE.
          E_APRESENTACAO-CARGA-NR_PERC_AVA_QUE = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_MOF.
          E_APRESENTACAO-CARGA-NR_PERC_AVA_MOF = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_PIC.
          E_APRESENTACAO-CARGA-NR_PERC_AVA_PIC = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_FER.
          E_APRESENTACAO-CARGA-NR_PERC_AVA_FER = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GER.
          E_APRESENTACAO-CARGA-NR_PERC_AVA_GER = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARD.
          E_APRESENTACAO-CARGA-NR_PERC_AVA_ARD = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GES.
          E_APRESENTACAO-CARGA-NR_PERC_AVA_GES = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
      ENDCASE.
    ENDLOOP.

    SELECT SINGLE NAME INTO E_APRESENTACAO-CARGA-NAME
      FROM J_1BBRANCH
     WHERE BUKRS  EQ E_APRESENTACAO-CARGA-ID_BUKRS
       AND BRANCH EQ E_APRESENTACAO-CARGA-ID_BRANCH.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_COLETA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_COLETA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_COLETA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_DESCARGA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_DESCARGA
        FROM KNA1 WHERE KUNNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_DESCARGA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_DESTINO IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_DESTINO
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_DESTINO.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_CLASSIFICADORA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_CLASSIFICADORA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_CLASSIFICADORA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_ENTREGA IS NOT INITIAL.
      SELECT SINGLE DS_LOCAL_ENTREGA
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_ENTREGA
        FROM ZSDT0001LE WHERE ID_LOCAL_ENTREGA EQ E_APRESENTACAO-CARGA-ID_LOCAL_ENTREGA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_PROPRIETARIO IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_PROPRIETARIO
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_PROPRIETARIO.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_OUTRO_PARTIC IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_OUTRO_PARTIC
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_OUTRO_PARTIC.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_AGENT_FRETE IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_AGENT_FRETE
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_AGENT_FRETE.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_MOTORISTA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_MOTORISTA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_MOTORISTA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_PRODUTO IS NOT INITIAL.
      SELECT SINGLE MAKTX
        INTO E_APRESENTACAO-CARGA-DS_PRODUTO
        FROM MAKT
       WHERE MATNR EQ E_APRESENTACAO-CARGA-ID_PRODUTO
         AND SPRAS EQ SY-LANGU.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_ORDEM IS NOT INITIAL.
      DATA(R_ORDEM_CARRGAMENTO) = ZCL_ORDEM_CARREGAMENTO=>BUSCA_ORDEM_CARREGAMENTO( I_ID_ORDEM = E_APRESENTACAO-CARGA-ID_ORDEM ).
      E_APRESENTACAO-CARGA-NR_ORDEM = R_ORDEM_CARRGAMENTO-NR_ORDEM.
      E_APRESENTACAO-ORDEM_CARREGA  = R_ORDEM_CARRGAMENTO.
    ENDIF.

    "Documentos Fiscais
    LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_NOTA).

      CLEAR: WA_NOTA_ALV.

      MOVE-CORRESPONDING WA_NOTA TO WA_NOTA_ALV.

      SELECT SINGLE NAME1
        INTO WA_NOTA_ALV-DS_FORNECEDOR
        FROM LFA1 WHERE LIFNR EQ WA_NOTA_ALV-ID_FORNECEDOR.

      WA_NOTA_ALV-ID_PRODUTO = E_APRESENTACAO-CARGA-ID_PRODUTO.
      WA_NOTA_ALV-DS_PRODUTO = E_APRESENTACAO-CARGA-DS_PRODUTO.

      SELECT SINGLE DS_ENTRADA
        INTO WA_NOTA_ALV-DS_ENTRADA
        FROM ZSDT0001TETX WHERE ID_ENTRADA EQ WA_NOTA-ID_ENTRADA.

      IF WA_NOTA_ALV-ID_ENTREGUE_POR IS NOT INITIAL.
        SELECT SINGLE NAME1
          INTO WA_NOTA_ALV-DS_ENTREGUE_POR
          FROM LFA1 WHERE LIFNR EQ WA_NOTA_ALV-ID_ENTREGUE_POR.
      ENDIF.

      "Classificação
      LOOP AT ME->RESULTADO INTO WA_RESULTADO WHERE ID_CLASSIFICACAO EQ WA_NOTA-ID_CLASSIFICACAO.
        CASE WA_RESULTADO-TP_CARACTERISTICA.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
            WA_NOTA_ALV-NR_PERC_UMI = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_UMI = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
            WA_NOTA_ALV-NR_PERC_IMP = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_IMP = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
            WA_NOTA_ALV-NR_PERC_AVA = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_AVA = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
            WA_NOTA_ALV-NR_PERC_ARD = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_ARD = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
            WA_NOTA_ALV-NR_PERC_QUE = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_QUE = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
            WA_NOTA_ALV-NR_PERC_ESV = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_ESV = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
            WA_NOTA_ALV-NR_PERC_CAR = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_CAR = WA_RESULTADO-NR_QUANTIDADE_COM.
        ENDCASE.
      ENDLOOP.

      "SubCaracterística da Classificação
      LOOP AT ME->ZIF_CARGA~RESULTADO_AVARIADO INTO WA_RESUL_AVARIADO WHERE ID_CLASSIFICACAO EQ ME->CARGA-ID_CLASSIFICACAO.
        CASE WA_RESUL_AVARIADO-TP_SUB_CARAC_AVARIADO.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ.
            WA_NOTA_ALV-NR_PERC_AVA_ARQ = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_QUE.
            WA_NOTA_ALV-NR_PERC_AVA_QUE = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_MOF.
            WA_NOTA_ALV-NR_PERC_AVA_MOF = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_PIC.
            WA_NOTA_ALV-NR_PERC_AVA_PIC = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_FER.
            WA_NOTA_ALV-NR_PERC_AVA_FER = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GER.
            WA_NOTA_ALV-NR_PERC_AVA_GER = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARD.
            WA_NOTA_ALV-NR_PERC_AVA_ARD = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GES.
            WA_NOTA_ALV-NR_PERC_AVA_GES = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
        ENDCASE.
      ENDLOOP.

      IF ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CONFERIDO AND
         ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
        "Recalcular Pois ainda não está gravado em banco como resultado (somente acontece na conferência)
        ME->SET_PESOS_NOTAS(
          EXPORTING
            I_ID_CARGA      = WA_NOTA_ALV-ID_CARGA   " Id. da Carga
            I_ID_NOTA       = WA_NOTA_ALV-ID_NOTA    " Id. Nota Fiscal
            I_PESO_SUBTOTAL = WA_NOTA_ALV-NM_PESO_SUBTOTAL  " Peso SubTotal do Caminhão
            I_PESO_LIQUIDO  = WA_NOTA_ALV-NM_PESO_LIQUIDO   " Peso Líquido
            I_SEM_CONSULTA  = ABAP_FALSE
          IMPORTING
            E_NOTA          = DATA(WA_SAIDA) ).

        WA_NOTA_ALV-NR_PERC_UMI = WA_SAIDA-NR_PERC_UMI.
        WA_NOTA_ALV-NR_QTDE_UMI = WA_SAIDA-NR_QTDE_UMI.
        WA_NOTA_ALV-NR_PERC_IMP = WA_SAIDA-NR_PERC_IMP.
        WA_NOTA_ALV-NR_QTDE_IMP = WA_SAIDA-NR_QTDE_IMP.
        WA_NOTA_ALV-NR_PERC_AVA = WA_SAIDA-NR_PERC_AVA.
        WA_NOTA_ALV-NR_QTDE_AVA = WA_SAIDA-NR_QTDE_AVA.
        WA_NOTA_ALV-NR_PERC_ARD = WA_SAIDA-NR_PERC_ARD.
        WA_NOTA_ALV-NR_QTDE_ARD = WA_SAIDA-NR_QTDE_ARD.
        WA_NOTA_ALV-NR_PERC_QUE = WA_SAIDA-NR_PERC_QUE.
        WA_NOTA_ALV-NR_QTDE_QUE = WA_SAIDA-NR_QTDE_QUE.
        WA_NOTA_ALV-NR_PERC_ESV = WA_SAIDA-NR_PERC_ESV.
        WA_NOTA_ALV-NR_QTDE_ESV = WA_SAIDA-NR_QTDE_ESV.
        WA_NOTA_ALV-NR_PERC_CAR = WA_SAIDA-NR_PERC_CAR.
        WA_NOTA_ALV-NR_QTDE_CAR = WA_SAIDA-NR_QTDE_CAR.

      ENDIF.

      APPEND WA_NOTA_ALV TO E_APRESENTACAO-NOTAS.

    ENDLOOP.

    "Ordens de Venda
    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM).
      CLEAR: WA_ORDEM_ALV.

      MOVE-CORRESPONDING WA_ORDEM TO WA_ORDEM_ALV.

      IF WA_ORDEM-NR_ORDEM_VENDA IS NOT INITIAL.
        TRY .
            ME->GET_INFO_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = WA_ORDEM-NR_ORDEM_VENDA IMPORTING E_ORDEM = DATA(R_ORDEM) ).
            WA_ORDEM_ALV-TP_TIPO_ORDEM  = R_ORDEM-TP_TIPO_ORDEM.
            WA_ORDEM_ALV-DS_TIPO_ORDEM  = R_ORDEM-DS_TIPO_ORDEM.
            WA_ORDEM_ALV-DS_TIPO_FRETE  = R_ORDEM-DS_TIPO_FRETE.
            WA_ORDEM_ALV-ID_PRODUTO     = R_ORDEM-ID_PRODUTO.
            WA_ORDEM_ALV-DS_PRODUTO     = R_ORDEM-DS_PRODUTO.
          CATCH ZCX_CARGA.    "
        ENDTRY.
      ENDIF.

      APPEND WA_ORDEM_ALV TO E_APRESENTACAO-ORDEM_VENDA.
    ENDLOOP.

    "Pedido de Compra
    LOOP AT ME->ZIF_CARGA~PEDIDO_COMPRA INTO DATA(WA_PEDIDO_COMPRA).
      CLEAR: WA_PEDIDO_ALV.

      MOVE-CORRESPONDING WA_PEDIDO_COMPRA TO WA_PEDIDO_ALV.

      IF WA_PEDIDO_COMPRA-NR_PEDIDO_COMPRA IS NOT INITIAL.
        TRY .
            ME->ZIF_CARGA~GET_INFO_PEDIDO_COMPRA(
              EXPORTING
                I_PEDIDO_COMPRA = WA_PEDIDO_COMPRA-NR_PEDIDO_COMPRA
              IMPORTING
                E_PEDIDO = DATA(E_PEDIDO) ).
            WA_PEDIDO_ALV-TP_TIPO_PEDIDO = E_PEDIDO-TP_TIPO_PEDIDO.
            WA_PEDIDO_ALV-DS_TIPO_PEDIDO = E_PEDIDO-DS_TIPO_PEDIDO.
            WA_PEDIDO_ALV-DS_TIPO_FRETE  = E_PEDIDO-DS_TIPO_FRETE.
            WA_PEDIDO_ALV-ID_PRODUTO     = E_PEDIDO-ID_PRODUTO.
            WA_PEDIDO_ALV-DS_PRODUTO     = E_PEDIDO-DS_PRODUTO.
          CATCH ZCX_CARGA.
        ENDTRY.
      ENDIF.

      APPEND WA_PEDIDO_ALV TO E_APRESENTACAO-PEDIDO_COMPRA.

    ENDLOOP.

    "Solicitação de Manutenção
    MOVE-CORRESPONDING ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO TO E_APRESENTACAO-MANUTENCAO.
    IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO IS NOT INITIAL.
      E_APRESENTACAO-MANUTENCAO-TP_SOLICITACAO_STATUS = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-TP_STATUS.
    ENDIF.

    "Solicitações de Manutenção da Carga
    LOOP AT ME->ZIF_CARGA~SOLICITACOES INTO DATA(WA_SOLICITACOES).
      CLEAR: WA_SOLICITACAO_ALV.
      MOVE-CORRESPONDING WA_SOLICITACOES TO WA_SOLICITACAO_ALV.
      WA_SOLICITACAO_ALV-TP_SOLICITACAO_STATUS = WA_SOLICITACOES-TP_STATUS.
      APPEND WA_SOLICITACAO_ALV TO E_APRESENTACAO-SOLICITACOES.
    ENDLOOP.

    LOOP AT ME->ZIF_CARGA~TAKE_UP INTO DATA(WA_TAKE_UP).
      READ TABLE E_APRESENTACAO-NOTAS WITH KEY ID_NOTA = WA_TAKE_UP-ID_NOTA INTO WA_NOTA_ALV.
      IF SY-SUBRC IS NOT INITIAL.
        CONTINUE.
      ENDIF.
      APPEND VALUE #( ID_CARGA      = WA_TAKE_UP-ID_CARGA
                      ID_NOTA       = WA_TAKE_UP-ID_NOTA
                      DS_FORNECEDOR = WA_NOTA_ALV-DS_FORNECEDOR
                      ID_MOD_FISCAL = WA_NOTA_ALV-ID_MOD_FISCAL
                      NR_NOTA       = WA_NOTA_ALV-NR_NOTA
                      NM_SERIE      = WA_NOTA_ALV-NM_SERIE
                      DT_EMISSAO    = WA_NOTA_ALV-DT_EMISSAO
                      ID_TAKEUP     = WA_TAKE_UP-ID_TAKEUP
                      NU_BLOCO      = WA_TAKE_UP-NU_BLOCO
                      QT_VINCULADA  = WA_TAKE_UP-QT_VINCULADA
                      QT_FARDOS     = WA_TAKE_UP-QT_FARDOS )
                      TO E_APRESENTACAO-TAKEUP.
    ENDLOOP.

    LOOP AT ME->ZIF_CARGA~BLOCOS INTO DATA(WA_BLOCO).

      CLEAR: WA_BLOCO_ALV.
      MOVE-CORRESPONDING WA_BLOCO TO WA_BLOCO_ALV.

      SELECT SINGLE NAME1 INTO @WA_BLOCO_ALV-DS_PONTO_C
        FROM LFA1
       WHERE LIFNR EQ @WA_BLOCO-CD_PONTO_C.

      APPEND WA_BLOCO_ALV TO E_APRESENTACAO-BLOCOS.

    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_ALV_APRESENTACAO_LOG.

    DATA: WA_NOTA_ALV   TYPE ZDE_ZSDT0001NT_ALV.
    DATA: WA_ORDEM_ALV  TYPE ZDE_ZSDT0001OV_ALV.
    DATA: WA_TAKEUP_ALV TYPE ZDE_ZSDT0001TK_ALV.
    DATA: WA_BLOCO_ALV TYPE ZDE_ZSDT0001FD_ALV.

    R_CARGA = ME.

    CLEAR: E_APRESENTACAO.

    SELECT SINGLE *
      INTO @DATA(WA_ZSDT0001CG_LOG)
      FROM ZSDT0001CGLG
     WHERE ID_CARGA    EQ @ME->CARGA-ID_CARGA
       AND DT_REGISTRO EQ @I_DT_REGISTRO
       AND HR_REGISTRO EQ @I_HR_REGISTRO
       AND US_REGISTRO EQ @I_US_REGISTRO.

    SELECT *
      INTO TABLE @DATA(IT_ZSDT0001NT_LOG)
      FROM ZSDT0001NTLG
     WHERE ID_CARGA    EQ @ME->CARGA-ID_CARGA
       AND DT_REGISTRO EQ @I_DT_REGISTRO
       AND HR_REGISTRO EQ @I_HR_REGISTRO
       AND US_REGISTRO EQ @I_US_REGISTRO.

    SELECT *
      INTO TABLE @DATA(IT_ZSDT0001TK_LOG)
      FROM ZSDT0001TKLG
     WHERE ID_CARGA    EQ @ME->CARGA-ID_CARGA
       AND DT_REGISTRO EQ @I_DT_REGISTRO
       AND HR_REGISTRO EQ @I_HR_REGISTRO
       AND US_REGISTRO EQ @I_US_REGISTRO.

    SELECT *
      INTO TABLE @DATA(IT_ZSDT0001OV_LOG)
      FROM ZSDT0001OVLG
     WHERE ID_CARGA    EQ @ME->CARGA-ID_CARGA
       AND DT_REGISTRO EQ @I_DT_REGISTRO
       AND HR_REGISTRO EQ @I_HR_REGISTRO
       AND US_REGISTRO EQ @I_US_REGISTRO.

    SELECT *
      INTO TABLE @DATA(IT_ZSDT0001FD_LOG)
      FROM ZSDT0001FDLG
     WHERE ID_CARGA    EQ @ME->CARGA-ID_CARGA
       AND DT_REGISTRO EQ @I_DT_REGISTRO
       AND HR_REGISTRO EQ @I_HR_REGISTRO
       AND US_REGISTRO EQ @I_US_REGISTRO.

    SELECT *
      INTO TABLE @DATA(IT_ZSDT0001CL_LOG)
      FROM ZSDT0001CLLG
     WHERE ID_CARGA    EQ @ME->CARGA-ID_CARGA
       AND DT_REGISTRO EQ @I_DT_REGISTRO
       AND HR_REGISTRO EQ @I_HR_REGISTRO
       AND US_REGISTRO EQ @I_US_REGISTRO.

    SELECT *
      INTO TABLE @DATA(IT_ZSDT0001RS_LOG)
      FROM ZSDT0001RSLG
     WHERE ID_CARGA    EQ @ME->CARGA-ID_CARGA
       AND DT_REGISTRO EQ @I_DT_REGISTRO
       AND HR_REGISTRO EQ @I_HR_REGISTRO
       AND US_REGISTRO EQ @I_US_REGISTRO.

    SELECT *
      INTO TABLE @DATA(IT_ZSDT0001RS_LOG_03)
      FROM ZSDT0001RSLG_03
     WHERE ID_CARGA    EQ @ME->CARGA-ID_CARGA
       AND DT_REGISTRO EQ @I_DT_REGISTRO
       AND HR_REGISTRO EQ @I_HR_REGISTRO
       AND US_REGISTRO EQ @I_US_REGISTRO.

    "Carga
    MOVE-CORRESPONDING WA_ZSDT0001CG_LOG TO E_APRESENTACAO-CARGA.

    READ TABLE IT_ZSDT0001CL_LOG INTO DATA(WA_ZSDT0001CL_LOG) WITH KEY ID_CLASSIFICACAO = WA_ZSDT0001CG_LOG-ID_CLASSIFICACAO.

    "Transgenia
    MOVE-CORRESPONDING WA_ZSDT0001CL_LOG TO E_APRESENTACAO-CARGA.

    IF WA_ZSDT0001CG_LOG-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CONFERIDO.
      "Classificação
      LOOP AT IT_ZSDT0001RS_LOG INTO DATA(WA_RESULTADO).
        CASE WA_RESULTADO-TP_CARACTERISTICA.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
            E_APRESENTACAO-CARGA-NR_PERC_UMI = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_UMI = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
            E_APRESENTACAO-CARGA-NR_PERC_IMP = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_IMP = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
            E_APRESENTACAO-CARGA-NR_PERC_AVA = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_AVA = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
            E_APRESENTACAO-CARGA-NR_PERC_ARD = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_ARD = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
            E_APRESENTACAO-CARGA-NR_PERC_QUE = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_QUE = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
            E_APRESENTACAO-CARGA-NR_PERC_ESV = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_ESV = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
            E_APRESENTACAO-CARGA-NR_PERC_CAR = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_CAR = WA_RESULTADO-NR_QUANTIDADE_COM.
        ENDCASE.
      ENDLOOP.
      "SubCaracterística da Classificação
      LOOP AT IT_ZSDT0001RS_LOG_03 INTO DATA(WA_RESUL_AVARIADO).
        CASE WA_RESUL_AVARIADO-TP_SUB_CARAC_ESVERDEADO.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_ARQ = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_QUE.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_QUE = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_MOF.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_MOF = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_PIC.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_PIC = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_FER.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_FER = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GER.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_GER = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARD.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_ARD = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GES.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_GES = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
        ENDCASE.
      ENDLOOP.
    ELSE.
      "Classificação
      LOOP AT IT_ZSDT0001RS_LOG INTO WA_RESULTADO WHERE ID_CLASSIFICACAO EQ WA_ZSDT0001CG_LOG-ID_CLASSIFICACAO.
        CASE WA_RESULTADO-TP_CARACTERISTICA.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
            E_APRESENTACAO-CARGA-NR_PERC_UMI = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_UMI = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
            E_APRESENTACAO-CARGA-NR_PERC_IMP = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_IMP = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
            E_APRESENTACAO-CARGA-NR_PERC_AVA = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_AVA = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
            E_APRESENTACAO-CARGA-NR_PERC_ARD = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_ARD = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
            E_APRESENTACAO-CARGA-NR_PERC_QUE = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_QUE = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
            E_APRESENTACAO-CARGA-NR_PERC_ESV = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_ESV = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
            E_APRESENTACAO-CARGA-NR_PERC_CAR = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_CAR = WA_RESULTADO-NR_QUANTIDADE_COM.
        ENDCASE.
      ENDLOOP.
      "SubCaracterística da Classificação
      LOOP AT IT_ZSDT0001RS_LOG_03 INTO WA_RESUL_AVARIADO WHERE ID_CLASSIFICACAO EQ WA_ZSDT0001CG_LOG-ID_CLASSIFICACAO.
        CASE WA_RESUL_AVARIADO-TP_SUB_CARAC_ESVERDEADO.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_ARQ = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_QUE.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_QUE = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_MOF.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_MOF = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_PIC.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_PIC = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_FER.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_FER = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GER.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_GER = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARD.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_ARD = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GES.
            E_APRESENTACAO-CARGA-NR_PERC_AVA_GES = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    SELECT SINGLE NAME INTO E_APRESENTACAO-CARGA-NAME
      FROM J_1BBRANCH
     WHERE BUKRS  EQ E_APRESENTACAO-CARGA-ID_BUKRS
       AND BRANCH EQ E_APRESENTACAO-CARGA-ID_BRANCH.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_COLETA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_COLETA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_COLETA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_DESCARGA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_DESCARGA
        FROM KNA1 WHERE KUNNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_DESCARGA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_DESTINO IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_DESTINO
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_DESTINO.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_ENTREGA IS NOT INITIAL.
      SELECT SINGLE DS_LOCAL_ENTREGA
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_ENTREGA
        FROM ZSDT0001LE WHERE ID_LOCAL_ENTREGA EQ E_APRESENTACAO-CARGA-ID_LOCAL_ENTREGA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_PROPRIETARIO IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_PROPRIETARIO
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_PROPRIETARIO.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_OUTRO_PARTIC IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_OUTRO_PARTIC
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_OUTRO_PARTIC.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_AGENT_FRETE IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_AGENT_FRETE
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_AGENT_FRETE.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_MOTORISTA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_MOTORISTA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_MOTORISTA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_CLASSIFICADORA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_CLASSIFICADORA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_CLASSIFICADORA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_PRODUTO IS NOT INITIAL.
      SELECT SINGLE MAKTX
        INTO E_APRESENTACAO-CARGA-DS_PRODUTO
        FROM MAKT
       WHERE MATNR EQ E_APRESENTACAO-CARGA-ID_PRODUTO
         AND SPRAS EQ SY-LANGU.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_ORDEM IS NOT INITIAL.
      DATA(R_ORDEM_CARRGAMENTO) = ZCL_ORDEM_CARREGAMENTO=>BUSCA_ORDEM_CARREGAMENTO( I_ID_ORDEM = E_APRESENTACAO-CARGA-ID_ORDEM ).
      E_APRESENTACAO-CARGA-NR_ORDEM = R_ORDEM_CARRGAMENTO-NR_ORDEM.
      E_APRESENTACAO-ORDEM_CARREGA  = R_ORDEM_CARRGAMENTO.
    ENDIF.

    "Documentos Fiscais
    LOOP AT IT_ZSDT0001NT_LOG INTO DATA(WA_NOTA).

      CLEAR: WA_NOTA_ALV.

      MOVE-CORRESPONDING WA_NOTA TO WA_NOTA_ALV.

      SELECT SINGLE NAME1
        INTO WA_NOTA_ALV-DS_FORNECEDOR
        FROM LFA1 WHERE LIFNR EQ WA_NOTA_ALV-ID_FORNECEDOR.

      WA_NOTA_ALV-ID_PRODUTO = E_APRESENTACAO-CARGA-ID_PRODUTO.
      WA_NOTA_ALV-DS_PRODUTO = E_APRESENTACAO-CARGA-DS_PRODUTO.

      SELECT SINGLE DS_ENTRADA
        INTO WA_NOTA_ALV-DS_ENTRADA
        FROM ZSDT0001TETX WHERE ID_ENTRADA EQ WA_NOTA-ID_ENTRADA.

      IF WA_NOTA_ALV-ID_ENTREGUE_POR IS NOT INITIAL.
        SELECT SINGLE NAME1
          INTO WA_NOTA_ALV-DS_ENTREGUE_POR
          FROM LFA1 WHERE LIFNR EQ WA_NOTA_ALV-ID_ENTREGUE_POR.
      ENDIF.

      IF WA_ZSDT0001CG_LOG-TP_STATUS EQ ZIF_CARGA=>ST_STATUS_CONFERIDO.
        "Classificação
        LOOP AT IT_ZSDT0001RS_LOG INTO WA_RESULTADO WHERE ID_CLASSIFICACAO EQ WA_NOTA-ID_CLASSIFICACAO.
          CASE WA_RESULTADO-TP_CARACTERISTICA.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
              WA_NOTA_ALV-NR_PERC_UMI = WA_RESULTADO-NR_PERCENTUAL_COM.
              WA_NOTA_ALV-NR_QTDE_UMI = WA_RESULTADO-NR_QUANTIDADE_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
              WA_NOTA_ALV-NR_PERC_IMP = WA_RESULTADO-NR_PERCENTUAL_COM.
              WA_NOTA_ALV-NR_QTDE_IMP = WA_RESULTADO-NR_QUANTIDADE_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
              WA_NOTA_ALV-NR_PERC_AVA = WA_RESULTADO-NR_PERCENTUAL_COM.
              WA_NOTA_ALV-NR_QTDE_AVA = WA_RESULTADO-NR_QUANTIDADE_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
              WA_NOTA_ALV-NR_PERC_ARD = WA_RESULTADO-NR_PERCENTUAL_COM.
              WA_NOTA_ALV-NR_QTDE_ARD = WA_RESULTADO-NR_QUANTIDADE_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
              WA_NOTA_ALV-NR_PERC_QUE = WA_RESULTADO-NR_PERCENTUAL_COM.
              WA_NOTA_ALV-NR_QTDE_QUE = WA_RESULTADO-NR_QUANTIDADE_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
              WA_NOTA_ALV-NR_PERC_ESV = WA_RESULTADO-NR_PERCENTUAL_COM.
              WA_NOTA_ALV-NR_QTDE_ESV = WA_RESULTADO-NR_QUANTIDADE_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
              WA_NOTA_ALV-NR_PERC_CAR = WA_RESULTADO-NR_PERCENTUAL_COM.
              WA_NOTA_ALV-NR_QTDE_CAR = WA_RESULTADO-NR_QUANTIDADE_COM.
          ENDCASE.
        ENDLOOP.
        "SubCaracterística da Classificação
        LOOP AT IT_ZSDT0001RS_LOG_03 INTO WA_RESUL_AVARIADO WHERE ID_CLASSIFICACAO EQ WA_NOTA-ID_CLASSIFICACAO.
          CASE WA_RESUL_AVARIADO-TP_SUB_CARAC_ESVERDEADO.
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ.
              WA_NOTA_ALV-NR_PERC_AVA_ARQ = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_QUE.
              WA_NOTA_ALV-NR_PERC_AVA_QUE = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_MOF.
              WA_NOTA_ALV-NR_PERC_AVA_MOF = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_PIC.
              WA_NOTA_ALV-NR_PERC_AVA_PIC = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_FER.
              WA_NOTA_ALV-NR_PERC_AVA_FER = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GER.
              WA_NOTA_ALV-NR_PERC_AVA_GER = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARD.
              WA_NOTA_ALV-NR_PERC_AVA_ARD = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GES.
              WA_NOTA_ALV-NR_PERC_AVA_GES = WA_RESUL_AVARIADO-NR_PERCENTUAL_COM.
          ENDCASE.
        ENDLOOP.
      ENDIF.

      APPEND WA_NOTA_ALV TO E_APRESENTACAO-NOTAS.
    ENDLOOP.

    "Take UP's da Nota Fiscal
    LOOP AT IT_ZSDT0001TK_LOG INTO DATA(WA_ZSDT0001TK).
      CLEAR: WA_TAKEUP_ALV.
      MOVE-CORRESPONDING WA_ZSDT0001TK TO WA_TAKEUP_ALV.
      APPEND WA_TAKEUP_ALV TO E_APRESENTACAO-TAKEUP.
    ENDLOOP.

    "Blocos
    LOOP AT IT_ZSDT0001FD_LOG INTO DATA(WA_ZSDT0001FD).
      CLEAR: WA_BLOCO_ALV.
      MOVE-CORRESPONDING WA_ZSDT0001FD TO WA_BLOCO_ALV.

      SELECT SINGLE NAME1 INTO @WA_BLOCO_ALV-DS_PONTO_C
        FROM LFA1
       WHERE LIFNR EQ @WA_BLOCO_ALV-CD_PONTO_C.

      APPEND WA_BLOCO_ALV TO E_APRESENTACAO-BLOCOS.
    ENDLOOP.

    "Ordens de Venda
    LOOP AT IT_ZSDT0001OV_LOG INTO DATA(WA_ORDEM).
      CLEAR: WA_ORDEM_ALV.
      MOVE-CORRESPONDING WA_ORDEM TO WA_ORDEM_ALV.
      IF WA_ORDEM-NR_ORDEM_VENDA IS NOT INITIAL.
        TRY .
            ME->GET_INFO_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = WA_ORDEM-NR_ORDEM_VENDA IMPORTING E_ORDEM = DATA(R_ORDEM) ).
            WA_ORDEM_ALV-TP_TIPO_ORDEM  = R_ORDEM-TP_TIPO_ORDEM.
            WA_ORDEM_ALV-DS_TIPO_ORDEM  = R_ORDEM-DS_TIPO_ORDEM.
            WA_ORDEM_ALV-DS_TIPO_FRETE  = R_ORDEM-DS_TIPO_FRETE.
            WA_ORDEM_ALV-ID_PRODUTO     = R_ORDEM-ID_PRODUTO.
            WA_ORDEM_ALV-DS_PRODUTO     = R_ORDEM-DS_PRODUTO.
          CATCH ZCX_CARGA.    "
          CATCH ZCX_PARCEIROS.    "
        ENDTRY.
      ENDIF.
      APPEND WA_ORDEM_ALV TO E_APRESENTACAO-ORDEM_VENDA.
    ENDLOOP.

    LOOP AT IT_ZSDT0001TK_LOG INTO DATA(WA_TAKE_UP).
      READ TABLE E_APRESENTACAO-NOTAS WITH KEY ID_NOTA = WA_TAKE_UP-ID_NOTA INTO WA_NOTA_ALV.
      IF SY-SUBRC IS NOT INITIAL.
        CONTINUE.
      ENDIF.
      APPEND VALUE #( ID_CARGA = WA_TAKE_UP-ID_CARGA
                      ID_NOTA = WA_TAKE_UP-ID_NOTA
                      DS_FORNECEDOR = WA_NOTA_ALV-DS_FORNECEDOR
                      ID_MOD_FISCAL = WA_NOTA_ALV-ID_MOD_FISCAL
                      NR_NOTA = WA_NOTA_ALV-NR_NOTA
                      NM_SERIE = WA_NOTA_ALV-NM_SERIE
                      DT_EMISSAO = WA_NOTA_ALV-DT_EMISSAO
                      ID_TAKEUP = WA_TAKE_UP-ID_TAKEUP
                      NU_BLOCO = WA_TAKE_UP-NU_BLOCO
                      QT_VINCULADA = WA_TAKE_UP-QT_VINCULADA ) TO E_APRESENTACAO-TAKEUP.
    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_MESSAGEM_ESTORNO.

    DATA: R_MESSAGE_V1 TYPE RANGE OF SYMSGV,
          R_MESSAGE_V2 TYPE RANGE OF SYMSGV,
          R_MESSAGE_V3 TYPE RANGE OF SYMSGV,
          R_MESSAGE_V4 TYPE RANGE OF SYMSGV.

    R_CARGA = ME.

    CLEAR: E_MENSAGEM.

    IF I_MESSAGE_V1 IS NOT INITIAL.
      R_MESSAGE_V1 = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = I_MESSAGE_V1 HIGH = I_MESSAGE_V1 ) ).
    ENDIF.

    IF I_MESSAGE_V2 IS NOT INITIAL.
      R_MESSAGE_V2 = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = I_MESSAGE_V2 HIGH = I_MESSAGE_V2 ) ).
    ENDIF.

    IF I_MESSAGE_V3 IS NOT INITIAL.
      R_MESSAGE_V3 = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = I_MESSAGE_V3 HIGH = I_MESSAGE_V3 ) ).
    ENDIF.

    IF I_MESSAGE_V4 IS NOT INITIAL.
      R_MESSAGE_V4 = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = I_MESSAGE_V4 HIGH = I_MESSAGE_V4 ) ).
    ENDIF.

    SELECT SINGLE * INTO E_MENSAGEM
     FROM ZOB_MENSAGEM
    WHERE OBJ_KEY    EQ I_OBJ_KEY
      AND INTERFACE  EQ I_INTERFACE
      AND TYPE       EQ 'S'
      AND ID         EQ 'MM'
      AND NUM        EQ '899'
      AND MESSAGE_V1 IN R_MESSAGE_V1
      AND MESSAGE_V2 IN R_MESSAGE_V2
      AND MESSAGE_V3 IN R_MESSAGE_V3
      AND MESSAGE_V4 IN R_MESSAGE_V4.

    IF SY-SUBRC IS NOT INITIAL.

      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_MSG_ESTORNO_ERRO-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_MSG_ESTORNO_ERRO-MSGNO
                            ATTR1 = CONV #( I_INTERFACE )
                            ATTR2 = CONV #( I_OBJ_KEY ) )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_MSG_ESTORNO_ERRO-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_MSG_ESTORNO_ERRO-MSGNO
          MSGV1  = CONV #( I_INTERFACE )
          MSGV2  = CONV #( I_OBJ_KEY ).

    ENDIF.


  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_ORDEM_VENDA.

    R_CARGA = ME.

    SELECT K~VBELN,
           K~AUART,
           T~BEZEI,
           D~INCO1,
           P~MATNR,
           P~CHARG,
           M~MAKTX,
           K~KVGR3,
           K~KVGR5
      INTO TABLE @DATA(IT_TAB)
      FROM VBAK AS K
     INNER JOIN VBAP  AS P ON P~VBELN EQ K~VBELN
     INNER JOIN MAKT  AS M ON M~MATNR EQ P~MATNR AND M~SPRAS EQ @SY-LANGU
     INNER JOIN TVAKT AS T ON T~AUART EQ K~AUART AND T~SPRAS EQ @SY-LANGU
     INNER JOIN VBKD  AS D ON D~VBELN EQ K~VBELN AND D~POSNR EQ '000000'
     WHERE K~VBELN = @I_ORDEM_VENDA.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGNO )
          MSGID  = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGNO
          MSGTY  = 'E'.
    ENDIF.

    READ TABLE IT_TAB INDEX 1 INTO DATA(WA_TAB).

    E_ORDEM-NR_ORDEM_VENDA = WA_TAB-VBELN.
    E_ORDEM-TP_TIPO_ORDEM  = WA_TAB-AUART.
    E_ORDEM-DS_TIPO_ORDEM  = WA_TAB-BEZEI.
    E_ORDEM-DS_TIPO_FRETE  = WA_TAB-INCO1.
    E_ORDEM-ID_PRODUTO     = WA_TAB-MATNR.
    E_ORDEM-DS_PRODUTO     = WA_TAB-MAKTX.
    E_ORDEM-NR_SAFRA       = WA_TAB-CHARG.
    E_ORDEM-KVGR3          = WA_TAB-KVGR3.
    E_ORDEM-KVGR5          = WA_TAB-KVGR5.
    TRY .
        ZCL_ORDEM_VENDA=>ZIF_ORDEM_VENDA~GET_ORDEM_VENDA_SALDO( EXPORTING I_VBELN = WA_TAB-VBELN IMPORTING E_SALDO = DATA(E_SALDO) ).
        E_ORDEM-NM_SALDO_OV    = E_SALDO.
      CATCH ZCX_ORDEM_VENDA.
    ENDTRY.


  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_PEDIDO_COMPRA.

    R_CARGA = ME.

    SELECT K~EBELN AS EBELN,
           K~BUKRS AS ID_EMPRESA_SAIDA,
           K~RESWK AS ID_FILIAL_SAIDA,
           G~CHARG AS DS_SAFRA,
           K~BSART AS TIPO_PEDIDO,
           P~WERKS AS ID_LOCAL_DESTINO,
           P~MATNR AS MATNR,
           M~MAKTX AS MAKTX,
           T~BSART AS BSART,
           T~BATXT AS BATXT,
           P~INCO1 AS INCO1,
           P~ZCKFRETEENT AS ZCKFRETEENT
      INTO TABLE @DATA(IT_TAB)
      FROM EKKO AS K
     INNER JOIN EKPO  AS P ON P~EBELN EQ K~EBELN
     INNER JOIN EKET  AS G ON G~EBELN EQ P~EBELN AND G~EBELP EQ P~EBELP
     INNER JOIN MAKT  AS M ON M~MATNR EQ P~MATNR AND M~SPRAS EQ @SY-LANGU
     INNER JOIN T161T AS T ON T~BSART EQ K~BSART AND T~SPRAS EQ @SY-LANGU
     WHERE K~EBELN EQ @I_PEDIDO_COMPRA
       AND K~STATU EQ '9'.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_NAO_ENC-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_NAO_ENC-MSGNO )
          MSGID  = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_NAO_ENC-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_NAO_ENC-MSGNO
          MSGTY  = 'E'.
    ENDIF.

    READ TABLE IT_TAB INDEX 1 INTO DATA(WA_TAB).

    E_PEDIDO-NR_PEDIDO_COMPRA    = WA_TAB-EBELN.
    E_PEDIDO-TP_TIPO_PEDIDO      = WA_TAB-BSART.
    E_PEDIDO-DS_TIPO_PEDIDO      = WA_TAB-BATXT.
    E_PEDIDO-DS_TIPO_FRETE       = WA_TAB-INCO1.
    E_PEDIDO-ID_PRODUTO          = WA_TAB-MATNR.
    E_PEDIDO-DS_PRODUTO          = WA_TAB-MAKTX.
    E_PEDIDO-ID_CENTRO_RECEBEDOR = WA_TAB-ID_LOCAL_DESTINO.
    E_PEDIDO-ID_CENTRO_SAIDA     = WA_TAB-ID_FILIAL_SAIDA.
    E_PEDIDO-NR_SAFRA            = WA_TAB-DS_SAFRA.
    E_PEDIDO-ZCKFRETEENT         = WA_TAB-ZCKFRETEENT.

    SELECT SINGLE * INTO @DATA(WA_PR)
      FROM EKPA
     WHERE EBELN EQ @WA_TAB-EBELN
       AND EBELP EQ '00000'
       AND PARVW EQ 'PR'.

    IF SY-SUBRC IS INITIAL.
      E_PEDIDO-ID_LOCAL_COLETA = WA_PR-LIFN2.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_PLACA.

    R_CARGA = ME.

    CHECK I_PLACA IS NOT INITIAL.

    SELECT SINGLE * INTO E_ZLEST0002
      FROM ZLEST0002
     WHERE PC_VEICULO EQ I_PLACA.

    IF SY-SUBRC IS NOT INITIAL AND I_TIPO_FRETE EQ ZIF_CARGA=>ST_TP_FRETE_CIF.

      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID    = VALUE #( MSGID = ZCX_CARGA=>ZCX_PLACA_SEM_CADASTRO-MSGID
                               MSGNO = ZCX_CARGA=>ZCX_PLACA_SEM_CADASTRO-MSGNO
                               ATTR1 = CONV #( I_PLACA ) )
          MSGID     = ZCX_CARGA=>ZCX_PLACA_SEM_CADASTRO-MSGID
          MSGNO     = ZCX_CARGA=>ZCX_PLACA_SEM_CADASTRO-MSGNO
          MSGTY     = 'E'
          MSGV1     = CONV #( I_PLACA )
          TRANSACAO = 'ZLES0003'.

    ENDIF.

    CHECK I_VALIDAR EQ ABAP_TRUE.

    "Valida Cadastro
    IF SY-SUBRC IS INITIAL.

      IF I_TIPO_FRETE NE ZIF_CARGA=>ST_TP_FRETE_CIF.
        IF E_ZLEST0002-PROPRIETARIO NE ME->CARGA-ID_PROPRIETARIO AND ME->CARGA-ID_PROPRIETARIO IS NOT INITIAL.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID    = VALUE #( MSGID = ZCX_CARGA=>ZCX_ERRO_PROPRIETARIO-MSGID
                                   MSGNO = ZCX_CARGA=>ZCX_ERRO_PROPRIETARIO-MSGNO
                                   ATTR1 = CONV #( I_PLACA )
                                   ATTR2 = CONV #( ME->CARGA-ID_PROPRIETARIO ) )
              MSGID     = ZCX_CARGA=>ZCX_ERRO_PROPRIETARIO-MSGID
              MSGNO     = ZCX_CARGA=>ZCX_ERRO_PROPRIETARIO-MSGNO
              MSGTY     = 'E'
              MSGV1     = CONV #( I_PLACA )
              MSGV2     = CONV #( ME->CARGA-ID_PROPRIETARIO )
              TRANSACAO = 'ZLES0003'.
        ENDIF.
      ENDIF.

*068  Placa &1 não é de Tração!
      IF E_ZLEST0002-TP_VEICULO NE '0' AND I_TRACAO EQ ABAP_TRUE.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID    = VALUE #( MSGID = ZCX_CARGA=>ZCX_PLACA_NAO_TRACAO-MSGID
                                 MSGNO = ZCX_CARGA=>ZCX_PLACA_NAO_TRACAO-MSGNO
                                 ATTR1 = CONV #( I_PLACA ) )
            MSGID     = ZCX_CARGA=>ZCX_PLACA_NAO_TRACAO-MSGID
            MSGNO     = ZCX_CARGA=>ZCX_PLACA_NAO_TRACAO-MSGNO
            MSGTY     = 'E'
            MSGV1     = CONV #( I_PLACA )
            TRANSACAO = 'ZLES0003'.
      ENDIF.

*069  Placa &1 não é de Reboque!
      IF E_ZLEST0002-TP_VEICULO NE '1' AND I_TRACAO EQ ABAP_FALSE.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID    = VALUE #( MSGID = ZCX_CARGA=>ZCX_PLACA_NAO_REBOQUE-MSGID
                                 MSGNO = ZCX_CARGA=>ZCX_PLACA_NAO_REBOQUE-MSGNO
                                 ATTR1 = CONV #( I_PLACA ) )
            MSGID     = ZCX_CARGA=>ZCX_PLACA_NAO_REBOQUE-MSGID
            MSGNO     = ZCX_CARGA=>ZCX_PLACA_NAO_REBOQUE-MSGNO
            MSGTY     = 'E'
            MSGV1     = CONV #( I_PLACA )
            TRANSACAO = 'ZLES0003'.
      ENDIF.

*070  Veículo &1 sem informação de Qtde de Eixo!
      IF E_ZLEST0002-QT_EIXO IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID    = VALUE #( MSGID = ZCX_CARGA=>ZCX_PLACA_SEM_QTD_EIXO-MSGID
                                 MSGNO = ZCX_CARGA=>ZCX_PLACA_SEM_QTD_EIXO-MSGNO
                                 ATTR1 = CONV #( I_PLACA ) )
            MSGID     = ZCX_CARGA=>ZCX_PLACA_SEM_QTD_EIXO-MSGID
            MSGNO     = ZCX_CARGA=>ZCX_PLACA_SEM_QTD_EIXO-MSGNO
            MSGTY     = 'E'
            MSGV1     = CONV #( I_PLACA )
            TRANSACAO = 'ZLES0003'.
      ENDIF.

      IF I_TIPO_FRETE EQ ZIF_CARGA=>ST_TP_FRETE_CIF.

        CALL METHOD ZCL_WEBSERVICE_TIPCARD=>CONS_SITUACAO_TRANSPORTADOR
          EXPORTING
            I_PLACA     = I_PLACA
          RECEIVING
            E_CONSULTAS = DATA(E_CONSULTAS)
          EXCEPTIONS
            ERRO        = 1
            WEBSERVICE  = 2
            OTHERS      = 3.

        IF SY-SUBRC IS NOT INITIAL.
          MESSAGE W000(ZLES) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.

        READ TABLE E_CONSULTAS INDEX 1 INTO DATA(WA_ZLEST0135).
        IF WA_ZLEST0135-CK_RNTRC_ATIVO EQ ABAP_FALSE.
          SY-MSGV1 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+000(50).
          SY-MSGV2 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+050(50).
          SY-MSGV3 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+100(50).
          SY-MSGV4 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+150(50)..
          MESSAGE W000(ZLES) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.
      ENDIF.

    ELSEIF I_TIPO_FRETE EQ ZIF_CARGA=>ST_TP_FRETE_CPT.

      CALL METHOD ZCL_WEBSERVICE_TIPCARD=>CONS_SITUACAO_TRANSPORTADOR
        EXPORTING
          I_PLACA     = I_PLACA
          I_PARTINER  = ME->CARGA-ID_AGENT_FRETE
        RECEIVING
          E_CONSULTAS = E_CONSULTAS
        EXCEPTIONS
          ERRO        = 1
          WEBSERVICE  = 2
          OTHERS      = 3.

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE W000(ZLES) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      READ TABLE E_CONSULTAS INDEX 1 INTO WA_ZLEST0135.
      IF WA_ZLEST0135-CK_RNTRC_ATIVO EQ ABAP_FALSE.
        SY-MSGV1 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+000(50).
        SY-MSGV2 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+050(50).
        SY-MSGV3 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+100(50).
        SY-MSGV4 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+150(50)..
        MESSAGE W000(ZLES) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INSTANCE.

    IF ZIF_CARGA~AT_CARGA IS NOT BOUND.
      CREATE OBJECT ZIF_CARGA~AT_CARGA TYPE ZCL_CARGA_RECEBIMENTO.
      R_INSTANCE = ZIF_CARGA~AT_CARGA.
    ELSE.
      R_INSTANCE = ZIF_CARGA~AT_CARGA.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_LOGS_HISTORICO.

    DATA: WA_LOGS    TYPE ZDE_LOG_REGISTRO.

    R_CARGA = ME.

    CLEAR: E_LOGS[], E_LOGS.

    TRY.
        EXEC SQL.
          OPEN DOCUMENTOS FOR
            SELECT * FROM (
            SELECT F.DT_REGISTRO, F.HR_REGISTRO, F.US_REGISTRO
              FROM SAPSR3.ZSDT0001CGLG F
             WHERE ID_CARGA = :ME->CARGA-ID_CARGA ) TT
             ORDER BY DT_REGISTRO, HR_REGISTRO
        ENDEXEC.
      CATCH CX_SY_NATIVE_SQL_ERROR INTO DATA(EXC_REF).
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ERRO_PSQ_BANCO_DADOS-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_ERRO_PSQ_BANCO_DADOS-MSGNO )
            MSGID  = ZCX_CARGA=>ZCX_ERRO_PSQ_BANCO_DADOS-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ERRO_PSQ_BANCO_DADOS-MSGNO
            MSGTY  = 'E'.
    ENDTRY.

    DO.
      EXEC SQL.
        FETCH NEXT DOCUMENTOS INTO
        :WA_LOGS-DT_REGISTRO,
        :WA_LOGS-HR_REGISTRO,
        :WA_LOGS-US_REGISTRO
      ENDEXEC.
      IF SY-SUBRC <> 0.
        EXIT.
      ELSE.
        APPEND WA_LOGS TO E_LOGS.
      ENDIF.
    ENDDO.

    EXEC SQL.
      CLOSE DOCUMENTOS
    ENDEXEC.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_MENS_INTERFACE_ENTRADA.

    DATA: WA_MENSAGENS LIKE LINE OF E_MENSAGENS.

    R_CARGA = ME.

    CLEAR: E_MENSAGENS.

    SELECT * INTO TABLE @DATA(IT_NOTAS)
      FROM ZSDT0001NT
     WHERE ID_CARGA        EQ @I_ID_CARGA
       AND OBJ_KEY_ENTRADA NE @SPACE.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SEM_REGISTRO_ENTRADA-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_SEM_REGISTRO_ENTRADA-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_SEM_REGISTRO_ENTRADA-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_SEM_REGISTRO_ENTRADA-MSGID.
    ENDIF.

    SELECT * INTO TABLE @DATA(IT_MENSAGENS)
      FROM ZOB_MENSAGEM
       FOR ALL ENTRIES IN @IT_NOTAS
     WHERE OBJ_KEY EQ @IT_NOTAS-OBJ_KEY_ENTRADA.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SEM_REGISTROS_MSG_INTEFACE-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_SEM_REGISTROS_MSG_INTEFACE-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_SEM_REGISTROS_MSG_INTEFACE-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_SEM_REGISTROS_MSG_INTEFACE-MSGID.
    ENDIF.

    SORT IT_MENSAGENS BY SEQ_REGISTRO.

    LOOP AT IT_MENSAGENS INTO DATA(WA_MENSAGEM).
      MOVE-CORRESPONDING WA_MENSAGEM TO WA_MENSAGENS.
      CASE WA_MENSAGENS-TYPE.
        WHEN 'S'.
          WA_MENSAGENS-ST_MENSAGEM = ICON_LED_GREEN.
        WHEN 'E'.
          WA_MENSAGENS-ST_MENSAGEM = ICON_LED_RED.
        WHEN 'W'.
          WA_MENSAGENS-ST_MENSAGEM = ICON_LED_YELLOW.
        WHEN 'I'.
          WA_MENSAGENS-ST_MENSAGEM = ICON_HINT.
      ENDCASE.
      APPEND WA_MENSAGENS TO E_MENSAGENS.
    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_NAME_JOB_SAIDA_AUTOMATICA.

    R_CARGA = ME.

    CONCATENATE 'JOB_SAIDA_AUTOMATICA' ME->CARGA-ID_CARGA INTO E_NAME SEPARATED BY '_'.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_NEW_ID_CARGA.

    CLEAR: E_ID_CARGA.

    R_CARGA = ME.

    CALL FUNCTION 'NUMBER_RANGE_ENQUEUE'
      EXPORTING
        OBJECT           = 'ZCARGA'
      EXCEPTIONS
        FOREIGN_LOCK     = 1
        OBJECT_NOT_FOUND = 2
        SYSTEM_FAILURE   = 3
        OTHERS           = 4.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        NR_RANGE_NR             = '01'
        OBJECT                  = 'ZCARGA'
        QUANTITY                = '00000000000000000001'
        IGNORE_BUFFER           = 'X'
      IMPORTING
        NUMBER                  = E_ID_CARGA
      EXCEPTIONS
        INTERVAL_NOT_FOUND      = 1
        NUMBER_RANGE_NOT_INTERN = 2
        OBJECT_NOT_FOUND        = 3
        QUANTITY_IS_0           = 4
        QUANTITY_IS_NOT_1       = 5
        INTERVAL_OVERFLOW       = 6
        BUFFER_OVERFLOW         = 7
        OTHERS                  = 8.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

* Desbloqueia o objeto de numeração
    CALL FUNCTION 'NUMBER_RANGE_DEQUEUE'
      EXPORTING
        OBJECT           = 'ZCARGA'
      EXCEPTIONS
        OBJECT_NOT_FOUND = 1
        OTHERS           = 2.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.


  ENDMETHOD.


  METHOD ZIF_CARGA~GET_NEW_ID_CLASSIFICAO.

    R_CARGA = ME.

    CLEAR: E_ID_CLASSIFICACAO.

    CALL FUNCTION 'NUMBER_RANGE_ENQUEUE'
      EXPORTING
        OBJECT           = 'ZCLASSIFIC'
      EXCEPTIONS
        FOREIGN_LOCK     = 1
        OBJECT_NOT_FOUND = 2
        SYSTEM_FAILURE   = 3
        OTHERS           = 4.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        NR_RANGE_NR             = '01'
        OBJECT                  = 'ZCLASSIFIC'
        QUANTITY                = '00000000000000000001'
        IGNORE_BUFFER           = 'X'
      IMPORTING
        NUMBER                  = E_ID_CLASSIFICACAO
      EXCEPTIONS
        INTERVAL_NOT_FOUND      = 1
        NUMBER_RANGE_NOT_INTERN = 2
        OBJECT_NOT_FOUND        = 3
        QUANTITY_IS_0           = 4
        QUANTITY_IS_NOT_1       = 5
        INTERVAL_OVERFLOW       = 6
        BUFFER_OVERFLOW         = 7
        OTHERS                  = 8.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

* Desbloqueia o objeto de numeração
    CALL FUNCTION 'NUMBER_RANGE_DEQUEUE'
      EXPORTING
        OBJECT           = 'ZCLASSIFIC'
      EXCEPTIONS
        OBJECT_NOT_FOUND = 1
        OTHERS           = 2.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.


  ENDMETHOD.


  METHOD ZIF_CARGA~GET_NEW_ID_ENTRADA_ESTOQUE.

    CLEAR: E_ID_CARGA.

    R_CARGA = ME.

    CALL FUNCTION 'NUMBER_RANGE_ENQUEUE'
      EXPORTING
        OBJECT           = 'ZENTESTOQU'
      EXCEPTIONS
        FOREIGN_LOCK     = 1
        OBJECT_NOT_FOUND = 2
        SYSTEM_FAILURE   = 3
        OTHERS           = 4.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        NR_RANGE_NR             = '01'
        OBJECT                  = 'ZENTESTOQU'
        QUANTITY                = '00000000000000000001'
        IGNORE_BUFFER           = 'X'
      IMPORTING
        NUMBER                  = E_ID_CARGA
      EXCEPTIONS
        INTERVAL_NOT_FOUND      = 1
        NUMBER_RANGE_NOT_INTERN = 2
        OBJECT_NOT_FOUND        = 3
        QUANTITY_IS_0           = 4
        QUANTITY_IS_NOT_1       = 5
        INTERVAL_OVERFLOW       = 6
        BUFFER_OVERFLOW         = 7
        OTHERS                  = 8.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

* Desbloqueia o objeto de numeração
    CALL FUNCTION 'NUMBER_RANGE_DEQUEUE'
      EXPORTING
        OBJECT           = 'ZENTESTOQU'
      EXCEPTIONS
        OBJECT_NOT_FOUND = 1
        OTHERS           = 2.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_NEW_ID_SOLICITACAO_MANUT.

    CLEAR: E_ID_SOLICITACAO.

    R_CARGA = ME.

    CALL FUNCTION 'NUMBER_RANGE_ENQUEUE'
      EXPORTING
        OBJECT           = 'ZCARGASA'
      EXCEPTIONS
        FOREIGN_LOCK     = 1
        OBJECT_NOT_FOUND = 2
        SYSTEM_FAILURE   = 3
        OTHERS           = 4.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        NR_RANGE_NR             = '01'
        OBJECT                  = 'ZCARGASA'
        QUANTITY                = '00000000000000000001'
        IGNORE_BUFFER           = 'X'
      IMPORTING
        NUMBER                  = E_ID_SOLICITACAO
      EXCEPTIONS
        INTERVAL_NOT_FOUND      = 1
        NUMBER_RANGE_NOT_INTERN = 2
        OBJECT_NOT_FOUND        = 3
        QUANTITY_IS_0           = 4
        QUANTITY_IS_NOT_1       = 5
        INTERVAL_OVERFLOW       = 6
        BUFFER_OVERFLOW         = 7
        OTHERS                  = 8.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

* Desbloqueia o objeto de numeração
    CALL FUNCTION 'NUMBER_RANGE_DEQUEUE'
      EXPORTING
        OBJECT           = 'ZCARGASA'
      EXCEPTIONS
        OBJECT_NOT_FOUND = 1
        OTHERS           = 2.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_NOTA_FORNECEDOR_IE.

    DATA: OBJ_FORNECEDOR TYPE REF TO ZCL_FORNECEDORES.

    CREATE OBJECT OBJ_FORNECEDOR.

    TRY .
        OBJ_FORNECEDOR->ZIF_PARCEIROS~SET_PARCEIRO_IE( I_INSC_ESTATUAL = I_STCD3 )->GET_ID_PARCEIRO( IMPORTING E_PARCEIRO = E_NOTA-ID_FORNECEDOR )->GET_NAME( IMPORTING E_NAME = E_NOTA-DS_FORNECEDOR ).
      CATCH ZCX_PARCEIROS INTO DATA(EX_PARCEIROS).

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_IE_ERRO_FORNECEDOR-MSGID
                              MSGNO  = ZCX_CARGA=>ZCX_IE_ERRO_FORNECEDOR-MSGNO
                              ATTR1  = CONV #( I_STCD3 ) )
            MSGID  = ZCX_CARGA=>ZCX_IE_ERRO_FORNECEDOR-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_IE_ERRO_FORNECEDOR-MSGNO
            MSGTY  = 'E'
            MSGV1  = CONV #( I_STCD3 ).

    ENDTRY.

    SELECT SINGLE * INTO @DATA(WA_PRODUTOR_VALIDA)
      FROM ZSDT0001PD
     WHERE ID_PRODUTOR EQ @E_NOTA-ID_FORNECEDOR
       AND NR_SAFRA    EQ @ME->CARGA-NR_SAFRA
       AND ID_BUKRS    EQ @ME->CARGA-ID_BUKRS
       AND ID_BRANCH   EQ @ME->CARGA-ID_BRANCH.

    IF SY-SUBRC IS NOT INITIAL.
      "095  Fornecedor &1 Não Parametrizado para Safra/Empresa/Filial: &2/&3/&4!
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_FORN_SEM_PARAMETRO-MSGID
                            MSGNO  = ZCX_CARGA=>ZCX_FORN_SEM_PARAMETRO-MSGNO
                            ATTR1  = CONV #( E_NOTA-ID_FORNECEDOR )
                            ATTR2  = CONV #( ME->CARGA-NR_SAFRA )
                            ATTR3  = CONV #( ME->CARGA-ID_BUKRS )
                            ATTR4  = CONV #( ME->CARGA-ID_BRANCH ) )
          MSGID  = ZCX_CARGA=>ZCX_FORN_SEM_PARAMETRO-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_FORN_SEM_PARAMETRO-MSGNO
          MSGTY  = 'E'
          MSGV1  = CONV #( E_NOTA-ID_FORNECEDOR )
          MSGV2  = CONV #( ME->CARGA-NR_SAFRA )
          MSGV3  = CONV #( ME->CARGA-ID_BUKRS )
          MSGV4  = CONV #( ME->CARGA-ID_BRANCH ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_PARTINER_ORDEM_VENDA.

*    DATA: LC_FUNCAO_PARTINER  TYPE PARVW.
*
*    CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
*      EXPORTING
*        INPUT  = I_FUNCAO_PARTINER
*      IMPORTING
*        OUTPUT = LC_FUNCAO_PARTINER.

    R_CARGA = ME.

    SELECT SINGLE *
      INTO @E_PARTINER
      FROM VBPA
     WHERE VBELN = @I_ORDEM_VENDA
       AND PARVW = @I_FUNCAO_PARTINER.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_VENDA_PARTINER-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_ORDEM_VENDA_PARTINER-MSGNO
                            ATTR1 = CONV #( I_FUNCAO_PARTINER ) )
          MSGID  = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGNO
          MSGTY  = 'E'
          MSGV1  = CONV #( I_FUNCAO_PARTINER ).
    ENDIF.


  ENDMETHOD.


  METHOD ZIF_CARGA~GET_PEDIDO_COMPRA.

    DATA: LC_PEDIDO TYPE REF TO ZCL_PEDIDO_COMPRA,
          LC_FILTRO TYPE ZDE_FILTRO_PEDIDO_COMPRA,
          IT_EKKO   TYPE ZDE_EKKO_T.

    R_CARGA = ME.

    READ TABLE ME->DOCUMENTO_FISCAL WITH KEY ID_NOTA = I_ID_NOTA INTO DATA(WA_NOTA).

    CASE WA_NOTA-ID_MOD_FISCAL.
      WHEN ZCL_CARGA_RECEBIMENTO=>ST_MODEL_FISCAL_ELETRONICO.
        SELECT SINGLE * INTO @DATA(WA_ZSDT0001TE)
          FROM ZSDT0001TE
         WHERE ID_ENTRADA EQ @WA_NOTA-ID_ENTRADA
           AND ID_EMPRESA EQ @ME->CARGA-ID_BUKRS
           AND CK_NFE     EQ 'X'.
      WHEN ZCL_CARGA_RECEBIMENTO=>ST_MODEL_FISCAL_PAPEL.

        SELECT SINGLE * INTO WA_ZSDT0001TE
          FROM ZSDT0001TE
         WHERE ID_ENTRADA EQ WA_NOTA-ID_ENTRADA
           AND ID_EMPRESA EQ ME->CARGA-ID_BUKRS
           AND CK_NFE     EQ SPACE.
    ENDCASE.

    "Buscar Tipo de Nota Fiscal
    SELECT SINGLE * INTO @DATA(WA_ZSDT0001TETN)
      FROM ZSDT0001TETN
     WHERE ID_ENTRADA EQ @WA_ZSDT0001TE-ID_ENTRADA.

    IF SY-SUBRC IS INITIAL.

      "Buscar Grupo de Mercadoria
      SELECT SINGLE * INTO @DATA(WA_ZSDT0001MT)
        FROM ZSDT0001MT
       WHERE MATNR EQ @ME->CARGA-ID_PRODUTO.

      IF SY-SUBRC IS INITIAL.

        "Buscar Iva por Tipo de Nota Fiscal / Grupo de Mercadoria / Empresa
        SELECT SINGLE * INTO @DATA(WA_ZSDT0001TETNIVA)
          FROM ZSDT0001TETNIVA
         WHERE ID_EMPRESA   EQ @ME->CARGA-ID_BUKRS
           AND ID_TIPO_NOTA EQ @WA_ZSDT0001TETN-ID_TIPO_NOTA
           AND TP_GRUPO_CTB EQ @WA_ZSDT0001MT-TP_GRUPO_CTB.

        IF SY-SUBRC IS INITIAL.
          WA_ZSDT0001TE-ID_IVA = WA_ZSDT0001TETNIVA-ID_IVA.
        ENDIF.
      ENDIF.

    ENDIF.

    CLEAR: E_INFO_PEDIDO.

    CREATE OBJECT LC_PEDIDO.

    IF ZCL_CFOP=>GET_CK_CFOP_RETORNO_AMAZEM( I_CFOP = WA_NOTA-CFOP ) EQ ABAP_TRUE.

      LC_FILTRO-IBUKRS = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = ME->CARGA-ID_BUKRS    HIGH = ME->CARGA-ID_BUKRS    ) ).
      LC_FILTRO-ILIFNR = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = WA_NOTA-ID_FORNECEDOR HIGH = WA_NOTA-ID_FORNECEDOR ) ).
      LC_FILTRO-IMATNR = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = ME->CARGA-ID_PRODUTO  HIGH = ME->CARGA-ID_PRODUTO  ) ).
      LC_FILTRO-ICHARG = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = ME->CARGA-NR_SAFRA    HIGH = ME->CARGA-NR_SAFRA    ) ).
      LC_FILTRO-IWERKS = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = ME->CARGA-ID_BRANCH   HIGH = ME->CARGA-ID_BRANCH   ) ).
      LC_FILTRO-IBSTYP = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = 'F' HIGH = 'F' ) ).
      LC_FILTRO-IBSART = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = 'ZARM' HIGH = 'ZARM' ) ).
      LC_FILTRO-IEBELN = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = WA_NOTA-PO_NUMBER HIGH = WA_NOTA-PO_NUMBER ) ).
      LC_FILTRO-IEBELP = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = WA_NOTA-PO_ITEM HIGH = WA_NOTA-PO_ITEM ) ).
      LC_FILTRO-IEKORG = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = 'OC01'  HIGH = 'OC01' ) ).
      LC_FILTRO-IEKGRP = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = 'G01'   HIGH = 'G01' ) ).
      LC_FILTRO-IFRGRL = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = SPACE   HIGH = SPACE ) ).
      LC_FILTRO-IBSTAE = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = '0004'  HIGH = '0004' ) ).
      LC_FILTRO-IMWSKZ = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = WA_ZSDT0001TE-ID_IVA  HIGH = WA_ZSDT0001TE-ID_IVA  ) ).
      LC_FILTRO-ILGORT = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = 'ARMZ' HIGH = 'ARMZ' ) ).

      IF LC_PEDIDO->ZIF_PESQUISA~PESQUISAR( EXPORTING I_FILTROS  = LC_FILTRO IMPORTING E_REGISTROS = IT_EKKO ) NE ABAP_TRUE.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SEM_PEDIDO_COMPRA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_SEM_PEDIDO_COMPRA-MSGNO
                              ATTR1 = CONV #( WA_NOTA-ID_FORNECEDOR )
                              ATTR2 = CONV #( ME->CARGA-NR_SAFRA )
                              ATTR3 = CONV #( ME->CARGA-ID_PRODUTO )
                              ATTR4 = 'ZARM' )
            MSGID  = ZCX_CARGA=>ZCX_SEM_PEDIDO_COMPRA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_SEM_PEDIDO_COMPRA-MSGNO
            MSGTY  = 'E'
            MSGV1  = CONV #( WA_NOTA-ID_FORNECEDOR )
            MSGV2  = CONV #( ME->CARGA-NR_SAFRA )
            MSGV3  = CONV #( ME->CARGA-ID_PRODUTO )
            MSGV4  = 'ZARM'.
      ENDIF.

    ELSE.

      "Buscar Centro a Fixar
      SELECT SINGLE * INTO @DATA(WA_AFIXAR)
        FROM ZSDT_DEPARA_CEN
       WHERE VKORG             EQ @ME->CARGA-ID_BUKRS
         AND CENTRO_REAL       EQ @ME->CARGA-ID_BRANCH
         AND TP_CENTRO_VIRTUAL EQ @ZCL_PEDIDO_COMPRA=>ST_TP_CENTRO_A_FIXAR.

      IF SY-SUBRC IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID    = VALUE #( MSGID = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR-MSGID
                                 MSGNO = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR-MSGNO
                                 ATTR1 = CONV #( ME->CARGA-ID_BRANCH )
                                 ATTR2 = 'ZSDT0036' )
            MSGID     = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR-MSGID
            MSGNO     = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR-MSGNO
            MSGTY     = 'E'
            MSGV1     = CONV #( ME->CARGA-ID_BRANCH )
            MSGV2     = 'ZSDT0036'
            TRANSACAO = 'ZSDT0036'.
      ENDIF.

      SELECT SINGLE * INTO @DATA(WA_ZMMT0017)
        FROM ZMMT0017
       WHERE MATNR          EQ @ME->CARGA-ID_PRODUTO
         AND CENTRO_FIXO    EQ @ME->CARGA-ID_BRANCH
         AND CENTRO_A_FIXAR EQ @WA_AFIXAR-CENTROV_1
         AND TP_PRODUTO     EQ @SPACE.

      IF SY-SUBRC IS NOT INITIAL.
        "Centro &1 Centro a Fixar &2 e Material &3 sem Depósito! Transação &4!
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID    = VALUE #( MSGID = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR_DEPOSITO-MSGID
                                 MSGNO = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR_DEPOSITO-MSGNO
                                 ATTR1 = CONV #( ME->CARGA-ID_BRANCH )
                                 ATTR2 = CONV #( WA_AFIXAR-CENTROV_1 )
                                 ATTR3 = CONV #( ME->CARGA-ID_PRODUTO )
                                 ATTR4 = 'ZMM0017' )
            MSGID     = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR_DEPOSITO-MSGID
            MSGNO     = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR_DEPOSITO-MSGNO
            MSGTY     = 'E'
            MSGV1     = CONV #( ME->CARGA-ID_BRANCH )
            MSGV2     = CONV #( WA_AFIXAR-CENTROV_1 )
            MSGV3     = CONV #( ME->CARGA-ID_PRODUTO )
            MSGV4     = 'ZMM0017'
            TRANSACAO = 'ZMM0017'.
      ENDIF.

      DATA(LC_SAFRA_FILIAL) = |{ ME->CARGA-NR_SAFRA }_{ ME->CARGA-ID_BRANCH }|.

      LC_FILTRO-IBUKRS = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = ME->CARGA-ID_BUKRS    HIGH = ME->CARGA-ID_BUKRS    ) ).
      LC_FILTRO-ILIFNR = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = WA_NOTA-ID_FORNECEDOR HIGH = WA_NOTA-ID_FORNECEDOR ) ).
      LC_FILTRO-IMATNR = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = ME->CARGA-ID_PRODUTO  HIGH = ME->CARGA-ID_PRODUTO  ) ).
      LC_FILTRO-ICHARG = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = ME->CARGA-NR_SAFRA    HIGH = ME->CARGA-NR_SAFRA    ) ( LOW = LC_SAFRA_FILIAL HIGH = LC_SAFRA_FILIAL ) ).
      LC_FILTRO-IWERKS = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = WA_AFIXAR-CENTROV_1   HIGH = WA_AFIXAR-CENTROV_1   ) ).
      LC_FILTRO-IBSTYP = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = 'F'     HIGH = 'F'     ) ).
      DATA(LC_TIPO_PEDIDO) = COND #( LET CLET = WA_ZSDT0001TE-ID_TP_OPERACAO IN WHEN CLET EQ '08' THEN 'ZGEF' ELSE 'ZGR' ).
      LC_FILTRO-IBSART = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = LC_TIPO_PEDIDO HIGH = LC_TIPO_PEDIDO ) ).
      LC_FILTRO-IEKORG = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = 'OC01'  HIGH = 'OC01'  ) ).
      LC_FILTRO-IEKGRP = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = 'G01'   HIGH = 'G01'   ) ).
      LC_FILTRO-IFRGRL = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = SPACE   HIGH = SPACE   ) ).
      LC_FILTRO-IEBELP = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = '00010' HIGH = '00010' ) ).
      LC_FILTRO-IBSTAE = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = '0004'  HIGH = '0004'  ) ).
      LC_FILTRO-IMWSKZ = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = WA_ZSDT0001TE-ID_IVA  HIGH = WA_ZSDT0001TE-ID_IVA  ) ).
      LC_FILTRO-ILGORT = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = WA_ZMMT0017-LGORT     HIGH = WA_ZMMT0017-LGORT     ) ).

      IF LC_PEDIDO->ZIF_PESQUISA~PESQUISAR( EXPORTING I_FILTROS  = LC_FILTRO IMPORTING E_REGISTROS = IT_EKKO ) NE ABAP_TRUE.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SEM_PEDIDO_COMPRA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_SEM_PEDIDO_COMPRA-MSGNO
                              ATTR1 = CONV #( WA_NOTA-ID_FORNECEDOR )
                              ATTR2 = CONV #( ME->CARGA-NR_SAFRA )
                              ATTR3 = CONV #( ME->CARGA-ID_PRODUTO )
                              ATTR4 = LC_TIPO_PEDIDO )
            MSGID  = ZCX_CARGA=>ZCX_SEM_PEDIDO_COMPRA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_SEM_PEDIDO_COMPRA-MSGNO
            MSGTY  = 'E'
            MSGV1  = CONV #( WA_NOTA-ID_FORNECEDOR )
            MSGV2  = CONV #( ME->CARGA-NR_SAFRA )
            MSGV3  = CONV #( ME->CARGA-ID_PRODUTO )
            MSGV4  = CONV #( LC_TIPO_PEDIDO ).
      ENDIF.

    ENDIF.

    READ TABLE IT_EKKO INDEX 1 INTO E_INFO_PEDIDO-EKKO.

    SELECT SINGLE * INTO E_INFO_PEDIDO-EKPO
      FROM EKPO
     WHERE EBELN EQ E_INFO_PEDIDO-EKKO-EBELN
       AND EBELP EQ '00010'.

    SELECT SINGLE * INTO E_INFO_PEDIDO-EKET
      FROM EKET
     WHERE EBELN EQ E_INFO_PEDIDO-EKKO-EBELN
       AND EBELP EQ '00010'.


  ENDMETHOD.


  METHOD ZIF_CARGA~GET_PRODUTOR_FILIAL_SAFRA.

    SELECT SINGLE * INTO @DATA(WA_PRODUTOR_VALIDA)
      FROM ZSDT0001PD
     WHERE ID_PRODUTOR EQ @ID_PRODUTOR
       AND NR_SAFRA    EQ @ID_NR_SAFRA
       AND ID_BUKRS    EQ @ID_BUKRS
       AND ID_BRANCH   EQ @ID_BRANCH.

    CHECK SY-SUBRC IS NOT INITIAL.

    RAISE EXCEPTION TYPE ZCX_CARGA
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_FORN_SEM_PARAMETRO-MSGID
                          MSGNO = ZCX_CARGA=>ZCX_FORN_SEM_PARAMETRO-MSGNO
                          ATTR1 = CONV #( ID_PRODUTOR )
                          ATTR2 = CONV #( ID_NR_SAFRA )
                          ATTR3 = CONV #( ID_BUKRS )
                          ATTR4 = CONV #( ID_BRANCH ) )
        MSGTY  = 'E'
        MSGNO  = ZCX_CARGA=>ZCX_FORN_SEM_PARAMETRO-MSGNO
        MSGID  = ZCX_CARGA=>ZCX_FORN_SEM_PARAMETRO-MSGID
        MSGV1  = CONV #( ID_PRODUTOR )
        MSGV2  = CONV #( ID_NR_SAFRA )
        MSGV3  = CONV #( ID_BUKRS )
        MSGV4  = CONV #( ID_BRANCH ).

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_RATEIA_DESCONTOS.

    DATA: PC_DIFERENCA       TYPE I,
          LC_TOTAL_DESCONTOS TYPE ZDE_NR_QUAN_CLASS_COM.

    R_CARGA = ME.

    "DATA(LC_DIDFENCA) = I_PESO_SUBTOTAL - I_PESO_LIQUIDO.

    MOVE I_DESCONTOS[] TO E_RATEIO[].

    LOOP AT E_RATEIO ASSIGNING FIELD-SYMBOL(<FS_RATEIO>).
      CLEAR:
      <FS_RATEIO>-NR_QUANTIDADE_COM,
      <FS_RATEIO>-NR_QUANTIDADE_FIS.
    ENDLOOP.

    SORT E_RATEIO BY TP_CARACTERISTICA.
    DELETE ADJACENT DUPLICATES FROM E_RATEIO COMPARING TP_CARACTERISTICA.

    "Total de Desconto da Carga
    LC_TOTAL_DESCONTOS = 0.
    LOOP AT I_DESCONTOS INTO DATA(WA_DESCONTO) WHERE ID_CLASSIFICACAO EQ ME->CARGA-ID_CLASSIFICACAO OR ID_CLASSIFICACAO IS INITIAL.
      ADD WA_DESCONTO-NR_QUANTIDADE_COM TO LC_TOTAL_DESCONTOS.
    ENDLOOP.

    IF LC_TOTAL_DESCONTOS LT 0.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_ERRO_DESCONTOS-MSGID
                            MSGNO  = ZCX_CARGA=>ZCX_ERRO_DESCONTOS-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_ERRO_DESCONTOS-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_ERRO_DESCONTOS-MSGNO.
    ENDIF.
    "PC_DIFERENCA = ( LC_DIDFENCA / LC_TOTAL_DESCONTOS ) * 100.

    DATA(PC_PESO) = ( I_PESO_LIQUIDO * 100 / ME->CARGA-NM_PESO_LIQUIDO ) * 100000.
    LC_TOTAL_DESCONTOS = 0.
    LOOP AT E_RATEIO ASSIGNING <FS_RATEIO>.
      READ TABLE I_DESCONTOS INTO WA_DESCONTO
      WITH KEY ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
               TP_CARACTERISTICA = <FS_RATEIO>-TP_CARACTERISTICA.
      IF SY-SUBRC IS NOT INITIAL.
        READ TABLE I_DESCONTOS INTO WA_DESCONTO
        WITH KEY ID_CLASSIFICACAO  = SPACE
                 TP_CARACTERISTICA = <FS_RATEIO>-TP_CARACTERISTICA.
      ENDIF.
      <FS_RATEIO>-NR_QUANTIDADE_COM = ( WA_DESCONTO-NR_QUANTIDADE_COM * ( PC_PESO / 100 ) ) / 100000.
      <FS_RATEIO>-NR_QUANTIDADE_FIS = ( WA_DESCONTO-NR_QUANTIDADE_FIS * ( PC_PESO / 100 ) ) / 100000.
      ADD <FS_RATEIO>-NR_QUANTIDADE_FIS TO LC_TOTAL_DESCONTOS.
    ENDLOOP.

    E_PESO_SUBTOTAL = I_PESO_LIQUIDO + LC_TOTAL_DESCONTOS.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_RECUPERAR_ENTRADA.

    R_INSTANCIA = ME.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

    LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_NOTA>) WHERE OBJ_KEY_ENTRADA IS INITIAL.

      "Resgatar Entrada não estornada
      SELECT * INTO TABLE @DATA(IT_ENTRADA_ESTOQUE)
        FROM ZMMT_EE_ZGR
       WHERE ID_CARGA   EQ @<FS_NOTA>-ID_CARGA
         AND ID_NOTA    EQ @<FS_NOTA>-ID_NOTA
         AND OBJ_KEY    NE @SPACE.

      LOOP AT IT_ENTRADA_ESTOQUE INTO DATA(WA_ENTRADA_ESTOQUE).

        SELECT SINGLE * INTO @DATA(WA_ZMMT_EE_ZGR_DOCS)
          FROM ZMMT_EE_ZGR_DOCS
         WHERE OBJ_KEY EQ @WA_ENTRADA_ESTOQUE-OBJ_KEY.

        IF SY-SUBRC IS INITIAL.

          "Verifica Aviso
          IF WA_ZMMT_EE_ZGR_DOCS-AV_VBELN IS NOT INITIAL.
            SELECT SINGLE * INTO @DATA(WA_LIKP)
              FROM LIKP
             WHERE VBELN EQ @WA_ZMMT_EE_ZGR_DOCS-AV_VBELN.

            IF SY-SUBRC IS INITIAL.
              <FS_NOTA>-OBJ_KEY_ENTRADA = WA_ZMMT_EE_ZGR_DOCS-OBJ_KEY.
              <FS_NOTA>-AV_VBELN        = WA_ZMMT_EE_ZGR_DOCS-AV_VBELN.
              <FS_NOTA>-PO_NUMBER       = WA_ENTRADA_ESTOQUE-PO_NUMBER.
              <FS_NOTA>-PO_ITEM         = WA_ENTRADA_ESTOQUE-PO_ITEM.
            ENDIF.
          ENDIF.

          "Verifica MIGO
          IF WA_ZMMT_EE_ZGR_DOCS-MM_MBLNR IS NOT INITIAL.
            SELECT SINGLE * INTO @DATA(WA_MKPF)
              FROM MSEG
             WHERE SMBLN EQ @WA_ZMMT_EE_ZGR_DOCS-MM_MBLNR
               AND SJAHR EQ @WA_ZMMT_EE_ZGR_DOCS-MM_MJAHR.

            IF SY-SUBRC IS NOT INITIAL.
              <FS_NOTA>-OBJ_KEY_ENTRADA = WA_ZMMT_EE_ZGR_DOCS-OBJ_KEY.
              <FS_NOTA>-MM_MBLNR        = WA_ZMMT_EE_ZGR_DOCS-MM_MBLNR.
              <FS_NOTA>-MM_MJAHR        = WA_ZMMT_EE_ZGR_DOCS-MM_MJAHR.
              <FS_NOTA>-PO_NUMBER       = WA_ENTRADA_ESTOQUE-PO_NUMBER.
              <FS_NOTA>-PO_ITEM         = WA_ENTRADA_ESTOQUE-PO_ITEM.
            ENDIF.
          ENDIF.

          "Verifica MIRO
          IF WA_ZMMT_EE_ZGR_DOCS-FT_BELNR IS NOT INITIAL.
            SELECT SINGLE * INTO @DATA(WA_RBKP)
              FROM RBKP
             WHERE BELNR EQ @WA_ZMMT_EE_ZGR_DOCS-FT_BELNR
               AND GJAHR EQ @WA_ZMMT_EE_ZGR_DOCS-FT_GJAHR.

            IF SY-SUBRC IS INITIAL AND WA_RBKP-STBLG IS INITIAL.
              <FS_NOTA>-OBJ_KEY_ENTRADA = WA_ZMMT_EE_ZGR_DOCS-OBJ_KEY.
              <FS_NOTA>-FT_BELNR        = WA_ZMMT_EE_ZGR_DOCS-FT_BELNR.
              <FS_NOTA>-FT_GJAHR        = WA_ZMMT_EE_ZGR_DOCS-FT_GJAHR.
              <FS_NOTA>-PO_NUMBER       = WA_ENTRADA_ESTOQUE-PO_NUMBER.
              <FS_NOTA>-PO_ITEM         = WA_ENTRADA_ESTOQUE-PO_ITEM.
            ENDIF.
          ENDIF.

          "Fiscal
          IF WA_ZMMT_EE_ZGR_DOCS-DOCNUM IS NOT INITIAL.
            SELECT SINGLE * INTO @DATA(WA_J_1BNFDOC)
              FROM J_1BNFDOC
             WHERE DOCNUM EQ @WA_ZMMT_EE_ZGR_DOCS-DOCNUM.

            IF SY-SUBRC IS INITIAL AND WA_J_1BNFDOC-CANCEL NE ABAP_TRUE.
              <FS_NOTA>-OBJ_KEY_ENTRADA = WA_ZMMT_EE_ZGR_DOCS-OBJ_KEY.
              <FS_NOTA>-DOCNUM          = WA_ZMMT_EE_ZGR_DOCS-DOCNUM.
            ENDIF.
          ENDIF.

          "Verifica MIGO Sobra
          IF WA_ZMMT_EE_ZGR_DOCS-MM_MBLNR_SOBRA IS NOT INITIAL.
            SELECT SINGLE * INTO @DATA(WA_MKPF_SOBRA)
              FROM MSEG
             WHERE SMBLN EQ @WA_ZMMT_EE_ZGR_DOCS-MM_MBLNR_SOBRA
               AND SJAHR EQ @WA_ZMMT_EE_ZGR_DOCS-MM_MJAHR_SOBRA.

            IF SY-SUBRC IS NOT INITIAL.
              <FS_NOTA>-OBJ_KEY_ENTRADA = WA_ZMMT_EE_ZGR_DOCS-OBJ_KEY.
              <FS_NOTA>-MM_MBLNR_SOBRA = WA_ZMMT_EE_ZGR_DOCS-MM_MBLNR_SOBRA.
              <FS_NOTA>-MM_MJAHR_SOBRA = WA_ZMMT_EE_ZGR_DOCS-MM_MJAHR_SOBRA.
            ENDIF.
          ENDIF.

        ENDIF.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_REGISTRO.
    R_CARGA = ME.
    MOVE-CORRESPONDING ME->CARGA TO E_REGISTRO.
  ENDMETHOD.


  METHOD ZIF_CARGA~GET_RESULT_DESC_CLASSIFICACAO.

    TYPES BEGIN OF TY_MESSAGE_ERRO.
    TYPES: MESSAGE TYPE STRING.
    TYPES END OF TY_MESSAGE_ERRO.

    DATA: LO_JSON_SERIALIZER TYPE REF TO CL_TREX_JSON_SERIALIZER,
          R_CLASSIFICACAO	   TYPE ZDE_PES_RESULTADO_CLASS,
          RETORNO_ERRO       TYPE TY_MESSAGE_ERRO.

    R_CARGA = ME.

    CLEAR: E_RESULTADO.

    CHECK I_CLASSIFICACAO-PERCENTUAL IS NOT INITIAL.

    CREATE OBJECT LO_JSON_SERIALIZER EXPORTING DATA = I_CLASSIFICACAO.

    LO_JSON_SERIALIZER->SERIALIZE( ).
    DATA(JSON_INPUT) = LO_JSON_SERIALIZER->GET_DATA( ).
    REPLACE FIRST OCCURRENCE OF 'percentualimpureza' IN JSON_INPUT WITH '"percentualImpureza"'.

    DATA: OB_WEB_SERVICE TYPE REF TO ZCL_WEBSERVICE.

    CREATE OBJECT OB_WEB_SERVICE.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~AUTENTICA_OPUS = ABAP_TRUE.

    TRY .
        OB_WEB_SERVICE->SET_SERVICO( I_SERVICO = 'DC' ).
      CATCH ZCX_WEBSERVICE INTO DATA(LC_EXCEPTION).
    ENDTRY.

    OB_WEB_SERVICE->SET_TIPO( I_TIPO = 'O' ).

    TRY .
        DATA(VAR_HTTP) = OB_WEB_SERVICE->URL( ). "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
        DATA(VAR_URL)  = OB_WEB_SERVICE->GET_URI( ).
      CATCH ZCX_WEBSERVICE INTO LC_EXCEPTION.
    ENDTRY.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = VAR_HTTP ).

    OB_WEB_SERVICE->ZIF_WEBSERVICE~CONSULTAR(
      EXPORTING
        I_HTTP                     = VAR_HTTP
        I_XML                      = JSON_INPUT
      IMPORTING
        E_CODE                     = DATA(E_CODE)
        E_REASON                   = DATA(E_REASON)
      RECEIVING
        E_RESULTADO                = DATA(JSON_RETORNO)
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3
        HTTP_INVALID_TIMEOUT       = 4
        OTHERS                     = 5
    ).

*    IF sy-subrc IS NOT INITIAL.
**     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
**                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*    ENDIF.
*
*    CALL METHOD ob_web_service->zif_webservice~consultar
*      EXPORTING
*        i_http                     = var_http
*        i_xml                      = json_input
*      RECEIVING
*        e_resultado                = DATA(json_retorno)
*      EXCEPTIONS
*        http_communication_failure = 1
*        http_invalid_state         = 2
*        http_processing_failed     = 3
*        http_invalid_timeout       = 4
*        OTHERS                     = 5.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    IF E_CODE NE 200.

      E_RESULTADO-MESSAGE = E_CODE.

      CLEAR: RETORNO_ERRO.

      IF JSON_RETORNO IS NOT INITIAL.
        CALL METHOD /UI2/CL_JSON=>DESERIALIZE
          EXPORTING
            JSON = JSON_RETORNO
          CHANGING
            DATA = RETORNO_ERRO.
      ENDIF.

      IF RETORNO_ERRO-MESSAGE IS NOT INITIAL.
        E_RESULTADO-MESSAGE = RETORNO_ERRO-MESSAGE.
        ME->ZIF_CARGA~GERA_ERRO_GERAL( I_TEXTO = E_RESULTADO-MESSAGE ).
      ELSE.
        CONCATENATE E_RESULTADO-MESSAGE '-' E_REASON '-' VAR_URL INTO E_RESULTADO-MESSAGE SEPARATED BY SPACE.
        ME->ZIF_CARGA~GERA_ERRO_GERAL( I_TEXTO = E_RESULTADO-MESSAGE ).
      ENDIF.
    ENDIF.

    CALL METHOD /UI2/CL_JSON=>DESERIALIZE
      EXPORTING
        JSON = JSON_RETORNO
      CHANGING
        DATA = E_RESULTADO.

    IF E_RESULTADO-MESSAGE IS NOT INITIAL.
      ME->ZIF_CARGA~GERA_ERRO_GERAL( I_TEXTO = E_RESULTADO-MESSAGE ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_ROMANEIO_ENTRADA.

    DATA: R_ID_CARGA TYPE RANGE OF ZDE_ID_CARGA,
          R_ID_NOTA  TYPE RANGE OF ZDE_ID_NOTA.

    R_CARGA = ME.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE OR I_FORCE EQ ABAP_TRUE.

    R_ID_CARGA = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = I_ID_CARGA HIGH = I_ID_CARGA ) ).
    IF I_ID_NOTA IS NOT INITIAL.
      R_ID_NOTA  = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = I_ID_NOTA HIGH = I_ID_NOTA ) ).
    ENDIF.

    SELECT * INTO TABLE E_ROMANEIOS
      FROM ZSDT0001
     WHERE ID_CARGA     IN R_ID_CARGA
       AND ID_NOTA      IN R_ID_NOTA
       AND TP_MOVIMENTO EQ ZCL_ROMANEIO=>ST_TP_MOVIMENTO_ENTRADA
     ORDER BY NR_ROMANEIO.

    IF I_CANCELADOS EQ ABAP_TRUE.
      SELECT * APPENDING TABLE E_ROMANEIOS_CANCEL
        FROM ZSDT0001CA
       WHERE ID_CARGA     IN R_ID_CARGA
         AND ID_NOTA      IN R_ID_NOTA
         AND TP_MOVIMENTO EQ ZCL_ROMANEIO=>ST_TP_MOVIMENTO_ENTRADA
       ORDER BY NR_ROMANEIO.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_ROMANEIO_SAIDA.

    DATA: R_ID_CARGA TYPE RANGE OF ZDE_ID_CARGA,
          R_ID_NOTA  TYPE RANGE OF ZDE_ID_NOTA.

    "CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

    R_ID_CARGA = VALUE #( SIGN = 'I'  OPTION = 'EQ' ( LOW = I_ID_CARGA HIGH = I_ID_CARGA ) ).

    R_CARGA = ME.

    SELECT * INTO TABLE E_ROMANEIOS
      FROM ZSDT0001
     WHERE ID_CARGA     IN R_ID_CARGA
       AND TP_MOVIMENTO EQ ZCL_ROMANEIO=>ST_TP_MOVIMENTO_SAIDA.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_TP_STATUS.
    R_CARGA = ME.
    E_TP_STATUS = ME->CARGA-TP_STATUS.
  ENDMETHOD.


  METHOD ZIF_CARGA~GET_VALIDAR_NOTA_FISCAL.

    DATA: E_TIPO      TYPE CHAR01,
          E_REGIO	    TYPE REGIO,
          I_TEXTO     TYPE STRING,
          I_NF_NUMBER	TYPE J_1BNFDOC-NFNUM,
          LC_NR_NOTA  TYPE C LENGTH 09.

    DATA: WA_ZSDT0001PD TYPE ZSDT0001PD.

    R_INSTANCE = ME.

    IF ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.

      IF I_NOTA_FISCAL-ID_ENTRADA IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_TP_ENTRADA-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_TP_ENTRADA-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_TP_ENTRADA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_OBG_INF_TP_ENTRADA-MSGID.
      ENDIF.

      SELECT SINGLE * INTO @DATA(WA_ZSDT0001TELN)
        FROM ZSDT0001TELN
       WHERE ID_ENTRADA EQ @I_NOTA_FISCAL-ID_ENTRADA
         AND NR_SAFRA   EQ @ME->CARGA-NR_SAFRA
         AND ID_BUKRS   EQ @ME->CARGA-ID_BUKRS
         AND ID_BRANCH  EQ @ME->CARGA-ID_BRANCH.

      IF SY-SUBRC IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_TP_ENTRADA_NAO_PERMITIDO-MSGID MSGNO = ZCX_CARGA=>ZCX_TP_ENTRADA_NAO_PERMITIDO-MSGNO
                              ATTR1 = CONV #( I_NOTA_FISCAL-ID_ENTRADA )
                              ATTR2 = CONV #( ME->CARGA-NR_SAFRA )
                              ATTR3 = CONV #( ME->CARGA-ID_BRANCH ) )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_TP_ENTRADA_NAO_PERMITIDO-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_TP_ENTRADA_NAO_PERMITIDO-MSGID
            MSGV1  = CONV #( I_NOTA_FISCAL-ID_ENTRADA )
            MSGV2  = CONV #( ME->CARGA-NR_SAFRA )
            MSGV3  = CONV #( ME->CARGA-ID_BRANCH ).
      ENDIF.

      IF I_NOTA_FISCAL-NR_FORNECEDOR_IE IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_IE_PROD-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_IE_PROD-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_IE_PROD-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_OBG_INF_IE_PROD-MSGID.
      ENDIF.

      IF I_NOTA_FISCAL-ID_FORNECEDOR IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_FORNECEDOR-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_FORNECEDOR-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_FORNECEDOR-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_OBG_INF_FORNECEDOR-MSGID.
      ELSE .
        TRY .

            DATA(OB_FORNECEDORES) = ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
              )->SET_PARCEIRO( I_PARCEIRO = I_NOTA_FISCAL-ID_FORNECEDOR
              )->CK_ATIVO(
              )->CK_ATIVO_EMPRESA( I_EMPRESA = ME->CARGA-ID_BUKRS
              )->CK_RESTRICAO_EMBARGO(
              )->GET_TIPO_PARCEIRO( IMPORTING E_TIPO = E_TIPO
              )->GET_REGIO( IMPORTING E_REGIO	= E_REGIO ).
          CATCH ZCX_PARCEIROS INTO DATA(EX_PARCEIROS).
            MESSAGE ID EX_PARCEIROS->MSGID TYPE 'S'
             NUMBER EX_PARCEIROS->MSGNO
               WITH EX_PARCEIROS->MSGV1 EX_PARCEIROS->MSGV2 EX_PARCEIROS->MSGV3 EX_PARCEIROS->MSGV4
               INTO I_TEXTO.
            ME->GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).
        ENDTRY.
      ENDIF.

      CASE I_NOTA_FISCAL-ID_MOD_FISCAL.
        WHEN ZIF_CARGA=>ST_MODEL_FISCAL_PAPEL.
          DATA(LC_CK_NFE) = ABAP_FALSE.
        WHEN ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO.
          LC_CK_NFE = ABAP_TRUE.
      ENDCASE.

      SELECT SINGLE * INTO @DATA(WA_ENTRADA)
        FROM ZSDT0001TE
       WHERE ID_ENTRADA EQ @I_NOTA_FISCAL-ID_ENTRADA
         AND ID_EMPRESA EQ @ME->CARGA-ID_BUKRS
         AND CK_NFE     EQ @LC_CK_NFE.

      IF SY-SUBRC IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_TE_MD_FISCAL_SEM_PARAM-MSGID MSGNO = ZCX_CARGA=>ZCX_TE_MD_FISCAL_SEM_PARAM-MSGNO ATTR1 = CONV #( I_NOTA_FISCAL-ID_MOD_FISCAL ) )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_TE_MD_FISCAL_SEM_PARAM-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_TE_MD_FISCAL_SEM_PARAM-MSGID
            MSGV1  = CONV #( I_NOTA_FISCAL-ID_MOD_FISCAL ).
      ENDIF.

      SELECT SINGLE * INTO @DATA(WA_J_1BAA)
        FROM J_1BAA
       WHERE NFTYPE EQ @WA_ENTRADA-CT_NOTA.

      CASE I_NOTA_FISCAL-ID_MOD_FISCAL.
        WHEN ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO.

          IF I_NOTA_FISCAL-NR_CHAVE_NFE IS INITIAL AND WA_J_1BAA-FORM IS INITIAL.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_CHAVE_NFE-MSGID
                                  MSGNO = ZCX_CARGA=>ZCX_OBG_INF_CHAVE_NFE-MSGNO )
                MSGTY  = 'E'
                MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_CHAVE_NFE-MSGNO
                MSGID  = ZCX_CARGA=>ZCX_OBG_INF_CHAVE_NFE-MSGID.
          ENDIF.

          IF WA_J_1BAA-FORM IS INITIAL.
            SELECT SINGLE * INTO @DATA(WA_NFE)
              FROM ZIB_NFE_DIST_TER
             WHERE CHAVE_NFE EQ @I_NOTA_FISCAL-NR_CHAVE_NFE.

            IF SY-SUBRC IS NOT INITIAL.
              RAISE EXCEPTION TYPE ZCX_CARGA
                EXPORTING
                  TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NFE_NAO_DISTRIBUIDA-MSGID
                                    MSGNO = ZCX_CARGA=>ZCX_NFE_NAO_DISTRIBUIDA-MSGNO
                                    ATTR1 = CONV #( I_NOTA_FISCAL-NR_CHAVE_NFE ) )
                  MSGTY  = 'E'
                  MSGNO  = ZCX_CARGA=>ZCX_NFE_NAO_DISTRIBUIDA-MSGNO
                  MSGID  = ZCX_CARGA=>ZCX_NFE_NAO_DISTRIBUIDA-MSGID
                  MSGV1  = CONV #( I_NOTA_FISCAL-NR_CHAVE_NFE ).
            ENDIF.

            IF WA_NFE-BUKRS  NE ME->CARGA-ID_BUKRS OR WA_NFE-BRANCH NE ME->CARGA-ID_BRANCH.
              RAISE EXCEPTION TYPE ZCX_CARGA
                EXPORTING
                  TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ERRO_TOMADOR_NFE-MSGID
                                    MSGNO = ZCX_CARGA=>ZCX_ERRO_TOMADOR_NFE-MSGNO
                                    ATTR1 = CONV #( ME->CARGA-ID_BRANCH ) )
                  MSGTY  = 'E'
                  MSGNO  = ZCX_CARGA=>ZCX_ERRO_TOMADOR_NFE-MSGNO
                  MSGID  = ZCX_CARGA=>ZCX_ERRO_TOMADOR_NFE-MSGID
                  MSGV1  = CONV #( ME->CARGA-ID_BRANCH ).
            ENDIF.

            I_NOTA_FISCAL-NR_NOTA            = WA_NFE-NUMERO.
            I_NOTA_FISCAL-NM_SERIE           = WA_NFE-SERIE.
            I_NOTA_FISCAL-DT_EMISSAO         = WA_NFE-DT_EMISSAO.
            I_NOTA_FISCAL-DT_VENCIMENTO_FORM = WA_NFE-DT_EMISSAO.
            I_NOTA_FISCAL-NR_VALOR           = WA_NFE-VL_TOTAL.

            SELECT * INTO TABLE @DATA(IT_ITM)
              FROM ZIB_NFE_DIST_ITM
             WHERE CHAVE_NFE EQ @I_NOTA_FISCAL-NR_CHAVE_NFE.

            IF SY-SUBRC IS NOT INITIAL.
              RAISE EXCEPTION TYPE ZCX_CARGA
                EXPORTING
                  TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NFE_ITEM_NAO_DISTRIBUIDO-MSGID
                                    MSGNO = ZCX_CARGA=>ZCX_NFE_ITEM_NAO_DISTRIBUIDO-MSGNO
                                    ATTR1 = CONV #( I_NOTA_FISCAL-NR_CHAVE_NFE ) )
                  MSGTY  = 'E'
                  MSGNO  = ZCX_CARGA=>ZCX_NFE_ITEM_NAO_DISTRIBUIDO-MSGNO
                  MSGID  = ZCX_CARGA=>ZCX_NFE_ITEM_NAO_DISTRIBUIDO-MSGID
                  MSGV1  = CONV #( I_NOTA_FISCAL-NR_CHAVE_NFE ).
            ENDIF.

            I_NOTA_FISCAL-NR_QUANTIDADE = 0.

            LOOP AT IT_ITM INTO DATA(WA_ITM).

              I_NOTA_FISCAL-CFOP = WA_ITM-PROD_CFOP.

              TRANSLATE WA_ITM-PROD_UND_COMERCI TO UPPER CASE.

              CASE ZCL_STR=>UPPER( CONV #( WA_ITM-PROD_UND_COMERCI ) )->GET( ).
                WHEN 'KG'.
                  I_NOTA_FISCAL-NR_QUANTIDADE = I_NOTA_FISCAL-NR_QUANTIDADE + WA_ITM-PROD_QTD_COMERCI.
                WHEN 'TON' OR 'TO'.
                  I_NOTA_FISCAL-NR_QUANTIDADE = I_NOTA_FISCAL-NR_QUANTIDADE + WA_ITM-PROD_QTD_COMERCI * 1000.
                WHEN OTHERS.
                  RAISE EXCEPTION TYPE ZCX_CARGA
                    EXPORTING
                      TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NFE_ITEM_UNIDADE-MSGID
                                        MSGNO = ZCX_CARGA=>ZCX_NFE_ITEM_UNIDADE-MSGNO
                                        ATTR1 = CONV #( WA_ITM-PROD_UND_COMERCI ) )
                      MSGTY  = 'E'
                      MSGNO  = ZCX_CARGA=>ZCX_NFE_ITEM_UNIDADE-MSGNO
                      MSGID  = ZCX_CARGA=>ZCX_NFE_ITEM_UNIDADE-MSGID
                      MSGV1  = CONV #( WA_ITM-PROD_UND_COMERCI ).
              ENDCASE.

            ENDLOOP.
          ENDIF.

        WHEN OTHERS.
          IF WA_J_1BAA-FORM IS NOT INITIAL.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NAO_PERMITIDO_MD_FISCAL-MSGID
                                  MSGNO = ZCX_CARGA=>ZCX_NAO_PERMITIDO_MD_FISCAL-MSGNO
                                  ATTR1 = CONV #( I_NOTA_FISCAL-ID_MOD_FISCAL ) )
                MSGTY  = 'E'
                MSGNO  = ZCX_CARGA=>ZCX_NAO_PERMITIDO_MD_FISCAL-MSGNO
                MSGID  = ZCX_CARGA=>ZCX_NAO_PERMITIDO_MD_FISCAL-MSGID
                MSGV1  = CONV #( I_NOTA_FISCAL-ID_MOD_FISCAL ).
          ENDIF.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              INPUT  = I_NOTA_FISCAL-NR_NOTA
            IMPORTING
              OUTPUT = LC_NR_NOTA.

          IF ZCL_STRING=>LENGTH( ZCL_STRING=>TRIM( CONV #( LC_NR_NOTA ) ) ) GT 6.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_QTD_NRO_NOTA_FISCAL-MSGID
                                  MSGNO = ZCX_CARGA=>ZCX_QTD_NRO_NOTA_FISCAL-MSGNO
                                  ATTR1 = CONV #( I_NOTA_FISCAL-ID_MOD_FISCAL ) )
                MSGTY  = 'E'
                MSGNO  = ZCX_CARGA=>ZCX_QTD_NRO_NOTA_FISCAL-MSGNO
                MSGID  = ZCX_CARGA=>ZCX_QTD_NRO_NOTA_FISCAL-MSGID
                MSGV1  = CONV #( I_NOTA_FISCAL-ID_MOD_FISCAL ).
          ENDIF.

      ENDCASE.

      IF WA_ENTRADA-CT_NOTA IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_TE_SEM_CT_FISCAL-MSGID MSGNO = ZCX_CARGA=>ZCX_TE_SEM_CT_FISCAL-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_TE_SEM_CT_FISCAL-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_TE_SEM_CT_FISCAL-MSGID.
      ENDIF.

      IF WA_ENTRADA-TP_MOV_MERCADORIA IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_TE_SEM_TP_MOV_MERC-MSGID MSGNO = ZCX_CARGA=>ZCX_TE_SEM_TP_MOV_MERC-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_TE_SEM_TP_MOV_MERC-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_TE_SEM_TP_MOV_MERC-MSGID.
      ENDIF.

      IF WA_ENTRADA-ID_IVA IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_TE_SEM_IVA-MSGID MSGNO = ZCX_CARGA=>ZCX_TE_SEM_IVA-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_TE_SEM_IVA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_TE_SEM_IVA-MSGID.
      ENDIF.

      IF WA_ENTRADA-FR_PAGAMENTO IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_TE_SEM_FORM_PAGAMENTO-MSGID MSGNO = ZCX_CARGA=>ZCX_TE_SEM_FORM_PAGAMENTO-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_TE_SEM_FORM_PAGAMENTO-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_TE_SEM_FORM_PAGAMENTO-MSGID.
      ENDIF.

      IF WA_ENTRADA-BL_PAGAMENTO IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_TE_SEM_CH_BLOQUEIO-MSGID MSGNO = ZCX_CARGA=>ZCX_TE_SEM_CH_BLOQUEIO-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_TE_SEM_CH_BLOQUEIO-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_TE_SEM_CH_BLOQUEIO-MSGID.
      ENDIF.

      IF WA_ENTRADA-BN_EMPRESA IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_TE_SEM_BNC_EMPRESA-MSGID MSGNO = ZCX_CARGA=>ZCX_TE_SEM_BNC_EMPRESA-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_TE_SEM_BNC_EMPRESA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_TE_SEM_BNC_EMPRESA-MSGID.
      ENDIF.

      CASE WA_ENTRADA-TP_PESSOA.
        WHEN ZIF_PARCEIROS=>ST_PESSOA_FISICA.
          IF E_TIPO NE WA_ENTRADA-TP_PESSOA.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_TE_SOMENTE_FISICA-MSGID
                                  MSGNO = ZCX_CARGA=>ZCX_TE_SOMENTE_FISICA-MSGNO
                                  ATTR1 = CONV #( WA_ENTRADA-ID_ENTRADA ) )
                MSGTY  = 'E'
                MSGNO  = ZCX_CARGA=>ZCX_TE_SOMENTE_FISICA-MSGNO
                MSGID  = ZCX_CARGA=>ZCX_TE_SOMENTE_FISICA-MSGID
                MSGV1  = CONV #( WA_ENTRADA-ID_ENTRADA ).
          ENDIF.
        WHEN ZIF_PARCEIROS=>ST_PESSOA_JURIDICA.
          IF E_TIPO NE WA_ENTRADA-TP_PESSOA.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_TE_SOMENTE_JURIDICA-MSGID
                                  MSGNO = ZCX_CARGA=>ZCX_TE_SOMENTE_JURIDICA-MSGNO
                                  ATTR1 = CONV #( WA_ENTRADA-ID_ENTRADA ) )
                MSGTY  = 'E'
                MSGNO  = ZCX_CARGA=>ZCX_TE_SOMENTE_JURIDICA-MSGNO
                MSGID  = ZCX_CARGA=>ZCX_TE_SOMENTE_JURIDICA-MSGID
                MSGV1  = CONV #( WA_ENTRADA-ID_ENTRADA ).
          ENDIF.
      ENDCASE.

      IF I_NOTA_FISCAL-NR_NOTA IS INITIAL AND WA_J_1BAA-FORM IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_NF_NUMERO-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_OBG_INF_NF_NUMERO-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_NF_NUMERO-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_OBG_INF_NF_NUMERO-MSGID.
      ENDIF.

      IF I_NOTA_FISCAL-NM_SERIE IS INITIAL AND WA_J_1BAA-FORM IS INITIAL.

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_NF_SERIE-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_OBG_INF_NF_SERIE-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_NF_SERIE-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_OBG_INF_NF_SERIE-MSGID.

      ELSEIF WA_J_1BAA-FORM IS INITIAL.

        "Verificar se Série Existe no Sigam
        TRY .
            ZCL_API_OPUS=>GET_SERIES_SIGAM( EXPORTING I_DESCR_RESUMIDA = CONV #( I_NOTA_FISCAL-NM_SERIE ) IMPORTING E_SERIES = DATA(E_SERIES) ).

            CASE I_NOTA_FISCAL-ID_MOD_FISCAL.
              WHEN ZIF_CARGA=>ST_MODEL_FISCAL_PAPEL.
                READ TABLE E_SERIES WITH KEY ELETRONICA = ABAP_FALSE TRANSPORTING NO FIELDS.
              WHEN ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO.
                READ TABLE E_SERIES WITH KEY ELETRONICA = ABAP_TRUE TRANSPORTING NO FIELDS.
              WHEN OTHERS.
                SY-SUBRC = 1.
            ENDCASE.

            IF SY-SUBRC IS NOT INITIAL.
              RAISE EXCEPTION TYPE ZCX_CARGA
                EXPORTING
                  TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SERIE_SIGAM-MSGID
                                    MSGNO = ZCX_CARGA=>ZCX_SERIE_SIGAM-MSGNO
                                    ATTR1 = I_NOTA_FISCAL-NM_SERIE )
                  MSGTY  = 'E'
                  MSGNO  = ZCX_CARGA=>ZCX_SERIE_SIGAM-MSGNO
                  MSGID  = ZCX_CARGA=>ZCX_SERIE_SIGAM-MSGID
                  MSGV1  = CONV #( I_NOTA_FISCAL-NM_SERIE ).
            ENDIF.

          CATCH ZCX_ERROR INTO DATA(EX_ERROR).    "

            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = EX_ERROR->MSGID
                                  MSGNO = EX_ERROR->MSGNO
                                  ATTR1 = EX_ERROR->MSGV1
                                  ATTR2 = EX_ERROR->MSGV2
                                  ATTR3 = EX_ERROR->MSGV3
                                  ATTR4 = EX_ERROR->MSGV4 )
                MSGTY  = 'E'
                MSGNO  = EX_ERROR->MSGNO
                MSGID  = EX_ERROR->MSGID
                MSGV1  = EX_ERROR->MSGV1
                MSGV2  = EX_ERROR->MSGV2
                MSGV3  = EX_ERROR->MSGV3
                MSGV4  = EX_ERROR->MSGV4.
        ENDTRY.
      ENDIF.

      IF I_NOTA_FISCAL-DT_EMISSAO IS INITIAL AND WA_J_1BAA-FORM IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_NF_DT_EMISSAO-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_OBG_INF_NF_DT_EMISSAO-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_NF_DT_EMISSAO-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_OBG_INF_NF_DT_EMISSAO-MSGID.
      ENDIF.

      IF I_NOTA_FISCAL-DT_EMISSAO GT SY-DATLO AND I_NOTA_FISCAL-DT_EMISSAO GT SY-DATUM.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_DATA_EMISSAO_NF-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_DATA_EMISSAO_NF-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_DATA_EMISSAO_NF-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_DATA_EMISSAO_NF-MSGID.
      ENDIF.

      IF I_NOTA_FISCAL-NR_QUANTIDADE IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_NF_QUANTIDADE-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_NF_QUANTIDADE-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_NF_QUANTIDADE-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_OBG_INF_NF_QUANTIDADE-MSGID.
      ENDIF.

      IF I_NOTA_FISCAL-NR_VALOR IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_NF_VALOR_TOTAL-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_NF_VALOR_TOTAL-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_NF_VALOR_TOTAL-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_OBG_INF_NF_VALOR_TOTAL-MSGID.
      ENDIF.

      IF I_NOTA_FISCAL-ID_MOD_FISCAL EQ ZIF_CARGA=>ST_MODEL_FISCAL_PAPEL.
        IF I_NOTA_FISCAL-DT_VENCIMENTO_FORM IS INITIAL.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_DT_VENC_FORM-MSGID
                                MSGNO = ZCX_CARGA=>ZCX_OBG_INF_DT_VENC_FORM-MSGNO )
              MSGTY  = 'E'
              MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_DT_VENC_FORM-MSGNO
              MSGID  = ZCX_CARGA=>ZCX_OBG_INF_DT_VENC_FORM-MSGID.
        ENDIF.

        IF I_NOTA_FISCAL-DT_VENCIMENTO_FORM LT I_NOTA_FISCAL-DT_EMISSAO.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_DATA_FORMULARIO_VENC-MSGID
                                MSGNO = ZCX_CARGA=>ZCX_DATA_FORMULARIO_VENC-MSGNO )
              MSGTY  = 'E'
              MSGNO  = ZCX_CARGA=>ZCX_DATA_FORMULARIO_VENC-MSGNO
              MSGID  = ZCX_CARGA=>ZCX_DATA_FORMULARIO_VENC-MSGID.
        ENDIF.
      ENDIF.

      IF I_NOTA_FISCAL-CFOP IS INITIAL AND WA_J_1BAA-FORM IS INITIAL.

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_CFOP-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_CFOP-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_CFOP-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_OBG_INF_CFOP-MSGID.

      ELSEIF WA_J_1BAA-FORM IS INITIAL.

        SELECT * INTO TABLE @DATA(IT_ZSDT0001TECFOP)
         FROM ZSDT0001TECFOP
        WHERE ID_ENTRADA EQ @I_NOTA_FISCAL-ID_ENTRADA
          AND CFOP       EQ @I_NOTA_FISCAL-CFOP.

        IF SY-SUBRC IS NOT INITIAL.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CFOP_NAO_PERMITIDO_TE-MSGID
                                MSGNO = ZCX_CARGA=>ZCX_CFOP_NAO_PERMITIDO_TE-MSGNO
                                ATTR1 = CONV #( I_NOTA_FISCAL-CFOP )
                                ATTR2 = CONV #( I_NOTA_FISCAL-ID_ENTRADA ) )
              MSGTY  = 'E'
              MSGNO  = ZCX_CARGA=>ZCX_CFOP_NAO_PERMITIDO_TE-MSGNO
              MSGID  = ZCX_CARGA=>ZCX_CFOP_NAO_PERMITIDO_TE-MSGID
              MSGV1  = CONV #( I_NOTA_FISCAL-CFOP )
              MSGV2  = CONV #( I_NOTA_FISCAL-ID_ENTRADA ).
        ENDIF.

        SELECT SINGLE * INTO @DATA(WA_J_1BBRANCH)
          FROM J_1BBRANCH
         WHERE BUKRS  EQ @ME->CARGA-ID_BUKRS
           AND BRANCH EQ @ME->CARGA-ID_BRANCH.

        SELECT SINGLE * INTO @DATA(WA_ADRC)
          FROM ADRC
         WHERE ADDRNUMBER EQ @WA_J_1BBRANCH-ADRNR.

        READ TABLE IT_ZSDT0001TECFOP WITH KEY REGIO = WA_ADRC-REGION TP_PESSOA = E_TIPO TRANSPORTING NO FIELDS.

        IF SY-SUBRC IS NOT INITIAL.
          "CFOP &MSGV1& não permitido para Fornecedor Pessoa &MSGV2& Estado &MSGV3&!
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CFOP_NAO_PERMITIDO_FORN-MSGID
                                MSGNO = ZCX_CARGA=>ZCX_CFOP_NAO_PERMITIDO_FORN-MSGNO
                                ATTR1 = CONV #( I_NOTA_FISCAL-CFOP  )
                                ATTR2 = CONV #( E_TIPO  )
                                ATTR3 = CONV #( E_REGIO ) )
              MSGTY  = 'E'
              MSGNO  = ZCX_CARGA=>ZCX_CFOP_NAO_PERMITIDO_FORN-MSGNO
              MSGID  = ZCX_CARGA=>ZCX_CFOP_NAO_PERMITIDO_FORN-MSGID
              MSGV1  = CONV #( I_NOTA_FISCAL-CFOP )
              MSGV2  = CONV #( E_TIPO )
              MSGV3  = CONV #( E_REGIO ).
        ENDIF.

      ENDIF.

      IF I_NOTA_FISCAL-ID_ENTREGUE_POR IS NOT INITIAL.

        TRY .

            OB_FORNECEDORES = ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
              )->SET_PARCEIRO( I_PARCEIRO = I_NOTA_FISCAL-ID_ENTREGUE_POR
              )->CK_ATIVO(
              )->CK_ATIVO_EMPRESA( I_EMPRESA = ME->CARGA-ID_BUKRS
              )->CK_RESTRICAO_EMBARGO(
              ).

          CATCH ZCX_PARCEIROS INTO EX_PARCEIROS.

            MESSAGE ID EX_PARCEIROS->MSGID TYPE 'S'
             NUMBER EX_PARCEIROS->MSGNO
               WITH EX_PARCEIROS->MSGV1 EX_PARCEIROS->MSGV2 EX_PARCEIROS->MSGV3 EX_PARCEIROS->MSGV4
               INTO I_TEXTO.

            ME->GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).

        ENDTRY.

      ENDIF.

      SELECT SINGLE * INTO @DATA(WA_PRODUTOR_VALIDA)
        FROM ZSDT0001PD
       WHERE ID_PRODUTOR EQ @I_NOTA_FISCAL-ID_FORNECEDOR
         AND NR_SAFRA    EQ @ME->CARGA-NR_SAFRA
         AND ID_BUKRS    EQ @ME->CARGA-ID_BUKRS
         AND ID_BRANCH   EQ @ME->CARGA-ID_BRANCH.

      IF SY-SUBRC IS NOT INITIAL.

        SY-MSGV1 = CONV #( I_NOTA_FISCAL-ID_FORNECEDOR ).
        SY-MSGV2 = CONV #( ME->CARGA-NR_SAFRA ).
        SY-MSGV3 = CONV #( ME->CARGA-ID_BUKRS ).
        SY-MSGV4 = CONV #( ME->CARGA-ID_BRANCH ).

        IF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_FORN_SEM_PARAMETRO-MSGID
                                MSGNO = ZCX_CARGA=>ZCX_FORN_SEM_PARAMETRO-MSGNO
                                ATTR1 = CONV #( I_NOTA_FISCAL-ID_FORNECEDOR )
                                ATTR2 = CONV #( ME->CARGA-NR_SAFRA )
                                ATTR3 = CONV #( ME->CARGA-ID_BUKRS )
                                ATTR4 = CONV #( ME->CARGA-ID_BRANCH ) )
              MSGTY  = 'E'
              MSGNO  = ZCX_CARGA=>ZCX_FORN_SEM_PARAMETRO-MSGNO
              MSGID  = ZCX_CARGA=>ZCX_FORN_SEM_PARAMETRO-MSGID
              MSGV1  = CONV #( I_NOTA_FISCAL-ID_FORNECEDOR )
              MSGV2  = CONV #( ME->CARGA-NR_SAFRA )
              MSGV3  = CONV #( ME->CARGA-ID_BUKRS )
              MSGV4  = CONV #( ME->CARGA-ID_BRANCH ).

        ELSE.

          WA_ZSDT0001PD-ID_BRANCH    = ME->CARGA-ID_BRANCH.
          WA_ZSDT0001PD-ID_BUKRS     = ME->CARGA-ID_BUKRS.
          WA_ZSDT0001PD-NR_SAFRA     = ME->CARGA-NR_SAFRA.
          WA_ZSDT0001PD-ID_PRODUTOR  = I_NOTA_FISCAL-ID_FORNECEDOR.

          TRY .
              ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
                )->SET_PARCEIRO( I_PARCEIRO = I_NOTA_FISCAL-ID_FORNECEDOR
                )->CK_ATIVO(
                )->CK_ATIVO_EMPRESA( I_EMPRESA = ME->CARGA-ID_BUKRS
                ).
              INSERT INTO ZSDT0001PD VALUES WA_ZSDT0001PD.
            CATCH ZCX_PARCEIROS INTO EX_PARCEIROS.
              MESSAGE ID EX_PARCEIROS->MSGID TYPE 'S'
               NUMBER EX_PARCEIROS->MSGNO
                 WITH EX_PARCEIROS->MSGV1 EX_PARCEIROS->MSGV2 EX_PARCEIROS->MSGV3 EX_PARCEIROS->MSGV4
                 INTO I_TEXTO.
              ME->GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).
          ENDTRY.

        ENDIF.

      ENDIF.

      IF WA_J_1BAA-FORM IS INITIAL.
        "Verificar Tipo da Pessoa e Modal do Documento
        CASE E_TIPO.
          WHEN ZIF_PARCEIROS=>ST_PESSOA_FISICA.
            IF ( I_NOTA_FISCAL-ID_MOD_FISCAL EQ ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO )
                AND NOT ( I_NOTA_FISCAL-NM_SERIE GE '890' AND I_NOTA_FISCAL-NM_SERIE LE '999' ).
              RAISE EXCEPTION TYPE ZCX_CARGA
                EXPORTING
                  TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PESSOA_FIS_NFE-MSGID
                                    MSGNO = ZCX_CARGA=>ZCX_PESSOA_FIS_NFE-MSGNO )
                  MSGTY  = 'E'
                  MSGNO  = ZCX_CARGA=>ZCX_PESSOA_FIS_NFE-MSGNO
                  MSGID  = ZCX_CARGA=>ZCX_PESSOA_FIS_NFE-MSGID.
            ENDIF.
          WHEN ZIF_PARCEIROS=>ST_PESSOA_JURIDICA.
            IF I_NOTA_FISCAL-ID_MOD_FISCAL EQ ZIF_CARGA=>ST_MODEL_FISCAL_PAPEL.
              RAISE EXCEPTION TYPE ZCX_CARGA
                EXPORTING
                  TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PESSOA_JUS_PAPEL-MSGID
                                    MSGNO = ZCX_CARGA=>ZCX_PESSOA_JUS_PAPEL-MSGNO )
                  MSGTY  = 'E'
                  MSGNO  = ZCX_CARGA=>ZCX_PESSOA_JUS_PAPEL-MSGNO
                  MSGID  = ZCX_CARGA=>ZCX_PESSOA_JUS_PAPEL-MSGID.
            ENDIF.
        ENDCASE.

      ELSE.
        IF I_NOTA_FISCAL-ID_MOD_FISCAL NE ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NF_PROPRIA_NFE-MSGID
                                MSGNO = ZCX_CARGA=>ZCX_NF_PROPRIA_NFE-MSGNO )
              MSGTY  = 'E'
              MSGNO  = ZCX_CARGA=>ZCX_NF_PROPRIA_NFE-MSGNO
              MSGID  = ZCX_CARGA=>ZCX_NF_PROPRIA_NFE-MSGID.
        ENDIF.
      ENDIF.

      IF WA_J_1BAA-FORM IS INITIAL AND I_NOTA_FISCAL-ID_MOD_FISCAL EQ ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO.

        SELECT SINGLE * INTO @DATA(WA_ITEM)
          FROM ZIB_NFE_DIST_ITM
         WHERE CHAVE_NFE EQ @I_NOTA_FISCAL-NR_CHAVE_NFE.

        IF SY-SUBRC IS NOT INITIAL.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_XML_NFE_NAO_RECEBIDO-MSGID
                                MSGNO = ZCX_CARGA=>ZCX_XML_NFE_NAO_RECEBIDO-MSGNO )
              MSGTY  = 'E'
              MSGNO  = ZCX_CARGA=>ZCX_XML_NFE_NAO_RECEBIDO-MSGNO
              MSGID  = ZCX_CARGA=>ZCX_XML_NFE_NAO_RECEBIDO-MSGID.
        ELSEIF WA_ITEM-PROD_CFOP NE I_NOTA_FISCAL-CFOP.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_XML_NFE_CFOP_INVALIDO-MSGID
                                MSGNO = ZCX_CARGA=>ZCX_XML_NFE_CFOP_INVALIDO-MSGNO
                                ATTR1 = CONV #( I_NOTA_FISCAL-CFOP  ) )
              MSGTY  = 'E'
              MSGNO  = ZCX_CARGA=>ZCX_XML_NFE_CFOP_INVALIDO-MSGNO
              MSGID  = ZCX_CARGA=>ZCX_XML_NFE_CFOP_INVALIDO-MSGID
              MSGV1  = CONV #( I_NOTA_FISCAL-CFOP ).
        ENDIF.

        "Verificar Grupo de NCM da Mercadoria
        SELECT SINGLE * INTO @DATA(WA_MARC)
          FROM MARC
         WHERE MATNR EQ @ME->CARGA-ID_PRODUTO
           AND WERKS EQ @ME->CARGA-ID_BRANCH.

        REPLACE ALL OCCURRENCES OF REGEX '[^0-9]' IN WA_MARC-STEUC WITH ''.
        REPLACE ALL OCCURRENCES OF REGEX '[^0-9]' IN WA_ITEM-PROD_NCM WITH ''.

        IF WA_MARC-STEUC(4) NE WA_ITEM-PROD_NCM(4).

          CONCATENATE WA_ITEM-PROD_NCM(4) '.' WA_ITEM-PROD_NCM+4(2) '.' WA_ITEM-PROD_NCM+6(2) INTO DATA(LC_NCM_CLIENTE).

          SELECT SINGLE * INTO @DATA(WA_T604N_MAGGI)
            FROM T604N
           WHERE SPRAS EQ @SY-LANGU
             AND LAND1 EQ 'BR'
             AND STEUC EQ @WA_MARC-STEUC.

          SELECT SINGLE * INTO @DATA(WA_T604N_CLIENTE)
            FROM T604N
           WHERE SPRAS EQ @SY-LANGU
             AND LAND1 EQ 'BR'
             AND STEUC EQ @LC_NCM_CLIENTE.

          "ZCX_ERRO_NCM	Grupo de Material &MSGV1& da Nota Fiscal diferente de &MSGV2&!
          "ZCX_ERRO_NCM_DESC  Grupo de Material &MSGV1&(&MSGV2&) da Nota Fiscal diferente de &MSGV3&(&MSGV4&)!

          IF WA_T604N_MAGGI IS INITIAL OR WA_T604N_CLIENTE IS INITIAL.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_ERRO_NCM-MSGID
                                  MSGNO  = ZCX_CARGA=>ZCX_ERRO_NCM-MSGNO
                                  ATTR1  = CONV #( WA_ITEM-PROD_NCM(4) )
                                  ATTR2  = CONV #( WA_MARC-STEUC(4) ) )
                MSGID  = ZCX_CARGA=>ZCX_ERRO_NCM-MSGID
                MSGNO  = ZCX_CARGA=>ZCX_ERRO_NCM-MSGNO
                MSGTY  = 'E'
                MSGV1  = CONV #( WA_ITEM-PROD_NCM(4) )
                MSGV2  = CONV #( WA_MARC-STEUC(4) ).
          ELSE.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_ERRO_NCM_DESC-MSGID
                                  MSGNO  = ZCX_CARGA=>ZCX_ERRO_NCM_DESC-MSGNO
                                  ATTR1  = CONV #( WA_ITEM-PROD_NCM(4) )
                                  ATTR2  = CONV #( WA_T604N_CLIENTE-TEXT1 )
                                  ATTR3  = CONV #( WA_MARC-STEUC(4) )
                                  ATTR4  = CONV #( WA_T604N_MAGGI-TEXT1 ) )
                MSGID  = ZCX_CARGA=>ZCX_ERRO_NCM_DESC-MSGID
                MSGNO  = ZCX_CARGA=>ZCX_ERRO_NCM_DESC-MSGNO
                MSGTY  = 'E'
                MSGV1  = CONV #( WA_ITEM-PROD_NCM(4) )
                MSGV2  = CONV #( WA_T604N_CLIENTE-TEXT1 )
                MSGV3  = CONV #( WA_MARC-STEUC(4) )
                MSGV4  = CONV #( WA_T604N_MAGGI-TEXT1 ).
          ENDIF.
        ENDIF.

        "Valida se Chave pode ser usada
        IF ( ZIF_CARGA~CK_EXECUTAR_REVERSAO_ENTRADA NE ABAP_TRUE ). "BUG 34154

          ZCL_NFE_XML=>ZIF_NFE_XML~GET_INSTANCE(
             )->SET_REGISTRO( I_CHAVE = I_NOTA_FISCAL-NR_CHAVE_NFE
             )->GET_VALIDAR(
            EXPORTING
              I_MATERIAL       = ME->CARGA-ID_PRODUTO " Nº do material
            IMPORTING
              E_VALIDACAO      = DATA(E_VALIDACAO) " Estrutura de Retorno de Validação de XML de NF-e
             ).

          IF E_VALIDACAO-CK_ERRO EQ ABAP_TRUE.
            ME->GERA_ERRO_GERAL( EXPORTING I_TEXTO = E_VALIDACAO-DS_MESSAGEM ) .
          ELSEIF E_VALIDACAO-NM_QTD_ITENS GT 1.

            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_NFE_MANY_ROWS-MSGID
                                  MSGNO  = ZCX_CARGA=>ZCX_NFE_MANY_ROWS-MSGNO )
                MSGID  = ZCX_CARGA=>ZCX_NFE_MANY_ROWS-MSGID
                MSGNO  = ZCX_CARGA=>ZCX_NFE_MANY_ROWS-MSGNO
                MSGTY  = 'E'.

          ENDIF.

        ENDIF.

      ENDIF.

      CASE I_NOTA_FISCAL-ID_MOD_FISCAL.
        WHEN ZIF_CARGA=>ST_MODEL_FISCAL_PAPEL.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              INPUT  = I_NOTA_FISCAL-NR_NOTA
            IMPORTING
              OUTPUT = I_NF_NUMBER.

          DATA(I_XBLNR) = ZCL_MIRO=>GET_CHAVE_REFERENCIA( I_NF_NUMBER  = I_NF_NUMBER I_SERIES = I_NOTA_FISCAL-NM_SERIE ).

        WHEN ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO.

          I_XBLNR = ZCL_MIRO=>GET_CHAVE_REFERENCIA( I_NF_NUMBER9  = CONV #( I_NOTA_FISCAL-NR_NOTA ) I_SERIES = I_NOTA_FISCAL-NM_SERIE ).
      ENDCASE.

      "Verificar se Documento Fiscal já foi lançado

      IF ( ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA NE ABAP_TRUE ) AND
         ( ZIF_CARGA~CK_EXECUTAR_REVERSAO_ENTRADA   NE ABAP_TRUE ) AND "BUG 34154
         ( ME->CARGA-TP_STATUS  EQ ZIF_CARGA=>ST_STATUS_ABERTO   ).

        TRY .
            ZCL_MIRO=>VERIFICAR_FORN_DOC_FISCAL(
              EXPORTING
                I_LIFNR            = I_NOTA_FISCAL-ID_FORNECEDOR
                I_NFTYPE           = WA_ENTRADA-CT_NOTA
                I_XBLNR            = I_XBLNR
                I_DATA             = I_NOTA_FISCAL-DT_EMISSAO
                I_WERKS            = ME->CARGA-ID_BRANCH
            ).
          CATCH ZCX_MIRO_EXCEPTION INTO DATA(EX_MIRO).    "

            IF NOT
               ( EX_MIRO->MSGID EQ 'ZCTE_DISTRI' AND EX_MIRO->MSGNO EQ '186' AND EX_MIRO->MSGV3 EQ I_NOTA_FISCAL-DOCNUM OR
                 EX_MIRO->MSGID EQ 'ZCTE_DISTRI' AND EX_MIRO->MSGNO EQ '187' AND EX_MIRO->MSGV3 EQ I_NOTA_FISCAL-FT_BELNR ).

              RAISE EXCEPTION TYPE ZCX_CARGA
                EXPORTING
                  TEXTID = VALUE #( MSGID  = EX_MIRO->MSGID
                                    MSGNO  = EX_MIRO->MSGNO
                                    ATTR1  = EX_MIRO->MSGV1
                                    ATTR2  = EX_MIRO->MSGV2
                                    ATTR3  = EX_MIRO->MSGV3
                                    ATTR4  = EX_MIRO->MSGV4 )
                  MSGID  = EX_MIRO->MSGID
                  MSGNO  = EX_MIRO->MSGNO
                  MSGTY  = 'E'
                  MSGV1  = EX_MIRO->MSGV1
                  MSGV2  = EX_MIRO->MSGV2
                  MSGV3  = EX_MIRO->MSGV3
                  MSGV4  = EX_MIRO->MSGV4.

            ENDIF.
        ENDTRY.
      ENDIF.

      DATA(CK_ALTEROU_NOTA) = ABAP_FALSE.
      IF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_TRUE.

        SELECT SINGLE * INTO @DATA(WA_ZSDT0001NT)
          FROM ZSDT0001NT
         WHERE ID_CARGA EQ @I_NOTA_FISCAL-ID_CARGA
           AND ID_NOTA  EQ @I_NOTA_FISCAL-ID_NOTA.

        IF ( WA_ZSDT0001NT-NR_CHAVE_NFE NE I_NOTA_FISCAL-NR_CHAVE_NFE OR
             WA_ZSDT0001NT-NM_SERIE NE I_NOTA_FISCAL-NM_SERIE OR
             WA_ZSDT0001NT-NR_NOTA NE I_NOTA_FISCAL-NR_NOTA OR
             WA_ZSDT0001NT-ID_FORNECEDOR NE I_NOTA_FISCAL-ID_FORNECEDOR OR
             WA_ZSDT0001NT-ID_MOD_FISCAL NE I_NOTA_FISCAL-ID_MOD_FISCAL ) AND ( SY-SUBRC IS INITIAL ).
          CK_ALTEROU_NOTA = ABAP_TRUE.
        ENDIF.

      ENDIF.

      "Verificar se Documento está Lançado
      IF ME->CARGA-TP_STATUS EQ ZIF_CARGA=>ST_STATUS_ABERTO AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE OR CK_ALTEROU_NOTA EQ ABAP_TRUE.

        "Verificar se Documento está lançado!
        DATA: LC_NF_NUMBER    TYPE  J_1BNFDOC-NFNUM,
              LC_MODEL        TYPE  J_1BNFDOC-MODEL,
              LC_SERIES       TYPE  J_1BNFDOC-SERIES,
              LC_SUBSERIES    TYPE  J_1BNFDOC-SUBSER,
              LC_PARTNER_ID   TYPE  J_1BNFDOC-PARID,
              LC_PARTNER_TYPE TYPE  J_1BNFDOC-PARTYP,
              LC_DATE         TYPE  DATUM,
              LC_I_NFEFLAG    TYPE  J_1BNFE,
              LC_I_NFNUM9     TYPE  J_1BDOCNUM9,
              LC_DOC_NUMBER   TYPE  J_1BNFDOC-DOCNUM.

        CASE I_NOTA_FISCAL-ID_MOD_FISCAL.
          WHEN ZIF_CARGA=>ST_MODEL_FISCAL_PAPEL.
            LC_I_NFEFLAG = ABAP_FALSE.
            LC_NF_NUMBER = I_NOTA_FISCAL-NR_NOTA.
          WHEN ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO.
            LC_I_NFEFLAG = ABAP_TRUE.
            LC_I_NFNUM9  = I_NOTA_FISCAL-NR_NOTA.
        ENDCASE.

        LC_MODEL        = I_NOTA_FISCAL-ID_MOD_FISCAL.
        LC_SERIES       = I_NOTA_FISCAL-NM_SERIE.
        LC_PARTNER_ID   = I_NOTA_FISCAL-ID_FORNECEDOR.
        LC_PARTNER_TYPE = WA_J_1BAA-PARTYP.
        LC_DATE         = I_NOTA_FISCAL-DT_EMISSAO.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            INPUT  = LC_SERIES
          IMPORTING
            OUTPUT = LC_SERIES.

        CALL FUNCTION 'Z_1B_NF_DOCUMENT_SELECT_2'
          EXPORTING
            NF_NUMBER                = LC_NF_NUMBER
            MODEL                    = LC_MODEL
            SERIES                   = LC_SERIES
            SUBSERIES                = LC_SUBSERIES
            PARTNER_ID               = LC_PARTNER_ID
            PARTNER_TYPE             = LC_PARTNER_TYPE
            DATE                     = LC_DATE
            I_NFEFLAG                = LC_I_NFEFLAG
            I_NFNUM9                 = LC_I_NFNUM9
          IMPORTING
            DOC_NUMBER               = LC_DOC_NUMBER
          EXCEPTIONS
            DOCUMENT_NOT_FOUND       = 4
            DOC_WITH_SAME_YEAR_FOUND = 5
            DOC_WITH_DIFF_YEAR_FOUND = 6
            TOO_MANY_DOCUMENTS_FOUND = 8
            OTHERS                   = 8.

        CASE SY-SUBRC.
          WHEN 0.
            IF I_NOTA_FISCAL-DOCNUM EQ LC_DOC_NUMBER.
              DATA(LC_ERRO_NOTA) = ABAP_FALSE.
            ELSE.
              LC_ERRO_NOTA = ABAP_TRUE.
              MESSAGE E398(00) WITH 'Para NF informada já tem o registro fiscal nro' LC_DOC_NUMBER '. Verificar com a Área Fiscal' INTO DATA(TEXTO).
            ENDIF.
          WHEN 4.
          WHEN 5.
            LC_ERRO_NOTA = ABAP_TRUE.
            MESSAGE E291(8B) WITH I_XBLNR LC_PARTNER_ID INTO TEXTO.
          WHEN 6.
            LC_ERRO_NOTA = ABAP_TRUE.
            MESSAGE E264(8B) WITH I_XBLNR LC_PARTNER_ID INTO TEXTO.
          WHEN 8.
            LC_ERRO_NOTA = ABAP_TRUE.
        ENDCASE.

        IF LC_ERRO_NOTA EQ ABAP_TRUE.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID  = SY-MSGID
                                MSGNO  = SY-MSGNO
                                ATTR1  = SY-MSGV1
                                ATTR2  = SY-MSGV2
                                ATTR3  = SY-MSGV3
                                ATTR4  = SY-MSGV4 )
              MSGID  = SY-MSGID
              MSGNO  = SY-MSGNO
              MSGTY  = 'E'
              MSGV1  = SY-MSGV1
              MSGV2  = SY-MSGV2
              MSGV3  = SY-MSGV3
              MSGV4  = SY-MSGV4.
        ENDIF.

      ENDIF.

      IF ZCL_STRING=>LENGTH( TEXT = CONV #( I_NOTA_FISCAL-DS_OBSERVACAO ) ) GT 50.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_ERRO_OBSERVACAO_NOTA-MSGID
                              MSGNO  = ZCX_CARGA=>ZCX_ERRO_OBSERVACAO_NOTA-MSGNO )
            MSGID  = ZCX_CARGA=>ZCX_ERRO_OBSERVACAO_NOTA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ERRO_OBSERVACAO_NOTA-MSGNO
            MSGTY  = 'E'.
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_VERIFICA_EXISTE_SAIDA.

    DATA: ENTRADA_CARGA TYPE REF TO ZCL_CARGA_RECEBIMENTO,
          OB_ROMANEIO   TYPE REF TO ZCL_ROMANEIO.

    SELECT SINGLE * INTO @DATA(WA_ZSDT0001NT)
      FROM ZSDT0001NT
     WHERE DOCNUM EQ @I_DOCNUM.

    CHECK SY-SUBRC IS INITIAL.

    CREATE OBJECT ENTRADA_CARGA.

    ENTRADA_CARGA->ZIF_CARGA~GET_ROMANEIO_SAIDA( EXPORTING I_ID_CARGA  = ENTRADA_CARGA->CARGA-ID_CARGA IMPORTING E_ROMANEIOS = DATA(ROMANEIOS) ).

    LOOP AT ROMANEIOS INTO DATA(WA_ROMANEIO).
      IF WA_ROMANEIO-ST_PROC IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ROMANEIO_SAIDA_DOC-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_ROMANEIO_SAIDA_DOC-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_ROMANEIO_SAIDA_DOC-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ROMANEIO_SAIDA_DOC-MSGNO.
      ENDIF.
    ENDLOOP.

    IF I_EXCLUIR_ROMANEIO EQ ABAP_TRUE.
      CREATE OBJECT OB_ROMANEIO.
      LOOP AT ROMANEIOS INTO WA_ROMANEIO.
        OB_ROMANEIO->ZIF_CADASTRO~SET_REGISTRO( I_ID_REGISTRO = WA_ROMANEIO-CH_REFERENCIA ).
        OB_ROMANEIO->ZIF_CADASTRO~EXCLUIR_REGISTRO( ).
      ENDLOOP.
      CLEAR OB_ROMANEIO.
    ENDIF.

    ENTRADA_CARGA->ZIF_CARGA~FREE( ).

    CLEAR: ENTRADA_CARGA.

  ENDMETHOD.


  METHOD ZIF_CARGA~GRAVAR_REGISTRO.

    R_CARGA = ME.

    E_GRAVOU = ABAP_FALSE.

    ME->VALIDAR_REGISTRO( IMPORTING E_VALIDOU = DATA(E_VALIDOU)  ).

    IF E_VALIDOU EQ ABAP_TRUE.

      IF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

        IF ME->CARGA-ID_CARGA IS INITIAL.
          ME->GET_NEW_ID_CARGA( IMPORTING E_ID_CARGA = DATA(E_ID_CARGA) )->SET_ID_CARGA( I_ID_CARGA = E_ID_CARGA ).

          LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_NOTA>) WHERE ID_CARGA IS INITIAL.
            <FS_NOTA>-ID_CARGA = ME->CARGA-ID_CARGA.
          ENDLOOP.

          LOOP AT ME->DOCUMENTO_FISCAL_IMP_RET ASSIGNING FIELD-SYMBOL(<FS_IMP_RET>).
            <FS_IMP_RET>-ID_CARGA = ME->CARGA-ID_CARGA.
          ENDLOOP.

          IF ME->CLASSIFICACAO-ID_CLASSIFICACAO IS INITIAL.
            ME->GET_NEW_ID_CLASSIFICAO( IMPORTING E_ID_CLASSIFICACAO = DATA(E_ID_CLASSIFICACAO) )->SET_ID_CLASSIFICACAO( I_ID_CLASSIFICACAO = E_ID_CLASSIFICACAO ).
          ENDIF.

          LOOP AT ME->RESULTADO ASSIGNING FIELD-SYMBOL(<FS_RESULTADO>) .
            <FS_RESULTADO>-ID_CARGA         = ME->CARGA-ID_CARGA.
            <FS_RESULTADO>-ID_CLASSIFICACAO = ME->CLASSIFICACAO-ID_CLASSIFICACAO.
          ENDLOOP.

          LOOP AT ME->ZIF_CARGA~RESULTADO_AVARIADO ASSIGNING FIELD-SYMBOL(<FS_RESULTADO_AVARIADO>) .
            <FS_RESULTADO_AVARIADO>-ID_CARGA         = ME->CARGA-ID_CARGA.
            <FS_RESULTADO_AVARIADO>-ID_CLASSIFICACAO = ME->CLASSIFICACAO-ID_CLASSIFICACAO.
          ENDLOOP.

          LOOP AT ME->ZIF_CARGA~BLOCOS ASSIGNING FIELD-SYMBOL(<FS_BLOCO>).
            <FS_BLOCO>-ID_CARGA = ME->CARGA-ID_CARGA.
          ENDLOOP.

          LOOP AT ME->ZIF_CARGA~TAKE_UP ASSIGNING FIELD-SYMBOL(<FS_TAKE>).
            <FS_TAKE>-ID_CARGA = ME->CARGA-ID_CARGA.
          ENDLOOP.

          LOOP AT ME->ZIF_CARGA~ORDEM_VENDA ASSIGNING FIELD-SYMBOL(<FS_ORDEM>).
            <FS_ORDEM>-ID_CARGA = ME->CARGA-ID_CARGA.
          ENDLOOP.

          LOOP AT ME->ZIF_CARGA~PEDIDO_COMPRA ASSIGNING FIELD-SYMBOL(<FS_PEDIDO>).
            <FS_PEDIDO>-ID_CARGA = ME->CARGA-ID_CARGA.
          ENDLOOP.

        ENDIF.

        ME->ZIF_CARGA~SET_AJUSTAR_RAT_ORDEM_VENDA( ).

        "Registra Alterações."""""""""""""""""""""""""""""""""""""""""""""""
        ME->SET_LOGS_ALTERACAO( ).
        """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

        DELETE FROM ZSDT0001RS_03  WHERE ID_CARGA EQ ME->CARGA-ID_CARGA.
        DELETE FROM ZSDT0001RS     WHERE ID_CARGA EQ ME->CARGA-ID_CARGA.
        DELETE FROM ZSDT0001NT     WHERE ID_CARGA EQ ME->CARGA-ID_CARGA.
        DELETE FROM ZSDT0001TK     WHERE ID_CARGA EQ ME->CARGA-ID_CARGA.
        DELETE FROM ZSDT0001NT_RET WHERE ID_CARGA EQ ME->CARGA-ID_CARGA.
        DELETE FROM ZSDT0001CL     WHERE ID_CARGA EQ ME->CARGA-ID_CARGA.
        DELETE FROM ZSDT0001OV     WHERE ID_CARGA EQ ME->CARGA-ID_CARGA.
        DELETE FROM ZSDT0001EK     WHERE ID_CARGA EQ ME->CARGA-ID_CARGA.
        DELETE FROM ZSDT0001FD     WHERE ID_CARGA EQ ME->CARGA-ID_CARGA.

        "Carga
        MODIFY ZSDT0001CG FROM ME->CARGA.
        "Classificação da Carga
        MODIFY ZSDT0001CL FROM ME->CLASSIFICACAO.
        "Classificação da Nota caso seja desmambrado
        MODIFY ZSDT0001CL FROM TABLE ME->CLASSIFICACAO_NOTAS.
        "Nota Fiscal
        MODIFY ZSDT0001NT FROM TABLE ME->DOCUMENTO_FISCAL.
        "Nota Fiscal - Impostos Retidos
        MODIFY ZSDT0001NT_RET FROM TABLE ME->DOCUMENTO_FISCAL_IMP_RET.
        "Nota Fiscal - Take UP's
        MODIFY ZSDT0001TK FROM TABLE ME->ZIF_CARGA~TAKE_UP.
        "Ordem de Venda
        MODIFY ZSDT0001OV FROM TABLE ME->ZIF_CARGA~ORDEM_VENDA.
        "Pedido de Compra
        MODIFY ZSDT0001EK FROM TABLE ME->ZIF_CARGA~PEDIDO_COMPRA.
        "Blocos/Fardos da Ordem ou Pedido de Compra
        MODIFY ZSDT0001FD FROM TABLE ME->ZIF_CARGA~BLOCOS.
        "Resultados da(s) Classificação(ões)
        MODIFY ZSDT0001RS FROM TABLE ME->RESULTADO.
        "Resultados da(s) Classificação(ões) Avariado
        MODIFY ZSDT0001RS_03 FROM TABLE ME->ZIF_CARGA~RESULTADO_AVARIADO.

      ELSE.

        DATA: WA_ZSDT0001ACB     TYPE ZSDT0001ACB,
              WA_ZSDT0001ACG     TYPE ZSDT0001ACG,
              IT_ZSDT0001ACL     TYPE TABLE OF ZSDT0001ACL,
              WA_ZSDT0001ACL     TYPE ZSDT0001ACL,
              IT_ZSDT0001ANT     TYPE TABLE OF ZSDT0001ANT,
              WA_ZSDT0001ANT     TYPE ZSDT0001ANT,
              IT_ZSDT0001ANT_RET TYPE TABLE OF ZSDT0001ANT_RET,
              WA_ZSDT0001ANT_RET TYPE ZSDT0001ANT_RET,
              IT_ZSDT0001AOV     TYPE TABLE OF ZSDT0001AOV,
              WA_ZSDT0001AOV     TYPE ZSDT0001AOV,
              IT_ZSDT0001AEK     TYPE TABLE OF ZSDT0001AEK,
              WA_ZSDT0001AEK     TYPE ZSDT0001AEK,
              IT_ZSDT0001ARS     TYPE TABLE OF ZSDT0001ARS,
              WA_ZSDT0001ARS     TYPE ZSDT0001ARS,
              IT_ZSDT0001ARS_03  TYPE TABLE OF ZSDT0001ARS_03,
              WA_ZSDT0001ARS_03  TYPE ZSDT0001ARS_03,
              IT_ZSDT0001ATK     TYPE TABLE OF ZSDT0001ATK,
              WA_ZSDT0001ATK     TYPE ZSDT0001ATK,
              IT_ZSDT0001AFD     TYPE TABLE OF ZSDT0001AFD,
              WA_ZSDT0001AFD     TYPE ZSDT0001AFD.

        IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO IS INITIAL.
          "Gerar Número de Solicitação
          ME->ZIF_CARGA~GET_NEW_ID_SOLICITACAO_MANUT( IMPORTING E_ID_SOLICITACAO = DATA(E_ID_SOLICITACAO) )->SET_ID_SOLIC_MANUT( I_ID_SOLICITACAO = E_ID_SOLICITACAO ).
          ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-DT_SOLICITACAO = SY-DATLO.
          ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-HR_SOLICITACAO = SY-TIMLO.
          ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-US_SOLICITACAO = SY-UNAME.
        ENDIF.

        IF ME->CLASSIFICACAO-ID_CLASSIFICACAO IS INITIAL.
          ME->GET_NEW_ID_CLASSIFICAO( IMPORTING E_ID_CLASSIFICACAO = E_ID_CLASSIFICACAO )->SET_ID_CLASSIFICACAO( I_ID_CLASSIFICACAO = E_ID_CLASSIFICACAO ).
          LOOP AT ME->RESULTADO ASSIGNING <FS_RESULTADO>.
            <FS_RESULTADO>-ID_CLASSIFICACAO = E_ID_CLASSIFICACAO.
          ENDLOOP.
          LOOP AT ME->ZIF_CARGA~RESULTADO_AVARIADO ASSIGNING <FS_RESULTADO_AVARIADO>.
            <FS_RESULTADO_AVARIADO>-ID_CLASSIFICACAO = E_ID_CLASSIFICACAO.
          ENDLOOP.
        ENDIF.

        DELETE FROM ZSDT0001ARS_03 WHERE ID_SOLICITACAO EQ ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
        DELETE FROM ZSDT0001ACB WHERE ID_SOLICITACAO EQ ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
        DELETE FROM ZSDT0001ARS WHERE ID_SOLICITACAO EQ ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
        DELETE FROM ZSDT0001ANT WHERE ID_SOLICITACAO EQ ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
        DELETE FROM ZSDT0001ATK WHERE ID_SOLICITACAO EQ ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
        DELETE FROM ZSDT0001ANT_RET WHERE ID_SOLICITACAO EQ ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
        DELETE FROM ZSDT0001ACL WHERE ID_SOLICITACAO EQ ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
        DELETE FROM ZSDT0001AOV WHERE ID_SOLICITACAO EQ ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
        DELETE FROM ZSDT0001AEK WHERE ID_SOLICITACAO EQ ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
        DELETE FROM ZSDT0001AFD WHERE ID_SOLICITACAO EQ ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.

        MOVE-CORRESPONDING ME->CARGA TO WA_ZSDT0001ACG.
        WA_ZSDT0001ACG-ID_SOLICITACAO  = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
        WA_ZSDT0001ACG-ID_CARGA_ORIGEM = ME->CARGA-ID_CARGA.

        MOVE-CORRESPONDING ME->CLASSIFICACAO TO WA_ZSDT0001ACL.
        WA_ZSDT0001ACL-ID_SOLICITACAO  = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
        WA_ZSDT0001ACL-ID_CARGA_ORIGEM = ME->CARGA-ID_CARGA.
        APPEND WA_ZSDT0001ACL TO IT_ZSDT0001ACL.

        LOOP AT ME->CLASSIFICACAO_NOTAS INTO DATA(WA_CLASSI).
          MOVE-CORRESPONDING WA_CLASSI TO WA_ZSDT0001ACL.
          WA_ZSDT0001ACL-ID_SOLICITACAO  = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
          WA_ZSDT0001ACL-ID_CARGA_ORIGEM = ME->CARGA-ID_CARGA.
          APPEND WA_ZSDT0001ACL TO IT_ZSDT0001ACL.
        ENDLOOP.

        LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_NOTA).
          MOVE-CORRESPONDING WA_NOTA TO WA_ZSDT0001ANT.
          WA_ZSDT0001ANT-ID_SOLICITACAO  = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
          WA_ZSDT0001ANT-ID_CARGA_ORIGEM = ME->CARGA-ID_CARGA.
          WA_ZSDT0001ANT-ID_NOTA_ORIGEM  = WA_NOTA-ID_NOTA.
          APPEND WA_ZSDT0001ANT TO IT_ZSDT0001ANT.
        ENDLOOP.

        LOOP AT ME->ZIF_CARGA~TAKE_UP INTO DATA(WA_TAKE_UP).
          MOVE-CORRESPONDING WA_TAKE_UP TO WA_ZSDT0001ATK.
          WA_ZSDT0001ATK-ID_SOLICITACAO   = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
          WA_ZSDT0001ATK-ID_CARGA_ORIGEM  = ME->CARGA-ID_CARGA.
          WA_ZSDT0001ATK-ID_NOTA_ORIGEM   = WA_TAKE_UP-ID_NOTA.
          WA_ZSDT0001ATK-ID_TAKEUP_ORIGEM = WA_TAKE_UP-ID_TAKEUP.
          APPEND WA_ZSDT0001ATK TO IT_ZSDT0001ATK.
        ENDLOOP.

        LOOP AT ME->DOCUMENTO_FISCAL_IMP_RET INTO DATA(WA_NOTA_RET).
          MOVE-CORRESPONDING WA_NOTA_RET TO WA_ZSDT0001ANT_RET.
          WA_ZSDT0001ANT_RET-ID_SOLICITACAO  = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
          WA_ZSDT0001ANT_RET-ID_CARGA_ORIGEM = ME->CARGA-ID_CARGA.
          WA_ZSDT0001ANT_RET-ID_NOTA_ORIGEM  = WA_NOTA_RET-ID_NOTA.
          APPEND WA_ZSDT0001ANT_RET TO IT_ZSDT0001ANT_RET.
        ENDLOOP.

        LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM).
          MOVE-CORRESPONDING WA_ORDEM TO WA_ZSDT0001AOV.
          WA_ZSDT0001AOV-ID_SOLICITACAO = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
          WA_ZSDT0001AOV-ID_CARGA_ORIGEM = ME->CARGA-ID_CARGA.
          APPEND WA_ZSDT0001AOV TO IT_ZSDT0001AOV.
        ENDLOOP.

        LOOP AT ME->ZIF_CARGA~PEDIDO_COMPRA INTO DATA(WA_PEDIDO).
          MOVE-CORRESPONDING WA_PEDIDO TO WA_ZSDT0001AEK.
          WA_ZSDT0001AEK-ID_SOLICITACAO = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
          WA_ZSDT0001AEK-ID_CARGA_ORIGEM = ME->CARGA-ID_CARGA.
          APPEND WA_ZSDT0001AEK TO IT_ZSDT0001AEK.
        ENDLOOP.

        LOOP AT ME->ZIF_CARGA~BLOCOS INTO DATA(WA_BLOCOS).
          MOVE-CORRESPONDING WA_BLOCOS TO WA_ZSDT0001AFD.
          WA_ZSDT0001AFD-ID_SOLICITACAO  = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
          WA_ZSDT0001AFD-ID_CARGA_ORIGEM = ME->CARGA-ID_CARGA.
          APPEND WA_ZSDT0001AFD TO IT_ZSDT0001AFD.
        ENDLOOP.

        LOOP AT ME->RESULTADO INTO DATA(WA_RESULTADO).
          MOVE-CORRESPONDING WA_RESULTADO TO WA_ZSDT0001ARS.
          WA_ZSDT0001ARS-ID_SOLICITACAO  = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
          WA_ZSDT0001ARS-ID_CARGA_ORIGEM = ME->CARGA-ID_CARGA.
          APPEND WA_ZSDT0001ARS TO IT_ZSDT0001ARS.
        ENDLOOP.

        LOOP AT ME->ZIF_CARGA~RESULTADO_AVARIADO INTO DATA(WA_RESULTADO_AVARIADO).
          MOVE-CORRESPONDING WA_RESULTADO_AVARIADO TO WA_ZSDT0001ARS_03.
          WA_ZSDT0001ARS_03-ID_SOLICITACAO  = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
          WA_ZSDT0001ARS_03-ID_CARGA_ORIGEM = ME->CARGA-ID_CARGA.
          APPEND WA_ZSDT0001ARS_03 TO IT_ZSDT0001ARS_03.
        ENDLOOP.

        "Solicitação de Manutenção
        MODIFY ZSDT0001ACB FROM ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO.
        "Carga
        MODIFY ZSDT0001ACG FROM WA_ZSDT0001ACG.
        "Classificação
        MODIFY ZSDT0001ACL FROM TABLE IT_ZSDT0001ACL.
        "Nota Fiscal
        MODIFY ZSDT0001ANT FROM TABLE IT_ZSDT0001ANT.
        "Nota Fiscal - Impostos Retidos
        MODIFY ZSDT0001ANT_RET FROM TABLE IT_ZSDT0001ANT_RET.
        "Nota Fiscal - Take UP
        MODIFY ZSDT0001ATK FROM TABLE IT_ZSDT0001ATK.
        "Ordem de Venda
        MODIFY ZSDT0001AOV FROM TABLE IT_ZSDT0001AOV.
        "Pedido de Compra
        MODIFY ZSDT0001AEK FROM TABLE IT_ZSDT0001AEK.
        "Resultados da(s) Classificação(ões)
        MODIFY ZSDT0001ARS FROM TABLE IT_ZSDT0001ARS.
        "Resultados da(s) Classificação(ões) Avariado
        MODIFY ZSDT0001ARS_03 FROM TABLE IT_ZSDT0001ARS_03.
        "Fardos de Algodão
        MODIFY ZSDT0001AFD FROM TABLE IT_ZSDT0001AFD.

      ENDIF.

      COMMIT WORK.
      E_GRAVOU = ABAP_TRUE.
      ME->CK_ALTEROU = ABAP_FALSE.
      MESSAGE S072.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~LIMPAR_REGISTRO.

    R_CARGA = ME.

    CLEAR: ME->CARGA,
           ME->CLASSIFICACAO,
           ME->RESULTADO,
           ME->ZIF_CARGA~RESULTADO_AVARIADO,
           ME->DOCUMENTO_FISCAL,
           ME->CLASSIFICACAO_NOTAS,
           ME->ZIF_CARGA~ORDEM_VENDA,
           ME->ZIF_CARGA~PEDIDO_COMPRA,
           ME->ZIF_CARGA~TAKE_UP,
           ME->ZIF_CARGA~BLOCOS,
           ME->ZIF_CARGA~AT_NAO_GERAR_BLOQUEIOS,
           ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA,
           ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO,
           ME->ZIF_CARGA~AT_MANUTENCAO,
           ME->ZIF_CARGA~SOLICITACOES,
           ME->ZIF_CARGA~CK_DIGITADO_UMIDADE,
           ME->ZIF_CARGA~CK_DIGITADO_IMPUREZA,
           ME->ZIF_CARGA~CK_DIGITADO_ARDIDO,
           ME->ZIF_CARGA~CK_DIGITADO_AVARIADO,
           ME->ZIF_CARGA~CK_DIGITADO_QUEBRADO,
           ME->ZIF_CARGA~CK_DIGITADO_ESVERDEADO,
           ME->ZIF_CARGA~CK_DIGITADO_CARUNCHADO.

  ENDMETHOD.


  METHOD ZIF_CARGA~NOVO_REGISTRO.

    R_CARGA = ME.

    ME->LIMPAR_REGISTRO( ).

    "Teste Amaggi RR1 e RR2 - Não Testado
    ME->CLASSIFICACAO-IN_GMO = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
    "Resultado 0
    ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
    "Resultado 0
    ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
    "Soma RR1 e RR2
    ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.
    "Outro Participante - Não
    ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.
    "RR Declado (RR1) - Não
    ME->CLASSIFICACAO-IN_SRR_DECLARADO     = ABAP_FALSE.
    "Intacta Declarado (RR2) - Não
    ME->CLASSIFICACAO-IN_SRR_DECLARADO_2   = ABAP_FALSE.
    "Teste Monsanto (RR2) - Não Testado
    ME->CLASSIFICACAO-IN_TESTE_SRR_2       = ZIF_CARGA=>ST_GMO_NAO_TESTADO.

    ME->CARGA-TP_FRETE                     = ZIF_CARGA=>ST_TP_FRETE_FOB.
    ME->CARGA-TP_CARGA                     = ZIF_CARGA=>ST_TP_CARGA_ENTRADA_FOB.

  ENDMETHOD.


  METHOD ZIF_CARGA~PESQUISAR.

    R_CARGA = ME.

    DATA: LC_FILTRO  TYPE ZDE_FILTRO_ZSDT0001CG,
          WA_RETORNO TYPE ZDE_ZSDT0001CG_ALV,
          LC_RETORNO TYPE ZDE_ZSDT0001CG_ALV_T.

    DATA: RG_TP_CARGA TYPE TABLE OF ZDE_TP_CARGA_R.

    RG_TP_CARGA = VALUE #( SIGN = 'I' OPTION = 'EQ'
                            ( HIGH = SPACE LOW = SPACE )
                            ( HIGH = ZIF_CARGA=>ST_TP_CARGA_ENTRADA_FOB LOW = ZIF_CARGA=>ST_TP_CARGA_ENTRADA_FOB )
                          ).

    MOVE I_FILTROS TO LC_FILTRO.

    DESCRIBE TABLE LC_FILTRO-INRSAFRA LINES DATA(LC_SAFRA).
    DESCRIBE TABLE LC_FILTRO-IIDBUKRS LINES DATA(LC_BUKRS).
    DESCRIBE TABLE LC_FILTRO-IIDBRANC LINES DATA(LC_BRANCH).

    IF LC_SAFRA IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGNO.
    ENDIF.

    IF LC_BUKRS IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGNO.
    ENDIF.

    IF LC_BRANCH IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGNO.
    ENDIF.

    CLEAR: E_PESQUISOU, E_REGISTROS.

    IF ( LC_FILTRO-IIDENTRA[] IS NOT INITIAL OR LC_FILTRO-IRROMENT[] IS NOT INITIAL ) AND
       ( LC_FILTRO-IRROMSAI[] IS NOT INITIAL ).

      SELECT CA~ID_CARGA           AS ID_CARGA,
             CA~ID_ORDEM           AS ID_ORDEM,
             OD~NR_ORDEM           AS NR_ORDEM,
             CA~ID_LOCAL_ENTREGA   AS ID_LOCAL_ENTREGA,
             LE~DS_LOCAL_ENTREGA   AS DS_LOCAL_ENTREGA,
             CA~DT_MOVIMENTO       AS DT_MOVIMENTO,
             CA~NR_SAFRA           AS NR_SAFRA,
             CA~ID_BUKRS           AS ID_BUKRS,
             EN~BUTXT              AS BUTXT,
             CA~ID_BRANCH          AS ID_BRANCH,
             FN~NAME               AS NAME,
             CA~ID_AGENT_FRETE     AS ID_AGENT_FRETE,
             AG~NAME1              AS DS_AGENT_FRETE,
             CA~ID_LOCAL_COLETA    AS ID_LOCAL_COLETA,
             LC~NAME1              AS DS_LOCAL_COLETA,
             CA~ID_LOCAL_DESTINO   AS ID_LOCAL_DESTINO,
             LD~NAME1              AS DS_LOCAL_DESTINO,
             CA~ID_LOCAL_DESCARGA  AS ID_LOCAL_DESCARGA,
             LA~NAME1              AS DS_LOCAL_DESCARGA,
             CA~TP_FRETE           AS TP_FRETE,
             CA~ID_PRODUTO         AS ID_PRODUTO,
             MA~MAKTX              AS DS_PRODUTO,
             CA~NM_PESO_BRUTO      AS NM_PESO_BRUTO,
             CA~NM_PESO_TARA       AS NM_PESO_TARA,
             CA~NM_PESO_SUBTOTAL   AS NM_PESO_SUBTOTAL,
             CA~NM_PESO_DESCONTOS  AS NM_PESO_DESCONTOS,
             CA~NM_PESO_LIQUIDO    AS NM_PESO_LIQUIDO,
             CA~DS_PLACA_TRATOR    AS DS_PLACA_TRATOR,
             CA~ID_PROPRIETARIO    AS ID_PROPRIETARIO,
             PP~NAME1              AS DS_PROPRIETARIO,
             CA~DS_PLACA_REBOQ_1   AS DS_PLACA_REBOQ_1,
             CA~DS_PLACA_REBOQ_2   AS DS_PLACA_REBOQ_2,
             CA~DS_PLACA_REBOQ_3   AS DS_PLACA_REBOQ_3,
             CA~ID_MOTORISTA       AS ID_MOTORISTA,
             MT~NAME1              AS DS_MOTORISTA,
             CA~NR_TICKET          AS NR_TICKET,
             CA~IN_TRANSFERENCIA   AS IN_TRANSFERENCIA,
             CA~TP_STATUS          AS TP_STATUS,
             CA~DT_ABERTURA        AS DT_ABERTURA,
             CA~HR_ABERTURA        AS HR_ABERTURA,
             CA~US_ABERTURA        AS US_ABERTURA,
             CA~DT_FECHAMENTO      AS DT_FECHAMENTO,
             CA~HR_FECHAMENTO      AS HR_FECHAMENTO,
             CA~US_FECHAMENTO      AS US_FECHAMENTO,
             CA~DT_CONFERENCIA     AS DT_CONFERENCIA,
             CA~HR_CONFERENCIA     AS HR_CONFERENCIA,
             CA~US_CONFERENCIA     AS US_CONFERENCIA,
             CA~DT_CANCELAMENTO    AS DT_CANCELAMENTO,
             CA~HR_CANCELAMENTO    AS HR_CANCELAMENTO,
             CA~US_CANCELAMENTO    AS US_CANCELAMENTO,

             CL~ID_CLASSIFICACAO      AS ID_CLASSIFICACAO,
             CL~IN_GMO                AS IN_GMO,
             CL~NR_RESULTADO_01       AS NR_RESULTADO_01,
             CL~NR_RESULTADO_02       AS NR_RESULTADO_02,
             CL~NR_RES_RR1_RR2        AS NR_RES_RR1_RR2,
             CL~IN_GMO_03             AS IN_GMO_03,
             CL~IN_SRR_ORIGEM_PARTIC  AS IN_SRR_ORIGEM_PARTIC,
             CL~ID_OUTRO_PARTIC       AS ID_OUTRO_PARTIC,
             OT~NAME1                 AS DS_OUTRO_PARTIC,
             CL~IN_SRR_DECLARADO      AS IN_SRR_DECLARADO,
             CL~IN_TESTE_SRR          AS IN_TESTE_SRR,
             CL~IN_SRR_DECLARADO_2    AS IN_SRR_DECLARADO_2,
             CL~IN_TESTE_SRR_2        AS IN_TESTE_SRR_2,
             CL~TP_TRANSGENIA         AS TP_TRANSGENIA,

             R1~NR_PERCENTUAL_COM     AS NR_PERC_UMI,
             R2~NR_PERCENTUAL_COM     AS NR_PERC_IMP,
             R3~NR_PERCENTUAL_COM     AS NR_PERC_AVA,
             R4~NR_PERCENTUAL_COM     AS NR_PERC_ARD,
             R5~NR_PERCENTUAL_COM     AS NR_PERC_QUE,
             R6~NR_PERCENTUAL_COM     AS NR_PERC_ESV,
             R7~NR_PERCENTUAL_COM     AS NR_PERC_CAR,

             R1~NR_QUANTIDADE_COM     AS NR_QTDE_UMI,
             R2~NR_QUANTIDADE_COM     AS NR_QTDE_IMP,
             R3~NR_QUANTIDADE_COM     AS NR_QTDE_AVA,
             R4~NR_QUANTIDADE_COM     AS NR_QTDE_ARD,
             R5~NR_QUANTIDADE_COM     AS NR_QTDE_QUE,
             R6~NR_QUANTIDADE_COM     AS NR_QTDE_ESV,
             R7~NR_QUANTIDADE_COM     AS NR_QTDE_CAR

        INTO TABLE @DATA(IT_TAB)
        FROM ZSDT0001CG AS CA
       INNER JOIN ZSDT0001LE   AS LE ON LE~ID_LOCAL_ENTREGA EQ CA~ID_LOCAL_ENTREGA
       INNER JOIN T001         AS EN ON EN~BUKRS EQ CA~ID_BUKRS
       INNER JOIN J_1BBRANCH   AS FN ON FN~BUKRS EQ CA~ID_BUKRS AND FN~BRANCH EQ CA~ID_BRANCH
       INNER JOIN LFA1         AS LC ON LC~LIFNR EQ CA~ID_LOCAL_COLETA
       INNER JOIN LFA1         AS LD ON LD~LIFNR EQ CA~ID_LOCAL_DESTINO
       INNER JOIN KNA1         AS LA ON LA~KUNNR EQ CA~ID_LOCAL_DESCARGA
        LEFT JOIN ZSDT0001OD   AS OD ON OD~ID_ORDEM EQ CA~ID_ORDEM
        LEFT JOIN ZSDT0001CL   AS CL ON CL~ID_CARGA EQ CA~ID_CARGA AND CL~ID_CLASSIFICACAO EQ CA~ID_CLASSIFICACAO
        LEFT JOIN ZSDT0001RS   AS R1 ON R1~ID_CARGA EQ CL~ID_CARGA AND R1~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R1~TP_CARACTERISTICA EQ '01'
        LEFT JOIN ZSDT0001RS   AS R2 ON R2~ID_CARGA EQ CL~ID_CARGA AND R2~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R2~TP_CARACTERISTICA EQ '02'
        LEFT JOIN ZSDT0001RS   AS R3 ON R3~ID_CARGA EQ CL~ID_CARGA AND R3~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R3~TP_CARACTERISTICA EQ '03'
        LEFT JOIN ZSDT0001RS   AS R4 ON R4~ID_CARGA EQ CL~ID_CARGA AND R4~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R4~TP_CARACTERISTICA EQ '04'
        LEFT JOIN ZSDT0001RS   AS R5 ON R5~ID_CARGA EQ CL~ID_CARGA AND R5~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R5~TP_CARACTERISTICA EQ '05'
        LEFT JOIN ZSDT0001RS   AS R6 ON R6~ID_CARGA EQ CL~ID_CARGA AND R6~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R6~TP_CARACTERISTICA EQ '06'
        LEFT JOIN ZSDT0001RS   AS R7 ON R7~ID_CARGA EQ CL~ID_CARGA AND R7~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R7~TP_CARACTERISTICA EQ '07'
        LEFT JOIN LFA1         AS AG ON AG~LIFNR EQ CA~ID_AGENT_FRETE
        LEFT JOIN LFA1         AS PP ON PP~LIFNR EQ CA~ID_PROPRIETARIO
        LEFT JOIN LFA1         AS MT ON MT~LIFNR EQ CA~ID_MOTORISTA
        LEFT JOIN LFA1         AS OT ON OT~LIFNR EQ CL~ID_OUTRO_PARTIC
       INNER JOIN MAKT         AS MA ON MA~SPRAS EQ @SY-LANGU AND MA~MATNR EQ CA~ID_PRODUTO
       WHERE CA~TP_CARGA           IN @RG_TP_CARGA
         AND CA~ID_CARGA           IN @LC_FILTRO-IIDCARGA
         AND CA~ID_ORDEM           IN @LC_FILTRO-IIDORDEM

         AND EXISTS ( SELECT * FROM ZSDT0001NT AS NT
                       WHERE NT~ID_CARGA        EQ CA~ID_CARGA
                         AND NT~ID_ENTRADA      IN @LC_FILTRO-IIDENTRA
                         AND NT~NR_ROMANEIO_ENT IN @LC_FILTRO-IRROMENT )

         AND EXISTS ( SELECT * FROM ZSDT0001OV AS OV
                       WHERE OV~ID_CARGA        EQ CA~ID_CARGA
                         AND OV~NR_ROMANEIO_SAI IN @LC_FILTRO-IRROMSAI )

         AND CA~ID_LOCAL_ENTREGA   IN @LC_FILTRO-IIDLOCAL
         AND CA~DT_MOVIMENTO       IN @LC_FILTRO-IDTMOVIM
         AND CA~NR_SAFRA           IN @LC_FILTRO-INRSAFRA
         AND CA~ID_BUKRS           IN @LC_FILTRO-IIDBUKRS
         AND CA~ID_BRANCH          IN @LC_FILTRO-IIDBRANC
         AND CA~ID_AGENT_FRETE     IN @LC_FILTRO-IIDAGENT
         AND CA~ID_LOCAL_COLETA    IN @LC_FILTRO-IIDCOLET
         AND CA~ID_LOCAL_DESTINO   IN @LC_FILTRO-IIDDESTI
         AND CA~ID_LOCAL_DESCARGA  IN @LC_FILTRO-IIDDESCA
         AND CA~ID_PRODUTO         IN @LC_FILTRO-IIDPRODU
         AND CA~DS_PLACA_TRATOR    IN @LC_FILTRO-IDSTRATO
         AND CA~DS_PLACA_REBOQ_1   IN @LC_FILTRO-IDSREBO1
         AND CA~DS_PLACA_REBOQ_2   IN @LC_FILTRO-IDSREBO2
         AND CA~DS_PLACA_REBOQ_3   IN @LC_FILTRO-IDSREBO3
         AND CA~ID_MOTORISTA       IN @LC_FILTRO-IIDMOTOR
         AND CA~NR_TICKET          IN @LC_FILTRO-INRTICKE
         AND CA~TP_STATUS          IN @LC_FILTRO-ITPSTATU
         AND CA~DT_ABERTURA        IN @LC_FILTRO-IDTABERT
         AND CA~HR_ABERTURA        IN @LC_FILTRO-IHRABERT
         AND CA~DT_FECHAMENTO      IN @LC_FILTRO-IDTFECHA
         AND CA~HR_FECHAMENTO      IN @LC_FILTRO-IHRFECHA
       ORDER BY CA~ID_CARGA.

    ELSEIF ( LC_FILTRO-IIDENTRA[] IS NOT INITIAL OR LC_FILTRO-IRROMENT[] IS NOT INITIAL ) AND
           ( LC_FILTRO-IRROMSAI[] IS INITIAL ).

      SELECT CA~ID_CARGA           AS ID_CARGA,
             CA~ID_ORDEM           AS ID_ORDEM,
             OD~NR_ORDEM           AS NR_ORDEM,
             CA~ID_LOCAL_ENTREGA   AS ID_LOCAL_ENTREGA,
             LE~DS_LOCAL_ENTREGA   AS DS_LOCAL_ENTREGA,
             CA~DT_MOVIMENTO       AS DT_MOVIMENTO,
             CA~NR_SAFRA           AS NR_SAFRA,
             CA~ID_BUKRS           AS ID_BUKRS,
             EN~BUTXT              AS BUTXT,
             CA~ID_BRANCH          AS ID_BRANCH,
             FN~NAME               AS NAME,
             CA~ID_AGENT_FRETE     AS ID_AGENT_FRETE,
             AG~NAME1              AS DS_AGENT_FRETE,
             CA~ID_LOCAL_COLETA    AS ID_LOCAL_COLETA,
             LC~NAME1              AS DS_LOCAL_COLETA,
             CA~ID_LOCAL_DESTINO   AS ID_LOCAL_DESTINO,
             LD~NAME1              AS DS_LOCAL_DESTINO,
             CA~ID_LOCAL_DESCARGA  AS ID_LOCAL_DESCARGA,
             LA~NAME1              AS DS_LOCAL_DESCARGA,
             CA~TP_FRETE           AS TP_FRETE,
             CA~ID_PRODUTO         AS ID_PRODUTO,
             MA~MAKTX              AS DS_PRODUTO,
             CA~NM_PESO_BRUTO      AS NM_PESO_BRUTO,
             CA~NM_PESO_TARA       AS NM_PESO_TARA,
             CA~NM_PESO_SUBTOTAL   AS NM_PESO_SUBTOTAL,
             CA~NM_PESO_DESCONTOS  AS NM_PESO_DESCONTOS,
             CA~NM_PESO_LIQUIDO    AS NM_PESO_LIQUIDO,
             CA~DS_PLACA_TRATOR    AS DS_PLACA_TRATOR,
             CA~ID_PROPRIETARIO    AS ID_PROPRIETARIO,
             PP~NAME1              AS DS_PROPRIETARIO,
             CA~DS_PLACA_REBOQ_1   AS DS_PLACA_REBOQ_1,
             CA~DS_PLACA_REBOQ_2   AS DS_PLACA_REBOQ_2,
             CA~DS_PLACA_REBOQ_3   AS DS_PLACA_REBOQ_3,
             CA~ID_MOTORISTA       AS ID_MOTORISTA,
             MT~NAME1              AS DS_MOTORISTA,
             CA~NR_TICKET          AS NR_TICKET,
             CA~IN_TRANSFERENCIA   AS IN_TRANSFERENCIA,
             CA~TP_STATUS          AS TP_STATUS,
             CA~DT_ABERTURA        AS DT_ABERTURA,
             CA~HR_ABERTURA        AS HR_ABERTURA,
             CA~US_ABERTURA        AS US_ABERTURA,
             CA~DT_FECHAMENTO      AS DT_FECHAMENTO,
             CA~HR_FECHAMENTO      AS HR_FECHAMENTO,
             CA~US_FECHAMENTO      AS US_FECHAMENTO,
             CA~DT_CONFERENCIA     AS DT_CONFERENCIA,
             CA~HR_CONFERENCIA     AS HR_CONFERENCIA,
             CA~US_CONFERENCIA     AS US_CONFERENCIA,
             CA~DT_CANCELAMENTO    AS DT_CANCELAMENTO,
             CA~HR_CANCELAMENTO    AS HR_CANCELAMENTO,
             CA~US_CANCELAMENTO    AS US_CANCELAMENTO,

             CL~ID_CLASSIFICACAO      AS ID_CLASSIFICACAO,
             CL~IN_GMO                AS IN_GMO,
             CL~NR_RESULTADO_01       AS NR_RESULTADO_01,
             CL~NR_RESULTADO_02       AS NR_RESULTADO_02,
             CL~NR_RES_RR1_RR2        AS NR_RES_RR1_RR2,
             CL~IN_GMO_03             AS IN_GMO_03,
             CL~IN_SRR_ORIGEM_PARTIC  AS IN_SRR_ORIGEM_PARTIC,
             CL~ID_OUTRO_PARTIC       AS ID_OUTRO_PARTIC,
             OT~NAME1                 AS DS_OUTRO_PARTIC,
             CL~IN_SRR_DECLARADO      AS IN_SRR_DECLARADO,
             CL~IN_TESTE_SRR          AS IN_TESTE_SRR,
             CL~IN_SRR_DECLARADO_2    AS IN_SRR_DECLARADO_2,
             CL~IN_TESTE_SRR_2        AS IN_TESTE_SRR_2,
             CL~TP_TRANSGENIA         AS TP_TRANSGENIA,

             R1~NR_PERCENTUAL_COM     AS NR_PERC_UMI,
             R2~NR_PERCENTUAL_COM     AS NR_PERC_IMP,
             R3~NR_PERCENTUAL_COM     AS NR_PERC_AVA,
             R4~NR_PERCENTUAL_COM     AS NR_PERC_ARD,
             R5~NR_PERCENTUAL_COM     AS NR_PERC_QUE,
             R6~NR_PERCENTUAL_COM     AS NR_PERC_ESV,
             R7~NR_PERCENTUAL_COM     AS NR_PERC_CAR,

             R1~NR_QUANTIDADE_COM     AS NR_QTDE_UMI,
             R2~NR_QUANTIDADE_COM     AS NR_QTDE_IMP,
             R3~NR_QUANTIDADE_COM     AS NR_QTDE_AVA,
             R4~NR_QUANTIDADE_COM     AS NR_QTDE_ARD,
             R5~NR_QUANTIDADE_COM     AS NR_QTDE_QUE,
             R6~NR_QUANTIDADE_COM     AS NR_QTDE_ESV,
             R7~NR_QUANTIDADE_COM     AS NR_QTDE_CAR

        INTO TABLE @IT_TAB
        FROM ZSDT0001CG AS CA
       INNER JOIN ZSDT0001LE   AS LE ON LE~ID_LOCAL_ENTREGA EQ CA~ID_LOCAL_ENTREGA
       INNER JOIN T001         AS EN ON EN~BUKRS EQ CA~ID_BUKRS
       INNER JOIN J_1BBRANCH   AS FN ON FN~BUKRS EQ CA~ID_BUKRS AND FN~BRANCH EQ CA~ID_BRANCH
       INNER JOIN LFA1         AS LC ON LC~LIFNR EQ CA~ID_LOCAL_COLETA
       INNER JOIN LFA1         AS LD ON LD~LIFNR EQ CA~ID_LOCAL_DESTINO
       INNER JOIN KNA1         AS LA ON LA~KUNNR EQ CA~ID_LOCAL_DESCARGA
        LEFT JOIN ZSDT0001OD   AS OD ON OD~ID_ORDEM EQ CA~ID_ORDEM
        LEFT JOIN ZSDT0001CL   AS CL ON CL~ID_CARGA EQ CA~ID_CARGA AND CL~ID_CLASSIFICACAO EQ CA~ID_CLASSIFICACAO
        LEFT JOIN ZSDT0001RS   AS R1 ON R1~ID_CARGA EQ CL~ID_CARGA AND R1~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R1~TP_CARACTERISTICA EQ '01'
        LEFT JOIN ZSDT0001RS   AS R2 ON R2~ID_CARGA EQ CL~ID_CARGA AND R2~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R2~TP_CARACTERISTICA EQ '02'
        LEFT JOIN ZSDT0001RS   AS R3 ON R3~ID_CARGA EQ CL~ID_CARGA AND R3~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R3~TP_CARACTERISTICA EQ '03'
        LEFT JOIN ZSDT0001RS   AS R4 ON R4~ID_CARGA EQ CL~ID_CARGA AND R4~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R4~TP_CARACTERISTICA EQ '04'
        LEFT JOIN ZSDT0001RS   AS R5 ON R5~ID_CARGA EQ CL~ID_CARGA AND R5~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R5~TP_CARACTERISTICA EQ '05'
        LEFT JOIN ZSDT0001RS   AS R6 ON R6~ID_CARGA EQ CL~ID_CARGA AND R6~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R6~TP_CARACTERISTICA EQ '06'
        LEFT JOIN ZSDT0001RS   AS R7 ON R7~ID_CARGA EQ CL~ID_CARGA AND R7~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R7~TP_CARACTERISTICA EQ '07'
        LEFT JOIN LFA1         AS AG ON AG~LIFNR EQ CA~ID_AGENT_FRETE
        LEFT JOIN LFA1         AS PP ON PP~LIFNR EQ CA~ID_PROPRIETARIO
        LEFT JOIN LFA1         AS MT ON MT~LIFNR EQ CA~ID_MOTORISTA
        LEFT JOIN LFA1         AS OT ON OT~LIFNR EQ CL~ID_OUTRO_PARTIC
       INNER JOIN MAKT         AS MA ON MA~SPRAS EQ @SY-LANGU AND MA~MATNR EQ CA~ID_PRODUTO
       WHERE CA~TP_CARGA           IN @RG_TP_CARGA
         AND CA~ID_CARGA           IN @LC_FILTRO-IIDCARGA
         AND CA~ID_ORDEM           IN @LC_FILTRO-IIDORDEM

         AND EXISTS ( SELECT * FROM ZSDT0001NT AS NT
                       WHERE NT~ID_CARGA        EQ CA~ID_CARGA
                         AND NT~ID_ENTRADA      IN @LC_FILTRO-IIDENTRA
                         AND NT~NR_ROMANEIO_ENT IN @LC_FILTRO-IRROMENT )

         AND CA~ID_LOCAL_ENTREGA   IN @LC_FILTRO-IIDLOCAL
         AND CA~DT_MOVIMENTO       IN @LC_FILTRO-IDTMOVIM
         AND CA~NR_SAFRA           IN @LC_FILTRO-INRSAFRA
         AND CA~ID_BUKRS           IN @LC_FILTRO-IIDBUKRS
         AND CA~ID_BRANCH          IN @LC_FILTRO-IIDBRANC
         AND CA~ID_AGENT_FRETE     IN @LC_FILTRO-IIDAGENT
         AND CA~ID_LOCAL_COLETA    IN @LC_FILTRO-IIDCOLET
         AND CA~ID_LOCAL_DESTINO   IN @LC_FILTRO-IIDDESTI
         AND CA~ID_LOCAL_DESCARGA  IN @LC_FILTRO-IIDDESCA
         AND CA~ID_PRODUTO         IN @LC_FILTRO-IIDPRODU
         AND CA~DS_PLACA_TRATOR    IN @LC_FILTRO-IDSTRATO
         AND CA~DS_PLACA_REBOQ_1   IN @LC_FILTRO-IDSREBO1
         AND CA~DS_PLACA_REBOQ_2   IN @LC_FILTRO-IDSREBO2
         AND CA~DS_PLACA_REBOQ_3   IN @LC_FILTRO-IDSREBO3
         AND CA~ID_MOTORISTA       IN @LC_FILTRO-IIDMOTOR
         AND CA~NR_TICKET          IN @LC_FILTRO-INRTICKE
         AND CA~TP_STATUS          IN @LC_FILTRO-ITPSTATU
         AND CA~DT_ABERTURA        IN @LC_FILTRO-IDTABERT
         AND CA~HR_ABERTURA        IN @LC_FILTRO-IHRABERT
         AND CA~DT_FECHAMENTO      IN @LC_FILTRO-IDTFECHA
         AND CA~HR_FECHAMENTO      IN @LC_FILTRO-IHRFECHA
       ORDER BY CA~ID_CARGA.

    ELSEIF ( LC_FILTRO-IIDENTRA[] IS INITIAL OR LC_FILTRO-IRROMENT[] IS INITIAL ) AND
           ( LC_FILTRO-IRROMSAI[] IS NOT INITIAL ).

      SELECT CA~ID_CARGA           AS ID_CARGA,
             CA~ID_ORDEM           AS ID_ORDEM,
             OD~NR_ORDEM           AS NR_ORDEM,
             CA~ID_LOCAL_ENTREGA   AS ID_LOCAL_ENTREGA,
             LE~DS_LOCAL_ENTREGA   AS DS_LOCAL_ENTREGA,
             CA~DT_MOVIMENTO       AS DT_MOVIMENTO,
             CA~NR_SAFRA           AS NR_SAFRA,
             CA~ID_BUKRS           AS ID_BUKRS,
             EN~BUTXT              AS BUTXT,
             CA~ID_BRANCH          AS ID_BRANCH,
             FN~NAME               AS NAME,
             CA~ID_AGENT_FRETE     AS ID_AGENT_FRETE,
             AG~NAME1              AS DS_AGENT_FRETE,
             CA~ID_LOCAL_COLETA    AS ID_LOCAL_COLETA,
             LC~NAME1              AS DS_LOCAL_COLETA,
             CA~ID_LOCAL_DESTINO   AS ID_LOCAL_DESTINO,
             LD~NAME1              AS DS_LOCAL_DESTINO,
             CA~ID_LOCAL_DESCARGA  AS ID_LOCAL_DESCARGA,
             LA~NAME1              AS DS_LOCAL_DESCARGA,
             CA~TP_FRETE           AS TP_FRETE,
             CA~ID_PRODUTO         AS ID_PRODUTO,
             MA~MAKTX              AS DS_PRODUTO,
             CA~NM_PESO_BRUTO      AS NM_PESO_BRUTO,
             CA~NM_PESO_TARA       AS NM_PESO_TARA,
             CA~NM_PESO_SUBTOTAL   AS NM_PESO_SUBTOTAL,
             CA~NM_PESO_DESCONTOS  AS NM_PESO_DESCONTOS,
             CA~NM_PESO_LIQUIDO    AS NM_PESO_LIQUIDO,
             CA~DS_PLACA_TRATOR    AS DS_PLACA_TRATOR,
             CA~ID_PROPRIETARIO    AS ID_PROPRIETARIO,
             PP~NAME1              AS DS_PROPRIETARIO,
             CA~DS_PLACA_REBOQ_1   AS DS_PLACA_REBOQ_1,
             CA~DS_PLACA_REBOQ_2   AS DS_PLACA_REBOQ_2,
             CA~DS_PLACA_REBOQ_3   AS DS_PLACA_REBOQ_3,
             CA~ID_MOTORISTA       AS ID_MOTORISTA,
             MT~NAME1              AS DS_MOTORISTA,
             CA~NR_TICKET          AS NR_TICKET,
             CA~IN_TRANSFERENCIA   AS IN_TRANSFERENCIA,
             CA~TP_STATUS          AS TP_STATUS,
             CA~DT_ABERTURA        AS DT_ABERTURA,
             CA~HR_ABERTURA        AS HR_ABERTURA,
             CA~US_ABERTURA        AS US_ABERTURA,
             CA~DT_FECHAMENTO      AS DT_FECHAMENTO,
             CA~HR_FECHAMENTO      AS HR_FECHAMENTO,
             CA~US_FECHAMENTO      AS US_FECHAMENTO,
             CA~DT_CONFERENCIA     AS DT_CONFERENCIA,
             CA~HR_CONFERENCIA     AS HR_CONFERENCIA,
             CA~US_CONFERENCIA     AS US_CONFERENCIA,
             CA~DT_CANCELAMENTO    AS DT_CANCELAMENTO,
             CA~HR_CANCELAMENTO    AS HR_CANCELAMENTO,
             CA~US_CANCELAMENTO    AS US_CANCELAMENTO,

             CL~ID_CLASSIFICACAO      AS ID_CLASSIFICACAO,
             CL~IN_GMO                AS IN_GMO,
             CL~NR_RESULTADO_01       AS NR_RESULTADO_01,
             CL~NR_RESULTADO_02       AS NR_RESULTADO_02,
             CL~NR_RES_RR1_RR2        AS NR_RES_RR1_RR2,
             CL~IN_GMO_03             AS IN_GMO_03,
             CL~IN_SRR_ORIGEM_PARTIC  AS IN_SRR_ORIGEM_PARTIC,
             CL~ID_OUTRO_PARTIC       AS ID_OUTRO_PARTIC,
             OT~NAME1                 AS DS_OUTRO_PARTIC,
             CL~IN_SRR_DECLARADO      AS IN_SRR_DECLARADO,
             CL~IN_TESTE_SRR          AS IN_TESTE_SRR,
             CL~IN_SRR_DECLARADO_2    AS IN_SRR_DECLARADO_2,
             CL~IN_TESTE_SRR_2        AS IN_TESTE_SRR_2,
             CL~TP_TRANSGENIA         AS TP_TRANSGENIA,

             R1~NR_PERCENTUAL_COM     AS NR_PERC_UMI,
             R2~NR_PERCENTUAL_COM     AS NR_PERC_IMP,
             R3~NR_PERCENTUAL_COM     AS NR_PERC_AVA,
             R4~NR_PERCENTUAL_COM     AS NR_PERC_ARD,
             R5~NR_PERCENTUAL_COM     AS NR_PERC_QUE,
             R6~NR_PERCENTUAL_COM     AS NR_PERC_ESV,
             R7~NR_PERCENTUAL_COM     AS NR_PERC_CAR,

             R1~NR_QUANTIDADE_COM     AS NR_QTDE_UMI,
             R2~NR_QUANTIDADE_COM     AS NR_QTDE_IMP,
             R3~NR_QUANTIDADE_COM     AS NR_QTDE_AVA,
             R4~NR_QUANTIDADE_COM     AS NR_QTDE_ARD,
             R5~NR_QUANTIDADE_COM     AS NR_QTDE_QUE,
             R6~NR_QUANTIDADE_COM     AS NR_QTDE_ESV,
             R7~NR_QUANTIDADE_COM     AS NR_QTDE_CAR

        INTO TABLE @IT_TAB
        FROM ZSDT0001CG AS CA
       INNER JOIN ZSDT0001LE   AS LE ON LE~ID_LOCAL_ENTREGA EQ CA~ID_LOCAL_ENTREGA
       INNER JOIN T001         AS EN ON EN~BUKRS EQ CA~ID_BUKRS
       INNER JOIN J_1BBRANCH   AS FN ON FN~BUKRS EQ CA~ID_BUKRS AND FN~BRANCH EQ CA~ID_BRANCH
       INNER JOIN LFA1         AS LC ON LC~LIFNR EQ CA~ID_LOCAL_COLETA
       INNER JOIN LFA1         AS LD ON LD~LIFNR EQ CA~ID_LOCAL_DESTINO
       INNER JOIN KNA1         AS LA ON LA~KUNNR EQ CA~ID_LOCAL_DESCARGA
        LEFT JOIN ZSDT0001OD   AS OD ON OD~ID_ORDEM EQ CA~ID_ORDEM
        LEFT JOIN ZSDT0001CL   AS CL ON CL~ID_CARGA EQ CA~ID_CARGA AND CL~ID_CLASSIFICACAO EQ CA~ID_CLASSIFICACAO
        LEFT JOIN ZSDT0001RS   AS R1 ON R1~ID_CARGA EQ CL~ID_CARGA AND R1~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R1~TP_CARACTERISTICA EQ '01'
        LEFT JOIN ZSDT0001RS   AS R2 ON R2~ID_CARGA EQ CL~ID_CARGA AND R2~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R2~TP_CARACTERISTICA EQ '02'
        LEFT JOIN ZSDT0001RS   AS R3 ON R3~ID_CARGA EQ CL~ID_CARGA AND R3~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R3~TP_CARACTERISTICA EQ '03'
        LEFT JOIN ZSDT0001RS   AS R4 ON R4~ID_CARGA EQ CL~ID_CARGA AND R4~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R4~TP_CARACTERISTICA EQ '04'
        LEFT JOIN ZSDT0001RS   AS R5 ON R5~ID_CARGA EQ CL~ID_CARGA AND R5~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R5~TP_CARACTERISTICA EQ '05'
        LEFT JOIN ZSDT0001RS   AS R6 ON R6~ID_CARGA EQ CL~ID_CARGA AND R6~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R6~TP_CARACTERISTICA EQ '06'
        LEFT JOIN ZSDT0001RS   AS R7 ON R7~ID_CARGA EQ CL~ID_CARGA AND R7~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R7~TP_CARACTERISTICA EQ '07'
        LEFT JOIN LFA1         AS AG ON AG~LIFNR EQ CA~ID_AGENT_FRETE
        LEFT JOIN LFA1         AS PP ON PP~LIFNR EQ CA~ID_PROPRIETARIO
        LEFT JOIN LFA1         AS MT ON MT~LIFNR EQ CA~ID_MOTORISTA
        LEFT JOIN LFA1         AS OT ON OT~LIFNR EQ CL~ID_OUTRO_PARTIC
       INNER JOIN MAKT         AS MA ON MA~SPRAS EQ @SY-LANGU AND MA~MATNR EQ CA~ID_PRODUTO
       WHERE CA~TP_CARGA           IN @RG_TP_CARGA
         AND CA~ID_CARGA           IN @LC_FILTRO-IIDCARGA
         AND CA~ID_ORDEM           IN @LC_FILTRO-IIDORDEM

         AND EXISTS ( SELECT * FROM ZSDT0001OV AS OV
                       WHERE OV~ID_CARGA        EQ CA~ID_CARGA
                         AND OV~NR_ROMANEIO_SAI IN @LC_FILTRO-IRROMSAI )

         AND CA~ID_LOCAL_ENTREGA   IN @LC_FILTRO-IIDLOCAL
         AND CA~DT_MOVIMENTO       IN @LC_FILTRO-IDTMOVIM
         AND CA~NR_SAFRA           IN @LC_FILTRO-INRSAFRA
         AND CA~ID_BUKRS           IN @LC_FILTRO-IIDBUKRS
         AND CA~ID_BRANCH          IN @LC_FILTRO-IIDBRANC
         AND CA~ID_AGENT_FRETE     IN @LC_FILTRO-IIDAGENT
         AND CA~ID_LOCAL_COLETA    IN @LC_FILTRO-IIDCOLET
         AND CA~ID_LOCAL_DESTINO   IN @LC_FILTRO-IIDDESTI
         AND CA~ID_LOCAL_DESCARGA  IN @LC_FILTRO-IIDDESCA
         AND CA~ID_PRODUTO         IN @LC_FILTRO-IIDPRODU
         AND CA~DS_PLACA_TRATOR    IN @LC_FILTRO-IDSTRATO
         AND CA~DS_PLACA_REBOQ_1   IN @LC_FILTRO-IDSREBO1
         AND CA~DS_PLACA_REBOQ_2   IN @LC_FILTRO-IDSREBO2
         AND CA~DS_PLACA_REBOQ_3   IN @LC_FILTRO-IDSREBO3
         AND CA~ID_MOTORISTA       IN @LC_FILTRO-IIDMOTOR
         AND CA~NR_TICKET          IN @LC_FILTRO-INRTICKE
         AND CA~TP_STATUS          IN @LC_FILTRO-ITPSTATU
         AND CA~DT_ABERTURA        IN @LC_FILTRO-IDTABERT
         AND CA~HR_ABERTURA        IN @LC_FILTRO-IHRABERT
         AND CA~DT_FECHAMENTO      IN @LC_FILTRO-IDTFECHA
         AND CA~HR_FECHAMENTO      IN @LC_FILTRO-IHRFECHA
       ORDER BY CA~ID_CARGA.

    ELSE.

      SELECT CA~ID_CARGA           AS ID_CARGA,
             CA~ID_ORDEM           AS ID_ORDEM,
             OD~NR_ORDEM           AS NR_ORDEM,
             CA~ID_LOCAL_ENTREGA   AS ID_LOCAL_ENTREGA,
             LE~DS_LOCAL_ENTREGA   AS DS_LOCAL_ENTREGA,
             CA~DT_MOVIMENTO       AS DT_MOVIMENTO,
             CA~NR_SAFRA           AS NR_SAFRA,
             CA~ID_BUKRS           AS ID_BUKRS,
             EN~BUTXT              AS BUTXT,
             CA~ID_BRANCH          AS ID_BRANCH,
             FN~NAME               AS NAME,
             CA~ID_AGENT_FRETE     AS ID_AGENT_FRETE,
             AG~NAME1              AS DS_AGENT_FRETE,
             CA~ID_LOCAL_COLETA    AS ID_LOCAL_COLETA,
             LC~NAME1              AS DS_LOCAL_COLETA,
             CA~ID_LOCAL_DESTINO   AS ID_LOCAL_DESTINO,
             LD~NAME1              AS DS_LOCAL_DESTINO,
             CA~ID_LOCAL_DESCARGA  AS ID_LOCAL_DESCARGA,
             LA~NAME1              AS DS_LOCAL_DESCARGA,
             CA~TP_FRETE           AS TP_FRETE,
             CA~ID_PRODUTO         AS ID_PRODUTO,
             MA~MAKTX              AS DS_PRODUTO,
             CA~NM_PESO_BRUTO      AS NM_PESO_BRUTO,
             CA~NM_PESO_TARA       AS NM_PESO_TARA,
             CA~NM_PESO_SUBTOTAL   AS NM_PESO_SUBTOTAL,
             CA~NM_PESO_DESCONTOS  AS NM_PESO_DESCONTOS,
             CA~NM_PESO_LIQUIDO    AS NM_PESO_LIQUIDO,
             CA~DS_PLACA_TRATOR    AS DS_PLACA_TRATOR,
             CA~ID_PROPRIETARIO    AS ID_PROPRIETARIO,
             PP~NAME1              AS DS_PROPRIETARIO,
             CA~DS_PLACA_REBOQ_1   AS DS_PLACA_REBOQ_1,
             CA~DS_PLACA_REBOQ_2   AS DS_PLACA_REBOQ_2,
             CA~DS_PLACA_REBOQ_3   AS DS_PLACA_REBOQ_3,
             CA~ID_MOTORISTA       AS ID_MOTORISTA,
             MT~NAME1              AS DS_MOTORISTA,
             CA~NR_TICKET          AS NR_TICKET,
             CA~IN_TRANSFERENCIA   AS IN_TRANSFERENCIA,
             CA~TP_STATUS          AS TP_STATUS,
             CA~DT_ABERTURA        AS DT_ABERTURA,
             CA~HR_ABERTURA        AS HR_ABERTURA,
             CA~US_ABERTURA        AS US_ABERTURA,
             CA~DT_FECHAMENTO      AS DT_FECHAMENTO,
             CA~HR_FECHAMENTO      AS HR_FECHAMENTO,
             CA~US_FECHAMENTO      AS US_FECHAMENTO,
             CA~DT_CONFERENCIA     AS DT_CONFERENCIA,
             CA~HR_CONFERENCIA     AS HR_CONFERENCIA,
             CA~US_CONFERENCIA     AS US_CONFERENCIA,
             CA~DT_CANCELAMENTO    AS DT_CANCELAMENTO,
             CA~HR_CANCELAMENTO    AS HR_CANCELAMENTO,
             CA~US_CANCELAMENTO    AS US_CANCELAMENTO,

             CL~ID_CLASSIFICACAO      AS ID_CLASSIFICACAO,
             CL~IN_GMO                AS IN_GMO,
             CL~NR_RESULTADO_01       AS NR_RESULTADO_01,
             CL~NR_RESULTADO_02       AS NR_RESULTADO_02,
             CL~NR_RES_RR1_RR2        AS NR_RES_RR1_RR2,
             CL~IN_GMO_03             AS IN_GMO_03,
             CL~IN_SRR_ORIGEM_PARTIC  AS IN_SRR_ORIGEM_PARTIC,
             CL~ID_OUTRO_PARTIC       AS ID_OUTRO_PARTIC,
             OT~NAME1                 AS DS_OUTRO_PARTIC,
             CL~IN_SRR_DECLARADO      AS IN_SRR_DECLARADO,
             CL~IN_TESTE_SRR          AS IN_TESTE_SRR,
             CL~IN_SRR_DECLARADO_2    AS IN_SRR_DECLARADO_2,
             CL~IN_TESTE_SRR_2        AS IN_TESTE_SRR_2,
             CL~TP_TRANSGENIA         AS TP_TRANSGENIA,

             R1~NR_PERCENTUAL_COM     AS NR_PERC_UMI,
             R2~NR_PERCENTUAL_COM     AS NR_PERC_IMP,
             R3~NR_PERCENTUAL_COM     AS NR_PERC_AVA,
             R4~NR_PERCENTUAL_COM     AS NR_PERC_ARD,
             R5~NR_PERCENTUAL_COM     AS NR_PERC_QUE,
             R6~NR_PERCENTUAL_COM     AS NR_PERC_ESV,
             R7~NR_PERCENTUAL_COM     AS NR_PERC_CAR,

             R1~NR_QUANTIDADE_COM     AS NR_QTDE_UMI,
             R2~NR_QUANTIDADE_COM     AS NR_QTDE_IMP,
             R3~NR_QUANTIDADE_COM     AS NR_QTDE_AVA,
             R4~NR_QUANTIDADE_COM     AS NR_QTDE_ARD,
             R5~NR_QUANTIDADE_COM     AS NR_QTDE_QUE,
             R6~NR_QUANTIDADE_COM     AS NR_QTDE_ESV,
             R7~NR_QUANTIDADE_COM     AS NR_QTDE_CAR

        INTO TABLE @IT_TAB
        FROM ZSDT0001CG AS CA
       INNER JOIN ZSDT0001LE   AS LE ON LE~ID_LOCAL_ENTREGA EQ CA~ID_LOCAL_ENTREGA
       INNER JOIN T001         AS EN ON EN~BUKRS EQ CA~ID_BUKRS
       INNER JOIN J_1BBRANCH   AS FN ON FN~BUKRS EQ CA~ID_BUKRS AND FN~BRANCH EQ CA~ID_BRANCH
       INNER JOIN LFA1         AS LC ON LC~LIFNR EQ CA~ID_LOCAL_COLETA
       INNER JOIN LFA1         AS LD ON LD~LIFNR EQ CA~ID_LOCAL_DESTINO
       INNER JOIN KNA1         AS LA ON LA~KUNNR EQ CA~ID_LOCAL_DESCARGA
        LEFT JOIN ZSDT0001OD   AS OD ON OD~ID_ORDEM EQ CA~ID_ORDEM
        LEFT JOIN ZSDT0001CL   AS CL ON CL~ID_CARGA EQ CA~ID_CARGA AND CL~ID_CLASSIFICACAO EQ CA~ID_CLASSIFICACAO
        LEFT JOIN ZSDT0001RS   AS R1 ON R1~ID_CARGA EQ CL~ID_CARGA AND R1~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R1~TP_CARACTERISTICA EQ '01'
        LEFT JOIN ZSDT0001RS   AS R2 ON R2~ID_CARGA EQ CL~ID_CARGA AND R2~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R2~TP_CARACTERISTICA EQ '02'
        LEFT JOIN ZSDT0001RS   AS R3 ON R3~ID_CARGA EQ CL~ID_CARGA AND R3~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R3~TP_CARACTERISTICA EQ '03'
        LEFT JOIN ZSDT0001RS   AS R4 ON R4~ID_CARGA EQ CL~ID_CARGA AND R4~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R4~TP_CARACTERISTICA EQ '04'
        LEFT JOIN ZSDT0001RS   AS R5 ON R5~ID_CARGA EQ CL~ID_CARGA AND R5~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R5~TP_CARACTERISTICA EQ '05'
        LEFT JOIN ZSDT0001RS   AS R6 ON R6~ID_CARGA EQ CL~ID_CARGA AND R6~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R6~TP_CARACTERISTICA EQ '06'
        LEFT JOIN ZSDT0001RS   AS R7 ON R7~ID_CARGA EQ CL~ID_CARGA AND R7~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R7~TP_CARACTERISTICA EQ '07'
        LEFT JOIN LFA1         AS AG ON AG~LIFNR EQ CA~ID_AGENT_FRETE
        LEFT JOIN LFA1         AS PP ON PP~LIFNR EQ CA~ID_PROPRIETARIO
        LEFT JOIN LFA1         AS MT ON MT~LIFNR EQ CA~ID_MOTORISTA
        LEFT JOIN LFA1         AS OT ON OT~LIFNR EQ CL~ID_OUTRO_PARTIC
       INNER JOIN MAKT         AS MA ON MA~SPRAS EQ @SY-LANGU AND MA~MATNR EQ CA~ID_PRODUTO
       WHERE CA~TP_CARGA           IN @RG_TP_CARGA
         AND CA~ID_CARGA           IN @LC_FILTRO-IIDCARGA
         AND CA~ID_ORDEM           IN @LC_FILTRO-IIDORDEM
         AND CA~ID_LOCAL_ENTREGA   IN @LC_FILTRO-IIDLOCAL
         AND CA~DT_MOVIMENTO       IN @LC_FILTRO-IDTMOVIM
         AND CA~NR_SAFRA           IN @LC_FILTRO-INRSAFRA
         AND CA~ID_BUKRS           IN @LC_FILTRO-IIDBUKRS
         AND CA~ID_BRANCH          IN @LC_FILTRO-IIDBRANC
         AND CA~ID_AGENT_FRETE     IN @LC_FILTRO-IIDAGENT
         AND CA~ID_LOCAL_COLETA    IN @LC_FILTRO-IIDCOLET
         AND CA~ID_LOCAL_DESTINO   IN @LC_FILTRO-IIDDESTI
         AND CA~ID_LOCAL_DESCARGA  IN @LC_FILTRO-IIDDESCA
         AND CA~ID_PRODUTO         IN @LC_FILTRO-IIDPRODU
         AND CA~DS_PLACA_TRATOR    IN @LC_FILTRO-IDSTRATO
         AND CA~DS_PLACA_REBOQ_1   IN @LC_FILTRO-IDSREBO1
         AND CA~DS_PLACA_REBOQ_2   IN @LC_FILTRO-IDSREBO2
         AND CA~DS_PLACA_REBOQ_3   IN @LC_FILTRO-IDSREBO3
         AND CA~ID_MOTORISTA       IN @LC_FILTRO-IIDMOTOR
         AND CA~NR_TICKET          IN @LC_FILTRO-INRTICKE
         AND CA~TP_STATUS          IN @LC_FILTRO-ITPSTATU
         AND CA~DT_ABERTURA        IN @LC_FILTRO-IDTABERT
         AND CA~HR_ABERTURA        IN @LC_FILTRO-IHRABERT
         AND CA~DT_FECHAMENTO      IN @LC_FILTRO-IDTFECHA
         AND CA~HR_FECHAMENTO      IN @LC_FILTRO-IHRFECHA
       ORDER BY CA~ID_CARGA.

    ENDIF.

    IF IT_TAB[] IS NOT INITIAL.
      SELECT * INTO TABLE @DATA(IT_ZSDT0001RS_03)
        FROM ZSDT0001RS_03
         FOR ALL ENTRIES IN @IT_TAB
       WHERE ID_CARGA EQ @IT_TAB-ID_CARGA.
    ENDIF.

    LOOP AT IT_TAB INTO DATA(WA_TAB).
      CLEAR: WA_RETORNO.
      WA_RETORNO-ID_CARGA          = WA_TAB-ID_CARGA.
      WA_RETORNO-ID_ORDEM          = WA_TAB-ID_ORDEM.
      WA_RETORNO-NR_ORDEM          = WA_TAB-NR_ORDEM.
      WA_RETORNO-ID_LOCAL_ENTREGA  = WA_TAB-ID_LOCAL_ENTREGA.
      WA_RETORNO-DS_LOCAL_ENTREGA  = WA_TAB-DS_LOCAL_ENTREGA.
      WA_RETORNO-DT_MOVIMENTO      = WA_TAB-DT_MOVIMENTO.
      WA_RETORNO-NR_SAFRA          = WA_TAB-NR_SAFRA.
      WA_RETORNO-ID_BUKRS          = WA_TAB-ID_BUKRS.
      WA_RETORNO-BUTXT             = WA_TAB-BUTXT.
      WA_RETORNO-ID_BRANCH         = WA_TAB-ID_BRANCH.
      WA_RETORNO-NAME              = WA_TAB-NAME.
      WA_RETORNO-ID_AGENT_FRETE    = WA_TAB-ID_AGENT_FRETE.
      WA_RETORNO-DS_AGENT_FRETE    = WA_TAB-DS_AGENT_FRETE.
      WA_RETORNO-ID_LOCAL_COLETA   = WA_TAB-ID_LOCAL_COLETA.
      WA_RETORNO-DS_LOCAL_COLETA   = WA_TAB-DS_LOCAL_COLETA.
      WA_RETORNO-ID_LOCAL_DESTINO  = WA_TAB-ID_LOCAL_DESTINO.
      WA_RETORNO-DS_LOCAL_DESTINO  = WA_TAB-DS_LOCAL_DESTINO.
      WA_RETORNO-ID_LOCAL_DESCARGA = WA_TAB-ID_LOCAL_DESCARGA.
      WA_RETORNO-DS_LOCAL_DESCARGA = WA_TAB-DS_LOCAL_DESCARGA.
      WA_RETORNO-TP_FRETE          = WA_TAB-TP_FRETE.
      WA_RETORNO-ID_PRODUTO        = WA_TAB-ID_PRODUTO.
      WA_RETORNO-DS_PRODUTO        = WA_TAB-DS_PRODUTO.
      WA_RETORNO-NM_PESO_BRUTO     = WA_TAB-NM_PESO_BRUTO.
      WA_RETORNO-NM_PESO_TARA      = WA_TAB-NM_PESO_TARA.
      WA_RETORNO-NM_PESO_SUBTOTAL  = WA_TAB-NM_PESO_SUBTOTAL.
      WA_RETORNO-NM_PESO_DESCONTOS = WA_TAB-NM_PESO_DESCONTOS.
      WA_RETORNO-NM_PESO_LIQUIDO   = WA_TAB-NM_PESO_LIQUIDO.
      WA_RETORNO-DS_PLACA_TRATOR   = WA_TAB-DS_PLACA_TRATOR.
      WA_RETORNO-ID_PROPRIETARIO   = WA_TAB-ID_PROPRIETARIO.
      WA_RETORNO-DS_PROPRIETARIO   = WA_TAB-DS_PROPRIETARIO.
      WA_RETORNO-DS_PLACA_REBOQ_1  = WA_TAB-DS_PLACA_REBOQ_1.
      WA_RETORNO-DS_PLACA_REBOQ_2  = WA_TAB-DS_PLACA_REBOQ_2.
      WA_RETORNO-DS_PLACA_REBOQ_3  = WA_TAB-DS_PLACA_REBOQ_3.
      WA_RETORNO-ID_MOTORISTA      = WA_TAB-ID_MOTORISTA.
      WA_RETORNO-DS_MOTORISTA      = WA_TAB-DS_MOTORISTA.
      WA_RETORNO-NR_TICKET         = WA_TAB-NR_TICKET.
      WA_RETORNO-IN_TRANSFERENCIA  = WA_TAB-IN_TRANSFERENCIA.
      WA_RETORNO-TP_STATUS         = WA_TAB-TP_STATUS.
      WA_RETORNO-DT_ABERTURA       = WA_TAB-DT_ABERTURA.
      WA_RETORNO-HR_ABERTURA       = WA_TAB-HR_ABERTURA.
      WA_RETORNO-US_ABERTURA       = WA_TAB-US_ABERTURA.
      WA_RETORNO-DT_FECHAMENTO     = WA_TAB-DT_FECHAMENTO.
      WA_RETORNO-HR_FECHAMENTO     = WA_TAB-HR_FECHAMENTO.
      WA_RETORNO-US_FECHAMENTO     = WA_TAB-US_FECHAMENTO.
      WA_RETORNO-DT_CONFERENCIA    = WA_TAB-DT_CONFERENCIA.
      WA_RETORNO-HR_CONFERENCIA    = WA_TAB-HR_CONFERENCIA.
      WA_RETORNO-US_CONFERENCIA    = WA_TAB-US_CONFERENCIA.
      WA_RETORNO-DT_CANCELAMENTO   = WA_TAB-DT_CANCELAMENTO.
      WA_RETORNO-HR_CANCELAMENTO   = WA_TAB-HR_CANCELAMENTO.
      WA_RETORNO-US_CANCELAMENTO   = WA_TAB-US_CANCELAMENTO.

      WA_RETORNO-ID_CLASSIFICACAO       = WA_TAB-ID_CLASSIFICACAO.
      WA_RETORNO-IN_GMO                 = WA_TAB-IN_GMO.
      WA_RETORNO-NR_RESULTADO_01        = WA_TAB-NR_RESULTADO_01.
      WA_RETORNO-NR_RESULTADO_02        = WA_TAB-NR_RESULTADO_02.
      WA_RETORNO-NR_RES_RR1_RR2         = WA_TAB-NR_RES_RR1_RR2.
      WA_RETORNO-IN_GMO_03              = WA_TAB-IN_GMO_03.
      WA_RETORNO-IN_SRR_ORIGEM_PARTIC   = WA_TAB-IN_SRR_ORIGEM_PARTIC.
      WA_RETORNO-ID_OUTRO_PARTIC        = WA_TAB-ID_OUTRO_PARTIC.
      WA_RETORNO-DS_OUTRO_PARTIC        = WA_TAB-DS_OUTRO_PARTIC.
      WA_RETORNO-IN_SRR_DECLARADO       = WA_TAB-IN_SRR_DECLARADO.
      WA_RETORNO-IN_TESTE_SRR           = WA_TAB-IN_TESTE_SRR.
      WA_RETORNO-IN_SRR_DECLARADO_2     = WA_TAB-IN_SRR_DECLARADO_2.
      WA_RETORNO-IN_TESTE_SRR_2         = WA_TAB-IN_TESTE_SRR_2.
      WA_RETORNO-TP_TRANSGENIA          = WA_TAB-TP_TRANSGENIA.

      WA_RETORNO-NR_PERC_UMI   = WA_TAB-NR_PERC_UMI.
      WA_RETORNO-NR_PERC_IMP   = WA_TAB-NR_PERC_IMP.
      WA_RETORNO-NR_PERC_AVA   = WA_TAB-NR_PERC_AVA.
      WA_RETORNO-NR_PERC_ARD   = WA_TAB-NR_PERC_ARD.
      WA_RETORNO-NR_PERC_QUE   = WA_TAB-NR_PERC_QUE.
      WA_RETORNO-NR_PERC_ESV   = WA_TAB-NR_PERC_ESV.
      WA_RETORNO-NR_PERC_CAR   = WA_TAB-NR_PERC_CAR.
      WA_RETORNO-NR_QTDE_UMI   = WA_TAB-NR_QTDE_UMI.
      WA_RETORNO-NR_QTDE_IMP   = WA_TAB-NR_QTDE_IMP.
      WA_RETORNO-NR_QTDE_AVA   = WA_TAB-NR_QTDE_AVA.
      WA_RETORNO-NR_QTDE_ARD   = WA_TAB-NR_QTDE_ARD.
      WA_RETORNO-NR_QTDE_QUE   = WA_TAB-NR_QTDE_QUE.
      WA_RETORNO-NR_QTDE_ESV   = WA_TAB-NR_QTDE_ESV.
      WA_RETORNO-NR_QTDE_CAR   = WA_TAB-NR_QTDE_CAR.

      LOOP AT IT_ZSDT0001RS_03 INTO DATA(WA_ZSDT0001RS_03) WHERE ID_CARGA EQ WA_TAB-ID_CARGA AND ID_CLASSIFICACAO EQ WA_TAB-ID_CLASSIFICACAO.
        CASE WA_ZSDT0001RS_03-TP_SUB_CARAC_AVARIADO.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ.
            WA_RETORNO-NR_PERC_AVA_ARQ = WA_ZSDT0001RS_03-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_QUE.
            WA_RETORNO-NR_PERC_AVA_QUE = WA_ZSDT0001RS_03-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_MOF.
            WA_RETORNO-NR_PERC_AVA_MOF = WA_ZSDT0001RS_03-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_PIC.
            WA_RETORNO-NR_PERC_AVA_PIC = WA_ZSDT0001RS_03-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_FER.
            WA_RETORNO-NR_PERC_AVA_FER = WA_ZSDT0001RS_03-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GER.
            WA_RETORNO-NR_PERC_AVA_GER = WA_ZSDT0001RS_03-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARD.
            WA_RETORNO-NR_PERC_AVA_ARD = WA_ZSDT0001RS_03-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GES.
            WA_RETORNO-NR_PERC_AVA_GES = WA_ZSDT0001RS_03-NR_PERCENTUAL_COM.
        ENDCASE.
      ENDLOOP.

      APPEND WA_RETORNO TO LC_RETORNO.
    ENDLOOP.

    CHECK LC_RETORNO[] IS NOT INITIAL.

    E_REGISTROS = LC_RETORNO.
    E_PESQUISOU = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CARGA~PESQUISAR_SOLICITACAO_MANUT.

    R_CARGA = ME.

    DATA: LC_FILTRO  TYPE ZDE_FILTRO_ZSDT0001ACG,
          WA_RETORNO TYPE ZDE_ZSDT0001ACG_ALV,
          LC_RETORNO TYPE ZDE_ZSDT0001ACG_ALV_T.

    MOVE I_FILTROS TO LC_FILTRO.

    DESCRIBE TABLE LC_FILTRO-INRSAFRA LINES DATA(LC_SAFRA).
    DESCRIBE TABLE LC_FILTRO-IIDBUKRS LINES DATA(LC_BUKRS).
    DESCRIBE TABLE LC_FILTRO-IIDBRANC LINES DATA(LC_BRANCH).

    IF LC_SAFRA IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGNO.
    ENDIF.

    IF LC_BUKRS IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGNO.
    ENDIF.

    IF LC_BRANCH IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGNO.
    ENDIF.

    CLEAR: E_PESQUISOU, E_REGISTROS.

    SELECT SA~ID_SOLICITACAO      AS ID_SOLICITACAO,
           SA~DT_SOLICITACAO      AS DT_SOLICITACAO,
           SA~HR_SOLICITACAO      AS HR_SOLICITACAO,
           SA~US_SOLICITACAO      AS US_SOLICITACAO,
           SA~TP_STATUS           AS TP_SOLICITACAO_STATUS,
           SA~CK_ACEITE_FILIAL    AS CK_ACEITE_FILIAL,
           SA~CK_ACEITE_FISCAL    AS CK_ACEITE_FISCAL,
           SA~CK_ACEITE_COMERCIAL AS CK_ACEITE_COMERCIAL,
           SA~RS_ACEITE_FILIAL    AS RS_ACEITE_FILIAL,
           SA~RS_ACEITE_FISCAL    AS RS_ACEITE_FISCAL,
           SA~RS_ACEITE_COMERCIAL AS RS_ACEITE_COMERCIAL,
           SA~DS_ACEITE_FILIAL    AS DS_ACEITE_FILIAL,
           SA~DS_ACEITE_FISCAL    AS DS_ACEITE_FISCAL,
           SA~DS_ACEITE_COMERCIAL AS DS_ACEITE_COMERCIAL,
            "SE_STATUS
            "SE_CODE
            "SE_DETAIL
            "SE_RECORDKEY
           SA~SE_RECORDID    AS SE_RECORDID,

           CA~ID_CARGA_ORIGEM    AS ID_CARGA,
           CA~ID_ORDEM           AS ID_ORDEM,
           OD~NR_ORDEM           AS NR_ORDEM,
           "CA~ID_ENTRADA         AS ID_ENTRADA,
           "TE~DS_ENTRADA         AS DS_ENTRADA,
           CA~ID_LOCAL_ENTREGA   AS ID_LOCAL_ENTREGA,
           LE~DS_LOCAL_ENTREGA   AS DS_LOCAL_ENTREGA,
           CA~DT_MOVIMENTO       AS DT_MOVIMENTO,
           CA~NR_SAFRA           AS NR_SAFRA,
           CA~ID_BUKRS           AS ID_BUKRS,
           EN~BUTXT              AS BUTXT,
           CA~ID_BRANCH          AS ID_BRANCH,
           FN~NAME               AS NAME,
           CA~ID_AGENT_FRETE     AS ID_AGENT_FRETE,
           AG~NAME1              AS DS_AGENT_FRETE,
           CA~ID_LOCAL_COLETA    AS ID_LOCAL_COLETA,
           LC~NAME1              AS DS_LOCAL_COLETA,
           CA~ID_LOCAL_DESTINO   AS ID_LOCAL_DESTINO,
           LD~NAME1              AS DS_LOCAL_DESTINO,
           CA~ID_LOCAL_DESCARGA  AS ID_LOCAL_DESCARGA,
           LA~NAME1              AS DS_LOCAL_DESCARGA,
           CA~TP_FRETE           AS TP_FRETE,
           CA~ID_PRODUTO         AS ID_PRODUTO,
           MA~MAKTX              AS DS_PRODUTO,
           CA~NM_PESO_BRUTO      AS NM_PESO_BRUTO,
           CA~NM_PESO_TARA       AS NM_PESO_TARA,
           CA~NM_PESO_SUBTOTAL   AS NM_PESO_SUBTOTAL,
           CA~NM_PESO_DESCONTOS  AS NM_PESO_DESCONTOS,
           CA~NM_PESO_LIQUIDO    AS NM_PESO_LIQUIDO,
           CA~DS_PLACA_TRATOR    AS DS_PLACA_TRATOR,
           CA~ID_PROPRIETARIO    AS ID_PROPRIETARIO,
           PP~NAME1              AS DS_PROPRIETARIO,
           CA~DS_PLACA_REBOQ_1   AS DS_PLACA_REBOQ_1,
           CA~DS_PLACA_REBOQ_2   AS DS_PLACA_REBOQ_2,
           CA~DS_PLACA_REBOQ_3   AS DS_PLACA_REBOQ_3,
           CA~ID_MOTORISTA       AS ID_MOTORISTA,
           MT~NAME1              AS DS_MOTORISTA,
           CA~NR_TICKET          AS NR_TICKET,
           CA~IN_TRANSFERENCIA   AS IN_TRANSFERENCIA,
           CA~TP_STATUS          AS TP_STATUS,
           CA~DT_ABERTURA        AS DT_ABERTURA,
           CA~HR_ABERTURA        AS HR_ABERTURA,
           CA~US_ABERTURA        AS US_ABERTURA,
           CA~DT_FECHAMENTO      AS DT_FECHAMENTO,
           CA~HR_FECHAMENTO      AS HR_FECHAMENTO,
           CA~US_FECHAMENTO      AS US_FECHAMENTO,
           CA~DT_CONFERENCIA     AS DT_CONFERENCIA,
           CA~HR_CONFERENCIA     AS HR_CONFERENCIA,
           CA~US_CONFERENCIA     AS US_CONFERENCIA,
           CA~DT_CANCELAMENTO    AS DT_CANCELAMENTO,
           CA~HR_CANCELAMENTO    AS HR_CANCELAMENTO,
           CA~US_CANCELAMENTO    AS US_CANCELAMENTO,

           CL~ID_CLASSIFICACAO      AS ID_CLASSIFICACAO,
           CL~IN_GMO                AS IN_GMO,
           CL~NR_RESULTADO_01       AS NR_RESULTADO_01,
           CL~NR_RESULTADO_02       AS NR_RESULTADO_02,
           CL~NR_RES_RR1_RR2        AS NR_RES_RR1_RR2,
           CL~IN_GMO_03             AS IN_GMO_03,
           CL~IN_SRR_ORIGEM_PARTIC  AS IN_SRR_ORIGEM_PARTIC,
           CL~ID_OUTRO_PARTIC       AS ID_OUTRO_PARTIC,
           OT~NAME1                 AS DS_OUTRO_PARTIC,
           CL~IN_SRR_DECLARADO      AS IN_SRR_DECLARADO,
           CL~IN_TESTE_SRR          AS IN_TESTE_SRR,
           CL~IN_SRR_DECLARADO_2    AS IN_SRR_DECLARADO_2,
           CL~IN_TESTE_SRR_2        AS IN_TESTE_SRR_2,
           CL~TP_TRANSGENIA         AS TP_TRANSGENIA,

           R1~NR_PERCENTUAL_COM     AS NR_PERC_UMI,
           R2~NR_PERCENTUAL_COM     AS NR_PERC_IMP,
           R3~NR_PERCENTUAL_COM     AS NR_PERC_AVA,
           R4~NR_PERCENTUAL_COM     AS NR_PERC_ARD,
           R5~NR_PERCENTUAL_COM     AS NR_PERC_QUE,
           R6~NR_PERCENTUAL_COM     AS NR_PERC_ESV,
           R7~NR_PERCENTUAL_COM     AS NR_PERC_CAR,

           R1~NR_QUANTIDADE_COM     AS NR_QTDE_UMI,
           R2~NR_QUANTIDADE_COM     AS NR_QTDE_IMP,
           R3~NR_QUANTIDADE_COM     AS NR_QTDE_AVA,
           R4~NR_QUANTIDADE_COM     AS NR_QTDE_ARD,
           R5~NR_QUANTIDADE_COM     AS NR_QTDE_QUE,
           R6~NR_QUANTIDADE_COM     AS NR_QTDE_ESV,
           R7~NR_QUANTIDADE_COM     AS NR_QTDE_CAR

      INTO TABLE @DATA(IT_TAB)
      FROM ZSDT0001ACB        AS SA
     INNER JOIN ZSDT0001ACG   AS CA ON CA~ID_SOLICITACAO   EQ SA~ID_SOLICITACAO
     INNER JOIN ZSDT0001LE    AS LE ON LE~ID_LOCAL_ENTREGA EQ CA~ID_LOCAL_ENTREGA
     INNER JOIN T001          AS EN ON EN~BUKRS EQ CA~ID_BUKRS
     INNER JOIN J_1BBRANCH    AS FN ON FN~BUKRS EQ CA~ID_BUKRS AND FN~BRANCH EQ CA~ID_BRANCH
     INNER JOIN LFA1          AS LC ON LC~LIFNR EQ CA~ID_LOCAL_COLETA
     INNER JOIN LFA1          AS LD ON LD~LIFNR EQ CA~ID_LOCAL_DESTINO
     INNER JOIN KNA1          AS LA ON LA~KUNNR EQ CA~ID_LOCAL_DESCARGA
      LEFT JOIN ZSDT0001OD    AS OD ON OD~ID_ORDEM EQ CA~ID_ORDEM
      LEFT JOIN ZSDT0001ACL   AS CL ON CL~ID_SOLICITACAO EQ SA~ID_SOLICITACAO AND CL~ID_CARGA_ORIGEM EQ CA~ID_CARGA_ORIGEM AND CL~ID_CLASSIFICACAO EQ CA~ID_CLASSIFICACAO
      LEFT JOIN ZSDT0001ARS   AS R1 ON R1~ID_SOLICITACAO EQ SA~ID_SOLICITACAO AND R1~ID_CARGA_ORIGEM EQ CL~ID_CARGA_ORIGEM AND R1~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R1~TP_CARACTERISTICA EQ '01'
      LEFT JOIN ZSDT0001ARS   AS R2 ON R2~ID_SOLICITACAO EQ SA~ID_SOLICITACAO AND R2~ID_CARGA_ORIGEM EQ CL~ID_CARGA_ORIGEM AND R2~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R2~TP_CARACTERISTICA EQ '02'
      LEFT JOIN ZSDT0001ARS   AS R3 ON R3~ID_SOLICITACAO EQ SA~ID_SOLICITACAO AND R3~ID_CARGA_ORIGEM EQ CL~ID_CARGA_ORIGEM AND R3~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R3~TP_CARACTERISTICA EQ '03'
      LEFT JOIN ZSDT0001ARS   AS R4 ON R4~ID_SOLICITACAO EQ SA~ID_SOLICITACAO AND R4~ID_CARGA_ORIGEM EQ CL~ID_CARGA_ORIGEM AND R4~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R4~TP_CARACTERISTICA EQ '04'
      LEFT JOIN ZSDT0001ARS   AS R5 ON R5~ID_SOLICITACAO EQ SA~ID_SOLICITACAO AND R5~ID_CARGA_ORIGEM EQ CL~ID_CARGA_ORIGEM AND R5~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R5~TP_CARACTERISTICA EQ '05'
      LEFT JOIN ZSDT0001ARS   AS R6 ON R6~ID_SOLICITACAO EQ SA~ID_SOLICITACAO AND R6~ID_CARGA_ORIGEM EQ CL~ID_CARGA_ORIGEM AND R6~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R6~TP_CARACTERISTICA EQ '06'
      LEFT JOIN ZSDT0001ARS   AS R7 ON R7~ID_SOLICITACAO EQ SA~ID_SOLICITACAO AND R7~ID_CARGA_ORIGEM EQ CL~ID_CARGA_ORIGEM AND R7~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R7~TP_CARACTERISTICA EQ '07'
      LEFT JOIN LFA1         AS AG ON AG~LIFNR EQ CA~ID_AGENT_FRETE
      LEFT JOIN LFA1         AS PP ON PP~LIFNR EQ CA~ID_PROPRIETARIO
      LEFT JOIN LFA1         AS MT ON MT~LIFNR EQ CA~ID_MOTORISTA
      LEFT JOIN LFA1         AS OT ON OT~LIFNR EQ CL~ID_OUTRO_PARTIC
     INNER JOIN MAKT         AS MA ON MA~SPRAS EQ @SY-LANGU AND MA~MATNR EQ CA~ID_PRODUTO
     WHERE SA~ID_SOLICITACAO IN @LC_FILTRO-IIDSOLIC
       AND SA~DT_SOLICITACAO IN @LC_FILTRO-IDTSOLIC
       AND SA~US_SOLICITACAO IN @LC_FILTRO-IUSSOLIC
       AND CA~ID_CARGA_ORIGEM    IN @LC_FILTRO-IIDCARGA
       AND EXISTS ( SELECT * FROM ZSDT0001ANT AS NT
                     WHERE NT~ID_CARGA_ORIGEM EQ CA~ID_CARGA_ORIGEM
                       AND NT~ID_SOLICITACAO  EQ CA~ID_SOLICITACAO
                       AND NT~ID_ENTRADA      IN @LC_FILTRO-IIDENTRA )
       AND CA~ID_LOCAL_ENTREGA   IN @LC_FILTRO-IIDLOCAL
       AND CA~DT_MOVIMENTO       IN @LC_FILTRO-IDTMOVIM
       AND CA~NR_SAFRA           IN @LC_FILTRO-INRSAFRA
       AND CA~ID_BUKRS           IN @LC_FILTRO-IIDBUKRS
       AND CA~ID_BRANCH          IN @LC_FILTRO-IIDBRANC
       AND CA~ID_AGENT_FRETE     IN @LC_FILTRO-IIDAGENT
       AND CA~ID_LOCAL_COLETA    IN @LC_FILTRO-IIDCOLET
       AND CA~ID_LOCAL_DESTINO   IN @LC_FILTRO-IIDDESTI
       AND CA~ID_LOCAL_DESCARGA  IN @LC_FILTRO-IIDDESCA
       AND CA~ID_PRODUTO         IN @LC_FILTRO-IIDPRODU
       AND CA~DS_PLACA_TRATOR    IN @LC_FILTRO-IDSTRATO
       AND CA~ID_MOTORISTA       IN @LC_FILTRO-IIDMOTOR
       AND CA~NR_TICKET          IN @LC_FILTRO-INRTICKE
       AND CA~DT_FECHAMENTO      IN @LC_FILTRO-IDTFECHA
       AND CA~HR_FECHAMENTO      IN @LC_FILTRO-IHRFECHA
     ORDER BY SA~ID_SOLICITACAO.

    IF IT_TAB[] IS NOT INITIAL.
      SELECT * INTO TABLE @DATA(IT_ZSDT0001ARS_03)
        FROM ZSDT0001ARS_03
         FOR ALL ENTRIES IN @IT_TAB
       WHERE ID_SOLICITACAO  EQ @IT_TAB-ID_SOLICITACAO
         AND ID_CARGA_ORIGEM EQ @IT_TAB-ID_CARGA.
    ENDIF.

    LOOP AT IT_TAB INTO DATA(WA_TAB).
      CLEAR: WA_RETORNO.
      WA_RETORNO-ID_SOLICITACAO        = WA_TAB-ID_SOLICITACAO.
      WA_RETORNO-DT_SOLICITACAO        = WA_TAB-DT_SOLICITACAO.
      WA_RETORNO-HR_SOLICITACAO        = WA_TAB-HR_SOLICITACAO.
      WA_RETORNO-US_SOLICITACAO        = WA_TAB-US_SOLICITACAO.
      WA_RETORNO-TP_SOLICITACAO_STATUS = WA_TAB-TP_SOLICITACAO_STATUS.
      WA_RETORNO-SE_RECORDID           = WA_TAB-SE_RECORDID.
      WA_RETORNO-CK_ACEITE_FILIAL      = WA_TAB-CK_ACEITE_FILIAL.
      WA_RETORNO-CK_ACEITE_FISCAL      = WA_TAB-CK_ACEITE_FISCAL.
      WA_RETORNO-CK_ACEITE_COMERCIAL   = WA_TAB-CK_ACEITE_COMERCIAL.
      WA_RETORNO-RS_ACEITE_FILIAL      = WA_TAB-RS_ACEITE_FILIAL.
      WA_RETORNO-RS_ACEITE_FISCAL      = WA_TAB-RS_ACEITE_FISCAL.
      WA_RETORNO-RS_ACEITE_COMERCIAL   = WA_TAB-RS_ACEITE_COMERCIAL.
      WA_RETORNO-DS_ACEITE_FILIAL      = WA_TAB-DS_ACEITE_FILIAL.
      WA_RETORNO-DS_ACEITE_FISCAL      = WA_TAB-DS_ACEITE_FISCAL.
      WA_RETORNO-DS_ACEITE_COMERCIAL   = WA_TAB-DS_ACEITE_COMERCIAL.

      WA_RETORNO-ID_CARGA          = WA_TAB-ID_CARGA.
      WA_RETORNO-ID_ORDEM          = WA_TAB-ID_ORDEM.
      WA_RETORNO-NR_ORDEM          = WA_TAB-NR_ORDEM.
      WA_RETORNO-ID_LOCAL_ENTREGA  = WA_TAB-ID_LOCAL_ENTREGA.
      WA_RETORNO-DS_LOCAL_ENTREGA  = WA_TAB-DS_LOCAL_ENTREGA.
      WA_RETORNO-DT_MOVIMENTO      = WA_TAB-DT_MOVIMENTO.
      WA_RETORNO-NR_SAFRA          = WA_TAB-NR_SAFRA.
      WA_RETORNO-ID_BUKRS          = WA_TAB-ID_BUKRS.
      WA_RETORNO-BUTXT             = WA_TAB-BUTXT.
      WA_RETORNO-ID_BRANCH         = WA_TAB-ID_BRANCH.
      WA_RETORNO-NAME              = WA_TAB-NAME.
      WA_RETORNO-ID_AGENT_FRETE    = WA_TAB-ID_AGENT_FRETE.
      WA_RETORNO-DS_AGENT_FRETE    = WA_TAB-DS_AGENT_FRETE.
      WA_RETORNO-ID_LOCAL_COLETA   = WA_TAB-ID_LOCAL_COLETA.
      WA_RETORNO-DS_LOCAL_COLETA   = WA_TAB-DS_LOCAL_COLETA.
      WA_RETORNO-ID_LOCAL_DESTINO  = WA_TAB-ID_LOCAL_DESTINO.
      WA_RETORNO-DS_LOCAL_DESTINO  = WA_TAB-DS_LOCAL_DESTINO.
      WA_RETORNO-ID_LOCAL_DESCARGA = WA_TAB-ID_LOCAL_DESCARGA.
      WA_RETORNO-DS_LOCAL_DESCARGA = WA_TAB-DS_LOCAL_DESCARGA.
      WA_RETORNO-TP_FRETE          = WA_TAB-TP_FRETE.
      WA_RETORNO-ID_PRODUTO        = WA_TAB-ID_PRODUTO.
      WA_RETORNO-DS_PRODUTO        = WA_TAB-DS_PRODUTO.
      WA_RETORNO-NM_PESO_BRUTO     = WA_TAB-NM_PESO_BRUTO.
      WA_RETORNO-NM_PESO_TARA      = WA_TAB-NM_PESO_TARA.
      WA_RETORNO-NM_PESO_SUBTOTAL  = WA_TAB-NM_PESO_SUBTOTAL.
      WA_RETORNO-NM_PESO_DESCONTOS = WA_TAB-NM_PESO_DESCONTOS.
      WA_RETORNO-NM_PESO_LIQUIDO   = WA_TAB-NM_PESO_LIQUIDO.
      WA_RETORNO-DS_PLACA_TRATOR   = WA_TAB-DS_PLACA_TRATOR.
      WA_RETORNO-ID_PROPRIETARIO   = WA_TAB-ID_PROPRIETARIO.
      WA_RETORNO-DS_PROPRIETARIO   = WA_TAB-DS_PROPRIETARIO.
      WA_RETORNO-DS_PLACA_REBOQ_1  = WA_TAB-DS_PLACA_REBOQ_1.
      WA_RETORNO-DS_PLACA_REBOQ_2  = WA_TAB-DS_PLACA_REBOQ_2.
      WA_RETORNO-DS_PLACA_REBOQ_3  = WA_TAB-DS_PLACA_REBOQ_3.
      WA_RETORNO-ID_MOTORISTA      = WA_TAB-ID_MOTORISTA.
      WA_RETORNO-DS_MOTORISTA      = WA_TAB-DS_MOTORISTA.
      WA_RETORNO-NR_TICKET         = WA_TAB-NR_TICKET.
      WA_RETORNO-IN_TRANSFERENCIA  = WA_TAB-IN_TRANSFERENCIA.
      WA_RETORNO-TP_STATUS         = WA_TAB-TP_STATUS.
      WA_RETORNO-DT_ABERTURA       = WA_TAB-DT_ABERTURA.
      WA_RETORNO-HR_ABERTURA       = WA_TAB-HR_ABERTURA.
      WA_RETORNO-US_ABERTURA       = WA_TAB-US_ABERTURA.
      WA_RETORNO-DT_FECHAMENTO     = WA_TAB-DT_FECHAMENTO.
      WA_RETORNO-HR_FECHAMENTO     = WA_TAB-HR_FECHAMENTO.
      WA_RETORNO-US_FECHAMENTO     = WA_TAB-US_FECHAMENTO.
      WA_RETORNO-DT_CONFERENCIA    = WA_TAB-DT_CONFERENCIA.
      WA_RETORNO-HR_CONFERENCIA    = WA_TAB-HR_CONFERENCIA.
      WA_RETORNO-US_CONFERENCIA    = WA_TAB-US_CONFERENCIA.
      WA_RETORNO-DT_CANCELAMENTO   = WA_TAB-DT_CANCELAMENTO.
      WA_RETORNO-HR_CANCELAMENTO   = WA_TAB-HR_CANCELAMENTO.
      WA_RETORNO-US_CANCELAMENTO   = WA_TAB-US_CANCELAMENTO.

      WA_RETORNO-ID_CLASSIFICACAO       = WA_TAB-ID_CLASSIFICACAO.
      WA_RETORNO-IN_GMO                 = WA_TAB-IN_GMO.
      WA_RETORNO-NR_RESULTADO_01        = WA_TAB-NR_RESULTADO_01.
      WA_RETORNO-NR_RESULTADO_02        = WA_TAB-NR_RESULTADO_02.
      WA_RETORNO-NR_RES_RR1_RR2         = WA_TAB-NR_RES_RR1_RR2.
      WA_RETORNO-IN_GMO_03              = WA_TAB-IN_GMO_03.
      WA_RETORNO-IN_SRR_ORIGEM_PARTIC   = WA_TAB-IN_SRR_ORIGEM_PARTIC.
      WA_RETORNO-ID_OUTRO_PARTIC        = WA_TAB-ID_OUTRO_PARTIC.
      WA_RETORNO-DS_OUTRO_PARTIC        = WA_TAB-DS_OUTRO_PARTIC.
      WA_RETORNO-IN_SRR_DECLARADO       = WA_TAB-IN_SRR_DECLARADO.
      WA_RETORNO-IN_TESTE_SRR           = WA_TAB-IN_TESTE_SRR.
      WA_RETORNO-IN_SRR_DECLARADO_2     = WA_TAB-IN_SRR_DECLARADO_2.
      WA_RETORNO-IN_TESTE_SRR_2         = WA_TAB-IN_TESTE_SRR_2.
      WA_RETORNO-TP_TRANSGENIA          = WA_TAB-TP_TRANSGENIA.

      WA_RETORNO-NR_PERC_UMI   = WA_TAB-NR_PERC_UMI.
      WA_RETORNO-NR_PERC_IMP   = WA_TAB-NR_PERC_IMP.
      WA_RETORNO-NR_PERC_AVA   = WA_TAB-NR_PERC_AVA.
      WA_RETORNO-NR_PERC_ARD   = WA_TAB-NR_PERC_ARD.
      WA_RETORNO-NR_PERC_QUE   = WA_TAB-NR_PERC_QUE.
      WA_RETORNO-NR_PERC_ESV   = WA_TAB-NR_PERC_ESV.
      WA_RETORNO-NR_PERC_CAR   = WA_TAB-NR_PERC_CAR.

      WA_RETORNO-NR_QTDE_UMI   = WA_TAB-NR_QTDE_UMI.
      WA_RETORNO-NR_QTDE_IMP   = WA_TAB-NR_QTDE_IMP.
      WA_RETORNO-NR_QTDE_AVA   = WA_TAB-NR_QTDE_AVA.
      WA_RETORNO-NR_QTDE_ARD   = WA_TAB-NR_QTDE_ARD.
      WA_RETORNO-NR_QTDE_QUE   = WA_TAB-NR_QTDE_QUE.
      WA_RETORNO-NR_QTDE_ESV   = WA_TAB-NR_QTDE_ESV.
      WA_RETORNO-NR_QTDE_CAR   = WA_TAB-NR_QTDE_CAR.

      LOOP AT IT_ZSDT0001ARS_03 INTO DATA(WA_ZSDT0001ARS_03)
          WHERE ID_SOLICITACAO  EQ WA_TAB-ID_SOLICITACAO
            AND ID_CARGA_ORIGEM EQ WA_TAB-ID_CARGA
            AND ID_CLASSIFICACAO EQ WA_TAB-ID_CLASSIFICACAO.

        CASE WA_ZSDT0001ARS_03-TP_SUB_CARAC_AVARIADO.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ.
            WA_RETORNO-NR_PERC_AVA_ARQ = WA_ZSDT0001ARS_03-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_QUE.
            WA_RETORNO-NR_PERC_AVA_QUE = WA_ZSDT0001ARS_03-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_MOF.
            WA_RETORNO-NR_PERC_AVA_MOF = WA_ZSDT0001ARS_03-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_PIC.
            WA_RETORNO-NR_PERC_AVA_PIC = WA_ZSDT0001ARS_03-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_FER.
            WA_RETORNO-NR_PERC_AVA_FER = WA_ZSDT0001ARS_03-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GER.
            WA_RETORNO-NR_PERC_AVA_GER = WA_ZSDT0001ARS_03-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARD.
            WA_RETORNO-NR_PERC_AVA_ARD = WA_ZSDT0001ARS_03-NR_PERCENTUAL_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GES.
            WA_RETORNO-NR_PERC_AVA_GES = WA_ZSDT0001ARS_03-NR_PERCENTUAL_COM.
        ENDCASE.

      ENDLOOP.

      APPEND WA_RETORNO TO LC_RETORNO.
    ENDLOOP.

    CHECK LC_RETORNO[] IS NOT INITIAL.

    E_REGISTROS = LC_RETORNO.
    E_PESQUISOU = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CARGA~SEND_CARGA_TO_OPUS.

    DATA: LC_JSON            TYPE STRING,
          LC_JSON_AUX        TYPE STRING,
          LC_DATA            TYPE C LENGTH 10,
          LC_HORA            TYPE C LENGTH 08,
          LC_DATA_HORA       TYPE C LENGTH 19,
          LC_NUMERO_ROM      TYPE ZSDT0001-NR_ROMANEIO,
          LC_INTEIRO         TYPE I,
          LC_PESO            TYPE C LENGTH 09,
          I_NAME_FILE        TYPE STRING,
          LC_RETORNO         TYPE ZDE_OPUS_CARGA,
          LC_DOCNUM	         TYPE J_1BDOCNUM,
          LC_NR_ROMANEIO_SAI TYPE ZDE_NR_ROMANEIO_SAI,
          LC_JSON_TAKEUP     TYPE STRING.

    DEFINE ADD_TAG.
      CONCATENATE LC_JSON '"' &1 '": "' &2 '"' &3 INTO LC_JSON.
    END-OF-DEFINITION.

    DEFINE ADD_TAG_TAKE.
      CONCATENATE LC_JSON_TAKEUP '"' &1 '": "' &2 '"' &3 INTO LC_JSON_TAKEUP.
    END-OF-DEFINITION.

    R_INSTANCIA = ME.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

    CLEAR: LC_JSON, LC_NUMERO_ROM.

    CONCATENATE '{' LC_JSON INTO LC_JSON.

    ADD_TAG 'idCargaSap'  ME->CARGA-ID_CARGA   ','.
    ADD_TAG 'centro'      ME->CARGA-ID_BRANCH  ','.
    ADD_TAG 'materialSap' ME->CARGA-ID_PRODUTO ','.
    ADD_TAG 'safra'       ME->CARGA-NR_SAFRA   ','.

    ME->ZIF_CARGA~GET_ROMANEIO_ENTRADA(
            EXPORTING
              I_ID_CARGA = ME->CARGA-ID_CARGA
              I_CANCELADOS = ABAP_TRUE
            IMPORTING
              E_ROMANEIOS = DATA(ROMANEIO_ENTRADA)
              E_ROMANEIOS_CANCEL = DATA(E_ROMANEIOS_CANCEL)
       )->GET_ROMANEIO_SAIDA( EXPORTING I_ID_CARGA  = ME->CARGA-ID_CARGA IMPORTING E_ROMANEIOS = DATA(ROMANEIO_SAIDAS)
       ).

    SORT E_ROMANEIOS_CANCEL BY CH_REFERENCIA.

    LOOP AT E_ROMANEIOS_CANCEL INTO DATA(WA_ROMANEIOS_CANCEL).
      APPEND WA_ROMANEIOS_CANCEL TO ROMANEIO_ENTRADA.
    ENDLOOP.

    DESCRIBE TABLE ROMANEIO_ENTRADA LINES DATA(LC_QTD_LINHAS).

    CONCATENATE LC_JSON '"romaneioEntrada": [' INTO LC_JSON.
    LOOP AT ROMANEIO_ENTRADA INTO DATA(WA_ENTRADA).

      DATA(LC_CANCELADO) = '0'.
      DATA(LC_TABIX) = SY-TABIX.

      READ TABLE E_ROMANEIOS_CANCEL TRANSPORTING NO FIELDS WITH KEY CH_REFERENCIA = WA_ENTRADA-CH_REFERENCIA BINARY SEARCH.
      IF SY-SUBRC IS NOT INITIAL.
        READ TABLE ME->DOCUMENTO_FISCAL WITH KEY CH_REFERENCIA_ENT = WA_ENTRADA-CH_REFERENCIA INTO DATA(NOTA_FISCAL).
        IF SY-SUBRC IS NOT INITIAL.
          READ TABLE ME->DOCUMENTO_FISCAL WITH KEY ID_CARGA = WA_ENTRADA-ID_CARGA
                                                   ID_NOTA  = WA_ENTRADA-ID_NOTA
            ASSIGNING FIELD-SYMBOL(<FS_NOTA>).
          IF SY-SUBRC IS NOT INITIAL.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_NOTA_ROMANEIO_ENTRADA-MSGID
                                  MSGNO  = ZCX_CARGA=>ZCX_NOTA_ROMANEIO_ENTRADA-MSGNO
                                  ATTR1  = CONV #( WA_ENTRADA-NR_ROMANEIO ) )
                MSGID  = ZCX_CARGA=>ZCX_NOTA_ROMANEIO_ENTRADA-MSGID
                MSGNO  = ZCX_CARGA=>ZCX_NOTA_ROMANEIO_ENTRADA-MSGNO
                MSGTY  = 'E'
                MSGV1  = CONV #( WA_ENTRADA-NR_ROMANEIO ).
          ELSE.
            <FS_NOTA>-CH_REFERENCIA_ENT = WA_ENTRADA-CH_REFERENCIA.
            MOVE-CORRESPONDING <FS_NOTA> TO NOTA_FISCAL.
          ENDIF.
        ENDIF.
      ELSE.
        CLEAR: NOTA_FISCAL.
        LC_CANCELADO = '1'.
      ENDIF.

      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'observacao'    WA_ENTRADA-DS_OBS ','.
      ADD_TAG 'placa'         WA_ENTRADA-PLACA_CAV ','.
      ADD_TAG 'cancelado'     LC_CANCELADO ','.

      CONCATENATE ME->CARGA-DT_ABERTURA+6(2) '/' ME->CARGA-DT_ABERTURA+4(2) '/' ME->CARGA-DT_ABERTURA(4)   INTO LC_DATA.
      CONCATENATE ME->CARGA-HR_ABERTURA(2)   ':' ME->CARGA-HR_ABERTURA+2(2) ':' ME->CARGA-HR_ABERTURA+4(2) INTO LC_HORA.
      CONCATENATE LC_DATA LC_HORA INTO LC_DATA_HORA SEPARATED BY SPACE.
      ADD_TAG 'dataAbertura'  LC_DATA_HORA ','.

      CONCATENATE ME->CARGA-DT_FECHAMENTO+6(2) '/' ME->CARGA-DT_FECHAMENTO+4(2) '/' ME->CARGA-DT_FECHAMENTO(4)   INTO LC_DATA.
      CONCATENATE ME->CARGA-HR_FECHAMENTO(2)   ':' ME->CARGA-HR_FECHAMENTO+2(2) ':' ME->CARGA-HR_FECHAMENTO+4(2) INTO LC_HORA.
      CONCATENATE LC_DATA LC_HORA INTO LC_DATA_HORA SEPARATED BY SPACE.
      ADD_TAG 'dataFechamento'  LC_DATA_HORA ','.

      CONCATENATE ME->CARGA-DT_MOVIMENTO+6(2) '/' ME->CARGA-DT_MOVIMENTO+4(2) '/' ME->CARGA-DT_MOVIMENTO(4)   INTO LC_DATA.
      ADD_TAG 'dataMovimento'  LC_DATA ','.
      ADD_TAG 'fornecedorSap'  WA_ENTRADA-PARID ','.
      ADD_TAG 'localEntrega'   WA_ENTRADA-LOCAL_DESCARGA ','.
      IF NOTA_FISCAL-ID_ENTREGUE_POR IS INITIAL.
        ADD_TAG 'fornecedorSapEntregue'  WA_ENTRADA-PARID ','.
      ELSE.
        ADD_TAG 'fornecedorSapEntregue'  NOTA_FISCAL-ID_ENTREGUE_POR ','.
      ENDIF.
      ADD_TAG 'tipoEntrada'  WA_ENTRADA-TIPO_ENTRADA ','.

      IF NOTA_FISCAL-ID_MOD_FISCAL NE ZIF_CARGA~ST_MODEL_FISCAL_ELETRONICO.
        ADD_TAG 'notaFiscalEletronica' 'N' ','.
      ELSE.
        ADD_TAG 'notaFiscalEletronica' 'S' ','.
      ENDIF.

*      CASE WA_ENTRADA-NFE.
*        WHEN ABAP_TRUE.
*          ADD_TAG 'notaFiscalEletronica' 'S' ','.
*        WHEN ABAP_FALSE.
*          ADD_TAG 'notaFiscalEletronica' 'N' ','.
*      ENDCASE.

      LC_INTEIRO = WA_ENTRADA-PESO_BRUTO.
      WRITE LC_INTEIRO TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      REPLACE ALL OCCURRENCES OF '.' IN LC_PESO WITH ''.
      ADD_TAG 'pesoBruto'      LC_PESO ','.

      LC_INTEIRO = WA_ENTRADA-PESO_LIQ.
      WRITE LC_INTEIRO TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      REPLACE ALL OCCURRENCES OF '.' IN LC_PESO WITH ''.
      ADD_TAG 'pesoLiquido'    LC_PESO ','.

      LC_INTEIRO = WA_ENTRADA-PESO_SUBTOTAL.
      WRITE LC_INTEIRO TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      REPLACE ALL OCCURRENCES OF '.' IN LC_PESO WITH ''.
      ADD_TAG 'pesoSubTotal'   LC_PESO ','.

      LC_INTEIRO = WA_ENTRADA-PESO_TARA.
      WRITE LC_INTEIRO TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      REPLACE ALL OCCURRENCES OF '.' IN LC_PESO WITH ''.
      ADD_TAG 'pesoTara'       LC_PESO ','.

      ADD_TAG 'numeroRomaneio' WA_ENTRADA-NR_ROMANEIO ','.
      ADD_TAG 'numeroTicket'   WA_ENTRADA-NR_TICKET ','.
      ADD_TAG 'frete'          WA_ENTRADA-TP_FRETE ','.
      ADD_TAG 'motoristaSap'   WA_ENTRADA-MOTORISTA ','.
      ADD_TAG 'dataCapturaPesoTara'    LC_DATA_HORA ','.
      ADD_TAG 'dataCapturaPesoBruto'   LC_DATA_HORA ','.
      ADD_TAG 'dataPrimeiroFechamento' LC_DATA_HORA ','.

      IF LC_NUMERO_ROM IS INITIAL.
        LC_NUMERO_ROM = WA_ENTRADA-NR_ROMANEIO.
      ENDIF.

      CASE ME->CARGA-CK_GERA_AVISO.
        WHEN ABAP_TRUE.
          ADD_TAG 'InAvisoRecebimento' 'S' ','.
        WHEN ABAP_FALSE.
          ADD_TAG 'InAvisoRecebimento' 'N' ','.
      ENDCASE.

      IF LC_TABIX LT 1.
        ADD_TAG 'desmembrado' '1' ','.
      ELSE.
        ADD_TAG 'desmembrado' '0' ','.
      ENDIF.

      IF NOTA_FISCAL-ID_MOD_FISCAL NE ZIF_CARGA~ST_MODEL_FISCAL_ELETRONICO.
        ADD_TAG 'nfe' 'N' ','.
      ELSE.
        ADD_TAG 'nfe' 'S' ','.
      ENDIF.

*      CASE WA_ENTRADA-NFE.
*        WHEN ABAP_TRUE.
*          ADD_TAG 'nfe' 'S' ','.
*        WHEN ABAP_FALSE.
*          ADD_TAG 'nfe' 'N' ','.
*      ENDCASE.

      IF LC_TABIX LT 1.
        ADD_TAG 'numeroRomaneioDesmembrado' LC_NUMERO_ROM ','.
      ELSE.
        ADD_TAG 'numeroRomaneioDesmembrado' '' ','.
      ENDIF.

      "Classificação
      CONCATENATE LC_JSON '"classificacao": {' INTO LC_JSON.
      ADD_TAG 'observacao' WA_ENTRADA-DS_OBS ','.
      ADD_TAG 'placa'      WA_ENTRADA-PLACA_CAV ','.
      ADD_TAG 'data'       LC_DATA_HORA ','.

      IF ME->CLASSIFICACAO-ID_OUTRO_PARTIC IS INITIAL.
        CONCATENATE LC_JSON '"fornecedorParticipanteSap": null,' INTO LC_JSON.
      ELSE.
        ADD_TAG 'fornecedorParticipanteSap' ME->CLASSIFICACAO-ID_OUTRO_PARTIC ','.
      ENDIF.

      ADD_TAG 'entradaSaida' WA_ENTRADA-TP_MOVIMENTO ','.

      "Ajustado
      CASE ME->CLASSIFICACAO-IN_GMO.
        WHEN '0'.
          ADD_TAG 'inGmo' '-1' ','.
        WHEN '1'.
          ADD_TAG 'inGmo' '1' ','.
        WHEN '2'.
          ADD_TAG 'inGmo' '0' ','.
      ENDCASE.

      CASE ME->CLASSIFICACAO-IN_SRR_DECLARADO.
        WHEN ABAP_TRUE.
          ADD_TAG 'inSrrDeclarado' '1' ','.
        WHEN ABAP_FALSE.
          ADD_TAG 'inSrrDeclarado' '0' ','.
      ENDCASE.

      CASE ME->CLASSIFICACAO-IN_SRR_DECLARADO_2.
        WHEN ABAP_TRUE.
          ADD_TAG 'inSrrDeclarado2' '1' ','.
        WHEN ABAP_FALSE.
          ADD_TAG 'inSrrDeclarado2' '0' ','.
      ENDCASE.

      CASE ME->CLASSIFICACAO-IN_TESTE_SRR.
        WHEN '0'.
          ADD_TAG 'inTesteSrr' '-1' ','.
        WHEN '1'.
          ADD_TAG 'inTesteSrr' '1' ','.
        WHEN '2'.
          ADD_TAG 'inTesteSrr' '0' ','.
      ENDCASE.

      CASE ME->CLASSIFICACAO-IN_TESTE_SRR_2.
        WHEN '0'.
          ADD_TAG 'inTesteSrr2' '-1' ','.
        WHEN '1'.
          ADD_TAG 'inTesteSrr2' '1' ','.
        WHEN '2'.
          ADD_TAG 'inTesteSrr2' '0' ','.
      ENDCASE.

      CASE ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC.
        WHEN ABAP_TRUE.
          ADD_TAG 'participante' '1' ','.
        WHEN ABAP_FALSE.
          ADD_TAG 'participante' '0' ','.

      ENDCASE.

      WRITE ME->CLASSIFICACAO-NR_RESULTADO_01 TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'numeroResultado01' LC_PESO ','.

      WRITE ME->CLASSIFICACAO-NR_RESULTADO_02 TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'numeroResultado2' LC_PESO ','.

      ADD_TAG 'ticket' WA_ENTRADA-NR_TICKET ','.

      IF ME->CLASSIFICACAO-ID_CLASSIFICADORA IS INITIAL.
        ADD_TAG 'fornecedorClassificadoraSap' '' ','.
      ELSE.
        ADD_TAG 'fornecedorClassificadoraSap' ME->CLASSIFICACAO-ID_CLASSIFICADORA ','.
      ENDIF.

      CONCATENATE LC_JSON '"resultadoClassificacao": [' INTO LC_JSON.

      "Umidade
      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'caracteristica' '1' ','.
      WRITE WA_ENTRADA-NR_PERC_UMIDADE TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'percentual' LC_PESO ','.
      ADD_TAG 'percentualDescontado' '0' ','.
      WRITE WA_ENTRADA-NR_QTD_UMIDADE TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'valorDesconto' LC_PESO ''.
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      "Impureza
      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'caracteristica' '2' ','.
      WRITE WA_ENTRADA-NR_PERC_IMPUREZA TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'percentual' LC_PESO ','.
      ADD_TAG 'percentualDescontado' '0' ','.
      WRITE WA_ENTRADA-NR_QTD_IMPUREZA TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'valorDesconto' LC_PESO ''.
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      "Avariado
      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'caracteristica' '3' ','.
      WRITE WA_ENTRADA-NR_PERC_AVARIA TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'percentual' LC_PESO ','.
      ADD_TAG 'percentualDescontado' '0' ','.
      WRITE WA_ENTRADA-NR_QTD_AVARIA TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'valorDesconto' LC_PESO ','.

      "Sub Caacterísticas do Avariado"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      "Sub Caacterísticas do Avariado"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      "Sub Caacterísticas do Avariado"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      CLEAR: LC_JSON_AUX.
      CONCATENATE LC_JSON '"subClassificacao": [' INTO LC_JSON.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ IMPORTING E_CK_CARAC = DATA(E_CK_CARAC) ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_ARQ TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_QUE IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_QUE TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_QUE && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_MOF IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_MOF TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_MOF && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_PIC IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_PIC TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_PIC && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_FER IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_FER TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_FER && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_GER IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_GER TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_GER && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_ARD IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_ARD TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_ARD && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_GES IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_GES TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_GES && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      CONCATENATE LC_JSON LC_JSON_AUX ']' INTO LC_JSON.
      """""""""""""""""""""""""""""""""""""""""""""""
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      "Ardido
      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'caracteristica' '4' ','.
      WRITE WA_ENTRADA-NR_PERC_ARDIDO TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'percentual' LC_PESO ','.
      ADD_TAG 'percentualDescontado' '0' ','.
      WRITE WA_ENTRADA-NR_QTD_ARDIDO TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'valorDesconto' LC_PESO ''.
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      "Quebrado
      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'caracteristica' '5' ','.
      WRITE WA_ENTRADA-NR_PERC_QUEBRA TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'percentual' LC_PESO ','.
      ADD_TAG 'percentualDescontado' '0' ','.
      WRITE WA_ENTRADA-NR_QTD_QUEBRA TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'valorDesconto' LC_PESO ''.
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      "Esverdeado
      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'caracteristica' '6' ','.
      WRITE WA_ENTRADA-NR_PERC_ESVERD TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'percentual' LC_PESO ','.
      ADD_TAG 'percentualDescontado' '0' ','.
      WRITE WA_ENTRADA-NR_QTD_ESVERD TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'valorDesconto' LC_PESO ''.
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      "Carunchado
      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'caracteristica' '7' ','.
      WRITE WA_ENTRADA-NR_PERC_CARUNCH TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'percentual' LC_PESO ','.
      ADD_TAG 'percentualDescontado' '0' ','.
      WRITE WA_ENTRADA-NR_QTD_CARUNCH TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'valorDesconto' LC_PESO ''.
      CONCATENATE LC_JSON '}' INTO LC_JSON.

      "Final do Resultado
      CONCATENATE LC_JSON ']' INTO LC_JSON.
      "Final da Classificação
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      "Processamento SIGAM
      CONCATENATE LC_JSON '"processamentoSigam": {' INTO LC_JSON.
      ADD_TAG 'IdPedidoCompraSap'   NOTA_FISCAL-PO_NUMBER ','.
      ADD_TAG 'NuAvisoRecebimento'  NOTA_FISCAL-AV_VBELN ','.
      ADD_TAG 'NuDocumentoFatura'   NOTA_FISCAL-FT_BELNR ','.
      ADD_TAG 'NuDocumentoMaterial' NOTA_FISCAL-MM_MBLNR ','.
      ADD_TAG 'NuDocumentoSap'      NOTA_FISCAL-DOCNUM   ''.
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      SELECT SINGLE * INTO @DATA(WA_J_1BNFLIN)
        FROM J_1BNFLIN
       WHERE DOCNUM EQ @NOTA_FISCAL-DOCNUM.

      CASE LC_CANCELADO.
        WHEN '0'.

          "Nota Fiscal
          CONCATENATE LC_JSON '"notaFiscal": {' INTO LC_JSON.
          ADD_TAG 'numero'      NOTA_FISCAL-NR_NOTA   ','.
          ADD_TAG 'serie'       NOTA_FISCAL-NM_SERIE  ','.
          ADD_TAG 'cfop'        NOTA_FISCAL-CFOP      ','.
          CONCATENATE NOTA_FISCAL-DT_EMISSAO+6(2) '/' NOTA_FISCAL-DT_EMISSAO+4(2) '/' NOTA_FISCAL-DT_EMISSAO(4) INTO LC_DATA.
          ADD_TAG 'dataEmissao' LC_DATA  ','.

          LC_INTEIRO = NOTA_FISCAL-NR_QUANTIDADE.
          WRITE LC_INTEIRO TO LC_PESO.
          CONDENSE LC_PESO NO-GAPS.
          ADD_TAG 'quantidade'  LC_PESO  ','.

          WRITE NOTA_FISCAL-NR_VALOR TO LC_PESO.
          CONDENSE LC_PESO NO-GAPS.
          ADD_TAG 'valor' LC_PESO  ','.

          "SELECT SINGLE * INTO @DATA(WA_ACTIVE)
          "  FROM J_1BNFE_ACTIVE
          " WHERE DOCNUM EQ @NOTA_FISCAL-DOCNUM.

          "CONCATENATE WA_ACTIVE-REGIO WA_ACTIVE-NFYEAR WA_ACTIVE-NFMONTH WA_ACTIVE-STCD1 WA_ACTIVE-MODEL WA_ACTIVE-SERIE WA_ACTIVE-NFNUM9 WA_ACTIVE-DOCNUM9
          "            WA_ACTIVE-CDV INTO DATA(LC_CHAVE).

          IF NOTA_FISCAL-NR_CHAVE_NFE IS INITIAL.
            CONCATENATE LC_JSON '"chaveNfe": null,' INTO LC_JSON.
          ELSE.
            ADD_TAG 'chaveNfe' NOTA_FISCAL-NR_CHAVE_NFE ','.
          ENDIF.

          CONCATENATE NOTA_FISCAL-DT_VENCIMENTO_FORM+6(2) '/' NOTA_FISCAL-DT_VENCIMENTO_FORM+4(2) '/' NOTA_FISCAL-DT_VENCIMENTO_FORM(4) INTO LC_DATA.
          ADD_TAG 'dataVencimentoFormulario' LC_DATA  ''.

          "Incluir Dados de Take UP """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
          CLEAR: LC_JSON_TAKEUP.
          LOOP AT ME->ZIF_CARGA~TAKE_UP INTO DATA(WA_TAKEUP)
            WHERE ID_CARGA EQ WA_ENTRADA-ID_CARGA
              AND ID_NOTA  EQ WA_ENTRADA-ID_NOTA.
            IF LC_JSON_TAKEUP IS NOT INITIAL.
              CONCATENATE ',' LC_JSON_TAKEUP INTO LC_JSON_TAKEUP.
            ENDIF.
            CONCATENATE LC_JSON_TAKEUP '{' INTO LC_JSON_TAKEUP.
            ADD_TAG_TAKE 'idTakeUp'    WA_TAKEUP-ID_TAKEUP ','.
            ADD_TAG_TAKE 'numeroBloco' WA_TAKEUP-NU_BLOCO  ','.

            LC_INTEIRO = WA_TAKEUP-QT_VINCULADA.
            WRITE LC_INTEIRO TO LC_PESO.
            CONDENSE LC_PESO NO-GAPS.
            ADD_TAG_TAKE 'numeroQuantidadeVolume' LC_PESO ''.
            CONCATENATE LC_JSON_TAKEUP '}' INTO LC_JSON_TAKEUP.
          ENDLOOP.

          IF LC_JSON_TAKEUP IS NOT INITIAL.
            CONCATENATE LC_JSON ', "lotesCompraTakeUp": [' INTO LC_JSON.
            CONCATENATE LC_JSON LC_JSON_TAKEUP INTO LC_JSON.
            CONCATENATE LC_JSON ']' INTO LC_JSON.
          ENDIF.
          "Incluir Dados de Take UP """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

          CONCATENATE LC_JSON '}' INTO LC_JSON.

        WHEN '1'.
          "Nota Fiscal
          CONCATENATE LC_JSON '"notaFiscal": null' INTO LC_JSON.

*          CONCATENATE LC_JSON '"notaFiscal": {' INTO LC_JSON.
*          CONCATENATE LC_JSON '"numero": null,' INTO LC_JSON.
*          CONCATENATE LC_JSON '"serie": null,' INTO LC_JSON.
*          CONCATENATE LC_JSON '"cfop": null,' INTO LC_JSON.
*          CONCATENATE LC_JSON '"dataEmissao": null,' INTO LC_JSON.
*          CONCATENATE LC_JSON '"quantidade": null,' INTO LC_JSON.
*          CONCATENATE LC_JSON '"valor": null,' INTO LC_JSON.
*          CONCATENATE LC_JSON '"chaveNfe": null,' INTO LC_JSON.
*          CONCATENATE LC_JSON '"dataVencimentoFormulario": null ' INTO LC_JSON.
*          CONCATENATE LC_JSON '}' INTO LC_JSON.
      ENDCASE.

      "Final do Romaneio de Entrada
      IF LC_TABIX NE LC_QTD_LINHAS.
        CONCATENATE LC_JSON '},' INTO LC_JSON.
      ELSE.
        CONCATENATE LC_JSON '}' INTO LC_JSON.
      ENDIF.
    ENDLOOP.
    "Fim Romaneio de Entrada
    CONCATENATE LC_JSON '],' INTO LC_JSON.

    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    CLEAR: LC_NUMERO_ROM.

    DESCRIBE TABLE ROMANEIO_SAIDAS LINES LC_QTD_LINHAS.
    CONCATENATE LC_JSON '"romaneioSaida": [' INTO LC_JSON.
    LOOP AT ROMANEIO_SAIDAS INTO DATA(WA_SAIDA).

      LC_TABIX = SY-TABIX.

      IF LC_NUMERO_ROM IS INITIAL.
        LC_NUMERO_ROM = WA_SAIDA-NR_ROMANEIO.
      ENDIF.

      CONCATENATE LC_JSON '{' INTO LC_JSON.

      LC_INTEIRO = WA_SAIDA-PESO_BRUTO.
      WRITE LC_INTEIRO TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      REPLACE ALL OCCURRENCES OF '.' IN LC_PESO WITH ''.
      ADD_TAG 'pesoBruto' LC_PESO ','.

      LC_INTEIRO = WA_SAIDA-PESO_LIQ.
      WRITE LC_INTEIRO TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      REPLACE ALL OCCURRENCES OF '.' IN LC_PESO WITH ''.
      ADD_TAG 'pesoLiquido' LC_PESO ','.

      LC_INTEIRO = WA_SAIDA-PESO_SUBTOTAL.
      WRITE LC_INTEIRO TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      REPLACE ALL OCCURRENCES OF '.' IN LC_PESO WITH ''.
      ADD_TAG 'pesoSubTotal' LC_PESO ','.

      LC_INTEIRO = WA_SAIDA-PESO_TARA.
      WRITE LC_INTEIRO TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      REPLACE ALL OCCURRENCES OF '.' IN LC_PESO WITH ''.
      ADD_TAG 'pesoTara'       LC_PESO ','.

      ADD_TAG 'numeroRomaneio' WA_SAIDA-NR_ROMANEIO ','.
      ADD_TAG 'numeroTicket'   WA_SAIDA-NR_TICKET ','.
      ADD_TAG 'tipoFrete'      WA_SAIDA-TP_FRETE ','.

      CASE WA_SAIDA-TP_TRANSGENIA.
        WHEN 'CO'.
          ADD_TAG 'tipoProduto'  'C' ','.
        WHEN OTHERS.
          ADD_TAG 'tipoProduto'  'R' ','.
      ENDCASE.

      CONCATENATE WA_SAIDA-DT_ABERTURA+6(2) '/' WA_SAIDA-DT_ABERTURA+4(2) '/' WA_SAIDA-DT_ABERTURA(4)   INTO LC_DATA.
      CONCATENATE WA_SAIDA-HR_ABERTURA(2)   ':' WA_SAIDA-HR_ABERTURA+2(2) ':' WA_SAIDA-HR_ABERTURA+4(2) INTO LC_HORA.
      CONCATENATE LC_DATA LC_HORA INTO LC_DATA_HORA SEPARATED BY SPACE.
      ADD_TAG 'dataAbertura'  LC_DATA_HORA ','.

      CONCATENATE WA_SAIDA-DT_FECHAMENTO+6(2) '/' WA_SAIDA-DT_FECHAMENTO+4(2) '/' WA_SAIDA-DT_FECHAMENTO(4)   INTO LC_DATA.
      CONCATENATE WA_SAIDA-HR_FECHAMENTO(2)   ':' WA_SAIDA-HR_FECHAMENTO+2(2) ':' WA_SAIDA-HR_FECHAMENTO+4(2) INTO LC_HORA.
      CONCATENATE LC_DATA LC_HORA INTO LC_DATA_HORA SEPARATED BY SPACE.
      ADD_TAG 'dataPrimeiroFechamento'  LC_DATA_HORA ','.
      ADD_TAG 'dataCapturaPesoTara'     LC_DATA_HORA ','.
      ADD_TAG 'dataCapturaPesoBruto'    LC_DATA_HORA ','.
      ADD_TAG 'dataFechamento'          LC_DATA_HORA ','.

      ADD_TAG 'observacao'  WA_SAIDA-DS_OBS ','.

      CONCATENATE WA_SAIDA-DT_MOVIMENTO+6(2) '/' WA_SAIDA-DT_MOVIMENTO+4(2) '/' WA_SAIDA-DT_MOVIMENTO(4)   INTO LC_DATA.
      ADD_TAG 'dataMovimento' LC_DATA ','.
      ADD_TAG 'placa'         WA_SAIDA-PLACA_CAV ','.
      ADD_TAG 'motoristaSap'  WA_SAIDA-MOTORISTA ','.

      IF ME->CARGA-ID_ORDEM IS NOT INITIAL.
        SELECT SINGLE * INTO @DATA(WA_ORDEM_CARREGA)
          FROM ZSDT0001OD
         WHERE ID_ORDEM EQ @ME->CARGA-ID_ORDEM.

        ADD_TAG 'ordemCarregamento' WA_ORDEM_CARREGA-NR_ORDEM ','.
      ELSE.
        CONCATENATE LC_JSON '"ordemCarregamento": null,' INTO LC_JSON.
      ENDIF.
      ADD_TAG 'ordemVenda'        WA_SAIDA-VBELN ','.

      CASE ME->CARGA-CK_GERA_AVISO.
        WHEN ABAP_TRUE.
          ADD_TAG 'InAvisoRecebimento' 'S' ','.
        WHEN ABAP_FALSE.
          ADD_TAG 'InAvisoRecebimento' 'N' ','.
      ENDCASE.

      IF LC_TABIX LT 1.
        ADD_TAG 'desmembrado' 'S' ','.
      ELSE.
        ADD_TAG 'desmembrado' 'N' ','.
      ENDIF.

      IF LC_TABIX LT 1.
        ADD_TAG 'numeroRomaneioDesmembrado' LC_NUMERO_ROM ','.
      ELSE.
        ADD_TAG 'numeroRomaneioDesmembrado' '' ','.
      ENDIF.

      "Classificação
      CONCATENATE LC_JSON '"classificacao": {' INTO LC_JSON.
      ADD_TAG 'observacao' WA_SAIDA-DS_OBS ','.
      ADD_TAG 'placa'      WA_SAIDA-PLACA_CAV ','.
      ADD_TAG 'data'       LC_DATA_HORA ','.

      IF ME->CLASSIFICACAO-ID_OUTRO_PARTIC IS INITIAL.
        ADD_TAG 'fornecedorParticipanteSap' '' ','.
      ELSE.
        ADD_TAG 'fornecedorParticipanteSap' ME->CLASSIFICACAO-ID_OUTRO_PARTIC ','.
      ENDIF.

      ADD_TAG 'entradaSaida' WA_SAIDA-TP_MOVIMENTO ','.

      CASE ME->CLASSIFICACAO-IN_GMO.
        WHEN '0'.
          ADD_TAG 'inGmo' '-1' ','.
        WHEN '1'.
          ADD_TAG 'inGmo' '1' ','.
        WHEN '2'.
          ADD_TAG 'inGmo' '0' ','.
      ENDCASE.

      CASE ME->CLASSIFICACAO-IN_SRR_DECLARADO.
        WHEN ABAP_TRUE.
          ADD_TAG 'inSrrDeclarado' '1' ','.
        WHEN ABAP_FALSE.
          ADD_TAG 'inSrrDeclarado' '0' ','.
      ENDCASE.

      CASE ME->CLASSIFICACAO-IN_SRR_DECLARADO_2.
        WHEN ABAP_TRUE.
          ADD_TAG 'inSrrDeclarado2' '1' ','.
        WHEN ABAP_FALSE.
          ADD_TAG 'inSrrDeclarado2' '0' ','.
      ENDCASE.

      CASE ME->CLASSIFICACAO-IN_TESTE_SRR.
        WHEN '0'.
          ADD_TAG 'inTesteSrr' '-1' ','.
        WHEN '1'.
          ADD_TAG 'inTesteSrr' '1' ','.
        WHEN '2'.
          ADD_TAG 'inTesteSrr' '0' ','.
      ENDCASE.

      CASE ME->CLASSIFICACAO-IN_TESTE_SRR_2.
        WHEN '0'.
          ADD_TAG 'inTesteSrr2' '-1' ','.
        WHEN '1'.
          ADD_TAG 'inTesteSrr2' '1' ','.
        WHEN '2'.
          ADD_TAG 'inTesteSrr2' '0' ','.
      ENDCASE.

      CASE ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC.
        WHEN ABAP_TRUE.
          ADD_TAG 'participante' '1' ','.
        WHEN ABAP_FALSE.
          ADD_TAG 'participante' '0' ','.

      ENDCASE.

      WRITE ME->CLASSIFICACAO-NR_RESULTADO_01 TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'numeroResultado01' LC_PESO ','.

      WRITE ME->CLASSIFICACAO-NR_RESULTADO_02 TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'numeroResultado2' LC_PESO ','.

      ADD_TAG 'ticket' WA_SAIDA-NR_TICKET ','.

      IF ME->CLASSIFICACAO-ID_CLASSIFICADORA IS INITIAL.
        ADD_TAG 'fornecedorClassificadoraSap' '' ','.
      ELSE.
        ADD_TAG 'fornecedorClassificadoraSap' ME->CLASSIFICACAO-ID_CLASSIFICADORA ','.
      ENDIF.

      CONCATENATE LC_JSON '"resultadoClassificacao": [' INTO LC_JSON.

      "Umidade
      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'caracteristica' '1' ','.
      WRITE WA_SAIDA-NR_PERC_UMIDADE TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'percentual' LC_PESO ','.
      ADD_TAG 'percentualDescontado' '0' ','.
      WRITE WA_SAIDA-NR_QTD_UMIDADE TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'valorDesconto' LC_PESO ''.
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      "Impureza
      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'caracteristica' '2' ','.
      WRITE WA_SAIDA-NR_PERC_IMPUREZA TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'percentual' LC_PESO ','.
      ADD_TAG 'percentualDescontado' '0' ','.
      WRITE WA_SAIDA-NR_QTD_IMPUREZA TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'valorDesconto' LC_PESO ''.
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      "Avariado
      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'caracteristica' '3' ','.
      WRITE WA_SAIDA-NR_PERC_AVARIA TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'percentual' LC_PESO ','.
      ADD_TAG 'percentualDescontado' '0' ','.
      WRITE WA_SAIDA-NR_QTD_AVARIA TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'valorDesconto' LC_PESO ','.
      "Sub Caacterísticas do Avariado""""""""""""""""
      CLEAR: LC_JSON_AUX.
      CONCATENATE LC_JSON '"subClassificacao": [' INTO LC_JSON.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_ARQ TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_QUE IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_QUE TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_QUE && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_MOF IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_MOF TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_MOF && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_PIC IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_PIC TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_PIC && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_FER IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_FER TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_FER && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_GER IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_GER TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_GER && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_ARD IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_ARD TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_ARD && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      ME->ZIF_CARGA~GET_CK_SUB_CARAC_AVA_MATERIAL( EXPORTING I_SUB_CARAC_AVA  = ZIF_CARGA=>ST_TP_CARACT_SUB_GES IMPORTING E_CK_CARAC = E_CK_CARAC ).
      IF E_CK_CARAC EQ ABAP_TRUE.
        IF LC_JSON_AUX IS NOT INITIAL.
          LC_JSON_AUX = LC_JSON_AUX && ','.
        ENDIF.
        WRITE WA_ENTRADA-NR_PERC_AVA_GES TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.
        LC_JSON_AUX = LC_JSON_AUX && '{ "subCaracteristica": "' && ZIF_CARGA=>ST_TP_CARACT_SUB_GES && '", "percentual" : "' && LC_PESO && '" }'.
      ENDIF.

      CONCATENATE LC_JSON LC_JSON_AUX ']' INTO LC_JSON.
      """""""""""""""""""""""""""""""""""""""""""""""
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      "Ardido
      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'caracteristica' '4' ','.
      WRITE WA_SAIDA-NR_PERC_ARDIDO TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'percentual' LC_PESO ','.
      ADD_TAG 'percentualDescontado' '0' ','.
      WRITE WA_SAIDA-NR_QTD_ARDIDO TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'valorDesconto' LC_PESO ''.
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      "Quebrado
      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'caracteristica' '5' ','.
      WRITE WA_SAIDA-NR_PERC_QUEBRA TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'percentual' LC_PESO ','.
      ADD_TAG 'percentualDescontado' '0' ','.
      WRITE WA_SAIDA-NR_QTD_QUEBRA TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'valorDesconto' LC_PESO ''.
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      "Esverdeado
      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'caracteristica' '6' ','.
      WRITE WA_SAIDA-NR_PERC_ESVERD TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'percentual' LC_PESO ','.
      ADD_TAG 'percentualDescontado' '0' ','.
      WRITE WA_SAIDA-NR_QTD_ESVERD TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'valorDesconto' LC_PESO ''.
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      "Carunchado
      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'caracteristica' '7' ','.
      WRITE WA_SAIDA-NR_PERC_CARUNCH TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'percentual' LC_PESO ','.
      ADD_TAG 'percentualDescontado' '0' ','.
      WRITE WA_SAIDA-NR_QTD_CARUNCH TO LC_PESO.
      CONDENSE LC_PESO NO-GAPS.
      ADD_TAG 'valorDesconto' LC_PESO ''.
      CONCATENATE LC_JSON '}' INTO LC_JSON.

      "Final do Resultado
      CONCATENATE LC_JSON ']' INTO LC_JSON.
      "Final da Classificação
      CONCATENATE LC_JSON '},' INTO LC_JSON.

      CONCATENATE LC_JSON ' "notaFiscal": {' INTO LC_JSON.
      ADD_TAG 'numero' '0' ','.
      ADD_TAG 'serie' '0' ','.
      ADD_TAG 'cfop' '0' ','.
      CONCATENATE ME->CARGA-DT_MOVIMENTO+6(2) '/' ME->CARGA-DT_MOVIMENTO+4(2) '/' ME->CARGA-DT_MOVIMENTO(4)   INTO LC_DATA.
      ADD_TAG 'dataEmissao' LC_DATA ','.
      ADD_TAG 'dataVencimentoFormulario' LC_DATA  ','.
      ADD_TAG 'quantidade' '0' ','.
      ADD_TAG 'valor' '0' ','.
      ADD_TAG 'chaveNfe' '' ''.
      CONCATENATE LC_JSON ' }' INTO LC_JSON.

      "Final do Romaneio de Saída
      IF LC_TABIX NE LC_QTD_LINHAS.
        CONCATENATE LC_JSON '},' INTO LC_JSON.
      ELSE.
        CONCATENATE LC_JSON '}' INTO LC_JSON.
      ENDIF.

    ENDLOOP.
    "Fim Romaneio de Saída
    CONCATENATE LC_JSON ']' INTO LC_JSON.

    "Fim Arquivo
    CONCATENATE LC_JSON '}' INTO LC_JSON.

    DATA: OB_WEB_SERVICE TYPE REF TO ZCL_WEBSERVICE.

    CREATE OBJECT OB_WEB_SERVICE.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~AUTENTICA_OPUS = ABAP_TRUE.

    TRY .
        CASE ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA.
          WHEN ABAP_FALSE.
            OB_WEB_SERVICE->SET_SERVICO( I_SERVICO = 'IT' ).
          WHEN ABAP_TRUE.
            OB_WEB_SERVICE->SET_SERVICO( I_SERVICO = 'IA' ).
        ENDCASE.
      CATCH ZCX_WEBSERVICE INTO DATA(LC_EXCEPTION).
    ENDTRY.
    OB_WEB_SERVICE->SET_TIPO( I_TIPO = 'O' ).

    TRY .
        DATA(VAR_HTTP) = OB_WEB_SERVICE->URL( ). "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
        DATA(LC_URI) = OB_WEB_SERVICE->GET_URI(  ).
      CATCH ZCX_WEBSERVICE INTO LC_EXCEPTION.
    ENDTRY.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = VAR_HTTP ).

    ME->CARGA-CK_ENVIADO_OPUS  = ABAP_TRUE.
    ME->CARGA-CK_RECEBIDO_OPUS = ABAP_FALSE.
    UPDATE ZSDT0001CG
       SET CK_ENVIADO_OPUS  = ABAP_TRUE
           CK_RECEBIDO_OPUS = ABAP_FALSE
     WHERE ID_CARGA = ME->CARGA-ID_CARGA.
    COMMIT WORK.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~CONSULTAR(
      EXPORTING
        I_HTTP                     = VAR_HTTP
        I_XML                      = LC_JSON
      IMPORTING
        E_CODE                     = E_CODE
        E_REASON                   = DATA(E_REASON)
      RECEIVING
        E_RESULTADO                = DATA(JSON_RETORNO)
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3
        HTTP_INVALID_TIMEOUT       = 4
        OTHERS                     = 5
    ).

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    IF E_CODE NE 200.
      ME->CARGA-CK_ENVIADO_OPUS  = ABAP_FALSE.
      ME->CARGA-CK_RECEBIDO_OPUS = ABAP_FALSE.

      UPDATE ZSDT0001CG
         SET CK_ENVIADO_OPUS  = ABAP_FALSE
             CK_RECEBIDO_OPUS = ABAP_FALSE
       WHERE ID_CARGA = ME->CARGA-ID_CARGA.
      COMMIT WORK.

      CALL METHOD /UI2/CL_JSON=>DESERIALIZE
        EXPORTING
          JSON = JSON_RETORNO
        CHANGING
          DATA = LC_RETORNO.

      IF LC_RETORNO-MESSAGE IS NOT INITIAL.
        CONCATENATE 'OPUS:' LC_RETORNO-MESSAGE INTO DATA(LC_TEXTO_CODE) SEPARATED BY SPACE.
      ELSE.
        CONCATENATE 'OPUS:' E_REASON INTO LC_TEXTO_CODE SEPARATED BY SPACE.
      ENDIF.
      ME->ZIF_CARGA~GERA_ERRO_GERAL( EXPORTING I_TEXTO = LC_TEXTO_CODE ).
    ENDIF.

    ME->CARGA-CK_RECEBIDO_OPUS = ABAP_TRUE.
    UPDATE ZSDT0001CG
       SET CK_RECEBIDO_OPUS = ABAP_TRUE
     WHERE ID_CARGA = ME->CARGA-ID_CARGA.
    COMMIT WORK.

    DATA: ARQUIVO TYPE REF TO ZCL_ARQUIVO.

    SELECT SINGLE * INTO @DATA(WA_ZLEST0007)
      FROM ZLEST0007
     WHERE ID_INTERFACE = @ZCL_ROMANEIO=>INTERFACE_CARGA_SAP
       AND ID_CTG       = 'JSON'
       AND PREFIX       = 'JSON'.

    IF SY-SUBRC IS INITIAL.
      CREATE OBJECT ARQUIVO.
      CONCATENATE WA_ZLEST0007-PATHUNIX 'CargaIn' ME->CARGA-ID_CARGA '.json' INTO I_NAME_FILE.

      OPEN DATASET I_NAME_FILE FOR OUTPUT IN TEXT MODE ENCODING DEFAULT .
      IF SY-SUBRC IS INITIAL.
        TRANSFER LC_JSON TO I_NAME_FILE.
        CLOSE DATASET I_NAME_FILE.
      ENDIF.

      CONCATENATE WA_ZLEST0007-PATHUNIX 'CargaOut' ME->CARGA-ID_CARGA '.json' INTO I_NAME_FILE.

      OPEN DATASET I_NAME_FILE FOR OUTPUT IN TEXT MODE ENCODING DEFAULT .
      IF SY-SUBRC IS INITIAL.
        TRANSFER JSON_RETORNO TO I_NAME_FILE.
        CLOSE DATASET I_NAME_FILE.
      ENDIF.

      CLEAR: ARQUIVO.
    ENDIF.

    CONDENSE JSON_RETORNO.

    IF JSON_RETORNO(1) = '['.
      DATA(QTD_INTEGER) =  STRLEN( JSON_RETORNO ).
      QTD_INTEGER = QTD_INTEGER - 2.
      JSON_RETORNO = JSON_RETORNO+1(QTD_INTEGER).
    ENDIF.

    DATA(JSON_RETORNO_TESTE) = JSON_RETORNO.
    CONDENSE JSON_RETORNO_TESTE NO-GAPS.

    IF JSON_RETORNO_TESTE EQ '[]' OR JSON_RETORNO_TESTE IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGNO
                            ATTR1 = CONV #( LC_URI ) )
          MSGID  = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGNO
          MSGV1  = CONV #( LC_URI ).
    ENDIF.

    CALL METHOD /UI2/CL_JSON=>DESERIALIZE
      EXPORTING
        JSON = JSON_RETORNO
      CHANGING
        DATA = LC_RETORNO.

    IF LC_RETORNO IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGNO
                            ATTR1 = CONV #( LC_URI ) )
          MSGID  = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGNO
          MSGV1  = CONV #( LC_URI ).
    ENDIF.

    CONDENSE LC_RETORNO-MESSAGE.
    IF LC_RETORNO-MESSAGE IS NOT INITIAL.
      CONCATENATE 'OPUS: ' LC_RETORNO-MESSAGE INTO LC_RETORNO-MESSAGE SEPARATED BY SPACE.
      ME->ZIF_CARGA~GERA_ERRO_GERAL( EXPORTING I_TEXTO = LC_RETORNO-MESSAGE ).
    ENDIF.

    "Atualiza Processo de Entrada
    LOOP AT LC_RETORNO-ENTRADA INTO DATA(WA_ENTRADA_RET).
      CONDENSE WA_ENTRADA_RET-MENSAGEM.
      IF WA_ENTRADA_RET-MENSAGEM IS NOT INITIAL.
        CONCATENATE 'OPUS: ' WA_ENTRADA_RET-MENSAGEM INTO WA_ENTRADA_RET-MENSAGEM SEPARATED BY SPACE.
        ME->ZIF_CARGA~GERA_ERRO_GERAL( EXPORTING I_TEXTO = WA_ENTRADA_RET-MENSAGEM ).
      ENDIF.
    ENDLOOP.

    "Atualiza Processo de Saída
    LOOP AT LC_RETORNO-SAIDA INTO DATA(WA_SAIDA_RET).
      CONDENSE WA_SAIDA_RET-MENSAGEM.
      IF WA_SAIDA_RET-MENSAGEM IS NOT INITIAL.
        CONCATENATE 'OPUS: ' WA_SAIDA_RET-MENSAGEM INTO WA_SAIDA_RET-MENSAGEM SEPARATED BY SPACE.
        ME->ZIF_CARGA~GERA_ERRO_GERAL( EXPORTING I_TEXTO = WA_SAIDA_RET-MENSAGEM ).
      ENDIF.
    ENDLOOP.

    IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
      "Atualiza Processo de Entrada
      LOOP AT LC_RETORNO-ENTRADA INTO WA_ENTRADA_RET.

        "Localiza Nota Fiscal de Entrada
        LC_DOCNUM = WA_ENTRADA_RET-PROCESSAMENTO-NUDOCUMENTOSAP.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = LC_DOCNUM
          IMPORTING
            OUTPUT = LC_DOCNUM.

        READ TABLE ME->DOCUMENTO_FISCAL WITH KEY DOCNUM = LC_DOCNUM ASSIGNING FIELD-SYMBOL(<DOCUMENTO_FISCAL>).

        IF WA_ENTRADA_RET-SEQPLAFISCAL IS NOT INITIAL AND WA_ENTRADA_RET-SEQPLAFISCAL NE '0'.

          "Atualizar Movimento de Entrada
          UPDATE ZMMT_EE_ZGR
             SET OBJ_KEY = WA_ENTRADA_RET-SEQPLAFISCAL
           WHERE OBJ_KEY  EQ <DOCUMENTO_FISCAL>-OBJ_KEY_ENTRADA
             AND ID_CARGA EQ ME->CARGA-ID_CARGA.

          IF SY-SUBRC IS INITIAL.

            "Atualizar Movimento de Entrada Documentos
            UPDATE ZMMT_EEIMP_ZGR
               SET OBJ_KEY = WA_ENTRADA_RET-SEQPLAFISCAL
             WHERE OBJ_KEY = <DOCUMENTO_FISCAL>-OBJ_KEY_ENTRADA.

            "Atualizar Movimento de Entrada Documentos
            UPDATE ZMMT_EE_ZGR_DOCS
               SET OBJ_KEY = WA_ENTRADA_RET-SEQPLAFISCAL
             WHERE OBJ_KEY = <DOCUMENTO_FISCAL>-OBJ_KEY_ENTRADA.

          ENDIF.

          "Atualizar Notas Fiscais da Carga
          <DOCUMENTO_FISCAL>-OBJ_KEY_ENTRADA = WA_ENTRADA_RET-SEQPLAFISCAL.

        ENDIF.

        IF WA_ENTRADA_RET-SEQPLAROMANEIO IS NOT INITIAL AND WA_ENTRADA_RET-SEQPLAROMANEIO NE '0'.

          "Eliminar Romaneio de Entrada que foi gerado pelo ZMM0127
          SELECT SINGLE * INTO @DATA(WA_ZSDT0001)
            FROM ZSDT0001
           WHERE CH_REFERENCIA EQ @WA_ENTRADA_RET-SEQPLAROMANEIO
             AND ID_CARGA      NE @ME->CARGA-ID_CARGA.

          IF SY-SUBRC IS INITIAL.

            "Apaga Romaneio "Ficticio"
            DELETE FROM ZSDT0001
             WHERE CH_REFERENCIA EQ <DOCUMENTO_FISCAL>-CH_REFERENCIA_ENT
               AND ID_CARGA      EQ ME->CARGA-ID_CARGA.

            "Atualizar Romaneio de Entrada Gerado Pelo OPUS com Id Carga e Id Nota
            UPDATE ZSDT0001
               SET ID_CARGA = <DOCUMENTO_FISCAL>-ID_CARGA
                   ID_NOTA  = <DOCUMENTO_FISCAL>-ID_NOTA
             WHERE CH_REFERENCIA EQ WA_ENTRADA_RET-SEQPLAROMANEIO
               AND ID_CARGA      NE ME->CARGA-ID_CARGA.

          ELSE.

            "Atualizar Romaneio de Entrada "Ficticio" p/ Romaneio Real
            UPDATE ZSDT0001
               SET CH_REFERENCIA = WA_ENTRADA_RET-SEQPLAROMANEIO
             WHERE CH_REFERENCIA EQ <DOCUMENTO_FISCAL>-CH_REFERENCIA_ENT
               AND ID_CARGA      EQ ME->CARGA-ID_CARGA.

            "Atualizar Romaneio de Entrada "Ficticio" p/ Romaneio Real
            UPDATE ZSDT0001_ITEM
               SET CH_REFERENCIA = WA_ENTRADA_RET-SEQPLAROMANEIO
             WHERE CH_REFERENCIA EQ <DOCUMENTO_FISCAL>-CH_REFERENCIA_ENT
               AND ID_CARGA      EQ ME->CARGA-ID_CARGA.

            UPDATE ZSDT0001_ITEM_FD
               SET CH_REFERENCIA = WA_ENTRADA_RET-SEQPLAROMANEIO
             WHERE CH_REFERENCIA EQ <DOCUMENTO_FISCAL>-CH_REFERENCIA_ENT.

          ENDIF.
          "Atualizar Notas Fiscais da Carga
          <DOCUMENTO_FISCAL>-CH_REFERENCIA_ENT = WA_ENTRADA_RET-SEQPLAROMANEIO.
        ENDIF.

      ENDLOOP.

      "
      DATA(ERRO_ROMANEIO_GERAR) = ABAP_FALSE.

      "Atualiza Processo de Saída
      LOOP AT LC_RETORNO-SAIDA INTO WA_SAIDA_RET.

        IF WA_SAIDA_RET-SEQPLAROMANEIO IS INITIAL OR WA_SAIDA_RET-SEQPLAROMANEIO EQ '0'.
          ERRO_ROMANEIO_GERAR = ABAP_TRUE.
        ELSEIF WA_SAIDA_RET-SEQPLAROMANEIO IS NOT INITIAL AND WA_SAIDA_RET-SEQPLAROMANEIO NE '0'.

          LC_NR_ROMANEIO_SAI = WA_SAIDA_RET-NUMEROROMANEIO.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = LC_NR_ROMANEIO_SAI
            IMPORTING
              OUTPUT = LC_NR_ROMANEIO_SAI.

          LOOP AT ME->ZIF_CARGA~ORDEM_VENDA ASSIGNING FIELD-SYMBOL(<ORDEM_VENDA>) WHERE NR_ROMANEIO_SAI EQ LC_NR_ROMANEIO_SAI.

            "Eliminar Romaneio de Saída que foi gerado pela ZMM0127
            SELECT SINGLE * INTO WA_ZSDT0001
              FROM ZSDT0001
             WHERE CH_REFERENCIA EQ WA_SAIDA_RET-SEQPLAROMANEIO
               AND ID_CARGA      NE ME->CARGA-ID_CARGA.

            IF SY-SUBRC IS INITIAL.
              "Deleta registro "Ficticio"
              DELETE FROM ZSDT0001
               WHERE CH_REFERENCIA EQ <ORDEM_VENDA>-CH_REFERENCIA_SAI
                 AND ID_CARGA      EQ ME->CARGA-ID_CARGA.

              "Atualizar Romaneio de Saída Real com Id Carga
              UPDATE ZSDT0001
                 SET ID_CARGA = <ORDEM_VENDA>-ID_CARGA
               WHERE CH_REFERENCIA EQ WA_SAIDA_RET-SEQPLAROMANEIO
                 AND ID_CARGA      NE ME->CARGA-ID_CARGA.

              UPDATE ZSDT0001_ITEM
                 SET ID_CARGA = <ORDEM_VENDA>-ID_CARGA
               WHERE CH_REFERENCIA EQ WA_SAIDA_RET-SEQPLAROMANEIO
                 AND ID_CARGA      NE ME->CARGA-ID_CARGA.

            ELSE.
              "Atualizar Romaneio de Saída
              UPDATE ZSDT0001
                 SET CH_REFERENCIA = WA_SAIDA_RET-SEQPLAROMANEIO
               WHERE CH_REFERENCIA EQ <ORDEM_VENDA>-CH_REFERENCIA_SAI
                 AND ID_CARGA      EQ ME->CARGA-ID_CARGA.

              UPDATE ZSDT0001_ITEM
                 SET CH_REFERENCIA = WA_SAIDA_RET-SEQPLAROMANEIO
               WHERE CH_REFERENCIA EQ <ORDEM_VENDA>-CH_REFERENCIA_SAI
                 AND ID_CARGA      EQ ME->CARGA-ID_CARGA.

              UPDATE ZSDT0001_ITEM_FD
                 SET CH_REFERENCIA = WA_SAIDA_RET-SEQPLAROMANEIO
               WHERE CH_REFERENCIA EQ <ORDEM_VENDA>-CH_REFERENCIA_SAI.

            ENDIF.

            "Atualizar Notas Fiscais da Carga
            <ORDEM_VENDA>-CH_REFERENCIA_SAI = WA_SAIDA_RET-SEQPLAROMANEIO.
          ENDLOOP.

          LOOP AT ME->ZIF_CARGA~PEDIDO_COMPRA ASSIGNING FIELD-SYMBOL(<PEDIDO_COMPRA>) WHERE NR_ROMANEIO_SAI EQ LC_NR_ROMANEIO_SAI.

            "Eliminar Romaneio de Saída que foi gerado pela ZMM0127
            SELECT SINGLE * INTO WA_ZSDT0001
              FROM ZSDT0001
             WHERE CH_REFERENCIA EQ WA_SAIDA_RET-SEQPLAROMANEIO
               AND ID_CARGA      NE ME->CARGA-ID_CARGA.

            IF SY-SUBRC IS INITIAL.
              "Apaga Romaneio "Ficticio"
              DELETE FROM ZSDT0001
               WHERE CH_REFERENCIA EQ <PEDIDO_COMPRA>-CH_REFERENCIA_SAI
                 AND ID_CARGA      EQ ME->CARGA-ID_CARGA.

              "Atualiza Romaneio Real com a Carga
              UPDATE ZSDT0001
                 SET ID_CARGA = <PEDIDO_COMPRA>-ID_CARGA
               WHERE CH_REFERENCIA EQ WA_SAIDA_RET-SEQPLAROMANEIO
                 AND ID_CARGA      NE ME->CARGA-ID_CARGA.

              "Atualiza Romaneio Real com a Carga
              UPDATE ZSDT0001_ITEM
                 SET ID_CARGA = <PEDIDO_COMPRA>-ID_CARGA
               WHERE CH_REFERENCIA EQ WA_SAIDA_RET-SEQPLAROMANEIO
                 AND ID_CARGA      NE ME->CARGA-ID_CARGA.

            ELSE.
              "Atualizar Romaneio de Saída "Ficticio" para real
              UPDATE ZSDT0001
                 SET CH_REFERENCIA = WA_SAIDA_RET-SEQPLAROMANEIO
               WHERE CH_REFERENCIA EQ <PEDIDO_COMPRA>-CH_REFERENCIA_SAI
                 AND ID_CARGA      EQ ME->CARGA-ID_CARGA.

              UPDATE ZSDT0001_ITEM
                 SET CH_REFERENCIA = WA_SAIDA_RET-SEQPLAROMANEIO
               WHERE CH_REFERENCIA EQ <PEDIDO_COMPRA>-CH_REFERENCIA_SAI
                 AND ID_CARGA      EQ ME->CARGA-ID_CARGA.

              UPDATE ZSDT0001_ITEM_FD
                 SET CH_REFERENCIA = WA_SAIDA_RET-SEQPLAROMANEIO
               WHERE CH_REFERENCIA EQ <PEDIDO_COMPRA>-CH_REFERENCIA_SAI.
            ENDIF.

            "Atualizar Notas Fiscais da Carga
            <PEDIDO_COMPRA>-CH_REFERENCIA_SAI = WA_SAIDA_RET-SEQPLAROMANEIO.
          ENDLOOP.

        ENDIF.

      ENDLOOP.

      IF ERRO_ROMANEIO_GERAR EQ ABAP_TRUE.
        ME->ZIF_CARGA~GERA_ERRO_GERAL( EXPORTING I_TEXTO = 'OPUS: Erro ao gerar Romaneio de Saída' ).
      ENDIF.

    ELSE.

      LOOP AT LC_RETORNO-ENTRADA INTO WA_ENTRADA_RET WHERE PROCESSAMENTO-NUDOCUMENTOSAP IS NOT INITIAL.

        "Localiza Nota Fiscal de Entrada
        LC_DOCNUM = WA_ENTRADA_RET-PROCESSAMENTO-NUDOCUMENTOSAP.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = LC_DOCNUM
          IMPORTING
            OUTPUT = LC_DOCNUM.

        READ TABLE ME->DOCUMENTO_FISCAL WITH KEY DOCNUM = LC_DOCNUM ASSIGNING <DOCUMENTO_FISCAL>.

        IF WA_ENTRADA_RET-SEQPLAFISCAL IS NOT INITIAL AND WA_ENTRADA_RET-SEQPLAFISCAL NE '0'.

          "Atualizar Movimento de Entrada
          UPDATE ZMMT_EE_ZGR
             SET OBJ_KEY       = WA_ENTRADA_RET-SEQPLAFISCAL
                 CH_REFERENCIA = WA_ENTRADA_RET-SEQPLAROMANEIO
           WHERE OBJ_KEY  EQ <DOCUMENTO_FISCAL>-OBJ_KEY_ENTRADA
             AND ID_CARGA EQ ME->CARGA-ID_CARGA.

          IF SY-SUBRC IS INITIAL.

            "Atualizar Movimento de Entrada Documentos
            UPDATE ZMMT_EEIMP_ZGR
               SET OBJ_KEY = WA_ENTRADA_RET-SEQPLAFISCAL
             WHERE OBJ_KEY = <DOCUMENTO_FISCAL>-OBJ_KEY_ENTRADA.

            "Atualizar Movimento de Entrada Documentos
            UPDATE ZMMT_EE_ZGR_DOCS
               SET OBJ_KEY = WA_ENTRADA_RET-SEQPLAFISCAL
             WHERE OBJ_KEY = <DOCUMENTO_FISCAL>-OBJ_KEY_ENTRADA.

          ENDIF.

          "Atualizar Notas Fiscais da Carga
          <DOCUMENTO_FISCAL>-OBJ_KEY_ENTRADA = WA_ENTRADA_RET-SEQPLAFISCAL.

        ENDIF.

        IF WA_ENTRADA_RET-SEQPLAROMANEIO IS NOT INITIAL AND WA_ENTRADA_RET-SEQPLAROMANEIO NE '0'.

          "Eliminar Romaneio de Entrada que foi gerado pelo ZMM0127
          SELECT SINGLE * INTO @WA_ZSDT0001
            FROM ZSDT0001
           WHERE CH_REFERENCIA EQ @WA_ENTRADA_RET-SEQPLAROMANEIO
             AND ID_CARGA      NE @ME->CARGA-ID_CARGA.

          IF SY-SUBRC IS INITIAL.

            "Apaga Romaneio "Ficticio"
            DELETE FROM ZSDT0001
             WHERE CH_REFERENCIA EQ <DOCUMENTO_FISCAL>-CH_REFERENCIA_ENT
               AND ID_CARGA      EQ ME->CARGA-ID_CARGA.

            "Atualizar Romaneio de Entrada Gerado Pelo OPUS com Id Carga e Id Nota
            UPDATE ZSDT0001
               SET ID_CARGA = <DOCUMENTO_FISCAL>-ID_CARGA
                   ID_NOTA  = <DOCUMENTO_FISCAL>-ID_NOTA
             WHERE CH_REFERENCIA EQ WA_ENTRADA_RET-SEQPLAROMANEIO
               AND ID_CARGA      NE ME->CARGA-ID_CARGA.

            UPDATE ZSDT0001_ITEM
               SET ID_CARGA = <DOCUMENTO_FISCAL>-ID_CARGA
                   ID_NOTA  = <DOCUMENTO_FISCAL>-ID_NOTA
             WHERE CH_REFERENCIA EQ WA_ENTRADA_RET-SEQPLAROMANEIO
               AND ID_CARGA      NE ME->CARGA-ID_CARGA.

          ELSE.

            "Atualizar Romaneio de Entrada "Ficticio" p/ Romaneio Real
            UPDATE ZSDT0001
               SET CH_REFERENCIA = WA_ENTRADA_RET-SEQPLAROMANEIO
             WHERE CH_REFERENCIA EQ <DOCUMENTO_FISCAL>-CH_REFERENCIA_ENT
               AND ID_CARGA      EQ ME->CARGA-ID_CARGA.

            "Atualizar Romaneio de Entrada "Ficticio" p/ Romaneio Real
            UPDATE ZSDT0001_ITEM
               SET CH_REFERENCIA = WA_ENTRADA_RET-SEQPLAROMANEIO
             WHERE CH_REFERENCIA EQ <DOCUMENTO_FISCAL>-CH_REFERENCIA_ENT
               AND ID_CARGA      EQ ME->CARGA-ID_CARGA.

            UPDATE ZSDT0001_ITEM_FD
               SET CH_REFERENCIA = WA_ENTRADA_RET-SEQPLAROMANEIO
             WHERE CH_REFERENCIA EQ <DOCUMENTO_FISCAL>-CH_REFERENCIA_ENT.

          ENDIF.
          "Atualizar Notas Fiscais da Carga
          <DOCUMENTO_FISCAL>-CH_REFERENCIA_ENT = WA_ENTRADA_RET-SEQPLAROMANEIO.
        ENDIF.

      ENDLOOP.

    ENDIF.

    COMMIT WORK.

    ME->ZIF_CARGA~CK_ALTEROU = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CARGA~SEND_ESTORNO_CARGA_TO_OPUS.

    DATA: LC_JSON     TYPE STRING,
          I_NAME_FILE TYPE STRING,
          LC_RETORNO  TYPE ZDE_OPUS_CARGA.

    DEFINE ADD_TAG.
      CONCATENATE LC_JSON '"' &1 '": "' &2 '"' &3 INTO LC_JSON.
    END-OF-DEFINITION.

    R_INSTANCIA = ME.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.
    CHECK ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.

    ME->ZIF_CARGA~GET_ROMANEIO_ENTRADA(
      EXPORTING
        I_ID_CARGA = ME->ZIF_CARGA~CARGA-ID_CARGA
      IMPORTING
       E_ROMANEIOS = DATA(E_ROMANEIOS) ).

    DESCRIBE TABLE E_ROMANEIOS LINES DATA(LC_QTD_LINHAS).

    CONCATENATE '{' LC_JSON INTO LC_JSON.

    ADD_TAG 'centro'      ME->CARGA-ID_BRANCH  ','.
    ADD_TAG 'safra'       ME->CARGA-NR_SAFRA   ','.

    CONCATENATE LC_JSON '"romaneioEntrada": [' INTO LC_JSON.
    LOOP AT E_ROMANEIOS INTO DATA(WA_ENTRADA).

      DATA(LC_TABIX) = SY-TABIX.

      CONCATENATE LC_JSON '{' INTO LC_JSON.
      ADD_TAG 'numeroRomaneio' WA_ENTRADA-NR_ROMANEIO ''.

      "Final do Romaneio de Entrada
      IF LC_TABIX NE LC_QTD_LINHAS.
        CONCATENATE LC_JSON '},' INTO LC_JSON.
      ELSE.
        CONCATENATE LC_JSON '}' INTO LC_JSON.
      ENDIF.
    ENDLOOP.
    "Fim Romaneio de Entrada
    CONCATENATE LC_JSON ']' INTO LC_JSON.

    "Fim Arquivo
    CONCATENATE LC_JSON '}' INTO LC_JSON.

    DATA: OB_WEB_SERVICE TYPE REF TO ZCL_WEBSERVICE.

    CREATE OBJECT OB_WEB_SERVICE.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~AUTENTICA_OPUS = ABAP_TRUE.

    TRY .
        OB_WEB_SERVICE->SET_SERVICO( I_SERVICO = 'IC' ).
      CATCH ZCX_WEBSERVICE INTO DATA(LC_EXCEPTION).
    ENDTRY.

    OB_WEB_SERVICE->SET_TIPO( I_TIPO = 'O' ).

    TRY .
        DATA(VAR_HTTP) = OB_WEB_SERVICE->URL( ). "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
        DATA(LC_URI)   = OB_WEB_SERVICE->GET_URI( ).
      CATCH ZCX_WEBSERVICE INTO LC_EXCEPTION.
    ENDTRY.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = VAR_HTTP ).

    CALL METHOD OB_WEB_SERVICE->ZIF_WEBSERVICE~CONSULTAR
      EXPORTING
        I_HTTP                     = VAR_HTTP
        I_XML                      = LC_JSON
      RECEIVING
        E_RESULTADO                = DATA(JSON_RETORNO)
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3
        HTTP_INVALID_TIMEOUT       = 4
        OTHERS                     = 5.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    DATA: ARQUIVO TYPE REF TO ZCL_ARQUIVO.

    SELECT SINGLE * INTO @DATA(WA_ZLEST0007)
      FROM ZLEST0007
     WHERE ID_INTERFACE = @ZCL_ROMANEIO=>INTERFACE_CARGA_SAP
       AND ID_CTG       = 'JSON'
       AND PREFIX       = 'JSON'.

    IF SY-SUBRC IS INITIAL.
      CREATE OBJECT ARQUIVO.
      CONCATENATE WA_ZLEST0007-PATHUNIX 'CargaCancelIn' ME->CARGA-ID_CARGA '.json' INTO I_NAME_FILE.

      OPEN DATASET I_NAME_FILE FOR OUTPUT IN TEXT MODE ENCODING DEFAULT .
      IF SY-SUBRC IS INITIAL.
        TRANSFER LC_JSON TO I_NAME_FILE.
        CLOSE DATASET I_NAME_FILE.
      ENDIF.

      CONCATENATE WA_ZLEST0007-PATHUNIX 'CargaCancelOut' ME->CARGA-ID_CARGA '.json' INTO I_NAME_FILE.

      OPEN DATASET I_NAME_FILE FOR OUTPUT IN TEXT MODE ENCODING DEFAULT .
      IF SY-SUBRC IS INITIAL.
        TRANSFER JSON_RETORNO TO I_NAME_FILE.
        CLOSE DATASET I_NAME_FILE.
      ENDIF.

      CLEAR: ARQUIVO.
    ENDIF.

    CONDENSE JSON_RETORNO.

    IF JSON_RETORNO(1) = '['.
      DATA(QTD_INTEGER) =  STRLEN( JSON_RETORNO ).
      QTD_INTEGER = QTD_INTEGER - 2.
      JSON_RETORNO = JSON_RETORNO+1(QTD_INTEGER).
    ENDIF.

    DATA(JSON_RETORNO_TESTE) = JSON_RETORNO.
    CONDENSE JSON_RETORNO_TESTE NO-GAPS.

    IF JSON_RETORNO_TESTE EQ '[]' OR JSON_RETORNO_TESTE IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGNO
                            ATTR1 = CONV #( LC_URI ) )
          MSGID  = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGNO
          MSGV1  = CONV #( LC_URI ).
    ENDIF.

    CALL METHOD /UI2/CL_JSON=>DESERIALIZE
      EXPORTING
        JSON = JSON_RETORNO
      CHANGING
        DATA = LC_RETORNO.

    IF LC_RETORNO IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGNO
                            ATTR1 = CONV #( LC_URI ) )
          MSGID  = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_SEM_RETORNO_WEBSERVICE-MSGNO
          MSGV1  = CONV #( LC_URI ).
    ENDIF.

    CONDENSE LC_RETORNO-MESSAGE.
    IF LC_RETORNO-MESSAGE IS NOT INITIAL.
      CONCATENATE 'OPUS: ' LC_RETORNO-MESSAGE INTO LC_RETORNO-MESSAGE SEPARATED BY SPACE.
      ME->ZIF_CARGA~GERA_ERRO_GERAL( EXPORTING I_TEXTO = LC_RETORNO-MESSAGE ).
    ENDIF.

    "Atualiza Processo de Entrada
    LOOP AT LC_RETORNO-ENTRADA INTO DATA(WA_ENTRADA_RET).
      CONDENSE WA_ENTRADA_RET-MENSAGEM.
      IF WA_ENTRADA_RET-MENSAGEM IS NOT INITIAL.
        CONCATENATE 'OPUS: ' WA_ENTRADA_RET-MENSAGEM INTO WA_ENTRADA_RET-MENSAGEM SEPARATED BY SPACE.
        ME->ZIF_CARGA~GERA_ERRO_GERAL( EXPORTING I_TEXTO = WA_ENTRADA_RET-MENSAGEM ).
      ENDIF.
    ENDLOOP.

    ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ABRIR.

    DATA: I_TEXTO     TYPE STRING,
          OB_ROMANEIO TYPE REF TO ZCL_ROMANEIO.

    R_CARGA = ME.

    ME->ZIF_CARGA~CK_EXECUTAR_REVERSAO_ENTRADA = ABAP_TRUE. "BUG 34154

    CHECK NOT ( ME->CARGA-CK_ENVIADO_OPUS EQ ABAP_TRUE AND ME->CARGA-CK_RECEBIDO_OPUS EQ ABAP_FALSE ).

    IF ME->CARGA-ID_CARGA IS NOT INITIAL AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

      "Exclui Frete Entrada
      ME->ZIF_CARGA~SET_ESTORNA_FRETE_ENTRADA( ).

      "Veririca se Pode Excluir Romaneio de Saída
      ME->ZIF_CARGA~GET_CK_EXCLUIR_ROMANEIO_SAIDA( I_CK_OPUS = ABAP_TRUE ).

      ME->ZIF_CARGA~GET_ROMANEIO_SAIDA( EXPORTING I_ID_CARGA  = ME->CARGA-ID_CARGA IMPORTING E_ROMANEIOS = DATA(IT_ROMANEIO) ).

      LOOP AT IT_ROMANEIO INTO DATA(WA_ROMANEIO).
        CREATE OBJECT OB_ROMANEIO.
        OB_ROMANEIO->ZIF_CADASTRO~SET_REGISTRO( I_ID_REGISTRO = WA_ROMANEIO-CH_REFERENCIA ).
        OB_ROMANEIO->ZIF_CADASTRO~EXCLUIR_REGISTRO( ).
        CLEAR OB_ROMANEIO.
      ENDLOOP.

      ME->ZIF_CARGA~GET_ROMANEIO_ENTRADA( EXPORTING I_ID_CARGA  = ME->CARGA-ID_CARGA IMPORTING E_ROMANEIOS = DATA(IT_ROMANEIO_ENTRADA) ).

      IF IT_ROMANEIO_ENTRADA[] IS NOT INITIAL.
        "Verifica se existe entrada para estornar
        TRY .
            ME->ZIF_CARGA~GET_RECUPERAR_ENTRADA(
            )->SET_PROCESSAR_ESTORNO_SOBRA(
            )->SET_GERAR_ESTORNO_ESTOQUE(
            )->SET_PROCESSAR_ESTORNO( IMPORTING E_ESTORNOU = DATA(E_ESTORNOU)
            ).

          CATCH ZCX_JOB INTO DATA(EX_JOB).

            MESSAGE ID EX_JOB->MSGID TYPE 'S'
             NUMBER EX_JOB->MSGNO
               WITH EX_JOB->MSGV1 EX_JOB->MSGV2 EX_JOB->MSGV3 EX_JOB->MSGV4
               INTO I_TEXTO.

            ME->GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).

          CATCH ZCX_PEDIDO_COMPRA_EXCEPTION INTO DATA(EX_PEDIDO).

            MESSAGE ID EX_PEDIDO->MSGID TYPE 'S'
             NUMBER EX_PEDIDO->MSGNO
               WITH EX_PEDIDO->MSGV1 EX_PEDIDO->MSGV2 EX_PEDIDO->MSGV3 EX_PEDIDO->MSGV4
               INTO I_TEXTO.

            ME->GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).

          CATCH ZCX_CADASTRO INTO DATA(EX_CADASTRO).

            MESSAGE ID EX_CADASTRO->MSGID TYPE 'S'
             NUMBER EX_CADASTRO->MSGNO
               WITH EX_CADASTRO->MSGV1 EX_CADASTRO->MSGV2 EX_CADASTRO->MSGV3 EX_CADASTRO->MSGV4
               INTO I_TEXTO.

            ME->GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).

        ENDTRY.
        CHECK E_ESTORNOU EQ ABAP_TRUE.
      ENDIF.

    ENDIF.

    CASE ME->CARGA-TP_STATUS.
      WHEN ZIF_CARGA=>ST_STATUS_ABERTO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGNO.
      WHEN ZIF_CARGA=>ST_STATUS_CONFERIDO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO.
      WHEN ZIF_CARGA=>ST_STATUS_CANCELADA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO.
    ENDCASE.

    CLEAR: E_CARGA_RECEBIMENTO.

    IF ME->CARGA-ID_CARGA IS NOT INITIAL.
      "077  Carga Está Fechada deseja reabrir a carga?
      IF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.
        MESSAGE W077.
        "ELSE.
        "  MESSAGE W180.
      ENDIF.
      ME->GET_INFO_ALV_APRESENTACAO( IMPORTING E_APRESENTACAO = DATA(E_CARGA) ).
      E_CARGA_RECEBIMENTO = E_CARGA-CARGA.
    ENDIF.

    ME->ZIF_CARGA~SET_CANCELAR_SOLIC_MANUT( ).

    ME->CARGA-DT_ABERTURA    = SY-DATLO.
    ME->CARGA-HR_ABERTURA    = SY-TIMLO.
    ME->CARGA-US_ABERTURA    = SY-UNAME.
    ME->CARGA-TP_STATUS      = ZIF_CARGA=>ST_STATUS_ABERTO.

    CLEAR:
    ME->CARGA-DT_MOVIMENTO,
    ME->CARGA-DT_FECHAMENTO,
    ME->CARGA-HR_FECHAMENTO,
    ME->CARGA-US_FECHAMENTO,
    ME->CARGA-DT_CONFERENCIA,
    ME->CARGA-HR_CONFERENCIA,
    ME->CARGA-US_CONFERENCIA.

    E_CARGA_RECEBIMENTO-DT_ABERTURA    = ME->CARGA-DT_ABERTURA.
    E_CARGA_RECEBIMENTO-HR_ABERTURA    = ME->CARGA-HR_ABERTURA.
    E_CARGA_RECEBIMENTO-US_ABERTURA    = ME->CARGA-US_ABERTURA.
    E_CARGA_RECEBIMENTO-TP_STATUS      = ME->CARGA-TP_STATUS.
    E_CARGA_RECEBIMENTO-DT_FECHAMENTO  = ME->CARGA-DT_FECHAMENTO.
    E_CARGA_RECEBIMENTO-HR_FECHAMENTO  = ME->CARGA-HR_FECHAMENTO.
    E_CARGA_RECEBIMENTO-US_FECHAMENTO  = ME->CARGA-US_FECHAMENTO.
    E_CARGA_RECEBIMENTO-DT_CONFERENCIA = ME->CARGA-DT_CONFERENCIA.
    E_CARGA_RECEBIMENTO-HR_CONFERENCIA = ME->CARGA-HR_CONFERENCIA.
    E_CARGA_RECEBIMENTO-US_CONFERENCIA = ME->CARGA-US_CONFERENCIA.
    E_CARGA_RECEBIMENTO-DT_MOVIMENTO   = ME->CARGA-DT_MOVIMENTO.
    ME->CK_ALTEROU = ABAP_TRUE.

*076  Carga Foi Reaberta com Sucesso!

    IF ME->CARGA-ID_CARGA IS NOT INITIAL AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

      ME->VALIDAR_REGISTRO( IMPORTING E_VALIDOU = DATA(E_VALIDOU) ).

      IF ME->CARGA-ID_ORDEM IS NOT INITIAL AND E_VALIDOU EQ ABAP_TRUE AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.
        ZCL_ORDEM_CARREGAMENTO=>SET_ABRIR( I_ID_ORDEM = ME->CARGA-ID_ORDEM ).
      ENDIF.

      ME->GRAVAR_REGISTRO( IMPORTING E_GRAVOU  = DATA(E_GRAVOU) ).

      IF NOT E_GRAVOU EQ ABAP_TRUE.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO
                              ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
            MSGTY  = 'E'
            MSGID  = SY-MSGID
            MSGNO  = SY-MSGNO
            MSGV1  = SY-MSGV1
            MSGV2  = SY-MSGV2
            MSGV3  = SY-MSGV3
            MSGV4  = SY-MSGV4.
      ELSE.
        MESSAGE S076.
      ENDIF.

    ENDIF.

    CHECK ME->CARGA-ID_CARGA IS INITIAL.

    ME->CARGA-NR_SAFRA  = I_NR_SAFRA.
    ME->CARGA-ID_BUKRS  = I_ID_BUKRS.
    ME->CARGA-ID_BRANCH = I_ID_BRANCH.

    "Tipo do Teste GMO Amaggi
    ME->CLASSIFICACAO-IN_GMO         = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
    "Tipo do Teste GMO - Tira Amaggi 0,3%.
    ME->CLASSIFICACAO-IN_GMO_03      = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
    "Tipo do Teste GMO - Tira Monsanto 5%.
    ME->CLASSIFICACAO-IN_TESTE_SRR   = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
    "Tipo do Teste RR2 - Monsanto.
    ME->CLASSIFICACAO-IN_TESTE_SRR_2 = ZIF_CARGA=>ST_GMO_NAO_TESTADO.

    ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
    ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
    ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

    E_CARGA_RECEBIMENTO-NR_SAFRA    = ME->CARGA-NR_SAFRA.
    E_CARGA_RECEBIMENTO-ID_BUKRS    = ME->CARGA-ID_BUKRS.
    E_CARGA_RECEBIMENTO-ID_BRANCH   = ME->CARGA-ID_BRANCH.

    SELECT SINGLE NAME INTO E_CARGA_RECEBIMENTO-NAME
      FROM J_1BBRANCH
     WHERE BUKRS  EQ E_CARGA_RECEBIMENTO-ID_BUKRS
       AND BRANCH EQ E_CARGA_RECEBIMENTO-ID_BRANCH.

    E_CARGA_RECEBIMENTO-IN_GMO          = ME->CLASSIFICACAO-IN_GMO.
    E_CARGA_RECEBIMENTO-IN_GMO_03       = ME->CLASSIFICACAO-IN_GMO_03.
    E_CARGA_RECEBIMENTO-IN_TESTE_SRR    = ME->CLASSIFICACAO-IN_TESTE_SRR.
    E_CARGA_RECEBIMENTO-IN_TESTE_SRR_2  = ME->CLASSIFICACAO-IN_TESTE_SRR_2.
    E_CARGA_RECEBIMENTO-NR_RESULTADO_01 = ME->CLASSIFICACAO-NR_RESULTADO_01.
    E_CARGA_RECEBIMENTO-NR_RESULTADO_02 = ME->CLASSIFICACAO-NR_RESULTADO_02.
    E_CARGA_RECEBIMENTO-NR_RES_RR1_RR2  = ME->CLASSIFICACAO-NR_RES_RR1_RR2.

    CHECK ME->CARGA-ID_CARGA IS INITIAL.
    CHECK ME->CARGA-ID_CARGA IS INITIAL.
    E_CARGA_RECEBIMENTO-TP_FRETE = ME->CARGA-TP_FRETE.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ACEITE_SOLI_MANUTENCAO.

    DATA: ROMANEIO TYPE REF TO ZCL_ROMANEIO.

    CLEAR: E_MENSSAGEM_RETORNO.

    R_CARGA = ME.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_TRUE.

    IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_PROCESSOU_AJUSTE EQ ABAP_TRUE.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_SOL_MANUT_EXECUTADA-MSGID
                            MSGNO  = ZCX_CARGA=>ZCX_SOL_MANUT_EXECUTADA-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_SOL_MANUT_EXECUTADA-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_SOL_MANUT_EXECUTADA-MSGNO.
    ENDIF.

    CASE I_SOMENTE_PROCESSAR.
      WHEN ABAP_FALSE.

        IF I_TP_RESPOSTA NE ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA AND
           I_TP_RESPOSTA NE ZIF_CARGA=>ST_RS_ACEITE_MANUT_RECUSADA AND
           I_TP_RESPOSTA NE 'X'.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_TIPO_RESPOSTA_MANUT_ROM-MSGID
                                MSGNO  = ZCX_CARGA=>ZCX_TIPO_RESPOSTA_MANUT_ROM-MSGNO
                                ATTR1  = CONV #( I_TP_RESPOSTA ) )
              MSGTY  = 'E'
              MSGID  = ZCX_CARGA=>ZCX_TIPO_RESPOSTA_MANUT_ROM-MSGID
              MSGNO  = ZCX_CARGA=>ZCX_TIPO_RESPOSTA_MANUT_ROM-MSGNO
              MSGV1  = CONV #( I_TP_RESPOSTA ).
        ENDIF.

        CASE I_TP_APROVACAO.
          WHEN 'XX'.
          WHEN ZIF_CARGA=>ST_TP_ACEITE_MANUT_FILIAL.
            ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL = I_TP_RESPOSTA.
            ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-DS_ACEITE_FILIAL = I_MOTIVO_RESPOSTA.
            ME->ZIF_CARGA~CK_ALTEROU = ABAP_TRUE.
          WHEN ZIF_CARGA=>ST_TP_ACEITE_MANUT_FISCAL.
            ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FISCAL = I_TP_RESPOSTA.
            ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-DS_ACEITE_FISCAL = I_MOTIVO_RESPOSTA.
            ME->ZIF_CARGA~CK_ALTEROU = ABAP_TRUE.
          WHEN ZIF_CARGA=>ST_TP_ACEITE_MANUT_COMERCIAL.
            ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_COMERCIAL = I_TP_RESPOSTA.
            ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-DS_ACEITE_COMERCIAL = I_MOTIVO_RESPOSTA.
            ME->ZIF_CARGA~CK_ALTEROU = ABAP_TRUE.
          WHEN OTHERS.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_TIPO_ACEITE_MANUT_ROM-MSGID
                                  MSGNO  = ZCX_CARGA=>ZCX_TIPO_ACEITE_MANUT_ROM-MSGNO
                                  ATTR1  = CONV #( I_TP_APROVACAO ) )
                MSGTY  = 'E'
                MSGID  = ZCX_CARGA=>ZCX_TIPO_ACEITE_MANUT_ROM-MSGID
                MSGNO  = ZCX_CARGA=>ZCX_TIPO_ACEITE_MANUT_ROM-MSGNO
                MSGV1  = CONV #( I_TP_APROVACAO ).
        ENDCASE.

        "Não grava neste ponte se foi recusado alguma aprovação
        IF NOT ( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_RECUSADA OR
                 ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_COMERCIAL EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_RECUSADA OR
                 ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FISCAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_RECUSADA ) AND
           I_TP_APROVACAO NE 'XX'.
          ME->ZIF_CARGA~CK_ALTEROU = ABAP_TRUE.
          ME->GRAVAR_REGISTRO( ).
        ENDIF.

        IF ( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA OR
             ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA ) AND
           ( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_COMERCIAL EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA OR
             ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_COMERCIAL EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA ) AND
           ( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FISCAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA OR
             ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FISCAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA ).

          DATA: E_DATA_LIMITE TYPE DATUM.

          "Verificar Romaneios de Entrada se Podem ser alterados
          DATA(CK_PENDENCIA_COMERCIAL) = ABAP_FALSE.
          ME->ZIF_CARGA~GET_ROMANEIO_ENTRADA( EXPORTING I_ID_CARGA = ME->ZIF_CARGA~CARGA-ID_CARGA I_FORCE = ABAP_TRUE IMPORTING E_ROMANEIOS = DATA(E_ROMANEIOS) ).
          LOOP AT E_ROMANEIOS INTO DATA(WA_ROMANEIOS).
            TRY .
                ROMANEIO = ZCL_ROMANEIO=>GET_INSTANCE( ).
                ROMANEIO->SET_REGISTRO( I_ID_REGISTRO = WA_ROMANEIOS-CH_REFERENCIA ).
                ROMANEIO->GET_CONSULTA_STATUS_OPUS(
                  IMPORTING
                    E_STATUS            = DATA(E_STATUS)               " Status do Romaneio
                    E_BLOQUEADO         = DATA(E_BLOQUEADO)
                    E_MENSAGEM_BLOQUEIO = DATA(E_MENSAGEM_BLOQUEIO) ).

                IF E_BLOQUEADO = 'X'.
                  CASE I_TP_RESPOSTA.
                    WHEN 'X'.
                      ME->GERA_ERRO_GERAL( I_TEXTO = E_MENSAGEM_BLOQUEIO ).
                    WHEN OTHERS.
                      CK_PENDENCIA_COMERCIAL = ABAP_TRUE.
                  ENDCASE.
                ENDIF.

              CATCH ZCX_ROMANEIO INTO DATA(EX_ROMANEIO).

                IF EX_ROMANEIO->MSGID EQ ZCX_ROMANEIO=>ZCX_ERRO_ROM_NAO_ENCONTRADO-MSGID AND
                   EX_ROMANEIO->MSGNO EQ ZCX_ROMANEIO=>ZCX_ERRO_ROM_NAO_ENCONTRADO-MSGNO.
                  CONTINUE.
                ENDIF.

                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = EX_ROMANEIO->MSGID
                                      MSGNO = EX_ROMANEIO->MSGNO
                                      ATTR1 = CONV #( EX_ROMANEIO->MSGV1 )
                                      ATTR2 = CONV #( EX_ROMANEIO->MSGV2 )
                                      ATTR3 = CONV #( EX_ROMANEIO->MSGV3 )
                                      ATTR4 = CONV #( EX_ROMANEIO->MSGV4 ) )
                    MSGID  = EX_ROMANEIO->MSGID
                    MSGNO  = EX_ROMANEIO->MSGNO
                    MSGTY  = 'E'
                    MSGV1  = EX_ROMANEIO->MSGV1
                    MSGV2  = EX_ROMANEIO->MSGV2
                    MSGV3  = EX_ROMANEIO->MSGV3
                    MSGV4  = EX_ROMANEIO->MSGV4.
            ENDTRY.
          ENDLOOP.

          IF CK_PENDENCIA_COMERCIAL EQ ABAP_FALSE.
            ME->ZIF_CARGA~SET_PROCESSAR_MANUTENCAO( ).
            "Se Processou os Documentos Aprova WorkFlow e marca como processado
            ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-TP_STATUS = ZIF_CARGA=>ST_STATUS_MANUT_APROVADO.
            ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_PROCESSOU_AJUSTE = ABAP_TRUE.
            ME->ZIF_CARGA~CK_ALTEROU = ABAP_TRUE.
            ME->GRAVAR_REGISTRO( ).
          ENDIF.

        ELSEIF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_RECUSADA OR
               ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_COMERCIAL EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_RECUSADA OR
               ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FISCAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_RECUSADA.
          "Grava neste ponte se foi recusado alguma aprovação
          ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-TP_STATUS = ZIF_CARGA=>ST_STATUS_MANUT_RECUSADA.
          ME->ZIF_CARGA~CK_ALTEROU              = ABAP_TRUE.
          ME->GRAVAR_REGISTRO( ).
        ENDIF.

      WHEN ABAP_TRUE.

        IF ( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA OR
                     ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA ) AND
                   ( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_COMERCIAL EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA OR
                     ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_COMERCIAL EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA ) AND
                   ( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FISCAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA OR
                     ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FISCAL    EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA ).
          ME->ZIF_CARGA~SET_PROCESSAR_MANUTENCAO( ).
          ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-TP_STATUS = ZIF_CARGA=>ST_STATUS_MANUT_APROVADO.
          ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_PROCESSOU_AJUSTE = ABAP_TRUE.
          ME->ZIF_CARGA~CK_ALTEROU = ABAP_TRUE.
          ME->GRAVAR_REGISTRO( ).
        ENDIF.

    ENDCASE.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ADD_BLOCO.

    DATA: LC_BLOCO TYPE ZSDT0001FD.

    CLEAR: E_BLOCO.

    R_CARGA = ME.

    IF I_BLOCO-NR_ORDEM_VENDA IS NOT INITIAL.

      READ TABLE ME->ZIF_CARGA~ORDEM_VENDA WITH KEY NR_ORDEM_VENDA = I_BLOCO-NR_ORDEM_VENDA TRANSPORTING NO FIELDS.
      CHECK SY-SUBRC IS INITIAL.

    ELSEIF I_BLOCO-NR_PEDIDO_COMPRA IS NOT INITIAL.

      READ TABLE ME->ZIF_CARGA~PEDIDO_COMPRA WITH KEY NR_PEDIDO_COMPRA = I_BLOCO-NR_PEDIDO_COMPRA TRANSPORTING NO FIELDS.
      CHECK SY-SUBRC IS INITIAL.

    ENDIF.

    READ TABLE ME->ZIF_CARGA~BLOCOS ASSIGNING FIELD-SYMBOL(<FS_BLOCO>)
    WITH KEY NR_ORDEM_VENDA   = I_BLOCO-NR_ORDEM_VENDA
             NR_PEDIDO_COMPRA = I_BLOCO-NR_PEDIDO_COMPRA
             ZSEQ_INST        = I_BLOCO-ZSEQ_INST
             OBJEK            = I_BLOCO-OBJEK
             OBJECTTABLE      = I_BLOCO-OBJECTTABLE.

    IF SY-SUBRC IS INITIAL.
      MOVE-CORRESPONDING I_BLOCO TO <FS_BLOCO>.
    ELSE.
      MOVE-CORRESPONDING I_BLOCO TO LC_BLOCO.
      APPEND LC_BLOCO TO ME->ZIF_CARGA~BLOCOS.
    ENDIF.

    MOVE-CORRESPONDING I_BLOCO TO E_BLOCO.

    SELECT SINGLE NAME1 INTO @E_BLOCO-DS_PONTO_C
      FROM LFA1
     WHERE LIFNR EQ @E_BLOCO-CD_PONTO_C.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ADD_FORN_FILIAL_SAFRA.

    DATA: WA_ZSDT0001PD TYPE ZSDT0001PD.

    WA_ZSDT0001PD-ID_PRODUTOR = I_ID_PRODUTOR.
    WA_ZSDT0001PD-NR_SAFRA    = I_ID_NR_SAFRA.
    WA_ZSDT0001PD-ID_BUKRS    = I_ID_BUKRS.
    WA_ZSDT0001PD-ID_BRANCH   = I_ID_BRANCH.

    TRY .
        ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
          )->SET_PARCEIRO( I_PARCEIRO = I_ID_PRODUTOR
          )->GET_ID_PARCEIRO( IMPORTING E_PARCEIRO = WA_ZSDT0001PD-ID_PRODUTOR
          )->CK_ATIVO(
          )->CK_ATIVO_EMPRESA( I_EMPRESA = WA_ZSDT0001PD-ID_BUKRS
          )->CK_RESTRICAO_EMBARGO(
          ).

        INSERT INTO ZSDT0001PD VALUES WA_ZSDT0001PD.
        COMMIT WORK.

      CATCH ZCX_PARCEIROS INTO DATA(EX_PARCEIROS).

        RAISE EXCEPTION TYPE ZCX_PARCEIROS
          EXPORTING
            TEXTID = VALUE #( MSGID = EX_PARCEIROS->MSGID
                              MSGNO = EX_PARCEIROS->MSGNO
                              ATTR1 = EX_PARCEIROS->MSGV1
                              ATTR2 = EX_PARCEIROS->MSGV2
                              ATTR3 = EX_PARCEIROS->MSGV3
                              ATTR4 = EX_PARCEIROS->MSGV4 )
            MSGID  = EX_PARCEIROS->MSGID
            MSGNO  = EX_PARCEIROS->MSGNO
            MSGTY  = 'E'
            MSGV1  = EX_PARCEIROS->MSGV1
            MSGV2  = EX_PARCEIROS->MSGV2
            MSGV3  = EX_PARCEIROS->MSGV3
            MSGV4  = EX_PARCEIROS->MSGV4.

    ENDTRY.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ADD_TAKE_UP.

    DATA: LC_TAKEUP TYPE ZSDT0001TK.

    CLEAR: E_TAKEUP.

    R_CARGA = ME.

    READ TABLE ME->DOCUMENTO_FISCAL WITH KEY ID_NOTA = I_TAKEUP-ID_NOTA INTO DATA(WA_NOTA).

    CHECK SY-SUBRC IS INITIAL.

    READ TABLE ME->ZIF_CARGA~TAKE_UP ASSIGNING FIELD-SYMBOL(<FS_TAKEUP>)
    WITH KEY ID_NOTA  = I_TAKEUP-ID_NOTA ID_TAKEUP = I_TAKEUP-ID_TAKEUP NU_BLOCO  = I_TAKEUP-NU_BLOCO.

    IF SY-SUBRC IS INITIAL.
      MOVE-CORRESPONDING I_TAKEUP TO <FS_TAKEUP>.
    ELSE.
      MOVE-CORRESPONDING I_TAKEUP TO LC_TAKEUP.
      APPEND LC_TAKEUP TO ME->ZIF_CARGA~TAKE_UP.
    ENDIF.

    MOVE-CORRESPONDING I_TAKEUP TO E_TAKEUP.

    E_TAKEUP-NR_NOTA = WA_NOTA-NR_NOTA.
    E_TAKEUP-DT_EMISSAO = WA_NOTA-DT_EMISSAO.
    E_TAKEUP-NM_SERIE = WA_NOTA-NM_SERIE.
    E_TAKEUP-ID_MOD_FISCAL = WA_NOTA-ID_MOD_FISCAL.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_AGENTE_FRETE.

    R_CARGA = ME.

    CHECK ME->CARGA-TP_STATUS EQ ZIF_CARGA=>ST_STATUS_ABERTO.

    ME->CARGA-ID_AGENT_FRETE  = I_ID_AGENT_FRETE.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_AJUSTAR_RAT_DESC_GERAL.

    R_CARGA = ME.

    DESCRIBE TABLE ME->DOCUMENTO_FISCAL LINES DATA(QTD_NOTAS).

    DATA(LC_PESO_LIQUIDO) = ME->CARGA-NM_PESO_LIQUIDO.

    IF QTD_NOTAS GT 1.

      LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_FISCAL).
        WA_FISCAL-NM_PESO_SUBTOTAL = WA_FISCAL-NR_QUANTIDADE.

        IF LC_PESO_LIQUIDO LE WA_FISCAL-NM_PESO_SUBTOTAL.
          WA_FISCAL-NM_PESO_LIQUIDO = LC_PESO_LIQUIDO.
          LC_PESO_LIQUIDO = 0.
        ELSE.
          WA_FISCAL-NM_PESO_LIQUIDO = WA_FISCAL-NM_PESO_SUBTOTAL.
          IF ( LC_PESO_LIQUIDO - WA_FISCAL-NM_PESO_SUBTOTAL ) LE 0.
            LC_PESO_LIQUIDO = 0.
          ELSE.
            LC_PESO_LIQUIDO = LC_PESO_LIQUIDO - WA_FISCAL-NM_PESO_SUBTOTAL.
          ENDIF.
        ENDIF.

        TRY .
            ME->SET_PESOS_NOTAS(
              EXPORTING
                I_ID_CARGA      = WA_FISCAL-ID_CARGA
                I_ID_NOTA       = WA_FISCAL-ID_NOTA
                I_PESO_SUBTOTAL = WA_FISCAL-NM_PESO_SUBTOTAL
                I_PESO_LIQUIDO  = WA_FISCAL-NM_PESO_LIQUIDO ).
          CATCH ZCX_CARGA.    "
        ENDTRY.
      ENDLOOP.
    ELSE.

      LOOP AT ME->DOCUMENTO_FISCAL INTO WA_FISCAL.

        WA_FISCAL-NM_PESO_SUBTOTAL = ME->CARGA-NM_PESO_SUBTOTAL.
        WA_FISCAL-NM_PESO_LIQUIDO  = ME->CARGA-NM_PESO_LIQUIDO.

        TRY .
            ME->SET_PESOS_NOTAS(
              EXPORTING
                I_ID_CARGA      = WA_FISCAL-ID_CARGA
                I_ID_NOTA       = WA_FISCAL-ID_NOTA
                I_PESO_SUBTOTAL = WA_FISCAL-NM_PESO_SUBTOTAL
                I_PESO_LIQUIDO  = WA_FISCAL-NM_PESO_LIQUIDO  ).
          CATCH ZCX_CARGA.    "
        ENDTRY.

      ENDLOOP.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_AJUSTAR_RAT_ORDEM_VENDA.

    R_CARGA = ME.

    READ TABLE ME->ZIF_CARGA~ORDEM_VENDA INDEX 1 ASSIGNING FIELD-SYMBOL(<FS_ORDEM>).
    IF SY-SUBRC IS INITIAL.
      <FS_ORDEM>-ID_CARGA         = ME->CARGA-ID_CARGA.
      <FS_ORDEM>-NM_PESO_BRUTO    = ME->CARGA-NM_PESO_BRUTO.
      <FS_ORDEM>-NM_PESO_TARA     = ME->CARGA-NM_PESO_TARA.
      <FS_ORDEM>-NM_PESO_SUBTOTAL = ME->CARGA-NM_PESO_SUBTOTAL.
    ENDIF.

    READ TABLE ME->ZIF_CARGA~PEDIDO_COMPRA INDEX 1 ASSIGNING FIELD-SYMBOL(<FS_PEDIDO>).
    IF SY-SUBRC IS INITIAL.
      <FS_PEDIDO>-ID_CARGA         = ME->CARGA-ID_CARGA.
      <FS_PEDIDO>-NM_PESO_BRUTO    = ME->CARGA-NM_PESO_BRUTO.
      <FS_PEDIDO>-NM_PESO_TARA     = ME->CARGA-NM_PESO_TARA.
      <FS_PEDIDO>-NM_PESO_SUBTOTAL = ME->CARGA-NM_PESO_SUBTOTAL.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_CANCELAR.

    DATA: OB_ROMANEIO TYPE REF TO ZCL_ROMANEIO,
          WA_ENTRADA  TYPE AWKEY,
          IT_ENTRADAS TYPE TABLE OF AWKEY.

    R_CARGA = ME.

    E_CANCELOU = ABAP_FALSE.

    ME->ZIF_CARGA~CK_EXECUTAR_REVERSAO_ENTRADA = ABAP_TRUE. "BUG 34154

    CHECK NOT ( ME->CARGA-CK_ENVIADO_OPUS EQ ABAP_TRUE AND ME->CARGA-CK_RECEBIDO_OPUS EQ ABAP_FALSE ).

    "Verificar Entrada
    "Verificar Solicitação
    "Verificar Cancelamento

    IF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.
      LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_NOTA) WHERE OBJ_KEY_ENTRADA IS NOT INITIAL.

        SELECT SINGLE * INTO @DATA(ENTRADA)
          FROM ZMMT_EE_ZGR
         WHERE ID_CARGA   EQ @WA_NOTA-ID_CARGA
           AND ID_NOTA    EQ @WA_NOTA-ID_NOTA
           AND OBJ_KEY    EQ @WA_NOTA-OBJ_KEY_ENTRADA.

        IF SY-SUBRC IS NOT INITIAL.
          CONTINUE.
        ENDIF.

        CASE ENTRADA-ST_ESTORNO.
          WHEN ZIF_CARGA=>ST_STATUS_ESTORNO_SEM.

            SELECT SINGLE * INTO @DATA(DOCUMENTOS)
              FROM ZMMT_EE_ZGR_DOCS
             WHERE OBJ_KEY EQ @ENTRADA-OBJ_KEY.

            IF DOCUMENTOS-PO_NUMBER IS NOT INITIAL OR
               DOCUMENTOS-AV_VBELN  IS NOT INITIAL OR
               DOCUMENTOS-MM_MBLNR  IS NOT INITIAL OR
               DOCUMENTOS-MM_MJAHR  IS NOT INITIAL OR
               DOCUMENTOS-FT_BELNR  IS NOT INITIAL OR
               DOCUMENTOS-FT_GJAHR  IS NOT INITIAL OR
               DOCUMENTOS-DOCNUM    IS NOT INITIAL.
              "Solicitar Estorno
              RAISE EXCEPTION TYPE ZCX_CARGA
                EXPORTING
                  TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ESTORNAR_ENTRADA-MSGID MSGNO = ZCX_CARGA=>ZCX_ESTORNAR_ENTRADA-MSGNO )
                  MSGTY  = 'E'
                  MSGID  = ZCX_CARGA=>ZCX_ESTORNAR_ENTRADA-MSGID
                  MSGNO  = ZCX_CARGA=>ZCX_ESTORNAR_ENTRADA-MSGNO.
            ENDIF.

            "ME->GET_CHECK_JOB_EXECUCAO( ).

            WA_ENTRADA = ENTRADA-OBJ_KEY.
            APPEND WA_ENTRADA TO IT_ENTRADAS.

            ME->BLOQUEAR_ENTRADA( I_OBJ_KEY = ENTRADA-OBJ_KEY ).

          WHEN ZIF_CARGA=>ST_STATUS_ESTORNO_SOLICITADO.

            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_PENDENTE-MSGID MSGNO = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_PENDENTE-MSGNO )
                MSGTY  = 'E'
                MSGID  = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_PENDENTE-MSGID
                MSGNO  = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_PENDENTE-MSGNO.

          WHEN ZIF_CARGA=>ST_STATUS_ESTORNO_EXECUTADO.
            "Deixa Cancelar
          WHEN ZIF_CARGA=>ST_STATUS_ESTORNO_ERRO.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_ERRO-MSGID MSGNO = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_ERRO-MSGNO )
                MSGTY  = 'E'
                MSGID  = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_ERRO-MSGID
                MSGNO  = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_ERRO-MSGNO.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    "Verificar Saida

    "Verificar Solicitação
    "Verificar Cancelamento

    E_CANCELOU = ABAP_FALSE.

    CASE ME->CARGA-TP_STATUS.
      WHEN ZIF_CARGA=>ST_STATUS_CANCELADA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO.
      WHEN ZIF_CARGA=>ST_STATUS_CONFERIDO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO.
    ENDCASE.

    "Exclui Frete Entrada
    ME->ZIF_CARGA~SET_ESTORNA_FRETE_ENTRADA( ).

    "Veririca se Pode Excluir Romaneio de Saída
    ME->ZIF_CARGA~GET_CK_EXCLUIR_ROMANEIO_SAIDA( I_CK_OPUS = ABAP_TRUE ).

    ME->ZIF_CARGA~GET_ROMANEIO_SAIDA( EXPORTING I_ID_CARGA  = ME->CARGA-ID_CARGA IMPORTING E_ROMANEIOS = DATA(IT_ROMANEIO) ).

    LOOP AT IT_ROMANEIO INTO DATA(WA_ROMANEIO).
      CREATE OBJECT OB_ROMANEIO.
      OB_ROMANEIO->ZIF_CADASTRO~SET_REGISTRO( I_ID_REGISTRO = WA_ROMANEIO-CH_REFERENCIA ).
      OB_ROMANEIO->ZIF_CADASTRO~EXCLUIR_REGISTRO( ).
      CLEAR OB_ROMANEIO.
    ENDLOOP.

    DATA(LC_STATUS)     = ME->CARGA-TP_STATUS.
    ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_CANCELADA.
    ME->VALIDAR_REGISTRO( IMPORTING E_VALIDOU = DATA(E_VALIDOU)  ).

    IF NOT E_VALIDOU EQ ABAP_TRUE.
      ME->CARGA-TP_STATUS = LC_STATUS.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO
                            ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGTY  = 'E'
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    ME->CK_ALTEROU              = ABAP_TRUE.
    ME->CARGA-DT_CANCELAMENTO   = SY-DATLO.
    ME->CARGA-HR_CANCELAMENTO   = SY-TIMLO.
    ME->CARGA-US_CANCELAMENTO   = SY-UNAME.

    IF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

      SELECT * INTO TABLE @DATA(IT_ROMANEIOS)
        FROM ZSDT0001
       WHERE ID_CARGA EQ @ME->CARGA-ID_CARGA
         AND ID_CARGA NE @SPACE.

      CREATE OBJECT OB_ROMANEIO.

      TRY .
          LOOP AT IT_ROMANEIOS INTO WA_ROMANEIO.
            OB_ROMANEIO->ZIF_CADASTRO~SET_REGISTRO( I_ID_REGISTRO = WA_ROMANEIO-CH_REFERENCIA ).
            OB_ROMANEIO->ZIF_CADASTRO~EXCLUIR_REGISTRO( ).
          ENDLOOP.
        CATCH ZCX_CADASTRO INTO DATA(EX_CADASTRO).
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = EX_CADASTRO->IF_T100_MESSAGE~T100KEY
              MSGTY  = 'E'
              MSGNO  = EX_CADASTRO->IF_T100_MESSAGE~T100KEY-MSGNO
              MSGV1  = CONV #( EX_CADASTRO->IF_T100_MESSAGE~T100KEY-ATTR1 )
              MSGV2  = CONV #( EX_CADASTRO->IF_T100_MESSAGE~T100KEY-ATTR2 )
              MSGV3  = CONV #( EX_CADASTRO->IF_T100_MESSAGE~T100KEY-ATTR3 )
              MSGV4  = CONV #( EX_CADASTRO->IF_T100_MESSAGE~T100KEY-ATTR4 )
              MSGID  = EX_CADASTRO->IF_T100_MESSAGE~T100KEY-MSGID.
      ENDTRY.

      "Excluir Entradas
      LOOP AT IT_ENTRADAS INTO WA_ENTRADA.
        DELETE FROM ZMMT_EE_ZGR
          WHERE ID_CARGA EQ ME->CARGA-ID_CARGA
            AND OBJ_KEY  EQ WA_ENTRADA.
        ME->DESBLOQUEAR_ENTRADA( I_OBJ_KEY = WA_ENTRADA ).
      ENDLOOP.

    ENDIF.

    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-TP_STATUS = ZIF_CARGA=>ST_STATUS_MANUT_CANCELADA.
    ME->GRAVAR_REGISTRO( IMPORTING E_GRAVOU  = E_CANCELOU ).

    IF ME->CARGA-ID_ORDEM IS NOT INITIAL AND E_CANCELOU EQ ABAP_TRUE AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.
      CHECK ZCL_ORDEM_CARREGAMENTO=>SET_ABRIR( I_ID_ORDEM = ME->CARGA-ID_ORDEM ) EQ ABAP_TRUE.
    ENDIF.

    MESSAGE S119.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_CANCELAR_SOLIC_MANUT.

    R_INSTANCE = ME.
    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_TRUE.
    CHECK ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-TP_STATUS IS NOT INITIAL.
    CHECK ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-TP_STATUS NE ZIF_CARGA=>ST_STATUS_MANUT_ABERTO.

    "ZCX_WORKFLOW_APROVADO  WorkFlow Manutenção de Romaneio &MSGV1& Está Aprovado!
    "ZCX_WORKFLOW_RECUSADO  WorkFlow Manutenção de Romaneio &MSGV1& Está Recusado!

    CASE ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-TP_STATUS.
      WHEN ZIF_CARGA=>ST_STATUS_MANUT_APROVADO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_WORKFLOW_APROVADO-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_WORKFLOW_APROVADO-MSGNO
                              ATTR1 = CONV #( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_RECORDID ) )
            MSGID  = ZCX_CARGA=>ZCX_WORKFLOW_APROVADO-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_WORKFLOW_APROVADO-MSGNO
            MSGTY  = 'E'
            MSGV1  = CONV #( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_RECORDID ).
      WHEN ZIF_CARGA=>ST_STATUS_MANUT_RECUSADA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_WORKFLOW_RECUSADO-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_WORKFLOW_RECUSADO-MSGNO
                              ATTR1 = CONV #( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_RECORDID ) )
            MSGID  = ZCX_CARGA=>ZCX_WORKFLOW_RECUSADO-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_WORKFLOW_RECUSADO-MSGNO
            MSGTY  = 'E'
            MSGV1  = CONV #( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_RECORDID ).
    ENDCASE.

    CHECK ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_RECORDID IS NOT INITIAL.

    CONCATENATE 'Cancelado pelo Usuário' SY-UNAME 'via SAP' INTO DATA(LC_MOTIVO) SEPARATED BY SPACE.

    ZCL_SOFT_EXPERT_WORKFLOW=>ZIF_SOFT_EXPERT_WORKFLOW~GET_INSTANCE(
      )->CANCEL_WORKFLOW(
      EXPORTING
        I_WORKFLOWID             = CONV #( ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_RECORDID )
        I_EXPLANATION            = LC_MOTIVO
      IMPORTING
        E_CANCEL_WORFLOW_RET     = DATA(E_CANCEL_WORFLOW_RET) ).

    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-TP_STATUS    = ZIF_CARGA=>ST_STATUS_MANUT_ABERTO.

    CLEAR:
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_STATUS,
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_CODE,
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_DETAIL,
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_RECORDKEY,
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_RECORDID.
    ME->ZIF_CARGA~CK_ALTEROU = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_CARGA.

    DATA: LC_RESULTADO            LIKE LINE OF ME->RESULTADO,
          LC_RESULTADO_SUB_ARDIDO LIKE LINE OF ME->ZIF_CARGA~RESULTADO_AVARIADO.

    R_CARGA = ME.

    CASE ME->CARGA-TP_STATUS.
      WHEN ZIF_CARGA=>ST_STATUS_FECHADO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGNO.
      WHEN ZIF_CARGA=>ST_STATUS_CONFERIDO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO.
      WHEN ZIF_CARGA=>ST_STATUS_CANCELADA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO.
    ENDCASE.

    IF ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_ABERTO.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_NAO_ABERTA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_NAO_ABERTA-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_CARGA_NAO_ABERTA-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_CARGA_NAO_ABERTA-MSGNO.
    ENDIF.

    DATA(WA_CARGA) = I_CARGA.
    DATA(CP_ME_CARGA) = ME->CARGA.
    DATA(CP_ME_CLASSIFICACAO) = ME->CLASSIFICACAO.

    WA_CARGA-ID_CARGA         = ME->CARGA-ID_CARGA.
    WA_CARGA-ID_CLASSIFICACAO = ME->CLASSIFICACAO-ID_CLASSIFICACAO.
    MOVE-CORRESPONDING WA_CARGA TO ME->CARGA.
    MOVE-CORRESPONDING WA_CARGA TO ME->CLASSIFICACAO.

    IF ME->CARGA NE CP_ME_CARGA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.

    IF ME->CLASSIFICACAO NE CP_ME_CLASSIFICACAO.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.

    E_CARGA_RECEBIMENTO = I_CARGA.

    "Informações alteradas na classificação

*    DATA(LC_PESO) = E_CARGA_RECEBIMENTO-NM_PESO_SUBTOTAL.
*
*    ME->GET_CALCULAR_SUBTOTAL(
*      EXPORTING
*        I_PESO_BRUTO    = E_CARGA_RECEBIMENTO-NM_PESO_BRUTO
*        I_PESO_TARA     = E_CARGA_RECEBIMENTO-NM_PESO_TARA
*      IMPORTING
*        E_PESO_SUBTOTAL = E_CARGA_RECEBIMENTO-NM_PESO_SUBTOTAL ).
*
*    E_CARGA_RECEBIMENTO-NM_PESO_SUBTOTAL = LC_PESO.

    "CLEAR: ME->RESULTADO.

    "Umidade
    LC_RESULTADO-TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
    LC_RESULTADO-NR_PERCENTUAL_COM = E_CARGA_RECEBIMENTO-NR_PERC_UMI.
    LC_RESULTADO-NR_PERCENTUAL_FIS = E_CARGA_RECEBIMENTO-NR_PERC_UMI.
    LC_RESULTADO-NR_QUANTIDADE_COM = E_CARGA_RECEBIMENTO-NR_QTDE_UMI.
    LC_RESULTADO-NR_QUANTIDADE_FIS = E_CARGA_RECEBIMENTO-NR_QTDE_UMI.
    LC_RESULTADO-ID_CARGA          = ME->CARGA-ID_CARGA.
    LC_RESULTADO-ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO.

    READ TABLE ME->RESULTADO WITH KEY ID_CARGA          = ME->CARGA-ID_CARGA
                                      ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
                                      TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE
                             ASSIGNING FIELD-SYMBOL(<FS_RESULTADO>).
    IF SY-SUBRC IS INITIAL.
      LOOP AT ME->RESULTADO ASSIGNING <FS_RESULTADO>
           WHERE ID_CARGA          = ME->CARGA-ID_CARGA
             AND ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
             AND TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
        MOVE-CORRESPONDING LC_RESULTADO TO <FS_RESULTADO>.
      ENDLOOP.
    ELSE.
      APPEND LC_RESULTADO TO ME->RESULTADO.
    ENDIF.

    "Impureza
    LC_RESULTADO-TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
    LC_RESULTADO-NR_PERCENTUAL_COM = E_CARGA_RECEBIMENTO-NR_PERC_IMP.
    LC_RESULTADO-NR_PERCENTUAL_FIS = E_CARGA_RECEBIMENTO-NR_PERC_IMP.
    LC_RESULTADO-NR_QUANTIDADE_COM = E_CARGA_RECEBIMENTO-NR_QTDE_IMP.
    LC_RESULTADO-NR_QUANTIDADE_FIS = E_CARGA_RECEBIMENTO-NR_QTDE_IMP.
    LC_RESULTADO-ID_CARGA          = ME->CARGA-ID_CARGA.
    LC_RESULTADO-ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO.
    READ TABLE ME->RESULTADO WITH KEY ID_CARGA          = ME->CARGA-ID_CARGA
                                      ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
                                      TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA
                             ASSIGNING <FS_RESULTADO>.
    IF SY-SUBRC IS INITIAL.
      LOOP AT ME->RESULTADO ASSIGNING <FS_RESULTADO>
           WHERE ID_CARGA          = ME->CARGA-ID_CARGA
             AND ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
             AND TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
        MOVE-CORRESPONDING LC_RESULTADO TO <FS_RESULTADO>.
      ENDLOOP.
    ELSE.
      APPEND LC_RESULTADO TO ME->RESULTADO.
    ENDIF.


    "Avariado """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "Avariado """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    LC_RESULTADO-TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
    LC_RESULTADO-NR_PERCENTUAL_COM = E_CARGA_RECEBIMENTO-NR_PERC_AVA.
    LC_RESULTADO-NR_PERCENTUAL_FIS = E_CARGA_RECEBIMENTO-NR_PERC_AVA.
    LC_RESULTADO-NR_QUANTIDADE_COM = E_CARGA_RECEBIMENTO-NR_QTDE_AVA.
    LC_RESULTADO-NR_QUANTIDADE_FIS = E_CARGA_RECEBIMENTO-NR_QTDE_AVA.
    LC_RESULTADO-ID_CARGA          = ME->CARGA-ID_CARGA.
    LC_RESULTADO-ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO.
    READ TABLE ME->RESULTADO WITH KEY ID_CARGA          = ME->CARGA-ID_CARGA
                                      ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
                                      TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO
                             ASSIGNING <FS_RESULTADO>.
    IF SY-SUBRC IS INITIAL.
      LOOP AT ME->RESULTADO ASSIGNING <FS_RESULTADO>
           WHERE ID_CARGA          = ME->CARGA-ID_CARGA
             AND ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
             AND TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
        MOVE-CORRESPONDING LC_RESULTADO TO <FS_RESULTADO>.
      ENDLOOP.
    ELSE.
      APPEND LC_RESULTADO TO ME->RESULTADO.
    ENDIF.

    "Avariado 1	Ardido/Queimado
    CLEAR: LC_RESULTADO_SUB_ARDIDO.
    LC_RESULTADO_SUB_ARDIDO-TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ.
    LC_RESULTADO_SUB_ARDIDO-NR_PERCENTUAL_COM     = E_CARGA_RECEBIMENTO-NR_PERC_AVA_ARQ.
    LC_RESULTADO_SUB_ARDIDO-ID_CARGA              = ME->CARGA-ID_CARGA.
    LC_RESULTADO_SUB_ARDIDO-ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO.

    READ TABLE ME->ZIF_CARGA~RESULTADO_AVARIADO
    WITH KEY ID_CARGA              = ME->CARGA-ID_CARGA
             ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO
             TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ
    ASSIGNING FIELD-SYMBOL(<FS_RES_ARDIDO>).

    IF SY-SUBRC IS INITIAL.
      MOVE-CORRESPONDING LC_RESULTADO_SUB_ARDIDO TO <FS_RES_ARDIDO>.
    ELSE.
      APPEND LC_RESULTADO_SUB_ARDIDO TO ME->ZIF_CARGA~RESULTADO_AVARIADO.
    ENDIF.

    "Avariado 2	Queimados
    CLEAR: LC_RESULTADO_SUB_ARDIDO.
    LC_RESULTADO_SUB_ARDIDO-TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_QUE.
    LC_RESULTADO_SUB_ARDIDO-NR_PERCENTUAL_COM     = E_CARGA_RECEBIMENTO-NR_PERC_AVA_QUE.
    LC_RESULTADO_SUB_ARDIDO-ID_CARGA              = ME->CARGA-ID_CARGA.
    LC_RESULTADO_SUB_ARDIDO-ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO.

    READ TABLE ME->ZIF_CARGA~RESULTADO_AVARIADO
    WITH KEY ID_CARGA              = ME->CARGA-ID_CARGA
             ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO
             TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_QUE
    ASSIGNING <FS_RES_ARDIDO>.

    IF SY-SUBRC IS INITIAL.
      MOVE-CORRESPONDING LC_RESULTADO_SUB_ARDIDO TO <FS_RES_ARDIDO>.
    ELSE.
      APPEND LC_RESULTADO_SUB_ARDIDO TO ME->ZIF_CARGA~RESULTADO_AVARIADO.
    ENDIF.

    "Avariado 3	Mofados
    CLEAR: LC_RESULTADO_SUB_ARDIDO.
    LC_RESULTADO_SUB_ARDIDO-TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_MOF.
    LC_RESULTADO_SUB_ARDIDO-NR_PERCENTUAL_COM     = E_CARGA_RECEBIMENTO-NR_PERC_AVA_MOF.
    LC_RESULTADO_SUB_ARDIDO-ID_CARGA              = ME->CARGA-ID_CARGA.
    LC_RESULTADO_SUB_ARDIDO-ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO.

    READ TABLE ME->ZIF_CARGA~RESULTADO_AVARIADO
    WITH KEY ID_CARGA              = ME->CARGA-ID_CARGA
             ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO
             TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_MOF
    ASSIGNING <FS_RES_ARDIDO>.

    IF SY-SUBRC IS INITIAL.
      MOVE-CORRESPONDING LC_RESULTADO_SUB_ARDIDO TO <FS_RES_ARDIDO>.
    ELSE.
      APPEND LC_RESULTADO_SUB_ARDIDO TO ME->ZIF_CARGA~RESULTADO_AVARIADO.
    ENDIF.

    "Avariado 4	Picados
    CLEAR: LC_RESULTADO_SUB_ARDIDO.
    LC_RESULTADO_SUB_ARDIDO-TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_PIC.
    LC_RESULTADO_SUB_ARDIDO-NR_PERCENTUAL_COM     = E_CARGA_RECEBIMENTO-NR_PERC_AVA_PIC.
    LC_RESULTADO_SUB_ARDIDO-ID_CARGA              = ME->CARGA-ID_CARGA.
    LC_RESULTADO_SUB_ARDIDO-ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO.

    READ TABLE ME->ZIF_CARGA~RESULTADO_AVARIADO
    WITH KEY ID_CARGA              = ME->CARGA-ID_CARGA
             ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO
             TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_PIC
    ASSIGNING <FS_RES_ARDIDO>.

    IF SY-SUBRC IS INITIAL.
      MOVE-CORRESPONDING LC_RESULTADO_SUB_ARDIDO TO <FS_RES_ARDIDO>.
    ELSE.
      APPEND LC_RESULTADO_SUB_ARDIDO TO ME->ZIF_CARGA~RESULTADO_AVARIADO.
    ENDIF.

    "Avariado 5	Fermentados
    CLEAR: LC_RESULTADO_SUB_ARDIDO.
    LC_RESULTADO_SUB_ARDIDO-TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_FER.
    LC_RESULTADO_SUB_ARDIDO-NR_PERCENTUAL_COM     = E_CARGA_RECEBIMENTO-NR_PERC_AVA_FER.
    LC_RESULTADO_SUB_ARDIDO-ID_CARGA              = ME->CARGA-ID_CARGA.
    LC_RESULTADO_SUB_ARDIDO-ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO.

    READ TABLE ME->ZIF_CARGA~RESULTADO_AVARIADO
    WITH KEY ID_CARGA              = ME->CARGA-ID_CARGA
             ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO
             TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_FER
    ASSIGNING <FS_RES_ARDIDO>.

    IF SY-SUBRC IS INITIAL.
      MOVE-CORRESPONDING LC_RESULTADO_SUB_ARDIDO TO <FS_RES_ARDIDO>.
    ELSE.
      APPEND LC_RESULTADO_SUB_ARDIDO TO ME->ZIF_CARGA~RESULTADO_AVARIADO.
    ENDIF.

    "Avariado 6	Germinados/Imaturos/Chochos
    CLEAR: LC_RESULTADO_SUB_ARDIDO.
    LC_RESULTADO_SUB_ARDIDO-TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_GER.
    LC_RESULTADO_SUB_ARDIDO-NR_PERCENTUAL_COM     = E_CARGA_RECEBIMENTO-NR_PERC_AVA_GER.
    LC_RESULTADO_SUB_ARDIDO-ID_CARGA              = ME->CARGA-ID_CARGA.
    LC_RESULTADO_SUB_ARDIDO-ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO.

    READ TABLE ME->ZIF_CARGA~RESULTADO_AVARIADO
    WITH KEY ID_CARGA              = ME->CARGA-ID_CARGA
             ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO
             TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_GER
    ASSIGNING <FS_RES_ARDIDO>.

    IF SY-SUBRC IS INITIAL.
      MOVE-CORRESPONDING LC_RESULTADO_SUB_ARDIDO TO <FS_RES_ARDIDO>.
    ELSE.
      APPEND LC_RESULTADO_SUB_ARDIDO TO ME->ZIF_CARGA~RESULTADO_AVARIADO.
    ENDIF.

    "Avariado 7	Ardidos
    CLEAR: LC_RESULTADO_SUB_ARDIDO.
    LC_RESULTADO_SUB_ARDIDO-TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_ARD.
    LC_RESULTADO_SUB_ARDIDO-NR_PERCENTUAL_COM     = E_CARGA_RECEBIMENTO-NR_PERC_AVA_ARD.
    LC_RESULTADO_SUB_ARDIDO-ID_CARGA              = ME->CARGA-ID_CARGA.
    LC_RESULTADO_SUB_ARDIDO-ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO.

    READ TABLE ME->ZIF_CARGA~RESULTADO_AVARIADO
    WITH KEY ID_CARGA              = ME->CARGA-ID_CARGA
             ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO
             TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_ARD
    ASSIGNING <FS_RES_ARDIDO>.

    IF SY-SUBRC IS INITIAL.
      MOVE-CORRESPONDING LC_RESULTADO_SUB_ARDIDO TO <FS_RES_ARDIDO>.
    ELSE.
      APPEND LC_RESULTADO_SUB_ARDIDO TO ME->ZIF_CARGA~RESULTADO_AVARIADO.
    ENDIF.

    "Avariado 8	Gessados
    CLEAR: LC_RESULTADO_SUB_ARDIDO.
    LC_RESULTADO_SUB_ARDIDO-TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_GES.
    LC_RESULTADO_SUB_ARDIDO-NR_PERCENTUAL_COM     = E_CARGA_RECEBIMENTO-NR_PERC_AVA_GES.
    LC_RESULTADO_SUB_ARDIDO-ID_CARGA              = ME->CARGA-ID_CARGA.
    LC_RESULTADO_SUB_ARDIDO-ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO.

    READ TABLE ME->ZIF_CARGA~RESULTADO_AVARIADO
    WITH KEY ID_CARGA              = ME->CARGA-ID_CARGA
             ID_CLASSIFICACAO      = ME->CARGA-ID_CLASSIFICACAO
             TP_SUB_CARAC_AVARIADO = ZIF_CARGA=>ST_TP_CARACT_SUB_GES
    ASSIGNING <FS_RES_ARDIDO>.

    IF SY-SUBRC IS INITIAL.
      MOVE-CORRESPONDING LC_RESULTADO_SUB_ARDIDO TO <FS_RES_ARDIDO>.
    ELSE.
      APPEND LC_RESULTADO_SUB_ARDIDO TO ME->ZIF_CARGA~RESULTADO_AVARIADO.
    ENDIF.
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    "Ardido
    LC_RESULTADO-TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
    LC_RESULTADO-NR_PERCENTUAL_COM = E_CARGA_RECEBIMENTO-NR_PERC_ARD.
    LC_RESULTADO-NR_PERCENTUAL_FIS = E_CARGA_RECEBIMENTO-NR_PERC_ARD.
    LC_RESULTADO-NR_QUANTIDADE_COM = E_CARGA_RECEBIMENTO-NR_QTDE_ARD.
    LC_RESULTADO-NR_QUANTIDADE_FIS = E_CARGA_RECEBIMENTO-NR_QTDE_ARD.
    LC_RESULTADO-ID_CARGA          = ME->CARGA-ID_CARGA.
    LC_RESULTADO-ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO.
    READ TABLE ME->RESULTADO WITH KEY ID_CARGA          = ME->CARGA-ID_CARGA
                                      ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
                                      TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO
                             ASSIGNING <FS_RESULTADO>.
    IF SY-SUBRC IS INITIAL.
      LOOP AT ME->RESULTADO ASSIGNING <FS_RESULTADO>
           WHERE ID_CARGA          = ME->CARGA-ID_CARGA
             AND ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
             AND TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
        MOVE-CORRESPONDING LC_RESULTADO TO <FS_RESULTADO>.
      ENDLOOP.
    ELSE.
      APPEND LC_RESULTADO TO ME->RESULTADO.
    ENDIF.


    "Quebrado
    LC_RESULTADO-TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
    LC_RESULTADO-NR_PERCENTUAL_COM = E_CARGA_RECEBIMENTO-NR_PERC_QUE.
    LC_RESULTADO-NR_PERCENTUAL_FIS = E_CARGA_RECEBIMENTO-NR_PERC_QUE.
    LC_RESULTADO-NR_QUANTIDADE_COM = E_CARGA_RECEBIMENTO-NR_QTDE_QUE.
    LC_RESULTADO-NR_QUANTIDADE_FIS = E_CARGA_RECEBIMENTO-NR_QTDE_QUE.
    LC_RESULTADO-ID_CARGA          = ME->CARGA-ID_CARGA.
    LC_RESULTADO-ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO.
    READ TABLE ME->RESULTADO WITH KEY ID_CARGA          = ME->CARGA-ID_CARGA
                                      ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
                                      TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO
                             ASSIGNING <FS_RESULTADO>.
    IF SY-SUBRC IS INITIAL.
      LOOP AT ME->RESULTADO ASSIGNING <FS_RESULTADO>
           WHERE ID_CARGA          = ME->CARGA-ID_CARGA
             AND ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
             AND TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
        MOVE-CORRESPONDING LC_RESULTADO TO <FS_RESULTADO>.
      ENDLOOP.
    ELSE.
      APPEND LC_RESULTADO TO ME->RESULTADO.
    ENDIF.

    "Esverdeado
    LC_RESULTADO-TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
    LC_RESULTADO-NR_PERCENTUAL_COM = E_CARGA_RECEBIMENTO-NR_PERC_ESV.
    LC_RESULTADO-NR_PERCENTUAL_FIS = E_CARGA_RECEBIMENTO-NR_PERC_ESV.
    LC_RESULTADO-NR_QUANTIDADE_COM = E_CARGA_RECEBIMENTO-NR_QTDE_ESV.
    LC_RESULTADO-NR_QUANTIDADE_FIS = E_CARGA_RECEBIMENTO-NR_QTDE_ESV.
    LC_RESULTADO-ID_CARGA          = ME->CARGA-ID_CARGA.
    LC_RESULTADO-ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO.
    READ TABLE ME->RESULTADO WITH KEY ID_CARGA          = ME->CARGA-ID_CARGA
                                      ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
                                      TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO
                             ASSIGNING <FS_RESULTADO>.
    IF SY-SUBRC IS INITIAL.
      LOOP AT ME->RESULTADO ASSIGNING <FS_RESULTADO>
           WHERE ID_CARGA          = ME->CARGA-ID_CARGA
             AND ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
             AND TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
        MOVE-CORRESPONDING LC_RESULTADO TO <FS_RESULTADO>.
      ENDLOOP.
    ELSE.
      APPEND LC_RESULTADO TO ME->RESULTADO.
    ENDIF.

    "Carunchado
    LC_RESULTADO-TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
    LC_RESULTADO-NR_PERCENTUAL_COM = E_CARGA_RECEBIMENTO-NR_PERC_CAR.
    LC_RESULTADO-NR_PERCENTUAL_FIS = E_CARGA_RECEBIMENTO-NR_PERC_CAR.
    LC_RESULTADO-NR_QUANTIDADE_COM = E_CARGA_RECEBIMENTO-NR_QTDE_CAR.
    LC_RESULTADO-NR_QUANTIDADE_FIS = E_CARGA_RECEBIMENTO-NR_QTDE_CAR.
    LC_RESULTADO-ID_CARGA          = ME->CARGA-ID_CARGA.
    LC_RESULTADO-ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO.
    READ TABLE ME->RESULTADO WITH KEY ID_CARGA          = ME->CARGA-ID_CARGA
                                      ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
                                      TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO
                             ASSIGNING <FS_RESULTADO>.
    IF SY-SUBRC IS INITIAL.
      LOOP AT ME->RESULTADO ASSIGNING <FS_RESULTADO>
           WHERE ID_CARGA          = ME->CARGA-ID_CARGA
             AND ID_CLASSIFICACAO  = ME->CARGA-ID_CLASSIFICACAO
             AND TP_CARACTERISTICA = ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
        MOVE-CORRESPONDING LC_RESULTADO TO <FS_RESULTADO>.
      ENDLOOP.
    ELSE.
      APPEND LC_RESULTADO TO ME->RESULTADO.
    ENDIF.

    E_CARGA_RECEBIMENTO-NM_PESO_DESCONTOS = E_CARGA_RECEBIMENTO-NR_QTDE_UMI + E_CARGA_RECEBIMENTO-NR_QTDE_IMP +
                                            E_CARGA_RECEBIMENTO-NR_QTDE_AVA + E_CARGA_RECEBIMENTO-NR_QTDE_ARD +
                                            E_CARGA_RECEBIMENTO-NR_QTDE_QUE + E_CARGA_RECEBIMENTO-NR_QTDE_ESV +
                                            E_CARGA_RECEBIMENTO-NR_QTDE_CAR.

    E_CARGA_RECEBIMENTO-NM_PESO_LIQUIDO   = E_CARGA_RECEBIMENTO-NM_PESO_SUBTOTAL - E_CARGA_RECEBIMENTO-NM_PESO_DESCONTOS.

    ME->CARGA-NM_PESO_DESCONTOS = E_CARGA_RECEBIMENTO-NM_PESO_DESCONTOS.
    ME->CARGA-NM_PESO_LIQUIDO   = E_CARGA_RECEBIMENTO-NM_PESO_LIQUIDO.

    "Local de Coleta
    IF ( ME->CARGA-ID_LOCAL_COLETA NE CP_ME_CARGA-ID_LOCAL_COLETA ) OR
       ( ME->CARGA-ID_LOCAL_COLETA IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_LOCAL_COLETA IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_COLETA.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_LOCAL_COLETA
        FROM LFA1 WHERE LIFNR EQ ME->CARGA-ID_LOCAL_COLETA.
    ELSEIF ME->CARGA-ID_LOCAL_COLETA IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_COLETA.
    ENDIF.

    "Local de Descarga
    IF ( ME->CARGA-ID_LOCAL_DESCARGA NE CP_ME_CARGA-ID_LOCAL_DESCARGA ) OR
       ( ME->CARGA-ID_LOCAL_DESCARGA IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_LOCAL_DESCARGA IS INITIAL ) .
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_DESCARGA.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_LOCAL_DESCARGA
        FROM KNA1 WHERE KUNNR EQ ME->CARGA-ID_LOCAL_DESCARGA.
    ELSEIF ME->CARGA-ID_LOCAL_DESCARGA IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_DESCARGA.
    ENDIF.

    "Local de Destino
    IF ( ME->CARGA-ID_LOCAL_DESTINO NE CP_ME_CARGA-ID_LOCAL_DESTINO ) OR
       ( ME->CARGA-ID_LOCAL_DESTINO IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_LOCAL_DESTINO IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_DESTINO.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_LOCAL_DESTINO
        FROM LFA1 WHERE LIFNR EQ ME->CARGA-ID_LOCAL_DESTINO.
    ELSEIF ME->CARGA-ID_LOCAL_DESTINO IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_DESTINO.
    ENDIF.

*    "Tipo de Entrada
*    IF ( ME->CARGA-ID_ENTRADA NE CP_ME_CARGA-ID_ENTRADA ) OR ( ME->CARGA-ID_ENTRADA IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_ENTRADA IS INITIAL ).
*      SELECT SINGLE DS_ENTRADA
*        INTO E_CARGA_RECEBIMENTO-DS_ENTRADA
*        FROM ZSDT0001TETX WHERE ID_ENTRADA EQ ME->CARGA-ID_ENTRADA.
*    ELSEIF ME->CARGA-ID_ENTRADA IS INITIAL.
*      CLEAR: E_CARGA_RECEBIMENTO-DS_ENTRADA.
*    ENDIF.

    "Local de Entrega
    IF ( ME->CARGA-ID_LOCAL_ENTREGA NE CP_ME_CARGA-ID_LOCAL_ENTREGA ) OR
       ( ME->CARGA-ID_LOCAL_ENTREGA IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_LOCAL_ENTREGA IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_ENTREGA.
      SELECT SINGLE DS_LOCAL_ENTREGA
        INTO E_CARGA_RECEBIMENTO-DS_LOCAL_ENTREGA
        FROM ZSDT0001LE WHERE ID_LOCAL_ENTREGA EQ ME->CARGA-ID_LOCAL_ENTREGA.
    ELSEIF ME->CARGA-ID_LOCAL_ENTREGA IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_ENTREGA.
    ENDIF.

    "Motorista
    IF ( ME->CARGA-ID_MOTORISTA NE CP_ME_CARGA-ID_MOTORISTA ) OR
       ( ME->CARGA-ID_MOTORISTA IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_MOTORISTA IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_MOTORISTA.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_MOTORISTA
        FROM LFA1 WHERE LIFNR EQ ME->CARGA-ID_MOTORISTA.
    ELSEIF ME->CARGA-ID_MOTORISTA IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_MOTORISTA.
    ENDIF.

    "Proprietário do Veículo
    IF ( ME->CARGA-ID_PROPRIETARIO NE CP_ME_CARGA-ID_PROPRIETARIO ) OR
       ( ME->CARGA-ID_PROPRIETARIO IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_PROPRIETARIO IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_PROPRIETARIO.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_PROPRIETARIO
        FROM LFA1 WHERE LIFNR EQ ME->CARGA-ID_PROPRIETARIO.
    ELSEIF ME->CARGA-ID_PROPRIETARIO IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_PROPRIETARIO.
    ENDIF.

    "Agente de Frete
    IF ( ME->CARGA-ID_AGENT_FRETE NE CP_ME_CARGA-ID_AGENT_FRETE ) OR
       ( ME->CARGA-ID_AGENT_FRETE IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_AGENT_FRETE IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_AGENT_FRETE.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_AGENT_FRETE
        FROM LFA1 WHERE LIFNR EQ ME->CARGA-ID_AGENT_FRETE.
    ELSEIF ME->CARGA-ID_LOCAL_COLETA IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_AGENT_FRETE.
    ENDIF.

    "Informações alteradas na classificação
    E_CARGA_RECEBIMENTO-NR_RES_RR1_RR2 = E_CARGA_RECEBIMENTO-NR_RESULTADO_01 + E_CARGA_RECEBIMENTO-NR_RESULTADO_02.

    IF ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC EQ ABAP_FALSE.
      CLEAR: E_CARGA_RECEBIMENTO-DS_OUTRO_PARTIC,
             E_CARGA_RECEBIMENTO-ID_OUTRO_PARTIC.
    ENDIF.

    IF ( ME->CLASSIFICACAO-ID_OUTRO_PARTIC NE CP_ME_CLASSIFICACAO-ID_OUTRO_PARTIC ) OR
       ( ME->CLASSIFICACAO-ID_OUTRO_PARTIC IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_OUTRO_PARTIC IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_OUTRO_PARTIC.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_OUTRO_PARTIC
        FROM LFA1 WHERE LIFNR EQ ME->CLASSIFICACAO-ID_OUTRO_PARTIC.
    ELSEIF ME->CLASSIFICACAO-ID_OUTRO_PARTIC IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_OUTRO_PARTIC.
    ENDIF.

    "Classificadora
    IF ( ME->CLASSIFICACAO-ID_CLASSIFICADORA NE CP_ME_CLASSIFICACAO-ID_CLASSIFICADORA ) OR
       ( ME->CLASSIFICACAO-ID_CLASSIFICADORA IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_CLASSIFICADORA IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_CLASSIFICADORA.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_CLASSIFICADORA
        FROM LFA1 WHERE LIFNR EQ ME->CLASSIFICACAO-ID_CLASSIFICADORA.
    ELSEIF ME->CLASSIFICACAO-ID_CLASSIFICADORA IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_CLASSIFICADORA.
    ENDIF.

    IF ME->CARGA-NM_PESO_SUBTOTAL NE CP_ME_CARGA-NM_PESO_SUBTOTAL OR
       ME->CARGA-NM_PESO_LIQUIDO  NE CP_ME_CARGA-NM_PESO_LIQUIDO.
      ME->ZIF_CARGA~SET_AJUSTAR_RAT_DESC_GERAL( ).
    ENDIF.

    ME->ZIF_CARGA~SET_AJUSTAR_RAT_ORDEM_VENDA( ).

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_CONFERIDO.

    DATA: "OB_ROMANEIO          TYPE REF TO ZCL_ROMANEIO,
      LC_RESULTADO_RATEIOS TYPE ZDE_ZSDT0001RS_T,
      LC_NM_PESO_SUBTOTAL	 TYPE ZDE_NM_PESO_SUBTOTAL,
      LC_NM_PESO_LIQUIDO   TYPE ZDE_NM_PESO_LIQUIDO,
      LC_NR_QTDE_UMI       TYPE ZDE_NR_QTDE_UMIDADE,
      LC_NR_QTDE_IMP       TYPE ZDE_NR_QTDE_IMPUREZA,
      LC_NR_QTDE_AVA       TYPE ZDE_NR_QTDE_AVARIADO,
      LC_NR_QTDE_ARD       TYPE ZDE_NR_QTDE_ARDIDO,
      LC_NR_QTDE_QUE       TYPE ZDE_NR_QTDE_QUEBRADO,
      LC_NR_QTDE_ESV       TYPE ZDE_NR_QTDE_ESVERDEADO,
      LC_NR_QTDE_CAR       TYPE ZDE_NR_QTDE_CARUNCHADO.

    DATA: LC_QTD_FISCAL_GERADA  TYPE ZDE_NR_QUANTIDADE,
          LC_QTD_FISCAL_A_GERAR TYPE ZDE_NR_QUANTIDADE.

    CLEAR: ME->ZIF_CARGA~CK_EXECUTAR_REVERSAO_ENTRADA. "BUG 34154

    "Somente Deixa Conferir se Exitir Documento Fiscal de Entrada
    DESCRIBE TABLE ME->DOCUMENTO_FISCAL LINES DATA(QTD_LINHAS).

    IF QTD_LINHAS EQ 0.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_SEM_DOC_FISCAL-MSGID
                            MSGNO  = ZCX_CARGA=>ZCX_SEM_DOC_FISCAL-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_SEM_DOC_FISCAL-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_SEM_DOC_FISCAL-MSGNO.
    ENDIF.

    CASE ME->CARGA-TP_STATUS.
      WHEN ZIF_CARGA=>ST_STATUS_ABERTO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGNO.
      WHEN ZIF_CARGA=>ST_STATUS_CONFERIDO.
        IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO )
              MSGTY  = 'E'
              MSGID  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID
              MSGNO  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO.
        ENDIF.
      WHEN ZIF_CARGA=>ST_STATUS_CANCELADA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO.
    ENDCASE.

    DESCRIBE TABLE ME->DOCUMENTO_FISCAL LINES DATA(QT_NOTAS).

    ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_CONFERIDO.

    ME->ZIF_CARGA~GET_RECUPERAR_ENTRADA( ).

    DATA(CK_NOTA_GERADA) = ABAP_FALSE.

    LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_NN) WHERE MM_MBLNR_SOBRA IS NOT INITIAL.
      CK_NOTA_GERADA = ABAP_TRUE.
    ENDLOOP.

    IF CK_NOTA_GERADA NE ABAP_TRUE.
      IF QT_NOTAS EQ 1.
        "Unico
        READ TABLE ME->DOCUMENTO_FISCAL INDEX 1 ASSIGNING FIELD-SYMBOL(<FS_NOTA>).
        <FS_NOTA>-ID_CLASSIFICACAO = ME->CLASSIFICACAO-ID_CLASSIFICACAO.
        <FS_NOTA>-NM_PESO_SUBTOTAL = ME->CARGA-NM_PESO_SUBTOTAL.
        <FS_NOTA>-NM_PESO_LIQUIDO  = ME->CARGA-NM_PESO_LIQUIDO.
      ELSE.
        "Desmembrado
        LC_NM_PESO_SUBTOTAL = 0.
        LC_NM_PESO_LIQUIDO  = 0.
        LC_NR_QTDE_UMI      = 0.
        LC_NR_QTDE_IMP      = 0.
        LC_NR_QTDE_AVA      = 0.
        LC_NR_QTDE_ARD      = 0.
        LC_NR_QTDE_QUE      = 0.
        LC_NR_QTDE_ESV      = 0.
        "LC_NR_QTDE_CAR      = 0.

        "Duplicar Classificação
        LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING <FS_NOTA>.
          "Gerar Rateio
          ME->GET_RATEIA_DESCONTOS( EXPORTING
                                      I_DESCONTOS = ME->RESULTADO
                                      I_PESO_LIQUIDO  = <FS_NOTA>-NM_PESO_LIQUIDO
                                    IMPORTING
                                      E_PESO_SUBTOTAL = <FS_NOTA>-NM_PESO_SUBTOTAL
                                      E_RATEIO        = DATA(RESULTADO) ).

          IF <FS_NOTA>-ID_CLASSIFICACAO IS NOT INITIAL.
            READ TABLE ME->CLASSIFICACAO_NOTAS WITH KEY ID_CLASSIFICACAO = <FS_NOTA>-ID_CLASSIFICACAO TRANSPORTING NO FIELDS.
            IF SY-SUBRC IS INITIAL.
              DATA(CK_NEW) = ABAP_FALSE.
            ELSE.
              CK_NEW = ABAP_TRUE.
            ENDIF.
          ELSE.
            CK_NEW = ABAP_TRUE.
          ENDIF.

          DATA(WA_CLASSIFICA) = ME->CLASSIFICACAO.

          IF CK_NEW EQ ABAP_TRUE.
            ME->ZIF_CARGA~GET_NEW_ID_CLASSIFICAO( IMPORTING E_ID_CLASSIFICACAO = WA_CLASSIFICA-ID_CLASSIFICACAO ).
            <FS_NOTA>-ID_CLASSIFICACAO = WA_CLASSIFICA-ID_CLASSIFICACAO.
            APPEND WA_CLASSIFICA TO ME->CLASSIFICACAO_NOTAS.
          ELSE.
            READ TABLE ME->CLASSIFICACAO_NOTAS WITH KEY ID_CLASSIFICACAO = <FS_NOTA>-ID_CLASSIFICACAO ASSIGNING FIELD-SYMBOL(<FS_AJUSTE_CLASS>).
            MOVE-CORRESPONDING ME->CLASSIFICACAO TO <FS_AJUSTE_CLASS>.
            <FS_AJUSTE_CLASS>-ID_CLASSIFICACAO = <FS_NOTA>-ID_CLASSIFICACAO.
          ENDIF.

          LOOP AT RESULTADO INTO DATA(WA_RESULTADO).
            WA_RESULTADO-ID_CARGA         = ME->CARGA-ID_CARGA.
            WA_RESULTADO-ID_CLASSIFICACAO = <FS_NOTA>-ID_CLASSIFICACAO.
            APPEND WA_RESULTADO TO LC_RESULTADO_RATEIOS.
            CASE WA_RESULTADO-TP_CARACTERISTICA.
              WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
                ADD WA_RESULTADO-NR_QUANTIDADE_COM TO LC_NR_QTDE_UMI.
              WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
                ADD WA_RESULTADO-NR_QUANTIDADE_COM TO LC_NR_QTDE_IMP.
              WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
                ADD WA_RESULTADO-NR_QUANTIDADE_COM TO LC_NR_QTDE_AVA.
              WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
                ADD WA_RESULTADO-NR_QUANTIDADE_COM TO LC_NR_QTDE_ARD.
              WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
                ADD WA_RESULTADO-NR_QUANTIDADE_COM TO LC_NR_QTDE_QUE.
              WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
                ADD WA_RESULTADO-NR_QUANTIDADE_COM TO LC_NR_QTDE_ESV.
              WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
                ADD WA_RESULTADO-NR_QUANTIDADE_COM TO LC_NR_QTDE_CAR.
            ENDCASE.
          ENDLOOP.

          ADD <FS_NOTA>-NM_PESO_SUBTOTAL TO LC_NM_PESO_SUBTOTAL.
          ADD <FS_NOTA>-NM_PESO_LIQUIDO  TO LC_NM_PESO_LIQUIDO.

        ENDLOOP.

        IF LC_NM_PESO_SUBTOTAL NE ME->CARGA-NM_PESO_SUBTOTAL.
          IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
            ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
          ENDIF.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PESO_SUBTOTAL-MSGID MSGNO = ZCX_CARGA=>ZCX_PESO_SUBTOTAL-MSGNO )
              MSGTY  = 'E'
              MSGID  = ZCX_CARGA=>ZCX_PESO_SUBTOTAL-MSGID
              MSGNO  = ZCX_CARGA=>ZCX_PESO_SUBTOTAL-MSGNO.
        ENDIF.

        IF LC_NM_PESO_LIQUIDO NE ME->CARGA-NM_PESO_LIQUIDO.
          IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
            ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
          ENDIF.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PESO_LIQUIDO-MSGID MSGNO = ZCX_CARGA=>ZCX_PESO_LIQUIDO-MSGNO )
              MSGTY  = 'E'
              MSGID  = ZCX_CARGA=>ZCX_PESO_LIQUIDO-MSGID
              MSGNO  = ZCX_CARGA=>ZCX_PESO_LIQUIDO-MSGNO.
        ENDIF.

        LOOP AT ME->RESULTADO INTO WA_RESULTADO WHERE ID_CLASSIFICACAO = ME->CARGA-ID_CLASSIFICACAO.
          CASE WA_RESULTADO-TP_CARACTERISTICA.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
              IF WA_RESULTADO-NR_QUANTIDADE_COM NE LC_NR_QTDE_UMI.
                IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
                  ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
                ENDIF.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PESO_DESC_UMIDADE-MSGID MSGNO = ZCX_CARGA=>ZCX_PESO_DESC_UMIDADE-MSGNO )
                    MSGTY  = 'E'
                    MSGID  = ZCX_CARGA=>ZCX_PESO_DESC_UMIDADE-MSGID
                    MSGNO  = ZCX_CARGA=>ZCX_PESO_DESC_UMIDADE-MSGNO.
              ENDIF.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
              IF WA_RESULTADO-NR_QUANTIDADE_COM NE LC_NR_QTDE_IMP.
                IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
                  ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
                ENDIF.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PESO_DESC_IMPUREZA-MSGID MSGNO = ZCX_CARGA=>ZCX_PESO_DESC_IMPUREZA-MSGNO )
                    MSGTY  = 'E'
                    MSGID  = ZCX_CARGA=>ZCX_PESO_DESC_IMPUREZA-MSGID
                    MSGNO  = ZCX_CARGA=>ZCX_PESO_DESC_IMPUREZA-MSGNO.
              ENDIF.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
              IF WA_RESULTADO-NR_QUANTIDADE_COM NE LC_NR_QTDE_AVA.
                IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
                  ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
                ENDIF.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PESO_DESC_AVARIADO-MSGID MSGNO = ZCX_CARGA=>ZCX_PESO_DESC_AVARIADO-MSGNO )
                    MSGTY  = 'E'
                    MSGID  = ZCX_CARGA=>ZCX_PESO_DESC_AVARIADO-MSGID
                    MSGNO  = ZCX_CARGA=>ZCX_PESO_DESC_AVARIADO-MSGNO.
              ENDIF.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
              IF WA_RESULTADO-NR_QUANTIDADE_COM NE LC_NR_QTDE_ARD.
                IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
                  ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
                ENDIF.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PESO_DESC_ARDIDO-MSGID MSGNO = ZCX_CARGA=>ZCX_PESO_DESC_ARDIDO-MSGNO )
                    MSGTY  = 'E'
                    MSGID  = ZCX_CARGA=>ZCX_PESO_DESC_ARDIDO-MSGID
                    MSGNO  = ZCX_CARGA=>ZCX_PESO_DESC_ARDIDO-MSGNO.
              ENDIF.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
              IF WA_RESULTADO-NR_QUANTIDADE_COM NE LC_NR_QTDE_QUE.
                IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
                  ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
                ENDIF.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PESO_DESC_QUEBRADO-MSGID MSGNO = ZCX_CARGA=>ZCX_PESO_DESC_QUEBRADO-MSGNO )
                    MSGTY  = 'E'
                    MSGID  = ZCX_CARGA=>ZCX_PESO_DESC_QUEBRADO-MSGID
                    MSGNO  = ZCX_CARGA=>ZCX_PESO_DESC_QUEBRADO-MSGNO.
              ENDIF.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
              IF WA_RESULTADO-NR_QUANTIDADE_COM NE LC_NR_QTDE_ESV.
                IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
                  ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
                ENDIF.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PESO_DESC_ESVERDEADO-MSGID MSGNO = ZCX_CARGA=>ZCX_PESO_DESC_ESVERDEADO-MSGNO )
                    MSGTY  = 'E'
                    MSGID  = ZCX_CARGA=>ZCX_PESO_DESC_ESVERDEADO-MSGID
                    MSGNO  = ZCX_CARGA=>ZCX_PESO_DESC_ESVERDEADO-MSGNO.
              ENDIF.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
              IF WA_RESULTADO-NR_QUANTIDADE_COM NE LC_NR_QTDE_CAR.
                IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
                  ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
                ENDIF.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PESO_DESC_CARUNCHADO-MSGID MSGNO = ZCX_CARGA=>ZCX_PESO_DESC_CARUNCHADO-MSGNO )
                    MSGTY  = 'E'
                    MSGID  = ZCX_CARGA=>ZCX_PESO_DESC_CARUNCHADO-MSGID
                    MSGNO  = ZCX_CARGA=>ZCX_PESO_DESC_CARUNCHADO-MSGNO.
              ENDIF.
          ENDCASE.
        ENDLOOP.
      ENDIF.
    ENDIF.


    IF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

      "Verificar Saldo de Ordem de Venda """"""""""""""""""""""""""""""""""""""""""""""""""""
      """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      IF ME->ZIF_CARGA~ORDEM_VENDA[] IS NOT INITIAL AND ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
        LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM).

          "Busca Item da Ordem de Venda
          SELECT SINGLE * INTO @DATA(WA_VBAP)
            FROM VBAP
           WHERE VBELN EQ @WA_ORDEM-NR_ORDEM_VENDA
             AND MATNR EQ @ME->CARGA-ID_PRODUTO.

          "Busca Remessa Emitidas
          SELECT SINGLE SUM( LFIMG ) INTO @DATA(LC_PESO_UTILIZADO)
            FROM LIPS
           WHERE VGBEL EQ @WA_VBAP-VBELN
             AND MATNR EQ @WA_VBAP-MATNR.

          "Busca Volume de Material da Ordem de Venda
          SELECT SINGLE SUM( WMENG ) INTO @DATA(LC_PESO_ORDEM_VENDA)
            FROM VBEP
           WHERE VBELN EQ @WA_VBAP-VBELN
             AND POSNR EQ @WA_VBAP-POSNR.

        ENDLOOP.

        LC_PESO_UTILIZADO = LC_PESO_UTILIZADO + ME->CARGA-NM_PESO_SUBTOTAL.

        IF LC_PESO_UTILIZADO GT LC_PESO_ORDEM_VENDA.

          DATA(VG_SALDO) = LC_PESO_ORDEM_VENDA - LC_PESO_UTILIZADO.

          WRITE VG_SALDO TO SY-MSGV1.
          CONDENSE SY-MSGV1 NO-GAPS.

          WRITE ME->CARGA-NM_PESO_LIQUIDO TO SY-MSGV2.
          CONDENSE SY-MSGV2 NO-GAPS.

          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SEM_SALDO_ORD_VENDA-MSGID
                                MSGNO = ZCX_CARGA=>ZCX_SEM_SALDO_ORD_VENDA-MSGNO
                                ATTR1 = CONV #( SY-MSGV1 )
                                ATTR2 = CONV #( SY-MSGV2 ) )
              MSGTY  = 'E'
              MSGID  = ZCX_CARGA=>ZCX_SEM_SALDO_ORD_VENDA-MSGID
              MSGNO  = ZCX_CARGA=>ZCX_SEM_SALDO_ORD_VENDA-MSGNO
              MSGV1  = SY-MSGV1
              MSGV2  = SY-MSGV2.

        ELSEIF WA_VBAP-KWMENG NE WA_VBAP-NTGEW.

          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ERRO_PESO_ORD_VENDA-MSGID MSGNO = ZCX_CARGA=>ZCX_ERRO_PESO_ORD_VENDA-MSGNO )
              MSGTY  = 'E'
              MSGID  = ZCX_CARGA=>ZCX_ERRO_PESO_ORD_VENDA-MSGID
              MSGNO  = ZCX_CARGA=>ZCX_ERRO_PESO_ORD_VENDA-MSGNO.

        ENDIF.
      ENDIF.
      """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

      "Verificar Saldo de Estoque da Filial """"""""""""""""""""""""""""""""""""""""""""""""""
      """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

      "Buscar Centro a Fixar
      SELECT SINGLE * INTO @DATA(WA_AFIXAR)
        FROM ZSDT_DEPARA_CEN
       WHERE VKORG             EQ @ME->CARGA-ID_BUKRS
         AND CENTRO_REAL       EQ @ME->CARGA-ID_BRANCH
         AND TP_CENTRO_VIRTUAL EQ @ZCL_PEDIDO_COMPRA=>ST_TP_CENTRO_A_FIXAR.

      IF SY-SUBRC IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID    = VALUE #( MSGID = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR-MSGID
                                 MSGNO = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR-MSGNO
                                 ATTR1 = CONV #( ME->CARGA-ID_BRANCH )
                                 ATTR2 = 'ZSDT0036' )
            MSGID     = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR-MSGID
            MSGNO     = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR-MSGNO
            MSGTY     = 'E'
            MSGV1     = CONV #( ME->CARGA-ID_BRANCH )
            MSGV2     = 'ZSDT0036'
            TRANSACAO = 'ZSDT0036'.
      ENDIF.

      IF ME->CLASSIFICACAO-TP_TRANSGENIA EQ ZIF_CARGA=>ST_TP_TRANSGENIASE_CO.
        SELECT SINGLE * INTO @DATA(WA_ZMMT0017)
          FROM ZMMT0017
         WHERE MATNR          EQ @ME->CARGA-ID_PRODUTO
           AND CENTRO_FIXO    EQ @ME->CARGA-ID_BRANCH
           AND CENTRO_A_FIXAR EQ @WA_AFIXAR-CENTROV_1
           AND TP_PRODUTO     EQ @ZIF_CARGA=>ST_TP_TRANSGENIASE_CO.
      ELSE.
        SELECT SINGLE * INTO @WA_ZMMT0017
          FROM ZMMT0017
         WHERE MATNR          EQ @ME->CARGA-ID_PRODUTO
           AND CENTRO_FIXO    EQ @ME->CARGA-ID_BRANCH
           AND CENTRO_A_FIXAR EQ @WA_AFIXAR-CENTROV_1
           AND TP_PRODUTO     EQ 'RR'.
      ENDIF.

      IF SY-SUBRC IS NOT INITIAL.
        SELECT SINGLE * INTO @WA_ZMMT0017
          FROM ZMMT0017
         WHERE MATNR          EQ @ME->CARGA-ID_PRODUTO
           AND CENTRO_FIXO    EQ @ME->CARGA-ID_BRANCH
           AND CENTRO_A_FIXAR EQ @WA_AFIXAR-CENTROV_1
           AND TP_PRODUTO     EQ @SPACE.
      ENDIF.

      IF SY-SUBRC IS NOT INITIAL.
        "Centro &1 Centro a Fixar &2 e Material &3 sem Depósito! Transação &4!
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID    = VALUE #( MSGID = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR_DEPOSITO-MSGID
                                 MSGNO = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR_DEPOSITO-MSGNO
                                 ATTR1 = CONV #( ME->CARGA-ID_BRANCH )
                                 ATTR2 = CONV #( WA_AFIXAR-CENTROV_1 )
                                 ATTR3 = CONV #( ME->CARGA-ID_PRODUTO )
                                 ATTR4 = 'ZMM0017' )
            MSGID     = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR_DEPOSITO-MSGID
            MSGNO     = ZCX_CARGA=>ZCX_CENTRO_A_FIXAR_DEPOSITO-MSGNO
            MSGTY     = 'E'
            MSGV1     = CONV #( ME->CARGA-ID_BRANCH )
            MSGV2     = CONV #( WA_AFIXAR-CENTROV_1 )
            MSGV3     = CONV #( ME->CARGA-ID_PRODUTO )
            MSGV4     = 'ZMM0017'
            TRANSACAO = 'ZMM0017'.
      ENDIF.


      SELECT SINGLE * INTO @DATA(WA_ZMM0023)
        FROM ZMM0023 AS MM
       WHERE MM~WERKS  EQ @ME->CARGA-ID_BRANCH
         AND MM~MATNR  EQ @ME->CARGA-ID_PRODUTO
         AND MM~CWERKS EQ ( SELECT MAX( MM2~CWERKS )
         FROM ZMM0023 AS MM2 WHERE MM2~WERKS EQ MM~WERKS  ).

      IF WA_ZMM0023-STATUS NE 'A' AND ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.

        "Buscar Saldo Estoque Atual
        SELECT SINGLE * INTO @DATA(WA_MCHB_FILIAL)
          FROM MCHB
         WHERE WERKS EQ @ME->CARGA-ID_BRANCH
           AND LGORT EQ @WA_ZMMT0017-LGORT
           AND CHARG EQ @ME->CARGA-NR_SAFRA
           AND MATNR EQ @ME->CARGA-ID_PRODUTO.

        IF ME->CARGA-NR_SAFRA <= '2019'.

          "Buscar Saldo Estoque Atual
          SELECT SINGLE * INTO @DATA(WA_MCHB)
            FROM MCHB
           WHERE WERKS EQ @WA_ZMMT0017-CENTRO_A_FIXAR
             AND LGORT EQ @WA_ZMMT0017-LGORT
             AND CHARG EQ @ME->CARGA-NR_SAFRA
             AND MATNR EQ @ME->CARGA-ID_PRODUTO.

        ELSE.

          DATA(NEW_CHARG) = |{ ME->CARGA-NR_SAFRA }_{ ME->CARGA-ID_BRANCH }|.

          "Buscar Saldo Estoque Atual
          SELECT SINGLE * INTO @WA_MCHB
            FROM MCHB
           WHERE WERKS EQ @WA_ZMMT0017-CENTRO_A_FIXAR
             AND LGORT EQ @WA_ZMMT0017-LGORT
             AND CHARG EQ @NEW_CHARG
             AND MATNR EQ @ME->CARGA-ID_PRODUTO.

        ENDIF.

        ME->ZIF_CARGA~GET_RECUPERAR_ENTRADA( ).

        LC_QTD_FISCAL_GERADA = LC_QTD_FISCAL_A_GERAR = 0.

*        LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_NOTA) WHERE MM_MBLNR IS NOT INITIAL.
*          "Não vai gerar estoque já gerou
*          LC_QTD_FISCAL_GERADA = LC_QTD_FISCAL_GERADA + WA_NOTA-NR_QUANTIDADE.
*        ENDLOOP.

        LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_NOTA) WHERE MM_MBLNR IS INITIAL.
          "Vai gerar estoque
          LC_QTD_FISCAL_A_GERAR = LC_QTD_FISCAL_A_GERAR + WA_NOTA-NR_QUANTIDADE.
        ENDLOOP.

        DATA(LC_SALDO) = WA_MCHB_FILIAL-CLABS + WA_MCHB-CLABS.

*        "Quantodade Já Gerada de Enatrada
*        LC_SALDO = LC_SALDO - LC_QTD_FISCAL_GERADA.

        "Quantidade Será Gerada de Saída
        LC_SALDO = LC_SALDO - ME->CARGA-NM_PESO_SUBTOTAL.

        SELECT SINGLE * INTO @DATA(WA_SETLEAF)
          FROM SETLEAF
         WHERE SETNAME EQ 'RESIDUO'
           AND VALFROM EQ @ME->CARGA-ID_PRODUTO.

        IF SY-SUBRC IS INITIAL.
          "Quantidade Será Gerada de Entrada de Sobra
          LC_SALDO = LC_SALDO + ( ME->CARGA-NM_PESO_SUBTOTAL - ME->CARGA-NM_PESO_LIQUIDO ).
        ENDIF.

        "Quantidade Será Gerada de Entrada de Estoque
        LC_SALDO = LC_SALDO + LC_QTD_FISCAL_A_GERAR.

        IF LC_SALDO LT 0.

          WRITE LC_SALDO TO SY-MSGV1.
          CONDENSE SY-MSGV1 NO-GAPS.

          "Saldo Estoque Insuficiente em &MSGV1& - Centro &MSGV2& Deposito &MSGV3& Lote &MSGV4&!

          CONCATENATE ME->CARGA-ID_BRANCH '/' WA_ZMMT0017-CENTRO_A_FIXAR INTO SY-MSGV2.

          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SALDO_ESTOQUE-MSGID
                                MSGNO = ZCX_CARGA=>ZCX_SALDO_ESTOQUE-MSGNO
                                ATTR1 = CONV #( SY-MSGV1 )
                                ATTR2 = CONV #( SY-MSGV2 )
                                ATTR3 = CONV #( WA_ZMMT0017-LGORT )
                                ATTR4 = CONV #( ME->CARGA-NR_SAFRA ) )
              MSGTY  = 'E'
              MSGID  = ZCX_CARGA=>ZCX_SALDO_ESTOQUE-MSGID
              MSGNO  = ZCX_CARGA=>ZCX_SALDO_ESTOQUE-MSGNO
              MSGV1  = SY-MSGV1
              MSGV2  = SY-MSGV2
              MSGV3  = CONV #( WA_ZMMT0017-LGORT )
              MSGV4  = CONV #( ME->CARGA-NR_SAFRA ).

        ENDIF.
        """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

      ENDIF.

    ENDIF.

    IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
      IF NOT ( ME->CARGA-CK_ENVIADO_OPUS EQ ABAP_TRUE AND ME->CARGA-CK_RECEBIDO_OPUS EQ ABAP_FALSE ).
        ME->CARGA-DT_CONFERENCIA = SY-DATLO.
        ME->CARGA-HR_CONFERENCIA = SY-TIMLO.
        ME->CARGA-US_CONFERENCIA = SY-UNAME.
      ENDIF.
    ENDIF.

    ME->ZIF_CARGA~VALIDAR_REGISTRO( IMPORTING  E_VALIDOU  = DATA(E_VALIDOU) ).

    IF NOT E_VALIDOU EQ ABAP_TRUE.
      IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
        ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
        IF ME->CARGA-ID_CARGA IS NOT INITIAL.
          DELETE FROM ZSDT0001 WHERE ID_CARGA EQ ME->CARGA-ID_CARGA.
          COMMIT WORK.
        ENDIF.
      ENDIF.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO
                            ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGTY  = 'E'
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    LOOP AT LC_RESULTADO_RATEIOS INTO WA_RESULTADO.
      READ TABLE ME->RESULTADO ASSIGNING FIELD-SYMBOL(<FS_RESULTADO>)
      WITH KEY ID_CLASSIFICACAO  = WA_RESULTADO-ID_CLASSIFICACAO
               TP_CARACTERISTICA = WA_RESULTADO-TP_CARACTERISTICA.
      IF SY-SUBRC IS INITIAL.
        MOVE-CORRESPONDING WA_RESULTADO TO <FS_RESULTADO>.
      ELSE.
        APPEND WA_RESULTADO TO ME->RESULTADO.
      ENDIF.
    ENDLOOP.

    TRY .

        IF ZIF_CARGA~SOLICITACAO_MANUTENCAO IS NOT INITIAL.
          SELECT SINGLE * INTO @DATA(WA_ZSDT0001ACB)
            FROM ZSDT0001ACB
           WHERE ID_SOLICITACAO EQ @ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.

          IF WA_ZSDT0001ACB-CK_ENTRADA_GEROU EQ ABAP_FALSE.
            "Gerar Movimento de Entrada na manutenção
            ME->ZIF_CARGA~SET_GERAR_ROMANEIO_ENTRADA(
              )->SET_GERAR_ENTRADA_ESTOQUE(
              )->SET_PROCESSAR_ENTRADA( IMPORTING E_GEROU_ENTRADA = DATA(E_GEROU_ENTRADA)
              ).

            IF E_GEROU_ENTRADA EQ ABAP_TRUE.
              UPDATE ZSDT0001ACB
                 SET CK_ENTRADA_GEROU = ABAP_TRUE
               WHERE ID_SOLICITACAO EQ ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.
              COMMIT WORK AND WAIT.
            ENDIF.
          ELSE.
            E_GEROU_ENTRADA = ABAP_TRUE.
          ENDIF.

        ELSE.
          "Gerar Movimento de Entrada
          ME->ZIF_CARGA~SET_GERAR_ROMANEIO_ENTRADA(
          )->SET_GERAR_ENTRADA_ESTOQUE(
          )->SET_PROCESSAR_ENTRADA( IMPORTING E_GEROU_ENTRADA = E_GEROU_ENTRADA
          ).
        ENDIF.

*        ME->ZIF_CARGA~SET_GERAR_ROMANEIO_ENTRADA(
*        )->SET_GERAR_ENTRADA_ESTOQUE(
*        )->SET_PROCESSAR_ENTRADA( IMPORTING E_GEROU_ENTRADA = DATA(E_GEROU_ENTRADA)
*        ).

        IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_TRUE.
          "Gravar para Processamento da Sobre ter a informação
          ME->ZIF_CARGA~GRAVAR_REGISTRO( ).
        ENDIF.

        ME->ZIF_CARGA~SET_PROCESSAR_SOBRA_FOB(
        )->SET_GERAR_ROMANEIO_SAIDA(
        )->SEND_CARGA_TO_OPUS( IMPORTING E_CODE = DATA(E_CODE)
        )->SET_CONFERIR_SOLIC_MANUT( IMPORTING E_APROVACAO_AUTOMATICA = DATA(E_APROVACAO_AUTOMATICA)
        ).

        IF E_GEROU_ENTRADA EQ ABAP_FALSE AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.
          ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
        ENDIF.

      CATCH ZCX_CARGA INTO DATA(EX_CARGA).

        IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
          ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
        ENDIF.

        ME->ZIF_CARGA~GRAVAR_REGISTRO( IMPORTING E_GRAVOU = DATA(E_GRAVOU) ).
        EX_CARGA->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
        EXIT.

      CATCH ZCX_CADASTRO INTO DATA(EX_CADASTRO).

*        ME->ZIF_CARGA~SET_LIMPA_ROMANEIO_SAIDA( ).
        IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
          ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
        ENDIF.
        ME->ZIF_CARGA~GRAVAR_REGISTRO( IMPORTING E_GRAVOU = E_GRAVOU ).
        EX_CADASTRO->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
        EXIT.

      CATCH ZCX_PEDIDO_COMPRA_EXCEPTION INTO DATA(EX_PEDIDO).

*        ME->ZIF_CARGA~SET_LIMPA_ROMANEIO_SAIDA( ).
        IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
          ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
        ENDIF.
        ME->ZIF_CARGA~GRAVAR_REGISTRO( IMPORTING E_GRAVOU = E_GRAVOU ).
        EX_PEDIDO->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
        EXIT.

      CATCH ZCX_PARCEIROS INTO DATA(EX_PARCEIROS).

*        ME->ZIF_CARGA~SET_LIMPA_ROMANEIO_SAIDA( ).
        IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
          ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
        ENDIF.
        ME->ZIF_CARGA~GRAVAR_REGISTRO( IMPORTING E_GRAVOU = E_GRAVOU ).
        EX_PARCEIROS->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
        EXIT.

      CATCH ZCX_MIRO_EXCEPTION INTO DATA(EX_MIRO).

*        ME->ZIF_CARGA~SET_LIMPA_ROMANEIO_SAIDA( ).
        IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
          ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
        ENDIF.
        ME->ZIF_CARGA~GRAVAR_REGISTRO( IMPORTING E_GRAVOU = E_GRAVOU ).
        EX_MIRO->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
        EXIT.

      CATCH ZCX_SOFT_EXPERT_WORKFLOW INTO DATA(EX_SE_WORLFLOW).

        IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
          ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
        ENDIF.
        ME->ZIF_CARGA~GRAVAR_REGISTRO( IMPORTING E_GRAVOU = E_GRAVOU ).
        EX_SE_WORLFLOW->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
        EXIT.

      CATCH ZCX_JOB INTO DATA(EX_JOB).

        IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
          ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
        ENDIF.
        ME->ZIF_CARGA~GRAVAR_REGISTRO( IMPORTING E_GRAVOU = E_GRAVOU ).
        EX_JOB->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
        EXIT.

    ENDTRY.

    ME->ZIF_CARGA~GRAVAR_REGISTRO( IMPORTING E_GRAVOU = E_GRAVOU ).

    IF E_GRAVOU EQ ABAP_TRUE.

      E_CONFERIU = ABAP_TRUE.

      MESSAGE S098.

      "Emitir Documentos Saída
      IF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE AND I_PROXIMO_PASSO_AUTOMATICO EQ ABAP_TRUE.
        ME->ZIF_CARGA~SET_EMITIR_DOC_SAIDAS( ).
      ENDIF.

      IF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_TRUE AND
         ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE AND
         E_APROVACAO_AUTOMATICA EQ ABAP_TRUE.

        "LN	Tipo Aceite de Solicitação de Manutenção - Local de Negócio
        "FI	Tipo Aceite de Solicitação de Manutenção - Fiscal
        "CO	Tipo Aceite de Solicitação de Manutenção - Comercial

        "A  Solicitação Aprovada
        "R  Solicitação Recusada
        "W  Solicitação Em Espera de Aprovação
        "S  Solicitação não gera Aprovação

        IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_ESPERA.
          ME->ZIF_CARGA~SET_ACEITE_SOLI_MANUTENCAO(
            EXPORTING
              I_TP_APROVACAO              = ZIF_CARGA=>ST_TP_ACEITE_MANUT_FILIAL   " Tipo de Aceite de Solicitação de Manutenção
              I_TP_RESPOSTA               = ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA " Tipo de Resposta
              "I_MOTIVO_RESPOSTA           = ''    " Motivo Informado na Resposta
          ).
        ENDIF.

        IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FISCAL EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_ESPERA.
          ME->ZIF_CARGA~SET_ACEITE_SOLI_MANUTENCAO(
            EXPORTING
              I_TP_APROVACAO              = ZIF_CARGA=>ST_TP_ACEITE_MANUT_FISCAL   " Tipo de Aceite de Solicitação de Manutenção
              I_TP_RESPOSTA               = ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA " Tipo de Resposta
              "I_MOTIVO_RESPOSTA           = ''    " Motivo Informado na Resposta
          ).
        ENDIF.

        IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_COMERCIAL EQ ZIF_CARGA=>ST_RS_ACEITE_MANUT_ESPERA.
          ME->ZIF_CARGA~SET_ACEITE_SOLI_MANUTENCAO(
            EXPORTING
              I_TP_APROVACAO              = ZIF_CARGA=>ST_TP_ACEITE_MANUT_COMERCIAL " Tipo de Aceite de Solicitação de Manutenção
              I_TP_RESPOSTA               = ZIF_CARGA=>ST_RS_ACEITE_MANUT_APROVADA  " Tipo de Resposta
              "I_MOTIVO_RESPOSTA           = ''    " Motivo Informado na Resposta
          ).
        ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_CONFERIR_SOLIC_MANUT.

    DATA: E_NEW_WORKFLOW TYPE ZDE_SE_NEW_WORFLOW_RET.
    DATA: LC_INJECT      TYPE REF TO ZCL_SE_WL_MANUTENCAO_ROMANEIO.
    DATA: E_ALTERACOES   TYPE ZDE_ALTERACOES_CARGA.
    DATA: ROMANEIO       TYPE REF TO ZCL_ROMANEIO.

    R_INSTANCE = ME.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_TRUE.
    CHECK ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.

    "Verificar Romaneios de Entrada se Podem ser alterados
    ME->ZIF_CARGA~GET_ROMANEIO_ENTRADA( EXPORTING I_ID_CARGA = ME->ZIF_CARGA~CARGA-ID_CARGA  I_FORCE = ABAP_TRUE IMPORTING E_ROMANEIOS = DATA(E_ROMANEIOS) ).

    LOOP AT E_ROMANEIOS INTO DATA(WA_ROMANEIOS).
      TRY .

          ROMANEIO = ZCL_ROMANEIO=>GET_INSTANCE( ).
          ROMANEIO->SET_REGISTRO( I_ID_REGISTRO = WA_ROMANEIOS-CH_REFERENCIA ).
          ROMANEIO->GET_CONSULTA_STATUS_OPUS(
            IMPORTING
              E_STATUS            = DATA(E_STATUS)               " Status do Romaneio
              E_BLOQUEADO         = DATA(E_BLOQUEADO)
              E_MENSAGEM_BLOQUEIO = DATA(E_MENSAGEM_BLOQUEIO) ).

          IF E_BLOQUEADO = 'X'.
            ME->GERA_ERRO_GERAL( I_TEXTO = E_MENSAGEM_BLOQUEIO ).
          ENDIF.

        CATCH ZCX_ROMANEIO INTO DATA(EX_ROMANEIO).

          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = EX_ROMANEIO->MSGID
                                MSGNO = EX_ROMANEIO->MSGNO
                                ATTR1 = CONV #( EX_ROMANEIO->MSGV1 )
                                ATTR2 = CONV #( EX_ROMANEIO->MSGV2 )
                                ATTR3 = CONV #( EX_ROMANEIO->MSGV3 )
                                ATTR4 = CONV #( EX_ROMANEIO->MSGV4 ) )
              MSGID  = EX_ROMANEIO->MSGID
              MSGNO  = EX_ROMANEIO->MSGNO
              MSGTY  = 'E'
              MSGV1  = EX_ROMANEIO->MSGV1
              MSGV2  = EX_ROMANEIO->MSGV2
              MSGV3  = EX_ROMANEIO->MSGV3
              MSGV4  = EX_ROMANEIO->MSGV4.

      ENDTRY.

    ENDLOOP.

    LC_INJECT = CAST #( ZCL_SE_WL_MANUTENCAO_ROMANEIO=>ZIF_SOFT_EXPERT_WS_INJECT~GET_INSTANCE( ) ).

    ME->ZIF_CARGA~VERIF_ALTERACAO_MANUT_ROMANEIO(
      IMPORTING
        E_CK_ACEITE_FILIAL    = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_FILIAL       " Aceite Filial
        E_CK_ACEITE_COMERCIAL = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_COMERCIAL    " Aceite Fiscal
        E_CK_ACEITE_FISCAL    = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_FISCAL       " Aceite Comercial
        E_CARGA_ORIGINAL      = LC_INJECT->AT_CARGA_ORIGINAL                                " Interface para Carga
        E_ALTERACOES          = E_ALTERACOES
        E_OBS_ALTERACAO       = LC_INJECT->OBS_ALTERACAO
    ).

    MOVE-CORRESPONDING E_ALTERACOES TO ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO.

    LC_INJECT->AT_CARGA = ME.

    TRY .
        ME->ZIF_CARGA~GET_CK_EXCLUIR_ROMANEIO_SAIDA( ).
        E_APROVACAO_AUTOMATICA = ABAP_TRUE.
      CATCH ZCX_CARGA.    "
        ZCL_SOFT_EXPERT_WORKFLOW=>ZIF_SOFT_EXPERT_WORKFLOW~GET_INSTANCE(
          )->SET_PROCESS_WORKFLOW_INJECT( EXPORTING I_INJECT = LC_INJECT
          )->CREATE_NEW_WORKFLOW( IMPORTING E_NEW_WORKFLOW = E_NEW_WORKFLOW
          ).
        E_APROVACAO_AUTOMATICA = ABAP_FALSE.
    ENDTRY.

    IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_FILIAL EQ ABAP_TRUE.
      ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL = ZIF_CARGA=>ST_RS_ACEITE_MANUT_ESPERA.
    ELSE.
      ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL = ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA.
    ENDIF.

    IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_COMERCIAL EQ ABAP_TRUE.
      ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_COMERCIAL = ZIF_CARGA=>ST_RS_ACEITE_MANUT_ESPERA.
    ELSE.
      ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_COMERCIAL = ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA.
    ENDIF.

    IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_FISCAL EQ ABAP_TRUE.
      ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FISCAL = ZIF_CARGA=>ST_RS_ACEITE_MANUT_ESPERA.
    ELSE.
      ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FISCAL = ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA.
    ENDIF.

    CASE E_APROVACAO_AUTOMATICA.
      WHEN ABAP_FALSE.
        ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL = ZIF_CARGA=>ST_RS_ACEITE_MANUT_ESPERA.
        ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-TP_STATUS        = ZIF_CARGA=>ST_STATUS_MANUT_ENVIADO.
        ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_STATUS        = E_NEW_WORKFLOW-STATUS.
        ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_CODE          = E_NEW_WORKFLOW-CODE.
        ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_DETAIL        = E_NEW_WORKFLOW-DETAIL.
        ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_RECORDKEY     = E_NEW_WORKFLOW-RECORDKEY.
        ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-SE_RECORDID      = E_NEW_WORKFLOW-RECORDID.
        ME->ZIF_CARGA~CK_ALTEROU = ABAP_TRUE.
      WHEN ABAP_TRUE.
        ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL = ZIF_CARGA=>ST_RS_ACEITE_MANUT_ESPERA.
        ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-TP_STATUS        = ZIF_CARGA=>ST_STATUS_MANUT_ENVIADO.
        ME->ZIF_CARGA~CK_ALTEROU = ABAP_TRUE.
    ENDCASE.

    CLEAR: LC_INJECT.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_CRIA_MANUTENCAO.

    R_INSTANCE = ME.

    ME->SET_REGISTRO( I_ID_CARGA  = I_ID_CARGA I_NO_ENQUEUE = ABAP_TRUE ).

*    DATA(NOTAS) = ME->ZIF_CARGA~DOCUMENTO_FISCAL[].
*    DELETE NOTAS WHERE DOCNUM IS INITIAL.
*    IF NOTAS[] IS NOT INITIAL.
*      SELECT * INTO TABLE @DATA(IT_EXPORTACAO)
*        FROM ZDOC_NF_PRODUTOR
*         FOR ALL ENTRIES IN @NOTAS
*       WHERE DOCNUM_PROD EQ @NOTAS-DOCNUM.
*    ENDIF.
*
*    IF IT_EXPORTACAO[] IS NOT INITIAL.
*      READ TABLE IT_EXPORTACAO INTO DATA(WA_EXPORTACAO) INDEX 1.
*
*      RAISE EXCEPTION TYPE ZCX_CARGA
*        EXPORTING
*          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NF_EXPORTADA-MSGID
*                            MSGNO = ZCX_CARGA=>ZCX_NF_EXPORTADA-MSGNO
*                            ATTR1 = WA_EXPORTACAO-DOCNUM_PROD
*                            ATTR2 = WA_EXPORTACAO-VBELN )
*          MSGTY  = 'E'
*          MSGID  = ZCX_CARGA=>ZCX_NF_EXPORTADA-MSGID
*          MSGNO  = ZCX_CARGA=>ZCX_NF_EXPORTADA-MSGNO
*          MSGV1  = CONV #( WA_EXPORTACAO-DOCNUM_PROD )
*          MSGV2  = CONV #( WA_EXPORTACAO-VBELN ).
*    ENDIF.

    ME->ZIF_CARGA~AT_MANUTENCAO   = ABAP_TRUE.
    CLEAR: ME->ZIF_CARGA~CARGA-TP_STATUS.

    ME->ZIF_CARGA~SET_ABRIR(
      EXPORTING I_NR_SAFRA  = ME->CARGA-NR_SAFRA
                I_ID_BUKRS  = ME->CARGA-ID_BUKRS
                I_ID_BRANCH = ME->CARGA-ID_BRANCH
    ).

    DELETE ME->RESULTADO WHERE ID_CLASSIFICACAO NE ME->CARGA-ID_CLASSIFICACAO.

*    LOOP AT ME->RESULTADO ASSIGNING FIELD-SYMBOL(<FS_RESULTADO>).
*      CLEAR: <FS_RESULTADO>-ID_CLASSIFICACAO.
*    ENDLOOP.
*
*    LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_NOTA>).
*      CLEAR: <FS_NOTA>-ID_CLASSIFICACAO.
*    ENDLOOP.

    DELETE ADJACENT DUPLICATES FROM ME->RESULTADO COMPARING ALL FIELDS.

    CLEAR:
    "ME->CARGA-ID_CLASSIFICACAO,
    "ME->CLASSIFICACAO-ID_CLASSIFICACAO,
    ME->CLASSIFICACAO_NOTAS[],
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO.

    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-NR_SAFRA            = ME->CARGA-NR_SAFRA.
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_BUKRS            = ME->CARGA-ID_BUKRS.
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_BRANCH           = ME->CARGA-ID_BRANCH.
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-TP_STATUS           = ZIF_CARGA=>ST_STATUS_MANUT_ABERTO.
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_FILIAL    = ABAP_FALSE.
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_FISCAL    = ABAP_FALSE.
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_ACEITE_COMERCIAL = ABAP_FALSE.
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FILIAL    = ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA.
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_FISCAL    = ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA.
    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-RS_ACEITE_COMERCIAL = ZIF_CARGA=>ST_RS_ACEITE_MANUT_NAO_GERA.

    ME->ZIF_CARGA~CK_DIGITADO_UMIDADE    = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_IMPUREZA   = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_ARDIDO     = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_AVARIADO   = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_QUEBRADO   = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_ESVERDEADO = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_CARUNCHADO = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_DENQUEUE.

    R_CARGA = ME.

    CHECK ME->ZIF_CARGA~AT_NAO_GERAR_BLOQUEIOS EQ ABAP_FALSE.

    CALL FUNCTION 'ZDENQUEUE_CARGA'
      EXPORTING
        ID_CARGA = I_CARGA.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_EMITIR_DOC_SAIDAS.

    DATA: NUMBER           TYPE TBTCJOB-JOBCOUNT,
          PRINT_PARAMETERS TYPE PRI_PARAMS.

    R_CARGA = ME.

    TRY .
        ME->ZIF_CARGA~GET_CK_SAIDA_AUTOMATICA( ).
      CATCH ZCX_CARGA.
        EXIT.
    ENDTRY.

    ZCL_CARGA_SAIDA=>ZIF_CARGA~GERAR_CARGA_SAIDA( I_CARGA_ENTRADA = ME
      )->GET_INFO_ALV_APRESENTACAO(
      IMPORTING
        E_APRESENTACAO = DATA(E_APRESENTACAO)
      ).

    IF 1 = 2.
      SUBMIT ZMMR126_JOB WITH PIDCARGA EQ E_APRESENTACAO-CARGA-ID_CARGA AND RETURN.
    ELSE.

      DATA(LC_USER_JOB) = ZCL_JOB=>GET_USER_JOB( ).

      ME->ZIF_CARGA~GET_NAME_JOB_SAIDA_AUTOMATICA( IMPORTING E_NAME = DATA(E_NAME) ).

      TRY .
          ZCL_JOB=>GET_JOB_EXECUCAO( I_JOB_NAME = E_NAME ).
          EXIT.
        CATCH ZCX_JOB.
      ENDTRY.

      TRY .
          ZCL_JOB=>GET_JOB_ESCALONADO( I_JOB_NAME = E_NAME ).
          EXIT.
        CATCH ZCX_JOB.
      ENDTRY.

      CALL FUNCTION 'JOB_OPEN'
        EXPORTING
          JOBNAME          = E_NAME
        IMPORTING
          JOBCOUNT         = NUMBER
        EXCEPTIONS
          CANT_CREATE_JOB  = 1
          INVALID_JOB_DATA = 2
          JOBNAME_MISSING  = 3
          OTHERS           = 4.

      IF SY-SUBRC IS INITIAL.
        SUBMIT ZMMR126_JOB TO SAP-SPOOL SPOOL PARAMETERS PRINT_PARAMETERS
        WITHOUT SPOOL DYNPRO VIA JOB E_NAME NUMBER NUMBER
          WITH PIDCARGA EQ E_APRESENTACAO-CARGA-ID_CARGA
          USER LC_USER_JOB
           AND RETURN.

        IF SY-SUBRC IS INITIAL.
          CALL FUNCTION 'JOB_CLOSE'
            EXPORTING
              JOBCOUNT             = NUMBER
              JOBNAME              = E_NAME
              STRTIMMED            = 'X'
            EXCEPTIONS
              CANT_START_IMMEDIATE = 1
              INVALID_STARTDATE    = 2
              JOBNAME_MISSING      = 3
              JOB_CLOSE_FAILED     = 4
              JOB_NOSTEPS          = 5
              JOB_NOTEX            = 6
              LOCK_FAILED          = 7
              OTHERS               = 8.

          IF SY-SUBRC IS NOT INITIAL.
            DATA(CK_ERRO) = ABAP_TRUE.
            MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO DATA(MTEXT) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
            CALL FUNCTION 'BP_JOB_DELETE'
              EXPORTING
                JOBCOUNT                 = NUMBER
                JOBNAME                  = E_NAME
              EXCEPTIONS
                CANT_DELETE_EVENT_ENTRY  = 1
                CANT_DELETE_JOB          = 2
                CANT_DELETE_JOBLOG       = 3
                CANT_DELETE_STEPS        = 4
                CANT_DELETE_TIME_ENTRY   = 5
                CANT_DERELEASE_SUCCESSOR = 6
                CANT_ENQ_PREDECESSOR     = 7
                CANT_ENQ_SUCCESSOR       = 8
                CANT_ENQ_TBTCO_ENTRY     = 9
                CANT_UPDATE_PREDECESSOR  = 10
                CANT_UPDATE_SUCCESSOR    = 11
                COMMIT_FAILED            = 12
                JOBCOUNT_MISSING         = 13
                JOBNAME_MISSING          = 14
                JOB_DOES_NOT_EXIST       = 15
                JOB_IS_ALREADY_RUNNING   = 16
                NO_DELETE_AUTHORITY      = 17
                OTHERS                   = 18.
            IF SY-SUBRC IS NOT INITIAL.
              CK_ERRO = ABAP_FALSE.
            ENDIF.
          ENDIF.
        ELSE.
          CK_ERRO = ABAP_TRUE.
          MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
          CALL FUNCTION 'BP_JOB_DELETE'
            EXPORTING
              JOBCOUNT                 = NUMBER
              JOBNAME                  = E_NAME
            EXCEPTIONS
              CANT_DELETE_EVENT_ENTRY  = 1
              CANT_DELETE_JOB          = 2
              CANT_DELETE_JOBLOG       = 3
              CANT_DELETE_STEPS        = 4
              CANT_DELETE_TIME_ENTRY   = 5
              CANT_DERELEASE_SUCCESSOR = 6
              CANT_ENQ_PREDECESSOR     = 7
              CANT_ENQ_SUCCESSOR       = 8
              CANT_ENQ_TBTCO_ENTRY     = 9
              CANT_UPDATE_PREDECESSOR  = 10
              CANT_UPDATE_SUCCESSOR    = 11
              COMMIT_FAILED            = 12
              JOBCOUNT_MISSING         = 13
              JOBNAME_MISSING          = 14
              JOB_DOES_NOT_EXIST       = 15
              JOB_IS_ALREADY_RUNNING   = 16
              NO_DELETE_AUTHORITY      = 17
              OTHERS                   = 18.
          IF SY-SUBRC IS NOT INITIAL.
            CK_ERRO = ABAP_FALSE.
          ENDIF.
        ENDIF.
      ENDIF.

*      "Aguardar execução do job
*      ZCL_JOB=>GET_INSTANCE(
*       )->SET_KEY_JOB( I_JOBNAME = NAME I_JOBCOUNT = NUMBER
*       )->GET_WAIT_JOB_EXEC(
*       ).

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ENQUEUE.

    CHECK ME->ZIF_CARGA~AT_NAO_GERAR_BLOQUEIOS EQ ABAP_FALSE.

    CALL FUNCTION 'ZENQUEUE_CARGA'
      EXPORTING
        ID_CARGA       = I_CARGA
      EXCEPTIONS
        FOREIGN_LOCK   = 1
        SYSTEM_FAILURE = 2
        OTHERS         = 3.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ESTORNA_FRETE_ENTRADA.

    R_CARGA = ME.

    CHECK ME->CARGA-CK_FRETE_ENTRADA EQ ABAP_TRUE.

    LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<ENTRADA_NOTA>) WHERE AV_VBELN IS NOT INITIAL.

      TRY .
          ZCL_DOC_FISCAL_FT_ENTRADA=>ZIF_DOC_FISCAL_FT_ENTRADA~GET_INSTANCE(
            )->SET_REGISTRO(
              EXPORTING
                I_EBELN                   = <ENTRADA_NOTA>-PO_NUMBER    " Nº do documento de compras
                I_EBELP                   = <ENTRADA_NOTA>-PO_ITEM      " Nº item do documento de compra
                I_VBELN                   = <ENTRADA_NOTA>-AV_VBELN
            )->SET_ESTORNAR_DOCUMENTOS(
            ).

          CLEAR: <ENTRADA_NOTA>-PO_NUMBER,
                 <ENTRADA_NOTA>-PO_ITEM,
                 <ENTRADA_NOTA>-AV_VBELN,
                 <ENTRADA_NOTA>-FTE_DOCNUM,
                 <ENTRADA_NOTA>-FTE_FKNUM,
                 <ENTRADA_NOTA>-FTE_TKNUM,
                 <ENTRADA_NOTA>-FTE_VBELN_VA,
                 <ENTRADA_NOTA>-FTE_VBELN_VF.

        CATCH ZCX_DOC_FISCAL_FT_ENTRADA INTO DATA(ERRO_FT_ENTRADA).    "

          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ERRO_FT_ENTRADA->MSGID
                                MSGNO = ERRO_FT_ENTRADA->MSGNO
                                ATTR1 = CONV #( ERRO_FT_ENTRADA->MSGV1 )
                                ATTR2 = CONV #( ERRO_FT_ENTRADA->MSGV2 )
                                ATTR3 = CONV #( ERRO_FT_ENTRADA->MSGV3 )
                                ATTR4 = CONV #( ERRO_FT_ENTRADA->MSGV4 ) )
              MSGTY  = 'E'
              MSGID  = ERRO_FT_ENTRADA->MSGID
              MSGNO  = ERRO_FT_ENTRADA->MSGNO
              MSGV1  = ERRO_FT_ENTRADA->MSGV1
              MSGV2  = ERRO_FT_ENTRADA->MSGV2
              MSGV3  = ERRO_FT_ENTRADA->MSGV3
              MSGV4  = ERRO_FT_ENTRADA->MSGV4.

      ENDTRY.

    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_EXCLUIR_BLOCO.

    R_CARGA = ME.

    DELETE ME->ZIF_CARGA~BLOCOS
     WHERE NR_ORDEM_VENDA EQ I_BLOCO-NR_ORDEM_VENDA
       AND NR_PEDIDO_COMPRA EQ I_BLOCO-NR_PEDIDO_COMPRA
       AND ZSEQ_INST EQ I_BLOCO-ZSEQ_INST
       AND OBJEK EQ I_BLOCO-OBJEK
       AND OBJECTTABLE EQ I_BLOCO-OBJECTTABLE.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_EXCLUIR_ORDEM_VENDA.

    R_CARGA = ME.

    READ TABLE ME->ZIF_CARGA~ORDEM_VENDA WITH KEY NR_ORDEM_VENDA = I_VBELN INTO DATA(WA_ORDEM_VENDA).

    CHECK SY-SUBRC IS INITIAL.

    "Elimina Ordem de Venda
    DELETE ME->ZIF_CARGA~ORDEM_VENDA WHERE NR_ORDEM_VENDA = I_VBELN.

    "Elimina Romaneios de Saída da Ordem de Venda
    DELETE ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS WHERE NR_ORDEM_VENDA = I_VBELN.

    "Elimina Blocos da Ordem de Saída
    DELETE ME->ZIF_CARGA~BLOCOS WHERE NR_ORDEM_VENDA = I_VBELN.

    IF ME->CARGA-ID_ORDEM IS NOT INITIAL AND WA_ORDEM_VENDA-ID_ORDEM EQ ME->CARGA-ID_ORDEM.
      CLEAR: ME->CARGA-ID_ORDEM.
    ENDIF.

    READ TABLE ME->ZIF_CARGA~ORDEM_VENDA INDEX 1 INTO DATA(WA_ORDEM_VENDA_NEW).

    CHECK SY-SUBRC IS INITIAL.

    ME->CARGA-ID_ORDEM = WA_ORDEM_VENDA_NEW-ID_ORDEM.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_FECHAR.

    DATA: WA_ENTRADA  TYPE AWKEY,
          IT_ENTRADAS TYPE TABLE OF AWKEY,
          I_NOTA      TYPE ZDE_INFO_NOTA.

    E_FECHOU = ABAP_FALSE.

    R_CARGA = ME.

    CLEAR: ME->ZIF_CARGA~CK_EXECUTAR_REVERSAO_ENTRADA. "BUG 34154

    CHECK NOT ( ME->CARGA-CK_ENVIADO_OPUS EQ ABAP_TRUE AND ME->CARGA-CK_RECEBIDO_OPUS EQ ABAP_FALSE ).

    CASE ME->CARGA-TP_STATUS.
      WHEN ZIF_CARGA=>ST_STATUS_CONFERIDO.

        TRY .
            ME->ZIF_CARGA~GET_CK_SAIDA_AUTOMATICA( ).
            DATA(LC_CK_SAIDA_AUTO) = ABAP_TRUE.
          CATCH ZCX_CARGA.
            LC_CK_SAIDA_AUTO = ABAP_FALSE.
        ENDTRY.

        IF LC_CK_SAIDA_AUTO EQ ABAP_TRUE.
          ME->ZIF_CARGA~GET_NAME_JOB_SAIDA_AUTOMATICA( IMPORTING E_NAME = DATA(E_NAME) ).

          TRY .
              ZCL_JOB=>GET_JOB_EXECUCAO( I_JOB_NAME = E_NAME ).
              RAISE EXCEPTION TYPE ZCX_CARGA
                EXPORTING
                  TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SAIDA_AUTOMATICA_EXEC-MSGID MSGNO = ZCX_CARGA=>ZCX_SAIDA_AUTOMATICA_EXEC-MSGNO )
                  MSGTY  = 'E'
                  MSGID  = ZCX_CARGA=>ZCX_SAIDA_AUTOMATICA_EXEC-MSGID
                  MSGNO  = ZCX_CARGA=>ZCX_SAIDA_AUTOMATICA_EXEC-MSGNO.
            CATCH ZCX_JOB.
          ENDTRY.

          TRY .
              ZCL_JOB=>GET_JOB_ESCALONADO( I_JOB_NAME = E_NAME ).
              RAISE EXCEPTION TYPE ZCX_CARGA
                EXPORTING
                  TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SAIDA_AUTOMATICA_EXEC-MSGID MSGNO = ZCX_CARGA=>ZCX_SAIDA_AUTOMATICA_EXEC-MSGNO )
                  MSGTY  = 'E'
                  MSGID  = ZCX_CARGA=>ZCX_SAIDA_AUTOMATICA_EXEC-MSGID
                  MSGNO  = ZCX_CARGA=>ZCX_SAIDA_AUTOMATICA_EXEC-MSGNO.
            CATCH ZCX_JOB.
          ENDTRY.
        ENDIF.

      WHEN ZIF_CARGA=>ST_STATUS_FECHADO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGNO.
      WHEN ZIF_CARGA=>ST_STATUS_CANCELADA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO.
    ENDCASE.

    CASE ME->CARGA-TP_STATUS.
      WHEN ZIF_CARGA=>ST_STATUS_ABERTO.

        ME->VALIDAR_REGISTRO( IMPORTING E_VALIDOU = DATA(E_VALIDOU) ).

        IF NOT E_VALIDOU EQ ABAP_TRUE.
          ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_ABERTO.

          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO
                                ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
              MSGTY  = 'E'
              MSGID  = SY-MSGID
              MSGNO  = SY-MSGNO
              MSGV1  = SY-MSGV1
              MSGV2  = SY-MSGV2
              MSGV3  = SY-MSGV3
              MSGV4  = SY-MSGV4.
        ENDIF.

        ME->VERIF_ORDEM_CARREGAMENTO( I_CK_VERIFICAR_CARGA = ABAP_TRUE ).

        "Verificar Entradas Própria


        "Verificar Pagamento de Frete na Entrada
        IF ME->CARGA-ID_ORDEM IS NOT INITIAL AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

*          IF ME->CARGA-CK_FRETE_ENTRADA EQ ABAP_TRUE.
*
*            LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_ENTRADA>).
*
*              CLEAR: I_NOTA.
*              I_NOTA-NFE            = COND STRING( WHEN <FS_ENTRADA>-ID_MOD_FISCAL EQ ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO THEN ABAP_TRUE ELSE ABAP_FALSE ).
*              I_NOTA-MODELO         = <FS_ENTRADA>-ID_MOD_FISCAL.
*              I_NOTA-SERIE          = <FS_ENTRADA>-NM_SERIE.
*              I_NOTA-NUMERO         = <FS_ENTRADA>-NR_NOTA.
*              I_NOTA-FORNECEDOR     = <FS_ENTRADA>-ID_FORNECEDOR.
*              I_NOTA-DTEMISSAO      = <FS_ENTRADA>-DT_EMISSAO.
*              I_NOTA-VL_BC          = <FS_ENTRADA>-NR_VALOR.
*              I_NOTA-VL_PRODUTOS    = <FS_ENTRADA>-NR_VALOR.
*              I_NOTA-VL_NOTA_FISCAL = <FS_ENTRADA>-NR_VALOR.
*              I_NOTA-MATERIAL       = ME->CARGA-ID_PRODUTO.
*              I_NOTA-QUANTIDADE     = <FS_ENTRADA>-NR_QUANTIDADE.
*              I_NOTA-UNIDADE        = 'KG'.
*              I_NOTA-CFOP           = <FS_ENTRADA>-CFOP && '/AA'.
*              I_NOTA-LC_RETIRADA    = <FS_ENTRADA>-ID_ENTREGUE_POR.
*              I_NOTA-ID_CARGA       = <FS_ENTRADA>-ID_CARGA.
*              I_NOTA-ID_NOTA        = <FS_ENTRADA>-ID_NOTA.
*
*              TRY .
*                  "Gerar Frete de Entrada
*                  ZCL_DOC_FISCAL_FT_ENTRADA=>ZIF_DOC_FISCAL_FT_ENTRADA~GET_INSTANCE(
*                     )->SET_NEW_DOCUMENTO_ORDEM_CARREG(
*                          EXPORTING
*                            I_ID_ORDEM        = ME->CARGA-ID_ORDEM
*                            I_ID_LOCAL_COLETA = CONV #( COND STRING( WHEN <FS_ENTRADA>-ID_ENTREGUE_POR IS NOT INITIAL THEN <FS_ENTRADA>-ID_ENTREGUE_POR ELSE <FS_ENTRADA>-ID_FORNECEDOR ) )
*                            I_PESO_LIQ        = CONV #( <FS_ENTRADA>-NR_QUANTIDADE )
*                            I_NOTA_FISCAL     = I_NOTA    " Inf. de Nota Fiscal de Mercadoria
*                            "I_ID_ROTA_REPOM           =     " Identificador de Rota REPOM
*                            "I_ID_PERCURSO_REPOM       =     " Identificador de Percurso REPOM
*                            "I_NR_CARTAO_REPOM         =     " Cartão REPOM
*                           IMPORTING
*                             E_EBELN = <FS_ENTRADA>-PO_NUMBER
*                             E_EBELP = <FS_ENTRADA>-PO_ITEM
*                             E_VBELN = <FS_ENTRADA>-AV_VBELN
*                             E_DOC_TRANSP = <FS_ENTRADA>-FTE_TKNUM
*                             E_FKNUM = <FS_ENTRADA>-FTE_FKNUM
*                             E_OV_FRETE = <FS_ENTRADA>-FTE_VBELN_VA
*                             E_FATURA_FRETE = <FS_ENTRADA>-FTE_VBELN_VF
*                             E_NRO_NF_FRETE = <FS_ENTRADA>-FTE_DOCNUM
*                     ).
*
*                CATCH ZCX_DOC_FISCAL_FT_ENTRADA INTO DATA(ERRO_FT_ENTRADA).    "
*                  "Volta Carga para Aberta
*                  ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_ABERTO.
*                  ME->GRAVAR_REGISTRO( ).
*
*                  RAISE EXCEPTION TYPE ZCX_CARGA
*                    EXPORTING
*                      TEXTID = VALUE #( MSGID = ERRO_FT_ENTRADA->MSGID
*                                        MSGNO = ERRO_FT_ENTRADA->MSGNO
*                                        ATTR1 = CONV #( ERRO_FT_ENTRADA->MSGV1 )
*                                        ATTR2 = CONV #( ERRO_FT_ENTRADA->MSGV2 )
*                                        ATTR3 = CONV #( ERRO_FT_ENTRADA->MSGV3 )
*                                        ATTR4 = CONV #( ERRO_FT_ENTRADA->MSGV4 ) )
*                      MSGTY  = 'E'
*                      MSGID  = ERRO_FT_ENTRADA->MSGID
*                      MSGNO  = ERRO_FT_ENTRADA->MSGNO
*                      MSGV1  = ERRO_FT_ENTRADA->MSGV1
*                      MSGV2  = ERRO_FT_ENTRADA->MSGV2
*                      MSGV3  = ERRO_FT_ENTRADA->MSGV3
*                      MSGV4  = ERRO_FT_ENTRADA->MSGV4.
*              ENDTRY.
*
*            ENDLOOP.
*
*          ENDIF.

          ZCL_ORDEM_CARREGAMENTO=>SET_FECHAR( I_ID_ORDEM = ME->CARGA-ID_ORDEM ).
        ENDIF.

        ME->ZIF_CARGA~SET_AJUSTAR_RAT_DESC_GERAL( ).

        ME->CARGA-DT_MOVIMENTO  = SY-DATLO.
        ME->CARGA-TP_STATUS     = ZIF_CARGA=>ST_STATUS_FECHADO.
        ME->CARGA-DT_FECHAMENTO = SY-DATLO.
        ME->CARGA-HR_FECHAMENTO = SY-TIMLO.
        ME->CARGA-US_FECHAMENTO = SY-UNAME.
        ME->GRAVAR_REGISTRO( IMPORTING E_GRAVOU  = E_FECHOU ).

      WHEN ZIF_CARGA=>ST_STATUS_CONFERIDO.

        "Reabrir para Ajustes
        ME->CK_ALTEROU = ABAP_TRUE.

        ME->ZIF_CARGA~CK_EXECUTAR_REVERSAO_ENTRADA = ABAP_TRUE. "BUG 34154

        ME->VALIDAR_REGISTRO( IMPORTING E_VALIDOU = E_VALIDOU ).

        IF NOT E_VALIDOU EQ ABAP_TRUE.
          ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_CONFERIDO.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO
                                ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
              MSGTY  = 'E'
              MSGID  = SY-MSGID
              MSGNO  = SY-MSGNO
              MSGV1  = SY-MSGV1
              MSGV2  = SY-MSGV2
              MSGV3  = SY-MSGV3
              MSGV4  = SY-MSGV4.
        ENDIF.

        TRY .
            ME->VERIF_ORDEM_CARREGAMENTO( I_CK_VERIFICAR_CARGA = ABAP_TRUE ).
          CATCH ZCX_CARGA INTO DATA(EX_CARGA).
            EX_CARGA->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'S' ).
            MESSAGE ID SY-MSGID TYPE 'W' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
          CATCH ZCX_ORDEM_CARREGAMENTO INTO DATA(EX_ORDEM_CARREGAMENTO).
            EX_ORDEM_CARREGAMENTO->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'S' ).
            MESSAGE ID SY-MSGID TYPE 'W' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDTRY.

        IF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.
          ME->ZIF_CARGA~GET_CK_EXCLUIR_ROMANEIO_SAIDA( EXPORTING I_CK_OPUS = ABAP_FALSE
           )->SEND_ESTORNO_CARGA_TO_OPUS(
           )->GRAVAR_REGISTRO(
           )->GET_RECUPERAR_ENTRADA(
           )->SET_PROCESSAR_ESTORNO_SOBRA(
           )->SET_GERAR_ESTORNO_ESTOQUE(
           )->SET_PROCESSAR_ESTORNO( IMPORTING E_ESTORNOU = DATA(E_ESTORNOU)
           ).
          CHECK E_ESTORNOU EQ ABAP_TRUE.
        ELSE.
          ME->ZIF_CARGA~SET_CANCELAR_SOLIC_MANUT( ).
          ME->CK_ALTEROU = ABAP_TRUE.
        ENDIF.

        ME->CARGA-TP_STATUS         = ZIF_CARGA=>ST_STATUS_FECHADO.
        ME->CARGA-DT_FECHAMENTO     = SY-DATLO.
        ME->CARGA-HR_FECHAMENTO     = SY-TIMLO.
        ME->CARGA-US_FECHAMENTO     = SY-UNAME.

        LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_NOTA>).
          CLEAR: <FS_NOTA>-CH_REFERENCIA_ENT, <FS_NOTA>-NR_ROMANEIO_ENT.
        ENDLOOP.

        ME->GRAVAR_REGISTRO( IMPORTING E_GRAVOU  = E_FECHOU ).

        LOOP AT IT_ENTRADAS INTO WA_ENTRADA.
          ME->DESBLOQUEAR_ENTRADA( I_OBJ_KEY = WA_ENTRADA ).
        ENDLOOP.

    ENDCASE.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_GERAR_ENTRADA_ESTOQUE.

    DATA: ENTRADAS        TYPE TABLE OF ZMMT_EE_ZGR,
          ENTRADAS_IMP    TYPE TABLE OF ZMMT_EEIMP_ZGR,
          WA_ENTRADAS_IMP TYPE ZMMT_EEIMP_ZGR,
          LC_CK_NFE	      TYPE J_1BNFE,
          I_NF_NUMBER	    TYPE J_1BNFDOC-NFNUM,
          OBJ_ZCL_UTIL_SD TYPE REF TO ZCL_UTIL_SD,
          I_DATA          TYPE GDATU_INV,
          CK_GERAR_NOVA   TYPE CHAR01,
          WA_NOTA         TYPE J_1BNFDOC.

    R_CARGA = ME.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

    CHECK NOT ( ME->CARGA-CK_ENVIADO_OPUS  EQ ABAP_TRUE AND
                ME->CARGA-CK_RECEBIDO_OPUS EQ ABAP_FALSE ).

    I_DATA = ME->CARGA-DT_MOVIMENTO.

    CHECK ME->CARGA-TP_STATUS EQ ZIF_CARGA=>ST_STATUS_CONFERIDO.

    CREATE OBJECT OBJ_ZCL_UTIL_SD.
    OBJ_ZCL_UTIL_SD->SET_DATA(  EXPORTING I_DATA  = I_DATA ).
    OBJ_ZCL_UTIL_SD->SET_KURST( EXPORTING I_KURST = 'B' ).
    OBJ_ZCL_UTIL_SD->SET_WAERK( EXPORTING I_WAERK = 'BRL' ).
    OBJ_ZCL_UTIL_SD->SET_TCURR( EXPORTING I_TCURR = 'USD' ).
    DATA(E_UKURS) = OBJ_ZCL_UTIL_SD->TAXA_CAMBIO( ).

    CLEAR: ENTRADAS, ENTRADAS[], ENTRADAS_IMP, ENTRADAS_IMP[].

    ME->ZIF_CARGA~GET_RECUPERAR_ENTRADA( ).

    LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_NOTA>).

      ME->ZIF_CARGA~SET_GERA_IMPOSTO_NOTA( EXPORTING I_NOTA = <FS_NOTA> ).

      IF <FS_NOTA>-OBJ_KEY_ENTRADA IS NOT INITIAL.

        SELECT SINGLE * INTO @DATA(ENTRADA)
          FROM ZMMT_EE_ZGR
         WHERE ID_CARGA   EQ @<FS_NOTA>-ID_CARGA
           AND ID_NOTA    EQ @<FS_NOTA>-ID_NOTA
           AND OBJ_KEY    EQ @<FS_NOTA>-OBJ_KEY_ENTRADA
           AND OBJ_KEY    NE @SPACE .

        IF SY-SUBRC IS INITIAL.
          ME->ZIF_CARGA~GET_DOCUMENTO_ENT_ESTORNADO(
            EXPORTING
              I_OBJ_KEY   = <FS_NOTA>-OBJ_KEY_ENTRADA
             IMPORTING
               R_ESTORNADO = DATA(R_ESTORNADO) ).

          CK_GERAR_NOVA = R_ESTORNADO.

          IF R_ESTORNADO EQ ABAP_FALSE.
            CASE ENTRADA-ST_ESTORNO.
              WHEN ZIF_CARGA=>ST_STATUS_ESTORNO_SEM.
              WHEN ZIF_CARGA=>ST_STATUS_ESTORNO_SOLICITADO.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_PENDENTE-MSGID MSGNO = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_PENDENTE-MSGNO )
                    MSGTY  = 'E'
                    MSGID  = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_PENDENTE-MSGID
                    MSGNO  = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_PENDENTE-MSGNO.
              WHEN ZIF_CARGA=>ST_STATUS_ESTORNO_EXECUTADO.
                CK_GERAR_NOVA = ABAP_TRUE.
              WHEN ZIF_CARGA=>ST_STATUS_ESTORNO_ERRO.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_ERRO-MSGID MSGNO = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_ERRO-MSGNO )
                    MSGTY  = 'E'
                    MSGID  = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_ERRO-MSGID
                    MSGNO  = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_ERRO-MSGNO.
            ENDCASE.
          ELSE.
            CLEAR: <FS_NOTA>-OBJ_KEY_ENTRADA.
          ENDIF.
        ENDIF.

        IF CK_GERAR_NOVA NE ABAP_TRUE.
          SELECT SINGLE * INTO @DATA(DOCUMENTOS)
            FROM ZMMT_EE_ZGR_DOCS
           WHERE OBJ_KEY EQ @ENTRADA-OBJ_KEY
             AND OBJ_KEY NE @SPACE.

          IF DOCUMENTOS-PO_NUMBER IS NOT INITIAL OR
             DOCUMENTOS-AV_VBELN  IS NOT INITIAL OR
             DOCUMENTOS-MM_MBLNR  IS NOT INITIAL OR
             DOCUMENTOS-MM_MJAHR  IS NOT INITIAL OR
             DOCUMENTOS-FT_BELNR  IS NOT INITIAL OR
             DOCUMENTOS-FT_GJAHR  IS NOT INITIAL OR
             DOCUMENTOS-DOCNUM    IS NOT INITIAL.
            CONTINUE.
          ENDIF.
        ENDIF.

      ELSE.
        ME->CK_ALTEROU = ABAP_TRUE.
        CK_GERAR_NOVA = ABAP_TRUE.
      ENDIF.

      CASE <FS_NOTA>-ID_MOD_FISCAL.
        WHEN ZIF_CARGA=>ST_MODEL_FISCAL_PAPEL.
          LC_CK_NFE = ABAP_FALSE.
        WHEN ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO.
          LC_CK_NFE = ABAP_TRUE.
      ENDCASE.

      SELECT SINGLE * INTO @DATA(WA_ENTRADA)
        FROM ZSDT0001TE
       WHERE ID_ENTRADA EQ @<FS_NOTA>-ID_ENTRADA
         AND ID_EMPRESA EQ @ME->CARGA-ID_BUKRS
         AND CK_NFE     EQ @LC_CK_NFE.

      SELECT SINGLE * INTO @DATA(WA_J_1BAA)
        FROM J_1BAA
       WHERE NFTYPE EQ @WA_ENTRADA-CT_NOTA.

      IF CK_GERAR_NOVA EQ ABAP_TRUE.

        CASE <FS_NOTA>-ID_MOD_FISCAL.
          WHEN ZIF_CARGA=>ST_MODEL_FISCAL_PAPEL.
            LC_CK_NFE = ABAP_FALSE.
          WHEN ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO.
            LC_CK_NFE = ABAP_TRUE.
        ENDCASE.

        IF WA_J_1BAA-FORM IS INITIAL.

          "Verifica se Documento já foi lançado (MIRO)
          CASE <FS_NOTA>-ID_MOD_FISCAL .
            WHEN ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO.

              WA_NOTA-MODEL	 = ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO.
              WA_NOTA-PARID  = <FS_NOTA>-ID_FORNECEDOR.
              WA_NOTA-SERIES = <FS_NOTA>-NM_SERIE.
              WA_NOTA-FORM   = SPACE.
              WA_NOTA-CANCEL = SPACE.
              WA_NOTA-NFE    = ABAP_TRUE.
              WA_NOTA-NFENUM = <FS_NOTA>-NR_NOTA.

              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  INPUT  = WA_NOTA-NFENUM
                IMPORTING
                  OUTPUT = WA_NOTA-NFENUM.

              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  INPUT  = WA_NOTA-SERIES
                IMPORTING
                  OUTPUT = WA_NOTA-SERIES.

              SELECT SINGLE * INTO WA_NOTA
                FROM J_1BNFDOC
               WHERE DOCTYP NE '5'
                 AND MODEL  EQ WA_NOTA-MODEL
                 AND PARID  EQ WA_NOTA-PARID
                 AND SERIES EQ WA_NOTA-SERIES
                 AND FORM   EQ WA_NOTA-FORM
                 AND CANCEL EQ WA_NOTA-CANCEL
                 AND NFE    EQ WA_NOTA-NFE
                 AND NFENUM EQ WA_NOTA-NFENUM.

              IF SY-SUBRC IS NOT INITIAL.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
                  EXPORTING
                    INPUT  = WA_NOTA-SERIES
                  IMPORTING
                    OUTPUT = WA_NOTA-SERIES.

                SELECT SINGLE * INTO WA_NOTA
                  FROM J_1BNFDOC
                 WHERE DOCTYP NE '5'
                   AND MODEL  EQ WA_NOTA-MODEL
                   AND PARID  EQ WA_NOTA-PARID
                   AND SERIES EQ WA_NOTA-SERIES
                   AND FORM   EQ WA_NOTA-FORM
                   AND CANCEL EQ WA_NOTA-CANCEL
                   AND NFE    EQ WA_NOTA-NFE
                   AND NFENUM EQ WA_NOTA-NFENUM.

              ENDIF.

              IF SY-SUBRC IS INITIAL.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_FISCAL_LANCADA-MSGID
                                      MSGNO = ZCX_CARGA=>ZCX_NOTA_FISCAL_LANCADA-MSGNO
                                      ATTR1 = CONV #( ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO )
                                      ATTR2 = CONV #( <FS_NOTA>-ID_FORNECEDOR )
                                      ATTR3 = CONV #( <FS_NOTA>-NR_NOTA )
                                      ATTR4 = CONV #( <FS_NOTA>-NM_SERIE )  )
                    MSGTY  = 'E'
                    MSGNO  = ZCX_CARGA=>ZCX_NOTA_FISCAL_LANCADA-MSGNO
                    MSGID  = ZCX_CARGA=>ZCX_NOTA_FISCAL_LANCADA-MSGID
                    MSGV1  = CONV #( ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO )
                    MSGV2  = CONV #( <FS_NOTA>-ID_FORNECEDOR )
                    MSGV3  = CONV #( <FS_NOTA>-NR_NOTA )
                    MSGV4  = CONV #( <FS_NOTA>-NM_SERIE ).
              ENDIF.

              ZCL_MIRO=>VERIFICAR_FORN_DOC_FISCAL(
                EXPORTING
                  I_LIFNR            = <FS_NOTA>-ID_FORNECEDOR
                  I_NFTYPE           = WA_ENTRADA-CT_NOTA
                  I_XBLNR            = ZCL_MIRO=>GET_CHAVE_REFERENCIA( I_SERIES = <FS_NOTA>-NM_SERIE  I_NF_NUMBER9 = CONV #( <FS_NOTA>-NR_NOTA ) )
                  I_DATA             = <FS_NOTA>-DT_EMISSAO
                  I_WERKS            = ME->CARGA-ID_BRANCH
                IMPORTING
                  E_NOTAS            = DATA(E_NOTAS)
              ).

              READ TABLE E_NOTAS INDEX 1 INTO DATA(WA_CHAVE).

              SELECT SINGLE * INTO @DATA(WA_NFE_INBOUND)
                FROM ZIB_NFE_DIST_TER
               WHERE CHAVE_NFE EQ @WA_CHAVE-NU_CHAVE.

*              IF WA_NFE_INBOUND-CD_FINA_EMISSAO NE '1'.
*                RAISE EXCEPTION TYPE ZCX_CARGA
*                  EXPORTING
*                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_DEVE_SER_NORMAL-MSGID
*                                      MSGNO = ZCX_CARGA=>ZCX_NOTA_DEVE_SER_NORMAL-MSGNO )
*                    MSGTY  = 'E'
*                    MSGNO  = ZCX_CARGA=>ZCX_NOTA_DEVE_SER_NORMAL-MSGNO
*                    MSGID  = ZCX_CARGA=>ZCX_NOTA_DEVE_SER_NORMAL-MSGID.
*              ENDIF.

            WHEN ZIF_CARGA=>ST_MODEL_FISCAL_PAPEL.

              WA_NOTA-MODEL	 = ZIF_CARGA=>ST_MODEL_FISCAL_PAPEL.
              WA_NOTA-PARID  = <FS_NOTA>-ID_FORNECEDOR.
              WA_NOTA-SERIES = <FS_NOTA>-NM_SERIE.
              WA_NOTA-FORM   = SPACE.
              WA_NOTA-CANCEL = SPACE.
              WA_NOTA-NFE    = ABAP_FALSE.
              WA_NOTA-NFNUM  = <FS_NOTA>-NR_NOTA.

              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  INPUT  = WA_NOTA-SERIES
                IMPORTING
                  OUTPUT = WA_NOTA-SERIES.

              SELECT SINGLE * INTO WA_NOTA
                FROM J_1BNFDOC
               WHERE DOCTYP NE '5'
                 AND MODEL  EQ WA_NOTA-MODEL
                 AND PARID  EQ WA_NOTA-PARID
                 AND SERIES EQ WA_NOTA-SERIES
                 AND NFNUM  EQ WA_NOTA-NFNUM
                 AND FORM   EQ WA_NOTA-FORM
                 AND CANCEL EQ WA_NOTA-CANCEL
                 AND NFE    EQ WA_NOTA-NFE.

              IF SY-SUBRC IS NOT INITIAL.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
                  EXPORTING
                    INPUT  = WA_NOTA-SERIES
                  IMPORTING
                    OUTPUT = WA_NOTA-SERIES.

                SELECT SINGLE * INTO WA_NOTA
                  FROM J_1BNFDOC
                 WHERE DOCTYP NE '5'
                   AND MODEL  EQ WA_NOTA-MODEL
                   AND PARID  EQ WA_NOTA-PARID
                   AND SERIES EQ WA_NOTA-SERIES
                   AND NFNUM  EQ WA_NOTA-NFNUM
                   AND FORM   EQ WA_NOTA-FORM
                   AND CANCEL EQ WA_NOTA-CANCEL
                   AND NFE    EQ WA_NOTA-NFE.
              ENDIF.

              IF SY-SUBRC IS INITIAL.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_FISCAL_LANCADA-MSGID
                                      MSGNO = ZCX_CARGA=>ZCX_NOTA_FISCAL_LANCADA-MSGNO
                                      ATTR1 = CONV #( ZIF_CARGA=>ST_MODEL_FISCAL_PAPEL )
                                      ATTR2 = CONV #( <FS_NOTA>-ID_FORNECEDOR )
                                      ATTR3 = CONV #( <FS_NOTA>-NR_NOTA )
                                      ATTR4 = CONV #( <FS_NOTA>-NM_SERIE )  )
                    MSGTY  = 'E'
                    MSGNO  = ZCX_CARGA=>ZCX_NOTA_FISCAL_LANCADA-MSGNO
                    MSGID  = ZCX_CARGA=>ZCX_NOTA_FISCAL_LANCADA-MSGID
                    MSGV1  = CONV #( ZIF_CARGA=>ST_MODEL_FISCAL_PAPEL )
                    MSGV2  = CONV #( <FS_NOTA>-ID_FORNECEDOR )
                    MSGV3  = CONV #( <FS_NOTA>-NR_NOTA )
                    MSGV4  = CONV #( <FS_NOTA>-NM_SERIE ).
              ENDIF.

          ENDCASE.
        ENDIF.

        ME->GET_NEW_ID_ENTRADA_ESTOQUE( IMPORTING E_ID_CARGA = DATA(LC_SEQUENCIA) ).
        CONCATENATE 'CG' LC_SEQUENCIA INTO ENTRADA-OBJ_KEY.
        ME->CK_ALTEROU = ABAP_TRUE.
      ENDIF.

      <FS_NOTA>-OBJ_KEY_ENTRADA = ENTRADA-OBJ_KEY.

      CASE <FS_NOTA>-ID_MOD_FISCAL.
        WHEN ZIF_CARGA=>ST_MODEL_FISCAL_PAPEL.
          LC_CK_NFE = ABAP_FALSE.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              INPUT  = <FS_NOTA>-NR_NOTA
            IMPORTING
              OUTPUT = I_NF_NUMBER.

          ENTRADA-NT_REMESSA = ZCL_MIRO=>GET_CHAVE_REFERENCIA( I_NF_NUMBER  = I_NF_NUMBER I_SERIES = <FS_NOTA>-NM_SERIE ).

        WHEN ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO.
          LC_CK_NFE = ABAP_TRUE.
          ENTRADA-NT_REMESSA = ZCL_MIRO=>GET_CHAVE_REFERENCIA( I_NF_NUMBER9  = CONV #( <FS_NOTA>-NR_NOTA ) I_SERIES = <FS_NOTA>-NM_SERIE ).
      ENDCASE.

      SELECT SINGLE * INTO @DATA(WA_TIPO_ENTRADA)
        FROM ZSDT0001TE
       WHERE ID_ENTRADA EQ @<FS_NOTA>-ID_ENTRADA
         AND ID_EMPRESA EQ @ME->CARGA-ID_BUKRS
         AND CK_NFE     EQ @LC_CK_NFE.

      IF ZCL_CFOP=>GET_CK_CFOP_RETORNO_AMAZEM( I_CFOP = <FS_NOTA>-CFOP ) EQ ABAP_TRUE.
        ME->GET_PEDIDO_COMPRA( EXPORTING I_ID_NOTA = <FS_NOTA>-ID_NOTA IMPORTING E_INFO_PEDIDO = DATA(PEDIDO) ).
      ELSE.
        TRY .
            ME->GET_PEDIDO_COMPRA( EXPORTING I_ID_NOTA = <FS_NOTA>-ID_NOTA IMPORTING E_INFO_PEDIDO = PEDIDO ).
          CATCH ZCX_CARGA INTO DATA(EX_CARGA).
            IF EX_CARGA->MSGID EQ ZCX_CARGA=>ZCX_SEM_PEDIDO_COMPRA-MSGID AND
               EX_CARGA->MSGNO EQ ZCX_CARGA=>ZCX_SEM_PEDIDO_COMPRA-MSGNO AND
               WA_TIPO_ENTRADA-ID_TP_OPERACAO NE '08'.

              "Buscar Tipo de Nota Fiscal
              SELECT SINGLE * INTO @DATA(WA_ZSDT0001TETN)
                FROM ZSDT0001TETN
               WHERE ID_ENTRADA EQ @WA_TIPO_ENTRADA-ID_ENTRADA.

              IF SY-SUBRC IS INITIAL.

                "Buscar Grupo de Mercadoria
                SELECT SINGLE * INTO @DATA(WA_ZSDT0001MT)
                  FROM ZSDT0001MT
                 WHERE MATNR EQ @ME->CARGA-ID_PRODUTO.

                IF SY-SUBRC IS INITIAL.

                  "Buscar Iva por Tipo de Nota Fiscal / Grupo de Mercadoria / Empresa
                  SELECT SINGLE * INTO @DATA(WA_ZSDT0001TETNIVA)
                    FROM ZSDT0001TETNIVA
                   WHERE ID_EMPRESA   EQ @ME->CARGA-ID_BUKRS
                     AND ID_TIPO_NOTA EQ @WA_ZSDT0001TETN-ID_TIPO_NOTA
                     AND TP_GRUPO_CTB EQ @WA_ZSDT0001MT-TP_GRUPO_CTB.

                  IF SY-SUBRC IS INITIAL.
                    WA_TIPO_ENTRADA-ID_IVA = WA_ZSDT0001TETNIVA-ID_IVA.
                  ENDIF.
                ENDIF.

              ENDIF.

              ZCL_PEDIDO_COMPRA=>SET_CRIAR_PEDIDO_COMPRA(
                EXPORTING
                  I_BEDAT      = <FS_NOTA>-DT_EMISSAO    " Data do documento de compra
                  I_EKORG      = 'OC01'    " Organização de compras
                  I_EKGRP      = 'G01'    " Grupo de compradores
                  I_WAERS      = 'BRL'    " Código da moeda
                  I_BSART      = 'ZGR '   " Tipo de documento de compras
                  I_ZTERM      = 'Z001'    " Chave de condições de pagamento
                  I_LIFNR      = <FS_NOTA>-ID_FORNECEDOR " Nº conta do fornecedor
                  I_BUKRS      = ME->CARGA-ID_BUKRS    " Empresa
                  I_CHARG      = CONV #( ME->CARGA-NR_SAFRA )    " Número do lote
                  I_EINDT      = SY-DATUM    " Data de remessa do item
                  I_MWSKZ      = WA_TIPO_ENTRADA-ID_IVA    " Código do IVA
                  I_MENGE      = 400000000    " Quantidade do pedido
                  I_MATNR      = ME->CARGA-ID_PRODUTO   " Nº do material
                  I_MEINS      = 'KG'    " Unidade de medida do pedido
                  I_WERKS      = ME->CARGA-ID_BRANCH    " Centro
                  I_TP_CENTRO  = ZCL_PEDIDO_COMPRA=>ST_TP_CENTRO_A_FIXAR
              ).
              WAIT UP TO 5 SECONDS.
              ME->GET_PEDIDO_COMPRA( EXPORTING I_ID_NOTA = <FS_NOTA>-ID_NOTA IMPORTING E_INFO_PEDIDO = PEDIDO ).
            ELSE.
              RAISE EXCEPTION TYPE ZCX_CARGA
                EXPORTING
                  TEXTID = VALUE #( MSGID = EX_CARGA->MSGID MSGNO = EX_CARGA->MSGNO
                                    ATTR1 = CONV #( EX_CARGA->MSGV1 )
                                    ATTR2 = CONV #( EX_CARGA->MSGV2 )
                                    ATTR3 = CONV #( EX_CARGA->MSGV3 )
                                    ATTR4 = CONV #( EX_CARGA->MSGV4 ) )
                  MSGID  = EX_CARGA->MSGID
                  MSGNO  = EX_CARGA->MSGNO
                  MSGTY  = 'E'
                  MSGV1  = EX_CARGA->MSGV1
                  MSGV2  = EX_CARGA->MSGV2
                  MSGV3  = EX_CARGA->MSGV3
                  MSGV4  = EX_CARGA->MSGV4.
            ENDIF.
        ENDTRY.
      ENDIF.

      SELECT SINGLE * INTO @DATA(WA_AFIXAR)
        FROM ZSDT_DEPARA_CEN
       WHERE VKORG             EQ @ME->CARGA-ID_BUKRS
         AND CENTRO_REAL       EQ @ME->CARGA-ID_BRANCH
         AND TP_CENTRO_VIRTUAL EQ @ZCL_PEDIDO_COMPRA=>ST_TP_CENTRO_A_FIXAR.

      IF SY-SUBRC IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_PEDIDO_COMPRA_EXCEPTION
          EXPORTING
            TEXTID    = VALUE #( MSGID = ZCX_PEDIDO_COMPRA_EXCEPTION=>ZCX_CENTRO_A_FIXAR-MSGID
                                 MSGNO = ZCX_PEDIDO_COMPRA_EXCEPTION=>ZCX_CENTRO_A_FIXAR-MSGNO
                                 ATTR1 = CONV #( ME->CARGA-ID_BRANCH )
                                 ATTR2 = 'ZSDT0036' )
            MSGID     = ZCX_PEDIDO_COMPRA_EXCEPTION=>ZCX_CENTRO_A_FIXAR-MSGID
            MSGNO     = ZCX_PEDIDO_COMPRA_EXCEPTION=>ZCX_CENTRO_A_FIXAR-MSGNO
            MSGTY     = 'E'
            MSGV1     = CONV #( ME->CARGA-ID_BRANCH )
            MSGV2     = 'ZSDT0036'
            TRANSACAO = 'ZSDT0036'.
      ENDIF.

      IF ME->CLASSIFICACAO-TP_TRANSGENIA EQ 'CO'.
        SELECT SINGLE * INTO @DATA(WA_ZMMT0017)
          FROM ZMMT0017
         WHERE MATNR          EQ @ME->CARGA-ID_PRODUTO
           AND CENTRO_FIXO    EQ @ME->CARGA-ID_BRANCH
           AND CENTRO_A_FIXAR EQ @WA_AFIXAR-CENTROV_1
           AND TP_PRODUTO     EQ 'CO'.

        IF SY-SUBRC IS INITIAL.
          ENTRADA-LGORT = WA_ZMMT0017-LGORT.
        ENDIF.
      ELSE.
        SELECT SINGLE * INTO @WA_ZMMT0017
          FROM ZMMT0017
         WHERE MATNR          EQ @ME->CARGA-ID_PRODUTO
           AND CENTRO_FIXO    EQ @ME->CARGA-ID_BRANCH
           AND CENTRO_A_FIXAR EQ @WA_AFIXAR-CENTROV_1
           AND TP_PRODUTO     EQ 'RR'.

        IF SY-SUBRC IS INITIAL.
          ENTRADA-LGORT = WA_ZMMT0017-LGORT.
        ENDIF.
      ENDIF.

      ENTRADA-PO_NUMBER      = PEDIDO-EKKO-EBELN.
      ENTRADA-CH_REFERENCIA  = <FS_NOTA>-CH_REFERENCIA_ENT.
      ENTRADA-BATCH          = ME->CARGA-NR_SAFRA.
      ENTRADA-MOVE_TYPE      = WA_TIPO_ENTRADA-TP_MOV_MERCADORIA.
      IF WA_J_1BAA-FORM IS INITIAL.
        ENTRADA-DOC_DATE       = <FS_NOTA>-DT_EMISSAO.
      ELSE.
        ENTRADA-DOC_DATE             = ME->CARGA-DT_FECHAMENTO.
        <FS_NOTA>-DT_EMISSAO         = ME->CARGA-DT_FECHAMENTO.
        <FS_NOTA>-DT_VENCIMENTO_FORM = ME->CARGA-DT_FECHAMENTO.
      ENDIF.
      ENTRADA-PSTNG_DATE     = ME->CARGA-DT_MOVIMENTO.
      ENTRADA-PO_ITEM        = PEDIDO-EKPO-EBELP.
      ENTRADA-NU_ITEM        = PEDIDO-EKPO-EBELP.
      ENTRADA-ENTRY_QNT	     = <FS_NOTA>-NR_QUANTIDADE.
      ENTRADA-MEINS          = 'KG'.
      ENTRADA-PESO_BRUTO     = <FS_NOTA>-NR_QUANTIDADE.
      ENTRADA-COMP_CODE	     = ME->CARGA-ID_BUKRS.
      CASE ME->CARGA-CK_GERA_AVISO.
        WHEN ABAP_TRUE.
          ENTRADA-IN_AVISO_RECEB = 'S'.
        WHEN ABAP_FALSE.
          ENTRADA-IN_AVISO_RECEB = 'N'.
      ENDCASE.
      <FS_NOTA>-TP_OPERACAO  = WA_TIPO_ENTRADA-ID_TP_OPERACAO.
      ENTRADA-TP_OPERACAO    = WA_TIPO_ENTRADA-ID_TP_OPERACAO.
      ENTRADA-REF_DOC_NO     = ENTRADA-NT_REMESSA.
      ENTRADA-VR_BRUTO       = <FS_NOTA>-NR_VALOR.

      "Buscar Tipo de Nota Fiscal
      SELECT SINGLE * INTO @WA_ZSDT0001TETN
        FROM ZSDT0001TETN
       WHERE ID_ENTRADA EQ @WA_TIPO_ENTRADA-ID_ENTRADA.

      "Buscar Grupo de Mercadoria
      SELECT SINGLE * INTO @WA_ZSDT0001MT
        FROM ZSDT0001MT
       WHERE MATNR EQ @ME->CARGA-ID_PRODUTO.

      "Buscar Iva por Tipo de Nota Fiscal / Grupo de Mercadoria / Empresa
      SELECT SINGLE * INTO @WA_ZSDT0001TETNIVA
        FROM ZSDT0001TETNIVA
       WHERE ID_EMPRESA   EQ @ME->CARGA-ID_BUKRS
         AND ID_TIPO_NOTA EQ @WA_ZSDT0001TETN-ID_TIPO_NOTA
         AND TP_GRUPO_CTB EQ @WA_ZSDT0001MT-TP_GRUPO_CTB.

      IF SY-SUBRC IS INITIAL.
        WA_TIPO_ENTRADA-ID_IVA = WA_ZSDT0001TETNIVA-ID_IVA.
      ENDIF.

      ENTRADA-DEL_COSTS_TAXC = WA_TIPO_ENTRADA-ID_IVA.
      ENTRADA-TAX_CODE       = WA_TIPO_ENTRADA-ID_IVA.
      ENTRADA-PMNT_BLOCK     = WA_TIPO_ENTRADA-BL_PAGAMENTO.
      ENTRADA-PMNTTRMS       = WA_TIPO_ENTRADA-CH_PAGAMENTO.
      ENTRADA-SCBANK_IND     = WA_TIPO_ENTRADA-BN_EMPRESA.
      ENTRADA-PYMT_METH	     = WA_TIPO_ENTRADA-FR_PAGAMENTO.
      ENTRADA-PLANT	         = ME->CARGA-ID_BRANCH.
      ENTRADA-J_1BNFTYPE     = WA_TIPO_ENTRADA-CT_NOTA.
      ENTRADA-ALLOC_NMBR     = PEDIDO-EKKO-EBELN.
      ENTRADA-GROSS_AMOUNT   = <FS_NOTA>-NR_VALOR.
      ENTRADA-ITEM_AMOUNT	   = <FS_NOTA>-NR_VALOR.
      ENTRADA-AMOUNT_LC      = ABS( <FS_NOTA>-NR_VALOR / E_UKURS ).
      ENTRADA-MATERIAL       = ME->CARGA-ID_PRODUTO.
      ENTRADA-BUS_AREA       = ME->CARGA-ID_BRANCH.
      ENTRADA-QUANTITY       = <FS_NOTA>-NR_QUANTIDADE.
      ENTRADA-ZDT_ATLZ       = SY-DATLO.
      ENTRADA-ZHR_ATLZ       = SY-TIMLO.
      ENTRADA-ZRG_ATLZ       = '1'.
      ENTRADA-ID_CARGA       = <FS_NOTA>-ID_CARGA.
      ENTRADA-ID_NOTA        = <FS_NOTA>-ID_NOTA.
      ENTRADA-ST_ESTORNO     = ZIF_CARGA=>ST_STATUS_ESTORNO_SEM.
      CONCATENATE 'Safra:' ME->CARGA-NR_SAFRA INTO ENTRADA-TEXT1.

      SELECT SINGLE TXJCD INTO  ENTRADA-TAXJURCODE
        FROM LFA1
       WHERE LIFNR EQ <FS_NOTA>-ID_FORNECEDOR.

      "Somar Impostos
      ENTRADA-VR_IMPOSTOS = 0.
      LOOP AT ME->DOCUMENTO_FISCAL_IMP_RET INTO DATA(WA_IMPOSTOS)
          WHERE ID_NOTA EQ <FS_NOTA>-ID_NOTA
            AND CD_IMPOSTO IS INITIAL.
        ADD WA_IMPOSTOS-VLR_IMPOSTO TO ENTRADA-VR_IMPOSTOS.
      ENDLOOP.

      IF ENTRADA-OBJ_KEY IS NOT INITIAL.
        APPEND ENTRADA TO ENTRADAS.
      ENDIF.

      "Copiar Impostos Retidos
      LOOP AT ME->DOCUMENTO_FISCAL_IMP_RET INTO WA_IMPOSTOS
          WHERE ID_NOTA EQ <FS_NOTA>-ID_NOTA
            AND CD_IMPOSTO IS NOT INITIAL.
        WA_ENTRADAS_IMP-OBJ_KEY     = ENTRADA-OBJ_KEY.
        WA_ENTRADAS_IMP-PO_NUMBER   = ENTRADA-PO_NUMBER.
        WA_ENTRADAS_IMP-WI_TAX_CODE = WA_IMPOSTOS-CD_IMPOSTO.
        WA_ENTRADAS_IMP-WT_WITHCD   = WA_IMPOSTOS-CD_CATEGORIA.
        WA_ENTRADAS_IMP-ZDT_ATLZ    = ENTRADA-ZDT_ATLZ.
        WA_ENTRADAS_IMP-ZHR_ATLZ    = ENTRADA-ZHR_ATLZ.
        WA_ENTRADAS_IMP-ZRG_ATLZ    = ENTRADA-ZRG_ATLZ.
        WA_ENTRADAS_IMP-WI_TAX_BASE = WA_IMPOSTOS-BASE_IMPOSTO.
        WA_ENTRADAS_IMP-WI_TAX_AMT  = WA_IMPOSTOS-VLR_IMPOSTO.
        APPEND WA_ENTRADAS_IMP TO ENTRADAS_IMP.
      ENDLOOP.

    ENDLOOP.

    CHECK ENTRADAS[] IS NOT INITIAL.

    MODIFY ZMMT_EE_ZGR FROM TABLE ENTRADAS.

    LOOP AT ENTRADAS INTO ENTRADA.
      DELETE FROM ZMMT_EEIMP_ZGR WHERE OBJ_KEY EQ ENTRADA-OBJ_KEY.
    ENDLOOP.

    IF ENTRADAS_IMP[] IS NOT INITIAL.
      MODIFY ZMMT_EEIMP_ZGR FROM TABLE ENTRADAS_IMP.
    ENDIF.

    COMMIT WORK.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_GERAR_ESTORNO_ESTOQUE.

    DATA: RG_ST_ESTORNO   TYPE RANGE OF ZDE_STATUS_ESTORNO,
          CK_SOLICITAR    TYPE CHAR01,
          WA_ZMMT_EEE_ZGR TYPE ZMMT_EEE_ZGR,
          IT_ZMMT_EEE_ZGR TYPE TABLE OF ZMMT_EEE_ZGR.

    R_CARGA = ME.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

    CASE ME->CARGA-TP_STATUS.
      WHEN ZIF_CARGA=>ST_STATUS_ABERTO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGNO.
      WHEN ZIF_CARGA=>ST_STATUS_CANCELADA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO.
    ENDCASE.

    IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE AND
       ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.
      ME->ZIF_CARGA~GET_CK_EXCLUIR_ROMANEIO_SAIDA( ).
    ENDIF.

    TYPES BEGIN OF TY_ENTRADA_ESTOQUE.
    TYPES: DOCNUM TYPE J_1BNFE_ACTIVE-DOCNUM,
           CANCEL TYPE J_1BNFE_ACTIVE-CANCEL,
           DOCSTA TYPE J_1BNFE_ACTIVE-DOCSTA,
           SCSSTA TYPE J_1BNFE_ACTIVE-SCSSTA,
           FORM   TYPE J_1BNFDOC-FORM.
    TYPES END OF TY_ENTRADA_ESTOQUE.

    DATA: IT_TAB TYPE TABLE OF TY_ENTRADA_ESTOQUE,
          WA_TAB TYPE TY_ENTRADA_ESTOQUE.

    TRY.
        EXEC SQL.
          OPEN SQL_ZMMT_EE_ZGR FOR
            SELECT DOC.DOCNUM,
                   NFE.CANCEL,
                   NFE.DOCSTA,
                   NFE.SCSSTA,
                   NF.FORM
              FROM SAPSR3.ZMMT_EE_ZGR ENT,
                   SAPSR3.ZMMT_EE_ZGR_DOCS DOC,
                   SAPSR3.J_1BNFDOC        NF,
                   SAPSR3.J_1BNFE_ACTIVE   NFE
             WHERE ENT.MANDT    = :SY-MANDT
               AND ENT.ID_CARGA = :ME->CARGA-ID_CARGA
               AND ENT.OBJ_KEY  <> ' '
               AND ENT.MANDT    = DOC.MANDT
               AND ENT.OBJ_KEY  = DOC.OBJ_KEY
               AND DOC.MANDT    = NF.MANDT
               AND DOC.DOCNUM   = NF.DOCNUM
               AND DOC.MANDT    = NFE.MANDT
               AND DOC.DOCNUM   = NFE.DOCNUM
        ENDEXEC.
      CATCH CX_SY_NATIVE_SQL_ERROR INTO DATA(EXC_REF).
        DATA(ERROR_TEXT) = EXC_REF->GET_TEXT( ).
        MESSAGE ERROR_TEXT TYPE 'E'.
    ENDTRY.

    DO.
      EXEC SQL.
        FETCH NEXT SQL_ZMMT_EE_ZGR INTO
        :WA_TAB-DOCNUM,
        :WA_TAB-CANCEL,
        :WA_TAB-DOCSTA,
        :WA_TAB-SCSSTA,
        :WA_TAB-FORM
      ENDEXEC.
      IF SY-SUBRC <> 0.
        EXIT.
      ELSE.
        APPEND WA_TAB TO IT_TAB.
      ENDIF.
    ENDDO.

    EXEC SQL.
      CLOSE SQL_ZMMT_EE_ZGR
    ENDEXEC.

*    "Verifica Nota Fiscal Própria não Cancelada/Estornada
*    SELECT DOC~DOCNUM,
*           NFE~CANCEL,
*           NFE~DOCSTA,
*           NFE~SCSSTA,
*           NF~FORM
*      INTO TABLE @DATA(IT_TAB)
*      FROM ZMMT_EE_ZGR AS ENT
*     INNER JOIN ZMMT_EE_ZGR_DOCS AS DOC ON DOC~OBJ_KEY EQ ENT~OBJ_KEY
*     INNER JOIN J_1BNFDOC      AS NF  ON NF~DOCNUM EQ DOC~DOCNUM
*     INNER JOIN J_1BNFE_ACTIVE AS NFE ON NFE~DOCNUM EQ DOC~DOCNUM
*     WHERE ENT~ID_CARGA EQ @ME->CARGA-ID_CARGA
*       AND ENT~OBJ_KEY  NE @SPACE.

    LOOP AT IT_TAB INTO WA_TAB WHERE DOCNUM IS NOT INITIAL AND FORM NE SPACE.

      CALL FUNCTION 'Z_NFE_CTE_AUTORIZADO'
        EXPORTING
          P_DOCNUM       = WA_TAB-DOCNUM
          P_USO          = 'N'
        EXCEPTIONS
          CANCELADO      = 1
          NAO_CANCELADO  = 2
          PENDENTE       = 3
          NAO_CONCLUIDO  = 4
          NAO_EXISTE     = 5
          AUTORIZADO_USO = 6
          DENEGADO       = 7
          OTHERS         = 8.

      IF SY-SUBRC IS NOT INITIAL AND SY-SUBRC NE 1.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = SY-MSGID
                              MSGNO = SY-MSGNO
                              ATTR1 = CONV #( SY-MSGV1 )
                              ATTR2 = CONV #( SY-MSGV2 )
                              ATTR3 = CONV #( SY-MSGV3 )
                              ATTR4 = CONV #( SY-MSGV4 ) )
            MSGID  = SY-MSGID
            MSGNO  = SY-MSGNO
            MSGTY  = 'E'
            MSGV1  = SY-MSGV1
            MSGV2  = SY-MSGV2
            MSGV3  = SY-MSGV3
            MSGV4  = SY-MSGV4.
      ENDIF.

    ENDLOOP.

    RG_ST_ESTORNO = VALUE #( SIGN = 'I' OPTION = 'EQ'
                             ( LOW = ZIF_CARGA=>ST_STATUS_ESTORNO_SEM  HIGH = ZIF_CARGA=>ST_STATUS_ESTORNO_SEM  )
                             ( LOW = ZIF_CARGA=>ST_STATUS_ESTORNO_ERRO HIGH = ZIF_CARGA=>ST_STATUS_ESTORNO_ERRO ) ).

    SELECT * INTO TABLE @DATA(IT_ENTRADA)
      FROM ZMMT_EE_ZGR
     WHERE ID_CARGA   EQ @ME->CARGA-ID_CARGA
       AND ST_ESTORNO IN @RG_ST_ESTORNO
       AND OBJ_KEY    NE @SPACE.

    IF IT_ENTRADA[] IS NOT INITIAL.
      SELECT * INTO TABLE @DATA(IT_ENTRADA_ESTORNO)
        FROM ZMMT_EEE_ZGR
         FOR ALL ENTRIES IN @IT_ENTRADA
       WHERE OBJ_KEY EQ @IT_ENTRADA-OBJ_KEY.

      SELECT * INTO TABLE @DATA(IT_ZMMT_EE_ZGR_DOCS)
        FROM ZMMT_EE_ZGR_DOCS
         FOR ALL ENTRIES IN @IT_ENTRADA
       WHERE OBJ_KEY EQ @IT_ENTRADA-OBJ_KEY.
    ENDIF.

    DATA(IT_ENTRADA_GRAVAR) = IT_ENTRADA[].

    LOOP AT IT_ENTRADA INTO DATA(WA_ENTRADA).
      ME->BLOQUEAR_ENTRADA( I_OBJ_KEY = WA_ENTRADA-OBJ_KEY ).
    ENDLOOP.

    LOOP AT IT_ENTRADA ASSIGNING FIELD-SYMBOL(<ENTRADA>).

      READ TABLE IT_ZMMT_EE_ZGR_DOCS INTO DATA(WA_ZMMT_EE_ZGR_DOCS) WITH KEY OBJ_KEY = <ENTRADA>-OBJ_KEY.
      IF SY-SUBRC IS NOT INITIAL.
        "Não Existe documento para ser estornado
        CONTINUE.
      ENDIF.

      IF NOT ( WA_ZMMT_EE_ZGR_DOCS-AV_VBELN IS NOT INITIAL OR
               WA_ZMMT_EE_ZGR_DOCS-FT_BELNR IS NOT INITIAL OR
               WA_ZMMT_EE_ZGR_DOCS-MM_MBLNR IS NOT INITIAL ).
        "Não Existe nenhum documento para ser estornado
        CONTINUE.
      ENDIF.

      CK_SOLICITAR = ABAP_FALSE.

      READ TABLE IT_ENTRADA_ESTORNO INTO DATA(WA_ESTORNO) WITH KEY OBJ_KEY = <ENTRADA>-OBJ_KEY.
      IF ( SY-SUBRC IS INITIAL ) AND ( WA_ESTORNO-RG_ATUALIZADO EQ '0' ).

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SOLIC_ESTORNO_ANDAMENTO-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_SOLIC_ESTORNO_ANDAMENTO-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_SOLIC_ESTORNO_ANDAMENTO-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_SOLIC_ESTORNO_ANDAMENTO-MSGNO.

      ELSEIF ( SY-SUBRC IS INITIAL ) AND ( WA_ESTORNO-RG_ATUALIZADO EQ '1' ).
        "Verificar se já foi estornado
        IF WA_ESTORNO-VBELN_VL IS  NOT INITIAL.
          TRY.
              ME->GET_INFO_MESSAGEM_ESTORNO( I_OBJ_KEY = WA_ESTORNO-OBJ_KEY I_INTERFACE  = ZIF_CARGA=>ST_INTERFACE_AVISO ).
              CLEAR : WA_ZMMT_EE_ZGR_DOCS-AV_VBELN.
            CATCH ZCX_CARGA.
          ENDTRY.
        ENDIF.

        IF WA_ESTORNO-MBLNR IS  NOT INITIAL.
          TRY.
              ME->GET_INFO_MESSAGEM_ESTORNO( I_OBJ_KEY = WA_ESTORNO-OBJ_KEY I_INTERFACE  = ZIF_CARGA=>ST_INTERFACE_MIGO ).
              CLEAR : WA_ZMMT_EE_ZGR_DOCS-MM_MJAHR,
                      WA_ZMMT_EE_ZGR_DOCS-MM_MBLNR.
            CATCH ZCX_CARGA.
          ENDTRY.
        ENDIF.

        IF WA_ESTORNO-RE_BELNR IS  NOT INITIAL.
          TRY.
              ME->GET_INFO_MESSAGEM_ESTORNO( I_OBJ_KEY = WA_ESTORNO-OBJ_KEY I_INTERFACE  = ZIF_CARGA=>ST_INTERFACE_MIRO ).
              CLEAR : WA_ZMMT_EE_ZGR_DOCS-FT_BELNR,
                      WA_ZMMT_EE_ZGR_DOCS-FT_GJAHR.
            CATCH ZCX_CARGA.
          ENDTRY.
        ENDIF.

      ELSE.
        CK_SOLICITAR = ABAP_TRUE.
      ENDIF.

      IF CK_SOLICITAR EQ ABAP_FALSE.
        CONTINUE.
      ENDIF.

      IF NOT ( WA_ZMMT_EE_ZGR_DOCS-AV_VBELN IS NOT INITIAL OR
               WA_ZMMT_EE_ZGR_DOCS-FT_BELNR IS NOT INITIAL OR
               WA_ZMMT_EE_ZGR_DOCS-MM_MBLNR IS NOT INITIAL ).
        CONTINUE.
      ELSE.
        <ENTRADA>-ST_ESTORNO             = ZIF_CARGA=>ST_STATUS_ESTORNO_SOLICITADO.
        WA_ZMMT_EEE_ZGR-OBJ_KEY          = <ENTRADA>-OBJ_KEY.
        WA_ZMMT_EEE_ZGR-MJAHR            = WA_ZMMT_EE_ZGR_DOCS-MM_MJAHR.
        WA_ZMMT_EEE_ZGR-GJAHR            = WA_ZMMT_EE_ZGR_DOCS-FT_GJAHR.
        WA_ZMMT_EEE_ZGR-VBELN_VL         = WA_ZMMT_EE_ZGR_DOCS-AV_VBELN.
        WA_ZMMT_EEE_ZGR-MBLNR            = WA_ZMMT_EE_ZGR_DOCS-MM_MBLNR.
        WA_ZMMT_EEE_ZGR-RE_BELNR         = WA_ZMMT_EE_ZGR_DOCS-FT_BELNR.
        WA_ZMMT_EEE_ZGR-STGRD            = 'Z1'.
        WA_ZMMT_EEE_ZGR-BUDAT            = SY-DATLO.
        WA_ZMMT_EEE_ZGR-DT_ESTORNO       = I_DT_ESTORNO.
        WA_ZMMT_EEE_ZGR-ID_INTERFACE_AVI = '19'.
        WA_ZMMT_EEE_ZGR-ID_INTERFACE_MIG = '20'.
        WA_ZMMT_EEE_ZGR-ID_INTERFACE_MIR = '21'.
        WA_ZMMT_EEE_ZGR-DT_ATUALIZACAO   = SY-DATLO.
        WA_ZMMT_EEE_ZGR-HR_ATUALIZACAO   = SY-TIMLO.
        WA_ZMMT_EEE_ZGR-RG_ATUALIZADO    = '1'.
        APPEND WA_ZMMT_EEE_ZGR TO IT_ZMMT_EEE_ZGR.
      ENDIF.

    ENDLOOP.

    IF IT_ZMMT_EEE_ZGR[] IS NOT INITIAL.
      MODIFY ZMMT_EEE_ZGR FROM TABLE IT_ZMMT_EEE_ZGR.
      MODIFY ZMMT_EE_ZGR  FROM TABLE IT_ENTRADA.
      COMMIT WORK.
    ENDIF.

    LOOP AT IT_ENTRADA INTO WA_ENTRADA.
      ME->DESBLOQUEAR_ENTRADA( I_OBJ_KEY = WA_ENTRADA-OBJ_KEY ).
    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_GERAR_ROMANEIO_ENTRADA.

    DATA: OBJ_ROMANEIO   TYPE REF TO ZCL_ROMANEIO,
          LC_ROMANEIO    TYPE ZSDT0001,
          LC_NOTA        TYPE ZSDT0001NT,
          CK_GERAR_SAIDA TYPE CHAR01.

    R_CARGA = ME.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

    CHECK NOT ( ME->CARGA-CK_ENVIADO_OPUS EQ ABAP_TRUE AND ME->CARGA-CK_RECEBIDO_OPUS EQ ABAP_FALSE ).

    CREATE OBJECT OBJ_ROMANEIO.

    IF ME->CARGA-TP_STATUS EQ ZIF_CARGA=>ST_STATUS_CONFERIDO.
      ME->GET_ROMANEIO_ENTRADA( EXPORTING I_ID_CARGA  =  ME->CARGA-ID_CARGA IMPORTING E_ROMANEIOS = DATA(ROMANEIOS) ).

      LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_DOCUMENTO>).

        IF <FS_DOCUMENTO>-DOCNUM IS NOT INITIAL.
          SELECT SINGLE * INTO @DATA(WA_J_1BNFDOC)
            FROM J_1BNFDOC
           WHERE DOCNUM EQ @<FS_DOCUMENTO>-DOCNUM.

          "Nota Fiscal Própria
          IF WA_J_1BNFDOC-FORM IS NOT INITIAL AND WA_J_1BNFDOC-NFENUM IS NOT INITIAL.
            SELECT SINGLE * INTO @DATA(WA_J_1BNFE_ACTIVE)
              FROM J_1BNFE_ACTIVE
             WHERE DOCNUM EQ @<FS_DOCUMENTO>-DOCNUM.

            IF SY-SUBRC IS INITIAL.
              <FS_DOCUMENTO>-NR_NOTA  = WA_J_1BNFE_ACTIVE-NFNUM9.
              <FS_DOCUMENTO>-NM_SERIE = WA_J_1BNFE_ACTIVE-SERIE.
              <FS_DOCUMENTO>-DT_EMISSAO = WA_J_1BNFDOC-DOCDAT.
              <FS_DOCUMENTO>-NR_CHAVE_NFE = WA_J_1BNFE_ACTIVE-REGIO && WA_J_1BNFE_ACTIVE-NFYEAR && WA_J_1BNFE_ACTIVE-NFMONTH && WA_J_1BNFE_ACTIVE-STCD1 && WA_J_1BNFE_ACTIVE-MODEL &&
                                            WA_J_1BNFE_ACTIVE-SERIE && WA_J_1BNFE_ACTIVE-NFNUM9 && WA_J_1BNFE_ACTIVE-DOCNUM9 && WA_J_1BNFE_ACTIVE-CDV.
            ENDIF.
          ENDIF.
        ENDIF.

        IF <FS_DOCUMENTO>-CH_REFERENCIA_ENT IS NOT INITIAL.
          "Não existe Romaneio
          SELECT SINGLE * INTO @DATA(WA_ROMNEIO)
            FROM ZSDT0001
           WHERE CH_REFERENCIA EQ @<FS_DOCUMENTO>-CH_REFERENCIA_ENT.

          IF SY-SUBRC IS INITIAL AND ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
            CONTINUE.
          ELSEIF SY-SUBRC IS NOT INITIAL.
            CLEAR: <FS_DOCUMENTO>-CH_REFERENCIA_ENT.
          ENDIF.
        ENDIF.

        READ TABLE ROMANEIOS INTO DATA(WA_ROMANEIO) WITH KEY ID_CARGA = <FS_DOCUMENTO>-ID_CARGA ID_NOTA = <FS_DOCUMENTO>-ID_NOTA.
        IF SY-SUBRC IS INITIAL.
          OBJ_ROMANEIO->ZIF_CADASTRO~SET_REGISTRO( I_ID_REGISTRO = WA_ROMANEIO-CH_REFERENCIA ).
        ELSE.
          OBJ_ROMANEIO->NOVO_REGISTRO( ).
          OBJ_ROMANEIO->CK_PERMITE_DATA_RETROATIVA = ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA.
        ENDIF.

        OBJ_ROMANEIO->SET_TP_MOVIMENTO( I_TP_MOVIMENTO = ZCL_ROMANEIO=>ST_TP_MOVIMENTO_ENTRADA ).
        "OBJ_ROMANEIO->SET_VBELN( I_VBELN = <FS_DOCUMENTO>-NR_ORDEM_VENDA ).
        OBJ_ROMANEIO->SET_DT_MOVIMENTO( I_DT_MOVIMENTO = ME->CARGA-DT_MOVIMENTO ).
        OBJ_ROMANEIO->SET_NR_SAFRA( I_NR_SAFRA = CONV #( ME->CARGA-NR_SAFRA ) ).
        OBJ_ROMANEIO->SET_BUKRS( I_BUKRS = ME->CARGA-ID_BUKRS ).
        OBJ_ROMANEIO->SET_BRANCH( I_BRANCH = ME->CARGA-ID_BRANCH ).
        OBJ_ROMANEIO->SET_PARID( I_PARID = <FS_DOCUMENTO>-ID_FORNECEDOR ).
        OBJ_ROMANEIO->SET_ID_CLI_DEST( I_ID_CLI_DEST = CONV #( ME->CARGA-ID_BRANCH ) ).

        CASE ME->CARGA-TP_FRETE.
          WHEN ZIF_CARGA=>ST_TP_FRETE_CIF.
            OBJ_ROMANEIO->SET_TP_FRETE( I_TP_FRETE = ZCL_ROMANEIO=>ST_TP_FRETE_CIF ).
          WHEN ZIF_CARGA=>ST_TP_FRETE_FOB.
            OBJ_ROMANEIO->SET_TP_FRETE( I_TP_FRETE = ZCL_ROMANEIO=>ST_TP_FRETE_FOB ).
        ENDCASE.

        OBJ_ROMANEIO->SET_MATNR( I_MATNR = ME->CARGA-ID_PRODUTO ).
        OBJ_ROMANEIO->SET_PLACA_CAV( I_PLACA_CAV = ME->CARGA-DS_PLACA_TRATOR ).
        OBJ_ROMANEIO->SET_PLACA_CAR1( I_PLACA_CAR1 = ME->CARGA-DS_PLACA_REBOQ_1 ).
        OBJ_ROMANEIO->SET_PLACA_CAR2( I_PLACA_CAR2 = ME->CARGA-DS_PLACA_REBOQ_2 ).
        OBJ_ROMANEIO->SET_PLACA_CAR3( I_PLACA_CAR3 = ME->CARGA-DS_PLACA_REBOQ_3 ).
        OBJ_ROMANEIO->SET_ID_ORDEM( I_ID_ORDEM = ME->CARGA-ID_ORDEM ).
        OBJ_ROMANEIO->SET_MOTORISTA( I_MOTORISTA = ME->CARGA-ID_MOTORISTA ).
        OBJ_ROMANEIO->SET_NR_TICKET( I_NR_TICKET = ME->CARGA-NR_TICKET ).
        OBJ_ROMANEIO->SET_DT_FECHAMENTO( I_DT_FECHAMENTO = ME->CARGA-DT_FECHAMENTO ).
        OBJ_ROMANEIO->SET_HR_FECHAMENTO( I_HR_FECHAMENTO = ME->CARGA-HR_FECHAMENTO ).
        OBJ_ROMANEIO->SET_DT_ABERTURA( I_DT_ABERTURA = ME->CARGA-DT_ABERTURA ).
        OBJ_ROMANEIO->SET_HR_ABERTURA( I_HR_ABERTURA = ME->CARGA-HR_ABERTURA ).
        OBJ_ROMANEIO->SET_AGENTE_FRETE( I_AGENTE_FRETE = ME->CARGA-ID_AGENT_FRETE ).
        OBJ_ROMANEIO->SET_PESO_FISCAL( I_PESO_FISCAL = CONV #( <FS_DOCUMENTO>-NR_QUANTIDADE ) ).
        OBJ_ROMANEIO->SET_DS_OBS( I_DS_OBS = CONV #( <FS_DOCUMENTO>-DS_OBSERVACAO ) ).

        OBJ_ROMANEIO->SET_PESO_LIQ( I_PESO_LIQ = CONV #( <FS_DOCUMENTO>-NM_PESO_LIQUIDO ) ).
        OBJ_ROMANEIO->SET_PESO_SUBTOTAL( I_PESO_SUBTOTAL = CONV #( <FS_DOCUMENTO>-NM_PESO_SUBTOTAL ) ).
        OBJ_ROMANEIO->SET_PESO_TARA( I_PESO_TARA = CONV #( ME->CARGA-NM_PESO_TARA ) ).
        OBJ_ROMANEIO->SET_PESO_BRUTO( I_PESO_BRUTO = CONV #( ME->CARGA-NM_PESO_TARA + <FS_DOCUMENTO>-NM_PESO_SUBTOTAL ) ).

        LOOP AT ME->RESULTADO INTO DATA(WA_RESULTADO) WHERE ID_CLASSIFICACAO = <FS_DOCUMENTO>-ID_CLASSIFICACAO.
          CASE WA_RESULTADO-TP_CARACTERISTICA.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
              OBJ_ROMANEIO->SET_NR_PERC_UMIDADE( I_NR_PERC_UMIDADE = WA_RESULTADO-NR_PERCENTUAL_COM ).
              OBJ_ROMANEIO->SET_NR_QTD_UMIDADE(  I_NR_QTD_UMIDADE = CONV #( WA_RESULTADO-NR_QUANTIDADE_COM ) ).
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
              OBJ_ROMANEIO->SET_NR_PERC_IMPUREZA( I_NR_PERC_IMPUREZA = WA_RESULTADO-NR_PERCENTUAL_COM ).
              OBJ_ROMANEIO->SET_NR_QTD_IMPUREZA(  I_NR_QTD_IMPUREZA = CONV #( WA_RESULTADO-NR_QUANTIDADE_COM ) ).
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
              OBJ_ROMANEIO->SET_NR_PERC_AVARIA( I_NR_PERC_AVARIA = WA_RESULTADO-NR_PERCENTUAL_COM ).
              OBJ_ROMANEIO->SET_NR_QTD_AVARIA(  I_NR_QTD_AVARIA = CONV #( WA_RESULTADO-NR_QUANTIDADE_COM ) ).
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
              OBJ_ROMANEIO->SET_NR_PERC_ARDIDO( I_NR_PERC_ARDIDO = WA_RESULTADO-NR_PERCENTUAL_COM ).
              OBJ_ROMANEIO->SET_NR_QTD_ARDIDO(  I_NR_QTD_ARDIDO = CONV #( WA_RESULTADO-NR_QUANTIDADE_COM ) ).
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
              OBJ_ROMANEIO->SET_NR_PERC_QUEBRA( I_NR_PERC_QUEBRA = CONV #( WA_RESULTADO-NR_PERCENTUAL_COM ) ).
              OBJ_ROMANEIO->SET_NR_QTD_QUEBRA(  I_NR_QTD_QUEBRA = CONV #( WA_RESULTADO-NR_QUANTIDADE_COM ) ).
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
              OBJ_ROMANEIO->SET_NR_PERC_ESVERD( I_NR_PERC_ESVERD = WA_RESULTADO-NR_PERCENTUAL_COM ).
              OBJ_ROMANEIO->SET_NR_QTD_ESVERD(  I_NR_QTD_ESVERD = CONV #( WA_RESULTADO-NR_QUANTIDADE_COM ) ).
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
              OBJ_ROMANEIO->SET_NR_PERC_CARUNCHADO( I_NR_PERC_CARUNCHADO = WA_RESULTADO-NR_PERCENTUAL_COM ).
              OBJ_ROMANEIO->SET_NR_QTD_CARUNCHADO(  I_NR_QTD_CARUNCHADO = CONV #( WA_RESULTADO-NR_QUANTIDADE_COM ) ).
          ENDCASE.
        ENDLOOP.

        LOOP AT ME->ZIF_CARGA~RESULTADO_AVARIADO INTO DATA(WA_RES_AVA) WHERE ID_CLASSIFICACAO = <FS_DOCUMENTO>-ID_CLASSIFICACAO.
          CASE WA_RES_AVA-TP_SUB_CARAC_AVARIADO.
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ.
              OBJ_ROMANEIO->SET_NR_PERC_AVARIA_ARQ( I_NR_PERC_AVARIA_ARQ = WA_RES_AVA-NR_PERCENTUAL_COM ).
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_QUE.
              OBJ_ROMANEIO->SET_NR_PERC_AVARIA_QUE( I_NR_PERC_AVARIA_QUE = WA_RES_AVA-NR_PERCENTUAL_COM ).
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_MOF.
              OBJ_ROMANEIO->SET_NR_PERC_AVARIA_MOF( I_NR_PERC_AVARIA_MOF = WA_RES_AVA-NR_PERCENTUAL_COM ).
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_PIC.
              OBJ_ROMANEIO->SET_NR_PERC_AVARIA_PIC( I_NR_PERC_AVARIA_PIC = WA_RES_AVA-NR_PERCENTUAL_COM ).
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_FER.
              OBJ_ROMANEIO->SET_NR_PERC_AVARIA_FER( I_NR_PERC_AVARIA_FER = WA_RES_AVA-NR_PERCENTUAL_COM ).
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GER.
              OBJ_ROMANEIO->SET_NR_PERC_AVARIA_GER( I_NR_PERC_AVARIA_GER = WA_RES_AVA-NR_PERCENTUAL_COM ).
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARD.
              OBJ_ROMANEIO->SET_NR_PERC_AVARIA_ARD( I_NR_PERC_AVARIA_ARD = WA_RES_AVA-NR_PERCENTUAL_COM ).
            WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GES.
              OBJ_ROMANEIO->SET_NR_PERC_AVARIA_GES( I_NR_PERC_AVARIA_GES = WA_RES_AVA-NR_PERCENTUAL_COM ).
          ENDCASE.
        ENDLOOP.

        OBJ_ROMANEIO->SET_ID_CARGA( I_ID_CARGA = <FS_DOCUMENTO>-ID_CARGA ).
        OBJ_ROMANEIO->SET_ID_NOTA( I_ID_NOTA = <FS_DOCUMENTO>-ID_NOTA ).

        ME->GET_FACTORY_TP_TRANSGENIA( EXPORTING I_CLASSIFICACAO = ME->CLASSIFICACAO IMPORTING E_TP_TRANSGENIA = DATA(E_TP_TRANSGENIA) ).
        OBJ_ROMANEIO->SET_TP_TRANSGENIA( I_TP_TRANSGENIA = E_TP_TRANSGENIA ).

        OBJ_ROMANEIO->SET_ID_INTERFACE( I_ID_INTERFACE = ZCL_ROMANEIO=>INTERFACE_CARGA_SAP ).
        OBJ_ROMANEIO->SET_LOCAL_DESCARGA( I_LOCAL_DESCARGA = ME->CARGA-ID_LOCAL_ENTREGA ).
        OBJ_ROMANEIO->SET_TIPO_ENTRADA( I_TIPO_ENTRADA = <FS_DOCUMENTO>-ID_ENTRADA ).

        IF LC_ROMANEIO IS NOT INITIAL.
          OBJ_ROMANEIO->SET_CH_REFER_ENT( I_CH_REFER_ENT = LC_ROMANEIO-CH_REFERENCIA ).
          OBJ_ROMANEIO->SET_ID_REFERENCIA( I_ID_REFERENCIA = LC_ROMANEIO-CH_REFERENCIA ).
        ENDIF.

        OBJ_ROMANEIO->SET_NFNUM( I_NFNUM = <FS_DOCUMENTO>-NR_NOTA ).
        OBJ_ROMANEIO->SET_SERIES( I_SERIES = <FS_DOCUMENTO>-NM_SERIE ).
        OBJ_ROMANEIO->SET_DOCDAT( I_DOCDAT = <FS_DOCUMENTO>-DT_EMISSAO ).
        OBJ_ROMANEIO->SET_NETWR( I_NETWR = CONV #( <FS_DOCUMENTO>-NR_VALOR ) ).

        CASE <FS_DOCUMENTO>-ID_MOD_FISCAL.
          WHEN ZIF_CARGA=>ST_MODEL_FISCAL_PAPEL.
            OBJ_ROMANEIO->SET_NFE( I_NFE = ABAP_FALSE ).
          WHEN ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO.
            OBJ_ROMANEIO->SET_NFE( I_NFE = ABAP_TRUE ).
        ENDCASE.

        " Ajustatar Itens """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        SELECT SINGLE * INTO @DATA(WA_MARA)
          FROM MARA
         WHERE MATNR EQ @ME->CARGA-ID_PRODUTO.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            INPUT  = WA_MARA-MATKL
          IMPORTING
            OUTPUT = WA_MARA-MATKL.

        IF WA_MARA-MATKL EQ ZIF_CARGA=>ST_GRUPO_ALGODAO_PLUMA. "Algodão

          DATA(ITEMS_ROMANEIO) = OBJ_ROMANEIO->GET_ITENS( ).

          LOOP AT ITEMS_ROMANEIO INTO DATA(WA_ITEMS_ROMANEIO).
            OBJ_ROMANEIO->DEL_ITEM( I_ITEM = WA_ITEMS_ROMANEIO ).
          ENDLOOP.

          DATA: I_ITEM  TYPE ZSDT0001_ITEM.
          DATA: I_FARDO TYPE ZSDT0001_ITEM_FD.

          CLEAR: I_ITEM.
          I_ITEM-CD_ITEM  = '0000000001'.
          I_ITEM-MATNR    = ME->CARGA-ID_PRODUTO.
          I_ITEM-CHARG    = ME->CARGA-NR_SAFRA.
          I_ITEM-LFIMG    = <FS_DOCUMENTO>-NM_PESO_LIQUIDO.
          I_ITEM-MEINS    = 'KG'.
          I_ITEM-BRGEW    = <FS_DOCUMENTO>-NM_PESO_SUBTOTAL.
          I_ITEM-NTGEW    = <FS_DOCUMENTO>-NM_PESO_LIQUIDO.
          I_ITEM-GEWEI    = 'KG'.
          I_ITEM-VOLUM    = <FS_DOCUMENTO>-NR_FARDO.
          I_ITEM-VOLEH    = 'FD'.
          I_ITEM-ID_CARGA = <FS_DOCUMENTO>-ID_CARGA.
          I_ITEM-ID_NOTA  = <FS_DOCUMENTO>-ID_NOTA.
          OBJ_ROMANEIO->ADD_ITEM( CHANGING I_ITEM = I_ITEM ).

          DATA(LC_BLOCOS) = ME->ZIF_CARGA~BLOCOS[].
          SORT LC_BLOCOS BY ZSEQ_INST OBJEK OBJECTTABLE.
          DELETE ADJACENT DUPLICATES FROM LC_BLOCOS COMPARING ZSEQ_INST OBJEK OBJECTTABLE.
          LOOP AT LC_BLOCOS INTO DATA(BLOCOS).

            CLEAR: I_FARDO.
            I_FARDO-CD_ITEM         = I_ITEM-CD_ITEM.
            I_FARDO-CD_ITEM_FARDO   = SY-TABIX.

            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                INPUT  = I_FARDO-CD_ITEM_FARDO
              IMPORTING
                OUTPUT = I_FARDO-CD_ITEM_FARDO.

            BLOCOS-QT_FARDOS       = 0.
            BLOCOS-PS_FARDOS_BRUTO = 0.
            BLOCOS-PS_FARDOS_LIQUI = 0.

            LOOP AT ME->ZIF_CARGA~BLOCOS INTO DATA(WA_BLOCOS)
              WHERE ZSEQ_INST   EQ BLOCOS-ZSEQ_INST
                AND OBJEK       EQ BLOCOS-OBJEK
                AND OBJECTTABLE EQ BLOCOS-OBJECTTABLE.

              ADD WA_BLOCOS-QT_FARDOS       TO BLOCOS-QT_FARDOS.
              ADD WA_BLOCOS-PS_FARDOS_BRUTO TO BLOCOS-PS_FARDOS_BRUTO.
              ADD WA_BLOCOS-PS_FARDOS_LIQUI TO BLOCOS-PS_FARDOS_LIQUI.

            ENDLOOP.

            I_FARDO-ZSEQ_INST       = BLOCOS-ZSEQ_INST.
            I_FARDO-OBJEK           = BLOCOS-OBJEK.
            I_FARDO-OBJECTTABLE     = BLOCOS-OBJECTTABLE.
            I_FARDO-NM_BLOCO        = BLOCOS-NM_BLOCO.
            I_FARDO-QT_FARDOS       = BLOCOS-QT_FARDOS.
            I_FARDO-MEINS           = BLOCOS-MEINS.
            I_FARDO-PS_FARDOS_LIQUI = BLOCOS-PS_FARDOS_LIQUI.
            I_FARDO-PS_FARDOS_BRUTO = BLOCOS-PS_FARDOS_BRUTO.
            OBJ_ROMANEIO->ADD_FARDOS( I_FARDOS = I_FARDO ).
            CLEAR: I_FARDO.

          ENDLOOP.
        ENDIF.
        """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

        DATA(R_GEROU) = OBJ_ROMANEIO->ZIF_CADASTRO~GRAVAR_REGISTRO( ).

        IF R_GEROU EQ ABAP_TRUE.
          OBJ_ROMANEIO->ZIF_CADASTRO~GET_REGISTRO( IMPORTING E_REGISTRO = LC_ROMANEIO ).
          <FS_DOCUMENTO>-NR_ROMANEIO_ENT   = LC_ROMANEIO-NR_ROMANEIO.
          <FS_DOCUMENTO>-CH_REFERENCIA_ENT = LC_ROMANEIO-CH_REFERENCIA.
          ME->CK_ALTEROU = ABAP_TRUE.
        ELSE.
          IF OBJ_ROMANEIO->CK_ALTEROU EQ ABAP_TRUE.
            ME->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_FECHADO.
            IF ME->CARGA-ID_CARGA IS NOT INITIAL.
              DELETE FROM ZSDT0001 WHERE TP_MOVIMENTO = ZCL_ROMANEIO=>ST_TP_MOVIMENTO_ENTRADA AND ID_CARGA EQ ME->CARGA-ID_CARGA.
              COMMIT WORK.
            ENDIF.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGNO = SY-MSGNO MSGID = SY-MSGID ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
                MSGNO  = SY-MSGNO
                MSGID  = SY-MSGID
                MSGTY  = 'E'
                MSGV1  = SY-MSGV1
                MSGV2  = SY-MSGV2
                MSGV3  = SY-MSGV3
                MSGV4  = SY-MSGV4.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.

    CLEAR: OBJ_ROMANEIO.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_GERAR_ROMANEIO_SAIDA.

    DATA: OBJ_ROMANEIO   TYPE REF TO ZCL_ROMANEIO,
          LC_ROMANEIO    TYPE ZSDT0001,
          CK_GERAR_SAIDA TYPE CHAR01,
          WA_ACTTAB      TYPE J_1BNFE_ACTIVE.


    DATA: LC_NR_QTD_UMIDADE  TYPE ZNR_QTD_UMIDADE,
          LC_NR_QTD_IMPUREZA TYPE ZNR_QTD_IMPUREZA,
          LC_NR_QTD_AVARIA   TYPE ZNR_QTD_AVARIA,
          LC_NR_QTD_ARDIDO   TYPE ZNR_QTD_ARDIDO,
          LC_NR_QTD_QUEBRA   TYPE ZNR_QTD_QUEBRA,
          LC_NR_QTD_ESVERD   TYPE ZNR_QTD_ESVERD,
          LC_NR_QTD_CARUNCH  TYPE ZNR_QTD_CARUNCHADO,
          LC_NR_QUANTIDADE   TYPE ZDE_NR_QUANTIDADE,
          LC_PESO_LIQ	       TYPE NTGEW,
          LC_PESO_SUBTOTAL   TYPE BRGEW.

    R_CARGA = ME.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.
    "CHECK ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
    CHECK NOT ( ME->CARGA-CK_ENVIADO_OPUS EQ ABAP_TRUE AND ME->CARGA-CK_RECEBIDO_OPUS EQ ABAP_FALSE ).

    CREATE OBJECT OBJ_ROMANEIO.

    ME->GET_ROMANEIO_ENTRADA( EXPORTING I_ID_CARGA  = ME->CARGA-ID_CARGA IMPORTING E_ROMANEIOS = DATA(ROMANEIOS_ENTRADA) ).

    ME->GET_ROMANEIO_SAIDA( EXPORTING I_ID_CARGA  = ME->CARGA-ID_CARGA IMPORTING E_ROMANEIOS = DATA(ROMANEIOS) ).

    CLEAR: LC_ROMANEIO.

    CK_GERAR_SAIDA = ABAP_TRUE.

    "Somar Quantidades de Desconto por ordem de Venda
    LC_NR_QTD_UMIDADE  = 0.
    LC_NR_QTD_IMPUREZA = 0.
    LC_NR_QTD_AVARIA   = 0.
    LC_NR_QTD_ARDIDO   = 0.
    LC_NR_QTD_QUEBRA   = 0.
    LC_NR_QTD_ESVERD   = 0.
    LC_NR_QTD_CARUNCH  = 0.
    LC_PESO_LIQ        = 0.
    LC_PESO_SUBTOTAL   = 0.
    LC_NR_QUANTIDADE   = 0.

    "Verificar se todas as notas de entrada estão geradas
    LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_ENTRADA).

      CASE WA_ENTRADA-TP_OPERACAO.

        WHEN '06' OR '07'.

          IF WA_ENTRADA-MM_MBLNR IS INITIAL.
            CK_GERAR_SAIDA = ABAP_FALSE.
          ENDIF.

        WHEN OTHERS.

          IF WA_ENTRADA-DOCNUM IS INITIAL.
            CK_GERAR_SAIDA = ABAP_FALSE.
          ELSE.
            SELECT SINGLE * INTO @DATA(WA_J_1BNFDOC)
              FROM J_1BNFDOC
             WHERE DOCNUM EQ @WA_ENTRADA-DOCNUM.

            IF WA_J_1BNFDOC-FORM IS NOT INITIAL AND WA_J_1BNFDOC-CANCEL EQ ABAP_FALSE.

              "Verificar NF-e Autorizada
              CALL FUNCTION 'J_1B_NFE_XML_RAED_ACTIVE_TAB'
                EXPORTING
                  I_DOCNUM = WA_ENTRADA-DOCNUM
                IMPORTING
                  E_ACTTAB = WA_ACTTAB
                EXCEPTIONS
                  NO_ENTRY = 1
                  OTHERS   = 2.

              IF SY-SUBRC IS NOT INITIAL.
                CK_GERAR_SAIDA = ABAP_FALSE.
              ELSE.
                IF WA_ACTTAB-NFNUM9 IS INITIAL.
                  CK_GERAR_SAIDA = ABAP_FALSE.
                ELSEIF WA_ACTTAB-DOCSTA NE '1'.
                  CK_GERAR_SAIDA = ABAP_FALSE.
                ELSEIF WA_ACTTAB-CANCEL EQ ABAP_TRUE.
                  CK_GERAR_SAIDA = ABAP_FALSE.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.

      ENDCASE.

      "Somar Quantidades de Desconto por ordem de Venda
      LOOP AT ROMANEIOS_ENTRADA INTO DATA(WA_ROMANEIOS_ENTRADA) WHERE ID_CARGA EQ WA_ENTRADA-ID_CARGA AND ID_NOTA EQ WA_ENTRADA-ID_NOTA.
        ADD WA_ROMANEIOS_ENTRADA-NR_QTD_UMIDADE  TO LC_NR_QTD_UMIDADE.
        ADD WA_ROMANEIOS_ENTRADA-NR_QTD_IMPUREZA TO LC_NR_QTD_IMPUREZA.
        ADD WA_ROMANEIOS_ENTRADA-NR_QTD_AVARIA   TO LC_NR_QTD_AVARIA.
        ADD WA_ROMANEIOS_ENTRADA-NR_QTD_ARDIDO   TO LC_NR_QTD_ARDIDO.
        ADD WA_ROMANEIOS_ENTRADA-NR_QTD_QUEBRA   TO LC_NR_QTD_QUEBRA.
        ADD WA_ROMANEIOS_ENTRADA-NR_QTD_ESVERD   TO LC_NR_QTD_ESVERD.
        ADD WA_ROMANEIOS_ENTRADA-NR_QTD_CARUNCH  TO LC_NR_QTD_CARUNCH.
        ADD WA_ROMANEIOS_ENTRADA-PESO_LIQ        TO LC_PESO_LIQ.
        ADD WA_ROMANEIOS_ENTRADA-PESO_SUBTOTAL   TO LC_PESO_SUBTOTAL.
      ENDLOOP.

      ADD WA_ENTRADA-NR_QUANTIDADE TO LC_NR_QUANTIDADE.

    ENDLOOP.
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""

    IF CK_GERAR_SAIDA EQ ABAP_FALSE.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_NAO_GEROU_ROMANEIO_SAIDA-MSGID
                            MSGNO  = ZCX_CARGA=>ZCX_NAO_GEROU_ROMANEIO_SAIDA-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_NAO_GEROU_ROMANEIO_SAIDA-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_NAO_GEROU_ROMANEIO_SAIDA-MSGNO.
    ENDIF.

    LOOP AT ME->ZIF_CARGA~PEDIDO_COMPRA INTO DATA(WA_PEDIDO).

      READ TABLE ROMANEIOS INTO DATA(WA_ROMANEIO) WITH KEY ID_CARGA = WA_PEDIDO-ID_CARGA VBELN = WA_PEDIDO-NR_PEDIDO_COMPRA.
      IF SY-SUBRC IS INITIAL.
        OBJ_ROMANEIO->ZIF_CADASTRO~SET_REGISTRO( I_ID_REGISTRO = WA_ROMANEIO-CH_REFERENCIA ).
      ELSE.
        OBJ_ROMANEIO->NOVO_REGISTRO( ).
      ENDIF.

      "Somatória dos Pesos de Descontos
      OBJ_ROMANEIO->SET_NR_QTD_UMIDADE(  I_NR_QTD_UMIDADE  = LC_NR_QTD_UMIDADE  ).
      OBJ_ROMANEIO->SET_NR_QTD_IMPUREZA( I_NR_QTD_IMPUREZA = LC_NR_QTD_IMPUREZA ).
      OBJ_ROMANEIO->SET_NR_QTD_AVARIA(   I_NR_QTD_AVARIA   = LC_NR_QTD_AVARIA   ).
      OBJ_ROMANEIO->SET_NR_QTD_ARDIDO(   I_NR_QTD_ARDIDO   = LC_NR_QTD_ARDIDO   ).
      OBJ_ROMANEIO->SET_NR_QTD_QUEBRA(   I_NR_QTD_QUEBRA   = LC_NR_QTD_QUEBRA   ).
      OBJ_ROMANEIO->SET_NR_QTD_ESVERD(   I_NR_QTD_ESVERD   = LC_NR_QTD_ESVERD   ).
      OBJ_ROMANEIO->SET_NR_QTD_CARUNCHADO( I_NR_QTD_CARUNCHADO = LC_NR_QTD_CARUNCH  ).

      "Somatória dos Pesos Liquido/SubTotal
      IF WA_ROMANEIO-ST_PROC IS INITIAL.
        OBJ_ROMANEIO->SET_PESO_LIQ( I_PESO_LIQ = CONV #( WA_PEDIDO-NM_PESO_SUBTOTAL ) ). " LC_PESO_SUBTOTAL   ).
        OBJ_ROMANEIO->SET_PESO_SUBTOTAL( I_PESO_SUBTOTAL = CONV #( WA_PEDIDO-NM_PESO_SUBTOTAL ) ). "LC_PESO_SUBTOTAL   ).
        OBJ_ROMANEIO->SET_PESO_TARA( I_PESO_TARA = CONV #( WA_PEDIDO-NM_PESO_TARA ) ).
        OBJ_ROMANEIO->SET_PESO_BRUTO( I_PESO_BRUTO = CONV #( WA_PEDIDO-NM_PESO_TARA + WA_PEDIDO-NM_PESO_SUBTOTAL ) ). "LC_PESO_SUBTOTAL ) ).
        OBJ_ROMANEIO->SET_PESO_FISCAL( I_PESO_FISCAL = CONV #( LC_NR_QUANTIDADE ) ).
      ENDIF.

      "Cópia de % de Qualidade
      LOOP AT ME->RESULTADO INTO DATA(WA_RESULTADO) WHERE ID_CLASSIFICACAO = ME->CARGA-ID_CLASSIFICACAO.
        CASE WA_RESULTADO-TP_CARACTERISTICA.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
            OBJ_ROMANEIO->SET_NR_PERC_UMIDADE( I_NR_PERC_UMIDADE = WA_RESULTADO-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
            OBJ_ROMANEIO->SET_NR_PERC_IMPUREZA( I_NR_PERC_IMPUREZA = WA_RESULTADO-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA( I_NR_PERC_AVARIA = WA_RESULTADO-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
            OBJ_ROMANEIO->SET_NR_PERC_ARDIDO( I_NR_PERC_ARDIDO = WA_RESULTADO-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
            OBJ_ROMANEIO->SET_NR_PERC_QUEBRA( I_NR_PERC_QUEBRA = CONV #( WA_RESULTADO-NR_PERCENTUAL_COM ) ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
            OBJ_ROMANEIO->SET_NR_PERC_ESVERD( I_NR_PERC_ESVERD = WA_RESULTADO-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
            OBJ_ROMANEIO->SET_NR_PERC_CARUNCHADO( I_NR_PERC_CARUNCHADO = WA_RESULTADO-NR_PERCENTUAL_COM ).
        ENDCASE.
      ENDLOOP.

      LOOP AT ME->ZIF_CARGA~RESULTADO_AVARIADO INTO DATA(WA_RES_AVA) WHERE ID_CLASSIFICACAO = ME->CARGA-ID_CLASSIFICACAO.
        CASE WA_RES_AVA-TP_SUB_CARAC_AVARIADO.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_ARQ( I_NR_PERC_AVARIA_ARQ = WA_RES_AVA-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_QUE.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_QUE( I_NR_PERC_AVARIA_QUE = WA_RES_AVA-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_MOF.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_MOF( I_NR_PERC_AVARIA_MOF = WA_RES_AVA-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_PIC.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_PIC( I_NR_PERC_AVARIA_PIC = WA_RES_AVA-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_FER.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_FER( I_NR_PERC_AVARIA_FER = WA_RES_AVA-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GER.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_GER( I_NR_PERC_AVARIA_GER = WA_RES_AVA-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARD.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_ARD( I_NR_PERC_AVARIA_ARD = WA_RES_AVA-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GES.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_GES( I_NR_PERC_AVARIA_GES = WA_RES_AVA-NR_PERCENTUAL_COM ).
        ENDCASE.
      ENDLOOP.

      IF WA_ROMANEIO-ST_PROC IS INITIAL.
        ME->GET_FACTORY_TP_TRANSGENIA( EXPORTING I_CLASSIFICACAO = ME->CLASSIFICACAO IMPORTING E_TP_TRANSGENIA = DATA(E_TP_TRANSGENIA) ).
        ME->ZIF_CARGA~GET_INFO_PEDIDO_COMPRA( EXPORTING I_PEDIDO_COMPRA = WA_PEDIDO-NR_PEDIDO_COMPRA IMPORTING E_PEDIDO = DATA(E_PEDIDO) ).
        OBJ_ROMANEIO->SET_TP_MOVIMENTO( I_TP_MOVIMENTO = ZCL_ROMANEIO=>ST_TP_MOVIMENTO_SAIDA ).
        OBJ_ROMANEIO->SET_DT_MOVIMENTO( I_DT_MOVIMENTO = ME->CARGA-DT_MOVIMENTO ).
        OBJ_ROMANEIO->SET_NR_SAFRA( I_NR_SAFRA = CONV #( ME->CARGA-NR_SAFRA ) ).
        OBJ_ROMANEIO->SET_BUKRS( I_BUKRS = ME->CARGA-ID_BUKRS ).
        OBJ_ROMANEIO->SET_BRANCH( I_BRANCH = ME->CARGA-ID_BRANCH ).
        OBJ_ROMANEIO->SET_ID_CLI_DEST( I_ID_CLI_DEST = ME->CARGA-ID_LOCAL_DESTINO ).
        OBJ_ROMANEIO->SET_MATNR( I_MATNR = ME->CARGA-ID_PRODUTO ).
        OBJ_ROMANEIO->SET_PLACA_CAV( I_PLACA_CAV = ME->CARGA-DS_PLACA_TRATOR ).
        OBJ_ROMANEIO->SET_PLACA_CAR1( I_PLACA_CAR1 = ME->CARGA-DS_PLACA_REBOQ_1 ).
        OBJ_ROMANEIO->SET_PLACA_CAR2( I_PLACA_CAR2 = ME->CARGA-DS_PLACA_REBOQ_2 ).
        OBJ_ROMANEIO->SET_PLACA_CAR3( I_PLACA_CAR3 = ME->CARGA-DS_PLACA_REBOQ_3 ).
        OBJ_ROMANEIO->SET_MOTORISTA( I_MOTORISTA = ME->CARGA-ID_MOTORISTA ).
        OBJ_ROMANEIO->SET_DT_FECHAMENTO( I_DT_FECHAMENTO = ME->CARGA-DT_FECHAMENTO ).
        OBJ_ROMANEIO->SET_HR_FECHAMENTO( I_HR_FECHAMENTO = ME->CARGA-HR_FECHAMENTO ).
        OBJ_ROMANEIO->SET_DT_ABERTURA( I_DT_ABERTURA = ME->CARGA-DT_ABERTURA ).
        OBJ_ROMANEIO->SET_HR_ABERTURA( I_HR_ABERTURA = ME->CARGA-HR_ABERTURA ).
        OBJ_ROMANEIO->SET_AGENTE_FRETE( I_AGENTE_FRETE = ME->CARGA-ID_AGENT_FRETE ).
        OBJ_ROMANEIO->SET_ID_INTERFACE( I_ID_INTERFACE = ZCL_ROMANEIO=>INTERFACE_CARGA_SAP ).

        IF E_PEDIDO-ID_LOCAL_COLETA IS NOT INITIAL.
          OBJ_ROMANEIO->SET_PARID( I_PARID = E_PEDIDO-ID_LOCAL_COLETA ).
        ELSE.
          OBJ_ROMANEIO->SET_PARID( I_PARID = CONV #( ME->CARGA-ID_BRANCH ) ).
        ENDIF.

        OBJ_ROMANEIO->SET_ID_CARGA( I_ID_CARGA = ME->CARGA-ID_CARGA ).
        OBJ_ROMANEIO->SET_ID_ORDEM( I_ID_ORDEM = ME->CARGA-ID_ORDEM ).
        OBJ_ROMANEIO->SET_TP_TRANSGENIA( I_TP_TRANSGENIA = E_TP_TRANSGENIA ).
        OBJ_ROMANEIO->SET_VBELN( I_VBELN = WA_PEDIDO-NR_PEDIDO_COMPRA ).
        OBJ_ROMANEIO->SET_TP_FRETE( I_TP_FRETE = CONV #( E_PEDIDO-DS_TIPO_FRETE ) ).
      ENDIF.
      OBJ_ROMANEIO->SET_NR_TICKET( I_NR_TICKET = ME->CARGA-NR_TICKET ).

      READ TABLE ROMANEIOS_ENTRADA INDEX 1 INTO WA_ROMANEIOS_ENTRADA.
      IF SY-SUBRC IS INITIAL.
        OBJ_ROMANEIO->SET_ID_REFERENCIA( I_ID_REFERENCIA = CONV #( WA_ROMANEIOS_ENTRADA-NR_ROMANEIO ) ).
      ENDIF.

      DATA(R_GEROU) = OBJ_ROMANEIO->ZIF_CADASTRO~GRAVAR_REGISTRO( ).

      IF R_GEROU EQ ABAP_TRUE OR OBJ_ROMANEIO->CK_ALTEROU EQ ABAP_FALSE.
        OBJ_ROMANEIO->ZIF_CADASTRO~GET_REGISTRO( IMPORTING E_REGISTRO = LC_ROMANEIO ).
        READ TABLE ME->ZIF_CARGA~PEDIDO_COMPRA ASSIGNING FIELD-SYMBOL(<FS_PEDIDO>) WITH KEY NR_PEDIDO_COMPRA = WA_PEDIDO-NR_PEDIDO_COMPRA.
        <FS_PEDIDO>-NR_ROMANEIO_SAI   = LC_ROMANEIO-NR_ROMANEIO.
        <FS_PEDIDO>-CH_REFERENCIA_SAI = LC_ROMANEIO-CH_REFERENCIA.
        ME->CK_ALTEROU = ABAP_TRUE.
        "retirado o gravar
        "BREAK-POINT.
        "ME->GRAVAR_REGISTRO( ).
      ELSE.

        TRY .
            "Se não der erro pode excluir o Romaneio
            ME->ZIF_CARGA~GET_CK_EXCLUIR_ROMANEIO_SAIDA( EXPORTING I_CK_OPUS = ABAP_TRUE ).
            IF ME->CARGA-ID_CARGA IS NOT INITIAL.
              DELETE FROM ZSDT0001 WHERE TP_MOVIMENTO = ZCL_ROMANEIO=>ST_TP_MOVIMENTO_SAIDA AND ID_CARGA EQ ME->CARGA-ID_CARGA.
              COMMIT WORK.
            ENDIF.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGNO = SY-MSGNO MSGID = SY-MSGID ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
                MSGNO  = SY-MSGNO
                MSGID  = SY-MSGID
                MSGTY  = 'E'
                MSGV1  = SY-MSGV1
                MSGV2  = SY-MSGV2
                MSGV3  = SY-MSGV3
                MSGV4  = SY-MSGV4.

          CATCH ZCX_CARGA.
            "Não pode Excluir o Romaneio Continua com Ela
            OBJ_ROMANEIO->ZIF_CADASTRO~GET_REGISTRO( IMPORTING E_REGISTRO = LC_ROMANEIO ).
            READ TABLE ME->ZIF_CARGA~PEDIDO_COMPRA ASSIGNING <FS_PEDIDO> WITH KEY NR_PEDIDO_COMPRA = WA_PEDIDO-NR_PEDIDO_COMPRA.
            <FS_PEDIDO>-NR_ROMANEIO_SAI   = LC_ROMANEIO-NR_ROMANEIO.
            <FS_PEDIDO>-CH_REFERENCIA_SAI = LC_ROMANEIO-CH_REFERENCIA.
            ME->CK_ALTEROU = ABAP_TRUE.
        ENDTRY.

      ENDIF.

    ENDLOOP.

    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM).

      READ TABLE ROMANEIOS INTO WA_ROMANEIO WITH KEY ID_CARGA = WA_ORDEM-ID_CARGA VBELN = WA_ORDEM-NR_ORDEM_VENDA.
      IF SY-SUBRC IS INITIAL.
        OBJ_ROMANEIO->ZIF_CADASTRO~SET_REGISTRO( I_ID_REGISTRO = WA_ROMANEIO-CH_REFERENCIA ).
      ELSE.
        OBJ_ROMANEIO->NOVO_REGISTRO( ).
      ENDIF.

      "Somatória dos Pesos de Descontos
      OBJ_ROMANEIO->SET_NR_QTD_UMIDADE(  I_NR_QTD_UMIDADE  = LC_NR_QTD_UMIDADE  ).
      OBJ_ROMANEIO->SET_NR_QTD_IMPUREZA( I_NR_QTD_IMPUREZA = LC_NR_QTD_IMPUREZA ).
      OBJ_ROMANEIO->SET_NR_QTD_AVARIA(   I_NR_QTD_AVARIA   = LC_NR_QTD_AVARIA   ).
      OBJ_ROMANEIO->SET_NR_QTD_ARDIDO(   I_NR_QTD_ARDIDO   = LC_NR_QTD_ARDIDO   ).
      OBJ_ROMANEIO->SET_NR_QTD_QUEBRA(   I_NR_QTD_QUEBRA   = LC_NR_QTD_QUEBRA   ).
      OBJ_ROMANEIO->SET_NR_QTD_ESVERD(   I_NR_QTD_ESVERD   = LC_NR_QTD_ESVERD   ).
      OBJ_ROMANEIO->SET_NR_QTD_CARUNCHADO( I_NR_QTD_CARUNCHADO = LC_NR_QTD_CARUNCH ).

      IF WA_ROMANEIO-ST_PROC IS INITIAL.
        "Somatória dos Pesos Liquido/SubTotal
        OBJ_ROMANEIO->SET_PESO_LIQ(        I_PESO_LIQ        = CONV #( WA_ORDEM-NM_PESO_SUBTOTAL ) ). "LC_PESO_SUBTOTAL   ).
        OBJ_ROMANEIO->SET_PESO_SUBTOTAL(   I_PESO_SUBTOTAL   = CONV #( WA_ORDEM-NM_PESO_SUBTOTAL ) ). "LC_PESO_SUBTOTAL   ).
        OBJ_ROMANEIO->SET_PESO_TARA(       I_PESO_TARA       = CONV #( WA_ORDEM-NM_PESO_TARA ) ). " ME->CARGA-NM_PESO_TARA ) ).
        OBJ_ROMANEIO->SET_PESO_BRUTO(      I_PESO_BRUTO = CONV #( WA_ORDEM-NM_PESO_TARA + WA_ORDEM-NM_PESO_SUBTOTAL ) ). "ME->CARGA-NM_PESO_TARA + LC_PESO_SUBTOTAL ) ).
        OBJ_ROMANEIO->SET_PESO_FISCAL(     I_PESO_FISCAL = CONV #( WA_ORDEM-NM_PESO_LIQUIDO ) ). " LC_NR_QUANTIDADE ) ).
      ENDIF.

      "Cópia de % de Qualidade
      LOOP AT ME->RESULTADO INTO WA_RESULTADO WHERE ID_CLASSIFICACAO = ME->CARGA-ID_CLASSIFICACAO.
        CASE WA_RESULTADO-TP_CARACTERISTICA.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
            OBJ_ROMANEIO->SET_NR_PERC_UMIDADE( I_NR_PERC_UMIDADE = WA_RESULTADO-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
            OBJ_ROMANEIO->SET_NR_PERC_IMPUREZA( I_NR_PERC_IMPUREZA = WA_RESULTADO-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA( I_NR_PERC_AVARIA = WA_RESULTADO-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
            OBJ_ROMANEIO->SET_NR_PERC_ARDIDO( I_NR_PERC_ARDIDO = WA_RESULTADO-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
            OBJ_ROMANEIO->SET_NR_PERC_QUEBRA( I_NR_PERC_QUEBRA = CONV #( WA_RESULTADO-NR_PERCENTUAL_COM ) ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
            OBJ_ROMANEIO->SET_NR_PERC_ESVERD( I_NR_PERC_ESVERD = WA_RESULTADO-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
            OBJ_ROMANEIO->SET_NR_PERC_CARUNCHADO( I_NR_PERC_CARUNCHADO = WA_RESULTADO-NR_PERCENTUAL_COM ).
        ENDCASE.
      ENDLOOP.

      LOOP AT ME->ZIF_CARGA~RESULTADO_AVARIADO INTO WA_RES_AVA WHERE ID_CLASSIFICACAO = ME->CARGA-ID_CLASSIFICACAO.
        CASE WA_RES_AVA-TP_SUB_CARAC_AVARIADO.
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARQ.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_ARQ( I_NR_PERC_AVARIA_ARQ = WA_RES_AVA-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_QUE.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_QUE( I_NR_PERC_AVARIA_QUE = WA_RES_AVA-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_MOF.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_MOF( I_NR_PERC_AVARIA_MOF = WA_RES_AVA-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_PIC.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_PIC( I_NR_PERC_AVARIA_PIC = WA_RES_AVA-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_FER.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_FER( I_NR_PERC_AVARIA_FER = WA_RES_AVA-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GER.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_GER( I_NR_PERC_AVARIA_GER = WA_RES_AVA-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_ARD.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_ARD( I_NR_PERC_AVARIA_ARD = WA_RES_AVA-NR_PERCENTUAL_COM ).
          WHEN ZIF_CARGA=>ST_TP_CARACT_SUB_GES.
            OBJ_ROMANEIO->SET_NR_PERC_AVARIA_GES( I_NR_PERC_AVARIA_GES = WA_RES_AVA-NR_PERCENTUAL_COM ).
        ENDCASE.
      ENDLOOP.

      IF WA_ROMANEIO-ST_PROC IS INITIAL.
        ME->GET_FACTORY_TP_TRANSGENIA( EXPORTING I_CLASSIFICACAO = ME->CLASSIFICACAO IMPORTING E_TP_TRANSGENIA = E_TP_TRANSGENIA ).
        ME->GET_INFO_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = WA_ORDEM-NR_ORDEM_VENDA IMPORTING E_ORDEM = DATA(E_ORDEM) ).
        OBJ_ROMANEIO->SET_TP_MOVIMENTO( I_TP_MOVIMENTO = ZCL_ROMANEIO=>ST_TP_MOVIMENTO_SAIDA ).
        OBJ_ROMANEIO->SET_DT_MOVIMENTO( I_DT_MOVIMENTO = ME->CARGA-DT_MOVIMENTO ).
        OBJ_ROMANEIO->SET_NR_SAFRA( I_NR_SAFRA = CONV #( ME->CARGA-NR_SAFRA ) ).
        OBJ_ROMANEIO->SET_BUKRS( I_BUKRS = ME->CARGA-ID_BUKRS ).
        OBJ_ROMANEIO->SET_BRANCH( I_BRANCH = ME->CARGA-ID_BRANCH ).
        OBJ_ROMANEIO->SET_ID_CLI_DEST( I_ID_CLI_DEST = ME->CARGA-ID_LOCAL_DESTINO ).
        OBJ_ROMANEIO->SET_MATNR( I_MATNR = ME->CARGA-ID_PRODUTO ).
        OBJ_ROMANEIO->SET_PLACA_CAV( I_PLACA_CAV = ME->CARGA-DS_PLACA_TRATOR ).
        OBJ_ROMANEIO->SET_PLACA_CAR1( I_PLACA_CAR1 = ME->CARGA-DS_PLACA_REBOQ_1 ).
        OBJ_ROMANEIO->SET_PLACA_CAR2( I_PLACA_CAR2 = ME->CARGA-DS_PLACA_REBOQ_2 ).
        OBJ_ROMANEIO->SET_PLACA_CAR3( I_PLACA_CAR3 = ME->CARGA-DS_PLACA_REBOQ_3 ).
        OBJ_ROMANEIO->SET_MOTORISTA( I_MOTORISTA = ME->CARGA-ID_MOTORISTA ).
        OBJ_ROMANEIO->SET_DT_FECHAMENTO( I_DT_FECHAMENTO = ME->CARGA-DT_FECHAMENTO ).
        OBJ_ROMANEIO->SET_HR_FECHAMENTO( I_HR_FECHAMENTO = ME->CARGA-HR_FECHAMENTO ).
        OBJ_ROMANEIO->SET_DT_ABERTURA( I_DT_ABERTURA = ME->CARGA-DT_ABERTURA ).
        OBJ_ROMANEIO->SET_HR_ABERTURA( I_HR_ABERTURA = ME->CARGA-HR_ABERTURA ).
        OBJ_ROMANEIO->SET_AGENTE_FRETE( I_AGENTE_FRETE = ME->CARGA-ID_AGENT_FRETE ).
        OBJ_ROMANEIO->SET_ID_INTERFACE( I_ID_INTERFACE = ZCL_ROMANEIO=>INTERFACE_CARGA_SAP ).
        OBJ_ROMANEIO->SET_PARID( I_PARID = CONV #( ME->CARGA-ID_BRANCH ) ).
        OBJ_ROMANEIO->SET_ID_CARGA( I_ID_CARGA = ME->CARGA-ID_CARGA ).
        OBJ_ROMANEIO->SET_TP_TRANSGENIA( I_TP_TRANSGENIA = E_TP_TRANSGENIA ).
        OBJ_ROMANEIO->SET_ID_ORDEM( I_ID_ORDEM = ME->CARGA-ID_ORDEM ).

        ZCL_ORDEM_VENDA=>ZIF_ORDEM_VENDA~GET_INSTANCE(
                      )->SET_ORDEM_VENDA( I_VBELN = WA_ORDEM-NR_ORDEM_VENDA
                      )->GET_TIPO_FRETE( IMPORTING E_TIPO_FRETE = DATA(E_TIPO_FRETE)
                      ).

        OBJ_ROMANEIO->SET_VBELN( I_VBELN = WA_ORDEM-NR_ORDEM_VENDA ).
        OBJ_ROMANEIO->SET_TP_FRETE( I_TP_FRETE = CONV #( E_TIPO_FRETE ) ).

        " Ajustatar Itens """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        SELECT SINGLE * INTO @DATA(WA_MARA)
          FROM MARA
         WHERE MATNR EQ @ME->CARGA-ID_PRODUTO.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            INPUT  = WA_MARA-MATKL
          IMPORTING
            OUTPUT = WA_MARA-MATKL.

        IF WA_MARA-MATKL EQ ZIF_CARGA=>ST_GRUPO_ALGODAO_PLUMA. "Algodão

          DATA(ITEMS_ROMANEIO) = OBJ_ROMANEIO->GET_ITENS( ).

          LOOP AT ITEMS_ROMANEIO INTO DATA(WA_ITEMS_ROMANEIO).
            OBJ_ROMANEIO->DEL_ITEM( I_ITEM = WA_ITEMS_ROMANEIO ).
          ENDLOOP.

          DATA: I_ITEM  TYPE ZSDT0001_ITEM.
          DATA: I_FARDO TYPE ZSDT0001_ITEM_FD.

          CLEAR: I_ITEM.
          I_ITEM-CD_ITEM  = '0000000001'.
          I_ITEM-MATNR    = ME->CARGA-ID_PRODUTO.
          I_ITEM-VBELN    = WA_ORDEM-NR_ORDEM_VENDA.
          I_ITEM-CHARG    = ME->CARGA-NR_SAFRA.
          I_ITEM-LFIMG    = WA_ORDEM-NM_PESO_LIQUIDO.
          I_ITEM-MEINS    = 'KG'.
          I_ITEM-BRGEW    = WA_ORDEM-NM_PESO_SUBTOTAL.
          I_ITEM-NTGEW    = WA_ORDEM-NM_PESO_LIQUIDO.
          I_ITEM-GEWEI    = 'KG'.
          I_ITEM-VOLUM    = WA_ORDEM-QT_FARDOS.
          I_ITEM-VOLEH    = 'FD'.
          I_ITEM-ID_CARGA = ME->CARGA-ID_CARGA.
          OBJ_ROMANEIO->ADD_ITEM( CHANGING I_ITEM = I_ITEM ).

          DATA(LC_BLOCOS) = ME->ZIF_CARGA~BLOCOS[].
          DELETE LC_BLOCOS WHERE NR_ORDEM_VENDA NE WA_ORDEM-NR_ORDEM_VENDA.
          SORT LC_BLOCOS BY ZSEQ_INST OBJEK OBJECTTABLE.
          DELETE ADJACENT DUPLICATES FROM LC_BLOCOS COMPARING ZSEQ_INST OBJEK OBJECTTABLE.
          LOOP AT LC_BLOCOS INTO DATA(BLOCOS).

            CLEAR: I_FARDO.
            I_FARDO-CD_ITEM         = I_ITEM-CD_ITEM.
            I_FARDO-CD_ITEM_FARDO   = SY-TABIX.

            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                INPUT  = I_FARDO-CD_ITEM_FARDO
              IMPORTING
                OUTPUT = I_FARDO-CD_ITEM_FARDO.

            BLOCOS-QT_FARDOS       = 0.
            BLOCOS-PS_FARDOS_BRUTO = 0.
            BLOCOS-PS_FARDOS_LIQUI = 0.

            LOOP AT ME->ZIF_CARGA~BLOCOS INTO DATA(WA_BLOCOS)
              WHERE ZSEQ_INST      EQ BLOCOS-ZSEQ_INST
                AND OBJEK          EQ BLOCOS-OBJEK
                AND OBJECTTABLE    EQ BLOCOS-OBJECTTABLE
                AND NR_ORDEM_VENDA EQ BLOCOS-NR_ORDEM_VENDA.

              ADD WA_BLOCOS-QT_FARDOS       TO BLOCOS-QT_FARDOS.
              ADD WA_BLOCOS-PS_FARDOS_BRUTO TO BLOCOS-PS_FARDOS_BRUTO.
              ADD WA_BLOCOS-PS_FARDOS_LIQUI TO BLOCOS-PS_FARDOS_LIQUI.
            ENDLOOP.

            I_FARDO-ZSEQ_INST       = BLOCOS-ZSEQ_INST.
            I_FARDO-OBJEK           = BLOCOS-OBJEK.
            I_FARDO-OBJECTTABLE     = BLOCOS-OBJECTTABLE.
            I_FARDO-NM_BLOCO        = BLOCOS-NM_BLOCO.
            I_FARDO-QT_FARDOS       = BLOCOS-QT_FARDOS.
            I_FARDO-MEINS           = BLOCOS-MEINS.
            I_FARDO-PS_FARDOS_LIQUI = BLOCOS-PS_FARDOS_LIQUI.
            I_FARDO-PS_FARDOS_BRUTO = BLOCOS-PS_FARDOS_BRUTO.
            OBJ_ROMANEIO->ADD_FARDOS( I_FARDOS = I_FARDO ).
            CLEAR: I_FARDO.

          ENDLOOP.
        ENDIF.
        """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      ENDIF.

      OBJ_ROMANEIO->SET_NR_TICKET( I_NR_TICKET = ME->CARGA-NR_TICKET ).

      READ TABLE ROMANEIOS_ENTRADA INDEX 1 INTO WA_ROMANEIOS_ENTRADA.
      IF SY-SUBRC IS INITIAL.
        OBJ_ROMANEIO->SET_ID_REFERENCIA( I_ID_REFERENCIA = CONV #( WA_ROMANEIOS_ENTRADA-NR_ROMANEIO ) ).
      ENDIF.

      R_GEROU = OBJ_ROMANEIO->ZIF_CADASTRO~GRAVAR_REGISTRO( ).

      IF R_GEROU EQ ABAP_TRUE OR OBJ_ROMANEIO->CK_ALTEROU EQ ABAP_FALSE.
        OBJ_ROMANEIO->ZIF_CADASTRO~GET_REGISTRO( IMPORTING E_REGISTRO = LC_ROMANEIO ).
        READ TABLE ME->ZIF_CARGA~ORDEM_VENDA ASSIGNING FIELD-SYMBOL(<FS_ORDEM>) WITH KEY NR_ORDEM_VENDA = WA_ORDEM-NR_ORDEM_VENDA.
        <FS_ORDEM>-NR_ROMANEIO_SAI   = LC_ROMANEIO-NR_ROMANEIO.
        <FS_ORDEM>-CH_REFERENCIA_SAI = LC_ROMANEIO-CH_REFERENCIA.
        ME->CK_ALTEROU = ABAP_TRUE.
      ELSE.
        IF ME->CARGA-ID_CARGA IS NOT INITIAL.

          TRY .
              "Se não der erro pode excluir o Romaneio
              ME->ZIF_CARGA~GET_CK_EXCLUIR_ROMANEIO_SAIDA( EXPORTING I_CK_OPUS = ABAP_TRUE ).
              IF ME->CARGA-ID_CARGA IS NOT INITIAL.
                DELETE FROM ZSDT0001
                 WHERE TP_MOVIMENTO EQ ZCL_ROMANEIO=>ST_TP_MOVIMENTO_SAIDA
                   AND ID_CARGA     EQ ME->CARGA-ID_CARGA
                   AND ID_CARGA     NE SPACE.

                IF SY-SUBRC IS INITIAL.

                  SELECT * INTO TABLE @DATA(IT_ZSDT0001_ITEM)
                    FROM ZSDT0001_ITEM
                   WHERE ID_CARGA EQ @ME->CARGA-ID_CARGA
                     AND ID_CARGA NE @SPACE.

                  LOOP AT IT_ZSDT0001_ITEM INTO DATA(WA_ZSDT0001_ITEM).
                    DELETE FROM ZSDT0001_ITEM_FD
                     WHERE CH_REFERENCIA EQ WA_ZSDT0001_ITEM-CH_REFERENCIA
                       AND CD_ITEM EQ WA_ZSDT0001_ITEM-CD_ITEM.
                  ENDLOOP.

                  DELETE FROM ZSDT0001_ITEM WHERE ID_CARGA EQ ME->CARGA-ID_CARGA.
                ENDIF.

                COMMIT WORK.
              ENDIF.
              RAISE EXCEPTION TYPE ZCX_CARGA
                EXPORTING
                  TEXTID = VALUE #( MSGNO = SY-MSGNO MSGID = SY-MSGID ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
                  MSGNO  = SY-MSGNO
                  MSGID  = SY-MSGID
                  MSGTY  = 'E'
                  MSGV1  = SY-MSGV1
                  MSGV2  = SY-MSGV2
                  MSGV3  = SY-MSGV3
                  MSGV4  = SY-MSGV4.

            CATCH ZCX_CARGA.
              "Não pode Excluir o Romaneio Continua com Ela
              OBJ_ROMANEIO->ZIF_CADASTRO~GET_REGISTRO( IMPORTING E_REGISTRO = LC_ROMANEIO ).
              READ TABLE ME->ZIF_CARGA~ORDEM_VENDA ASSIGNING <FS_ORDEM> WITH KEY NR_ORDEM_VENDA = WA_ORDEM-NR_ORDEM_VENDA.
              <FS_ORDEM>-NR_ROMANEIO_SAI   = LC_ROMANEIO-NR_ROMANEIO.
              <FS_ORDEM>-CH_REFERENCIA_SAI = LC_ROMANEIO-CH_REFERENCIA.
              ME->CK_ALTEROU = ABAP_TRUE.
          ENDTRY.


        ENDIF.
        IF SY-MSGID IS NOT INITIAL AND SY-MSGNO IS NOT INITIAL.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGNO = SY-MSGNO MSGID = SY-MSGID ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
              MSGNO  = SY-MSGNO
              MSGID  = SY-MSGID
              MSGTY  = 'E'
              MSGV1  = SY-MSGV1
              MSGV2  = SY-MSGV2
              MSGV3  = SY-MSGV3
              MSGV4  = SY-MSGV4.
        ELSE.
          ME->ZIF_CARGA~GERA_ERRO_GERAL( I_TEXTO = 'SAP: Erro ao tentar gerar Romaneio de Saída!' ).
        ENDIF.
      ENDIF.
    ENDLOOP.

    FREE OBJ_ROMANEIO.
    CLEAR: OBJ_ROMANEIO.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_GERA_IMPOSTO_NOTA.

    DATA: WA_BRANCH_ADDRESS TYPE BAPI0002_3,
          WA_IMPOSTO        LIKE LINE OF ME->DOCUMENTO_FISCAL_IMP_RET.

    DELETE ME->DOCUMENTO_FISCAL_IMP_RET WHERE ID_NOTA EQ I_NOTA-ID_NOTA.

    "Gerar Impostos Retidos """""""""""""""""""""""""""""""""""""""""""""""""""""""
    SELECT SINGLE * INTO @DATA(WA_ZSDT0001TETN)
      FROM ZSDT0001TETN
     WHERE ID_ENTRADA EQ @I_NOTA-ID_ENTRADA.

    CHECK SY-SUBRC IS INITIAL.

    SELECT SINGLE * INTO @DATA(WA_ZSDT0001MT)
      FROM ZSDT0001MT
     WHERE MATNR EQ @ME->CARGA-ID_PRODUTO.

    CHECK SY-SUBRC IS INITIAL.

    CALL FUNCTION 'BAPI_BRANCH_GETDETAIL'
      EXPORTING
        COMPANY        = ME->CARGA-ID_BUKRS
        BRANCH         = ME->CARGA-ID_BRANCH
      IMPORTING
        BRANCH_ADDRESS = WA_BRANCH_ADDRESS.

    IF ME->CARGA-DT_MOVIMENTO IS INITIAL.
      ME->CARGA-DT_MOVIMENTO = SY-DATLO.
    ENDIF.

    SELECT * INTO TABLE @DATA(IT_ZSDT0001IM)
      FROM ZSDT0001IM
     WHERE ID_TIPO_NOTA EQ @WA_ZSDT0001TETN-ID_TIPO_NOTA
       AND TP_GRUPO_CTB EQ @WA_ZSDT0001MT-TP_GRUPO_CTB
       AND REGIO        EQ @WA_BRANCH_ADDRESS-REGION
       AND DT_INICIAL   LE @ME->CARGA-DT_MOVIMENTO
       AND DT_FINAL     GE @ME->CARGA-DT_MOVIMENTO.

    CHECK SY-SUBRC IS INITIAL.

    ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
      )->SET_PARCEIRO( I_PARCEIRO = I_NOTA-ID_FORNECEDOR
      )->GET_REGIO( IMPORTING E_REGIO = DATA(E_REGIO)
      )->GET_TIPO_PARCEIRO( IMPORTING E_TIPO = DATA(E_TIPO_PESSOA)
      ).

    "Exceção do FUNRUAL
    DATA(LC_FUN_EXCEPTION) = ABAP_FALSE.

    SELECT SINGLE * INTO @DATA(WA_EXCECAO_FUN)
      FROM ZSDT0001FUNEX
     WHERE LIFNR EQ @I_NOTA-ID_FORNECEDOR
       AND DT_INICIO LE @I_NOTA-DT_EMISSAO
       AND DT_FINAL  GE @I_NOTA-DT_EMISSAO.

    IF SY-SUBRC IS INITIAL.
      LC_FUN_EXCEPTION = ABAP_TRUE.
    ENDIF.

    LOOP AT IT_ZSDT0001IM INTO DATA(WA_ZSDT0001IM).

      CLEAR: WA_IMPOSTO.

      "Verifica se tem exceção de fun rural
      IF LC_FUN_EXCEPTION EQ ABAP_TRUE AND WA_ZSDT0001IM-TP_TRIBUTO EQ 'FUN'.
        CONTINUE.
      ENDIF.

      "Verifica se o imposto deve ser gerado para o tipo do parceiro físico/jurídico
      IF NOT ( ( WA_ZSDT0001IM-TP_PESSOA EQ E_TIPO_PESSOA ) OR ( WA_ZSDT0001IM-TP_PESSOA EQ SPACE ) ).
        CONTINUE.
      ENDIF.

      IF E_REGIO EQ WA_BRANCH_ADDRESS-REGION.
        DATA(LC_ID_SITUACAO) = WA_ZSDT0001IM-ID_SITUACAO_ESTADO.
      ELSE.
        LC_ID_SITUACAO = WA_ZSDT0001IM-ID_SITUACAO_FORA.
      ENDIF.

      SELECT SINGLE * INTO @DATA(WA_ZSDT0001ST)
        FROM ZSDT0001ST
       WHERE ID_SITUACAO_TRIB EQ @LC_ID_SITUACAO.

      CHECK WA_ZSDT0001ST-CK_SUBST_TRIBUTARIA EQ ABAP_FALSE.

      WA_IMPOSTO-ID_CARGA         = I_NOTA-ID_CARGA.
      WA_IMPOSTO-ID_NOTA          = I_NOTA-ID_NOTA.
      WA_IMPOSTO-ID_LANC_IMPOSTO  = WA_ZSDT0001IM-ID_LANC_IMPOSTO.
      WA_IMPOSTO-TP_TRIBUTO       = WA_ZSDT0001IM-TP_TRIBUTO.
      WA_IMPOSTO-CD_IMPOSTO       = WA_ZSDT0001IM-CD_IMPOSTO.
      WA_IMPOSTO-CD_CATEGORIA     = WA_ZSDT0001IM-CD_CATEGORIA.
      WA_IMPOSTO-ID_TIPO_NOTA     = WA_ZSDT0001IM-ID_TIPO_NOTA.
      WA_IMPOSTO-TP_GRUPO_CTB     = WA_ZSDT0001IM-TP_GRUPO_CTB.
      WA_IMPOSTO-REGIO            = WA_ZSDT0001IM-REGIO.
      WA_IMPOSTO-LIFNR            = I_NOTA-ID_FORNECEDOR.
      WA_IMPOSTO-REGIO_FORN       = E_REGIO.
      WA_IMPOSTO-TP_PESSOA_FORN   = E_TIPO_PESSOA.
      WA_IMPOSTO-ID_SITUACAO_TRIB = LC_ID_SITUACAO.
      WA_IMPOSTO-MATNR            = ME->CARGA-ID_PRODUTO.

      WA_IMPOSTO-NM_ALIQUOTA      = 0.
      WA_IMPOSTO-NM_QUANTIDADE    = 0.
      WA_IMPOSTO-BASE_IMPOSTO     = 0.
      WA_IMPOSTO-VLR_IMPOSTO      = 0.
      WA_IMPOSTO-VLR_ISENTO       = 0.
      WA_IMPOSTO-OUTROS_ICMS      = 0.
      WA_IMPOSTO-PERCENT_REDUCAO  = 0.

      IF WA_ZSDT0001IM-TP_TRIBUTO EQ 'FET' OR WA_ZSDT0001IM-TP_TRIBUTO EQ 'FAC'.
        WA_IMPOSTO-DT_BASE = ME->CARGA-DT_MOVIMENTO.
      ELSE.
        WA_IMPOSTO-DT_BASE = I_NOTA-DT_EMISSAO.
      ENDIF.

      "Busca Aliquota do Imposto
      IF WA_ZSDT0001ST-TP_TRIBUTACAO EQ 'T' OR WA_ZSDT0001ST-TP_TRIBUTACAO EQ 'R'.
        SELECT * INTO @DATA(WA_ZSDT0001IMTX)
          FROM ZSDT0001IMTX
         WHERE ID_LANC_IMPOSTO EQ @WA_ZSDT0001IM-ID_LANC_IMPOSTO
           AND DT_INICIAL      LE @WA_IMPOSTO-DT_BASE
           AND DT_FINAL        GE @WA_IMPOSTO-DT_BASE.
          IF WA_ZSDT0001IMTX-TP_PESSOA EQ E_TIPO_PESSOA OR WA_ZSDT0001IMTX-TP_PESSOA EQ SPACE.
            DATA(LC_TAXAVLR) = WA_ZSDT0001IMTX-NM_ALIQUOTA.
          ENDIF.
        ENDSELECT.
      ENDIF.

      CASE WA_ZSDT0001ST-TP_TRIBUTACAO.
        WHEN 'T'.
          IF WA_ZSDT0001ST-NM_PERCENTUAL IS NOT INITIAL.

            IF WA_ZSDT0001IM-TP_TRIBUTO EQ 'FET' OR
               WA_ZSDT0001IM-TP_TRIBUTO EQ 'FAC' OR
               WA_ZSDT0001IM-TP_TRIBUTO EQ 'FAB' OR
               WA_ZSDT0001IM-TP_TRIBUTO EQ 'IMA'.
              WA_IMPOSTO-BASE_IMPOSTO = I_NOTA-NR_QUANTIDADE.

              SELECT * INTO @DATA(WA_ZSDT0001IMQT)
                FROM ZSDT0001IMQT
               WHERE ID_LANC_IMPOSTO EQ @WA_ZSDT0001IM-ID_LANC_IMPOSTO
                 AND DT_INICIAL      LE @WA_IMPOSTO-DT_BASE
                 AND DT_FINAL        GE @WA_IMPOSTO-DT_BASE
                 AND MATNR           EQ @WA_IMPOSTO-MATNR.
                WA_IMPOSTO-NM_ALIQUOTA   = WA_ZSDT0001IMQT-NM_ALIQUOTA.
                WA_IMPOSTO-NM_QUANTIDADE = WA_ZSDT0001IMQT-NM_QUANTIDADE.
                WA_IMPOSTO-VLR_IMPOSTO   = ( WA_IMPOSTO-BASE_IMPOSTO / WA_ZSDT0001IMQT-NM_QUANTIDADE ) * WA_IMPOSTO-NM_ALIQUOTA.
              ENDSELECT.

            ELSE.
              WA_IMPOSTO-BASE_IMPOSTO = I_NOTA-NR_VALOR.
              IF LC_TAXAVLR IS NOT INITIAL.
                WA_IMPOSTO-NM_ALIQUOTA = LC_TAXAVLR.
              ELSE.
                WA_IMPOSTO-NM_ALIQUOTA = WA_ZSDT0001ST-NM_PERCENTUAL.
              ENDIF.
              WA_IMPOSTO-VLR_IMPOSTO = WA_IMPOSTO-BASE_IMPOSTO * ( WA_IMPOSTO-NM_ALIQUOTA / 100 ).
            ENDIF.
          ENDIF.

        WHEN 'I'.
          WA_IMPOSTO-VLR_ISENTO = I_NOTA-NR_VALOR.
        WHEN 'O'.
          WA_IMPOSTO-OUTROS_ICMS = I_NOTA-NR_VALOR.
        WHEN 'S'.
          WA_IMPOSTO-OUTROS_ICMS = I_NOTA-NR_VALOR.
        WHEN 'R'.

          WA_IMPOSTO-PERCENT_REDUCAO = WA_ZSDT0001ST-NM_PERCENTUAL_RED.

          IF LC_TAXAVLR IS NOT INITIAL.
            WA_IMPOSTO-NM_ALIQUOTA = LC_TAXAVLR.
          ELSE.
            WA_IMPOSTO-NM_ALIQUOTA = WA_ZSDT0001ST-NM_PERCENTUAL.
          ENDIF.

          WA_IMPOSTO-BASE_IMPOSTO = I_NOTA-NR_VALOR - ( I_NOTA-NR_VALOR * ( WA_IMPOSTO-PERCENT_REDUCAO / 100 ) ).
          WA_IMPOSTO-VLR_IMPOSTO  = WA_IMPOSTO-BASE_IMPOSTO * ( WA_IMPOSTO-NM_ALIQUOTA / 100 ).
          WA_IMPOSTO-VLR_ISENTO   = I_NOTA-NR_VALOR - WA_IMPOSTO-BASE_IMPOSTO.

      ENDCASE.

      APPEND WA_IMPOSTO TO ME->DOCUMENTO_FISCAL_IMP_RET.

    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ID_CARGA.

    R_CARGA = ME.

    ME->CARGA-ID_CARGA         = I_ID_CARGA.
    ME->CLASSIFICACAO-ID_CARGA = I_ID_CARGA.

    ME->SET_ENQUEUE( I_CARGA = ME->CARGA-ID_CARGA ).

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ID_CLASSIFICACAO.

    R_CARGA = ME.

    ME->CLASSIFICACAO-ID_CLASSIFICACAO = I_ID_CLASSIFICACAO.
    ME->CARGA-ID_CLASSIFICACAO         = I_ID_CLASSIFICACAO.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ID_SOLIC_MANUT.

    R_CARGA = ME.

    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO = I_ID_SOLICITACAO.

  ENDMETHOD.


  method ZIF_CARGA~SET_INFO_FRETE_WITHOUT_OC.

    R_CARGA = ME.

    CHECK ME->CARGA-ID_ORDEM IS INITIAL.

    CHECK ME->CARGA-TP_STATUS EQ ZIF_CARGA=>ST_STATUS_ABERTO.

    ME->CARGA-ID_PROPRIETARIO  = I_ID_PROPRIETARIO.
    ME->CARGA-DS_PLACA_TRATOR  = I_DS_PLACA_TRATOR.
    ME->CARGA-DS_PLACA_REBOQ_1 = I_DS_PLACA_REBOQ_1.
    ME->CARGA-DS_PLACA_REBOQ_2 = I_DS_PLACA_REBOQ_2.
    ME->CARGA-DS_PLACA_REBOQ_3 = I_DS_PLACA_REBOQ_3.
    ME->CARGA-ID_MOTORISTA     = I_ID_MOTORISTA.
    ME->CARGA-DS_MOTORISTA     = I_DS_MOTORISTA.


  endmethod.


  METHOD ZIF_CARGA~SET_INFO_FRETE_WITHOUT_OV.

    R_CARGA = ME.

    CHECK ME->CARGA-TP_FRETE EQ ZIF_CARGA=>ST_TP_FRETE_CPT.

    CHECK ME->CARGA-TP_STATUS EQ ZIF_CARGA=>ST_STATUS_ABERTO.

    ME->CARGA-ID_PROPRIETARIO  = I_ID_PROPRIETARIO.
    ME->CARGA-DS_PLACA_TRATOR  = I_DS_PLACA_TRATOR.
    ME->CARGA-DS_PLACA_REBOQ_1 = I_DS_PLACA_REBOQ_1.
    ME->CARGA-DS_PLACA_REBOQ_2 = I_DS_PLACA_REBOQ_2.
    ME->CARGA-DS_PLACA_REBOQ_3 = I_DS_PLACA_REBOQ_3.
    ME->CARGA-ID_MOTORISTA     = I_ID_MOTORISTA.
    ME->CARGA-DS_MOTORISTA     = I_DS_MOTORISTA.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_LIMPA_ROMANEIO_SAIDA.

    DATA: I_TEXTO TYPE STRING.

    DATA: OB_ROMANEIO TYPE REF TO ZCL_ROMANEIO.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.
    CHECK ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.

    ME->GET_ROMANEIO_SAIDA( EXPORTING I_ID_CARGA  = ME->CARGA-ID_CARGA IMPORTING E_ROMANEIOS = DATA(ROMANEIOS) ).

    LOOP AT ROMANEIOS INTO DATA(WA_ROMANEIO).
      IF WA_ROMANEIO-ST_PROC IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ROMANEIO_SAIDA_DOC-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_ROMANEIO_SAIDA_DOC-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_ROMANEIO_SAIDA_DOC-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ROMANEIO_SAIDA_DOC-MSGNO.
      ENDIF.
    ENDLOOP.

    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA ASSIGNING FIELD-SYMBOL(<ORDEM_VENDA>).
      CLEAR: <ORDEM_VENDA>-CH_REFERENCIA_SAI, <ORDEM_VENDA>-NR_ROMANEIO_SAI.
    ENDLOOP.

    TRY .

        LOOP AT ROMANEIOS INTO WA_ROMANEIO.
          CREATE OBJECT OB_ROMANEIO.
          OB_ROMANEIO->ZIF_CADASTRO~SET_REGISTRO( I_ID_REGISTRO = WA_ROMANEIO-CH_REFERENCIA ).
          OB_ROMANEIO->ZIF_CADASTRO~EXCLUIR_REGISTRO( ).
          CLEAR OB_ROMANEIO.
          ME->CK_ALTEROU = ABAP_TRUE.
        ENDLOOP.

      CATCH ZCX_CADASTRO INTO DATA(EX_CADASTRO).

        MESSAGE ID EX_CADASTRO->MSGID TYPE 'S'
         NUMBER EX_CADASTRO->MSGNO
           WITH EX_CADASTRO->MSGV1 EX_CADASTRO->MSGV2 EX_CADASTRO->MSGV3 EX_CADASTRO->MSGV4
           INTO I_TEXTO.

        ME->GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).

    ENDTRY.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_LOCAL_ENTREGA.

    R_CARGA = ME.

    SELECT * INTO TABLE @DATA(IT_LOCAIS)
      FROM ZSDT0001LE_VW
     WHERE ID_LOCAL_ENTREGA EQ @I_ID_LOCAL_ENTREGA
       AND ID_BRANCH   EQ @ME->CARGA-ID_BRANCH.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_LE_SEM_PARAM_LC_NEGOCIO-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_LE_SEM_PARAM_LC_NEGOCIO-MSGNO
                            ATTR1 = CONV #( ME->CARGA-ID_BRANCH ) )
          MSGID  = ZCX_CARGA=>ZCX_LE_SEM_PARAM_LC_NEGOCIO-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_LE_SEM_PARAM_LC_NEGOCIO-MSGNO
          MSGTY  = 'E'
          MSGV1  = CONV #( ME->CARGA-ID_BRANCH ).
    ENDIF.

    READ TABLE IT_LOCAIS WITH KEY ID_MATERIAL = ME->CARGA-ID_PRODUTO TRANSPORTING NO FIELDS.
    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_LE_SEM_PARAM_MATERIAL-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_LE_SEM_PARAM_MATERIAL-MSGNO
                            ATTR1 = CONV #( ME->CARGA-ID_PRODUTO ) )
          MSGID  = ZCX_CARGA=>ZCX_LE_SEM_PARAM_MATERIAL-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_LE_SEM_PARAM_MATERIAL-MSGNO
          MSGTY  = 'E'
          MSGV1  = CONV #( ME->CARGA-ID_PRODUTO ).
    ENDIF.

    ME->CARGA-ID_LOCAL_ENTREGA = I_ID_LOCAL_ENTREGA.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_LOGS_ALTERACAO.

    DATA: LC_DT_REGISTRO       TYPE ZDE_DT_REGISTRO,
          LC_HR_REGISTRO       TYPE ZDE_HR_REGISTRO,
          LC_US_REGISTRO       TYPE ZDE_US_REGISTRO,
          LC_TP_REGISTRO       TYPE ZDE_TP_REGISTRO,
          WA_LOG_ZSDT0001CG    TYPE ZSDT0001CGLG,
          IT_LOG_ZSDT0001NT    TYPE TABLE OF ZSDT0001NTLG,
          WA_LOG_ZSDT0001NT    TYPE ZSDT0001NTLG,
          IT_LOG_ZSDT0001TK    TYPE TABLE OF ZSDT0001TKLG,
          WA_LOG_ZSDT0001TK    TYPE ZSDT0001TKLG,
          IT_LOG_ZSDT0001CL    TYPE TABLE OF ZSDT0001CLLG,
          WA_LOG_ZSDT0001CL    TYPE ZSDT0001CLLG,
          IT_LOG_ZSDT0001RS    TYPE TABLE OF ZSDT0001RSLG,
          WA_LOG_ZSDT0001RS    TYPE ZSDT0001RSLG,
          IT_LOG_ZSDT0001OV    TYPE TABLE OF ZSDT0001OVLG,
          WA_LOG_ZSDT0001OV    TYPE ZSDT0001OVLG,
          IT_LOG_ZSDT0001EK    TYPE TABLE OF ZSDT0001EKLG,
          WA_LOG_ZSDT0001EK    TYPE ZSDT0001EKLG,
          IT_LOG_ZSDT0001RS_03 TYPE TABLE OF ZSDT0001RSLG_03,
          WA_LOG_ZSDT0001RS_03 TYPE ZSDT0001RSLG_03,
          IT_LOG_ZSDT0001FD    TYPE TABLE OF ZSDT0001FDLG,
          WA_LOG_ZSDT0001FD    TYPE ZSDT0001FDLG.

    LC_DT_REGISTRO = SY-DATLO.
    LC_HR_REGISTRO = SY-TIMLO.
    LC_US_REGISTRO = SY-UNAME.

    R_CARGA = ME.

    CLEAR: WA_LOG_ZSDT0001CG,
           WA_LOG_ZSDT0001NT,
           WA_LOG_ZSDT0001CL,
           WA_LOG_ZSDT0001RS,
           WA_LOG_ZSDT0001OV,
           WA_LOG_ZSDT0001EK.

    SELECT SINGLE * INTO @DATA(WA_ZSDT0001CG)
      FROM ZSDT0001CG
     WHERE ID_CARGA EQ @ME->CARGA-ID_CARGA.

    SELECT * INTO TABLE @DATA(IT_ZSDT0001NT)
      FROM ZSDT0001NT
     WHERE ID_CARGA EQ @ME->CARGA-ID_CARGA.

    SELECT * INTO TABLE @DATA(IT_ZSDT0001TK)
      FROM ZSDT0001TK
     WHERE ID_CARGA EQ @ME->CARGA-ID_CARGA.

    "Todas as Classificações
    SELECT * INTO TABLE @DATA(IT_ZSDT0001CL)
      FROM ZSDT0001CL
     WHERE ID_CARGA EQ @ME->CARGA-ID_CARGA.

    SELECT * INTO TABLE @DATA(IT_ZSDT0001RS)
      FROM ZSDT0001RS
     WHERE ID_CARGA EQ @ME->CARGA-ID_CARGA.

    SELECT * INTO TABLE @DATA(IT_ZSDT0001RS_03)
      FROM ZSDT0001RS_03
     WHERE ID_CARGA EQ @ME->CARGA-ID_CARGA.

    SELECT * INTO TABLE @DATA(IT_ZSDT0001OV)
      FROM ZSDT0001OV
     WHERE ID_CARGA EQ @ME->CARGA-ID_CARGA.

    SELECT * INTO TABLE @DATA(IT_ZSDT0001EK)
      FROM ZSDT0001EK
     WHERE ID_CARGA EQ @ME->CARGA-ID_CARGA.

    SELECT * INTO TABLE @DATA(IT_ZSDT0001FD)
      FROM ZSDT0001FD
     WHERE ID_CARGA EQ @ME->CARGA-ID_CARGA.

    IF WA_ZSDT0001CG IS INITIAL.
      LC_TP_REGISTRO = 'I'.
      MOVE-CORRESPONDING ME->CARGA TO WA_LOG_ZSDT0001CG.
      WA_LOG_ZSDT0001CG-DT_REGISTRO = LC_DT_REGISTRO.
      WA_LOG_ZSDT0001CG-HR_REGISTRO = LC_HR_REGISTRO.
      WA_LOG_ZSDT0001CG-US_REGISTRO = LC_US_REGISTRO.
      WA_LOG_ZSDT0001CG-TP_REGISTRO = LC_TP_REGISTRO.
    ELSE.
      LC_TP_REGISTRO = 'A'.
      MOVE-CORRESPONDING ME->CARGA TO WA_LOG_ZSDT0001CG.
      WA_LOG_ZSDT0001CG-DT_REGISTRO = LC_DT_REGISTRO.
      WA_LOG_ZSDT0001CG-HR_REGISTRO = LC_HR_REGISTRO.
      WA_LOG_ZSDT0001CG-US_REGISTRO = LC_US_REGISTRO.
      WA_LOG_ZSDT0001CG-TP_REGISTRO = LC_TP_REGISTRO.
    ENDIF.

    IF IT_ZSDT0001NT[] IS INITIAL.
      LC_TP_REGISTRO = 'I'.
      LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_DOCUMENTO_FISCAL).
        MOVE-CORRESPONDING WA_DOCUMENTO_FISCAL TO WA_LOG_ZSDT0001NT.
        WA_LOG_ZSDT0001NT-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001NT-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001NT-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001NT-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001NT TO IT_LOG_ZSDT0001NT.
      ENDLOOP.
    ELSE.

      "Verifica Exclusão
      LOOP AT IT_ZSDT0001NT INTO DATA(WA_ZSDT0001NT).
        READ TABLE ME->DOCUMENTO_FISCAL WITH KEY ID_CARGA = WA_ZSDT0001NT-ID_CARGA ID_NOTA = WA_ZSDT0001NT-ID_NOTA INTO WA_DOCUMENTO_FISCAL.
        IF SY-SUBRC IS NOT INITIAL.
          LC_TP_REGISTRO = 'E'.
          MOVE-CORRESPONDING WA_ZSDT0001NT TO WA_LOG_ZSDT0001NT.
          WA_LOG_ZSDT0001NT-DT_REGISTRO = LC_DT_REGISTRO.
          WA_LOG_ZSDT0001NT-HR_REGISTRO = LC_HR_REGISTRO.
          WA_LOG_ZSDT0001NT-US_REGISTRO = LC_US_REGISTRO.
          WA_LOG_ZSDT0001NT-TP_REGISTRO = LC_TP_REGISTRO.
          APPEND WA_LOG_ZSDT0001NT TO IT_LOG_ZSDT0001NT.
        ENDIF.
      ENDLOOP.

      "Verifica Alteração
      LOOP AT ME->DOCUMENTO_FISCAL INTO WA_DOCUMENTO_FISCAL.
        READ TABLE IT_ZSDT0001NT INTO WA_ZSDT0001NT WITH KEY ID_CARGA = WA_DOCUMENTO_FISCAL-ID_CARGA ID_NOTA = WA_DOCUMENTO_FISCAL-ID_NOTA.
        IF SY-SUBRC IS INITIAL.
          LC_TP_REGISTRO = 'A'.
        ELSE.
          LC_TP_REGISTRO = 'I'.
        ENDIF.
        MOVE-CORRESPONDING WA_DOCUMENTO_FISCAL TO WA_LOG_ZSDT0001NT.
        WA_LOG_ZSDT0001NT-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001NT-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001NT-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001NT-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001NT TO IT_LOG_ZSDT0001NT.
        "ENDIF.
      ENDLOOP.

    ENDIF.

    IF IT_ZSDT0001TK[] IS INITIAL.
      LC_TP_REGISTRO = 'I'.
      LOOP AT ME->ZIF_CARGA~TAKE_UP INTO DATA(WA_TAKEUP).
        MOVE-CORRESPONDING WA_TAKEUP TO WA_LOG_ZSDT0001TK.
        WA_LOG_ZSDT0001TK-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001TK-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001TK-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001TK-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001TK TO IT_LOG_ZSDT0001TK.
      ENDLOOP.
    ELSE.

      "Verifica Exclusão
      LOOP AT IT_ZSDT0001TK INTO DATA(WA_ZSDT0001TK).
        READ TABLE ME->ZIF_CARGA~TAKE_UP
         WITH KEY ID_CARGA = WA_ZSDT0001TK-ID_CARGA
                  ID_NOTA  = WA_ZSDT0001TK-ID_NOTA
                  ID_TAKEUP = WA_ZSDT0001TK-ID_TAKEUP
                  NU_BLOCO =  WA_ZSDT0001TK-NU_BLOCO
             INTO WA_TAKEUP.
        IF SY-SUBRC IS NOT INITIAL.
          LC_TP_REGISTRO = 'E'.
          MOVE-CORRESPONDING WA_ZSDT0001TK TO WA_LOG_ZSDT0001TK.
          WA_LOG_ZSDT0001TK-DT_REGISTRO = LC_DT_REGISTRO.
          WA_LOG_ZSDT0001TK-HR_REGISTRO = LC_HR_REGISTRO.
          WA_LOG_ZSDT0001TK-US_REGISTRO = LC_US_REGISTRO.
          WA_LOG_ZSDT0001TK-TP_REGISTRO = LC_TP_REGISTRO.
          APPEND WA_LOG_ZSDT0001TK TO IT_LOG_ZSDT0001TK.
        ENDIF.
      ENDLOOP.

      "Verifica Alteração
      LOOP AT ME->ZIF_CARGA~TAKE_UP INTO WA_TAKEUP.
        READ TABLE IT_ZSDT0001TK INTO WA_ZSDT0001TK
        WITH KEY ID_CARGA = WA_TAKEUP-ID_CARGA
                 ID_NOTA = WA_TAKEUP-ID_NOTA
                 ID_TAKEUP = WA_TAKEUP-ID_TAKEUP
                 NU_BLOCO = WA_TAKEUP-NU_BLOCO.

        IF SY-SUBRC IS INITIAL.
          LC_TP_REGISTRO = 'A'.
        ELSE.
          LC_TP_REGISTRO = 'I'.
        ENDIF.

        MOVE-CORRESPONDING WA_TAKEUP TO WA_LOG_ZSDT0001TK.
        WA_LOG_ZSDT0001TK-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001TK-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001TK-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001TK-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001TK TO IT_LOG_ZSDT0001TK.
      ENDLOOP.

    ENDIF.

    IF IT_ZSDT0001CL[] IS INITIAL.
      LC_TP_REGISTRO = 'I'.

      LOOP AT ME->CLASSIFICACAO_NOTAS INTO DATA(WA_CLASSIFICACAO).
        MOVE-CORRESPONDING WA_CLASSIFICACAO TO WA_LOG_ZSDT0001CL.
        WA_LOG_ZSDT0001CL-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001CL-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001CL-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001CL-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001CL TO IT_LOG_ZSDT0001CL.
      ENDLOOP.

      MOVE-CORRESPONDING ME->CLASSIFICACAO TO WA_LOG_ZSDT0001CL.
      WA_LOG_ZSDT0001CL-DT_REGISTRO = LC_DT_REGISTRO.
      WA_LOG_ZSDT0001CL-HR_REGISTRO = LC_HR_REGISTRO.
      WA_LOG_ZSDT0001CL-US_REGISTRO = LC_US_REGISTRO.
      WA_LOG_ZSDT0001CL-TP_REGISTRO = LC_TP_REGISTRO.
      APPEND WA_LOG_ZSDT0001CL TO IT_LOG_ZSDT0001CL.

    ELSE.

      "Classificação da Carga
      "Verifica Alteração
      LOOP AT IT_ZSDT0001CL INTO DATA(WA_ZSDT0001CL) WHERE ID_CLASSIFICACAO EQ ME->CLASSIFICACAO-ID_CLASSIFICACAO.
        LC_TP_REGISTRO = 'A'.
        MOVE-CORRESPONDING ME->CLASSIFICACAO TO WA_LOG_ZSDT0001CL.
        WA_LOG_ZSDT0001CL-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001CL-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001CL-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001CL-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001CL TO IT_LOG_ZSDT0001CL.
      ENDLOOP.

      "Classificação da Nota
      "Verifica Exclusão
      LOOP AT IT_ZSDT0001CL INTO WA_ZSDT0001CL WHERE ID_CLASSIFICACAO NE ME->CLASSIFICACAO-ID_CLASSIFICACAO.
        READ TABLE ME->CLASSIFICACAO_NOTAS WITH KEY ID_CLASSIFICACAO = WA_ZSDT0001CL-ID_CLASSIFICACAO INTO DATA(WA_CLASSIFICACAO_NOTAS).
        IF SY-SUBRC IS NOT INITIAL.
          "Registro Excluido
          LC_TP_REGISTRO = 'E'.
          MOVE-CORRESPONDING WA_ZSDT0001CL TO WA_LOG_ZSDT0001NT.
          WA_LOG_ZSDT0001NT-DT_REGISTRO = LC_DT_REGISTRO.
          WA_LOG_ZSDT0001NT-HR_REGISTRO = LC_HR_REGISTRO.
          WA_LOG_ZSDT0001NT-US_REGISTRO = LC_US_REGISTRO.
          WA_LOG_ZSDT0001NT-TP_REGISTRO = LC_TP_REGISTRO.
          APPEND WA_LOG_ZSDT0001NT TO IT_LOG_ZSDT0001NT.
        ENDIF.
      ENDLOOP.

      "Classificação da Nota
      "Verifica Alteração
      LOOP AT ME->CLASSIFICACAO_NOTAS INTO WA_CLASSIFICACAO_NOTAS.
        READ TABLE IT_ZSDT0001CL INTO WA_ZSDT0001CL WITH KEY ID_CLASSIFICACAO = WA_CLASSIFICACAO_NOTAS-ID_CLASSIFICACAO.
        IF SY-SUBRC IS INITIAL.
          LC_TP_REGISTRO = 'A'.
        ELSE.
          LC_TP_REGISTRO = 'I'.
        ENDIF.
        MOVE-CORRESPONDING WA_CLASSIFICACAO_NOTAS TO WA_LOG_ZSDT0001CL.
        WA_LOG_ZSDT0001CL-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001CL-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001CL-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001CL-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001CL TO IT_LOG_ZSDT0001CL.
      ENDLOOP.

    ENDIF.

    IF IT_ZSDT0001RS[] IS INITIAL.
      LC_TP_REGISTRO = 'I'.
      LOOP AT ME->RESULTADO INTO DATA(WA_RESULTADO).
        MOVE-CORRESPONDING WA_RESULTADO TO WA_LOG_ZSDT0001RS.
        WA_LOG_ZSDT0001RS-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001RS-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001RS-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001RS-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001RS TO IT_LOG_ZSDT0001RS.
      ENDLOOP.
    ELSE.

      "Verifica Exclusão
      LOOP AT IT_ZSDT0001RS INTO DATA(WA_ZSDT0001RS).
        READ TABLE ME->RESULTADO WITH KEY ID_CARGA = WA_ZSDT0001RS-ID_CARGA ID_CLASSIFICACAO  = WA_ZSDT0001RS-ID_CLASSIFICACAO TP_CARACTERISTICA = WA_ZSDT0001RS-TP_CARACTERISTICA INTO WA_RESULTADO.
        IF SY-SUBRC IS NOT INITIAL.
          LC_TP_REGISTRO = 'E'.
          MOVE-CORRESPONDING WA_ZSDT0001RS TO WA_LOG_ZSDT0001RS.
          WA_LOG_ZSDT0001RS-DT_REGISTRO = LC_DT_REGISTRO.
          WA_LOG_ZSDT0001RS-HR_REGISTRO = LC_HR_REGISTRO.
          WA_LOG_ZSDT0001RS-US_REGISTRO = LC_US_REGISTRO.
          WA_LOG_ZSDT0001RS-TP_REGISTRO = LC_TP_REGISTRO.
          APPEND WA_LOG_ZSDT0001RS TO IT_LOG_ZSDT0001RS.
        ENDIF.
      ENDLOOP.

      "Verifica Alteração
      LOOP AT ME->RESULTADO INTO WA_RESULTADO.
        READ TABLE IT_ZSDT0001RS WITH KEY ID_CARGA = WA_RESULTADO-ID_CARGA ID_CLASSIFICACAO = WA_RESULTADO-ID_CLASSIFICACAO TP_CARACTERISTICA = WA_RESULTADO-TP_CARACTERISTICA INTO WA_ZSDT0001RS.
        IF SY-SUBRC IS INITIAL.
          LC_TP_REGISTRO = 'A'.
        ELSE.
          LC_TP_REGISTRO = 'I'.
        ENDIF.
        MOVE-CORRESPONDING WA_RESULTADO TO WA_LOG_ZSDT0001RS.
        WA_LOG_ZSDT0001RS-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001RS-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001RS-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001RS-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001RS TO IT_LOG_ZSDT0001RS.
      ENDLOOP.
    ENDIF.

    IF IT_ZSDT0001OV[] IS INITIAL.
      LC_TP_REGISTRO = 'I'.
      LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM_VENDA).
        MOVE-CORRESPONDING WA_ORDEM_VENDA TO WA_LOG_ZSDT0001OV.
        WA_LOG_ZSDT0001OV-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001OV-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001OV-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001OV-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001OV TO IT_LOG_ZSDT0001OV.
      ENDLOOP.
    ELSE.

      "Verifica Exclusão
      LOOP AT IT_ZSDT0001OV INTO DATA(WA_ZSDT0001OV).
        READ TABLE ME->ZIF_CARGA~ORDEM_VENDA
        WITH KEY ID_CARGA       = WA_ZSDT0001OV-ID_CARGA
                 NR_ORDEM_VENDA = WA_ZSDT0001OV-NR_ORDEM_VENDA
            INTO WA_ORDEM_VENDA.
        IF SY-SUBRC IS NOT INITIAL.
          LC_TP_REGISTRO = 'E'.
          MOVE-CORRESPONDING WA_ORDEM_VENDA TO WA_LOG_ZSDT0001OV.
          WA_LOG_ZSDT0001OV-DT_REGISTRO = LC_DT_REGISTRO.
          WA_LOG_ZSDT0001OV-HR_REGISTRO = LC_HR_REGISTRO.
          WA_LOG_ZSDT0001OV-US_REGISTRO = LC_US_REGISTRO.
          WA_LOG_ZSDT0001OV-TP_REGISTRO = LC_TP_REGISTRO.
          APPEND WA_LOG_ZSDT0001OV TO IT_LOG_ZSDT0001OV.
        ENDIF.
      ENDLOOP.

      "Verifica Alteração
      LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO WA_ORDEM_VENDA.
        READ TABLE IT_ZSDT0001OV INTO WA_ZSDT0001OV
        WITH KEY ID_CARGA       = WA_ORDEM_VENDA-ID_CARGA
                 NR_ORDEM_VENDA = WA_ORDEM_VENDA-NR_ORDEM_VENDA.
        IF SY-SUBRC IS INITIAL.
          LC_TP_REGISTRO = 'A'.
        ELSE.
          LC_TP_REGISTRO = 'I'.
        ENDIF.

        MOVE-CORRESPONDING WA_ORDEM_VENDA TO WA_LOG_ZSDT0001OV.
        WA_LOG_ZSDT0001OV-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001OV-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001OV-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001OV-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001OV TO IT_LOG_ZSDT0001OV.
        "ENDIF.
      ENDLOOP.

    ENDIF.

    IF IT_ZSDT0001EK[] IS INITIAL.
      LC_TP_REGISTRO = 'I'.
      LOOP AT ME->ZIF_CARGA~PEDIDO_COMPRA INTO DATA(WA_PEDIDO_COMPRA).
        MOVE-CORRESPONDING WA_PEDIDO_COMPRA TO WA_LOG_ZSDT0001EK.
        WA_LOG_ZSDT0001EK-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001EK-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001EK-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001EK-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001EK TO IT_LOG_ZSDT0001EK.
      ENDLOOP.
    ELSE.

      "Verifica Exclusão
      LOOP AT IT_ZSDT0001EK INTO DATA(WA_ZSDT0001EK).
        READ TABLE ME->ZIF_CARGA~PEDIDO_COMPRA
        WITH KEY ID_CARGA         = WA_ZSDT0001EK-ID_CARGA
                 NR_PEDIDO_COMPRA = WA_ZSDT0001EK-NR_PEDIDO_COMPRA
            INTO WA_PEDIDO_COMPRA.
        IF SY-SUBRC IS NOT INITIAL.
          LC_TP_REGISTRO = 'E'.
          MOVE-CORRESPONDING WA_PEDIDO_COMPRA TO WA_LOG_ZSDT0001EK.
          WA_LOG_ZSDT0001EK-DT_REGISTRO = LC_DT_REGISTRO.
          WA_LOG_ZSDT0001EK-HR_REGISTRO = LC_HR_REGISTRO.
          WA_LOG_ZSDT0001EK-US_REGISTRO = LC_US_REGISTRO.
          WA_LOG_ZSDT0001EK-TP_REGISTRO = LC_TP_REGISTRO.
          APPEND WA_LOG_ZSDT0001EK TO IT_LOG_ZSDT0001EK.
        ENDIF.
      ENDLOOP.

      "Verifica Alteração
      LOOP AT ME->ZIF_CARGA~PEDIDO_COMPRA INTO WA_PEDIDO_COMPRA.
        READ TABLE IT_ZSDT0001EK INTO WA_ZSDT0001EK
        WITH KEY ID_CARGA         = WA_PEDIDO_COMPRA-ID_CARGA
                 NR_PEDIDO_COMPRA = WA_PEDIDO_COMPRA-NR_PEDIDO_COMPRA.
        IF SY-SUBRC IS INITIAL.
          LC_TP_REGISTRO = 'A'.
        ELSE.
          LC_TP_REGISTRO = 'I'.
        ENDIF.

        MOVE-CORRESPONDING WA_PEDIDO_COMPRA TO WA_LOG_ZSDT0001EK.
        WA_LOG_ZSDT0001EK-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001EK-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001EK-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001EK-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001EK TO IT_LOG_ZSDT0001EK.
      ENDLOOP.

    ENDIF.

    IF IT_ZSDT0001RS_03[] IS INITIAL.
      LC_TP_REGISTRO = 'I'.
      LOOP AT ME->ZIF_CARGA~RESULTADO_AVARIADO INTO DATA(WA_RESULTADO_AVARIADO).
        MOVE-CORRESPONDING WA_RESULTADO_AVARIADO TO WA_LOG_ZSDT0001RS_03.
        WA_LOG_ZSDT0001RS_03-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001RS_03-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001RS_03-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001RS_03-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001RS_03 TO IT_LOG_ZSDT0001RS_03.
      ENDLOOP.
    ELSE.

      "Verifica Exclusão
      LOOP AT IT_ZSDT0001RS_03 INTO DATA(WA_ZSDT0001RS_03).
        READ TABLE ME->ZIF_CARGA~RESULTADO_AVARIADO

        WITH KEY ID_CARGA              = WA_ZSDT0001RS_03-ID_CARGA
                 ID_CLASSIFICACAO      = WA_ZSDT0001RS_03-ID_CLASSIFICACAO
                 TP_SUB_CARAC_AVARIADO = WA_ZSDT0001RS_03-TP_SUB_CARAC_AVARIADO
            INTO WA_RESULTADO_AVARIADO.

        IF SY-SUBRC IS NOT INITIAL.
          LC_TP_REGISTRO = 'E'.
          MOVE-CORRESPONDING WA_ZSDT0001RS_03 TO WA_LOG_ZSDT0001RS_03.
          WA_LOG_ZSDT0001RS_03-DT_REGISTRO = LC_DT_REGISTRO.
          WA_LOG_ZSDT0001RS_03-HR_REGISTRO = LC_HR_REGISTRO.
          WA_LOG_ZSDT0001RS_03-US_REGISTRO = LC_US_REGISTRO.
          WA_LOG_ZSDT0001RS_03-TP_REGISTRO = LC_TP_REGISTRO.
          APPEND WA_LOG_ZSDT0001RS_03 TO IT_LOG_ZSDT0001RS_03.
        ENDIF.
      ENDLOOP.

      "Verifica Alteração
      LOOP AT ME->ZIF_CARGA~RESULTADO_AVARIADO INTO WA_RESULTADO_AVARIADO.
        READ TABLE IT_ZSDT0001RS_03
        WITH KEY ID_CARGA = WA_RESULTADO-ID_CARGA
                 ID_CLASSIFICACAO = WA_RESULTADO-ID_CLASSIFICACAO
                 TP_SUB_CARAC_AVARIADO = WA_RESULTADO_AVARIADO-TP_SUB_CARAC_AVARIADO
            INTO WA_ZSDT0001RS_03.

        IF SY-SUBRC IS INITIAL.
          LC_TP_REGISTRO = 'A'.
        ELSE.
          LC_TP_REGISTRO = 'I'.
        ENDIF.
        MOVE-CORRESPONDING WA_RESULTADO_AVARIADO TO WA_LOG_ZSDT0001RS_03.
        WA_LOG_ZSDT0001RS_03-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001RS_03-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001RS_03-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001RS_03-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001RS_03 TO IT_LOG_ZSDT0001RS_03.
      ENDLOOP.
    ENDIF.

    IF IT_ZSDT0001FD[] IS INITIAL.
      LC_TP_REGISTRO = 'I'.
      LOOP AT ME->ZIF_CARGA~BLOCOS INTO DATA(WA_BLOCOS).
        MOVE-CORRESPONDING WA_BLOCOS TO WA_LOG_ZSDT0001FD.
        WA_LOG_ZSDT0001FD-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001FD-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001FD-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001FD-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001FD TO IT_LOG_ZSDT0001FD.
      ENDLOOP.
    ELSE.

      "Verifica Exclusão
      LOOP AT IT_ZSDT0001FD INTO DATA(WA_ZSDT0001FD).
        READ TABLE ME->ZIF_CARGA~BLOCOS
        WITH KEY ID_CARGA = WA_ZSDT0001FD-ID_CARGA
                 NR_ORDEM_VENDA = WA_ZSDT0001FD-NR_ORDEM_VENDA
                 NR_PEDIDO_COMPRA = WA_ZSDT0001FD-NR_PEDIDO_COMPRA
                 ZSEQ_INST = WA_ZSDT0001FD-ZSEQ_INST
                 OBJEK = WA_ZSDT0001FD-OBJEK
                 OBJECTTABLE = WA_ZSDT0001FD-OBJECTTABLE
            INTO WA_BLOCOS.
        IF SY-SUBRC IS NOT INITIAL.
          LC_TP_REGISTRO = 'E'.
          MOVE-CORRESPONDING WA_BLOCOS TO WA_LOG_ZSDT0001FD.
          WA_LOG_ZSDT0001FD-DT_REGISTRO = LC_DT_REGISTRO.
          WA_LOG_ZSDT0001FD-HR_REGISTRO = LC_HR_REGISTRO.
          WA_LOG_ZSDT0001FD-US_REGISTRO = LC_US_REGISTRO.
          WA_LOG_ZSDT0001FD-TP_REGISTRO = LC_TP_REGISTRO.
          APPEND WA_LOG_ZSDT0001FD TO IT_LOG_ZSDT0001FD.
        ENDIF.
      ENDLOOP.

      "Verifica Alteração
      LOOP AT ME->ZIF_CARGA~BLOCOS INTO WA_BLOCOS.
        READ TABLE IT_ZSDT0001FD INTO WA_ZSDT0001FD
        WITH KEY ID_CARGA = WA_BLOCOS-ID_CARGA
                 NR_ORDEM_VENDA = WA_BLOCOS-NR_ORDEM_VENDA
                 NR_PEDIDO_COMPRA = WA_BLOCOS-NR_PEDIDO_COMPRA
                 ZSEQ_INST = WA_BLOCOS-ZSEQ_INST
                 OBJEK = WA_BLOCOS-OBJEK
                 OBJECTTABLE = WA_BLOCOS-OBJECTTABLE.
        IF SY-SUBRC IS INITIAL.
          LC_TP_REGISTRO = 'A'.
        ELSE.
          LC_TP_REGISTRO = 'I'.
        ENDIF.
        MOVE-CORRESPONDING WA_BLOCOS TO WA_LOG_ZSDT0001FD.
        WA_LOG_ZSDT0001FD-DT_REGISTRO = LC_DT_REGISTRO.
        WA_LOG_ZSDT0001FD-HR_REGISTRO = LC_HR_REGISTRO.
        WA_LOG_ZSDT0001FD-US_REGISTRO = LC_US_REGISTRO.
        WA_LOG_ZSDT0001FD-TP_REGISTRO = LC_TP_REGISTRO.
        APPEND WA_LOG_ZSDT0001FD TO IT_LOG_ZSDT0001FD.
        "ENDIF.
      ENDLOOP.

    ENDIF.

    "Tabelas de Log
    MODIFY ZSDT0001CGLG    FROM WA_LOG_ZSDT0001CG.
    MODIFY ZSDT0001NTLG    FROM TABLE IT_LOG_ZSDT0001NT.
    MODIFY ZSDT0001CLLG    FROM TABLE IT_LOG_ZSDT0001CL.
    MODIFY ZSDT0001RSLG    FROM TABLE IT_LOG_ZSDT0001RS.
    MODIFY ZSDT0001RSLG_03 FROM TABLE IT_LOG_ZSDT0001RS_03.
    MODIFY ZSDT0001OVLG    FROM TABLE IT_LOG_ZSDT0001OV.
    MODIFY ZSDT0001EKLG    FROM TABLE IT_LOG_ZSDT0001EK.
    MODIFY ZSDT0001FDLG    FROM TABLE IT_LOG_ZSDT0001FD.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_NOTA_ENTRADA_PROPRIA.

    DATA: ENTRADA_CARGA TYPE REF TO ZCL_CARGA_RECEBIMENTO.

    SELECT SINGLE * INTO @DATA(WA_ZSDT0001NT)
      FROM ZSDT0001NT
     WHERE DOCNUM EQ @I_DOCNUM.

    CHECK SY-SUBRC IS INITIAL.

    CREATE OBJECT ENTRADA_CARGA.

    ENTRADA_CARGA->ZIF_CARGA~AT_NAO_GERAR_BLOQUEIOS = ABAP_TRUE.

    ENTRADA_CARGA->ZIF_CARGA~SET_REGISTRO( I_ID_CARGA = WA_ZSDT0001NT-ID_CARGA ).

    "Marcar Como Conferido
    "ENTRADA_CARGA->CARGA-TP_STATUS = ZIF_CARGA=>ST_STATUS_CONFERIDO.

    ENTRADA_CARGA->ZIF_CARGA~SET_PROCESSAR_ENTRADA( I_SOMENTE_ATUALIZAR = ABAP_TRUE
      )->SET_GERAR_ROMANEIO_SAIDA(
      )->SEND_CARGA_TO_OPUS(
      )->GRAVAR_REGISTRO(
      ).

    ENTRADA_CARGA->ZIF_CARGA~FREE( ).

    CLEAR: ENTRADA_CARGA.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_OBSERVACAO_NOTA.

    R_CARGA = ME.

    CASE ME->CARGA-TP_STATUS.
      WHEN ZIF_CARGA=>ST_STATUS_ABERTO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_ABERTA-MSGNO.
      WHEN ZIF_CARGA=>ST_STATUS_CONFERIDO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO.
      WHEN ZIF_CARGA=>ST_STATUS_CANCELADA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO.
    ENDCASE.

    READ TABLE ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_NOTA>) WITH KEY ID_CARGA = I_ID_CARGA ID_NOTA = I_ID_NOTA.

    CHECK SY-SUBRC IS INITIAL.

    ME->CK_ALTEROU = ABAP_TRUE.

    <FS_NOTA>-DS_OBSERVACAO = I_DS_OBSERVACAO.

    MOVE-CORRESPONDING <FS_NOTA> TO E_NOTA.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ORDEM_CARREGAMENTO.

    R_CARGA = ME.

    IF I_NR_ORDEM IS INITIAL.
      CLEAR: ME->CARGA-ID_ORDEM,
             I_CARGA_ALV-ID_ORDEM,
             E_ORDEM_CARRGAMENTO.
    ENDIF.

    CHECK I_NR_ORDEM IS NOT INITIAL.

    CASE ME->CARGA-TP_STATUS.
      WHEN ZIF_CARGA=>ST_STATUS_FECHADO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGNO.
      WHEN ZIF_CARGA=>ST_STATUS_CONFERIDO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO.
      WHEN ZIF_CARGA=>ST_STATUS_CANCELADA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO.
    ENDCASE.

    IF ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_ABERTO.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_NAO_ABERTA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_NAO_ABERTA-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_CARGA_NAO_ABERTA-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_CARGA_NAO_ABERTA-MSGNO.
    ENDIF.

    E_ORDEM_CARRGAMENTO = ZCL_ORDEM_CARREGAMENTO=>BUSCA_ORDEM_CARREGAMENTO_NR(
    I_NR_SAFRA  = I_NR_SAFRA
    I_ID_BUKRS  = I_ID_BUKRS
    I_ID_BRANCH = I_ID_BRANCH
    I_NR_ORDEM  = I_NR_ORDEM ).

    IF I_VBELN IS NOT INITIAL.
      E_ORDEM_CARRGAMENTO-NR_ORDEM_VENDA = I_VBELN.
    ELSE.
      READ TABLE ME->ZIF_CARGA~ORDEM_VENDA INDEX 1 INTO DATA(WA_ORDEM_VENDA).
      IF SY-SUBRC IS INITIAL.
        E_ORDEM_CARRGAMENTO-NR_ORDEM_VENDA = WA_ORDEM_VENDA-NR_ORDEM_VENDA.
      ENDIF.
    ENDIF.

    CHECK E_ORDEM_CARRGAMENTO IS NOT INITIAL.

    ME->VERIF_ORDEM_CARREGAMENTO( EXPORTING I_ORDEM = E_ORDEM_CARRGAMENTO ).

    ME->CK_ALTEROU = ABAP_TRUE.

    IF ME->DOCUMENTO_FISCAL IS NOT INITIAL.
      READ TABLE ME->ZIF_CARGA~ORDEM_VENDA INDEX 1 INTO WA_ORDEM_VENDA.
      IF WA_ORDEM_VENDA-NR_ORDEM_VENDA IS NOT INITIAL.
        ME->GET_INFO_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = WA_ORDEM_VENDA-NR_ORDEM_VENDA IMPORTING E_ORDEM = DATA(R_ORDEM) ).
      ENDIF.
    ENDIF.

    IF ME->ZIF_CARGA~ORDEM_VENDA IS INITIAL AND ME->ZIF_CARGA~PEDIDO_COMPRA IS INITIAL.

      I_CARGA_ALV-DS_LOCAL_COLETA   = E_ORDEM_CARRGAMENTO-DS_LOCAL_COLETA.
      I_CARGA_ALV-DS_LOCAL_DESTINO  = E_ORDEM_CARRGAMENTO-DS_LOCAL_DESTINO.
      I_CARGA_ALV-DS_LOCAL_DESCARGA = E_ORDEM_CARRGAMENTO-DS_LOCAL_DESCARGA.

      ME->CARGA-ID_PRODUTO          = E_ORDEM_CARRGAMENTO-ID_PRODUTO.

      I_CARGA_ALV-ID_LOCAL_COLETA   = E_ORDEM_CARRGAMENTO-ID_LOCAL_COLETA.
      I_CARGA_ALV-ID_LOCAL_DESTINO  = E_ORDEM_CARRGAMENTO-ID_LOCAL_DESTINO.
      I_CARGA_ALV-ID_LOCAL_DESCARGA = E_ORDEM_CARRGAMENTO-ID_LOCAL_DESCARGA.
      I_CARGA_ALV-ID_PRODUTO        = E_ORDEM_CARRGAMENTO-ID_PRODUTO.
      I_CARGA_ALV-DS_PRODUTO        = E_ORDEM_CARRGAMENTO-DS_PRODUTO.

    ELSEIF I_CARGA_ALV-ID_LOCAL_COLETA IS INITIAL.
      READ TABLE ME->DOCUMENTO_FISCAL INDEX 1 INTO DATA(WA_DOCUMENTO).
      I_CARGA_ALV-ID_LOCAL_COLETA = WA_DOCUMENTO-ID_FORNECEDOR.
      SELECT SINGLE NAME1 INTO I_CARGA_ALV-DS_LOCAL_COLETA
        FROM KNA1
       WHERE KUNNR EQ I_CARGA_ALV-ID_LOCAL_COLETA.
    ENDIF.

    "Vincular Ordem de Venda a Ordem de Carregamento """""""""""""""""""""""""""
    READ TABLE ME->ZIF_CARGA~ORDEM_VENDA WITH KEY NR_ORDEM_VENDA = I_VBELN ASSIGNING FIELD-SYMBOL(<FS_ORDEM>).
    IF SY-SUBRC IS INITIAL.

      IF SY-TABIX EQ 1.
        DATA(CK_AJUSTA_READER) = ABAP_TRUE.
      ELSE.
        CK_AJUSTA_READER = ABAP_FALSE.
      ENDIF.

      <FS_ORDEM>-ID_ORDEM = E_ORDEM_CARRGAMENTO-ID_ORDEM.
      <FS_ORDEM>-NR_ORDEM = E_ORDEM_CARRGAMENTO-NR_ORDEM.
    ELSE.
      CK_AJUSTA_READER = ABAP_TRUE.
    ENDIF.

    IF CK_AJUSTA_READER EQ ABAP_TRUE.
      "Setando Propriedade do Objeto
      ME->CARGA-ID_ORDEM = E_ORDEM_CARRGAMENTO-ID_ORDEM.

      IF R_ORDEM-DS_TIPO_FRETE NE 'CIF'.
        ME->CARGA-ID_AGENT_FRETE = E_ORDEM_CARRGAMENTO-ID_BRANCH_AG.
      ENDIF.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = ME->CARGA-ID_AGENT_FRETE
        IMPORTING
          OUTPUT = ME->CARGA-ID_AGENT_FRETE.

      ME->CARGA-ID_LOCAL_COLETA     = E_ORDEM_CARRGAMENTO-ID_LOCAL_COLETA.
      ME->CARGA-ID_LOCAL_DESTINO    = E_ORDEM_CARRGAMENTO-ID_LOCAL_DESTINO.
      ME->CARGA-ID_LOCAL_DESCARGA   = E_ORDEM_CARRGAMENTO-ID_LOCAL_DESCARGA.
      ME->CARGA-DS_PLACA_TRATOR     = E_ORDEM_CARRGAMENTO-DS_PLACA_TRATOR.
      ME->CARGA-ID_PROPRIETARIO     = E_ORDEM_CARRGAMENTO-ID_PROPRIETARIO.
      ME->CARGA-DS_PLACA_REBOQ_1    = E_ORDEM_CARRGAMENTO-DS_PLACA_REBOQ_1.
      ME->CARGA-DS_PLACA_REBOQ_2    = E_ORDEM_CARRGAMENTO-DS_PLACA_REBOQ_2.
      ME->CARGA-DS_PLACA_REBOQ_3    = E_ORDEM_CARRGAMENTO-DS_PLACA_REBOQ_3.
      ME->CARGA-ID_MOTORISTA        = E_ORDEM_CARRGAMENTO-ID_MOTORISTA.

      "Saída para Tela com Valoes Preenchidos
      IF R_ORDEM-DS_TIPO_FRETE NE 'CIF'.
        I_CARGA_ALV-ID_AGENT_FRETE = E_ORDEM_CARRGAMENTO-ID_BRANCH_AG.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = I_CARGA_ALV-ID_AGENT_FRETE
          IMPORTING
            OUTPUT = I_CARGA_ALV-ID_AGENT_FRETE.
        I_CARGA_ALV-DS_AGENT_FRETE     = E_ORDEM_CARRGAMENTO-NAME_AG.
      ENDIF.

      I_CARGA_ALV-ID_ORDEM           = E_ORDEM_CARRGAMENTO-ID_ORDEM.
      I_CARGA_ALV-NR_ORDEM           = E_ORDEM_CARRGAMENTO-NR_ORDEM.
      I_CARGA_ALV-DS_PLACA_TRATOR    = E_ORDEM_CARRGAMENTO-DS_PLACA_TRATOR.
      I_CARGA_ALV-ID_PROPRIETARIO    = E_ORDEM_CARRGAMENTO-ID_PROPRIETARIO.
      I_CARGA_ALV-DS_PLACA_REBOQ_1   = E_ORDEM_CARRGAMENTO-DS_PLACA_REBOQ_1.
      I_CARGA_ALV-DS_PLACA_REBOQ_2   = E_ORDEM_CARRGAMENTO-DS_PLACA_REBOQ_2.
      I_CARGA_ALV-DS_PLACA_REBOQ_3   = E_ORDEM_CARRGAMENTO-DS_PLACA_REBOQ_3.
      I_CARGA_ALV-ID_MOTORISTA       = E_ORDEM_CARRGAMENTO-ID_MOTORISTA.
      I_CARGA_ALV-NR_ORDEM           = E_ORDEM_CARRGAMENTO-NR_ORDEM.
      I_CARGA_ALV-BUTXT              = E_ORDEM_CARRGAMENTO-BUTXT.
      I_CARGA_ALV-NAME               = E_ORDEM_CARRGAMENTO-NAME.
      I_CARGA_ALV-DS_MOTORISTA       = E_ORDEM_CARRGAMENTO-DS_MOTORISTA.
      I_CARGA_ALV-DS_PROPRIETARIO    = E_ORDEM_CARRGAMENTO-DS_PROPRIETARIO.

    ENDIF.
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    "Informações que não são da rodem de carregamento
    I_CARGA_ALV-TP_FRETE           = ME->CARGA-TP_FRETE.
    I_CARGA_ALV-NM_PESO_BRUTO      = ME->CARGA-NM_PESO_BRUTO.
    I_CARGA_ALV-NM_PESO_TARA       = ME->CARGA-NM_PESO_TARA.
    I_CARGA_ALV-NM_PESO_SUBTOTAL   = ME->CARGA-NM_PESO_SUBTOTAL.
    I_CARGA_ALV-NR_TICKET          = ME->CARGA-NR_TICKET.
    I_CARGA_ALV-IN_TRANSFERENCIA   = ME->CARGA-IN_TRANSFERENCIA.
    I_CARGA_ALV-TP_STATUS          = ME->CARGA-TP_STATUS.
    I_CARGA_ALV-DT_ABERTURA        = ME->CARGA-DT_ABERTURA.
    I_CARGA_ALV-HR_ABERTURA        = ME->CARGA-HR_ABERTURA.
    I_CARGA_ALV-DT_FECHAMENTO      = ME->CARGA-DT_FECHAMENTO.
    I_CARGA_ALV-HR_FECHAMENTO      = ME->CARGA-HR_FECHAMENTO.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ORDEM_VENDA.

    DATA: OBJ_CLIENTE    TYPE REF TO ZCL_CLIENTES,
          OBJ_FORNECEDOR TYPE REF TO ZCL_FORNECEDORES,
          LC_ZSDT0001OV  TYPE ZSDT0001OV,
          LC_ZSDT0001EK  TYPE ZSDT0001EK,
          E_TIPO_FRETE   TYPE ZDE_TP_FRETE,
          I_TEXTO        TYPE STRING.

    "Ordem de Venda
    "Pedido de Compra
    CLEAR: ME->ZIF_CARGA~ORDEM_VENDA[],
           ME->ZIF_CARGA~PEDIDO_COMPRA[].

    CHECK I_ORDEM_VENDA IS NOT INITIAL.

    TRY.
        ME->ZIF_CARGA~GET_INFO_PEDIDO_COMPRA( EXPORTING I_PEDIDO_COMPRA = I_ORDEM_VENDA IMPORTING E_PEDIDO = DATA(E_PEDIDO) ).
        DATA(CK_PEDIDO) = ABAP_TRUE.
      CATCH ZCX_CARGA .
        ME->GET_INFO_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = I_ORDEM_VENDA IMPORTING E_ORDEM = DATA(R_RETORNO_ORD) ).
        CK_PEDIDO = ABAP_FALSE.
    ENDTRY.

    CASE CK_PEDIDO.
      WHEN ABAP_FALSE.

        ME->CARGA-IN_TRANSFERENCIA = ABAP_FALSE.
        E_CARGA-IN_TRANSFERENCIA   = ABAP_FALSE.

        ME->CARGA-CK_FRETE_ENTRADA = COND STRING( WHEN R_RETORNO_ORD-KVGR5 EQ '002' THEN ABAP_TRUE ELSE ABAP_FALSE ).
        E_CARGA-CK_FRETE_ENTRADA   = ME->CARGA-CK_FRETE_ENTRADA.
        ME->CARGA-CK_GERA_AVISO    = ME->CARGA-CK_FRETE_ENTRADA.
        E_CARGA-CK_GERA_AVISO      = ME->CARGA-CK_FRETE_ENTRADA.

        LC_ZSDT0001OV-ID_CARGA       = ME->CARGA-ID_CARGA.
        LC_ZSDT0001OV-NR_ORDEM_VENDA = R_RETORNO_ORD-NR_ORDEM_VENDA.
        APPEND LC_ZSDT0001OV TO ME->ZIF_CARGA~ORDEM_VENDA.

        ME->CARGA-ID_PRODUTO  = R_RETORNO_ORD-ID_PRODUTO.

        "Ponto de Coleta
        TRY.
            ME->GET_PARTINER_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = I_ORDEM_VENDA I_FUNCAO_PARTINER = 'PC' IMPORTING E_PARTINER = DATA(R_PARTINER_PC) ).
            ME->CARGA-ID_LOCAL_COLETA = R_PARTINER_PC-LIFNR.
          CATCH ZCX_CARGA .
        ENDTRY.

        "Local de Descarga
        TRY.
            ME->GET_PARTINER_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = I_ORDEM_VENDA I_FUNCAO_PARTINER = 'LR' IMPORTING E_PARTINER = DATA(R_PARTINER_LR) ).
            ME->CARGA-ID_LOCAL_DESCARGA = R_PARTINER_LR-KUNNR.
          CATCH ZCX_CARGA .
        ENDTRY.

        "Local de Entrega
        TRY.
            ME->GET_PARTINER_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = I_ORDEM_VENDA I_FUNCAO_PARTINER = 'Z1' IMPORTING E_PARTINER = DATA(R_PARTINER_Z1) ).
            ME->CARGA-ID_LOCAL_DESTINO = R_PARTINER_Z1-LIFNR.
          CATCH ZCX_CARGA .
        ENDTRY.

        "Caso Seja Frete CIF buscar SP
        TRY.
            ME->GET_PARTINER_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = I_ORDEM_VENDA I_FUNCAO_PARTINER = 'SP' IMPORTING E_PARTINER = DATA(R_PARTINER_SP) ).
            ME->CARGA-ID_AGENT_FRETE = R_PARTINER_SP-LIFNR.
          CATCH ZCX_CARGA .
        ENDTRY.
        "ENDIF.
        MOVE-CORRESPONDING ME->CARGA TO E_CARGA.
        E_CARGA-DS_PRODUTO = R_RETORNO_ORD-DS_PRODUTO.

        CREATE OBJECT OBJ_CLIENTE.
        CREATE OBJECT OBJ_FORNECEDOR.

        IF R_PARTINER_PC-LIFNR IS NOT INITIAL.
          OBJ_FORNECEDOR->ZIF_PARCEIROS~SET_PARCEIRO( I_PARCEIRO = R_PARTINER_PC-LIFNR )->GET_NAME( IMPORTING E_NAME = E_CARGA-DS_LOCAL_COLETA ).
        ELSE.
          CLEAR: E_CARGA-DS_LOCAL_COLETA.
        ENDIF.

        IF R_PARTINER_LR-KUNNR IS NOT INITIAL.
          OBJ_CLIENTE->ZIF_PARCEIROS~SET_PARCEIRO( I_PARCEIRO = R_PARTINER_LR-KUNNR )->GET_NAME( IMPORTING E_NAME = E_CARGA-DS_LOCAL_DESCARGA ).
        ELSE.
          CLEAR: E_CARGA-DS_LOCAL_DESCARGA.
        ENDIF.

        IF R_PARTINER_Z1-LIFNR IS NOT INITIAL.
          OBJ_FORNECEDOR->ZIF_PARCEIROS~SET_PARCEIRO( I_PARCEIRO = R_PARTINER_Z1-LIFNR )->GET_NAME( IMPORTING E_NAME = E_CARGA-DS_LOCAL_DESTINO ).
        ELSE.
          CLEAR: E_CARGA-DS_LOCAL_DESTINO.
        ENDIF.

        IF R_PARTINER_SP-LIFNR IS NOT INITIAL.
          OBJ_FORNECEDOR->ZIF_PARCEIROS~SET_PARCEIRO( I_PARCEIRO = R_PARTINER_SP-LIFNR )->GET_NAME( IMPORTING E_NAME = E_CARGA-DS_AGENT_FRETE ).
        ELSE.
          CLEAR: E_CARGA-DS_AGENT_FRETE.
        ENDIF.

        ME->ZIF_CARGA~SET_TIPO_FRETE_ORDEM_VENDA( ).

        TRY .
            ZCL_ORDEM_VENDA=>ZIF_ORDEM_VENDA~GET_ORDEM_VENDA_SALDO( EXPORTING I_VBELN = LC_ZSDT0001OV-NR_ORDEM_VENDA IMPORTING E_SALDO = DATA(E_SALDO) ).
            C_ZDE_ZSDT0001OV_ALV-NM_SALDO_OV = E_SALDO.
          CATCH ZCX_ORDEM_VENDA.
            C_ZDE_ZSDT0001OV_ALV-NM_SALDO_OV = 0.
        ENDTRY.

        CLEAR: OBJ_CLIENTE, OBJ_FORNECEDOR.

      WHEN ABAP_TRUE.

        LC_ZSDT0001EK-ID_CARGA         = ME->CARGA-ID_CARGA.
        LC_ZSDT0001EK-NR_PEDIDO_COMPRA = E_PEDIDO-NR_PEDIDO_COMPRA.
        APPEND LC_ZSDT0001EK TO ME->ZIF_CARGA~PEDIDO_COMPRA.
        ME->CARGA-ID_PRODUTO  = E_PEDIDO-ID_PRODUTO.

        CASE E_PEDIDO-TP_TIPO_PEDIDO.
          WHEN 'ZUB'.

            ME->CARGA-IN_TRANSFERENCIA = ABAP_TRUE.
            E_CARGA-IN_TRANSFERENCIA   = ABAP_TRUE.

            ME->CARGA-CK_FRETE_ENTRADA = ABAP_TRUE.
            E_CARGA-CK_FRETE_ENTRADA   = E_PEDIDO-ZCKFRETEENT.

            ME->CARGA-CK_GERA_AVISO    = ME->CARGA-CK_FRETE_ENTRADA.
            E_CARGA-CK_GERA_AVISO      = ME->CARGA-CK_FRETE_ENTRADA.

            E_CARGA-DS_PRODUTO         = E_PEDIDO-DS_PRODUTO.
            E_CARGA-ID_PRODUTO         = E_PEDIDO-ID_PRODUTO.

            CREATE OBJECT OBJ_FORNECEDOR.

            IF E_PEDIDO-ID_CENTRO_SAIDA IS NOT INITIAL.
              IF E_PEDIDO-ID_LOCAL_COLETA IS NOT INITIAL.
                E_CARGA-ID_LOCAL_COLETA = E_PEDIDO-ID_LOCAL_COLETA.
              ELSE.
                E_CARGA-ID_LOCAL_COLETA = E_PEDIDO-ID_CENTRO_SAIDA.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    INPUT  = E_CARGA-ID_LOCAL_COLETA
                  IMPORTING
                    OUTPUT = E_CARGA-ID_LOCAL_COLETA.
              ENDIF.
              OBJ_FORNECEDOR->ZIF_PARCEIROS~SET_PARCEIRO( I_PARCEIRO = E_CARGA-ID_LOCAL_COLETA )->GET_NAME( IMPORTING E_NAME = E_CARGA-DS_LOCAL_COLETA ).

            ENDIF.

            IF E_PEDIDO-ID_CENTRO_RECEBEDOR IS NOT INITIAL.
              E_CARGA-ID_LOCAL_DESCARGA = E_PEDIDO-ID_CENTRO_RECEBEDOR.

              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  INPUT  = E_CARGA-ID_LOCAL_DESCARGA
                IMPORTING
                  OUTPUT = E_CARGA-ID_LOCAL_DESCARGA.

              OBJ_FORNECEDOR->ZIF_PARCEIROS~SET_PARCEIRO( I_PARCEIRO = E_CARGA-ID_LOCAL_DESCARGA )->GET_NAME( IMPORTING E_NAME = E_CARGA-DS_LOCAL_DESCARGA ).
              E_CARGA-ID_LOCAL_DESTINO = E_CARGA-ID_LOCAL_DESCARGA.
              E_CARGA-DS_LOCAL_DESTINO = E_CARGA-DS_LOCAL_DESCARGA.
            ENDIF.

            ME->ZIF_CARGA~SET_TIPO_FRETE_ORDEM_VENDA( ).

            CLEAR: OBJ_FORNECEDOR.

          WHEN OTHERS.
            ME->CARGA-IN_TRANSFERENCIA = ABAP_FALSE.
            E_CARGA-IN_TRANSFERENCIA   = ABAP_FALSE.

            ME->CARGA-CK_FRETE_ENTRADA = ABAP_FALSE.
            E_CARGA-CK_FRETE_ENTRADA   = ABAP_FALSE.
        ENDCASE.

        TRY .
            C_ZDE_ZSDT0001OV_ALV-NM_SALDO_OV = ZCL_PEDIDO_COMPRA=>GET_SALDO_PEDIDO_ITEM( EXPORTING I_EBELN = LC_ZSDT0001OV-NR_ORDEM_VENDA ).
          CATCH ZCX_ORDEM_VENDA.
            C_ZDE_ZSDT0001OV_ALV-NM_SALDO_OV = 0.
        ENDTRY.

    ENDCASE.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_PESOS_NOTAS.

    R_CARGA = ME.

    CASE ME->CARGA-TP_STATUS.
      WHEN ZIF_CARGA=>ST_STATUS_CONFERIDO.
        IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO )
              MSGTY  = 'E'
              MSGID  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID
              MSGNO  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO.
        ENDIF.
      WHEN ZIF_CARGA=>ST_STATUS_CANCELADA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO.
    ENDCASE.

    READ TABLE ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_NOTA>) WITH KEY ID_CARGA = I_ID_CARGA ID_NOTA = I_ID_NOTA.

    CHECK SY-SUBRC IS INITIAL.

    ME->CK_ALTEROU = ABAP_TRUE.

    ME->GET_RATEIA_DESCONTOS(
      EXPORTING
        I_DESCONTOS     = ME->RESULTADO
        I_PESO_LIQUIDO  = I_PESO_LIQUIDO
      IMPORTING
        E_PESO_SUBTOTAL = DATA(E_PESO_SUBTOTAL)
        E_RATEIO        = DATA(R_RATEIO) ).

    <FS_NOTA>-NM_PESO_SUBTOTAL = E_PESO_SUBTOTAL.
    <FS_NOTA>-NM_PESO_LIQUIDO  = I_PESO_LIQUIDO.

    MOVE-CORRESPONDING <FS_NOTA> TO E_NOTA.

    IF I_SEM_CONSULTA EQ ABAP_FALSE.
      SELECT SINGLE NAME1
        INTO E_NOTA-DS_FORNECEDOR
        FROM LFA1 WHERE LIFNR EQ <FS_NOTA>-ID_FORNECEDOR.

      SELECT SINGLE MAKTX
        INTO E_NOTA-DS_PRODUTO
        FROM MAKT
       WHERE MATNR EQ ME->CARGA-ID_PRODUTO
         AND SPRAS EQ SY-LANGU.

      SELECT SINGLE DS_ENTRADA
        INTO E_NOTA-DS_ENTRADA
        FROM ZSDT0001TETX WHERE ID_ENTRADA EQ E_NOTA-ID_ENTRADA.

      IF E_NOTA-ID_ENTREGUE_POR IS NOT INITIAL.
        SELECT SINGLE NAME1
          INTO E_NOTA-DS_ENTREGUE_POR
          FROM LFA1 WHERE LIFNR EQ E_NOTA-ID_ENTREGUE_POR.
      ENDIF.
    ENDIF.

    "Classificação
    LOOP AT R_RATEIO INTO DATA(WA_RESULTADO).
      CASE WA_RESULTADO-TP_CARACTERISTICA.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
          E_NOTA-NR_PERC_UMI = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_NOTA-NR_QTDE_UMI = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
          E_NOTA-NR_PERC_IMP = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_NOTA-NR_QTDE_IMP = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
          E_NOTA-NR_PERC_AVA = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_NOTA-NR_QTDE_AVA = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
          E_NOTA-NR_PERC_ARD = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_NOTA-NR_QTDE_ARD = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
          E_NOTA-NR_PERC_QUE = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_NOTA-NR_QTDE_QUE = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
          E_NOTA-NR_PERC_ESV = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_NOTA-NR_QTDE_ESV = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
          E_NOTA-NR_PERC_CAR = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_NOTA-NR_QTDE_CAR = WA_RESULTADO-NR_QUANTIDADE_COM.
      ENDCASE.
    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_PROCESSAR_ENTRADA.

    DATA: WA_ACTTAB    TYPE J_1BNFE_ACTIVE,
          OBJ_ROMANEIO TYPE REF TO ZCL_REPOSITORY_CLASSES,
          I_TEXTO      TYPE STRING.

    R_CARGA = ME.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

    CHECK NOT ( ME->CARGA-CK_ENVIADO_OPUS EQ ABAP_TRUE AND ME->CARGA-CK_RECEBIDO_OPUS EQ ABAP_FALSE ).

    E_GEROU_ENTRADA = ABAP_FALSE.
    DATA: CK_ERRO TYPE CHAR01 VALUE ABAP_FALSE.

    CHECK ME->CARGA-TP_STATUS EQ ZIF_CARGA=>ST_STATUS_CONFERIDO OR I_SOMENTE_ATUALIZAR EQ ABAP_TRUE.

    LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_DOCUMENTO>) WHERE NR_NOTA IS INITIAL AND DOCNUM IS NOT INITIAL.

      SELECT SINGLE * INTO @DATA(WA_J_1BNFDOC)
        FROM J_1BNFDOC
       WHERE DOCNUM EQ @<FS_DOCUMENTO>-DOCNUM.

      IF WA_J_1BNFDOC-FORM IS NOT INITIAL AND WA_J_1BNFDOC-CANCEL EQ ABAP_FALSE.

        "Verificar CT-e Autorizada
        CALL FUNCTION 'J_1B_NFE_XML_RAED_ACTIVE_TAB'
          EXPORTING
            I_DOCNUM = WA_J_1BNFDOC-DOCNUM
          IMPORTING
            E_ACTTAB = WA_ACTTAB
          EXCEPTIONS
            NO_ENTRY = 1
            OTHERS   = 2.

        "Atualizar Romaneio de Entrada """"""""""""""""""""""""""""""""""""""""""""""""""""""""""
        IF SY-SUBRC IS INITIAL AND WA_ACTTAB-NFNUM9 IS NOT INITIAL AND WA_ACTTAB-DOCSTA EQ '1' AND WA_ACTTAB-CANCEL NE ABAP_TRUE.
          "Ajusta Nota Fiscal
          <FS_DOCUMENTO>-NR_NOTA            = WA_ACTTAB-NFNUM9.
          <FS_DOCUMENTO>-NM_SERIE           = WA_ACTTAB-SERIE.
          <FS_DOCUMENTO>-DT_EMISSAO         = WA_J_1BNFDOC-DOCDAT.
          <FS_DOCUMENTO>-DT_VENCIMENTO_FORM = WA_J_1BNFDOC-DOCDAT.
          CONCATENATE WA_ACTTAB-REGIO WA_ACTTAB-NFYEAR WA_ACTTAB-NFMONTH WA_ACTTAB-STCD1 WA_ACTTAB-MODEL WA_ACTTAB-SERIE WA_ACTTAB-NFNUM9 WA_ACTTAB-DOCNUM9 WA_ACTTAB-CDV INTO <FS_DOCUMENTO>-NR_CHAVE_NFE.

          SELECT SINGLE * INTO @DATA(WA_ITEM)
            FROM J_1BNFLIN
           WHERE DOCNUM EQ @WA_J_1BNFDOC-DOCNUM.

          <FS_DOCUMENTO>-CFOP = WA_ITEM-CFOP(4).

          "Ajusta Romaneio de Entrada
          IF <FS_DOCUMENTO>-CH_REFERENCIA_ENT IS NOT INITIAL.
            CREATE OBJECT OBJ_ROMANEIO.
            OBJ_ROMANEIO->ROMANEIO( )->ZIF_CADASTRO~SET_REGISTRO( I_ID_REGISTRO = <FS_DOCUMENTO>-CH_REFERENCIA_ENT ).
            OBJ_ROMANEIO->AT_ROMANEIO->SET_NFE( I_NFE = ABAP_TRUE ).
            OBJ_ROMANEIO->AT_ROMANEIO->SET_NFNUM( I_NFNUM = CONV #( WA_ACTTAB-NFNUM9 ) ).
            OBJ_ROMANEIO->AT_ROMANEIO->SET_SERIES( I_SERIES = WA_ACTTAB-SERIE ).
            OBJ_ROMANEIO->AT_ROMANEIO->SET_DOCDAT( I_DOCDAT = WA_J_1BNFDOC-DOCDAT ).
            OBJ_ROMANEIO->AT_ROMANEIO->ZIF_CADASTRO~GRAVAR_REGISTRO( ).
            OBJ_ROMANEIO->FREE( ).
            CLEAR OBJ_ROMANEIO.
          ENDIF.
          ME->CK_ALTEROU = ABAP_TRUE.
        ENDIF.
        """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      ENDIF.

    ENDLOOP.

    CHECK I_SOMENTE_ATUALIZAR EQ ABAP_FALSE.

    SELECT * INTO TABLE @DATA(IT_ENTRADA)
      FROM ZMMT_EE_ZGR
       FOR ALL ENTRIES IN @ME->DOCUMENTO_FISCAL
     WHERE ID_CARGA    EQ @ME->CARGA-ID_CARGA
       AND ST_ESTORNO  EQ @ZIF_CARGA=>ST_STATUS_ESTORNO_SEM
       AND OBJ_KEY     EQ @ME->DOCUMENTO_FISCAL-OBJ_KEY_ENTRADA.

    DATA(IT_ENTRADA_GRAVAR) = IT_ENTRADA[].

    "Verifica Período de MM/FI
    TRY .
        ZCL_MIRO=>VERIFICAR_CRIAR( I_DATA = ME->CARGA-DT_FECHAMENTO I_BUKRS = ME->CARGA-ID_BUKRS ).
      CATCH ZCX_MIRO_EXCEPTION INTO DATA(EX_MIRO).
        MESSAGE ID EX_MIRO->MSGID TYPE 'S'
         NUMBER EX_MIRO->MSGNO
           WITH EX_MIRO->MSGV1 EX_MIRO->MSGV2 EX_MIRO->MSGV3 EX_MIRO->MSGV4
           INTO I_TEXTO.
        ME->GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).
    ENDTRY.

    "Verifica XML do Documento Fiscal
    LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_FISCAL) WHERE ID_MOD_FISCAL EQ ZIF_CARGA=>ST_MODEL_FISCAL_ELETRONICO.
      READ TABLE IT_ENTRADA INTO DATA(WA_ENTRADA) WITH KEY ID_NOTA = WA_FISCAL-ID_NOTA.
      IF SY-SUBRC IS INITIAL.
        TRY .
            CALL METHOD ZCL_MIRO=>VERIFICAR_FORN_DOC_FISCAL
              EXPORTING
                I_LIFNR  = WA_ENTRADA-LIFNR
                I_NFTYPE = WA_ENTRADA-J_1BNFTYPE
                I_XBLNR  = WA_ENTRADA-REF_DOC_NO
                I_DATA   = WA_ENTRADA-DOC_DATE
                I_WERKS  = WA_ENTRADA-BUS_AREA.
          CATCH ZCX_MIRO_EXCEPTION INTO EX_MIRO.
            MESSAGE ID EX_MIRO->MSGID TYPE 'S'
             NUMBER EX_MIRO->MSGNO
               WITH EX_MIRO->MSGV1 EX_MIRO->MSGV2 EX_MIRO->MSGV3 EX_MIRO->MSGV4
               INTO I_TEXTO.
            ME->GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).
        ENDTRY.
      ENDIF.
    ENDLOOP.

    CALL FUNCTION 'J_1B_NF_CANCEL_CHECK_PERIOD'
      EXPORTING
        I_BUDAT      = ME->CARGA-DT_MOVIMENTO
        I_BUKRS      = ME->CARGA-ID_BUKRS
      EXCEPTIONS
        WRONG_PERIOD = 1
        OTHERS       = 2.

    IF SY-SUBRC IS NOT INITIAL.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO DATA(MTEXT) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ME->GERA_ERRO_GERAL( I_TEXTO = MTEXT ).
    ENDIF.

    LOOP AT IT_ENTRADA ASSIGNING FIELD-SYMBOL(<ENTRADA>).

      IF CK_ERRO NE ABAP_FALSE.
        CONTINUE.
      ENDIF.

*      IF 1 = 2.
      SELECT SINGLE * INTO @DATA(DOCUMENTOS)
        FROM ZMMT_EE_ZGR_DOCS
       WHERE OBJ_KEY EQ @<ENTRADA>-OBJ_KEY.

      "Se existe documento gerado ajusta Nota Fiscal
      IF SY-SUBRC IS INITIAL AND (
         DOCUMENTOS-AV_VBELN  IS NOT INITIAL OR
         DOCUMENTOS-MM_MBLNR  IS NOT INITIAL OR
         DOCUMENTOS-MM_MJAHR  IS NOT INITIAL OR
         DOCUMENTOS-FT_BELNR  IS NOT INITIAL OR
         DOCUMENTOS-FT_GJAHR  IS NOT INITIAL OR
         DOCUMENTOS-DOCNUM    IS NOT INITIAL ).
        DELETE IT_ENTRADA_GRAVAR WHERE OBJ_KEY EQ <ENTRADA>-OBJ_KEY.

        READ TABLE ME->DOCUMENTO_FISCAL ASSIGNING <FS_DOCUMENTO>
        WITH KEY OBJ_KEY_ENTRADA = <ENTRADA>-OBJ_KEY.
        IF SY-SUBRC IS INITIAL.
          ME->CK_ALTEROU = ABAP_TRUE.
          <FS_DOCUMENTO>-PO_NUMBER = <ENTRADA>-PO_NUMBER.
          <FS_DOCUMENTO>-PO_ITEM   = <ENTRADA>-PO_ITEM.
          <FS_DOCUMENTO>-AV_VBELN  = DOCUMENTOS-AV_VBELN.
          <FS_DOCUMENTO>-MM_MBLNR  = DOCUMENTOS-MM_MBLNR.
          <FS_DOCUMENTO>-MM_MJAHR  = DOCUMENTOS-MM_MJAHR.
          <FS_DOCUMENTO>-FT_BELNR  = DOCUMENTOS-FT_BELNR.
          <FS_DOCUMENTO>-FT_GJAHR  = DOCUMENTOS-FT_GJAHR.
          <FS_DOCUMENTO>-DOCNUM    = DOCUMENTOS-DOCNUM.
          E_GEROU_ENTRADA = ABAP_TRUE.
        ENDIF.
      ELSE.

        DATA: NUMBER           TYPE TBTCJOB-JOBCOUNT,
              NAME             TYPE TBTCJOB-JOBNAME,
              PRINT_PARAMETERS TYPE PRI_PARAMS.

        ME->ZIF_CARGA~VERIF_BLOQ_LOTE_MATERIAL_WAIT( ).

        IF <ENTRADA>-TP_OPERACAO EQ '01' OR
           <ENTRADA>-TP_OPERACAO EQ '02' OR
           <ENTRADA>-TP_OPERACAO EQ '03' OR
           <ENTRADA>-TP_OPERACAO EQ '04' OR
           <ENTRADA>-TP_OPERACAO EQ '08' OR
           <ENTRADA>-TP_OPERACAO EQ '09' OR
           <ENTRADA>-TP_OPERACAO EQ '10'.

          IF 1 = 2.
            SUBMIT ZMMR019 WITH POBJKEY EQ <ENTRADA>-OBJ_KEY AND RETURN.
          ELSE.

            DATA(LC_USER_JOB) = ZCL_JOB=>GET_USER_JOB( ).

            CONCATENATE 'JOB_ENTRADA' ME->CARGA-ID_CARGA INTO NAME SEPARATED BY '_'.

            CALL FUNCTION 'JOB_OPEN'
              EXPORTING
                JOBNAME          = NAME
              IMPORTING
                JOBCOUNT         = NUMBER
              EXCEPTIONS
                CANT_CREATE_JOB  = 1
                INVALID_JOB_DATA = 2
                JOBNAME_MISSING  = 3
                OTHERS           = 4.

            IF SY-SUBRC IS INITIAL.
              SUBMIT ZMMR019 TO SAP-SPOOL SPOOL PARAMETERS PRINT_PARAMETERS WITHOUT SPOOL DYNPRO VIA JOB NAME NUMBER NUMBER
                WITH POBJKEY EQ <ENTRADA>-OBJ_KEY
                USER LC_USER_JOB
                 AND RETURN.

              IF SY-SUBRC IS INITIAL.
                CALL FUNCTION 'JOB_CLOSE'
                  EXPORTING
                    JOBCOUNT             = NUMBER
                    JOBNAME              = NAME
                    STRTIMMED            = 'X'
                  EXCEPTIONS
                    CANT_START_IMMEDIATE = 1
                    INVALID_STARTDATE    = 2
                    JOBNAME_MISSING      = 3
                    JOB_CLOSE_FAILED     = 4
                    JOB_NOSTEPS          = 5
                    JOB_NOTEX            = 6
                    LOCK_FAILED          = 7
                    OTHERS               = 8.

                IF SY-SUBRC IS NOT INITIAL.
                  CK_ERRO = ABAP_TRUE.
                  MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
                  CALL FUNCTION 'BP_JOB_DELETE'
                    EXPORTING
                      JOBCOUNT                 = NUMBER
                      JOBNAME                  = NAME
                    EXCEPTIONS
                      CANT_DELETE_EVENT_ENTRY  = 1
                      CANT_DELETE_JOB          = 2
                      CANT_DELETE_JOBLOG       = 3
                      CANT_DELETE_STEPS        = 4
                      CANT_DELETE_TIME_ENTRY   = 5
                      CANT_DERELEASE_SUCCESSOR = 6
                      CANT_ENQ_PREDECESSOR     = 7
                      CANT_ENQ_SUCCESSOR       = 8
                      CANT_ENQ_TBTCO_ENTRY     = 9
                      CANT_UPDATE_PREDECESSOR  = 10
                      CANT_UPDATE_SUCCESSOR    = 11
                      COMMIT_FAILED            = 12
                      JOBCOUNT_MISSING         = 13
                      JOBNAME_MISSING          = 14
                      JOB_DOES_NOT_EXIST       = 15
                      JOB_IS_ALREADY_RUNNING   = 16
                      NO_DELETE_AUTHORITY      = 17
                      OTHERS                   = 18.
                  IF SY-SUBRC IS NOT INITIAL.
                    CK_ERRO = ABAP_FALSE.
                  ENDIF.
                ENDIF.
              ELSE.
                CK_ERRO = ABAP_TRUE.
                MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
                CALL FUNCTION 'BP_JOB_DELETE'
                  EXPORTING
                    JOBCOUNT                 = NUMBER
                    JOBNAME                  = NAME
                  EXCEPTIONS
                    CANT_DELETE_EVENT_ENTRY  = 1
                    CANT_DELETE_JOB          = 2
                    CANT_DELETE_JOBLOG       = 3
                    CANT_DELETE_STEPS        = 4
                    CANT_DELETE_TIME_ENTRY   = 5
                    CANT_DERELEASE_SUCCESSOR = 6
                    CANT_ENQ_PREDECESSOR     = 7
                    CANT_ENQ_SUCCESSOR       = 8
                    CANT_ENQ_TBTCO_ENTRY     = 9
                    CANT_UPDATE_PREDECESSOR  = 10
                    CANT_UPDATE_SUCCESSOR    = 11
                    COMMIT_FAILED            = 12
                    JOBCOUNT_MISSING         = 13
                    JOBNAME_MISSING          = 14
                    JOB_DOES_NOT_EXIST       = 15
                    JOB_IS_ALREADY_RUNNING   = 16
                    NO_DELETE_AUTHORITY      = 17
                    OTHERS                   = 18.
                IF SY-SUBRC IS NOT INITIAL.
                  CK_ERRO = ABAP_FALSE.
                ENDIF.
              ENDIF.
            ENDIF.

            "Aguardar execução do job
            ZCL_JOB=>GET_INSTANCE(
             )->SET_KEY_JOB( I_JOBNAME = NAME I_JOBCOUNT = NUMBER
             )->GET_WAIT_JOB_EXEC(
             ).

          ENDIF.
        ELSEIF <ENTRADA>-TP_OPERACAO EQ '11'.

          IF 1 = 2.
            SUBMIT ZMMR154 WITH POBJKEY EQ <ENTRADA>-OBJ_KEY AND RETURN.
          ELSE.

            LC_USER_JOB = ZCL_JOB=>GET_USER_JOB( ).

            CONCATENATE 'JOB_ENTRADA' ME->CARGA-ID_CARGA INTO NAME SEPARATED BY '_'.

            CALL FUNCTION 'JOB_OPEN'
              EXPORTING
                JOBNAME          = NAME
              IMPORTING
                JOBCOUNT         = NUMBER
              EXCEPTIONS
                CANT_CREATE_JOB  = 1
                INVALID_JOB_DATA = 2
                JOBNAME_MISSING  = 3
                OTHERS           = 4.

            IF SY-SUBRC IS INITIAL.
              SUBMIT ZMMR154 TO SAP-SPOOL SPOOL PARAMETERS PRINT_PARAMETERS WITHOUT SPOOL DYNPRO VIA JOB NAME NUMBER NUMBER
                WITH POBJKEY EQ <ENTRADA>-OBJ_KEY
                USER LC_USER_JOB
                 AND RETURN.

              IF SY-SUBRC IS INITIAL.
                CALL FUNCTION 'JOB_CLOSE'
                  EXPORTING
                    JOBCOUNT             = NUMBER
                    JOBNAME              = NAME
                    STRTIMMED            = 'X'
                  EXCEPTIONS
                    CANT_START_IMMEDIATE = 1
                    INVALID_STARTDATE    = 2
                    JOBNAME_MISSING      = 3
                    JOB_CLOSE_FAILED     = 4
                    JOB_NOSTEPS          = 5
                    JOB_NOTEX            = 6
                    LOCK_FAILED          = 7
                    OTHERS               = 8.

                IF SY-SUBRC IS NOT INITIAL.
                  CK_ERRO = ABAP_TRUE.
                  MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
                  CALL FUNCTION 'BP_JOB_DELETE'
                    EXPORTING
                      JOBCOUNT                 = NUMBER
                      JOBNAME                  = NAME
                    EXCEPTIONS
                      CANT_DELETE_EVENT_ENTRY  = 1
                      CANT_DELETE_JOB          = 2
                      CANT_DELETE_JOBLOG       = 3
                      CANT_DELETE_STEPS        = 4
                      CANT_DELETE_TIME_ENTRY   = 5
                      CANT_DERELEASE_SUCCESSOR = 6
                      CANT_ENQ_PREDECESSOR     = 7
                      CANT_ENQ_SUCCESSOR       = 8
                      CANT_ENQ_TBTCO_ENTRY     = 9
                      CANT_UPDATE_PREDECESSOR  = 10
                      CANT_UPDATE_SUCCESSOR    = 11
                      COMMIT_FAILED            = 12
                      JOBCOUNT_MISSING         = 13
                      JOBNAME_MISSING          = 14
                      JOB_DOES_NOT_EXIST       = 15
                      JOB_IS_ALREADY_RUNNING   = 16
                      NO_DELETE_AUTHORITY      = 17
                      OTHERS                   = 18.
                  IF SY-SUBRC IS NOT INITIAL.
                    CK_ERRO = ABAP_FALSE.
                  ENDIF.
                ENDIF.
              ELSE.
                CK_ERRO = ABAP_TRUE.
                MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
                CALL FUNCTION 'BP_JOB_DELETE'
                  EXPORTING
                    JOBCOUNT                 = NUMBER
                    JOBNAME                  = NAME
                  EXCEPTIONS
                    CANT_DELETE_EVENT_ENTRY  = 1
                    CANT_DELETE_JOB          = 2
                    CANT_DELETE_JOBLOG       = 3
                    CANT_DELETE_STEPS        = 4
                    CANT_DELETE_TIME_ENTRY   = 5
                    CANT_DERELEASE_SUCCESSOR = 6
                    CANT_ENQ_PREDECESSOR     = 7
                    CANT_ENQ_SUCCESSOR       = 8
                    CANT_ENQ_TBTCO_ENTRY     = 9
                    CANT_UPDATE_PREDECESSOR  = 10
                    CANT_UPDATE_SUCCESSOR    = 11
                    COMMIT_FAILED            = 12
                    JOBCOUNT_MISSING         = 13
                    JOBNAME_MISSING          = 14
                    JOB_DOES_NOT_EXIST       = 15
                    JOB_IS_ALREADY_RUNNING   = 16
                    NO_DELETE_AUTHORITY      = 17
                    OTHERS                   = 18.
                IF SY-SUBRC IS NOT INITIAL.
                  CK_ERRO = ABAP_FALSE.
                ENDIF.
              ENDIF.
            ENDIF.

            "Aguardar execução do job
            ZCL_JOB=>GET_INSTANCE(
             )->SET_KEY_JOB( I_JOBNAME = NAME I_JOBCOUNT = NUMBER
             )->GET_WAIT_JOB_EXEC(
             ).

          ENDIF.

        ELSEIF <ENTRADA>-TP_OPERACAO EQ '05' OR
               <ENTRADA>-TP_OPERACAO EQ '06' OR
               <ENTRADA>-TP_OPERACAO EQ '07'.

          IF 1 = 2.
            SUBMIT ZMMR021 WITH POBJKEY EQ <ENTRADA>-OBJ_KEY AND RETURN.
          ELSE.

            LC_USER_JOB = ZCL_JOB=>GET_USER_JOB( ).

            CONCATENATE 'JOB_ENTRADA' ME->CARGA-ID_CARGA INTO NAME SEPARATED BY '_'.

            CALL FUNCTION 'JOB_OPEN'
              EXPORTING
                JOBNAME          = NAME
              IMPORTING
                JOBCOUNT         = NUMBER
              EXCEPTIONS
                CANT_CREATE_JOB  = 1
                INVALID_JOB_DATA = 2
                JOBNAME_MISSING  = 3
                OTHERS           = 4.

            IF SY-SUBRC IS INITIAL.
              SUBMIT ZMMR021 TO SAP-SPOOL SPOOL PARAMETERS PRINT_PARAMETERS WITHOUT SPOOL DYNPRO VIA JOB NAME NUMBER NUMBER
                WITH POBJKEY EQ <ENTRADA>-OBJ_KEY
                USER LC_USER_JOB
                 AND RETURN.

              IF SY-SUBRC IS INITIAL.
                CALL FUNCTION 'JOB_CLOSE'
                  EXPORTING
                    JOBCOUNT             = NUMBER
                    JOBNAME              = NAME
                    STRTIMMED            = 'X'
                  EXCEPTIONS
                    CANT_START_IMMEDIATE = 1
                    INVALID_STARTDATE    = 2
                    JOBNAME_MISSING      = 3
                    JOB_CLOSE_FAILED     = 4
                    JOB_NOSTEPS          = 5
                    JOB_NOTEX            = 6
                    LOCK_FAILED          = 7
                    OTHERS               = 8.

                IF SY-SUBRC IS NOT INITIAL.
                  CK_ERRO = ABAP_TRUE.
                  MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
                  CALL FUNCTION 'BP_JOB_DELETE'
                    EXPORTING
                      JOBCOUNT                 = NUMBER
                      JOBNAME                  = NAME
                    EXCEPTIONS
                      CANT_DELETE_EVENT_ENTRY  = 1
                      CANT_DELETE_JOB          = 2
                      CANT_DELETE_JOBLOG       = 3
                      CANT_DELETE_STEPS        = 4
                      CANT_DELETE_TIME_ENTRY   = 5
                      CANT_DERELEASE_SUCCESSOR = 6
                      CANT_ENQ_PREDECESSOR     = 7
                      CANT_ENQ_SUCCESSOR       = 8
                      CANT_ENQ_TBTCO_ENTRY     = 9
                      CANT_UPDATE_PREDECESSOR  = 10
                      CANT_UPDATE_SUCCESSOR    = 11
                      COMMIT_FAILED            = 12
                      JOBCOUNT_MISSING         = 13
                      JOBNAME_MISSING          = 14
                      JOB_DOES_NOT_EXIST       = 15
                      JOB_IS_ALREADY_RUNNING   = 16
                      NO_DELETE_AUTHORITY      = 17
                      OTHERS                   = 18.
                  IF SY-SUBRC IS NOT INITIAL.
                    CK_ERRO = ABAP_FALSE.
                  ENDIF.
                ENDIF.
              ELSE.
                CK_ERRO = ABAP_TRUE.
                MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
                CALL FUNCTION 'BP_JOB_DELETE'
                  EXPORTING
                    JOBCOUNT                 = NUMBER
                    JOBNAME                  = NAME
                  EXCEPTIONS
                    CANT_DELETE_EVENT_ENTRY  = 1
                    CANT_DELETE_JOB          = 2
                    CANT_DELETE_JOBLOG       = 3
                    CANT_DELETE_STEPS        = 4
                    CANT_DELETE_TIME_ENTRY   = 5
                    CANT_DERELEASE_SUCCESSOR = 6
                    CANT_ENQ_PREDECESSOR     = 7
                    CANT_ENQ_SUCCESSOR       = 8
                    CANT_ENQ_TBTCO_ENTRY     = 9
                    CANT_UPDATE_PREDECESSOR  = 10
                    CANT_UPDATE_SUCCESSOR    = 11
                    COMMIT_FAILED            = 12
                    JOBCOUNT_MISSING         = 13
                    JOBNAME_MISSING          = 14
                    JOB_DOES_NOT_EXIST       = 15
                    JOB_IS_ALREADY_RUNNING   = 16
                    NO_DELETE_AUTHORITY      = 17
                    OTHERS                   = 18.
                IF SY-SUBRC IS NOT INITIAL.
                  CK_ERRO = ABAP_FALSE.
                ENDIF.
              ENDIF.
            ENDIF.

            "Aguardar execução do job
            ZCL_JOB=>GET_INSTANCE(
             )->SET_KEY_JOB( I_JOBNAME = NAME I_JOBCOUNT = NUMBER
             )->GET_WAIT_JOB_EXEC(
             ).

          ENDIF.

        ENDIF.

        SELECT SINGLE * INTO DOCUMENTOS
          FROM ZMMT_EE_ZGR_DOCS
         WHERE OBJ_KEY EQ <ENTRADA>-OBJ_KEY.

        IF SY-SUBRC IS INITIAL AND (
                 DOCUMENTOS-AV_VBELN  IS NOT INITIAL OR
                 DOCUMENTOS-MM_MBLNR  IS NOT INITIAL OR
                 DOCUMENTOS-MM_MJAHR  IS NOT INITIAL OR
                 DOCUMENTOS-FT_BELNR  IS NOT INITIAL OR
                 DOCUMENTOS-FT_GJAHR  IS NOT INITIAL OR
                 DOCUMENTOS-DOCNUM    IS NOT INITIAL ).
          DELETE IT_ENTRADA_GRAVAR WHERE OBJ_KEY EQ <ENTRADA>-OBJ_KEY.

          READ TABLE ME->DOCUMENTO_FISCAL ASSIGNING <FS_DOCUMENTO>
          WITH KEY OBJ_KEY_ENTRADA = <ENTRADA>-OBJ_KEY.
          IF SY-SUBRC IS INITIAL.
            ME->CK_ALTEROU = ABAP_TRUE.
            <FS_DOCUMENTO>-PO_NUMBER = <ENTRADA>-PO_NUMBER.
            <FS_DOCUMENTO>-PO_ITEM   = <ENTRADA>-PO_ITEM.
            <FS_DOCUMENTO>-AV_VBELN  = DOCUMENTOS-AV_VBELN.
            <FS_DOCUMENTO>-MM_MBLNR  = DOCUMENTOS-MM_MBLNR.
            <FS_DOCUMENTO>-MM_MJAHR  = DOCUMENTOS-MM_MJAHR.
            <FS_DOCUMENTO>-FT_BELNR  = DOCUMENTOS-FT_BELNR.
            <FS_DOCUMENTO>-FT_GJAHR  = DOCUMENTOS-FT_GJAHR.
            <FS_DOCUMENTO>-DOCNUM    = DOCUMENTOS-DOCNUM.
            E_GEROU_ENTRADA = ABAP_TRUE.

            IF DOCUMENTOS-DOCNUM IS NOT INITIAL.
              CALL FUNCTION 'Z_INFO_NFE_FORNECEDOR_GERAL_01'
                EXPORTING
                  I_DOCNUM = DOCUMENTOS-DOCNUM.
            ENDIF.
          ENDIF.
        ELSE.
          "Erro.
          CK_ERRO = ABAP_TRUE.
        ENDIF.

      ENDIF.

    ENDLOOP.

    "Estornar
    IF CK_ERRO EQ ABAP_TRUE.
      ME->ZIF_CARGA~SET_GERAR_ESTORNO_ESTOQUE(
      )->SET_PROCESSAR_ESTORNO( ).
      E_GEROU_ENTRADA = ABAP_FALSE.
      E_MSG_ERRO      = MTEXT.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_PROCESSAR_ESTORNO.

    DATA: OB_ROMANEIO   TYPE REF TO ZCL_ROMANEIO,
          RG_ST_ESTORNO TYPE RANGE OF ZDE_STATUS_ESTORNO.

    R_CARGA = ME.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

*      CHECK ME->CARGA-TP_STATUS EQ ZIF_CARGA=>ST_STATUS_CONFERIDO.

*      LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_DOCUMENTO>) WHERE CH_REFERENCIA_ENT IS NOT INITIAL.
*
*        SELECT * INTO TABLE @DATA(IT_ENTRADA)
*          FROM ZMMT_EE_ZGR
*         WHERE ID_CARGA   EQ @<FS_DOCUMENTO>-ID_CARGA
*           AND ID_NOTA    EQ @<FS_DOCUMENTO>-ID_NOTA.
*
*        IF IT_ENTRADA[] IS INITIAL.
*          "Não Tem Solicitação de Entrada de Estoque
*          "Excluir Romaneio de Entrada
*          CREATE OBJECT OB_ROMANEIO.
*          OB_ROMANEIO->ZIF_CADASTRO~SET_REGISTRO( I_ID_REGISTRO = <FS_DOCUMENTO>-CH_REFERENCIA_ENT ).
*          OB_ROMANEIO->ZIF_CADASTRO~EXCLUIR_REGISTRO( ).
*          CLEAR OB_ROMANEIO.
*          ME->CK_ALTEROU = ABAP_TRUE.
*          CLEAR: <FS_DOCUMENTO>-CH_REFERENCIA_ENT, <FS_DOCUMENTO>-NR_ROMANEIO_ENT.
*        ENDIF.
*
*      ENDLOOP.

    RG_ST_ESTORNO = VALUE #( SIGN = 'I' OPTION = 'EQ'
                             ( LOW = ZIF_CARGA=>ST_STATUS_ESTORNO_SOLICITADO  HIGH = ZIF_CARGA=>ST_STATUS_ESTORNO_SOLICITADO )
                             ( LOW = ZIF_CARGA=>ST_STATUS_ESTORNO_BLOQUEIO    HIGH = ZIF_CARGA=>ST_STATUS_ESTORNO_BLOQUEIO ) ).

    SELECT * INTO TABLE @DATA(IT_ENTRADA)
      FROM ZMMT_EE_ZGR
     WHERE ID_CARGA   EQ @ME->CARGA-ID_CARGA
       AND ST_ESTORNO IN @RG_ST_ESTORNO.

    IF IT_ENTRADA[] IS NOT INITIAL.

      SELECT * INTO TABLE @DATA(IT_ESTORNO)
        FROM ZMMT_EEE_ZGR
         FOR ALL ENTRIES IN @IT_ENTRADA
       WHERE OBJ_KEY EQ @IT_ENTRADA-OBJ_KEY.

      SELECT * INTO TABLE @DATA(IT_ENTRADA_DOCS)
        FROM ZMMT_EE_ZGR_DOCS
         FOR ALL ENTRIES IN @IT_ENTRADA
       WHERE OBJ_KEY EQ @IT_ENTRADA-OBJ_KEY.

      "ME->GET_CHECK_JOB_EXECUCAO( ).

      LOOP AT IT_ENTRADA INTO DATA(WA_ENTRADA).
        ME->BLOQUEAR_ENTRADA( I_OBJ_KEY = WA_ENTRADA-OBJ_KEY ).
      ENDLOOP.

      LOOP AT IT_ENTRADA ASSIGNING FIELD-SYMBOL(<ENTRADA>).

        READ TABLE IT_ESTORNO ASSIGNING FIELD-SYMBOL(<ESTORNO>) WITH KEY  OBJ_KEY = <ENTRADA>-OBJ_KEY.
        IF SY-SUBRC IS NOT INITIAL.
          CONTINUE.
        ENDIF.

        IF <ESTORNO>-RG_ATUALIZADO EQ '0'.

          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SOLIC_ESTORNO_ANDAMENTO-MSGID
                                MSGNO = ZCX_CARGA=>ZCX_SOLIC_ESTORNO_ANDAMENTO-MSGNO )
              MSGTY  = 'E'
              MSGID  = ZCX_CARGA=>ZCX_SOLIC_ESTORNO_ANDAMENTO-MSGID
              MSGNO  = ZCX_CARGA=>ZCX_SOLIC_ESTORNO_ANDAMENTO-MSGNO.

        ELSEIF <ESTORNO>-RG_ATUALIZADO EQ '1'.

          READ TABLE IT_ENTRADA_DOCS INTO DATA(WA_ENTRADA_DOCS) WITH KEY OBJ_KEY = <ESTORNO>-OBJ_KEY.
          IF SY-SUBRC IS NOT INITIAL.
            " Não Existe Documento Gerado Para Estornar
          ELSE.

            ME->ZIF_CARGA~GET_DOCUMENTO_ENT_ESTORNADO( EXPORTING I_OBJ_KEY = WA_ENTRADA_DOCS-OBJ_KEY IMPORTING R_ESTORNADO = DATA(R_ESTORNADO) ).

            IF R_ESTORNADO EQ ABAP_TRUE.
              "Não Existe nenhum documento para ser estornado
              <ENTRADA>-ST_ESTORNO = ZIF_CARGA=>ST_STATUS_ESTORNO_EXECUTADO.

              "Limpar Registro de Nota Fiscal
              READ TABLE ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_DOCUMENTO>) WITH KEY OBJ_KEY_ENTRADA = <ENTRADA>-OBJ_KEY.
              IF SY-SUBRC IS INITIAL.

                IF <FS_DOCUMENTO>-CH_REFERENCIA_ENT IS NOT INITIAL AND
                   ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.

                  SELECT SINGLE * INTO @DATA(WA_ROMANEIO_ENT)
                    FROM ZSDT0001
                   WHERE ID_CARGA      EQ @ME->CARGA-ID_CARGA
                     AND CH_REFERENCIA EQ @<FS_DOCUMENTO>-CH_REFERENCIA_ENT.

                  IF WA_ROMANEIO_ENT IS NOT INITIAL.
                    CREATE OBJECT OB_ROMANEIO.
                    OB_ROMANEIO->ZIF_CADASTRO~SET_REGISTRO( I_ID_REGISTRO = WA_ROMANEIO_ENT-CH_REFERENCIA ).
                    OB_ROMANEIO->ZIF_CADASTRO~EXCLUIR_REGISTRO( ).
                    CLEAR OB_ROMANEIO.
                  ENDIF.

                ENDIF.

                IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
                  CLEAR: <FS_DOCUMENTO>-CH_REFERENCIA_ENT, <FS_DOCUMENTO>-NR_ROMANEIO_ENT.
                ENDIF.

                ME->CK_ALTEROU = ABAP_TRUE.

                CLEAR: <FS_DOCUMENTO>-AV_VBELN, <FS_DOCUMENTO>-MM_MBLNR,
                       <FS_DOCUMENTO>-MM_MJAHR,  <FS_DOCUMENTO>-FT_BELNR, <FS_DOCUMENTO>-FT_GJAHR, <FS_DOCUMENTO>-DOCNUM,
                       <FS_DOCUMENTO>-OBJ_KEY_ENTRADA.
              ENDIF.

              E_ESTORNOU = ABAP_TRUE.

            ELSE.

              "Valida Estorno """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
              IF WA_ENTRADA_DOCS-DOCNUM IS NOT INITIAL.
                SELECT SINGLE * INTO @DATA(WA_NOTA)
                  FROM J_1BNFDOC
                 WHERE DOCNUM EQ @WA_ENTRADA_DOCS-DOCNUM.

                IF SY-SUBRC IS INITIAL.

                  IF <ESTORNO>-DT_ESTORNO IS NOT INITIAL.
                    DATA(LC_DT_ESTORNO) = <ESTORNO>-DT_ESTORNO.
                  ELSE.
                    LC_DT_ESTORNO = WA_NOTA-PSTDAT.
                  ENDIF.

                  CALL FUNCTION 'J_1B_NF_CANCEL_CHECK_PERIOD'
                    EXPORTING
                      I_BUDAT      = LC_DT_ESTORNO
                      I_BUKRS      = WA_NOTA-BUKRS
                    EXCEPTIONS
                      WRONG_PERIOD = 1
                      OTHERS       = 2.

                  IF SY-SUBRC IS NOT INITIAL.
                    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO DATA(MTEXT) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
                    ME->ZIF_CARGA~GERA_ERRO_GERAL( I_TEXTO = MTEXT ).
                  ENDIF.
                ENDIF.
              ENDIF.
              """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

              "Excluir Romaneio de Saída
              IF ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.

                LOOP AT ME->ZIF_CARGA~ORDEM_VENDA ASSIGNING FIELD-SYMBOL(<FS_ORDEM>).

                  IF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.
                    ME->ZIF_CARGA~GET_CK_EXCLUIR_ROMANEIO_SAIDA( ).
                  ENDIF.

                  IF <FS_ORDEM>-CH_REFERENCIA_SAI IS NOT INITIAL.
                    SELECT SINGLE * INTO @DATA(WA_ROMANEIO)
                      FROM ZSDT0001
                     WHERE ID_CARGA      EQ @ME->CARGA-ID_CARGA
                       AND CH_REFERENCIA EQ @<FS_ORDEM>-CH_REFERENCIA_SAI.

                    IF WA_ROMANEIO IS NOT INITIAL.
                      CREATE OBJECT OB_ROMANEIO.
                      OB_ROMANEIO->ZIF_CADASTRO~SET_REGISTRO( I_ID_REGISTRO = WA_ROMANEIO-CH_REFERENCIA ).
                      OB_ROMANEIO->ZIF_CADASTRO~EXCLUIR_REGISTRO( ).
                      CLEAR OB_ROMANEIO.
                    ENDIF.
                    ME->CK_ALTEROU = ABAP_TRUE.
                    CLEAR: <FS_ORDEM>-CH_REFERENCIA_SAI, <FS_ORDEM>-NR_ROMANEIO_SAI.
                  ENDIF.

                ENDLOOP.
              ENDIF.

              DATA: NUMBER           TYPE TBTCJOB-JOBCOUNT,
                    NAME             TYPE TBTCJOB-JOBNAME,
                    PRINT_PARAMETERS TYPE PRI_PARAMS.

              DATA(LC_USER_JOB) = ZCL_JOB=>GET_USER_JOB( ).

              CONCATENATE 'JOB_ENTRADA_ESTORNO' ME->CARGA-ID_CARGA INTO NAME.

              CALL FUNCTION 'JOB_OPEN'
                EXPORTING
                  JOBNAME          = NAME
                IMPORTING
                  JOBCOUNT         = NUMBER
                EXCEPTIONS
                  CANT_CREATE_JOB  = 1
                  INVALID_JOB_DATA = 2
                  JOBNAME_MISSING  = 3
                  OTHERS           = 4.

              IF SY-SUBRC = 0.

                SUBMIT ZMMR020 TO SAP-SPOOL SPOOL PARAMETERS PRINT_PARAMETERS WITHOUT SPOOL DYNPRO VIA JOB NAME NUMBER NUMBER
                  WITH POBJKEY EQ <ENTRADA>-OBJ_KEY
                  USER LC_USER_JOB
                   AND RETURN.

                IF SY-SUBRC = 0.
                  CALL FUNCTION 'JOB_CLOSE'
                    EXPORTING
                      JOBCOUNT             = NUMBER
                      JOBNAME              = NAME
                      STRTIMMED            = 'X'
                    EXCEPTIONS
                      CANT_START_IMMEDIATE = 1
                      INVALID_STARTDATE    = 2
                      JOBNAME_MISSING      = 3
                      JOB_CLOSE_FAILED     = 4
                      JOB_NOSTEPS          = 5
                      JOB_NOTEX            = 6
                      LOCK_FAILED          = 7
                      OTHERS               = 8.
                ENDIF.
              ENDIF.

              "Aguardar execução do job
              ZCL_JOB=>GET_INSTANCE( )->SET_KEY_JOB( I_JOBNAME = NAME I_JOBCOUNT = NUMBER )->GET_WAIT_JOB_EXEC( ).

              ME->ZIF_CARGA~SET_PROCESSAR_ESTORNO( IMPORTING E_ESTORNOU = E_ESTORNOU ).

            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ELSE.
      E_ESTORNOU = ABAP_TRUE.
    ENDIF.

    "Comentado
    "BREAK-POINT.
*    IF IT_ESTORNO[] IS NOT INITIAL.
*      MODIFY ZMMT_EEE_ZGR FROM TABLE IT_ESTORNO.
*    ENDIF.

*    IF IT_ENTRADA[] IS NOT INITIAL.
*      MODIFY ZMMT_EE_ZGR  FROM TABLE IT_ENTRADA.
*    ENDIF.

*    IF ME->CK_ALTEROU EQ ABAP_TRUE.
*      ME->GRAVAR_REGISTRO( ).
*    ELSE.
*      COMMIT WORK.
*    ENDIF.

    LOOP AT IT_ENTRADA INTO WA_ENTRADA.
      ME->DESBLOQUEAR_ENTRADA( I_OBJ_KEY = WA_ENTRADA-OBJ_KEY ).
    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_PROCESSAR_ESTORNO_SOBRA.

    DATA: NUMBER           TYPE TBTCJOB-JOBCOUNT,
          NAME             TYPE TBTCJOB-JOBNAME,
          PRINT_PARAMETERS TYPE PRI_PARAMS.


    R_INSTANCE = ME.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

    "Verificar se é entrada FOB
    CHECK ME->CARGA-TP_FRETE EQ ZIF_CARGA=>ST_TP_FRETE_FOB.

    ME->ZIF_CARGA~GET_RECUPERAR_ENTRADA( ).

    DATA(LC_USER_JOB) = ZCL_JOB=>GET_USER_JOB( ).

    LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_ENTRADA>)  WHERE MM_MBLNR_SOBRA IS NOT INITIAL.

      SELECT SINGLE * INTO @DATA(WA_DOCUMENTOS)
        FROM ZMMT_EE_ZGR_DOCS
       WHERE OBJ_KEY EQ @<FS_ENTRADA>-OBJ_KEY_ENTRADA.

      IF SY-SUBRC IS INITIAL AND
         WA_DOCUMENTOS-MM_MBLNR_SOBRA IS INITIAL AND
         WA_DOCUMENTOS-MM_MJAHR_SOBRA IS INITIAL.
        CLEAR:
        <FS_ENTRADA>-MM_MBLNR_SOBRA,
        <FS_ENTRADA>-MM_MJAHR_SOBRA.
        CONTINUE.
      ENDIF.

      CONCATENATE 'JOB_SOBRA_ESTORNO' ME->CARGA-ID_CARGA INTO NAME SEPARATED BY '_'.

      CALL FUNCTION 'JOB_OPEN'
        EXPORTING
          JOBNAME          = NAME
        IMPORTING
          JOBCOUNT         = NUMBER
        EXCEPTIONS
          CANT_CREATE_JOB  = 1
          INVALID_JOB_DATA = 2
          JOBNAME_MISSING  = 3
          OTHERS           = 4.

      IF SY-SUBRC = 0.

        IF I_DT_ESTORNO IS NOT INITIAL.
          DATA(LC_DT_ESTORNO) = ZCL_MIRO=>VERIFICAR_CRIAR( I_DATA = I_DT_ESTORNO I_BUKRS = ME->CARGA-ID_BUKRS ).

          DATA(LC_DT_RETORNO) = ZCL_MIRO=>GET_MES_PERMITIDO_FECHAMENTO( EXPORTING I_DATA = LC_DT_ESTORNO I_USER =  LC_USER_JOB ).
          IF LC_DT_ESTORNO NE LC_DT_RETORNO.
            LC_DT_ESTORNO = LC_DT_RETORNO(6) && '01'.
          ENDIF.

        ELSE.
          LC_DT_ESTORNO = SY-DATUM.
        ENDIF.

        SUBMIT ZMMR130 TO SAP-SPOOL SPOOL PARAMETERS PRINT_PARAMETERS WITHOUT SPOOL DYNPRO VIA JOB NAME NUMBER NUMBER
          WITH POBJKEY  EQ <FS_ENTRADA>-OBJ_KEY_ENTRADA
          WITH PESTORN  EQ ABAP_TRUE
          WITH DESTORNO EQ LC_DT_ESTORNO
          USER LC_USER_JOB
           AND RETURN.

        IF SY-SUBRC = 0.
          CALL FUNCTION 'JOB_CLOSE'
            EXPORTING
              JOBCOUNT             = NUMBER
              JOBNAME              = NAME
              STRTIMMED            = 'X'
            EXCEPTIONS
              CANT_START_IMMEDIATE = 1
              INVALID_STARTDATE    = 2
              JOBNAME_MISSING      = 3
              JOB_CLOSE_FAILED     = 4
              JOB_NOSTEPS          = 5
              JOB_NOTEX            = 6
              LOCK_FAILED          = 7
              OTHERS               = 8.
        ENDIF.
      ENDIF.

      "Aguardar execução do job
      ZCL_JOB=>GET_INSTANCE(
       )->SET_KEY_JOB( I_JOBNAME = NAME I_JOBCOUNT = NUMBER
       )->GET_WAIT_JOB_EXEC(
       ).

      SELECT SINGLE * INTO WA_DOCUMENTOS
        FROM ZMMT_EE_ZGR_DOCS
       WHERE OBJ_KEY EQ <FS_ENTRADA>-OBJ_KEY_ENTRADA.

      IF SY-SUBRC IS INITIAL AND
         WA_DOCUMENTOS-MM_MBLNR_SOBRA IS INITIAL AND
         WA_DOCUMENTOS-MM_MJAHR_SOBRA IS INITIAL.
        CLEAR:
        <FS_ENTRADA>-MM_MBLNR_SOBRA,
        <FS_ENTRADA>-MM_MJAHR_SOBRA.
        CONTINUE.
      ELSE.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NAO_ESTORNOU_SOBRA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_NAO_ESTORNOU_SOBRA-MSGNO
                              ATTR1 = CONV #( WA_DOCUMENTOS-DOCNUM ) )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_NAO_ESTORNOU_SOBRA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_NAO_ESTORNOU_SOBRA-MSGNO
            MSGV1  = CONV #( WA_DOCUMENTOS-DOCNUM ).
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_PROCESSAR_MANUTENCAO.

    DATA: CK_ALTERA_ROMANEIO    TYPE CHAR01 VALUE ABAP_FALSE,
          CK_ESTORNA_MIRO       TYPE CHAR01 VALUE ABAP_FALSE,
          CK_ESTORNA_MIGO       TYPE CHAR01 VALUE ABAP_FALSE,
          CK_ESTORNA_MIGO_SOBRA TYPE CHAR01 VALUE ABAP_FALSE,
          CK_GERA_CARTA_CTE     TYPE CHAR01 VALUE ABAP_FALSE,
          CK_GERA_CARTA_NFE     TYPE CHAR01 VALUE ABAP_FALSE,
          AT_CARGA_ORIGINAL     TYPE REF TO ZCL_CARGA_RECEBIMENTO,
          AT_ROMANEIO           TYPE REF TO ZCL_ROMANEIO,
          LC_NOTAS_REMOVIDAS    TYPE ZDE_ZSDT0001NT_T.

    SELECT SINGLE * INTO @DATA(WA_ZSDT0001ACB)
      FROM ZSDT0001ACB
     WHERE ID_SOLICITACAO EQ @ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.

    CREATE OBJECT AT_CARGA_ORIGINAL.

    AT_CARGA_ORIGINAL->SET_REGISTRO( I_ID_CARGA = ME->CARGA-ID_CARGA I_NO_ENQUEUE = ABAP_TRUE ).
    AT_CARGA_ORIGINAL->ZIF_CARGA~SOLICITACAO_MANUTENCAO = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO.

    AT_CARGA_ORIGINAL->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA = ABAP_TRUE.

    "Deve Ser Emitido uma Carta de Correção para Alteração de Placa
    IF ME->CARGA-DS_PLACA_TRATOR <> AT_CARGA_ORIGINAL->CARGA-DS_PLACA_TRATOR.
      CK_ALTERA_ROMANEIO = ABAP_TRUE.
      CK_GERA_CARTA_CTE  = ABAP_TRUE.
      CK_GERA_CARTA_NFE  = ABAP_TRUE.
    ENDIF.

    "Deve Ser Emitido uma Carta de Correção para Alteração de Proprietário (NF-e/CT-e)
    "Se For CIF o RNTRC é do Terceiro
    IF ME->CARGA-ID_PROPRIETARIO <> AT_CARGA_ORIGINAL->CARGA-ID_PROPRIETARIO
      AND AT_CARGA_ORIGINAL->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA EQ ZIF_CARGA=>ST_TP_FRETE_CIF.
      CK_GERA_CARTA_CTE  = ABAP_TRUE.
    ENDIF.

    "Deve Ser Emitido uma Carta de Correção para Alteração de Motorista (CT-e)
    "Se For CIF o RNTRC é do Terceiro
    IF ME->CARGA-ID_MOTORISTA <> AT_CARGA_ORIGINAL->CARGA-ID_MOTORISTA.
      CK_ALTERA_ROMANEIO = ABAP_TRUE.
      CK_GERA_CARTA_CTE  = ABAP_TRUE.
    ENDIF.

    "Deve Ser Verificação do Fluxo de Pagamento de Classificação
    IF ME->CLASSIFICACAO-ID_CLASSIFICADORA <> AT_CARGA_ORIGINAL->CLASSIFICACAO-ID_CLASSIFICADORA.
      CK_ALTERA_ROMANEIO = ABAP_TRUE.
    ENDIF.

    IF ME->CLASSIFICACAO-NR_RESULTADO_01 <> AT_CARGA_ORIGINAL->CLASSIFICACAO-NR_RESULTADO_01.
      CK_ALTERA_ROMANEIO = ABAP_TRUE.
    ENDIF.

    IF ME->CLASSIFICACAO-NR_RESULTADO_02 <> AT_CARGA_ORIGINAL->CLASSIFICACAO-NR_RESULTADO_02.
      CK_ALTERA_ROMANEIO = ABAP_TRUE.
    ENDIF.

    IF ME->CLASSIFICACAO-NR_RES_RR1_RR2 <> AT_CARGA_ORIGINAL->CLASSIFICACAO-NR_RES_RR1_RR2.
      CK_ALTERA_ROMANEIO = ABAP_TRUE.
    ENDIF.

    IF ME->CLASSIFICACAO-TP_TRANSGENIA <> AT_CARGA_ORIGINAL->CLASSIFICACAO-TP_TRANSGENIA.
      CK_ALTERA_ROMANEIO = ABAP_TRUE.
    ENDIF.

    IF ME->CLASSIFICACAO-ID_OUTRO_PARTIC <> AT_CARGA_ORIGINAL->CLASSIFICACAO-ID_OUTRO_PARTIC.
      CK_ALTERA_ROMANEIO = ABAP_TRUE.
    ENDIF.

    "Se Alterou Ticket
    IF ME->CARGA-NR_TICKET <> AT_CARGA_ORIGINAL->CARGA-NR_TICKET.
      CK_ALTERA_ROMANEIO = ABAP_TRUE.
    ENDIF.

    "Alterou a SOBRA
    IF ME->CARGA-NM_PESO_SUBTOTAL NE AT_CARGA_ORIGINAL->CARGA-NM_PESO_SUBTOTAL.
      CK_GERA_CARTA_CTE     = ABAP_TRUE.
      CK_ESTORNA_MIGO_SOBRA = ABAP_TRUE.
    ENDIF.

    "Verifica Alteração de Classificação
    LOOP AT ME->RESULTADO INTO DATA(WA_RESULTADO).
      READ TABLE AT_CARGA_ORIGINAL->RESULTADO INTO DATA(WA_RES_ORIGINAL)
      WITH KEY TP_CARACTERISTICA = WA_RESULTADO-TP_CARACTERISTICA.
      IF SY-SUBRC IS INITIAL AND WA_RESULTADO-NR_PERCENTUAL_COM NE WA_RES_ORIGINAL-NR_PERCENTUAL_COM.
        CK_ALTERA_ROMANEIO = ABAP_TRUE.
      ENDIF.
    ENDLOOP.

    "Verifica Alteração de Sub Característica Avariado
    LOOP AT ME->ZIF_CARGA~RESULTADO_AVARIADO INTO DATA(WA_RESULTADO_AVA).
      READ TABLE AT_CARGA_ORIGINAL->ZIF_CARGA~RESULTADO_AVARIADO INTO DATA(WA_RES_ORIGINAL_AVA)
      WITH KEY TP_SUB_CARAC_AVARIADO = WA_RESULTADO_AVA-TP_SUB_CARAC_AVARIADO.
      IF SY-SUBRC IS INITIAL AND WA_RESULTADO_AVA-NR_PERCENTUAL_COM NE WA_RES_ORIGINAL_AVA-NR_PERCENTUAL_COM.
        CK_ALTERA_ROMANEIO = ABAP_TRUE.
      ENDIF.
    ENDLOOP.

    LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_DOCUMENTO_FISCAL).
      READ TABLE AT_CARGA_ORIGINAL->DOCUMENTO_FISCAL WITH KEY ID_CARGA = WA_DOCUMENTO_FISCAL-ID_CARGA
                                                                         ID_NOTA  = WA_DOCUMENTO_FISCAL-ID_NOTA
                                                               INTO DATA(WA_DOC_ORIGINAL).
      IF SY-SUBRC IS INITIAL.
        IF WA_DOCUMENTO_FISCAL-ID_ENTRADA NE WA_DOC_ORIGINAL-ID_ENTRADA.
          CK_ALTERA_ROMANEIO = ABAP_TRUE.
          CK_ESTORNA_MIRO    = ABAP_TRUE.
          CK_ESTORNA_MIGO    = ABAP_TRUE.
        ENDIF.
        IF WA_DOCUMENTO_FISCAL-ID_FORNECEDOR NE WA_DOC_ORIGINAL-ID_FORNECEDOR.
          CK_ALTERA_ROMANEIO = ABAP_TRUE.
          CK_ESTORNA_MIRO    = ABAP_TRUE.
          CK_ESTORNA_MIGO    = ABAP_TRUE.
        ENDIF.
        IF WA_DOCUMENTO_FISCAL-ID_MOD_FISCAL NE WA_DOC_ORIGINAL-ID_MOD_FISCAL.
          CK_ALTERA_ROMANEIO = ABAP_TRUE.
          CK_ESTORNA_MIRO    = ABAP_TRUE.
          CK_ESTORNA_MIGO    = ABAP_TRUE.
        ENDIF.
        IF WA_DOCUMENTO_FISCAL-NR_NOTA NE WA_DOC_ORIGINAL-NR_NOTA.
          CK_ALTERA_ROMANEIO = ABAP_TRUE.
          CK_ESTORNA_MIRO    = ABAP_TRUE.
          CK_ESTORNA_MIGO    = ABAP_TRUE.
        ENDIF.
        IF WA_DOCUMENTO_FISCAL-NM_SERIE NE WA_DOC_ORIGINAL-NM_SERIE.
          CK_ALTERA_ROMANEIO = ABAP_TRUE.
          CK_ESTORNA_MIRO    = ABAP_TRUE.
          CK_ESTORNA_MIGO    = ABAP_TRUE.
        ENDIF.
        IF WA_DOCUMENTO_FISCAL-NR_QUANTIDADE NE WA_DOC_ORIGINAL-NR_QUANTIDADE.
          CK_ALTERA_ROMANEIO = ABAP_TRUE.
          CK_ESTORNA_MIRO    = ABAP_TRUE.
          CK_ESTORNA_MIGO    = ABAP_TRUE.
        ENDIF.
        IF WA_DOCUMENTO_FISCAL-NR_VALOR NE WA_DOC_ORIGINAL-NR_VALOR.
          CK_ALTERA_ROMANEIO = ABAP_TRUE.
          CK_ESTORNA_MIRO    = ABAP_TRUE.
          CK_ESTORNA_MIGO    = ABAP_TRUE.
        ENDIF.
        IF WA_DOCUMENTO_FISCAL-DT_EMISSAO NE WA_DOC_ORIGINAL-DT_EMISSAO.
          CK_ALTERA_ROMANEIO = ABAP_TRUE.
          CK_ESTORNA_MIRO    = ABAP_TRUE.
          CK_ESTORNA_MIGO    = ABAP_TRUE.
        ENDIF.
        IF WA_DOCUMENTO_FISCAL-CFOP NE WA_DOC_ORIGINAL-CFOP.
          CK_ALTERA_ROMANEIO = ABAP_TRUE.
          CK_ESTORNA_MIRO    = ABAP_TRUE.
          CK_ESTORNA_MIGO    = ABAP_TRUE.
        ENDIF.
        IF WA_DOCUMENTO_FISCAL-NR_CHAVE_NFE NE WA_DOC_ORIGINAL-NR_CHAVE_NFE.
          CK_ALTERA_ROMANEIO = ABAP_TRUE.
          CK_ESTORNA_MIRO    = ABAP_TRUE.
          CK_ESTORNA_MIGO    = ABAP_TRUE.
        ENDIF.
        IF WA_DOCUMENTO_FISCAL-ID_ENTREGUE_POR NE WA_DOC_ORIGINAL-ID_ENTREGUE_POR.
          CK_ALTERA_ROMANEIO = ABAP_TRUE.
        ENDIF.
      ENDIF.
    ENDLOOP.

    "Altera Algum Peso de Desconto
    IF ME->CARGA-NM_PESO_LIQUIDO NE AT_CARGA_ORIGINAL->CARGA-NM_PESO_LIQUIDO.
      CK_ALTERA_ROMANEIO    = ABAP_TRUE.
      CK_ESTORNA_MIGO_SOBRA = ABAP_TRUE.
    ENDIF.

    DATA: I_NOTA TYPE ZDE_ZSDT0001NT_ALV.

    DATA: LC_DT_ESTORNO TYPE DATUM.
    LC_DT_ESTORNO = AT_CARGA_ORIGINAL->CARGA-DT_MOVIMENTO.

    DESCRIBE TABLE AT_CARGA_ORIGINAL->DOCUMENTO_FISCAL LINES DATA(QTD_FISCAL_ORIGINAL).
    DESCRIBE TABLE ME->DOCUMENTO_FISCAL LINES DATA(QTD_FISCAL_CORRE).

    IF QTD_FISCAL_ORIGINAL NE QTD_FISCAL_CORRE.
      CK_ALTERA_ROMANEIO    = ABAP_TRUE.
      CK_ESTORNA_MIGO       = ABAP_TRUE.
      CK_ESTORNA_MIGO_SOBRA = ABAP_TRUE.
      CK_ESTORNA_MIRO       = ABAP_TRUE.
    ENDIF.

    IF CK_ALTERA_ROMANEIO    EQ ABAP_TRUE OR
       CK_ESTORNA_MIGO       EQ ABAP_TRUE OR
       CK_ESTORNA_MIGO_SOBRA EQ ABAP_TRUE OR
       CK_ESTORNA_MIRO       EQ ABAP_TRUE.

      IF CK_ESTORNA_MIGO EQ ABAP_TRUE OR
         CK_ESTORNA_MIRO EQ ABAP_TRUE.

        "Verificar se as Notas podem ser estornadas """""""""""""""""""""""""""""""""""""""""""""""""
        """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        DATA(NOTAS) = AT_CARGA_ORIGINAL->DOCUMENTO_FISCAL[].
        DELETE NOTAS WHERE DOCNUM IS INITIAL.
        IF NOTAS[] IS NOT INITIAL.
          SELECT * INTO TABLE @DATA(IT_EXPORTACAO)
            FROM ZDOC_NF_PRODUTOR
             FOR ALL ENTRIES IN @NOTAS
           WHERE DOCNUM_PROD EQ @NOTAS-DOCNUM.
        ENDIF.

        IF IT_EXPORTACAO[] IS NOT INITIAL.
          READ TABLE IT_EXPORTACAO INTO DATA(WA_EXPORTACAO) INDEX 1.

          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NF_EXPORTADA-MSGID
                                MSGNO = ZCX_CARGA=>ZCX_NF_EXPORTADA-MSGNO
                                ATTR1 = WA_EXPORTACAO-DOCNUM_PROD
                                ATTR2 = WA_EXPORTACAO-VBELN )
              MSGTY  = 'E'
              MSGID  = ZCX_CARGA=>ZCX_NF_EXPORTADA-MSGID
              MSGNO  = ZCX_CARGA=>ZCX_NF_EXPORTADA-MSGNO
              MSGV1  = CONV #( WA_EXPORTACAO-DOCNUM_PROD )
              MSGV2  = CONV #( WA_EXPORTACAO-VBELN ).
        ENDIF.

        "Verificar Data do Estorno """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        LC_DT_ESTORNO = ZCL_MIRO=>VERIFICAR_CRIAR( I_DATA = LC_DT_ESTORNO I_BUKRS = AT_CARGA_ORIGINAL->CARGA-ID_BUKRS ).
        DATA(LC_USER_JOB) = ZCL_JOB=>GET_USER_JOB( ).
        DATA(LC_DT_RETORNO) = ZCL_MIRO=>GET_MES_PERMITIDO_FECHAMENTO( EXPORTING I_DATA = LC_DT_ESTORNO I_USER =  LC_USER_JOB ).
        IF LC_DT_ESTORNO NE LC_DT_RETORNO.
          LC_DT_ESTORNO = LC_DT_RETORNO(6) && '01'.
        ENDIF.

        LOOP AT ME->DOCUMENTO_FISCAL INTO WA_DOCUMENTO_FISCAL.
          IF LC_DT_ESTORNO LT WA_DOCUMENTO_FISCAL-DT_EMISSAO.
            LC_DT_ESTORNO = WA_DOCUMENTO_FISCAL-DT_EMISSAO.
          ENDIF.
        ENDLOOP.
        """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      ENDIF.

      IF CK_ESTORNA_MIGO_SOBRA EQ ABAP_TRUE.
        AT_CARGA_ORIGINAL->ZIF_CARGA~SET_PROCESSAR_ESTORNO_SOBRA( I_DT_ESTORNO = LC_DT_ESTORNO ).
      ENDIF.

      IF ( CK_ESTORNA_MIGO EQ ABAP_TRUE OR CK_ESTORNA_MIRO EQ ABAP_TRUE ) AND ( WA_ZSDT0001ACB-CK_ENTRADA_ESTORNADA EQ ABAP_FALSE ).

        AT_CARGA_ORIGINAL->ZIF_CARGA~SET_GERAR_ESTORNO_ESTOQUE( I_DT_ESTORNO = LC_DT_ESTORNO
                                  )->SET_PROCESSAR_ESTORNO( IMPORTING E_ESTORNOU = DATA(E_ESTORNOU) ).

        IF E_ESTORNOU EQ ABAP_TRUE.
          UPDATE ZSDT0001ACB
             SET CK_ENTRADA_ESTORNADA = ABAP_TRUE
           WHERE ID_SOLICITACAO = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO.

          COMMIT WORK AND WAIT.
        ENDIF.

      ENDIF.

      "Alterar Carga Original
      AT_CARGA_ORIGINAL->CARGA-ID_ORDEM	                    = ME->CARGA-ID_ORDEM         . "Ordem de Carregamento
      AT_CARGA_ORIGINAL->CARGA-ID_LOCAL_ENTREGA	            = ME->CARGA-ID_LOCAL_ENTREGA . "Id. Local de Entrega
      AT_CARGA_ORIGINAL->CARGA-DT_MOVIMENTO                 = LC_DT_ESTORNO.
      AT_CARGA_ORIGINAL->CARGA-NR_SAFRA                     = ME->CARGA-NR_SAFRA         . "Safra
      AT_CARGA_ORIGINAL->CARGA-ID_BUKRS	                    = ME->CARGA-ID_BUKRS         . "Empresa Recebimento
      AT_CARGA_ORIGINAL->CARGA-ID_BRANCH                    = ME->CARGA-ID_BRANCH        . "Filial de Recebimento
      AT_CARGA_ORIGINAL->CARGA-ID_AGENT_FRETE               = ME->CARGA-ID_AGENT_FRETE   . "Agente de Frete
      AT_CARGA_ORIGINAL->CARGA-ID_LOCAL_COLETA              = ME->CARGA-ID_LOCAL_COLETA  . "Local de Coleta
      AT_CARGA_ORIGINAL->CARGA-ID_LOCAL_DESTINO             = ME->CARGA-ID_LOCAL_DESTINO . "Local de Destino
      AT_CARGA_ORIGINAL->CARGA-ID_LOCAL_DESCARGA            = ME->CARGA-ID_LOCAL_DESCARGA. "Local de Descarga/Transbordo
      AT_CARGA_ORIGINAL->CARGA-TP_FRETE                     = ME->CARGA-TP_FRETE         . "Incoterms
      AT_CARGA_ORIGINAL->CARGA-ID_PRODUTO                   = ME->CARGA-ID_PRODUTO       . "Nº do material
      AT_CARGA_ORIGINAL->CARGA-NM_PESO_BRUTO                = ME->CARGA-NM_PESO_BRUTO    . "Peso Bruto do Caminhão
      AT_CARGA_ORIGINAL->CARGA-NM_PESO_TARA                 = ME->CARGA-NM_PESO_TARA     . "Peso Tara do Caminhão
      AT_CARGA_ORIGINAL->CARGA-NM_PESO_SUBTOTAL             = ME->CARGA-NM_PESO_SUBTOTAL . "Peso SubTotal do Caminhão
      AT_CARGA_ORIGINAL->CARGA-NM_PESO_DESCONTOS            = ME->CARGA-NM_PESO_DESCONTOS. "Peso Descontos
      AT_CARGA_ORIGINAL->CARGA-DS_PLACA_TRATOR              = ME->CARGA-DS_PLACA_TRATOR  . "Placa Veículo Tranção
      AT_CARGA_ORIGINAL->CARGA-DS_PLACA_REBOQ_1             = ME->CARGA-DS_PLACA_REBOQ_1 . "Placa Veículo Reboque 1
      AT_CARGA_ORIGINAL->CARGA-DS_PLACA_REBOQ_2             = ME->CARGA-DS_PLACA_REBOQ_2 . "Placa Veículo Reboque 2
      AT_CARGA_ORIGINAL->CARGA-DS_PLACA_REBOQ_3             = ME->CARGA-DS_PLACA_REBOQ_3 . "Placa Veículo Reboque 3
      AT_CARGA_ORIGINAL->CARGA-ID_PROPRIETARIO              = ME->CARGA-ID_PROPRIETARIO  . "Proprietário do Veículo
      AT_CARGA_ORIGINAL->CARGA-ID_MOTORISTA                 = ME->CARGA-ID_MOTORISTA     . "Motorista
      AT_CARGA_ORIGINAL->CARGA-NR_TICKET                    = ME->CARGA-NR_TICKET        . "Número do Ticket
      AT_CARGA_ORIGINAL->CARGA-IN_TRANSFERENCIA             = ME->CARGA-IN_TRANSFERENCIA . "Indicador de Transferência
      AT_CARGA_ORIGINAL->CARGA-TP_STATUS                    = ME->CARGA-TP_STATUS        . "Status da Carga
      AT_CARGA_ORIGINAL->CARGA-NM_PESO_LIQUIDO              = ME->CARGA-NM_PESO_LIQUIDO  . "Peso Liquido
      AT_CARGA_ORIGINAL->CARGA-CK_GERA_AVISO                = ME->CARGA-CK_GERA_AVISO    . "Gera Aviso de Recebimento

      "Alterar Classificação Original
      AT_CARGA_ORIGINAL->CLASSIFICACAO-NR_RESULTADO_01      = ME->CLASSIFICACAO-NR_RESULTADO_01.
      AT_CARGA_ORIGINAL->CLASSIFICACAO-NR_RESULTADO_02      = ME->CLASSIFICACAO-NR_RESULTADO_02.
      AT_CARGA_ORIGINAL->CLASSIFICACAO-NR_RES_RR1_RR2       = ME->CLASSIFICACAO-NR_RES_RR1_RR2.
      AT_CARGA_ORIGINAL->CLASSIFICACAO-IN_GMO_03            = ME->CLASSIFICACAO-IN_GMO_03.
      AT_CARGA_ORIGINAL->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC.
      AT_CARGA_ORIGINAL->CLASSIFICACAO-ID_OUTRO_PARTIC      = ME->CLASSIFICACAO-ID_OUTRO_PARTIC.
      AT_CARGA_ORIGINAL->CLASSIFICACAO-IN_SRR_DECLARADO     = ME->CLASSIFICACAO-IN_SRR_DECLARADO.
      AT_CARGA_ORIGINAL->CLASSIFICACAO-IN_TESTE_SRR         = ME->CLASSIFICACAO-IN_TESTE_SRR.
      AT_CARGA_ORIGINAL->CLASSIFICACAO-IN_SRR_DECLARADO_2   = ME->CLASSIFICACAO-IN_SRR_DECLARADO_2.
      AT_CARGA_ORIGINAL->CLASSIFICACAO-IN_TESTE_SRR_2       = ME->CLASSIFICACAO-IN_TESTE_SRR_2.
      AT_CARGA_ORIGINAL->CLASSIFICACAO-ID_CLASSIFICADORA    = ME->CLASSIFICACAO-ID_CLASSIFICADORA.
      AT_CARGA_ORIGINAL->CLASSIFICACAO-TP_TRANSGENIA        = ME->CLASSIFICACAO-TP_TRANSGENIA.

      "Alterar Ordem de Venda Original
      LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM_VENDA).

        READ TABLE AT_CARGA_ORIGINAL->ZIF_CARGA~ORDEM_VENDA
         ASSIGNING FIELD-SYMBOL(<FS_ORDEM>)
          WITH KEY ID_CARGA = WA_ORDEM_VENDA-ID_CARGA
                   NR_ORDEM_VENDA = WA_ORDEM_VENDA-NR_ORDEM_VENDA.

        MOVE-CORRESPONDING WA_ORDEM_VENDA TO <FS_ORDEM>.
      ENDLOOP.

      CLEAR: AT_CARGA_ORIGINAL->RESULTADO[].

      "Atribui Classificação Aprovada a Carga Original
      AT_CARGA_ORIGINAL->RESULTADO[] = ME->RESULTADO[].
      LOOP AT AT_CARGA_ORIGINAL->RESULTADO ASSIGNING FIELD-SYMBOL(<FS_RESULTADO>) WHERE ID_CLASSIFICACAO = ME->CLASSIFICACAO-ID_CLASSIFICACAO.
        "Manter Id Classificação do Registro Antigo
        <FS_RESULTADO>-ID_CLASSIFICACAO = AT_CARGA_ORIGINAL->CLASSIFICACAO-ID_CLASSIFICACAO.
      ENDLOOP.

      CLEAR: AT_CARGA_ORIGINAL->ZIF_CARGA~RESULTADO_AVARIADO[].
      "Atribui Classificação Aprovada a Carga Original
      AT_CARGA_ORIGINAL->ZIF_CARGA~RESULTADO_AVARIADO[] = ME->ZIF_CARGA~RESULTADO_AVARIADO[].
      LOOP AT AT_CARGA_ORIGINAL->ZIF_CARGA~RESULTADO_AVARIADO ASSIGNING FIELD-SYMBOL(<FS_RESULTADO_AVA>) WHERE ID_CLASSIFICACAO = ME->CLASSIFICACAO-ID_CLASSIFICACAO.
        "Manter Id Classificação do Registro Antigo
        <FS_RESULTADO_AVA>-ID_CLASSIFICACAO = AT_CARGA_ORIGINAL->CLASSIFICACAO-ID_CLASSIFICACAO.
      ENDLOOP.

      "Percorre notas da manutenção
      LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(DOC_FISCAL).

        "Percorre os resultados das notas da manutenção
        LOOP AT AT_CARGA_ORIGINAL->RESULTADO ASSIGNING FIELD-SYMBOL(<FS_RESULTADO_NOTA>) WHERE ID_CLASSIFICACAO = DOC_FISCAL-ID_CLASSIFICACAO.

          "Busca o Documento do Original Equivalente
          READ TABLE AT_CARGA_ORIGINAL->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_NOTA>)
            WITH KEY ID_CARGA = DOC_FISCAL-ID_CARGA
                     ID_NOTA  = DOC_FISCAL-ID_NOTA.
          IF SY-SUBRC IS INITIAL.
            <FS_NOTA>-ID_CLASSIFICACAO = <FS_RESULTADO_NOTA>-ID_CLASSIFICACAO.
          ENDIF.
        ENDLOOP.

      ENDLOOP.

      "Alterar Nota Fiscal Original """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

      "Nota fiscal da Manutenção, se não existir adiciona
      LOOP AT ME->DOCUMENTO_FISCAL INTO WA_DOCUMENTO_FISCAL.
        "Nota Fiscal Original
        READ TABLE AT_CARGA_ORIGINAL->DOCUMENTO_FISCAL INTO DATA(WA_NOTA_ORIGINAL)
         WITH KEY ID_CARGA = WA_DOCUMENTO_FISCAL-ID_CARGA
                  ID_NOTA  = WA_DOCUMENTO_FISCAL-ID_NOTA.

        CLEAR: I_NOTA.
        IF SY-SUBRC IS NOT INITIAL.
          MOVE-CORRESPONDING WA_DOCUMENTO_FISCAL TO I_NOTA.
          CLEAR: I_NOTA-ID_NOTA.
          CK_ESTORNA_MIGO = ABAP_TRUE.
          CK_ESTORNA_MIRO = ABAP_TRUE.
        ELSE.
          MOVE-CORRESPONDING WA_NOTA_ORIGINAL TO I_NOTA.
          I_NOTA-ID_ENTRADA          = WA_DOCUMENTO_FISCAL-ID_ENTRADA.
          I_NOTA-ID_MOD_FISCAL       = WA_DOCUMENTO_FISCAL-ID_MOD_FISCAL.
          I_NOTA-ID_FORNECEDOR       = WA_DOCUMENTO_FISCAL-ID_FORNECEDOR.
          I_NOTA-NR_FORNECEDOR_IE    = WA_DOCUMENTO_FISCAL-NR_FORNECEDOR_IE.
          I_NOTA-NR_NOTA             = WA_DOCUMENTO_FISCAL-NR_NOTA.
          I_NOTA-NM_SERIE            = WA_DOCUMENTO_FISCAL-NM_SERIE.
          I_NOTA-DT_EMISSAO          = WA_DOCUMENTO_FISCAL-DT_EMISSAO.
          I_NOTA-NR_CHAVE_NFE        = WA_DOCUMENTO_FISCAL-NR_CHAVE_NFE.
          I_NOTA-NR_QUANTIDADE       = WA_DOCUMENTO_FISCAL-NR_QUANTIDADE.
          I_NOTA-NR_VALOR            = WA_DOCUMENTO_FISCAL-NR_VALOR.
          I_NOTA-DT_VENCIMENTO_FORM  = WA_DOCUMENTO_FISCAL-DT_VENCIMENTO_FORM.
          I_NOTA-NR_PRECO_SACA_60    = WA_DOCUMENTO_FISCAL-NR_PRECO_SACA_60.
          I_NOTA-OBJ_KEY_ENTRADA     = WA_DOCUMENTO_FISCAL-OBJ_KEY_ENTRADA.
          I_NOTA-NM_PESO_SUBTOTAL    = WA_DOCUMENTO_FISCAL-NM_PESO_SUBTOTAL.
          I_NOTA-NM_PESO_LIQUIDO     = WA_DOCUMENTO_FISCAL-NM_PESO_LIQUIDO.
          I_NOTA-ID_CLASSIFICACAO    = WA_NOTA_ORIGINAL-ID_CLASSIFICACAO.
          I_NOTA-CFOP                = WA_DOCUMENTO_FISCAL-CFOP.
          I_NOTA-ID_ENTREGUE_POR     = WA_DOCUMENTO_FISCAL-ID_ENTREGUE_POR.
          I_NOTA-DS_OBSERVACAO       = WA_DOCUMENTO_FISCAL-DS_OBSERVACAO.
        ENDIF.
        AT_CARGA_ORIGINAL->ADD_NOTA_FISCAL( EXPORTING I_NOTA = I_NOTA ).
      ENDLOOP.

      "Remover Nota Fiscal e Cancelar Romaneio de Entrada 'Avulso'

      LOOP AT AT_CARGA_ORIGINAL->DOCUMENTO_FISCAL INTO WA_NOTA_ORIGINAL.
        READ TABLE ME->DOCUMENTO_FISCAL TRANSPORTING NO FIELDS
          WITH KEY ID_CARGA = WA_NOTA_ORIGINAL-ID_CARGA
                   ID_NOTA  = WA_NOTA_ORIGINAL-ID_NOTA.

        IF SY-SUBRC IS NOT INITIAL.
          APPEND WA_NOTA_ORIGINAL TO LC_NOTAS_REMOVIDAS.
        ENDIF.
      ENDLOOP.

      LOOP AT LC_NOTAS_REMOVIDAS INTO WA_NOTA_ORIGINAL.
        IF WA_NOTA_ORIGINAL-CH_REFERENCIA_ENT IS NOT INITIAL.
          ZCL_ROMANEIO=>SET_CANCELAR_ROMANEIO( WA_NOTA_ORIGINAL-CH_REFERENCIA_ENT ).
        ENDIF.
        CLEAR: I_NOTA.
        MOVE-CORRESPONDING WA_NOTA_ORIGINAL TO I_NOTA.
        AT_CARGA_ORIGINAL->EXCLUIR_NOTA_FISCAL( EXPORTING I_NOTA = I_NOTA ).
      ENDLOOP.

      "Alterar Peso Conferido da Nota Fiscal Original
      LOOP AT ME->DOCUMENTO_FISCAL INTO WA_DOCUMENTO_FISCAL.

        READ TABLE AT_CARGA_ORIGINAL->DOCUMENTO_FISCAL INTO WA_NOTA_ORIGINAL
         WITH KEY ID_CARGA = WA_DOCUMENTO_FISCAL-ID_CARGA
                  ID_NOTA  = WA_DOCUMENTO_FISCAL-ID_NOTA.

        AT_CARGA_ORIGINAL->SET_PESOS_NOTAS(
          EXPORTING
            I_ID_CARGA      = WA_NOTA_ORIGINAL-ID_CARGA            " Id. da Carga
            I_ID_NOTA       = WA_NOTA_ORIGINAL-ID_NOTA             " Id. Nota Fiscal
            I_PESO_SUBTOTAL = WA_DOCUMENTO_FISCAL-NM_PESO_SUBTOTAL " Peso SubTotal do Caminhão
            I_PESO_LIQUIDO  = WA_DOCUMENTO_FISCAL-NM_PESO_LIQUIDO  " Peso Líquido
        ).
      ENDLOOP.

    ENDIF.

    IF CK_ESTORNA_MIGO       EQ ABAP_TRUE OR
       CK_ESTORNA_MIGO_SOBRA EQ ABAP_TRUE OR
       CK_ESTORNA_MIRO       EQ ABAP_TRUE.

      AT_CARGA_ORIGINAL->SET_CONFERIDO( IMPORTING E_CONFERIU = DATA(E_CONFERIU) ).

      IF E_CONFERIU EQ ABAP_FALSE.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO DATA(I_TEXTO).
        ME->ZIF_CARGA~GERA_ERRO_GERAL( EXPORTING I_TEXTO = I_TEXTO ).
      ENDIF.

    ELSE.

      AT_CARGA_ORIGINAL->ZIF_CARGA~SET_GERAR_ROMANEIO_ENTRADA(
       )->SET_GERAR_ROMANEIO_SAIDA(
       )->SEND_CARGA_TO_OPUS(
       ).

      AT_CARGA_ORIGINAL->CK_ALTEROU = ABAP_TRUE.
      AT_CARGA_ORIGINAL->GRAVAR_REGISTRO( ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_PROCESSAR_SOBRA_FOB.

    R_INSTANCE = ME.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.

    "Verificar se é entrada FOB
    CHECK ME->CARGA-TP_FRETE EQ ZIF_CARGA=>ST_TP_FRETE_FOB.

    CHECK NOT ( ME->CARGA-CK_ENVIADO_OPUS EQ ABAP_TRUE AND ME->CARGA-CK_RECEBIDO_OPUS EQ ABAP_FALSE ).

    ME->ZIF_CARGA~GET_CK_GERA_SOBRA( IMPORTING E_ZMMT0074 = DATA(E_ZMMT0074) ).

    CHECK E_ZMMT0074 IS NOT INITIAL.

    DATA: NUMBER           TYPE TBTCJOB-JOBCOUNT,
          NAME             TYPE TBTCJOB-JOBNAME,
          PRINT_PARAMETERS TYPE PRI_PARAMS.

    DATA(LC_USER_JOB) = ZCL_JOB=>GET_USER_JOB( ).

    LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<ENTRADA>) WHERE OBJ_KEY_ENTRADA IS NOT INITIAL.

      CHECK <ENTRADA>-NM_PESO_LIQUIDO <> <ENTRADA>-NM_PESO_SUBTOTAL.

      SELECT SINGLE * INTO @DATA(WA_DOCUMENTOS)
        FROM ZMMT_EE_ZGR_DOCS
       WHERE OBJ_KEY EQ @<ENTRADA>-OBJ_KEY_ENTRADA.

      IF SY-SUBRC IS INITIAL AND
         WA_DOCUMENTOS-MM_MBLNR_SOBRA IS NOT INITIAL AND
         WA_DOCUMENTOS-MM_MJAHR_SOBRA IS NOT INITIAL.
        <ENTRADA>-MM_MBLNR_SOBRA = WA_DOCUMENTOS-MM_MBLNR_SOBRA.
        <ENTRADA>-MM_MJAHR_SOBRA = WA_DOCUMENTOS-MM_MJAHR_SOBRA.
        CONTINUE.
      ENDIF.

      IF 1 EQ 2.
        SUBMIT ZMMR130 WITH POBJKEY EQ <ENTRADA>-OBJ_KEY_ENTRADA AND RETURN.
      ELSE.
        CONCATENATE 'JOB_SOBRA' ME->CARGA-ID_CARGA INTO NAME SEPARATED BY '_'.

        CALL FUNCTION 'JOB_OPEN'
          EXPORTING
            JOBNAME          = NAME
          IMPORTING
            JOBCOUNT         = NUMBER
          EXCEPTIONS
            CANT_CREATE_JOB  = 1
            INVALID_JOB_DATA = 2
            JOBNAME_MISSING  = 3
            OTHERS           = 4.

        IF SY-SUBRC = 0.

          DATA(LC_QTD_SOBRA) = <ENTRADA>-NM_PESO_SUBTOTAL - <ENTRADA>-NM_PESO_LIQUIDO.

          DATA(LC_DT_ENTRADA) = ZCL_MIRO=>VERIFICAR_CRIAR( I_DATA = ME->CARGA-DT_MOVIMENTO I_BUKRS = ME->CARGA-ID_BUKRS ).

          DATA(LC_DT_RETORNO) = ZCL_MIRO=>GET_MES_PERMITIDO_FECHAMENTO( EXPORTING I_DATA = LC_DT_ENTRADA I_USER =  LC_USER_JOB ).
          IF LC_DT_ENTRADA NE LC_DT_RETORNO.
            LC_DT_ENTRADA = LC_DT_RETORNO(6) && '01'.
          ENDIF.

          SUBMIT ZMMR130 TO SAP-SPOOL SPOOL PARAMETERS PRINT_PARAMETERS WITHOUT SPOOL DYNPRO VIA JOB NAME NUMBER NUMBER
            WITH POBJKEY  EQ <ENTRADA>-OBJ_KEY_ENTRADA
            WITH PQUANTI  EQ LC_QTD_SOBRA
            WITH DTENTRAD EQ LC_DT_ENTRADA
            USER LC_USER_JOB
             AND RETURN.

          IF SY-SUBRC = 0.
            CALL FUNCTION 'JOB_CLOSE'
              EXPORTING
                JOBCOUNT             = NUMBER
                JOBNAME              = NAME
                STRTIMMED            = 'X'
              EXCEPTIONS
                CANT_START_IMMEDIATE = 1
                INVALID_STARTDATE    = 2
                JOBNAME_MISSING      = 3
                JOB_CLOSE_FAILED     = 4
                JOB_NOSTEPS          = 5
                JOB_NOTEX            = 6
                LOCK_FAILED          = 7
                OTHERS               = 8.
          ENDIF.
        ENDIF.

        "Aguardar execução do job
        ZCL_JOB=>GET_INSTANCE(
         )->SET_KEY_JOB( I_JOBNAME = NAME I_JOBCOUNT = NUMBER
         )->GET_WAIT_JOB_EXEC(
         )->GET_LOG_JOB( IMPORTING E_LOGS = DATA(E_LOGS)
         ).
      ENDIF.
      SELECT SINGLE * INTO WA_DOCUMENTOS
        FROM ZMMT_EE_ZGR_DOCS
       WHERE OBJ_KEY EQ <ENTRADA>-OBJ_KEY_ENTRADA.

      IF SY-SUBRC IS INITIAL AND
         WA_DOCUMENTOS-MM_MBLNR_SOBRA IS NOT INITIAL AND
         WA_DOCUMENTOS-MM_MJAHR_SOBRA IS NOT INITIAL.
        <ENTRADA>-MM_MBLNR_SOBRA = WA_DOCUMENTOS-MM_MBLNR_SOBRA.
        <ENTRADA>-MM_MJAHR_SOBRA = WA_DOCUMENTOS-MM_MJAHR_SOBRA.
        ME->CK_ALTEROU = ABAP_TRUE.
      ELSE.

        READ TABLE E_LOGS WITH KEY MSGTYPE = 'E' INTO DATA(WA_LOGS).
        IF SY-SUBRC IS INITIAL.
          MESSAGE ID WA_LOGS-MSGID TYPE 'S' NUMBER WA_LOGS-MSGNO WITH WA_LOGS-MSGV1 WA_LOGS-MSGV2 WA_LOGS-MSGV3 WA_LOGS-MSGV4 INTO DATA(I_TEXTO).
          ME->GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).
        ENDIF.

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NAO_GEROU_SOBRA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_NAO_GEROU_SOBRA-MSGNO
                              ATTR1 = CONV #( WA_DOCUMENTOS-DOCNUM ) )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_NAO_GEROU_SOBRA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_NAO_GEROU_SOBRA-MSGNO
            MSGV1  = CONV #( WA_DOCUMENTOS-DOCNUM ).
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


  method zif_carga~set_registro.

    r_carga = me.

    me->limpar_registro( ).

    if me->carga-id_carga is not initial and i_no_enqueue eq abap_false.
      me->set_denqueue( i_carga = me->carga-id_carga ).
    endif.

    me->zif_carga~get_cabecalho_carga( exporting i_id_carga = i_id_carga importing e_zsdt0001cg = me->carga ).

*    SELECT SINGLE * INTO ME->CLASSIFICACAO FROM ZSDT0001CL WHERE ID_CARGA EQ I_ID_CARGA.
    "US 143677 - transgenia por nota pega a classificacao da nota 1
    select single * into me->classificacao from zsdt0001cl where id_carga eq i_id_carga and id_classificacao = me->carga-id_classificacao.
    if sy-subrc ne 0.
      select single * into me->classificacao from zsdt0001cl where id_carga eq i_id_carga.
    endif.

    select * into table me->zif_carga~ordem_venda from zsdt0001ov where id_carga eq i_id_carga.
    select * into table me->zif_carga~pedido_compra from zsdt0001ek where id_carga eq i_id_carga.
    select * into table me->resultado from zsdt0001rs where id_carga eq i_id_carga and id_classificacao eq me->carga-id_classificacao.
    select * into table me->zif_carga~resultado_avariado from zsdt0001rs_03 where id_carga eq i_id_carga and id_classificacao eq me->carga-id_classificacao.
    select * into table me->documento_fiscal from zsdt0001nt where id_carga eq i_id_carga.
    select * into table me->documento_fiscal_imp_ret from zsdt0001nt_ret where id_carga eq i_id_carga.
    select * into table me->zif_carga~take_up from zsdt0001tk where id_carga eq i_id_carga.
    select * into table me->zif_carga~blocos from zsdt0001fd where id_carga eq i_id_carga.

    select * into table @data(it_zsdt0001acg)
      from zsdt0001acg
     where id_carga_origem eq @me->carga-id_carga.

    if sy-subrc is initial.
      select * into table me->zif_carga~solicitacoes
        from zsdt0001acb
         for all entries in it_zsdt0001acg
       where id_solicitacao eq it_zsdt0001acg-id_solicitacao.
    endif.

    select * appending table me->resultado
      from zsdt0001rs
       for all entries in me->documento_fiscal
     where id_carga         eq me->documento_fiscal-id_carga
       and id_classificacao eq me->documento_fiscal-id_classificacao.

    sort me->resultado by id_carga id_classificacao tp_caracteristica.
    delete adjacent duplicates from me->resultado comparing id_carga id_classificacao tp_caracteristica.

    select * appending table me->zif_carga~resultado_avariado
      from zsdt0001rs_03
       for all entries in me->documento_fiscal
     where id_carga         eq me->documento_fiscal-id_carga
       and id_classificacao eq me->documento_fiscal-id_classificacao.

    sort me->zif_carga~resultado_avariado by id_carga id_classificacao tp_sub_carac_avariado.
    delete adjacent duplicates from me->zif_carga~resultado_avariado comparing id_carga id_classificacao tp_sub_carac_avariado.

    select * into table me->classificacao_notas
      from zsdt0001cl
      for all entries in me->documento_fiscal
     where id_carga         eq i_id_carga
       and id_classificacao eq me->documento_fiscal-id_classificacao
       and id_classificacao ne me->carga-id_classificacao.

    sort me->classificacao_notas by id_carga id_classificacao.
    delete adjacent duplicates from me->classificacao_notas comparing id_carga id_classificacao.

    if i_no_enqueue eq abap_false.
      me->set_enqueue( i_carga = me->carga-id_carga ).
    endif.

    me->zif_carga~set_tipo_frete_ordem_venda( ).

    me->ck_alterou = abap_false.
    me->zif_carga~ck_digitado_umidade    = abap_true.
    me->zif_carga~ck_digitado_impureza   = abap_true.
    me->zif_carga~ck_digitado_ardido     = abap_true.
    me->zif_carga~ck_digitado_avariado   = abap_true.
    me->zif_carga~ck_digitado_quebrado   = abap_true.
    me->zif_carga~ck_digitado_esverdeado = abap_true.
    me->zif_carga~ck_digitado_carunchado = abap_true.

  endmethod.


  METHOD ZIF_CARGA~SET_REGISTRO_MANUTENCAO.

    DATA: WA_ORDEM         LIKE LINE OF ME->ZIF_CARGA~ORDEM_VENDA,
          WA_PEDIDO        LIKE LINE OF ME->ZIF_CARGA~PEDIDO_COMPRA,
          WA_RESULTADO     LIKE LINE OF ME->ZIF_CARGA~RESULTADO,
          WA_RESULTADO_03  LIKE LINE OF ME->ZIF_CARGA~RESULTADO_AVARIADO,
          WA_DOCUMENTO     LIKE LINE OF ME->DOCUMENTO_FISCAL,
          WA_TAKEUP        LIKE LINE OF ME->ZIF_CARGA~TAKE_UP,
          WA_BLOCO         LIKE LINE OF ME->ZIF_CARGA~BLOCOS,
          WA_DOCUMENTO_RET LIKE LINE OF ME->DOCUMENTO_FISCAL_IMP_RET,
          WA_CLASS         LIKE LINE OF ME->CLASSIFICACAO_NOTAS.

    R_CARGA = ME.

    ME->LIMPAR_REGISTRO( ).

    "Busca Solicitação
    SELECT SINGLE *
      INTO ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO
      FROM ZSDT0001ACB
     WHERE ID_SOLICITACAO EQ I_ID_SOLICITACAO.

    "Busca Carga da Solicitação
    SELECT SINGLE *
      INTO @DATA(WA_ZSDT0001ACG)
      FROM ZSDT0001ACG
     WHERE ID_SOLICITACAO EQ @I_ID_SOLICITACAO.

    IF WA_ZSDT0001ACG-ID_CARGA_ORIGEM IS NOT INITIAL.
      ME->SET_DENQUEUE( I_CARGA = WA_ZSDT0001ACG-ID_CARGA_ORIGEM ).
    ENDIF.

    "Busca Classificação da Carga
    SELECT SINGLE * INTO @DATA(WA_ZSDT0001ACL)
      FROM ZSDT0001ACL
     WHERE ID_SOLICITACAO  EQ @WA_ZSDT0001ACG-ID_SOLICITACAO
       AND ID_CARGA_ORIGEM EQ @WA_ZSDT0001ACG-ID_CARGA_ORIGEM.

    "Busca Ordens de Venda da Carga
    SELECT * INTO TABLE @DATA(IT_ZSDT0001AOV)
      FROM ZSDT0001AOV
     WHERE ID_SOLICITACAO  EQ @WA_ZSDT0001ACG-ID_SOLICITACAO
       AND ID_CARGA_ORIGEM EQ @WA_ZSDT0001ACG-ID_CARGA_ORIGEM.

    "Busca Pedidos de Compra da Carga
    SELECT * INTO TABLE @DATA(IT_ZSDT0001AEK)
      FROM ZSDT0001AEK
     WHERE ID_SOLICITACAO  EQ @WA_ZSDT0001ACG-ID_SOLICITACAO
       AND ID_CARGA_ORIGEM EQ @WA_ZSDT0001ACG-ID_CARGA_ORIGEM.

    "Busca Resultado de Classificação da Carga
    SELECT * INTO TABLE @DATA(IT_ZSDT0001ARS)
      FROM ZSDT0001ARS
     WHERE ID_SOLICITACAO   EQ @I_ID_SOLICITACAO
       AND ID_CARGA_ORIGEM  EQ @WA_ZSDT0001ACG-ID_CARGA_ORIGEM
       AND ID_CLASSIFICACAO EQ @WA_ZSDT0001ACG-ID_CLASSIFICACAO.

    "Busca Resultado da Sub Classificação do Avariado
    SELECT * INTO TABLE @DATA(IT_ZSDT0001ARS_03)
      FROM ZSDT0001ARS_03
     WHERE ID_SOLICITACAO   EQ @I_ID_SOLICITACAO
       AND ID_CARGA_ORIGEM  EQ @WA_ZSDT0001ACG-ID_CARGA_ORIGEM
       AND ID_CLASSIFICACAO EQ @WA_ZSDT0001ACG-ID_CLASSIFICACAO.

    "Busca Notas da Carga
    SELECT * INTO TABLE @DATA(IT_ZSDT0001ANT)
      FROM ZSDT0001ANT
     WHERE ID_SOLICITACAO  EQ @WA_ZSDT0001ACG-ID_SOLICITACAO
       AND ID_CARGA_ORIGEM EQ @WA_ZSDT0001ACG-ID_CARGA_ORIGEM.

    "Busca Take UP's da Notas da Carga
    SELECT * INTO TABLE @DATA(IT_ZSDT0001ATK)
      FROM ZSDT0001ATK
     WHERE ID_SOLICITACAO  EQ @WA_ZSDT0001ACG-ID_SOLICITACAO
       AND ID_CARGA_ORIGEM EQ @WA_ZSDT0001ACG-ID_CARGA_ORIGEM.

    "Busca Notas da Carga - Impostos Retidos
    SELECT * INTO TABLE @DATA(IT_ZSDT0001ANT_RET)
      FROM ZSDT0001ANT
     WHERE ID_SOLICITACAO  EQ @WA_ZSDT0001ACG-ID_SOLICITACAO
       AND ID_CARGA_ORIGEM EQ @WA_ZSDT0001ACG-ID_CARGA_ORIGEM.

    "Busca Resultado de Classificação das Notas
    SELECT * APPENDING TABLE IT_ZSDT0001ARS
      FROM ZSDT0001ARS
       FOR ALL ENTRIES IN IT_ZSDT0001ANT
     WHERE ID_SOLICITACAO   EQ IT_ZSDT0001ANT-ID_SOLICITACAO
       AND ID_CARGA_ORIGEM  EQ IT_ZSDT0001ANT-ID_CARGA_ORIGEM
       AND ID_CLASSIFICACAO EQ IT_ZSDT0001ANT-ID_CLASSIFICACAO.

    SELECT * INTO TABLE @DATA(IT_ZSDT0001ACL)
      FROM ZSDT0001ACL
      FOR ALL ENTRIES IN @IT_ZSDT0001ANT
     WHERE ID_CARGA_ORIGEM  EQ @IT_ZSDT0001ANT-ID_CARGA_ORIGEM
       AND ID_CLASSIFICACAO EQ @IT_ZSDT0001ANT-ID_CLASSIFICACAO
       AND ID_CLASSIFICACAO NE @WA_ZSDT0001ACG-ID_CLASSIFICACAO.

    "Busca Blocos da Ordem de Venda
    SELECT * INTO TABLE @DATA(IT_ZSDT0001AFD)
      FROM ZSDT0001AFD
     WHERE ID_SOLICITACAO  EQ @WA_ZSDT0001ACG-ID_SOLICITACAO
       AND ID_CARGA_ORIGEM EQ @WA_ZSDT0001ACG-ID_CARGA_ORIGEM.

    "Copia Carga
    MOVE-CORRESPONDING WA_ZSDT0001ACG TO ME->CARGA.
    ME->CARGA-ID_CARGA = WA_ZSDT0001ACG-ID_CARGA_ORIGEM.

    "Copia Classificação
    MOVE-CORRESPONDING WA_ZSDT0001ACL TO ME->CLASSIFICACAO.
    ME->CLASSIFICACAO-ID_CARGA = WA_ZSDT0001ACG-ID_CARGA_ORIGEM.

    "Copia Ordem de Venda
    LOOP AT IT_ZSDT0001AOV INTO DATA(WA_ZSDT0001AOV).
      CLEAR WA_ORDEM.
      MOVE-CORRESPONDING WA_ZSDT0001AOV TO WA_ORDEM.
      WA_ORDEM-ID_CARGA = WA_ZSDT0001ACG-ID_CARGA_ORIGEM.
      APPEND WA_ORDEM TO ME->ZIF_CARGA~ORDEM_VENDA.
    ENDLOOP.

    "Copia Pedido de Compra
    LOOP AT IT_ZSDT0001AEK INTO DATA(WA_ZSDT0001AEK).
      CLEAR WA_PEDIDO.
      MOVE-CORRESPONDING WA_ZSDT0001AEK TO WA_PEDIDO.
      WA_PEDIDO-ID_CARGA = WA_ZSDT0001ACG-ID_CARGA_ORIGEM.
      APPEND WA_PEDIDO TO ME->ZIF_CARGA~PEDIDO_COMPRA.
    ENDLOOP.

    "Copia de Resultados de Classificação
    LOOP AT IT_ZSDT0001ARS INTO DATA(WA_ZSDT0001ARS).
      CLEAR WA_RESULTADO.
      MOVE-CORRESPONDING WA_ZSDT0001ARS TO WA_RESULTADO.
      WA_RESULTADO-ID_CARGA = WA_ZSDT0001ACG-ID_CARGA_ORIGEM.
      APPEND WA_RESULTADO TO ME->ZIF_CARGA~RESULTADO.
    ENDLOOP.

    "Copia de Resultados de Sub Classificação Avariado
    LOOP AT IT_ZSDT0001ARS_03 INTO DATA(WA_ZSDT0001ARS_03).
      CLEAR WA_RESULTADO_03.
      MOVE-CORRESPONDING WA_ZSDT0001ARS_03 TO WA_RESULTADO_03.
      WA_RESULTADO_03-ID_CARGA = WA_ZSDT0001ACG-ID_CARGA_ORIGEM.
      APPEND WA_RESULTADO_03 TO ME->ZIF_CARGA~RESULTADO_AVARIADO.
    ENDLOOP.

    "Copia de Notas
    LOOP AT IT_ZSDT0001ANT INTO DATA(WA_ZSDT0001ANT).
      CLEAR WA_DOCUMENTO.
      MOVE-CORRESPONDING WA_ZSDT0001ANT TO WA_DOCUMENTO.
      WA_DOCUMENTO-ID_CARGA = WA_ZSDT0001ANT-ID_CARGA_ORIGEM.
      WA_DOCUMENTO-ID_NOTA  = WA_ZSDT0001ANT-ID_NOTA_ORIGEM.
      APPEND WA_DOCUMENTO TO ME->DOCUMENTO_FISCAL.
    ENDLOOP.

    "Copia Taku UP's das Notas
    LOOP AT IT_ZSDT0001ATK INTO DATA(WA_ZSDT0001ATK).
      CLEAR: WA_TAKEUP.
      MOVE-CORRESPONDING WA_ZSDT0001ATK TO WA_TAKEUP.
      WA_TAKEUP-ID_CARGA  = WA_ZSDT0001ATK-ID_CARGA_ORIGEM.
      WA_TAKEUP-ID_NOTA   = WA_ZSDT0001ATK-ID_NOTA_ORIGEM.
      WA_TAKEUP-ID_TAKEUP = WA_ZSDT0001ATK-ID_TAKEUP_ORIGEM.
      APPEND WA_TAKEUP TO ME->ZIF_CARGA~TAKE_UP.
    ENDLOOP.

    "Copia Blocos das Ordem de Venda / Pedidos de Compra
    LOOP AT IT_ZSDT0001AFD INTO DATA(WA_ZSDT0001AFD).
      CLEAR: WA_BLOCO.
      MOVE-CORRESPONDING WA_ZSDT0001AFD TO WA_BLOCO.
      WA_BLOCO-ID_CARGA  = WA_ZSDT0001AFD-ID_CARGA_ORIGEM.
      APPEND WA_BLOCO TO ME->ZIF_CARGA~BLOCOS.
    ENDLOOP.

    "Copia Impostos da Notas
    LOOP AT IT_ZSDT0001ANT_RET INTO DATA(WA_ZSDT0001ANT_RET).
      CLEAR: WA_DOCUMENTO_RET.
      MOVE-CORRESPONDING WA_ZSDT0001ANT_RET TO WA_DOCUMENTO_RET.
      WA_DOCUMENTO_RET-ID_CARGA = WA_ZSDT0001ANT_RET-ID_CARGA_ORIGEM.
      WA_DOCUMENTO_RET-ID_NOTA  = WA_ZSDT0001ANT_RET-ID_NOTA_ORIGEM.
      APPEND WA_DOCUMENTO_RET TO ME->DOCUMENTO_FISCAL_IMP_RET.
    ENDLOOP.

    "Copia de Classificação
    LOOP AT IT_ZSDT0001ACL INTO WA_ZSDT0001ACL.
      CLEAR: WA_CLASS.
      MOVE-CORRESPONDING WA_ZSDT0001ACL TO WA_CLASS.
      WA_CLASS-ID_CARGA = WA_ZSDT0001ACG-ID_CARGA_ORIGEM.
      APPEND WA_CLASS TO ME->CLASSIFICACAO_NOTAS.
    ENDLOOP.

    ME->ZIF_CARGA~AT_MANUTENCAO = ABAP_TRUE.

    ME->ZIF_CARGA~SET_TIPO_FRETE_ORDEM_VENDA( ).

    ME->CK_ALTEROU = ABAP_FALSE.
    ME->ZIF_CARGA~CK_DIGITADO_UMIDADE    = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_IMPUREZA   = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_ARDIDO     = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_AVARIADO   = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_QUEBRADO   = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_ESVERDEADO = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_CARUNCHADO = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_TIPO_FRETE_ORDEM_VENDA.

    DATA: I_TEXTO TYPE STRING.

    DESCRIBE TABLE ME->ZIF_CARGA~ORDEM_VENDA LINES DATA(QT_ORDEM).

    "Pedido de Compra
    LOOP AT ME->ZIF_CARGA~PEDIDO_COMPRA INTO DATA(WA_PEDIDO).
      TRY .
          ME->ZIF_CARGA~GET_INFO_PEDIDO_COMPRA( EXPORTING I_PEDIDO_COMPRA = WA_PEDIDO-NR_PEDIDO_COMPRA IMPORTING E_PEDIDO = DATA(E_PEDIDO) ).
          ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA = E_PEDIDO-DS_TIPO_FRETE.
        CATCH ZCX_CARGA INTO DATA(ZCX_CARGA).
          IF QT_ORDEM EQ 0.
            MESSAGE ID ZCX_CARGA->MSGID TYPE 'S' NUMBER ZCX_CARGA->MSGNO WITH ZCX_CARGA->MSGV1 ZCX_CARGA->MSGV2 ZCX_CARGA->MSGV3 ZCX_CARGA->MSGV4 INTO I_TEXTO.
            ME->GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).
          ENDIF.
      ENDTRY.
    ENDLOOP.

    "Ordem de Venda
    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM_VENDA).
      TRY .
          ZCL_ORDEM_VENDA=>ZIF_ORDEM_VENDA~GET_INSTANCE(
                   )->SET_ORDEM_VENDA( I_VBELN = WA_ORDEM_VENDA-NR_ORDEM_VENDA
                   )->GET_TIPO_FRETE( IMPORTING  E_TIPO_FRETE = ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA
                   ).

        CATCH ZCX_ORDEM_VENDA INTO DATA(EX_ORDEM_VENDA).
          MESSAGE ID EX_ORDEM_VENDA->MSGID TYPE 'S'
           NUMBER EX_ORDEM_VENDA->MSGNO
             WITH EX_ORDEM_VENDA->MSGV1 EX_ORDEM_VENDA->MSGV2 EX_ORDEM_VENDA->MSGV3 EX_ORDEM_VENDA->MSGV4
             INTO I_TEXTO.
          ME->GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).
      ENDTRY.
    ENDLOOP.

    CASE ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA.
      WHEN ZIF_CARGA=>ST_TP_FRETE_CIF OR ZIF_CARGA=>ST_TP_FRETE_CPT.
        ME->CARGA-TP_FRETE = ZIF_CARGA=>ST_TP_FRETE_FOB.
      WHEN ZIF_CARGA=>ST_TP_FRETE_FOB.
        ME->CARGA-TP_FRETE = ZIF_CARGA=>ST_TP_FRETE_CIF.
      WHEN OTHERS.
        ME->CARGA-TP_FRETE = ZIF_CARGA=>ST_TP_FRETE_FOB.
    ENDCASE.

  ENDMETHOD.


  METHOD zif_carga~set_transgenia.

   DEFINE RETORNA.
      I_IN_GMO                = ME->CLASSIFICACAO-IN_GMO.
      I_NR_RESULTADO_01       = ME->CLASSIFICACAO-NR_RESULTADO_01.
      I_NR_RESULTADO_02       = ME->CLASSIFICACAO-NR_RESULTADO_02.
      I_NR_RES_RR1_RR2        = ME->CLASSIFICACAO-NR_RES_RR1_RR2.
      I_IN_GMO_03             = ME->CLASSIFICACAO-IN_GMO_03.
      I_IN_SRR_ORIGEM_PARTIC  = ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC.
      I_ID_OUTRO_PARTIC       = ME->CLASSIFICACAO-ID_OUTRO_PARTIC.
      I_IN_SRR_DECLARADO      = ME->CLASSIFICACAO-IN_SRR_DECLARADO.
      I_IN_TESTE_SRR          = ME->CLASSIFICACAO-IN_TESTE_SRR.
      I_IN_SRR_DECLARADO_2    = ME->CLASSIFICACAO-IN_SRR_DECLARADO_2.
      I_IN_TESTE_SRR_2        = ME->CLASSIFICACAO-IN_TESTE_SRR_2.
      I_ID_CLASSIFICADORA     = ME->CLASSIFICACAO-ID_CLASSIFICADORA.

      TRY .
        CLEAR: ME->CLASSIFICACAO-TP_TRANSGENIA.

        ME->ZIF_CARGA~GET_FACTORY_TP_TRANSGENIA(
          EXPORTING
            I_CLASSIFICACAO = ME->CLASSIFICACAO
          IMPORTING
            E_TP_TRANSGENIA = ME->CLASSIFICACAO-TP_TRANSGENIA ).
       CATCH ZCX_CARGA .
      ENDTRY.

      I_TP_TRANSGENIA = ME->CLASSIFICACAO-TP_TRANSGENIA.

    END-OF-DEFINITION.

*(Campo 1) IN_GMO
*(Campo 2) IN_SRR_DECLARADO
*(Campo 3) IN_SRR_DECLARADO_2
*(Campo 4) IN_TESTE_SRR_2
*(campo 5) IN_SRR_ORIGEM_PARTIC

    ME->CLASSIFICACAO-IN_GMO                = I_IN_GMO.
    ME->CLASSIFICACAO-NR_RESULTADO_01       = I_NR_RESULTADO_01.
    ME->CLASSIFICACAO-NR_RESULTADO_02       = I_NR_RESULTADO_02.
    ME->CLASSIFICACAO-NR_RES_RR1_RR2        = I_NR_RES_RR1_RR2.
    ME->CLASSIFICACAO-IN_GMO_03             = I_IN_GMO_03.
    ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC  = I_IN_SRR_ORIGEM_PARTIC.
    ME->CLASSIFICACAO-ID_OUTRO_PARTIC       = I_ID_OUTRO_PARTIC.
    ME->CLASSIFICACAO-IN_SRR_DECLARADO      = I_IN_SRR_DECLARADO.
    ME->CLASSIFICACAO-IN_TESTE_SRR          = I_IN_TESTE_SRR.
    ME->CLASSIFICACAO-IN_SRR_DECLARADO_2    = I_IN_SRR_DECLARADO_2.
    ME->CLASSIFICACAO-IN_TESTE_SRR_2        = I_IN_TESTE_SRR_2.
    ME->CLASSIFICACAO-ID_CLASSIFICADORA     = I_ID_CLASSIFICADORA.

    SELECT SINGLE * INTO @DATA(WA_MARA)
      FROM MARA
     WHERE MATNR EQ @ME->CARGA-ID_PRODUTO.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = WA_MARA-MATKL
      IMPORTING
        OUTPUT = WA_MARA-MATKL.

    "Campo Não Altera pela Tela
    ME->CLASSIFICACAO-IN_SRR_DECLARADO = ABAP_FALSE.

    CASE WA_MARA-MATKL.

      WHEN ZIF_CARGA=>ST_GRUPO_ALGODAO_PLUMA. "Algodão

        "(Campo 1)
        ME->CLASSIFICACAO-IN_GMO              = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
        "(Campo 2)
        ME->CLASSIFICACAO-IN_SRR_DECLARADO    = ABAP_FALSE.
        "(Campo 3)
        ME->CLASSIFICACAO-IN_SRR_DECLARADO_2   = ABAP_FALSE.
        "(Campo 4)
        ME->CLASSIFICACAO-IN_TESTE_SRR_2       = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
        "(Campo 5)
        ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.

        ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
        ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
        ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

        CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.

      WHEN '700170'. "Milho

        "(Campo 1)
        ME->CLASSIFICACAO-IN_GMO              = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
        "(Campo 2)
        ME->CLASSIFICACAO-IN_SRR_DECLARADO    = ABAP_TRUE.
        "(Campo 3)
        ME->CLASSIFICACAO-IN_SRR_DECLARADO_2   = ABAP_FALSE.
        "(Campo 4)
        ME->CLASSIFICACAO-IN_TESTE_SRR_2       = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
        "(Campo 5)
        ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.

        ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
        ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
        ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

        CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.

      WHEN '700110'. "Soja


        CASE ME->CLASSIFICACAO-IN_GMO.

*REGRA                      TIPO DE PRODUTO PARA "RESETAR"
*1: Se campo 1 = NEGATIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:                      CONVENCIONAL (CO) Desmarcar "Negativo"
*	Campo 2 = Não
*	Campo 3 = Não
*	Campo 4 = Não Testado
*	Campo 5 = Não
*	OBS.: o campo "Soma RR1 + RR2" deve trazer automaticamente a soma dos valores dos campos "Resultado"

          WHEN ZIF_CARGA=>ST_GMO_NEGATIVO.

*3: O campo 2 deve ser bloqueado para marcação na empresa AMAGGI, exceto para as filiais Lucas (55), Porto Velho (19) e Portochuelo (61)
*0119	AMAGGI PORTO VELHO
*0155	AMAGGI LUCAS - FABRICA
*0161	AMAGGI PORTOCHUELO

            "(Campo 2)
            IF ME->CARGA-ID_BRANCH NE '0155' AND ME->CARGA-ID_BRANCH NE '0119' AND ME->CARGA-ID_BRANCH NE '0161'.
              ME->CLASSIFICACAO-IN_SRR_DECLARADO    = ABAP_FALSE.
            ENDIF.
            "(Campo 3)
            ME->CLASSIFICACAO-IN_SRR_DECLARADO_2  = ABAP_FALSE.
            "(Campo 4)
            ME->CLASSIFICACAO-IN_TESTE_SRR_2      = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
            "(campo 5)
            ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.
            CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.
            RETORNA.
            EXIT.

*2: Se campo 1 = POSITIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:                      RR TESTADO (T1) Desmarcar "Positivo"
*	Campo 2 = Não
*	Campo 3 = Não
*	Campo 4 = Não Testado
*	Campo 5 = Não
*	OBS.: ao menos 1 dos campos "Resultado" deve ser preenchido com valor > 0, e o campo "Soma RR1 + RR2" deve trazer automaticamente a soma dos valores dos campos "Resultado"

          WHEN ZIF_CARGA=>ST_GMO_POSITIVO.

*3: O campo 2 deve ser bloqueado para marcação na empresa AMAGGI, exceto para as filiais Lucas (55), Porto Velho (19) e Portochuelo (61)
*0119	AMAGGI PORTO VELHO
*0155	AMAGGI LUCAS - FABRICA
*0161	AMAGGI PORTOCHUELO

            "(Campo 2)
            IF ME->CARGA-ID_BRANCH NE '0155' AND ME->CARGA-ID_BRANCH NE '0119' AND ME->CARGA-ID_BRANCH NE '0161'.
              ME->CLASSIFICACAO-IN_SRR_DECLARADO    = ABAP_FALSE.
            ENDIF.
            "(Campo 3)
            ME->CLASSIFICACAO-IN_SRR_DECLARADO_2  = ABAP_FALSE.
            "(Campo 4)
            ME->CLASSIFICACAO-IN_TESTE_SRR_2      = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
            "(campo 5)
            ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.
            CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.

            ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
            ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
            ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

            RETORNA.
            EXIT.

        ENDCASE.

*4: Se campo 3 = SIM, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:                     RR2 DECLARADO (D2)  Desmarcar "Sim"
*	Campo 1 = Sem marcação
*	Campo 2 = Não
*	Campo 4 = Não Testado
*	Campo 5 = Não

        IF ME->CLASSIFICACAO-IN_SRR_DECLARADO_2 EQ ABAP_TRUE.
          "(Campo 1)
          ME->CLASSIFICACAO-IN_GMO              = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
          "(Campo 2)
          ME->CLASSIFICACAO-IN_SRR_DECLARADO    = ABAP_FALSE.
          "(Campo 4)
          ME->CLASSIFICACAO-IN_TESTE_SRR_2      = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
          "(campo 5)
          ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.
          CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.

          ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
          ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
          ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

          RETORNA.
          EXIT.
        ENDIF.

        CASE ME->CLASSIFICACAO-IN_TESTE_SRR_2.

*5: Se campo 4 = POSITIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:                      RR2 TESTADO (T2)  Desmarcar "Positivo"
*	Campo 1 = Sem marcação
*	Campo 2 = Não
*	Campo 3 = Não
*	Campo 5 = Não

          WHEN ZIF_CARGA=>ST_GMO_POSITIVO.

            "(Campo 1)
            ME->CLASSIFICACAO-IN_GMO               = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
            "(Campo 2)
            ME->CLASSIFICACAO-IN_SRR_DECLARADO     = ABAP_FALSE.
            "(Campo 3)
            ME->CLASSIFICACAO-IN_SRR_DECLARADO_2   = ABAP_FALSE.
            "(campo 5)
            ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.
            CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.

            ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
            ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
            ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

            RETORNA.
            EXIT.

*6: Se campo 4 = NEGATIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:                      RR1 DECLARADO (D1)  Desmarcar "Negativo"
*	Campo 1 = Sem marcação
*	Campo 2 = Sim
*	Campo 3 = Não
*	Campo 5 = Não

          WHEN ZIF_CARGA=>ST_GMO_NEGATIVO.

            "(Campo 1)
            ME->CLASSIFICACAO-IN_GMO               = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
            "(Campo 2)
            ME->CLASSIFICACAO-IN_SRR_DECLARADO     = ABAP_TRUE.
            "(Campo 3)
            ME->CLASSIFICACAO-IN_SRR_DECLARADO_2   = ABAP_FALSE.
            "(campo 5)
            ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.
            CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.

            ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
            ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
            ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

            RETORNA.
            EXIT.

        ENDCASE.

*5: Se campo 5 = SIM, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:                     PARTICIPANTE (PA) Desmarcar "Negativo"
*	Campo 1 = Sem marcação
*	Campo 2 = Não
*	Campo 3 = Não
*	Campo 4 = Não Testado
*	OBS.: Habilitar os campos "Participante" e "Endereço Parcipante" para que o usuário lance as informações. Não permitir a gravação com os campos em branco.

        IF ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC EQ ABAP_TRUE.
          "(Campo 1)
          ME->CLASSIFICACAO-IN_GMO              = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
          "(Campo 2)
          ME->CLASSIFICACAO-IN_SRR_DECLARADO    = ABAP_FALSE.
          "(Campo 3)
          ME->CLASSIFICACAO-IN_SRR_DECLARADO_2   = ABAP_FALSE.
          "(Campo 4)
          ME->CLASSIFICACAO-IN_TESTE_SRR_2      = ZIF_CARGA=>ST_GMO_NAO_TESTADO.

          ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
          ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
          ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

          RETORNA.
          EXIT.
        ENDIF.

      WHEN OTHERS.

        "(Campo 1)
        ME->CLASSIFICACAO-IN_GMO               = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
        "(Campo 2)
        ME->CLASSIFICACAO-IN_SRR_DECLARADO     = ABAP_FALSE.
        "(Campo 3)
        ME->CLASSIFICACAO-IN_SRR_DECLARADO_2   = ABAP_FALSE.
        "(Campo 4)
        ME->CLASSIFICACAO-IN_TESTE_SRR_2       = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
        "(Campo 5)
        ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.
        CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.

        ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
        ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
        ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

    ENDCASE.

    RETORNA.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_VOLUME_ORDEM_VENDA.
    R_CARGA = ME.
  ENDMETHOD.


  METHOD ZIF_CARGA~VALIDAR_EXCLUSAO.

    E_VALIDOU = ABAP_FALSE.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~VALIDAR_REGISTRO.

    DATA: "RG_ID_CARGA  TYPE RANGE OF ZDE_ID_CARGA,
      E_TIPO   TYPE CHAR01,
      LC_TEXTO TYPE STRING.

    R_CARGA = ME.

    E_VALIDOU = ABAP_FALSE.

    DATA: LC_CK_NFE TYPE ZSDT0001TE-CK_NFE.

    ME->ZIF_CARGA~GET_CK_CARGA_SEM_SOLIC_MANUT( ).

    IF ME->ZIF_CARGA~ORDEM_VENDA[]   IS INITIAL AND
       ME->ZIF_CARGA~PEDIDO_COMPRA[] IS INITIAL AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_ORDEM_VENDA-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_ORDEM_VENDA-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_ORDEM_VENDA-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_ORDEM_VENDA-MSGID.
    ENDIF.

    IF ME->CARGA-ID_LOCAL_ENTREGA IS INITIAL AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_LC_ENTREGA-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_LC_ENTREGA-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_LC_ENTREGA-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_LC_ENTREGA-MSGID.
    ENDIF.

    SELECT * INTO TABLE @DATA(IT_LOCAL)
      FROM ZSDT0001LP
     WHERE ID_LOCAL_ENTREGA EQ @ME->CARGA-ID_LOCAL_ENTREGA
       AND ID_BUKRS         EQ @ME->CARGA-ID_BUKRS
       AND ID_BRANCH        EQ @ME->CARGA-ID_BRANCH.

    "053  Local de Entrega não parametrizado para Local de Negócio &1!
    "054  Local de Entrega não parametrizado para Material &1!
    IF SY-SUBRC IS NOT INITIAL  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_LE_SEM_PARAM_LC_NEGOCIO-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_LE_SEM_PARAM_LC_NEGOCIO-MSGNO
                            ATTR1 = CONV #( ME->CARGA-ID_BRANCH ) )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_LE_SEM_PARAM_LC_NEGOCIO-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_LE_SEM_PARAM_LC_NEGOCIO-MSGID
          MSGV1  = CONV #( ME->CARGA-ID_BRANCH ).
    ENDIF.

    SORT IT_LOCAL BY ID_MATERIAL.
    READ TABLE IT_LOCAL WITH KEY ID_MATERIAL = ME->CARGA-ID_PRODUTO TRANSPORTING NO FIELDS.
    IF SY-SUBRC IS NOT INITIAL  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_LE_SEM_PARAM_MATERIAL-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_LE_SEM_PARAM_MATERIAL-MSGNO
                            ATTR1 = CONV #( ME->CARGA-ID_PRODUTO ) )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_LE_SEM_PARAM_MATERIAL-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_LE_SEM_PARAM_MATERIAL-MSGID
          MSGV1  = CONV #( ME->CARGA-ID_PRODUTO ).
    ENDIF.

    IF ME->CARGA-ID_LOCAL_COLETA IS INITIAL  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_LC_COLETA-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_LC_COLETA-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_LC_COLETA-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_LC_COLETA-MSGID.
    ELSEIF ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      DATA(OB_FORNECEDORES) = ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
        )->SET_PARCEIRO( I_PARCEIRO = ME->CARGA-ID_LOCAL_COLETA
        )->CK_ATIVO(
        )->CK_ATIVO_EMPRESA( I_EMPRESA = ME->CARGA-ID_BUKRS
        ).
    ENDIF.

    IF ME->CARGA-ID_LOCAL_DESTINO IS INITIAL  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_LC_DESTINO-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_LC_DESTINO-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_LC_DESTINO-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_LC_DESTINO-MSGID.
    ELSEIF ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      OB_FORNECEDORES = ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
        )->SET_PARCEIRO( I_PARCEIRO = ME->CARGA-ID_LOCAL_DESTINO
        )->CK_ATIVO(
        )->CK_ATIVO_EMPRESA( I_EMPRESA = ME->CARGA-ID_BUKRS
        ).
    ENDIF.

    IF ME->CARGA-ID_LOCAL_DESCARGA IS INITIAL  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_LC_DESCARGA-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_LC_DESCARGA-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_LC_DESCARGA-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_LC_DESCARGA-MSGID.
    ELSEIF ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      DATA(OB_CLIENTE) = ZCL_CLIENTES=>ZIF_PARCEIROS~GET_INSTANCE(
        )->SET_PARCEIRO( I_PARCEIRO = ME->CARGA-ID_LOCAL_DESCARGA
        )->CK_ATIVO(
        )->CK_ATIVO_EMPRESA( I_EMPRESA = ME->CARGA-ID_BUKRS
        ).
    ENDIF.

    IF ME->CARGA-ID_MOTORISTA IS INITIAL AND
       ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA EQ ZIF_CARGA=>ST_TP_FRETE_CIF  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_MOTORISTA-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_MOTORISTA-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_MOTORISTA-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_MOTORISTA-MSGID.
    ELSEIF ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA AND ME->CARGA-ID_MOTORISTA IS NOT INITIAL.
      OB_FORNECEDORES = ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
        )->SET_PARCEIRO( I_PARCEIRO = ME->CARGA-ID_MOTORISTA
        )->CK_ATIVO(
        ).
    ENDIF.

    IF ME->CARGA-ID_PROPRIETARIO IS INITIAL AND
       ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA EQ ZIF_CARGA=>ST_TP_FRETE_CIF AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_PROPRIETARIO-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_PROPRIETARIO-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_PROPRIETARIO-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_PROPRIETARIO-MSGID.
    ELSEIF ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA AND ME->CARGA-ID_PROPRIETARIO IS NOT INITIAL.
      OB_FORNECEDORES = ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
        )->SET_PARCEIRO( I_PARCEIRO = ME->CARGA-ID_PROPRIETARIO
        )->CK_ATIVO(
        )->CK_ATIVO_EMPRESA( I_EMPRESA = ME->CARGA-ID_BUKRS
        ).
    ENDIF.

    IF ME->CARGA-DS_PLACA_TRATOR IS INITIAL AND
       ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA EQ ZIF_CARGA=>ST_TP_FRETE_CIF AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_TRATOR-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_TRATOR-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_TRATOR-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_TRATOR-MSGID.
    ENDIF.

    IF ME->CARGA-NR_TICKET IS INITIAL AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_TICKET-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_TICKET-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_TICKET-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_TICKET-MSGID.
    ENDIF.

    DATA: LC_NR_TICKET TYPE ZDE_NR_TICKET.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = ME->CARGA-NR_TICKET
      IMPORTING
        OUTPUT = LC_NR_TICKET.

    IF ZCL_STRING=>LENGTH( TEXT = CONV #( LC_NR_TICKET ) ) GT 7  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_NR_TICKET_GRANDE-MSGID
                            MSGNO  = ZCX_CARGA=>ZCX_NR_TICKET_GRANDE-MSGNO )
          MSGID  = ZCX_CARGA=>ZCX_NR_TICKET_GRANDE-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_NR_TICKET_GRANDE-MSGNO
          MSGTY  = 'E'.
    ENDIF.

    IF ME->CARGA-NM_PESO_BRUTO IS INITIAL  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_PS_BRUTO-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_PS_BRUTO-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_PS_BRUTO-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_PS_BRUTO-MSGID.
    ENDIF.

    IF ME->CARGA-NM_PESO_TARA IS INITIAL  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_PS_TARA-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_PS_TARA-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_PS_TARA-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_PS_TARA-MSGID.
    ENDIF.

    IF ME->CARGA-NM_PESO_SUBTOTAL IS INITIAL  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_PS_SUBTOTAL-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_PS_SUBTOTAL-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_PS_SUBTOTAL-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_PS_SUBTOTAL-MSGID.
    ENDIF.

    IF ME->CARGA-NM_PESO_TARA GE ME->CARGA-NM_PESO_BRUTO  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_TARA_MAIOR_BRUTO-MSGID MSGNO = ZCX_CARGA=>ZCX_TARA_MAIOR_BRUTO-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_TARA_MAIOR_BRUTO-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_TARA_MAIOR_BRUTO-MSGID.
    ENDIF.

    ME->GET_CALCULAR_SUBTOTAL(
      EXPORTING
        I_PESO_BRUTO    = ME->CARGA-NM_PESO_BRUTO
        I_PESO_TARA     = ME->CARGA-NM_PESO_TARA
      IMPORTING
        E_PESO_SUBTOTAL = DATA(E_PESO_SUBTOTAL) ).

    IF ME->CARGA-NM_PESO_SUBTOTAL NE E_PESO_SUBTOTAL  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ERRP_PS_SUBTOTAL-MSGID MSGNO = ZCX_CARGA=>ZCX_ERRP_PS_SUBTOTAL-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_ERRP_PS_SUBTOTAL-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_ERRP_PS_SUBTOTAL-MSGID.
    ENDIF.

    IF ME->CARGA-NM_PESO_LIQUIDO GT ME->CARGA-NM_PESO_SUBTOTAL  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PESO_LIQ_SUBTOTAL-MSGID MSGNO = ZCX_CARGA=>ZCX_PESO_LIQ_SUBTOTAL-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_PESO_LIQ_SUBTOTAL-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_PESO_LIQ_SUBTOTAL-MSGID.
    ENDIF.

    IF ME->CARGA-NM_PESO_LIQUIDO IS INITIAL  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_PS_LIQUIDO-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_PS_LIQUIDO-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_PS_LIQUIDO-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_PS_LIQUIDO-MSGID.
    ENDIF.

    IF ME->CARGA-NR_SAFRA IS INITIAL  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_SAFRA-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_SAFRA-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_SAFRA-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_SAFRA-MSGID.
    ENDIF.

    IF ( ME->CARGA-ID_BUKRS IS INITIAL OR ME->CARGA-ID_BRANCH IS INITIAL )  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_LC_NEGOCIO-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_LC_NEGOCIO-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_LC_NEGOCIO-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_LC_NEGOCIO-MSGID.
    ENDIF.

    IF ME->CARGA-ID_PRODUTO IS INITIAL  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_PRODUTO-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_PRODUTO-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_PRODUTO-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_PRODUTO-MSGID.
    ENDIF.

    SELECT SINGLE * INTO @DATA(WA_MARA)
      FROM MARA
     WHERE MATNR EQ @ME->CARGA-ID_PRODUTO.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = WA_MARA-MATKL
      IMPORTING
        OUTPUT = WA_MARA-MATKL.

    IF ( ME->CLASSIFICACAO-ID_CLASSIFICADORA IS INITIAL AND
       ZIF_CARGA=>ST_GRUPO_ALGODAO_PLUMA NE WA_MARA-MATKL )  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_EMP_CLASSIFICADORA-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_EMP_CLASSIFICADORA-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_EMP_CLASSIFICADORA-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_EMP_CLASSIFICADORA-MSGID.
    ENDIF.

    IF ME->CLASSIFICACAO-ID_CLASSIFICADORA IS NOT INITIAL AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.

      SELECT SINGLE * INTO @DATA(WA_ZSDT0001CE)
        FROM ZSDT0001CE
       WHERE LIFNR EQ @ME->CLASSIFICACAO-ID_CLASSIFICADORA.

      IF SY-SUBRC IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_FORNECEDOR_NAO_CLASSIFICA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_FORNECEDOR_NAO_CLASSIFICA-MSGNO
                              ATTR1 = CONV #( ME->CLASSIFICACAO-ID_CLASSIFICADORA ) )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_FORNECEDOR_NAO_CLASSIFICA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_FORNECEDOR_NAO_CLASSIFICA-MSGID
            MSGV1  = CONV #( ME->CLASSIFICACAO-ID_CLASSIFICADORA ).
      ENDIF.

      OB_FORNECEDORES = ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
        )->SET_PARCEIRO( I_PARCEIRO = ME->CLASSIFICACAO-ID_CLASSIFICADORA
        )->CK_ATIVO(
        )->CK_ATIVO_EMPRESA( I_EMPRESA = ME->CARGA-ID_BUKRS
        ).

    ENDIF.

    IF WA_MARA-MATKL NE ZIF_CARGA=>ST_GRUPO_ALGODAO_PLUMA. "Algodão

      LOOP AT ME->RESULTADO INTO DATA(WA_RESULTADO).
        IF WA_RESULTADO-NR_PERCENTUAL_COM IS INITIAL.
          CASE WA_RESULTADO-TP_CARACTERISTICA.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
              IF ME->ZIF_CARGA~CK_DIGITADO_UMIDADE NE ABAP_TRUE.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_CLASS_UMIDADE-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_CLASS_UMIDADE-MSGNO )
                    MSGTY  = 'E'
                    MSGNO  = ZCX_CARGA=>ZCX_OBG_CLASS_UMIDADE-MSGNO
                    MSGID  = ZCX_CARGA=>ZCX_OBG_CLASS_UMIDADE-MSGID.
              ENDIF.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
              IF ME->ZIF_CARGA~CK_DIGITADO_IMPUREZA NE ABAP_TRUE.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_CLASS_IMPUREZA-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_CLASS_IMPUREZA-MSGNO )
                    MSGTY  = 'E'
                    MSGNO  = ZCX_CARGA=>ZCX_OBG_CLASS_IMPUREZA-MSGNO
                    MSGID  = ZCX_CARGA=>ZCX_OBG_CLASS_IMPUREZA-MSGID.
              ENDIF.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
              IF ME->ZIF_CARGA~CK_DIGITADO_AVARIADO NE ABAP_TRUE.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_CLASS_AVARIADO-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_CLASS_AVARIADO-MSGNO )
                    MSGTY  = 'E'
                    MSGNO  = ZCX_CARGA=>ZCX_OBG_CLASS_AVARIADO-MSGNO
                    MSGID  = ZCX_CARGA=>ZCX_OBG_CLASS_AVARIADO-MSGID.
              ENDIF.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
              IF ME->ZIF_CARGA~CK_DIGITADO_ARDIDO NE ABAP_TRUE.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_CLASS_ARDIDO-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_CLASS_ARDIDO-MSGNO )
                    MSGTY  = 'E'
                    MSGNO  = ZCX_CARGA=>ZCX_OBG_CLASS_ARDIDO-MSGNO
                    MSGID  = ZCX_CARGA=>ZCX_OBG_CLASS_ARDIDO-MSGID.
              ENDIF.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.

              IF ME->ZIF_CARGA~CK_DIGITADO_QUEBRADO NE ABAP_TRUE.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_CLASS_QUEBRADO-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_CLASS_QUEBRADO-MSGNO )
                    MSGTY  = 'E'
                    MSGNO  = ZCX_CARGA=>ZCX_OBG_CLASS_QUEBRADO-MSGNO
                    MSGID  = ZCX_CARGA=>ZCX_OBG_CLASS_QUEBRADO-MSGID.
              ENDIF.

            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.

              IF ME->ZIF_CARGA~CK_DIGITADO_ESVERDEADO NE ABAP_TRUE.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_CLASS_ESVERDEADO-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_CLASS_ESVERDEADO-MSGNO )
                    MSGTY  = 'E'
                    MSGNO  = ZCX_CARGA=>ZCX_OBG_CLASS_ESVERDEADO-MSGNO
                    MSGID  = ZCX_CARGA=>ZCX_OBG_CLASS_ESVERDEADO-MSGID.
              ENDIF.

            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.

              IF WA_MARA-MATKL EQ '700170'. "Milho
                IF ME->ZIF_CARGA~CK_DIGITADO_CARUNCHADO NE ABAP_TRUE.
                  RAISE EXCEPTION TYPE ZCX_CARGA
                    EXPORTING
                      TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_CLASS_CARUNCHADO-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_CLASS_CARUNCHADO-MSGNO )
                      MSGTY  = 'E'
                      MSGNO  = ZCX_CARGA=>ZCX_OBG_CLASS_CARUNCHADO-MSGNO
                      MSGID  = ZCX_CARGA=>ZCX_OBG_CLASS_CARUNCHADO-MSGID.
                ENDIF.
              ENDIF.

          ENDCASE.
        ENDIF.
      ENDLOOP.

      LOOP AT ME->RESULTADO INTO WA_RESULTADO.
        CASE WA_RESULTADO-TP_CARACTERISTICA.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.

            DATA: LC_TOTAL TYPE ZDE_NR_PERC_AVA_ARQ.

            LC_TOTAL = 0.
            LOOP AT ME->ZIF_CARGA~RESULTADO_AVARIADO INTO DATA(WA_RESULTADO_AVARIADO).
              ADD WA_RESULTADO_AVARIADO-NR_PERCENTUAL_COM TO LC_TOTAL.
            ENDLOOP.

            IF LC_TOTAL NE WA_RESULTADO-NR_PERCENTUAL_COM.
              RAISE EXCEPTION TYPE ZCX_CARGA
                EXPORTING
                  TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ERRO_SOMA_AVARIADO-MSGID MSGNO = ZCX_CARGA=>ZCX_ERRO_SOMA_AVARIADO-MSGNO )
                  MSGTY  = 'E'
                  MSGNO  = ZCX_CARGA=>ZCX_ERRO_SOMA_AVARIADO-MSGNO
                  MSGID  = ZCX_CARGA=>ZCX_ERRO_SOMA_AVARIADO-MSGID.
            ENDIF.

          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
        ENDCASE.
      ENDLOOP.

    ENDIF.

    IF ME->CLASSIFICACAO-IN_GMO EQ ZIF_CARGA=>ST_GMO_POSITIVO AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NAO_TESTE_AMAGGI_POSITIVO-MSGID MSGNO = ZCX_CARGA=>ZCX_NAO_TESTE_AMAGGI_POSITIVO-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_NAO_TESTE_AMAGGI_POSITIVO-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_NAO_TESTE_AMAGGI_POSITIVO-MSGID.
    ENDIF.

    IF ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC EQ ABAP_TRUE AND
       ME->CLASSIFICACAO-ID_OUTRO_PARTIC IS INITIAL AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_OUTRO_PART-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_OUTRO_PART-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_OUTRO_PART-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_OUTRO_PART-MSGID.
    ELSEIF ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC EQ ABAP_FALSE AND
           ME->CLASSIFICACAO-ID_OUTRO_PARTIC IS NOT INITIAL  AND
           ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NAO_INF_OUTRO_PART-MSGID MSGNO = ZCX_CARGA=>ZCX_NAO_INF_OUTRO_PART-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_NAO_INF_OUTRO_PART-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_NAO_INF_OUTRO_PART-MSGID.
    ENDIF.

    DESCRIBE TABLE ME->DOCUMENTO_FISCAL LINES DATA(LC_LINHAS).

    IF LC_LINHAS IS INITIAL  AND
       ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_DOC_FISCAL-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_DOC_FISCAL-MSGNO )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_DOC_FISCAL-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_DOC_FISCAL-MSGID.
    ENDIF.

    LOOP AT ME->DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_NOTA>).
      ME->ZIF_CARGA~GET_VALIDAR_NOTA_FISCAL( CHANGING I_NOTA_FISCAL = <FS_NOTA> ).

      IF ZCL_CFOP=>GET_CK_CFOP_RETORNO_AMAZEM( I_CFOP = <FS_NOTA>-CFOP ) EQ ABAP_TRUE.

        IF <FS_NOTA>-PO_NUMBER IS INITIAL.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PED_COMPRA_RETORNO_OBG-MSGID MSGNO = ZCX_CARGA=>ZCX_PED_COMPRA_RETORNO_OBG-MSGNO )
              MSGTY  = 'E'
              MSGNO  = ZCX_CARGA=>ZCX_PED_COMPRA_RETORNO_OBG-MSGNO
              MSGID  = ZCX_CARGA=>ZCX_PED_COMPRA_RETORNO_OBG-MSGID.
        ELSE.

          "Buscar Número de Pedido de Compra
          ZCL_PEDIDO_COMPRA=>GET_PEDIDO_COMPRA_CHAVE_E(
            EXPORTING
              I_LIFNR               = <FS_NOTA>-ID_FORNECEDOR
              I_BUKRS               = ME->CARGA-ID_BUKRS
              I_WERKS               = ME->CARGA-ID_BRANCH
              I_MATNR               = ME->CARGA-ID_PRODUTO
              I_LGORT               = 'ARMZ'
              I_CHARG               = CONV #( ME->CARGA-NR_SAFRA )
              I_EBELN               = <FS_NOTA>-PO_NUMBER
              I_EBELP               = <FS_NOTA>-PO_ITEM
              I_BSTYP               = 'F'    " Categoria do documento de compras
              I_BSART               = 'ZARM'
              I_ABRIR_TELA          = ABAP_FALSE
            RECEIVING
              R_EKPO                = DATA(R_EKPO)    " Item do documento de compras
            EXCEPTIONS
              NAO_ENCONTRADO_PEDIDO = 1
              OTHERS                = 2
          ).

          IF SY-SUBRC IS NOT INITIAL.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PED_COMPRA_RETORNO_ERR-MSGID
                                  MSGNO = ZCX_CARGA=>ZCX_PED_COMPRA_RETORNO_ERR-MSGNO
                                  ATTR1 = <FS_NOTA>-PO_NUMBER )
                MSGTY  = 'E'
                MSGNO  = ZCX_CARGA=>ZCX_PED_COMPRA_RETORNO_ERR-MSGNO
                MSGID  = ZCX_CARGA=>ZCX_PED_COMPRA_RETORNO_ERR-MSGID
                MSGV1  = CONV #( <FS_NOTA>-PO_NUMBER ).
          ENDIF.
        ENDIF.

      ENDIF.
    ENDLOOP.

    "Validar Quantidade de Algodão Vinculado por Nota Fiscal """"""""""""""""""""""""""""""""""""""""""
    ME->ZIF_CARGA~VERIF_CK_PLUMA_NOTA_FISCAL( ).

    ME->ZIF_CARGA~VERIF_CK_SALDO_TAKEUP_BLOCO( ).

    ME->ZIF_CARGA~GET_FACTORY_TP_TRANSGENIA(
      EXPORTING I_CLASSIFICACAO = ME->CLASSIFICACAO
      IMPORTING E_TP_TRANSGENIA = ME->CLASSIFICACAO-TP_TRANSGENIA
        ).

    ME->ZIF_CARGA~VALIDAR_REGISTRO_PEDIDO_COMPRA( ).

    ME->ZIF_CARGA~VALIDAR_REGISTRO_ORDEM_VENDA( ).

    IF ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
      ME->ZIF_CARGA~GET_INFO_PLACA( EXPORTING I_TIPO_FRETE = ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA I_PLACA = ME->CARGA-DS_PLACA_TRATOR  I_VALIDAR = ABAP_TRUE I_TRACAO = ABAP_TRUE ).
      ME->ZIF_CARGA~GET_INFO_PLACA( EXPORTING I_TIPO_FRETE = ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA I_PLACA = ME->CARGA-DS_PLACA_REBOQ_1 I_VALIDAR = ABAP_TRUE I_TRACAO = ABAP_FALSE ).
      ME->ZIF_CARGA~GET_INFO_PLACA( EXPORTING I_TIPO_FRETE = ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA I_PLACA = ME->CARGA-DS_PLACA_REBOQ_2 I_VALIDAR = ABAP_TRUE I_TRACAO = ABAP_FALSE ).
      ME->ZIF_CARGA~GET_INFO_PLACA( EXPORTING I_TIPO_FRETE = ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA I_PLACA = ME->CARGA-DS_PLACA_REBOQ_3 I_VALIDAR = ABAP_TRUE I_TRACAO = ABAP_FALSE ).
    ENDIF.

    CLEAR: OB_CLIENTE, OB_FORNECEDORES.

    "Validar Entrada de Sobra """""""""""""""""""""""""""""""""""""""""""
    ME->ZIF_CARGA~GET_CK_GERA_SOBRA( ).

    "Verifica se Existe Alteraçao no Romaneio
    ME->ZIF_CARGA~VERIF_ALTERACAO_MANUT_ROMANEIO( ).

    E_VALIDOU = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CARGA~VALIDAR_REGISTRO_ORDEM_VENDA.

    DATA: E_TIPO_FRETE TYPE ZDE_TP_FRETE.

    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM_VENDA).


      CASE ME->CLASSIFICACAO-TP_TRANSGENIA .
        WHEN 'CO'.
          DATA(ORDEM_VENDA) =
          ZCL_ORDEM_VENDA=>ZIF_ORDEM_VENDA~GET_INSTANCE(
                   )->SET_ORDEM_VENDA( I_VBELN = WA_ORDEM_VENDA-NR_ORDEM_VENDA
                   )->CK_ORDEM_VENDA_CONVENCIONAL(
                   )->CK_FILIAL_EMISSORA_ROMANEIO( I_BRANCH = ME->CARGA-ID_BRANCH
                   )->CK_SAFRA( I_SAFRA = CONV #( ME->CARGA-NR_SAFRA )
                   )->CK_ORDEM_VENDA_DCO(  I_BRANCH = ME->CARGA-ID_BRANCH I_MATNR = ME->CARGA-ID_PRODUTO
                   )->GET_TIPO_FRETE( IMPORTING  E_TIPO_FRETE = E_TIPO_FRETE
                   ).
        WHEN OTHERS.
          ORDEM_VENDA =
          ZCL_ORDEM_VENDA=>ZIF_ORDEM_VENDA~GET_INSTANCE(
                   )->SET_ORDEM_VENDA( I_VBELN = WA_ORDEM_VENDA-NR_ORDEM_VENDA
                   )->CK_ORDEM_VENDA_TRANSGENICA(
                   )->CK_FILIAL_EMISSORA_ROMANEIO( I_BRANCH = ME->CARGA-ID_BRANCH
                   )->CK_SAFRA( I_SAFRA = CONV #( ME->CARGA-NR_SAFRA )
                   )->CK_ORDEM_VENDA_DCO(  I_BRANCH = ME->CARGA-ID_BRANCH I_MATNR = ME->CARGA-ID_PRODUTO
                   )->GET_TIPO_FRETE( IMPORTING  E_TIPO_FRETE = E_TIPO_FRETE
                   ).
      ENDCASE.

      "Somente Permitido Ordem de Venda CIF, CPT ou CFR
      TRY .
          ORDEM_VENDA->CK_TIPO_FRETE( I_TIPO_FRETE = ZIF_CARGA=>ST_TP_FRETE_CIF ).
        CATCH ZCX_ORDEM_VENDA.
          TRY .
              ORDEM_VENDA->CK_TIPO_FRETE( I_TIPO_FRETE = ZIF_CARGA=>ST_TP_FRETE_CPT ).
            CATCH ZCX_ORDEM_VENDA.
              TRY .
                  ORDEM_VENDA->CK_TIPO_FRETE( I_TIPO_FRETE = ZIF_CARGA=>ST_TP_FRETE_CFR ).
                CATCH ZCX_ORDEM_VENDA.
                  ORDEM_VENDA->CK_TIPO_FRETE( I_TIPO_FRETE = ZIF_CARGA=>ST_TP_FRETE_FOB ).
              ENDTRY.
          ENDTRY.
      ENDTRY.

      TRY .
          CASE E_TIPO_FRETE.
            WHEN ZIF_CARGA=>ST_TP_FRETE_CIF.

              IF ME->CARGA-ID_ORDEM IS INITIAL.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_VENDA_CIF_OD-MSGID
                                      MSGNO = ZCX_CARGA=>ZCX_ORDEM_VENDA_CIF_OD-MSGNO
                                      ATTR1 = CONV #( WA_ORDEM_VENDA-NR_ORDEM_VENDA ) )
                    MSGTY  = 'E'
                    MSGNO  = ZCX_CARGA=>ZCX_ORDEM_VENDA_CIF_OD-MSGNO
                    MSGID  = ZCX_CARGA=>ZCX_ORDEM_VENDA_CIF_OD-MSGID
                    MSGV1  = CONV #( WA_ORDEM_VENDA-NR_ORDEM_VENDA ).
              ENDIF.

              IF ME->CARGA-ID_AGENT_FRETE IS NOT INITIAL AND ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
                DATA(OB_FORNECEDORES) = ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
                  )->SET_PARCEIRO( I_PARCEIRO = ME->CARGA-ID_AGENT_FRETE
                  )->CK_ATIVO(
                  )->CK_ATIVO_EMPRESA( I_EMPRESA = ME->CARGA-ID_BUKRS
                  )->CK_PARCEIRO_LOCAL_NEGOCIO(
                  ).
              ENDIF.

            WHEN ZIF_CARGA=>ST_TP_FRETE_CPT.

              IF ME->CARGA-ID_AGENT_FRETE IS NOT INITIAL AND ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
                OB_FORNECEDORES = ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
                  )->SET_PARCEIRO( I_PARCEIRO = ME->CARGA-ID_AGENT_FRETE
                  )->CK_ATIVO(
                  )->CK_ATIVO_EMPRESA( I_EMPRESA = ME->CARGA-ID_BUKRS
                  )->CK_PARCEIRO_TERCEIRO(
                  )->CK_SERVICO_FRETE(
                  )->CK_SERVICO_FRETE_RODO(
                  ).
              ENDIF.

            WHEN ZIF_CARGA=>ST_TP_FRETE_CFR.

              "Não Valida Agente de Frete
              IF ME->CARGA-ID_AGENT_FRETE IS NOT INITIAL AND ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
                OB_FORNECEDORES = ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
                  )->SET_PARCEIRO( I_PARCEIRO = ME->CARGA-ID_AGENT_FRETE
                  )->CK_ATIVO(
                  )->CK_ATIVO_EMPRESA( I_EMPRESA = ME->CARGA-ID_BUKRS
                  )->CK_SERVICO_FRETE(
                  )->CK_SERVICO_FRETE_RODO(
                  ).
              ENDIF.

          ENDCASE.

        CATCH ZCX_PARCEIROS INTO DATA(EX_PARCEIROS).    " .

          MESSAGE ID EX_PARCEIROS->IF_T100_MESSAGE~T100KEY-MSGID
             TYPE 'E'
           NUMBER EX_PARCEIROS->IF_T100_MESSAGE~T100KEY-MSGNO
             WITH EX_PARCEIROS->MSGV1
                  EX_PARCEIROS->MSGV2
                  EX_PARCEIROS->MSGV3
                  EX_PARCEIROS->MSGV4
             INTO DATA(LC_TEXTO).

          CONCATENATE 'Agente de Frete: ' LC_TEXTO INTO LC_TEXTO.
          ME->ZIF_CARGA~GERA_ERRO_GERAL( I_TEXTO = LC_TEXTO ).
      ENDTRY.

      "Verifica Ordem de Venda e Ordem de Carregamento
      ZCL_ATRIBUI_ROM_DOCTRANS=>GET_CK_OV_OC(
        EXPORTING
          I_NR_ORDEM_VENDA = WA_ORDEM_VENDA-NR_ORDEM_VENDA    " Documento de vendas
          I_ID_ORDEM       = ME->CARGA-ID_ORDEM    " Ordem de Carregamento
      ).

    ENDLOOP.
    CLEAR: ORDEM_VENDA.

  ENDMETHOD.


  METHOD ZIF_CARGA~VALIDAR_REGISTRO_PEDIDO_COMPRA.

    LOOP AT ME->ZIF_CARGA~PEDIDO_COMPRA INTO DATA(WA_PEDIDO_COMPRA).

      DATA: LC_CLIENTE TYPE ZDE_ID_LOCAL_DESTINO.

      ME->ZIF_CARGA~GET_INFO_PEDIDO_COMPRA( EXPORTING I_PEDIDO_COMPRA = WA_PEDIDO_COMPRA-NR_PEDIDO_COMPRA IMPORTING E_PEDIDO = DATA(E_PEDIDO) ).

      IF E_PEDIDO-ID_CENTRO_SAIDA NE ME->CARGA-ID_BRANCH.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_EF_SAIDA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_EF_SAIDA-MSGNO
                              ATTR1 = CONV #( ME->CARGA-ID_BRANCH ) )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_EF_SAIDA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_EF_SAIDA-MSGID
            MSGV1  = CONV #( ME->CARGA-ID_BRANCH ).
      ENDIF.

      LC_CLIENTE = E_PEDIDO-ID_CENTRO_RECEBEDOR.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = LC_CLIENTE
        IMPORTING
          OUTPUT = LC_CLIENTE.

      ZCL_CLIENTES=>ZIF_PARCEIROS~GET_INSTANCE(
       )->SET_PARCEIRO( I_PARCEIRO = LC_CLIENTE
       )->CK_PARCEIRO_INTERCOMPANY( I_EMPRESA = ME->CARGA-ID_BUKRS
       ).

      IF LC_CLIENTE NE ME->CARGA-ID_LOCAL_DESTINO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_EF_ENTRA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_EF_ENTRA-MSGNO
                              ATTR1 = CONV #( E_PEDIDO-ID_CENTRO_RECEBEDOR ) )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_EF_ENTRA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_EF_ENTRA-MSGID
            MSGV1  = CONV #( E_PEDIDO-ID_CENTRO_RECEBEDOR ).
      ENDIF.

      IF LC_CLIENTE NE ME->CARGA-ID_LOCAL_DESCARGA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_EF_ENTRA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_EF_ENTRA-MSGNO
                              ATTR1 = CONV #( E_PEDIDO-ID_CENTRO_RECEBEDOR ) )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_EF_ENTRA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_EF_ENTRA-MSGID
            MSGV1  = CONV #( E_PEDIDO-ID_CENTRO_RECEBEDOR ).
      ENDIF.

      "Verificar E_PEDIDO-ID_CENTRO_RECEBEDOR se é intercompany

      IF E_PEDIDO-NR_SAFRA NE ME->CARGA-NR_SAFRA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_SAFRA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_SAFRA-MSGNO
                              ATTR1 = CONV #( ME->CARGA-NR_SAFRA ) )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_SAFRA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_SAFRA-MSGID
            MSGV1  = CONV #( ME->CARGA-NR_SAFRA ).
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


  METHOD zif_carga~valida_atributo_alteravel.

    r_carga = me.

    e_permitido = abap_false.

    CHECK me->carga-tp_status EQ zif_carga=>st_status_aberto.

    DATA(lc_emitiu) = abap_false.
    LOOP AT me->documento_fiscal INTO DATA(wa_documento_fiscal).
      IF "WA_DOCUMENTO_FISCAL-AV_VBELN IS NOT INITIAL OR
         wa_documento_fiscal-fte_docnum IS NOT INITIAL OR
         wa_documento_fiscal-fte_fknum IS NOT INITIAL OR
         wa_documento_fiscal-fte_tknum IS NOT INITIAL OR
         wa_documento_fiscal-fte_vbeln_va IS NOT INITIAL OR
         wa_documento_fiscal-fte_vbeln_vf IS NOT INITIAL.
        lc_emitiu = abap_true.
      ENDIF.
    ENDLOOP.

    CHECK lc_emitiu EQ abap_false.

    CHECK NOT ( me->carga-ck_enviado_opus EQ abap_true AND me->carga-ck_recebido_opus EQ abap_false ).

    "Campos Não Alteráveis da Carga
    CASE i_campo.
      WHEN 'IN_SRR_DECLARADO'. EXIT.
      WHEN 'ID_CARGA'. EXIT.
        "WHEN 'NR_ORDEM_VENDA'. EXIT.
      WHEN 'DT_MOVIMENTO'. EXIT.
      WHEN 'NR_SAFRA'. EXIT.
      WHEN 'ID_BUKRS'. EXIT.
      WHEN 'ID_BRANCH'. EXIT.
      WHEN 'ID_BUKRS_AG'. EXIT.
      WHEN 'ID_BRANCH_AG'. EXIT.
      WHEN 'ID_PRODUTO'. EXIT.
      WHEN 'TP_STATUS'. EXIT.
      WHEN 'DT_ABERTURA'. EXIT.
      WHEN 'HR_ABERTURA'. EXIT.
      WHEN 'DT_FECHAMENTO'. EXIT.
      WHEN 'HR_FECHAMENTO'. EXIT.
      WHEN 'NM_PESO_SUBTOTAL'. EXIT.
      WHEN 'NR_RES_RR1_RR2'. EXIT.
      WHEN 'NR_QTDE_UMI'. EXIT.
      WHEN 'NR_QTDE_IMP'. EXIT.
      WHEN 'NR_QTDE_AVA'. EXIT.
      WHEN 'NR_QTDE_ARD'. EXIT.
      WHEN 'NR_QTDE_QUE'. EXIT.
      WHEN 'NR_QTDE_ESV'. EXIT.
      WHEN 'NR_QTDE_CAR'. EXIT.
      WHEN 'ID_LOCAL_COLETA'. EXIT.
      WHEN 'ID_LOCAL_DESCARGA'. EXIT.
      WHEN 'ID_LOCAL_DESTINO'. EXIT.
      WHEN 'NM_PESO_DESCONTOS'. EXIT.
      WHEN 'NM_PESO_LIQUIDO'. EXIT.
        "Nota Fiscal
      WHEN 'ID_NOTA'. EXIT.
      WHEN 'ID_FORNECEDOR'. EXIT.
      WHEN 'NR_PRECO_SACA_60'. EXIT.
      WHEN 'NR_PEDIDO'. EXIT.
      WHEN 'NR_PEDIDO'. EXIT.
      WHEN 'NR_PEDIDO_ITEM'. EXIT.
      WHEN 'TP_TIPO_ORDEM'. EXIT.
      WHEN 'DS_TIPO_ORDEM'. EXIT.
      WHEN 'DS_TIPO_FRETE'. EXIT.
      WHEN 'NR_ROMANEIO_ENT'. EXIT.
      WHEN 'NR_ROMANEIO_SAI'. EXIT.
    ENDCASE.

    "Campos Não Alteráveis da Carga Entrada
    CASE i_campo.
      WHEN 'TP_FRETE'. EXIT.
      WHEN 'IN_TRANSFERENCIA'. EXIT.
      WHEN 'CK_GERA_AVISO'. EXIT.
    ENDCASE.

    IF me->carga-id_ordem IS NOT INITIAL.
      IF i_campo = 'ID_MOTORISTA'.
        EXIT.
      ENDIF.
    ENDIF.

    IF i_campo EQ 'NR_PERC_CAR'.

      SELECT SINGLE * INTO @DATA(wa_mara)
        FROM mara
       WHERE matnr EQ @me->carga-id_produto.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_mara-matkl
        IMPORTING
          output = wa_mara-matkl.

      "Somente Milho possui Carunchado
      IF wa_mara-matkl NE '700170'.
        EXIT.
      ENDIF.

    ENDIF.

    IF i_campo EQ 'NR_PERC_UMI' OR
       i_campo EQ 'NR_PERC_IMP' OR
       i_campo EQ 'NR_PERC_AVA' OR
       i_campo EQ 'NR_PERC_ARD' OR
       i_campo EQ 'NR_PERC_QUE' OR
       i_campo EQ 'NR_PERC_ESV' OR
       i_campo EQ 'NR_PERC_CAR'.

      SELECT SINGLE * INTO @wa_mara
        FROM mara
       WHERE matnr EQ @me->carga-id_produto.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_mara-matkl
        IMPORTING
          output = wa_mara-matkl.

      CASE wa_mara-matkl.

        WHEN zif_carga=>st_grupo_algodao_pluma. "Algodão.
          EXIT.
      ENDCASE.

    ENDIF.

*(Campo 1) IN_GMO
*(Campo 2) IN_SRR_DECLARADO
*(Campo 3) IN_SRR_DECLARADO_2
*(Campo 4) IN_TESTE_SRR_2
*(campo 5) IN_SRR_ORIGEM_PARTIC

    IF i_campo EQ 'IN_GMO' OR
       i_campo EQ 'IN_SRR_DECLARADO' OR
       i_campo EQ 'IN_SRR_DECLARADO_2' OR
       i_campo EQ 'IN_TESTE_SRR_2' OR
       i_campo EQ 'IN_SRR_ORIGEM_PARTIC'.

      SELECT SINGLE * INTO @wa_mara
        FROM mara
       WHERE matnr EQ @me->carga-id_produto.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_mara-matkl
        IMPORTING
          output = wa_mara-matkl.

      CASE wa_mara-matkl.

        WHEN '700330'. "Algodão.
          EXIT.

        WHEN '700170'. "Milho.
          EXIT.

        WHEN '700110'. "Soja.

          IF me->classificacao-in_gmo NE zif_carga=>st_gmo_nao_testado AND i_campo NE 'IN_GMO'.
            IF NOT
              ( ( me->carga-id_branch EQ '0155' OR me->carga-id_branch EQ '0119' OR me->carga-id_branch EQ '0161' ) AND i_campo EQ 'IN_SRR_DECLARADO' ).
              EXIT.
            ENDIF.
          ENDIF.

          IF me->classificacao-in_srr_declarado_2 EQ abap_true AND i_campo NE 'IN_SRR_DECLARADO_2'.
            EXIT.
          ENDIF.

          IF me->classificacao-in_teste_srr_2 NE zif_carga=>st_gmo_nao_testado AND i_campo NE 'IN_TESTE_SRR_2'.
            EXIT.
          ENDIF.

          IF me->classificacao-in_srr_origem_partic EQ abap_true AND ( i_campo NE 'IN_SRR_ORIGEM_PARTIC' AND i_campo NE 'ID_OUTRO_PARTIC' ).
            EXIT.
          ENDIF.

        WHEN OTHERS.
          EXIT.
      ENDCASE.

    ENDIF.

    "Se Ordem de Venda CIF
    IF ( i_campo EQ 'DS_PLACA_TRATOR'   OR
         i_campo EQ 'DS_PLACA_REBOQ_1'  OR
         i_campo EQ 'DS_PLACA_REBOQ_2'  OR
         i_campo EQ 'DS_PLACA_REBOQ_3'  OR
         i_campo EQ 'ID_MOTORISTA'      OR
         i_campo EQ 'ID_PROPRIETARIO' ) AND
       ( me->zif_carga~at_tipo_frete_ordem_venda EQ zif_carga=>st_tp_frete_cif OR me->zif_carga~at_tipo_frete_ordem_venda IS INITIAL ).
      IF NOT ( i_campo EQ 'ID_MOTORISTA' AND me->zif_carga~at_manutencao EQ abap_true ).
        EXIT.
      ENDIF.
    ENDIF.

    IF i_id_entrada IS NOT INITIAL AND i_id_empresa IS NOT INITIAL.

      CASE i_modelo_fiscal.
        WHEN zif_carga=>st_model_fiscal_papel.
          DATA(lc_ck_nfe)  = abap_false.
          DATA(lc_ck_form) = abap_false.
        WHEN zif_carga=>st_model_fiscal_eletronico.
          lc_ck_nfe = abap_true.
      ENDCASE.

      SELECT SINGLE * INTO @DATA(wa_entrada)
        FROM zsdt0001te
       WHERE id_entrada EQ @i_id_entrada
         AND id_empresa EQ @i_id_empresa
         AND ck_nfe     EQ @lc_ck_nfe.

      IF sy-subrc IS INITIAL.
        SELECT SINGLE * INTO @DATA(wa_j_1baa)
          FROM j_1baa
         WHERE nftype EQ @wa_entrada-ct_nota.

        IF wa_j_1baa-form IS NOT INITIAL.
          lc_ck_form = abap_true.
        ENDIF.
      ENDIF.

    ELSE.
      lc_ck_nfe  = abap_false.
      lc_ck_form = abap_false.
    ENDIF.

    IF lc_ck_nfe EQ abap_true AND
       ( i_campo EQ 'NR_FORNECEDOR_IE' OR
         i_campo EQ 'NR_NOTA' OR
         i_campo EQ 'NM_SERIE' OR
         i_campo EQ 'DT_EMISSAO' OR
         i_campo EQ 'DT_VENCIMENTO_FORM' OR
         i_campo EQ 'CFOP' ).
      EXIT.
    ENDIF.

    IF lc_ck_nfe EQ abap_true AND lc_ck_form EQ abap_false AND ( i_campo EQ 'NR_QUANTIDADE' OR i_campo EQ 'NR_VALOR' ).
      EXIT.
    ENDIF.

    IF ( i_campo EQ 'NR_RESULTADO_01' OR
         i_campo EQ 'NR_RESULTADO_02' ) AND
       me->classificacao-in_gmo NE zif_carga=>st_gmo_negativo.
      EXIT.
    ENDIF.

    IF me->classificacao-in_srr_origem_partic EQ abap_false AND
       i_campo EQ 'ID_OUTRO_PARTIC'.
      EXIT.
    ENDIF.

    IF me->zif_carga~at_manutencao EQ abap_true.
      CHECK i_campo EQ 'ID_PROPRIETARIO'   OR
            i_campo EQ 'DS_PLACA_TRATOR'   OR
            i_campo EQ 'DS_PLACA_REBOQ_1'  OR
            i_campo EQ 'DS_PLACA_REBOQ_2'  OR
            i_campo EQ 'DS_PLACA_REBOQ_3'  OR
            i_campo EQ 'ID_MOTORISTA'      OR
            i_campo EQ 'NR_TICKET'         OR
            i_campo EQ 'ID_CLASSIFICADORA' OR
            i_campo EQ 'ID_LOCAL_ENTREGA'  OR
            i_campo EQ 'NM_PESO_BRUTO'     OR
            i_campo EQ 'NM_PESO_TARA'      OR
            i_campo EQ 'NM_PESO_SUBTOTAL'  OR
            i_campo EQ 'ID_ENTRADA'        OR
            i_campo EQ 'ID_FORNECEDOR'     OR
            i_campo EQ 'NR_FORNECEDOR_IE'  OR
            i_campo EQ 'ID_MOD_FISCAL'     OR
            i_campo EQ 'NR_NOTA'           OR
            i_campo EQ 'NR_QUANTIDADE'     OR
            i_campo EQ 'NR_VALOR' OR
            i_campo EQ 'DT_EMISSAO' OR
            i_campo EQ 'DT_VENCIMENTO_FORM' OR
            i_campo EQ 'CFOP' OR
            i_campo EQ 'NM_SERIE' OR
            i_campo EQ 'NR_CHAVE_NFE' OR
            i_campo EQ 'ID_ENTREGUE_POR' OR
            i_campo EQ 'NM_PESO_SUBTOTAL' OR
            i_campo EQ 'ID_OUTRO_PARTIC' OR
            i_campo EQ 'TP_TRANSGENIA' OR
            i_campo EQ 'IN_GMO' OR
            i_campo EQ 'NR_RESULTADO_01' OR
            i_campo EQ 'NR_RESULTADO_02' OR
            i_campo EQ 'NR_RES_RR1_RR2' OR
            i_campo EQ 'IN_GMO_03' OR
            i_campo EQ 'IN_SRR_ORIGEM_PARTIC' OR
            i_campo EQ 'IN_SRR_DECLARADO' OR
            i_campo EQ 'IN_TESTE_SRR' OR
            i_campo EQ 'IN_SRR_DECLARADO_2' OR
            i_campo EQ 'IN_TESTE_SRR_2' OR
            i_campo EQ 'NR_PERC_UMI' OR
            i_campo EQ 'NR_PERC_IMP' OR
            i_campo EQ 'NR_PERC_AVA' OR
            i_campo EQ 'NR_PERC_ARD' OR
            i_campo EQ 'NR_PERC_QUE' OR
            i_campo EQ 'NR_PERC_ESV' OR
            i_campo EQ 'NR_PERC_CAR'.

      e_permitido = abap_true.

    ELSE.
      e_permitido = abap_true.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_ALTERACAO_MANUT_ROMANEIO.

    DATA: LC_ALTEROU_MES         TYPE CHAR01,
          LC_PESO_OLD            TYPE C LENGTH 09,
          LC_PESO                TYPE C LENGTH 09,
          LC_INTEIRO             TYPE I,
          CK_ALTEROU_TAKEUP      TYPE CHAR01,
          CK_ALTERAR_NOTA_FISCAL TYPE CHAR01.

    R_CARGA = ME.

    CK_ALTEROU_TAKEUP = ABAP_FALSE.

    CHECK ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_TRUE.
    CHECK ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
    CHECK ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-CK_PROCESSOU_AJUSTE EQ ABAP_FALSE.

    CLEAR: E_ALTERACOES.

    CREATE OBJECT E_CARGA_ORIGINAL TYPE ZCL_CARGA_RECEBIMENTO.

    E_CARGA_ORIGINAL->SET_REGISTRO( I_ID_CARGA = ME->CARGA-ID_CARGA I_NO_ENQUEUE = ABAP_TRUE ).

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "Carregar Atributos do WorkFlow """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    "Deve Ser Emitido uma Carta de Correção para Alteração de Placa
    IF ME->CARGA-DS_PLACA_TRATOR <> E_CARGA_ORIGINAL->CARGA-DS_PLACA_TRATOR.
      E_CK_ACEITE_FILIAL    = ABAP_TRUE.
      E_ALTERACOES-AL_DS_PLACA_TRATOR = ABAP_TRUE.
      E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado Placa do Veículo de Tração'.
    ENDIF.

    IF ME->CARGA-DS_PLACA_REBOQ_1 <> E_CARGA_ORIGINAL->CARGA-DS_PLACA_REBOQ_1.
      E_CK_ACEITE_FILIAL    = ABAP_TRUE.
      E_ALTERACOES-AL_DS_PLACA_REBOQ_1 = ABAP_TRUE.
      E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado Placa do Reboque 1'.
    ENDIF.

    IF ME->CARGA-DS_PLACA_REBOQ_2 <> E_CARGA_ORIGINAL->CARGA-DS_PLACA_REBOQ_2.
      E_CK_ACEITE_FILIAL    = ABAP_TRUE.
      E_ALTERACOES-AL_DS_PLACA_REBOQ_2 = ABAP_TRUE.
      E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado Placa do Reboque 2'.
    ENDIF.

    IF ME->CARGA-DS_PLACA_REBOQ_3 <> E_CARGA_ORIGINAL->CARGA-DS_PLACA_REBOQ_3.
      E_CK_ACEITE_FILIAL    = ABAP_TRUE.
      E_ALTERACOES-AL_DS_PLACA_REBOQ_3 = ABAP_TRUE.
      E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado Placa do Reboque 3'.
    ENDIF.

    "Deve Ser Emitido uma Carta de Correção para Alteração de Proprietário (NF-e/CT-e)
    "Se For CIF o RNTRC é do Terceiro
    IF ME->CARGA-ID_PROPRIETARIO <> E_CARGA_ORIGINAL->CARGA-ID_PROPRIETARIO
      AND E_CARGA_ORIGINAL->AT_TIPO_FRETE_ORDEM_VENDA EQ ZIF_CARGA=>ST_TP_FRETE_CIF.
      E_CK_ACEITE_FILIAL = ABAP_TRUE.
      E_ALTERACOES-AL_ID_PROPRIETARIO = ABAP_TRUE.
      E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado Proprietário do Conjunto Veicular'.
    ENDIF.

    "Deve Ser Emitido uma Carta de Correção para Alteração de Motorista (CT-e)
    "Se For CIF o RNTRC é do Terceiro
    IF ME->CARGA-ID_MOTORISTA <> E_CARGA_ORIGINAL->CARGA-ID_MOTORISTA.
      E_CK_ACEITE_FILIAL = ABAP_TRUE.
      E_ALTERACOES-AL_ID_MOTORISTA = ABAP_TRUE.
      E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado Motorista'.
    ENDIF.

    "Deve Ser Verificação do Fluxo de Pagamento de Classificação
    IF ME->CLASSIFICACAO-ID_CLASSIFICADORA <> E_CARGA_ORIGINAL->CLASSIFICACAO-ID_CLASSIFICADORA.
      E_CK_ACEITE_FILIAL = ABAP_TRUE.
      E_ALTERACOES-AL_ID_CLASSIFICADORA = ABAP_TRUE.
    ENDIF.

    "Tipo de Trangeníase da Carga
    IF ME->CLASSIFICACAO-TP_TRANSGENIA NE E_CARGA_ORIGINAL->CLASSIFICACAO-TP_TRANSGENIA.
      E_ALTERACOES-AL_TP_TRANSGENIA = ABAP_TRUE.
      E_CK_ACEITE_FILIAL = ABAP_TRUE.
      E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado a Transgenia'.
    ENDIF.

    "Se Alterou Ticket
    IF ME->CARGA-NR_TICKET <> E_CARGA_ORIGINAL->CARGA-NR_TICKET.
      E_CK_ACEITE_FILIAL = ABAP_TRUE.
      E_ALTERACOES-AL_NR_TICKET = ABAP_TRUE.
      E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Ticket'.
    ENDIF.

    "Altera a Entrada
    IF ME->CARGA-ID_LOCAL_ENTREGA <> E_CARGA_ORIGINAL->CARGA-ID_LOCAL_ENTREGA .
      "AND ME->AT_CARGA_ORIGINAL->AT_TIPO_FRETE_ORDEM_VENDA EQ ZIF_CARGA=>ST_TP_FRETE_CIF.
      E_CK_ACEITE_FILIAL = ABAP_TRUE.
      E_ALTERACOES-AL_ID_LOCAL_ENTREGA = ABAP_TRUE.
      E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Local de Entrega'.
    ENDIF.

    "Verificar Alteração de Classificação
    LOOP AT ME->RESULTADO INTO DATA(WA_RESULTADO).
      READ TABLE E_CARGA_ORIGINAL->RESULTADO INTO DATA(WA_RES_ORIGINAL)
      WITH KEY TP_CARACTERISTICA = WA_RESULTADO-TP_CARACTERISTICA.
      IF SY-SUBRC IS INITIAL.

        IF WA_RES_ORIGINAL-NR_PERCENTUAL_COM NE WA_RESULTADO-NR_PERCENTUAL_COM.
          E_CK_ACEITE_FILIAL = ABAP_TRUE.
          CASE WA_RESULTADO-TP_CARACTERISTICA.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
              E_ALTERACOES-AL_NR_PERC_UMI = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Percentual de Umidade'.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
              E_ALTERACOES-AL_NR_PERC_IMP = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Percentual de Impureza'.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
              E_ALTERACOES-AL_NR_PERC_AVA = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Percentual de Avariado'.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
              E_ALTERACOES-AL_NR_PERC_ARD = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Percentual de Ardido'.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
              E_ALTERACOES-AL_NR_PERC_QUE = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Percentual de Quebrado'.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
              E_ALTERACOES-AL_NR_PERC_ESV = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Percentual de Esverdeado'.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
              E_ALTERACOES-AL_NR_PERC_CAR = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Percentual de Carunchado'.
          ENDCASE.
        ENDIF.

        IF WA_RES_ORIGINAL-NR_QUANTIDADE_COM NE WA_RESULTADO-NR_QUANTIDADE_COM.
          E_CK_ACEITE_FILIAL = ABAP_TRUE.
          CASE WA_RESULTADO-TP_CARACTERISTICA.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
              E_ALTERACOES-AL_NR_QTDA_UMI = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado a Quantidade de Desconto de Umidade'.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
              E_ALTERACOES-AL_NR_QTDA_IMP = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado a Quantidade de Desconto de Impureza'.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
              E_ALTERACOES-AL_NR_QTDA_AVA = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado a Quantidade de Desconto de Avariado'.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
              E_ALTERACOES-AL_NR_QTDA_ARD = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado a Quantidade de Desconto de Ardido'.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
              E_ALTERACOES-AL_NR_QTDA_QUE = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado a Quantidade de Desconto de Quebrado'.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
              E_ALTERACOES-AL_NR_QTDA_ESV = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado a Quantidade de Desconto de Esverdeado'.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
              E_ALTERACOES-AL_NR_QTDA_CAR = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado a Quantidade de Desconto de Carunchado'.
          ENDCASE.
        ENDIF.

      ENDIF.
    ENDLOOP.

    "IF E_CK_ACEITE_FISCAL EQ ABAP_TRUE.
      IF E_CARGA_ORIGINAL->CARGA-DT_MOVIMENTO(6) EQ SY-DATUM(6).
        LC_ALTEROU_MES = ABAP_FALSE.
      ELSE.
        LC_ALTEROU_MES = ABAP_TRUE.
      ENDIF.
    "ENDIF.

    DATA(CK_ALTERADO_IMPOSTO) = ABAP_FALSE.

    LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_DOCUMENTO_FISCAL).

      CK_ALTERAR_NOTA_FISCAL = ABAP_FALSE.

      READ TABLE E_CARGA_ORIGINAL->DOCUMENTO_FISCAL WITH KEY ID_CARGA = WA_DOCUMENTO_FISCAL-ID_CARGA
                                                             ID_NOTA  = WA_DOCUMENTO_FISCAL-ID_NOTA
                                                    INTO DATA(WA_DOC_ORIGINAL).
      IF SY-SUBRC IS INITIAL.

        IF WA_DOCUMENTO_FISCAL-ID_ENTRADA NE WA_DOC_ORIGINAL-ID_ENTRADA.
          CK_ALTERAR_NOTA_FISCAL = ABAP_TRUE.
          E_ALTERACOES-AL_ID_ENTRADA = ABAP_TRUE.
          E_CK_ACEITE_FILIAL      = ABAP_TRUE.
          E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Tipo de Entrada da Nota Fiscal ' && WA_DOC_ORIGINAL-NR_NOTA.
          IF LC_ALTEROU_MES EQ ABAP_TRUE.
            E_CK_ACEITE_FISCAL = ABAP_TRUE.
          ENDIF.
        ENDIF.

        IF WA_DOCUMENTO_FISCAL-ID_FORNECEDOR NE WA_DOC_ORIGINAL-ID_FORNECEDOR.
          CK_ALTERAR_NOTA_FISCAL = ABAP_TRUE.
          E_ALTERACOES-AL_ID_FORNECEDOR = ABAP_TRUE.
          E_CK_ACEITE_FILIAL = ABAP_TRUE.
          E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Fornecedor da Nota Fiscal ' && WA_DOC_ORIGINAL-NR_NOTA.
          IF LC_ALTEROU_MES EQ ABAP_TRUE.
            E_CK_ACEITE_FISCAL = ABAP_TRUE.
          ENDIF.
        ENDIF.

        IF WA_DOCUMENTO_FISCAL-ID_MOD_FISCAL NE WA_DOC_ORIGINAL-ID_MOD_FISCAL.
          CK_ALTERAR_NOTA_FISCAL = ABAP_TRUE.
          E_ALTERACOES-AL_ID_MOD_FISCAL = ABAP_TRUE.
          E_CK_ACEITE_FILIAL = ABAP_TRUE.
          E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Modelo do Documento Fiscal da Nota Fiscal ' && WA_DOC_ORIGINAL-NR_NOTA.
          IF LC_ALTEROU_MES EQ ABAP_TRUE.
            E_CK_ACEITE_FISCAL = ABAP_TRUE.
          ENDIF.
        ENDIF.

        IF WA_DOCUMENTO_FISCAL-NR_NOTA NE WA_DOC_ORIGINAL-NR_NOTA.
          CK_ALTERAR_NOTA_FISCAL = ABAP_TRUE.
          E_ALTERACOES-AL_NR_NOTA = ABAP_TRUE.
          E_CK_ACEITE_FILIAL = ABAP_TRUE.
          E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Número da Nota Fiscal ' && WA_DOC_ORIGINAL-NR_NOTA.
          IF LC_ALTEROU_MES EQ ABAP_TRUE.
            E_CK_ACEITE_FISCAL = ABAP_TRUE.
          ENDIF.
        ENDIF.

        IF WA_DOCUMENTO_FISCAL-NM_SERIE NE WA_DOC_ORIGINAL-NM_SERIE.
          CK_ALTERAR_NOTA_FISCAL = ABAP_TRUE.
          E_ALTERACOES-AL_NM_SERIE = ABAP_TRUE.
          E_CK_ACEITE_FILIAL = ABAP_TRUE.
          E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado a Série da Nota Fiscal ' && WA_DOC_ORIGINAL-NR_NOTA.
          IF LC_ALTEROU_MES EQ ABAP_TRUE.
            E_CK_ACEITE_FISCAL = ABAP_TRUE.
          ENDIF.
        ENDIF.

        IF WA_DOCUMENTO_FISCAL-NR_QUANTIDADE NE WA_DOC_ORIGINAL-NR_QUANTIDADE.
          CK_ALTERAR_NOTA_FISCAL = ABAP_TRUE.
          E_ALTERACOES-AL_NR_QUANTIDADE = ABAP_TRUE.
          E_CK_ACEITE_FILIAL = ABAP_TRUE.
          E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado a Quantidade da Nota Fiscal ' && WA_DOC_ORIGINAL-NR_NOTA.
          IF LC_ALTEROU_MES EQ ABAP_TRUE.
            E_CK_ACEITE_FISCAL = ABAP_TRUE.
          ENDIF.
        ENDIF.

        IF WA_DOCUMENTO_FISCAL-NR_VALOR NE WA_DOC_ORIGINAL-NR_VALOR.
          CK_ALTERAR_NOTA_FISCAL = ABAP_TRUE.
          E_ALTERACOES-AL_NR_VALOR = ABAP_TRUE.
          E_CK_ACEITE_FILIAL = ABAP_TRUE.
          E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Valor da Nota Fiscal ' && WA_DOC_ORIGINAL-NR_NOTA.
          IF LC_ALTEROU_MES EQ ABAP_TRUE.
            E_CK_ACEITE_FISCAL = ABAP_TRUE.
          ENDIF.
        ENDIF.

        IF WA_DOCUMENTO_FISCAL-DT_EMISSAO NE WA_DOC_ORIGINAL-DT_EMISSAO.
          CK_ALTERAR_NOTA_FISCAL = ABAP_TRUE.
          E_ALTERACOES-AL_DT_EMISSAO = ABAP_TRUE.
          E_CK_ACEITE_FILIAL = ABAP_TRUE.
          E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado a Data de Emissão da Nota Fiscal ' && WA_DOC_ORIGINAL-NR_NOTA.
          IF LC_ALTEROU_MES EQ ABAP_TRUE.
            E_CK_ACEITE_FISCAL = ABAP_TRUE.
          ENDIF.
        ENDIF.

        IF WA_DOCUMENTO_FISCAL-DT_VENCIMENTO_FORM NE WA_DOC_ORIGINAL-DT_VENCIMENTO_FORM.
          E_ALTERACOES-AL_DT_VENCIMENTO_FORM = ABAP_TRUE.
          E_CK_ACEITE_FILIAL = ABAP_TRUE.
          E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Vencimento do Formulário da Nota Fiscal ' && WA_DOC_ORIGINAL-NR_NOTA.
          IF LC_ALTEROU_MES EQ ABAP_TRUE.
            E_CK_ACEITE_FISCAL = ABAP_TRUE.
          ENDIF.
        ENDIF.

        IF WA_DOCUMENTO_FISCAL-CFOP NE WA_DOC_ORIGINAL-CFOP.
          CK_ALTERAR_NOTA_FISCAL = ABAP_TRUE.
          E_ALTERACOES-AL_CFOP = ABAP_TRUE.
          E_CK_ACEITE_FILIAL = ABAP_TRUE.
          E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o CFOP da Nota Fiscal ' && WA_DOC_ORIGINAL-NR_NOTA.
          IF LC_ALTEROU_MES EQ ABAP_TRUE.
            E_CK_ACEITE_FISCAL = ABAP_TRUE.
          ENDIF.
        ENDIF.

        IF WA_DOCUMENTO_FISCAL-NR_CHAVE_NFE NE WA_DOC_ORIGINAL-NR_CHAVE_NFE.
          CK_ALTERAR_NOTA_FISCAL = ABAP_TRUE.
          E_ALTERACOES-AL_NR_CHAVE_NFE = ABAP_TRUE.
          E_CK_ACEITE_FILIAL = ABAP_TRUE.
          E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado a Chave da NF-e da Nota Fiscal ' && WA_DOC_ORIGINAL-NR_NOTA.
          IF LC_ALTEROU_MES EQ ABAP_TRUE.
            E_CK_ACEITE_FISCAL = ABAP_TRUE.
          ENDIF.
        ENDIF.

        IF WA_DOCUMENTO_FISCAL-ID_ENTREGUE_POR NE WA_DOC_ORIGINAL-ID_ENTREGUE_POR.
          E_ALTERACOES-AL_ID_ENTREGUE_POR = ABAP_TRUE.
          E_CK_ACEITE_FILIAL = ABAP_TRUE.
          E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Entregue por da Nota Fiscal ' && WA_DOC_ORIGINAL-NR_NOTA.
        ENDIF.

        "Verifica alterações de Impostos """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        " Imposto só altera se alterar a nota fiscal """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        IF CK_ALTERAR_NOTA_FISCAL EQ ABAP_TRUE.
          DATA(IT_IMPORTO_ATUAL) = ME->DOCUMENTO_FISCAL_IMP_RET[].
          DATA(IT_IMPORTO_ORIGI) = E_CARGA_ORIGINAL->DOCUMENTO_FISCAL_IMP_RET[].
          DELETE IT_IMPORTO_ATUAL WHERE ID_NOTA NE WA_DOCUMENTO_FISCAL-ID_NOTA.
          DELETE IT_IMPORTO_ORIGI WHERE ID_NOTA NE WA_DOCUMENTO_FISCAL-ID_NOTA.

          DESCRIBE TABLE IT_IMPORTO_ATUAL LINES DATA(QTD_IMP_1).
          DESCRIBE TABLE IT_IMPORTO_ORIGI LINES DATA(QTD_IMP_2).

          IF ( IT_IMPORTO_ATUAL[] IS INITIAL AND IT_IMPORTO_ORIGI[] IS NOT INITIAL ) OR
             ( IT_IMPORTO_ATUAL[] IS NOT INITIAL AND IT_IMPORTO_ORIGI[] IS INITIAL ) OR
             ( QTD_IMP_1 NE QTD_IMP_2 ) OR
            CK_ALTERADO_IMPOSTO = ABAP_TRUE.
            E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado Imposto(s) da(s) nota(s) fiscal(is) '.
          ENDIF.
        ENDIF.

        IF CK_ALTERADO_IMPOSTO EQ ABAP_FALSE AND CK_ALTERAR_NOTA_FISCAL EQ ABAP_TRUE.
          LOOP AT ME->DOCUMENTO_FISCAL_IMP_RET INTO DATA(WA_IMP_RET) WHERE ID_CARGA EQ WA_DOCUMENTO_FISCAL-ID_CARGA
                                                                       AND ID_NOTA  EQ WA_DOCUMENTO_FISCAL-ID_NOTA.

            READ TABLE E_CARGA_ORIGINAL->DOCUMENTO_FISCAL_IMP_RET
            INTO DATA(WA_IMP_RET_ORIGEM)
            WITH KEY ID_CARGA = WA_IMP_RET-ID_CARGA
                     ID_NOTA  = WA_IMP_RET-ID_NOTA
                     ID_LANC_IMPOSTO = WA_IMP_RET-ID_LANC_IMPOSTO.
            IF SY-SUBRC IS INITIAL.
              IF WA_IMP_RET NE WA_IMP_RET_ORIGEM.
                CK_ALTERAR_NOTA_FISCAL = ABAP_TRUE.
                CK_ALTERADO_IMPOSTO = ABAP_TRUE.
                E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado Imposto da nota fiscal ' &&  WA_DOCUMENTO_FISCAL-NR_NOTA.
              ENDIF.
            ELSE.
              CK_ALTERAR_NOTA_FISCAL = ABAP_TRUE.
              CK_ALTERADO_IMPOSTO = ABAP_TRUE.
              E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado Imposto da nota fiscal ' &&  WA_DOCUMENTO_FISCAL-NR_NOTA.
            ENDIF.

          ENDLOOP.
        ENDIF.
        """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

      ELSE.
        E_CK_ACEITE_FILIAL = ABAP_TRUE.
        DATA(DS_DESEMBRAMENTO) = | INCLUIDO documento fiscal em desembramento ( { WA_DOCUMENTO_FISCAL-NR_NOTA }/{ WA_DOCUMENTO_FISCAL-NM_SERIE } ) |.
        E_OBS_ALTERACAO = E_OBS_ALTERACAO && DS_DESEMBRAMENTO.
      ENDIF.

    ENDLOOP.

    LOOP AT E_CARGA_ORIGINAL->DOCUMENTO_FISCAL INTO WA_DOCUMENTO_FISCAL.
      READ TABLE ME->DOCUMENTO_FISCAL WITH KEY ID_CARGA = WA_DOCUMENTO_FISCAL-ID_CARGA
                                               ID_NOTA  = WA_DOCUMENTO_FISCAL-ID_NOTA
                                               TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS NOT INITIAL.
        E_CK_ACEITE_FILIAL = ABAP_TRUE.
        DS_DESEMBRAMENTO = | REMOVIDO documento fiscal em desembramento ( { WA_DOCUMENTO_FISCAL-NR_NOTA }/{ WA_DOCUMENTO_FISCAL-NM_SERIE } ) |.
        E_OBS_ALTERACAO = E_OBS_ALTERACAO && DS_DESEMBRAMENTO.
      ENDIF.
    ENDLOOP.

    IF CK_ALTERAR_NOTA_FISCAL EQ ABAP_TRUE.

      "Verificar se as Notas podem ser estornadas """""""""""""""""""""""""""""""""""""""""""""""""
      """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      DATA(NOTAS) = E_CARGA_ORIGINAL->DOCUMENTO_FISCAL[].
      DELETE NOTAS WHERE DOCNUM IS INITIAL.
      IF NOTAS[] IS NOT INITIAL.
        SELECT * INTO TABLE @DATA(IT_EXPORTACAO)
          FROM ZDOC_NF_PRODUTOR
           FOR ALL ENTRIES IN @NOTAS
         WHERE DOCNUM_PROD EQ @NOTAS-DOCNUM.
      ENDIF.

      IF IT_EXPORTACAO[] IS NOT INITIAL.
        READ TABLE IT_EXPORTACAO INTO DATA(WA_EXPORTACAO) INDEX 1.

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NF_EXPORTADA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_NF_EXPORTADA-MSGNO
                              ATTR1 = WA_EXPORTACAO-DOCNUM_PROD
                              ATTR2 = WA_EXPORTACAO-VBELN )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_NF_EXPORTADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_NF_EXPORTADA-MSGNO
            MSGV1  = CONV #( WA_EXPORTACAO-DOCNUM_PROD )
            MSGV2  = CONV #( WA_EXPORTACAO-VBELN ).
      ENDIF.

    ENDIF.

    LOOP AT ME->ZIF_CARGA~TAKE_UP INTO DATA(WA_TAKE_UP_MANUT).

      READ TABLE E_CARGA_ORIGINAL->TAKE_UP
        INTO DATA(WA_TAKE_UP_ORIGINAL)
        WITH KEY ID_CARGA  = WA_TAKE_UP_MANUT-ID_CARGA
                 ID_NOTA   = WA_TAKE_UP_MANUT-ID_NOTA
                 ID_TAKEUP = WA_TAKE_UP_MANUT-ID_TAKEUP
                 NU_BLOCO  = WA_TAKE_UP_MANUT-NU_BLOCO.

      IF SY-SUBRC IS NOT INITIAL.

        LC_INTEIRO = WA_TAKE_UP_MANUT-QT_VINCULADA.
        WRITE LC_INTEIRO TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.

        E_OBS_ALTERACAO =
        E_OBS_ALTERACAO && ' Incluído Take UP ' &&
        WA_TAKE_UP_MANUT-ID_TAKEUP && ' Bloco ' && WA_TAKE_UP_MANUT-NU_BLOCO &&
        'Quantidade de ' && LC_PESO.
        CK_ALTEROU_TAKEUP = ABAP_TRUE.

      ELSEIF WA_TAKE_UP_MANUT-QT_VINCULADA NE WA_TAKE_UP_ORIGINAL-QT_VINCULADA.

        LC_INTEIRO = WA_TAKE_UP_ORIGINAL-QT_VINCULADA.
        WRITE LC_INTEIRO TO LC_PESO_OLD.
        CONDENSE LC_PESO_OLD NO-GAPS.

        LC_INTEIRO = WA_TAKE_UP_MANUT-QT_VINCULADA.
        WRITE LC_INTEIRO TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.

        E_OBS_ALTERACAO =
        E_OBS_ALTERACAO && ' Alterado Take UP ' &&
        WA_TAKE_UP_MANUT-ID_TAKEUP && ' Bloco ' && WA_TAKE_UP_MANUT-NU_BLOCO &&
        'Quantidade de ' && LC_PESO_OLD && ' para ' && LC_PESO.
        CK_ALTEROU_TAKEUP = ABAP_TRUE.

      ENDIF.

    ENDLOOP.

    LOOP AT E_CARGA_ORIGINAL->TAKE_UP INTO WA_TAKE_UP_ORIGINAL.

      READ TABLE ME->ZIF_CARGA~TAKE_UP
        INTO WA_TAKE_UP_MANUT
        WITH KEY ID_CARGA  = WA_TAKE_UP_ORIGINAL-ID_CARGA
                 ID_NOTA   = WA_TAKE_UP_ORIGINAL-ID_NOTA
                 ID_TAKEUP = WA_TAKE_UP_ORIGINAL-ID_TAKEUP
                 NU_BLOCO  = WA_TAKE_UP_ORIGINAL-NU_BLOCO.

      IF SY-SUBRC IS NOT INITIAL.
        LC_INTEIRO = WA_TAKE_UP_ORIGINAL-QT_VINCULADA.
        WRITE LC_INTEIRO TO LC_PESO.
        CONDENSE LC_PESO NO-GAPS.

        E_OBS_ALTERACAO =
        E_OBS_ALTERACAO && ' Removido Take UP ' &&
        WA_TAKE_UP_ORIGINAL-ID_TAKEUP && ' Bloco ' && WA_TAKE_UP_ORIGINAL-NU_BLOCO &&
        'Quantidade de ' && LC_PESO.
        CK_ALTEROU_TAKEUP = ABAP_TRUE.
      ENDIF.

    ENDLOOP.

    IF CK_ALTERADO_IMPOSTO EQ ABAP_TRUE.
      E_CK_ACEITE_FILIAL = ABAP_TRUE.
    ENDIF.

    "Alterar Peso Bruto
    IF ME->CARGA-NM_PESO_BRUTO NE E_CARGA_ORIGINAL->CARGA-NM_PESO_BRUTO.
      E_ALTERACOES-AL_NM_PESO_BRUTO = ABAP_TRUE.
      E_CK_ACEITE_FILIAL = ABAP_TRUE.
      E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Peso Bruto'.
    ENDIF.

    "Alterar Peso tara
    IF ME->CARGA-NM_PESO_TARA NE E_CARGA_ORIGINAL->CARGA-NM_PESO_TARA.
      E_ALTERACOES-AL_NM_PESO_TARA = ABAP_TRUE.
      E_CK_ACEITE_FILIAL = ABAP_TRUE.
      E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Peso Tara'.
    ENDIF.

    "Alterou SubTotal
    IF ME->CARGA-NM_PESO_SUBTOTAL NE E_CARGA_ORIGINAL->CARGA-NM_PESO_SUBTOTAL.
      E_ALTERACOES-AL_NM_PESO_SUBTOTAL = ABAP_TRUE.
      E_CK_ACEITE_FILIAL = ABAP_TRUE.
      E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Peso SubTotal'.
    ENDIF.

    "Altera Algum Peso de Desconto
    IF ME->CARGA-NM_PESO_DESCONTOS NE E_CARGA_ORIGINAL->CARGA-NM_PESO_DESCONTOS.
      E_ALTERACOES-AL_NM_PESO_DESCONTOS = ABAP_TRUE.
      E_CK_ACEITE_FILIAL = ABAP_TRUE.
      E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado o Peso de Desconto'.
      IF LC_ALTEROU_MES EQ ABAP_TRUE.
        E_CK_ACEITE_COMERCIAL = ABAP_TRUE.
      ENDIF.
    ENDIF.

    "Alteração de Trangeníase
    IF ME->CLASSIFICACAO-IN_GMO               NE E_CARGA_ORIGINAL->CLASSIFICACAO-IN_GMO OR
       ME->CLASSIFICACAO-NR_RESULTADO_01      NE E_CARGA_ORIGINAL->CLASSIFICACAO-NR_RESULTADO_01 OR
       ME->CLASSIFICACAO-NR_RESULTADO_02      NE E_CARGA_ORIGINAL->CLASSIFICACAO-NR_RESULTADO_02 OR
       ME->CLASSIFICACAO-NR_RES_RR1_RR2       NE E_CARGA_ORIGINAL->CLASSIFICACAO-NR_RES_RR1_RR2 OR
       ME->CLASSIFICACAO-IN_GMO_03            NE E_CARGA_ORIGINAL->CLASSIFICACAO-IN_GMO_03 OR
       ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC NE E_CARGA_ORIGINAL->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC OR
       ME->CLASSIFICACAO-ID_OUTRO_PARTIC      NE E_CARGA_ORIGINAL->CLASSIFICACAO-ID_OUTRO_PARTIC OR
       ME->CLASSIFICACAO-IN_SRR_DECLARADO     NE E_CARGA_ORIGINAL->CLASSIFICACAO-IN_SRR_DECLARADO OR
       ME->CLASSIFICACAO-IN_TESTE_SRR         NE E_CARGA_ORIGINAL->CLASSIFICACAO-IN_TESTE_SRR OR
       ME->CLASSIFICACAO-IN_SRR_DECLARADO_2   NE E_CARGA_ORIGINAL->CLASSIFICACAO-IN_SRR_DECLARADO_2 OR
       ME->CLASSIFICACAO-IN_TESTE_SRR_2       NE E_CARGA_ORIGINAL->CLASSIFICACAO-IN_TESTE_SRR_2.

      E_OBS_ALTERACAO = E_OBS_ALTERACAO && ' Alterado a Transgeníase'.

      E_CK_ACEITE_FILIAL = ABAP_TRUE.
      IF LC_ALTEROU_MES EQ ABAP_TRUE.
        E_CK_ACEITE_COMERCIAL = ABAP_TRUE.
      ENDIF.

      IF ME->CLASSIFICACAO-IN_GMO NE E_CARGA_ORIGINAL->CLASSIFICACAO-IN_GMO.
        E_ALTERACOES-AL_IN_GMO = ABAP_TRUE.
      ENDIF.
      IF ME->CLASSIFICACAO-NR_RESULTADO_01 NE E_CARGA_ORIGINAL->CLASSIFICACAO-NR_RESULTADO_01.
        E_ALTERACOES-AL_NR_RESULTADO_01 = ABAP_TRUE.
      ENDIF.
      IF ME->CLASSIFICACAO-NR_RESULTADO_02 NE E_CARGA_ORIGINAL->CLASSIFICACAO-NR_RESULTADO_02.
        E_ALTERACOES-AL_NR_RESULTADO_02 = ABAP_TRUE.
      ENDIF.

      IF ME->CLASSIFICACAO-NR_RES_RR1_RR2 NE E_CARGA_ORIGINAL->CLASSIFICACAO-NR_RES_RR1_RR2.
        E_ALTERACOES-AL_NR_RES_RR1_RR2 = ABAP_TRUE.
      ENDIF.

      IF ME->CLASSIFICACAO-IN_GMO_03 NE E_CARGA_ORIGINAL->CLASSIFICACAO-IN_GMO_03.
        E_ALTERACOES-AL_IN_GMO_03 = ABAP_TRUE.
      ENDIF.

      IF ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC NE E_CARGA_ORIGINAL->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC.
        E_ALTERACOES-AL_IN_SRR_ORIGEM_PARTIC = ABAP_TRUE.
      ENDIF.

      IF ME->CLASSIFICACAO-ID_OUTRO_PARTIC NE E_CARGA_ORIGINAL->CLASSIFICACAO-ID_OUTRO_PARTIC.
        E_ALTERACOES-AL_ID_OUTRO_PARTIC = ABAP_TRUE.
      ENDIF.

      IF ME->CLASSIFICACAO-IN_SRR_DECLARADO NE E_CARGA_ORIGINAL->CLASSIFICACAO-IN_SRR_DECLARADO.
        E_ALTERACOES-AL_IN_SRR_DECLARADO = ABAP_TRUE.
      ENDIF.

      IF ME->CLASSIFICACAO-IN_TESTE_SRR NE E_CARGA_ORIGINAL->CLASSIFICACAO-IN_TESTE_SRR.
        E_ALTERACOES-AL_IN_TESTE_SRR = ABAP_TRUE.
      ENDIF.

      IF ME->CLASSIFICACAO-IN_SRR_DECLARADO_2 NE E_CARGA_ORIGINAL->CLASSIFICACAO-IN_SRR_DECLARADO_2.
        E_ALTERACOES-AL_IN_SRR_DECLARADO_2 = ABAP_TRUE.
      ENDIF.

      IF ME->CLASSIFICACAO-IN_TESTE_SRR_2 NE E_CARGA_ORIGINAL->CLASSIFICACAO-IN_TESTE_SRR_2.
        E_ALTERACOES-AL_IN_TESTE_SRR_2 = ABAP_TRUE.
      ENDIF.

    ENDIF.

    IF E_CK_ACEITE_COMERCIAL EQ ABAP_FALSE AND
       E_CK_ACEITE_FILIAL    EQ ABAP_FALSE AND
       E_CK_ACEITE_FISCAL    EQ ABAP_FALSE AND
       CK_ALTEROU_TAKEUP     EQ ABAP_FALSE.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_NAO_ALTERA_ORIGINAL-MSGID
                            MSGNO  = ZCX_CARGA=>ZCX_NAO_ALTERA_ORIGINAL-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_NAO_ALTERA_ORIGINAL-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_NAO_ALTERA_ORIGINAL-MSGNO.
    ENDIF.

    E_CK_ACEITE_FILIAL = ABAP_TRUE.

    "Verificar se Alterar TakeUp é para enviar para comercial
    "CK_ALTEROU_TAKEUP

    IF E_CK_ACEITE_FISCAL EQ ABAP_TRUE AND LC_ALTEROU_MES EQ ABAP_TRUE.
      CONCATENATE 'Movimento terá alteração de período de' E_CARGA_ORIGINAL->CARGA-DT_MOVIMENTO(6) 'para' SY-DATUM(6) INTO E_OBS_ALTERACAO SEPARATED BY SPACE.
    ENDIF.

    CONDENSE E_OBS_ALTERACAO.

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_BLOQ_LOTE_MATERIAL_WAIT.

    DATA: I_GNAME TYPE SEQG3-GNAME,
          I_GARG  TYPE SEQG3-GARG,
          IT_ENQ  TYPE TABLE OF SEQG3.

    DATA: I_TEXTO       TYPE STRING,
          I_TEMPO       TYPE I,
          LC_TEXTO      TYPE STRING,
          LC_NUMERO     TYPE CHAR30,
          I_TEXT_WAIT   TYPE STRING,
          LC_ID_PRODUTO TYPE MATNR.

    R_CARGA = ME.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = ME->CARGA-ID_PRODUTO
      IMPORTING
        OUTPUT = LC_ID_PRODUTO.

    I_GNAME = 'MCH1'.
    CONCATENATE SY-MANDT ME->CARGA-ID_PRODUTO ME->CARGA-NR_SAFRA INTO I_GARG.

    CALL FUNCTION 'ENQUEUE_READ'
      EXPORTING
        GCLIENT               = SY-MANDT
        GNAME                 = I_GNAME
        GARG                  = I_GARG
        GUNAME                = SPACE
      TABLES
        ENQ                   = IT_ENQ
      EXCEPTIONS
        COMMUNICATION_FAILURE = 1
        SYSTEM_FAILURE        = 2
        OTHERS                = 3.

    IF SY-SUBRC IS INITIAL AND IT_ENQ[] IS NOT INITIAL.
      READ TABLE IT_ENQ INTO DATA(WA_ENQ) INDEX 1.
      IF SY-BATCH NE ABAP_TRUE.
        CONCATENATE 'Aguarde, Lote:' ME->CARGA-NR_SAFRA 'Material:' LC_ID_PRODUTO 'bloqueados!' WA_ENQ-GUNAME WA_ENQ-GTCODE INTO I_TEXT_WAIT SEPARATED BY SPACE.

        LC_NUMERO = 0.
        LC_TEXTO  = I_TEXT_WAIT && ' Segundos: ' && LC_NUMERO.
        CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
          EXPORTING
            PERCENTAGE = 0
            TEXT       = LC_TEXTO.
      ENDIF.
    ENDIF.

    CHECK IT_ENQ[] IS NOT INITIAL.

    I_TEMPO = 0.

    WHILE IT_ENQ[] IS NOT INITIAL.

      WAIT UP TO 1 SECONDS.
      ADD 1 TO I_TEMPO.

      CALL FUNCTION 'TH_REDISPATCH'.

      WRITE I_TEMPO TO LC_NUMERO.
      CONDENSE LC_NUMERO NO-GAPS.

      IF SY-BATCH NE ABAP_TRUE.
        READ TABLE IT_ENQ INTO WA_ENQ INDEX 1.
        CONCATENATE 'Aguarde, Lote:' ME->CARGA-NR_SAFRA 'Material:' LC_ID_PRODUTO 'bloqueados!' WA_ENQ-GUNAME WA_ENQ-GTCODE INTO I_TEXT_WAIT SEPARATED BY SPACE.
        LC_TEXTO = I_TEXT_WAIT && ' Segundos: ' && LC_NUMERO.
        CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
          EXPORTING
            PERCENTAGE = 0
            TEXT       = LC_TEXTO.
      ENDIF.

      CLEAR: IT_ENQ[].
      CALL FUNCTION 'ENQUEUE_READ'
        EXPORTING
          GCLIENT               = SY-MANDT
          GNAME                 = I_GNAME
          GARG                  = I_GARG
        TABLES
          ENQ                   = IT_ENQ
        EXCEPTIONS
          COMMUNICATION_FAILURE = 1
          SYSTEM_FAILURE        = 2
          OTHERS                = 3.

    ENDWHILE.

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_CK_PLUMA_NOTA_FISCAL.

    DATA: LC_QUANTIDADE TYPE LFIMG.
    DATA: LC_FARDOS     TYPE ZDE_NM_FARDOS.
    DATA: LV_TEXTO TYPE C LENGTH 17.
    DATA: PS_VALOR TYPE P LENGTH 16.

    R_CARGA = ME.

    SELECT SINGLE * INTO @DATA(WA_MARA)
      FROM MARA
     WHERE MATNR EQ @ME->CARGA-ID_PRODUTO.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = WA_MARA-MATKL
      IMPORTING
        OUTPUT = WA_MARA-MATKL.

    CHECK WA_MARA-MATKL EQ ZIF_CARGA=>ST_GRUPO_ALGODAO_PLUMA. "Algodão
    CHECK ME->CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.

    LOOP AT ME->ZIF_CARGA~DOCUMENTO_FISCAL INTO DATA(WA_NOTA_FISCAL).

      LC_QUANTIDADE = REDUCE NTGEW_15( INIT I TYPE NTGEW_15 FOR LS IN ME->ZIF_CARGA~BLOCOS NEXT I = I + LS-PS_FARDOS_LIQUI ).
      LC_FARDOS     = REDUCE ZDE_NM_FARDOS( INIT B TYPE ZDE_NM_FARDOS FOR LS IN ME->ZIF_CARGA~BLOCOS NEXT B = B + LS-QT_FARDOS ).

      IF LC_QUANTIDADE IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_WITHOUT_TAKE_BLOCO-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_NOTA_WITHOUT_TAKE_BLOCO-MSGNO
                              ATTR1 = CONV #( WA_NOTA_FISCAL-NR_NOTA ) )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_NOTA_WITHOUT_TAKE_BLOCO-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_NOTA_WITHOUT_TAKE_BLOCO-MSGID
            MSGV1  = CONV #( WA_NOTA_FISCAL-NR_NOTA ).
      ENDIF.

      IF LC_FARDOS IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_WITHOUT_FARDO-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_NOTA_WITHOUT_FARDO-MSGNO
                              ATTR1 = CONV #( WA_NOTA_FISCAL-NR_NOTA ) )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_NOTA_WITHOUT_FARDO-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_NOTA_WITHOUT_FARDO-MSGID
            MSGV1  = CONV #( WA_NOTA_FISCAL-NR_NOTA ).
      ENDIF.

      WRITE WA_NOTA_FISCAL-NR_QUANTIDADE TO LV_TEXTO.
      CONDENSE LV_TEXTO NO-GAPS.

      IF LC_QUANTIDADE GT WA_NOTA_FISCAL-NR_QUANTIDADE.

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_ACIMA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_ACIMA-MSGNO
                              ATTR1 = CONV #( WA_NOTA_FISCAL-NR_NOTA )
                              ATTR2 = LV_TEXTO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_ACIMA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_ACIMA-MSGID
            MSGV1  = CONV #( WA_NOTA_FISCAL-NR_NOTA )
            MSGV2  = CONV #( LV_TEXTO ).

      ELSEIF LC_QUANTIDADE NE WA_NOTA_FISCAL-NR_QUANTIDADE.

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_DIFER-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_DIFER-MSGNO
                              ATTR1 = CONV #( WA_NOTA_FISCAL-NR_NOTA )
                              ATTR2 = LV_TEXTO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_DIFER-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_DIFER-MSGID
            MSGV1  = CONV #( WA_NOTA_FISCAL-NR_NOTA )
            MSGV2  = CONV #( LV_TEXTO ).

      ENDIF.

      WRITE WA_NOTA_FISCAL-NR_FARDO TO LV_TEXTO.
      CONDENSE LV_TEXTO NO-GAPS.

      IF LC_FARDOS GT WA_NOTA_FISCAL-NR_FARDO.

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_FARDOS_ACIMA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_NOTA_FARDOS_ACIMA-MSGNO
                              ATTR1 = CONV #( WA_NOTA_FISCAL-NR_NOTA )
                              ATTR2 = LV_TEXTO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_NOTA_FARDOS_ACIMA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_NOTA_FARDOS_ACIMA-MSGID
            MSGV1  = CONV #( WA_NOTA_FISCAL-NR_NOTA )
            MSGV2  = CONV #( LV_TEXTO ).

      ELSEIF LC_FARDOS NE WA_NOTA_FISCAL-NR_FARDO.

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_FARDOS_DIFER-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_NOTA_FARDOS_DIFER-MSGNO
                              ATTR1 = CONV #( WA_NOTA_FISCAL-NR_NOTA )
                              ATTR2 = LV_TEXTO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_NOTA_FARDOS_DIFER-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_NOTA_FARDOS_DIFER-MSGID
            MSGV1  = CONV #( WA_NOTA_FISCAL-NR_NOTA )
            MSGV2  = CONV #( LV_TEXTO ).

      ENDIF.

      LC_QUANTIDADE = 0.
      LC_FARDOS = 0.

      LC_QUANTIDADE = REDUCE NTGEW_15( INIT I TYPE NTGEW_15 FOR OV IN ME->ZIF_CARGA~ORDEM_VENDA NEXT I = I + OV-NM_PESO_LIQUIDO ).
      LC_FARDOS = REDUCE ZDE_NM_FARDOS( INIT B TYPE ZDE_NM_FARDOS FOR OF IN ME->ZIF_CARGA~ORDEM_VENDA NEXT B = B + OF-QT_FARDOS ).

      WRITE WA_NOTA_FISCAL-NR_QUANTIDADE TO LV_TEXTO.
      CONDENSE LV_TEXTO NO-GAPS.

      IF LC_QUANTIDADE GT WA_NOTA_FISCAL-NR_QUANTIDADE.

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_ACIMA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_ACIMA-MSGNO
                              ATTR1 = CONV #( WA_NOTA_FISCAL-NR_NOTA )
                              ATTR2 = LV_TEXTO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_ACIMA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_ACIMA-MSGID
            MSGV1  = CONV #( WA_NOTA_FISCAL-NR_NOTA )
            MSGV2  = CONV #( LV_TEXTO ).

      ELSEIF LC_QUANTIDADE NE WA_NOTA_FISCAL-NR_QUANTIDADE.

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_DIFER-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_DIFER-MSGNO
                              ATTR1 = CONV #( WA_NOTA_FISCAL-NR_NOTA )
                              ATTR2 = LV_TEXTO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_DIFER-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_NOTA_TAKE_BLOCO_DIFER-MSGID
            MSGV1  = CONV #( WA_NOTA_FISCAL-NR_NOTA )
            MSGV2  = CONV #( LV_TEXTO ).

      ENDIF.

      WRITE WA_NOTA_FISCAL-NR_FARDO TO LV_TEXTO.
      CONDENSE LV_TEXTO NO-GAPS.

      IF LC_FARDOS GT WA_NOTA_FISCAL-NR_FARDO.

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_FARDOS_ACIMA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_NOTA_FARDOS_ACIMA-MSGNO
                              ATTR1 = CONV #( WA_NOTA_FISCAL-NR_NOTA )
                              ATTR2 = LV_TEXTO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_NOTA_FARDOS_ACIMA-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_NOTA_FARDOS_ACIMA-MSGID
            MSGV1  = CONV #( WA_NOTA_FISCAL-NR_NOTA )
            MSGV2  = CONV #( LV_TEXTO ).

      ELSEIF LC_FARDOS NE WA_NOTA_FISCAL-NR_FARDO.

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_NOTA_FARDOS_DIFER-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_NOTA_FARDOS_DIFER-MSGNO
                              ATTR1 = CONV #( WA_NOTA_FISCAL-NR_NOTA )
                              ATTR2 = LV_TEXTO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_NOTA_FARDOS_DIFER-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_NOTA_FARDOS_DIFER-MSGID
            MSGV1  = CONV #( WA_NOTA_FISCAL-NR_NOTA )
            MSGV2  = CONV #( LV_TEXTO ).

      ENDIF.

    ENDLOOP.

    "Verificar Saldo Bloco """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "Verificar Saldo Bloco """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    DATA(LC_BLOCOS) = ME->ZIF_CARGA~BLOCOS[].
    SORT LC_BLOCOS BY ZSEQ_INST OBJEK OBJECTTABLE.
    DELETE ADJACENT DUPLICATES FROM LC_BLOCOS COMPARING ZSEQ_INST OBJEK OBJECTTABLE.

    LOOP AT LC_BLOCOS INTO DATA(WA_BLOCOS).

      WA_BLOCOS-QT_FARDOS       = 0.
      WA_BLOCOS-PS_FARDOS_LIQUI = 0.
      WA_BLOCOS-PS_FARDOS_BRUTO = 0.

      LOOP AT ME->ZIF_CARGA~BLOCOS INTO DATA(WA_BLOCO_CARGA)
        WHERE ZSEQ_INST EQ WA_BLOCOS-ZSEQ_INST
          AND OBJEK EQ WA_BLOCOS-OBJEK
          AND OBJECTTABLE EQ WA_BLOCOS-OBJECTTABLE.

        ADD WA_BLOCO_CARGA-QT_FARDOS       TO WA_BLOCOS-QT_FARDOS.
        ADD WA_BLOCO_CARGA-PS_FARDOS_LIQUI TO WA_BLOCOS-PS_FARDOS_LIQUI.
        ADD WA_BLOCO_CARGA-PS_FARDOS_BRUTO TO WA_BLOCOS-PS_FARDOS_BRUTO.
      ENDLOOP.

      "Busca Utilização de Fardos
      SELECT FD~QT_FARDOS, FD~PS_FARDOS_LIQUI, FD~PS_FARDOS_BRUTO
        INTO TABLE @DATA(IT_ZSDT0001FD)
        FROM ZSDT0001FD AS FD
        INNER JOIN ZSDT0001CG AS CG ON CG~ID_CARGA EQ FD~ID_CARGA
       WHERE FD~ZSEQ_INST    EQ @WA_BLOCOS-ZSEQ_INST
         AND FD~OBJEK        EQ @WA_BLOCOS-OBJEK
         AND FD~OBJECTTABLE  EQ @WA_BLOCOS-OBJECTTABLE
         AND FD~ID_CARGA     NE @ME->CARGA-ID_CARGA
         AND CG~TP_STATUS    NE @ZIF_CARGA=>ST_STATUS_CANCELADA.

      LOOP AT IT_ZSDT0001FD INTO DATA(WA_UTILIZADO).
        WA_BLOCOS-QT_FARDOS       = WA_BLOCOS-QT_FARDOS       + WA_UTILIZADO-QT_FARDOS.
        WA_BLOCOS-PS_FARDOS_LIQUI = WA_BLOCOS-PS_FARDOS_LIQUI + WA_UTILIZADO-PS_FARDOS_LIQUI.
        WA_BLOCOS-PS_FARDOS_BRUTO = WA_BLOCOS-PS_FARDOS_BRUTO + WA_UTILIZADO-PS_FARDOS_BRUTO.
      ENDLOOP.

      "Cadastro do Bloco/Fardos
      SELECT SINGLE * INTO @DATA(WA_ZSDT0045)
        FROM ZSDT0045
       WHERE ZSEQ_INST    EQ @WA_BLOCOS-ZSEQ_INST
         AND OBJEK        EQ @WA_BLOCOS-OBJEK
         AND OBJECTTABLE  EQ @WA_BLOCOS-OBJECTTABLE.

      IF SY-SUBRC IS NOT INITIAL.
        "Bloco não encontrado
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_BLOCO_NAO_ENCONTRADO-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_BLOCO_NAO_ENCONTRADO-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_BLOCO_NAO_ENCONTRADO-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_BLOCO_NAO_ENCONTRADO-MSGID.
      ENDIF.

      IF WA_BLOCOS-QT_FARDOS GT WA_ZSDT0045-QUANTIDADE.

        "Saldo Fardos do Bloco
        PS_VALOR = WA_ZSDT0045-QUANTIDADE.
        WRITE PS_VALOR TO SY-MSGV1.
        CONDENSE SY-MSGV1 NO-GAPS.

        "Fardos a Utilizar
        WRITE WA_BLOCOS-QT_FARDOS TO SY-MSGV2.
        CONDENSE SY-MSGV2 NO-GAPS.

        "Quantidade de Blocos passou da quantidade negociada
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_BLOCO_SALDO_FARDO-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_BLOCO_SALDO_FARDO-MSGNO
                              ATTR1 = SY-MSGV1
                              ATTR2 = SY-MSGV2 )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_BLOCO_SALDO_FARDO-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_BLOCO_SALDO_FARDO-MSGID
            MSGV1  = SY-MSGV1
            MSGV2  = SY-MSGV2.

      ENDIF.

      IF WA_BLOCOS-PS_FARDOS_LIQUI GT WA_ZSDT0045-BTGEW.

        "Saldo Peso do Bloco
        PS_VALOR = WA_ZSDT0045-BTGEW.
        WRITE PS_VALOR TO SY-MSGV1.
        CONDENSE SY-MSGV1 NO-GAPS.

        "Peso a Utilizar
        PS_VALOR = WA_BLOCOS-PS_FARDOS_LIQUI.
        WRITE PS_VALOR TO SY-MSGV2.
        CONDENSE SY-MSGV2 NO-GAPS.

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_BLOCO_SALDO_PESO-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_BLOCO_SALDO_PESO-MSGNO
                              ATTR1 = SY-MSGV1
                              ATTR2 = SY-MSGV2 )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_BLOCO_SALDO_PESO-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_BLOCO_SALDO_PESO-MSGID
            MSGV1  = SY-MSGV1
            MSGV2  = SY-MSGV2.

      ENDIF.

    ENDLOOP.
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_CK_SALDO_TAKEUP_BLOCO.

    R_CARGA = ME.

*    TYPES BEGIN OF TY_TOTAL.
*    TYPES: ID_TAKEUP TYPE ZDE_ID_TAKEUP.
*    TYPES: NU_BLOCO TYPE ZDE_NM_BLOCO_ALGODAO.
*    TYPES: QT_VINCULADA TYPE ZDE_QTD_VINC_ALGODAO.
*    TYPES END OF TY_TOTAL.
*
*    DATA: IT_TOTAL TYPE TABLE OF TY_TOTAL.
*
*    SELECT SINGLE * INTO @DATA(WA_MARA)
*      FROM MARA
*     WHERE MATNR EQ @ME->CARGA-ID_PRODUTO.
*
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*      EXPORTING
*        INPUT  = WA_MARA-MATKL
*      IMPORTING
*        OUTPUT = WA_MARA-MATKL.
*
*    CHECK WA_MARA-MATKL EQ ZIF_CARGA=>ST_GRUPO_ALGODAO_PLUMA. "Algodão
*
*    LOOP AT ME->ZIF_CARGA~TAKE_UP INTO DATA(WA_TAKE_UP).
*      READ TABLE IT_TOTAL ASSIGNING FIELD-SYMBOL(<FS_TAKEUP>)
*      WITH KEY ID_TAKEUP = WA_TAKE_UP-ID_TAKEUP
*               NU_BLOCO  = WA_TAKE_UP-NU_BLOCO.
*      IF SY-SUBRC IS INITIAL.
*        ADD WA_TAKE_UP-QT_VINCULADA TO <FS_TAKEUP>-QT_VINCULADA.
*      ELSE.
*        APPEND VALUE #(
*                 ID_TAKEUP = WA_TAKE_UP-ID_TAKEUP
*                 NU_BLOCO = WA_TAKE_UP-NU_BLOCO
*                 QT_VINCULADA = WA_TAKE_UP-QT_VINCULADA
*        ) TO IT_TOTAL.
*      ENDIF.
*    ENDLOOP.
*
*    IF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_TRUE. "Etapa 1
*      "Momento Solicitando uma Manutenção
*      "SALDO_FINAL = QTD_OLD - QTD_NEW + SALDO_NOW
*      "SALDO_FINAL <= SALDO_NOW OK!
*
*
*    ELSEIF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE AND ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA = ABAP_FALSE. "Etapa 2
*      "Primeiro Lançamento
*      "SALDO_FINAL = SALDO_NOW - QTD_NEW
*      "SALDO_FINAL >= 0 SALDO OK
*
*    ELSEIF ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE AND ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA = ABAP_TRUE.
*      "Executando Manutenção (Validou o Saldo na Etapa 1) não precisar fazer novamente
*
*    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_ESTORNO_PENDENTE.

    DATA: RG_ST_ESTORNO  TYPE RANGE OF ZDE_STATUS_ESTORNO.

    R_CARGA = ME.

    RG_ST_ESTORNO = VALUE #( SIGN = 'I' OPTION = 'EQ'
                             ( LOW = ZIF_CARGA=>ST_STATUS_ESTORNO_SOLICITADO  HIGH = ZIF_CARGA=>ST_STATUS_ESTORNO_SOLICITADO )
                             ( LOW = ZIF_CARGA=>ST_STATUS_ESTORNO_ERRO        HIGH = ZIF_CARGA=>ST_STATUS_ESTORNO_ERRO ) ).

    SELECT * INTO TABLE @DATA(IT_ENTRADA)
      FROM ZMMT_EE_ZGR
     WHERE ID_CARGA   EQ @ME->CARGA-ID_CARGA
       AND ST_ESTORNO IN @RG_ST_ESTORNO.

    IF IT_ENTRADA[] IS NOT INITIAL.
      LOOP AT IT_ENTRADA INTO DATA(WA_ENTRADA_ESTORNO).
        CASE WA_ENTRADA_ESTORNO-ST_ESTORNO.
          WHEN ZIF_CARGA=>ST_STATUS_ESTORNO_SOLICITADO.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_PENDENTE-MSGID
                                  MSGNO = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_PENDENTE-MSGNO )
                MSGTY  = 'E'
                MSGID  = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_PENDENTE-MSGID
                MSGNO  = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_PENDENTE-MSGNO.
          WHEN ZIF_CARGA=>ST_STATUS_ESTORNO_ERRO.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_ERRO-MSGID
                                  MSGNO = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_ERRO-MSGNO )
                MSGTY  = 'E'
                MSGID  = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_ERRO-MSGID
                MSGNO  = ZCX_CARGA=>ZCX_EXISTE_ESTORNO_ERRO-MSGNO.
        ENDCASE.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_ORDEM_CARREGAMENTO.

    DATA: TB_ORDENS TYPE TABLE OF ZDE_ID_ORDEM.

    R_CARGA = ME.

    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM) WHERE ID_ORDEM IS NOT INITIAL .
      APPEND WA_ORDEM-ID_ORDEM TO TB_ORDENS.
    ENDLOOP.

    IF I_ORDEM IS INITIAL AND ME->CARGA-ID_ORDEM IS NOT INITIAL.
      APPEND ME->CARGA-ID_ORDEM TO TB_ORDENS.
    ELSEIF I_ORDEM IS NOT INITIAL.
      APPEND I_ORDEM-ID_ORDEM TO TB_ORDENS.
    ENDIF.

    LOOP AT TB_ORDENS INTO DATA(WA_ORDEM_VERIF).

      DATA(LC_ORDEM) = ZCL_ORDEM_CARREGAMENTO=>BUSCA_ORDEM_CARREGAMENTO( I_ID_ORDEM  = WA_ORDEM_VERIF ).

      IF LC_ORDEM-NR_SAFRA NE ME->CARGA-NR_SAFRA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_CARGA_SAFRA-MSGID MSGNO = ZCX_CARGA=>ZCX_ORDEM_CARGA_SAFRA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_ORDEM_CARGA_SAFRA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ORDEM_CARGA_SAFRA-MSGNO.
      ENDIF.

      IF LC_ORDEM-ID_BUKRS NE ME->CARGA-ID_BUKRS.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_CARGA_EMPRESA-MSGID MSGNO = ZCX_CARGA=>ZCX_ORDEM_CARGA_EMPRESA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_ORDEM_CARGA_EMPRESA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ORDEM_CARGA_EMPRESA-MSGNO.
      ENDIF.

      IF LC_ORDEM-ID_BRANCH NE ME->CARGA-ID_BRANCH.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_CARGA_FILIAL-MSGID MSGNO = ZCX_CARGA=>ZCX_ORDEM_CARGA_FILIAL-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_ORDEM_CARGA_FILIAL-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ORDEM_CARGA_FILIAL-MSGNO.
      ENDIF.

      IF LC_ORDEM-DT_VALIDADE LT SY-DATLO AND LC_ORDEM-DT_VALIDADE LT SY-DATUM
          AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE
          AND ME->ZIF_CARGA~CK_EXECUTAR_MANUTENCAO_ENTRADA EQ ABAP_FALSE.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_VENCIDA-MSGID MSGNO = ZCX_CARGA=>ZCX_ORDEM_VENCIDA-MSGNO ATTR1 = CONV #( LC_ORDEM-DT_VALIDADE ) )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_ORDEM_VENCIDA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ORDEM_VENCIDA-MSGNO
            MSGV1  = CONV #( LC_ORDEM-DT_VALIDADE ).
      ENDIF.

      CHECK I_CK_VERIFICAR_CARGA EQ ABAP_TRUE.

      DATA: LC_ID_AGENT_FRETE TYPE ZDE_ID_AGENT_FRETE.

      LC_ID_AGENT_FRETE = LC_ORDEM-ID_BRANCH_AG.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = LC_ID_AGENT_FRETE
        IMPORTING
          OUTPUT = LC_ID_AGENT_FRETE.

      IF LC_ID_AGENT_FRETE        NE ME->CARGA-ID_AGENT_FRETE  AND
         ME->CARGA-ID_AGENT_FRETE NE ME->CARGA-ID_PROPRIETARIO AND
         ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_EMPRESAAG-MSGID MSGNO = ZCX_CARGA=>ZCX_ORDEM_EMPRESAAG-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_ORDEM_EMPRESAAG-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ORDEM_EMPRESAAG-MSGNO.
      ENDIF.

      IF LC_ORDEM-ID_PRODUTO NE ME->CARGA-ID_PRODUTO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_PRODUTO-MSGID MSGNO = ZCX_CARGA=>ZCX_ORDEM_PRODUTO-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_ORDEM_PRODUTO-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ORDEM_PRODUTO-MSGNO.
      ENDIF.

      IF LC_ORDEM-DS_PLACA_TRATOR NE ME->CARGA-DS_PLACA_TRATOR AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE AND ME->CARGA-DS_PLACA_TRATOR IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PLACA_TRATOR-MSGID MSGNO = ZCX_CARGA=>ZCX_PLACA_TRATOR-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_PLACA_TRATOR-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_PLACA_TRATOR-MSGNO.
      ENDIF.

      IF LC_ORDEM-DS_PLACA_REBOQ_1 NE ME->CARGA-DS_PLACA_REBOQ_1 AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE AND ME->CARGA-DS_PLACA_REBOQ_1 IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PLACA_REBOQUE1-MSGID MSGNO = ZCX_CARGA=>ZCX_PLACA_REBOQUE1-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_PLACA_REBOQUE1-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_PLACA_REBOQUE1-MSGNO.
      ENDIF.

      IF LC_ORDEM-DS_PLACA_REBOQ_2 NE ME->CARGA-DS_PLACA_REBOQ_2 AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE AND ME->CARGA-DS_PLACA_REBOQ_2 IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PLACA_REBOQUE2-MSGID MSGNO = ZCX_CARGA=>ZCX_PLACA_REBOQUE2-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_PLACA_REBOQUE2-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_PLACA_REBOQUE2-MSGNO.
      ENDIF.

      IF LC_ORDEM-DS_PLACA_REBOQ_3 NE ME->CARGA-DS_PLACA_REBOQ_3 AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE AND ME->CARGA-DS_PLACA_REBOQ_3 IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PLACA_REBOQUE3-MSGID MSGNO = ZCX_CARGA=>ZCX_PLACA_REBOQUE3-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_PLACA_REBOQUE3-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_PLACA_REBOQUE3-MSGNO.
      ENDIF.

      IF LC_ORDEM-ID_MOTORISTA NE ME->CARGA-ID_MOTORISTA AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE AND ME->CARGA-ID_MOTORISTA IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_MOTORISTA-MSGID MSGNO = ZCX_CARGA=>ZCX_ORDEM_MOTORISTA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_ORDEM_MOTORISTA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ORDEM_MOTORISTA-MSGNO.
      ENDIF.

      IF LC_ORDEM-ID_PROPRIETARIO NE ME->CARGA-ID_PROPRIETARIO AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE AND ME->CARGA-ID_PROPRIETARIO IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_PROPRIETARIO-MSGID MSGNO = ZCX_CARGA=>ZCX_ORDEM_PROPRIETARIO-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_ORDEM_PROPRIETARIO-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ORDEM_PROPRIETARIO-MSGNO.
      ENDIF.

      "Fornecedor
      IF LC_ORDEM-ID_LOCAL_DESTINO NE ME->CARGA-ID_LOCAL_DESTINO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_DESTINO-MSGID MSGNO = ZCX_CARGA=>ZCX_ORDEM_DESTINO-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_ORDEM_DESTINO-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ORDEM_DESTINO-MSGNO.
      ENDIF.

      "Destino
      IF LC_ORDEM-ID_LOCAL_DESCARGA NE ME->CARGA-ID_LOCAL_DESCARGA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_DESCARGA-MSGID MSGNO = ZCX_CARGA=>ZCX_ORDEM_DESCARGA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_ORDEM_DESCARGA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ORDEM_DESCARGA-MSGNO.
      ENDIF.

      "Ponto de Coleta
      IF LC_ORDEM-ID_LOCAL_COLETA NE ME->CARGA-ID_LOCAL_COLETA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_COLETA-MSGID MSGNO = ZCX_CARGA=>ZCX_ORDEM_COLETA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_ORDEM_COLETA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ORDEM_COLETA-MSGNO.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_PESO_NOTAS.

    DATA: RG_ID_CARGA  TYPE RANGE OF ZDE_ID_CARGA,
          TX_QTD_CARGA TYPE C LENGTH 15,
          TX_QTD_NOTA  TYPE C LENGTH 15.

    DATA: LC_PESO_NOTAS TYPE ZSDT0001NT-NR_QUANTIDADE.

    LC_PESO_NOTAS = 0.
    LOOP AT ME->ZIF_CARGA~DOCUMENTO_FISCAL INTO DATA(WA_NOTA).
      ADD WA_NOTA-NR_QUANTIDADE TO LC_PESO_NOTAS.
    ENDLOOP.

    IF ME->CARGA-NM_PESO_SUBTOTAL NE LC_PESO_NOTAS.
      WRITE ME->CARGA-NM_PESO_SUBTOTAL TO TX_QTD_CARGA.
      WRITE LC_PESO_NOTAS TO TX_QTD_NOTA.
      CONDENSE TX_QTD_CARGA NO-GAPS.
      CONDENSE TX_QTD_NOTA NO-GAPS.
      "218 Ticket Pesagem &1 já Utilizado para o Produtor &2 e Safra &3!
      MESSAGE W227 WITH TX_QTD_CARGA TX_QTD_NOTA.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_SALDO_ORDEM_VENDA.

    DATA: LC_SALDO_OV  TYPE KWMENG,
          TX_QTD_SALDO TYPE C LENGTH 20,
          TX_QTD_LIQUI TYPE C LENGTH 20.

    CHECK ME->ZIF_CARGA~ORDEM_VENDA[] IS NOT INITIAL.

    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM).
      LC_SALDO_OV = 0.
      TRY .
          ZCL_ORDEM_VENDA=>ZIF_ORDEM_VENDA~GET_ORDEM_VENDA_SALDO(
            EXPORTING
              I_VBELN = WA_ORDEM-NR_ORDEM_VENDA
            IMPORTING
              E_SALDO = DATA(E_SALDO) ).

          ADD E_SALDO TO LC_SALDO_OV.
        CATCH ZCX_ORDEM_VENDA .
      ENDTRY.
    ENDLOOP.

    IF LC_SALDO_OV LT ME->CARGA-NM_PESO_LIQUIDO.
      WRITE LC_SALDO_OV TO TX_QTD_SALDO.
      WRITE ME->CARGA-NM_PESO_LIQUIDO TO TX_QTD_LIQUI.
      CONDENSE TX_QTD_SALDO NO-GAPS.
      CONDENSE TX_QTD_LIQUI NO-GAPS.
      MESSAGE W228 WITH TX_QTD_LIQUI TX_QTD_SALDO.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_TICKET_PESAGEM.

    DATA: RG_ID_CARGA  TYPE RANGE OF ZDE_ID_CARGA.

    IF ME->CARGA-ID_CARGA IS NOT INITIAL.
      RG_ID_CARGA = VALUE #( SIGN = 'I' OPTION = 'NE' ( HIGH = ME->CARGA-ID_CARGA LOW = ME->CARGA-ID_CARGA ) ).
    ENDIF.

    LOOP AT ME->ZIF_CARGA~DOCUMENTO_FISCAL INTO DATA(WA_NFISCAL).

      SELECT SINGLE * INTO @DATA(WA_TICKET)
        FROM ZSDT0001CG AS D
       WHERE D~ID_CARGA  IN @RG_ID_CARGA
         AND D~NR_SAFRA  EQ @ME->CARGA-NR_SAFRA
         AND D~NR_TICKET EQ @ME->CARGA-NR_TICKET
         AND D~TP_STATUS NE @ZIF_CARGA~ST_STATUS_CANCELADA
         AND EXISTS ( SELECT * FROM ZSDT0001NT AS N WHERE N~ID_CARGA EQ D~ID_CARGA AND N~ID_FORNECEDOR EQ @WA_NFISCAL-ID_FORNECEDOR ).

      IF SY-SUBRC IS INITIAL.
        "218 Ticket Pesagem &1 já Utilizado para o Produtor &2 e Safra &3!
        MESSAGE W218 WITH ME->CARGA-NR_TICKET WA_NFISCAL-ID_FORNECEDOR ME->CARGA-NR_SAFRA.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_EXC_TAKE_UP.

    R_CARGA = ME.

    DELETE ME->ZIF_CARGA~TAKE_UP
     WHERE ID_NOTA = I_TAKEUP-ID_NOTA
       AND ID_TAKEUP = I_TAKEUP-ID_TAKEUP
       AND NU_BLOCO = I_TAKEUP-NU_BLOCO.

  ENDMETHOD.


  METHOD zif_carga~set_ordem_carregamento_ext.
* CS2021000978 Validação da ordem de carregamento de terceiros para embarques na modalidade CPT
    r_carga = me.

    IF i_nr_ordem IS INITIAL.
      CLEAR: me->carga-id_ordem.
    ENDIF.

    CHECK i_nr_ordem IS NOT INITIAL.

    SELECT id_ordem_ext
      UP TO 1 ROWS
      FROM zsdt0001cg
      INTO @DATA(lv_ord_ext)
    WHERE nr_safra     EQ @i_nr_safra
      AND id_bukrs     EQ @i_id_bukrs
      AND id_branch    EQ @i_id_branch
      AND id_ordem_ext EQ @i_nr_ordem.
    ENDSELECT.

    IF sy-subrc IS INITIAL AND lv_ord_ext IS NOT INITIAL.
      RAISE EXCEPTION TYPE zcx_carga
        EXPORTING
          textid = VALUE #( msgid = zcx_carga=>zcx_err_ordext-msgid msgno = zcx_carga=>zcx_err_ordext-msgno )
          msgty  = 'E'
          msgid  = zcx_carga=>zcx_err_ordext-msgid
          msgno  = zcx_carga=>zcx_err_ordext-msgno.
    ELSE.
      me->carga-id_ordem_ext = i_nr_ordem.
    ENDIF.

  ENDMETHOD.
ENDCLASS.
