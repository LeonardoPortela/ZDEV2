FUNCTION ZHCM_GERA_PDF_ESPELHO_PONTO.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(I_TOKEN) TYPE  STRING
*"     REFERENCE(I_PERNR) TYPE  P_PERNR OPTIONAL
*"     REFERENCE(I_CPF) TYPE  CHAR14 OPTIONAL
*"     REFERENCE(I_BEGDA) TYPE  BEGDA
*"     REFERENCE(I_ENDDA) TYPE  ENDDA
*"  EXPORTING
*"     REFERENCE(E_PDF) TYPE  XSTRING
*"  RAISING
*"      ZCX_HCM
*"      CX_SHM_EXCLUSIVE_LOCK_ACTIVE
*"      CX_SHM_VERSION_LIMIT_EXCEEDED
*"      CX_SHM_CHANGE_LOCK_ACTIVE
*"      CX_SHM_PARAMETER_ERROR
*"      CX_SHM_PENDING_LOCK_REMOVED
*"      CX_SHM_ATTACH_ERROR
*"      ZCX_SOL_MOBILE_RH
*"----------------------------------------------------------------------

  DATA: PNPPERNR TYPE RANGE OF PERNR-PERNR,
        LC_PERNR TYPE PERNR-PERNR,
        IT_SAIDA TYPE TABLE OF ZHCMS_FUNC_LIST,
        LC_CPF   TYPE STRING,
        IT_PA    TYPE TABLE OF ZHCMS_FUNC_LIST_PA.

  DATA: LC_ENDDA LIKE P0001-ENDDA.

  DATA: HANDLE   TYPE REF TO ZCL_MEMORY_VARIAVEIS_AREA,
        ROOT     TYPE REF TO ZCL_MEMORY_VARIAVEIS,
        OREF     TYPE REF TO ZCL_MEMORY_VARIAVEIS,
        IT_PERNR TYPE TABLE OF ZHCMS_RET_PERNR.

  DATA: E_TEXT   TYPE  STRING,
        E_TEXT_X TYPE  XSTRING,
        E_OTF    TYPE  TT_ITCOO.

  IF I_PERNR IS INITIAL AND I_CPF IS NOT INITIAL.
    CALL FUNCTION 'ZHCMF_RET_PERNR'
      EXPORTING
        CPF_NR  = I_CPF
      TABLES
        T_SAIDA = IT_PERNR.

    IF IT_PERNR[] IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_HCM
        EXPORTING
          TEXTID = VALUE #( MSGID  = ZCX_HCM=>ZCX_CPF_NAO_ENCONTRADO-MSGID
                            MSGNO  = ZCX_HCM=>ZCX_CPF_NAO_ENCONTRADO-MSGNO
                            ATTR1  = CONV #( I_CPF ) )
          MSGID  = ZCX_HCM=>ZCX_CPF_NAO_ENCONTRADO-MSGID
          MSGNO  = ZCX_HCM=>ZCX_CPF_NAO_ENCONTRADO-MSGNO
          MSGTY  = 'E'
          MSGV1  = CONV #( I_CPF ).
    ENDIF.

    LC_ENDDA = SY-DATUM.

    LOOP AT IT_PERNR INTO DATA(WA_PERNR).
      CLEAR: IT_PA.
      CALL FUNCTION 'ZHCMF_DADOS_FUNCIONAIS_PA'
        EXPORTING
          PERNR   = WA_PERNR-PERNR
          ENDDA   = LC_ENDDA
        TABLES
          T_SAIDA = IT_PA.

      READ TABLE IT_PA INDEX 1 INTO DATA(WA_PA).
      IF SY-SUBRC IS INITIAL.

        TRANSLATE WA_PA-SITUACAO TO UPPER CASE.
        CONDENSE WA_PA-SITUACAO NO-GAPS.
        IF WA_PA-SITUACAO EQ 'ATIVO'.
          PNPPERNR = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = WA_PERNR-PERNR HIGH = WA_PERNR-PERNR ) ).
          LC_PERNR = WA_PERNR-PERNR.
        ENDIF.
      ENDIF.
    ENDLOOP.

    IF LC_PERNR IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_HCM
        EXPORTING
          TEXTID = VALUE #( MSGID  = ZCX_HCM=>ZCX_CPF_NAO_ENCONTRADO-MSGID
                            MSGNO  = ZCX_HCM=>ZCX_CPF_NAO_ENCONTRADO-MSGNO
                            ATTR1  = CONV #( I_CPF ) )
          MSGID  = ZCX_HCM=>ZCX_CPF_NAO_ENCONTRADO-MSGID
          MSGNO  = ZCX_HCM=>ZCX_CPF_NAO_ENCONTRADO-MSGNO
          MSGTY  = 'E'
          MSGV1  = CONV #( I_CPF ).
    ENDIF.

    LC_CPF = I_CPF.

  ELSEIF I_PERNR IS NOT INITIAL .

    PNPPERNR = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = I_PERNR HIGH = I_PERNR ) ).
    LC_PERNR = I_PERNR.

    CALL FUNCTION 'ZHCMF_RETURN_FUNC'
      EXPORTING
        PERNR   = LC_PERNR
      TABLES
        T_SAIDA = IT_SAIDA.

    READ TABLE IT_SAIDA INTO DATA(WA_SAIDA) INDEX 1.
    LC_CPF = WA_SAIDA-CPF_NR.

  ELSE.
    RAISE EXCEPTION TYPE ZCX_HCM
      EXPORTING
        TEXTID = VALUE #( MSGID  = ZCX_HCM=>ZCX_INFORMAR_PERNR_CPF-MSGID
                          MSGNO  = ZCX_HCM=>ZCX_INFORMAR_PERNR_CPF-MSGNO )
        MSGID  = ZCX_HCM=>ZCX_INFORMAR_PERNR_CPF-MSGID
        MSGNO  = ZCX_HCM=>ZCX_INFORMAR_PERNR_CPF-MSGNO
        MSGTY  = 'E'.
  ENDIF.

  ZCL_SOL_MOBILE_RH=>ZIF_SOL_MOBILE_RH~GET_VERIFICA_TOKEN( I_CPF = LC_CPF I_TOKEN = I_TOKEN ).

  CONCATENATE 'PDF_Espelho_Ponto' LC_PERNR INTO DATA(NM_INSTANCE).

  HANDLE = ZCL_MEMORY_VARIAVEIS_AREA=>ATTACH_FOR_WRITE( INST_NAME = CONV #( NM_INSTANCE ) ).
  CREATE OBJECT ROOT AREA HANDLE HANDLE.
  HANDLE->SET_ROOT( ROOT ).
  CREATE OBJECT ROOT AREA HANDLE HANDLE TYPE ZCL_MEMORY_VARIAVEIS.
  HANDLE->SET_ROOT( ROOT ).
  HANDLE->DETACH_COMMIT( ).

  SUBMIT ZHCMR_PT0005 WITH PNPTIMED EQ 'I' WITH PNPBEGDA EQ I_BEGDA WITH PNPENDDA EQ I_ENDDA WITH PNPPERNR IN PNPPERNR WITH PXSTRING EQ ABAP_TRUE  AND RETURN.

  HANDLE = ZCL_MEMORY_VARIAVEIS_AREA=>ATTACH_FOR_READ( INST_NAME = CONV #( NM_INSTANCE ) ).
  OREF ?= HANDLE->ROOT.
  OREF->GET_TEXTO_STRING(  IMPORTING E_STRING  = E_TEXT
     )->GET_TEXTO_XSTRING( IMPORTING E_XSTRING = E_TEXT_X
     )->GET_TEXTO_OTF( IMPORTING E_OTF = E_OTF
     )->GET_ID_AUTENTICACAO( IMPORTING E_CD_AUTENTICACAO = DATA(E_CD_AUTENTICACAO)
     ).
  CLEAR OREF.
  HANDLE->DETACH( ).
  HANDLE->FREE_AREA( ).

  IF E_TEXT_X IS NOT INITIAL.
    E_PDF = E_TEXT_X.
    CALL FUNCTION 'ZSMARTFORMS_SET_XSTRING'
      EXPORTING
        I_CD_AUTENTICACAO = E_CD_AUTENTICACAO
        I_XSTRING         = E_TEXT_X.
  ELSE.
    RAISE EXCEPTION TYPE ZCX_HCM
      EXPORTING
        TEXTID = VALUE #( MSGID  = ZCX_HCM=>ZCX_SEM_ESPELHO_PONTO-MSGID
                          MSGNO  = ZCX_HCM=>ZCX_SEM_ESPELHO_PONTO-MSGNO )
        MSGID  = ZCX_HCM=>ZCX_SEM_ESPELHO_PONTO-MSGID
        MSGNO  = ZCX_HCM=>ZCX_SEM_ESPELHO_PONTO-MSGNO
        MSGTY  = 'E'.
  ENDIF.

ENDFUNCTION.
