*&---------------------------------------------------------------------*
*&  Include           ZPMR0059_CLASS
*&---------------------------------------------------------------------*



*---------------------------------------------------------------------*
*       CLASS lcl_events_handler DEFINITION
*---------------------------------------------------------------------*
CLASS LCL_EVENTS_HANDLER DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS
      HANDLE_DOUBLE_CLICK
                  FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
        IMPORTING E_ROW E_COLUMN.
ENDCLASS.                    "lcl_events_handler DEFINITION


*---------------------------------------------------------------------*
*       CLASS lcl_events_handler IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS LCL_EVENTS_HANDLER IMPLEMENTATION.
*---Metodo para double_click.

  METHOD HANDLE_DOUBLE_CLICK.

    CHECK E_ROW-ROWTYPE(1) EQ SPACE.
    PERFORM SEL_LISTA  USING E_ROW E_COLUMN-FIELDNAME.

  ENDMETHOD. " HANDLE_DOUBLE_CLICK
ENDCLASS.                    "lcl_events_handler IMPLEMENTATION

*---------------------------------------------------------------------*
*       NEW CLASS DADOS_ORDENS DEFINITION
*---------------------------------------------------------------------*
CLASS LCL_DADOS_ORDENS DEFINITION.


  PUBLIC SECTION.

*    TYPES:
*      BEGIN OF TY_JEST,
*        OBJNR TYPE JEST-OBJNR,
*        ISTAT TYPE TJ02T-ISTAT,
*        TXT04 TYPE TJ02T-TXT04,
*        INACT  TYPE JEST-INACT,
*      END OF TY_JEST.


    TYPES: GT_REG      TYPE TABLE OF ZPME_REG WITH EMPTY KEY,
           GT_OPERACAO TYPE TABLE OF ZTPM_D_M_OPERACAO WITH EMPTY KEY,
           GT_BACKLOG  TYPE TABLE OF ZPME_BACKLOG WITH EMPTY KEY.


    CLASS-DATA  STATUS_RANGE TYPE RANGE OF  STAT.


    CLASS-METHODS: DADOS_PLAN RETURNING VALUE(T_REG) TYPE GT_REG,
      SEL_ORDEM     RETURNING VALUE(D_OPERACAO) TYPE GT_OPERACAO,
      DADOS_BACKLOG,
      SHDB_IW49 IMPORTING WERKS TYPE SWERK ARBPL TYPE ARBPL.

*      DADOS_BACKLOG RETURNING VALUE(D_BACKLOG) TYPE GT_BACKLOG.

ENDCLASS.


*---------------------------------------------------------------------*
*       NEW CLASS DADOS_ORDENS IMPLEMENTAÇÃO
*---------------------------------------------------------------------*
CLASS LCL_DADOS_ORDENS IMPLEMENTATION.

  METHOD DADOS_PLAN.
    DATA: TEMP_TRAB  TYPE P DECIMALS 2,
          TEMP_UTIZ  TYPE P DECIMALS 2,
          GRA_UT     TYPE P DECIMALS 2,
          CAP_TOTAL  TYPE P DECIMALS 2,
          TEMP_TOTAL TYPE P DECIMALS 2.

    " Selecionando planejamento de horas trabalhada / Capacidades.
    SELECT * INTO CORRESPONDING FIELDS OF TABLE IT_KAKO
       FROM KAKO
       WHERE WERKS IN S_WERKS.
    SORT IT_KAKO ASCENDING BY KAPID.

    SELECT *
  INTO CORRESPONDING FIELDS OF TABLE IT_CRCA
  FROM CRCA
  FOR ALL ENTRIES IN IT_KAKO
  WHERE KAPID EQ IT_KAKO-KAPID
   AND OBJTY EQ LC_A.
    SORT IT_CRCA ASCENDING BY OBJID.

    SELECT *
  INTO CORRESPONDING FIELDS OF TABLE IT_CRCO
  FROM CRCO
  FOR ALL ENTRIES IN IT_CRCA
  WHERE OBJID EQ IT_CRCA-OBJID
    AND OBJTY EQ LC_A.
*    AND KOSTL IN S_KOSTL.
    SORT IT_CRCO ASCENDING BY OBJID.

    IF IT_CRCO IS NOT INITIAL.
      SELECT *
       INTO CORRESPONDING FIELDS OF TABLE IT_CRHD
       FROM CRHD FOR ALL ENTRIES IN IT_CRCO
        WHERE OBJID EQ IT_CRCO-OBJID
       AND   WERKS IN S_WERKS
       AND   ARBPL IN S_ARBPL
       AND   VERWE EQ '0005'
       AND   OBJTY EQ LC_A.
      SORT IT_CRHD ASCENDING BY OBJID.
    ENDIF.


    CHECK IT_CRHD IS NOT INITIAL.

    LOOP AT IT_CRHD INTO DATA(WA_CRHD).
      WA_REG-WERKS = WA_CRHD-WERKS.
      WA_REG-ARBPL = WA_CRHD-ARBPL.
      WA_REG-ARBID = WA_CRHD-OBJID.

      READ TABLE IT_CRCO INTO DATA(WA_CRCO) WITH KEY OBJID = WA_CRHD-OBJID.
      IF SY-SUBRC = 0.
      ENDIF.

      READ TABLE IT_CRCA INTO DATA(WA_CRCA) WITH KEY OBJID = WA_CRCO-OBJID.
      IF SY-SUBRC = 0.
      ENDIF.

      READ TABLE IT_KAKO INTO DATA(WA_KAKO) WITH KEY KAPID = WA_CRCA-KAPID.
      IF SY-SUBRC = 0.
*      CALCULO DE HORAS
        TEMP_TRAB     = WA_KAKO-ENDZT - WA_KAKO-BEGZT. "Horas Periodo
        TEMP_UTIZ     = ( TEMP_TRAB - WA_KAKO-PAUSE ). " Menos pausa.
        TEMP_UTIZ           = ( TEMP_UTIZ / 60 ) / 60. " Convertendo em hora.
        GRA_UT        = ( TEMP_UTIZ * WA_KAKO-NGRAD ) / 100. "Percentual
        CAP_TOTAL     = GRA_UT * WA_KAKO-AZNOR.
*        TEMP_TOTAL    = CAP_TOTAL *  TEMP_TRAB.
        WA_REG-HRSPER = CAP_TOTAL.
      ENDIF.
*      APPEND WA_REG TO T_REGIST.
      APPEND WA_REG TO T_REG.
      CLEAR: WA_REG, WA_KAKO, WA_CRCA, WA_CRCO, WA_CRHD, TEMP_TRAB, TEMP_UTIZ, GRA_UT, CAP_TOTAL, TEMP_TOTAL.
    ENDLOOP.
  ENDMETHOD.


  METHOD SEL_ORDEM.
*    DATA: GT_JEST TYPE TABLE OF TY_JEST.
    DATA: GT_CONF TYPE TABLE OF AFRU.
    DATA LINE_RANGE LIKE LINE OF STATUS_RANGE.
    DATA: T_JEST TYPE TABLE OF JEST.
    DATA: T_TJ02T TYPE TABLE OF TJ02T.
    DATA(ABER) = 'I0001'.
    DATA(LIB) =  'I0002'.
    DATA: R_STATUS TYPE ZRSDSSELOPTS .
    DATA: R_AUFNR  TYPE ZRSDSSELOPTS .

    DATA: D_ORDEM     TYPE TABLE OF ZTPM_D_M_ORDEM.

    APPEND VALUE #( SIGN = 'I' OPTION  = 'EQ' LOW   = ABER HIGH = ' ' ) TO R_STATUS.
    APPEND VALUE #( SIGN = 'I' OPTION  = 'EQ' LOW   = LIB  HIGH = ' ' )  TO R_STATUS.

*    SELECT *
*    FROM AUFK AS A
*    INNER JOIN JEST AS B ON B~OBJNR EQ A~OBJNR
*    INTO CORRESPONDING FIELDS OF TABLE D_ORDEM
*    WHERE A~WERKS IN S_WERKS
*      AND A~AUTYP EQ '30'
*      AND B~STAT  IN R_STATUS
*      AND B~INACT NE ABAP_TRUE.
*
*
    FREE D_ORDEM.
    SELECT *
    FROM AUFK
    INTO CORRESPONDING FIELDS OF TABLE D_ORDEM
    WHERE WERKS IN S_WERKS
      AND AUTYP EQ '30'.

    CHECK D_ORDEM IS NOT INITIAL.

    "Check status.
    SELECT *
    FROM JEST
    INTO TABLE T_JEST
      FOR ALL ENTRIES IN D_ORDEM
    WHERE OBJNR EQ D_ORDEM-OBJNR
      AND STAT IN R_STATUS
      AND INACT NE ABAP_TRUE .

    R_AUFNR = VALUE #( FOR LS IN D_ORDEM
                        FOR LS1 IN T_JEST WHERE ( OBJNR EQ LS-OBJNR )
                        (
                          SIGN = 'I'
                          OPTION = 'EQ'
                          LOW = LS-AUFNR
                        )
                   ).
    SORT R_AUFNR.
    DELETE D_ORDEM WHERE AUFNR NOT IN R_AUFNR.

***Selecionando status da ordem com a função.
*    LOOP AT D_ORDEM ASSIGNING FIELD-SYMBOL(<LS_ORDEM>).
*      CALL FUNCTION 'STATUS_READ'
*        EXPORTING
*          OBJNR       = <LS_ORDEM>-OBJNR
*          ONLY_ACTIVE = 'X'
*        TABLES
*          STATUS      = IJSTAT
*        EXCEPTIONS
*          OTHERS      = 01.
*      CHECK SY-SUBRC = 0.
*
*      LOOP AT IJSTAT INTO DATA(W_IJSTAT).
*        IF W_IJSTAT-STAT EQ ABER OR W_IJSTAT-STAT EQ LIB.
*          <LS_ORDEM>-MARC_STATUS = ABAP_TRUE.
*        ENDIF.
*      ENDLOOP.
*    ENDLOOP.
*    SORT D_ORDEM ASCENDING BY MARC_STATUS.
*    DELETE D_ORDEM WHERE MARC_STATUS NE ABAP_TRUE.
*    SORT D_ORDEM ASCENDING BY AUFNR.
****===============================================================

    SELECT * FROM AFKO INTO TABLE @DATA(T_AFKO) WHERE AUFNR IN @R_AUFNR.
    IF SY-SUBRC EQ 0.
      SELECT * FROM AFVC AS A
      INNER JOIN AFVV AS B ON B~AUFPL EQ A~AUFPL AND B~APLZL EQ A~APLZL
      INTO CORRESPONDING FIELDS OF TABLE D_OPERACAO
      FOR ALL ENTRIES IN T_AFKO
      WHERE A~AUFPL EQ T_AFKO-AUFPL
        AND A~LOEKZ EQ ABAP_FALSE.
    ENDIF.

    LOOP AT D_OPERACAO ASSIGNING FIELD-SYMBOL(<L_OPER>).
      READ TABLE T_AFKO INTO DATA(L_AFKO) WITH KEY AUFPL = <L_OPER>-AUFPL.
      IF SY-SUBRC EQ 0.
        <L_OPER>-AUFNR = L_AFKO-AUFNR.
      ENDIF.
    ENDLOOP.

*    SELECT *
*    FROM AFKO AS A
*    INNER JOIN AFVC AS B ON B~AUFPL EQ A~AUFPL
*    INNER JOIN AFVV AS C ON C~AUFPL EQ B~AUFPL AND C~APLZL EQ B~APLZL
*    INTO CORRESPONDING FIELDS OF TABLE D_OPERACAO
*      FOR ALL ENTRIES IN D_ORDEM
*      WHERE A~AUFNR EQ D_ORDEM-AUFNR
**     AND B~WERKS EQ S_WERKS
*       AND B~LOEKZ EQ ABAP_FALSE.



*    SELECT *
*    FROM AFKO
*    INTO CORRESPONDING FIELDS OF TABLE D_OPERACAO
*    FOR ALL ENTRIES IN D_ORDEM
*    WHERE AUFNR EQ D_ORDEM-AUFNR
*    AND ( EXISTS ( SELECT * FROM AFVC WHERE AUFPL EQ AFKO~AUFPL
*    AND ( EXISTS ( SELECT * FROM AFVV WHERE AUFPL EQ AFVC~AUFPL AND LOEKZ EQ ABAP_FALSE ) ) ) ).
*    SORT D_OPERACAO ASCENDING BY AUFNR VORNR.

    CHECK D_OPERACAO IS NOT INITIAL.

    SELECT *
    FROM AFRU
    INTO TABLE GT_CONF
      FOR ALL ENTRIES IN D_OPERACAO
      WHERE AUFNR EQ D_OPERACAO-AUFNR
        AND VORNR EQ D_OPERACAO-VORNR.

    SORT GT_CONF ASCENDING BY AUFNR VORNR AUERU.
    DELETE GT_CONF WHERE AUERU NE ABAP_TRUE.

    LOOP AT D_OPERACAO ASSIGNING FIELD-SYMBOL(<_OPERACAO>).

      LOOP AT GT_CONF INTO DATA(_CONF) WHERE AUFNR = <_OPERACAO>-AUFNR
                                         AND  VORNR = <_OPERACAO>-VORNR.

        CHECK SY-SUBRC EQ 0.

        IF _CONF-AUERU EQ ABAP_TRUE.
          <_OPERACAO>-CONFNL = _CONF-AUERU.
        ELSE.
          <_OPERACAO>-ISMNW = _CONF-ISMNW.
          <_OPERACAO>-ISMNE = _CONF-ISMNE.
          CONTINUE.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    DELETE D_OPERACAO WHERE CONFNL NE SPACE.
  ENDMETHOD.

  METHOD DADOS_BACKLOG.

    DATA: TOT_HR_PROG TYPE AFVV-BMSCH.
    DATA: TOT_HR_REAL TYPE AFVV-BMSCH.
    CLEAR: T_BACKLOG.

    DADOS_PLAN( RECEIVING T_REG = DATA(D_REG) ).
    SEL_ORDEM( RECEIVING D_OPERACAO = DATA(D_OPERACAO) ).


    CHECK D_REG IS NOT INITIAL.

    CHECK D_OPERACAO IS NOT INITIAL.


    LOOP AT D_REG INTO DATA(W_REG).

      W_BACKLOG-IWERK   = W_REG-WERKS.
      W_BACKLOG-ARBPL   = W_REG-ARBPL.
      W_BACKLOG-HR_PLAN = W_REG-HRSPER.

      LOOP AT D_OPERACAO INTO DATA(W_OPERACAO) WHERE ARBID EQ W_REG-ARBID.

        IF W_OPERACAO-ARBEH EQ 'MIN'.
          W_OPERACAO-ARBEI = W_OPERACAO-ARBEI / 60.
        ENDIF.

        ADD W_OPERACAO-ARBEI TO TOT_HR_PROG.

        IF W_OPERACAO-ISMNE EQ 'MIN'.
          W_OPERACAO-ISMNW = W_OPERACAO-ISMNW / 60.
        ENDIF.

        ADD W_OPERACAO-ISMNW TO TOT_HR_REAL.

      ENDLOOP.

      W_BACKLOG-HRSPER = TOT_HR_PROG.
      W_BACKLOG-HR_REAL = TOT_HR_REAL.

      IF W_BACKLOG-HR_PLAN IS INITIAL.
        W_BACKLOG-BACKL = '0'.
      ELSE.
        IF W_BACKLOG-HRSPER < W_BACKLOG-HR_REAL.
          W_BACKLOG-BACKL = '0'.
        ELSE.
          DATA(H_REAL) =  ( W_BACKLOG-HRSPER - W_BACKLOG-HR_REAL  ).
          W_BACKLOG-BACKL  = ( H_REAL / W_BACKLOG-HR_PLAN ).
        ENDIF.
      ENDIF.

      APPEND W_BACKLOG TO T_BACKLOG.
      CLEAR: W_BACKLOG, TOT_HR_PROG, W_OPERACAO, TOT_HR_REAL.
    ENDLOOP.

    SORT T_BACKLOG ASCENDING BY IWERK.

  ENDMETHOD.


  METHOD SHDB_IW49.

    DATA: IT_RSPARAMS TYPE TABLE OF RSPARAMS.

    IT_RSPARAMS =  VALUE #(
                         ( SELNAME = 'ARBPL' KIND = 'S' SIGN = 'I' OPTION = 'EQ' LOW = ARBPL )
                         ( SELNAME = 'WERKS' KIND = 'S' SIGN = 'I' OPTION = 'EQ' LOW = WERKS )
                         ( SELNAME = 'STAE1' KIND = 'S' SIGN = 'I' OPTION = 'EQ' LOW = 'ENCE' )
                         ( SELNAME = 'STAE1' KIND = 'S' SIGN = 'I' OPTION = 'EQ' LOW = 'ENTE' )
                           ).

    SUBMIT RIAFVC20 WITH SELECTION-TABLE IT_RSPARAMS AND RETURN.

  ENDMETHOD.
ENDCLASS.
