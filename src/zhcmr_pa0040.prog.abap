*&---------------------------------------------------------------------*
*& Report  ZHCMR_PA0040
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZHCMR_PA0040 MESSAGE-ID ZHCMSOLMOBI.

TABLES: ZDE_HCMT_PA_0011, ZDE_HCMT_PA_0011_ALV.

CLASS LCL_ALV_TOOLBAR   DEFINITION DEFERRED.
CLASS LCL_EVENT_HANDLER DEFINITION DEFERRED.

TYPES: BEGIN OF TY_LISTA_ALV.
        INCLUDE STRUCTURE ZDE_HCMT_PA_0011_ALV.
TYPES:   LINE_COLOR(4) TYPE C, "Used to store row color attributes
         COLOR_CELL    TYPE LVC_T_SCOL,  " Cell color
         STYLE         TYPE LVC_T_STYL,
         END OF TY_LISTA_ALV.

TYPES: BEGIN OF TY_LOG_ALV.
        INCLUDE STRUCTURE ZDE_HCMT_PA_0012_ALV.
TYPES:   LINE_COLOR(4) TYPE C, "Used to store row color attributes
         COLOR_CELL    TYPE LVC_T_SCOL,  " Cell color
         STYLE         TYPE LVC_T_STYL,
         END OF TY_LOG_ALV.

DATA: IT_LISTA      TYPE TABLE OF TY_LISTA_ALV,
      IT_SELECINADO TYPE TABLE OF TY_LISTA_ALV,
      WA_LISTA      TYPE TY_LISTA_ALV.

DATA: IT_LISTA_LOG TYPE TABLE OF TY_LOG_ALV,
      WA_LISTA_LOG TYPE TY_LOG_ALV.

DATA: DG_SPLITTER           TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      LISTA_CCCONTAINER     TYPE REF TO CL_GUI_CONTAINER,
      LOG_CCCONTAINER       TYPE REF TO CL_GUI_CONTAINER,
      LISTA_ALV             TYPE REF TO CL_GUI_ALV_GRID,
      LOG_ALV               TYPE REF TO CL_GUI_ALV_GRID,
      IT_FIELDCATALOG_LISTA TYPE LVC_T_FCAT,
      IT_FIELDCATALOG_LOG   TYPE LVC_T_FCAT,
      IT_EXCEPT_QINFO_LISTA TYPE LVC_T_QINF,
      IT_EXCEPT_QINFO_LOG   TYPE LVC_T_QINF,
      GS_VARIANT_LISTA      TYPE DISVARIANT,
      GS_VARIANT_LOG        TYPE DISVARIANT,
      GS_LAYOUT_LISTA       TYPE LVC_S_LAYO,
      GS_LAYOUT_LOG         TYPE LVC_S_LAYO,
      OBG_TOOLBAR           TYPE REF TO LCL_ALV_TOOLBAR,
      OBJ_TOOLBARMANAGER    TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,
      EVENT_HANDLER         TYPE REF TO LCL_EVENT_HANDLER,
      GS_SCROLL_COL_LISTA   TYPE LVC_S_COL,
      GS_SCROLL_ROW_LISTA   TYPE LVC_S_ROID,
      GS_SCROLL_COL_LOG     TYPE LVC_S_COL,
      GS_SCROLL_ROW_LOG     TYPE LVC_S_ROID,
      EX_SOL_MOBILE_RH      TYPE REF TO ZCX_SOL_MOBILE_RH,
      OK_CODE               TYPE SY-UCOMM.

CLASS LCL_ALV_TOOLBAR DEFINITION.
  PUBLIC SECTION.
*Constructor
    METHODS: CONSTRUCTOR         IMPORTING IO_ALV_GRID TYPE REF TO CL_GUI_ALV_GRID,
      ON_TOOLBAR          FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID IMPORTING E_OBJECT,
      HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID IMPORTING E_UCOMM.
ENDCLASS.                    "lcl_alv_toolbar DEFINITION

*----------------------------------------------------------------------*
*       CLASS LCL_ALV_TOOLBAR IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_ALV_TOOLBAR IMPLEMENTATION.

  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT OBJ_TOOLBARMANAGER
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.

  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    DATA: TY_TOOLBAR   TYPE STB_BUTTON.

*    "Separador
    CLEAR: TY_TOOLBAR.
    TY_TOOLBAR-BUTN_TYPE = 3.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

*002  Cadastrar Senha
*003  Ativar
*004  Desativar
*005  Bloquear

    "Cadastrar Senha
    CLEAR: TY_TOOLBAR.
    TY_TOOLBAR-ICON      = ICON_CHANGE_PASSWORD.
    TY_TOOLBAR-FUNCTION  = 'SENHA'.
    TY_TOOLBAR-QUICKINFO = TEXT-002.
    TY_TOOLBAR-TEXT      = TEXT-002.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

    "Ativar Cadastro
    CLEAR: TY_TOOLBAR.
    TY_TOOLBAR-ICON      = ICON_LED_GREEN.
    TY_TOOLBAR-FUNCTION  = 'ATIVAR'.
    TY_TOOLBAR-QUICKINFO = TEXT-003.
    TY_TOOLBAR-TEXT      = TEXT-003.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

    "Desativar Cadastro
    CLEAR: TY_TOOLBAR.
    TY_TOOLBAR-ICON      = ICON_LED_RED.
    TY_TOOLBAR-FUNCTION  = 'DESATIVAR'.
    TY_TOOLBAR-QUICKINFO = TEXT-004.
    TY_TOOLBAR-TEXT      = TEXT-004.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

    "Bloquear Cadastro
    CLEAR: TY_TOOLBAR.
    TY_TOOLBAR-ICON      = ICON_ALERT.
    TY_TOOLBAR-FUNCTION  = 'BLOQUEAR'.
    TY_TOOLBAR-QUICKINFO = TEXT-005.
    TY_TOOLBAR-TEXT      = TEXT-005.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

    CALL METHOD OBJ_TOOLBARMANAGER->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    DATA: ET_INDEX_ROWS	TYPE LVC_T_ROW.

    CALL METHOD LISTA_ALV->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = ET_INDEX_ROWS.

    CLEAR: IT_SELECINADO[].

    LOOP AT ET_INDEX_ROWS INTO DATA(WA_INDEX_ROWS).
      READ TABLE IT_LISTA INTO WA_LISTA INDEX WA_INDEX_ROWS-INDEX.
      APPEND WA_LISTA TO IT_SELECINADO.
    ENDLOOP.

    LOOP AT IT_SELECINADO INTO WA_LISTA.
      CASE E_UCOMM.
        WHEN 'SENHA'.
          PERFORM DEFINIR_SENHA USING WA_LISTA.
        WHEN 'ATIVAR'.
          PERFORM ATIVAR USING WA_LISTA.
        WHEN 'DESATIVAR'.
          PERFORM DESATIVAR USING WA_LISTA.
        WHEN 'BLOQUEAR'.
          PERFORM BLOQUEAR USING WA_LISTA.
      ENDCASE.
    ENDLOOP.


  ENDMETHOD. "zm_handle_user_command

ENDCLASS.                    "LCL_ALV_TOOLBAR_N55 IMPLEMENTATION

CLASS LCL_EVENT_HANDLER DEFINITION.
  PUBLIC SECTION.
    METHODS HANDLE_HOTSPOT_CLICK FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID IMPORTING E_COLUMN_ID ES_ROW_NO.
    METHODS HANDLE_DOUBLE_CLICK  FOR EVENT DOUBLE_CLICK  OF CL_GUI_ALV_GRID IMPORTING E_ROW E_COLUMN ES_ROW_NO.
ENDCLASS.                    "lcl_event_handler DEFINITION

CLASS LCL_EVENT_HANDLER IMPLEMENTATION.
  METHOD HANDLE_HOTSPOT_CLICK.
    PERFORM HANDLE_HOTSPOT_CLICK USING ES_ROW_NO-ROW_ID E_COLUMN_ID-FIELDNAME.
  ENDMETHOD.                    "handle_hotspot_click

  METHOD HANDLE_DOUBLE_CLICK.
    PERFORM HANDLE_DOUBLE_CLICK USING E_ROW.
  ENDMETHOD.                    "HANDLE_DOUBLE_CLICK

ENDCLASS.                    "lcl_event_handler IMPLEMENTATION

SELECTION-SCREEN BEGIN OF BLOCK TP000 WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS: PPERNR FOR ZDE_HCMT_PA_0011-PERNR,
                PDTSOL FOR ZDE_HCMT_PA_0011-DT_SOLICITACAO,
                PDTSUL FOR ZDE_HCMT_PA_0011-DT_ULTIMO_AJUSTE,
                PSTSOL FOR ZDE_HCMT_PA_0011-ST_SOLICITACAO,
                PDTLOG FOR ZDE_HCMT_PA_0011-DT_ULTIMO_LOGIN.
SELECTION-SCREEN END OF BLOCK TP000 .

INITIALIZATION.

*  DATA: T_PARAMETERS TYPE USTYP_T_PARAMETERS.
*
*  CALL FUNCTION 'SUSR_USER_PARAMETERS_GET'
*    EXPORTING
*      USER_NAME           = SY-UNAME
*    TABLES
*      USER_PARAMETERS     = T_PARAMETERS
*    EXCEPTIONS
*      USER_NAME_NOT_EXIST = 1
*      OTHERS              = 2.
*
*  IF SY-SUBRC IS NOT INITIAL.
*    MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 DISPLAY LIKE 'E'.
*    LEAVE PROGRAM.
*  ENDIF.
*
*  READ TABLE T_PARAMETERS WITH KEY PARID = 'Z_APP_RH_LIBERA' TRANSPORTING NO FIELDS.
*  IF SY-SUBRC IS NOT INITIAL.
*    MESSAGE S018 WITH SY-UNAME DISPLAY LIKE 'E'.
*    LEAVE PROGRAM.
*  ENDIF.

START-OF-SELECTION.

  PERFORM CONSULTAR.

  IF IT_LISTA[] IS INITIAL.
    MESSAGE S010 DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.

  CALL SCREEN 0100.

*&---------------------------------------------------------------------*
*&      Form  SETA_ICONE_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_RETORNO_ALV_TP_STATUS  text
*      <--P_IT_RETORNO_ALV_ICO_CARGA  text
*----------------------------------------------------------------------*
FORM SETA_ICONE_STATUS  USING    P_TP_STATUS TYPE ZDE_STATUS_SOLICITACAO
                        CHANGING P_ICO_CARGA TYPE CHAR04.

  CASE P_TP_STATUS.
    WHEN ZIF_SOL_MOBILE_RH=>ST_STATUS_PENDENTE OR SPACE.
      P_ICO_CARGA = ICON_LED_YELLOW.
    WHEN ZIF_SOL_MOBILE_RH=>ST_STATUS_ATIVO.
      P_ICO_CARGA = ICON_LED_GREEN.
    WHEN ZIF_SOL_MOBILE_RH=>ST_STATUS_DESATIVADO.
      P_ICO_CARGA = ICON_LED_RED.
    WHEN ZIF_SOL_MOBILE_RH=>ST_STATUS_BLOQUEADO.
      P_ICO_CARGA = ICON_ALERT.
  ENDCASE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG_LISTA .

  DATA: LC_COL_POS  TYPE LVC_COLPOS.

  FIELD-SYMBOLS: <FS_CAT> TYPE LVC_S_FCAT.

  CLEAR: IT_FIELDCATALOG_LISTA[].

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_HCMT_PA_0011_ALV'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG_LISTA.

  LC_COL_POS = 2.

  DELETE IT_FIELDCATALOG_LISTA WHERE FIELDNAME EQ 'DS_SENHA'.

  LOOP AT IT_FIELDCATALOG_LISTA ASSIGNING <FS_CAT>.
    <FS_CAT>-TABNAME = 'ZDE_HCMT_PA_0011_ALV'.

    CASE <FS_CAT>-FIELDNAME.
      WHEN 'ST_STATUS'.
        <FS_CAT>-HOTSPOT = ABAP_TRUE.
        <FS_CAT>-ICON    = ABAP_TRUE.
        <FS_CAT>-JUST    = 'C'.
        <FS_CAT>-COL_POS = 1.
      WHEN OTHERS.
        <FS_CAT>-COL_POS = LC_COL_POS.
        ADD 1 TO LC_COL_POS.
    ENDCASE.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG_LOG .

  DATA: LC_COL_POS  TYPE LVC_COLPOS.

  FIELD-SYMBOLS: <FS_CAT> TYPE LVC_S_FCAT.

  CLEAR: IT_FIELDCATALOG_LOG[].

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_HCMT_PA_0012_ALV'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG_LOG.

  LC_COL_POS = 2.

  LOOP AT IT_FIELDCATALOG_LOG ASSIGNING <FS_CAT>.
    <FS_CAT>-TABNAME = 'ZDE_HCMT_PA_0012_ALV'.

    CASE <FS_CAT>-FIELDNAME.
      WHEN 'ST_STATUS'.
        <FS_CAT>-HOTSPOT = ABAP_TRUE.
        <FS_CAT>-ICON    = ABAP_TRUE.
        <FS_CAT>-JUST    = 'C'.
        <FS_CAT>-COL_POS = 1.
      WHEN OTHERS.
        <FS_CAT>-COL_POS = LC_COL_POS.
        ADD 1 TO LC_COL_POS.
    ENDCASE.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_HINTS_LISTA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_HINTS_LISTA .

  DATA: IT_DD07V        TYPE TABLE OF DD07V WITH HEADER LINE,
        WA_EXCEPT_QINFO LIKE LINE OF IT_EXCEPT_QINFO_LISTA,
        LC_TP_STATUS    TYPE ZDE_STATUS_SOLICITACAO,
        LC_ICO          TYPE CHAR04.
*
  CLEAR: IT_EXCEPT_QINFO_LISTA[],
         IT_EXCEPT_QINFO_LOG[].
*
  "Informações Documento
  CALL FUNCTION 'GET_DOMAIN_VALUES'
    EXPORTING
      DOMNAME    = 'ZDM_STATUS_SOLICITACAO'
    TABLES
      VALUES_TAB = IT_DD07V.

  LOOP AT IT_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
    WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
    LC_TP_STATUS = CONV #( IT_DD07V-DOMVALUE_L ).
    PERFORM SETA_ICONE_STATUS USING LC_TP_STATUS CHANGING LC_ICO.
    WA_EXCEPT_QINFO-VALUE = LC_ICO.
    WA_EXCEPT_QINFO-TEXT  = IT_DD07V-DDTEXT.

    WA_EXCEPT_QINFO-TABNAME   = 'ZDE_HCMT_PA_0012_ALV'.
    WA_EXCEPT_QINFO-FIELDNAME = 'ST_STATUS'.
    APPEND WA_EXCEPT_QINFO TO IT_EXCEPT_QINFO_LOG.

    WA_EXCEPT_QINFO-TABNAME   = 'ZDE_HCMT_PA_0011_ALV'.
    APPEND WA_EXCEPT_QINFO TO IT_EXCEPT_QINFO_LISTA.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT_LISTA
*&---------------------------------------------------------------------*
FORM FILL_GS_VARIANT_LISTA.

  GS_VARIANT_LISTA-REPORT      = SY-REPID.
  GS_VARIANT_LISTA-HANDLE      = '0100'.
  GS_VARIANT_LISTA-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT_LISTA-USERNAME    = ABAP_FALSE.
  GS_VARIANT_LISTA-VARIANT     = ABAP_FALSE.
  GS_VARIANT_LISTA-TEXT        = ABAP_FALSE.
  GS_VARIANT_LISTA-DEPENDVARS  = ABAP_FALSE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT_LOG
*&---------------------------------------------------------------------*
FORM FILL_GS_VARIANT_LOG.

  GS_VARIANT_LOG-REPORT      = SY-REPID.
  GS_VARIANT_LOG-HANDLE      = '0101'.
  GS_VARIANT_LOG-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT_LOG-USERNAME    = ABAP_FALSE.
  GS_VARIANT_LOG-VARIANT     = ABAP_FALSE.
  GS_VARIANT_LOG-TEXT        = ABAP_FALSE.
  GS_VARIANT_LOG-DEPENDVARS  = ABAP_FALSE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_GS_LAYOUT_LISTA
*&---------------------------------------------------------------------*
FORM FILL_GS_LAYOUT_LISTA.

  GS_LAYOUT_LISTA-SEL_MODE   = 'A'.
  GS_LAYOUT_LISTA-INFO_FNAME = 'LINE_COLOR'.
  GS_LAYOUT_LISTA-STYLEFNAME = 'STYLE'.
  GS_LAYOUT_LISTA-CTAB_FNAME = 'COLOR_CELL'.
  GS_LAYOUT_LISTA-ZEBRA      = ABAP_FALSE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_GS_LAYOUT_LOG
*&---------------------------------------------------------------------*
FORM FILL_GS_LAYOUT_LOG.

  GS_LAYOUT_LOG-SEL_MODE   = 'A'.
  GS_LAYOUT_LOG-INFO_FNAME = 'LINE_COLOR'.
  GS_LAYOUT_LOG-STYLEFNAME = 'STYLE'.
  GS_LAYOUT_LOG-CTAB_FNAME = 'COLOR_CELL'.
  GS_LAYOUT_LOG-ZEBRA      = ABAP_FALSE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.
  SET PF-STATUS 'PF0100'.
  SET TITLEBAR 'TL0100'.

  IF DG_SPLITTER IS INITIAL.

    CREATE OBJECT DG_SPLITTER
      EXPORTING
        PARENT  = CL_GUI_CONTAINER=>SCREEN0
        ROWS    = 2
        COLUMNS = 1.

    LISTA_CCCONTAINER = DG_SPLITTER->GET_CONTAINER( ROW = 1 COLUMN = 1 ).
    LOG_CCCONTAINER   = DG_SPLITTER->GET_CONTAINER( ROW = 2 COLUMN = 1 ).

    DG_SPLITTER->SET_ROW_HEIGHT(
      EXPORTING
        ID                = 2
        HEIGHT            = 30
      EXCEPTIONS
        CNTL_ERROR        = 1
        CNTL_SYSTEM_ERROR = 2
        OTHERS            = 3 ).

    CREATE OBJECT LISTA_ALV EXPORTING I_PARENT = LISTA_CCCONTAINER.
    PERFORM FILL_IT_FIELDCATALOG_LISTA.
    PERFORM FILL_IT_HINTS_LISTA.
    PERFORM FILL_GS_VARIANT_LISTA.
    PERFORM FILL_GS_LAYOUT_LISTA.
    CREATE OBJECT OBG_TOOLBAR EXPORTING IO_ALV_GRID = LISTA_ALV.
    SET HANDLER OBG_TOOLBAR->ON_TOOLBAR FOR LISTA_ALV.
    SET HANDLER OBG_TOOLBAR->HANDLE_USER_COMMAND FOR LISTA_ALV.

    CALL METHOD LISTA_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = GS_LAYOUT_LISTA
        IS_VARIANT      = GS_VARIANT_LISTA
        I_SAVE          = 'A'
        IT_EXCEPT_QINFO = IT_EXCEPT_QINFO_LISTA
      CHANGING
        IT_FIELDCATALOG = IT_FIELDCATALOG_LISTA
        IT_OUTTAB       = IT_LISTA[].

    CREATE OBJECT EVENT_HANDLER.
    SET HANDLER EVENT_HANDLER->HANDLE_HOTSPOT_CLICK FOR LISTA_ALV.
    SET HANDLER EVENT_HANDLER->HANDLE_DOUBLE_CLICK  FOR LISTA_ALV.

    CREATE OBJECT LOG_ALV EXPORTING I_PARENT = LOG_CCCONTAINER.
    PERFORM FILL_IT_FIELDCATALOG_LOG.
    PERFORM FILL_GS_VARIANT_LOG.
    PERFORM FILL_GS_LAYOUT_LOG.

    CALL METHOD LOG_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = GS_LAYOUT_LOG
        IS_VARIANT      = GS_VARIANT_LOG
        I_SAVE          = 'A'
        IT_EXCEPT_QINFO = IT_EXCEPT_QINFO_LOG
      CHANGING
        IT_FIELDCATALOG = IT_FIELDCATALOG_LOG
        IT_OUTTAB       = IT_LISTA_LOG[].

  ENDIF.

  DATA: GS_ALV_REFRES_COND TYPE LVC_S_STBL.
  GS_ALV_REFRES_COND-ROW = ABAP_TRUE.
  GS_ALV_REFRES_COND-COL = ABAP_TRUE.

  CALL METHOD LISTA_ALV->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE      = GS_ALV_REFRES_COND
      I_SOFT_REFRESH = ABAP_TRUE.

  CALL METHOD LOG_ALV->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE      = GS_ALV_REFRES_COND
      I_SOFT_REFRESH = ABAP_TRUE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100_EXIT INPUT.
  PERFORM LIMPA_TELA_0100.
  LEAVE TO SCREEN 0.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  LIMPA_TELA_0100
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM LIMPA_TELA_0100 .
  CLEAR: IT_LISTA[], IT_LISTA, WA_LISTA.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  HANDLE_HOTSPOT_CLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM HANDLE_HOTSPOT_CLICK
         USING VALUE(ROW_ID)    LIKE LVC_S_ROID-ROW_ID
               VALUE(FIELDNAME) LIKE LVC_S_COL-FIELDNAME.

  READ TABLE IT_LISTA INDEX ROW_ID INTO WA_LISTA.

  CASE FIELDNAME.
    WHEN 'ST_STATUS'.
      PERFORM CARREGAR_LOGS USING WA_LISTA-ID_SOLICITACAO.
  ENDCASE.

ENDFORM.                    " HANDLE_HOTSPOT_CLICK

*&---------------------------------------------------------------------*
*&      Form  HANDLE_DOUBLE_CLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_E_ROW  text
*----------------------------------------------------------------------*
FORM HANDLE_DOUBLE_CLICK  USING P_ROW TYPE LVC_S_ROW.

  DATA: LC_ROW TYPE LVC_T_ROW.

  CHECK P_ROW-INDEX IS NOT INITIAL.

  IF P_ROW-ROWTYPE IS INITIAL.

    APPEND P_ROW TO LC_ROW.

    CALL METHOD LISTA_ALV->SET_SELECTED_ROWS
      EXPORTING
        IT_INDEX_ROWS = LC_ROW.

    READ TABLE IT_LISTA INDEX P_ROW-INDEX INTO WA_LISTA.
    PERFORM CARREGAR_LOGS USING WA_LISTA-ID_SOLICITACAO.
  ENDIF.

ENDFORM.                    " HANDLE_DOUBLE_CLICK

*&---------------------------------------------------------------------*
*&      Form  CARREGAR_LOGS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_LISTA_ID_SOLICITACAO  text
*----------------------------------------------------------------------*
FORM CARREGAR_LOGS  USING  P_ID_SOLICITACAO TYPE ZDE_ID_SOLICITACAO.

  DATA: GS_ALV_REFRES_COND TYPE LVC_S_STBL.

  DATA: SOLICITA TYPE REF TO ZCL_SOL_MOBILE_RH.

  CLEAR: IT_LISTA_LOG[], IT_LISTA_LOG.

  TRY .

      CREATE OBJECT SOLICITA.
      SOLICITA->ZIF_SOL_MOBILE_RH~SET_REGISTRO( I_ID_SOLICITACAO = P_ID_SOLICITACAO
             )->GET_LOGS_REGISTRO( IMPORTING E_ZHCMT_PA_0012 = DATA(E_ZHCMT_PA_0012)
             )->SET_LIMPAR(
             )->SET_DENQUEUE( I_ID_SOLICITACAO = P_ID_SOLICITACAO
             ).
      CLEAR: SOLICITA.

      LOOP AT E_ZHCMT_PA_0012 INTO DATA(WA_ZHCMT_PA_0012).
        MOVE-CORRESPONDING WA_ZHCMT_PA_0012 TO WA_LISTA_LOG.
        PERFORM SETA_ICONE_STATUS USING WA_ZHCMT_PA_0012-ST_SOLICITACAO CHANGING WA_LISTA_LOG-ST_STATUS.
        APPEND WA_LISTA_LOG TO IT_LISTA_LOG.
      ENDLOOP.

    CATCH ZCX_SOL_MOBILE_RH INTO EX_SOL_MOBILE_RH.
      EX_SOL_MOBILE_RH->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
  ENDTRY.

  IF LOG_ALV IS NOT INITIAL.

    GS_ALV_REFRES_COND-ROW = ABAP_TRUE.
    GS_ALV_REFRES_COND-COL = ABAP_TRUE.

    CALL METHOD LOG_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE      = GS_ALV_REFRES_COND
        I_SOFT_REFRESH = ABAP_TRUE.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  GET_SCROLL_INFO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SCROLL_INFO INPUT.

  IF LISTA_ALV IS NOT INITIAL.
    CALL METHOD LISTA_ALV->GET_SCROLL_INFO_VIA_ID
      IMPORTING
        ES_COL_INFO = GS_SCROLL_COL_LISTA
        ES_ROW_NO   = GS_SCROLL_ROW_LISTA.
  ENDIF.

  IF LOG_ALV IS NOT INITIAL.
    CALL METHOD LOG_ALV->GET_SCROLL_INFO_VIA_ID
      IMPORTING
        ES_COL_INFO = GS_SCROLL_COL_LOG
        ES_ROW_NO   = GS_SCROLL_ROW_LOG.
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  GET_SELECTED_ROWS  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SELECTED_ROWS INPUT.

  IF LISTA_ALV IS NOT INITIAL.
    CLEAR: IT_SELECINADO[], IT_SELECINADO.

    CALL METHOD LISTA_ALV->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = DATA(IT_SELECTED_ROWS).

    LOOP AT IT_SELECTED_ROWS INTO DATA(WA_SELECTED_ROWS).
      READ TABLE IT_LISTA INTO WA_LISTA INDEX WA_SELECTED_ROWS-INDEX.
      APPEND WA_LISTA TO IT_SELECINADO.
    ENDLOOP.
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  DEFINIR_SENHA
*&---------------------------------------------------------------------*
FORM DEFINIR_SENHA  USING P_LISTA TYPE TY_LISTA_ALV.

  DATA: SOLICITA TYPE REF TO ZCL_SOL_MOBILE_RH,
        I_SENHA	 TYPE ZDE_SENHA_30.

  "Pegar Senha """""""""""""""""""""""""""""""""""""""""""""""""""
  CALL FUNCTION 'ZHCM_INFORMAR_SENHA'
    IMPORTING
      E_SENHA = I_SENHA.
  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  CHECK I_SENHA IS NOT INITIAL.

  TRY .
      CREATE OBJECT SOLICITA.
      SOLICITA->ZIF_SOL_MOBILE_RH~SET_REGISTRO( I_ID_SOLICITACAO = P_LISTA-ID_SOLICITACAO
             )->SET_PASSWORD( I_SENHA = I_SENHA
             )->SET_DS_MOTIVO( I_DS_MOTIVO = 'Definição de Senha'
             )->SET_GRAVAR(
             )->GET_REGISTRO( IMPORTING E_ZHCMT_PA_0011 = DATA(E_ZHCMT_PA_0011)
             )->SET_LIMPAR(
             )->SET_DENQUEUE( I_ID_SOLICITACAO = P_LISTA-ID_SOLICITACAO
             ).
      CLEAR: SOLICITA.
      MESSAGE S015.
      PERFORM ATUALIZA_GRID USING E_ZHCMT_PA_0011.
    CATCH ZCX_SOL_MOBILE_RH INTO EX_SOL_MOBILE_RH.
      EX_SOL_MOBILE_RH->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
  ENDTRY.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ATIVAR
*&---------------------------------------------------------------------*
FORM ATIVAR  USING  P_LISTA TYPE TY_LISTA_ALV.

  DATA: SOLICITA    TYPE REF TO ZCL_SOL_MOBILE_RH,
        I_DS_MOTIVO	TYPE ZDE_MOTIVO_STATUS.

  "Pegar Motivo da Ativação """"""""""""""""""""""""""""""""""""""
  DATA: P_INFORMOU  TYPE CHAR01.
  P_INFORMOU = ABAP_FALSE.
  PERFORM PEGAR_MOTIVO USING P_LISTA ZIF_SOL_MOBILE_RH=>ST_STATUS_ATIVO CHANGING I_DS_MOTIVO P_INFORMOU.
  CHECK P_INFORMOU EQ ABAP_TRUE.
  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  TRY .
      CREATE OBJECT SOLICITA.
      SOLICITA->ZIF_SOL_MOBILE_RH~SET_REGISTRO( I_ID_SOLICITACAO = P_LISTA-ID_SOLICITACAO
             )->GET_REGISTRO( IMPORTING E_ZHCMT_PA_0011 = DATA(E_ZHCMT_PA_0011)
             )->SET_LIMPAR(
             )->SET_DENQUEUE( I_ID_SOLICITACAO = P_LISTA-ID_SOLICITACAO
             ).
      CLEAR: SOLICITA.
    CATCH ZCX_SOL_MOBILE_RH INTO EX_SOL_MOBILE_RH.
      EX_SOL_MOBILE_RH->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
  ENDTRY.

  IF E_ZHCMT_PA_0011-DS_SENHA IS INITIAL.
    PERFORM DEFINIR_SENHA USING P_LISTA.
  ENDIF.

  TRY .
      CREATE OBJECT SOLICITA.
      SOLICITA->ZIF_SOL_MOBILE_RH~SET_REGISTRO( I_ID_SOLICITACAO = P_LISTA-ID_SOLICITACAO
             )->GET_REGISTRO( IMPORTING E_ZHCMT_PA_0011 = E_ZHCMT_PA_0011
             )->SET_LIMPAR(
             )->SET_DENQUEUE( I_ID_SOLICITACAO = P_LISTA-ID_SOLICITACAO
             ).
      CLEAR: SOLICITA.
    CATCH ZCX_SOL_MOBILE_RH INTO EX_SOL_MOBILE_RH.
      EX_SOL_MOBILE_RH->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
  ENDTRY.

  IF E_ZHCMT_PA_0011-DS_SENHA IS INITIAL.
    MESSAGE S011 DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.

  TRY .
      CREATE OBJECT SOLICITA.
      SOLICITA->ZIF_SOL_MOBILE_RH~SET_REGISTRO( I_ID_SOLICITACAO = P_LISTA-ID_SOLICITACAO
             )->SET_ST_SOLICITACAO( I_ST_SOLICITACAO = ZIF_SOL_MOBILE_RH=>ST_STATUS_ATIVO
             )->SET_DS_MOTIVO( I_DS_MOTIVO = I_DS_MOTIVO
             )->SET_GRAVAR(
             )->GET_REGISTRO( IMPORTING E_ZHCMT_PA_0011 = E_ZHCMT_PA_0011
             )->SET_LIMPAR(
             )->SET_DENQUEUE( I_ID_SOLICITACAO = P_LISTA-ID_SOLICITACAO
             ).
      CLEAR: SOLICITA.
      MESSAGE S012.
      PERFORM ATUALIZA_GRID USING E_ZHCMT_PA_0011.
    CATCH ZCX_SOL_MOBILE_RH INTO EX_SOL_MOBILE_RH.
      EX_SOL_MOBILE_RH->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
  ENDTRY.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  DESATIVAR
*&---------------------------------------------------------------------*
FORM DESATIVAR USING  P_LISTA TYPE TY_LISTA_ALV.

  DATA: SOLICITA    TYPE REF TO ZCL_SOL_MOBILE_RH,
        I_DS_MOTIVO	TYPE ZDE_MOTIVO_STATUS.

  "Pegar Motivo da Desativação """""""""""""""""""""""""""""""""""
  DATA: P_INFORMOU  TYPE CHAR01.
  P_INFORMOU = ABAP_FALSE.
  PERFORM PEGAR_MOTIVO USING P_LISTA ZIF_SOL_MOBILE_RH=>ST_STATUS_DESATIVADO CHANGING I_DS_MOTIVO P_INFORMOU.
  CHECK P_INFORMOU EQ ABAP_TRUE.
  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  TRY .
      CREATE OBJECT SOLICITA.
      SOLICITA->ZIF_SOL_MOBILE_RH~SET_REGISTRO( I_ID_SOLICITACAO = P_LISTA-ID_SOLICITACAO
             )->SET_ST_SOLICITACAO( I_ST_SOLICITACAO = ZIF_SOL_MOBILE_RH=>ST_STATUS_DESATIVADO
             )->SET_DS_MOTIVO( I_DS_MOTIVO = I_DS_MOTIVO
             )->SET_GRAVAR(
             )->GET_REGISTRO( IMPORTING E_ZHCMT_PA_0011 = DATA(E_ZHCMT_PA_0011)
             )->SET_LIMPAR(
             )->SET_DENQUEUE( I_ID_SOLICITACAO = P_LISTA-ID_SOLICITACAO
             ).
      CLEAR: SOLICITA.
      MESSAGE S012.
      PERFORM ATUALIZA_GRID USING E_ZHCMT_PA_0011.
    CATCH ZCX_SOL_MOBILE_RH INTO EX_SOL_MOBILE_RH.
      EX_SOL_MOBILE_RH->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
  ENDTRY.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  BLOQUEAR
*&---------------------------------------------------------------------*
FORM BLOQUEAR USING  P_LISTA TYPE TY_LISTA_ALV.

  DATA: SOLICITA    TYPE REF TO ZCL_SOL_MOBILE_RH,
        I_DS_MOTIVO	TYPE ZDE_MOTIVO_STATUS.

  "Pegar Motivo do Bloqueio """""""""""""""""""""""""""""""""""
  DATA: P_INFORMOU  TYPE CHAR01.
  P_INFORMOU = ABAP_FALSE.
  PERFORM PEGAR_MOTIVO USING P_LISTA ZIF_SOL_MOBILE_RH=>ST_STATUS_BLOQUEADO CHANGING I_DS_MOTIVO P_INFORMOU.
  CHECK P_INFORMOU EQ ABAP_TRUE.
  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  TRY .
      CREATE OBJECT SOLICITA.
      SOLICITA->ZIF_SOL_MOBILE_RH~SET_REGISTRO( I_ID_SOLICITACAO = P_LISTA-ID_SOLICITACAO
             )->SET_ST_SOLICITACAO( I_ST_SOLICITACAO = ZIF_SOL_MOBILE_RH=>ST_STATUS_BLOQUEADO
             )->SET_DS_MOTIVO( I_DS_MOTIVO = I_DS_MOTIVO
             )->SET_GRAVAR(
             )->GET_REGISTRO( IMPORTING E_ZHCMT_PA_0011 = DATA(E_ZHCMT_PA_0011)
             )->SET_LIMPAR(
             )->SET_DENQUEUE( I_ID_SOLICITACAO = P_LISTA-ID_SOLICITACAO
             ).
      CLEAR: SOLICITA.
      MESSAGE S012.
      PERFORM ATUALIZA_GRID USING E_ZHCMT_PA_0011.
    CATCH ZCX_SOL_MOBILE_RH INTO EX_SOL_MOBILE_RH.
      EX_SOL_MOBILE_RH->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
  ENDTRY.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  PEGAR_MOTIVO
*&---------------------------------------------------------------------*
FORM PEGAR_MOTIVO  USING    P_LISTA     TYPE TY_LISTA_ALV
                            P_STATUS_A  TYPE ZDE_STATUS_SOLICITACAO
                   CHANGING P_DS_MOTIVO TYPE ZDE_MOTIVO_STATUS
                            P_INFORMOU  TYPE CHAR01.

  MOVE-CORRESPONDING P_LISTA TO ZDE_HCMT_PA_0011_ALV.
  CLEAR: ZDE_HCMT_PA_0011_ALV-DS_MOTIVO.
  ZDE_HCMT_PA_0011_ALV-ST_SOLICITACAO = P_STATUS_A.
  PERFORM SETA_ICONE_STATUS USING ZDE_HCMT_PA_0011_ALV-ST_SOLICITACAO CHANGING ZDE_HCMT_PA_0011_ALV-ST_STATUS.

  CALL SCREEN 9000 STARTING AT 10 05.

  IF ZDE_HCMT_PA_0011_ALV-DS_MOTIVO IS NOT INITIAL.
    P_INFORMOU  = ABAP_TRUE.
    P_DS_MOTIVO = ZDE_HCMT_PA_0011_ALV-DS_MOTIVO.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9000_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9000_EXIT INPUT.
  CLEAR: ZDE_HCMT_PA_0011_ALV.
  LEAVE TO SCREEN 0.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_9000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_9000 OUTPUT.

  SET PF-STATUS 'PF9000'.
  SET TITLEBAR 'TL9000'.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9000 INPUT.

  CASE OK_CODE.
    WHEN 'CONFIRMAR'.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  ATUALIZA_GRID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_E_ZHCMT_PA_0011  text
*----------------------------------------------------------------------*
FORM ATUALIZA_GRID USING P_0011 TYPE ZHCMT_PA_0011.

  SELECT MANDT, ID_SOLICITACAO, PERNR, DT_SOLICITACAO, HR_SOLICITACAO, US_SOLICITACAO, DT_ULTIMO_AJUSTE, HR_ULTIMO_AJUSTE, US_ULTIMO_AJUSTE, ST_SOLICITACAO,
         QT_ERROS_LOGIN, DS_MOTIVO, DT_ULTIMO_LOGIN, HR_ULTIMO_LOGIN, US_ULTIMO_LOGIN, ID_DISPOSITIVO, CD_VALIDACAO
     INTO TABLE @DATA(IT_ZHCMT_PA_0011)
    FROM ZHCMT_PA_0011
     FOR ALL ENTRIES IN @IT_LISTA
   WHERE ID_SOLICITACAO EQ @IT_LISTA-ID_SOLICITACAO
     AND PERNR          EQ @P_0011-PERNR.

  LOOP AT IT_ZHCMT_PA_0011 INTO DATA(WA_ZHCMT_PA_0011).
    READ TABLE IT_LISTA ASSIGNING FIELD-SYMBOL(<FS_0011>) WITH KEY ID_SOLICITACAO = WA_ZHCMT_PA_0011-ID_SOLICITACAO.
    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.
    MOVE-CORRESPONDING WA_ZHCMT_PA_0011 TO <FS_0011>.
    PERFORM SETA_ICONE_STATUS USING <FS_0011>-ST_SOLICITACAO CHANGING <FS_0011>-ST_STATUS.
  ENDLOOP.

  GS_ALV_REFRES_COND-ROW = ABAP_TRUE.
  GS_ALV_REFRES_COND-COL = ABAP_TRUE.

  CALL METHOD LISTA_ALV->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE      = GS_ALV_REFRES_COND
      I_SOFT_REFRESH = ABAP_TRUE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CONSULTAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CONSULTAR .

  TYPES BEGIN OF TY_ZHCMT0007.
  TYPES: PERNR          TYPE ZHCMT0007-PERNR,
         CNAME          TYPE ZHCMT0007-CNAME       ,
         CPF_NR         TYPE ZHCMT0007-CPF_NR      ,
         DEPARTAMENTO   TYPE ZHCMT0007-DEPARTAMENTO,
         FUNCAO         TYPE ZHCMT0007-FUNCAO      ,
         SITUACAO       TYPE ZHCMT0007-SITUACAO    ,
         BUKRS          TYPE ZHCMT0007-BUKRS       ,
         BUTXT          TYPE ZHCMT0007-BUTXT       ,
         WERKS          TYPE ZHCMT0007-WERKS       ,
         WERKSN         TYPE ZHCMT0007-WERKSN      ,
         STCD1          TYPE ZHCMT0007-STCD1       ,
         KOKRS          TYPE ZHCMT0007-KOKRS       ,
         KOSTL          TYPE ZHCMT0007-KOSTL       ,
         CCUSTO         TYPE ZHCMT0007-CCUSTO      ,
         GBDAT          TYPE ZHCMT0007-GBDAT       ,
         EMAIL          TYPE ZHCMT0007-EMAIL       ,
         SUP_PERNR      TYPE ZHCMT0007-SUP_PERNR   ,
         SUP_CNAME      TYPE ZHCMT0007-SUP_CNAME   ,
         SUP_CPF_NR     TYPE ZHCMT0007-SUP_CPF_NR  ,
         SUP_EMAIL      TYPE ZHCMT0007-SUP_EMAIL   ,
         SUP_PERSK      TYPE ZHCMT0007-SUP_PERSK   ,
         ENDDA          TYPE ZHCMT0007-ENDDA       ,
         BEGDA          TYPE ZHCMT0007-BEGDA       ,
         FDATE          TYPE ZHCMT0007-FDATE       ,
         DAT01          TYPE ZHCMT0007-DAT01       ,
         BLOQUEIO_RH    TYPE ZHCMT0007-BLOQUEIO_RH ,
         MOABW          TYPE ZHCMT0007-MOABW       ,
         AWART          TYPE ZHCMT0007-AWART       ,
         BNAME           TYPE ZHCMT0007-BNAME      ,
         BLOQUEIO_RH_EFE TYPE ZHCMT0007-BLOQUEIO_RH_EFE,
         SENHA_INICIAL   TYPE ZHCMT0007-SENHA_INICIAL  ,
         SAMACCOUNTNAME  TYPE ZHCMT0007-SAMACCOUNTNAME ,
         CK_USER_DESLIGADO   TYPE ZHCMT0007-CK_USER_DESLIGADO.
  TYPES END OF TY_ZHCMT0007.

  DATA: IT_ZHCMT0007 TYPE TABLE OF TY_ZHCMT0007.

  DATA: IT_ZHCMS_FUNC_LIST TYPE TABLE OF ZHCMS_FUNC_LIST_PA,
        LC_ENDDA           LIKE P0001-ENDDA,
        VTR(1)             TYPE C.

  CLEAR: IT_LISTA[], IT_LISTA_LOG[], IT_LISTA, IT_LISTA_LOG.

  SELECT * INTO TABLE @DATA(IT_ZHCMT_PA_0011)
    FROM ZHCMT_PA_0011
   WHERE PERNR            IN @PPERNR
     AND DT_SOLICITACAO   IN @PDTSOL
     AND DT_ULTIMO_AJUSTE IN @PDTSUL
     AND DT_ULTIMO_LOGIN  IN @PDTLOG
     AND ST_SOLICITACAO   IN @PSTSOL.

  CHECK IT_ZHCMT_PA_0011[] IS NOT INITIAL.

  SELECT PERNR CNAME CPF_NR DEPARTAMENTO FUNCAO SITUACAO BUKRS BUTXT WERKS WERKSN STCD1 KOKRS
         KOSTL CCUSTO GBDAT EMAIL SUP_PERNR SUP_CNAME SUP_CPF_NR SUP_EMAIL SUP_PERSK ENDDA
         BEGDA FDATE DAT01 BLOQUEIO_RH MOABW AWART BNAME BLOQUEIO_RH_EFE SENHA_INICIAL
         SAMACCOUNTNAME CK_USER_DESLIGADO
    INTO TABLE IT_ZHCMT0007
    FROM ZHCMT0007
     FOR ALL ENTRIES IN IT_ZHCMT_PA_0011
   WHERE PERNR EQ IT_ZHCMT_PA_0011-PERNR.

  SORT IT_ZHCMT0007 BY PERNR.

  LOOP AT IT_ZHCMT_PA_0011 INTO DATA(WA_ZHCMT_PA_0011).

    READ TABLE IT_ZHCMT0007 INTO DATA(WA_ZHCMT0007) WITH KEY PERNR = WA_ZHCMT_PA_0011-PERNR BINARY SEARCH.
    IF SY-SUBRC IS NOT INITIAL.

      CLEAR WA_ZHCMT0007.

      LC_ENDDA = SY-DATUM.

      CALL FUNCTION 'ZHCMF_DADOS_FUNCIONAIS_PA'
        EXPORTING
          PERNR   = WA_ZHCMT_PA_0011-PERNR
          ENDDA   = LC_ENDDA
        TABLES
          T_SAIDA = IT_ZHCMS_FUNC_LIST.

      LOOP AT IT_ZHCMS_FUNC_LIST INTO DATA(WA_ZHCMS_FUNC_LIST).

        CLEAR: WA_ZHCMT0007.
        WA_ZHCMT0007-PERNR        = WA_ZHCMS_FUNC_LIST-PERNR.
        WA_ZHCMT0007-CNAME        = WA_ZHCMS_FUNC_LIST-CNAME.
        WA_ZHCMT0007-CPF_NR       = WA_ZHCMS_FUNC_LIST-CPF_NR.
        WA_ZHCMT0007-DEPARTAMENTO = WA_ZHCMS_FUNC_LIST-UNIORG.
        WA_ZHCMT0007-FUNCAO       = WA_ZHCMS_FUNC_LIST-POSICAO.
        WA_ZHCMT0007-BUKRS        = WA_ZHCMS_FUNC_LIST-BUKRS.
        WA_ZHCMT0007-WERKS        = WA_ZHCMS_FUNC_LIST-WERKS.

        SELECT SINGLE BUTXT INTO WA_ZHCMT0007-BUTXT
          FROM T001
         WHERE BUKRS EQ WA_ZHCMS_FUNC_LIST-BUKRS.

        SELECT SINGLE * INTO @DATA(WA_J_1BBRANCH)
          FROM J_1BBRANCH
         WHERE BUKRS  EQ @WA_ZHCMS_FUNC_LIST-BUKRS
           AND BRANCH EQ @WA_ZHCMS_FUNC_LIST-WERKS.

        IF SY-SUBRC IS INITIAL.
          WA_ZHCMT0007-WERKSN = WA_J_1BBRANCH-NAME.
          WA_ZHCMT0007-STCD1  = WA_J_1BBRANCH-STCD1.
        ENDIF.

        WA_ZHCMT0007-KOKRS        = WA_ZHCMS_FUNC_LIST-KOKRS.
        WA_ZHCMT0007-KOSTL        = WA_ZHCMS_FUNC_LIST-KOSTL.
        WA_ZHCMT0007-CCUSTO       = WA_ZHCMS_FUNC_LIST-CCUSTO.
        WA_ZHCMT0007-GBDAT        = WA_ZHCMS_FUNC_LIST-GBDAT.
        WA_ZHCMT0007-EMAIL        = WA_ZHCMS_FUNC_LIST-EMAIL.
        WA_ZHCMT0007-SUP_PERNR    = WA_ZHCMS_FUNC_LIST-SUP_PERNR.
        WA_ZHCMT0007-SUP_CNAME    = WA_ZHCMS_FUNC_LIST-SUP_CNAME.
        WA_ZHCMT0007-SUP_CPF_NR   = WA_ZHCMS_FUNC_LIST-SUP_CPF_NR.
        WA_ZHCMT0007-SUP_EMAIL    = WA_ZHCMS_FUNC_LIST-SUP_EMAIL.
        WA_ZHCMT0007-SUP_PERSK    = WA_ZHCMS_FUNC_LIST-SUP_PERSK.
        WA_ZHCMT0007-ENDDA        = WA_ZHCMS_FUNC_LIST-ENDDA.
        WA_ZHCMT0007-BEGDA        = WA_ZHCMS_FUNC_LIST-BEGDA.
        WA_ZHCMT0007-DAT01        = WA_ZHCMS_FUNC_LIST-DAT01.
        WA_ZHCMT0007-FDATE        = WA_ZHCMS_FUNC_LIST-FDATE.

        TRANSLATE WA_ZHCMS_FUNC_LIST-SITUACAO TO UPPER CASE.
        WA_ZHCMT0007-SITUACAO     = WA_ZHCMS_FUNC_LIST-SITUACAO.
      ENDLOOP.
    ENDIF.

    CLEAR: WA_LISTA.

    MOVE-CORRESPONDING WA_ZHCMT_PA_0011 TO WA_LISTA.
    WA_LISTA-CNAME    = WA_ZHCMT0007-CNAME.
    WA_LISTA-CPF_NR   = WA_ZHCMT0007-CPF_NR.
    WA_LISTA-FUNCAO   = WA_ZHCMT0007-FUNCAO.
    WA_LISTA-SITUACAO = WA_ZHCMT0007-SITUACAO.
    WA_LISTA-KOSTL    = WA_ZHCMT0007-KOSTL.
    WA_LISTA-CCUSTO   = WA_ZHCMT0007-CCUSTO.
    WA_LISTA-DAT01    = WA_ZHCMT0007-DAT01.
    WA_LISTA-FDATE    = WA_ZHCMT0007-FDATE.
    WA_LISTA-BUKRS    = WA_ZHCMT0007-BUKRS.
    WA_LISTA-WERKS    = WA_ZHCMT0007-WERKS.
    PERFORM SETA_ICONE_STATUS USING WA_ZHCMT_PA_0011-ST_SOLICITACAO CHANGING WA_LISTA-ST_STATUS.
    APPEND WA_LISTA TO IT_LISTA.

  ENDLOOP.

  "Verificar Permissão
  DATA(IT_LISTA_COPIA) = IT_LISTA[].
  SORT IT_LISTA_COPIA BY WERKS.
  DELETE ADJACENT DUPLICATES FROM IT_LISTA_COPIA COMPARING WERKS.

  SELECT * INTO TABLE @DATA(IT_ZHCMT0008)
    FROM ZHCMT0008
   WHERE BNAME EQ @SY-UNAME.

  SORT IT_ZHCMT0008 BY BRANCH.


  LOOP AT IT_LISTA_COPIA INTO DATA(WA_LISTA_COPIA).
    VTR = 0.
    "READ TABLE IT_ZHCMT0008 WITH KEY BRANCH = WA_LISTA_COPIA-WERKS TRANSPORTING NO FIELDS BINARY SEARCH.
    "AUTHORITY-CHECK OBJECT 'P_ORGIN' ID 'PERSA' FIELD WA_LISTA_COPIA-WERKS.

    LOOP AT IT_ZHCMT0008 INTO DATA(WA_ZHCMT0008) WHERE BRANCH   LE WA_LISTA_COPIA-WERKS
                                                   AND BRANCH_H GE WA_LISTA_COPIA-WERKS.
      VTR =  1.
    ENDLOOP.

    IF VTR = 0.
      DELETE IT_LISTA WHERE WERKS EQ WA_LISTA_COPIA-WERKS.
    ENDIF.
  ENDLOOP.

ENDFORM.
