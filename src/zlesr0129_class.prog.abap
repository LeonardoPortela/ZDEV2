*&---------------------------------------------------------------------*
*&  Include           ZLESR0115_CLASS
*&---------------------------------------------------------------------*



CLASS LCL_ALV_TOOLBAR_0100 IMPLEMENTATION.
  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT C_ALV_TOOLBARMANAGER
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.
  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    DATA: TL_PARAMETROS TYPE USTYP_T_PARAMETERS,
          VL_TXT_BUTTON TYPE TEXT40,
          V_TIME        TYPE T.

    TY_TOOLBAR-ICON      = ICON_WORKFLOW_EXTERNAL_EVENT.
    TY_TOOLBAR-FUNCTION  = C_CONSULTAR.
    TY_TOOLBAR-TEXT      = 'Consultar Dados'.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-ICON      = ICON_ACTIVITY.
    TY_TOOLBAR-FUNCTION  = C_PROCESSAR.
    TY_TOOLBAR-TEXT      = 'Processar'.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    CASE ABAP_TRUE.
      WHEN P_L2 OR P_L3.
        TY_TOOLBAR-ICON      = ICON_VIEWER_OPTICAL_ARCHIVE.
        TY_TOOLBAR-FUNCTION  = C_VIEW_DACTE.
        TY_TOOLBAR-TEXT      = 'Visualizar Dacte'.
        TY_TOOLBAR-BUTN_TYPE = 0.
        APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
        CLEAR TY_TOOLBAR.
    ENDCASE.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    DATA: VAR_ANSWER TYPE C.

    CASE E_UCOMM.
      WHEN C_CONSULTAR.
        PERFORM F_INF_DT_CONSULTA.
      WHEN C_PROCESSAR.
        PERFORM F_PROCESSAR_REGISTROS.
      WHEN C_VIEW_DACTE.
        PERFORM F_VISUALIZAR_DACTE.
    ENDCASE.

    CASE E_UCOMM.
      WHEN C_CONSULTAR OR
           C_PROCESSAR.

        PERFORM: F_SELECIONAR_DADOS,
                 F_PROCESSA_DADOS.

        LEAVE TO SCREEN 0100.
    ENDCASE.

  ENDMETHOD.                    "HANDLE_USER_COMMAND

ENDCLASS.                    "lcl_alv_toolbar IMPLEMENTATION


CLASS LCL_EVENT_HANDLER_0100 IMPLEMENTATION.

  METHOD CATCH_HOTSPOT.

    CASE E_COLUMN_ID.
      WHEN 'ID_PROC'.

        CASE ABAP_TRUE.
          WHEN P_L1.
            READ TABLE IT_SAIDA_0100_L1 INTO WA_SAIDA_0100_L1 INDEX E_ROW_ID-INDEX.

            CHECK SY-SUBRC EQ 0.

            PERFORM F_LOGS_PROC USING WA_SAIDA_0100_L1-ID_PROC.

          WHEN P_L2.
            READ TABLE IT_SAIDA_0100_L2 INTO WA_SAIDA_0100_L2 INDEX E_ROW_ID-INDEX.

            CHECK SY-SUBRC EQ 0.

            PERFORM F_LOGS_PROC USING WA_SAIDA_0100_L2-ID_PROC.
          WHEN P_L3.
            READ TABLE IT_SAIDA_0100_L3 INTO WA_SAIDA_0100_L3 INDEX E_ROW_ID-INDEX.

            CHECK SY-SUBRC EQ 0.

            PERFORM F_LOGS_PROC USING WA_SAIDA_0100_L3-ID_PROC.
        ENDCASE.


    ENDCASE.

  ENDMETHOD.

ENDCLASS.
