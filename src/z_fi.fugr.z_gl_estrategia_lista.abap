FUNCTION Z_GL_ESTRATEGIA_LISTA.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     VALUE(V_USUARIO) LIKE  SY-UNAME
*"     VALUE(V_LOTE) LIKE  ZGLT034-LOTE OPTIONAL
*"  EXPORTING
*"     VALUE(MSG) TYPE  CHAR50
*"  TABLES
*"      T_LOTES STRUCTURE  ZFI_LOTES_IMP
*"      T_ESTRA STRUCTURE  ZFI_ESTRATEGIA_ZGL OPTIONAL
*"      T_DOCS STRUCTURE  ZGL_DOCS_IMP OPTIONAL
*"----------------------------------------------------------------------

*----------------------------------------------------------------------*
* TYPE POOLS
*----------------------------------------------------------------------*
  TYPE-POOLS: ICON.

  TYPES:
    BEGIN OF TY_ESTRA ,
      BUKRS     TYPE ZGLT038-BUKRS,
      LOTE      TYPE ZGLT038-LOTE,
      VALOR_DE  TYPE ZGLT037-VALOR_DE,
      VALOR_ATE TYPE ZGLT037-VALOR_ATE,
      APROVADOR TYPE ZGLT037-APROVADOR,
      NIVEL     TYPE ZGLT037-NIVEL,
      WAERS     TYPE ZGLT037-WAERS,
      ESTADO(4),
      OPCOES(4),
    END OF TY_ESTRA,

*    BEGIN OF TY_DOCS ,
*      DOC_LCTO        TYPE ZGLT035-DOC_LCTO,
*      BUKRS           TYPE ZGLT035-BUKRS,
*      TP_LCTO         TYPE ZGLT035-TP_LCTO,
*      DESCRICAO       TYPE ZGLT031-DESCRICAO,
*      LOTE            TYPE ZGLT035-LOTE,
*      MOEDA_DOC       TYPE ZGLT035-MOEDA_DOC,
*      VLR_MOEDA_INT   TYPE ZGLT036-VLR_MOEDA_INT,
*      VLR_MOEDA_FORTE TYPE ZGLT036-VLR_MOEDA_FORTE,
*    END OF TY_DOCS,

    BEGIN OF TY_ZIMP_CAD_DEPTO,
      DEP_RESP      TYPE ZIMP_CAD_DEPTO-DEP_RESP,
      DEP_RESP_DESC TYPE ZIMP_CAD_DEPTO-DEP_RESP_DESC,
    END OF TY_ZIMP_CAD_DEPTO,

    BEGIN OF TY_ZGLT031,
      TP_LCTO   TYPE ZGLT031-TP_LCTO,
      DESCRICAO TYPE ZGLT031-DESCRICAO,
    END OF TY_ZGLT031,

    BEGIN OF TY_CADLOTE,
      " Seguro
      TP_OPR(30),
      VIG_DE(10),
      VIG_ATE(10),
      COD_SEGURADORA(50),
      SEQ_PARC(3),
      SEQ_TIPO(45),
      OBSERVACAO         TYPE ZGLT050-OBSERVACAO,
    END OF TY_CADLOTE,
    BEGIN OF TY_ZGLT034,
      LOTE        TYPE ZGLT034-LOTE,
      BUKRS       TYPE ZGLT034-BUKRS,
      DESCR_LOTE  TYPE ZGLT034-DESCR_LOTE,
      STATUS_LOTE TYPE ZGLT034-STATUS_LOTE,
      USNAM       TYPE ZGLT034-USNAM,
      DEP_RESP    TYPE ZGLT034-DEP_RESP,
      VALOR       TYPE ZGLT034-VALOR,
      VALOR_DE    TYPE ZGLT037-VALOR_DE,
      PGT_FORN    TYPE ZGLT037-PGT_FORN,
    END OF TY_ZGLT034,


    BEGIN OF TY_ZGLT035,
      DOC_LCTO    TYPE ZGLT035-DOC_LCTO,
      BUKRS       TYPE ZGLT035-BUKRS,
      TP_LCTO     TYPE ZGLT035-TP_LCTO,
      LOTE        TYPE ZGLT035-LOTE,
      DPTO_RESP   TYPE ZGLT035-DPTO_RESP,
      MOEDA_DOC   TYPE ZGLT035-MOEDA_DOC,
      ST_LC_MOEDA TYPE ZGLT035-ST_LC_MOEDA,
      BLART       TYPE ZGLT035-BLART,
      XBLNR       TYPE ZGLT035-XBLNR,
      BKTXT       TYPE ZGLT035-BKTXT,
      BLDAT       TYPE ZGLT035-BLDAT,
      BUDAT       TYPE ZGLT035-BUDAT,
      DT_LCTO     TYPE ZGLT035-DT_LCTO,
      REF_LCTO    TYPE ZGLT035-REF_LCTO,
      USNAM       TYPE ZGLT035-USNAM,
      DT_ENTRADA  TYPE ZGLT035-DT_ENTRADA,
      HR_ENTRADA  TYPE ZGLT035-HR_ENTRADA,
      PROV_EST    TYPE ZGLT035-PROV_EST,
    END OF TY_ZGLT035,

    BEGIN OF TY_ZGLT036,
      DOC_LCTO        TYPE ZGLT036-DOC_LCTO,
      SEQITEM         TYPE ZGLT036-SEQITEM,
      SEQSUB          TYPE ZGLT036-SEQSUB,
      TP_LCTO         TYPE ZGLT036-TP_LCTO,
      BSCHL           TYPE ZGLT036-BSCHL,
      HKONT           TYPE ZGLT036-HKONT,
      UMSKZ           TYPE ZGLT036-UMSKZ,
      ANBWA           TYPE ZGLT036-ANBWA,
      BEWAR           TYPE ZGLT036-BEWAR,
      VBUND           TYPE ZGLT036-VBUND,
      KOSTL           TYPE ZGLT036-KOSTL,
      PRCTR           TYPE ZGLT036-PRCTR,
      AUFNR           TYPE ZGLT036-AUFNR,
      MATNR           TYPE ZGLT036-MATNR,
      ZUORN           TYPE ZGLT036-ZUONR,
      SGTXT           TYPE ZGLT036-SGTXT,
      GSBER           TYPE ZGLT036-GSBER,
      VLR_MOEDA_INT   TYPE ZGLT036-VLR_MOEDA_INT,
      VLR_MOEDA_FORTE TYPE ZGLT036-VLR_MOEDA_FORTE,
      VLR_MOEDA_DOC   TYPE ZGLT036-VLR_MOEDA_DOC,
      HBKID           TYPE ZGLT036-HBKID,
      ZLSCH           TYPE ZGLT036-ZLSCH,
      ESTRATEGIA_FORN TYPE ZGLT036-ESTRATEGIA_FORN,
      LOTE            TYPE ZGLT035-LOTE,
    END OF TY_ZGLT036,

    BEGIN OF TY_ZGLT036G,
      LOTE          TYPE ZGLT035-LOTE,
      VLR_MOEDA_INT TYPE FAGLFLEXT-TSLVT,
      DOC_LCTO      TYPE ZGLT035-DOC_LCTO,
      BUDAT         TYPE ZGLT035-BUDAT,
      SEQITEM       TYPE ZGLT036-SEQITEM,
    END OF TY_ZGLT036G,

    BEGIN OF TY_ZGLT035G,
      OBJ_KEY TYPE ZIB_CONTABIL_CHV-OBJ_KEY,
    END OF TY_ZGLT035G,

    BEGIN OF TY_ZGLT037,
      BUKRS      TYPE ZGLT037-BUKRS,
      BUKRS_ATE  TYPE ZGLT037-BUKRS_ATE,
      DEP_RESP   TYPE ZGLT037-DEP_RESP,
      PGT_FORN   TYPE ZGLT037-PGT_FORN,
      WAERS      TYPE ZGLT037-WAERS,
      NIVEL      TYPE ZGLT037-NIVEL,
      APROVADOR  TYPE ZGLT037-APROVADOR,
      VALOR_DE   TYPE ZGLT037-VALOR_DE,
      VALOR_ATE  TYPE ZGLT037-VALOR_ATE,
      DT_VAL_DE  TYPE ZGLT037-DT_VAL_DE,           "modificação 10.10.2016
      DT_VAL_ATE TYPE ZGLT037-DT_VAL_ATE,          "modificação 10.10.2016
      HR_VAL_DE  TYPE ZGLT037-HR_VAL_DE,           "modificação 03.01.2017
      HR_VAL_ATE TYPE ZGLT037-HR_VAL_ATE,          "modificação 03.01.2017
    END OF TY_ZGLT037,

    BEGIN OF TY_ZGLT038,
      BUKRS     TYPE ZGLT038-BUKRS,
      LOTE      TYPE ZGLT038-LOTE,
      NIVEL     TYPE ZGLT038-NIVEL,
      APROVADOR TYPE ZGLT038-APROVADOR,
      VALOR_DE  TYPE ZGLT038-VALOR_DE,
      VALOR_ATE TYPE ZGLT038-VALOR_ATE,
    END OF TY_ZGLT038,

    BEGIN OF TY_TBSL,
      BSCHL TYPE TBSL-BSCHL,
      SHKZG TYPE TBSL-SHKZG,
      KOART TYPE TBSL-KOART,
    END OF TY_TBSL,

    BEGIN OF TY_TCURR,
      KURST TYPE TCURR-KURST,
      FCURR TYPE TCURR-FCURR,
      TCURR TYPE TCURR-TCURR,
      GDATU TYPE TCURR-GDATU,
      UKURS TYPE TCURR-UKURS,
    END OF TY_TCURR,

    BEGIN OF TY_T005,
      LAND1 TYPE T005-LAND1,
      WAERS TYPE T005-WAERS,
    END OF   TY_T005,

    BEGIN OF TY_T001,
      BUKRS TYPE T001-BUKRS,
      BUTXT TYPE T001-BUTXT,
      LAND1 TYPE T001-LAND1,
    END OF TY_T001.

*&--------------------------------------------------------------------&*
*& Declaração de tabelas e Work Areas                                 &*
*&--------------------------------------------------------------------&*
  DATA: XTOTAL       TYPE ZGLT036-VLR_MOEDA_INT,
        XTOTALF      TYPE ZGLT036-VLR_MOEDA_FORTE,
        VDEP_RESP    TYPE ZGLT037-DEP_RESP,
        VPGT_FORN(1),
        VFLAG(1),
        TABIX        TYPE SY-TABIX,
        TABIXL       TYPE SY-TABIX,
        VVALOR_ATE   TYPE ZGLT038-VALOR_ATE,

        BEGIN OF TG_LOTES OCCURS 0,
          STATUS(4),
          EMPRESA(30)  TYPE C,
          LOTE         TYPE ZGLT034-LOTE,
          DEP_RESP(25) TYPE C,
          TOTAL        TYPE ZGLT036-VLR_MOEDA_INT,
          SGTXT        TYPE ZGLT036-SGTXT,
          COLOR(4),
          MOEDA(5),
        END OF TG_LOTES.

** Criação de tabela dinamica
  DATA:
    WA_T005             TYPE TY_T005,
    WA_TCURR            TYPE TY_TCURR,

    V_UKURS             TYPE TCURR-UKURS,
    E_ROW_ID            TYPE SY-TABIX,
    V_IC_SET_STATE      TYPE C,
    V_APPEND_LOTE       TYPE C,

    WA_ZGLT031          TYPE TY_ZGLT031,
    WA_ZGLT034          TYPE TY_ZGLT034,
    WA_ZGLT035          TYPE TY_ZGLT035,
    WA_ZGLT035G         TYPE TY_ZGLT035G,
    WA_ZGLT036          TYPE TY_ZGLT036,
    WA_ZGLT036G         TYPE TY_ZGLT036G,
    WA_ZGLT037          TYPE TY_ZGLT037,
    WA_ZGLT038          TYPE TY_ZGLT038,
    WA_ZGLT090          TYPE ZGLT090,
    WA_ZIMP_CAD_DEPTO   TYPE TY_ZIMP_CAD_DEPTO,
    WA_ZIB_CONTABIL_CHV TYPE  ZIB_CONTABIL_CHV,
    WA_BKPF             TYPE  BKPF,

    WA_TBSL             TYPE TY_TBSL,
    WA_T001             TYPE TY_T001,
    WA_ESTRA            TYPE TY_ESTRA,
    WG_DOCS             TYPE ZGL_DOCS_IMP,
    WG_CADLOTE          TYPE TY_CADLOTE,

    TG_DOCS             TYPE TABLE OF ZGL_DOCS_IMP ,

    IT_ZGLT031          TYPE TABLE OF TY_ZGLT031,
    IT_ZGLT034          TYPE TABLE OF TY_ZGLT034,
    IT_ZGLT035          TYPE TABLE OF TY_ZGLT035,
    IT_ZGLT035G         TYPE TABLE OF TY_ZGLT035G,
    IT_ZGLT036          TYPE TABLE OF TY_ZGLT036,
    IT_ZGLT036G         TYPE TABLE OF TY_ZGLT036G,
    IT_ZGLT036GG        TYPE TABLE OF TY_ZGLT036G,
    IT_ZGLT037          TYPE TABLE OF TY_ZGLT037,
    IT_ZGLT037_DEP      TYPE TABLE OF TY_ZGLT037,
    IT_ZGLT038          TYPE TABLE OF TY_ZGLT038,
    IT_ZGLT089          TYPE TABLE OF ZGLT090,
    IT_ZIB_CONTABIL_CHV TYPE TABLE OF ZIB_CONTABIL_CHV,
    IT_ZIMP_CAD_DEPTO   TYPE TABLE OF TY_ZIMP_CAD_DEPTO,
    IT_TBSL             TYPE TABLE OF TY_TBSL,
    IT_T001             TYPE TABLE OF TY_T001,
    IT_T005             TYPE TABLE OF TY_T005,
    T_TCURR             TYPE TABLE OF TY_TCURR,
    IT_ESTRA            TYPE TABLE OF TY_ESTRA.


  DATA: VFLG_ICO(1),
        VLIFNR      TYPE LFA1-LIFNR.

  DATA: IDD07V TYPE TABLE OF  DD07V.
  DATA: WIDD07V TYPE  DD07V.
  DATA  VDOMVALUE_L TYPE  DD07V-DOMVALUE_L.
  "Seleção
  REFRESH IT_ZGLT034.
  IF V_LOTE IS INITIAL.
    SELECT DISTINCT ZGLT034~LOTE ZGLT034~BUKRS ZGLT034~DESCR_LOTE ZGLT034~STATUS_LOTE ZGLT034~USNAM ZGLT034~DEP_RESP ZGLT034~VALOR
         FROM ZGLT034
         INNER JOIN ZGLT090 ON   ZGLT090~LOTE  EQ ZGLT034~LOTE
                            AND  ZGLT090~APROVADOR EQ V_USUARIO
         INTO TABLE IT_ZGLT034
         WHERE  ZGLT034~STATUS_LOTE EQ 'L'.
  ELSE.
    SELECT LOTE BUKRS DESCR_LOTE STATUS_LOTE  USNAM DEP_RESP VALOR
         FROM ZGLT034
         INTO TABLE IT_ZGLT034
         WHERE   LOTE = V_LOTE.
  ENDIF.

  CHECK IT_ZGLT034[] IS NOT INITIAL.

  SELECT BUKRS BUTXT LAND1
    FROM T001
    INTO TABLE IT_T001
    FOR ALL ENTRIES IN IT_ZGLT034
    WHERE  BUKRS EQ IT_ZGLT034-BUKRS.

  SELECT LAND1 WAERS
  FROM T005
  INTO TABLE IT_T005
  FOR ALL ENTRIES IN IT_T001
  WHERE LAND1 = IT_T001-LAND1.

  SELECT KURST FCURR TCURR GDATU UKURS
    FROM TCURR
    INTO TABLE T_TCURR
    FOR ALL ENTRIES IN IT_T005
    WHERE KURST = 'B'
    AND   FCURR EQ 'USD'
    AND   TCURR EQ IT_T005-WAERS.


  SELECT DEP_RESP DEP_RESP_DESC
    FROM ZIMP_CAD_DEPTO
    INTO TABLE IT_ZIMP_CAD_DEPTO
    FOR ALL ENTRIES IN IT_ZGLT034
    WHERE DEP_RESP = IT_ZGLT034-DEP_RESP.


  SELECT   DOC_LCTO BUKRS TP_LCTO LOTE DPTO_RESP MOEDA_DOC ST_LC_MOEDA BLART XBLNR BKTXT BLDAT BUDAT DT_LCTO REF_LCTO USNAM DT_ENTRADA HR_ENTRADA PROV_EST
    FROM ZGLT035
    INTO TABLE IT_ZGLT035
    FOR ALL ENTRIES IN IT_ZGLT034
    WHERE LOTE EQ IT_ZGLT034-LOTE
    AND   LOEKZ = ''.

  IF SY-SUBRC = 0.

    SELECT  DOC_LCTO SEQITEM SEQSUB TP_LCTO BSCHL HKONT UMSKZ ANBWA BEWAR VBUND KOSTL PRCTR AUFNR MATNR ZUONR SGTXT GSBER
            VLR_MOEDA_INT VLR_MOEDA_FORTE VLR_MOEDA_DOC HBKID ZLSCH ESTRATEGIA_FORN
      FROM ZGLT036
      INTO TABLE IT_ZGLT036
      FOR ALL ENTRIES IN IT_ZGLT035
      WHERE DOC_LCTO EQ IT_ZGLT035-DOC_LCTO.

  ENDIF.

  SELECT  BUKRS LOTE NIVEL  APROVADOR VALOR_DE   VALOR_ATE
    FROM ZGLT038
    INTO TABLE IT_ZGLT038
    FOR ALL ENTRIES IN IT_ZGLT034
    WHERE LOTE EQ IT_ZGLT034-LOTE.

  SELECT  TP_LCTO DESCRICAO
   FROM ZGLT031
   INTO TABLE IT_ZGLT031
   FOR ALL ENTRIES IN IT_ZGLT035
   WHERE TP_LCTO EQ IT_ZGLT035-TP_LCTO.

  SELECT  BUKRS BUKRS_ATE DEP_RESP PGT_FORN WAERS NIVEL APROVADOR VALOR_DE VALOR_ATE
    DT_VAL_DE DT_VAL_ATE "modificação 10.10.2016
    HR_VAL_DE HR_VAL_ATE "modificação 03.01.2017
    FROM ZGLT037
    INTO TABLE IT_ZGLT037
    FOR ALL ENTRIES IN IT_ZGLT034
    WHERE BUKRS     LE IT_ZGLT034-BUKRS
    AND   BUKRS_ATE GE IT_ZGLT034-BUKRS.

  IF V_LOTE IS INITIAL.
    IT_ZGLT037_DEP[] = IT_ZGLT037[].
    DELETE IT_ZGLT037_DEP WHERE APROVADOR NE V_USUARIO.
    SORT IT_ZGLT037_DEP BY DEP_RESP PGT_FORN.
    DELETE ADJACENT DUPLICATES FROM IT_ZGLT037_DEP COMPARING DEP_RESP PGT_FORN.
  ENDIF.

  SORT IT_ZGLT037     BY BUKRS BUKRS_ATE DEP_RESP NIVEL.

  SELECT BSCHL SHKZG KOART
    FROM TBSL
    INTO TABLE IT_TBSL
    FOR ALL ENTRIES IN IT_ZGLT036
    WHERE BSCHL EQ IT_ZGLT036-BSCHL.

  SORT: IT_T001             BY BUKRS,
        IT_ZGLT031          BY TP_LCTO,
        IT_ZGLT035          BY LOTE,
        IT_ZGLT036          BY DOC_LCTO,
        IT_ZGLT037          BY DEP_RESP PGT_FORN BUKRS BUKRS_ATE DEP_RESP NIVEL,
        IT_ZGLT038          BY LOTE NIVEL APROVADOR,
        IT_TBSL             BY BSCHL,
        IT_ZGLT034          BY LOTE,
        IT_T005             BY LAND1,
        T_TCURR             BY TCURR GDATU,
        IT_ZIMP_CAD_DEPTO   BY DEP_RESP.

  REFRESH: TG_LOTES, TG_DOCS.
  REFRESH IT_ESTRA.
  DATA VOBJ_KEY TYPE ZIB_CONTABIL_CHV-OBJ_KEY.

  LOOP AT IT_ZGLT034 INTO WA_ZGLT034.
    "
    LOOP AT IT_ZGLT035 INTO WA_ZGLT035 WHERE LOTE = WA_ZGLT034-LOTE.
      LOOP AT IT_ZGLT036 INTO WA_ZGLT036 WHERE DOC_LCTO = WA_ZGLT035-DOC_LCTO.
        IF WA_ZGLT036-HBKID IS NOT INITIAL OR WA_ZGLT036-ZLSCH IS NOT INITIAL.
          WA_ZGLT034-PGT_FORN = 'X'.
          EXIT.
        ENDIF.

        IF 'K_D' CS WA_TBSL-KOART  AND ( WA_T001-LAND1 EQ 'NL' OR WA_T001-LAND1 EQ 'CH' ).
          WA_ZGLT034-PGT_FORN = 'X'.
          EXIT.
        ENDIF.

        IF WA_ZGLT036-ESTRATEGIA_FORN IS NOT INITIAL.
          WA_ZGLT034-PGT_FORN = 'X'.
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDLOOP.
    "
    IF V_LOTE IS INITIAL.
      "
      CLEAR WA_ZGLT037.
      LOOP AT IT_ZGLT037 INTO WA_ZGLT037 WHERE DEP_RESP = WA_ZGLT034-DEP_RESP
                                         AND   PGT_FORN = WA_ZGLT034-PGT_FORN.
        IF  WA_ZGLT037-BUKRS_ATE IS INITIAL.
          IF  WA_ZGLT037-BUKRS NE WA_ZGLT034-BUKRS.
            CONTINUE.
          ENDIF.
        ELSEIF WA_ZGLT037-BUKRS     GT WA_ZGLT034-BUKRS OR
               WA_ZGLT037-BUKRS_ATE LT WA_ZGLT034-BUKRS.
          CONTINUE.
        ENDIF.
        IF WA_ZGLT034-DEP_RESP = WA_ZGLT037-DEP_RESP AND
           WA_ZGLT034-PGT_FORN = WA_ZGLT037-PGT_FORN AND         "/Modificação 17.03.2017
          ( ( WA_ZGLT037-DT_VAL_DE  LT SY-DATUM AND              "Caso p/ DT_VAL_DE < SY-DATUM < DT_VAL_ATE (modificação 11.01.2017)
              WA_ZGLT037-DT_VAL_ATE GT SY-DATUM )
             OR
            ( WA_ZGLT037-DT_VAL_DE  EQ SY-DATUM AND              "Caso p/ DT_VAL_DE = SY-DATUM = DT_VAL_ATE (modificação 11.01.2017)
              WA_ZGLT037-DT_VAL_ATE EQ SY-DATUM AND
              WA_ZGLT037-HR_VAL_DE  LE SY-UZEIT AND
              WA_ZGLT037-HR_VAL_ATE GE SY-UZEIT )
            OR
            ( WA_ZGLT037-DT_VAL_DE  EQ SY-DATUM AND              "Caso p/ DT_VAL_DE = SY-DATUM < DT_VAL_ATE (modificação 11.01.2017)
              WA_ZGLT037-DT_VAL_ATE GT SY-DATUM AND
              WA_ZGLT037-HR_VAL_DE  LE SY-UZEIT )
            OR
            ( WA_ZGLT037-DT_VAL_DE  LT SY-DATUM AND              "Caso p/ DT_VAL_DE < SY-DATUM = DT_VAL_ATE (modificação 11.01.2017)
              WA_ZGLT037-DT_VAL_ATE EQ SY-DATUM AND
              WA_ZGLT037-HR_VAL_ATE GE SY-UZEIT ) ).
          EXIT.
        ENDIF.
      ENDLOOP.
      IF WA_ZGLT037 IS INITIAL.
        CONTINUE.
      ENDIF.
    ELSE.
*      READ TABLE IT_ZGLT037 INTO WA_ZGLT037 WITH KEY DEP_RESP   = WA_ZGLT034-DEP_RESP BINARY SEARCH.
      CLEAR WA_ZGLT037.
      LOOP AT IT_ZGLT037 INTO WA_ZGLT037 WHERE DEP_RESP = WA_ZGLT034-DEP_RESP
                                         AND   PGT_FORN = WA_ZGLT034-PGT_FORN.
        IF  WA_ZGLT037-BUKRS_ATE IS INITIAL.
          IF  WA_ZGLT037-BUKRS NE WA_ZGLT034-BUKRS.
            CONTINUE.
          ENDIF.
        ELSEIF WA_ZGLT037-BUKRS     GT WA_ZGLT034-BUKRS OR
               WA_ZGLT037-BUKRS_ATE LT WA_ZGLT034-BUKRS.
          CONTINUE.
        ENDIF.
        IF WA_ZGLT034-DEP_RESP = WA_ZGLT037-DEP_RESP AND
           WA_ZGLT034-PGT_FORN = WA_ZGLT037-PGT_FORN AND         "/Modificação 17.03.2017
          ( ( WA_ZGLT037-DT_VAL_DE  LT SY-DATUM AND              "Caso p/ DT_VAL_DE < SY-DATUM < DT_VAL_ATE (modificação 11.01.2017)
              WA_ZGLT037-DT_VAL_ATE GT SY-DATUM )
             OR
            ( WA_ZGLT037-DT_VAL_DE  EQ SY-DATUM AND              "Caso p/ DT_VAL_DE = SY-DATUM = DT_VAL_ATE (modificação 11.01.2017)
              WA_ZGLT037-DT_VAL_ATE EQ SY-DATUM AND
              WA_ZGLT037-HR_VAL_DE  LE SY-UZEIT AND
              WA_ZGLT037-HR_VAL_ATE GE SY-UZEIT )
            OR
            ( WA_ZGLT037-DT_VAL_DE  EQ SY-DATUM AND              "Caso p/ DT_VAL_DE = SY-DATUM < DT_VAL_ATE (modificação 11.01.2017)
              WA_ZGLT037-DT_VAL_ATE GT SY-DATUM AND
              WA_ZGLT037-HR_VAL_DE  LE SY-UZEIT )
            OR
            ( WA_ZGLT037-DT_VAL_DE  LT SY-DATUM AND              "Caso p/ DT_VAL_DE < SY-DATUM = DT_VAL_ATE (modificação 11.01.2017)
              WA_ZGLT037-DT_VAL_ATE EQ SY-DATUM AND
              WA_ZGLT037-HR_VAL_ATE GE SY-UZEIT ) ).
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDIF.
    "
    READ TABLE IT_T001 INTO WA_T001 WITH KEY BUKRS = WA_ZGLT034-BUKRS BINARY SEARCH.
    CONCATENATE WA_ZGLT034-BUKRS '-' WA_T001-BUTXT INTO  TG_LOTES-EMPRESA.

    TG_LOTES-LOTE  = WA_ZGLT034-LOTE.
    TG_LOTES-MOEDA = WA_ZGLT037-WAERS.
    READ TABLE IT_ZIMP_CAD_DEPTO INTO WA_ZIMP_CAD_DEPTO WITH KEY DEP_RESP = WA_ZGLT034-DEP_RESP BINARY SEARCH.

    CONCATENATE WA_ZGLT034-DEP_RESP '-' WA_ZIMP_CAD_DEPTO-DEP_RESP_DESC INTO TG_LOTES-DEP_RESP.
    XTOTAL = 0.
    LOOP AT IT_ZGLT035 INTO WA_ZGLT035 WHERE LOTE = WA_ZGLT034-LOTE.
      CLEAR WA_TCURR .

      "Elimina Estornados
      IF WA_ZGLT035-PROV_EST NE 'X'.
        CONCATENATE 'ZGL17' WA_ZGLT035-DOC_LCTO WA_ZGLT035-BUDAT+0(4)  INTO VOBJ_KEY.
        READ TABLE IT_ZIB_CONTABIL_CHV INTO WA_ZIB_CONTABIL_CHV WITH KEY OBJ_KEY = VOBJ_KEY BINARY SEARCH. "estornados
        IF  SY-SUBRC = 0.
          CONTINUE.
        ENDIF.
      ENDIF.
      READ TABLE IT_T005 INTO WA_T005 WITH KEY LAND1 =  WA_T001-LAND1 BINARY SEARCH.
      LOOP AT T_TCURR INTO WA_TCURR WHERE TCURR = WA_T005-WAERS.
        EXIT.
      ENDLOOP.

      IF WA_ZGLT035-MOEDA_DOC = WA_T005-WAERS.
        WA_TCURR-UKURS = 1.
      ENDIF.

      LOOP AT IT_ZGLT036 INTO WA_ZGLT036 WHERE DOC_LCTO = WA_ZGLT035-DOC_LCTO.
        READ TABLE IT_TBSL INTO WA_TBSL WITH KEY BSCHL = WA_ZGLT036-BSCHL BINARY SEARCH.
        " Pesquisar estratégia com fornecedores
        IF WA_ZGLT036-HBKID IS NOT INITIAL OR WA_ZGLT036-ZLSCH IS NOT INITIAL.
          WA_ZGLT034-PGT_FORN = 'X'.
          CONCATENATE 'X-' WA_ZGLT034-BUKRS '-' WA_T001-BUTXT INTO  TG_LOTES-EMPRESA.
        ENDIF.

        IF 'K_D' CS WA_TBSL-KOART  AND ( WA_T001-LAND1 EQ 'NL' OR WA_T001-LAND1 EQ 'CH' ).
          WA_ZGLT034-PGT_FORN = 'X'.
          CONCATENATE 'X-' WA_ZGLT034-BUKRS '-' WA_T001-BUTXT INTO  TG_LOTES-EMPRESA.
        ENDIF.

        IF WA_ZGLT036-ESTRATEGIA_FORN IS NOT INITIAL.
          WA_ZGLT034-PGT_FORN = 'X'.
          CONCATENATE 'X-' WA_ZGLT034-BUKRS '-' WA_T001-BUTXT INTO  TG_LOTES-EMPRESA.
        ENDIF.

        IF WA_TBSL-SHKZG NE 'H'.
          IF WA_ZGLT037-WAERS NE 'USD'.
            IF WA_ZGLT036-VLR_MOEDA_INT GT 0.
              ADD WA_ZGLT036-VLR_MOEDA_INT TO XTOTAL .
            ELSE.
              IF  WA_ZGLT036-VLR_MOEDA_DOC GT 0.
                XTOTAL = XTOTAL + (  WA_ZGLT036-VLR_MOEDA_DOC * WA_TCURR-UKURS ).
              ELSE.
                XTOTAL = XTOTAL + (  WA_ZGLT036-VLR_MOEDA_FORTE * WA_TCURR-UKURS ).
              ENDIF.
            ENDIF.
          ELSE.
            IF WA_TCURR-UKURS LT 0.
              V_UKURS = WA_TCURR-UKURS.
              MULTIPLY V_UKURS BY -1.
              IF WA_ZGLT036-VLR_MOEDA_FORTE GT 0.
                ADD WA_ZGLT036-VLR_MOEDA_FORTE TO XTOTAL.
              ELSEIF  WA_ZGLT036-VLR_MOEDA_INT GT 0.
                XTOTAL = XTOTAL + (  WA_ZGLT036-VLR_MOEDA_INT / V_UKURS ).
              ELSEIF  WA_ZGLT036-VLR_MOEDA_DOC GT 0.
                XTOTAL = XTOTAL + (  WA_ZGLT036-VLR_MOEDA_DOC / V_UKURS ).
              ELSE.
                XTOTAL = XTOTAL + (  WA_ZGLT036-VLR_MOEDA_FORTE / V_UKURS ).
              ENDIF.
            ELSE.
              IF WA_ZGLT036-VLR_MOEDA_FORTE GT 0.
                ADD WA_ZGLT036-VLR_MOEDA_FORTE TO XTOTAL.
              ELSEIF  WA_ZGLT036-VLR_MOEDA_INT GT 0.
                XTOTAL = XTOTAL + (  WA_ZGLT036-VLR_MOEDA_INT * WA_TCURR-UKURS ).
              ELSEIF  WA_ZGLT036-VLR_MOEDA_DOC GT 0.
                XTOTAL = XTOTAL + (  WA_ZGLT036-VLR_MOEDA_DOC * WA_TCURR-UKURS ).
              ELSE.
                XTOTAL = XTOTAL + (  WA_ZGLT036-VLR_MOEDA_FORTE * WA_TCURR-UKURS ).
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
        TG_LOTES-SGTXT = WA_ZGLT036-SGTXT.
      ENDLOOP.
    ENDLOOP.
    TG_LOTES-TOTAL = XTOTAL.
    IF WA_ZGLT034-VALOR GT 0.
      XTOTAL = WA_ZGLT034-VALOR.
      TG_LOTES-TOTAL = XTOTAL.
    ENDIF.
    IF V_LOTE IS INITIAL.
      APPEND TG_LOTES.
      CLEAR TG_LOTES.
      CONTINUE.
      "
      READ TABLE IT_ZGLT037_DEP INTO WA_ZGLT037 WITH KEY DEP_RESP = WA_ZGLT034-DEP_RESP
                                                         PGT_FORN = WA_ZGLT034-PGT_FORN BINARY SEARCH.
      IF SY-SUBRC NE 0.
        XTOTAL = 0.
      ENDIF.
    ENDIF.
    IF XTOTAL = 0.
      CONTINUE.
    ENDIF.

    "Inicio
    CLEAR: VDEP_RESP, VPGT_FORN.
    VVALOR_ATE = 0.
    VFLG_ICO = 'N'.


    LOOP AT IT_ZGLT037 INTO WA_ZGLT037 WHERE DEP_RESP = WA_ZGLT034-DEP_RESP
                                       AND   PGT_FORN = WA_ZGLT034-PGT_FORN.
      IF  WA_ZGLT037-BUKRS_ATE IS INITIAL.
        IF  WA_ZGLT037-BUKRS NE WA_ZGLT034-BUKRS.
          CONTINUE.
        ENDIF.
      ELSEIF WA_ZGLT037-BUKRS     GT WA_ZGLT034-BUKRS OR
             WA_ZGLT037-BUKRS_ATE LT WA_ZGLT034-BUKRS.
        CONTINUE.
      ENDIF.
      IF WA_ZGLT034-DEP_RESP = WA_ZGLT037-DEP_RESP AND
         WA_ZGLT034-PGT_FORN = WA_ZGLT037-PGT_FORN AND         "/Modificação 17.03.2017
        ( ( WA_ZGLT037-DT_VAL_DE  LT SY-DATUM AND              "Caso p/ DT_VAL_DE < SY-DATUM < DT_VAL_ATE (modificação 11.01.2017)
            WA_ZGLT037-DT_VAL_ATE GT SY-DATUM )
           OR
          ( WA_ZGLT037-DT_VAL_DE  EQ SY-DATUM AND              "Caso p/ DT_VAL_DE = SY-DATUM = DT_VAL_ATE (modificação 11.01.2017)
            WA_ZGLT037-DT_VAL_ATE EQ SY-DATUM AND
            WA_ZGLT037-HR_VAL_DE  LE SY-UZEIT AND
            WA_ZGLT037-HR_VAL_ATE GE SY-UZEIT )
          OR
          ( WA_ZGLT037-DT_VAL_DE  EQ SY-DATUM AND              "Caso p/ DT_VAL_DE = SY-DATUM < DT_VAL_ATE (modificação 11.01.2017)
            WA_ZGLT037-DT_VAL_ATE GT SY-DATUM AND
            WA_ZGLT037-HR_VAL_DE  LE SY-UZEIT )
          OR
          ( WA_ZGLT037-DT_VAL_DE  LT SY-DATUM AND              "Caso p/ DT_VAL_DE < SY-DATUM = DT_VAL_ATE (modificação 11.01.2017)
            WA_ZGLT037-DT_VAL_ATE EQ SY-DATUM AND
            WA_ZGLT037-HR_VAL_ATE GE SY-UZEIT ) ).
        IF XTOTAL > VVALOR_ATE.
          VVALOR_ATE = WA_ZGLT037-VALOR_ATE.
          VDEP_RESP = WA_ZGLT037-DEP_RESP.
          VPGT_FORN = WA_ZGLT037-PGT_FORN.
        ENDIF.
      ENDIF.
    ENDLOOP.

    IF VDEP_RESP IS INITIAL.
      LOOP AT IT_ZGLT037 INTO WA_ZGLT037 WHERE  PGT_FORN = WA_ZGLT034-PGT_FORN.
        IF  WA_ZGLT037-BUKRS_ATE IS INITIAL.
          IF  WA_ZGLT037-BUKRS NE WA_ZGLT034-BUKRS.
            CONTINUE.
          ENDIF.
        ELSEIF WA_ZGLT037-BUKRS     GT WA_ZGLT034-BUKRS OR
               WA_ZGLT037-BUKRS_ATE LT WA_ZGLT034-BUKRS.
          CONTINUE.
        ENDIF.
        IF WA_ZGLT034-DEP_RESP IS INITIAL.
          IF XTOTAL > VVALOR_ATE.
            IF ( WA_ZGLT037-DT_VAL_DE  LT SY-DATUM AND              "/Modificação 17.03.2017
                 WA_ZGLT037-DT_VAL_ATE GT SY-DATUM )                "Caso p/ DT_VAL_DE < SY-DATUM < DT_VAL_ATE (modificação 11.01.2017)
               OR
              ( WA_ZGLT037-DT_VAL_DE  EQ SY-DATUM AND              "Caso p/ DT_VAL_DE = SY-DATUM = DT_VAL_ATE (modificação 11.01.2017)
                WA_ZGLT037-DT_VAL_ATE EQ SY-DATUM AND
                WA_ZGLT037-HR_VAL_DE  LE SY-UZEIT AND
                WA_ZGLT037-HR_VAL_ATE GE SY-UZEIT )
               OR
              ( WA_ZGLT037-DT_VAL_DE  EQ SY-DATUM AND              "Caso p/ DT_VAL_DE = SY-DATUM < DT_VAL_ATE (modificação 11.01.2017)
                WA_ZGLT037-DT_VAL_ATE GT SY-DATUM AND
                WA_ZGLT037-HR_VAL_DE  LE SY-UZEIT )
               OR
              ( WA_ZGLT037-DT_VAL_DE  LT SY-DATUM AND              "Caso p/ DT_VAL_DE < SY-DATUM = DT_VAL_ATE (modificação 11.01.2017)
                WA_ZGLT037-DT_VAL_ATE EQ SY-DATUM AND
                WA_ZGLT037-HR_VAL_ATE GE SY-UZEIT ).
              VVALOR_ATE = WA_ZGLT037-VALOR_ATE.
              VDEP_RESP = WA_ZGLT037-DEP_RESP.
              VPGT_FORN = WA_ZGLT037-PGT_FORN.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.

    LOOP AT IT_ZGLT037 INTO WA_ZGLT037 WHERE DEP_RESP = VDEP_RESP
                                       AND   PGT_FORN = VPGT_FORN.
      IF  WA_ZGLT037-BUKRS_ATE IS INITIAL.
        IF  WA_ZGLT037-BUKRS NE WA_ZGLT034-BUKRS.
          CONTINUE.
        ENDIF.
      ELSEIF WA_ZGLT037-BUKRS     GT WA_ZGLT034-BUKRS OR
             WA_ZGLT037-BUKRS_ATE LT WA_ZGLT034-BUKRS.
        CONTINUE.
      ENDIF.

      IF ( WA_ZGLT037-VALOR_ATE  <= VVALOR_ATE AND            "Caso p/ DT_VAL_DE < SY-DATUM < DT_VAL_ATE (modificação 11.01.2017)
          WA_ZGLT037-DT_VAL_DE  LT SY-DATUM AND
          WA_ZGLT037-DT_VAL_ATE GT SY-DATUM )
        OR
        ( WA_ZGLT037-VALOR_ATE  <= VVALOR_ATE AND            "Caso p/ DT_VAL_DE = SY-DATUM = DT_VAL_ATE (modificação 11.01.2017)
          WA_ZGLT037-DT_VAL_DE  EQ SY-DATUM AND
          WA_ZGLT037-DT_VAL_ATE EQ SY-DATUM AND
          WA_ZGLT037-HR_VAL_DE  LE SY-UZEIT AND
          WA_ZGLT037-HR_VAL_ATE GE SY-UZEIT )
        OR
        ( WA_ZGLT037-VALOR_ATE  <= VVALOR_ATE AND            "Caso p/ DT_VAL_DE = SY-DATUM < DT_VAL_ATE (modificação 11.01.2017)
          WA_ZGLT037-DT_VAL_DE  EQ SY-DATUM AND
          WA_ZGLT037-DT_VAL_ATE GT SY-DATUM AND
          WA_ZGLT037-HR_VAL_DE  LE SY-UZEIT )
        OR
        ( WA_ZGLT037-VALOR_ATE  <= VVALOR_ATE AND            "Caso p/ DT_VAL_DE < SY-DATUM = DT_VAL_ATE (modificação 11.01.2017)
          WA_ZGLT037-DT_VAL_DE  LT SY-DATUM AND
          WA_ZGLT037-DT_VAL_ATE EQ SY-DATUM AND
          WA_ZGLT037-HR_VAL_ATE GE SY-UZEIT ).

        WA_ESTRA-BUKRS        = WA_ZGLT034-BUKRS.
        WA_ESTRA-LOTE         = WA_ZGLT034-LOTE.
        WA_ESTRA-VALOR_DE     = WA_ZGLT037-VALOR_DE.
        WA_ESTRA-VALOR_ATE    = WA_ZGLT037-VALOR_ATE.
        "WA_ESTRA-APROVADOR    = WA_ZGLT037-APROVADOR.       "modificação 03.01.2017
        WA_ESTRA-NIVEL        = WA_ZGLT037-NIVEL.
        WA_ESTRA-WAERS        = WA_ZGLT037-WAERS.


        READ TABLE IT_ZGLT038 INTO WA_ZGLT038 WITH KEY LOTE      = WA_ZGLT034-LOTE
                                                       NIVEL     = WA_ZGLT037-NIVEL
         "                                              APROVADOR = WA_ZGLT037-APROVADOR            "modificação 03.01.2017
                                                       BINARY SEARCH.

        IF SY-SUBRC = 0.
          WA_ESTRA-ESTADO       = ICON_CHECKED .
          WA_ESTRA-OPCOES       = ICON_SYSTEM_UNDO .
          VFLG_ICO = 'N'.
          WA_ESTRA-APROVADOR    = WA_ZGLT038-APROVADOR.         "modificação 03.01.2017
        ELSEIF VFLG_ICO = 'S'.
          WA_ESTRA-ESTADO       = ICON_LED_YELLOW .
          WA_ESTRA-OPCOES       = '' .
          WA_ESTRA-APROVADOR    = WA_ZGLT037-APROVADOR.         "modificação 03.01.2017
        ELSE.
          IF V_USUARIO NE WA_ZGLT037-APROVADOR.
            WA_ESTRA-ESTADO       =  ' '.
            WA_ESTRA-OPCOES       = ICON_LED_YELLOW  .
          ELSE.
            WA_ESTRA-ESTADO       = ICON_LED_YELLOW .
            WA_ESTRA-OPCOES       = ICON_SET_STATE  .
          ENDIF.
          VFLG_ICO = 'X'.
          WA_ESTRA-APROVADOR    = WA_ZGLT037-APROVADOR.         "modificação 03.01.2017
        ENDIF.

        IF VFLG_ICO = 'X'.
          VFLG_ICO = 'S'.
        ENDIF.

        APPEND WA_ESTRA TO IT_ESTRA.
      ENDIF.
    ENDLOOP.

    "CS2017002054 - 14.09.2017
    DATA(_COUNT_NIVEL) = 0.
    IF V_LOTE IS INITIAL.
      SORT IT_ESTRA BY LOTE NIVEL APROVADOR.
      CLEAR: E_ROW_ID, V_IC_SET_STATE, V_APPEND_LOTE.
      LOOP AT IT_ESTRA INTO WA_ESTRA WHERE APROVADOR = V_USUARIO
                                       AND LOTE      = TG_LOTES-LOTE.

        IF WA_ESTRA-APROVADOR = V_USUARIO.
          ADD 1 TO _COUNT_NIVEL.
        ENDIF.

        IF E_ROW_ID IS NOT INITIAL AND SY-TABIX NE E_ROW_ID + 1.
          EXIT.
        ELSEIF E_ROW_ID IS NOT INITIAL AND SY-TABIX EQ E_ROW_ID + 1.
          IF WA_ESTRA-OPCOES NE ICON_SYSTEM_UNDO.
            V_IC_SET_STATE = 'X'.
          ENDIF.
          E_ROW_ID = SY-TABIX.
        ELSE.
          E_ROW_ID = SY-TABIX.
        ENDIF.

        LOOP AT IT_ESTRA INTO DATA(WL_ESTRA2) WHERE LOTE = TG_LOTES-LOTE.
          IF WL_ESTRA2-ESTADO NE ICON_CHECKED AND SY-TABIX LT E_ROW_ID.
            V_APPEND_LOTE = 'N'.
          ENDIF.
        ENDLOOP.
      ENDLOOP.
    ENDIF.

    IF _COUNT_NIVEL > 1.
      CLEAR: V_APPEND_LOTE.
    ENDIF.

    IF V_APPEND_LOTE = 'N'.
      CONTINUE.
    ENDIF.

    APPEND TG_LOTES.
    CLEAR TG_LOTES.
  ENDLOOP.

  IF V_LOTE IS INITIAL.
    SELECT *
      FROM ZGLT090
      INTO CORRESPONDING FIELDS OF TABLE IT_ESTRA
      FOR ALL ENTRIES IN IT_ZGLT034
      WHERE LOTE = IT_ZGLT034-LOTE.

    SORT  IT_ESTRA BY LOTE NIVEL APROVADOR.

    DATA COUNT_NIVEL TYPE I.

    LOOP AT TG_LOTES.
      TABIXL = SY-TABIX.
      CLEAR: E_ROW_ID, V_IC_SET_STATE, V_APPEND_LOTE, COUNT_NIVEL, VFLG_ICO .
      LOOP AT IT_ESTRA INTO WA_ESTRA WHERE LOTE      = TG_LOTES-LOTE.
        TABIX = SY-TABIX.
        READ TABLE IT_ZGLT038 INTO WA_ZGLT038 WITH KEY LOTE      = WA_ESTRA-LOTE
                                                       NIVEL     = WA_ESTRA-NIVEL BINARY SEARCH.

        IF SY-SUBRC = 0.
          WA_ESTRA-ESTADO       = ICON_CHECKED .
          WA_ESTRA-OPCOES       = ICON_SYSTEM_UNDO .
          VFLG_ICO = 'N'.
          WA_ESTRA-APROVADOR    = WA_ZGLT038-APROVADOR.         "modificação 03.01.2017
        ELSEIF VFLG_ICO = 'S'.
          WA_ESTRA-ESTADO       = ICON_LED_YELLOW .
          WA_ESTRA-OPCOES       = '' .
          WA_ESTRA-APROVADOR    = WA_ESTRA-APROVADOR.         "modificação 03.01.2017
        ELSE.
          IF V_USUARIO NE WA_ESTRA-APROVADOR.
            WA_ESTRA-ESTADO       =  ' '.
            WA_ESTRA-OPCOES       = ICON_LED_YELLOW  .
          ELSE.
            WA_ESTRA-ESTADO       = ICON_LED_YELLOW .
            WA_ESTRA-OPCOES       = ICON_SET_STATE  .
          ENDIF.
          VFLG_ICO = 'X'.
        ENDIF.
        MODIFY IT_ESTRA FROM WA_ESTRA INDEX TABIX.

        IF VFLG_ICO = 'X'.
          VFLG_ICO = 'S'.
        ENDIF.

      ENDLOOP.

      LOOP AT IT_ESTRA INTO WA_ESTRA WHERE APROVADOR = V_USUARIO
                                       AND LOTE      = TG_LOTES-LOTE.

        IF WA_ESTRA-APROVADOR = V_USUARIO.
          ADD 1 TO COUNT_NIVEL.
        ENDIF.

        IF E_ROW_ID IS NOT INITIAL AND SY-TABIX NE E_ROW_ID + 1.
          EXIT.
        ELSEIF E_ROW_ID IS NOT INITIAL AND SY-TABIX EQ E_ROW_ID + 1.
          IF WA_ESTRA-OPCOES NE ICON_SYSTEM_UNDO.
            V_IC_SET_STATE = 'X'.
          ENDIF.
          E_ROW_ID = SY-TABIX.
        ELSE.
          E_ROW_ID = SY-TABIX.
        ENDIF.

        LOOP AT IT_ESTRA INTO DATA(WL_ESTRA3) WHERE LOTE = TG_LOTES-LOTE.
          IF WL_ESTRA3-ESTADO NE ICON_CHECKED AND SY-TABIX LT E_ROW_ID.
            V_APPEND_LOTE = 'N'.
          ENDIF.
        ENDLOOP.
      ENDLOOP.
      IF COUNT_NIVEL > 1.
        CLEAR: V_APPEND_LOTE.
      ENDIF.

      IF V_APPEND_LOTE = 'N'.
        TG_LOTES-DEP_RESP = 'DELETE'.
        MODIFY TG_LOTES INDEX TABIXL  TRANSPORTING DEP_RESP.
      ENDIF.
    ENDLOOP.
    "
    DELETE TG_LOTES WHERE DEP_RESP = 'DELETE'.

  ENDIF.


  IF TG_LOTES[] IS NOT INITIAL.
    SORT IT_ESTRA BY LOTE APROVADOR.
    LOOP AT TG_LOTES.
      CLEAR VFLAG.
      IF V_LOTE IS NOT INITIAL.
        VFLAG = 'X'.
      ELSE.
        LOOP AT IT_ESTRA INTO WA_ESTRA WHERE LOTE      = TG_LOTES-LOTE
                                      AND   APROVADOR = V_USUARIO.
          VFLAG = 'X'.
          EXIT.
        ENDLOOP.
      ENDIF.
      LOOP AT IT_ESTRA INTO WA_ESTRA WHERE LOTE      = TG_LOTES-LOTE.
        MOVE-CORRESPONDING WA_ESTRA TO T_ESTRA.
        APPEND T_ESTRA.
      ENDLOOP.
      SORT  T_ESTRA BY LOTE NIVEL.
      IF VFLAG = 'X'.
        LOOP AT IT_ZGLT035 INTO WA_ZGLT035 WHERE LOTE = TG_LOTES-LOTE.
          XTOTAL  = 0.
          XTOTALF = 0.
          LOOP AT IT_ZGLT036 INTO WA_ZGLT036 WHERE DOC_LCTO = WA_ZGLT035-DOC_LCTO.
            READ TABLE IT_TBSL INTO WA_TBSL WITH KEY BSCHL = WA_ZGLT036-BSCHL BINARY SEARCH.
            IF WA_TBSL-SHKZG NE 'H'.
              ADD WA_ZGLT036-VLR_MOEDA_INT TO XTOTAL .
              ADD WA_ZGLT036-VLR_MOEDA_FORTE TO XTOTALF .
            ENDIF.
          ENDLOOP.
          WG_DOCS-DOC_LCTO          = WA_ZGLT035-DOC_LCTO.
          WG_DOCS-BUKRS             = WA_ZGLT035-BUKRS.
          WG_DOCS-TP_LCTO           = WA_ZGLT035-TP_LCTO.

          IF WA_ZGLT035-TP_LCTO IS INITIAL.
            CLEAR WA_ZGLT034.
            READ TABLE IT_ZGLT034 INTO WA_ZGLT034 WITH KEY LOTE = TG_LOTES-LOTE BINARY SEARCH.
            WG_DOCS-DESCRICAO         = WA_ZGLT034-DESCR_LOTE.
          ELSE.
            READ TABLE IT_ZGLT031 INTO WA_ZGLT031 WITH KEY TP_LCTO = WA_ZGLT035-TP_LCTO BINARY SEARCH.
            IF SY-SUBRC = 0.
              WG_DOCS-DESCRICAO         = WA_ZGLT031-DESCRICAO.
            ENDIF.
          ENDIF.
          "SEGURO
          WG_DOCS-LOTE              = WA_ZGLT035-LOTE.
          IF SY-TCODE NE 'ZGL019'.
            SELECT SINGLE *
              FROM ZGLT050
              INTO @DATA(WZGL050)
              WHERE LOTE = @TG_LOTES-LOTE.
            IF SY-SUBRC = 0.
              SELECT SINGLE BUTXT
               INTO WG_DOCS-DESCRICAO
               FROM T001
               WHERE BUKRS = WZGL050-BUKRS.
              CONCATENATE 'Emp: ' WG_DOCS-DESCRICAO INTO WG_DOCS-DESCRICAO SEPARATED BY SPACE.
              APPEND WG_DOCS TO T_DOCS. "(0)
              CALL FUNCTION 'DD_DOMVALUES_GET'
                EXPORTING
                  DOMNAME        = 'ZOPR_SEG'
                  TEXT           = 'X'
                  LANGU          = SY-LANGU
                TABLES
                  DD07V_TAB      = IDD07V
                EXCEPTIONS
                  WRONG_TEXTFLAG = 1
                  OTHERS         = 2.
              VDOMVALUE_L = WZGL050-TP_OPR.
              READ TABLE IDD07V INTO WIDD07V WITH KEY DOMVALUE_L = VDOMVALUE_L.
              CONCATENATE WZGL050-TP_OPR '-' WIDD07V-DDTEXT INTO WG_CADLOTE-TP_OPR.
              "
              CONCATENATE 'Tp.Operação: ' WG_CADLOTE-TP_OPR INTO WG_DOCS-DESCRICAO SEPARATED BY SPACE.
              APPEND WG_DOCS TO T_DOCS. "(1)

              CONCATENATE WZGL050-VIG_DE+6(2)  '/' WZGL050-VIG_DE+4(2)  '/' WZGL050-VIG_DE+0(4)  INTO  WG_CADLOTE-VIG_DE.
              CONCATENATE WZGL050-VIG_ATE+6(2) '/' WZGL050-VIG_ATE+4(2) '/' WZGL050-VIG_ATE+0(4) INTO  WG_CADLOTE-VIG_ATE.
              CONCATENATE 'Vigência: ' WG_CADLOTE-VIG_DE 'a' WG_CADLOTE-VIG_ATE INTO WG_DOCS-DESCRICAO SEPARATED BY SPACE.
              APPEND WG_DOCS TO T_DOCS. "(2)

              VLIFNR = WZGL050-COD_SEGURADORA.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  INPUT  = VLIFNR
                IMPORTING
                  OUTPUT = VLIFNR.

              SELECT SINGLE *
                FROM LFA1
                INTO @DATA(WLFA1)
                WHERE LIFNR = @VLIFNR.
              CONCATENATE WZGL050-COD_SEGURADORA '-' WLFA1-NAME1 INTO WG_CADLOTE-COD_SEGURADORA.
              "
              CONCATENATE 'Seguradora: ' WG_CADLOTE-COD_SEGURADORA INTO WG_DOCS-DESCRICAO SEPARATED BY SPACE.
              APPEND WG_DOCS TO T_DOCS. "(3)

              WG_CADLOTE-SEQ_PARC        = WZGL050-SEQ_PARC.
              CONCATENATE 'Parcelas: ' WG_CADLOTE-SEQ_PARC INTO WG_DOCS-DESCRICAO SEPARATED BY SPACE.
              APPEND WG_DOCS TO T_DOCS. "(4)

              CLEAR WG_CADLOTE-SEQ_TIPO.
              SELECT SINGLE DESCR
                INTO WG_CADLOTE-SEQ_TIPO
                FROM ZGLT064
                WHERE SEQ_TIPO = WZGL050-SEQ_TIPO.

              CONCATENATE WZGL050-SEQ_TIPO '-' WG_CADLOTE-SEQ_TIPO INTO WG_CADLOTE-SEQ_TIPO.
              CONCATENATE 'Tipo: ' WG_CADLOTE-SEQ_TIPO INTO WG_DOCS-DESCRICAO SEPARATED BY SPACE.
              APPEND WG_DOCS TO T_DOCS. "(5)

              WG_CADLOTE-OBSERVACAO      = WZGL050-OBSERVACAO.
              WG_DOCS-DESCRICAO = WG_CADLOTE-OBSERVACAO.
*              APPEND WG_DOCS TO T_DOCS. "(6)
            ENDIF.
          ENDIF.
          WG_DOCS-VLR_MOEDA_INT     = XTOTAL.
          WG_DOCS-VLR_MOEDA_FORTE   = XTOTALF.
          WG_DOCS-MOEDA_DOC         = WA_ZGLT035-MOEDA_DOC.

          APPEND WG_DOCS TO T_DOCS.
        ENDLOOP.
        MOVE-CORRESPONDING TG_LOTES TO T_LOTES.
        APPEND T_LOTES.
      ENDIF.
    ENDLOOP.


    IF T_LOTES[] IS NOT INITIAL.
      MSG = 'Sucesso'.
    ELSE.
      MSG = 'Não há lotes à aprovar.'.
    ENDIF.

  ENDIF.


ENDFUNCTION.
