class ZCL_ZGW_PLANNING_PR_01_DPC_EXT definition
  public
  inheriting from ZCL_ZGW_PLANNING_PR_01_DPC
  create public .

public section.

  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CHANGESET_BEGIN
    redefinition .
  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~EXECUTE_ACTION
    redefinition .
  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CHANGESET_END
    redefinition .
protected section.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_ZGW_PLANNING_PR_01_DPC_EXT IMPLEMENTATION.


  method /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CHANGESET_BEGIN.
**TRY.
*CALL METHOD SUPER->/IWBEP/IF_MGW_APPL_SRV_RUNTIME~CHANGESET_BEGIN
*  EXPORTING
*    IT_OPERATION_INFO =
**  CHANGING
**    CV_DEFER_MODE     =
*    .
** CATCH /IWBEP/CX_MGW_BUSI_EXCEPTION .
** CATCH /IWBEP/CX_MGW_TECH_EXCEPTION .
**ENDTRY.

    exit.
  endmethod.


  method /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CHANGESET_END.
**TRY.
*CALL METHOD SUPER->/IWBEP/IF_MGW_APPL_SRV_RUNTIME~CHANGESET_END
*    .
** CATCH /IWBEP/CX_MGW_BUSI_EXCEPTION .
** CATCH /IWBEP/CX_MGW_TECH_EXCEPTION .
**ENDTRY.

    exit.
  endmethod.


  METHOD /IWBEP/IF_MGW_APPL_SRV_RUNTIME~EXECUTE_ACTION.
*    DATA RETURN_REQUEST TYPE ZCL_ZGW_PLANNING_PR_01_MPC=>ENTITYRETURN.
*    DATA FORMATED_DATE  TYPE SY-DATUM.

    ME->CONTAINER_MESSAGE = /IWBEP/IF_MGW_CONV_SRV_RUNTIME~GET_MESSAGE_CONTAINER( ).
    ME->MO_SERVICE        = NEW ZCL_PP_SERVICES( ).

    ME->FUNCTION_IMPORT-ORDEM_CARREGAMENTO =
      IT_PARAMETER[ NAME = 'OrdemCarregamento' ]-VALUE.

    ME->MO_SERVICE->SELECT_SHIPMENT(
      EXPORTING
      ORDEM_CARREGAMENTO = ME->FUNCTION_IMPORT-ORDEM_CARREGAMENTO
      EXCEPTIONS
      SHIPMENT_NOT_FOUND = 4
    ).

    IF ( SY-SUBRC IS INITIAL ).
      "//Get data
      DATA(_SHIPMENT) = ME->MO_SERVICE->GET_SHIPMENT( ).

      TRY.
          ME->MO_SERVICE->PROCESS_ORDER_IS_LOCKED( _SHIPMENT-AUFNR ).

          CASE IV_ACTION_NAME.
            WHEN 'ReleaseProcessOrder'.

              ME->MO_SERVICE->UPDATE_SHIPMENT( ME->FUNCTION_IMPORT-ORDEM_CARREGAMENTO ).

              ME->MO_SERVICE->IS_RESERVATIONS_AVAILABLE(
                RESERVATION_NO = _SHIPMENT-RSNUM ).

              CALL METHOD ME->MO_SERVICE->CREATE_BATCH
                EXPORTING
                  CENTRO          = _SHIPMENT-WERKS
                  ORDEM           = _SHIPMENT-AUFNR
                  DATA_VENCIMENTO = _SHIPMENT-ERDAT
                  MATERIAL        = _SHIPMENT-MATNR
                IMPORTING
                  LOTE            = DATA(_LOTE).

              IF ( ME->MO_SERVICE->HAS_MESSAGES( ) = ABAP_FALSE ).
                CALL METHOD ME->MO_SERVICE->RELEASE_PROCESS_ORDER
                  EXPORTING
                    ORDER                      = _SHIPMENT-AUFNR
                    LOTE                       = _LOTE
                  EXCEPTIONS
                    PROCESS_ORDER_NOT_RELEASED = 4.
              ENDIF.

            WHEN 'ChangeStatusProcessOrder'.
              ME->FUNCTION_IMPORT-STATUS = IT_PARAMETER[ NAME = 'Status' ]-VALUE.

              TRY.
                  ME->MO_SERVICE->CHANGE_PO_USER_STATUS(
                    EXPORTING
                      ORDER   = _SHIPMENT-AUFNR
                      STATUS  = ME->FUNCTION_IMPORT-STATUS
                  ).
                CATCH ZCX_PP_SERVICES.
              ENDTRY.

            WHEN 'ConcludeProcessOrder'.

              ME->FUNCTION_IMPORT-ORDEM_CARREGAMENTO =  IT_PARAMETER[ NAME = 'OrdemCarregamento' ]-VALUE.
              ME->FUNCTION_IMPORT-QUANTIDADE = IT_PARAMETER[ NAME = 'Quantidade' ]-VALUE.
              ME->FUNCTION_IMPORT-DATA       = IT_PARAMETER[ NAME = 'Data'       ]-VALUE.

              IF ME->FUNCTION_IMPORT-QUANTIDADE IS INITIAL.
                RAISE EXCEPTION TYPE ZCX_PP_SERVICES
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_PP_SERVICES=>QUANTITY_INVALID-MSGID
                                      MSGNO = ZCX_PP_SERVICES=>QUANTITY_INVALID-MSGNO
                                      ATTR1 = ME->FUNCTION_IMPORT-QUANTIDADE
                                      ATTR2 = ME->FUNCTION_IMPORT-ORDEM_CARREGAMENTO ).
              ENDIF.

              ME->MO_SERVICE->UPDATE_SHIPMENT( ME->FUNCTION_IMPORT-ORDEM_CARREGAMENTO ).

              REPLACE ALL OCCURRENCES OF '/' IN ME->FUNCTION_IMPORT-DATA WITH SPACE.

              CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
                EXPORTING
                  DATE_EXTERNAL = ME->FUNCTION_IMPORT-DATA
                IMPORTING
                  DATE_INTERNAL = ME->FUNCTION_IMPORT-DATA.

              DATA(_LOTE_FORMATTED) = _SHIPMENT-AUFNR.
              SHIFT _LOTE_FORMATTED LEFT DELETING LEADING '0'.

              ME->MO_SERVICE->IS_RESERVATIONS_AVAILABLE(
                RESERVATION_NO  = _SHIPMENT-RSNUM
                CHECK_IS_LOCKED = ABAP_TRUE ).

              CALL METHOD ME->MO_SERVICE->SELECT_PLANNING
                EXPORTING
                  VBELN = _SHIPMENT-KDAUF
                  POSNR = _SHIPMENT-KDPOS
                  EDATU = _SHIPMENT-ERDAT.

              CALL METHOD ME->MO_SERVICE->CONCLUDE_PROCESS_ORDER
                EXPORTING
                  QUANTITY = ME->FUNCTION_IMPORT-QUANTIDADE
                  DATA     = CONV #( ME->FUNCTION_IMPORT-DATA ).

            WHEN 'RecipesProduction'.
          ENDCASE.

        CATCH ZCX_PP_SERVICES INTO ME->SERVICE_CX.
          CALL METHOD ME->MO_SERVICE->SET_MESSAGE
            EXPORTING
              TYPE   = ME->CONTAINER_MESSAGE->GCS_MESSAGE_TYPE-ERROR
              ID     = ME->SERVICE_CX->IF_T100_MESSAGE~T100KEY-MSGID
              NUMBER = ME->SERVICE_CX->IF_T100_MESSAGE~T100KEY-MSGNO
              V1     = ME->SERVICE_CX->IF_T100_MESSAGE~T100KEY-ATTR1
              V2     = ME->SERVICE_CX->IF_T100_MESSAGE~T100KEY-ATTR2
              V3     = ME->SERVICE_CX->IF_T100_MESSAGE~T100KEY-ATTR3
              V4     = ME->SERVICE_CX->IF_T100_MESSAGE~T100KEY-ATTR4.
      ENDTRY.

    ELSE.
      CALL METHOD ME->MO_SERVICE->SET_MESSAGE
        EXPORTING
          TYPE   = ME->CONTAINER_MESSAGE->GCS_MESSAGE_TYPE-ERROR
          ID     = ZCX_PP_SERVICES=>PROCESS_ORDER_NOT_EXIST-MSGID
          NUMBER = ZCX_PP_SERVICES=>PROCESS_ORDER_NOT_EXIST-MSGNO
          V1     = ME->FUNCTION_IMPORT-ORDEM_CARREGAMENTO.
    ENDIF.

    CHECK ME->MO_SERVICE->HAS_MESSAGES( ) = ABAP_TRUE.
    CALL METHOD ME->CONTAINER_MESSAGE->ADD_MESSAGES_FROM_BAPI
      EXPORTING
        IT_BAPI_MESSAGES          = ME->MO_SERVICE->GET_MESSAGES( )
        IV_DETERMINE_LEADING_MSG  = /IWBEP/IF_MESSAGE_CONTAINER=>GCS_LEADING_MSG_SEARCH_OPTION-FIRST
        IV_ADD_TO_RESPONSE_HEADER = ABAP_TRUE.

    RAISE EXCEPTION TYPE /IWBEP/CX_MGW_BUSI_EXCEPTION
      EXPORTING
        TEXTID            = /IWBEP/CX_MGW_BUSI_EXCEPTION=>BUSINESS_ERROR
        MESSAGE_CONTAINER = ME->CONTAINER_MESSAGE.
  ENDMETHOD.
ENDCLASS.
