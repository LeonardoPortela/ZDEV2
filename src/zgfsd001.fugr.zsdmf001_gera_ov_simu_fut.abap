FUNCTION ZSDMF001_GERA_OV_SIMU_FUT.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(I_VBELN) TYPE  VBAK-VBELN
*"  EXPORTING
*"     REFERENCE(E_VBELN) TYPE  VBAK-VBELN
*"  TABLES
*"      TE_RETURN STRUCTURE  BAPIRET2 OPTIONAL
*"----------------------------------------------------------------------


  DATA: WL_HEADER         TYPE VBRK,
        WL_HEADER_IN      TYPE BAPISDHD1,
        WL_HEADER_INX     TYPE BAPISDHD1X,
        WL_VBELN          TYPE VBAK-VBELN,

        WL_ITENS          TYPE VBRP,
        TL_KONV           TYPE TABLE OF KONV WITH HEADER LINE,

        TL_ITENS          TYPE TABLE OF VBRP WITH HEADER LINE,
        TL_VBFA           TYPE TABLE OF VBFA WITH HEADER LINE,

        TL_ITEMS_IN       TYPE TABLE OF BAPISDITM  WITH HEADER LINE,

        TL_ITEMS_INX      TYPE TABLE OF BAPISDITMX WITH HEADER LINE,
        TL_PARTNERS       TYPE TABLE OF BAPIPARNR  WITH HEADER LINE,
*        TL_SCHEDULES      TYPE TABLE OF BAPISCHDL  WITH HEADER LINE,
        TL_SCHEDULES_IN   TYPE TABLE OF BAPISCHDL  WITH HEADER LINE,
*        TL_SCHEDULES_IN_AUX   TYPE TABLE OF BAPISCHDL  WITH HEADER LINE,
        TL_SCHEDULES_INX  TYPE TABLE OF BAPISCHDLX WITH HEADER LINE,
        TL_CONDITIONS_IN  TYPE TABLE OF BAPICOND   WITH HEADER LINE,
*        TL_CONDITIONS_IN_AUX  TYPE TABLE OF BAPICOND   WITH HEADER LINE,
        TL_CONDITIONS_INX TYPE TABLE OF BAPICONDX  WITH HEADER LINE,
        TL_RETURN         TYPE TABLE OF BAPIRET2   WITH HEADER LINE,
        TL_TEXT_IN        TYPE TABLE OF BAPISDTEXT WITH HEADER LINE,
        WL_POSNR          TYPE SY-TABIX,
        WL_VLR_COVERT     TYPE DZMENG, "plfh-mgvgw,
        TL_TEXTO          TYPE CATSXT_LONGTEXT_ITAB,
        WL_TEXTO          TYPE LINE OF CATSXT_LONGTEXT_ITAB,
*        wl_bapiparex  TYPE bapiparex         ,
        TL_BAPIPAREX      TYPE TABLE OF BAPIPAREX WITH HEADER LINE,
        WL_BAPE_VBAK      TYPE BAPE_VBAK,
        WL_BAPE_VBAKX     TYPE BAPE_VBAKX        .                   " OCCURS 0..

  REFRESH: TL_ITENS, TL_ITEMS_IN, TL_ITEMS_INX,TL_PARTNERS, TL_SCHEDULES_IN, TL_SCHEDULES_INX,
           TL_CONDITIONS_IN, TL_CONDITIONS_INX, TL_RETURN, TL_TEXTO,
           TL_TEXT_IN, ESTRUTURA, EVENTS, TL_BAPIPAREX.
  CLEAR: WL_HEADER, WL_HEADER_IN, WL_HEADER_INX, TL_ITENS, TL_ITEMS_IN, TL_ITEMS_INX,TL_PARTNERS,
          TL_SCHEDULES_IN, TL_SCHEDULES_INX, TL_CONDITIONS_IN, TL_CONDITIONS_INX, TL_RETURN,
          WL_TEXTO, TL_TEXT_IN, WA_ESTRUTURA, XS_EVENTS,
          WL_BAPE_VBAK, WL_BAPE_VBAKX, TL_BAPIPAREX.

  SELECT SINGLE *
    FROM VBRK
    INTO WL_HEADER
     WHERE VBELN = I_VBELN.

*---> 05/07/2022 - Migração S4 - DG
*  SELECT *
*    FROM KONV
*    INTO TABLE TL_KONV
*    WHERE KNUMV EQ WL_HEADER-KNUMV
*     AND  KSCHL EQ 'PR00'.

  SELECT *
    FROM v_KONV
    INTO TABLE @data(TL_KONV_aux)
    WHERE KNUMV EQ @WL_HEADER-KNUMV
     AND  KSCHL EQ 'PR00'.

    move-corresponding TL_KONV_aux[] to TL_KONV[].
*<--- 05/07/2022 - Migração S4 - DG


  SELECT *
    FROM VBFA
    INTO TABLE TL_VBFA
     WHERE VBELN = I_VBELN.

  SELECT *
    FROM VBRP
    INTO TABLE TL_ITENS
     WHERE VBELN = I_VBELN.

  SELECT *
    FROM MARA
    INTO TABLE @DATA(IT_MARA)
    FOR ALL ENTRIES IN @TL_ITENS
     WHERE MATNR EQ @TL_ITENS-MATNR.

  CALL FUNCTION 'CATSXT_SIMPLE_TEXT_EDITOR'
    EXPORTING
      IM_TITLE = 'Texto para Ordem de Venda'
    CHANGING
      CH_TEXT  = TL_TEXTO.

  LOOP AT TL_TEXTO INTO WL_TEXTO.
    TL_TEXT_IN-TEXT_LINE(72) = WL_TEXTO.
    TL_TEXT_IN-TEXT_ID    = '0002'.
    TL_TEXT_IN-LANGU      = SY-LANGU.
    TL_TEXT_IN-FORMAT_COL = '/'.
    APPEND TL_TEXT_IN.
  ENDLOOP.


  WL_HEADER_IN-SALES_ORG  = WL_HEADER-VKORG.
  WL_HEADER_IN-DISTR_CHAN = WL_HEADER-VTWEG.
  WL_HEADER_IN-PURCH_DATE = SY-DATUM.
  WL_HEADER_IN-PURCH_NO_C = I_VBELN.
  WL_HEADER_IN-REF_DOC_L  = I_VBELN.
  WL_HEADER_IN-PYMT_METH  = 'P'.
  WL_HEADER_IN-PMNTTRMS   = 'I003'.
  WL_HEADER_IN-CURRENCY   = WL_HEADER-WAERK.
  WL_HEADER_IN-INCOTERMS1 = WL_HEADER-INCO1.
  WL_HEADER_IN-INCOTERMS2 = WL_HEADER-INCO2.
  WL_HEADER_IN-DIVISION   = WL_HEADER-SPART.
  WL_HEADER_IN-EXRATE_FI  = WL_HEADER_IN-EXCHG_RATE =  WL_HEADER-KURRF.
  WL_HEADER_IN-DOC_TYPE   = 'ZRFU'.
*  WL_HEADER_IN-FIX_VAL_DY = WL_HEADER-FKDAT.
  WL_HEADER_IN-FIX_VAL_DY = WL_HEADER-VALDT.
  WL_HEADER_IN-SHIP_COND  = WL_HEADER-VSBED.
  WL_HEADER_IN-REFOBJTYPE = 'VBRK'.
  WL_HEADER_IN-REFOBJKEY  = I_VBELN.
  WL_HEADER_IN-REFDOCTYPE = 'M'.
  WL_HEADER_IN-REFDOC_CAT = 'M'.
  WL_HEADER_IN-REF_DOC    = I_VBELN.
  WL_HEADER_IN-REF_DOC_L  = I_VBELN.
  READ TABLE TL_ITENS INDEX 1.
  WL_HEADER_IN-SALES_GRP  = TL_ITENS-VKGRP.
  WL_HEADER_IN-SALES_OFF  = TL_ITENS-VKBUR.


*---Monta dados de Parceiro
  TL_PARTNERS-PARTN_ROLE = 'LR'.
  TL_PARTNERS-PARTN_NUMB = WL_HEADER-KUNRG.
  APPEND TL_PARTNERS.
  CLEAR TL_PARTNERS.

  TL_PARTNERS-PARTN_ROLE = 'PC'.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = WL_HEADER-BUPLA
    IMPORTING
      OUTPUT = TL_PARTNERS-PARTN_NUMB.
  APPEND TL_PARTNERS.
  CLEAR TL_PARTNERS.

  TL_PARTNERS-PARTN_ROLE = 'RE'.
  TL_PARTNERS-PARTN_NUMB = WL_HEADER-KUNRG.
  APPEND TL_PARTNERS.
  CLEAR TL_PARTNERS.

  TL_PARTNERS-PARTN_ROLE = 'RG'.
  TL_PARTNERS-PARTN_NUMB = WL_HEADER-KUNRG.
  APPEND TL_PARTNERS.
  CLEAR TL_PARTNERS.

  TL_PARTNERS-PARTN_ROLE = 'WE'.
  TL_PARTNERS-PARTN_NUMB = WL_HEADER-KUNRG.
  APPEND TL_PARTNERS.
  CLEAR TL_PARTNERS.


  LOOP AT TL_ITENS INTO WL_ITENS.

* Extension - Campo ZPESAGEM
    CLEAR TL_BAPIPAREX.
    TL_BAPIPAREX-STRUCTURE     = 'BAPE_VBAK'.

    IF WL_ITENS-WERKS EQ '0175' AND IT_MARA[ MATNR = WL_ITENS-MATNR ]-MTART EQ 'ZFER'.
      WL_BAPE_VBAK-ZPESAGEM = '01'.
    ELSE.
      WL_BAPE_VBAK-ZPESAGEM = '02'.
    ENDIF.

    TL_BAPIPAREX-VALUEPART1 = WL_BAPE_VBAK.
    APPEND TL_BAPIPAREX.

    CLEAR TL_BAPIPAREX.
    TL_BAPIPAREX-STRUCTURE     = 'BAPE_VBAKX'.
    WL_BAPE_VBAKX-ZPESAGEM = 'X'.
    TL_BAPIPAREX-VALUEPART1 = WL_BAPE_VBAKX.
    APPEND TL_BAPIPAREX.


    TL_ITEMS_IN-ITM_NUMBER   = WL_ITENS-POSNR.
    TL_ITEMS_IN-MATERIAL     = WL_ITENS-MATNR.
    TL_ITEMS_IN-TARGET_QTY   = WL_VLR_COVERT = WL_ITENS-FKIMG.
    TL_ITEMS_IN-TARGET_QU    = WL_ITENS-VRKME.
    TL_ITEMS_IN-SALES_UNIT   = WL_ITENS-VRKME.
    TL_ITEMS_IN-USAGE_IND    = 'S'.
    TL_ITEMS_IN-PLANT        = WL_ITENS-WERKS.
    TL_ITEMS_IN-BATCH        = WL_ITENS-CHARG.
    TL_ITEMS_IN-SHIP_POINT   = WL_ITENS-WERKS.
    TL_ITEMS_IN-STORE_LOC    = WL_ITENS-LGORT.
    TL_ITEMS_IN-MATFRGTGRP   = '00000001'.
    TL_ITEMS_IN-REF_DOC_CA = 'M'.
    TL_ITEMS_IN-REFOBJTYPE = 'VBRK'.
    TL_ITEMS_IN-REFOBJKEY = I_VBELN.
    TL_ITEMS_IN-REF_DOC = I_VBELN.
    TL_ITEMS_IN-REF_DOC_IT =  WL_ITENS-POSNR.


    APPEND TL_ITEMS_IN.
    "
    CLEAR: TL_CONDITIONS_IN.
    TL_CONDITIONS_IN-ITM_NUMBER  = TL_ITEMS_IN-ITM_NUMBER .
    TL_CONDITIONS_IN-CURRENCY    = WL_HEADER-WAERK.

    READ TABLE TL_KONV WITH KEY KPOSN = WL_ITENS-POSNR.

    DATA(COEFICIENTE_D) = ZCL_SOLICITACAO_OV=>GET_IMPOSTO(
                                                    _CLIENTE    = WL_HEADER-KUNRG
                                                    _FORNECEDOR = CONV #( |{ WL_ITENS-WERKS ALPHA = IN }| )
                                                    _MATERIAL   = WL_ITENS-MATNR
                                                    _TIPO_ORDEM = 'ZRFU'
                                                    _DIRECAO    = 'D'
                                                    _WERKS      = WL_ITENS-WERKS  "<<RIM-SKM-IR120585-23.12.22
                                                       ).
*      ORIGEM SEM IMPOSTO E DESTINO COM IMPOSTO
    IF COEFICIENTE_D IS NOT INITIAL.
        TL_CONDITIONS_IN-COND_VALUE = TL_KONV-KBETR * COEFICIENTE_D.
    ELSE.
        TL_CONDITIONS_IN-COND_VALUE  = TL_KONV-KBETR.
    ENDIF.

*    TL_CONDITIONS_IN-COND_VALUE  = WL_ITENS-FKIMG.
*    TL_CONDITIONS_IN-COND_VALUE  = TL_KONV-KBETR.
    TL_CONDITIONS_IN-COND_UNIT   = TL_KONV-KMEIN.
    TL_CONDITIONS_IN-CONEXCHRAT  = WL_HEADER-KURRF.
    TL_CONDITIONS_IN-COND_TYPE   = 'PR00'.

    APPEND TL_CONDITIONS_IN.
    "
    CLEAR: TL_SCHEDULES_IN.
    TL_SCHEDULES_IN-ITM_NUMBER = TL_ITEMS_IN-ITM_NUMBER.
    TL_SCHEDULES_IN-REQ_QTY    = WL_VLR_COVERT.
    TL_SCHEDULES_IN-REQ_DLV_BL    = '10'.
    APPEND TL_SCHEDULES_IN.

    CLEAR: TL_ITEMS_IN, TL_CONDITIONS_IN, TL_SCHEDULES_IN, WL_ITENS.
    CLEAR TL_BAPIPAREX.
  ENDLOOP.

* Criar Ordem
  CALL FUNCTION 'SD_SALESDOCUMENT_CREATE'
    EXPORTING
      SALES_HEADER_IN      = WL_HEADER_IN
      SALES_HEADER_INX     = WL_HEADER_INX
    IMPORTING
      SALESDOCUMENT_EX     = WL_VBELN
    TABLES
      RETURN               = TL_RETURN
      SALES_ITEMS_IN       = TL_ITEMS_IN
      SALES_ITEMS_INX      = TL_ITEMS_INX
      SALES_PARTNERS       = TL_PARTNERS
      SALES_SCHEDULES_IN   = TL_SCHEDULES_IN
      SALES_SCHEDULES_INX  = TL_SCHEDULES_INX
      SALES_CONDITIONS_IN  = TL_CONDITIONS_IN
      SALES_CONDITIONS_INX = TL_CONDITIONS_INX
      SALES_TEXT           = TL_TEXT_IN
      EXTENSIONIN          = TL_BAPIPAREX.

* Verirfica se a ordem foi criada.
  CLEAR E_VBELN.
  IF NOT WL_VBELN IS INITIAL.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
    MOVE WL_VBELN TO E_VBELN.
  ELSE.
    APPEND LINES OF TL_RETURN TO TE_RETURN.
  ENDIF.



ENDFUNCTION.
