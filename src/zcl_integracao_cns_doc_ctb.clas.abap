CLASS ZCL_INTEGRACAO_CNS_DOC_CTB DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES ZIF_INTEGRACAO_INJECT.
    INTERFACES ZIF_INTEGRACAO_CNS_DOC_CTB.
    METHODS CONSTRUCTOR .

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_INTEGRACAO_CNS_DOC_CTB IMPLEMENTATION.


  METHOD CONSTRUCTOR.
    ME->ZIF_INTEGRACAO_INJECT~AT_ID_INTERFACE    = ZIF_INTEGRACAO=>AT_ID_INTERFACE_CTB_CNS_DOC.
    ME->ZIF_INTEGRACAO_INJECT~AT_TP_INTEGRACAO   = ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_INBOUND.
    ME->ZIF_INTEGRACAO_INJECT~AT_TP_CANAL        = ZIF_INTEGRACAO=>AT_TP_CANAL_COMUNICA_HTTP.
    ME->ZIF_INTEGRACAO_INJECT~AT_TP_SINCRONIA    = ZIF_INTEGRACAO=>AT_TP_SINCRONIA_SINCRONA.
    ME->ZIF_INTEGRACAO_INJECT~AT_AUTENTICA_OPUS  = ZIF_INTEGRACAO=>AT_ID_INTERFACE_AUT_OPUS_NAO.
    ME->ZIF_INTEGRACAO_INJECT~AT_SEND_AUTENTICAO = ZIF_INTEGRACAO=>AT_ID_INTERFACE_AUT_SEND_NAO.
    ME->ZIF_INTEGRACAO_INJECT~AT_REFERENCIA-TP_REFERENCIA = 'CTB_CNS_DOC'.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_CNS_DOC_CTB~GET_INSTANCE.
    IF ZIF_INTEGRACAO_CNS_DOC_CTB~AT_INTEGRACAO_CNS_DOC_CTB IS NOT BOUND.
      CREATE OBJECT ZIF_INTEGRACAO_CNS_DOC_CTB~AT_INTEGRACAO_CNS_DOC_CTB TYPE ZCL_INTEGRACAO_CNS_DOC_CTB.
    ENDIF.
    R_ZIF_INTEGRACAO_CNS_DOC_CTB = ZIF_INTEGRACAO_CNS_DOC_CTB~AT_INTEGRACAO_CNS_DOC_CTB.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_CNS_DOC_CTB~GET_VALIDAR_DADOS.
    R_ZIF_INTEGRACAO_CNS_DOC_CTB = ME.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_CNS_DOC_CTB~SET_DS_DATA.
    R_ZIF_INTEGRACAO_CNS_DOC_CTB = ME.

    ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP = I_INFO.
    /UI2/CL_JSON=>DESERIALIZE( EXPORTING JSON = I_INFO-DS_BODY CHANGING DATA = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_CONSULTA ).
    ME->ZIF_INTEGRACAO_CNS_DOC_CTB~GET_VALIDAR_DADOS( ).

    ME->ZIF_INTEGRACAO_INJECT~AT_REFERENCIA-ID_REFERENCIA =
       ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_CONSULTA-CH_REFERENCIA &&
       ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_CONSULTA-PROTOCOLO &&
       ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_CONSULTA-DOC_EMPRESA &&
       ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_CONSULTA-DOC_NUMERO &&
       ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_CONSULTA-DOC_ANO.

    CHECK ME->ZIF_INTEGRACAO_INJECT~AT_REFERENCIA-ID_REFERENCIA IS INITIAL.

    RAISE EXCEPTION TYPE ZCX_INTEGRACAO
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_INTEGRACAO=>ZCX_ERRO_BODY_RECEBIDO-MSGID
                          MSGNO = ZCX_INTEGRACAO=>ZCX_ERRO_BODY_RECEBIDO-MSGNO )
        MSGID  = ZCX_INTEGRACAO=>ZCX_ERRO_BODY_RECEBIDO-MSGID
        MSGNO  = ZCX_INTEGRACAO=>ZCX_ERRO_BODY_RECEBIDO-MSGNO
        MSGTY  = 'E'.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_CNS_DOC_CTB~SET_SEND_MSG.

    DATA: LC_INTEGRACAO TYPE REF TO ZCL_INTEGRACAO.

    CLEAR: E_ZINTEGRACAO_LOG.

    R_ZIF_INTEGRACAO_CNS_DOC_CTB = ME.

    "Verificar a Função de Cada requisição
    ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_FUNCAO_PROCESSA  = '/ctb/cnsdoccontabil'.

    CREATE OBJECT LC_INTEGRACAO.

    LC_INTEGRACAO->ZIF_INTEGRACAO~SET_MSG_INJECT( I_MSG = CAST #( ME )
      )->SET_NEW_MSG( IMPORTING E_ID_INTEGRACAO = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ID_INTEGRACAO
      )->SET_PROCESSAR_RETORNO(
      )->SET_INTEGRAR_RETORNO( IMPORTING E_DATA_RETORNO = DATA(E_DATA_RETORNO) E_ZINTEGRACAO_LOG = E_ZINTEGRACAO_LOG
      )->GET_REGISTRO( IMPORTING E_INTEGRACAO = DATA(E_INTEGRACAO)
      )->FREE(
      ).

    E_MSG = E_DATA_RETORNO.
    E_PROTOCOLO = ZCL_STRING=>LPAD( I_STR  = CONV #( E_INTEGRACAO-ID_INTEGRACAO ) I_QTD  = 15 I_CHAR = '0'  ).

    CLEAR: LC_INTEGRACAO.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~GET_HEADER_REQUEST_HTTP.
    R_IF_INTEGRACAO_INJECT = ME.
    E_HEADER_FIELDS = ME->ZIF_INTEGRACAO_INJECT~AT_HEADER_FIELDS.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_BEFORE_ERROR_OUTBOUND_MSG.
    R_IF_INTEGRACAO_INJECT = ME.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_BEFORE_SEND_OUTBOUND_MSG.
    R_IF_INTEGRACAO_INJECT = ME.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_HEADER_REQUEST_HTTP.
    R_IF_INTEGRACAO_INJECT = ME.
    ME->ZIF_INTEGRACAO_INJECT~AT_HEADER_FIELDS = I_HEADER_FIELDS.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_INTEGRAR_INBOUND.

    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO = ABAP_FALSE.

    CLEAR:
        ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_RETORN,
        ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF,
        ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BSEG,
        ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_CONSULTA,
        ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158.

    DATA: I_INBOUND TYPE ZDE_CNS_DOC_CTB.
    ME->ZIF_INTEGRACAO_CNS_DOC_CTB~SET_DS_DATA( I_INFO = VALUE #( DS_BODY = I_MSG_INBOUND ) ).
    /UI2/CL_JSON=>DESERIALIZE( EXPORTING JSON = I_MSG_INBOUND CHANGING DATA = I_INBOUND ).

    "Procurar por chave de Referência (1) tabela de interface
    IF I_INBOUND-CH_REFERENCIA IS NOT INITIAL.
      SELECT SINGLE * INTO @ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158
        FROM ZFIT0158
       WHERE OBJ_KEY EQ @I_INBOUND-CH_REFERENCIA.

      DATA(CK_ACHOU) = COND #( LET CLET = SY-SUBRC IN WHEN CLET IS INITIAL THEN ABAP_TRUE ELSE ABAP_FALSE ).
    ENDIF.

    "Procurar por Número do Protocolo
    IF ( CK_ACHOU EQ ABAP_FALSE ) AND ( I_INBOUND-PROTOCOLO IS NOT INITIAL ).
      SELECT SINGLE * INTO @ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158
        FROM ZFIT0158
       WHERE PROTOCOLO EQ @I_INBOUND-PROTOCOLO.
      CK_ACHOU = COND #( LET CLET = SY-SUBRC IN WHEN CLET IS INITIAL THEN ABAP_TRUE ELSE ABAP_FALSE ).
    ENDIF.

    "Procurar por documento contábil (1) tabela de interface
    IF ( CK_ACHOU EQ ABAP_FALSE )
    AND ( I_INBOUND-DOC_ANO IS NOT INITIAL AND I_INBOUND-DOC_EMPRESA IS NOT INITIAL AND I_INBOUND-DOC_NUMERO IS NOT INITIAL ).
      SELECT SINGLE * INTO @ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158
        FROM ZFIT0158
       WHERE BUKRS EQ @I_INBOUND-DOC_EMPRESA
         AND BELNR EQ @I_INBOUND-DOC_NUMERO
         AND GJAHR EQ @I_INBOUND-DOC_ANO.
      CK_ACHOU = COND #( LET CLET = SY-SUBRC IN WHEN CLET IS INITIAL THEN ABAP_TRUE ELSE ABAP_FALSE ).
    ENDIF.

    "Procurar por documento contábil (2) tabela da contabilidade
    IF ( CK_ACHOU EQ ABAP_FALSE )
    AND ( I_INBOUND-DOC_ANO IS NOT INITIAL AND I_INBOUND-DOC_EMPRESA IS NOT INITIAL AND I_INBOUND-DOC_NUMERO IS NOT INITIAL ).
      SELECT SINGLE * INTO @ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF
        FROM BKPF
       WHERE BUKRS EQ @I_INBOUND-DOC_EMPRESA
         AND BELNR EQ @I_INBOUND-DOC_NUMERO
         AND GJAHR EQ @I_INBOUND-DOC_ANO.

      CK_ACHOU = COND #( LET CLET = SY-SUBRC IN WHEN CLET IS INITIAL THEN ABAP_TRUE ELSE ABAP_FALSE ).

      IF CK_ACHOU EQ ABAP_TRUE.
        ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-BELNR   = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF-BELNR.
        ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-BUKRS   = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF-BUKRS.
        ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-GJAHR   = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF-GJAHR.
        ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-OBJ_KEY = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF-AWKEY.
      ENDIF.
    ENDIF.

    "Procurar por chave de Referência (1) tabela da contabilidade
    IF ( CK_ACHOU EQ ABAP_FALSE ) AND ( I_INBOUND-CH_REFERENCIA IS NOT INITIAL ).
      SELECT SINGLE * INTO @ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF
        FROM BKPF
       WHERE AWKEY EQ @I_INBOUND-CH_REFERENCIA.

      CK_ACHOU = COND #( LET CLET = SY-SUBRC IN WHEN CLET IS INITIAL THEN ABAP_TRUE ELSE ABAP_FALSE ).

      IF CK_ACHOU EQ ABAP_TRUE.
        ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-BELNR   = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF-BELNR.
        ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-BUKRS   = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF-BUKRS.
        ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-GJAHR   = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF-GJAHR.
        ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-OBJ_KEY = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF-AWKEY.
      ENDIF.
    ENDIF.

    IF CK_ACHOU EQ ABAP_TRUE.

      ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_RETORN-CH_REFERENCIA = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-OBJ_KEY.
      ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_RETORN-PROTOCOLO     = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-PROTOCOLO.
      ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_RETORN-BUKRS         = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-BUKRS.
      ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_RETORN-BELNR         = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-BELNR.
      ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_RETORN-GJAHR         = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-GJAHR.
      ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_RETORN-WAIT          = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-CK_AGUARDAR.

      IF ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF IS INITIAL AND ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-BELNR IS NOT INITIAL.
        SELECT SINGLE * INTO @ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF
          FROM BKPF
         WHERE BUKRS EQ @ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-BUKRS
           AND BELNR EQ @ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-BELNR
           AND GJAHR EQ @ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-GJAHR.

        IF SY-SUBRC IS INITIAL.
          DATA RLDNR_L97C10R9113 TYPE RLDNR.
CALL FUNCTION 'FAGL_GET_LEADING_LEDGER'
  IMPORTING E_RLDNR = RLDNR_L97C10R9113
  EXCEPTIONS NOT_FOUND     = 1
             MORE_THAN_ONE = 2.
IF SY-SUBRC = 0.
CALL FUNCTION 'FAGL_GET_GL_DOCUMENT'
  EXPORTING
    I_RLDNR = RLDNR_L97C10R9113
    I_BUKRS = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-BUKRS
    I_BELNR = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-BELNR
    I_GJAHR = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_ZFIT0158-GJAHR
  IMPORTING
    ET_BSEG = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BSEG
  EXCEPTIONS NOT_FOUND = 1.
ENDIF.
IF SY-SUBRC <> 0 OR LINES( ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BSEG ) = 0.
  SY-SUBRC = 4.
  SY-DBCNT = 0.
ELSE.
  SY-DBCNT = LINES( ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BSEG ).
ENDIF.

        ENDIF.
      ENDIF.

      ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_RETORN-REVERSED =
         COND #( LET REVSERSE = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF-STBLG IN WHEN REVSERSE IS INITIAL THEN ABAP_FALSE ELSE ABAP_TRUE ).

      ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_RETORN-DOC_CONTABIL = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BKPF.
      ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_RETORN-DOC_CONTABIL_ITENS = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_BSEG.

      E_NM_CODE  = '200'.
      E_MSG_OUTBOUND = ZCL_FMCALL_BASE=>ABAP2JSON( EXPORTING ABAP_DATA = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_RETORN ).

    ELSE.
      CLEAR: ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_RETORN.
      E_MSG_OUTBOUND = ZCL_FMCALL_BASE=>ABAP2JSON( EXPORTING ABAP_DATA = ME->ZIF_INTEGRACAO_CNS_DOC_CTB~AT_RETORN ).
    ENDIF.

    E_SUCESSO = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_INTEGRAR_RETORNO.
    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO = ABAP_TRUE.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_PROCESSA_INBOUND.
    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO = ABAP_TRUE.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_PROCESSA_RETORNO.
    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO = ABAP_TRUE.
  ENDMETHOD.
ENDCLASS.
