CLASS ZCL_INTEGRACAO DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES ZIF_INTEGRACAO .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_INTEGRACAO IMPLEMENTATION.


  METHOD ZIF_INTEGRACAO~CK_PERMISSAO_OUTBOUND.

    R_IF_INTEGRACAO = ME.

    DATA: LVA_DIAS_LIMITE TYPE I,
          LWA_REFERENCIA  TYPE ZDE_CHAVE_REFERENCIA.

    CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_REFERENCIA IS NOT INITIAL AND
          ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_REFERENCIA IS NOT INITIAL.

    CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_SINCRONIA NE ZCL_INTEGRACAO=>ZIF_INTEGRACAO~AT_TP_SINCRONIA_SINCRONA.

    DATA(LC_MOMENTO) = ZCL_DATA_HORA=>GET_DATA_HOTA_TO_TIMESTAMP( EXPORTING I_DATA = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DT_REGISTRO I_HORA = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-HR_REGISTRO ).

    SELECT * INTO @DATA(WA_INTEGRACAO)
      FROM ZINTEGRACAO
     WHERE TP_REFERENCIA EQ @ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_REFERENCIA
       AND ID_REFERENCIA EQ @ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_REFERENCIA
       AND ID_INTEGRACAO NE @ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO
       AND CK_CANCELOU   NE @ABAP_TRUE
       AND CK_INTEGRADO  NE @ABAP_TRUE
      ORDER BY ID_INTEGRACAO.


      DATA(LC_MOMENTO2) = ZCL_DATA_HORA=>GET_DATA_HOTA_TO_TIMESTAMP( EXPORTING I_DATA = WA_INTEGRACAO-DT_REGISTRO I_HORA = WA_INTEGRACAO-HR_REGISTRO ).
      "Verificar Sequencia TimeStamp
      IF LC_MOMENTO2 LT LC_MOMENTO. "Verificar se Registro Anterior(Mesma Referencia) foi processado, caso não bloquear processamento
        DATA(LC_ERRO) = ABAP_TRUE.
      ENDIF.

      LVA_DIAS_LIMITE = SY-DATUM - WA_INTEGRACAO-DT_REGISTRO.

      IF LVA_DIAS_LIMITE > 3. "Verificar se registro esta pendente de processamento a mais de 3 dias... Se sim, cancelar processamento.
        LWA_REFERENCIA-ID_REFERENCIA = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_REFERENCIA.
        LWA_REFERENCIA-TP_REFERENCIA = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_REFERENCIA.
        ME->ZIF_INTEGRACAO~SET_CANCELAR_ENVIO( I_REFERENCIA = LWA_REFERENCIA ).
      ENDIF.

    ENDSELECT.

    IF LC_ERRO EQ ABAP_TRUE.

      ME->ZIF_INTEGRACAO~SET_ENQUEUE( EXPORTING I_ID_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO I_BLOQUEAR = ABAP_FALSE ).

      RAISE EXCEPTION TYPE ZCX_INTEGRACAO
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_INTEGRACAO=>ZCX_MSG_DEPENDENTE-MSGID
                            MSGNO = ZCX_INTEGRACAO=>ZCX_MSG_DEPENDENTE-MSGNO
                            ATTR1 = CONV #( WA_INTEGRACAO-ID_INTEGRACAO ) )
          MSGID  = ZCX_INTEGRACAO=>ZCX_MSG_DEPENDENTE-MSGID
          MSGNO  = ZCX_INTEGRACAO=>ZCX_MSG_DEPENDENTE-MSGNO
          MSGTY  = 'E'
          MSGV1  = CONV #( WA_INTEGRACAO-ID_INTEGRACAO ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~FREE.

    R_IF_INTEGRACAO = ME.

    IF ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO IS NOT INITIAL.
      ME->ZIF_INTEGRACAO~SET_ENQUEUE( EXPORTING I_ID_INTEGRACAO = ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO ).
    ENDIF.

    CLEAR: ZIF_INTEGRACAO~AT_MSG_INTEGRA.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~GET_INSTANCE.

    "Instancia Objeto Singleton

    IF ZIF_INTEGRACAO~AT_IF_INTEGRACAO IS NOT BOUND.
      CREATE OBJECT ZIF_INTEGRACAO~AT_IF_INTEGRACAO TYPE ZCL_INTEGRACAO.
    ENDIF.
    R_IF_INTEGRACAO = ZIF_INTEGRACAO~AT_IF_INTEGRACAO.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~GET_LINE_COLOR.

    IF I_ANONIMO EQ ABAP_TRUE.
      CASE I_SELECTED.
        WHEN ABAP_TRUE.
          R_LINE_COLOR = 'C110'.
        WHEN ABAP_FALSE.
          R_LINE_COLOR = 'C100'.
      ENDCASE.
      EXIT.
    ENDIF.

    CASE I_TP_SINCRONIA.
      WHEN ZCL_INTEGRACAO=>ZIF_INTEGRACAO~AT_TP_SINCRONIA_SINCRONA.

        CASE I_SELECTED.
          WHEN ABAP_TRUE.
            R_LINE_COLOR = 'C310'.
          WHEN ABAP_FALSE.
            R_LINE_COLOR = 'C300'.
        ENDCASE.

      WHEN OTHERS.

        CASE I_SELECTED.
          WHEN ABAP_TRUE.
            CASE I_STATUS.
              WHEN ICON_RED_XCIRCLE.
                R_LINE_COLOR = 'C210'.
              WHEN ICON_INITIAL.
                R_LINE_COLOR = 'C410'.
              WHEN ICON_DEFECT.
                R_LINE_COLOR = 'C610'.
              WHEN ICON_WF_WORKITEM_RESERVED.
                R_LINE_COLOR = 'C710'.
              WHEN ICON_RELEASE.
                R_LINE_COLOR = 'C110'.
              WHEN ICON_WF_UNLINK.
                R_LINE_COLOR = 'C410'.
              WHEN ICON_COMPLETE.
                R_LINE_COLOR = 'C510'.
            ENDCASE.
          WHEN ABAP_FALSE.
            CASE I_STATUS.
              WHEN ICON_RED_XCIRCLE.
                R_LINE_COLOR = 'C201'.
              WHEN ICON_INITIAL.
                R_LINE_COLOR = 'C401'.
              WHEN ICON_DEFECT.
                R_LINE_COLOR = 'C601'.
              WHEN ICON_WF_WORKITEM_RESERVED.
                R_LINE_COLOR = 'C701'.
              WHEN ICON_RELEASE.
                R_LINE_COLOR = 'C101'.
              WHEN ICON_WF_UNLINK.
                R_LINE_COLOR = 'C401'.
              WHEN ICON_COMPLETE.
                R_LINE_COLOR = 'C501'.
            ENDCASE.
        ENDCASE.

    ENDCASE.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~GET_LINE_COLOR_LOG.

    IF I_LINHA_LOG-DS_ERRO IS NOT INITIAL.
      R_LINE_COLOR = 'C600'.
    ELSE.
      R_LINE_COLOR = 'C500'.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~GET_MSG_ALV.

    R_IF_INTEGRACAO = ME.

    CLEAR: E_INTEGRACAO_ALV.
    IF I_INTEGRACAO IS INITIAL.
      MOVE-CORRESPONDING ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA TO E_INTEGRACAO_ALV.
      DATA(LC_INTEGRACAO) = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
    ELSE.
      MOVE-CORRESPONDING I_INTEGRACAO TO E_INTEGRACAO_ALV.
      LC_INTEGRACAO = I_INTEGRACAO.
    ENDIF.

    IF LC_INTEGRACAO-DS_BODY IS NOT INITIAL.
      E_INTEGRACAO_ALV-ICO_MSG_ENVIO = ICON_ATTACHMENT.
    ELSE.
      E_INTEGRACAO_ALV-ICO_MSG_ENVIO = ICON_DUMMY.
    ENDIF.

    IF LC_INTEGRACAO-DS_HEADER IS NOT INITIAL.
      E_INTEGRACAO_ALV-ICO_MSG_HEADER = ICON_ATTACHMENT.
    ELSE.
      E_INTEGRACAO_ALV-ICO_MSG_HEADER = ICON_DUMMY.
    ENDIF.

    IF LC_INTEGRACAO-DS_DATA_RETORNO IS NOT INITIAL.
      E_INTEGRACAO_ALV-ICO_MSG_RETORNO = ICON_ATTACHMENT.
    ELSE.
      E_INTEGRACAO_ALV-ICO_MSG_RETORNO = ICON_DUMMY.
    ENDIF.

    "Status de Retorno
    CASE LC_INTEGRACAO-TP_INTEGRACAO.
      WHEN ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_INBOUND.
        E_INTEGRACAO_ALV-ICO_ST_RETORNO = ICON_LED_GREEN.
      WHEN ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_OUTBOUND.
        CASE LC_INTEGRACAO-CK_RETORNOU.
          WHEN ABAP_TRUE.
            E_INTEGRACAO_ALV-ICO_ST_RETORNO = ICON_LED_GREEN.
          WHEN ABAP_FALSE.
            IF E_INTEGRACAO_ALV-QT_ERRO IS NOT INITIAL.
              E_INTEGRACAO_ALV-ICO_ST_RETORNO = ICON_LED_RED.
            ELSE.
              E_INTEGRACAO_ALV-ICO_ST_RETORNO = ICON_LED_YELLOW.
            ENDIF.
        ENDCASE.
    ENDCASE.

    "Status de Processamento
    CASE LC_INTEGRACAO-CK_PROCESSADO.
      WHEN ABAP_TRUE.
        E_INTEGRACAO_ALV-ICO_ST_PROCESSADO = ICON_LED_GREEN.
      WHEN ABAP_FALSE.
        E_INTEGRACAO_ALV-ICO_ST_PROCESSADO = ICON_LED_YELLOW.
    ENDCASE.

    "Status de Integrado
    CASE LC_INTEGRACAO-CK_INTEGRADO.
      WHEN ABAP_TRUE.
        E_INTEGRACAO_ALV-ICO_ST_INTEGRADO = ICON_LED_GREEN.
      WHEN ABAP_FALSE.
        E_INTEGRACAO_ALV-ICO_ST_INTEGRADO = ICON_LED_YELLOW.
    ENDCASE.

    CASE LC_INTEGRACAO-TP_INTEGRACAO.
      WHEN ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_INBOUND.

        IF LC_INTEGRACAO-CK_CANCELOU EQ ABAP_TRUE.
          E_INTEGRACAO_ALV-ICO_ST_MSG = ICON_RED_XCIRCLE. "Vermelho
        ELSEIF LC_INTEGRACAO-CK_INTEGRADO  EQ ABAP_FALSE AND LC_INTEGRACAO-CK_PROCESSADO EQ ABAP_FALSE.
          E_INTEGRACAO_ALV-ICO_ST_MSG = ICON_INITIAL.
        ELSEIF LC_INTEGRACAO-CK_INTEGRADO  EQ ABAP_FALSE AND LC_INTEGRACAO-CK_PROCESSADO EQ ABAP_TRUE.
          E_INTEGRACAO_ALV-ICO_ST_MSG = ICON_WF_UNLINK. "Falta Integrar
        ELSEIF LC_INTEGRACAO-CK_INTEGRADO  EQ ABAP_TRUE AND LC_INTEGRACAO-CK_PROCESSADO EQ ABAP_TRUE.
          E_INTEGRACAO_ALV-ICO_ST_MSG = ICON_COMPLETE. "Finalizado
        ENDIF.

      WHEN ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_OUTBOUND.

        IF LC_INTEGRACAO-CK_CANCELOU EQ ABAP_TRUE.

          E_INTEGRACAO_ALV-ICO_ST_MSG = ICON_RED_XCIRCLE. "Vermelho

          "Status Geral Msg
        ELSEIF LC_INTEGRACAO-CK_INTEGRADO  EQ ABAP_FALSE AND
           LC_INTEGRACAO-CK_PROCESSADO EQ ABAP_FALSE AND
           LC_INTEGRACAO-CK_RETORNOU   EQ ABAP_FALSE AND
           LC_INTEGRACAO-QT_ERRO IS INITIAL.
          "Status Inicial
          E_INTEGRACAO_ALV-ICO_ST_MSG = ICON_INITIAL. "Cinza

        ELSEIF LC_INTEGRACAO-CK_INTEGRADO  EQ ABAP_FALSE AND
           LC_INTEGRACAO-CK_PROCESSADO     EQ ABAP_FALSE AND
           LC_INTEGRACAO-CK_RETORNOU       EQ ABAP_FALSE AND
           LC_INTEGRACAO-QT_ERRO           IS NOT INITIAL.

          IF LC_INTEGRACAO-QT_ERRO GT ZIF_INTEGRACAO=>AT_QTD_PADRAO_TENTATIVAS.
            "Status que Já tentou várias vezes enviar a informação
            E_INTEGRACAO_ALV-ICO_ST_MSG = ICON_DEFECT. "Vermelho
          ELSE.
            "Status que Já tentou várias vezes enviar a informação mais inda é automático
            E_INTEGRACAO_ALV-ICO_ST_MSG = ICON_WF_WORKITEM_RESERVED.
          ENDIF.

        ELSEIF LC_INTEGRACAO-CK_INTEGRADO  EQ ABAP_FALSE AND
           LC_INTEGRACAO-CK_PROCESSADO     EQ ABAP_FALSE AND
           LC_INTEGRACAO-CK_RETORNOU       EQ ABAP_TRUE .

          "Status Enviou e Retornou
          E_INTEGRACAO_ALV-ICO_ST_MSG = ICON_RELEASE. " Verde

        ELSEIF LC_INTEGRACAO-CK_INTEGRADO  EQ ABAP_FALSE AND
           LC_INTEGRACAO-CK_PROCESSADO     EQ ABAP_TRUE AND
           LC_INTEGRACAO-CK_RETORNOU       EQ ABAP_TRUE .

          "Status Integrar Enviou/Retornou/Processou
          E_INTEGRACAO_ALV-ICO_ST_MSG = ICON_WF_UNLINK. "Falta Integrar

        ELSEIF LC_INTEGRACAO-CK_INTEGRADO  EQ ABAP_TRUE AND
           LC_INTEGRACAO-CK_PROCESSADO     EQ ABAP_TRUE AND
           LC_INTEGRACAO-CK_RETORNOU       EQ ABAP_TRUE .

          "Status Completo Enviou/Retornou/Processou/Integrado
          E_INTEGRACAO_ALV-ICO_ST_MSG = ICON_COMPLETE. "Finalizado
        ENDIF.

    ENDCASE.

    CALL FUNCTION 'OIL_DATE_TO_TIMESTAMP'
      EXPORTING
        I_DATE               = E_INTEGRACAO_ALV-DT_REGISTRO
        I_TIME               = E_INTEGRACAO_ALV-HR_REGISTRO
      IMPORTING
        E_TSTAMP             = E_INTEGRACAO_ALV-DTHR_REGISTRO
      EXCEPTIONS
        INVALID_DATE_OR_TIME = 1
        INVALID_TIME_ZONE    = 2
        OTHERS               = 3.

    IF E_INTEGRACAO_ALV-CK_ANONIMO EQ ABAP_TRUE.
      E_INTEGRACAO_ALV-ICO_ST_MSG = ICON_MODIFY.
    ENDIF.

    E_INTEGRACAO_ALV-LINE_COLOR = ME->ZIF_INTEGRACAO~GET_LINE_COLOR(
      EXPORTING
        I_TP_SINCRONIA = E_INTEGRACAO_ALV-TP_SINCRONIA
        I_STATUS       = E_INTEGRACAO_ALV-ICO_ST_MSG
        I_SELECTED     = ABAP_FALSE
        I_ANONIMO      = E_INTEGRACAO_ALV-CK_ANONIMO ).

*    CASE .
*      WHEN ICON_INITIAL.
*        E_INTEGRACAO_ALV-LINE_COLOR = 'C101'.
*      WHEN ICON_DEFECT.
*        E_INTEGRACAO_ALV-LINE_COLOR = 'C601'.
*      WHEN ICON_WF_WORKITEM_RESERVED.
*        E_INTEGRACAO_ALV-LINE_COLOR = 'C701'.
*      WHEN ICON_RELEASE.
*        E_INTEGRACAO_ALV-LINE_COLOR = 'C101'.
*      WHEN ICON_WF_UNLINK.
*        E_INTEGRACAO_ALV-LINE_COLOR = 'C401'.
*      WHEN ICON_COMPLETE.
*        E_INTEGRACAO_ALV-LINE_COLOR = 'C501'.
*    ENDCASE.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~GET_MSG_LOG_ALV.

    R_IF_INTEGRACAO = ME.

    CLEAR: E_INTEGRACAO_LOG_ALV.

    MOVE-CORRESPONDING I_INTEGRACAO_LOG TO E_INTEGRACAO_LOG_ALV.

    IF I_INTEGRACAO_LOG-DS_DATA_RETORNO IS NOT INITIAL.
      E_INTEGRACAO_LOG_ALV-ICO_MSG_RETORNO = ICON_ATTACHMENT.
    ELSE.
      E_INTEGRACAO_LOG_ALV-ICO_MSG_RETORNO = ICON_DUMMY.
    ENDIF.

    E_INTEGRACAO_LOG_ALV-LINE_COLOR = ME->ZIF_INTEGRACAO~GET_LINE_COLOR_LOG( I_LINHA_LOG  = I_INTEGRACAO_LOG I_SELECTED = ABAP_FALSE ).

    CALL FUNCTION 'OIL_DATE_TO_TIMESTAMP'
      EXPORTING
        I_DATE               = E_INTEGRACAO_LOG_ALV-DT_REGISTRO
        I_TIME               = E_INTEGRACAO_LOG_ALV-HR_REGISTRO
      IMPORTING
        E_TSTAMP             = E_INTEGRACAO_LOG_ALV-DTHR_REGISTRO
      EXCEPTIONS
        INVALID_DATE_OR_TIME = 1
        INVALID_TIME_ZONE    = 2
        OTHERS               = 3.

    CALL FUNCTION 'OIL_DATE_TO_TIMESTAMP'
      EXPORTING
        I_DATE               = E_INTEGRACAO_LOG_ALV-DT_RESPOSTA
        I_TIME               = E_INTEGRACAO_LOG_ALV-HR_RESPOSTA
      IMPORTING
        E_TSTAMP             = E_INTEGRACAO_LOG_ALV-DTHR_RESPOSTA
      EXCEPTIONS
        INVALID_DATE_OR_TIME = 1
        INVALID_TIME_ZONE    = 2
        OTHERS               = 3.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~GET_NEW_ID_INTEGRACAO.

    R_IF_INTEGRACAO = ME.

    CHECK E_ID_INTEGRACAO IS INITIAL.

    WAIT UP TO 1 SECONDS.

*    CALL FUNCTION 'NUMBER_RANGE_ENQUEUE'
*      EXPORTING
*        object           = 'ZIDINTEGRA'
*      EXCEPTIONS
*        foreign_lock     = 1
*        object_not_found = 2
*        system_failure   = 3
*        OTHERS           = 4.

*    IF sy-subrc IS NOT INITIAL.
** Desbloqueia o objeto de numeração
*      CALL FUNCTION 'NUMBER_RANGE_DEQUEUE'
*        EXPORTING
*          object           = 'ZIDINTEGRA'
*        EXCEPTIONS
*          object_not_found = 1
*          OTHERS           = 2.
*      IF sy-subrc IS NOT INITIAL.
*        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno INTO DATA(mtext) WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*        zcx_integracao=>zif_error~gera_erro_geral( i_texto = mtext ).
*      ELSE.
*        CALL FUNCTION 'NUMBER_RANGE_ENQUEUE'
*          EXPORTING
*            object           = 'ZIDINTEGRA'
*          EXCEPTIONS
*            foreign_lock     = 1
*            object_not_found = 2
*            system_failure   = 3
*            OTHERS           = 4.
*
*        IF sy-subrc IS NOT INITIAL.
*          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno INTO DATA(mtext1) WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*          zcx_integracao=>zif_error~gera_erro_geral( i_texto = mtext1 ).
*        ENDIF.
*      ENDIF.
*    ENDIF.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        NR_RANGE_NR             = '01'
        OBJECT                  = 'ZIDINTEGRA'
        IGNORE_BUFFER           = 'X'
      IMPORTING
        NUMBER                  = E_ID_INTEGRACAO
      EXCEPTIONS
        INTERVAL_NOT_FOUND      = 1
        NUMBER_RANGE_NOT_INTERN = 2
        OBJECT_NOT_FOUND        = 3
        QUANTITY_IS_0           = 4
        QUANTITY_IS_NOT_1       = 5
        INTERVAL_OVERFLOW       = 6
        BUFFER_OVERFLOW         = 7
        OTHERS                  = 8.

*    IF sy-subrc IS NOT INITIAL.
*      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno INTO mtext WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*      zcx_integracao=>zif_error~gera_erro_geral( i_texto = mtext ).
*    ENDIF.

** Desbloqueia o objeto de numeração
*    CALL FUNCTION 'NUMBER_RANGE_DEQUEUE'
*      EXPORTING
*        object           = 'ZIDINTEGRA'
*      EXCEPTIONS
*        object_not_found = 1
*        OTHERS           = 2.
*
*    IF sy-subrc IS NOT INITIAL.
*      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno INTO mtext WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*      zcx_integracao=>zif_error~gera_erro_geral( i_texto = mtext ).
*    ENDIF.

    ME->ZIF_INTEGRACAO~SET_ENQUEUE( EXPORTING I_ID_INTEGRACAO = E_ID_INTEGRACAO I_BLOQUEAR = ABAP_TRUE ).

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~GET_NOT_STORE_LOG.


    CLEAR: R_NOT_STORE_LOG.

    SELECT SINGLE *
      FROM TVARVC INTO @DATA(LWA_TVARVC)
     WHERE NAME EQ 'ZINTEGRACAO_NOT_STORE_LOG'
       AND LOW  EQ @I_ID_INTERFACE.

    CHECK SY-SUBRC EQ 0.

    R_NOT_STORE_LOG = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~GET_QINFO_ALV.

    DATA: IT_DD07V        TYPE TABLE OF DD07V,
          WA_EXCEPT_QINFO TYPE LVC_S_QINF.

    CLEAR: R_QINFO.

    "Informações de Retorno
    CALL FUNCTION 'GET_DOMAIN_VALUES'
      EXPORTING
        DOMNAME    = 'ZDM_ST_RETORNO'
      TABLES
        VALUES_TAB = IT_DD07V.

    LOOP AT IT_DD07V INTO DATA(WA_DD07V) WHERE DOMVALUE_L IS NOT INITIAL.
      WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
      WA_EXCEPT_QINFO-VALUE = WA_DD07V-DOMVALUE_L.
      WA_EXCEPT_QINFO-TEXT  = WA_DD07V-DDTEXT.
      WA_EXCEPT_QINFO-TABNAME   = 'ZINTEGRACAO_ALV'.
      WA_EXCEPT_QINFO-FIELDNAME = 'ICO_ST_RETORNO'.
      APPEND WA_EXCEPT_QINFO TO R_QINFO.
    ENDLOOP.

    "Informações de Processamento
    CALL FUNCTION 'GET_DOMAIN_VALUES'
      EXPORTING
        DOMNAME    = 'ZDM_ST_PROCESSO'
      TABLES
        VALUES_TAB = IT_DD07V.

    LOOP AT IT_DD07V INTO WA_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
      WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
      WA_EXCEPT_QINFO-VALUE = WA_DD07V-DOMVALUE_L.
      WA_EXCEPT_QINFO-TEXT  = WA_DD07V-DDTEXT.
      WA_EXCEPT_QINFO-TABNAME   = 'ZINTEGRACAO_ALV'.
      WA_EXCEPT_QINFO-FIELDNAME = 'ICO_ST_PROCESSADO'.
      APPEND WA_EXCEPT_QINFO TO R_QINFO.
    ENDLOOP.

    "Informações de Integrado
    CALL FUNCTION 'GET_DOMAIN_VALUES'
      EXPORTING
        DOMNAME    = 'ZDM_ST_INTEGRADO'
      TABLES
        VALUES_TAB = IT_DD07V.

    LOOP AT IT_DD07V INTO WA_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
      WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
      WA_EXCEPT_QINFO-VALUE = WA_DD07V-DOMVALUE_L.
      WA_EXCEPT_QINFO-TEXT  = WA_DD07V-DDTEXT.
      WA_EXCEPT_QINFO-TABNAME   = 'ZINTEGRACAO_ALV'.
      WA_EXCEPT_QINFO-FIELDNAME = 'ICO_ST_INTEGRADO'.
      APPEND WA_EXCEPT_QINFO TO R_QINFO.
    ENDLOOP.

    "Informações de Status Geral
    CALL FUNCTION 'GET_DOMAIN_VALUES'
      EXPORTING
        DOMNAME    = 'ZDM_ST_MSG'
      TABLES
        VALUES_TAB = IT_DD07V.

    LOOP AT IT_DD07V INTO WA_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
      WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
      WA_EXCEPT_QINFO-VALUE = WA_DD07V-DOMVALUE_L.
      WA_EXCEPT_QINFO-TEXT  = WA_DD07V-DDTEXT.
      WA_EXCEPT_QINFO-TABNAME   = 'ZINTEGRACAO_ALV'.
      WA_EXCEPT_QINFO-FIELDNAME = 'ICO_ST_MSG'.
      APPEND WA_EXCEPT_QINFO TO R_QINFO.
    ENDLOOP.

    "Informações de Status Msg De Envio
    CALL FUNCTION 'GET_DOMAIN_VALUES'
      EXPORTING
        DOMNAME    = 'ZDM_ICO_MSG_ENVIO'
      TABLES
        VALUES_TAB = IT_DD07V.

    LOOP AT IT_DD07V INTO WA_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
      WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
      WA_EXCEPT_QINFO-VALUE = WA_DD07V-DOMVALUE_L.
      WA_EXCEPT_QINFO-TEXT  = WA_DD07V-DDTEXT.
      WA_EXCEPT_QINFO-TABNAME   = 'ZINTEGRACAO_ALV'.
      WA_EXCEPT_QINFO-FIELDNAME = 'ICO_MSG_ENVIO'.
      APPEND WA_EXCEPT_QINFO TO R_QINFO.
    ENDLOOP.

    "Informações de Status Msg De Retorno
    CALL FUNCTION 'GET_DOMAIN_VALUES'
      EXPORTING
        DOMNAME    = 'ZDM_ICO_MSG_RETORNO'
      TABLES
        VALUES_TAB = IT_DD07V.

    LOOP AT IT_DD07V INTO WA_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
      WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
      WA_EXCEPT_QINFO-VALUE = WA_DD07V-DOMVALUE_L.
      WA_EXCEPT_QINFO-TEXT  = WA_DD07V-DDTEXT.
      WA_EXCEPT_QINFO-TABNAME   = 'ZINTEGRACAO_ALV'.
      WA_EXCEPT_QINFO-FIELDNAME = 'ICO_MSG_RETORNO'.
      APPEND WA_EXCEPT_QINFO TO R_QINFO.
    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~GET_REGISTRO.

    R_IF_INTEGRACAO = ME.
    E_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~GET_REGISTRO_LOG.

    "Recupera Registro

    R_IF_INTEGRACAO = ME.

    SELECT SINGLE * INTO @E_INTEGRACAO_LOG
      FROM ZINTEGRACAO_LOG
     WHERE ID_INTEGRACAO EQ @I_ID_INTEGRACAO
       AND DT_REGISTRO   EQ @I_DT_REGISTRO
       AND HR_REGISTRO   EQ @I_HR_REGISTRO.

    CHECK SY-SUBRC IS NOT INITIAL.

    RAISE EXCEPTION TYPE ZCX_INTEGRACAO
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_INTEGRACAO=>ZCX_ID_INTEGRACAO_NAO_ECONTRAD-MSGID
                          MSGNO = ZCX_INTEGRACAO=>ZCX_ID_INTEGRACAO_NAO_ECONTRAD-MSGNO
                          ATTR1 = CONV #( I_ID_INTEGRACAO ) )
        MSGID  = ZCX_INTEGRACAO=>ZCX_ID_INTEGRACAO_NAO_ECONTRAD-MSGID
        MSGNO  = ZCX_INTEGRACAO=>ZCX_ID_INTEGRACAO_NAO_ECONTRAD-MSGNO
        MSGTY  = 'E'
        MSGV1  = CONV #( I_ID_INTEGRACAO ).

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~SET_CANCELAR_ENVIO.

    R_IF_INTEGRACAO = ME.

    UPDATE ZINTEGRACAO
       SET CK_CANCELOU = ABAP_TRUE
           DT_CANCELOU = SY-DATUM
           HR_CANCELOU = SY-UZEIT
           US_CANCELOU = SY-UNAME
     WHERE TP_REFERENCIA EQ I_REFERENCIA-TP_REFERENCIA
       AND ID_REFERENCIA EQ I_REFERENCIA-ID_REFERENCIA
       AND CK_INTEGRADO  NE ABAP_TRUE.

    COMMIT WORK AND WAIT.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~SET_ENQUEUE.

    R_IF_INTEGRACAO = ME.

    CASE I_BLOQUEAR.
      WHEN ABAP_FALSE.

        CALL FUNCTION 'ZDENQUEUE_INTEGRACAO'
          EXPORTING
            ID_INTEGRACAO = I_ID_INTEGRACAO.

      WHEN ABAP_TRUE.

        CALL FUNCTION 'ZENQUEUE_INTEGRACAO'
          EXPORTING
            ID_INTEGRACAO  = I_ID_INTEGRACAO
          EXCEPTIONS
            FOREIGN_LOCK   = 1
            SYSTEM_FAILURE = 2
            OTHERS         = 3.

        IF SY-SUBRC IS NOT INITIAL.
          RAISE EXCEPTION TYPE ZCX_INTEGRACAO
            EXPORTING
              TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
              MSGTY  = 'E'
              MSGID  = SY-MSGID
              MSGNO  = SY-MSGNO
              MSGV1  = SY-MSGV1
              MSGV2  = SY-MSGV2
              MSGV3  = SY-MSGV3
              MSGV4  = SY-MSGV4.
        ENDIF.

    ENDCASE.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~SET_INBOUND_MSG.

    "Interface InBound Sincrona

    R_IF_INTEGRACAO = ME.

    "Somente interfaces de InBound
    CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_INTEGRACAO EQ ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_INBOUND.

    CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_RETORNOU EQ ABAP_FALSE.

    CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_CANCELOU EQ ABAP_FALSE.

*    DATA: WA_RESPOSTA TYPE ZINTEGRACAO_LOG.
*    WA_RESPOSTA-ID_INTEGRACAO   = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO.
*    WA_RESPOSTA-DT_REGISTRO     = SY-DATUM.
*    WA_RESPOSTA-HR_REGISTRO     = SY-UZEIT.
*    WA_RESPOSTA-US_REGISTRO     = SY-UNAME.
*    WA_RESPOSTA-DT_RESPOSTA     = SY-DATUM.
*    WA_RESPOSTA-HR_RESPOSTA     = SY-UZEIT.
*    WA_RESPOSTA-US_RESPOSTA     = SY-UNAME.
*    MODIFY ZINTEGRACAO_LOG FROM WA_RESPOSTA.
*    COMMIT WORK.
*
*    "Registra Retorno para Processamento
*    IF WA_RESPOSTA-DS_DATA_RETORNO IS NOT INITIAL.
*      ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_RETORNOU     = ABAP_TRUE.
*      ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_RETORNO = WA_RESPOSTA-DS_DATA_RETORNO.
*      MODIFY ZINTEGRACAO FROM ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
*      COMMIT WORK.
*    ENDIF.
*
*    CHECK WA_RESPOSTA-DS_ERRO IS NOT INITIAL.
*    ADD 1 TO ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-QT_ERRO.
*    MODIFY ZINTEGRACAO FROM ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
*    COMMIT WORK.
*
*    "Propagar erro de Comunicação para Fora
*    ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = CONV #( WA_RESPOSTA-DS_ERRO ) ).


*    DATA: WA_RESPOSTA TYPE ZINTEGRACAO_LOG.
*
*    R_IF_INTEGRACAO = ME.
*
*    "Somente interfaces de InBound
*    CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_INTEGRACAO EQ ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_INBOUND.
*
*    CHECK ME->ZIF_INTEGRACAO~AT_MSG_INJECT IS NOT INITIAL.
*
*    WA_RESPOSTA-ID_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO.
*    WA_RESPOSTA-DT_REGISTRO   = SY-DATUM.
*    WA_RESPOSTA-HR_REGISTRO   = SY-UZEIT.
*    WA_RESPOSTA-US_REGISTRO   = SY-UNAME.
*    MODIFY ZINTEGRACAO_LOG FROM WA_RESPOSTA.
*    COMMIT WORK.
*
*    "Processar MSG """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
*    " --> MSG_Entrada
*    ME->ZIF_INTEGRACAO~AT_MSG_INJECT->SET_PROCESSA_INBOUND( IMPORTING E_SUCESSO = DATA(E_SUCESSO) ).
*    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DT_PROCESSADO = SY-DATUM.
*    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-HR_PROCESSADO = SY-UZEIT.
*    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-US_PROCESSADO = SY-UNAME.
*    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_PROCESSADO = E_SUCESSO.
*    MODIFY ZINTEGRACAO FROM ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
*    COMMIT WORK.
*    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
*
*    "Integrar MSG """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
*    ME->ZIF_INTEGRACAO~AT_MSG_INJECT->SET_INTEGRAR_INBOUND( IMPORTING E_MSG_OUTBOUND = E_MSG E_SUCESSO = E_SUCESSO ).
*    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DT_INTEGRADO    = SY-DATUM.
*    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-HR_INTEGRADO    = SY-UZEIT.
*    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-US_INTEGRADO    = SY-UNAME.
*    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_INTEGRADO    = E_SUCESSO.
*    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_RETORNOU     = ABAP_TRUE.
*    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_RETORNO = E_MSG.
*    MODIFY ZINTEGRACAO FROM ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
*    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
*
*    WA_RESPOSTA-DS_DATA_RETORNO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_RETORNO.
*    WA_RESPOSTA-DT_RESPOSTA     = SY-DATUM.
*    WA_RESPOSTA-HR_RESPOSTA     = SY-UZEIT.
*    WA_RESPOSTA-US_RESPOSTA     = SY-UNAME.
*    MODIFY ZINTEGRACAO_LOG FROM WA_RESPOSTA.
*    COMMIT WORK.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~SET_INSTANCIA_OBJETO_INJECT.

    R_IF_INTEGRACAO = ME.

    IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT IS NOT BOUND.

      IF ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTERFACE IS NOT INITIAL.

        SELECT SINGLE *
          FROM ZWST0001 INTO @DATA(LWA_ZWST0001)
         WHERE ID_INTERFACE EQ @ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTERFACE.

        IF SY-SUBRC EQ 0.

          CASE SY-SYSID.
            WHEN 'DEV'.
              DATA(_TP_AMBIENTE) = '01'.
            WHEN 'QAS'.
              _TP_AMBIENTE = '02'.
            WHEN 'PRD'.
              _TP_AMBIENTE = '03'.
          ENDCASE.

          SELECT SINGLE *
            FROM ZWST0002 INTO @DATA(LWA_ZWST0002)
           WHERE CD_RECURSO  EQ @LWA_ZWST0001-CD_RECURSO
             AND TP_AMBIENTE EQ @_TP_AMBIENTE.

          IF SY-SUBRC EQ 0 AND LWA_ZWST0002-NM_RECURSO(3) EQ 'ZCL'.
            CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE (LWA_ZWST0002-NM_RECURSO).
            RETURN.
          ENDIF.

        ENDIF.

      ENDIF.

      CASE ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTERFACE.
        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_LOTE_FRETE.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_LOTE_FRETE').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_PRECO_FRETE.

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_ORD_CARREGAMEN.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_ORD_CARREGA').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_VIAGEM_APROVAR.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_VIAGEM_APROVAR').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_VIAGEM_REJEITA.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_VIAGEM_REJEITA').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_VIAGEM_PRECO.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_VIAGEM_PRECO').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_SOL_OC_OPUS.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_SOLICITA_OC_OPUS').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_CAN_OC_OPUS.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_CANCELAR_OC_OPUS').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_VIAGEM_CARRE.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_VIAGEM_CARREGAR').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_VIAGEM_CACAN.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_VIAGEM_CARRCAN').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_VIAGEM_STATUS.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_VIAGEM_STATUS').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_VIA_CANCELAR.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_VIAGEM_CANCELA').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_VIAGEM_DECARRE.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_VIAGEM_DESCARG').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_CANCEL_APROVAR.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_CANCEL_APROVAR').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_CANCEL_REJEITA.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_CANCEL_REJEITAR').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_GRC_NEW_DOC.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_GRC_NEW_NFE').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_GRC_CAN_DOC.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_GRC_NEW_NFE_CA').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_GRC_EST_DOC.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_GRC_NEW_NFE_ES').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_TOKEN.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_TOKEN').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_EMBALAGEM.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_MOBILE_EMB').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_ENERGIA.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_MOBILE_ENERGIA').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_CTB_NEW_DOC.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_NEW_DOC_CTB').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_KUHLMANN_AUT.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_TOKEN_KUHLMANN').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_KUHLMANN_ANA.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_HVI_KUHLMANN').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_KUHLMANN_CLI.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_CLI_KUHLMANN').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_KUHLMANN_COF.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_COF_KUHLMANN').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_KUHLMANN_REC.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_REC_KUHLMANN').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_PEDI_CNS.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_PEDIDO_CONSULTA').

*----CS2021000508 - 07.06.2021 - JT - inicio
        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_VIAGEM_APR_CAR.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_TROCANT_APROVAR').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_VIAGEM_UPL_AUT.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_UPLOAD_AUTH').

        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_VIAGEM_UPL_EXE.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_UPLOAD_EXEC').
*----CS2021000508 - 07.06.2021 - JT - fim

*----CS2021000696 - 09.08.2021 - JT - inicio
        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_VIAGEM_UPL_CON.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_UPLOAD_CONF').
*----CS2021000696 - 09.08.2021 - JT - fim

*----CS2021000286 - 04.10.2021 - JT - inicio
        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_OBS_ZLES0050.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_OBS_ZLES0050').
*----CS2021000286 - 04.10.2021 - JT - fim

*----CS2021000207 - 03.03.2022 - JT - inicio
        WHEN ZIF_INTEGRACAO=>AT_ID_INTERFACE_COMPENSA_SCP.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INTEGRACAO_COMPENSA_SCP').
*----CS2021000207 - 03.03.2022 - JT - fim

        WHEN '170'.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INT_NF_ECOMM_XML').

*** Inicio - Rubenilson - 09.01.24 - US163080
        WHEN '176'.
          CREATE OBJECT ME->ZIF_INTEGRACAO~AT_MSG_INJECT TYPE ('ZCL_INT_OB_ORDEM_ORC_MOBMAN').
*** Fim - Rubenilson - 09.01.24 - US163080
      ENDCASE.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~SET_INTEGRAR_RETORNO.

    R_IF_INTEGRACAO = ME.

    CLEAR: E_ZINTEGRACAO_LOG.

    CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_PROCESSADO EQ ABAP_TRUE.
    CHECK ME->ZIF_INTEGRACAO~AT_MSG_INJECT IS NOT INITIAL.
    CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_CANCELOU EQ ABAP_FALSE.
    CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_ANONIMO EQ ABAP_FALSE.

    CASE ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_INTEGRACAO.
      WHEN ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_INBOUND.

        E_ZINTEGRACAO_LOG-ID_INTEGRACAO   = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO.
        E_ZINTEGRACAO_LOG-DT_REGISTRO     = SY-DATUM.
        E_ZINTEGRACAO_LOG-HR_REGISTRO     = SY-UZEIT.
        E_ZINTEGRACAO_LOG-US_REGISTRO     = SY-UNAME.
        E_ZINTEGRACAO_LOG-TIPO            = ZIF_INTEGRACAO=>AT_TP_LOG_INTEGRACAO.

        TRY .
            ME->ZIF_INTEGRACAO~AT_MSG_INJECT->SET_INTEGRAR_INBOUND(
              EXPORTING
                I_MSG_INBOUND   = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_BODY
                I_ID_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO
                I_MSG_COMPLETA  = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA
              IMPORTING
                E_MSG_OUTBOUND  = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_RETORNO
                E_SUCESSO       = DATA(E_SUCESSO)
                E_MSG_ERRO      = DATA(E_MSG_ERRO)
                E_NM_CODE       = DATA(E_NM_CODE)
            ).
          CATCH CX_ROOT.
        ENDTRY.

        ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-NM_CODE = E_NM_CODE.

        E_DATA_RETORNO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_RETORNO.
        E_ZINTEGRACAO_LOG-DT_RESPOSTA     = SY-DATUM.
        E_ZINTEGRACAO_LOG-HR_RESPOSTA     = SY-UZEIT.
        E_ZINTEGRACAO_LOG-US_RESPOSTA     = SY-UNAME.
        E_ZINTEGRACAO_LOG-DS_ERRO         = E_MSG_ERRO.
        E_ZINTEGRACAO_LOG-NM_CODE         = E_NM_CODE.
        E_ZINTEGRACAO_LOG-DS_DATA_RETORNO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_RETORNO.

        IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_NOT_STORE_LOG = ABAP_FALSE.
          MODIFY ZINTEGRACAO_LOG FROM E_ZINTEGRACAO_LOG.
          COMMIT WORK AND WAIT. " STEFANINI - 2000016980 - IR193546 - 10.09.2024
        ENDIF.

        "Registra Retorno para Processamento
        IF E_ZINTEGRACAO_LOG-DS_DATA_RETORNO IS NOT INITIAL.
          ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_RETORNOU     = ABAP_TRUE.
          ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_RETORNO = E_ZINTEGRACAO_LOG-DS_DATA_RETORNO.

          IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_NOT_STORE_LOG = ABAP_FALSE.
            MODIFY ZINTEGRACAO FROM ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
            COMMIT WORK AND WAIT. " STEFANINI - 2000016980 - IR193546 - 10.09.2024
          ENDIF.

        ENDIF.

        IF ( E_ZINTEGRACAO_LOG-DS_ERRO IS NOT INITIAL OR E_SUCESSO IS INITIAL ) AND ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_SINCRONIA EQ ZIF_INTEGRACAO=>AT_TP_SINCRONIA_ASSINCRONA.

          ADD 1 TO ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-QT_ERRO.

          IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_NOT_STORE_LOG = ABAP_FALSE.
            MODIFY ZINTEGRACAO FROM ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
            COMMIT WORK AND WAIT. " STEFANINI - 2000016980 - IR193546 - 10.09.2024
          ENDIF.

          EXIT.
        ENDIF.

      WHEN ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_OUTBOUND.

        E_ZINTEGRACAO_LOG-ID_INTEGRACAO   = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO.
        E_ZINTEGRACAO_LOG-DT_REGISTRO     = SY-DATUM.
        E_ZINTEGRACAO_LOG-HR_REGISTRO     = SY-UZEIT.
        E_ZINTEGRACAO_LOG-US_REGISTRO     = SY-UNAME.
        E_ZINTEGRACAO_LOG-TIPO            = ZIF_INTEGRACAO=>AT_TP_LOG_INTEGRACAO.

        TRY .
            CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_RETORNO IS NOT INITIAL.
            ME->ZIF_INTEGRACAO~AT_MSG_INJECT->SET_INTEGRAR_RETORNO(
              EXPORTING
                I_ID_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO
                I_MSG_COMPLETA  = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA
                I_MSG_RETORNO   = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_RETORNO
              IMPORTING
                E_SUCESSO       = E_SUCESSO ).
          CATCH CX_ROOT.
        ENDTRY.

        E_ZINTEGRACAO_LOG-DT_RESPOSTA     = SY-DATUM.
        E_ZINTEGRACAO_LOG-HR_RESPOSTA     = SY-UZEIT.
        E_ZINTEGRACAO_LOG-US_RESPOSTA     = SY-UNAME.

        IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_NOT_STORE_LOG = ABAP_FALSE.
          MODIFY ZINTEGRACAO_LOG FROM E_ZINTEGRACAO_LOG.
          COMMIT WORK AND WAIT. " STEFANINI - 2000016980 - IR193546 - 10.09.2024
        ENDIF.

    ENDCASE.

    "Informações da Integração
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DT_INTEGRADO  = SY-DATUM.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-HR_INTEGRADO  = SY-UZEIT.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-US_INTEGRADO  = SY-UNAME.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_INTEGRADO  = E_SUCESSO.

    IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_NOT_STORE_LOG = ABAP_FALSE.
      MODIFY ZINTEGRACAO FROM ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
      COMMIT WORK AND WAIT. " STEFANINI - 2000016980 - IR193546 - 10.09.2024
    ENDIF.

    MESSAGE S004 WITH ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO.

    DATA(LV_COUNT) = 1.

    LOOP AT ME->ZIF_INTEGRACAO~AT_MULTIPART ASSIGNING FIELD-SYMBOL(<FS_PART>).

      APPEND INITIAL LINE TO ME->ZIF_INTEGRACAO~AT_MSG_MULTIPART ASSIGNING FIELD-SYMBOL(<FS_ITEM>).

      MOVE-CORRESPONDING <FS_PART> TO <FS_ITEM>.

      <FS_ITEM>-ID_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO.
      <FS_ITEM>-ID_FORM = LV_COUNT.

      ADD 1 TO LV_COUNT.

    ENDLOOP.

    IF ME->ZIF_INTEGRACAO~AT_MSG_MULTIPART IS NOT INITIAL.

      IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_NOT_STORE_LOG = ABAP_FALSE.
        MODIFY ZINTEGRACAO01 FROM TABLE ME->ZIF_INTEGRACAO~AT_MSG_MULTIPART.
        COMMIT WORK AND WAIT. " STEFANINI - 2000016980 - IR193546 - 10.09.2024
      ENDIF.

    ENDIF.


  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~SET_MSG_INJECT.

    "Injetar Dependencia de Objeto Externo com Interface ZIF_INTEGRACAO_INJECT

    ME->ZIF_INTEGRACAO~AT_MSG_INJECT = I_MSG.
    R_IF_INTEGRACAO = ME.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~SET_NEW_MSG.

    "Cria Nova Msg de Integração

    R_IF_INTEGRACAO = ME.

    CLEAR: ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.

    ZIF_INTEGRACAO~AT_MSG_INJECT->AT_NOT_STORE_LOG = ME->ZIF_INTEGRACAO~GET_NOT_STORE_LOG( I_ID_INTERFACE = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_ID_INTERFACE ).

    "Seta Id. de Interface
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTERFACE = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_ID_INTERFACE.

    "Informações de Solicitante
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DT_REGISTRO  = SY-DATUM.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-HR_REGISTRO  = SY-UZEIT.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-US_REGISTRO  = SY-UNAME.

    "Tipo de Serviço Utilizado
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_TP_INTEGRACAO.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_CANAL      = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_TP_CANAL.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_SINCRONIA  = COND STRING(
                                                         WHEN ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_TP_SINCRONIA IS INITIAL THEN ZIF_INTEGRACAO=>AT_TP_SINCRONIA_ASSINCRONA
                                                         ELSE ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_TP_SINCRONIA ).

    IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_TP_CANAL EQ ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_INBOUND.

    ENDIF.

    "Dados HTTP Request
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_BODY                     = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_INFO_REQUEST_HTTP-DS_BODY.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_BODY_XSTRING             = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_INFO_REQUEST_HTTP-DS_BODY_XSTRING.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_FORM_DATA                = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_INFO_REQUEST_HTTP-DS_FORM_DATA.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_URL                      = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_INFO_REQUEST_HTTP-DS_URL.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_URL_TOKEN                = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_INFO_REQUEST_HTTP-DS_URL_TOKEN.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_METODO                   = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_INFO_REQUEST_HTTP-DS_METODO.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_SERVER_PROTOCOLO         = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_INFO_REQUEST_HTTP-DS_SERVER_PROTOCOLO.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_CONTENT_TYPE             = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_INFO_REQUEST_HTTP-DS_CONTENT_TYPE.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_IP_ORIGEM                = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_INFO_REQUEST_HTTP-DS_IP_ORIGEM.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_FORMATO                  = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_INFO_REQUEST_HTTP-DS_FORMATO.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_FUNCAO_PROCESSA          = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_INFO_REQUEST_HTTP-DS_FUNCAO_PROCESSA.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_ANONIMO                  = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_ANONIMO.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_AUTENTICA_OPUS           = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_AUTENTICA_OPUS.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_AUTENTICA_API_AD         = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_AUTENTICA_API_AD.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_SEND_AUTENTICAO          = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_SEND_AUTENTICAO.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_AUTENTICA_MODULE         = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_AUTENTICA_MODULE.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_NOT_CONTENT_LENGTH       = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_INFO_REQUEST_HTTP-DS_NOT_CONTENT_LENGTH.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_PROPERTYTYPE_LOGON_POPUP = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_INFO_REQUEST_HTTP-DS_PROPERTYTYPE_LOGON_POPUP.

    "Chave de Referencia
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_REFERENCIA = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_REFERENCIA-TP_REFERENCIA.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_REFERENCIA = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_REFERENCIA-ID_REFERENCIA.

    "Informação de Integração
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_INTEGRADO = ABAP_FALSE.

    "Cria Id. de Integração
    ME->ZIF_INTEGRACAO~GET_NEW_ID_INTEGRACAO( IMPORTING E_ID_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO ).

    E_ID_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO.

    IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_NOT_STORE_LOG EQ ABAP_FALSE.
      MODIFY ZINTEGRACAO FROM ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
      COMMIT WORK AND WAIT.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~SET_OUTBOUND_MSG.

    DATA: WA_RESPOSTA TYPE ZINTEGRACAO_LOG.
    DATA: I_HEADER_FIELDS TYPE ZDE_HEADER_FIELD_T.
    DATA: I_FORM_FIELDS TYPE ZDE_HEADER_FIELD_T.

    CLEAR: E_MENSAGEM, I_HEADER_FIELDS, E_INTEGRACAO.

    R_IF_INTEGRACAO = ME.

    E_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.

    IF I_FORCE EQ ABAP_FALSE.
      "Somente interfaces de InBound
      CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_INTEGRACAO EQ ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_OUTBOUND.

      CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_RETORNOU EQ ABAP_FALSE.

      CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_CANCELOU EQ ABAP_FALSE.

      CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_ANONIMO EQ ABAP_FALSE.
    ENDIF.

    ME->ZIF_INTEGRACAO~CK_PERMISSAO_OUTBOUND( ).

    WA_RESPOSTA-ID_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO.
    WA_RESPOSTA-DT_REGISTRO   = SY-DATUM.
    WA_RESPOSTA-HR_REGISTRO   = SY-UZEIT.
    WA_RESPOSTA-US_REGISTRO   = SY-UNAME.
    WA_RESPOSTA-TIPO          = ZIF_INTEGRACAO=>AT_TP_LOG_ENVIO.

    DATA(CK_RETORNOU) = ABAP_TRUE.

    TRY .

        IF ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_INTEGRACAO EQ ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_OUTBOUND.
          ME->ZIF_INTEGRACAO~AT_MSG_INJECT->SET_BEFORE_SEND_OUTBOUND_MSG( I_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA ).
        ENDIF.

        CASE ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_CANAL.
          WHEN ZIF_INTEGRACAO=>AT_TP_CANAL_COMUNICA_HTTP.

            IF ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_SEND_AUTENTICAO EQ ABAP_TRUE.
              ME->ZIF_INTEGRACAO~AT_MSG_INJECT->GET_HEADER_REQUEST_HTTP( IMPORTING E_HEADER_FIELDS = I_HEADER_FIELDS ).
            ENDIF.

            ME->ZIF_INTEGRACAO~SET_SEND_MSG_HTTP(
              EXPORTING
                I_URL                      = CONV #( ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_URL )
                I_URL_TOKEN                = CONV #( ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_URL_TOKEN )
                I_JSON                     = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_BODY
                I_DATA_XSTRING             = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_BODY_XSTRING
                I_FORM_DATA                = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_FORM_DATA
                I_CONTENT_TYPE             = CONV #( ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_CONTENT_TYPE )
                I_METODO                   = CONV #( ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_METODO )
                I_SERVER_PROTOCOLO         = CONV #( ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_SERVER_PROTOCOLO )
                I_AUTENTICA_OPUS           = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_AUTENTICA_OPUS
                I_AUTENTICA_API_AD         = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_AUTENTICA_API_AD
                I_NOT_CONTENT_LENGTH       = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_NOT_CONTENT_LENGTH
                I_HEADER_FIELDS            = I_HEADER_FIELDS
                I_FORM_FIELDS              = ME->ZIF_INTEGRACAO~AT_FORM_FIELDS
                I_MULTIPART_FIELDS         = ME->ZIF_INTEGRACAO~AT_MULTIPART
                I_AUTENTICA_MODULE         = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_AUTENTICA_MODULE
                I_PROPERTYTYPE_LOGON_POPUP = ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_PROPERTYTYPE_LOGON_POPUP
              IMPORTING
                E_CDATA                    = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_RETORNO
                E_CODE                     = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-NM_CODE
                E_DATA                     = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_XSTRING
                E_HEADER                   = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_HEADER ).

            WA_RESPOSTA-NM_CODE         = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-NM_CODE.
            WA_RESPOSTA-DS_DATA_RETORNO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_RETORNO.

          WHEN OTHERS.

        ENDCASE.

      CATCH ZCX_INTEGRACAO INTO DATA(EX_INTEGRACAO).

        CK_RETORNOU = ABAP_FALSE.
        WA_RESPOSTA-DS_ERRO         = EX_INTEGRACAO->ZIF_ERROR~GET_MSG_ERRO( ).
        WA_RESPOSTA-NM_CODE         = '500'.
        WA_RESPOSTA-DS_DATA_RETORNO = EX_INTEGRACAO->ZIF_ERROR~GET_MSG_ERRO( ).

        DATA(LC_MSGID) = EX_INTEGRACAO->ZIF_ERROR~MSGID.
        DATA(LC_MSGNO) = EX_INTEGRACAO->ZIF_ERROR~MSGNO.
        DATA(LC_MSGV1) = EX_INTEGRACAO->ZIF_ERROR~MSGV1.
        DATA(LC_MSGV2) = EX_INTEGRACAO->ZIF_ERROR~MSGV2.
        DATA(LC_MSGV3) = EX_INTEGRACAO->ZIF_ERROR~MSGV3.
        DATA(LC_MSGV4) = EX_INTEGRACAO->ZIF_ERROR~MSGV4.

      CATCH ZCX_ERROR INTO DATA(EX_ERRO).

        CK_RETORNOU = ABAP_FALSE.
        WA_RESPOSTA-DS_ERRO         = EX_ERRO->ZIF_ERROR~GET_MSG_ERRO( ).
        WA_RESPOSTA-NM_CODE         = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-NM_CODE.
        WA_RESPOSTA-DS_DATA_RETORNO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_RETORNO.

        LC_MSGID = EX_ERRO->ZIF_ERROR~MSGID.
        LC_MSGNO = EX_ERRO->ZIF_ERROR~MSGNO.
        LC_MSGV1 = EX_ERRO->ZIF_ERROR~MSGV1.
        LC_MSGV2 = EX_ERRO->ZIF_ERROR~MSGV2.
        LC_MSGV3 = EX_ERRO->ZIF_ERROR~MSGV3.
        LC_MSGV4 = EX_ERRO->ZIF_ERROR~MSGV4.

    ENDTRY.

    "Registra Log de Envio/Retorno/Erro
    WA_RESPOSTA-DT_RESPOSTA = SY-DATUM.
    WA_RESPOSTA-HR_RESPOSTA = SY-UZEIT.
    WA_RESPOSTA-US_RESPOSTA = SY-UNAME.

    IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_NOT_STORE_LOG = ABAP_FALSE
       OR WA_RESPOSTA-DS_ERRO IS NOT INITIAL. "WPP 06-11-2024 Devemos gravar log de erro independente da parametrização de log da interface

      MODIFY ZINTEGRACAO_LOG FROM WA_RESPOSTA.
      COMMIT WORK AND WAIT. " STEFANINI - 2000016980 - IR193546 - 10.09.2024
    ENDIF.

    "Registra Retorno para Processamento
    IF CK_RETORNOU EQ ABAP_TRUE.
      ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_RETORNOU     = ABAP_TRUE.
      ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_RETORNO = WA_RESPOSTA-DS_DATA_RETORNO.

      IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_NOT_STORE_LOG = ABAP_FALSE
         OR WA_RESPOSTA-DS_ERRO IS NOT INITIAL. "WPP 06-11-2024 Devemos gravar log de erro independente da parametrização de log da interface
        MODIFY ZINTEGRACAO FROM ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
        COMMIT WORK AND WAIT. " STEFANINI - 2000016980 - IR193546 - 10.09.2024
      ENDIF.

      E_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
    ENDIF.

    E_MENSAGEM = WA_RESPOSTA.

    CHECK WA_RESPOSTA-DS_ERRO IS NOT INITIAL.

    IF CK_RETORNOU EQ ABAP_FALSE.
      ADD 1 TO ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-QT_ERRO.

      IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_NOT_STORE_LOG = ABAP_FALSE
         OR WA_RESPOSTA-DS_ERRO IS NOT INITIAL. "WPP 06-11-2024 Devemos gravar log de erro independente da parametrização de log da interface
        MODIFY ZINTEGRACAO FROM ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
        COMMIT WORK AND WAIT. " STEFANINI - 2000016980 - IR193546 - 10.09.2024
      ENDIF.

      E_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
    ENDIF.

    IF ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_INTEGRACAO EQ ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_OUTBOUND.

      TRY .

          ME->ZIF_INTEGRACAO~AT_MSG_INJECT->SET_BEFORE_ERROR_OUTBOUND_MSG(
            IMPORTING
              E_SUCESSO    = DATA(E_SUCESSO)
            CHANGING
              C_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA ).

          IF E_SUCESSO EQ ABAP_TRUE.
            ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_RETORNOU = ABAP_TRUE.

            IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_NOT_STORE_LOG = ABAP_FALSE
              OR WA_RESPOSTA-DS_ERRO IS NOT INITIAL. "WPP 06-11-2024 Devemos gravar log de erro independente da parametrização de log da interface
              MODIFY ZINTEGRACAO FROM ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
              COMMIT WORK AND WAIT. " STEFANINI - 2000016980 - IR193546 - 10.09.2024
            ENDIF.

            E_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
            EXIT.
          ENDIF.

        CATCH CX_ROOT.
      ENDTRY.

    ENDIF.

    ME->ZIF_INTEGRACAO~FREE( ).

    "Propagar erro de Comunicação para Fora
    RAISE EXCEPTION TYPE ZCX_ERROR
      EXPORTING
        TEXTID = VALUE #( MSGID = LC_MSGID
                          MSGNO = LC_MSGNO
                          ATTR1 = CONV #( LC_MSGV1 )
                          ATTR2 = CONV #( LC_MSGV2 )
                          ATTR3 = CONV #( LC_MSGV3 )
                          ATTR4 = CONV #( LC_MSGV4 ) )
        MSGID  = LC_MSGID
        MSGNO  = LC_MSGNO
        MSGTY  = 'E'
        MSGV1  = LC_MSGV1
        MSGV2  = LC_MSGV2
        MSGV3  = LC_MSGV3
        MSGV4  = LC_MSGV4.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~SET_PROCESSAR_RETORNO.

    DATA: WA_RESPOSTA TYPE ZINTEGRACAO_LOG.

    R_IF_INTEGRACAO = ME.

    CHECK ME->ZIF_INTEGRACAO~AT_MSG_INJECT IS NOT INITIAL.
    CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_ANONIMO EQ ABAP_FALSE.

    WA_RESPOSTA-ID_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO.
    WA_RESPOSTA-DT_REGISTRO   = SY-DATUM.
    WA_RESPOSTA-HR_REGISTRO   = SY-UZEIT.
    WA_RESPOSTA-US_REGISTRO   = SY-UNAME.
    WA_RESPOSTA-TIPO          = ZIF_INTEGRACAO=>AT_TP_LOG_PROCESSAMENTO.

    CASE ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_INTEGRACAO.
      WHEN ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_INBOUND.
        TRY .
            ME->ZIF_INTEGRACAO~AT_MSG_INJECT->SET_PROCESSA_INBOUND(
              EXPORTING
                I_MSG           = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_BODY
                I_ID_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO
                I_MSG_COMPLETA  = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA
              IMPORTING
                E_SUCESSO       = DATA(E_SUCESSO)
            ).
          CATCH CX_ROOT.
        ENDTRY.

        IF E_SUCESSO IS INITIAL AND ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-TP_SINCRONIA EQ ZIF_INTEGRACAO=>AT_TP_SINCRONIA_ASSINCRONA.
          ADD 1 TO ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-QT_ERRO.
        ENDIF.

      WHEN ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_OUTBOUND.

        CHECK ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_RETORNOU EQ ABAP_TRUE.
        TRY.
            ME->ZIF_INTEGRACAO~AT_MSG_INJECT->SET_PROCESSA_RETORNO(
              EXPORTING
                I_ID_INTEGRACAO = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO
                I_MSG_COMPLETA  = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA
                I_MSG_RETORNO   = ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DS_DATA_RETORNO
              IMPORTING
                E_SUCESSO       = E_SUCESSO ).
          CATCH CX_ROOT.
        ENDTRY.

    ENDCASE.

    "Registra Log de Processamento
    WA_RESPOSTA-DT_RESPOSTA = SY-DATUM.
    WA_RESPOSTA-HR_RESPOSTA = SY-UZEIT.
    WA_RESPOSTA-US_RESPOSTA = SY-UNAME.

    IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_NOT_STORE_LOG = ABAP_FALSE.
      MODIFY ZINTEGRACAO_LOG FROM WA_RESPOSTA.
      COMMIT WORK AND WAIT. " STEFANINI - 2000016980 - IR193546 - 10.09.2024
    ENDIF.

    "Informações da Integração
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-DT_PROCESSADO = SY-DATUM.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-HR_PROCESSADO = SY-UZEIT.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-US_PROCESSADO = SY-UNAME.
    ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-CK_PROCESSADO = E_SUCESSO.

    IF ME->ZIF_INTEGRACAO~AT_MSG_INJECT->AT_NOT_STORE_LOG = ABAP_FALSE.
      MODIFY ZINTEGRACAO FROM ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA.
      COMMIT WORK AND WAIT. " STEFANINI - 2000016980 - IR193546 - 10.09.2024
    ENDIF.

    MESSAGE S003 WITH ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA-ID_INTEGRACAO.


  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~SET_REGISTRO.

    "Recupera Registro

    R_IF_INTEGRACAO = ME.

    CLEAR: ME->ZIF_INTEGRACAO~AT_MSG_INJECT.

    ME->ZIF_INTEGRACAO~SET_ENQUEUE( EXPORTING I_ID_INTEGRACAO = I_ID_INTEGRACAO I_BLOQUEAR = ABAP_TRUE ).

    SELECT SINGLE * INTO @ME->ZIF_INTEGRACAO~AT_MSG_INTEGRA
      FROM ZINTEGRACAO
     WHERE ID_INTEGRACAO EQ @I_ID_INTEGRACAO.

    ME->ZIF_INTEGRACAO~SET_INSTANCIA_OBJETO_INJECT( ).

    CHECK SY-SUBRC IS NOT INITIAL.

    RAISE EXCEPTION TYPE ZCX_INTEGRACAO
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_INTEGRACAO=>ZCX_ID_INTEGRACAO_NAO_ECONTRAD-MSGID
                          MSGNO = ZCX_INTEGRACAO=>ZCX_ID_INTEGRACAO_NAO_ECONTRAD-MSGNO
                          ATTR1 = CONV #( I_ID_INTEGRACAO ) )
        MSGID  = ZCX_INTEGRACAO=>ZCX_ID_INTEGRACAO_NAO_ECONTRAD-MSGID
        MSGNO  = ZCX_INTEGRACAO=>ZCX_ID_INTEGRACAO_NAO_ECONTRAD-MSGNO
        MSGTY  = 'E'
        MSGV1  = CONV #( I_ID_INTEGRACAO ).

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO~SET_SEND_MSG_HTTP.

    DATA: TAM_XML_S        TYPE STRING, "Tamanho do Arquivo XML.
          TAM_XML_I        TYPE I,
          LC_HEADER_FIELDS TYPE TIHTTPNVP,
          LC_PART          TYPE REF TO IF_HTTP_ENTITY.

    "RETURN_CODE TYPE I,
    "REASON      TYPE STRING.

    DATA: LC_METODO           TYPE  STRING,
          LC_SERVER_PROTOCOLO TYPE  STRING,
          LC_CONTENT_TYPE     TYPE  STRING.

    CLEAR: E_CODE, E_REASON, E_CDATA.

    R_IF_INTEGRACAO = ME.

    LC_METODO = I_METODO.
    LC_SERVER_PROTOCOLO = I_SERVER_PROTOCOLO.
    LC_CONTENT_TYPE = I_CONTENT_TYPE.

    IF LC_METODO IS INITIAL.
      LC_METODO = 'POST'.
    ENDIF.

    IF LC_SERVER_PROTOCOLO IS INITIAL.
      LC_SERVER_PROTOCOLO = 'HTTP/1.1'.
    ENDIF.

    IF LC_CONTENT_TYPE IS INITIAL.
      LC_CONTENT_TYPE = 'application/json'.
    ENDIF.

    CL_HTTP_CLIENT=>CREATE_BY_URL( EXPORTING  URL                = I_URL
                                   IMPORTING  CLIENT             = DATA(E_HTTP)
                                   EXCEPTIONS ARGUMENT_NOT_FOUND = 1
                                              PLUGIN_NOT_ACTIVE  = 2
                                              INTERNAL_ERROR     = 3
                                             ).
    IF SY-SUBRC IS NOT INITIAL.
      IF SY-MSGID IS NOT INITIAL AND SY-MSGNO IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'E' NUMBER SY-MSGNO INTO DATA(MTEXT) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ELSE.
        MTEXT = '(CREATE_BY_URL) Erro de Comunicação com ' && I_URL.
      ENDIF.
      ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = MTEXT ).
    ENDIF.

    E_HTTP->PROPERTYTYPE_LOGON_POPUP = I_PROPERTYTYPE_LOGON_POPUP.

    LOOP AT I_HEADER_FIELDS INTO DATA(WA_HEADER_FIELDS).
      CALL METHOD E_HTTP->REQUEST->SET_HEADER_FIELD
        EXPORTING
          NAME  = WA_HEADER_FIELDS-NAME
          VALUE = WA_HEADER_FIELDS-VALUE.
    ENDLOOP.

    CALL METHOD E_HTTP->REQUEST->SET_HEADER_FIELD
      EXPORTING
        NAME  = '~request_method'
        VALUE = LC_METODO.

    CALL METHOD E_HTTP->REQUEST->SET_HEADER_FIELD
      EXPORTING
        NAME  = '~server_protocol'
        VALUE = LC_SERVER_PROTOCOLO.

    CALL METHOD E_HTTP->REQUEST->SET_HEADER_FIELD
      EXPORTING
        NAME  = 'Content-Type'
        VALUE = LC_CONTENT_TYPE.

    IF I_JSON IS NOT INITIAL.
      TAM_XML_I = STRLEN( I_JSON ). "Verifica o tamanho do arquivo XML.
      TAM_XML_S = TAM_XML_I.

    ELSE.
      TAM_XML_I = XSTRLEN( I_DATA_XSTRING ). "Verifica o tamanho do arquivo XML.
      TAM_XML_S = TAM_XML_I.
    ENDIF.

    IF I_NOT_CONTENT_LENGTH EQ ABAP_FALSE.
      CALL METHOD E_HTTP->REQUEST->SET_HEADER_FIELD
        EXPORTING
          NAME  = 'Content-Length'
          VALUE = TAM_XML_S.
    ENDIF.

***************************
*-- Envio multipart/form-data
***************************
    IF I_FORM_DATA IS NOT INITIAL.

      CALL METHOD E_HTTP->REQUEST->IF_HTTP_ENTITY~SET_FORMFIELD_ENCODING
        EXPORTING
          FORMFIELD_ENCODING = CL_HTTP_REQUEST=>IF_HTTP_ENTITY~CO_ENCODING_RAW.

      LC_PART = E_HTTP->REQUEST->IF_HTTP_ENTITY~ADD_MULTIPART( ).

      LOOP AT I_HEADER_FIELDS INTO DATA(WA_HEADER_FIELDS_PART).
        CALL METHOD LC_PART->SET_HEADER_FIELD
          EXPORTING
            NAME  = WA_HEADER_FIELDS_PART-NAME
            VALUE = WA_HEADER_FIELDS_PART-VALUE.
      ENDLOOP.

      CALL METHOD LC_PART->SET_CONTENT_TYPE
        EXPORTING
          CONTENT_TYPE = LC_CONTENT_TYPE.
    ENDIF.

    LOOP AT I_FORM_FIELDS INTO DATA(WA_FORM_FIELDS).

      CALL METHOD E_HTTP->REQUEST->SET_FORM_FIELD
        EXPORTING
          NAME  = WA_FORM_FIELDS-NAME
          VALUE = WA_FORM_FIELDS-VALUE.

    ENDLOOP.

    IF I_MULTIPART_FIELDS IS NOT INITIAL.

      CALL METHOD E_HTTP->REQUEST->IF_HTTP_ENTITY~SET_FORMFIELD_ENCODING
        EXPORTING
          FORMFIELD_ENCODING = CL_HTTP_REQUEST=>IF_HTTP_ENTITY~CO_ENCODING_RAW.





      LC_PART = E_HTTP->REQUEST->IF_HTTP_ENTITY~ADD_MULTIPART( ).

      DATA(LV_LINES) = LINES( I_MULTIPART_FIELDS ).

      LOOP AT I_MULTIPART_FIELDS ASSIGNING FIELD-SYMBOL(<FS_MULTIPART>).

        DATA(LV_TABIX) = SY-TABIX.

        DATA(LV_TYPE) = <FS_MULTIPART>-HEADER_FIELD.

        TRANSLATE LV_TYPE TO UPPER CASE.

        IF LV_TYPE = 'CONTENT-TYPE'.

          CALL METHOD LC_PART->SET_CONTENT_TYPE
            EXPORTING
              CONTENT_TYPE = <FS_MULTIPART>-HEADER_VALUE.

        ELSE.

          IF <FS_MULTIPART>-HEADER_VALUE IS NOT INITIAL.

            CALL METHOD LC_PART->SET_HEADER_FIELD
              EXPORTING
                NAME  = <FS_MULTIPART>-HEADER_FIELD
                VALUE = <FS_MULTIPART>-HEADER_VALUE.

          ENDIF.

        ENDIF.

        IF <FS_MULTIPART>-VALUE IS NOT INITIAL.

          CALL METHOD LC_PART->SET_CDATA
            EXPORTING
              DATA = <FS_MULTIPART>-VALUE.
          "offset = 0
          "length = strlen( <fs_multipart>-value ).

          IF LV_TABIX < LV_LINES.
            LC_PART = E_HTTP->REQUEST->IF_HTTP_ENTITY~ADD_MULTIPART( ).
          ENDIF.

        ENDIF.

        IF <FS_MULTIPART>-XVALUE IS NOT INITIAL.

          CALL METHOD LC_PART->SET_DATA
            EXPORTING
              DATA = <FS_MULTIPART>-XVALUE.
          "offset = 0
          "length = xstrlen( <fs_multipart>-xvalue ).

          IF LV_TABIX < LV_LINES.
            LC_PART = E_HTTP->REQUEST->IF_HTTP_ENTITY~ADD_MULTIPART( ).
          ENDIF.
        ENDIF.

      ENDLOOP.

    ENDIF.


    IF I_METODO EQ IF_HTTP_RESPONSE=>CO_REQUEST_METHOD_POST OR
       I_METODO EQ 'PUT' OR
       I_METODO EQ 'PATCH' OR " US - 161250 - SAP x UOL - CBRAND
       I_METODO EQ 'DELETE'.

      IF I_DATA_XSTRING IS NOT INITIAL.
        IF I_FORM_DATA IS INITIAL.
          CALL METHOD E_HTTP->REQUEST->SET_DATA
            EXPORTING
              DATA   = I_DATA_XSTRING
              OFFSET = 0
              LENGTH = TAM_XML_I.
        ELSE.
          CALL METHOD LC_PART->SET_DATA
            EXPORTING
              DATA   = I_DATA_XSTRING
              OFFSET = 0
              LENGTH = TAM_XML_I.
        ENDIF.

      ELSEIF I_JSON IS NOT INITIAL.
        IF I_FORM_DATA IS INITIAL.
          CALL METHOD E_HTTP->REQUEST->SET_CDATA
            EXPORTING
              DATA   = I_JSON
              OFFSET = 0
              LENGTH = TAM_XML_I.
        ELSE.
          CALL METHOD LC_PART->SET_CDATA
            EXPORTING
              DATA   = I_JSON
              OFFSET = 0
              LENGTH = TAM_XML_I.
        ENDIF.
      ENDIF.
    ENDIF.

    IF I_AUTENTICA_OPUS EQ ABAP_TRUE.

      ZCL_WEBSERVICE=>ZIF_WEBSERVICE~ADD_TOKEN_OPUS_HTTP_CLIENTE(
        EXPORTING
          I_URL_DESTINO              = I_URL
          I_URL_TOKEN                = I_URL_TOKEN
        CHANGING
          I_HTTP                     = E_HTTP
        EXCEPTIONS
          HTTP_COMMUNICATION_FAILURE = 1
          HTTP_INVALID_STATE         = 2
          HTTP_PROCESSING_FAILED     = 3
          HTTP_INVALID_TIMEOUT       = 4
          OTHERS                     = 5 ).
      IF SY-SUBRC IS NOT INITIAL.
        IF SY-MSGID IS NOT INITIAL AND SY-MSGNO IS NOT INITIAL.
          MESSAGE ID SY-MSGID TYPE 'E' NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ELSE.
          MTEXT = '(SEND) Erro de Comunicação com ' && I_URL.
        ENDIF.
        ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = MTEXT ).
      ENDIF.

    ELSEIF I_AUTENTICA_API_AD EQ ABAP_TRUE.

      ZCL_WEBSERVICE=>ZIF_WEBSERVICE~ADD_TOKEN_API_AD_HTTP_CLIENTE(
        EXPORTING
          I_URL_DESTINO              = I_URL
          I_URL_TOKEN                = I_URL_TOKEN
          I_AUTENTICA_MODULE         = I_AUTENTICA_MODULE
        CHANGING
          I_HTTP                     = E_HTTP
        EXCEPTIONS
          HTTP_COMMUNICATION_FAILURE = 1
          HTTP_INVALID_STATE         = 2
          HTTP_PROCESSING_FAILED     = 3
          HTTP_INVALID_TIMEOUT       = 4
          OTHERS                     = 5 ).
      IF SY-SUBRC IS NOT INITIAL.
        IF SY-MSGID IS NOT INITIAL AND SY-MSGNO IS NOT INITIAL.
          MESSAGE ID SY-MSGID TYPE 'E' NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ELSE.
          MTEXT = '(SEND) Erro de Comunicação com ' && I_URL.
        ENDIF.
        ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = MTEXT ).
      ENDIF.

    ENDIF.

    E_HTTP->REQUEST->GET_HEADER_FIELDS( CHANGING FIELDS = LC_HEADER_FIELDS ).

    IF I_MULTIPART_FIELDS[] IS NOT INITIAL .
      DATA: LIT_FORM_FIELDS TYPE TIHTTPNVP.
      E_HTTP->REQUEST->GET_FORM_FIELDS( CHANGING FIELDS = LIT_FORM_FIELDS ).

    ENDIF.

    IF LC_HEADER_FIELDS IS NOT INITIAL.
      E_HEADER = ZCL_FMCALL_BASE=>ABAP2JSON( ABAP_DATA = LC_HEADER_FIELDS ).
    ENDIF.

    CALL METHOD E_HTTP->SEND
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3
        HTTP_INVALID_TIMEOUT       = 4.

    IF SY-SUBRC IS NOT INITIAL.
      IF SY-MSGID IS NOT INITIAL AND SY-MSGNO IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'E' NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ELSE.
        MTEXT = '(SEND) Erro de Comunicação com ' && I_URL.
      ENDIF.
      ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = MTEXT ).
    ENDIF.

    CALL METHOD E_HTTP->RECEIVE
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3.

    IF SY-SUBRC IS NOT INITIAL.
      IF SY-MSGID IS NOT INITIAL AND SY-MSGNO IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'E' NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ELSE.
        MTEXT = '(RECEIVE) Erro de Comunicação com ' && I_URL.
      ENDIF.
      E_CDATA = E_HTTP->RESPONSE->GET_CDATA( ).
      ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = MTEXT ).
    ENDIF.

    E_HTTP->RESPONSE->GET_STATUS( IMPORTING CODE = DATA(I_CODE) REASON = E_REASON ).

    E_CODE = I_CODE.

    IF ( I_CODE NE 200   AND
         I_CODE NE 201   AND
         I_CODE NE 202   AND
         I_CODE NE 204 ).
      MTEXT = 'WebService: Erro: ' && E_CODE && ' Texto: ' && E_REASON.
      E_CDATA = E_HTTP->RESPONSE->GET_CDATA( ).
      ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = MTEXT ).
    ENDIF.

    E_CDATA = E_HTTP->RESPONSE->GET_CDATA( ).
    E_DATA  = E_HTTP->RESPONSE->GET_DATA( ).
    E_HTTP->CLOSE( ).

  ENDMETHOD.
ENDCLASS.
