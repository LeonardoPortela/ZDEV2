class ZCL_INTEGRACAO_PEDIDO_CONSULTA definition
  public
  final
  create public .

public section.

  interfaces ZIF_INTEGRACAO_INJECT .
  interfaces ZIF_INTEGRACAO_PEDIDO_CONSULTA .

  methods CONSTRUCTOR .
protected section.
private section.
ENDCLASS.



CLASS ZCL_INTEGRACAO_PEDIDO_CONSULTA IMPLEMENTATION.


  method CONSTRUCTOR.

    ME->ZIF_INTEGRACAO_INJECT~AT_ID_INTERFACE    = ZIF_INTEGRACAO=>AT_ID_INTERFACE_PEDI_CNS.
    ME->ZIF_INTEGRACAO_INJECT~AT_TP_INTEGRACAO   = ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_INBOUND.
    ME->ZIF_INTEGRACAO_INJECT~AT_TP_CANAL        = ZIF_INTEGRACAO=>AT_TP_CANAL_COMUNICA_HTTP.
    ME->ZIF_INTEGRACAO_INJECT~AT_TP_SINCRONIA    = ZIF_INTEGRACAO=>AT_TP_SINCRONIA_SINCRONA.
    ME->ZIF_INTEGRACAO_INJECT~AT_AUTENTICA_OPUS  = ZIF_INTEGRACAO=>AT_ID_INTERFACE_AUT_OPUS_NAO.
    ME->ZIF_INTEGRACAO_INJECT~AT_SEND_AUTENTICAO = ZIF_INTEGRACAO=>AT_ID_INTERFACE_AUT_SEND_NAO.
    ME->ZIF_INTEGRACAO_INJECT~AT_REFERENCIA-TP_REFERENCIA = 'PEDIDO_COMPRA_CONSULTA'.

  endmethod.


  method ZIF_INTEGRACAO_INJECT~GET_HEADER_REQUEST_HTTP.
    R_IF_INTEGRACAO_INJECT = ME.
    E_HEADER_FIELDS = ME->ZIF_INTEGRACAO_INJECT~AT_HEADER_FIELDS.
  endmethod.


  method ZIF_INTEGRACAO_INJECT~SET_BEFORE_ERROR_OUTBOUND_MSG.
    R_IF_INTEGRACAO_INJECT = ME.
  endmethod.


  method ZIF_INTEGRACAO_INJECT~SET_BEFORE_SEND_OUTBOUND_MSG.
    R_IF_INTEGRACAO_INJECT = ME.
  endmethod.


  method ZIF_INTEGRACAO_INJECT~SET_HEADER_REQUEST_HTTP.
    R_IF_INTEGRACAO_INJECT = ME.
    ME->ZIF_INTEGRACAO_INJECT~AT_HEADER_FIELDS = I_HEADER_FIELDS.
  endmethod.


  METHOD ZIF_INTEGRACAO_INJECT~SET_INTEGRAR_INBOUND.

    DATA: LC_RETORNO  TYPE ZDE_PEDIDO_CONSULTA_RET_EKKO_T,
          WA_RETORNO  TYPE ZDE_PEDIDO_CONSULTA_RET_EKKO,
          WA_ITEM     TYPE ZDE_PEDIDO_CNS_ITEM,
          WA_ITEM_CTB TYPE ZDE_PEDIDO_CNS_CTB,
          WA_FATURA   TYPE ZDE_PEDIDO_CNS_FAT.

    R_IF_INTEGRACAO_INJECT = ME.

    CLEAR: LC_RETORNO[].

    E_SUCESSO = ABAP_FALSE.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CNPJ_FORNECEDOR_IN IS NOT INITIAL OR
       ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CPF_FORNECEDOR_IN IS NOT INITIAL OR
       ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-INSC_ESTADUAL_FORNECEDOR_IN IS NOT INITIAL.

      SELECT LIFNR
        INTO TABLE @DATA(IT_FORNE)
        FROM LFA1
       WHERE STCD1 IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CNPJ_FORNECEDOR_IN
         AND STCD2 IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CPF_FORNECEDOR_IN
         AND STCD3 IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-INSC_ESTADUAL_FORNECEDOR_IN.

      CHECK SY-SUBRC IS INITIAL.

      TYPES: TY_RG_LIFNR TYPE RANGE OF LFA1-LIFNR.
      DATA(RG_LIFNR) = VALUE TY_RG_LIFNR( FOR WFORNE IN IT_FORNE[] ( SIGN = 'I' OPTION = 'EQ' LOW = WFORNE-LIFNR ) ).
      LOOP AT RG_LIFNR INTO DATA(WA_LIFNR).
        APPEND WA_LIFNR TO ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_FORNECEDOR_IN.
      ENDLOOP.

    ENDIF.

    SELECT K~BSART AS TP_PEDIDO,
           K~EBELN AS CD_PEDIDO,
           K~WAERS AS CD_MOEDA,
           K~BUKRS AS CD_EMPRESA,
           E~BUTXT AS DS_EMPRESA,
           K~LIFNR AS CD_FORNECEDOR,
           F~NAME1 AS NM_FORNECEDOR,
           F~STCD1 AS CNPJ_FORNECEDOR,
           F~STCD2 AS CPF_FORNECEDOR,
           F~STCD3 AS IE_FORNECEDOR,
           F~REGIO AS UF_FORNECEDOR,
           K~ZTERM AS CD_CONDICAO_PAGAMENTO,
           K~BEDAT AS DT_PEDIDO,
           CASE
             WHEN K~PROCSTAT EQ '01' THEN 'Versão em processo'
             WHEN K~PROCSTAT EQ '02' THEN 'Ativo'
             WHEN K~PROCSTAT EQ '03' THEN 'Em liberação'
             WHEN K~PROCSTAT EQ '04' THEN 'Liberação parcial'
             WHEN K~PROCSTAT EQ '05' THEN 'Liberação concluída'
             WHEN K~PROCSTAT EQ '08' THEN 'Recusado'
           END AS DS_STATUS,
           CASE WHEN US~NAME_TEXTC NE @SPACE THEN US~NAME_TEXTC ELSE K~ERNAM END AS USUARIO_LANCAMENTO,
           P~EBELP AS CD_ITEM,
           P~NETPR AS VALOR_UNITARIO,
           P~BRTWR AS VALOR_TOTAL_ITEM,
           P~MATNR AS CD_MATERIAL,
           P~MATKL AS CD_GRUPO_MATERIAL,
           P~TXZ01 AS NM_MATERIAL,
           P~MENGE AS QUANTIDADE,
           P~MEINS AS UNIDADE,
           P~LGORT AS DEPOSITO,
           P~MWSKZ AS IVA,
           P~KNTTP AS ID_CATEGORIA_CLASS_CTB,
           P~LOEKZ AS LOEKZ,
           T~CHARG AS LOTE
      INTO TABLE @DATA(IT_PEDIDO_ITENS)
      FROM EKKO AS K
      INNER JOIN EKPO AS P ON P~EBELN EQ K~EBELN
      LEFT JOIN EKET AS T ON T~EBELN EQ P~EBELN AND T~EBELP EQ P~EBELP
      LEFT JOIN USER_ADDR AS US ON US~BNAME EQ K~ERNAM
      LEFT JOIN T001 AS E ON E~BUKRS EQ K~BUKRS
      LEFT JOIN LFA1 AS F ON F~LIFNR EQ K~LIFNR
     WHERE K~EBELN IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_PEDIDO_IN
       AND K~BUKRS IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_EMPRESA_IN
       AND K~BSTYP IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CATEGORIA_PEDIDO_IN
       AND K~BSART IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-TIPO_PEDIDO_IN
       AND K~LIFNR IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_FORNECEDOR_IN
       AND K~BEDAT IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-DATA_PEDIDO_IN
       AND K~EKORG IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-ORGANIZACAO_DE_COMPRAS_IN
       AND K~EKGRP IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-GRUPO_DE_COMPRADORES_IN
       AND K~FRGRL IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-LIBERACAO_INCOMPLETA_IN
       AND P~MATNR IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-MATERIAL_IN
       AND P~WERKS IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CENTRO_IN
       AND P~EBELP IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_ITEM_IN
       AND P~BSTAE IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CHAVE_CONTROLE_CONFIRMACAO_IN
       AND P~MWSKZ IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-IVA_IN
       AND P~LGORT IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-DEPOSITO_IN
       AND T~CHARG IN @ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-LOTE_IN.

    DATA: RG_TCODE TYPE RANGE OF CDHDR-TCODE.
    RG_TCODE = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = 'ME29N' ) ( LOW = 'ME28' ) ).

    DATA(IT_PEDIDO) = IT_PEDIDO_ITENS[].
    SORT IT_PEDIDO BY CD_PEDIDO.
    DELETE ADJACENT DUPLICATES FROM IT_PEDIDO COMPARING CD_PEDIDO.

    IF IT_PEDIDO[] IS NOT INITIAL.

      SELECT * INTO TABLE @DATA(IT_T001)
        FROM T001
         FOR ALL ENTRIES IN @IT_PEDIDO
       WHERE BUKRS EQ @IT_PEDIDO-CD_EMPRESA.

      SORT IT_T001 BY BUKRS.

      SELECT * INTO TABLE @DATA(IT_TKA02)
        FROM TKA02
         FOR ALL ENTRIES IN @IT_T001
       WHERE BUKRS EQ @IT_T001-BUKRS.

      SORT IT_TKA02 BY BUKRS.

      TYPES: TY_RG_OBJECTID TYPE RANGE OF CDHDR-OBJECTID.
      DATA(RG_OBJECTID) = VALUE TY_RG_OBJECTID( FOR WPEDI IN IT_PEDIDO[] ( SIGN = 'I' OPTION = 'EQ' LOW = WPEDI-CD_PEDIDO ) ).

      SELECT * INTO TABLE @DATA(IT_CDHDR)
        FROM CDHDR
       WHERE OBJECTID    IN @RG_OBJECTID
         AND OBJECTCLAS  EQ 'EINKBELEG'
         AND TCODE       IN @RG_TCODE.

      SORT IT_CDHDR BY OBJECTID UDATE UTIME DESCENDING.
      DELETE ADJACENT DUPLICATES FROM IT_CDHDR COMPARING OBJECTID.

      SELECT * INTO TABLE @DATA(IT_CDHDR_USER)
        FROM USER_ADDR
         FOR ALL ENTRIES IN @IT_CDHDR
       WHERE BNAME EQ @IT_CDHDR-USERNAME.

      SORT IT_CDHDR BY OBJECTID.
      SORT IT_CDHDR_USER BY BNAME.

*      SELECT EBELN AS CD_PEDIDO,
*             EBELP AS CD_ITEM,
*             NETPR AS VALOR_UNITARIO,
*             BRTWR AS VALOR_TOTAL_ITEM,
*             MATNR AS CD_MATERIAL,
*             MATKL AS CD_GRUPO_MATERIAL,
*             TXZ01 AS NM_MATERIAL,
*             MENGE AS QUANTIDADE,
*             MEINS AS UNIDADE,
*             LGORT AS DEPOSITO,
*             MWSKZ AS IVA,
*             KNTTP AS ID_CATEGORIA_CLASS_CTB,
*             LOEKZ AS LOEKZ
*        INTO TABLE @DATA(IT_EKPO)
*        FROM EKPO
*         FOR ALL ENTRIES IN @IT_PEDIDO
*       WHERE EBELN EQ @IT_PEDIDO-CD_PEDIDO.
*
*      IF SY-SUBRC IS INITIAL.

*        SELECT * INTO TABLE @DATA(IT_EKET)
*          FROM EKET
*           FOR ALL ENTRIES IN @IT_EKPO
*         WHERE EBELN EQ @IT_EKPO-CD_PEDIDO
*           AND EBELP EQ @IT_EKPO-CD_ITEM.
*
*        SORT IT_EKET BY EBELN EBELP.

      SELECT EBELN AS CD_PEDIDO,
             EBELP AS CD_ITEM,
             ZEKKN AS CD_ITEM_RAZAO,
             GSBER AS CD_DIVISAO,
             SAKTO AS CD_CONTA_RAZAO,
             KOSTL AS CD_CENTRO_CUSTO,
             AUFNR AS CD_ORDEM,
             ANLN1 AS ID_CATEGORIA_CLASS_CTB,
             ANLN2 AS ID_CATEGORIA_CLASS_CTB_SUB
        INTO TABLE @DATA(IT_EKKN)
        FROM EKKN
         FOR ALL ENTRIES IN @IT_PEDIDO_ITENS
       WHERE EBELN EQ @IT_PEDIDO_ITENS-CD_PEDIDO
         AND EBELP EQ @IT_PEDIDO_ITENS-CD_ITEM.

      IF SY-SUBRC IS INITIAL.
        SELECT * INTO TABLE @DATA(IT_TGSBT)
          FROM TGSBT
           FOR ALL ENTRIES IN @IT_EKKN
         WHERE SPRAS EQ @SY-LANGU
           AND GSBER EQ @IT_EKKN-CD_DIVISAO.

        SORT IT_TGSBT BY GSBER.

        SELECT * INTO TABLE @DATA(IT_SKAT)
          FROM SKAT
           FOR ALL ENTRIES IN @IT_EKKN
         WHERE SPRAS EQ @SY-LANGU
           AND SAKNR EQ @IT_EKKN-CD_CONTA_RAZAO.

        SORT IT_SKAT BY SAKNR KTOPL.

        DATA(IT_EKKN_AUX) = IT_EKKN[].
        DELETE IT_EKKN_AUX WHERE CD_CENTRO_CUSTO EQ SPACE.
        IF IT_EKKN_AUX[] IS NOT INITIAL.

          SELECT * INTO TABLE @DATA(IT_CSKT)
            FROM CSKT
             FOR ALL ENTRIES IN @IT_EKKN_AUX
           WHERE SPRAS EQ @SY-LANGU
             AND DATBI GE @SY-DATUM
             AND KOSTL EQ @IT_EKKN_AUX-CD_CENTRO_CUSTO.

          SORT IT_CSKT BY KOKRS KOSTL.

          SELECT * INTO TABLE @DATA(IT_CSKS)
            FROM CSKS
             FOR ALL ENTRIES IN @IT_EKKN_AUX
           WHERE DATBI GE @SY-DATUM
             AND KOSTL EQ @IT_EKKN_AUX-CD_CENTRO_CUSTO.

          SORT IT_CSKS BY KOKRS KOSTL.
        ENDIF.

      ENDIF.

      SELECT * INTO TABLE @DATA(IT_T006A)
        FROM T006A
         FOR ALL ENTRIES IN @IT_PEDIDO_ITENS
       WHERE SPRAS EQ @SY-LANGU
         AND MSEHI EQ @IT_PEDIDO_ITENS-UNIDADE.

      SORT IT_T006A BY MSEHI.

      SELECT EBELN AS CD_PEDIDO, EBELP AS CD_ITEM, BELNR, GJAHR INTO TABLE @DATA(IT_RSEG)
        FROM RSEG
         FOR ALL ENTRIES IN @IT_PEDIDO_ITENS
       WHERE EBELN EQ @IT_PEDIDO_ITENS-CD_PEDIDO
         AND EBELP EQ @IT_PEDIDO_ITENS-CD_ITEM.

      IF IT_RSEG[] IS NOT INITIAL.
        SELECT * INTO TABLE @DATA(IT_RBKP)
          FROM RBKP
           FOR ALL ENTRIES IN @IT_RSEG
         WHERE BELNR EQ @IT_RSEG-BELNR
           AND GJAHR EQ @IT_RSEG-GJAHR.

        DELETE IT_RBKP WHERE STBLG NE SPACE.
      ENDIF.

*      ENDIF.

    ENDIF.

    LOOP AT IT_PEDIDO INTO DATA(WA_PEDIDO).
      CLEAR: WA_RETORNO.
      MOVE-CORRESPONDING WA_PEDIDO TO WA_RETORNO.
      WA_RETORNO-ANO_PEDIDO = WA_RETORNO-DT_PEDIDO(4).
      WA_RETORNO-MES_PEDIDO = WA_RETORNO-DT_PEDIDO+4(2).

      READ TABLE IT_CDHDR WITH KEY OBJECTID = WA_RETORNO-CD_PEDIDO BINARY SEARCH INTO DATA(WA_CDHDR).
      IF SY-SUBRC IS INITIAL.
        READ TABLE IT_CDHDR_USER WITH KEY BNAME = WA_CDHDR-USERNAME BINARY SEARCH INTO DATA(WA_CDHDR_USER).
        IF SY-SUBRC IS INITIAL.
          WA_RETORNO-USUARIO_APROVADOR_ULTIMO = WA_CDHDR_USER-NAME_TEXTC.
        ELSE.
          WA_RETORNO-USUARIO_APROVADOR_ULTIMO = WA_CDHDR-USERNAME.
        ENDIF.
      ENDIF.

      READ TABLE IT_T001 INTO DATA(WA_EMPRESA) WITH KEY BUKRS = WA_PEDIDO-CD_EMPRESA.
      READ TABLE IT_TKA02 INTO DATA(WA_IT_TKA02) WITH KEY BUKRS = WA_PEDIDO-CD_EMPRESA.

      DATA: VALOR_TOTAL TYPE P DECIMALS 2.

      VALOR_TOTAL = 0.

      LOOP AT IT_PEDIDO_ITENS INTO DATA(WA_EKPO) WHERE CD_PEDIDO EQ WA_RETORNO-CD_PEDIDO.
        CLEAR: WA_ITEM.

        WA_ITEM-CD_PEDIDO              = WA_EKPO-CD_PEDIDO.
        WA_ITEM-CD_ITEM                = WA_EKPO-CD_ITEM.
        WA_ITEM-VALOR_UNITARIO         = ZCL_STR=>VALOR_TO_STRING( CONV #( WA_EKPO-VALOR_UNITARIO ) )->GET( ).
        WA_ITEM-VALOR_TOTAL_ITEM       = ZCL_STR=>VALOR_TO_STRING( CONV #( WA_EKPO-VALOR_TOTAL_ITEM ) )->GET( ).
        WA_ITEM-CD_MATERIAL            = WA_EKPO-CD_MATERIAL.
        WA_ITEM-CD_GRUPO_MATERIAL      = WA_EKPO-CD_GRUPO_MATERIAL.
        WA_ITEM-NM_MATERIAL            = WA_EKPO-NM_MATERIAL.
        WA_ITEM-QUANTIDADE             = ZCL_STR=>QUANT_TO_STRING( WA_EKPO-QUANTIDADE )->GET( ).
        WA_ITEM-UNIDADE                = WA_EKPO-UNIDADE.
        WA_ITEM-DEPOSITO               = WA_EKPO-DEPOSITO.
        WA_ITEM-LOTE                   = WA_EKPO-LOTE.
        WA_ITEM-IVA                    = WA_EKPO-IVA.
        WA_ITEM-LOTE                   = WA_EKPO-LOTE.

        READ TABLE IT_T006A INTO DATA(WA_T006A) WITH KEY MSEHI = WA_EKPO-UNIDADE BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          WA_ITEM-UNIDADE = WA_T006A-MSEH3.
        ENDIF.

        CASE WA_EKPO-ID_CATEGORIA_CLASS_CTB.
          WHEN 'A'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB = 'Imobilizado'.
          WHEN 'B'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB = 'Prod.p/estq./liq.OCl'.
          WHEN 'C'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB =  'Ordem do cliente'.
          WHEN 'D'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB =  'Indv.cli./liq.proj.'.
          WHEN 'E'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB =  'Indv.cli.com CO cli.'.
          WHEN 'F'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB =  'Ordem'.
          WHEN 'G'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB =  'Prod.p/estq./LiqPrj.'.
          WHEN 'H'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB =  'Razao'.
          WHEN 'K'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB =  'Centro de custo'.
          WHEN 'M'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB =  'Indv.cli.sem CO cli.'.
          WHEN 'N'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB =  'Diagrama de rede'.
          WHEN 'P'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB =  'Projeto'.
          WHEN 'Q'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB =  'Produção ind.projeto'.
          WHEN 'T'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB =  'Tods.novs.custs.ind.'.
          WHEN 'U'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB =  'Desconhecido'.
          WHEN 'X'.
            WA_ITEM-DS_CATEGORIA_CLASS_CTB =  'TdsClassContAux'.
        ENDCASE.

        CASE WA_EKPO-LOEKZ.
          WHEN SPACE.
            WA_ITEM-STATUS = 'Normal'.
          WHEN 'S'.
            WA_ITEM-STATUS = 'Bloqueado'.
        ENDCASE.


        LOOP AT IT_EKKN INTO DATA(WA_EKKN) WHERE CD_PEDIDO EQ WA_EKPO-CD_PEDIDO AND CD_ITEM EQ WA_EKPO-CD_ITEM.
          CLEAR: WA_ITEM_CTB.
          MOVE-CORRESPONDING WA_EKKN TO WA_ITEM_CTB.

          READ TABLE IT_TGSBT INTO DATA(WA_TGSBT) WITH KEY GSBER = WA_EKKN-CD_DIVISAO BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            WA_ITEM_CTB-DS_DIVISAO = WA_TGSBT-GTEXT.
          ENDIF.

          READ TABLE IT_SKAT INTO DATA(WA_SKAT) WITH KEY SAKNR = WA_EKKN-CD_CONTA_RAZAO KTOPL = WA_EMPRESA-KTOPL BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            WA_ITEM_CTB-DS_CONTA_RAZAO = WA_SKAT-TXT50.
          ENDIF.

          IF WA_EKKN-CD_CENTRO_CUSTO IS NOT INITIAL.
            READ TABLE IT_CSKT INTO DATA(WA_IT_CSKT) WITH KEY KOSTL = WA_EKKN-CD_CENTRO_CUSTO KOKRS = WA_IT_TKA02-KOKRS BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              WA_ITEM_CTB-DS_CENTRO_CUSTO = WA_IT_CSKT-LTEXT.
            ENDIF.

            READ TABLE IT_CSKS INTO DATA(WA_IT_CSKS) WITH KEY KOSTL = WA_EKKN-CD_CENTRO_CUSTO KOKRS = WA_IT_TKA02-KOKRS BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              WA_ITEM_CTB-DS_CENTRO_CUSTO_RESPONSAVEL = WA_IT_CSKS-VERAK.
            ENDIF.

          ENDIF.

          APPEND WA_ITEM_CTB TO WA_ITEM-ITEM_CTB.
        ENDLOOP.

        LOOP AT IT_RSEG INTO DATA(WA_RSEG) WHERE CD_PEDIDO EQ WA_EKPO-CD_PEDIDO AND CD_ITEM EQ WA_EKPO-CD_ITEM.
          READ TABLE WA_ITEM-FATURAS WITH KEY NR_MIRO = WA_RSEG-BELNR ANO_MIRO = WA_RSEG-GJAHR TRANSPORTING NO FIELDS.
          IF SY-SUBRC IS NOT INITIAL.
            READ TABLE IT_RBKP INTO DATA(WA_RBKP) WITH KEY BELNR = WA_RSEG-BELNR GJAHR = WA_RSEG-GJAHR.
            IF SY-SUBRC IS INITIAL.
              CLEAR: WA_FATURA.
              WA_FATURA-NR_MIRO       = WA_RBKP-BELNR.
              WA_FATURA-ANO_MIRO      = WA_RBKP-GJAHR.
              WA_FATURA-DT_MIRO       = WA_RBKP-BUDAT.
              WA_FATURA-NR_DOCUMENTO  = WA_RBKP-XBLNR.
              WA_FATURA-DS_TEXTO_ITEM = WA_RBKP-SGTXT.
              WA_FATURA-DT_VENCIMENTO = WA_RBKP-ZFBDT.
              APPEND WA_FATURA TO WA_ITEM-FATURAS.
            ENDIF.
          ENDIF.
        ENDLOOP.

        ADD WA_EKPO-VALOR_TOTAL_ITEM TO VALOR_TOTAL.
        APPEND WA_ITEM TO WA_RETORNO-ITENS.

      ENDLOOP.

      WA_RETORNO-VALOR_TOTAL = ZCL_STR=>VALOR_TO_STRING( CONV #( VALOR_TOTAL ) )->GET( ).
      APPEND WA_RETORNO TO LC_RETORNO.

    ENDLOOP.

    E_MSG_OUTBOUND = ZCL_FMCALL_BASE=>ABAP2JSON( EXPORTING ABAP_DATA = LC_RETORNO ).

    E_SUCESSO = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_INTEGRAR_RETORNO.
    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO = ABAP_TRUE.
  ENDMETHOD.


  method ZIF_INTEGRACAO_INJECT~SET_PROCESSA_INBOUND.
    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO = ABAP_TRUE.
  endmethod.


  method ZIF_INTEGRACAO_INJECT~SET_PROCESSA_RETORNO.
    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO = ABAP_TRUE.
  endmethod.


  METHOD ZIF_INTEGRACAO_PEDIDO_CONSULTA~GET_INSTANCE.

    IF ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_INTEGRACAO_PEDI_CONSULTA IS NOT BOUND.
      CREATE OBJECT ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_INTEGRACAO_PEDI_CONSULTA TYPE ZCL_INTEGRACAO_PEDIDO_CONSULTA.
    ENDIF.
    R_INTEGRACAO_PEDIDO_CONSULTA = ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_INTEGRACAO_PEDI_CONSULTA.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_PEDIDO_CONSULTA~GET_VALIDAR_DADOS.
    R_INTEGRACAO_PEDIDO_CONSULTA = ME.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_PEDIDO_CONSULTA~SET_DS_DATA.

    R_INTEGRACAO_PEDIDO_CONSULTA = ME.

    CLEAR: ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA.

    ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP = I_INFO.
    /UI2/CL_JSON=>DESERIALIZE( EXPORTING JSON = I_INFO-DS_BODY CHANGING DATA = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA ).

    ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~GET_VALIDAR_DADOS( ).

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_PEDIDO IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_PEDIDO_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_PEDIDO ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_EMPRESA IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_EMPRESA_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_EMPRESA ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CATEGORIA_PEDIDO IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CATEGORIA_PEDIDO_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CATEGORIA_PEDIDO ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-TIPO_PEDIDO IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-TIPO_PEDIDO_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-TIPO_PEDIDO ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_FORNECEDOR IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_FORNECEDOR_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_FORNECEDOR ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CNPJ_FORNECEDOR IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CNPJ_FORNECEDOR_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CNPJ_FORNECEDOR ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CPF_FORNECEDOR IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CPF_FORNECEDOR_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CPF_FORNECEDOR ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-INSC_ESTADUAL_FORNECEDOR IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-INSC_ESTADUAL_FORNECEDOR_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-INSC_ESTADUAL_FORNECEDOR ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-DATA_PEDIDO IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-DATA_PEDIDO_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-DATA_PEDIDO ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-ORGANIZACAO_DE_COMPRAS IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-ORGANIZACAO_DE_COMPRAS_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-ORGANIZACAO_DE_COMPRAS ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-GRUPO_DE_COMPRADORES IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-GRUPO_DE_COMPRADORES_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-GRUPO_DE_COMPRADORES ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-LIBERACAO_INCOMPLETA IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-LIBERACAO_INCOMPLETA_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-LIBERACAO_INCOMPLETA ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-MATERIAL IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-MATERIAL_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-MATERIAL ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CENTRO IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CENTRO_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CENTRO ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_ITEM IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_ITEM_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CODIGO_ITEM ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-LOTE IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-LOTE_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-LOTE ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CHAVE_CONTROLE_CONFIRMACAO IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CHAVE_CONTROLE_CONFIRMACAO_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-CHAVE_CONTROLE_CONFIRMACAO ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-IVA IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-IVA_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-IVA ) ).
    ENDIF.

    IF ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-DEPOSITO IS NOT INITIAL.
      ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-DEPOSITO_IN = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA-DEPOSITO ) ).
    ENDIF.

    CHECK ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_CONSULTA IS INITIAL.

    RAISE EXCEPTION TYPE ZCX_INTEGRACAO
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_INTEGRACAO=>ZCX_ERRO_BODY_RECEBIDO-MSGID
                          MSGNO = ZCX_INTEGRACAO=>ZCX_ERRO_BODY_RECEBIDO-MSGNO )
        MSGID  = ZCX_INTEGRACAO=>ZCX_ERRO_BODY_RECEBIDO-MSGID
        MSGNO  = ZCX_INTEGRACAO=>ZCX_ERRO_BODY_RECEBIDO-MSGNO
        MSGTY  = 'E'.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_PEDIDO_CONSULTA~SET_SEND_MSG.

    DATA: LC_INTEGRACAO TYPE REF TO ZCL_INTEGRACAO.

    CLEAR: E_ZINTEGRACAO_LOG.

    R_INTEGRACAO_PEDIDO_CONSULTA = ME.

    "Verificar a Função de Cada requisição
    ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_FUNCAO_PROCESSA  = '/pedido/consulta'.

    CREATE OBJECT LC_INTEGRACAO.

    LC_INTEGRACAO->ZIF_INTEGRACAO~SET_MSG_INJECT( I_MSG = CAST #( ME )
      )->SET_NEW_MSG( IMPORTING E_ID_INTEGRACAO = ME->ZIF_INTEGRACAO_PEDIDO_CONSULTA~AT_ID_INTEGRACAO
      )->SET_PROCESSAR_RETORNO(
      )->SET_INTEGRAR_RETORNO( IMPORTING E_DATA_RETORNO = DATA(E_DATA_RETORNO) E_ZINTEGRACAO_LOG = E_ZINTEGRACAO_LOG
      )->GET_REGISTRO( IMPORTING E_INTEGRACAO = DATA(E_INTEGRACAO)
      )->FREE(
      ).

    E_MSG = E_DATA_RETORNO.
    E_PROTOCOLO = ZCL_STRING=>LPAD( I_STR  = CONV #( E_INTEGRACAO-ID_INTEGRACAO ) I_QTD  = 15 I_CHAR = '0'  ).

    CLEAR: LC_INTEGRACAO.

  ENDMETHOD.
ENDCLASS.
