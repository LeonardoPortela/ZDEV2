class ZCL_ROTA_DB definition
  public
  create public .

*"* public components of class ZCL_ROTA_DB
*"* do not include other source files here!!!
public section.

  interfaces ZIF_ROTA_DB .

  methods GRAVAR_CHAVE
    importing
      !I_CHAVE type STRING
      !I_GRUPO type ZDE_DS_GRUPO_EMPRESA .
  methods SELECIONA_NOVOS
    importing
      !I_GRUPO type ZDE_DS_GRUPO_EMPRESA
    returning
      value(E_ZLEST0084) type ref to ZLEST0084 .
protected section.
*"* protected components of class ZCL_ROTA_DB
*"* do not include other source files here!!!
private section.
*"* private components of class ZCL_ROTA_DB
*"* do not include other source files here!!!
ENDCLASS.



CLASS ZCL_ROTA_DB IMPLEMENTATION.


METHOD GRAVAR_CHAVE.
*****************
*  Descrição: Método utilizado para gravar a nova chave de segurança.
*  Data: 07.04.2014 14:14:16
*****************

  DATA: GW_ZLEST0086 TYPE ZLEST0086. "Estrutura Work Area da Tabela ZLEST0086 onde salva a chave de segurança da tipcard.

  "Deletar o registro que existe na ZLEST0086
  "Para Inserir um novo.
  DELETE FROM ZLEST0086.

  "COMMIT WORK.

  GW_ZLEST0086-CHAVE    = I_CHAVE.  "Atribui a nova chave que vai ser gravada.
  GW_ZLEST0086-DATA     = SY-DATUM. "Atribuir a data atual do sistema para a nova chave.
  GW_ZLEST0086-HORA     = SY-UZEIT. "Atribui o horario atual do sistema para a nova chave.
  GW_ZLEST0086-DS_GRUPO = I_GRUPO.  "Grupo Empresa

  INSERT INTO ZLEST0086 VALUES GW_ZLEST0086. "Grava na tabela.

  "COMMIT WORK. "Commita no banco de dados.

ENDMETHOD.


METHOD SELECIONA_NOVOS.

  DATA: GT_ZLEST0084 TYPE TABLE OF ZLEST0084,
        GW_ZLEST0084 TYPE ZLEST0084.

  DATA: OBJ_ZCL_ROTA TYPE REF TO ZCL_ROTA,
        OBJ_ZCL_UTIL TYPE REF TO ZCL_UTIL.

  DATA: VAR_DATA TYPE ZLEST0084-DT_VIGENCIA.

  SELECT SINGLE * INTO @DATA(WA_ZLEST0159)
    FROM ZLEST0159
   WHERE DS_GRUPO EQ @I_GRUPO.

  SELECT * FROM ZLEST0084
    INTO TABLE GT_ZLEST0084
    WHERE NV_DT_VIGENCIA EQ SY-DATUM.

  IF NOT ( GT_ZLEST0084[] IS INITIAL ).

    LOOP AT GT_ZLEST0084 INTO GW_ZLEST0084.

      CLEAR: VAR_DATA.

      FREE: OBJ_ZCL_ROTA, OBJ_ZCL_UTIL.

      CREATE OBJECT: OBJ_ZCL_ROTA,
                     OBJ_ZCL_UTIL.

      OBJ_ZCL_ROTA->SET_BUKRS( WA_ZLEST0159-BUKRS ).
      OBJ_ZCL_ROTA->SET_BRANCH( WA_ZLEST0159-BRANCH ).
      OBJ_ZCL_ROTA->SET_ID_ROTA( GW_ZLEST0084-ID_ROTA ).
      OBJ_ZCL_ROTA->SET_CAT_VEICULO( GW_ZLEST0084-CAT_VEICULO ).
      VAR_DATA = OBJ_ZCL_UTIL->CONV_DATA_US_BR( GW_ZLEST0084-NV_DT_VIGENCIA ).
      OBJ_ZCL_ROTA->SET_DT_VIGENCIA( VAR_DATA ).
      OBJ_ZCL_ROTA->SET_VLR_PEDAGIO( GW_ZLEST0084-NV_VL_PEDAGIO ).
      OBJ_ZCL_ROTA->SET_DESCR_ROTA( GW_ZLEST0084-DESCR_ROTA ).

      ME->ZIF_ROTA_DB~ATUALIZAR( OBJ_ZCL_ROTA ).

      CLEAR: GW_ZLEST0084.

    ENDLOOP.
  ENDIF.

ENDMETHOD.


METHOD ZIF_ROTA_DB~ATUALIZAR.

  DATA: GW_ZLEST0084        TYPE ZLEST0084,
        GW_ZLEST0084_UPDATE TYPE ZLEST0084.

  DATA: OBJ_ZCL_UTIL TYPE REF TO ZCL_UTIL.

  FREE: OBJ_ZCL_UTIL.
  CLEAR: GW_ZLEST0084, GW_ZLEST0084_UPDATE.

  GW_ZLEST0084_UPDATE-BUKRS       = OBJ_ROTA->GET_BUKRS( ).
  GW_ZLEST0084_UPDATE-BRANCH      = OBJ_ROTA->GET_BRANCH( ).
  GW_ZLEST0084_UPDATE-ID_ROTA     = OBJ_ROTA->GET_ID_ROTA( ).
  GW_ZLEST0084_UPDATE-CAT_VEICULO = OBJ_ROTA->GET_CAT_VEICULO( ).
  GW_ZLEST0084_UPDATE-DT_VIGENCIA = OBJ_ROTA->GET_DT_VIGENCIA( ).
  GW_ZLEST0084_UPDATE-VLR_PEDAGIO = OBJ_ROTA->GET_VLR_PEDAGIO( ).
  GW_ZLEST0084_UPDATE-DESCR_ROTA  = OBJ_ROTA->GET_DESCR_ROTA( ).

  "Selecionar na tabela Frete Rodoviário - Pedágio por Rota para verificar se a mesma já existe
  "Caso o retorno seja verdadeiro atualizar os novos valores e a data de vigencia.
  SELECT SINGLE * FROM ZLEST0084 INTO GW_ZLEST0084 WHERE ID_ROTA     EQ GW_ZLEST0084_UPDATE-ID_ROTA
                                                     AND CAT_VEICULO EQ GW_ZLEST0084_UPDATE-CAT_VEICULO
                                                     AND BUKRS       EQ GW_ZLEST0084_UPDATE-BUKRS
                                                     AND BRANCH      EQ GW_ZLEST0084_UPDATE-BRANCH.

  IF ( SY-SUBRC EQ 0 ).

    IF ( OBJ_ROTA->GET_DT_VIGENCIA( ) > GW_ZLEST0084-DT_VIGENCIA ) AND ( GW_ZLEST0084-NV_DT_VIGENCIA IS INITIAL ).

      UPDATE ZLEST0084
         SET NV_DT_VIGENCIA = GW_ZLEST0084_UPDATE-DT_VIGENCIA
             NV_VL_PEDAGIO  = GW_ZLEST0084_UPDATE-VLR_PEDAGIO
             DESCR_ROTA     = GW_ZLEST0084_UPDATE-DESCR_ROTA
       WHERE ID_ROTA     EQ GW_ZLEST0084_UPDATE-ID_ROTA
         AND CAT_VEICULO EQ GW_ZLEST0084_UPDATE-CAT_VEICULO
         AND BUKRS       EQ GW_ZLEST0084_UPDATE-BUKRS
         AND BRANCH      EQ GW_ZLEST0084_UPDATE-BRANCH.

      COMMIT WORK.

    ELSEIF ( OBJ_ROTA->GET_DT_VIGENCIA( ) = GW_ZLEST0084-NV_DT_VIGENCIA ) AND NOT ( GW_ZLEST0084-NV_DT_VIGENCIA IS INITIAL ).

      UPDATE ZLEST0084
         SET DT_VIGENCIA    = GW_ZLEST0084-NV_DT_VIGENCIA
             VLR_PEDAGIO    = GW_ZLEST0084-NV_VL_PEDAGIO
             NV_DT_VIGENCIA = 00000000
             NV_VL_PEDAGIO  = SPACE
       WHERE ID_ROTA     EQ GW_ZLEST0084_UPDATE-ID_ROTA
         AND CAT_VEICULO EQ GW_ZLEST0084_UPDATE-CAT_VEICULO
         AND BUKRS       EQ GW_ZLEST0084_UPDATE-BUKRS
         AND BRANCH      EQ GW_ZLEST0084_UPDATE-BRANCH.

      COMMIT WORK.

    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD ZIF_ROTA_DB~INSERIR.

  CONSTANTS: VAR_MSG TYPE STRING VALUE 'A rota foi gravado com sucesso no banco de dados.'.

  DATA: GW_ZLEST0084 TYPE ZLEST0084.

  GW_ZLEST0084-BUKRS         = OBJ_ROTA->GET_BUKRS( ).
  GW_ZLEST0084-BRANCH        = OBJ_ROTA->GET_BRANCH( ).
  GW_ZLEST0084-ID_ROTA       = OBJ_ROTA->GET_ID_ROTA( ).
  GW_ZLEST0084-CAT_VEICULO   = OBJ_ROTA->GET_CAT_VEICULO( ).
  GW_ZLEST0084-DT_VIGENCIA   = OBJ_ROTA->GET_DT_VIGENCIA( ).
  GW_ZLEST0084-MUNIC_ORIGEM  = OBJ_ROTA->GET_MUNIC_ORIGEM( ).
  GW_ZLEST0084-MUNIC_DESTINO = OBJ_ROTA->GET_MUNIC_DESTINO( ).
  GW_ZLEST0084-DISTANCIA     = OBJ_ROTA->GET_DISTANCIA( ).
  GW_ZLEST0084-VLR_PEDAGIO   = OBJ_ROTA->GET_VLR_PEDAGIO( ).
  GW_ZLEST0084-DESCR_ROTA    = OBJ_ROTA->GET_DESCR_ROTA( ).

  INSERT INTO ZLEST0084 VALUES GW_ZLEST0084.

  COMMIT WORK.

ENDMETHOD.
ENDCLASS.
