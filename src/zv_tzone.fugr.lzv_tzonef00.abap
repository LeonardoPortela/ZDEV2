*---------------------------------------------------------------------*
*    view related FORM routines
*---------------------------------------------------------------------*
*...processing: ZV_TZONE........................................*
FORM GET_DATA_ZV_TZONE.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM TZONE WHERE
(VIM_WHERETAB) .
    CLEAR ZV_TZONE .
ZV_TZONE-MANDT =
TZONE-MANDT .
ZV_TZONE-LAND1 =
TZONE-LAND1 .
ZV_TZONE-ZONE1 =
TZONE-ZONE1 .
ZV_TZONE-ZCEP =
TZONE-ZCEP .
ZV_TZONE-ZLATITUDE =
TZONE-ZLATITUDE .
ZV_TZONE-ZLONGITUDE =
TZONE-ZLONGITUDE .
    SELECT SINGLE * FROM TZONT WHERE
LAND1 = TZONE-LAND1 AND
ZONE1 = TZONE-ZONE1 AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZV_TZONE-VTEXT =
TZONT-VTEXT .
    ENDIF.
<VIM_TOTAL_STRUC> = ZV_TZONE.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_TZONE .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_TZONE.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_TZONE-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM TZONE WHERE
  LAND1 = ZV_TZONE-LAND1 AND
  ZONE1 = ZV_TZONE-ZONE1 .
    IF SY-SUBRC = 0.
    DELETE TZONE .
    ENDIF.
    DELETE FROM TZONT WHERE
    LAND1 = TZONE-LAND1 AND
    ZONE1 = TZONE-ZONE1 .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM TZONE WHERE
  LAND1 = ZV_TZONE-LAND1 AND
  ZONE1 = ZV_TZONE-ZONE1 .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR TZONE.
    ENDIF.
TZONE-MANDT =
ZV_TZONE-MANDT .
TZONE-LAND1 =
ZV_TZONE-LAND1 .
TZONE-ZONE1 =
ZV_TZONE-ZONE1 .
TZONE-ZCEP =
ZV_TZONE-ZCEP .
TZONE-ZLATITUDE =
ZV_TZONE-ZLATITUDE .
TZONE-ZLONGITUDE =
ZV_TZONE-ZLONGITUDE .
    IF SY-SUBRC = 0.
    UPDATE TZONE ##WARN_OK.
    ELSE.
    INSERT TZONE .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM TZONT WHERE
    LAND1 = TZONE-LAND1 AND
    ZONE1 = TZONE-ZONE1 AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR TZONT.
TZONT-LAND1 =
TZONE-LAND1 .
TZONT-ZONE1 =
TZONE-ZONE1 .
TZONT-SPRAS =
SY-LANGU .
      ENDIF.
TZONT-VTEXT =
ZV_TZONE-VTEXT .
    IF SY-SUBRC = 0.
    UPDATE TZONT ##WARN_OK.
    ELSE.
    INSERT TZONT .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_TZONE-UPD_FLAG,
STATUS_ZV_TZONE-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_ZV_TZONE.
  SELECT SINGLE * FROM TZONE WHERE
LAND1 = ZV_TZONE-LAND1 AND
ZONE1 = ZV_TZONE-ZONE1 .
ZV_TZONE-MANDT =
TZONE-MANDT .
ZV_TZONE-LAND1 =
TZONE-LAND1 .
ZV_TZONE-ZONE1 =
TZONE-ZONE1 .
ZV_TZONE-ZCEP =
TZONE-ZCEP .
ZV_TZONE-ZLATITUDE =
TZONE-ZLATITUDE .
ZV_TZONE-ZLONGITUDE =
TZONE-ZLONGITUDE .
    SELECT SINGLE * FROM TZONT WHERE
LAND1 = TZONE-LAND1 AND
ZONE1 = TZONE-ZONE1 AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZV_TZONE-VTEXT =
TZONT-VTEXT .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZV_TZONE-VTEXT .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_TZONE USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_TZONE-LAND1 TO
TZONE-LAND1 .
MOVE ZV_TZONE-ZONE1 TO
TZONE-ZONE1 .
MOVE ZV_TZONE-MANDT TO
TZONE-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'TZONE'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN TZONE TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'TZONE'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE TZONE-LAND1 TO
TZONT-LAND1 .
MOVE TZONE-ZONE1 TO
TZONT-ZONE1 .
MOVE SY-LANGU TO
TZONT-SPRAS .
MOVE ZV_TZONE-MANDT TO
TZONT-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'TZONT'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN TZONT TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'TZONT'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
