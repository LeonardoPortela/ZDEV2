*&---------------------------------------------------------------------*
*&  Include           ZFIR065_FORM
*&---------------------------------------------------------------------*


FORM F_REFRESH_ALV USING P_ALV.

  CASE P_ALV.
    WHEN '0100'.
      CALL METHOD OBJ_ALV_0100->REFRESH_TABLE_DISPLAY
        EXPORTING
          IS_STABLE = WA_STABLE.
    WHEN '0110'.

  ENDCASE.

ENDFORM.

FORM F_REFRESH_OBJETOS .

  CLEAR: GS_LAYOUT,
         GS_VARIANT.

  REFRESH: IT_EXCLUDE_FCODE.

ENDFORM.

FORM F_CRIAR_CATALOG USING P_SCREEN.

  FREE: WA_FCAT, IT_FCAT.

  CASE P_SCREEN.
    WHEN '0100'.

      PERFORM F_ESTRUTURA_ALV USING:

       01  'J_1BBRANCH'     'BRANCH'              'IT_SAIDA_0100'  'BRANCH'              'Filial'                '06'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       02  'T001W'          'WERKS'               'IT_SAIDA_0100'  'WERKS'               'Centro'                '06'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       03  'T001W'          'NAME1'               'IT_SAIDA_0100'  'DS_CENTRO'           'Descrição'             '25'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       04  'T001L'          'LGORT'               'IT_SAIDA_0100'  'LGORT'               'Depósito'              '10'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       05  'T001L'          'LGOBE'               'IT_SAIDA_0100'  'LGOBE'               'Descrição Depósito'    '20'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       06  'LFA1'           'LIFNR'               'IT_SAIDA_0100'  'LIFNR'               'Fornecedor'            '10'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       07  'LFA1'           'NAME1'               'IT_SAIDA_0100'  'DS_FORN'             'Nome Fornecedor'       '25'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       08  ''               ''                    'IT_SAIDA_0100'  'CLASS'               'Classificação'         '25'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       09  'MARA'           'MATKL'               'IT_SAIDA_0100'  'MATKL'               'Grp.Merc.'             '10'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       10  'MARA'           'MATNR'               'IT_SAIDA_0100'  'MATNR'               'Material'              '10'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       11  'ZDE_MC5_OUT'    'MBWBEST'             'IT_SAIDA_0100'  'MBWBEST'             'Quantidade'            '15'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
*       12  ''               ''                    'IT_SAIDA_0100'  'NETPR'               'Unitário'              '08'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       13  'ZDE_MC5_OUT'    'WBWBEST'             'IT_SAIDA_0100'  'WBWBEST'             'Valor R$'              '15'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       14  ''               ''                    'IT_SAIDA_0100'  'VLR_USD'             'Valor USD'             '15'   ' '    ''  ' ' ' ' ' ' ' ' '' .
*       15  ''               ''                    'IT_SAIDA_0100'  'VLR_UNT_USD'         'Valor Unt. USD'        '15'   ' '    ''  ' ' ' ' ' ' ' ' ''.

    WHEN '0110'.

  ENDCASE.


ENDFORM.

FORM F_ESTRUTURA_ALV USING VALUE(P_COL_POS)       TYPE I
                           VALUE(P_REF_TABNAME)   LIKE DD02D-TABNAME
                           VALUE(P_REF_FIELDNAME) LIKE DD03D-FIELDNAME
                           VALUE(P_TABNAME)       LIKE DD02D-TABNAME
                           VALUE(P_FIELD)         LIKE DD03D-FIELDNAME
                           VALUE(P_SCRTEXT_L)     LIKE DD03P-SCRTEXT_L
                           VALUE(P_OUTPUTLEN)
                           VALUE(P_EDIT)
                           VALUE(P_SUM)
                           VALUE(P_EMPHASIZE)
                           VALUE(P_JUST)
                           VALUE(P_HOTSPOT)
                           VALUE(P_F4)
                           VALUE(P_CHECK).

  CLEAR WA_FCAT.

  WA_FCAT-FIELDNAME   = P_FIELD.
  WA_FCAT-TABNAME     = P_TABNAME.
  WA_FCAT-REF_TABLE   = P_REF_TABNAME.
  WA_FCAT-REF_FIELD   = P_REF_FIELDNAME.
  WA_FCAT-KEY         = ' '.
  WA_FCAT-EDIT        = P_EDIT.
  WA_FCAT-COL_POS     = P_COL_POS.
  WA_FCAT-OUTPUTLEN   = P_OUTPUTLEN.
  WA_FCAT-NO_OUT      = ' '.
  WA_FCAT-DO_SUM      = P_SUM.
  WA_FCAT-REPTEXT     = P_SCRTEXT_L.
  WA_FCAT-SCRTEXT_S   = P_SCRTEXT_L.
  WA_FCAT-SCRTEXT_M   = P_SCRTEXT_L.
  WA_FCAT-SCRTEXT_L   = P_SCRTEXT_L.
  WA_FCAT-EMPHASIZE   = P_EMPHASIZE.
  WA_FCAT-STYLE       =
  WA_FCAT-JUST        = P_JUST.
  WA_FCAT-HOTSPOT     = P_HOTSPOT.
  WA_FCAT-F4AVAILABL  = P_F4.
  WA_FCAT-CHECKBOX    = P_CHECK.

  APPEND WA_FCAT TO IT_FCAT.

ENDFORM.                    " ESTRUTURA_ALV

FORM F_EXCLUDE_FCODE USING P_SCREEN.

  APPEND CL_GUI_ALV_GRID=>MC_FC_REFRESH           TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW    TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW    TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW    TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_COPY          TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW      TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_CUT           TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO          TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE         TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_CHECK             TO IT_EXCLUDE_FCODE.

ENDFORM.

FORM F_LIMPA_VARIAVEIS .

  CLEAR: WA_SAIDA_0100,
         IT_SAIDA_0100[],
         TG_ZSDT_DEPARA_CEN[],
         TG_ZSDT_DEPARA_DEPO[],
         TG_MSLB[],
         TG_MSLB_GRP[],
         TG_T001W[],
         TG_T001L[],
         TG_LFA1[],
         TG_ESTOQUE_MC_5_AUX[],
         TG_ESTOQUE_MC_5[].

ENDFORM.

FORM F_SELECIONAR_DADOS.

  DATA: VL_DT_FIM(8)   TYPE C,
        VL_DT_HIGH_IN  TYPE SY-DATUM,
        VL_DT_HIGH_OUT TYPE SY-DATUM,
        VL_MAT_ARMZ    TYPE MARA-MATNR,
        ZNETPR         TYPE F.


  DATA: IT_RSPARAMS TYPE TABLE OF RSPARAMS,
        WA_RSPARAMS TYPE RSPARAMS.

  PERFORM POPULA_RANGE_WERKS.
  PERFORM F_LIMPA_VARIAVEIS.

  DATA(_ARMAZENAGEM) = P_ARM.

  DATA(_SPMON) = P_DTBASE-LOW+4(2)  && P_DTBASE-LOW(4).

  IF ( P_MATNR[] IS INITIAL ) AND ( P_MATKL[] IS INITIAL ).
    MESSAGE 'Informe Material ou Grupo de Mercadorias!' TYPE 'S'.
    STOP.
  ENDIF.

  IF P_WERKS[] IS INITIAL AND P_BRANCH[] IS INITIAL.
    MESSAGE 'Informe Filial ou o Centro!' TYPE 'S'.
    STOP.
  ENDIF.

  SELECT *
    FROM ZSDT_DEPARA_CEN
    INTO TABLE TG_ZSDT_DEPARA_CEN
     WHERE CENTRO_REAL IN P_BRANCH
       AND CENTROV_1   IN P_WERKS.

  DATA(TG_ZSDT_DEPARA_CEN_AUX) = TG_ZSDT_DEPARA_CEN[].
*
  SORT TG_ZSDT_DEPARA_CEN_AUX BY CENTRO_REAL.
  DELETE ADJACENT DUPLICATES FROM TG_ZSDT_DEPARA_CEN_AUX COMPARING CENTRO_REAL.
*
  LOOP AT TG_ZSDT_DEPARA_CEN_AUX ASSIGNING FIELD-SYMBOL(<FS_CENTRO>).
    <FS_CENTRO>-CENTROV_1 = <FS_CENTRO>-CENTRO_REAL.
  ENDLOOP.
*
  APPEND LINES OF TG_ZSDT_DEPARA_CEN_AUX TO TG_ZSDT_DEPARA_CEN.

  IF TG_ZSDT_DEPARA_CEN[] IS NOT INITIAL.
    SELECT *
      FROM ZSDT_DEPARA_DEPO INTO TABLE TG_ZSDT_DEPARA_DEPO
       FOR ALL ENTRIES IN TG_ZSDT_DEPARA_CEN
     WHERE WERKS_V EQ TG_ZSDT_DEPARA_CEN-CENTROV_1
       AND WERKS   EQ TG_ZSDT_DEPARA_CEN-CENTRO_REAL.
  ENDIF.

  IF _ARMAZENAGEM EQ ABAP_TRUE.
    SELECT *
      FROM MARA AS A INTO TABLE TG_MARA
     WHERE MATNR IN P_MATNR
       AND MATKL IN P_MATKL
       AND EXISTS ( SELECT MATNR
                    FROM MBEW AS B
                   WHERE B~MATNR EQ A~MATNR
                     AND B~BWKEY IN P_BRANCH
                     AND B~BKLAS EQ '7919' ). "Armazenagem Prd.Terceiros
  ELSE.
    SELECT *
      FROM MARA INTO TABLE TG_MARA
     WHERE MATNR IN P_MATNR
       AND MATKL IN P_MATKL.
  ENDIF.


  PERFORM BUSCA_DADOS_ZCO0016.

*------------------------------------------------------*
*  Variaveis de Cabeçalho
*------------------------------------------------------*
  IF LINES( TG_MARA[] ) EQ 1.
    READ TABLE TG_MARA INDEX 1.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = TG_MARA-MATNR
      IMPORTING
        OUTPUT = VG_MATNR.
  ENDIF.

  IF P_DTBASE[] IS NOT INITIAL.

    VG_DT_FIM_IN  = |{ P_DTBASE-LOW }01|.

    IF _ARMAZENAGEM = ABAP_FALSE.
      CALL FUNCTION 'RP_LAST_DAY_OF_MONTHS'
        EXPORTING
          DAY_IN            = VG_DT_FIM_IN
        IMPORTING
          LAST_DAY_OF_MONTH = VG_DT_FIM_IN.
    ENDIF.

    VG_DT_FIM = VG_DT_FIM_IN+6(2) && '.' && VG_DT_FIM_IN+4(2) && '.' && VG_DT_FIM_IN(4).

  ENDIF.

*------------------------------------------------------------------------------*
* Selecionar Dados MB51
*------------------------------------------------------------------------------*
  IF _ARMAZENAGEM EQ ABAP_TRUE.

    CLEAR: IT_RSPARAMS[].

    VG_DT_FIM_IN  = |{ P_DTBASE-LOW }01|.

    CALL FUNCTION 'RP_LAST_DAY_OF_MONTHS'
      EXPORTING
        DAY_IN            = VG_DT_FIM_IN
      IMPORTING
        LAST_DAY_OF_MONTH = VG_DT_FIM_IN.

    LOOP AT TG_MARA.
      CLEAR: WA_RSPARAMS.
      WA_RSPARAMS-SELNAME = 'MATNR'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = 'EQ'.
      WA_RSPARAMS-LOW     = TG_MARA-MATNR.
      APPEND WA_RSPARAMS TO IT_RSPARAMS.
    ENDLOOP.

    LOOP AT TG_ZSDT_DEPARA_CEN.
      CLEAR: WA_RSPARAMS.
      WA_RSPARAMS-SELNAME = 'WERKS'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = 'EQ'.
      WA_RSPARAMS-LOW     = TG_ZSDT_DEPARA_CEN-CENTROV_1.
      APPEND WA_RSPARAMS TO IT_RSPARAMS.
    ENDLOOP.

    IF P_BRANCH[] IS NOT INITIAL.
      CLEAR: WA_RSPARAMS.
      WA_RSPARAMS-SELNAME = 'WERKS'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = P_BRANCH-OPTION.
      WA_RSPARAMS-LOW     = P_BRANCH-LOW.
      WA_RSPARAMS-HIGH    = P_BRANCH-HIGH.
      APPEND WA_RSPARAMS TO IT_RSPARAMS.
    ENDIF.

    IF ( TG_ZSDT_DEPARA_CEN[] IS INITIAL ) OR ( P_WERKS[] IS INITIAL ).
      CLEAR: WA_RSPARAMS.
      WA_RSPARAMS-SELNAME = 'WERKS'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = P_BRANCH-OPTION.
      WA_RSPARAMS-LOW     = P_BRANCH-LOW.
      WA_RSPARAMS-HIGH    = P_BRANCH-HIGH.
      APPEND WA_RSPARAMS TO IT_RSPARAMS.
    ENDIF.

    LOOP AT P_LIFNR.
      CLEAR: WA_RSPARAMS.
      WA_RSPARAMS-SELNAME = 'LIFNR'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = P_LIFNR-OPTION.
      WA_RSPARAMS-LOW     = P_LIFNR-LOW.
      WA_RSPARAMS-HIGH    = P_LIFNR-HIGH.
      APPEND WA_RSPARAMS TO IT_RSPARAMS.
    ENDLOOP.

    IF VG_DT_FIM_IN IS NOT INITIAL.

      CLEAR: WA_RSPARAMS.
      WA_RSPARAMS-SELNAME = 'BUDAT'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = 'BT'.
      WA_RSPARAMS-LOW     = '00000000'.
      WA_RSPARAMS-HIGH    = VG_DT_FIM_IN.

      APPEND WA_RSPARAMS TO IT_RSPARAMS.

    ENDIF.

    CLEAR: WA_RSPARAMS.
    WA_RSPARAMS-SELNAME = 'RHIER_L'.
    WA_RSPARAMS-KIND    = 'P'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = 'EQ'.
    WA_RSPARAMS-LOW     = ''.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.

    CLEAR: WA_RSPARAMS.
    WA_RSPARAMS-SELNAME = 'RFLAT_L'.
    WA_RSPARAMS-KIND    = 'P'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = 'EQ'.
    WA_RSPARAMS-LOW     = 'X'.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.

    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
      EXPORTING
        PERCENTAGE = SY-TABIX
        TEXT       = 'Extraindo dados em MB51...'.

    PERFORM F_PREPARE_RUN_TIME_INFO.

    SUBMIT RM07DOCS WITH SELECTION-TABLE IT_RSPARAMS
                AND RETURN.

    PERFORM F_GET_RUNTIME_INFO.

    IF <LT_DATA> IS ASSIGNED.
      LOOP AT <LT_DATA> ASSIGNING <LS_DATA>.
        MOVE-CORRESPONDING <LS_DATA> TO TG_ESTOQUE_MB51.
        TG_ESTOQUE_MB51-DMBTR = TG_ESTOQUE_MB51-EXBWR.
        APPEND TG_ESTOQUE_MB51.
      ENDLOOP.
    ENDIF.
  ENDIF.

*------------------------------------------------------------------------------*
* Selecionar Dados MC.5
*------------------------------------------------------------------------------*
  CLEAR: IT_RSPARAMS[].

  LOOP AT TG_ZSDT_DEPARA_CEN.
    CLEAR: WA_RSPARAMS.
    WA_RSPARAMS-SELNAME = 'SL_WERKS'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = 'EQ'.
    WA_RSPARAMS-LOW     = TG_ZSDT_DEPARA_CEN-CENTROV_1.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.

  IF ( TG_ZSDT_DEPARA_CEN[] IS INITIAL ) OR ( P_WERKS[] IS INITIAL ).
    CLEAR: WA_RSPARAMS.
    WA_RSPARAMS-SELNAME = 'SL_WERKS'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = 'EQ'.
    WA_RSPARAMS-LOW     = P_BRANCH-LOW.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDIF.

  LOOP AT P_LGORT.
    CLEAR: WA_RSPARAMS.
    WA_RSPARAMS-SELNAME = 'SL_LGORT'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = P_LGORT-OPTION.
    WA_RSPARAMS-LOW     = P_LGORT-LOW.
    WA_RSPARAMS-HIGH    = P_LGORT-HIGH.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.

  LOOP AT P_MTART.
    CLEAR: WA_RSPARAMS.
    WA_RSPARAMS-SELNAME = 'SL_MTART'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = P_MTART-OPTION.
    WA_RSPARAMS-LOW     = P_MTART-LOW.
    WA_RSPARAMS-HIGH    = P_MTART-HIGH.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.

  LOOP AT P_BKLAS.
    CLEAR: WA_RSPARAMS.
    WA_RSPARAMS-SELNAME = 'SL_BKLAS'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = P_BKLAS-OPTION.
    WA_RSPARAMS-LOW     = P_BKLAS-LOW.
    WA_RSPARAMS-HIGH    = P_BKLAS-HIGH.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.

  LOOP AT TG_MARA.
    CLEAR: WA_RSPARAMS.
    WA_RSPARAMS-SELNAME = 'SL_MATNR'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = 'EQ'.
    WA_RSPARAMS-LOW     = TG_MARA-MATNR.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.

  LOOP AT P_MATKL.
    CLEAR: WA_RSPARAMS.
    WA_RSPARAMS-SELNAME = 'SL_MATKL'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = P_MATKL-OPTION.
    WA_RSPARAMS-LOW     = P_MATKL-LOW.
    WA_RSPARAMS-HIGH    = P_MATKL-HIGH.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.

  IF VG_DT_FIM_IN IS NOT INITIAL.
    CLEAR: WA_RSPARAMS.
    WA_RSPARAMS-SELNAME = 'SL_SPMON'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = 'BT'.
    WA_RSPARAMS-LOW     = '000000'.
    WA_RSPARAMS-HIGH    = VG_DT_FIM_IN(6).

    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDIF.

  CLEAR: WA_RSPARAMS.
  WA_RSPARAMS-SELNAME = 'VA'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = 'X'.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  CLEAR: WA_RSPARAMS.
  WA_RSPARAMS-SELNAME = 'EXC_MODE'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = 'D'.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.


  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = SY-TABIX
      TEXT       = 'Extraindo dados em MC.5 ...'.

  CHARAC-FNAME = 'SPMON'.
  APPEND CHARAC.

  CHARAC-FNAME = 'MATNR'.
  APPEND CHARAC.

  CHARAC-FNAME = 'MATKL'.
  APPEND CHARAC.

  CHARAC-FNAME = 'WERKS'.
  APPEND CHARAC.

  CHARAC-FNAME = 'LGORT'.
  APPEND CHARAC.

  PERFOR-FNAME = 'MBWBEST'.
  APPEND PERFOR.

  PERFOR-FNAME = 'WBWBEST'.
  APPEND PERFOR.

  BAPI_GSTRU = 'ZDE_MC5_OUT'.

  EXPORT BAPI_GSTRU TO MEMORY ID 'GSTR'.

  EXPORT PERFOR TO MEMORY ID 'KENN'.
  EXPORT CHARAC TO MEMORY ID 'MERK'.

  SUBMIT RMCB0200 WITH SELECTION-TABLE IT_RSPARAMS
              AND RETURN.
  FREE DATA.

  IMPORT DATA FROM MEMORY ID 'DATA'.

  LOOP AT DATA.
    TG_ESTOQUE_MC_5-SPMON   = DATA+00(06).
    TG_ESTOQUE_MC_5-MATNR   = DATA+07(18).
*>>> S4 MIGRATION 25-07-2023 - MA
*    TG_ESTOQUE_MC_5-MATKL   = DATA+25(09).
*    TG_ESTOQUE_MC_5-WERKS   = DATA+34(04).
*    TG_ESTOQUE_MC_5-LGORT   = DATA+38(04).
*    TG_ESTOQUE_MC_5-MBWBEST = DATA+45(17).
*    TG_ESTOQUE_MC_5-BASME   = DATA+62(03).
*    TG_ESTOQUE_MC_5-WBWBEST = DATA+68(17).
*    TG_ESTOQUE_MC_5-HWAER   = DATA+85(05).
    TG_ESTOQUE_MC_5-MATKL   = DATA+47(09).
    TG_ESTOQUE_MC_5-WERKS   = DATA+56(04).
    TG_ESTOQUE_MC_5-LGORT   = DATA+60(04).
    TG_ESTOQUE_MC_5-MBWBEST = DATA+67(17).
    TG_ESTOQUE_MC_5-BASME   = DATA+84(03).
    TG_ESTOQUE_MC_5-WBWBEST = DATA+90(17).
    TG_ESTOQUE_MC_5-HWAER   = DATA+107(05).
*<<< S4 MIGRATION 25-07-2023 - MA
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = TG_ESTOQUE_MC_5-MATNR
      IMPORTING
        OUTPUT = TG_ESTOQUE_MC_5-MATNR.

    IF ( TG_ESTOQUE_MC_5-LGORT NOT IN P_LGORT ) AND ( TG_ESTOQUE_MC_5-LGORT IS NOT INITIAL ).
      CONTINUE.
    ENDIF.

    IF TG_ESTOQUE_MC_5-SPMON NE _SPMON.
      CONTINUE.
    ENDIF.

    APPEND TG_ESTOQUE_MC_5.
  ENDLOOP.

  FREE MEMORY ID: 'DATA', 'GSTR', 'KENN', 'MERK'.

  APPEND VALUE #( SELNAME = 'SL_WAERS' KIND = 'P' SIGN = 'I' OPTION = 'EQ' LOW = 'USD' ) TO IT_RSPARAMS.

  SUBMIT RMCB0200 WITH SELECTION-TABLE IT_RSPARAMS
              AND RETURN.

  IMPORT DATA FROM MEMORY ID 'DATA'.

  LOOP AT DATA.
    TG_ESTOQUE_MC_5_USD-SPMON   = DATA+00(06).
    TG_ESTOQUE_MC_5_USD-MATNR   = DATA+07(18).
    TG_ESTOQUE_MC_5_USD-MATKL   = DATA+25(09).
    TG_ESTOQUE_MC_5_USD-WERKS   = DATA+34(04).
    TG_ESTOQUE_MC_5_USD-LGORT   = DATA+38(04).
    TG_ESTOQUE_MC_5_USD-MBWBEST = DATA+45(17).
    TG_ESTOQUE_MC_5_USD-BASME   = DATA+62(03).
    TG_ESTOQUE_MC_5_USD-WBWBEST = DATA+68(17).
    TG_ESTOQUE_MC_5_USD-HWAER   = DATA+85(05).

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = TG_ESTOQUE_MC_5_USD-MATNR
      IMPORTING
        OUTPUT = TG_ESTOQUE_MC_5_USD-MATNR.

    IF ( TG_ESTOQUE_MC_5_USD-LGORT NOT IN P_LGORT ) AND ( TG_ESTOQUE_MC_5_USD-LGORT IS NOT INITIAL ).
      CONTINUE.
    ENDIF.

    IF TG_ESTOQUE_MC_5_USD-SPMON NE _SPMON.
      CONTINUE.
    ENDIF.

    APPEND TG_ESTOQUE_MC_5_USD.
  ENDLOOP.


  DELETE TG_ESTOQUE_MC_5 WHERE WERKS IS INITIAL.

  IF TG_ESTOQUE_MC_5[] IS INITIAL.
    MESSAGE 'Nenhum movimento encontrado!' TYPE 'S'.
    STOP.
  ENDIF.

  "Seleção de Centros
  SELECT *
    FROM T001W INTO TABLE TG_T001W
     FOR ALL ENTRIES IN TG_ESTOQUE_MC_5
   WHERE WERKS = TG_ESTOQUE_MC_5-WERKS.

  "Seleção de Depositos
  SELECT *
    FROM T001L INTO TABLE TG_T001L
     FOR ALL ENTRIES IN TG_ESTOQUE_MC_5
   WHERE WERKS = TG_ESTOQUE_MC_5-WERKS
     AND LGORT = TG_ESTOQUE_MC_5-LGORT.

  IF TG_ZSDT_DEPARA_DEPO[] IS NOT INITIAL.
    SELECT *
      FROM LFA1 APPENDING TABLE TG_LFA1
       FOR ALL ENTRIES IN TG_ZSDT_DEPARA_DEPO
     WHERE LIFNR = TG_ZSDT_DEPARA_DEPO-LIFNR.
  ENDIF.

  "Desmembramento por Fornecedor para registros sem depósito.
  TG_ESTOQUE_MC_5_AUX[] = TG_ESTOQUE_MC_5[].
  DELETE TG_ESTOQUE_MC_5_AUX WHERE LGORT IS NOT INITIAL.

  IF TG_ESTOQUE_MC_5_AUX[] IS NOT INITIAL.
    SELECT *
      FROM MSLB AS A INTO CORRESPONDING FIELDS OF TABLE TG_MSLB
       FOR ALL ENTRIES IN TG_ESTOQUE_MC_5_AUX
     WHERE A~MATNR = TG_ESTOQUE_MC_5_AUX-MATNR
       AND A~WERKS = TG_ESTOQUE_MC_5_AUX-WERKS.

*    SELECT *
*      FROM MSLBH APPENDING CORRESPONDING FIELDS OF TABLE TG_MSLB
*       FOR ALL ENTRIES IN TG_ESTOQUE_MC_5_AUX
*     WHERE MATNR = TG_ESTOQUE_MC_5_AUX-MATNR
*       AND WERKS = TG_ESTOQUE_MC_5_AUX-WERKS.

    LOOP AT TG_MSLB ASSIGNING FIELD-SYMBOL(<FS_MSLB>).
      <FS_MSLB>-AAMM = <FS_MSLB>-LFGJA && <FS_MSLB>-LFMON.
    ENDLOOP.

    DELETE TG_MSLB WHERE AAMM > P_DTBASE-LOW(6).

    SORT                            TG_MSLB        BY MATNR WERKS SOBKZ LIFNR AAMM DESCENDING.
*    DELETE ADJACENT DUPLICATES FROM TG_MSLB COMPARING MATNR WERKS SOBKZ LIFNR.
  ENDIF.

  IF TG_MSLB[] IS NOT INITIAL.

    TG_MSLB_GRP[] = TG_MSLB[].
    SORT TG_MSLB_GRP BY MATNR WERKS LIFNR.
    DELETE ADJACENT DUPLICATES FROM TG_MSLB_GRP COMPARING MATNR WERKS LIFNR.

    SELECT *
      FROM LFA1 APPENDING TABLE TG_LFA1
       FOR ALL ENTRIES IN TG_MSLB_GRP
     WHERE LIFNR = TG_MSLB_GRP-LIFNR.

    LOOP AT TG_MSLB_GRP.
      CLEAR: TG_MSLB_GRP-LBLAB, TG_ESTOQUE_MC_5_AUX.

      LOOP AT TG_MSLB WHERE MATNR = TG_MSLB_GRP-MATNR
                        AND WERKS = TG_MSLB_GRP-WERKS
                        AND LIFNR = TG_MSLB_GRP-LIFNR.
        ADD TG_MSLB-LBLAB TO TG_MSLB_GRP-LBLAB.
      ENDLOOP.

      READ TABLE TG_ESTOQUE_MC_5_AUX WITH KEY MATNR = TG_MSLB_GRP-MATNR
                                              WERKS = TG_MSLB_GRP-WERKS.
      IF ( SY-SUBRC EQ 0                              ) AND
         ( TG_ESTOQUE_MC_5_AUX-WBWBEST IS NOT INITIAL ) AND
         ( TG_ESTOQUE_MC_5_AUX-MBWBEST IS NOT INITIAL ).
        CLEAR: ZNETPR.
        ZNETPR = ABS( TG_ESTOQUE_MC_5_AUX-WBWBEST ) / ABS( TG_ESTOQUE_MC_5_AUX-MBWBEST ).


        CALL FUNCTION 'MURC_ROUND_FLOAT_TO_PACKED'
          EXPORTING
            IF_FLOAT  = ZNETPR
          IMPORTING
            EF_PACKED = TG_MSLB_GRP-NETPR "
          EXCEPTIONS
            OVERFLOW  = 1
            OTHERS    = 2.
      ENDIF.

      TG_MSLB_GRP-MATKL  = TG_ESTOQUE_MC_5_AUX-MATKL.
      TG_MSLB_GRP-SPMON  = TG_ESTOQUE_MC_5_AUX-SPMON.

      MODIFY TG_MSLB_GRP.
    ENDLOOP.
  ENDIF.

  "Adicionar linhas por Fornecedor
  LOOP AT TG_MSLB_GRP.
    CLEAR: TG_ESTOQUE_MC_5.
    TG_ESTOQUE_MC_5-DESMEMB = 'X'.
    TG_ESTOQUE_MC_5-WERKS   = TG_MSLB_GRP-WERKS.
    TG_ESTOQUE_MC_5-LIFNR   = TG_MSLB_GRP-LIFNR.
    TG_ESTOQUE_MC_5-MATNR   = TG_MSLB_GRP-MATNR.
    TG_ESTOQUE_MC_5-MATKL   = TG_MSLB_GRP-MATKL.
    TG_ESTOQUE_MC_5-MBWBEST = TG_MSLB_GRP-LBLAB.
    TG_ESTOQUE_MC_5-WBWBEST = TG_MSLB_GRP-NETPR * TG_ESTOQUE_MC_5-MBWBEST.
    APPEND TG_ESTOQUE_MC_5.
  ENDLOOP.

  "Adicionar Linhas Estoque Armazenagem - Ini
  IF TG_ESTOQUE_MB51[] IS NOT INITIAL.

    DELETE TG_ESTOQUE_MB51 WHERE LIFNR IS INITIAL.
    DELETE TG_ESTOQUE_MB51 WHERE LGORT NOT IN P_LGORT.

    TG_ESTOQUE_MB51_GRP[] = TG_ESTOQUE_MB51[].
    SORT TG_ESTOQUE_MB51_GRP BY MATNR WERKS LGORT LIFNR.
    DELETE ADJACENT DUPLICATES FROM TG_ESTOQUE_MB51_GRP COMPARING MATNR WERKS LGORT LIFNR.

    SELECT *
      FROM LFA1 APPENDING TABLE TG_LFA1
       FOR ALL ENTRIES IN TG_ESTOQUE_MB51_GRP
     WHERE LIFNR = TG_ESTOQUE_MB51_GRP-LIFNR.

    LOOP AT TG_ESTOQUE_MB51_GRP.
      CLEAR: TG_ESTOQUE_MB51_GRP-MENGE, TG_ESTOQUE_MB51_GRP-DMBTR, TG_ESTOQUE_MB51_GRP-NETPR, TG_ESTOQUE_MB51_GRP-MATKL.

      LOOP AT TG_ESTOQUE_MB51 WHERE MATNR = TG_ESTOQUE_MB51_GRP-MATNR
                                AND WERKS = TG_ESTOQUE_MB51_GRP-WERKS
                                AND LGORT = TG_ESTOQUE_MB51_GRP-LGORT
                                AND LIFNR = TG_ESTOQUE_MB51_GRP-LIFNR.
        ADD TG_ESTOQUE_MB51-MENGE TO TG_ESTOQUE_MB51_GRP-MENGE.
        ADD TG_ESTOQUE_MB51-DMBTR TO TG_ESTOQUE_MB51_GRP-DMBTR.
      ENDLOOP.

      IF TG_ESTOQUE_MB51_GRP-MENGE NE 0.
        TG_ESTOQUE_MB51_GRP-NETPR = ABS( TG_ESTOQUE_MB51_GRP-DMBTR ) / ABS( TG_ESTOQUE_MB51_GRP-MENGE ).
      ENDIF.

      READ TABLE TG_MARA WITH KEY MATNR = TG_ESTOQUE_MB51_GRP-MATNR.
      IF SY-SUBRC EQ 0.
        TG_ESTOQUE_MB51_GRP-MATKL = TG_MARA-MATKL.
      ENDIF.

      MODIFY TG_ESTOQUE_MB51_GRP.
    ENDLOOP.

    LOOP AT TG_ESTOQUE_MB51_GRP.
      CLEAR: TG_ESTOQUE_MC_5.
      TG_ESTOQUE_MC_5-ARMAZENAGEM = 'X'.
      TG_ESTOQUE_MC_5-WERKS       = TG_ESTOQUE_MB51_GRP-WERKS.
      TG_ESTOQUE_MC_5-LIFNR       = TG_ESTOQUE_MB51_GRP-LIFNR.
      TG_ESTOQUE_MC_5-MATNR       = TG_ESTOQUE_MB51_GRP-MATNR.
      TG_ESTOQUE_MC_5-MATKL       = TG_ESTOQUE_MB51_GRP-MATKL.
      TG_ESTOQUE_MC_5-MBWBEST     = TG_ESTOQUE_MB51_GRP-MENGE.
*---> 09/06/2023 - Migração S4 - JS
*      TG_ESTOQUE_MC_5-WBWBEST     = TG_ESTOQUE_MB51_GRP-DMBTR.
      TG_ESTOQUE_MC_5-WBWBEST = CONV #( TG_ESTOQUE_MB51_GRP-DMBTR ).
*<--- 09/06/2023 - Migração S4 - JS

      TG_ESTOQUE_MC_5-LGORT       = TG_ESTOQUE_MB51_GRP-LGORT.
      APPEND TG_ESTOQUE_MC_5.
    ENDLOOP.

  ENDIF.
  "Adicionar Linhas Estoque Armazenagem - Fim

  "Remove Registros sem deposito que foram desmembrados,
  DELETE TG_ESTOQUE_MC_5 WHERE LGORT   IS INITIAL
                           AND DESMEMB IS INITIAL.

  IF _ARMAZENAGEM EQ ABAP_TRUE.
    DELETE TG_ESTOQUE_MC_5 WHERE ( LGORT       IS INITIAL ) OR
                                 ( ARMAZENAGEM IS INITIAL ) OR
                                 ( LIFNR       IS INITIAL ).
  ENDIF.


*------------------------------------------------------------------------------*
* Selecionar Dados MC.5 USD
*------------------------------------------------------------------------------*

  DELETE TG_ESTOQUE_MC_5_USD WHERE WERKS IS INITIAL.

*  IF TG_ESTOQUE_MC_5_USD[] IS INITIAL.
*    MESSAGE 'Nenhum movimento encontrado!' TYPE 'S'.
*    STOP.
*  ENDIF.

  "Seleção de Centros
  SELECT *
    FROM T001W INTO TABLE TG_T001W
     FOR ALL ENTRIES IN TG_ESTOQUE_MC_5_USD
   WHERE WERKS = TG_ESTOQUE_MC_5_USD-WERKS.

  "Seleção de Depositos
  SELECT *
    FROM T001L INTO TABLE TG_T001L
     FOR ALL ENTRIES IN TG_ESTOQUE_MC_5_USD
   WHERE WERKS = TG_ESTOQUE_MC_5_USD-WERKS
     AND LGORT = TG_ESTOQUE_MC_5_USD-LGORT.

  IF TG_ZSDT_DEPARA_DEPO[] IS NOT INITIAL.
    SELECT *
      FROM LFA1 APPENDING TABLE TG_LFA1
       FOR ALL ENTRIES IN TG_ZSDT_DEPARA_DEPO
     WHERE LIFNR = TG_ZSDT_DEPARA_DEPO-LIFNR.
  ENDIF.

  "Desmembramento por Fornecedor para registros sem depósito.
  TG_ESTOQUE_MC_5_USD_AUX[] = TG_ESTOQUE_MC_5_USD[].
  DELETE TG_ESTOQUE_MC_5_USD_AUX WHERE LGORT IS NOT INITIAL.

  IF TG_ESTOQUE_MC_5_USD_AUX[] IS NOT INITIAL.
    SELECT *
      FROM MSLB AS A INTO CORRESPONDING FIELDS OF TABLE TG_MSLB
       FOR ALL ENTRIES IN TG_ESTOQUE_MC_5_USD_AUX
     WHERE A~MATNR = TG_ESTOQUE_MC_5_USD_AUX-MATNR
       AND A~WERKS = TG_ESTOQUE_MC_5_USD_AUX-WERKS.

*    SELECT *
*      FROM MSLBH APPENDING CORRESPONDING FIELDS OF TABLE TG_MSLB
*       FOR ALL ENTRIES IN TG_ESTOQUE_MC_5_USD_AUX
*     WHERE MATNR = TG_ESTOQUE_MC_5_USD_AUX-MATNR
*       AND WERKS = TG_ESTOQUE_MC_5_USD_AUX-WERKS.

    LOOP AT TG_MSLB ASSIGNING <FS_MSLB>.
      <FS_MSLB>-AAMM = <FS_MSLB>-LFGJA && <FS_MSLB>-LFMON.
    ENDLOOP.

    DELETE TG_MSLB WHERE AAMM > P_DTBASE-LOW(6).

    SORT                            TG_MSLB        BY MATNR WERKS SOBKZ LIFNR AAMM DESCENDING.
*    DELETE ADJACENT DUPLICATES FROM TG_MSLB COMPARING MATNR WERKS SOBKZ LIFNR.
  ENDIF.

  IF TG_MSLB[] IS NOT INITIAL.

    TG_MSLB_GRP[] = TG_MSLB[].
    SORT TG_MSLB_GRP BY MATNR WERKS LIFNR.
    DELETE ADJACENT DUPLICATES FROM TG_MSLB_GRP COMPARING MATNR WERKS LIFNR.

    SELECT *
      FROM LFA1 APPENDING TABLE TG_LFA1
       FOR ALL ENTRIES IN TG_MSLB_GRP
     WHERE LIFNR = TG_MSLB_GRP-LIFNR.

    LOOP AT TG_MSLB_GRP.
      CLEAR: TG_MSLB_GRP-LBLAB, TG_ESTOQUE_MC_5_USD_AUX.

      LOOP AT TG_MSLB WHERE MATNR = TG_MSLB_GRP-MATNR
                        AND WERKS = TG_MSLB_GRP-WERKS
                        AND LIFNR = TG_MSLB_GRP-LIFNR.
        ADD TG_MSLB-LBLAB TO TG_MSLB_GRP-LBLAB.
      ENDLOOP.

      READ TABLE TG_ESTOQUE_MC_5_USD_AUX WITH KEY MATNR = TG_MSLB_GRP-MATNR
                                              WERKS = TG_MSLB_GRP-WERKS.
      IF ( SY-SUBRC EQ 0                              ) AND
         ( TG_ESTOQUE_MC_5_USD_AUX-WBWBEST IS NOT INITIAL ) AND
         ( TG_ESTOQUE_MC_5_USD_AUX-MBWBEST IS NOT INITIAL ).
        CLEAR: ZNETPR.
        ZNETPR = ABS( TG_ESTOQUE_MC_5_USD_AUX-WBWBEST ) / ABS( TG_ESTOQUE_MC_5_USD_AUX-MBWBEST ).

        CALL FUNCTION 'MURC_ROUND_FLOAT_TO_PACKED'
          EXPORTING
            IF_FLOAT  = ZNETPR
          IMPORTING
            EF_PACKED = TG_MSLB_GRP-NETPR "
          EXCEPTIONS
            OVERFLOW  = 1
            OTHERS    = 2.

      ENDIF.

      TG_MSLB_GRP-MATKL  = TG_ESTOQUE_MC_5_USD_AUX-MATKL.
      TG_MSLB_GRP-SPMON  = TG_ESTOQUE_MC_5_USD_AUX-SPMON.

      MODIFY TG_MSLB_GRP.
    ENDLOOP.
  ENDIF.

  "Adicionar linhas por Fornecedor
  LOOP AT TG_MSLB_GRP.
    CLEAR: TG_ESTOQUE_MC_5_USD.
    TG_ESTOQUE_MC_5_USD-DESMEMB = 'X'.
    TG_ESTOQUE_MC_5_USD-WERKS   = TG_MSLB_GRP-WERKS.
    TG_ESTOQUE_MC_5_USD-LIFNR   = TG_MSLB_GRP-LIFNR.
    TG_ESTOQUE_MC_5_USD-MATNR   = TG_MSLB_GRP-MATNR.
    TG_ESTOQUE_MC_5_USD-MATKL   = TG_MSLB_GRP-MATKL.
    TG_ESTOQUE_MC_5_USD-MBWBEST = TG_MSLB_GRP-LBLAB.
    TG_ESTOQUE_MC_5_USD-WBWBEST = TG_MSLB_GRP-NETPR * TG_ESTOQUE_MC_5_USD-MBWBEST.
    APPEND TG_ESTOQUE_MC_5_USD.
  ENDLOOP.

  "Adicionar Linhas Estoque Armazenagem - Ini
  IF TG_ESTOQUE_MB51[] IS NOT INITIAL.

    DELETE TG_ESTOQUE_MB51 WHERE LIFNR IS INITIAL.
    DELETE TG_ESTOQUE_MB51 WHERE LGORT NOT IN P_LGORT.

    TG_ESTOQUE_MB51_GRP[] = TG_ESTOQUE_MB51[].
    SORT TG_ESTOQUE_MB51_GRP BY MATNR WERKS LGORT LIFNR.
    DELETE ADJACENT DUPLICATES FROM TG_ESTOQUE_MB51_GRP COMPARING MATNR WERKS LGORT LIFNR.

    SELECT *
      FROM LFA1 APPENDING TABLE TG_LFA1
       FOR ALL ENTRIES IN TG_ESTOQUE_MB51_GRP
     WHERE LIFNR = TG_ESTOQUE_MB51_GRP-LIFNR.

    LOOP AT TG_ESTOQUE_MB51_GRP.
      CLEAR: TG_ESTOQUE_MB51_GRP-MENGE, TG_ESTOQUE_MB51_GRP-DMBTR, TG_ESTOQUE_MB51_GRP-NETPR, TG_ESTOQUE_MB51_GRP-MATKL.

      LOOP AT TG_ESTOQUE_MB51 WHERE MATNR = TG_ESTOQUE_MB51_GRP-MATNR
                                AND WERKS = TG_ESTOQUE_MB51_GRP-WERKS
                                AND LGORT = TG_ESTOQUE_MB51_GRP-LGORT
                                AND LIFNR = TG_ESTOQUE_MB51_GRP-LIFNR.
        ADD TG_ESTOQUE_MB51-MENGE TO TG_ESTOQUE_MB51_GRP-MENGE.
        ADD TG_ESTOQUE_MB51-DMBTR TO TG_ESTOQUE_MB51_GRP-DMBTR.
      ENDLOOP.

      IF TG_ESTOQUE_MB51_GRP-MENGE NE 0.
        TG_ESTOQUE_MB51_GRP-NETPR = ABS( TG_ESTOQUE_MB51_GRP-DMBTR ) / ABS( TG_ESTOQUE_MB51_GRP-MENGE ).
      ENDIF.

      READ TABLE TG_MARA WITH KEY MATNR = TG_ESTOQUE_MB51_GRP-MATNR.
      IF SY-SUBRC EQ 0.
        TG_ESTOQUE_MB51_GRP-MATKL = TG_MARA-MATKL.
      ENDIF.

      MODIFY TG_ESTOQUE_MB51_GRP.
    ENDLOOP.

    LOOP AT TG_ESTOQUE_MB51_GRP.
      CLEAR: TG_ESTOQUE_MC_5_USD.
      TG_ESTOQUE_MC_5_USD-ARMAZENAGEM = 'X'.
      TG_ESTOQUE_MC_5_USD-WERKS       = TG_ESTOQUE_MB51_GRP-WERKS.
      TG_ESTOQUE_MC_5_USD-LIFNR       = TG_ESTOQUE_MB51_GRP-LIFNR.
      TG_ESTOQUE_MC_5_USD-MATNR       = TG_ESTOQUE_MB51_GRP-MATNR.
      TG_ESTOQUE_MC_5_USD-MATKL       = TG_ESTOQUE_MB51_GRP-MATKL.
      TG_ESTOQUE_MC_5_USD-MBWBEST     = TG_ESTOQUE_MB51_GRP-MENGE.
*---> 09/06/2023 - Migração S4 - JS
*        TG_ESTOQUE_MC_5_USD-WBWBEST     = TG_ESTOQUE_MB51_GRP-DMBTR.
      TG_ESTOQUE_MC_5_USD-WBWBEST = CONV #( TG_ESTOQUE_MB51_GRP-DMBTR ).
*<--- 09/06/2023 - Migração S4 - JS

      TG_ESTOQUE_MC_5_USD-LGORT       = TG_ESTOQUE_MB51_GRP-LGORT.
      APPEND TG_ESTOQUE_MC_5_USD.
    ENDLOOP.

  ENDIF.
  "Adicionar Linhas Estoque Armazenagem - Fim

  "Remove Registros sem deposito que foram desmembrados,
  DELETE TG_ESTOQUE_MC_5_USD WHERE LGORT   IS INITIAL
                           AND DESMEMB IS INITIAL.

  IF _ARMAZENAGEM EQ ABAP_TRUE.
    DELETE TG_ESTOQUE_MC_5_USD WHERE ( LGORT       IS INITIAL ) OR
                                 ( ARMAZENAGEM IS INITIAL ) OR
                                 ( LIFNR       IS INITIAL ).
  ENDIF.


ENDFORM.

FORM F_PROCESSA_DADOS .

  DATA: ZNETPR TYPE F.

  LOOP AT TG_ESTOQUE_MC_5.

    CLEAR: WA_SAIDA_0100, TG_ZSDT_DEPARA_CEN, TG_ZSDT_DEPARA_DEPO, TG_LFA1, TG_T001W, TG_T001L.

    WA_SAIDA_0100-MBWBEST     = TG_ESTOQUE_MC_5-MBWBEST.
    WA_SAIDA_0100-WBWBEST     = TG_ESTOQUE_MC_5-WBWBEST.

*    IF ( WA_SAIDA_0100-WBWBEST IS INITIAL     ) AND "Não tem Valor
*       ( WA_SAIDA_0100-MBWBEST IS NOT INITIAL ) AND "Tem Quantidade.
*       ( WA_SAIDA_0100-NETPR   IS NOT INITIAL ).    "Tem preço Unitario
*      WA_SAIDA_0100-WBWBEST = WA_SAIDA_0100-MBWBEST * WA_SAIDA_0100-NETPR.
*    ENDIF.

    READ TABLE TG_T001W WITH KEY WERKS = TG_ESTOQUE_MC_5-WERKS.
    CHECK SY-SUBRC = 0.

    IF TG_ESTOQUE_MC_5-LGORT IS NOT INITIAL.
      READ TABLE TG_T001L WITH KEY WERKS = TG_ESTOQUE_MC_5-WERKS
                                   LGORT = TG_ESTOQUE_MC_5-LGORT.
    ENDIF.

    READ TABLE TG_ZSDT_DEPARA_CEN WITH KEY CENTROV_1 = TG_ESTOQUE_MC_5-WERKS.
    IF ( SY-SUBRC = 0 ) AND ( TG_ESTOQUE_MC_5-LGORT IS NOT INITIAL ).
      LOOP AT TG_ZSDT_DEPARA_DEPO WHERE WERKS_V  = TG_ZSDT_DEPARA_CEN-CENTROV_1
                                    AND WERKS    = TG_ZSDT_DEPARA_CEN-CENTRO_REAL
                                    AND ( OPERACAO EQ 'RF' OR
                                          OPERACAO EQ 'RI' )
                                    AND ( LGORT   EQ TG_ESTOQUE_MC_5-LGORT OR
                                          LGORT_T EQ TG_ESTOQUE_MC_5-LGORT ).
        IF TG_ZSDT_DEPARA_DEPO-WERKS_V IS NOT INITIAL AND
           TG_ZSDT_DEPARA_DEPO-LIFNR   IS NOT INITIAL.
          READ TABLE TG_LFA1 WITH KEY LIFNR = TG_ZSDT_DEPARA_DEPO-LIFNR.
        ENDIF.
      ENDLOOP.

*      READ TABLE TG_ZSDT_DEPARA_DEPO WITH KEY WERKS_V  = TG_ZSDT_DEPARA_CEN-CENTROV_1
*                                              WERKS    = TG_ZSDT_DEPARA_CEN-CENTRO_REAL
*                                              LGORT    = TG_ESTOQUE_MC_5-LGORT
*                                              OPERACAO = 'RF'.
*      IF SY-SUBRC NE 0.
*        READ TABLE TG_ZSDT_DEPARA_DEPO WITH KEY WERKS_V = TG_ZSDT_DEPARA_CEN-CENTROV_1
*                                                WERKS   = TG_ZSDT_DEPARA_CEN-CENTRO_REAL
*                                                LGORT_T = TG_ESTOQUE_MC_5-LGORT
*                                                OPERACAO   = 'RF'.
*      ENDIF.

*      IF SY-SUBRC IS INITIAL AND
*         TG_ZSDT_DEPARA_DEPO-WERKS_V IS NOT INITIAL AND
*         TG_ZSDT_DEPARA_DEPO-LIFNR   IS NOT INITIAL.
*        READ TABLE TG_LFA1 WITH KEY LIFNR = TG_ZSDT_DEPARA_DEPO-LIFNR.
*      ENDIF.

    ENDIF.

    IF TG_ESTOQUE_MC_5-LIFNR IS NOT INITIAL.
      READ TABLE TG_LFA1 WITH KEY LIFNR = TG_ESTOQUE_MC_5-LIFNR.
    ENDIF.

    IF TG_ZSDT_DEPARA_CEN-CENTRO_REAL IS NOT INITIAL.
      WA_SAIDA_0100-BRANCH    = TG_ZSDT_DEPARA_CEN-CENTRO_REAL.
    ELSE.
      WA_SAIDA_0100-BRANCH    = TG_ESTOQUE_MC_5-WERKS.
    ENDIF.

    WA_SAIDA_0100-WERKS       = TG_ESTOQUE_MC_5-WERKS.
    WA_SAIDA_0100-MATNR       = TG_ESTOQUE_MC_5-MATNR.
    WA_SAIDA_0100-MATKL       = TG_ESTOQUE_MC_5-MATKL.
    WA_SAIDA_0100-DS_CENTRO   = TG_T001W-NAME1.
    WA_SAIDA_0100-LGORT       = TG_ESTOQUE_MC_5-LGORT.
    WA_SAIDA_0100-LGOBE       = TG_T001L-LGOBE.
    WA_SAIDA_0100-LIFNR       = TG_LFA1-LIFNR.
    WA_SAIDA_0100-DS_FORN     = TG_LFA1-NAME1.

    WA_SAIDA_0100-CLASS = COND #( WHEN TG_ESTOQUE_MC_5-LGORT(2) EQ 'PO' THEN 'Porto' ELSE 'Filial' ).
*    IF TG_ZSDT_DEPARA_DEPO-LIFNR IS NOT INITIAL.
*      WA_SAIDA_0100-CLASS     = 'Porto'.
*    ELSE.
*      WA_SAIDA_0100-CLASS     = 'Filial'.
*    ENDIF.

    IF TG_ESTOQUE_MC_5-DESMEMB IS NOT INITIAL.
      WA_SAIDA_0100-CLASS     = 'Em poder de Terceiros'.
*      WA_SAIDA_0100-CLASS     = 'Filial/Estoque Terceiros'.
    ENDIF.

    IF TG_ESTOQUE_MC_5-ARMAZENAGEM IS NOT INITIAL.
      WA_SAIDA_0100-CLASS     = 'Filial/Armazenagem Terceiros'.
    ENDIF.

    IF WA_SAIDA_0100-MBWBEST NE 0.
      CLEAR: ZNETPR.
      ZNETPR = ABS( WA_SAIDA_0100-WBWBEST ) / ABS( WA_SAIDA_0100-MBWBEST ).

      CALL FUNCTION 'MURC_ROUND_FLOAT_TO_PACKED'
        EXPORTING
          IF_FLOAT  = ZNETPR
        IMPORTING
          EF_PACKED = WA_SAIDA_0100-NETPR
        EXCEPTIONS
          OVERFLOW  = 1
          OTHERS    = 2.
    ENDIF.


*    READ TABLE TG_ENTRADA_ZCO0016 WITH KEY MATNR = TG_ESTOQUE_MC_5-MATNR
*                                           BWKEY = WA_SAIDA_0100-WERKS
*                                           GSBER = WA_SAIDA_0100-BRANCH.
*    IF SY-SUBRC = 0.
*      WA_SAIDA_0100-VLR_USD      = TG_ENTRADA_ZCO0016-SALK3_U.
*
*      IF WA_SAIDA_0100-MBWBEST = 0.
*        WA_SAIDA_0100-VLR_UNT_USD = 0.
*      ELSE.
*        WA_SAIDA_0100-VLR_UNT_USD  = (  WA_SAIDA_0100-MBWBEST  /  TG_ENTRADA_ZCO0016-SALK3_U ).
*      ENDIF.
*    ENDIF.

    READ TABLE TG_ENTRADA_ZCO0016 WITH KEY  WERKS = TG_ESTOQUE_MC_5-WERKS.
    IF SY-SUBRC IS INITIAL.
      TRY .
          VL_UNI_USD = TG_ENTRADA_ZCO0016-SALK3 / TG_ENTRADA_ZCO0016-SALK3_U.
          WA_SAIDA_0100-VLR_USD     = WA_SAIDA_0100-WBWBEST / VL_UNI_USD.
          WA_SAIDA_0100-VLR_UNT_USD = VL_UNI_USD.
        CATCH CX_SY_ZERODIVIDE.
          WA_SAIDA_0100-VLR_USD = 0.
          WA_SAIDA_0100-VLR_UNT_USD = 0.

*STEFANINI - FI - 2000051417 - IR252959 - Ajuste DUMP Transação ZFIS47 - Inicio - 11/08/2025
        CATCH CX_SY_ARITHMETIC_OVERFLOW.
          WA_SAIDA_0100-VLR_USD = 0.
          WA_SAIDA_0100-VLR_UNT_USD = 0.
*STEFANINI - FI - 2000051417 - IR252959 - Ajuste DUMP Transação ZFIS47 - Fim - 11/08/2025
      ENDTRY.

    ENDIF.

*    READ TABLE TG_ESTOQUE_MC_5_USD WITH KEY LIFNR = TG_ESTOQUE_MC_5-LIFNR
*                                            SPMON = TG_ESTOQUE_MC_5-SPMON
*                                            WERKS = TG_ESTOQUE_MC_5-WERKS
*                                            MATNR = TG_ESTOQUE_MC_5-MATNR
*                                            LGORT = TG_ESTOQUE_MC_5-LGORT
*                                            MATKL = TG_ESTOQUE_MC_5-MATKL.
*
*    IF SY-SUBRC IS INITIAL.
*      WA_SAIDA_0100-VLR_USD      = TG_ESTOQUE_MC_5_USD-WBWBEST.
**
*      IF WA_SAIDA_0100-MBWBEST = 0.
*        WA_SAIDA_0100-VLR_UNT_USD = 0.
*      ELSE.
*        WA_SAIDA_0100-VLR_UNT_USD  = (  WA_SAIDA_0100-MBWBEST  /  TG_ESTOQUE_MC_5_USD-WBWBEST ).
*      ENDIF.
*    ENDIF.

    APPEND WA_SAIDA_0100 TO IT_SAIDA_0100.

  ENDLOOP.

  SORT IT_SAIDA_0100.

  DELETE IT_SAIDA_0100 WHERE WERKS NOT IN R_WERKS.

  IF P_LIFNR[] IS NOT INITIAL.
    DELETE IT_SAIDA_0100 WHERE LIFNR NOT IN P_LIFNR.
  ENDIF.

ENDFORM.

FORM F_PREPARE_RUN_TIME_INFO.

  IF <LT_DATA> IS ASSIGNED.
    CLEAR: <LT_DATA>[].
  ENDIF.

  IF <LT_DATA_LINE> IS ASSIGNED.
    CLEAR: <LT_DATA_LINE>[].
  ENDIF.

  IF <LS_DATA> IS ASSIGNED .
    CLEAR: <LS_DATA>.
  ENDIF.

  IF <LS_DATA_LINE> IS ASSIGNED .
    CLEAR: <LS_DATA_LINE>.
  ENDIF.

  FREE: LR_DATA, LR_DATA_LINE, LR_DATA_DESCR, LR_DATA_LINE_DESCR.

  CL_SALV_BS_RUNTIME_INFO=>SET( EXPORTING DISPLAY  = ABAP_FALSE
                                          METADATA = ABAP_FALSE
                                          DATA     = ABAP_TRUE ).

ENDFORM.

FORM F_GET_RUNTIME_INFO.

  TRY.
      CL_SALV_BS_RUNTIME_INFO=>GET_DATA_REF(
          IMPORTING R_DATA_DESCR      = LR_DATA_DESCR
                    R_DATA_LINE_DESCR = LR_DATA_LINE_DESCR ).

      CHECK ( LR_DATA_DESCR IS NOT INITIAL ) OR ( LR_DATA_LINE_DESCR IS NOT INITIAL ).

      CREATE DATA LR_DATA      TYPE HANDLE LR_DATA_DESCR.
      CREATE DATA LR_DATA_LINE TYPE HANDLE LR_DATA_LINE_DESCR.

      ASSIGN LR_DATA->*      TO <LT_DATA>.
      ASSIGN LR_DATA_LINE->* TO <LT_DATA_LINE>.

      CL_SALV_BS_RUNTIME_INFO=>GET_DATA( IMPORTING T_DATA      = <LT_DATA>
                                                   T_DATA_LINE = <LT_DATA_LINE> ).

    CATCH CX_SALV_BS_SC_RUNTIME_INFO.
  ENDTRY.

  CL_SALV_BS_RUNTIME_INFO=>CLEAR_ALL( ).

  ASSIGN LR_DATA->*      TO <LS_DATA>.
  ASSIGN LR_DATA_LINE->* TO <LS_DATA_LINE>.


ENDFORM.


FORM BUSCA_DADOS_ZCO0016.

  DATA: IT_RSPARAMS TYPE TABLE OF RSPARAMS,
        WA_RSPARAMS TYPE RSPARAMS.

  CLEAR: IT_RSPARAMS[].

  "material
  IF TG_MARA[] IS NOT INITIAL.
    LOOP AT TG_MARA INTO DATA(WA_MARA).
      "MATERIAL
      WA_RSPARAMS-SELNAME = 'R_MATNR'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = 'EQ'.
      WA_RSPARAMS-LOW     = WA_MARA-MATNR.
      APPEND WA_RSPARAMS TO IT_RSPARAMS.
    ENDLOOP.
  ELSE.
    WA_RSPARAMS-SELNAME = 'R_MATNR'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = 'EQ'.
    WA_RSPARAMS-LOW     = '000000000000119892'.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDIF.

  "CENTRO
  IF P_WERKS[] IS NOT INITIAL.
    LOOP AT P_WERKS INTO DATA(WA_WERKS).
      WA_RSPARAMS-SELNAME = 'S_WERKS'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = WA_WERKS-OPTION.
      WA_RSPARAMS-LOW     = WA_WERKS-LOW.
      APPEND WA_RSPARAMS TO IT_RSPARAMS.
    ENDLOOP.
  ENDIF.

  "DIVISAO
  IF P_BRANCH[] IS NOT INITIAL.
    LOOP AT P_BRANCH INTO DATA(WA_BRANCH).
      WA_RSPARAMS-SELNAME = 'S_GSBER'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = WA_BRANCH-OPTION.
      WA_RSPARAMS-LOW     = WA_BRANCH-LOW.
      WA_RSPARAMS-HIGH    = WA_BRANCH-HIGH.
      APPEND WA_RSPARAMS TO IT_RSPARAMS.
    ENDLOOP.
  ENDIF.

  LOOP AT P_MTART. " Tipo de Material
    CLEAR: WA_RSPARAMS.
    WA_RSPARAMS-SELNAME = 'SL_MTART'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = P_MTART-OPTION.
    WA_RSPARAMS-LOW     = P_MTART-LOW.
    WA_RSPARAMS-HIGH    = P_MTART-HIGH.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.

  LOOP AT P_BKLAS. "Classe de Avaliação
    CLEAR: WA_RSPARAMS.
    WA_RSPARAMS-SELNAME = 'SL_BKLAS'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = P_BKLAS-OPTION.
    WA_RSPARAMS-LOW     = P_BKLAS-LOW.
    WA_RSPARAMS-HIGH    = P_BKLAS-HIGH.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.


  WA_RSPARAMS-SELNAME = 'R_ST_D'.
  WA_RSPARAMS-KIND    = 'S'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = 'X'.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  "PERIODO
  WA_RSPARAMS-SELNAME = 'P_POPER'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = P_DTBASE-LOW+4(2).
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  "EXERCICIO
  WA_RSPARAMS-SELNAME = 'P_BDATJ'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = P_DTBASE-LOW(4).
  APPEND WA_RSPARAMS TO IT_RSPARAMS.


  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = SY-TABIX
      TEXT       = 'Extraindo dados em ZCO0016'.

  PERFORM F_PREPARE_RUN_TIME_INFO.

  SUBMIT ZCOR011 WITH SELECTION-TABLE IT_RSPARAMS
  AND RETURN.

  PERFORM F_GET_RUNTIME_INFO.

  IF <LT_DATA> IS ASSIGNED.
    LOOP AT <LT_DATA> ASSIGNING <LS_DATA>.
      CLEAR: TG_ENTRADA_ZCO0016.
      MOVE-CORRESPONDING <LS_DATA> TO TG_ENTRADA_ZCO0016.
      APPEND TG_ENTRADA_ZCO0016.
    ENDLOOP.
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MC5
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0995   text
*----------------------------------------------------------------------*
FORM MC5  USING    VALUE(P_MOEDA).


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  RMCB0200_
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_RSPARAMS  text
*----------------------------------------------------------------------*
FORM RMCB0200_  TABLES IT_RSPARAMS.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  POPULA_RANGE_WERKS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM POPULA_RANGE_WERKS.

  FREE R_WERKS.

  IF P_BRANCH[] IS NOT INITIAL.

    SELECT *
      FROM ZSDT_DEPARA_CEN
      INTO TABLE @DATA(IT_ZSDT_DEPARA_CEN)
        WHERE CENTRO_REAL IN @P_BRANCH.

    LOOP AT IT_ZSDT_DEPARA_CEN INTO DATA(WA_DEPARA_CEN).
      APPEND VALUE #( SIGN = 'I' OPTION = 'EQ' LOW = WA_DEPARA_CEN-CENTROV_1 ) TO R_WERKS.
    ENDLOOP.

  ENDIF.

  LOOP AT P_BRANCH.
    APPEND VALUE #( SIGN = 'I' OPTION = 'EQ' LOW = P_BRANCH-LOW  ) TO R_WERKS.
    APPEND VALUE #( SIGN = 'I' OPTION = 'EQ' LOW = P_BRANCH-HIGH ) TO R_WERKS.
  ENDLOOP.

  LOOP AT P_WERKS.
    APPEND VALUE #( SIGN = 'I' OPTION = 'EQ' LOW = P_WERKS-LOW  ) TO R_WERKS.
    APPEND VALUE #( SIGN = 'I' OPTION = 'EQ' LOW = P_WERKS-HIGH ) TO R_WERKS.
  ENDLOOP.

  SORT R_WERKS.
  DELETE ADJACENT DUPLICATES FROM R_WERKS COMPARING ALL FIELDS.

ENDFORM.
