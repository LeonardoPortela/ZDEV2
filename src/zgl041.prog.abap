*&---------------------------------------------------------------------*
*& Report  ZGL041
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZGL041.

TABLES: BSIS.


TYPES: BEGIN OF TY_SAIDA_LIQ,
         AUFNR     TYPE BSIS-AUFNR,
         TXT       TYPE COAS-KTEXT,
         XTDMBTR   TYPE BSIS-DMBTR,
         XTDMBE2   TYPE BSIS-DMBE2,
         KOSTL     TYPE BSIS-KOSTL,
         LTEXT     TYPE CSKT-LTEXT,
         KOSAR     TYPE CSKS-KOSAR,
         KTEXT     TYPE TKT05-KTEXT,
         XTCCDMBTR TYPE BSIS-DMBTR,
         XCCTDMBE2 TYPE BSIS-DMBE2,
       END OF TY_SAIDA_LIQ.


"RELATÓRIO ANALITICO - TIPO DE ORDEM
TYPES: BEGIN OF TY_SAIDA_AN,
         AUFNR TYPE  BSIS-AUFNR,
         TXT   TYPE  V_AUART-TXT,
         BELNR TYPE  BSIS-BELNR,
         BUDAT TYPE  BSIS-BUDAT,
         HKONT TYPE  BSIS-HKONT,
         DMBTR TYPE  BSIS-DMBTR,
         DMBE2 TYPE  BSIS-DMBE2,
         ZUONR TYPE  BSIS-ZUONR,
         XBLNR TYPE  BSIS-XBLNR,
         SGTXT TYPE  BSIS-SGTXT,
         KOSTL TYPE  BSIS-KOSTL,
         LTEXT TYPE  CSKT-LTEXT,
         KOSAR TYPE  CSKS-KOSAR,
         KTEXT TYPE  TKT05-KTEXT,
         GSBER TYPE  BSIS-GSBER,
       END OF TY_SAIDA_AN.


TYPES: BEGIN OF TY_BSIS,
         BUDAT TYPE BSIS-BUDAT,
         HKONT TYPE BSIS-HKONT,
         DMBTR TYPE BSIS-DMBTR,
         DMBE2 TYPE BSIS-DMBE2,
         SHKZG TYPE BSIS-SHKZG,
         ZUONR TYPE BSIS-ZUONR,
         XBLNR TYPE BSIS-XBLNR,
         SGTXT TYPE BSIS-SGTXT,
         KOSTL TYPE BSIS-KOSTL,
         BELNR TYPE BSIS-BELNR,
         BUKRS TYPE BSIS-BUKRS,
         GJAHR TYPE BSIS-GJAHR,
         MONAT TYPE BSIS-MONAT,
         AUFNR TYPE BSIS-AUFNR,
         GSBER TYPE BSIS-GEBER,
       END OF TY_BSIS.

TYPES: BEGIN OF TY_COAS,
         AUFNR TYPE  COAS-AUFNR,
         AUART TYPE COAS-AUART,
         KTEXT TYPE COAS-KTEXT,
       END OF TY_COAS.

TYPES: BEGIN OF TY_V_AUART,
         AUART TYPE V_AUART-AUART,
         TXT   TYPE V_AUART-TXT,
       END OF TY_V_AUART.

TYPES: BEGIN OF TY_CSKS,
         KOSTL TYPE CSKS-KOSTL,
         KOSAR TYPE CSKS-KOSAR,
       END OF TY_CSKS.

TYPES: BEGIN OF TY_CSKT,
         SPRAS TYPE CSKT-SPRAS,
         KOSTL TYPE CSKT-KOSTL,
         LTEXT TYPE CSKT-LTEXT,
       END OF TY_CSKT.

TYPES: BEGIN OF TY_TKA02,
         BUKRS TYPE TKA02-BUKRS,
         KOKRS TYPE TKA02-KOKRS,
       END OF TY_TKA02.

TYPES: BEGIN OF TY_COEP,
         KOKRS   TYPE COEP-KOKRS,
         PERIO   TYPE COEP-PERIO,
         GJAHR   TYPE COEP-GJAHR,
         BUKRS   TYPE COEP-BUKRS,
         WRTTP   TYPE COEP-WRTTP,
         OBJNR   TYPE COEP-OBJNR,
         VRGNG   TYPE COEP-VRGNG,
         BELNR   TYPE COEP-BELNR,
         KSTAR   TYPE COEP-KSTAR,
         WOGBTR  TYPE COEP-WOGBTR,
         WKGBTR  TYPE COEP-WKGBTR,
         SGTXT   TYPE COEP-SGTXT,
         PARGB   TYPE COEP-PARGB,
         V_OBJNR TYPE BSIS-AUFNR,
       END OF TY_COEP.

TYPES: BEGIN OF TY_COBK,
         KOKRS TYPE COBK-KOKRS,
         BELNR TYPE COBK-BELNR,
         GJAHR TYPE COBK-GJAHR,
         BUDAT TYPE COBK-BUDAT,
       END OF TY_COBK.

TYPES: BEGIN OF TY_TKT05,
         SPRAS TYPE TKT05-SPRAS,
         KOSAR TYPE TKT05-KOSAR,
         KTEXT TYPE TKT05-KTEXT,
       END OF TY_TKT05.

TYPES: BEGIN OF TY_T001,
         BUKRS TYPE T001-BUKRS,
         SPRAS TYPE T001-SPRAS,
       END OF TY_T001.

TYPES: BEGIN OF TY_AFKO,
         AUFPL TYPE AFKO-AUFPL,
         AUFNR TYPE AFKO-AUFNR,
       END OF TY_AFKO.

TYPES: BEGIN OF TY_AFVC,
         APLZL TYPE AFVC-APLZL,
         OBJNR TYPE AFVC-OBJNR,
         AUFPL TYPE AFKO-AUFPL,
       END OF TY_AFVC.

TYPES: BEGIN OF TY_SETLEAF,
         SETCLASS      TYPE SETLEAF-SETCLASS,
         SUBCLASS      TYPE SETLEAF-SUBCLASS,
         SETNAME       TYPE SETLEAF-SETNAME,
         LINEID        TYPE SETLEAF-LINEID,
         VALFROM       TYPE SETLEAF-VALFROM,
         COD_CLAS_NOT2 TYPE COAS-AUART,
       END OF TY_SETLEAF.

TYPES: BEGIN OF TY_BSIS_AUX,
         AUFNR TYPE BSIS-AUFNR,
       END OF TY_BSIS_AUX.

TYPES: BEGIN OF TY_SKA1,
         SAKNR TYPE SKA1-SAKNR,
       END OF TY_SKA1.

TYPES: BEGIN OF TY_ESTRUTURA. "background
         INCLUDE TYPE SLIS_FIELDCAT_MAIN.
         INCLUDE TYPE SLIS_FIELDCAT_ALV_SPEC.
       TYPES: END OF TY_ESTRUTURA.

* Início - Sara Oikawa - CS2019000996 - 30.06.2020
" Relatório Inconsistências DRE Conta Contabil, Tp. Centro de Custo,
" Centro de Lucro e Grupo de Mercadoria
TYPES: BEGIN OF TY_SAIDA_IDRE,
         VERSN   TYPE VERSN_011,
         SAKNR   TYPE SAKNR,
         SAKNR_T TYPE TXT50_SKAT,
         KOSAR   TYPE KOSAR,
         KOSAR_T TYPE KTEXT,
         PRCTR   TYPE PRCTR,
         PRCTR_T TYPE LTEXT,
         MATKL   TYPE MATKL,
         MATKL_T TYPE WGBEZ,
       END OF TY_SAIDA_IDRE,

       BEGIN OF TY_DRE_02,
         BUKRS TYPE	BUKRS,
         GJAHR TYPE GJAHR,
         POPER TYPE	POPER,
         SAKNR TYPE SAKNR,
         KTOPL TYPE KTOPL,
         KOKRS TYPE KOKRS,
*         KOSTL TYPE  KOSTL,
         KOSAR TYPE KOSAR,
         PRCTR TYPE PRCTR,
         MATKL TYPE	MATKL,
       END OF TY_DRE_02.
* Fim - Sara Oikawa - CS2019000996 - 30.06.2020


DATA: T_SAIDA_LIQ    TYPE TABLE OF TY_SAIDA_LIQ,
      T_SAIDA_AN     TYPE TABLE OF TY_SAIDA_AN,
      T_SAIDA_AN_AUX TYPE TABLE OF TY_SAIDA_AN,
      "T_BSIS         TYPE SORTED TABLE OF  TY_BSIS WITH NON-UNIQUE KEY BUKRS HKONT ZUONR GJAHR BELNR AUFNR,
      T_BSIS         TYPE TABLE OF  TY_BSIS,
      T_BSIS_AUX     TYPE SORTED TABLE OF  TY_BSIS_AUX WITH UNIQUE KEY AUFNR,
      T_COAS         TYPE TABLE OF  TY_COAS,
      T_V_AUART      TYPE TABLE OF TY_V_AUART,
      T_CSKS         TYPE SORTED TABLE OF TY_CSKS WITH NON-UNIQUE DEFAULT KEY,
      T_CSKT         TYPE SORTED TABLE OF TY_CSKT WITH NON-UNIQUE DEFAULT KEY,
      T_TKT05        TYPE SORTED TABLE OF TY_TKT05 WITH NON-UNIQUE DEFAULT KEY,
      T_TKA02        TYPE SORTED TABLE OF TY_TKA02 WITH NON-UNIQUE DEFAULT KEY,
      T_COEP         TYPE TABLE OF TY_COEP,
      T_COEP_AUX     TYPE TABLE OF TY_COEP,
      T_COEP_AUX2    TYPE TABLE OF TY_COEP,
      T_COBK         TYPE TABLE OF TY_COBK,
      T_T001         TYPE TABLE OF TY_T001,
      T_SETLEAF      TYPE TABLE OF TY_SETLEAF,
      T_AFKO         TYPE TABLE OF TY_AFKO,
      T_AFVC         TYPE TABLE OF TY_AFVC,

* Início - Sara Oikawa - CS2019000996 - 30.06.2020
      T_SAIDA_IDRE   TYPE TABLE OF TY_SAIDA_IDRE,
      T_DRE_02       TYPE TABLE OF TY_DRE_02,
      T_DRE_EST03    TYPE TABLE OF ZGL015_DRE_EST03,
      T_DRE_EST04    TYPE TABLE OF ZGL015_DRE_EST04,
      T_DRE_EST05    TYPE TABLE OF ZGL015_DRE_EST05,
      T_DRE_EST06    TYPE TABLE OF ZGL015_DRE_EST06,
      T_DRE_02_FAE   TYPE TABLE OF TY_DRE_02,
* FIm - Sara Oikawa - CS2019000996 - 30.06.2020


      W_SAIDA_LIQ    TYPE TY_SAIDA_LIQ,
      W_SAIDA_AN     TYPE TY_SAIDA_AN,
      W_SAIDA_AN_AUX TYPE TY_SAIDA_AN,
      W_BSIS         TYPE TY_BSIS,
      W_BSIS_AUX     TYPE TY_BSIS_AUX,
      W_COAS         TYPE TY_COAS,
      W_V_AUART      TYPE TY_V_AUART,
      W_CSKS         TYPE TY_CSKS,
      W_CSKT         TYPE TY_CSKT,
      W_TKT05        TYPE TY_TKT05,
      W_TKA02        TYPE TY_TKA02,
      W_COEP         TYPE TY_COEP,
      W_COEP_AUX     TYPE TY_COEP,
      W_COEP_AUX2    TYPE TY_COEP,
      W_COBK         TYPE TY_COBK,
      W_T001         TYPE TY_T001,
      W_SETLEAF      TYPE TY_SETLEAF,
      W_AFKO         TYPE TY_AFKO,
      W_AFVC         TYPE TY_AFVC,

      W_SAIDA_IDRE   TYPE TY_SAIDA_IDRE,
      W_DRE_02       TYPE TY_DRE_02,
      W_DRE_EST08    TYPE ZGL015_DRE_EST08,
      W_DRE_EST03    TYPE ZGL015_DRE_EST03,
      W_DRE_EST04    TYPE ZGL015_DRE_EST04,
      W_DRE_EST05    TYPE ZGL015_DRE_EST05,
      W_DRE_EST06    TYPE ZGL015_DRE_EST06.


DATA: G_CUSTOM_CONTAINER  TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      G_CUSTOM_CONTAINER1 TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      G_CUSTOM_CONTAINER2 TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      G_CUSTOM_CONTAINER3 TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      DG_SPLITTER_1       TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_PARENT_1         TYPE REF TO CL_GUI_CONTAINER,
      DG_SPLITTER_2       TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_PARENT_2         TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_2A        TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_ALV       TYPE REF TO CL_GUI_CONTAINER,
      GS_LAYOUT           TYPE LVC_S_LAYO,
      GS_LAYOUT1          TYPE LVC_S_LAYO,
      GS_LAYOUT2          TYPE LVC_S_LAYO,
      GS_VARIANT          TYPE DISVARIANT,
      GS_VARIANT1         TYPE DISVARIANT,
      GS_VARIANT2         TYPE DISVARIANT,
      IT_EXCLUDE_FCODE    TYPE UI_FUNCTIONS,
      WA_EXCLUDE_FCODE    LIKE LINE OF IT_EXCLUDE_FCODE,
      DG_DYNDOC_ID        TYPE REF TO CL_DD_DOCUMENT,
      CTL_ALV             TYPE REF TO CL_GUI_ALV_GRID,
      CTL_ALV02           TYPE REF TO CL_GUI_ALV_GRID,
      CTL_ALV03           TYPE REF TO CL_GUI_ALV_GRID,
      TABLE_ELEMENT       TYPE REF TO CL_DD_TABLE_ELEMENT,
      COLUMN              TYPE REF TO CL_DD_AREA,
      TABLE_ELEMENT2      TYPE REF TO CL_DD_TABLE_ELEMENT,
      COLUMN_1            TYPE REF TO CL_DD_AREA,
      COLUMN_2            TYPE REF TO CL_DD_AREA,
      DG_HTML_CNTRL       TYPE REF TO CL_GUI_HTML_VIEWER.



DATA:
  WA_STABLE       TYPE LVC_S_STBL,
  WA_STABLE1      TYPE LVC_S_STBL,
  WA_STABLE2      TYPE LVC_S_STBL,
  IT_FIELDCATALOG TYPE LVC_T_FCAT,
  WA_FIELDCATALOG TYPE LVC_S_FCAT.


DATA: V_XTDMBTR   TYPE BSIS-DMBTR,
      V_XTDMBE2   TYPE BSIS-DMBE2,
      V_XTCCDMBTR TYPE BSIS-DMBTR,
      V_XTCCDMBE2 TYPE BSIS-DMBE2,
      V_WOGBTR    TYPE BSIS-DMBTR,
      V_WKGBTR    TYPE BSIS-DMBE2,
      CHEC(1)     TYPE C,
      VAUFNR      TYPE BSIS-AUFNR. "necessario para background


DATA: T_SKA1 TYPE RANGE OF SKA1-SAKNR,
      W_SKA1 LIKE LINE OF T_SKA1.

DATA: T_PRINT      TYPE SLIS_PRINT_ALV, "background
      XS_EVENTS    TYPE SLIS_ALV_EVENT,
      EVENTS       TYPE SLIS_T_EVENT,
      T_SORT       TYPE SLIS_T_SORTINFO_ALV WITH HEADER LINE,
      V_REPORT     LIKE SY-REPID,
      ESTRUTURA    TYPE TABLE OF TY_ESTRUTURA,
      WA_ESTRUTURA TYPE TY_ESTRUTURA,
      T_TOP        TYPE SLIS_T_LISTHEADER.


SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS: P_BUKRS FOR BSIS-BUKRS NO INTERVALS OBLIGATORY,
                P_WERKS FOR BSIS-WERKS,
                P_AUFNR FOR BSIS-AUFNR,
                P_GSBER FOR BSIS-GSBER,
                P_MONAT FOR BSIS-MONAT OBLIGATORY,
                P_GJAHR FOR BSIS-GJAHR OBLIGATORY.
SELECTION-SCREEN END OF BLOCK B1.

SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-002.

SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: P_LIQ RADIOBUTTON GROUP G1.
SELECTION-SCREEN COMMENT 2(50) TEXT-003 FOR FIELD P_LIQ.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: P_TPCE RADIOBUTTON GROUP G1.
SELECTION-SCREEN COMMENT 2(50) TEXT-004 FOR FIELD P_TPCE.
SELECTION-SCREEN END OF LINE.

* Início - Sara Oikawa - CS2019000996 - 30.06.2020
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: P_IDRE RADIOBUTTON GROUP G1.
SELECTION-SCREEN COMMENT 2(65) TEXT-007 FOR FIELD P_IDRE.
SELECTION-SCREEN END OF LINE.
* FIm - Sara Oikawa - CS2019000996 - 30.06.2020

SELECTION-SCREEN END OF BLOCK B2.

INITIALIZATION.

CLASS LCL_EVENT_RECEIVER DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      ZM_HANDLE_HOTSPOT_REPORT
                  FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
        IMPORTING E_ROW_ID E_COLUMN_ID ES_ROW_NO.

ENDCLASS.

CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.
  METHOD: ZM_HANDLE_HOTSPOT_REPORT.

    PERFORM USER_COMMAND USING E_ROW_ID E_COLUMN_ID ES_ROW_NO.
  ENDMETHOD.

ENDCLASS.

START-OF-SELECTION.

  IF P_IDRE IS INITIAL.                  "Sara Oikawa - CS2019000996 - 30.06.2020
    PERFORM: SELECIONA_DADOS_01,
     TRATAR_DADOS_01,
    SELECIONA_DADOS_02.
  ELSE.
    PERFORM F_SELECIONA_INCONSIST_DRE.   "Sara Oikawa - CS2019000996 - 30.06.2020
  ENDIF.

  PERFORM DEFINIR_EVENTOS.


  IF P_LIQ IS NOT INITIAL.
    PERFORM IMPRIMI_ALV_LIQ.
* Início - Sara Oikawa - CS2019000996 - 30.06.2020
*   ELSEIF P_TPCE IS NOT INITIAL.
*    PERFORM IMPRIMI_ALV_CC.
* Fim - Sara Oikawa - CS2019000996 - 30.06.2020
  ENDIF.

* Início - Sara Oikawa - CS2019000996 - 30.06.2020
  IF P_TPCE IS NOT INITIAL.
    PERFORM IMPRIMI_ALV_CC.
  ENDIF.

  IF P_IDRE IS NOT INITIAL.
    PERFORM F_ALV_INCONSISTENCIAS_DRE.
  ENDIF.
* Fim - Sara Oikawa - CS2019000996 - 30.06.2020


  IF SY-BATCH = 'X'. "Executar em Background **************
    DATA: WL_LAYOUT   TYPE SLIS_LAYOUT_ALV.
    IF P_LIQ IS NOT INITIAL.

      CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
        EXPORTING
          I_CALLBACK_USER_COMMAND = 'F_USER_COMMAND'
          IT_FIELDCAT             = ESTRUTURA[]
          IT_SORT                 = T_SORT[]
          IS_LAYOUT               = WL_LAYOUT
          I_SAVE                  = 'A'
          IT_EVENTS               = EVENTS
          IS_PRINT                = T_PRINT
        TABLES
          T_OUTTAB                = T_SAIDA_LIQ.
* Início - Sara Oikawa - CS2019000996 - 30.06.2020
    ENDIF.
*    ELSE.
    IF  P_TPCE IS NOT INITIAL.
* FIm - Sara Oikawa - CS2019000996 - 30.06.2020
      CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
        EXPORTING
          I_CALLBACK_USER_COMMAND = 'F_USER_COMMAND'
          IT_FIELDCAT             = ESTRUTURA[]
          IT_SORT                 = T_SORT[]
          IS_LAYOUT               = WL_LAYOUT
          I_SAVE                  = 'A'
          IT_EVENTS               = EVENTS
          IS_PRINT                = T_PRINT
        TABLES
          T_OUTTAB                = T_SAIDA_AN.
    ENDIF.

* Início - Sara Oikawa - CS2019000996 - 30.06.2020
    IF P_IDRE IS NOT INITIAL.
      CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
        EXPORTING
          I_CALLBACK_USER_COMMAND = 'F_USER_COMMAND'
          IT_FIELDCAT             = ESTRUTURA[]
          IT_SORT                 = T_SORT[]
          IS_LAYOUT               = WL_LAYOUT
          I_SAVE                  = 'A'
          IT_EVENTS               = EVENTS
          IS_PRINT                = T_PRINT
        TABLES
          T_OUTTAB                = T_SAIDA_IDRE.
    ENDIF.
* Fim - Sara Oikawa - CS2019000996 - 30.06.2020

  ENDIF.

********************************


FORM SELECIONA_DADOS_01.

  DATA: IT_SKA1 TYPE TABLE OF TY_SKA1,
        WA_SKA1 TYPE  TY_SKA1.

  CLEAR T_SKA1[].

  SELECT  SAKNR FROM SKA1 INTO TABLE IT_SKA1 "#EC CI_DB_OPERATION_OK[2389136]
    WHERE SAKNR LIKE '00001%' OR SAKNR  LIKE '00002%' "#EC CI_DB_OPERATION_OK[2431747]
  GROUP BY  SAKNR.

  LOOP AT IT_SKA1 INTO WA_SKA1.
    W_SKA1-OPTION = 'EQ'.
    W_SKA1-SIGN   = 'I'.
    W_SKA1-LOW    = WA_SKA1-SAKNR.
    APPEND W_SKA1 TO T_SKA1.
  ENDLOOP.

  IF  P_AUFNR  IS NOT INITIAL.

    SELECT  BUDAT HKONT  DMBTR DMBE2
            SHKZG ZUONR  XBLNR SGTXT
            KOSTL BELNR  BUKRS GJAHR
            MONAT AUFNR  GSBER
      FROM BSIS
      INTO TABLE T_BSIS
    WHERE BUKRS IN P_BUKRS
      AND HKONT NOT IN T_SKA1
      AND GJAHR IN P_GJAHR
      AND MONAT IN P_MONAT
      AND AUFNR IN P_AUFNR
      AND GSBER IN P_GSBER
      AND WERKS IN P_WERKS.

  ELSE.

    SELECT  BUDAT HKONT  DMBTR DMBE2
              SHKZG ZUONR  XBLNR SGTXT
              KOSTL BELNR  BUKRS GJAHR
              MONAT AUFNR  GSBER
        FROM BSIS
        INTO TABLE T_BSIS
      WHERE BUKRS IN P_BUKRS
        AND HKONT NOT IN T_SKA1
        AND GJAHR IN P_GJAHR
        AND MONAT IN P_MONAT
        AND AUFNR <> ' '
        AND GSBER IN P_GSBER
        AND WERKS IN P_WERKS.

  ENDIF.

  "%_HINTS ORACLE 'INDEX(BSIS "Z3")'.

*  ELSEIF P_AUFNR  IS NOT INITIAL AND P_GSBER IS INITIAL.
*    SELECT  BUDAT HKONT  DMBTR DMBE2
*            SHKZG ZUONR  XBLNR SGTXT
*            KOSTL BELNR  BUKRS GJAHR
*            MONAT AUFNR  GSBER
*      FROM BSIS
*      INTO TABLE T_BSIS
*    WHERE BUKRS IN P_BUKRS
*      AND HKONT NOT IN T_SKA1
*      AND GJAHR IN P_GJAHR
*      AND MONAT IN P_MONAT
*      AND AUFNR IN P_AUFNR.
*    "%_HINTS ORACLE 'INDEX(BSIS "Z3")'.
*
*  ELSEIF P_AUFNR  IS  INITIAL AND P_GSBER IS NOT INITIAL.
*    SELECT  BUDAT HKONT  DMBTR DMBE2
*            SHKZG ZUONR  XBLNR SGTXT
*            KOSTL BELNR  BUKRS GJAHR
*            MONAT AUFNR  GSBER
*      FROM BSIS
*      INTO TABLE T_BSIS
*    WHERE BUKRS IN P_BUKRS
*      AND HKONT NOT IN T_SKA1
*      AND GJAHR IN P_GJAHR
*      AND MONAT IN P_MONAT
*      AND GSBER IN P_GSBER.
*    "  %_HINTS ORACLE 'INDEX(BSIS "Z3")'.
*  ELSEIF  P_GSBER IS NOT INITIAL.
*
*    SELECT  BUDAT HKONT DMBTR DMBE2
*            SHKZG ZUONR XBLNR SGTXT
*            KOSTL BELNR BUKRS GJAHR
*            MONAT AUFNR GSBER
*    FROM BSIS
*    INTO TABLE T_BSIS
*  WHERE BUKRS IN P_BUKRS
*    AND HKONT NOT IN T_SKA1
*    AND GJAHR IN P_GJAHR
*    AND MONAT IN P_MONAT
*    "AND AUFNR <> ' '
*    AND GSBER IN P_GSBER.
*    " %_HINTS ORACLE 'INDEX(BSIS "Z3")'.
*  ELSE.
*    SELECT  BUDAT HKONT DMBTR DMBE2
*            SHKZG ZUONR XBLNR SGTXT
*            KOSTL BELNR BUKRS GJAHR
*            MONAT AUFNR GSBER
*    FROM BSIS
*    INTO TABLE T_BSIS
*  WHERE BUKRS IN P_BUKRS
*    AND HKONT NOT IN T_SKA1
*    AND GJAHR IN P_GJAHR
*    AND MONAT IN P_MONAT.
*    "AND AUFNR <> ' '.
*    "%_HINTS ORACLE 'INDEX(BSIS "Z3")'.
*  ENDIF.

  DELETE T_BSIS WHERE AUFNR = ' '.


  LOOP AT T_BSIS INTO W_BSIS.
    IF VAUFNR <> W_BSIS-AUFNR.
      W_BSIS_AUX-AUFNR = W_BSIS-AUFNR.
      VAUFNR           = W_BSIS-AUFNR.
      INSERT W_BSIS_AUX INTO TABLE T_BSIS_AUX.
      CLEAR:  W_BSIS, W_BSIS_AUX.
    ENDIF.
  ENDLOOP.

  IF T_BSIS[] IS NOT INITIAL.
    SELECT BUKRS KOKRS
      FROM TKA02
      INTO TABLE T_TKA02
     WHERE BUKRS IN P_BUKRS.

    READ TABLE T_TKA02 INTO W_TKA02 WITH KEY BUKRS = P_BUKRS-LOW.

    SELECT  KOKRS PERIO GJAHR BUKRS
            WRTTP OBJNR VRGNG BELNR
            KSTAR WOGBTR WKGBTR SGTXT PARGB
      FROM COEP
      INTO TABLE T_COEP_AUX
    WHERE KOKRS	EQ W_TKA02-KOKRS
    AND   PERIO	IN P_MONAT
    AND   GJAHR	IN P_GJAHR
    AND   BUKRS	IN P_BUKRS
    AND   WRTTP EQ '04'
    AND   VRGNG IN ('RKIU', 'KOAO', 'RKIV','RKL').

    LOOP AT T_COEP_AUX INTO W_COEP_AUX.
      W_COEP_AUX2-KOKRS    = W_COEP_AUX-KOKRS.
      W_COEP_AUX2-PERIO    = W_COEP_AUX-PERIO.
      W_COEP_AUX2-GJAHR    = W_COEP_AUX-GJAHR.
      W_COEP_AUX2-BUKRS    = W_COEP_AUX-BUKRS.
      W_COEP_AUX2-WRTTP    = W_COEP_AUX-WRTTP.
      W_COEP_AUX2-VRGNG    = W_COEP_AUX-VRGNG.
      W_COEP_AUX2-BELNR    = W_COEP_AUX-BELNR.
      W_COEP_AUX2-KSTAR    = W_COEP_AUX-KSTAR.
      W_COEP_AUX2-WOGBTR   = W_COEP_AUX-WOGBTR.
      W_COEP_AUX2-WKGBTR   = W_COEP_AUX-WKGBTR.
      W_COEP_AUX2-SGTXT    = W_COEP_AUX-SGTXT.
      W_COEP_AUX2-PARGB    = W_COEP_AUX-PARGB.
      W_COEP_AUX2-V_OBJNR  = W_COEP_AUX-OBJNR+6(9).
      W_COEP_AUX2-V_OBJNR = |{ W_COEP_AUX2-V_OBJNR ALPHA = IN }|.
      APPEND W_COEP_AUX2 TO T_COEP_AUX2.
      CLEAR: W_COEP_AUX2, W_COEP_AUX.
    ENDLOOP.

    T_COEP =  FILTER #( T_COEP_AUX2 IN T_BSIS_AUX WHERE V_OBJNR = AUFNR ).

    IF T_COEP[] IS NOT INITIAL.

      SELECT KOKRS BELNR
             GJAHR BUDAT
        FROM COBK
        INTO TABLE T_COBK
      FOR ALL ENTRIES IN T_COEP
      WHERE KOKRS EQ T_COEP-KOKRS
      AND   BELNR EQ T_COEP-BELNR
      AND   GJAHR EQ T_COEP-GJAHR.

    ENDIF.

    SELECT SETCLASS
           SUBCLASS
           SETNAME
           LINEID
           VALFROM
      FROM SETLEAF INTO TABLE T_SETLEAF
    WHERE SETNAME = 'MAGGI_VALID_ORDEM'.

    IF T_SETLEAF[] IS INITIAL.
      MESSAGE 'Set MAGGI_VALID_ORDEM não parametrizado!' TYPE 'S'.
      STOP.
    ENDIF.

    LOOP AT T_SETLEAF INTO W_SETLEAF.
      W_SETLEAF-COD_CLAS_NOT2 = W_SETLEAF-VALFROM.
      MODIFY T_SETLEAF FROM W_SETLEAF.
    ENDLOOP.

    SELECT AUFNR
           AUART
           KTEXT
      FROM COAS
      INTO TABLE T_COAS
      FOR ALL ENTRIES IN T_BSIS
   WHERE AUFNR EQ T_BSIS-AUFNR.

    SELECT BUKRS SPRAS
      FROM T001
      INTO TABLE T_T001
    WHERE BUKRS IN P_BUKRS.

    READ TABLE T_T001 INTO W_T001 WITH KEY BUKRS = P_BUKRS-LOW.

    SELECT SPRAS KOSTL LTEXT
      FROM CSKT
      INTO TABLE T_CSKT
    FOR ALL ENTRIES IN T_BSIS
    WHERE SPRAS EQ W_T001-SPRAS
     AND  KOSTL EQ T_BSIS-KOSTL.

    SELECT KOSTL KOSAR
       FROM CSKS
       INTO TABLE T_CSKS
    FOR ALL ENTRIES IN T_BSIS
    WHERE KOSTL =  T_BSIS-KOSTL.

    IF T_CSKS[] IS NOT INITIAL.
      SELECT SPRAS KOSAR KTEXT
       FROM TKT05   INTO TABLE T_TKT05
      FOR ALL ENTRIES IN T_CSKS
      WHERE SPRAS EQ W_T001-SPRAS
       AND  KOSAR EQ T_CSKS-KOSAR.
    ENDIF.

  ENDIF.
ENDFORM.

FORM SELECIONA_DADOS_02.

  SELECT BUKRS KOKRS
    FROM TKA02
    INTO TABLE T_TKA02
   WHERE BUKRS IN P_BUKRS.

  READ TABLE T_TKA02 INTO W_TKA02 WITH KEY BUKRS = P_BUKRS-LOW.

  IF  T_BSIS[] IS NOT INITIAL.
    SELECT AUFPL AUFNR  FROM AFKO INTO TABLE T_AFKO
      FOR ALL ENTRIES IN T_BSIS
      WHERE AUFNR EQ T_BSIS-AUFNR.
  ENDIF.

  IF T_AFKO[] IS NOT INITIAL.
    SELECT APLZL  OBJNR AUFPL  FROM AFVC  INTO TABLE T_AFVC
     FOR ALL ENTRIES IN T_AFKO
    WHERE AUFPL EQ T_AFKO-AUFPL.
  ENDIF.

  IF  T_AFVC[] IS NOT INITIAL.
    SELECT   KOKRS PERIO GJAHR BUKRS
             WRTTP OBJNR VRGNG BELNR
             KSTAR WOGBTR WKGBTR SGTXT PARGB
       FROM COEP
       INTO TABLE T_COEP
     FOR ALL ENTRIES IN T_AFVC
     WHERE OBJNR  EQ T_AFVC-OBJNR
     AND   GJAHR  IN P_GJAHR
     AND   PERIO  IN P_MONAT
     AND   KOKRS  EQ W_TKA02-KOKRS
     AND   BUKRS  IN P_BUKRS
     AND   WRTTP  EQ '04'
     AND   VRGNG  IN ('RKIU', 'KOAO', 'RKIV','RKL').
  ENDIF.

  IF T_COEP[] IS NOT INITIAL.

    SELECT KOKRS BELNR
           GJAHR BUDAT
      FROM COBK
      INTO TABLE T_COBK
    FOR ALL ENTRIES IN T_COEP
    WHERE KOKRS EQ T_COEP-KOKRS
    AND   BELNR EQ T_COEP-BELNR
    AND   GJAHR EQ T_COEP-GJAHR.

    SELECT SETCLASS
           SUBCLASS
           SETNAME
           LINEID
           VALFROM
     FROM SETLEAF INTO TABLE T_SETLEAF
   WHERE SETNAME = 'MAGGI_VALID_ORDEM'.

    IF T_SETLEAF[] IS INITIAL.
      MESSAGE 'Set MAGGI_VALID_ORDEM não parametrizado!' TYPE 'S'.
      STOP.
    ENDIF.

    LOOP AT T_SETLEAF INTO W_SETLEAF.
      W_SETLEAF-COD_CLAS_NOT2 = W_SETLEAF-VALFROM.
      MODIFY T_SETLEAF FROM W_SETLEAF.
    ENDLOOP.

    SELECT AUFNR
           AUART
           KTEXT
      FROM COAS
      INTO TABLE T_COAS
      FOR ALL ENTRIES IN T_BSIS
   WHERE AUFNR EQ T_BSIS-AUFNR.

    SELECT BUKRS SPRAS
      FROM T001
      INTO TABLE T_T001
    WHERE BUKRS IN P_BUKRS.

    READ TABLE T_T001 INTO W_T001 WITH KEY BUKRS = P_BUKRS-LOW.

    SELECT SPRAS KOSTL LTEXT
      FROM CSKT
      INTO TABLE T_CSKT
    FOR ALL ENTRIES IN T_BSIS
    WHERE SPRAS EQ W_T001-SPRAS
     AND  KOSTL EQ T_BSIS-KOSTL.

    SELECT KOSTL KOSAR
       FROM CSKS
       INTO TABLE T_CSKS
    FOR ALL ENTRIES IN T_BSIS
    WHERE KOSTL =  T_BSIS-KOSTL.

    IF T_CSKS[] IS NOT INITIAL.
      SELECT SPRAS KOSAR KTEXT
       FROM TKT05
       INTO TABLE T_TKT05
      FOR ALL ENTRIES IN T_CSKS
      WHERE SPRAS EQ W_T001-SPRAS
       AND  KOSAR EQ T_CSKS-KOSAR.
    ENDIF.

    PERFORM TRATAR_DADOS_02.

  ENDIF.

ENDFORM.

FORM TRATAR_DADOS_01.

  "SORT T_BSIS BY AUFNR.

  LOOP AT T_BSIS INTO W_BSIS.

    CLEAR: W_COAS, W_SETLEAF.

    READ TABLE T_COAS  INTO W_COAS  WITH KEY AUFNR = W_BSIS-AUFNR.

    READ TABLE T_SETLEAF INTO W_SETLEAF WITH KEY COD_CLAS_NOT2 = W_COAS-AUART.

    IF W_COAS-AUART <> W_SETLEAF-COD_CLAS_NOT2.

      READ TABLE T_T001  INTO W_T001  WITH KEY BUKRS = P_BUKRS-LOW.
      READ TABLE T_TKA02 INTO W_TKA02 WITH KEY BUKRS = P_BUKRS-LOW.

      IF P_LIQ IS NOT INITIAL.
        PERFORM REL_LIQUIDAR_ORDEM.
      ELSEIF P_TPCE IS NOT INITIAL.
        PERFORM REL_CENTRO_CUSTO.
      ENDIF.

      CLEAR:  W_SAIDA_LIQ, W_SAIDA_AN, W_BSIS, W_COAS, W_V_AUART, W_CSKS,
              W_CSKT, W_TKT05, W_TKA02, W_COEP, W_COBK, W_T001, V_XTDMBTR,
              V_XTDMBE2, V_XTCCDMBTR, V_XTCCDMBE2, V_WOGBTR, V_WKGBTR.
    ENDIF.
  ENDLOOP.

  PERFORM REL_ANALITICO.

  PERFORM LIMPA_VARIAVEIS.

ENDFORM.

FORM LIMPA_VARIAVEIS.

  CLEAR:  T_COAS[],
          T_V_AUART[],
          T_CSKS[],
          T_CSKT[],
          T_TKT05[],
          T_TKA02[],
          T_COEP[],
          T_COBK[],
          T_T001[],
          T_SETLEAF[],
          T_AFKO[],
          T_AFVC[].
ENDFORM.


FORM TRATAR_DADOS_02.

  SORT: T_AFVC BY OBJNR,
        T_AFKO BY AUFPL,
        T_BSIS BY AUFNR,
        T_COBK BY KOKRS BELNR GJAHR,
        T_COAS BY AUFNR.

  LOOP AT T_COEP INTO W_COEP.

    CLEAR: W_COAS,  W_SETLEAF.

    READ TABLE T_AFVC INTO W_AFVC WITH KEY OBJNR = W_COEP-OBJNR BINARY SEARCH.

    READ TABLE T_AFKO INTO W_AFKO WITH KEY AUFPL = W_AFVC-AUFPL BINARY SEARCH.

    READ TABLE T_BSIS INTO W_BSIS WITH KEY AUFNR = W_AFKO-AUFNR BINARY SEARCH.

    READ TABLE T_COBK INTO W_COBK WITH KEY  KOKRS = W_COEP-KOKRS
                                            BELNR = W_COEP-BELNR
                                            GJAHR = W_COEP-GJAHR BINARY SEARCH.

    READ TABLE T_COAS  INTO W_COAS  WITH KEY AUFNR = W_BSIS-AUFNR BINARY SEARCH.

    READ TABLE T_SETLEAF INTO W_SETLEAF WITH KEY COD_CLAS_NOT2 = W_COAS-AUART.

    IF W_COAS-AUART <> W_SETLEAF-COD_CLAS_NOT2.

      W_SAIDA_AN-AUFNR = W_BSIS-AUFNR.
      W_SAIDA_AN-TXT  =  W_COAS-KTEXT.

      READ TABLE T_CSKS INTO W_CSKS WITH KEY KOSTL = W_BSIS-KOSTL.
      IF SY-SUBRC = 0.
        W_SAIDA_AN-KOSAR  =  W_CSKS-KOSAR.
      ENDIF.

      READ TABLE T_CSKT INTO W_CSKT WITH KEY KOSTL = W_BSIS-KOSTL
                                             SPRAS = W_T001-SPRAS.
      IF SY-SUBRC = 0.
        W_SAIDA_AN-LTEXT  =  W_CSKT-LTEXT.
      ENDIF.

      READ TABLE T_TKT05 INTO W_TKT05 WITH KEY KOSAR  = W_CSKS-KOSAR.
      IF SY-SUBRC = 0.
        W_SAIDA_AN-KTEXT  = W_TKT05-KTEXT.
      ENDIF.

      W_SAIDA_AN-BELNR = W_COEP-BELNR.
      W_SAIDA_AN-BUDAT = W_COBK-BUDAT.
      W_SAIDA_AN-HKONT = W_COEP-KSTAR.

      V_WKGBTR = W_COEP-WKGBTR.
      V_WOGBTR = W_COEP-WOGBTR.

      W_SAIDA_AN-DMBTR = W_COEP-WOGBTR.
      W_SAIDA_AN-DMBE2 = W_COEP-WKGBTR.

      W_SAIDA_AN-ZUONR = W_BSIS-ZUONR.
      W_SAIDA_AN-XBLNR = W_BSIS-XBLNR.
      W_SAIDA_AN-KOSTL = W_BSIS-KOSTL.

      W_SAIDA_AN-SGTXT = W_COEP-SGTXT.
      W_SAIDA_AN-GSBER = W_COEP-PARGB.

      W_SAIDA_AN-AUFNR = |{ W_SAIDA_AN-AUFNR ALPHA = OUT }|.
      W_SAIDA_AN-KOSTL = |{ W_SAIDA_AN-KOSTL ALPHA = OUT }|.
      W_SAIDA_AN-HKONT = |{ W_SAIDA_AN-HKONT ALPHA = OUT }|.
      W_SAIDA_AN-ZUONR = |{ W_SAIDA_AN-ZUONR ALPHA = OUT }|.


      IF P_LIQ IS NOT INITIAL.
        READ TABLE T_SAIDA_LIQ INTO W_SAIDA_LIQ WITH KEY  AUFNR = W_SAIDA_AN-AUFNR.
        W_SAIDA_LIQ-XTDMBTR   =  V_WOGBTR.
        W_SAIDA_LIQ-XTDMBE2   =  V_WKGBTR.
        COLLECT W_SAIDA_LIQ  INTO T_SAIDA_LIQ.

        V_WOGBTR  = 0.
        V_WKGBTR  = 0.
      ENDIF.

      IF P_TPCE IS NOT INITIAL.
        W_SAIDA_LIQ-AUFNR = |{ W_BSIS-AUFNR ALPHA = OUT }|.
        W_SAIDA_LIQ-KOSTL = |{ W_BSIS-KOSTL ALPHA = OUT }|.

        W_SAIDA_LIQ-TXT       = W_COAS-KTEXT.
        W_SAIDA_LIQ-KOSAR     = W_CSKS-KOSAR.
        W_SAIDA_LIQ-LTEXT     = W_CSKT-LTEXT.
        W_SAIDA_LIQ-KTEXT     = W_TKT05-KTEXT.
        W_SAIDA_LIQ-XTCCDMBTR = W_COEP-WOGBTR.
        W_SAIDA_LIQ-XCCTDMBE2 = W_COEP-WKGBTR.

        COLLECT W_SAIDA_LIQ  INTO T_SAIDA_LIQ.
      ENDIF.

      COLLECT W_SAIDA_AN INTO T_SAIDA_AN.

      CLEAR: W_SAIDA_AN,
             W_BSIS,
             W_COAS,
             W_V_AUART,
             W_CSKS,
             W_CSKT,
             W_TKT05,
             W_TKA02,
             W_COEP,
             W_COBK,
             W_T001,
             V_WOGBTR,
             V_WKGBTR.

    ENDIF.
  ENDLOOP.

ENDFORM.

FORM REL_ANALITICO.
  V_WOGBTR  = 0.
  V_WKGBTR  = 0.

  SORT: T_BSIS BY AUFNR,
        T_COBK BY KOKRS BELNR GJAHR,
        T_COAS BY AUFNR,
        T_COAS BY AUFNR.

  LOOP AT T_COEP INTO W_COEP.

    READ TABLE T_BSIS  INTO W_BSIS  WITH KEY AUFNR = W_COEP-V_OBJNR BINARY SEARCH.
    READ TABLE T_T001  INTO W_T001  WITH KEY BUKRS = P_BUKRS-LOW.
    READ TABLE T_TKA02 INTO W_TKA02 WITH KEY BUKRS = P_BUKRS-LOW.

    READ TABLE T_COBK INTO W_COBK WITH KEY  KOKRS = W_COEP-KOKRS
                                            BELNR = W_COEP-BELNR
                                            GJAHR = W_COEP-GJAHR BINARY SEARCH.

    READ TABLE T_COAS INTO W_COAS WITH KEY  AUFNR = W_BSIS-AUFNR BINARY SEARCH.

    READ TABLE T_SETLEAF INTO W_SETLEAF WITH KEY COD_CLAS_NOT2 = W_COAS-AUART.

    IF W_COAS-AUART <> W_SETLEAF-COD_CLAS_NOT2.

      W_SAIDA_AN-AUFNR = W_BSIS-AUFNR.
      W_SAIDA_AN-TXT = W_COAS-KTEXT.

      READ TABLE T_CSKS INTO W_CSKS WITH KEY KOSTL = W_BSIS-KOSTL.
      IF SY-SUBRC = 0.
        W_SAIDA_AN-KOSAR  =  W_CSKS-KOSAR.
      ENDIF.

      READ TABLE T_CSKT INTO W_CSKT WITH KEY KOSTL = W_BSIS-KOSTL
                                             SPRAS = W_T001-SPRAS.
      IF SY-SUBRC = 0.
        W_SAIDA_AN-LTEXT  =  W_CSKT-LTEXT.
      ENDIF.

      READ TABLE T_TKT05 INTO W_TKT05 WITH KEY KOSAR  = W_CSKS-KOSAR.
      IF SY-SUBRC = 0.
        W_SAIDA_AN-KTEXT  = W_TKT05-KTEXT.
      ENDIF.


      W_SAIDA_AN-BELNR = W_COEP-BELNR.
      W_SAIDA_AN-BUDAT = W_COBK-BUDAT.
      W_SAIDA_AN-HKONT = W_COEP-KSTAR.

      V_WOGBTR = W_COEP-WOGBTR.
      V_WKGBTR = W_COEP-WKGBTR.

      W_SAIDA_AN-DMBTR = V_WOGBTR.
      W_SAIDA_AN-DMBE2 = V_WKGBTR.

      W_SAIDA_AN-ZUONR = W_BSIS-ZUONR.
      W_SAIDA_AN-XBLNR = W_BSIS-XBLNR.
      W_SAIDA_AN-KOSTL = W_BSIS-KOSTL.

      W_SAIDA_AN-SGTXT = W_COEP-SGTXT.
      W_SAIDA_AN-GSBER = W_COEP-PARGB.

      W_SAIDA_AN-AUFNR = |{ W_SAIDA_AN-AUFNR ALPHA = OUT }|.
      W_SAIDA_AN-KOSTL = |{ W_SAIDA_AN-KOSTL ALPHA = OUT }|.
      W_SAIDA_AN-HKONT = |{ W_SAIDA_AN-HKONT ALPHA = OUT }|.
      W_SAIDA_AN-ZUONR = |{ W_SAIDA_AN-ZUONR ALPHA = OUT }|.


      IF P_LIQ IS NOT INITIAL.
        READ TABLE T_SAIDA_LIQ INTO W_SAIDA_LIQ WITH KEY  AUFNR = W_SAIDA_AN-AUFNR.
        W_SAIDA_LIQ-XTDMBTR   =  V_WOGBTR.
        W_SAIDA_LIQ-XTDMBE2   =  V_WKGBTR.

        COLLECT W_SAIDA_LIQ  INTO T_SAIDA_LIQ.

        V_WOGBTR  = 0.
        V_WKGBTR  = 0.
      ENDIF.

      IF P_TPCE IS NOT INITIAL.
        W_SAIDA_LIQ-AUFNR = |{ W_BSIS-AUFNR ALPHA = OUT }|.
        W_SAIDA_LIQ-KOSTL = |{ W_BSIS-KOSTL ALPHA = OUT }|.

        W_SAIDA_LIQ-TXT       = W_COAS-KTEXT.
        W_SAIDA_LIQ-KOSAR     = W_CSKS-KOSAR.
        W_SAIDA_LIQ-LTEXT     = W_CSKT-LTEXT.
        W_SAIDA_LIQ-KTEXT     = W_TKT05-KTEXT.
        W_SAIDA_LIQ-XTCCDMBTR = W_COEP-WOGBTR.
        W_SAIDA_LIQ-XCCTDMBE2 = W_COEP-WKGBTR.

        APPEND W_SAIDA_LIQ  TO T_SAIDA_LIQ.

      ENDIF.

      APPEND W_SAIDA_AN TO T_SAIDA_AN.

      CLEAR: W_SAIDA_AN,
             W_BSIS,
             W_BSIS_AUX,
             W_COAS,
             W_V_AUART,
             W_CSKS,
             W_CSKT,
             W_TKT05,
             W_TKA02,
             W_COEP,
             W_COBK,
             W_T001,
             V_WOGBTR,
             V_WKGBTR.
    ENDIF.
  ENDLOOP.

ENDFORM.

FORM REL_LIQUIDAR_ORDEM.

  V_XTDMBTR   = 0.
  V_XTDMBE2   = 0.

  SORT: T_COAS BY  AUFNR.

  W_SAIDA_LIQ-AUFNR = |{ W_BSIS-AUFNR ALPHA = OUT }|.

  READ TABLE T_COAS INTO W_COAS WITH KEY  AUFNR = W_BSIS-AUFNR.
  IF SY-SUBRC = 0.
    W_SAIDA_AN-TXT = W_COAS-KTEXT.
    W_SAIDA_LIQ-TXT = W_COAS-KTEXT.
  ENDIF.

  READ TABLE T_CSKS INTO W_CSKS WITH KEY KOSTL = W_BSIS-KOSTL.
  IF SY-SUBRC = 0.
    W_SAIDA_AN-KOSAR  =  W_CSKS-KOSAR.
  ENDIF.

  READ TABLE T_CSKT INTO W_CSKT WITH KEY KOSTL = W_BSIS-KOSTL
                                         SPRAS = W_T001-SPRAS.
  IF SY-SUBRC = 0.
    W_SAIDA_AN-LTEXT  =  W_CSKT-LTEXT.
  ENDIF.

  READ TABLE T_TKT05 INTO W_TKT05 WITH KEY KOSAR  = W_CSKS-KOSAR.
  IF SY-SUBRC = 0.
    W_SAIDA_AN-KTEXT  = W_TKT05-KTEXT.
  ENDIF.

  IF  W_BSIS-SHKZG = 'H'.
    V_XTDMBTR   =  V_XTDMBTR   + W_BSIS-DMBTR * -1.
    V_XTDMBE2   =  V_XTDMBE2   + W_BSIS-DMBE2 * -1.
  ELSE.
    V_XTDMBTR   =  V_XTDMBTR   + W_BSIS-DMBTR.
    V_XTDMBE2   =  V_XTDMBE2   + W_BSIS-DMBE2 .
  ENDIF.

  W_SAIDA_LIQ-XTDMBTR   = V_XTDMBTR.
  W_SAIDA_LIQ-XTDMBE2   = V_XTDMBE2.

  COLLECT W_SAIDA_LIQ  INTO T_SAIDA_LIQ.


  V_XTDMBTR = 0.
  V_XTDMBE2 = 0.

  W_SAIDA_AN-AUFNR = W_BSIS-AUFNR.
  W_SAIDA_AN-BELNR = W_BSIS-BELNR.
  W_SAIDA_AN-BUDAT = W_BSIS-BUDAT.
  W_SAIDA_AN-HKONT = W_BSIS-HKONT.

  IF  W_BSIS-SHKZG = 'H'.
    V_XTDMBTR   =  V_XTDMBTR   + W_BSIS-DMBTR * -1.
    V_XTDMBE2   =  V_XTDMBE2   + W_BSIS-DMBE2 * -1.
  ELSE.
    V_XTDMBTR   =  V_XTDMBTR   + W_BSIS-DMBTR.
    V_XTDMBE2   =  V_XTDMBE2   + W_BSIS-DMBE2 .
  ENDIF.

  W_SAIDA_AN-DMBTR = V_XTDMBTR.
  W_SAIDA_AN-DMBE2 = V_XTDMBE2.
  W_SAIDA_AN-ZUONR = W_BSIS-ZUONR.
  W_SAIDA_AN-XBLNR = W_BSIS-XBLNR.
  W_SAIDA_AN-KOSTL = W_BSIS-KOSTL.
  W_SAIDA_AN-SGTXT = W_BSIS-SGTXT.
  W_SAIDA_AN-GSBER = W_BSIS-GSBER.


  W_SAIDA_AN-AUFNR = |{ W_SAIDA_AN-AUFNR ALPHA = OUT }|.
  W_SAIDA_AN-KOSTL = |{ W_SAIDA_AN-KOSTL ALPHA = OUT }|.
  W_SAIDA_AN-HKONT = |{ W_SAIDA_AN-HKONT ALPHA = OUT }|.
  W_SAIDA_AN-ZUONR = |{ W_SAIDA_AN-ZUONR ALPHA = OUT }|.

  APPEND W_SAIDA_AN TO T_SAIDA_AN.

ENDFORM.

FORM REL_CENTRO_CUSTO.

  V_XTCCDMBTR = 0.
  V_XTCCDMBE2 = 0.

  SORT: T_COAS BY AUFNR.


  W_SAIDA_LIQ-AUFNR = |{ W_BSIS-AUFNR ALPHA = OUT }|.
  W_SAIDA_LIQ-KOSTL = |{ W_BSIS-KOSTL ALPHA = OUT }|.

  READ TABLE T_COAS INTO W_COAS WITH KEY AUFNR = W_BSIS-AUFNR.
  IF SY-SUBRC = 0.
    W_SAIDA_LIQ-TXT =  W_COAS-KTEXT.
  ENDIF.

  READ TABLE T_CSKS INTO W_CSKS WITH KEY KOSTL = W_BSIS-KOSTL.
  IF SY-SUBRC = 0.
    W_SAIDA_LIQ-KOSAR =  W_CSKS-KOSAR.
  ENDIF.

  READ TABLE T_CSKT INTO W_CSKT WITH KEY KOSTL = W_BSIS-KOSTL
                                         SPRAS = W_T001-SPRAS.
  IF SY-SUBRC = 0.
    W_SAIDA_LIQ-LTEXT =  W_CSKT-LTEXT.
    W_SAIDA_AN-LTEXT  =  W_CSKT-LTEXT.
  ENDIF.

  READ TABLE T_TKT05 INTO W_TKT05 WITH KEY KOSAR  = W_CSKS-KOSAR.
  IF SY-SUBRC = 0.
    W_SAIDA_LIQ-KTEXT = W_TKT05-KTEXT.
    W_SAIDA_AN-KTEXT  = W_TKT05-KTEXT.
  ENDIF.

  IF  W_BSIS-SHKZG = 'H'.
    V_XTCCDMBTR =  V_XTCCDMBTR + W_BSIS-DMBTR * -1.
    V_XTCCDMBE2 =  V_XTCCDMBE2 + W_BSIS-DMBE2 * -1.
  ELSE.
    V_XTCCDMBTR =  V_XTCCDMBTR + W_BSIS-DMBTR.
    V_XTCCDMBE2 =  V_XTCCDMBE2 + W_BSIS-DMBE2.
  ENDIF.

  W_SAIDA_LIQ-XTCCDMBTR = V_XTCCDMBTR.
  W_SAIDA_LIQ-XCCTDMBE2 = V_XTCCDMBE2.

  APPEND W_SAIDA_LIQ TO T_SAIDA_LIQ.
ENDFORM.

FORM IMPRIMI_ALV_LIQ.

  IF SY-BATCH = 'X'.
    PERFORM PREENCHE_CAT2 USING:
            'AUFNR'       'Ordem'                        '12'          '' ''  '' ,
            'TXT'         'Descrição Ordem'              '40'          ''  ''  '' ,
            'XTDMBTR'     'Total R$'                     '13'          ''  ''  '' ,
            'XTDMBE2'     'Total US$'                    '13'          ''  ''  '' .
*    "CALL SCREEN 0100.
  ELSE.
    REFRESH IT_FIELDCATALOG.
    PERFORM PREENCHE_CAT USING:
         'AUFNR'       'Ordem'                        '12'     ''   'X'     ''  '' ,
         'TXT'         'Descrição Ordem'              '40'     ''   ''     ''  '' ,
         'XTDMBTR'     'Total R$'                     '13'     ''   ''     ''  '' ,
         'XTDMBE2'     'Total US$'                    '13'     ''   ''     ''  '' .
    CALL SCREEN 0100.
  ENDIF.
ENDFORM.

FORM IMPRIMI_ALV_CC.

  IF SY-BATCH = 'X'.
    PERFORM PREENCHE_CAT2 USING:
            'AUFNR'        'Ordem'                       '12'     ''        ''  '' ,
            'TXT'          'Descrição Ordem'             '40'     ''        ''  '' ,
            'KOSTL'        'Centro de Custo'             '15'     ''        ''  '' ,
            'LTEXT'        'Descrição Centro de Custo'   '40'     ''        ''  '' ,
            'KOSAR'        'TP. Centro de Custo'         '16'     ''        ''  '' ,
            'KTEXT'        'Descr. Tp. Centro Custo'     '20'     ''        ''  '' ,
            'XTCCDMBTR'    'Total R$'                    '13'     ''        ''  '' ,
            'XCCTDMBE2'    'Total US$'                   '13'     ''        ''  '' .
    "CALL SCREEN 0102.
  ELSE.
    REFRESH IT_FIELDCATALOG.
    PERFORM PREENCHE_CAT USING:
  'AUFNR'        'Ordem'                       '12'     ''   ''     ''  '' ,
  'TXT'          'Descrição Ordem'             '40'     ''   ''     ''  '' ,
  'KOSTL'        'Centro de Custo'             '15'     ''   ''     ''  '' ,
  'LTEXT'        'Descrição Centro de Custo'   '40'     ''   ''     ''  '' ,
  'KOSAR'        'TP. Centro de Custo'         '16'     ''   ''     ''  '' ,
  'KTEXT'        'Descr. Tp. Centro Custo'     '20'     ''   ''     ''  '' ,
  'XTCCDMBTR'    'Total R$'                    '13'     ''   ''     ''  '' ,
  'XCCTDMBE2'    'Total US$'                   '13'     ''   ''     ''  '' .
    CALL SCREEN 0102.
  ENDIF.
ENDFORM.

FORM IMPRIMI_ALV_LIQ_ANALITICO.


  IF SY-BATCH = 'X'.
    PERFORM PREENCHE_CAT2 USING:
            'AUFNR'       'Ordem'                       '12'     ''        ''  '' ,
            'TXT'         'Descrição Ordem'             '40'     ''        ''  '' ,
            'BELNR'       'Doc. Contábil'               '13'     ''        ''  '' ,
            'BUDAT'       'Data Lançamento'             '15'     ''        ''  '' ,
            'HKONT'       'Conta'                       '10'     ''        ''  '' ,
            'DMBTR'       'Valor R$'                    '13'     ''        'X' '' ,
            'DMBE2'       'Valor US$'                   '13'     ''        'X' '' ,
            'ZUONR'       'Atribuição'                  '10'     ''        ''  '' ,
            'XBLNR'       'Referência'                  '12'     ''        ''  '' ,
            'SGTXT'       'Texto Contábil'              '50'     ''        ''  '' ,
            'KOSTL'       'Centro de Custo'             '16'     ''        ''  '' ,
            'LTEXT'       'Descrição Centro Custo'      '40'     ''        ''  '' ,
            'KOSAR'       'Tp. Centro Custo'            '16'     ''        ''  '' ,
            'KTEXT'       'Descr. Tp. Centro Custo'     '20'     ''        ''  '' ,
            'GSBER'       'Filial'                      '07'     ''        ''  ''.
    "CALL SCREEN 0101.
  ELSE.
    REFRESH IT_FIELDCATALOG.
    PERFORM PREENCHE_CAT USING:
       'AUFNR'       'Ordem'                       '12'     ''    ''    ''  '' ,
       'TXT'         'Descrição Ordem'             '40'     ''    ''    ''  '' ,
       'BELNR'       'Doc. Contábil'               '13'     ''    ''    ''  '' ,
       'BUDAT'       'Data Lançamento'             '15'     ''    ''    ''  '' ,
       'HKONT'       'Conta'                       '10'     ''    ''    ''  '' ,
       'DMBTR'       'Valor R$'                    '13'     ''    ''    'X' '' ,
       'DMBE2'       'Valor US$'                   '13'     ''    ''    'X' '' ,
       'ZUONR'       'Atribuição'                  '10'     ''    ''    ''  '' ,
       'XBLNR'       'Referência'                  '12'     ''    ''    ''  '' ,
       'SGTXT'       'Texto Contábil'              '50'     ''    ''    ''  '' ,
       'KOSTL'       'Centro de Custo'             '16'     ''    ''    ''  '' ,
       'LTEXT'       'Descrição Centro Custo'      '40'     ''    ''    ''  '' ,
       'KOSAR'       'Tp. Centro Custo'            '16'     ''    ''    ''  '' ,
       'KTEXT'       'Descr. Tp. Centro Custo'     '20'     ''    ''    ''  '' ,
       'GSBER'       'Filial'                      '07'     ''    ''    ''  ''.
    CALL SCREEN 0101.
  ENDIF.
ENDFORM.


* Início - Sara Oikawa - CS2019000996 - 30.06.2020
FORM F_ALV_INCONSISTENCIAS_DRE.

  IF SY-BATCH = 'X'.
    PERFORM PREENCHE_CAT2 USING:
            'VERSN'        'Versão DRE'                  '10'     ''        ''  '' ,
            'SAKNR'        'Conta'                       '20'     'X'        ''  '' ,
            'SAKNR_T'      'Descrição Conta'             '40'     ''        ''  '' ,
            'KOSAR'        'TP. Centro Custo'            '12'     ''        ''  '' ,
            'KOSAR_T'      'Descr. Tp. Centro Custo'     '20'     ''        ''  '' ,
            'PRCTR'        'Centro de Lucro'             '20'     'X'        ''  '' ,
            'PRCTR_T'      'Descrição Centro Lucro'      '40'     ''        ''  '' ,
            'MATKL'        'Gpo.Mercadoria'              '12'     ''        ''  '' ,
            'MATKL_T'      'Descrição Gpo.Mercadoria'    '20'     ''        ''  '' .
  ELSE.
    REFRESH IT_FIELDCATALOG.
    PERFORM PREENCHE_CAT USING:
            'VERSN'        'Versão DRE'                  '10'     ''    ''    ''  '' ,
            'SAKNR'        'Conta'                       '12'     'X'   ''    ''  '' ,
            'SAKNR_T'      'Descrição Conta'             '40'     ''    ''    ''  '' ,
            'KOSAR'        'TP. Centro Custo'            '12'     ''    ''    ''  '' ,
            'KOSAR_T'      'Descr. Tp. Centro Custo'     '20'     ''    ''    ''  '' ,
            'PRCTR'        'Centro de Lucro'             '15'     'X'   ''    ''  '' ,
            'PRCTR_T'      'Descrição Centro Lucro'      '40'     ''    ''    ''  '' ,
            'MATKL'        'Gpo.Mercadoria'              '12'     ''    ''    ''  '' ,
            'MATKL_T'      'Descrição Gpo.Mercadoria'    '20'     ''    ''    ''  '' .
    CALL SCREEN 0103.
  ENDIF.
ENDFORM.
* Fim - Sara Oikawa - CS2019000996 - 30.06.2020


FORM PREENCHE_CAT USING VALUE(P_CAMPO)
                        VALUE(P_DESC)
                        VALUE(P_TAM)
                        VALUE(P_ZERO)
                        VALUE(P_HOT)
                        VALUE(P_SUM)
                        VALUE(P_JUST).

  WA_FIELDCATALOG-FIELDNAME = P_CAMPO.
  WA_FIELDCATALOG-COLTEXT   = P_DESC.
  WA_FIELDCATALOG-SCRTEXT_L = P_DESC.
  WA_FIELDCATALOG-SCRTEXT_M = P_DESC.
  WA_FIELDCATALOG-SCRTEXT_S = P_DESC.


  WA_FIELDCATALOG-OUTPUTLEN = P_TAM.
  WA_FIELDCATALOG-HOTSPOT   = P_HOT.
  WA_FIELDCATALOG-NO_ZERO   = P_ZERO.
  WA_FIELDCATALOG-DO_SUM    = P_SUM.
  WA_FIELDCATALOG-JUST      = P_JUST.

  APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

ENDFORM.


FORM PREENCHE_CAT2 USING VALUE(P_CAMPO)
                        VALUE(P_DESC)
                        VALUE(P_TAM)
                        VALUE(P_ZERO)
                        "VALUE(P_HOT)
                        VALUE(P_SUM)
                        VALUE(P_JUST).

  WA_ESTRUTURA-FIELDNAME = P_CAMPO.
  "WA_estrutura-   = P_DESC.
  WA_ESTRUTURA-SELTEXT_L = P_DESC.
  WA_ESTRUTURA-SELTEXT_M = P_DESC.
  WA_ESTRUTURA-SELTEXT_S = P_DESC.


  WA_ESTRUTURA-OUTPUTLEN = P_TAM.
  "WA_ESTRUTURA-HOTSPOT   = P_HOT.
  WA_ESTRUTURA-NO_ZERO   = P_ZERO.
  WA_ESTRUTURA-DO_SUM    = P_SUM.
  WA_ESTRUTURA-JUST      = P_JUST.

  APPEND WA_ESTRUTURA TO ESTRUTURA.

ENDFORM.


FORM USER_COMMAND  USING E_ROW_ID TYPE LVC_S_ROW
                         P_E_COLUMN_ID TYPE LVC_S_COL
                         P_ES_ROW_NO TYPE LVC_S_ROID.
  CLEAR: W_SAIDA_LIQ.
  READ TABLE T_SAIDA_LIQ INTO W_SAIDA_LIQ INDEX E_ROW_ID-INDEX.

  CASE P_E_COLUMN_ID-FIELDNAME.
    WHEN 'AUFNR'.
      REFRESH T_SAIDA_AN_AUX.
      LOOP AT T_SAIDA_AN INTO  W_SAIDA_AN WHERE AUFNR = W_SAIDA_LIQ-AUFNR.
        MOVE-CORRESPONDING W_SAIDA_AN TO W_SAIDA_AN_AUX.
        APPEND W_SAIDA_AN_AUX TO T_SAIDA_AN_AUX.

        CLEAR: W_SAIDA_AN_AUX,
               W_SAIDA_AN,
               W_SAIDA_LIQ.
      ENDLOOP.
      PERFORM IMPRIMI_ALV_LIQ_ANALITICO.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.
  DATA: DATA_INI(10)            TYPE C,
        DATA_FIM(10)            TYPE C,
        P_TEXT                  TYPE SDYDO_TEXT_ELEMENT,
        SDYDO_TEXT_ELEMENT(255),
        P_TEXT_TABLE            TYPE SDYDO_TEXT_TABLE.


  SET PF-STATUS 'STATUS'.
  SET TITLEBAR 'TITULO'.

  IF G_CUSTOM_CONTAINER IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    IF SY-SUBRC <> 0.
      MESSAGE A000(TREE_CONTROL_MSG).
    ENDIF.

    CREATE OBJECT DG_SPLITTER_1
      EXPORTING
        PARENT  = G_CUSTOM_CONTAINER
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_ALV.

    CREATE OBJECT DG_SPLITTER_2
      EXPORTING
        PARENT  = DG_PARENT_1
        ROWS    = 1
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_2A.

    CALL METHOD DG_SPLITTER_1->SET_ROW_HEIGHT
      EXPORTING
        ID     = 1
        HEIGHT = 16.

    CALL METHOD DG_SPLITTER_2->SET_COLUMN_WIDTH
      EXPORTING
        ID    = 1
        WIDTH = 0.

    PERFORM FILL_GS_VARIANT.

    GS_LAYOUT-SEL_MODE   = 'A'.
    GS_LAYOUT-STYLEFNAME = 'CELLSTYLES'.


    CREATE OBJECT CTL_ALV
      EXPORTING
        I_PARENT = DG_PARENT_ALV.

    SET HANDLER: LCL_EVENT_RECEIVER=>ZM_HANDLE_HOTSPOT_REPORT FOR CTL_ALV.

    CALL METHOD CTL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = GS_LAYOUT
        IS_VARIANT      = GS_VARIANT
        "IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
        I_SAVE          = 'A'
      CHANGING
        IT_FIELDCATALOG = IT_FIELDCATALOG
        IT_OUTTAB       = T_SAIDA_LIQ.

    CREATE OBJECT DG_DYNDOC_ID
      EXPORTING
        STYLE = 'ALV_GRID'.

    CALL METHOD DG_DYNDOC_ID->INITIALIZE_DOCUMENT.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 1
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT.

    CALL METHOD TABLE_ELEMENT->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN.

    CALL METHOD TABLE_ELEMENT->SET_COLUMN_STYLE
      EXPORTING
        COL_NO    = 1
        SAP_ALIGN = 'LEFT'
        SAP_STYLE = CL_DD_DOCUMENT=>HEADING.

    IF P_LIQ IS NOT INITIAL.
      P_TEXT = TEXT-005.
    ELSEIF P_TPCE IS NOT INITIAL.
      P_TEXT = TEXT-006.
    ENDIF.

    CALL METHOD COLUMN->ADD_TEXT
      EXPORTING
        TEXT      = P_TEXT
        SAP_STYLE = 'HEADING'.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 2
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT2.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      EXPORTING
        SAP_STYLE   = 'SAP_BOLD'
        STYLE_CLASS = 'SAP_BOLD'
      IMPORTING
        COLUMN      = COLUMN_1.

    CLEAR: P_TEXT_TABLE.

    CALL METHOD COLUMN_1->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE
        FIX_LINES  = 'X'.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN_2.

    CALL METHOD TABLE_ELEMENT2->SET_COLUMN_STYLE
      EXPORTING
        COL_NO       = 2
        SAP_ALIGN    = 'LEFT'
        SAP_FONTSIZE = CL_DD_DOCUMENT=>MEDIUM.

    CLEAR: P_TEXT_TABLE.

    CONCATENATE  SY-DATUM+6(2) '.' SY-DATUM+4(2) '.' SY-DATUM(4)  INTO DATA_INI.

    CONCATENATE 'Data de Processamento:' DATA_INI INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

    CALL METHOD COLUMN_2->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE
        FIX_LINES  = 'X'.

    CALL METHOD DG_DYNDOC_ID->MERGE_DOCUMENT.

    CREATE OBJECT DG_HTML_CNTRL
      EXPORTING
        PARENT = DG_PARENT_2.

    DG_DYNDOC_ID->HTML_CONTROL = DG_HTML_CNTRL.

    CALL METHOD DG_DYNDOC_ID->DISPLAY_DOCUMENT
      EXPORTING
        REUSE_CONTROL      = 'X'
        PARENT             = DG_PARENT_2
      EXCEPTIONS
        HTML_DISPLAY_ERROR = 1.

  ELSE.
    CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = WA_STABLE.
  ENDIF.

ENDMODULE.

FORM FILL_GS_VARIANT .

  GS_VARIANT-REPORT      = SY-REPID.
  GS_VARIANT-HANDLE      = '0100'.
  GS_VARIANT-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT-USERNAME    = ABAP_FALSE.
  GS_VARIANT-VARIANT     = ABAP_FALSE.
  GS_VARIANT-TEXT        = ABAP_FALSE.
  GS_VARIANT-DEPENDVARS  = ABAP_FALSE.

ENDFORM.

FORM XTOP_OF_PAGE. "background
  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      IT_LIST_COMMENTARY = T_TOP
      I_LOGO             = ''.
ENDFORM.

FORM DEFINIR_EVENTOS . "background
  PERFORM F_CARREGAR_EVENTOS USING: SLIS_EV_TOP_OF_PAGE  'XTOP_OF_PAGE'.
ENDFORM.

FORM F_CARREGAR_EVENTOS USING NAME FORM. "background
  CLEAR XS_EVENTS.
  XS_EVENTS-NAME = NAME.
  XS_EVENTS-FORM = FORM.
  APPEND XS_EVENTS TO EVENTS.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0101  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0101 OUTPUT.

  SET PF-STATUS 'STATUS_0101'.
  SET TITLEBAR 'TITULO_0101'.

  IF G_CUSTOM_CONTAINER1 IS INITIAL.
    CREATE OBJECT G_CUSTOM_CONTAINER1
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER1'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    IF SY-SUBRC <> 0.
      MESSAGE A000(TREE_CONTROL_MSG).
    ENDIF.

    CREATE OBJECT DG_SPLITTER_1
      EXPORTING
        PARENT  = G_CUSTOM_CONTAINER1
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_ALV.

    CREATE OBJECT DG_SPLITTER_2
      EXPORTING
        PARENT  = DG_PARENT_1
        ROWS    = 1
        COLUMNS = 0.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 0
      RECEIVING
        CONTAINER = DG_PARENT_2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_2A.

    CALL METHOD DG_SPLITTER_1->SET_ROW_HEIGHT
      EXPORTING
        ID     = 1
        HEIGHT = 0.

    CALL METHOD DG_SPLITTER_2->SET_COLUMN_WIDTH
      EXPORTING
        ID    = 1
        WIDTH = 0.

    GS_VARIANT1-REPORT      = SY-REPID.
    GS_VARIANT1-HANDLE      = '0101'.
    GS_VARIANT1-LOG_GROUP   = ABAP_FALSE.
    GS_VARIANT1-USERNAME    = ABAP_FALSE.
    GS_VARIANT1-VARIANT     = ABAP_FALSE.
    GS_VARIANT1-TEXT        = ABAP_FALSE.
    GS_VARIANT1-DEPENDVARS  = ABAP_FALSE.


    GS_LAYOUT1-SEL_MODE   = 'A'.
    GS_LAYOUT1-STYLEFNAME = 'CELLSTYLES'.

    CREATE OBJECT CTL_ALV
      EXPORTING
        I_PARENT = DG_PARENT_ALV.

    SET HANDLER: LCL_EVENT_RECEIVER=>ZM_HANDLE_HOTSPOT_REPORT FOR CTL_ALV.

    CALL METHOD CTL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = GS_LAYOUT1
        IS_VARIANT      = GS_VARIANT1
        "IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
        I_SAVE          = 'A'
      CHANGING
        IT_FIELDCATALOG = IT_FIELDCATALOG
        IT_OUTTAB       = T_SAIDA_AN_AUX.

    CREATE OBJECT DG_DYNDOC_ID
      EXPORTING
        STYLE = 'ALV_GRID'.
  ELSE.
    CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = WA_STABLE.
  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0101  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0101 INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0102  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0102 OUTPUT.
  DATA: DATA_INI2(10)            TYPE C,
        DATA_FIM2(10)            TYPE C,
        P_TEXT2                  TYPE SDYDO_TEXT_ELEMENT,
        SDYDO_TEXT_ELEMENT2(255),
        P_TEXT_TABLE2            TYPE SDYDO_TEXT_TABLE.


  SET PF-STATUS 'STATUS_0102'.
  SET TITLEBAR 'TITULO_0102'.

  IF G_CUSTOM_CONTAINER2 IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER2
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER2'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    IF SY-SUBRC <> 0.
      MESSAGE A000(TREE_CONTROL_MSG).
    ENDIF.

    CREATE OBJECT DG_SPLITTER_1
      EXPORTING
        PARENT  = G_CUSTOM_CONTAINER2
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_ALV.

    CREATE OBJECT DG_SPLITTER_2
      EXPORTING
        PARENT  = DG_PARENT_1
        ROWS    = 1
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_2A.

    CALL METHOD DG_SPLITTER_1->SET_ROW_HEIGHT
      EXPORTING
        ID     = 1
        HEIGHT = 14.

    CALL METHOD DG_SPLITTER_2->SET_COLUMN_WIDTH
      EXPORTING
        ID    = 1
        WIDTH = 0.


    GS_VARIANT2-REPORT      = SY-REPID.
    GS_VARIANT2-HANDLE      = '0102'.
    GS_VARIANT2-LOG_GROUP   = ABAP_FALSE.
    GS_VARIANT2-USERNAME    = ABAP_FALSE.
    GS_VARIANT2-VARIANT     = ABAP_FALSE.
    GS_VARIANT2-TEXT        = ABAP_FALSE.
    GS_VARIANT2-DEPENDVARS  = ABAP_FALSE.


    GS_LAYOUT2-SEL_MODE   = 'A'.
    GS_LAYOUT2-STYLEFNAME = 'CELLSTYLES'.

    CREATE OBJECT CTL_ALV02
      EXPORTING
        I_PARENT = DG_PARENT_ALV.

    SET HANDLER: LCL_EVENT_RECEIVER=>ZM_HANDLE_HOTSPOT_REPORT FOR CTL_ALV02.

    CALL METHOD CTL_ALV02->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = GS_LAYOUT2
        IS_VARIANT      = GS_VARIANT2
        "IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
        I_SAVE          = 'A'
      CHANGING
        IT_FIELDCATALOG = IT_FIELDCATALOG
        IT_OUTTAB       = T_SAIDA_LIQ.

    CREATE OBJECT DG_DYNDOC_ID
      EXPORTING
        STYLE = 'ALV_GRID_0102'.

    CALL METHOD DG_DYNDOC_ID->INITIALIZE_DOCUMENT.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 1
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT.

    CALL METHOD TABLE_ELEMENT->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN.

    CALL METHOD TABLE_ELEMENT->SET_COLUMN_STYLE
      EXPORTING
        COL_NO    = 1
        SAP_ALIGN = 'LEFT'
        SAP_STYLE = CL_DD_DOCUMENT=>HEADING.

    IF P_LIQ IS NOT INITIAL.
      P_TEXT2 = TEXT-005.
    ELSEIF P_TPCE IS NOT INITIAL.
      P_TEXT2 = TEXT-006.
    ENDIF.

    CALL METHOD COLUMN->ADD_TEXT
      EXPORTING
        TEXT      = P_TEXT2
        SAP_STYLE = 'HEADING'.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 2
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT2.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      EXPORTING
        SAP_STYLE   = 'SAP_BOLD'
        STYLE_CLASS = 'SAP_BOLD'
      IMPORTING
        COLUMN      = COLUMN_1.

    CLEAR: P_TEXT_TABLE2.

    CALL METHOD COLUMN_1->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE2
        FIX_LINES  = 'X'.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN_2.

    CALL METHOD TABLE_ELEMENT2->SET_COLUMN_STYLE
      EXPORTING
        COL_NO       = 2
        SAP_ALIGN    = 'LEFT'
        SAP_FONTSIZE = CL_DD_DOCUMENT=>MEDIUM.

    CLEAR: P_TEXT_TABLE2.

    CONCATENATE  SY-DATUM+6(2) '.' SY-DATUM+4(2) '.' SY-DATUM(4)  INTO DATA_INI2.

    CONCATENATE 'Data de Processamento:' DATA_INI2 INTO SDYDO_TEXT_ELEMENT2 SEPARATED BY SPACE.
    APPEND SDYDO_TEXT_ELEMENT2 TO P_TEXT_TABLE2.

    CALL METHOD COLUMN_2->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE2
        FIX_LINES  = 'X'.

    CALL METHOD DG_DYNDOC_ID->MERGE_DOCUMENT.

    CREATE OBJECT DG_HTML_CNTRL
      EXPORTING
        PARENT = DG_PARENT_2.

    DG_DYNDOC_ID->HTML_CONTROL = DG_HTML_CNTRL.

    CALL METHOD DG_DYNDOC_ID->DISPLAY_DOCUMENT
      EXPORTING
        REUSE_CONTROL      = 'X'
        PARENT             = DG_PARENT_2
      EXCEPTIONS
        HTML_DISPLAY_ERROR = 1.

  ELSE.
    CALL METHOD CTL_ALV02->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = WA_STABLE2.
  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0102  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0102 INPUT.
  LEAVE TO SCREEN 0.

ENDMODULE.

* Início - Sara Oikawa - CS2019000996 - 30.06.2020
*&---------------------------------------------------------------------*
*&      Module  STATUS_0103  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0103 OUTPUT.

  DATA: DATA_INI3(10)            TYPE C,
        DATA_FIM3(10)            TYPE C,
        P_TEXT3                  TYPE SDYDO_TEXT_ELEMENT,
        SDYDO_TEXT_ELEMENT3(255),
        P_TEXT_TABLE3            TYPE SDYDO_TEXT_TABLE.


  SET PF-STATUS 'STATUS_0103'.
  SET TITLEBAR  'TITULO_0103'.

  IF G_CUSTOM_CONTAINER3 IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER3
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER3'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    IF SY-SUBRC <> 0.
      MESSAGE A000(TREE_CONTROL_MSG).
    ENDIF.

    CREATE OBJECT DG_SPLITTER_1
      EXPORTING
        PARENT  = G_CUSTOM_CONTAINER3
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_ALV.

    CREATE OBJECT DG_SPLITTER_2
      EXPORTING
        PARENT  = DG_PARENT_1
        ROWS    = 1
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_2A.

    CALL METHOD DG_SPLITTER_1->SET_ROW_HEIGHT
      EXPORTING
        ID     = 1
        HEIGHT = 14.

    CALL METHOD DG_SPLITTER_2->SET_COLUMN_WIDTH
      EXPORTING
        ID    = 1
        WIDTH = 0.


    GS_VARIANT2-REPORT      = SY-REPID.
    GS_VARIANT2-HANDLE      = '0103'.
    GS_VARIANT2-LOG_GROUP   = ABAP_FALSE.
    GS_VARIANT2-USERNAME    = ABAP_FALSE.
    GS_VARIANT2-VARIANT     = ABAP_FALSE.
    GS_VARIANT2-TEXT        = ABAP_FALSE.
    GS_VARIANT2-DEPENDVARS  = ABAP_FALSE.


    GS_LAYOUT2-SEL_MODE   = 'A'.
    GS_LAYOUT2-STYLEFNAME = 'CELLSTYLES'.

    CREATE OBJECT CTL_ALV03
      EXPORTING
        I_PARENT = DG_PARENT_ALV.

    SET HANDLER: LCL_EVENT_RECEIVER=>ZM_HANDLE_HOTSPOT_REPORT FOR CTL_ALV03.

    CALL METHOD CTL_ALV03->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = GS_LAYOUT2
        IS_VARIANT      = GS_VARIANT2
        "IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
        I_SAVE          = 'A'
      CHANGING
        IT_FIELDCATALOG = IT_FIELDCATALOG
        IT_OUTTAB       = T_SAIDA_IDRE.

    CREATE OBJECT DG_DYNDOC_ID
      EXPORTING
        STYLE = 'ALV_GRID_0103'.

    CALL METHOD DG_DYNDOC_ID->INITIALIZE_DOCUMENT.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 1
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT.

    CALL METHOD TABLE_ELEMENT->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN.

    CALL METHOD TABLE_ELEMENT->SET_COLUMN_STYLE
      EXPORTING
        COL_NO    = 1
        SAP_ALIGN = 'LEFT'
        SAP_STYLE = CL_DD_DOCUMENT=>HEADING.

    "Relatório de Análise de Inconsistências DRE Conta Contábil\Tp.Centro Custo\Centro Lucro\Gpo.Mercadoria
    P_TEXT2 = TEXT-008.

    CALL METHOD COLUMN->ADD_TEXT
      EXPORTING
        TEXT      = P_TEXT2
        SAP_STYLE = 'HEADING'.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 2
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT2.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      EXPORTING
        SAP_STYLE   = 'SAP_BOLD'
        STYLE_CLASS = 'SAP_BOLD'
      IMPORTING
        COLUMN      = COLUMN_1.

    CLEAR: P_TEXT_TABLE2.

    CALL METHOD COLUMN_1->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE2
        FIX_LINES  = 'X'.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN_2.

    CALL METHOD TABLE_ELEMENT2->SET_COLUMN_STYLE
      EXPORTING
        COL_NO       = 2
        SAP_ALIGN    = 'LEFT'
        SAP_FONTSIZE = CL_DD_DOCUMENT=>MEDIUM.

    CLEAR: P_TEXT_TABLE3.

    CONCATENATE  SY-DATUM+6(2) '.' SY-DATUM+4(2) '.' SY-DATUM(4)  INTO DATA_INI3.

    CONCATENATE 'Data de Processamento:' DATA_INI3 INTO SDYDO_TEXT_ELEMENT3 SEPARATED BY SPACE.
    APPEND SDYDO_TEXT_ELEMENT3 TO P_TEXT_TABLE3.

    CONCATENATE 'Empresa:' P_BUKRS-LOW INTO SDYDO_TEXT_ELEMENT3 SEPARATED BY SPACE.
    APPEND SDYDO_TEXT_ELEMENT3 TO P_TEXT_TABLE3.
    CONCATENATE 'Ano:' P_GJAHR-LOW     INTO SDYDO_TEXT_ELEMENT3 SEPARATED BY SPACE.
    APPEND SDYDO_TEXT_ELEMENT3 TO P_TEXT_TABLE3.
    CONCATENATE 'Mês:' P_MONAT-LOW     INTO SDYDO_TEXT_ELEMENT3 SEPARATED BY SPACE.
    APPEND SDYDO_TEXT_ELEMENT3 TO P_TEXT_TABLE3.

    CALL METHOD COLUMN_2->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE3
        FIX_LINES  = 'X'.

    CALL METHOD DG_DYNDOC_ID->MERGE_DOCUMENT.

    CREATE OBJECT DG_HTML_CNTRL
      EXPORTING
        PARENT = DG_PARENT_2.

    DG_DYNDOC_ID->HTML_CONTROL = DG_HTML_CNTRL.

    CALL METHOD DG_DYNDOC_ID->DISPLAY_DOCUMENT
      EXPORTING
        REUSE_CONTROL      = 'X'
        PARENT             = DG_PARENT_2
      EXCEPTIONS
        HTML_DISPLAY_ERROR = 1.

  ELSE.
    CALL METHOD CTL_ALV03->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = WA_STABLE2.
  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0103  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0103 INPUT.
  LEAVE TO SCREEN 0.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  F_SELECIONA_INCONSIST_DRE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM F_SELECIONA_INCONSIST_DRE.

  DATA: T_SKAT  TYPE TABLE OF SKAT,
        W_SKAT  TYPE SKAT,
        T_CEPCT TYPE TABLE OF CEPCT,
        W_CEPCT TYPE CEPCT,
        T_TKT05 TYPE TABLE OF TKT05,
        W_TKT05 TYPE TKT05,
        T_T023T TYPE TABLE OF T023T,
        W_T023T TYPE T023T.


  REFRESH: T_DRE_02,
           T_DRE_02_FAE,
           T_DRE_EST03,
           T_DRE_EST04,
           T_DRE_EST05,
           T_DRE_EST06,
           T_SAIDA_IDRE.

  CLEAR: W_DRE_EST08.

  " Busca de Dados do Movimento do Mês
  SELECT  BUKRS
          GJAHR
          POPER
          SAKNR
          KTOPL
          KOKRS
*          KOSTL
          KOSAR
          PRCTR
          MATKL
    FROM  ZGLT_DRE_02
    INTO  TABLE T_DRE_02
   WHERE BUKRS IN P_BUKRS
     AND GJAHR IN P_GJAHR
     AND POPER IN P_MONAT.

  SORT T_DRE_02 BY BUKRS GJAHR POPER  SAKNR  KTOPL  KOKRS   KOSAR  PRCTR  MATKL.
  DELETE ADJACENT DUPLICATES FROM T_DRE_02.

  " Busca de Dados da Estrutura da DRE ativa
  SELECT SINGLE *
    INTO W_DRE_EST08
    FROM ZGL015_DRE_EST08
   WHERE BUKRS_B EQ P_BUKRS-LOW.

  " Busca Descrições

  SELECT SINGLE BUKRS SPRAS
     FROM T001
     INTO W_T001
   WHERE BUKRS EQ P_BUKRS-LOW.

  "Descrição Conta
  SELECT *
    FROM SKAT
    INTO TABLE T_SKAT
  FOR ALL ENTRIES IN T_DRE_02
  WHERE SPRAS EQ W_T001-SPRAS
   AND  KTOPL EQ T_DRE_02-KTOPL
   AND  SAKNR EQ T_DRE_02-SAKNR.

  SORT T_SKAT BY KTOPL SAKNR.


  " Descrição Tipo Centro Custo
  SELECT *
    FROM TKT05
    INTO TABLE T_TKT05
  FOR ALL ENTRIES IN T_DRE_02
  WHERE SPRAS EQ W_T001-SPRAS
   AND  KOSAR EQ T_DRE_02-KOSAR.

  SORT T_TKT05 BY KOSAR.

  "Descrição Centro Lucro
  SELECT *
    FROM CEPCT
    INTO TABLE T_CEPCT
  FOR ALL ENTRIES IN T_DRE_02
  WHERE SPRAS EQ W_T001-SPRAS
   AND  PRCTR EQ T_DRE_02-PRCTR
   AND  KOKRS EQ T_DRE_02-KOKRS.

  SORT T_CEPCT BY PRCTR ASCENDING
                  DATBI DESCENDING
                  KOKRS ASCENDING.

  " Descrição Grupo Mercadoria
  SELECT *
    FROM T023T
    INTO TABLE T_T023T
  FOR ALL ENTRIES IN T_DRE_02
  WHERE SPRAS EQ W_T001-SPRAS
   AND  MATKL EQ T_DRE_02-MATKL.

  SORT T_T023T BY MATKL.

  " Busca de Dados da Estrutura da DRE Conta Contabil
  " Quando ZGLT_DRE_02-KOSAR, ZGLT_DRE_02-PRCTR e
  " ZGLT_DRE_02-MATKL forem igual a branco

  IF NOT T_DRE_02[] IS INITIAL.
    SELECT *
      INTO TABLE T_DRE_EST03
      FROM ZGL015_DRE_EST03
      FOR ALL ENTRIES IN T_DRE_02
     WHERE BUKRS EQ T_DRE_02-BUKRS
       AND VERSN EQ W_DRE_EST08-VERSN
       AND SAKNR EQ T_DRE_02-SAKNR.
  ENDIF.

  SORT T_DRE_EST03 BY BUKRS VERSN SAKNR.

  " Busca de Dados da Estrutura da DRE objeto de Custos
  " Quando ZGLT_DRE_02-SAKNR e ZGLT_DRE_02-KOSAR for diferente de branco


  IF NOT T_DRE_02[] IS INITIAL.
    SELECT *
      INTO TABLE T_DRE_EST04
      FROM ZGL015_DRE_EST04
      FOR ALL ENTRIES IN T_DRE_02
     WHERE BUKRS EQ T_DRE_02-BUKRS
       AND VERSN EQ W_DRE_EST08-VERSN
       AND SAKNR EQ T_DRE_02-SAKNR
       AND KOSAR EQ T_DRE_02-KOSAR.
  ENDIF.

  SORT T_DRE_EST04 BY BUKRS VERSN SAKNR KOSAR.

  " Busca de Dados da Estrutura da DRE Centro de Lucro
  " Se ZGLT_DRE_02-SAKNR e ZGLT_DRE_02-PRCTR for diferente de branco
  " e ZGLT_DRE_02-KOSAR e ZGLT_DRE_02-MATKL igual a branco

  IF NOT T_DRE_02[] IS INITIAL.
    SELECT *
      INTO TABLE T_DRE_EST05
      FROM ZGL015_DRE_EST05
      FOR ALL ENTRIES IN T_DRE_02
     WHERE BUKRS EQ T_DRE_02-BUKRS
       AND VERSN EQ W_DRE_EST08-VERSN
       AND SAKNR EQ T_DRE_02-SAKNR
       AND PRCTR EQ T_DRE_02-PRCTR.
  ENDIF.

  SORT T_DRE_EST05 BY BUKRS VERSN SAKNR PRCTR.

  " Busca de Dados da Estrutura da DRE Grupo de Mercadoria
  " Quando ZGLT_DRE_02-SAKNR e ZGLT_DRE_02-MATKL for diferente de branco
  " e ZGLT_DRE_02-KOSAR e ZGLT_DRE_02-PRCTR igual a branco

  IF NOT T_DRE_02[] IS INITIAL.
    SELECT *
      INTO TABLE T_DRE_EST06
      FROM ZGL015_DRE_EST06
      FOR ALL ENTRIES IN T_DRE_02
     WHERE BUKRS EQ T_DRE_02-BUKRS
       AND VERSN EQ W_DRE_EST08-VERSN
       AND SAKNR EQ T_DRE_02-SAKNR
       AND MATKL EQ T_DRE_02-MATKL.
  ENDIF.

  SORT T_DRE_EST06 BY BUKRS VERSN SAKNR MATKL.


  " Verificações e montagem da Tabela de Saída com Inconsistências

  LOOP AT T_DRE_02 INTO W_DRE_02.

    CLEAR W_SAIDA_IDRE.

    READ TABLE T_SKAT INTO W_SKAT WITH KEY KTOPL = W_DRE_02-KTOPL
                                           SAKNR = W_DRE_02-SAKNR
                                  BINARY SEARCH.
    IF SY-SUBRC IS INITIAL.
      W_SAIDA_IDRE-SAKNR_T = W_SKAT-TXT50.
    ENDIF.

    " Valida Dados da Estrutura da DRE Conta Contabil
    IF  W_DRE_02-KOSAR IS INITIAL AND
        W_DRE_02-PRCTR IS INITIAL AND
        W_DRE_02-MATKL IS INITIAL.

      READ TABLE T_DRE_EST03 INTO W_DRE_EST03 WITH KEY BUKRS = W_DRE_02-BUKRS
                                                       VERSN = W_DRE_EST08-VERSN
                                                       SAKNR = W_DRE_02-SAKNR
                                              BINARY SEARCH.
      IF SY-SUBRC IS NOT INITIAL.
        W_SAIDA_IDRE-VERSN = W_DRE_EST08-VERSN.
        W_SAIDA_IDRE-SAKNR = W_DRE_02-SAKNR.
        APPEND W_SAIDA_IDRE TO T_SAIDA_IDRE.
        CONTINUE.
      ENDIF.

    ENDIF.

    " Valida Dados da Estrutura da DRE objeto de Custos
    IF  W_DRE_02-SAKNR IS NOT INITIAL AND
        W_DRE_02-KOSAR IS NOT INITIAL.

      READ TABLE T_DRE_EST04 INTO W_DRE_EST04 WITH KEY BUKRS = W_DRE_02-BUKRS
                                                       VERSN = W_DRE_EST08-VERSN
                                                       SAKNR = W_DRE_02-SAKNR
                                                       KOSAR = W_DRE_02-KOSAR
                                              BINARY SEARCH.
      IF SY-SUBRC IS NOT INITIAL.

        W_SAIDA_IDRE-VERSN = W_DRE_EST08-VERSN.
        W_SAIDA_IDRE-SAKNR = W_DRE_02-SAKNR.
        W_SAIDA_IDRE-KOSAR = W_DRE_02-KOSAR.

        READ TABLE T_TKT05 INTO W_TKT05 WITH KEY KOSAR = W_DRE_02-KOSAR
                                        BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          W_SAIDA_IDRE-KOSAR_T = W_TKT05-KTEXT.
        ENDIF.

        APPEND W_SAIDA_IDRE TO T_SAIDA_IDRE.
        CONTINUE.
      ENDIF.
    ENDIF.

    " Valida Dados da Estrutura da DRE Centro de Lucro
    IF  W_DRE_02-SAKNR IS NOT INITIAL AND
        W_DRE_02-PRCTR IS NOT INITIAL AND
        W_DRE_02-KOSAR IS INITIAL     AND
        W_DRE_02-MATKL IS INITIAL.

      READ TABLE T_DRE_EST05 INTO W_DRE_EST05 WITH KEY BUKRS = W_DRE_02-BUKRS
                                                       VERSN = W_DRE_EST08-VERSN
                                                       SAKNR = W_DRE_02-SAKNR
                                                       PRCTR = W_DRE_02-PRCTR
                                              BINARY SEARCH.
      IF SY-SUBRC IS NOT INITIAL.
        W_SAIDA_IDRE-VERSN = W_DRE_EST08-VERSN.
        W_SAIDA_IDRE-SAKNR = W_DRE_02-SAKNR.
        W_SAIDA_IDRE-PRCTR = W_DRE_02-PRCTR.

        READ TABLE T_CEPCT INTO W_CEPCT WITH KEY PRCTR = W_DRE_02-PRCTR
                                                 KOKRS = W_DRE_02-KOKRS
                                        BINARY SEARCH.

        IF SY-SUBRC IS INITIAL.
          W_SAIDA_IDRE-PRCTR_T = W_CEPCT-KTEXT.
        ENDIF.


        APPEND W_SAIDA_IDRE TO T_SAIDA_IDRE.
        CONTINUE.
      ENDIF.
    ENDIF.

    " Quando ZGLT_DRE_02-SAKNR e ZGLT_DRE_02-MATKL for diferente de branco
    " e ZGLT_DRE_02-KOSAR e ZGLT_DRE_02-PRCTR igual a branco

    " Valida Dados da Estrutura da DRE Grupo de Mercadoria
    IF  W_DRE_02-SAKNR IS NOT INITIAL AND
        W_DRE_02-MATKL IS NOT INITIAL AND
        W_DRE_02-KOSAR IS INITIAL     AND
        W_DRE_02-PRCTR IS INITIAL.

      READ TABLE T_DRE_EST06 INTO W_DRE_EST06 WITH KEY BUKRS = W_DRE_02-BUKRS
                                                       VERSN = W_DRE_EST08-VERSN
                                                       SAKNR = W_DRE_02-SAKNR
                                                       MATKL = W_DRE_02-MATKL
                                              BINARY SEARCH.
      IF SY-SUBRC IS NOT INITIAL.
        W_SAIDA_IDRE-VERSN = W_DRE_EST08-VERSN.
        W_SAIDA_IDRE-SAKNR = W_DRE_02-SAKNR.
        W_SAIDA_IDRE-MATKL = W_DRE_02-MATKL.

        READ TABLE T_T023T INTO W_T023T WITH KEY MATKL = W_DRE_02-MATKL
                                        BINARY SEARCH.

        IF SY-SUBRC IS INITIAL.
          W_SAIDA_IDRE-MATKL_T = W_T023T-WGBEZ.
        ENDIF.

        APPEND W_SAIDA_IDRE TO T_SAIDA_IDRE.
        CONTINUE.
      ENDIF.

    ENDIF.

  ENDLOOP.

  SORT T_SAIDA_IDRE BY VERSN SAKNR KOSAR PRCTR MATKL.
  DELETE ADJACENT DUPLICATES FROM T_SAIDA_IDRE.


ENDFORM.
* Fim - Sara Oikawa - CS2019000996 - 30.06.2020
