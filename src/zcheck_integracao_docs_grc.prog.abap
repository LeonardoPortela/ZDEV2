*&---------------------------------------------------------------------*
*& Report  ZCHECK_INTEGRACAO_DOCS_GRC
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZCHECK_INTEGRACAO_DOCS_GRC.

  DATA: IT_ZEVENT_IN     TYPE TABLE OF ZEVENT_IN,
        IT_ZEVENT_IN_AUX TYPE TABLE OF ZEVENT_IN,

        IT_EVENTS_IN_PROC TYPE J_1BNFE_EVENT_IN_TAB,
        WL_EVENTS_IN_PROC TYPE J_1BNFE_EVENT_IN,
        IT_BAPI_RET       TYPE BAPIRETTAB.


  DATA: lva_response_time TYPE ZEVENT_IN-reply_tmpl.

  "Para Execução em backgound (jobs) """"""""""""""""""""""""""""
  IF SY-BATCH EQ ABAP_TRUE.
    TRY .
      ZCL_JOB=>GET_CK_PROGRAM_EXECUCAO( EXPORTING I_NOME_PROGRAM = SY-CPROG IMPORTING E_QTD = DATA(E_QTD) ).
    CATCH ZCX_JOB.
      E_QTD = 1.
    ENDTRY.

    IF E_QTD GT 1.
      LEAVE PROGRAM.
    ENDIF.
  ENDIF.

*-----------------------------------------------------------------------------*
* Checar Documentos que retornaram autorização e não foi atribuido link de impressao
*-----------------------------------------------------------------------------*
  DATA: V_DATA_START      TYPE SY-DATUM,
        IT_ACTIVE_AJUSTE  TYPE TABLE OF J_1BNFE_ACTIVE.

  V_DATA_START = SY-DATUM - 2.



  CLEAR: IT_ACTIVE_AJUSTE[].

  SELECT AC~* APPENDING TABLE @IT_ACTIVE_AJUSTE
    FROM J_1BNFE_ACTIVE AS AC INNER JOIN ZIB_NFE AS ZB ON AC~DOCNUM = ZB~DOCNUM
    WHERE AC~CREDAT       GE @V_DATA_START
      AND AC~DOCSTA       EQ '1'
      AND AC~SCSSTA       NE '2'
      AND ZB~DS_URL_DANFE EQ @SPACE.


  SELECT AC~* APPENDING TABLE @IT_ACTIVE_AJUSTE
    FROM J_1BNFE_ACTIVE AS AC INNER JOIN ZSDT0102 AS ZB ON AC~DOCNUM = ZB~DOCNUM
    WHERE AC~CREDAT       GE @V_DATA_START
      AND AC~MODEL        EQ '58'
      AND AC~DOCSTA       EQ '1'
      AND AC~SCSSTA       NE '2'
      AND ZB~URL_SEFAZ    EQ @SPACE.

  SORT IT_ACTIVE_AJUSTE BY DOCNUM.
  DELETE ADJACENT DUPLICATES FROM IT_ACTIVE_AJUSTE COMPARING DOCNUM.

  LOOP AT IT_ACTIVE_AJUSTE INTO DATA(WL_ACTIVE).
    CALL FUNCTION 'Z_GRC_RETORNO_AUTH_DOC'
      EXPORTING
        I_ACTTAB = WL_ACTIVE.
  ENDLOOP.

  COMMIT WORK.

*-----------------------------------------------------------------------------*
* Processar Eventos Pendentes
*-----------------------------------------------------------------------------*
  CLEAR: IT_ZEVENT_IN[], IT_EVENTS_IN_PROC[], IT_ZEVENT_IN_AUX[].

  lva_response_time =  V_DATA_START && '000000'.

  SELECT *
    FROM ZEVENT_IN INTO TABLE IT_ZEVENT_IN_AUX
   WHERE RG_ATUALIZADO EQ ABAP_FALSE
     AND REPLY_TMPL    GE LVA_RESPONSE_TIME.

  LOOP AT IT_ZEVENT_IN_AUX INTO DATA(WL_EVENT_AUX).
    SELECT SINGLE *
      FROM J_1BNFE_EVENT INTO @DATA(WL_IB_EVENT_IN)
     WHERE DOCNUM     EQ @WL_EVENT_AUX-DOCNUM
       AND EXT_EVENT  EQ @WL_EVENT_AUX-EXT_EVENT
       AND SEQNUM     EQ @WL_EVENT_AUX-SEQNUM.

    DATA(LVA_RG_ATUALIZADO) = ABAP_FALSE.
    IF ( SY-SUBRC EQ 0 ) AND ( WL_IB_EVENT_IN-DOCSTA IS NOT INITIAL ).
      LVA_RG_ATUALIZADO = ABAP_TRUE.
    ENDIF.

    SELECT SINGLE *
      FROM J_1BNFE_ACTIVE INTO @DATA(LVA_ACTIVE_NFE)
     WHERE DOCNUM EQ @WL_EVENT_AUX-DOCNUM.

    IF ( SY-SUBRC EQ 0 ) AND ( LVA_ACTIVE_NFE-ACTION_REQU IS NOT INITIAL ) .
      LVA_RG_ATUALIZADO = ABAP_TRUE.
    ENDIF.

    IF LVA_RG_ATUALIZADO EQ ABAP_TRUE.
      WL_EVENT_AUX-RG_ATUALIZADO = ABAP_TRUE.
      MODIFY ZEVENT_IN FROM WL_EVENT_AUX.
      COMMIT WORK.
    ENDIF.
  ENDLOOP.

  CHECK IT_ZEVENT_IN_AUX[] IS NOT INITIAL.

  WAIT UP TO 60 SECONDS.

  SELECT *
    FROM ZEVENT_IN INTO TABLE IT_ZEVENT_IN
     FOR ALL ENTRIES IN IT_ZEVENT_IN_AUX
   WHERE DOCNUM        EQ IT_ZEVENT_IN_AUX-DOCNUM
     AND EXT_EVENT     EQ IT_ZEVENT_IN_AUX-EXT_EVENT
     AND SEQNUM        EQ IT_ZEVENT_IN_AUX-SEQNUM
     AND RG_ATUALIZADO EQ ABAP_FALSE
     AND REPLY_TMPL    GE LVA_RESPONSE_TIME.

  CHECK IT_ZEVENT_IN[] IS NOT INITIAL.

  LOOP AT IT_ZEVENT_IN INTO DATA(WL_EVENT_IN).

    CLEAR: WL_EVENTS_IN_PROC, IT_EVENTS_IN_PROC[], IT_BAPI_RET[].

    MOVE-CORRESPONDING WL_EVENT_IN TO WL_EVENTS_IN_PROC.

    APPEND WL_EVENTS_IN_PROC TO IT_EVENTS_IN_PROC.

    CALL FUNCTION 'J_1BNFE_EVENT_IN'
      TABLES
        IT_EVENTS         = IT_EVENTS_IN_PROC
        CT_BAPIRET2       = IT_BAPI_RET.
  ENDLOOP.


  COMMIT WORK.
