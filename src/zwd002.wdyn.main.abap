METHOD ONACTIONACTION_BLOQUE .
  DATA LO_WINDOW_MANAGER TYPE REF TO IF_WD_WINDOW_MANAGER.
  DATA LO_API_COMPONENT  TYPE REF TO IF_WD_COMPONENT.
  DATA LO_WINDOW         TYPE REF TO IF_WD_WINDOW.
  DATA:  LD_INDEX TYPE  SY-INDEX.

  DATA: IT_SELROWS  TYPE WDR_CONTEXT_ELEMENT_SET,
        WA_SELROWS LIKE LINE OF IT_SELROWS.

  DATA LO_ND_NODE_ALV TYPE REF TO IF_WD_CONTEXT_NODE.
  DATA LO_EL_NODE_ALV TYPE REF TO IF_WD_CONTEXT_ELEMENT.
  DATA LS_NODE_ALV TYPE  WD_THIS->ELEMENT_NODE_ALV.
  DATA: LT_NODE_ALV TYPE TABLE OF WD_THIS->ELEMENT_NODE_ALV,
        TL_NRO_SOL_OV TYPE TABLE OF ZSDS007,
        WL_NRO_SOL_OV TYPE ZSDS007,
        TL_SAIDA_EXEC TYPE TABLE OF ZSDS010.

  DATA: ITEMS_NODE TYPE REF TO IF_WD_CONTEXT_NODE,
        TL_TABLE TYPE STANDARD TABLE OF IF_INPUT_VIEW=>ELEMENT_NODE_ALV,
        WL_TABLE TYPE IF_INPUT_VIEW=>ELEMENT_NODE_ALV.

**      navigate from <CONTEXT> to <NODE_ALV> via lead selection
  LO_ND_NODE_ALV = WD_CONTEXT->GET_CHILD_NODE( NAME = WD_THIS->WDCTX_NODE_ALV ).
  IT_SELROWS  = LO_ND_NODE_ALV->GET_SELECTED_ELEMENTS( ).

  ITEMS_NODE = WD_CONTEXT->GET_CHILD_NODE( NAME = `NODE_ALV` ).
  ITEMS_NODE->GET_STATIC_ATTRIBUTES_TABLE( IMPORTING TABLE = TL_TABLE ).

  LOOP AT IT_SELROWS INTO WA_SELROWS.
    CALL METHOD WA_SELROWS->GET_STATIC_ATTRIBUTES
      IMPORTING
        STATIC_ATTRIBUTES = LS_NODE_ALV.

    MOVE: LS_NODE_ALV-NRO_SOL_OV TO WL_NRO_SOL_OV-NRO_SOL_OV,
          LS_NODE_ALV-POSNR      TO WL_NRO_SOL_OV-POSNR.

    APPEND WL_NRO_SOL_OV TO TL_NRO_SOL_OV.

    CLEAR  WL_NRO_SOL_OV.
  ENDLOOP.

  IF TL_NRO_SOL_OV[] IS NOT INITIAL.
    REFRESH: TL_SAIDA_EXEC.
    CALL FUNCTION 'ZSDMF005_MODIF_STATUS_ITEM_SOL'
      EXPORTING
        I_TIPO                 = '2'
        I_STATUS               = 'B'
      TABLES
        TI_NRO_SOL_OV          = TL_NRO_SOL_OV
        TE_SAIDA_EXEC          = TL_SAIDA_EXEC
      EXCEPTIONS
        OV_JA_CRIADA           = 1
        SOLICITACAO_NAO_EXISTE = 2
        OTHERS                 = 3.

    IF TL_SAIDA_EXEC[] IS NOT INITIAL.

      DATA:
          NODE_NODE_SAIDA_EXEC                       TYPE REF TO IF_WD_CONTEXT_NODE,
          STRU_NODE_SAIDA_EXEC                      TYPE IF_MAIN=>ELEMENT_NODE_SAIDA_EXEC .

* navigate from <CONTEXT> to <NODE_ALV> via lead selection
      NODE_NODE_SAIDA_EXEC = WD_CONTEXT->GET_CHILD_NODE( NAME = IF_MAIN=>WDCTX_NODE_SAIDA_EXEC ).


* get all declared attributes
      NODE_NODE_SAIDA_EXEC->BIND_TABLE( TL_SAIDA_EXEC ).

      LO_API_COMPONENT  = WD_COMP_CONTROLLER->WD_GET_API( ).
      LO_WINDOW_MANAGER = LO_API_COMPONENT->GET_WINDOW_MANAGER( ).
      LO_WINDOW         = LO_WINDOW_MANAGER->CREATE_WINDOW(
                         WINDOW_NAME            = 'POPUP'
                         TITLE                  = 'Resultado de execução'
*                       close_in_any_case      = abap_true
                         MESSAGE_DISPLAY_MODE   = IF_WD_WINDOW=>CO_MSG_DISPLAY_MODE_SELECTED
*                       close_button           = abap_true
                         BUTTON_KIND            = IF_WD_WINDOW=>CO_BUTTONS_OK
                         MESSAGE_TYPE           = IF_WD_WINDOW=>CO_MSG_TYPE_NONE
                         DEFAULT_BUTTON         = IF_WD_WINDOW=>CO_BUTTON_OK
                         ).

*      LO_WINDOW->SET_WINDOW_SIZE(
*    EXPORTING
*      WIDTH  = '300px'
*      HEIGHT = ' '
*  ).

      WD_COMP_CONTROLLER->ONFIND( ).
      LO_WINDOW->OPEN( ).
    ENDIF.
  ENDIF.
ENDMETHOD.

METHOD ONACTIONACTION_CONTRATO .
*  DATA LO_WINDOW_MANAGER TYPE REF TO IF_WD_WINDOW_MANAGER.
*  DATA LO_API_COMPONENT  TYPE REF TO IF_WD_COMPONENT.
*  DATA LO_WINDOW         TYPE REF TO IF_WD_WINDOW.
  DATA:  LD_INDEX TYPE  SY-INDEX.

  DATA: IT_SELROWS  TYPE WDR_CONTEXT_ELEMENT_SET,
        WA_SELROWS LIKE LINE OF IT_SELROWS.

  DATA LO_ND_NODE_ALV TYPE REF TO IF_WD_CONTEXT_NODE.
  DATA LO_EL_NODE_ALV TYPE REF TO IF_WD_CONTEXT_ELEMENT.
  DATA LS_NODE_ALV TYPE  WD_THIS->ELEMENT_NODE_ALV.
  DATA: LT_NODE_ALV TYPE TABLE OF WD_THIS->ELEMENT_NODE_ALV,
        TL_NRO_SOL_OV TYPE TABLE OF ZSDS007,
        WL_NRO_SOL_OV TYPE ZSDS007,
        TL_0053       TYPE TABLE OF ZSDT0053.

  DATA: ITEMS_NODE TYPE REF TO IF_WD_CONTEXT_NODE,
        TL_TABLE TYPE STANDARD TABLE OF IF_INPUT_VIEW=>ELEMENT_NODE_ALV,
        WL_TABLE TYPE IF_INPUT_VIEW=>ELEMENT_NODE_ALV.

**      navigate from <CONTEXT> to <NODE_ALV> via lead selection
  LO_ND_NODE_ALV = WD_CONTEXT->GET_CHILD_NODE( NAME = WD_THIS->WDCTX_NODE_ALV ).
  IT_SELROWS  = LO_ND_NODE_ALV->GET_SELECTED_ELEMENTS( ).

  ITEMS_NODE = WD_CONTEXT->GET_CHILD_NODE( NAME = `NODE_ALV` ).
  ITEMS_NODE->GET_STATIC_ATTRIBUTES_TABLE( IMPORTING TABLE = TL_TABLE ).


  LOOP AT IT_SELROWS INTO WA_SELROWS.
    CALL METHOD WA_SELROWS->GET_STATIC_ATTRIBUTES
      IMPORTING
        STATIC_ATTRIBUTES = LS_NODE_ALV.

    MOVE: LS_NODE_ALV-NRO_SOL_OV TO WL_NRO_SOL_OV-NRO_SOL_OV,
          LS_NODE_ALV-POSNR      TO WL_NRO_SOL_OV-POSNR.

    APPEND WL_NRO_SOL_OV TO TL_NRO_SOL_OV.

    CLEAR  WL_NRO_SOL_OV.
  ENDLOOP.


  IF TL_NRO_SOL_OV[] IS NOT INITIAL.
    LOOP AT TL_NRO_SOL_OV INTO WL_NRO_SOL_OV.
      UPDATE ZSDT0053 SET CONTRATO = 'X'
            WHERE NRO_SOL_OV EQ WL_NRO_SOL_OV-NRO_SOL_OV
              AND POSNR      EQ WL_NRO_SOL_OV-POSNR.

    ENDLOOP.
    WD_COMP_CONTROLLER->ONFIND( ).
  ENDIF.
*    REFRESH: TL_SAIDA_EXEC.
*    CALL FUNCTION 'ZSDMF005_MODIF_STATUS_ITEM_SOL'
*      EXPORTING
*        I_TIPO                 = '2'
*        i_status               = 'E'
*      TABLES
*        TI_NRO_SOL_OV          = TL_NRO_SOL_OV
*        TE_SAIDA_EXEC          = TL_SAIDA_EXEC
*      EXCEPTIONS
*        OV_JA_CRIADA           = 1
*        SOLICITACAO_NAO_EXISTE = 2
*        OTHERS                 = 3.
*
*    IF TL_SAIDA_EXEC[] IS NOT INITIAL.
*
*      DATA:
*          NODE_NODE_SAIDA_EXEC                       TYPE REF TO IF_WD_CONTEXT_NODE,
*          STRU_NODE_SAIDA_EXEC                      TYPE IF_MAIN=>ELEMENT_NODE_SAIDA_EXEC .
*
** navigate from <CONTEXT> to <NODE_ALV> via lead selection
*      NODE_NODE_SAIDA_EXEC = WD_CONTEXT->GET_CHILD_NODE( NAME = IF_MAIN=>WDCTX_NODE_SAIDA_EXEC ).
*
*
** get all declared attributes
*      NODE_NODE_SAIDA_EXEC->BIND_TABLE( TL_SAIDA_EXEC ).
*
*      LO_API_COMPONENT  = WD_COMP_CONTROLLER->WD_GET_API( ).
*      LO_WINDOW_MANAGER = LO_API_COMPONENT->GET_WINDOW_MANAGER( ).
*      LO_WINDOW         = LO_WINDOW_MANAGER->CREATE_WINDOW(
*                         WINDOW_NAME            = 'POPUP'
*                         TITLE                  = 'Resultado de execução'
**                       close_in_any_case      = abap_true
*                         MESSAGE_DISPLAY_MODE   = IF_WD_WINDOW=>CO_MSG_DISPLAY_MODE_SELECTED
**                       close_button           = abap_true
*                         BUTTON_KIND            = IF_WD_WINDOW=>CO_BUTTONS_OK
*                         MESSAGE_TYPE           = IF_WD_WINDOW=>CO_MSG_TYPE_NONE
*                         DEFAULT_BUTTON         = IF_WD_WINDOW=>CO_BUTTON_OK
*                         ).
*
**      LO_WINDOW->SET_WINDOW_SIZE(
**    EXPORTING
**      WIDTH  = '300px'
**      HEIGHT = ' '
**  ).
*
*
*      LO_WINDOW->OPEN( ).
*    ENDIF.
*  ENDIF.

ENDMETHOD.

method ONACTIONACTION_DESBLOQ .
  DATA LO_WINDOW_MANAGER TYPE REF TO IF_WD_WINDOW_MANAGER.
  DATA LO_API_COMPONENT  TYPE REF TO IF_WD_COMPONENT.
  DATA LO_WINDOW         TYPE REF TO IF_WD_WINDOW.
  DATA:  LD_INDEX TYPE  SY-INDEX.

  DATA: IT_SELROWS  TYPE WDR_CONTEXT_ELEMENT_SET,
        WA_SELROWS LIKE LINE OF IT_SELROWS.

  DATA LO_ND_NODE_ALV TYPE REF TO IF_WD_CONTEXT_NODE.
  DATA LO_EL_NODE_ALV TYPE REF TO IF_WD_CONTEXT_ELEMENT.
  DATA LS_NODE_ALV TYPE  WD_THIS->ELEMENT_NODE_ALV.
  DATA: LT_NODE_ALV TYPE TABLE OF WD_THIS->ELEMENT_NODE_ALV,
        TL_NRO_SOL_OV TYPE TABLE OF ZSDS007,
        WL_NRO_SOL_OV TYPE ZSDS007,
        TL_SAIDA_EXEC TYPE TABLE OF ZSDS010.

  DATA: ITEMS_NODE TYPE REF TO IF_WD_CONTEXT_NODE,
        TL_TABLE TYPE STANDARD TABLE OF IF_INPUT_VIEW=>ELEMENT_NODE_ALV,
        WL_TABLE TYPE IF_INPUT_VIEW=>ELEMENT_NODE_ALV.

**      navigate from <CONTEXT> to <NODE_ALV> via lead selection
  LO_ND_NODE_ALV = WD_CONTEXT->GET_CHILD_NODE( NAME = WD_THIS->WDCTX_NODE_ALV ).
  IT_SELROWS  = LO_ND_NODE_ALV->GET_SELECTED_ELEMENTS( ).

  ITEMS_NODE = WD_CONTEXT->GET_CHILD_NODE( NAME = `NODE_ALV` ).
  ITEMS_NODE->GET_STATIC_ATTRIBUTES_TABLE( IMPORTING TABLE = TL_TABLE ).

  LOOP AT IT_SELROWS INTO WA_SELROWS.
    CALL METHOD WA_SELROWS->GET_STATIC_ATTRIBUTES
      IMPORTING
        STATIC_ATTRIBUTES = LS_NODE_ALV.

        MOVE: LS_NODE_ALV-NRO_SOL_OV TO WL_NRO_SOL_OV-NRO_SOL_OV,
              LS_NODE_ALV-POSNR      TO WL_NRO_SOL_OV-POSNR.

        APPEND WL_NRO_SOL_OV TO TL_NRO_SOL_OV.


      CLEAR  WL_NRO_SOL_OV.
  ENDLOOP.

  IF TL_NRO_SOL_OV[] IS NOT INITIAL.
    REFRESH: TL_SAIDA_EXEC.
    CALL FUNCTION 'ZSDMF005_MODIF_STATUS_ITEM_SOL'
      EXPORTING
        I_TIPO                 = '2'
        i_status               = 'D'
      TABLES
        TI_NRO_SOL_OV          = TL_NRO_SOL_OV
        TE_SAIDA_EXEC          = TL_SAIDA_EXEC
      EXCEPTIONS
        OV_JA_CRIADA           = 1
        SOLICITACAO_NAO_EXISTE = 2
        OTHERS                 = 3.

    IF TL_SAIDA_EXEC[] IS NOT INITIAL.

      DATA:
          NODE_NODE_SAIDA_EXEC                       TYPE REF TO IF_WD_CONTEXT_NODE,
          STRU_NODE_SAIDA_EXEC                      TYPE IF_MAIN=>ELEMENT_NODE_SAIDA_EXEC .

* navigate from <CONTEXT> to <NODE_ALV> via lead selection
      NODE_NODE_SAIDA_EXEC = WD_CONTEXT->GET_CHILD_NODE( NAME = IF_MAIN=>WDCTX_NODE_SAIDA_EXEC ).


* get all declared attributes
      NODE_NODE_SAIDA_EXEC->BIND_TABLE( TL_SAIDA_EXEC ).

      LO_API_COMPONENT  = WD_COMP_CONTROLLER->WD_GET_API( ).
      LO_WINDOW_MANAGER = LO_API_COMPONENT->GET_WINDOW_MANAGER( ).
      LO_WINDOW         = LO_WINDOW_MANAGER->CREATE_WINDOW(
                         WINDOW_NAME            = 'POPUP'
                         TITLE                  = 'Resultado de execução'
*                       close_in_any_case      = abap_true
                         MESSAGE_DISPLAY_MODE   = IF_WD_WINDOW=>CO_MSG_DISPLAY_MODE_SELECTED
*                       close_button           = abap_true
                         BUTTON_KIND            = IF_WD_WINDOW=>CO_BUTTONS_OK
                         MESSAGE_TYPE           = IF_WD_WINDOW=>CO_MSG_TYPE_NONE
                         DEFAULT_BUTTON         = IF_WD_WINDOW=>CO_BUTTON_OK
                         ).

*      LO_WINDOW->SET_WINDOW_SIZE(
*    EXPORTING
*      WIDTH  = '300px'
*      HEIGHT = ' '
*  ).

WD_COMP_CONTROLLER->ONFIND( ).
      LO_WINDOW->OPEN( ).
    ENDIF.
  ENDIF.
endmethod.

method ONACTIONACTION_ENCECRRA .
  DATA LO_WINDOW_MANAGER TYPE REF TO IF_WD_WINDOW_MANAGER.
  DATA LO_API_COMPONENT  TYPE REF TO IF_WD_COMPONENT.
  DATA LO_WINDOW         TYPE REF TO IF_WD_WINDOW.
  DATA:  LD_INDEX TYPE  SY-INDEX.

  DATA: IT_SELROWS  TYPE WDR_CONTEXT_ELEMENT_SET,
        WA_SELROWS LIKE LINE OF IT_SELROWS.

  DATA LO_ND_NODE_ALV TYPE REF TO IF_WD_CONTEXT_NODE.
  DATA LO_EL_NODE_ALV TYPE REF TO IF_WD_CONTEXT_ELEMENT.
  DATA LS_NODE_ALV TYPE  WD_THIS->ELEMENT_NODE_ALV.
  DATA: LT_NODE_ALV TYPE TABLE OF WD_THIS->ELEMENT_NODE_ALV,
        TL_NRO_SOL_OV TYPE TABLE OF ZSDS007,
        WL_NRO_SOL_OV TYPE ZSDS007,
        TL_SAIDA_EXEC TYPE TABLE OF ZSDS010.

  DATA: ITEMS_NODE TYPE REF TO IF_WD_CONTEXT_NODE,
        TL_TABLE TYPE STANDARD TABLE OF IF_INPUT_VIEW=>ELEMENT_NODE_ALV,
        WL_TABLE TYPE IF_INPUT_VIEW=>ELEMENT_NODE_ALV.

**      navigate from <CONTEXT> to <NODE_ALV> via lead selection
  LO_ND_NODE_ALV = WD_CONTEXT->GET_CHILD_NODE( NAME = WD_THIS->WDCTX_NODE_ALV ).
  IT_SELROWS  = LO_ND_NODE_ALV->GET_SELECTED_ELEMENTS( ).

  ITEMS_NODE = WD_CONTEXT->GET_CHILD_NODE( NAME = `NODE_ALV` ).
  ITEMS_NODE->GET_STATIC_ATTRIBUTES_TABLE( IMPORTING TABLE = TL_TABLE ).

  LOOP AT IT_SELROWS INTO WA_SELROWS.
    CALL METHOD WA_SELROWS->GET_STATIC_ATTRIBUTES
      IMPORTING
        STATIC_ATTRIBUTES = LS_NODE_ALV.

        MOVE: LS_NODE_ALV-NRO_SOL_OV TO WL_NRO_SOL_OV-NRO_SOL_OV,
              LS_NODE_ALV-POSNR      TO WL_NRO_SOL_OV-POSNR.

        APPEND WL_NRO_SOL_OV TO TL_NRO_SOL_OV.


      CLEAR  WL_NRO_SOL_OV.
  ENDLOOP.

  IF TL_NRO_SOL_OV[] IS NOT INITIAL.
    REFRESH: TL_SAIDA_EXEC.
    CALL FUNCTION 'ZSDMF005_MODIF_STATUS_ITEM_SOL'
      EXPORTING
        I_TIPO                 = '2'
        i_status               = 'E'
      TABLES
        TI_NRO_SOL_OV          = TL_NRO_SOL_OV
        TE_SAIDA_EXEC          = TL_SAIDA_EXEC
      EXCEPTIONS
        OV_JA_CRIADA           = 1
        SOLICITACAO_NAO_EXISTE = 2
        OTHERS                 = 3.

    WD_COMP_CONTROLLER->ONFIND( ).
    IF TL_SAIDA_EXEC[] IS NOT INITIAL.

      DATA:
          NODE_NODE_SAIDA_EXEC                       TYPE REF TO IF_WD_CONTEXT_NODE,
          STRU_NODE_SAIDA_EXEC                      TYPE IF_MAIN=>ELEMENT_NODE_SAIDA_EXEC .

* navigate from <CONTEXT> to <NODE_ALV> via lead selection
      NODE_NODE_SAIDA_EXEC = WD_CONTEXT->GET_CHILD_NODE( NAME = IF_MAIN=>WDCTX_NODE_SAIDA_EXEC ).


* get all declared attributes
      NODE_NODE_SAIDA_EXEC->BIND_TABLE( TL_SAIDA_EXEC ).

      LO_API_COMPONENT  = WD_COMP_CONTROLLER->WD_GET_API( ).
      LO_WINDOW_MANAGER = LO_API_COMPONENT->GET_WINDOW_MANAGER( ).
      LO_WINDOW         = LO_WINDOW_MANAGER->CREATE_WINDOW(
                         WINDOW_NAME            = 'POPUP'
                         TITLE                  = 'Resultado de execução'
*                       close_in_any_case      = abap_true
                         MESSAGE_DISPLAY_MODE   = IF_WD_WINDOW=>CO_MSG_DISPLAY_MODE_SELECTED
*                       close_button           = abap_true
                         BUTTON_KIND            = IF_WD_WINDOW=>CO_BUTTONS_OK
                         MESSAGE_TYPE           = IF_WD_WINDOW=>CO_MSG_TYPE_NONE
                         DEFAULT_BUTTON         = IF_WD_WINDOW=>CO_BUTTON_OK
                         ).

*      LO_WINDOW->SET_WINDOW_SIZE(
*    EXPORTING
*      WIDTH  = '300px'
*      HEIGHT = ' '
*  ).


      LO_WINDOW->OPEN( ).
    ENDIF.
  ENDIF.
endmethod.

method ONACTIONACTION_ESTORNAR .
  DATA LO_WINDOW_MANAGER TYPE REF TO IF_WD_WINDOW_MANAGER.
  DATA LO_API_COMPONENT  TYPE REF TO IF_WD_COMPONENT.
  DATA LO_WINDOW         TYPE REF TO IF_WD_WINDOW.
  DATA:  LD_INDEX TYPE  SY-INDEX.

  DATA: IT_SELROWS  TYPE WDR_CONTEXT_ELEMENT_SET,
        WA_SELROWS LIKE LINE OF IT_SELROWS.

  DATA LO_ND_NODE_ALV TYPE REF TO IF_WD_CONTEXT_NODE.
  DATA LO_EL_NODE_ALV TYPE REF TO IF_WD_CONTEXT_ELEMENT.
  DATA LS_NODE_ALV TYPE  WD_THIS->ELEMENT_NODE_ALV.
  DATA: LT_NODE_ALV TYPE TABLE OF WD_THIS->ELEMENT_NODE_ALV,
        TL_NRO_SOL_OV TYPE TABLE OF ZSDS007,
        WL_NRO_SOL_OV TYPE ZSDS007,
        TL_SAIDA_EXEC TYPE TABLE OF ZSDS010.

  DATA: ITEMS_NODE TYPE REF TO IF_WD_CONTEXT_NODE,
        TL_TABLE TYPE STANDARD TABLE OF IF_INPUT_VIEW=>ELEMENT_NODE_ALV,
        WL_TABLE TYPE IF_INPUT_VIEW=>ELEMENT_NODE_ALV.

**      navigate from <CONTEXT> to <NODE_ALV> via lead selection
  LO_ND_NODE_ALV = WD_CONTEXT->GET_CHILD_NODE( NAME = WD_THIS->WDCTX_NODE_ALV ).
  IT_SELROWS  = LO_ND_NODE_ALV->GET_SELECTED_ELEMENTS( ).

  ITEMS_NODE = WD_CONTEXT->GET_CHILD_NODE( NAME = `NODE_ALV` ).
  ITEMS_NODE->GET_STATIC_ATTRIBUTES_TABLE( IMPORTING TABLE = TL_TABLE ).

LOOP AT IT_SELROWS INTO WA_SELROWS.
    CALL METHOD WA_SELROWS->GET_STATIC_ATTRIBUTES
      IMPORTING
        STATIC_ATTRIBUTES = LS_NODE_ALV.

    LOOP  AT TL_TABLE INTO WL_TABLE
       WHERE NRO_SOL_OV EQ LS_NODE_ALV-NRO_SOL_OV.

      READ TABLE TL_NRO_SOL_OV TRANSPORTING NO FIELDS
        WITH KEY NRO_SOL_OV = WL_TABLE-NRO_SOL_OV
                 POSNR      = WL_TABLE-POSNR.
      IF SY-SUBRC IS NOT INITIAL.
        MOVE: WL_TABLE-NRO_SOL_OV TO WL_NRO_SOL_OV-NRO_SOL_OV,
              WL_TABLE-POSNR      TO WL_NRO_SOL_OV-POSNR.

        APPEND WL_NRO_SOL_OV TO TL_NRO_SOL_OV.

      ENDIF.
      CLEAR  WL_NRO_SOL_OV.
    ENDLOOP.
  ENDLOOP.

  IF TL_NRO_SOL_OV[] IS NOT INITIAL.
    REFRESH: TL_SAIDA_EXEC.
    CALL FUNCTION 'ZSDMF005_MODIF_STATUS_ITEM_SOL'
      EXPORTING
        I_TIPO                 = '2'
        i_status               = 'X'
      TABLES
        TI_NRO_SOL_OV          = TL_NRO_SOL_OV
        TE_SAIDA_EXEC          = TL_SAIDA_EXEC
      EXCEPTIONS
        OV_JA_CRIADA           = 1
        SOLICITACAO_NAO_EXISTE = 2
        OTHERS                 = 3.

    IF TL_SAIDA_EXEC[] IS NOT INITIAL.

      DATA:
          NODE_NODE_SAIDA_EXEC                       TYPE REF TO IF_WD_CONTEXT_NODE,
          STRU_NODE_SAIDA_EXEC                      TYPE IF_MAIN=>ELEMENT_NODE_SAIDA_EXEC .

* navigate from <CONTEXT> to <NODE_ALV> via lead selection
      NODE_NODE_SAIDA_EXEC = WD_CONTEXT->GET_CHILD_NODE( NAME = IF_MAIN=>WDCTX_NODE_SAIDA_EXEC ).


* get all declared attributes
      NODE_NODE_SAIDA_EXEC->BIND_TABLE( TL_SAIDA_EXEC ).

      LO_API_COMPONENT  = WD_COMP_CONTROLLER->WD_GET_API( ).
      LO_WINDOW_MANAGER = LO_API_COMPONENT->GET_WINDOW_MANAGER( ).
      LO_WINDOW         = LO_WINDOW_MANAGER->CREATE_WINDOW(
                         WINDOW_NAME            = 'POPUP'
                         TITLE                  = 'Resultado de execução'
*                       close_in_any_case      = abap_true
                         MESSAGE_DISPLAY_MODE   = IF_WD_WINDOW=>CO_MSG_DISPLAY_MODE_SELECTED
*                       close_button           = abap_true
                         BUTTON_KIND            = IF_WD_WINDOW=>CO_BUTTONS_OK
                         MESSAGE_TYPE           = IF_WD_WINDOW=>CO_MSG_TYPE_NONE
                         DEFAULT_BUTTON         = IF_WD_WINDOW=>CO_BUTTON_OK
                         ).

*      LO_WINDOW->SET_WINDOW_SIZE(
*    EXPORTING
*      WIDTH  = '300px'
*      HEIGHT = ' '
*  ).

WD_COMP_CONTROLLER->ONFIND( ).
      LO_WINDOW->OPEN( ).
    ENDIF.
  ENDIF.
endmethod.

METHOD ONACTIONACTION_ESTORNAR_ADI .
    DATA LO_WINDOW_MANAGER TYPE REF TO IF_WD_WINDOW_MANAGER.
    DATA LO_API_COMPONENT  TYPE REF TO IF_WD_COMPONENT.
    DATA LO_WINDOW         TYPE REF TO IF_WD_WINDOW.
    DATA:  LD_INDEX TYPE  SY-INDEX.

    DATA: IT_SELROWS  TYPE WDR_CONTEXT_ELEMENT_SET,
          WA_SELROWS LIKE LINE OF IT_SELROWS.

    DATA LO_ND_NODE_ALV TYPE REF TO IF_WD_CONTEXT_NODE.
    DATA LO_EL_NODE_ALV TYPE REF TO IF_WD_CONTEXT_ELEMENT.
    DATA LS_NODE_ALV TYPE  WD_THIS->ELEMENT_NODE_ALV.
    DATA: LT_NODE_ALV TYPE TABLE OF WD_THIS->ELEMENT_NODE_ALV,
          TL_NRO_SOL_OV TYPE TABLE OF ZSDS007,
          WL_NRO_SOL_OV TYPE ZSDS007,
          TL_SAIDA_EXEC TYPE TABLE OF ZSDS010.

    DATA: ITEMS_NODE TYPE REF TO IF_WD_CONTEXT_NODE,
          TL_TABLE TYPE STANDARD TABLE OF IF_INPUT_VIEW=>ELEMENT_NODE_ALV,
          WL_TABLE TYPE IF_INPUT_VIEW=>ELEMENT_NODE_ALV.

**      navigate from <CONTEXT> to <NODE_ALV> via lead selection
    LO_ND_NODE_ALV = WD_CONTEXT->GET_CHILD_NODE( NAME = WD_THIS->WDCTX_NODE_ALV ).
    IT_SELROWS  = LO_ND_NODE_ALV->GET_SELECTED_ELEMENTS( ).

    ITEMS_NODE = WD_CONTEXT->GET_CHILD_NODE( NAME = `NODE_ALV` ).
    ITEMS_NODE->GET_STATIC_ATTRIBUTES_TABLE( IMPORTING TABLE = TL_TABLE ).

    LOOP AT IT_SELROWS INTO WA_SELROWS.
      CALL METHOD WA_SELROWS->GET_STATIC_ATTRIBUTES
        IMPORTING
          STATIC_ATTRIBUTES = LS_NODE_ALV.

      MOVE: LS_NODE_ALV-NRO_SOL_OV TO WL_NRO_SOL_OV-NRO_SOL_OV,
            LS_NODE_ALV-POSNR      TO WL_NRO_SOL_OV-POSNR.

      APPEND WL_NRO_SOL_OV TO TL_NRO_SOL_OV.

      CLEAR  WL_NRO_SOL_OV.
    ENDLOOP.

    IF TL_NRO_SOL_OV[] IS NOT INITIAL.
      REFRESH: TL_SAIDA_EXEC.
      CALL FUNCTION 'ZSDMF007_ESTORNA_ADIANTAMENTO'
        EXPORTING
          I_TIPO        = '2'
        TABLES
          TI_NRO_SOL_OV = TL_NRO_SOL_OV
          TE_SAIDA_EXEC = TL_SAIDA_EXEC.

      WD_COMP_CONTROLLER->ONFIND( ).
      IF TL_SAIDA_EXEC[] IS NOT INITIAL.

        DATA:
            NODE_NODE_SAIDA_EXEC                       TYPE REF TO IF_WD_CONTEXT_NODE,
            STRU_NODE_SAIDA_EXEC                      TYPE IF_MAIN=>ELEMENT_NODE_SAIDA_EXEC .

* navigate from <CONTEXT> to <NODE_ALV> via lead selection
        NODE_NODE_SAIDA_EXEC = WD_CONTEXT->GET_CHILD_NODE( NAME = IF_MAIN=>WDCTX_NODE_SAIDA_EXEC ).


* get all declared attributes
        NODE_NODE_SAIDA_EXEC->BIND_TABLE( TL_SAIDA_EXEC ).

        LO_API_COMPONENT  = WD_COMP_CONTROLLER->WD_GET_API( ).
        LO_WINDOW_MANAGER = LO_API_COMPONENT->GET_WINDOW_MANAGER( ).
        LO_WINDOW         = LO_WINDOW_MANAGER->CREATE_WINDOW(
                           WINDOW_NAME            = 'POPUP'
                           TITLE                  = 'Resultado de execução'
*                       close_in_any_case      = abap_true
                           MESSAGE_DISPLAY_MODE   = IF_WD_WINDOW=>CO_MSG_DISPLAY_MODE_SELECTED
*                       close_button           = abap_true
                           BUTTON_KIND            = IF_WD_WINDOW=>CO_BUTTONS_OK
                           MESSAGE_TYPE           = IF_WD_WINDOW=>CO_MSG_TYPE_NONE
                           DEFAULT_BUTTON         = IF_WD_WINDOW=>CO_BUTTON_OK
                           ).

*      LO_WINDOW->SET_WINDOW_SIZE(
*    EXPORTING
*      WIDTH  = '300px'
*      HEIGHT = ' '
*  ).


        LO_WINDOW->OPEN( ).
      ENDIF.
    ENDIF.
ENDMETHOD.                    "ONACTIONACTION_BLOQUE

METHOD ONACTIONACTION_GERA .
  DATA LO_WINDOW_MANAGER TYPE REF TO IF_WD_WINDOW_MANAGER.
  DATA LO_API_COMPONENT  TYPE REF TO IF_WD_COMPONENT.
  DATA LO_WINDOW         TYPE REF TO IF_WD_WINDOW.
  DATA:  LD_INDEX TYPE  SY-INDEX.

  DATA: IT_SELROWS  TYPE WDR_CONTEXT_ELEMENT_SET,
        WA_SELROWS LIKE LINE OF IT_SELROWS.

  DATA LO_ND_NODE_ALV TYPE REF TO IF_WD_CONTEXT_NODE.
  DATA LO_EL_NODE_ALV TYPE REF TO IF_WD_CONTEXT_ELEMENT.
  DATA LS_NODE_ALV TYPE  WD_THIS->ELEMENT_NODE_ALV.
  DATA: LT_NODE_ALV TYPE TABLE OF WD_THIS->ELEMENT_NODE_ALV,
        TL_NRO_SOL_OV TYPE TABLE OF ZSDS007,
        WL_NRO_SOL_OV TYPE ZSDS007,
        TL_SAIDA_EXEC TYPE TABLE OF ZSDS010.

  DATA: ITEMS_NODE TYPE REF TO IF_WD_CONTEXT_NODE,
        TL_TABLE TYPE STANDARD TABLE OF IF_INPUT_VIEW=>ELEMENT_NODE_ALV,
        WL_TABLE TYPE IF_INPUT_VIEW=>ELEMENT_NODE_ALV.

**      navigate from <CONTEXT> to <NODE_ALV> via lead selection
  LO_ND_NODE_ALV = WD_CONTEXT->GET_CHILD_NODE( NAME = WD_THIS->WDCTX_NODE_ALV ).
  IT_SELROWS  = LO_ND_NODE_ALV->GET_SELECTED_ELEMENTS( ).

  ITEMS_NODE = WD_CONTEXT->GET_CHILD_NODE( NAME = `NODE_ALV` ).
  ITEMS_NODE->GET_STATIC_ATTRIBUTES_TABLE( IMPORTING TABLE = TL_TABLE ).

  LOOP AT IT_SELROWS INTO WA_SELROWS.
    CALL METHOD WA_SELROWS->GET_STATIC_ATTRIBUTES
      IMPORTING
        STATIC_ATTRIBUTES = LS_NODE_ALV.

    LOOP  AT TL_TABLE INTO WL_TABLE
       WHERE NRO_SOL_OV EQ LS_NODE_ALV-NRO_SOL_OV.

      READ TABLE TL_NRO_SOL_OV TRANSPORTING NO FIELDS
        WITH KEY NRO_SOL_OV = WL_TABLE-NRO_SOL_OV
                 POSNR      = WL_TABLE-POSNR.
      IF SY-SUBRC IS NOT INITIAL.
        MOVE: WL_TABLE-NRO_SOL_OV TO WL_NRO_SOL_OV-NRO_SOL_OV,
              WL_TABLE-POSNR      TO WL_NRO_SOL_OV-POSNR.

        APPEND WL_NRO_SOL_OV TO TL_NRO_SOL_OV.

      ENDIF.
      CLEAR  WL_NRO_SOL_OV.
    ENDLOOP.
  ENDLOOP.

  IF TL_NRO_SOL_OV[] IS NOT INITIAL.
    REFRESH: TL_SAIDA_EXEC.
    DATA LO_ND_RB_G2 TYPE REF TO IF_WD_CONTEXT_NODE.
    DATA LO_EL_RB_G2 TYPE REF TO IF_WD_CONTEXT_ELEMENT.
    DATA LS_RB_G2 TYPE WD_THIS->ELEMENT_RB_G2.
    DATA LV_RB_TP_SOL LIKE LS_RB_G2-RB_TP_SOL.
*     navigate from <CONTEXT> to <RB_G2> via lead selection
    LO_ND_RB_G2 = WD_CONTEXT->GET_CHILD_NODE( NAME = WD_THIS->WDCTX_RB_G2 ).

*     @TODO handle not set lead selection
    IF LO_ND_RB_G2 IS INITIAL.
    ENDIF.

*     get element via lead selection
    LO_EL_RB_G2 = LO_ND_RB_G2->GET_ELEMENT(  ).

*     @TODO handle not set lead selection
    IF LO_EL_RB_G2 IS INITIAL.
    ENDIF.

*     alternative access  via index
*     lo_el_rb_g2 = lo_nd_rb_g2->get_element( index = 1 ).
*     @TODO handle non existant child
*     IF lo_el_rb_g2 IS INITIAL.
*     ENDIF.

*     get single attribute
    LO_EL_RB_G2->GET_ATTRIBUTE(
      EXPORTING
        NAME =  `RB_TP_SOL`
      IMPORTING
        VALUE = LV_RB_TP_SOL ).


    IF LV_RB_TP_SOL EQ 'Venda Normal'.
      CALL FUNCTION 'ZSDMF001_GERA_OV_SOLICITACAO'
        EXPORTING
          I_TIPO                 = '2'
        TABLES
          TI_NRO_SOL_OV          = TL_NRO_SOL_OV
          TE_SAIDA_EXEC          = TL_SAIDA_EXEC
        EXCEPTIONS
          OV_JA_CRIADA           = 1
          SOLICITACAO_NAO_EXISTE = 2
          OTHERS                 = 3.
    ELSEIF LV_RB_TP_SOL EQ 'Formação de Lote'.
      CALL FUNCTION 'ZSDMF001_GERA_OV_SOL_FORM'
        EXPORTING
          I_TIPO                 = '2'
        TABLES
          TI_NRO_SOL_OV          = TL_NRO_SOL_OV
          TE_SAIDA_EXEC          = TL_SAIDA_EXEC
        EXCEPTIONS
          OV_JA_CRIADA           = 1
          SOLICITACAO_NAO_EXISTE = 2
          OTHERS                 = 3.
    ENDIF.

    WD_COMP_CONTROLLER->ONFIND( ).
    IF TL_SAIDA_EXEC[] IS NOT INITIAL.

      DATA:
          NODE_NODE_SAIDA_EXEC                       TYPE REF TO IF_WD_CONTEXT_NODE,
          STRU_NODE_SAIDA_EXEC                      TYPE IF_MAIN=>ELEMENT_NODE_SAIDA_EXEC .

* navigate from <CONTEXT> to <NODE_ALV> via lead selection
      NODE_NODE_SAIDA_EXEC = WD_CONTEXT->GET_CHILD_NODE( NAME = IF_MAIN=>WDCTX_NODE_SAIDA_EXEC ).


* get all declared attributes
      NODE_NODE_SAIDA_EXEC->BIND_TABLE( TL_SAIDA_EXEC ).

      LO_API_COMPONENT  = WD_COMP_CONTROLLER->WD_GET_API( ).
      LO_WINDOW_MANAGER = LO_API_COMPONENT->GET_WINDOW_MANAGER( ).
      LO_WINDOW         = LO_WINDOW_MANAGER->CREATE_WINDOW(
                         WINDOW_NAME            = 'POPUP'
                         TITLE                  = 'Resultado de execução'
*                       close_in_any_case      = abap_true
                         MESSAGE_DISPLAY_MODE   = IF_WD_WINDOW=>CO_MSG_DISPLAY_MODE_SELECTED
*                       close_button           = abap_true
                         BUTTON_KIND            = IF_WD_WINDOW=>CO_BUTTONS_OK
                         MESSAGE_TYPE           = IF_WD_WINDOW=>CO_MSG_TYPE_NONE
                         DEFAULT_BUTTON         = IF_WD_WINDOW=>CO_BUTTON_OK
                         ).

*      LO_WINDOW->SET_WINDOW_SIZE(
*    EXPORTING
*      WIDTH  = '300px'
*      HEIGHT = ' '
*  ).


      LO_WINDOW->OPEN( ).
    ENDIF.
  ENDIF.
ENDMETHOD.

method ONACTIONACTION_REPROCE .

  WD_THIS->ONACTIONACTION_GERA( wdevent = wdevent ).

endmethod.

method WDDOAFTERACTION .
endmethod.

method WDDOBEFOREACTION .
*  data lo_api_controller type ref to if_wd_view_controller.
*  data lo_action         type ref to if_wd_action.

*  lo_api_controller = wd_this->wd_get_api( ).
*  lo_action = lo_api_controller->get_current_action( ).

*  if lo_action is bound.
*    case lo_action->name.
*      when '...'.

*    endcase.
*  endif.
endmethod.

method WDDOEXIT .
endmethod.

METHOD WDDOINIT .
  DATA TOOLBAR           TYPE REF TO CL_WD_TOOLBAR.
  DATA TOOLBAR_BUTTON    TYPE REF TO CL_WD_TOOLBAR_BUTTON.
  DATA: TOOLBAR_SEPARATOR TYPE REF TO CL_WD_TOOLBAR_SEPARATOR.

*wd_this->build_select_options( ).



*  DATA LO_CMP_USAGE TYPE REF TO IF_WD_COMPONENT_USAGE.
*
*  LO_CMP_USAGE =   WD_THIS->WD_CPUSE_ALV_SOLICITACAO( ).
*  IF LO_CMP_USAGE->HAS_ACTIVE_COMPONENT( ) IS INITIAL.
*    LO_CMP_USAGE->CREATE_COMPONENT( ).
*  ENDIF.

ENDMETHOD.

METHOD WDDOMODIFYVIEW .
*******  Radio button ******
  DATA : V_ELEMENT TYPE REF TO IF_WD_CONTEXT_ELEMENT,
         ITEMS_NODE TYPE REF TO IF_WD_CONTEXT_NODE,
         V_INDEX TYPE I,
         V_TEXT TYPE STRING,
         TL_TABLE TYPE STANDARD TABLE OF IF_INPUT_VIEW2=>ELEMENT_NODE_ALV,
         ITEMLIST TYPE STANDARD TABLE OF IF_INPUT_VIEW2=>ELEMENT_RB_G1,
         ITEMLIST2 TYPE STANDARD TABLE OF IF_INPUT_VIEW2=>ELEMENT_RB_G2,
         W_LIST LIKE LINE OF ITEMLIST,
         W_LIST2 LIKE LINE OF ITEMLIST2,
         RB_G1 TYPE CHAR20 ,
         RB_G2 TYPE CHAR20 .


  DATA TOOLBAR           TYPE REF TO CL_WD_TOOLBAR.
  DATA TOOLBAR_BUTTON    TYPE REF TO CL_WD_TOOLBAR_BUTTON.
  DATA: TOOLBAR_SEPARATOR TYPE REF TO CL_WD_TOOLBAR_SEPARATOR.
  DATA WD_TABLE TYPE REF TO CL_WD_TABLE.
  IF FIRST_TIME IS NOT INITIAL.
* toolbar
    TOOLBAR = CL_WD_TOOLBAR=>NEW_TOOLBAR( ID = 'TOOLBAR' ).

    WD_TABLE ?= VIEW->GET_ELEMENT( 'TABLE' ).
    WD_TABLE->SET_TOOLBAR( TOOLBAR ).
  ELSE.

    TOOLBAR ?= VIEW->GET_ELEMENT( 'TOOLBAR' ).
  ENDIF.

  ITEMS_NODE = WD_CONTEXT->GET_CHILD_NODE( NAME = `NODE_ALV` ).
  ITEMS_NODE->GET_STATIC_ATTRIBUTES_TABLE( IMPORTING TABLE = TL_TABLE ).

  DESCRIBE TABLE TL_TABLE LINES V_INDEX.

* call METHOD WD_TABLE->GET_ROW_COUNT GET_DATA_SOURCE
*   RECEIVING
*     value = V_INDEX.
  IF V_INDEX IS INITIAL.
   TOOLBAR->REMOVE_ALL_TOOLBAR_ITEMS( ).
  ELSE.

    TOOLBAR_SEPARATOR = CL_WD_TOOLBAR_SEPARATOR=>NEW_TOOLBAR_SEPARATOR( ).
    ITEMS_NODE = WD_CONTEXT->GET_CHILD_NODE( NAME = `RB_G1` ).
    ITEMS_NODE->GET_STATIC_ATTRIBUTES_TABLE( IMPORTING TABLE = ITEMLIST ).
    V_INDEX = ITEMS_NODE->GET_LEAD_SELECTION_INDEX( ).
    CLEAR: W_LIST.
    READ TABLE ITEMLIST INTO W_LIST INDEX V_INDEX.

    TOOLBAR->REMOVE_ALL_TOOLBAR_ITEMS( ).
    IF W_LIST-RB_TP_EXEC EQ 'Gera OV'.

      TOOLBAR_BUTTON = CL_WD_TOOLBAR_BUTTON=>NEW_TOOLBAR_BUTTON( TEXT         = 'Gera Ordem de Venda' "#EC NOTEXT
                                                                 IMAGE_SOURCE = 'ICON_IMPORT_ALL_REQUESTS'
                                                                 tooltip      = 'Gera Ordem de Venda'
                                                                 ON_ACTION    = 'ACTION_GERA' ).
      TOOLBAR->ADD_TOOLBAR_ITEM( TOOLBAR_BUTTON ).


    ELSEIF W_LIST-RB_TP_EXEC = 'Consultar OV Geradas'.
      TOOLBAR_BUTTON = CL_WD_TOOLBAR_BUTTON=>NEW_TOOLBAR_BUTTON( TEXT         = 'Reprocessar Adiantamentos' "#EC NOTEXT
                                                                 IMAGE_SOURCE = 'ICON_TE_ADVANCE_PAYMENT'
                                                                 tooltip      = 'Reprocessar Adiantamentos'
                                                                 ON_ACTION    = 'ACTION_REPROCE' ).

      TOOLBAR->ADD_TOOLBAR_ITEM( TOOLBAR_BUTTON ).
      TOOLBAR->ADD_TOOLBAR_ITEM( TOOLBAR_SEPARATOR ).

      TOOLBAR_BUTTON = CL_WD_TOOLBAR_BUTTON=>NEW_TOOLBAR_BUTTON( TEXT         = 'Encerrar' "#EC NOTEXT
                                                                 IMAGE_SOURCE = 'ICON_COMPLETE'
                                                                 tooltip      = 'Encerrar'
                                                                 ON_ACTION    = 'ACTION_ENCECRRA' ).
      TOOLBAR->ADD_TOOLBAR_ITEM( TOOLBAR_BUTTON ).
      TOOLBAR_BUTTON = CL_WD_TOOLBAR_BUTTON=>NEW_TOOLBAR_BUTTON( TEXT        = 'Bloquear' "#EC NOTEXT
                                                                IMAGE_SOURCE =  'ICON_LOCKED'
                                                                tooltip      = 'Bloquear'
                                                                ON_ACTION    = 'ACTION_BLOQUE' ).
      TOOLBAR->ADD_TOOLBAR_ITEM( TOOLBAR_BUTTON ).
      TOOLBAR_BUTTON = CL_WD_TOOLBAR_BUTTON=>NEW_TOOLBAR_BUTTON( TEXT         = 'Desbloquear' "#EC NOTEXT
                                                                 IMAGE_SOURCE =  'ICON_UNLOCKED'
                                                                 tooltip      = 'Desbloquear'
                                                                 ON_ACTION    = 'ACTION_DESBLOQ' ).

      TOOLBAR->ADD_TOOLBAR_ITEM( TOOLBAR_BUTTON ).
      TOOLBAR->ADD_TOOLBAR_ITEM( TOOLBAR_SEPARATOR ).
      TOOLBAR_BUTTON = CL_WD_TOOLBAR_BUTTON=>NEW_TOOLBAR_BUTTON( TEXT         = 'Eliminar Ordem de Venda' "#EC NOTEXT
                                                                 IMAGE_SOURCE =  'ICON_STORNO'
                                                                 tooltip      = 'Eliminar Ordem de Venda'
                                                                 ON_ACTION    = 'ACTION_ESTORNAR' ).
      TOOLBAR->ADD_TOOLBAR_ITEM( TOOLBAR_BUTTON ).
      TOOLBAR_BUTTON = CL_WD_TOOLBAR_BUTTON=>NEW_TOOLBAR_BUTTON( TEXT         = 'Estornar Adiantamento' "#EC NOTEXT
                                                                 IMAGE_SOURCE =  'ICON_TE_DEDUCTION'
                                                                 tooltip      = 'Estornar Adiantamento'
                                                                 ON_ACTION    = 'ACTION_ESTORNAR_ADI' ).
      TOOLBAR->ADD_TOOLBAR_ITEM( TOOLBAR_BUTTON ).
      TOOLBAR->ADD_TOOLBAR_ITEM( TOOLBAR_SEPARATOR ).
      TOOLBAR_BUTTON = CL_WD_TOOLBAR_BUTTON=>NEW_TOOLBAR_BUTTON( TEXT         = 'Contrato' "#EC NOTEXT
                                                                 IMAGE_SOURCE =  'ICON_WRI'
                                                                 tooltip      = 'Contrato'
                                                                 ON_ACTION    = 'ACTION_CONTRATO' ).
      TOOLBAR->ADD_TOOLBAR_ITEM( TOOLBAR_BUTTON ).


    ENDIF.


    ITEMS_NODE = WD_CONTEXT->GET_CHILD_NODE( NAME = `RB_G2` ).
    ITEMS_NODE->GET_STATIC_ATTRIBUTES_TABLE( IMPORTING TABLE = ITEMLIST2 ).
    V_INDEX = ITEMS_NODE->GET_LEAD_SELECTION_INDEX( ).
    CLEAR: W_LIST2.
    READ TABLE ITEMLIST2 INTO W_LIST2 INDEX V_INDEX.
    IF W_LIST2-RB_TP_SOL EQ 'Formação de Lote'.

    ELSEIF W_LIST2-RB_TP_SOL  = 'Venda Normal'.


    ENDIF.
  ENDIF.






ENDMETHOD.

method WDDOONCONTEXTMENU .
endmethod.

