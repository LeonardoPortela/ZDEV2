*&---------------------------------------------------------------------*
*& Report  ZMMR154
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZMMR154 MESSAGE-ID ZDESTINACAO.

TYPES BEGIN OF TY_SALDO_ARMAZEM.
TYPES: MBLNR TYPE MBLNR.
TYPES: MJAHR TYPE MJAHR.
TYPES: ZEILE TYPE MBLPO.
TYPES: MEINS TYPE MEINS.
TYPES: MENGE TYPE MENGE_D.
TYPES END OF TY_SALDO_ARMAZEM.

PARAMETERS: POBJKEY  TYPE ZMMT_EE_ZGR-OBJ_KEY NO-DISPLAY,
            "PIDNOTA  TYPE ZDE_ID_NOTA,
            "PNFE     TYPE ZDE_CHAVE_NFE,
            PESTORNA TYPE CHAR01.

START-OF-SELECTION.

  DATA: IT_SALDO_ARMAZEM TYPE TABLE OF TY_SALDO_ARMAZEM,
        WA_SALDO_ARMAZEM TYPE TY_SALDO_ARMAZEM,
        IT_RETORNO       TYPE ZIB_NFE_DIST_RET_T,
        WA_RETORNO       TYPE ZIB_NFE_DIST_RET,
        DOC_GERADOS      TYPE ZMMT_EE_ZGR_DOCS.

  SELECT SINGLE * INTO @DATA(WA_ZMMT_EE_ZGR)
    FROM ZMMT_EE_ZGR
   WHERE ZRG_ATLZ     EQ '1'
     AND TP_OPERACAO  EQ '11'
     AND OBJ_KEY      EQ @POBJKEY.

  CHECK SY-SUBRC IS INITIAL.

  "Busca Nota Fiscal """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  SELECT SINGLE * INTO @DATA(WA_ZSDT0001NT)
    FROM ZSDT0001NT
   WHERE ID_CARGA EQ @WA_ZMMT_EE_ZGR-ID_CARGA
     AND ID_NOTA  EQ @WA_ZMMT_EE_ZGR-ID_NOTA.

  CHECK SY-SUBRC IS INITIAL.
  CHECK WA_ZSDT0001NT-PO_NUMBER IS NOT INITIAL.
  CHECK WA_ZSDT0001NT-PO_ITEM IS NOT INITIAL.

  DATA: NFE TYPE REF TO ZCL_NFE_INBOUND.

  NFE = NEW ZCL_NFE_INBOUND( ).

  TRY .
      "Seta Nota Fical para Fazer Entrada de Retorno de Armazenagem
      NFE->ZIF_CADASTRO~SET_REGISTRO( I_ID_REGISTRO = WA_ZSDT0001NT-NR_CHAVE_NFE ).

      CASE PESTORNA.
        WHEN ABAP_FALSE.
          "Busca Documentos De Material com Saldo para"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

          "Carga para pegar
          "Empresa/Filial/Produto/Depósito{ARMZ}/Lote{Safra}
          SELECT SINGLE * INTO @DATA(WA_CARGA)
            FROM ZSDT0001CG
           WHERE ID_CARGA EQ @WA_ZMMT_EE_ZGR-ID_CARGA.

          CHECK SY-SUBRC IS INITIAL.

          SELECT SINGLE * INTO @DATA(WA_EKPO)
            FROM EKPO
           WHERE EBELN EQ @WA_ZSDT0001NT-PO_NUMBER
             AND EBELP EQ @WA_ZSDT0001NT-PO_ITEM.

          "Selecionar Destinação de Mercadoria""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
          SELECT * INTO TABLE @DATA(IT_ZMMT0116)
            FROM ZMMT0116
           WHERE FORNE EQ @WA_ZSDT0001NT-ID_FORNECEDOR
             AND MATNR EQ @WA_CARGA-ID_PRODUTO
             AND LGORT EQ @WA_EKPO-LGORT
             AND CHARG EQ @WA_CARGA-NR_SAFRA
             AND WERKS EQ @WA_CARGA-ID_BRANCH.

          IF SY-SUBRC IS INITIAL.
            SELECT * INTO TABLE @DATA(IT_ZMMT0114)
              FROM ZMMT0114 AS Z
               FOR ALL ENTRIES IN @IT_ZMMT0116
             WHERE Z~ID_DESTINACAO EQ @IT_ZMMT0116-ID_DESTINACAO
               AND Z~MBLNR         NE @SPACE
               AND Z~MBLNR_ESTORNO EQ @SPACE
               AND NOT EXISTS ( SELECT * FROM MSEG AS M WHERE M~SMBLN EQ Z~MBLNR AND M~SJAHR EQ Z~MJAHR ).

            IF SY-SUBRC IS INITIAL.
              SELECT * INTO TABLE @DATA(IT_MSEG_DESTINADO)
                FROM MSEG
                 FOR ALL ENTRIES IN @IT_ZMMT0114
               WHERE MBLNR EQ @IT_ZMMT0114-MBLNR
                 AND MJAHR EQ @IT_ZMMT0114-MJAHR.
            ENDIF.

            SORT IT_ZMMT0114 BY ID_DESTINACAO.
          ENDIF.

          "Seleciona Documentos de Mercadoria possíveis de vinculação """""""""""""""""""""""""""""""""""""""""""""" (Saídas) - Entradas em Depósito Especial
          SELECT * INTO TABLE @DATA(IT_MSEG_ARMAZENAGEM)
            FROM MSEG AS S
           WHERE S~LIFNR EQ @WA_ZSDT0001NT-ID_FORNECEDOR
             AND S~WERKS EQ @WA_CARGA-ID_BRANCH
             AND S~LGORT EQ @WA_EKPO-LGORT
             AND S~CHARG EQ @WA_CARGA-NR_SAFRA
             AND S~SHKZG EQ 'H'
             AND S~XAUTO EQ @SPACE
             AND S~UMSOK EQ 'O'
             AND S~MATNR EQ @WA_EKPO-MATNR
             AND S~SMBLN EQ @SPACE
             AND NOT EXISTS ( SELECT * FROM MSEG AS E WHERE E~SMBLN EQ S~MBLNR AND E~SJAHR EQ S~MJAHR ).

          "Se não tem saída não pode ter retorno
          CHECK SY-SUBRC IS INITIAL.

          "Ajustar Saldo de Documentos de Material """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
          LOOP AT IT_MSEG_ARMAZENAGEM INTO DATA(WA_MSEG_ARMAZENAGEM).

            READ TABLE IT_SALDO_ARMAZEM ASSIGNING FIELD-SYMBOL(<FS_SALDO_ARMAZEM>)
            WITH KEY MBLNR = WA_MSEG_ARMAZENAGEM-MBLNR MJAHR = WA_MSEG_ARMAZENAGEM-MJAHR ZEILE = WA_MSEG_ARMAZENAGEM-ZEILE.

            IF SY-SUBRC IS NOT INITIAL.
              CLEAR: WA_SALDO_ARMAZEM.
              WA_SALDO_ARMAZEM-MBLNR = WA_MSEG_ARMAZENAGEM-MBLNR.
              WA_SALDO_ARMAZEM-MJAHR = WA_MSEG_ARMAZENAGEM-MJAHR.
              WA_SALDO_ARMAZEM-ZEILE = WA_MSEG_ARMAZENAGEM-ZEILE.
              WA_SALDO_ARMAZEM-MEINS = WA_MSEG_ARMAZENAGEM-MEINS.
              WA_SALDO_ARMAZEM-MENGE = WA_MSEG_ARMAZENAGEM-MENGE.
              APPEND WA_SALDO_ARMAZEM TO IT_SALDO_ARMAZEM.

              READ TABLE IT_SALDO_ARMAZEM ASSIGNING <FS_SALDO_ARMAZEM>
              WITH KEY MBLNR = WA_MSEG_ARMAZENAGEM-MBLNR MJAHR = WA_MSEG_ARMAZENAGEM-MJAHR ZEILE = WA_MSEG_ARMAZENAGEM-ZEILE.
            ENDIF.

            IF <FS_SALDO_ARMAZEM> IS ASSIGNED .

              LOOP AT IT_ZMMT0116 INTO DATA(WA_ZMMT0116)
                WHERE ORIG_MBLNR EQ WA_MSEG_ARMAZENAGEM-MBLNR
                  AND ORIG_MJAHR EQ WA_MSEG_ARMAZENAGEM-MJAHR
                  AND ORIG_ZEILE EQ WA_MSEG_ARMAZENAGEM-ZEILE.
                "Procurar Cabeçalho da Requisição """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                READ TABLE IT_ZMMT0114 WITH KEY ID_DESTINACAO = WA_ZMMT0116-ID_DESTINACAO INTO DATA(WA_ZMMT0114) BINARY SEARCH.
                IF SY-SUBRC IS NOT INITIAL.
                  CONTINUE.
                ENDIF.
                <FS_SALDO_ARMAZEM>-MENGE = <FS_SALDO_ARMAZEM>-MENGE - WA_ZMMT0116-MENGE.
              ENDLOOP.

            ENDIF.

          ENDLOOP.

          "DELETE IT_MSEG_ARMAZENAGEM WHERE MENGE LE 0.
          DELETE IT_SALDO_ARMAZEM WHERE MENGE LE 0.

          "CHECK IT_MSEG_ARMAZENAGEM[] IS NOT INITIAL.
          CHECK IT_SALDO_ARMAZEM[] IS NOT INITIAL.

          "Furamente Pegar Quantidade dos Itens, hoje não existe mais de um item
          DATA(QT_VINCULAR) = WA_ZSDT0001NT-NR_QUANTIDADE.

          DATA(DADOS_NFE) = NFE->GET_INFO_NOTA( ).

          READ TABLE DADOS_NFE-NFE_BASE-ITENS INDEX 1 INTO DATA(NFE_ITEM).
          CHECK SY-SUBRC IS INITIAL.

          NFE_ITEM-MATNR = WA_CARGA-ID_PRODUTO.
          NFE_ITEM-MENGE = WA_ZSDT0001NT-NR_QUANTIDADE.
          NFE_ITEM-MEINS = 'KG'.

          NFE->SET_ITEM_MATERIAL(
            EXPORTING
              I_PROD_ITEM = NFE_ITEM-PROD_ITEM
              I_MATNR     = NFE_ITEM-MATNR
              I_EBELN     = WA_ZSDT0001NT-PO_NUMBER
              I_EBELP     = WA_ZSDT0001NT-PO_ITEM
              I_MENGE     = NFE_ITEM-MENGE
              I_MEINS     = NFE_ITEM-MEINS ).

          SORT IT_MSEG_ARMAZENAGEM BY MBLNR MJAHR ZEILE.

          "LOOP AT IT_MSEG_ARMAZENAGEM INTO WA_MSEG_ARMAZENAGEM.
          LOOP AT IT_SALDO_ARMAZEM INTO WA_SALDO_ARMAZEM.

            IF QT_VINCULAR LE 0.
              CONTINUE.
            ENDIF.

            READ TABLE IT_MSEG_ARMAZENAGEM WITH KEY MBLNR = WA_SALDO_ARMAZEM-MBLNR MJAHR = WA_SALDO_ARMAZEM-MJAHR ZEILE = WA_SALDO_ARMAZEM-ZEILE
            INTO WA_MSEG_ARMAZENAGEM
            BINARY SEARCH.

            IF SY-SUBRC IS NOT INITIAL.
              CONTINUE.
            ENDIF.

            CLEAR: WA_RETORNO.
            WA_RETORNO-CHAVE_NFE = DADOS_NFE-NFE_BASE-CHAVE_NFE.
            WA_RETORNO-CHARG     = WA_MSEG_ARMAZENAGEM-CHARG.
            WA_RETORNO-LGORT     = WA_MSEG_ARMAZENAGEM-LGORT.
            WA_RETORNO-MATNR     = WA_MSEG_ARMAZENAGEM-MATNR.
            WA_RETORNO-MBLNR     = WA_MSEG_ARMAZENAGEM-MBLNR.
            WA_RETORNO-ZEILE     = WA_MSEG_ARMAZENAGEM-ZEILE.
            WA_RETORNO-MJAHR     = WA_MSEG_ARMAZENAGEM-MJAHR.
            WA_RETORNO-PROD_ITEM = NFE_ITEM-PROD_ITEM.
            WA_RETORNO-MEINS     = WA_MSEG_ARMAZENAGEM-MEINS.

            IF QT_VINCULAR GE WA_SALDO_ARMAZEM-MENGE.
              DATA(QT_VINCULADA) = WA_SALDO_ARMAZEM-MENGE.
            ELSE.
              QT_VINCULADA = QT_VINCULAR.
            ENDIF.
            QT_VINCULAR = QT_VINCULAR - QT_VINCULADA.

            WA_RETORNO-MENGE     = QT_VINCULADA.
            APPEND WA_RETORNO TO IT_RETORNO.
          ENDLOOP.

          IF QT_VINCULAR GT 0.
            MESSAGE E021.
          ENDIF.

          NFE->SET_DADOS_RETORNO( I_RETORNO = IT_RETORNO ).
          NFE->SET_ACEITAR_DOCUMENTO( ).
          NFE->SET_ACEITAR_FISICO( I_PRECO_NOTA_FISCAL = ABAP_TRUE ).
          NFE->ZIF_CADASTRO~GRAVAR_REGISTRO( ).
          DADOS_NFE = NFE->GET_INFO_NOTA( ).

          IF DADOS_NFE-NFE_BASE-MBLNR IS NOT INITIAL AND DADOS_NFE-NFE_BASE-DOCNUM_NFE IS NOT INITIAL.
            DOC_GERADOS-OBJ_KEY  = WA_ZMMT_EE_ZGR-OBJ_KEY.
            DOC_GERADOS-BUKRS    = WA_ZMMT_EE_ZGR-COMP_CODE.
            DOC_GERADOS-BRANCH   = WA_ZMMT_EE_ZGR-PLANT.
            DOC_GERADOS-MM_MBLNR = DADOS_NFE-NFE_BASE-MBLNR.
            DOC_GERADOS-MM_MJAHR = DADOS_NFE-NFE_BASE-MJAHR.
            DOC_GERADOS-DOCNUM   = DADOS_NFE-NFE_BASE-DOCNUM_NFE.
            MODIFY ZMMT_EE_ZGR_DOCS FROM DOC_GERADOS.
          ENDIF.

        WHEN ABAP_TRUE.

      ENDCASE.


    CATCH ZCX_NFE_INBOUND_EXCEPTION INTO DATA(EX_NFE_INBOUND).
      EX_NFE_INBOUND->PUBLISHED_ERRO( I_MSGTY = EX_NFE_INBOUND->MSGTY I_MSGTY_DISPLAY = EX_NFE_INBOUND->MSGTY ).
    CATCH ZCX_PEDIDO_COMPRA_EXCEPTION INTO DATA(EX_PEDIDO).
      EX_PEDIDO->PUBLISHED_ERRO( I_MSGTY = EX_PEDIDO->MSGTY I_MSGTY_DISPLAY = EX_PEDIDO->MSGTY ).
    CATCH ZCX_CADASTRO INTO DATA(EX_CADASTRO).
      EX_CADASTRO->PUBLISHED_ERRO( I_MSGTY = EX_CADASTRO->MSGTY I_MSGTY_DISPLAY = EX_CADASTRO->MSGTY ).
  ENDTRY.
