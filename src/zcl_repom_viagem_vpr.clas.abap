class ZCL_REPOM_VIAGEM_VPR definition
  public
  inheriting from ZCL_REPOM
  final
  create public .

public section.

  interfaces ZIF_REPOM .
  interfaces ZIF_CADASTRO .
  interfaces ZIF_PESQUISA .

  aliases EXCLUIR_REGISTRO
    for ZIF_CADASTRO~EXCLUIR_REGISTRO .
  aliases GET_REGISTRO
    for ZIF_CADASTRO~GET_REGISTRO .
  aliases GRAVAR
    for ZIF_CADASTRO~GRAVAR_REGISTRO .
  aliases LIMPAR_REGISTRO
    for ZIF_CADASTRO~LIMPAR_REGISTRO .
  aliases NOVO_REGISTRO
    for ZIF_CADASTRO~NOVO_REGISTRO .
  aliases PESQUISAR
    for ZIF_PESQUISA~PESQUISAR .
  aliases SET_BRANCH
    for ZIF_REPOM~SET_BRANCH .
  aliases SET_BUKRS
    for ZIF_REPOM~SET_BUKRS .
  aliases SET_REGISTRO
    for ZIF_CADASTRO~SET_REGISTRO .
  aliases VALIDA_ATRIBUTO_ALTERAVEL
    for ZIF_CADASTRO~VALIDA_ATRIBUTO_ALTERAVEL .

  data CK_SALVAR_XML_LOCAL type CHAR01 .

  methods CONSTRUCTOR
    importing
      !I_ID_PROC_CLIENTE type ZDE_ID_PROC_CLIENTE optional .
  methods SET_DS_NR_CARTAO
    importing
      !I_DS_NR_CARTAO type ZDE_DS_NR_CARTAO .
  methods SET_ID_ROTA_REPOM
    importing
      !I_ID_ROTA_REPOM type ZDE_ID_ROTA_REPOM .
  methods SET_ID_PERCURSO_REPOM
    importing
      !I_ID_PERCURSO_REPOM type ZDE_ID_PERCURSO_REPOM .
  methods SET_ID_ROTA
    importing
      !I_ID_ROTA type ZDE_ID_ROTA_CLIENTE .
  methods SET_CD_CID_ORIGEM
    importing
      !I_CD_CID_ORIGEM type ZDE_CIDADE_ORIGEM .
  methods SET_CD_CID_DESTINO
    importing
      !I_CD_CID_DESTINO type ZDE_CIDADE_DESTINO .
  methods SET_VEICULO_PLACA
    importing
      !I_VEICULO_PLACA type ZPC_VEICULO .
  methods SET_VEICULO_PLACA_C1
    importing
      !I_VEICULO_PLACA_C1 type ZPC_VEICULO .
  methods SET_VEICULO_PLACA_C2
    importing
      !I_VEICULO_PLACA_C2 type ZPC_VEICULO .
  methods SET_VEICULO_PLACA_C3
    importing
      !I_VEICULO_PLACA_C3 type ZPC_VEICULO .
  methods SET_MOEDA_PEDAGIO
    importing
      !I_MOEDA_PEDAGIO type ZDE_MOEDA_PEDAGIO .
  methods SET_MOTORISTA_COD
    importing
      !I_MOTORISTA_COD type ZDE_MOTORISTA_COD .
  class-methods GET_AUTORIZADO
    importing
      !I_ID_PROC_CLIENTE type ZDE_ID_PROC_CLIENTE
    returning
      value(E_AUTORIZOU) type CHAR01 .
  class-methods CRIAR_VIAGEM
    importing
      !I_TKNUM type TKNUM
      !I_VTTKVB type VTTKVB optional
      !I_CD_CID_ORIGEM type ZDE_CIDADE_ORIGEM optional
      !I_CD_CID_DESTINO type ZDE_CIDADE_DESTINO optional
      !I_NR_CARTAO type ZDE_REPOM_CARTAO_PED optional
      !I_ID_ROTA_REPOM type ZDE_ID_ROTA_REPOM optional
      !I_ID_PERCURSO_REPOM type ZDE_ID_PERCURSO_REPOM optional
      !I_QTD_EIXOS type ZQT_EIXO optional
    exporting
      value(E_GRAVOU) type CHAR01
    returning
      value(E_ID_PROC_CLIENTE) type ZDE_ID_PROC_CLIENTE .
  methods GET_MOTORISTA_CPF
    returning
      value(E_MOTORISTA_CPF) type ZDE_CPF_MOTORISTA .
  methods GET_MOTORISTA_NOME
    returning
      value(E_MOTORISTA_NOME) type ZDE_NOME_MOTORISTA .
  methods GET_MOTORISTA_RG
    returning
      value(E_MOTORISTA_RG) type ZDE_RG_MOTORISTA .
  methods GET_MOTORISTA_FONE
    returning
      value(E_MOTORISTA_FONE) type ZDE_TELEFONE_MOTORISTA .
  methods GET_VEICULO_EIXOS
    returning
      value(R_VEICULO_EIXOS) type ZQT_EIXO .
  methods GET_VEICULO_EIXOS_C1
    returning
      value(R_VEICULO_EIXOS_C1) type ZQT_EIXO .
  methods GET_VEICULO_EIXOS_C2
    returning
      value(R_VEICULO_EIXOS_C2) type ZQT_EIXO .
  methods GET_VEICULO_EIXOS_C3
    returning
      value(R_VEICULO_EIXOS_C3) type ZQT_EIXO .
  methods SOLICITAR_CANCELAMENTO
    exporting
      !E_ERROS type ZDE_REPOM_ERROS_T
    returning
      value(I_CANCELOU) type CHAR01
    exceptions
      SERVICO_NAO_ENCONTRADO
      HTTP_COMMUNICATION_FAILURE
      HTTP_INVALID_STATE
      HTTP_PROCESSING_FAILED
      HTTP_INVALID_TIMEOUT
      ERRO .
  methods SOLICITAR
    exporting
      !E_ERROS type ZDE_REPOM_ERROS_T
    returning
      value(I_SOLICITOU) type CHAR01
    exceptions
      SERVICO_NAO_ENCONTRADO
      HTTP_COMMUNICATION_FAILURE
      HTTP_INVALID_STATE
      HTTP_PROCESSING_FAILED
      HTTP_INVALID_TIMEOUT
      ERRO .
  class-methods GET_ID_PROC_CLIENTE_VT
    importing
      !I_TKNUM type TKNUM
    exporting
      !E_TC_CADASTRO type ZDE_TC_CADASTRO
    returning
      value(E_ID_PROC_CLIENTE) type ZDE_ID_PROC_CLIENTE
    exceptions
      NAO_ENCONTRADO .
  methods SET_BUKRS_ROTA
    importing
      !I_BUKRS_ROTA type BUKRS .
  methods SET_BRANCH_ROTA
    importing
      !I_BRANCH_ROTA type J_1BBRANC_ .
  methods SET_ROTA
    importing
      !I_ID_ROTA type ZDE_ID_ROTA_CLIENTE .
  methods SET_DOCUMENTOS
    importing
      !I_DOCUMENTOS type ZDE_ZLEST0124_T .
  methods GET_DOCUMENTOS
    returning
      value(I_DOCUMENTOS) type ZDE_ZLEST0124_T .
  methods GET_PLACA_TRATOR
    importing
      !I_VEICULO_PLACA type ZPC_VEICULO
    returning
      value(R_TRATOR) type CHAR01 .
  methods GET_PLACA_REBOQUE
    importing
      !I_VEICULO_PLACA type ZPC_VEICULO
    returning
      value(R_REBOQUE) type CHAR01 .
  class-methods IMPRIMIR_VIAGEM
    importing
      value(I_ID_PROC_CLIENTE) type ZDE_ID_PROC_CLIENTE optional
      value(I_DOCNUM_CTE) type J_1BDOCNUM optional
    exceptions
      ERRO .
  class-methods GET_LOGS
    importing
      !I_ID_PROC_CLIENTE type ZDE_ID_PROC_CLIENTE
    returning
      value(R_LOGS) type ZDE_ZLEST0127_ALV_T .
  methods GET_PRACAS
    returning
      value(R_PRACAS) type ZDE_ZLEST0125_T .
  class-methods VERIFICA_CUSTO_VI
    importing
      value(I_DOCNUM_CTE) type J_1BDOCNUM optional
      value(I_ID_PROC_CLIENTE) type ZDE_ID_PROC_CLIENTE optional
    exceptions
      CUSTO_VI .
  PROTECTED SECTION.
  PRIVATE SECTION.

    ALIASES BRANCH
      FOR ZIF_REPOM~BRANCH .
    ALIASES BUKRS
      FOR ZIF_REPOM~BUKRS .
    ALIASES VALIDAR_EXCLUSAO
      FOR ZIF_CADASTRO~VALIDAR_EXCLUSAO .
    ALIASES VALIDAR_REGISTRO
      FOR ZIF_CADASTRO~VALIDAR_REGISTRO .

    DATA ID_PROC_CLIENTE TYPE ZDE_ID_PROC_CLIENTE .
    DATA DS_NR_CARTAO TYPE ZDE_DS_NR_CARTAO .
    DATA ID_ROTA_REPOM TYPE ZDE_ID_ROTA_REPOM .
    DATA ID_PERCURSO_REPOM TYPE ZDE_ID_PERCURSO_REPOM .
    DATA ID_ROTA TYPE ZDE_ID_ROTA_CLIENTE .
    DATA BRANCH_ROTA TYPE J_1BBRANC_ .
    DATA BUKRS_ROTA TYPE BUKRS .
    DATA CD_PAIS TYPE LAND1 .
    DATA CD_CID_ORIGEM TYPE ZDE_CIDADE_ORIGEM .
    DATA CD_CID_DESTINO TYPE ZDE_CIDADE_DESTINO .
    DATA MOTORISTA_COD TYPE ZDE_MOTORISTA_COD .
    DATA MOTORISTA_CPF TYPE ZDE_CPF_MOTORISTA .
    DATA MOTORISTA_NOME TYPE ZDE_NOME_MOTORISTA .
    DATA MOTORISTA_RG TYPE ZDE_RG_MOTORISTA .
    DATA MOTORISTA_FONE TYPE ZDE_TELEFONE_MOTORISTA .
    DATA VEICULO_PLACA TYPE ZPC_VEICULO .
    DATA VEICULO_EIXOS TYPE ZQT_EIXO .
    DATA VEICULO_PLACA_C1 TYPE ZPC_VEICULO .
    DATA VEICULO_EIXOS_C1 TYPE ZQT_EIXO .
    DATA VEICULO_PLACA_C2 TYPE ZPC_VEICULO .
    DATA VEICULO_EIXOS_C2 TYPE ZQT_EIXO .
    DATA VEICULO_PLACA_C3 TYPE ZPC_VEICULO .
    DATA VEICULO_EIXOS_C3 TYPE ZQT_EIXO .
    DATA TP_STATUS_AUT TYPE ZDE_ST_PED_AUT_REPOM .
    DATA TP_STATUS_CAN TYPE ZDE_ST_PED_CAN_REPOM .
    DATA ID_VIAGEM_CODIGO TYPE ZDE_ID_VIAGEM_CODIGO .
    DATA MOEDA_PEDAGIO TYPE ZDE_MOEDA_PEDAGIO .
    DATA VLR_TOTAL_PEDAGIO TYPE ZDE_VLR_TOTAL_PEDAGIO .
    DATA DT_EMISSAO_PEDAGIO TYPE ZDE_DT_EMISSAO_PEDAGIO .
    DATA HR_EMISSAO_PEDAGIO TYPE ZDE_HR_EMISSAO_PEDAGIO .
    DATA TKNUM TYPE TKNUM .
    DATA CK_ALTERADO TYPE CHAR01 .
    DATA US_ULTIMO_AJUSTE TYPE UNAME .
    DATA DT_ULTIMO_AJUSTE TYPE SYST_DATUM .
    DATA HR_ULTIMO_AJUSTE TYPE SYST_UZEIT .
    DATA TC_ULTIMO_AJUSTE TYPE ZDE_TC_ULTIMO_AJUSTE .
    DATA TC_CADASTRO TYPE ZDE_TC_CADASTRO .
    DATA ROTA TYPE REF TO ZCL_REPOM_ROTA .
    DATA DOCUMENTOS TYPE ZDE_ZLEST0124_T .
    DATA PRACAS TYPE ZDE_ZLEST0125_T .

    METHODS SET_DOCUMENTO
      IMPORTING
        !I_DOCUMENTO TYPE ZLEST0124 .
    METHODS SET_PRACA
      IMPORTING
        !I_PRACA TYPE ZLEST0125 .
    METHODS SET_VEICULO_EIXOS
      IMPORTING
        !I_VEICULO_EIXOS TYPE ZQT_EIXO .
    METHODS SET_VEICULO_EIXOS_C1
      IMPORTING
        !I_VEICULO_EIXOS_C1 TYPE ZQT_EIXO .
    METHODS SET_VEICULO_EIXOS_C2
      IMPORTING
        !I_VEICULO_EIXOS_C2 TYPE ZQT_EIXO .
    METHODS SET_VEICULO_EIXOS_C3
      IMPORTING
        !I_VEICULO_EIXOS_C3 TYPE ZQT_EIXO .
    METHODS SET_MOTORISTA_CPF
      IMPORTING
        !I_MOTORISTA_CPF TYPE ZDE_CPF_MOTORISTA .
    METHODS SET_MOTORISTA_NOME
      IMPORTING
        !I_MOTORISTA_NOME TYPE ZDE_NOME_MOTORISTA .
    METHODS SET_MOTORISTA_RG
      IMPORTING
        !I_MOTORISTA_RG TYPE ZDE_RG_MOTORISTA .
    METHODS SET_MOTORISTA_FONE
      IMPORTING
        !I_MOTORISTA_FONE TYPE ZDE_TELEFONE_MOTORISTA .
    METHODS SET_TP_STATUS_AUT
      IMPORTING
        !I_TP_STATUS_AUT TYPE ZDE_ST_PED_AUT_REPOM .
    METHODS SET_TP_STATUS_CAN
      IMPORTING
        !I_TP_STATUS_CAN TYPE ZDE_ST_PED_CAN_REPOM .
    METHODS SET_ID_VIAGEM_CODIGO
      IMPORTING
        !I_ID_VIAGEM_CODIGO TYPE ZDE_ID_VIAGEM_CODIGO .
    METHODS SET_VLR_TOTAL_PEDAGIO
      IMPORTING
        !I_VLR_TOTAL_PEDAGIO TYPE ZDE_VLR_TOTAL_PEDAGIO .
    METHODS SET_CD_PAIS
      IMPORTING
        !I_CD_PAIS TYPE LAND1 .
    METHODS SET_ID_PROC_CLIENTE
      IMPORTING
        !I_ID_PROC_CLIENTE TYPE ZDE_ID_PROC_CLIENTE .
    METHODS SET_DT_EMISSAO_PEDAGIO
      IMPORTING
        !I_DT_EMISSAO_PEDAGIO TYPE ZDE_DT_EMISSAO_PEDAGIO .
    METHODS SET_HR_EMISSAO_PEDAGIO
      IMPORTING
        !I_HR_EMISSAO_PEDAGIO TYPE ZDE_HR_EMISSAO_PEDAGIO .
    METHODS SET_TKNUM
      IMPORTING
        !I_TKNUM TYPE TKNUM .
    METHODS SET_US_ULTIMO_AJUSTE
      IMPORTING
        !I_US_ULTIMO_AJUSTE TYPE UNAME .
    METHODS SET_DT_ULTIMO_AJUSTE
      IMPORTING
        !I_DT_ULTIMO_AJUSTE TYPE SYST_DATUM .
    METHODS SET_HR_ULTIMO_AJUSTE
      IMPORTING
        !I_HR_ULTIMO_AJUSTE TYPE SYST_UZEIT .
    METHODS SET_TC_ULTIMO_AJUSTE
      IMPORTING
        !I_TC_ULTIMO_AJUSTE TYPE ZDE_TC_ULTIMO_AJUSTE .
    METHODS SET_TC_CADASTRO
      IMPORTING
        !I_TC_CADASTRO TYPE ZDE_TC_CADASTRO .
ENDCLASS.



CLASS ZCL_REPOM_VIAGEM_VPR IMPLEMENTATION.


  METHOD CONSTRUCTOR.

    CALL METHOD SUPER->CONSTRUCTOR.

    ME->LIMPAR_REGISTRO( ).

    IF I_ID_PROC_CLIENTE IS NOT INITIAL.
      ME->SET_REGISTRO( EXPORTING I_ID_REGISTRO = I_ID_PROC_CLIENTE ).
    ENDIF.

  ENDMETHOD.


  METHOD CRIAR_VIAGEM.

    DATA: OBJETO       TYPE REF TO ZCL_REPOM_VIAGEM_VPR,
          WA_VTTK      TYPE VTTK,
          IT_ITEM_NOTA TYPE TABLE OF J_1BNFLIN,
          IT_NOTA      TYPE TABLE OF J_1BNFDOC,
          WA_NOTA      TYPE J_1BNFDOC,
          LC_DOCUMENTO TYPE ZLEST0124,
          LC_BUKRS     TYPE BUKRS,
          LC_BRANCH    TYPE J_1BBRANC_,
          IT_VTPA      TYPE TABLE OF VTPA,
          IT_VTTP      TYPE TABLE OF VTTP,
          WA_VTPA      TYPE VTPA,
          WA_VTTP      TYPE VTTP,
          RG_PARVW     TYPE SHP_PARVW_RANGE_T,
          WA_PLACAS    TYPE ZDE_VEICULO_PLACA_R,
          RG_PLACAS    TYPE ZDE_VEICULO_PLACA_T,
          WA_LFA1      TYPE LFA1,
          WA_LFA1_MOT  TYPE LFA1,
          WA_KNA1      TYPE KNA1,
          IT_ZLEST0002 TYPE TABLE OF ZLEST0002,
          WA_ZLEST0002 TYPE ZLEST0002,
          LC_QTD_EIXO  TYPE ZQT_EIXO,
          LC_OK        TYPE CHAR01,
          LC_CARTAO    TYPE ZDE_REPOM_CARTAO,
          IT_ZLEST0123 TYPE TABLE OF ZLEST0123,
          WA_ZLEST0123 TYPE ZLEST0123,
          LC_PERCURSO  TYPE ZLEST0122,
          LC_PLACA     TYPE I,
          LC_LINHAS    TYPE I.

    CLEAR: WA_VTTK, LC_BUKRS, LC_BRANCH, IT_VTPA, WA_VTPA, RG_PARVW, WA_LFA1, WA_LFA1_MOT, WA_KNA1, LC_QTD_EIXO, RG_PLACAS.

    E_GRAVOU = ABAP_FALSE.

    CALL METHOD ZCL_REPOM_VIAGEM_VPR=>GET_ID_PROC_CLIENTE_VT
      EXPORTING
        I_TKNUM           = I_TKNUM
      RECEIVING
        E_ID_PROC_CLIENTE = E_ID_PROC_CLIENTE
      EXCEPTIONS
        NAO_ENCONTRADO    = 1
        OTHERS            = 2.

    IF SY-SUBRC IS INITIAL.
      E_GRAVOU = ABAP_TRUE.
    ENDIF.

    CHECK E_GRAVOU NE ABAP_TRUE.

    RG_PARVW = VALUE #( ( SIGN = 'I' OPTION = 'EQ' LOW = 'PC' HIGH = 'PC' )
                        ( SIGN = 'I' OPTION = 'EQ' LOW = 'LR' HIGH = 'LR' )
                        ( SIGN = 'I' OPTION = 'EQ' LOW = 'MT' HIGH = 'MT' ) ).

    IF I_VTTKVB IS INITIAL.
      SELECT SINGLE * INTO WA_VTTK
        FROM VTTK
       WHERE TKNUM EQ I_TKNUM.
    ELSE.
      MOVE-CORRESPONDING I_VTTKVB TO WA_VTTK.
    ENDIF.

    SELECT SINGLE BUKRS INTO LC_BUKRS FROM TTDS WHERE TPLST = WA_VTTK-TPLST.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = WA_VTTK-TDLNR
      IMPORTING
        OUTPUT = WA_VTTK-TDLNR.

    LC_BRANCH = WA_VTTK-TDLNR.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = LC_BRANCH
      IMPORTING
        OUTPUT = LC_BRANCH.

    IF WA_VTTK-TKNUM IS NOT INITIAL.

      SELECT * INTO TABLE IT_VTPA
        FROM VTPA
       WHERE VBELN EQ WA_VTTK-TKNUM
         AND PARVW IN RG_PARVW.

      READ TABLE IT_VTPA INTO WA_VTPA WITH KEY PARVW = 'PC'.
      IF SY-SUBRC IS INITIAL.
        SELECT SINGLE * INTO WA_LFA1 FROM LFA1 WHERE LIFNR EQ WA_VTPA-LIFNR.
      ENDIF.

      READ TABLE IT_VTPA INTO WA_VTPA WITH KEY PARVW = 'MT'.
      IF SY-SUBRC IS INITIAL.
        SELECT SINGLE * INTO WA_LFA1_MOT FROM LFA1 WHERE LIFNR EQ WA_VTPA-LIFNR.
      ENDIF.

      READ TABLE IT_VTPA INTO WA_VTPA WITH KEY PARVW = 'LR'.
      IF SY-SUBRC IS INITIAL.
        SELECT SINGLE * INTO WA_KNA1 FROM KNA1 WHERE KUNNR EQ WA_VTPA-KUNNR.
      ENDIF.

      WA_PLACAS-SIGN = 'I' .
      WA_PLACAS-OPTION = 'EQ' .
      IF WA_VTTK-TEXT1(7) IS NOT INITIAL.
        WA_PLACAS-LOW = WA_VTTK-TEXT1(7).
        WA_PLACAS-HIGH = WA_VTTK-TEXT1(7).
        APPEND WA_PLACAS TO RG_PLACAS.
      ENDIF.

      IF WA_VTTK-TEXT2(7) IS NOT INITIAL.
        WA_PLACAS-LOW = WA_VTTK-TEXT2(7).
        WA_PLACAS-HIGH = WA_VTTK-TEXT2(7).
        APPEND WA_PLACAS TO RG_PLACAS.
      ENDIF.

      IF WA_VTTK-TEXT3(7) IS NOT INITIAL.
        WA_PLACAS-LOW = WA_VTTK-TEXT3(7).
        WA_PLACAS-HIGH = WA_VTTK-TEXT3(7).
        APPEND WA_PLACAS TO RG_PLACAS.
      ENDIF.

      IF WA_VTTK-TEXT4(7) IS NOT INITIAL.
        WA_PLACAS-LOW = WA_VTTK-TEXT4(7).
        WA_PLACAS-HIGH = WA_VTTK-TEXT4(7).
        APPEND WA_PLACAS TO RG_PLACAS.
      ENDIF.

      SELECT * INTO TABLE IT_ZLEST0002
        FROM ZLEST0002
       WHERE PC_VEICULO IN RG_PLACAS.

      "Inclusão de Documentos
      CALL FUNCTION 'Z_LES_NOTAS_VT'
        EXPORTING
          I_VTTK       = WA_VTTK
        TABLES
          IT_ITEM_NOTA = IT_ITEM_NOTA.

      DESCRIBE TABLE IT_ITEM_NOTA LINES LC_LINHAS.

      IF LC_LINHAS GT 0.
        SELECT * INTO TABLE IT_NOTA
          FROM J_1BNFDOC
           FOR ALL ENTRIES IN IT_ITEM_NOTA
         WHERE DOCNUM EQ IT_ITEM_NOTA-DOCNUM.

        DESCRIBE TABLE IT_NOTA LINES LC_LINHAS.
      ENDIF.

      IF LC_LINHAS EQ 0.
        MESSAGE S055 WITH WA_VTTK-TKNUM DISPLAY LIKE 'E'.
      ENDIF.

      CHECK LC_LINHAS NE 0.
    ENDIF.

    SELECT SINGLE BUKRS INTO @LC_BUKRS
      FROM J_1BBRANCH
     WHERE BRANCH EQ @LC_BRANCH.

    LC_CARTAO-BUKRS     = LC_BUKRS.
    LC_CARTAO-BRANCH    = LC_BRANCH.

    IF I_NR_CARTAO IS INITIAL.
      SELECT SINGLE NR_CARTAO_PED INTO LC_CARTAO-NR_CARTAO
        FROM ZLEST0126
       WHERE MOTORISTA_COD EQ WA_LFA1_MOT-LIFNR.

      CALL FUNCTION 'Z_REPOM_INFORMA_CARTAO_PED'
        IMPORTING
          CK_VALIDADO = LC_OK
        CHANGING
          I_CARTAO    = LC_CARTAO.
    ELSE.

      DATA: E_ERROS TYPE ZDE_REPOM_ERROS_T.

      LC_CARTAO-NR_CARTAO = I_NR_CARTAO.

      CALL FUNCTION 'Z_REPOM_VALIDA_CARTAO'
        EXPORTING
          I_CARTAO = LC_CARTAO "WA_REPOM_CARTAO
        IMPORTING
          E_VALIDO = LC_OK
          E_ERROS  = E_ERROS
        EXCEPTIONS
          ERRO     = 1
          OTHERS   = 2.

    ENDIF.

    CHECK LC_OK EQ ABAP_TRUE.

    IF I_CD_CID_ORIGEM IS NOT INITIAL.
      WA_LFA1-TXJCD = I_CD_CID_ORIGEM.
    ENDIF.

    IF I_CD_CID_DESTINO IS NOT INITIAL.
      WA_KNA1-TXJCD = I_CD_CID_DESTINO.
    ENDIF.

    CALL FUNCTION 'Z_REPOM_INFORMA_PERCURSO'
      EXPORTING
        I_BRANCH          = LC_BRANCH
        I_BUKRS           = LC_BUKRS
        I_CD_CID_ORIGEM   = WA_LFA1-TXJCD
        I_CD_CID_DESTINO  = WA_KNA1-TXJCD
        I_QTD_EIXOS       = I_QTD_EIXOS
        ID_ROTA_REPOM     = I_ID_ROTA_REPOM
        ID_PERCURSO_REPOM = I_ID_PERCURSO_REPOM
      IMPORTING
        E_INFORMADO       = LC_OK
        E_PERCURSO        = LC_PERCURSO
      EXCEPTIONS
        SEM_PERCURSO      = 1
        OTHERS            = 2.

    CHECK LC_OK EQ ABAP_TRUE.

    CREATE OBJECT OBJETO.

    CLEAR WA_ZLEST0002.

    "Veiculo de Tração
    READ TABLE IT_ZLEST0002 INTO WA_ZLEST0002 WITH KEY TP_VEICULO = '0'.
    IF SY-SUBRC IS INITIAL.
      OBJETO->SET_VEICULO_PLACA( EXPORTING I_VEICULO_PLACA = WA_ZLEST0002-PC_VEICULO ).
      DELETE IT_ZLEST0002 WHERE PC_VEICULO = WA_ZLEST0002-PC_VEICULO.
      CASE WA_ZLEST0002-PC_VEICULO.
        WHEN WA_VTTK-TEXT1(7).
          CLEAR: WA_VTTK-TEXT1.
        WHEN WA_VTTK-TEXT2(7).
          CLEAR: WA_VTTK-TEXT2.
        WHEN WA_VTTK-TEXT3(7).
          CLEAR: WA_VTTK-TEXT3.
        WHEN WA_VTTK-TEXT4(7).
          CLEAR: WA_VTTK-TEXT4.
      ENDCASE.
    ENDIF.

    "Veiculo de Reboque
    LC_PLACA = 0.
    LOOP AT IT_ZLEST0002 INTO WA_ZLEST0002.
      CASE WA_ZLEST0002-PC_VEICULO.
        WHEN WA_VTTK-TEXT1(7).
          ADD 1 TO LC_PLACA.
        WHEN WA_VTTK-TEXT2(7).
          ADD 1 TO LC_PLACA.
        WHEN WA_VTTK-TEXT3(7).
          ADD 1 TO LC_PLACA.
        WHEN WA_VTTK-TEXT4(7).
          ADD 1 TO LC_PLACA.
      ENDCASE.

      CASE LC_PLACA.
        WHEN 1.
          OBJETO->SET_VEICULO_PLACA_C1( EXPORTING I_VEICULO_PLACA_C1 = WA_ZLEST0002-PC_VEICULO ).
        WHEN 2.
          OBJETO->SET_VEICULO_PLACA_C2( EXPORTING I_VEICULO_PLACA_C2 = WA_ZLEST0002-PC_VEICULO ).
        WHEN 3.
          OBJETO->SET_VEICULO_PLACA_C3( EXPORTING I_VEICULO_PLACA_C3 = WA_ZLEST0002-PC_VEICULO ).
      ENDCASE.
    ENDLOOP.

    OBJETO->SET_TKNUM( EXPORTING I_TKNUM = WA_VTTK-TKNUM ).
    OBJETO->SET_BUKRS( EXPORTING I_BUKRS = LC_BUKRS ).
    OBJETO->SET_BRANCH( EXPORTING I_BRANCH = LC_BRANCH ).
    OBJETO->SET_CD_CID_DESTINO( EXPORTING I_CD_CID_DESTINO = WA_KNA1-TXJCD ).
    OBJETO->SET_CD_CID_ORIGEM( EXPORTING I_CD_CID_ORIGEM = WA_LFA1-TXJCD ).
    OBJETO->SET_MOTORISTA_COD( EXPORTING I_MOTORISTA_COD = WA_LFA1_MOT-LIFNR ).
    OBJETO->SET_DS_NR_CARTAO( EXPORTING I_DS_NR_CARTAO = LC_CARTAO-NR_CARTAO ).

    "Estanciar Rota
    OBJETO->SET_ID_PERCURSO_REPOM( EXPORTING I_ID_PERCURSO_REPOM = LC_PERCURSO-ID_PERCURSO_REPOM ).
    OBJETO->SET_ID_ROTA( EXPORTING I_ID_ROTA = LC_PERCURSO-ID_ROTA ).
    OBJETO->SET_ID_ROTA_REPOM( EXPORTING I_ID_ROTA_REPOM = LC_PERCURSO-ID_ROTA_REPOM ).

    LOOP AT IT_NOTA INTO WA_NOTA.
      LC_DOCUMENTO-DS_MODELO_DOC     = WA_NOTA-MODEL.
      CASE WA_NOTA-MODEL.
        WHEN 55.
          LC_DOCUMENTO-DS_NUMERO_DOC     = WA_NOTA-NFENUM.
        WHEN 01.
          LC_DOCUMENTO-DS_NUMERO_DOC     = WA_NOTA-NFNUM.
      ENDCASE.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = LC_DOCUMENTO-DS_NUMERO_DOC
        IMPORTING
          OUTPUT = LC_DOCUMENTO-DS_NUMERO_DOC.

      LC_DOCUMENTO-DS_SERIE_DOC      = WA_NOTA-SERIES.
      LC_DOCUMENTO-ID_FILIAL_CLIENTE = WA_NOTA-BRANCH.
      OBJETO->SET_DOCUMENTO( EXPORTING I_DOCUMENTO = LC_DOCUMENTO ).
    ENDLOOP.

    IF OBJETO->GRAVAR( ) EQ ABAP_TRUE.
      E_GRAVOU = ABAP_TRUE.
      E_ID_PROC_CLIENTE = OBJETO->ID_PROC_CLIENTE.
    ENDIF.
    CLEAR: OBJETO.

  ENDMETHOD.


  METHOD GET_AUTORIZADO.

    DATA: WA_ZLEST0123 TYPE ZLEST0123.

    E_AUTORIZOU = ABAP_FALSE.

    SELECT SINGLE * INTO WA_ZLEST0123
      FROM ZLEST0123
     WHERE ID_PROC_CLIENTE EQ I_ID_PROC_CLIENTE.

    CHECK SY-SUBRC IS INITIAL.

    CHECK WA_ZLEST0123-TP_STATUS_CAN NE '2'. "Enviado Cancelamento
    CHECK WA_ZLEST0123-TP_STATUS_CAN NE '3'. "Autorizado Cancelamento
    CHECK WA_ZLEST0123-TP_STATUS_AUT EQ '3'. "Autorizado Crédito

    E_AUTORIZOU = ABAP_TRUE.

  ENDMETHOD.


  METHOD GET_DOCUMENTOS.
    I_DOCUMENTOS = ME->DOCUMENTOS.
  ENDMETHOD.


  METHOD GET_ID_PROC_CLIENTE_VT.

    DATA: IT_ZLEST0123 TYPE TABLE OF ZLEST0123,
          WA_ZLEST0123 TYPE ZLEST0123.

    CLEAR: E_ID_PROC_CLIENTE, IT_ZLEST0123, WA_ZLEST0123.

    "Somente Permite Criar se não existir Solicitação Cancelada
    SELECT * INTO TABLE IT_ZLEST0123
      FROM ZLEST0123
     WHERE TKNUM EQ I_TKNUM
       AND TP_STATUS_CAN NE '3'.

    IF SY-SUBRC IS INITIAL.
      READ TABLE IT_ZLEST0123 INTO WA_ZLEST0123 INDEX 1.
      E_ID_PROC_CLIENTE = WA_ZLEST0123-ID_PROC_CLIENTE.
      E_TC_CADASTRO     = WA_ZLEST0123-TC_CADASTRO.
    ELSE.
      MESSAGE E043 WITH I_TKNUM RAISING NAO_ENCONTRADO.
    ENDIF.

  ENDMETHOD.


  METHOD GET_LOGS.

    DATA: IT_ZLEST0127     TYPE TABLE OF ZLEST0127,
          WA_ZLEST0127     TYPE ZLEST0127,
          WA_ZLEST0127_ALV TYPE ZDE_ZLEST0127_ALV.

    CLEAR R_LOGS.

    SELECT * INTO TABLE IT_ZLEST0127
      FROM ZLEST0127
     WHERE ID_PROC_CLIENTE EQ I_ID_PROC_CLIENTE
     ORDER BY ID_SEC_LOG.

    LOOP AT IT_ZLEST0127 INTO WA_ZLEST0127.
      CLEAR WA_ZLEST0127_ALV.
      MOVE-CORRESPONDING WA_ZLEST0127 TO WA_ZLEST0127_ALV.

*@Q3@  Pendente
*@5Y@  Enviado
*@DF@  Autorizado
*@F1@  Erro

      CASE WA_ZLEST0127_ALV-TP_STATUS_AUT.
        WHEN '1'.
          WA_ZLEST0127_ALV-ICO_STATUS_AUT = '@Q3@'.
        WHEN '2'.
          WA_ZLEST0127_ALV-ICO_STATUS_AUT = '@5Y@'.
        WHEN '3'.
          WA_ZLEST0127_ALV-ICO_STATUS_AUT = '@DF@'.
        WHEN '4'.
          WA_ZLEST0127_ALV-ICO_STATUS_AUT = '@F1@'.
      ENDCASE.

      CASE WA_ZLEST0127_ALV-TP_STATUS_CAN.
        WHEN '1'.
          WA_ZLEST0127_ALV-ICO_STATUS_CAN = '@Q3@'.
        WHEN '2'.
          WA_ZLEST0127_ALV-ICO_STATUS_CAN = '@5Y@'.
        WHEN '3'.
          WA_ZLEST0127_ALV-ICO_STATUS_CAN = '@DF@'.
        WHEN '4'.
          WA_ZLEST0127_ALV-ICO_STATUS_CAN = '@F1@'.
      ENDCASE.

      APPEND WA_ZLEST0127_ALV TO R_LOGS.
    ENDLOOP.

  ENDMETHOD.


  METHOD GET_MOTORISTA_CPF.
    E_MOTORISTA_CPF = ME->MOTORISTA_CPF.
  ENDMETHOD.


  METHOD GET_MOTORISTA_FONE.
    E_MOTORISTA_FONE = ME->MOTORISTA_FONE.
  ENDMETHOD.


  METHOD GET_MOTORISTA_NOME.
    E_MOTORISTA_NOME = ME->MOTORISTA_NOME.
  ENDMETHOD.


  METHOD GET_MOTORISTA_RG.
    E_MOTORISTA_RG = ME->MOTORISTA_RG.
  ENDMETHOD.


  METHOD GET_PLACA_REBOQUE.

    DATA: LC_TP_VEICULO TYPE ZTP_VEICULO.

    R_REBOQUE = ABAP_FALSE.

    CHECK I_VEICULO_PLACA IS NOT INITIAL.

    SELECT SINGLE TP_VEICULO INTO LC_TP_VEICULO
      FROM ZLEST0002
     WHERE PC_VEICULO EQ I_VEICULO_PLACA.

    CHECK SY-SUBRC IS INITIAL.

    IF LC_TP_VEICULO EQ 1.
      R_REBOQUE = ABAP_TRUE.
    ENDIF.

  ENDMETHOD.


  METHOD GET_PLACA_TRATOR.

    DATA: LC_TP_VEICULO TYPE ZTP_VEICULO.

    R_TRATOR = ABAP_FALSE.

    CHECK I_VEICULO_PLACA IS NOT INITIAL.

    SELECT SINGLE TP_VEICULO INTO LC_TP_VEICULO
      FROM ZLEST0002
     WHERE PC_VEICULO EQ I_VEICULO_PLACA.

    CHECK SY-SUBRC IS INITIAL.

    IF LC_TP_VEICULO EQ 0.
      R_TRATOR = ABAP_TRUE.
    ENDIF.

  ENDMETHOD.


  METHOD GET_PRACAS.
    R_PRACAS = ME->PRACAS.
  ENDMETHOD.


  METHOD GET_VEICULO_EIXOS.
    R_VEICULO_EIXOS = ME->VEICULO_EIXOS.
  ENDMETHOD.


  METHOD GET_VEICULO_EIXOS_C1.
    R_VEICULO_EIXOS_C1 = ME->VEICULO_EIXOS_C1.
  ENDMETHOD.


  METHOD GET_VEICULO_EIXOS_C2.
    R_VEICULO_EIXOS_C2 = ME->VEICULO_EIXOS_C2.
  ENDMETHOD.


  METHOD GET_VEICULO_EIXOS_C3.
    R_VEICULO_EIXOS_C3 = ME->VEICULO_EIXOS_C3.
  ENDMETHOD.


  METHOD IMPRIMIR_VIAGEM.

    DATA: PEDAGIO            TYPE REF TO ZCL_REPOM_VIAGEM_VPR,
          LC_AUTORIZOU       TYPE CHAR01,
          LC_REGISTRO        TYPE ZLEST0123,
          LC_CONTROL         TYPE SSFCTRLOP,
          LC_OPTIONS         TYPE SSFCOMPOP,
          WA_VBAK            TYPE VBAK,
          WA_VBRP            TYPE VBRP,
          WA_J_1BNFLIN       TYPE J_1BNFLIN,
          WA_ACTTAB          TYPE J_1BNFE_ACTIVE,
          ST_JOB_OUTPUT_INFO TYPE SSFCRESCL.

    IF I_ID_PROC_CLIENTE IS INITIAL AND I_DOCNUM_CTE IS NOT INITIAL.

      "Item do CT-e
      SELECT SINGLE * INTO WA_J_1BNFLIN FROM J_1BNFLIN WHERE DOCNUM EQ I_DOCNUM_CTE.
      CHECK SY-SUBRC IS INITIAL.
      "Fatura da CT-e
      SELECT SINGLE * INTO WA_VBRP FROM VBRP WHERE VBELN = WA_J_1BNFLIN-REFKEY(10) AND POSNR = WA_J_1BNFLIN-REFITM.
      CHECK SY-SUBRC IS INITIAL.
      "Ordem de Venda
      SELECT SINGLE * INTO WA_VBAK FROM VBAK WHERE VBELN = WA_VBRP-AUBEL.
      CHECK SY-SUBRC IS INITIAL.

      CHECK WA_VBAK-TKNUM IS NOT INITIAL.

      CALL METHOD ZCL_REPOM_VIAGEM_VPR=>GET_ID_PROC_CLIENTE_VT
        EXPORTING
          I_TKNUM           = WA_VBAK-TKNUM
        RECEIVING
          E_ID_PROC_CLIENTE = I_ID_PROC_CLIENTE
        EXCEPTIONS
          NAO_ENCONTRADO    = 1
          OTHERS            = 2.

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 RAISING ERRO.
      ENDIF.
    ENDIF.

    CALL METHOD ZCL_REPOM_VIAGEM_VPR=>GET_AUTORIZADO
      EXPORTING
        I_ID_PROC_CLIENTE = I_ID_PROC_CLIENTE
      RECEIVING
        E_AUTORIZOU       = LC_AUTORIZOU.

    IF LC_AUTORIZOU EQ ABAP_FALSE.
      MESSAGE S037 DISPLAY LIKE 'E'.
    ENDIF.

    CHECK LC_AUTORIZOU EQ ABAP_TRUE.

    CREATE OBJECT PEDAGIO EXPORTING I_ID_PROC_CLIENTE = I_ID_PROC_CLIENTE.

    PEDAGIO->ZIF_CADASTRO~GET_REGISTRO( IMPORTING E_REGISTRO = LC_REGISTRO ) .

    DATA(CK_GERA_PEDAGIO_AUTOMATICO) = ABAP_FALSE.

    IF LC_REGISTRO-TKNUM IS NOT INITIAL.

      SELECT SINGLE * INTO @DATA(WA_ZLEST0026)
        FROM VTTK
       WHERE TKNUM EQ @LC_REGISTRO-TKNUM.

      IF WA_ZLEST0026-ID_CARGA IS NOT INITIAL.
        CK_GERA_PEDAGIO_AUTOMATICO = ABAP_TRUE.
      ENDIF.

    ENDIF.

    "Somente Permite Imprimir da ZCTE sem autorização
    IF SY-TCODE NE 'VT02N'    AND
       SY-TCODE NE 'VT01N'    AND
       SY-TCODE NE 'ZLES0106' AND
       SY-TCODE NE 'ZLES0113' AND
       SY-TCODE NE 'ZLES0115' AND
       SY-TCODE NE 'ZMM0127'  AND
       SY-TCODE NE 'ZCTE'     AND
       SY-TCODE NE 'ZLES0136' AND
       SY-TCODE NE 'ZLES0113' AND
       CK_GERA_PEDAGIO_AUTOMATICO NE ABAP_TRUE.
      AUTHORITY-CHECK OBJECT 'ZREPOM' ID 'BUKRS'     FIELD LC_REGISTRO-BUKRS
                                      ID 'ZREPOMATV' FIELD '13'.
      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE S063 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
    ENDIF.

    "Verificar se a CT-e está autorizada
    IF LC_REGISTRO-TKNUM IS NOT INITIAL.

      "Procurar CT-e
      IF I_DOCNUM_CTE IS INITIAL.

        "Ordem de Venda
        SELECT SINGLE * INTO WA_VBAK FROM VBAK WHERE TKNUM = LC_REGISTRO-TKNUM.
        CHECK SY-SUBRC IS INITIAL.

        "Fatura da CT-e
        SELECT SINGLE * INTO WA_VBRP FROM VBRP WHERE AUBEL = WA_VBAK-VBELN AND DRAFT = SPACE .
        CHECK SY-SUBRC IS INITIAL.

        "Item do CT-e
        SELECT SINGLE * INTO WA_J_1BNFLIN FROM J_1BNFLIN WHERE REFKEY EQ WA_VBRP-VBELN AND REFITM EQ WA_VBRP-POSNR.
        CHECK SY-SUBRC IS INITIAL.

        I_DOCNUM_CTE = WA_J_1BNFLIN-DOCNUM.

      ENDIF.

      "Verificar CT-e Autorizada
      CALL FUNCTION 'J_1B_NFE_XML_RAED_ACTIVE_TAB'
        EXPORTING
          I_DOCNUM = I_DOCNUM_CTE
        IMPORTING
          E_ACTTAB = WA_ACTTAB
        EXCEPTIONS
          NO_ENTRY = 1
          OTHERS   = 2.

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 RAISING ERRO.
      ELSE.
        IF WA_ACTTAB-DOCSTA NE '1'.
          MESSAGE E066 WITH WA_ACTTAB-NFNUM9 RAISING ERRO.
        ELSEIF WA_ACTTAB-CANCEL EQ ABAP_TRUE.
          MESSAGE E067 WITH WA_ACTTAB-NFNUM9 RAISING ERRO.
        ENDIF.
      ENDIF.

    ENDIF.

    DATA: LC_SMARTFORM TYPE RS38L_FNAM.

    CONSTANTS: LC_FORM      TYPE NA_FNAME VALUE 'ZLES_SF_0004'.

    CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
      EXPORTING
        FORMNAME           = LC_FORM
      IMPORTING
        FM_NAME            = LC_SMARTFORM
      EXCEPTIONS
        NO_FORM            = 1
        NO_FUNCTION_MODULE = 2
        OTHERS             = 3.

    IF SY-SUBRC IS NOT INITIAL.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 RAISING ERRO.
    ENDIF.

    LC_CONTROL-NO_DIALOG = ABAP_TRUE. "Evita la pantalla de opciones de salida del formulario
    "LC_CONTROL-PREVIEW   = ABAP_TRUE.
    "LC_CONTROL-DEVICE    = 'PRINTER'.
    "LC_CONTROL-GETOTF    = ABAP_FALSE.
    "LC_OPTIONS-TDDEST    = 'LOCL'.
    "LC_OPTIONS-TDIMMED   = ABAP_TRUE.
    "LC_OPTIONS-TDNEWID   = ABAP_TRUE.
    "LC_OPTIONS-TDNOARCH  = ABAP_TRUE.

    LC_CONTROL-GETOTF    = 'X'.
    LC_CONTROL-PREVIEW   = SPACE.
    LC_CONTROL-DEVICE    = 'PRINTER'.

    CALL FUNCTION LC_SMARTFORM
      EXPORTING
        USER_SETTINGS      = ABAP_FALSE
        CONTROL_PARAMETERS = LC_CONTROL
        OUTPUT_OPTIONS     = LC_OPTIONS
        I_ID_PROC_CLIENTE  = I_ID_PROC_CLIENTE
      IMPORTING
        JOB_OUTPUT_INFO    = ST_JOB_OUTPUT_INFO
      EXCEPTIONS
        FORMATTING_ERROR   = 1
        INTERNAL_ERROR     = 2
        SEND_ERROR         = 3
        USER_CANCELED      = 4
        OTHERS             = 5.

    IF SY-SUBRC IS NOT INITIAL.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 RAISING ERRO.
    ENDIF.

    CALL FUNCTION 'SSFCOMP_PDF_PREVIEW'
      EXPORTING
        I_OTF                    = ST_JOB_OUTPUT_INFO-OTFDATA
      EXCEPTIONS
        CONVERT_OTF_TO_PDF_ERROR = 1
        CNTL_ERROR               = 2
        OTHERS                   = 3.

    IF SY-SUBRC IS NOT INITIAL.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 RAISING ERRO.
    ENDIF.

*    CALL FUNCTION 'ZSMARTFORMS_PDF_PREVIEW'
*      EXPORTING
*        I_OTF                    = ST_JOB_OUTPUT_INFO-OTFDATA
*      EXCEPTIONS
*        CONVERT_OTF_TO_PDF_ERROR = 1
*        CNTL_ERROR               = 2
*        OTHERS                   = 3.
*
*    IF SY-SUBRC IS NOT INITIAL.
*      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 RAISING ERRO.
*    ENDIF.

    PEDAGIO->CK_ALTERADO = ABAP_TRUE.
    PEDAGIO->GRAVAR( ).
    CLEAR: PEDAGIO.

  ENDMETHOD.


  METHOD SET_BRANCH_ROTA.

    IF ME->BRANCH_ROTA NE I_BRANCH_ROTA.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->BRANCH_ROTA = I_BRANCH_ROTA.

  ENDMETHOD.


  METHOD SET_BUKRS_ROTA.

    IF ME->BUKRS_ROTA NE I_BUKRS_ROTA.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->BUKRS_ROTA = I_BUKRS_ROTA.

  ENDMETHOD.


  METHOD SET_CD_CID_DESTINO.

    IF ME->CD_CID_DESTINO NE I_CD_CID_DESTINO.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->CD_CID_DESTINO = I_CD_CID_DESTINO.

  ENDMETHOD.


  METHOD SET_CD_CID_ORIGEM.

    IF ME->CD_CID_ORIGEM NE I_CD_CID_ORIGEM.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->CD_CID_ORIGEM = I_CD_CID_ORIGEM.

  ENDMETHOD.


  METHOD SET_CD_PAIS.

    IF ME->CD_PAIS NE I_CD_PAIS.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->CD_PAIS = I_CD_PAIS.

  ENDMETHOD.


  METHOD SET_DOCUMENTO.

    APPEND I_DOCUMENTO TO ME->DOCUMENTOS.

    ME->CK_ALTERADO = ABAP_TRUE.

  ENDMETHOD.


  METHOD SET_DOCUMENTOS.
    CLEAR: ME->DOCUMENTOS.
    ME->DOCUMENTOS = I_DOCUMENTOS.
    ME->CK_ALTERADO = ABAP_TRUE.
  ENDMETHOD.


  METHOD SET_DS_NR_CARTAO.

    IF ME->DS_NR_CARTAO NE I_DS_NR_CARTAO.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->DS_NR_CARTAO = I_DS_NR_CARTAO.

  ENDMETHOD.


  METHOD SET_DT_EMISSAO_PEDAGIO.

    IF ME->DT_EMISSAO_PEDAGIO NE I_DT_EMISSAO_PEDAGIO.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->DT_EMISSAO_PEDAGIO = I_DT_EMISSAO_PEDAGIO.

  ENDMETHOD.


  METHOD SET_DT_ULTIMO_AJUSTE.

    IF ME->DT_ULTIMO_AJUSTE NE I_DT_ULTIMO_AJUSTE.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->DT_ULTIMO_AJUSTE = I_DT_ULTIMO_AJUSTE.

  ENDMETHOD.


  METHOD SET_HR_EMISSAO_PEDAGIO.

    IF ME->HR_EMISSAO_PEDAGIO NE I_HR_EMISSAO_PEDAGIO.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->HR_EMISSAO_PEDAGIO = I_HR_EMISSAO_PEDAGIO.

  ENDMETHOD.


  METHOD SET_HR_ULTIMO_AJUSTE.

    IF ME->HR_ULTIMO_AJUSTE NE I_HR_ULTIMO_AJUSTE.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->HR_ULTIMO_AJUSTE = I_HR_ULTIMO_AJUSTE.

  ENDMETHOD.


  METHOD SET_ID_PERCURSO_REPOM.

    IF ME->ID_PERCURSO_REPOM NE I_ID_PERCURSO_REPOM.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->ID_PERCURSO_REPOM = I_ID_PERCURSO_REPOM.

  ENDMETHOD.


  METHOD SET_ID_PROC_CLIENTE.

    IF ME->ID_PROC_CLIENTE NE I_ID_PROC_CLIENTE.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->ID_PROC_CLIENTE = I_ID_PROC_CLIENTE.

  ENDMETHOD.


  METHOD SET_ID_ROTA.

    IF ME->ID_ROTA NE I_ID_ROTA.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->ID_ROTA = I_ID_ROTA.
    ME->SET_ROTA( EXPORTING I_ID_ROTA = ME->ID_ROTA ).

  ENDMETHOD.


  METHOD SET_ID_ROTA_REPOM.

    IF ME->ID_ROTA_REPOM NE I_ID_ROTA_REPOM.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->ID_ROTA_REPOM = I_ID_ROTA_REPOM.

  ENDMETHOD.


  METHOD SET_ID_VIAGEM_CODIGO.

    IF ME->ID_VIAGEM_CODIGO NE I_ID_VIAGEM_CODIGO.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->ID_VIAGEM_CODIGO = I_ID_VIAGEM_CODIGO.

  ENDMETHOD.


  METHOD SET_MOEDA_PEDAGIO.

    IF ME->MOEDA_PEDAGIO NE I_MOEDA_PEDAGIO.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->MOEDA_PEDAGIO = I_MOEDA_PEDAGIO.

  ENDMETHOD.


  METHOD SET_MOTORISTA_COD.

    DATA: WA_LFA1     TYPE LFA1,
          WA_ADR2     TYPE ADR2,
          LC_CPF_MOT  TYPE ZDE_CPF_MOTORISTA,
          LC_NAME_MOT TYPE ZDE_NOME_MOTORISTA.

    CLEAR: WA_LFA1, WA_ADR2, LC_CPF_MOT, LC_NAME_MOT.

    IF ME->MOTORISTA_COD NE I_MOTORISTA_COD.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->MOTORISTA_COD = I_MOTORISTA_COD.

    SELECT SINGLE * INTO WA_LFA1
      FROM LFA1
     WHERE LIFNR EQ ME->MOTORISTA_COD.

    CHECK SY-SUBRC IS INITIAL.

    SELECT SINGLE * INTO WA_ADR2
      FROM ADR2
     WHERE ADDRNUMBER EQ WA_LFA1-ADRNR.

    MOVE: WA_LFA1-STCD2 TO LC_CPF_MOT,
          WA_LFA1-NAME1 TO LC_NAME_MOT.

    ME->SET_MOTORISTA_CPF( EXPORTING I_MOTORISTA_CPF = LC_CPF_MOT ).
    ME->SET_MOTORISTA_RG( EXPORTING I_MOTORISTA_RG = WA_LFA1-STCD4 ).
    ME->SET_MOTORISTA_NOME( EXPORTING I_MOTORISTA_NOME = LC_NAME_MOT ).
    ME->SET_MOTORISTA_FONE( EXPORTING I_MOTORISTA_FONE = WA_ADR2-TELNR_CALL ).

  ENDMETHOD.


  METHOD SET_MOTORISTA_CPF.

    IF ME->MOTORISTA_CPF NE I_MOTORISTA_CPF.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->MOTORISTA_CPF = I_MOTORISTA_CPF.

  ENDMETHOD.


  METHOD SET_MOTORISTA_FONE.

    IF ME->MOTORISTA_FONE NE I_MOTORISTA_FONE.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->MOTORISTA_FONE = I_MOTORISTA_FONE.

  ENDMETHOD.


  METHOD SET_MOTORISTA_NOME.

    IF ME->MOTORISTA_NOME NE I_MOTORISTA_NOME.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->MOTORISTA_NOME = I_MOTORISTA_NOME.

  ENDMETHOD.


  METHOD SET_MOTORISTA_RG.

    IF ME->MOTORISTA_RG NE I_MOTORISTA_RG.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->MOTORISTA_RG = I_MOTORISTA_RG.

  ENDMETHOD.


  METHOD SET_PRACA.

    APPEND I_PRACA TO ME->PRACAS.

    ME->CK_ALTERADO = ABAP_TRUE.

  ENDMETHOD.


  METHOD SET_ROTA.

    CLEAR: ME->ROTA,
           ME->BRANCH_ROTA,
           ME->BUKRS_ROTA.

    IF I_ID_ROTA IS NOT INITIAL.
      CREATE OBJECT ME->ROTA
        EXPORTING
          I_ID_ROTA = I_ID_ROTA.

      ME->SET_BRANCH_ROTA( EXPORTING I_BRANCH_ROTA = ME->ROTA->ZIF_REPOM~BRANCH ).
      ME->SET_BUKRS_ROTA(  EXPORTING I_BUKRS_ROTA  = ME->ROTA->ZIF_REPOM~BUKRS ).
    ENDIF.

  ENDMETHOD.


  METHOD SET_TC_CADASTRO.
    ME->TC_CADASTRO = I_TC_CADASTRO.
  ENDMETHOD.


  METHOD SET_TC_ULTIMO_AJUSTE.

    IF ME->TC_ULTIMO_AJUSTE NE I_TC_ULTIMO_AJUSTE.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->TC_ULTIMO_AJUSTE = I_TC_ULTIMO_AJUSTE.

  ENDMETHOD.


  METHOD SET_TKNUM.

    IF ME->TKNUM NE I_TKNUM.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->TKNUM = I_TKNUM.

  ENDMETHOD.


  METHOD SET_TP_STATUS_AUT.

    DATA: WA_ZLEST0126     TYPE ZLEST0126.

    IF ME->TP_STATUS_AUT NE I_TP_STATUS_AUT.
      ME->CK_ALTERADO = ABAP_TRUE.
      "Grava ultimo cartão usado pelo motorista
      WA_ZLEST0126-MOTORISTA_COD = ME->MOTORISTA_COD.
      WA_ZLEST0126-NR_CARTAO_PED = ME->DS_NR_CARTAO.
      MODIFY ZLEST0126 FROM WA_ZLEST0126.
      COMMIT WORK.
    ENDIF.

    ME->TP_STATUS_AUT = I_TP_STATUS_AUT.

  ENDMETHOD.


  METHOD SET_TP_STATUS_CAN.

    IF ME->TP_STATUS_CAN NE I_TP_STATUS_CAN.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->TP_STATUS_CAN = I_TP_STATUS_CAN.

  ENDMETHOD.


  METHOD SET_US_ULTIMO_AJUSTE.

    IF ME->US_ULTIMO_AJUSTE NE I_US_ULTIMO_AJUSTE.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->US_ULTIMO_AJUSTE = I_US_ULTIMO_AJUSTE.

  ENDMETHOD.


  METHOD SET_VEICULO_EIXOS.

    IF ME->VEICULO_EIXOS NE I_VEICULO_EIXOS.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->VEICULO_EIXOS = I_VEICULO_EIXOS.

  ENDMETHOD.


  METHOD SET_VEICULO_EIXOS_C1.

    IF ME->VEICULO_EIXOS_C1 NE I_VEICULO_EIXOS_C1.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->VEICULO_EIXOS_C1 = I_VEICULO_EIXOS_C1.

  ENDMETHOD.


  METHOD SET_VEICULO_EIXOS_C2.

    IF ME->VEICULO_EIXOS_C2 NE I_VEICULO_EIXOS_C2.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->VEICULO_EIXOS_C2 = I_VEICULO_EIXOS_C2.

  ENDMETHOD.


  METHOD SET_VEICULO_EIXOS_C3.

    IF ME->VEICULO_EIXOS_C3 NE I_VEICULO_EIXOS_C3.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->VEICULO_EIXOS_C3 = I_VEICULO_EIXOS_C3.

  ENDMETHOD.


  METHOD SET_VEICULO_PLACA.

    DATA: WA_ZLEST0002 TYPE ZLEST0002.

    IF ME->VEICULO_PLACA NE I_VEICULO_PLACA.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->VEICULO_PLACA = I_VEICULO_PLACA.
    ME->SET_VEICULO_EIXOS( EXPORTING I_VEICULO_EIXOS = 0 ).

    CHECK ME->VEICULO_PLACA IS NOT INITIAL.

    SELECT SINGLE * INTO WA_ZLEST0002
      FROM ZLEST0002
     WHERE PC_VEICULO EQ ME->VEICULO_PLACA.

    IF SY-SUBRC IS INITIAL.
      ME->SET_VEICULO_EIXOS( EXPORTING I_VEICULO_EIXOS = WA_ZLEST0002-QT_EIXO ).
    ENDIF.

  ENDMETHOD.


  METHOD SET_VEICULO_PLACA_C1.

    IF ME->VEICULO_PLACA_C1 NE I_VEICULO_PLACA_C1.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->VEICULO_PLACA_C1 = I_VEICULO_PLACA_C1.
    ME->SET_VEICULO_EIXOS_C1( EXPORTING I_VEICULO_EIXOS_C1 = 0 ).

    CHECK ME->VEICULO_PLACA_C1 IS NOT INITIAL.

    DATA: WA_ZLEST0002 TYPE ZLEST0002.

    SELECT SINGLE * INTO WA_ZLEST0002
      FROM ZLEST0002
     WHERE PC_VEICULO EQ ME->VEICULO_PLACA_C1.

    IF SY-SUBRC IS INITIAL.
      ME->SET_VEICULO_EIXOS_C1( EXPORTING I_VEICULO_EIXOS_C1 = WA_ZLEST0002-QT_EIXO ).
    ENDIF.

  ENDMETHOD.


  METHOD SET_VEICULO_PLACA_C2.

    IF ME->VEICULO_PLACA_C2 NE I_VEICULO_PLACA_C2.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->VEICULO_PLACA_C2 = I_VEICULO_PLACA_C2.
    ME->SET_VEICULO_EIXOS_C2( EXPORTING I_VEICULO_EIXOS_C2 = 0 ).

    CHECK ME->VEICULO_PLACA_C2 IS NOT INITIAL.

    DATA: WA_ZLEST0002 TYPE ZLEST0002.

    SELECT SINGLE * INTO WA_ZLEST0002
      FROM ZLEST0002
     WHERE PC_VEICULO EQ ME->VEICULO_PLACA_C2.

    IF SY-SUBRC IS INITIAL.
      ME->SET_VEICULO_EIXOS_C2( EXPORTING I_VEICULO_EIXOS_C2 = WA_ZLEST0002-QT_EIXO ).
    ENDIF.

  ENDMETHOD.


  METHOD SET_VEICULO_PLACA_C3.

    IF ME->VEICULO_PLACA_C3 NE I_VEICULO_PLACA_C3.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->VEICULO_PLACA_C3 = I_VEICULO_PLACA_C3.
    ME->SET_VEICULO_EIXOS_C3( EXPORTING I_VEICULO_EIXOS_C3 = 0 ).

    CHECK ME->VEICULO_PLACA_C3 IS NOT INITIAL.

    DATA: WA_ZLEST0002 TYPE ZLEST0002.

    SELECT SINGLE * INTO WA_ZLEST0002
      FROM ZLEST0002
     WHERE PC_VEICULO EQ ME->VEICULO_PLACA_C3.

    IF SY-SUBRC IS INITIAL.
      ME->SET_VEICULO_EIXOS_C3( EXPORTING I_VEICULO_EIXOS_C3 = WA_ZLEST0002-QT_EIXO ).
    ENDIF.

  ENDMETHOD.


  METHOD SET_VLR_TOTAL_PEDAGIO.

    IF ME->VLR_TOTAL_PEDAGIO NE I_VLR_TOTAL_PEDAGIO.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->VLR_TOTAL_PEDAGIO = I_VLR_TOTAL_PEDAGIO.

  ENDMETHOD.


  METHOD SOLICITAR.

    DATA: I_NAME_FILE TYPE STRING,
          I_QTD_EIXOS TYPE ZQT_EIXO.

    CHECK ME->CK_ALTERADO = ABAP_FALSE.

    DATA: VAR_HTTP         TYPE REF TO IF_HTTP_CLIENT,
          LC_EXCEPTION     TYPE REF TO ZCX_WEBSERVICE,
          LC_MSG           TYPE STRING,
          XML_RETORNO      TYPE STRING,
          XML_INPUT        TYPE STRING,
          LC_XML_AUTENTICA TYPE STRING,
          LC_ERRO          TYPE ZDE_REPOM_ERROS,
          LC_VALOR         TYPE C LENGTH 20.

    DATA: LC_XML_RET   TYPE REF TO CL_XML_DOCUMENT,
          LC_XML_RET_E TYPE REF TO CL_XML_DOCUMENT,
          LC_TAMANHO   TYPE I,
          LC_XML_NODE  TYPE REF TO IF_IXML_NODE,
          LC_ITERATOR  TYPE REF TO IF_IXML_NODE_ITERATOR,
          LC_STRING    TYPE STRING,
          LC_DOCUMENTO TYPE ZLEST0124,
          WA_ZLEST0125 TYPE ZLEST0125.

    DATA: STR1 TYPE STRING,
          STR2 TYPE STRING.

    DATA: LC_CIDADE_ORIGEM_IBGE  TYPE C LENGTH 5,
          LC_CIDADE_DESTINO_IBGE TYPE C LENGTH 5,
          LC_UF_ORIGEM_IBGE      TYPE C LENGTH 2,
          LC_UF_DESTINO_IBGE     TYPE C LENGTH 2.

    I_SOLICITOU = ABAP_FALSE.

    DATA(CK_GERA_PEDAGIO_AUTOMATICO) = ABAP_FALSE.

    IF ME->TKNUM IS NOT INITIAL.

      SELECT SINGLE * INTO @DATA(WA_ZLEST0026)
        FROM VTTK
       WHERE TKNUM EQ @ME->TKNUM.

      IF WA_ZLEST0026-ID_CARGA IS NOT INITIAL.
        CK_GERA_PEDAGIO_AUTOMATICO = ABAP_TRUE.
      ENDIF.

    ENDIF.

    IF SY-TCODE NE 'VT02N'     AND
       SY-TCODE NE 'VT01N'     AND
       SY-TCODE NE 'ZLES0106'  AND
       SY-TCODE NE 'ZLES0113'  AND
       SY-TCODE NE 'ZLES0115'  AND
       SY-TCODE NE 'ZMM0127'   AND
       SY-TCODE NE 'ZCTE'      AND
       SY-TCODE NE 'ZLES0136'  AND
       SY-TCODE NE 'ZLES0113'  AND
       CK_GERA_PEDAGIO_AUTOMATICO NE ABAP_TRUE.
      AUTHORITY-CHECK OBJECT 'ZREPOM' ID 'BUKRS'     FIELD ME->BUKRS
                                      ID 'ZREPOMATV' FIELD '11'.
      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE S063 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
    ENDIF.

    CHECK ME->TP_STATUS_AUT NE '3'.
    CHECK ME->TP_STATUS_CAN NE '3'.

    LC_CIDADE_ORIGEM_IBGE  = ME->CD_CID_ORIGEM+5(5).
    LC_CIDADE_DESTINO_IBGE = ME->CD_CID_DESTINO+5(5).
    LC_UF_ORIGEM_IBGE      = ME->CD_CID_ORIGEM(2).
    LC_UF_DESTINO_IBGE     = ME->CD_CID_DESTINO(2).

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = LC_CIDADE_ORIGEM_IBGE
      IMPORTING
        OUTPUT = LC_CIDADE_ORIGEM_IBGE.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = LC_CIDADE_DESTINO_IBGE
      IMPORTING
        OUTPUT = LC_CIDADE_DESTINO_IBGE.

    ME->GET_AUTENTICA( EXPORTING I_OBJETO = ME RECEIVING XML = LC_XML_AUTENTICA ).
    CALL METHOD ME->LIMPAR.
    ME->CTNA(   EXPORTING TEXTO = '<?xml version="1.0" encoding="utf-8"?>' ).
    ME->CTNA(   EXPORTING TEXTO = '<soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">' ).
    ME->CTNA(   EXPORTING TEXTO = '<soap12:Body>' ).
    ME->CTNAB(  EXPORTING TAG   = 'EmiteViagemVPR xmlns="http://www.repom.com.br/RepomIntegracaoWs/Integracao"' ).
    ME->CTNA(   EXPORTING TEXTO = LC_XML_AUTENTICA ).
    ME->CTNAB(  EXPORTING TAG   = 'strXmlIn' ).

    ME->CTNAB(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'viagem' ).
    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'processo_cliente_codigo' VALOR = ME->ID_PROC_CLIENTE ).
    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'filial_codigo_cliente' VALOR = ME->BRANCH ).
    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'cartao' VALOR = ME->DS_NR_CARTAO ).

    ME->CTNAB(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'roteiro' ).
    LC_VALOR = ME->ID_ROTA_REPOM.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT' EXPORTING INPUT = LC_VALOR IMPORTING OUTPUT = LC_VALOR.
    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'roteiro_codigo' VALOR = LC_VALOR ).
    LC_VALOR = ME->ID_PERCURSO_REPOM.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT' EXPORTING INPUT = LC_VALOR IMPORTING OUTPUT = LC_VALOR.
    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'percurso_codigo' VALOR = LC_VALOR ).
    IF ME->ID_ROTA(1) NE 'A'.
      ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'roteiro_cliente_codigo' VALOR = ME->ID_ROTA ).
    ELSE.
      ME->CTNAFE( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'roteiro_cliente_codigo' ).
    ENDIF.
    "ME->CTNAFE( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'roteiro_cliente_codigo' ).
    "ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'cidade_origem_ibge' VALOR = LC_CIDADE_ORIGEM_IBGE ).
    ME->CTNAFE( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'cidade_origem_ibge' ).
    ME->CTNAFE( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'cidade_origem_cep' ).
    "ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'estado_origem' VALOR = LC_UF_ORIGEM_IBGE ).
    ME->CTNAFE( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'estado_origem' ).
    "ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'cidade_destino_ibge' VALOR = LC_CIDADE_DESTINO_IBGE ).
    ME->CTNAFE( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'cidade_destino_ibge' ).
    ME->CTNAFE( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'cidade_destino_cep' ).
    "ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'estado_destino' VALOR = LC_UF_DESTINO_IBGE ).
    ME->CTNAFE( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'estado_destino' ).
    ME->CTNFE(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'roteiro' ).

    ME->CTNAB(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'motorista' ).
    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'motorista_cpf' VALOR = ME->MOTORISTA_CPF ).

    DATA NOME_MOTORISTA type STRING.
    NOME_MOTORISTA =  ME->MOTORISTA_NOME.
    DATA(NOME_LIMPO) = ZCL_STRING=>TIRA_ACENTOS( ZCL_STRING=>CONVERT_TO_UTF8( NOME_MOTORISTA ) ).

    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'motorista_nome' VALOR = NOME_LIMPO ).
    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'motorista_rg' VALOR = ME->MOTORISTA_RG ).
    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'motorista_telefone' VALOR = ME->MOTORISTA_FONE ).
    ME->CTNFE(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'motorista' ).
    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'veiculo_placa' VALOR = ME->VEICULO_PLACA ).
    I_QTD_EIXOS = ME->VEICULO_EIXOS + ME->VEICULO_EIXOS_C1 + ME->VEICULO_EIXOS_C2 + ME->VEICULO_EIXOS_C3.
    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'veiculo_eixos' VALOR = I_QTD_EIXOS ).
    ME->CTNAFE( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'carreta_placa' ).
    ME->CTNAFE( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'carreta_eixos' ).
    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'eixos_suspensos_ida' VALOR = '0' ).
    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'eixos_suspensos_volta' VALOR = '0' ).
    ME->CTNAFE( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'centro_custo_codigo' ).
    ME->CTNAFE( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'centro_custo_tipo' ).

    ME->CTNAB(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'documentos' ).
    LOOP AT ME->DOCUMENTOS INTO LC_DOCUMENTO.
      ME->CTNAB( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'documento' ).
      ME->CTNAV( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'documento_codigo' VALOR = LC_DOCUMENTO-DS_NUMERO_DOC ).
      ME->CTNAV( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'serie' VALOR = LC_DOCUMENTO-DS_SERIE_DOC ).
      ME->CTNAV( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'filial_codigo_cliente' VALOR = LC_DOCUMENTO-ID_FILIAL_CLIENTE ).
      ME->CTNFE( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'documento' ).
    ENDLOOP.
    ME->CTNFE(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'documentos' ).

    ME->CTNAB(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'concessionarias' ).
*    ME->CTNAB(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'concessionaria' ).
*    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'concessionaria_codigo' VALOR = ME-> ).
*    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'concessionaria_codigo_cliente' VALOR = ME-> ).
*    ME->CTNFE(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'concessionaria' ).
    ME->CTNFE(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'concessionarias' ).
*
    ME->CTNAB(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'pracas' ).
*    ME->CTNAB(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'praca' ).
*    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'praca_codigo' VALOR = ME-> ).
*    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'praca_codigo_cliente' VALOR = ME-> ).
*    ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'eixos_suspensos' VALOR = ME-> ).
*    ME->CTNFE(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'praca' ).
    ME->CTNFE(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'pracas' ).

    ME->CTNFE(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'viagem' ).

    ME->CTNFE(  EXPORTING TAG   = 'strXmlIn' ).
    ME->CTNAFE( EXPORTING TAG   = 'strXmlOut' ).
    ME->CTNAFE( EXPORTING TAG   = 'strXmlErr' ).
    ME->CTNFE(  EXPORTING TAG   = 'EmiteViagemVPR' ).
    ME->CTNA(   EXPORTING TEXTO = '</soap12:Body>' ).
    ME->CTNA(   EXPORTING TEXTO = '</soap12:Envelope>' ).

    IF ME->CK_SALVAR_XML_LOCAL EQ ABAP_TRUE.
      CONCATENATE 'C:\Maggi\REPOM\EmiteViagemVPR' ME->ID_PROC_CLIENTE '.xml' INTO I_NAME_FILE.
      CALL METHOD ME->SALVA_XML
        EXPORTING
          I_NAME_FILE = I_NAME_FILE.
    ENDIF.

    TRY .
        ME->SET_SERVICO( I_SERVICO = 'R1' ).
      CATCH ZCX_WEBSERVICE INTO LC_EXCEPTION.
        LC_MSG = LC_EXCEPTION->GET_TEXT( ).
        MESSAGE E008 WITH 'R1 (EmiteViagemVPR ME->SET_SERVICO)' RAISING SERVICO_NAO_ENCONTRADO.
    ENDTRY.

    ME->SET_TIPO( I_TIPO = 'I' ).

    TRY .
        VAR_HTTP = ME->URL( ). "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
      CATCH ZCX_WEBSERVICE INTO LC_EXCEPTION.
        LC_MSG = LC_EXCEPTION->GET_TEXT( ).
        MESSAGE E008 WITH 'R1 (EmiteViagemVPR ME->URL)' RAISING SERVICO_NAO_ENCONTRADO.
    ENDTRY.

    ME->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = VAR_HTTP ).

    CALL METHOD ME->GET_XML
      IMPORTING
        E_XML_TEXTO = XML_INPUT.

    CALL METHOD ME->ZIF_WEBSERVICE~CONSULTAR
      EXPORTING
        I_HTTP                     = VAR_HTTP
        I_XML                      = XML_INPUT
      RECEIVING
        E_RESULTADO                = XML_RETORNO
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3
        HTTP_INVALID_TIMEOUT       = 4
        OTHERS                     = 5.

    CASE SY-SUBRC.
      WHEN 1.
        MESSAGE E009 RAISING HTTP_COMMUNICATION_FAILURE.
      WHEN 2.
        MESSAGE E010 RAISING HTTP_INVALID_STATE.
      WHEN 3.
        MESSAGE E011 RAISING HTTP_PROCESSING_FAILED.
      WHEN 4.
        MESSAGE E012 RAISING HTTP_INVALID_TIMEOUT.
      WHEN 5.
        MESSAGE E013 RAISING ERRO.
    ENDCASE.

    IF ME->CK_SALVAR_XML_LOCAL EQ ABAP_TRUE.
      CONCATENATE 'C:\Maggi\REPOM\EmiteViagemVPRRet' ME->ID_PROC_CLIENTE '.xml' INTO I_NAME_FILE.
      CALL METHOD ME->SALVA_XML
        EXPORTING
          I_NAME_FILE = I_NAME_FILE
          I_XML       = XML_RETORNO.
    ENDIF.

    CREATE OBJECT LC_XML_RET.

    CALL METHOD LC_XML_RET->PARSE_STRING
      EXPORTING
        STREAM  = XML_RETORNO
      RECEIVING
        RETCODE = LC_TAMANHO.

    CALL METHOD LC_XML_RET->FIND_NODE
      EXPORTING
        NAME = 'EmiteViagemVPRResult'
      RECEIVING
        NODE = LC_XML_NODE.

    IF ( SY-SUBRC EQ 0 ) AND ( NOT LC_XML_NODE IS INITIAL ).
      LC_STRING = LC_XML_NODE->GET_VALUE( ).
      TRANSLATE LC_STRING TO UPPER CASE.
      IF LC_STRING EQ 'TRUE'.

        ME->SET_TP_STATUS_AUT( EXPORTING I_TP_STATUS_AUT = '3' ).
        ME->GRAVAR( ).

        CALL METHOD LC_XML_RET->FIND_NODE
          EXPORTING
            NAME = 'strXmlOut'
          RECEIVING
            NODE = LC_XML_NODE.

        XML_RETORNO = LC_XML_NODE->GET_VALUE( ).

        CREATE OBJECT LC_XML_RET_E.

        CALL METHOD LC_XML_RET_E->PARSE_STRING
          EXPORTING
            STREAM  = XML_RETORNO
          RECEIVING
            RETCODE = LC_TAMANHO.

        DATA: I_ID_VIAGEM_CODIGO   TYPE ZDE_ID_VIAGEM_CODIGO,
              I_VLR_TOTAL_PEDAGIO	 TYPE ZDE_VLR_TOTAL_PEDAGIO,
              I_DT_EMISSAO_PEDAGIO TYPE ZDE_DT_EMISSAO_PEDAGIO,
              I_HR_EMISSAO_PEDAGIO TYPE ZDE_HR_EMISSAO_PEDAGIO.

        CALL METHOD LC_XML_RET_E->FIND_NODE
          EXPORTING
            NAME = 'viagem_codigo'
          RECEIVING
            NODE = LC_XML_NODE.

        IF ( SY-SUBRC EQ 0 ) AND ( NOT LC_XML_NODE IS INITIAL ).
          I_ID_VIAGEM_CODIGO = LC_XML_NODE->GET_VALUE( ).

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = I_ID_VIAGEM_CODIGO
            IMPORTING
              OUTPUT = I_ID_VIAGEM_CODIGO.

          ME->SET_ID_VIAGEM_CODIGO( EXPORTING I_ID_VIAGEM_CODIGO = I_ID_VIAGEM_CODIGO ).
        ENDIF.

        CALL METHOD LC_XML_RET_E->FIND_NODE
          EXPORTING
            NAME = 'valor_total_pedagios'
          RECEIVING
            NODE = LC_XML_NODE.

        IF ( SY-SUBRC EQ 0 ) AND ( NOT LC_XML_NODE IS INITIAL ).
          LC_STRING = LC_XML_NODE->GET_VALUE( ).
          CONDENSE LC_STRING NO-GAPS.
          REPLACE ALL OCCURRENCES OF ',' IN LC_STRING WITH ''.
          MOVE: LC_STRING TO I_VLR_TOTAL_PEDAGIO.
          ME->SET_VLR_TOTAL_PEDAGIO( EXPORTING I_VLR_TOTAL_PEDAGIO = I_VLR_TOTAL_PEDAGIO ).
        ENDIF.

        CALL METHOD LC_XML_RET_E->FIND_NODE
          EXPORTING
            NAME = 'data_emissao'
          RECEIVING
            NODE = LC_XML_NODE.

        IF ( SY-SUBRC EQ 0 ) AND ( NOT LC_XML_NODE IS INITIAL ).
          LC_STRING = LC_XML_NODE->GET_VALUE( ).
          CLEAR: STR1, STR2.
          SPLIT LC_STRING AT ' ' INTO STR1 STR2.
          CONCATENATE STR1+6(4) STR1+3(2) STR1+0(2) INTO I_DT_EMISSAO_PEDAGIO.
          IF STR2 IS NOT INITIAL.
            CONCATENATE STR2+0(2) STR2+3(2) '00' INTO I_HR_EMISSAO_PEDAGIO.
          ENDIF.
          ME->SET_DT_EMISSAO_PEDAGIO( EXPORTING I_DT_EMISSAO_PEDAGIO = I_DT_EMISSAO_PEDAGIO ).
          ME->SET_HR_EMISSAO_PEDAGIO( EXPORTING I_HR_EMISSAO_PEDAGIO = I_HR_EMISSAO_PEDAGIO ).
        ENDIF.

        CALL METHOD LC_XML_RET_E->FIND_NODE
          EXPORTING
            NAME = 'pedagios'
          RECEIVING
            NODE = LC_XML_NODE.

        IF ( SY-SUBRC EQ 0 ) AND ( NOT LC_XML_NODE IS INITIAL ).
          LC_ITERATOR = LC_XML_NODE->CREATE_ITERATOR( ).
          LC_XML_NODE = LC_ITERATOR->GET_NEXT( ).

          CLEAR: WA_ZLEST0125, ME->PRACAS.
          ME->CK_ALTERADO = ABAP_TRUE.
          WHILE NOT LC_XML_NODE IS INITIAL.
            CASE LC_XML_NODE->GET_TYPE( ).
              WHEN: IF_IXML_NODE=>CO_NODE_ELEMENT.
                LC_STRING = LC_XML_NODE->GET_NAME( ).
                LC_VALOR  = LC_XML_NODE->GET_VALUE( ).
                CASE LC_STRING.
                  WHEN 'pedagio'.
                    IF WA_ZLEST0125 IS NOT INITIAL.
                      APPEND WA_ZLEST0125 TO ME->PRACAS.
                      ME->CK_ALTERADO = ABAP_TRUE.
                      CLEAR: WA_ZLEST0125.
                    ENDIF.
                  WHEN 'concessionaria_codigo'.
                    WA_ZLEST0125-ID_CONCESSIONARIA = LC_VALOR.
                    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                      EXPORTING
                        INPUT  = WA_ZLEST0125-ID_CONCESSIONARIA
                      IMPORTING
                        OUTPUT = WA_ZLEST0125-ID_CONCESSIONARIA.
                  WHEN 'concessionaria_nome'.
                    WA_ZLEST0125-DS_CONCESSIONARIA = LC_VALOR.
                  WHEN 'praca_codigo'.
                    WA_ZLEST0125-ID_PRACA = LC_VALOR.
                    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                      EXPORTING
                        INPUT  = WA_ZLEST0125-ID_PRACA
                      IMPORTING
                        OUTPUT = WA_ZLEST0125-ID_PRACA.
                  WHEN 'praca_nome'.
                    WA_ZLEST0125-DS_PRACA = LC_VALOR.
                  WHEN 'valor'.
                    CONDENSE LC_STRING NO-GAPS.
                    REPLACE ALL OCCURRENCES OF ',' IN LC_STRING WITH ''.
                    MOVE: LC_VALOR TO I_VLR_TOTAL_PEDAGIO.
                    WA_ZLEST0125-VLR_PEDAGIO = I_VLR_TOTAL_PEDAGIO.
                ENDCASE.
            ENDCASE.
            LC_XML_NODE = LC_ITERATOR->GET_NEXT( ).
          ENDWHILE.
          IF WA_ZLEST0125 IS NOT INITIAL.
            APPEND WA_ZLEST0125 TO ME->PRACAS.
            ME->CK_ALTERADO = ABAP_TRUE.
            CLEAR: WA_ZLEST0125.
          ENDIF.
        ENDIF.

        ME->SET_TP_STATUS_AUT( EXPORTING I_TP_STATUS_AUT = '3' ).
        ME->GRAVAR( ).
        I_SOLICITOU = ABAP_TRUE.
        MESSAGE S015.

      ELSE.
        CALL METHOD LC_XML_RET->FIND_NODE
          EXPORTING
            NAME = 'strXmlErr'
          RECEIVING
            NODE = LC_XML_NODE.

        IF ( SY-SUBRC EQ 0 ) AND ( NOT LC_XML_NODE IS INITIAL ).

          XML_RETORNO = LC_XML_NODE->GET_VALUE( ).

          CREATE OBJECT LC_XML_RET_E.

          CALL METHOD LC_XML_RET_E->PARSE_STRING
            EXPORTING
              STREAM  = XML_RETORNO
            RECEIVING
              RETCODE = LC_TAMANHO.

          CALL METHOD LC_XML_RET_E->FIND_NODE
            EXPORTING
              NAME = 'erros'
            RECEIVING
              NODE = LC_XML_NODE.

          IF ( SY-SUBRC EQ 0 ) AND ( NOT LC_XML_NODE IS INITIAL ).

            LC_ITERATOR = LC_XML_NODE->CREATE_ITERATOR( ).
            LC_XML_NODE = LC_ITERATOR->GET_NEXT( ).

            WHILE NOT LC_XML_NODE IS INITIAL.
              CASE LC_XML_NODE->GET_TYPE( ).
                WHEN: IF_IXML_NODE=>CO_NODE_ELEMENT.
                  LC_STRING = LC_XML_NODE->GET_NAME( ).
                  IF LC_STRING EQ 'erro_codigo'.
                    LC_STRING = LC_XML_NODE->GET_VALUE( ).
                    LC_ERRO-ERRO_CODIGO = LC_STRING.
                  ELSEIF LC_STRING EQ 'erro_descricao'.
                    LC_STRING = LC_XML_NODE->GET_VALUE( ).
                    LC_ERRO-ERRO_DESCRICAO = LC_STRING.
                    APPEND LC_ERRO TO E_ERROS.
                  ENDIF.
              ENDCASE.
              LC_XML_NODE = LC_ITERATOR->GET_NEXT( ).
            ENDWHILE.
          ENDIF.

        ELSE.
          MESSAGE E014 RAISING ERRO.
        ENDIF.
      ENDIF.
    ENDIF.

*POST /repomintegracaows/integracao/integracao.asmx HTTP/1.1
*Host: qa.repom.com.br
*Content-Type: application/soap+xml; charset=utf-8
*Content-Length: length
*
*<?xml version="1.0" encoding="utf-8"?>
*<soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">
*  <soap12:Body>
*    <EmiteViagemVPR xmlns="http://www.repom.com.br/RepomIntegracaoWs/Integracao">
*      <strCliente>string</strCliente>
*      <strAssinaturaDigital>string</strAssinaturaDigital>
*      <strXmlIn>string</strXmlIn>
*      <strXmlOut>string</strXmlOut>
*      <strXmlErr>string</strXmlErr>
*    </EmiteViagemVPR>
*  </soap12:Body>
*</soap12:Envelope>


*HTTP/1.1 200 OK
*Content-Type: application/soap+xml; charset=utf-8
*Content-Length: length
*
*<?xml version="1.0" encoding="utf-8"?>
*<soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">
*  <soap12:Body>
*    <EmiteViagemVPRResponse xmlns="http://www.repom.com.br/RepomIntegracaoWs/Integracao">
*      <EmiteViagemVPRResult>boolean</EmiteViagemVPRResult>
*      <strXmlOut>string</strXmlOut>
*      <strXmlErr>string</strXmlErr>
*    </EmiteViagemVPRResponse>
*  </soap12:Body>
*</soap12:Envelope>

  ENDMETHOD.


  METHOD SOLICITAR_CANCELAMENTO.

    DATA: I_NAME_FILE TYPE STRING.

    CHECK ME->CK_ALTERADO = ABAP_FALSE.

    DATA: VAR_HTTP         TYPE REF TO IF_HTTP_CLIENT,
          LC_EXCEPTION     TYPE REF TO ZCX_WEBSERVICE,
          LC_MSG           TYPE STRING,
          XML_RETORNO      TYPE STRING,
          XML_INPUT        TYPE STRING,
          LC_XML_AUTENTICA TYPE STRING,
          LC_ERRO          TYPE ZDE_REPOM_ERROS,
          WA_VFKP          TYPE VFKP.

    DATA: LC_XML_RET         TYPE REF TO CL_XML_DOCUMENT,
          LC_XML_RET_E       TYPE REF TO CL_XML_DOCUMENT,
          LC_TAMANHO         TYPE I,
          LC_XML_NODE        TYPE REF TO IF_IXML_NODE,
          LC_ITERATOR        TYPE REF TO IF_IXML_NODE_ITERATOR,
          LC_STRING          TYPE STRING,
          I_ID_VIAGEM_CODIGO TYPE ZDE_ID_VIAGEM_CODIGO.

    I_CANCELOU = ABAP_FALSE.

    DATA(CK_GERA_PEDAGIO_AUTOMATICO) = ABAP_FALSE.

    IF ME->TKNUM IS NOT INITIAL.

      SELECT SINGLE * INTO @DATA(WA_ZLEST0026)
        FROM VTTK
       WHERE TKNUM EQ @ME->TKNUM.

      IF WA_ZLEST0026-ID_CARGA IS NOT INITIAL.
        CK_GERA_PEDAGIO_AUTOMATICO = ABAP_TRUE.
      ENDIF.

    ENDIF.

    IF SY-TCODE NE 'VT02N'    AND
       SY-TCODE NE 'VT01N'    AND
       SY-TCODE NE 'ZLES0106' AND
       SY-TCODE NE 'ZLES0113' AND
       SY-TCODE NE 'ZLES0115' AND
       SY-TCODE NE 'ZMM0127'  AND
       SY-TCODE NE 'ZCTE'     AND
       SY-TCODE NE 'ZLES0136' AND
       SY-TCODE NE 'ZLES0113' AND
      CK_GERA_PEDAGIO_AUTOMATICO NE ABAP_TRUE.
      AUTHORITY-CHECK OBJECT 'ZREPOM' ID 'BUKRS'     FIELD ME->BUKRS
                                      ID 'ZREPOMATV' FIELD '12'.
      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE S063 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
    ENDIF.

    IF ME->TKNUM IS NOT INITIAL.
      SELECT SINGLE * INTO WA_VFKP FROM VFKP WHERE REBEL = ME->TKNUM.
      IF SY-SUBRC IS INITIAL.
        MESSAGE E065 RAISING ERRO.
      ENDIF.
    ENDIF.

    IF ME->TP_STATUS_AUT NE '3'.
      MESSAGE S059.
    ENDIF.

    CHECK ME->TP_STATUS_AUT EQ '3'.
    CHECK ME->TP_STATUS_CAN NE '3'.

    "Se não estiver Autorizado pode cancelar sem solicitar a REPOM
    IF ME->TP_STATUS_AUT NE '3'.
      ME->SET_TP_STATUS_CAN( EXPORTING I_TP_STATUS_CAN = '3' ).
      ME->GRAVAR( ).
      I_CANCELOU = ABAP_TRUE.
    ELSE.
      ME->GET_AUTENTICA( EXPORTING I_OBJETO = ME RECEIVING XML = LC_XML_AUTENTICA ).
      CALL METHOD ME->LIMPAR.

      ME->CTNA(   EXPORTING TEXTO = '<?xml version="1.0" encoding="utf-8"?>' ).
      ME->CTNA(   EXPORTING TEXTO = '<soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">' ).
      ME->CTNA(   EXPORTING TEXTO = '<soap12:Body>' ).
      ME->CTNAB(  EXPORTING TAG   = 'CancelaViagemVPR xmlns="http://www.repom.com.br/RepomIntegracaoWs/Integracao"' ).
      ME->CTNA(   EXPORTING TEXTO = LC_XML_AUTENTICA ).
      ME->CTNAB(  EXPORTING TAG   = 'strXmlIn' ).
      ME->CTNAB(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'processo_transporte' ).

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = ME->ID_VIAGEM_CODIGO
        IMPORTING
          OUTPUT = I_ID_VIAGEM_CODIGO.

      ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'processo_transporte_codigo' VALOR = ME->ID_VIAGEM_CODIGO ).
      ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'processo_cliente_codigo' VALOR = ME->ID_PROC_CLIENTE ).
      ME->CTNAV(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'processo_cliente_filial_codigo_cliente' VALOR = ME->BRANCH ).
      ME->CTNAFE( EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'login' ).
      ME->CTNFE(  EXPORTING ABRE  = '&lt;' FECHA = '&gt;' TAG = 'processo_transporte' ).
      ME->CTNFE(  EXPORTING TAG   = 'strXmlIn' ).
      ME->CTNAFE( EXPORTING TAG   = 'strXmlErr' ).
      ME->CTNFE(  EXPORTING TAG   = 'CancelaViagemVPR' ).
      ME->CTNA(   EXPORTING TEXTO = '</soap12:Body>' ).
      ME->CTNA(   EXPORTING TEXTO = '</soap12:Envelope>' ).

      IF ME->CK_SALVAR_XML_LOCAL EQ ABAP_TRUE.
        CONCATENATE 'C:\Maggi\REPOM\CancelaViagemVPR' ME->ID_PROC_CLIENTE '.xml' INTO I_NAME_FILE.
        CALL METHOD ME->SALVA_XML
          EXPORTING
            I_NAME_FILE = I_NAME_FILE.
      ENDIF.

      TRY .
          ME->SET_SERVICO( I_SERVICO = 'R1' ).
        CATCH ZCX_WEBSERVICE INTO LC_EXCEPTION.
          LC_MSG = LC_EXCEPTION->GET_TEXT( ).
          MESSAGE E008 WITH 'R1 (CancelaViagemVPR ME->SET_SERVICO)' RAISING SERVICO_NAO_ENCONTRADO.
      ENDTRY.

      ME->SET_TIPO( I_TIPO = 'I' ).

      TRY .
          VAR_HTTP = ME->URL( ). "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
        CATCH ZCX_WEBSERVICE INTO LC_EXCEPTION.
          LC_MSG = LC_EXCEPTION->GET_TEXT( ).
          MESSAGE E008 WITH 'R1 (CancelaViagemVPR ME->URL)' RAISING SERVICO_NAO_ENCONTRADO.
      ENDTRY.

      ME->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = VAR_HTTP ).

      CALL METHOD ME->GET_XML
        IMPORTING
          E_XML_TEXTO = XML_INPUT.

      CALL METHOD ME->ZIF_WEBSERVICE~CONSULTAR
        EXPORTING
          I_HTTP                     = VAR_HTTP
          I_XML                      = XML_INPUT
        RECEIVING
          E_RESULTADO                = XML_RETORNO
        EXCEPTIONS
          HTTP_COMMUNICATION_FAILURE = 1
          HTTP_INVALID_STATE         = 2
          HTTP_PROCESSING_FAILED     = 3
          HTTP_INVALID_TIMEOUT       = 4
          OTHERS                     = 5.

      CASE SY-SUBRC.
        WHEN 1.
          MESSAGE E009 RAISING HTTP_COMMUNICATION_FAILURE.
        WHEN 2.
          MESSAGE E010 RAISING HTTP_INVALID_STATE.
        WHEN 3.
          MESSAGE E011 RAISING HTTP_PROCESSING_FAILED.
        WHEN 4.
          MESSAGE E012 RAISING HTTP_INVALID_TIMEOUT.
        WHEN 5.
          MESSAGE E013 RAISING ERRO.
      ENDCASE.

      IF ME->CK_SALVAR_XML_LOCAL EQ ABAP_TRUE.
        CONCATENATE 'C:\Maggi\REPOM\CancelaViagemVPRRet' ME->ID_ROTA '.xml' INTO I_NAME_FILE.
        CALL METHOD ME->SALVA_XML
          EXPORTING
            I_NAME_FILE = I_NAME_FILE
            I_XML       = XML_RETORNO.
      ENDIF.

      CREATE OBJECT LC_XML_RET.

      CALL METHOD LC_XML_RET->PARSE_STRING
        EXPORTING
          STREAM  = XML_RETORNO
        RECEIVING
          RETCODE = LC_TAMANHO.

      CALL METHOD LC_XML_RET->FIND_NODE
        EXPORTING
          NAME = 'CancelaViagemVPRResult'
        RECEIVING
          NODE = LC_XML_NODE.

      IF ( SY-SUBRC EQ 0 ) AND ( NOT LC_XML_NODE IS INITIAL ).
        LC_STRING = LC_XML_NODE->GET_VALUE( ).
        TRANSLATE LC_STRING TO UPPER CASE.
        IF LC_STRING EQ 'TRUE'.
          MESSAGE S015.
          ME->SET_TP_STATUS_CAN( EXPORTING I_TP_STATUS_CAN = '3' ).
          ME->GRAVAR( ).
          I_CANCELOU = ABAP_TRUE.
        ELSE.
          CALL METHOD LC_XML_RET->FIND_NODE
            EXPORTING
              NAME = 'strXmlErr'
            RECEIVING
              NODE = LC_XML_NODE.

          IF ( SY-SUBRC EQ 0 ) AND ( NOT LC_XML_NODE IS INITIAL ).

            XML_RETORNO = LC_XML_NODE->GET_VALUE( ).

            CREATE OBJECT LC_XML_RET_E.

            CALL METHOD LC_XML_RET_E->PARSE_STRING
              EXPORTING
                STREAM  = XML_RETORNO
              RECEIVING
                RETCODE = LC_TAMANHO.

            CALL METHOD LC_XML_RET_E->FIND_NODE
              EXPORTING
                NAME = 'erros'
              RECEIVING
                NODE = LC_XML_NODE.

            IF ( SY-SUBRC EQ 0 ) AND ( NOT LC_XML_NODE IS INITIAL ).

              LC_ITERATOR = LC_XML_NODE->CREATE_ITERATOR( ).
              LC_XML_NODE = LC_ITERATOR->GET_NEXT( ).

              WHILE NOT LC_XML_NODE IS INITIAL.
                CASE LC_XML_NODE->GET_TYPE( ).
                  WHEN: IF_IXML_NODE=>CO_NODE_ELEMENT.
                    LC_STRING = LC_XML_NODE->GET_NAME( ).
                    IF LC_STRING EQ 'erro_codigo'.
                      LC_STRING = LC_XML_NODE->GET_VALUE( ).
                      LC_ERRO-ERRO_CODIGO = LC_STRING.
                    ELSEIF LC_STRING EQ 'erro_descricao'.
                      LC_STRING = LC_XML_NODE->GET_VALUE( ).
                      LC_ERRO-ERRO_DESCRICAO = LC_STRING.
                      APPEND LC_ERRO TO E_ERROS.
                    ENDIF.
                ENDCASE.
                LC_XML_NODE = LC_ITERATOR->GET_NEXT( ).
              ENDWHILE.
            ENDIF.

            IF LC_ERRO-ERRO_CODIGO EQ '763'.
              "763 - Não existe viagem ativa para este Processo de Transporte.
              MESSAGE W073.
              ME->SET_TP_STATUS_CAN( EXPORTING I_TP_STATUS_CAN = '3' ).
              ME->GRAVAR( ).
              I_CANCELOU = ABAP_TRUE.
            ENDIF.

          ELSE.
            MESSAGE E014 RAISING ERRO.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*POST /repomintegracaows/integracao/integracao.asmx HTTP/1.1
*Host: qa.repom.com.br
*Content-Type: application/soap+xml; charset=utf-8
*Content-Length: length
*
*<?xml version="1.0" encoding="utf-8"?>
*<soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">
*  <soap12:Body>
*    <CancelaViagemVPR xmlns="http://www.repom.com.br/RepomIntegracaoWs/Integracao">
*      <strCliente>string</strCliente>
*      <strAssinaturaDigital>string</strAssinaturaDigital>
*      <strXmlIn>string</strXmlIn>
*      <strXmlErr>string</strXmlErr>
*    </CancelaViagemVPR>
*  </soap12:Body>
*</soap12:Envelope>


*HTTP/1.1 200 OK
*Content-Type: application/soap+xml; charset=utf-8
*Content-Length: length
*
*<?xml version="1.0" encoding="utf-8"?>
*<soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">
*  <soap12:Body>
*    <CancelaViagemVPRResponse xmlns="http://www.repom.com.br/RepomIntegracaoWs/Integracao">
*      <CancelaViagemVPRResult>boolean</CancelaViagemVPRResult>
*      <strXmlErr>string</strXmlErr>
*    </CancelaViagemVPRResponse>
*  </soap12:Body>
*</soap12:Envelope>


  ENDMETHOD.


  METHOD VERIFICA_CUSTO_VI.

    DATA: WA_J_1BNFLIN TYPE J_1BNFLIN,
          WA_VBRP      TYPE VBRP,
          WA_VBAK      TYPE VBAK.

    DATA: OBJ_VIAGEM   TYPE REF TO ZCL_REPOM_VIAGEM_VPR,
          I_FILTROS    TYPE ZDE_ZLEST0123_FILTRO,
          I_TABELA_ID  TYPE ZDE_ID_PROC_CLIENTE_T,
          I_LINHA_ID   TYPE ZDE_ID_PROC_CLIENTE_R,
          E_REGISTROS  TYPE ZDE_ZLEST0123_ALV_T,
          E_LINHA      TYPE ZDE_ZLEST0123_ALV,
          WA_ZLEST0026 TYPE ZLEST0026,
          IT_VFKP      TYPE TABLE OF VFKP,
          IT_KONV      TYPE TABLE OF KONV,
          WA_VFKP      TYPE VFKP,
          WA_KONV      TYPE KONV,
          VLR_CUSTO_VI TYPE ZDE_VALOR_CUSTO.

    IF I_ID_PROC_CLIENTE IS INITIAL AND I_DOCNUM_CTE IS NOT INITIAL.

      "Item do CT-e
      SELECT SINGLE * INTO WA_J_1BNFLIN FROM J_1BNFLIN WHERE DOCNUM EQ I_DOCNUM_CTE.
      CHECK SY-SUBRC IS INITIAL.
      "Fatura da CT-e
      SELECT SINGLE * INTO WA_VBRP FROM VBRP WHERE VBELN = WA_J_1BNFLIN-REFKEY(10) AND POSNR = WA_J_1BNFLIN-REFITM.
      CHECK SY-SUBRC IS INITIAL.
      "Ordem de Venda
      SELECT SINGLE * INTO WA_VBAK FROM VBAK WHERE VBELN = WA_VBRP-AUBEL.
      CHECK SY-SUBRC IS INITIAL.

      CHECK WA_VBAK-TKNUM IS NOT INITIAL.

      CALL METHOD ZCL_REPOM_VIAGEM_VPR=>GET_ID_PROC_CLIENTE_VT
        EXPORTING
          I_TKNUM           = WA_VBAK-TKNUM
        RECEIVING
          E_ID_PROC_CLIENTE = I_ID_PROC_CLIENTE
        EXCEPTIONS
          NAO_ENCONTRADO    = 1
          OTHERS            = 2.

      "Não é REPOM automático
      IF SY-SUBRC IS NOT INITIAL.
        SELECT *
          INTO TABLE IT_VFKP
          FROM VFKP
         WHERE REBEL = WA_VBAK-TKNUM
           AND REFTY = '8'
           AND FKPTY = 'Z001'.

        CLEAR: IT_KONV.

        IF SY-SUBRC IS INITIAL.
          SELECT FROM V_KONV FIELDS * FOR ALL ENTRIES IN @IT_VFKP WHERE KNUMV EQ @IT_VFKP-KNUMV AND KAPPL EQ 'F' AND KSCHL EQ 'ZPED' AND KINAK EQ @SPACE INTO CORRESPONDING FIELDS OF TABLE @IT_KONV .
        ENDIF.

        VLR_CUSTO_VI = 0.

        LOOP AT IT_VFKP INTO WA_VFKP WHERE REBEL EQ WA_VBAK-TKNUM.
          LOOP AT IT_KONV INTO WA_KONV WHERE KNUMV EQ WA_VFKP-KNUMV.
            ADD  WA_KONV-KWERT TO VLR_CUSTO_VI.
          ENDLOOP.
        ENDLOOP.

        CLEAR: WA_ZLEST0026.
        WA_ZLEST0026-PEDAGIO = 0.
        SELECT SINGLE * INTO WA_ZLEST0026 FROM ZLEST0026 WHERE TKNUM EQ WA_VBAK-TKNUM.

        IF WA_ZLEST0026-PEDAGIO NE VLR_CUSTO_VI.
          MESSAGE E070 WITH E_LINHA-TKNUM RAISING CUSTO_VI.
        ENDIF.
      ENDIF.
    ENDIF.

    IF I_ID_PROC_CLIENTE IS NOT INITIAL.
      CREATE OBJECT OBJ_VIAGEM.

      I_LINHA_ID-SIGN   = 'I'.
      I_LINHA_ID-OPTION = 'EQ'.
      I_LINHA_ID-LOW    = I_ID_PROC_CLIENTE.
      I_LINHA_ID-HIGH   = I_ID_PROC_CLIENTE.
      APPEND I_LINHA_ID TO I_TABELA_ID.

      I_FILTROS-ID_PROC_CLIENTE = I_TABELA_ID.
      IF OBJ_VIAGEM->ZIF_PESQUISA~PESQUISAR( EXPORTING I_FILTROS = I_FILTROS IMPORTING E_REGISTROS = E_REGISTROS ) EQ ABAP_TRUE.
        CLEAR: OBJ_VIAGEM.
        READ TABLE E_REGISTROS INTO E_LINHA INDEX 1.
        IF E_LINHA-VLR_TOTAL_PEDAGIO NE E_LINHA-VLR_CUSTO_VI.
          MESSAGE E070 WITH E_LINHA-TKNUM RAISING CUSTO_VI.
        ENDIF.
      ENDIF.
      CLEAR: OBJ_VIAGEM.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~EXCLUIR_REGISTRO.

    I_EXCLUIU = ABAP_FALSE.

    IF ME->VALIDAR_EXCLUSAO( ) EQ ABAP_TRUE.

      "Pedágios da Viagem - REPOM (Concessionárias/Praças)
      DELETE FROM ZLEST0125 WHERE ID_PROC_CLIENTE EQ ME->ID_PROC_CLIENTE.

      "Documentos da Viagem - REPOM
      DELETE FROM ZLEST0124 WHERE ID_PROC_CLIENTE EQ ME->ID_PROC_CLIENTE.

      "Viagem REPOM
      DELETE FROM ZLEST0123 WHERE ID_PROC_CLIENTE EQ ME->ID_PROC_CLIENTE.

      COMMIT WORK.

      I_EXCLUIU = ABAP_TRUE.
      MESSAGE S048.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~GET_REGISTRO.

    DATA: WA_REGISTRO TYPE ZLEST0123.

    WA_REGISTRO-ID_PROC_CLIENTE    = ME->ID_PROC_CLIENTE.
    WA_REGISTRO-BUKRS              = ME->BUKRS.
    WA_REGISTRO-BRANCH             = ME->BRANCH.
    WA_REGISTRO-DS_NR_CARTAO       = ME->DS_NR_CARTAO.
    WA_REGISTRO-ID_ROTA_REPOM      = ME->ID_ROTA_REPOM.
    WA_REGISTRO-ID_PERCURSO_REPOM  = ME->ID_PERCURSO_REPOM.
    WA_REGISTRO-ID_ROTA            = ME->ID_ROTA.
    WA_REGISTRO-BUKRS_ROTA         = ME->BUKRS_ROTA.
    WA_REGISTRO-BRANCH_ROTA        = ME->BRANCH_ROTA.
    WA_REGISTRO-CD_PAIS            = ME->CD_PAIS.
    WA_REGISTRO-CD_CID_ORIGEM      = ME->CD_CID_ORIGEM.
    WA_REGISTRO-CD_CID_DESTINO     = ME->CD_CID_DESTINO.
    WA_REGISTRO-MOTORISTA_COD      = ME->MOTORISTA_COD.
    WA_REGISTRO-MOTORISTA_CPF      = ME->MOTORISTA_CPF.
    WA_REGISTRO-MOTORISTA_NOME     = ME->MOTORISTA_NOME.
    WA_REGISTRO-MOTORISTA_RG       = ME->MOTORISTA_RG.
    WA_REGISTRO-MOTORISTA_FONE     = ME->MOTORISTA_FONE.
    WA_REGISTRO-VEICULO_PLACA      = ME->VEICULO_PLACA.
    WA_REGISTRO-VEICULO_EIXOS      = ME->VEICULO_EIXOS.
    WA_REGISTRO-VEICULO_PLACA_C1   = ME->VEICULO_PLACA_C1.
    WA_REGISTRO-VEICULO_EIXOS_C1   = ME->VEICULO_EIXOS_C1.
    WA_REGISTRO-VEICULO_PLACA_C2   = ME->VEICULO_PLACA_C2.
    WA_REGISTRO-VEICULO_EIXOS_C2   = ME->VEICULO_EIXOS_C2.
    WA_REGISTRO-VEICULO_PLACA_C3   = ME->VEICULO_PLACA_C3.
    WA_REGISTRO-VEICULO_EIXOS_C3   = ME->VEICULO_EIXOS_C3.
    WA_REGISTRO-TP_STATUS_AUT      = ME->TP_STATUS_AUT.
    WA_REGISTRO-TP_STATUS_CAN      = ME->TP_STATUS_CAN.
    WA_REGISTRO-ID_VIAGEM_CODIGO   = ME->ID_VIAGEM_CODIGO.
    WA_REGISTRO-MOEDA_PEDAGIO      = ME->MOEDA_PEDAGIO.
    WA_REGISTRO-VLR_TOTAL_PEDAGIO  = ME->VLR_TOTAL_PEDAGIO.
    WA_REGISTRO-DT_EMISSAO_PEDAGIO = ME->DT_EMISSAO_PEDAGIO.
    WA_REGISTRO-HR_EMISSAO_PEDAGIO = ME->HR_EMISSAO_PEDAGIO.
    WA_REGISTRO-TKNUM              = ME->TKNUM.
    WA_REGISTRO-US_ULTIMO_AJUSTE   = ME->US_ULTIMO_AJUSTE.
    WA_REGISTRO-DT_ULTIMO_AJUSTE   = ME->DT_ULTIMO_AJUSTE.
    WA_REGISTRO-HR_ULTIMO_AJUSTE   = ME->HR_ULTIMO_AJUSTE.
    WA_REGISTRO-TC_ULTIMO_AJUSTE   = ME->TC_ULTIMO_AJUSTE.
    WA_REGISTRO-TC_CADASTRO        = ME->TC_CADASTRO.
    MOVE-CORRESPONDING WA_REGISTRO TO E_REGISTRO.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~GRAVAR_REGISTRO.

    DATA: WA_ZLEST0123 TYPE ZLEST0123,
          WA_ZLEST0127 TYPE ZLEST0127.

    FIELD-SYMBOLS: <FS_0124> TYPE ZLEST0124,
                   <FS_0125> TYPE ZLEST0125.

    I_GRAVOU = ABAP_FALSE.

    IF ME->CK_ALTERADO EQ ABAP_TRUE.
      IF ME->ZIF_CADASTRO~VALIDAR_REGISTRO( ) EQ ABAP_TRUE.

        IF ME->ID_PROC_CLIENTE IS INITIAL.

          CALL FUNCTION 'NUMBER_GET_NEXT'
            EXPORTING
              NR_RANGE_NR = '01'
              OBJECT      = 'ZVIAREPOM'
            IMPORTING
              NUMBER      = ME->ID_PROC_CLIENTE.

          ME->SET_TC_CADASTRO( EXPORTING I_TC_CADASTRO   = SY-TCODE ).

        ELSE.
          DELETE FROM ZLEST0124 WHERE ID_PROC_CLIENTE = ME->ID_PROC_CLIENTE.
        ENDIF.

        ME->SET_US_ULTIMO_AJUSTE( EXPORTING I_US_ULTIMO_AJUSTE   = SY-UNAME ).
        ME->SET_DT_ULTIMO_AJUSTE( EXPORTING I_DT_ULTIMO_AJUSTE   = SY-DATUM ).
        ME->SET_HR_ULTIMO_AJUSTE( EXPORTING I_HR_ULTIMO_AJUSTE   = SY-UZEIT ).
        ME->SET_TC_ULTIMO_AJUSTE( EXPORTING I_TC_ULTIMO_AJUSTE   = SY-TCODE ).

        WA_ZLEST0123-ID_PROC_CLIENTE    = ME->ID_PROC_CLIENTE.
        WA_ZLEST0123-BUKRS              = ME->BUKRS.
        WA_ZLEST0123-BRANCH             = ME->BRANCH.
        WA_ZLEST0123-DS_NR_CARTAO       = ME->DS_NR_CARTAO.
        WA_ZLEST0123-ID_ROTA_REPOM      = ME->ID_ROTA_REPOM.
        WA_ZLEST0123-ID_PERCURSO_REPOM  = ME->ID_PERCURSO_REPOM.
        WA_ZLEST0123-ID_ROTA            = ME->ID_ROTA.
        WA_ZLEST0123-BUKRS_ROTA         = ME->BUKRS_ROTA.
        WA_ZLEST0123-BRANCH_ROTA        = ME->BRANCH_ROTA.
        WA_ZLEST0123-BUKRS_ROTA         = ME->BUKRS_ROTA.
        WA_ZLEST0123-BRANCH_ROTA        = ME->BRANCH_ROTA.
        WA_ZLEST0123-CD_PAIS            = ME->CD_PAIS.
        WA_ZLEST0123-CD_CID_ORIGEM      = ME->CD_CID_ORIGEM.
        WA_ZLEST0123-CD_CID_DESTINO     = ME->CD_CID_DESTINO.
        WA_ZLEST0123-MOTORISTA_COD      = ME->MOTORISTA_COD.
        WA_ZLEST0123-MOTORISTA_CPF      = ME->MOTORISTA_CPF.
        WA_ZLEST0123-MOTORISTA_NOME     = ME->MOTORISTA_NOME.
        WA_ZLEST0123-MOTORISTA_RG       = ME->MOTORISTA_RG.
        WA_ZLEST0123-MOTORISTA_FONE     = ME->MOTORISTA_FONE.
        WA_ZLEST0123-VEICULO_PLACA      = ME->VEICULO_PLACA.
        WA_ZLEST0123-VEICULO_EIXOS      = ME->VEICULO_EIXOS.
        WA_ZLEST0123-VEICULO_PLACA_C1   = ME->VEICULO_PLACA_C1.
        WA_ZLEST0123-VEICULO_EIXOS_C1   = ME->VEICULO_EIXOS_C1.
        WA_ZLEST0123-VEICULO_PLACA_C2   = ME->VEICULO_PLACA_C2.
        WA_ZLEST0123-VEICULO_EIXOS_C2   = ME->VEICULO_EIXOS_C2.
        WA_ZLEST0123-VEICULO_PLACA_C3   = ME->VEICULO_PLACA_C3.
        WA_ZLEST0123-VEICULO_EIXOS_C3   = ME->VEICULO_EIXOS_C3.
        WA_ZLEST0123-TP_STATUS_AUT      = ME->TP_STATUS_AUT.
        WA_ZLEST0123-TP_STATUS_CAN      = ME->TP_STATUS_CAN.
        WA_ZLEST0123-ID_VIAGEM_CODIGO   = ME->ID_VIAGEM_CODIGO.
        WA_ZLEST0123-MOEDA_PEDAGIO      = ME->MOEDA_PEDAGIO.
        WA_ZLEST0123-VLR_TOTAL_PEDAGIO  = ME->VLR_TOTAL_PEDAGIO.
        WA_ZLEST0123-DT_EMISSAO_PEDAGIO = ME->DT_EMISSAO_PEDAGIO.
        WA_ZLEST0123-HR_EMISSAO_PEDAGIO = ME->HR_EMISSAO_PEDAGIO.
        WA_ZLEST0123-TKNUM              = ME->TKNUM.
        WA_ZLEST0123-US_ULTIMO_AJUSTE   = ME->US_ULTIMO_AJUSTE.
        WA_ZLEST0123-DT_ULTIMO_AJUSTE   = ME->DT_ULTIMO_AJUSTE.
        WA_ZLEST0123-HR_ULTIMO_AJUSTE   = ME->HR_ULTIMO_AJUSTE.
        WA_ZLEST0123-TC_ULTIMO_AJUSTE   = ME->TC_ULTIMO_AJUSTE.
        WA_ZLEST0123-TC_CADASTRO        = ME->TC_CADASTRO.
        MODIFY ZLEST0123 FROM WA_ZLEST0123.

        MOVE-CORRESPONDING WA_ZLEST0123 TO WA_ZLEST0127.

        SELECT MAX( ID_SEC_LOG )
          INTO WA_ZLEST0127-ID_SEC_LOG
          FROM ZLEST0127
         WHERE ID_PROC_CLIENTE EQ WA_ZLEST0123-ID_PROC_CLIENTE.

        ADD 1 TO WA_ZLEST0127-ID_SEC_LOG.

        MODIFY ZLEST0127 FROM WA_ZLEST0127.

        LOOP AT ME->DOCUMENTOS ASSIGNING <FS_0124>.
          <FS_0124>-ID_PROC_CLIENTE   = ME->ID_PROC_CLIENTE.
          <FS_0124>-ID_FILIAL_CLIENTE = ME->BRANCH.
          MODIFY ZLEST0124 FROM <FS_0124>.
        ENDLOOP.

        LOOP AT ME->PRACAS ASSIGNING <FS_0125>.
          <FS_0125>-ID_PROC_CLIENTE   = ME->ID_PROC_CLIENTE.
          MODIFY ZLEST0125 FROM <FS_0125>.
        ENDLOOP.

        COMMIT WORK.

        ME->CK_ALTERADO = ABAP_FALSE.
        I_GRAVOU = ABAP_TRUE.
        MESSAGE S049.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~LIMPAR_REGISTRO.

    CLEAR: ME->BRANCH,
           ME->BUKRS,
           ME->CK_SALVAR_XML_LOCAL,
           ME->ID_PROC_CLIENTE,
           ME->DS_NR_CARTAO,
           ME->ID_ROTA_REPOM,
           ME->ID_PERCURSO_REPOM,
           ME->ID_ROTA,
           ME->BRANCH_ROTA,
           ME->BUKRS_ROTA,
           ME->CD_PAIS,
           ME->CD_CID_ORIGEM,
           ME->CD_CID_DESTINO,
           ME->MOTORISTA_COD,
           ME->MOTORISTA_CPF,
           ME->MOTORISTA_NOME,
           ME->MOTORISTA_RG,
           ME->MOTORISTA_FONE,
           ME->VEICULO_PLACA,
           ME->VEICULO_EIXOS,
           ME->TP_STATUS_AUT,
           ME->TP_STATUS_CAN,
           ME->ID_VIAGEM_CODIGO,
           ME->MOEDA_PEDAGIO,
           ME->VLR_TOTAL_PEDAGIO,
           ME->DT_EMISSAO_PEDAGIO,
           ME->HR_EMISSAO_PEDAGIO,
           ME->TKNUM,
           ME->US_ULTIMO_AJUSTE,
           ME->DT_ULTIMO_AJUSTE,
           ME->HR_ULTIMO_AJUSTE,
           ME->TC_CADASTRO,
           ME->CK_ALTERADO,
           ME->VEICULO_PLACA_C1,
           ME->VEICULO_EIXOS_C1,
           ME->VEICULO_PLACA_C2,
           ME->VEICULO_EIXOS_C2,
           ME->VEICULO_PLACA_C3,
           ME->VEICULO_EIXOS_C3,
           ME->ROTA,
           ME->DOCUMENTOS,
           ME->PRACAS.

    ME->SET_CD_PAIS( EXPORTING I_CD_PAIS = 'BR' ).

    ME->SET_TP_STATUS_AUT( EXPORTING I_TP_STATUS_AUT = '1' ).

    ME->SET_TP_STATUS_CAN( EXPORTING I_TP_STATUS_CAN = '1' ).

    ME->SET_MOEDA_PEDAGIO( EXPORTING I_MOEDA_PEDAGIO = 'BRL' ).

    ME->SET_VLR_TOTAL_PEDAGIO( EXPORTING I_VLR_TOTAL_PEDAGIO = 0 ).

    ME->CK_ALTERADO = ABAP_FALSE.

    ME->CK_SALVAR_XML_LOCAL = ABAP_FALSE.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~NOVO_REGISTRO.

    ME->LIMPAR_REGISTRO( ).

  ENDMETHOD.


  METHOD ZIF_CADASTRO~SET_REGISTRO.

    DATA: WA_ZLEST0123 TYPE ZLEST0123,
          IT_ZLEST0124 TYPE TABLE OF ZLEST0124,
          IT_ZLEST0125 TYPE TABLE OF ZLEST0125,
          WA_ZLEST0124 TYPE ZLEST0124,
          WA_ZLEST0125 TYPE ZLEST0125.

    ME->LIMPAR_REGISTRO( ).

    SELECT SINGLE * INTO WA_ZLEST0123 FROM ZLEST0123 WHERE ID_PROC_CLIENTE EQ I_ID_REGISTRO.
    IF SY-SUBRC IS INITIAL.
      ME->SET_ID_PROC_CLIENTE(    EXPORTING I_ID_PROC_CLIENTE    = WA_ZLEST0123-ID_PROC_CLIENTE ).
      ME->SET_BUKRS(              EXPORTING I_BUKRS              = WA_ZLEST0123-BUKRS ) .
      ME->SET_BRANCH(             EXPORTING I_BRANCH             = WA_ZLEST0123-BRANCH ) .
      ME->SET_DS_NR_CARTAO(       EXPORTING I_DS_NR_CARTAO       = WA_ZLEST0123-DS_NR_CARTAO ) .
      ME->SET_ID_ROTA_REPOM(      EXPORTING I_ID_ROTA_REPOM      = WA_ZLEST0123-ID_ROTA_REPOM ) .
      ME->SET_ID_PERCURSO_REPOM(  EXPORTING I_ID_PERCURSO_REPOM  = WA_ZLEST0123-ID_PERCURSO_REPOM ) .
      ME->SET_ID_ROTA(            EXPORTING I_ID_ROTA            = WA_ZLEST0123-ID_ROTA ) .
      ME->SET_BUKRS_ROTA(         EXPORTING I_BUKRS_ROTA         = WA_ZLEST0123-BUKRS_ROTA ) .
      ME->SET_BRANCH_ROTA(        EXPORTING I_BRANCH_ROTA        = WA_ZLEST0123-BRANCH_ROTA ) .
      ME->SET_CD_PAIS(            EXPORTING I_CD_PAIS            = WA_ZLEST0123-CD_PAIS ) .
      ME->SET_CD_CID_ORIGEM(      EXPORTING I_CD_CID_ORIGEM      = WA_ZLEST0123-CD_CID_ORIGEM ) .
      ME->SET_CD_CID_DESTINO(     EXPORTING I_CD_CID_DESTINO     = WA_ZLEST0123-CD_CID_DESTINO ) .
      ME->SET_MOTORISTA_COD(      EXPORTING I_MOTORISTA_COD      = WA_ZLEST0123-MOTORISTA_COD ) .
      ME->SET_MOTORISTA_CPF(      EXPORTING I_MOTORISTA_CPF      = WA_ZLEST0123-MOTORISTA_CPF ) .
      ME->SET_MOTORISTA_NOME(     EXPORTING I_MOTORISTA_NOME     = WA_ZLEST0123-MOTORISTA_NOME ) .
      ME->SET_MOTORISTA_RG(       EXPORTING I_MOTORISTA_RG       = WA_ZLEST0123-MOTORISTA_RG ) .
      ME->SET_MOTORISTA_FONE(     EXPORTING I_MOTORISTA_FONE     = WA_ZLEST0123-MOTORISTA_FONE ) .
      ME->SET_VEICULO_PLACA(      EXPORTING I_VEICULO_PLACA      = WA_ZLEST0123-VEICULO_PLACA ) .
      ME->SET_VEICULO_EIXOS(      EXPORTING I_VEICULO_EIXOS      = WA_ZLEST0123-VEICULO_EIXOS ) .
      ME->SET_VEICULO_PLACA_C1(   EXPORTING I_VEICULO_PLACA_C1   = WA_ZLEST0123-VEICULO_PLACA_C1 ) .
      ME->SET_VEICULO_EIXOS_C1(   EXPORTING I_VEICULO_EIXOS_C1   = WA_ZLEST0123-VEICULO_EIXOS_C1 ) .
      ME->SET_VEICULO_PLACA_C2(   EXPORTING I_VEICULO_PLACA_C2   = WA_ZLEST0123-VEICULO_PLACA_C2 ) .
      ME->SET_VEICULO_EIXOS_C2(   EXPORTING I_VEICULO_EIXOS_C2   = WA_ZLEST0123-VEICULO_EIXOS_C2 ) .
      ME->SET_VEICULO_PLACA_C3(   EXPORTING I_VEICULO_PLACA_C3   = WA_ZLEST0123-VEICULO_PLACA_C3 ) .
      ME->SET_VEICULO_EIXOS_C3(   EXPORTING I_VEICULO_EIXOS_C3   = WA_ZLEST0123-VEICULO_EIXOS_C3 ) .
      ME->SET_TP_STATUS_AUT(      EXPORTING I_TP_STATUS_AUT      = WA_ZLEST0123-TP_STATUS_AUT ) .
      ME->SET_TP_STATUS_CAN(      EXPORTING I_TP_STATUS_CAN      = WA_ZLEST0123-TP_STATUS_CAN ) .
      ME->SET_ID_VIAGEM_CODIGO(   EXPORTING I_ID_VIAGEM_CODIGO   = WA_ZLEST0123-ID_VIAGEM_CODIGO ) .
      ME->SET_MOEDA_PEDAGIO(      EXPORTING I_MOEDA_PEDAGIO      = WA_ZLEST0123-MOEDA_PEDAGIO ) .
      ME->SET_VLR_TOTAL_PEDAGIO(  EXPORTING I_VLR_TOTAL_PEDAGIO  = WA_ZLEST0123-VLR_TOTAL_PEDAGIO ) .
      ME->SET_DT_EMISSAO_PEDAGIO( EXPORTING I_DT_EMISSAO_PEDAGIO = WA_ZLEST0123-DT_EMISSAO_PEDAGIO ) .
      ME->SET_HR_EMISSAO_PEDAGIO( EXPORTING I_HR_EMISSAO_PEDAGIO = WA_ZLEST0123-HR_EMISSAO_PEDAGIO ) .
      ME->SET_TKNUM(              EXPORTING I_TKNUM              = WA_ZLEST0123-TKNUM ) .
      ME->SET_US_ULTIMO_AJUSTE(   EXPORTING I_US_ULTIMO_AJUSTE   = WA_ZLEST0123-US_ULTIMO_AJUSTE ).
      ME->SET_DT_ULTIMO_AJUSTE(   EXPORTING I_DT_ULTIMO_AJUSTE   = WA_ZLEST0123-DT_ULTIMO_AJUSTE ).
      ME->SET_HR_ULTIMO_AJUSTE(   EXPORTING I_HR_ULTIMO_AJUSTE   = WA_ZLEST0123-HR_ULTIMO_AJUSTE ).
      ME->SET_TC_ULTIMO_AJUSTE(   EXPORTING I_TC_ULTIMO_AJUSTE   = WA_ZLEST0123-TC_ULTIMO_AJUSTE ).
      ME->SET_TC_CADASTRO(        EXPORTING I_TC_CADASTRO        = WA_ZLEST0123-TC_CADASTRO ).

      SELECT * INTO TABLE IT_ZLEST0124
        FROM ZLEST0124
       WHERE ID_PROC_CLIENTE EQ I_ID_REGISTRO.

      LOOP AT IT_ZLEST0124 INTO WA_ZLEST0124.
        ME->SET_DOCUMENTO( EXPORTING I_DOCUMENTO = WA_ZLEST0124 ).
      ENDLOOP.

      SELECT * INTO TABLE IT_ZLEST0125
        FROM ZLEST0125
       WHERE ID_PROC_CLIENTE EQ I_ID_REGISTRO.

      LOOP AT IT_ZLEST0125 INTO WA_ZLEST0125.
        ME->SET_PRACA( EXPORTING I_PRACA = WA_ZLEST0125 ).
      ENDLOOP.

      ME->CK_ALTERADO = ABAP_FALSE.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~VALIDAR_EXCLUSAO.

    E_VALIDOU = ABAP_FALSE.

*044  Vale Pedágio com status de Enviado!
*045  Vale Pedágio com status de Autorizado!
*046  Vale Pedágio com status de Enviado o Cancelamento!
*047  Vale Pedágio com status de Autorizado o Cancelamento!

    DATA(CK_GERA_PEDAGIO_AUTOMATICO) = ABAP_FALSE.

    IF ME->TKNUM IS NOT INITIAL.

      SELECT SINGLE * INTO @DATA(WA_ZLEST0026)
        FROM VTTK
       WHERE TKNUM EQ @ME->TKNUM.

      IF WA_ZLEST0026-ID_CARGA IS NOT INITIAL.
        CK_GERA_PEDAGIO_AUTOMATICO = ABAP_TRUE.
      ENDIF.

    ENDIF.

    IF SY-TCODE NE 'VT02N'    AND
       SY-TCODE NE 'VT01N'    AND
       SY-TCODE NE 'ZLES0106' AND
       SY-TCODE NE 'ZLES0113' AND
       SY-TCODE NE 'ZLES0115' AND
       SY-TCODE NE 'ZMM0127'  AND
       SY-TCODE NE 'ZCTE'     AND
       SY-TCODE NE 'ZLES0136' AND
       SY-TCODE NE 'ZLES0113' AND
       CK_GERA_PEDAGIO_AUTOMATICO NE ABAP_TRUE.
      AUTHORITY-CHECK OBJECT 'ZREPOM' ID 'BUKRS'     FIELD ME->BUKRS
                                      ID 'ZREPOMATV' FIELD '10'.
      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE S063 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
    ENDIF.

    CASE ME->TP_STATUS_AUT.
      WHEN '2'.
        MESSAGE S044 DISPLAY LIKE 'E'.
        EXIT.
      WHEN '3'.
        MESSAGE S045 DISPLAY LIKE 'E'.
        EXIT.
    ENDCASE.

    CASE ME->TP_STATUS_CAN.
      WHEN '2'.
        MESSAGE S046 DISPLAY LIKE 'E'.
        EXIT.
      WHEN '3'.
        MESSAGE S047 DISPLAY LIKE 'E'.
        EXIT.
    ENDCASE.

    E_VALIDOU = ABAP_TRUE.

  ENDMETHOD.


  METHOD zif_cadastro~validar_registro.

    DATA: lc_linhas TYPE i,
          lc_acao   TYPE zde_acao_pedagio_repom.

    e_validou = abap_false.

    IF me->bukrs IS INITIAL.
      MESSAGE s000 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    DATA(ck_gera_pedagio_automatico) = abap_false.

    IF me->tknum IS NOT INITIAL.

      SELECT SINGLE * INTO @DATA(wa_zlest0026)
        FROM vttk
       WHERE tknum EQ @me->tknum.

      IF wa_zlest0026-id_carga IS NOT INITIAL.
        ck_gera_pedagio_automatico = abap_true.
      ENDIF.

    ENDIF.

    IF sy-tcode NE 'VT02N'    AND
       sy-tcode NE 'VT01N'    AND
       sy-tcode NE 'ZLES0106' AND
       sy-tcode NE 'ZLES0113' AND
       sy-tcode NE 'ZLES0115' AND
       sy-tcode NE 'ZMM0127'  AND
       sy-tcode NE 'ZCTE'     AND
       sy-tcode NE 'ZLES0136' AND
       sy-tcode NE 'ZLES0113' AND
      ck_gera_pedagio_automatico NE abap_true.
      IF me->id_proc_cliente IS INITIAL.
        lc_acao = '08'.
      ELSE.
        lc_acao = '09'.
      ENDIF.

      AUTHORITY-CHECK OBJECT 'ZREPOM' ID 'BUKRS'     FIELD me->bukrs
                                      ID 'ZREPOMATV' FIELD lc_acao.
      IF sy-subrc IS NOT INITIAL.
        MESSAGE s063 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
    ENDIF.

    IF me->branch IS INITIAL.
      MESSAGE s001 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->cd_cid_origem IS INITIAL.
      MESSAGE s003 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->cd_cid_destino IS INITIAL.
      MESSAGE s004 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->cd_pais IS INITIAL.
      MESSAGE s002 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->ds_nr_cartao IS INITIAL.
      MESSAGE s020 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->id_rota IS INITIAL.
      MESSAGE s022 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->id_rota_repom IS INITIAL.
      MESSAGE s023 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->id_percurso_repom IS INITIAL.
      MESSAGE s021 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->bukrs_rota IS INITIAL.
      MESSAGE s050 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->branch_rota IS INITIAL.
      MESSAGE s051 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->moeda_pedagio IS INITIAL.
      MESSAGE s024 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->motorista_cod IS INITIAL.
      MESSAGE s042 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->motorista_cpf IS INITIAL.
      MESSAGE s025 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->motorista_nome IS INITIAL.
      MESSAGE s026 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->motorista_fone IS INITIAL.
      MESSAGE s027 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

*    IF ME->MOTORISTA_RG IS INITIAL.
*      MESSAGE S001 DISPLAY LIKE 'E'.
*      EXIT.
*    ENDIF.

    IF me->tknum IS INITIAL AND me->id_proc_cliente IS INITIAL.
      MESSAGE w028.
    ENDIF.

    IF me->tp_status_aut IS INITIAL.
      MESSAGE s029 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->tp_status_can IS INITIAL.
      MESSAGE s030 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->veiculo_placa IS INITIAL.
      MESSAGE s031 DISPLAY LIKE 'E'.
      EXIT.
    ELSE.
      IF me->get_placa_trator( EXPORTING i_veiculo_placa = me->veiculo_placa ) EQ abap_false.
        MESSAGE s056 WITH me->veiculo_placa DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
    ENDIF.

    IF me->veiculo_eixos IS INITIAL.
      MESSAGE s032 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ( me->veiculo_eixos + me->veiculo_eixos_c1 + me->veiculo_eixos_c2 + me->veiculo_eixos_c3 GT 9 ).
      MESSAGE s074 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->veiculo_placa_c1 IS NOT INITIAL.
      IF me->get_placa_reboque( EXPORTING i_veiculo_placa = me->veiculo_placa_c1 ) EQ abap_false.
        MESSAGE s057 WITH me->veiculo_placa_c1 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
    ENDIF.

    IF me->veiculo_placa_c2 IS NOT INITIAL.
      IF me->get_placa_reboque( EXPORTING i_veiculo_placa = me->veiculo_placa_c2 ) EQ abap_false.
        MESSAGE s057 WITH me->veiculo_placa_c2 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
    ENDIF.

    IF me->veiculo_placa_c3 IS NOT INITIAL.
      IF me->get_placa_reboque( EXPORTING i_veiculo_placa = me->veiculo_placa_c3 ) EQ abap_false.
        MESSAGE s057 WITH me->veiculo_placa_c3 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
    ENDIF.

    DESCRIBE TABLE me->documentos LINES lc_linhas.
    IF lc_linhas EQ 0.
      MESSAGE s058 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF me->tp_status_aut NE 1 AND me->tp_status_aut NE 4.
      IF me->dt_emissao_pedagio IS INITIAL.
        MESSAGE s033 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      IF me->id_viagem_codigo IS INITIAL.
        MESSAGE s034 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      IF me->vlr_total_pedagio IS INITIAL.
        MESSAGE s035 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
    ENDIF.

    e_validou = abap_true.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~VALIDA_ATRIBUTO_ALTERAVEL.

    R_PERMITIDO = ABAP_FALSE.

    IF ME->ID_PROC_CLIENTE IS NOT INITIAL.
      CASE I_CAMPO.
        WHEN 'DS_NR_CARTAO'.
          R_PERMITIDO = ABAP_TRUE.
        WHEN 'ID_ROTA'.
          R_PERMITIDO = ABAP_TRUE.
        WHEN 'ID_PERCURSO_REPOM'.
          R_PERMITIDO = ABAP_TRUE.
        WHEN 'ID_ROTA_REPOM'.
          R_PERMITIDO = ABAP_TRUE.
      ENDCASE.
    ELSE.
      CASE I_CAMPO.
        WHEN 'ID_PROC_CLIENTE'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'TKNUM'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'US_ULTIMO_AJUSTE'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'DT_ULTIMO_AJUSTE'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'HR_ULTIMO_AJUSTE'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'MOTORISTA_CPF'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'MOTORISTA_NOME'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'MOTORISTA_RG'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'MOTORISTA_FONE'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'VEICULO_EIXOS'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'VEICULO_EIXOS_C1'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'VEICULO_EIXOS_C2'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'VEICULO_EIXOS_C3'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'TP_STATUS_AUT'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'TP_STATUS_CAN'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'ID_VIAGEM_CODIGO'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'MOEDA_PEDAGIO'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'VLR_TOTAL_PEDAGIO'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'DT_EMISSAO_PEDAGIO'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN 'HR_EMISSAO_PEDAGIO'.
          R_PERMITIDO = ABAP_FALSE.
        WHEN OTHERS.
          R_PERMITIDO = ABAP_TRUE.
      ENDCASE.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_PESQUISA~PESQUISAR.

    DATA: IT_J_1BTXJURT_O TYPE TABLE OF J_1BTXJURT,
          IT_J_1BTXJURT_D TYPE TABLE OF J_1BTXJURT,
          WA_J_1BTXJURT   TYPE J_1BTXJURT,
          IT_T001         TYPE TABLE OF T001,
          IT_J_1BBRANCH   TYPE TABLE OF J_1BBRANCH,
          WA_T001         TYPE T001,
          WA_J_1BBRANCH   TYPE J_1BBRANCH.

    DATA: IT_ZLEST0123     TYPE TABLE OF ZLEST0123,
          IT_ZLEST0123_AUX TYPE TABLE OF ZLEST0123,
          IT_ZLEST0122     TYPE TABLE OF ZLEST0122,
          WA_ZLEST0123     TYPE ZLEST0123,
          WA_ZLEST0122     TYPE ZLEST0122,
          WA_ZLEST0123_ALV TYPE ZDE_ZLEST0123_ALV,
          IT_ZLEST0123_ALV TYPE TABLE OF ZDE_ZLEST0123_ALV,
          IT_VFKP          TYPE TABLE OF VFKP,
          IT_KONV          TYPE TABLE OF KONV,
          WA_VFKP          TYPE VFKP,
          WA_KONV          TYPE KONV.

    DATA: FILTRO_INTERNO   TYPE ZDE_ZLEST0123_FILTRO.

    FILTRO_INTERNO = I_FILTROS.

    E_PESQUISOU = ABAP_FALSE.

    SELECT * INTO TABLE IT_ZLEST0123
      FROM ZLEST0123
     WHERE ID_PROC_CLIENTE    IN FILTRO_INTERNO-ID_PROC_CLIENTE
       AND BUKRS              IN FILTRO_INTERNO-BUKRS
       AND BRANCH             IN FILTRO_INTERNO-BRANCH
       AND DS_NR_CARTAO       IN FILTRO_INTERNO-DS_NR_CARTAO
       AND ID_ROTA_REPOM      IN FILTRO_INTERNO-ID_ROTA_REPOM
       AND ID_PERCURSO_REPOM  IN FILTRO_INTERNO-ID_PERCURSO_REPOM
       AND ID_ROTA            IN FILTRO_INTERNO-ID_ROTA
       AND CD_CID_ORIGEM      IN FILTRO_INTERNO-CD_CID_ORIGEM
       AND CD_CID_DESTINO     IN FILTRO_INTERNO-CD_CID_DESTINO
       AND MOTORISTA_CPF      IN FILTRO_INTERNO-MOTORISTA_CPF
       AND MOTORISTA_NOME     IN FILTRO_INTERNO-MOTORISTA_NOME
       AND VEICULO_PLACA      IN FILTRO_INTERNO-VEICULO_PLACA
       AND TP_STATUS_AUT      IN FILTRO_INTERNO-TP_STATUS_AUT
       AND TP_STATUS_CAN      IN FILTRO_INTERNO-TP_STATUS_CAN
       AND DT_EMISSAO_PEDAGIO IN FILTRO_INTERNO-DT_EMISSAO_PEDAGIO
       AND TKNUM              IN FILTRO_INTERNO-TKNUM
       AND US_ULTIMO_AJUSTE   IN FILTRO_INTERNO-US_ULTIMO_AJUSTE
       AND DT_ULTIMO_AJUSTE   IN FILTRO_INTERNO-DT_ULTIMO_AJUSTE.

    CHECK SY-SUBRC IS INITIAL.

    E_PESQUISOU = ABAP_TRUE.

    SELECT * INTO TABLE IT_J_1BTXJURT_O
      FROM J_1BTXJURT
       FOR ALL ENTRIES IN IT_ZLEST0123
     WHERE SPRAS       EQ SY-LANGU
       AND COUNTRY     EQ IT_ZLEST0123-CD_PAIS
       AND TAXJURCODE  EQ IT_ZLEST0123-CD_CID_ORIGEM.

    SELECT * INTO TABLE IT_J_1BTXJURT_D
      FROM J_1BTXJURT
       FOR ALL ENTRIES IN IT_ZLEST0123
     WHERE SPRAS       EQ SY-LANGU
       AND COUNTRY     EQ IT_ZLEST0123-CD_PAIS
       AND TAXJURCODE  EQ IT_ZLEST0123-CD_CID_DESTINO.

    SORT IT_J_1BTXJURT_O BY TAXJURCODE.
    SORT IT_J_1BTXJURT_D BY TAXJURCODE.

    SELECT * INTO TABLE IT_ZLEST0122
      FROM ZLEST0122
       FOR ALL ENTRIES IN IT_ZLEST0123
     WHERE ID_ROTA           EQ IT_ZLEST0123-ID_ROTA
       AND ID_ROTA_REPOM     EQ IT_ZLEST0123-ID_ROTA_REPOM
       AND ID_PERCURSO_REPOM EQ IT_ZLEST0123-ID_PERCURSO_REPOM.

    SORT IT_ZLEST0122 BY ID_ROTA ID_ROTA_REPOM ID_PERCURSO_REPOM.

    SELECT * INTO TABLE IT_T001
      FROM T001
       FOR ALL ENTRIES IN IT_ZLEST0123
     WHERE BUKRS EQ IT_ZLEST0123-BUKRS.

    SORT IT_T001 BY BUKRS.

    SELECT * INTO TABLE IT_J_1BBRANCH
      FROM J_1BBRANCH
       FOR ALL ENTRIES IN IT_ZLEST0123
     WHERE BUKRS  EQ IT_ZLEST0123-BUKRS
       AND BRANCH EQ IT_ZLEST0123-BRANCH.

    SORT IT_J_1BBRANCH BY BUKRS BRANCH.

    CLEAR: IT_ZLEST0123_AUX.
    MOVE IT_ZLEST0123[] TO IT_ZLEST0123_AUX[].
    DELETE IT_ZLEST0123_AUX WHERE TKNUM EQ SPACE.

    IF IT_ZLEST0123_AUX IS NOT INITIAL.
      SELECT *
        INTO TABLE IT_VFKP
        FROM VFKP
         FOR ALL ENTRIES IN IT_ZLEST0123_AUX
       WHERE REBEL = IT_ZLEST0123_AUX-TKNUM
         AND REFTY = '8'
         AND FKPTY = 'Z001'.

      IF SY-SUBRC IS INITIAL.
        SELECT FROM V_KONV FIELDS * FOR ALL ENTRIES IN @IT_VFKP WHERE KNUMV EQ @IT_VFKP-KNUMV AND KAPPL EQ 'F' AND KSCHL EQ 'ZPED' AND KINAK EQ @SPACE INTO CORRESPONDING FIELDS OF TABLE @IT_KONV .
      ENDIF.
    ENDIF.
    CLEAR: IT_ZLEST0123_AUX.

    LOOP AT IT_ZLEST0123 INTO WA_ZLEST0123.
      CLEAR: WA_ZLEST0123_ALV.
      MOVE-CORRESPONDING WA_ZLEST0123 TO WA_ZLEST0123_ALV.

      READ TABLE IT_T001 INTO WA_T001 WITH KEY  BUKRS = WA_ZLEST0123_ALV-BUKRS BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_ZLEST0123_ALV-BUTXT = WA_T001-BUTXT.
      ENDIF.

      READ TABLE IT_J_1BBRANCH INTO WA_J_1BBRANCH WITH KEY  BUKRS = WA_ZLEST0123_ALV-BUKRS BRANCH = WA_ZLEST0123_ALV-BRANCH BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_ZLEST0123_ALV-NAME = WA_J_1BBRANCH-NAME.
      ENDIF.

      READ TABLE IT_J_1BTXJURT_O INTO WA_J_1BTXJURT WITH KEY TAXJURCODE = WA_ZLEST0123_ALV-CD_CID_ORIGEM BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_ZLEST0123_ALV-DS_CID_ORIGEM = WA_J_1BTXJURT-TEXT.
      ENDIF.

      READ TABLE IT_J_1BTXJURT_D INTO WA_J_1BTXJURT WITH KEY TAXJURCODE = WA_ZLEST0123_ALV-CD_CID_DESTINO BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_ZLEST0123_ALV-DS_CID_DESTINO = WA_J_1BTXJURT-TEXT.
      ENDIF.

      READ TABLE IT_ZLEST0122 INTO WA_ZLEST0122 WITH KEY ID_ROTA           = WA_ZLEST0123_ALV-ID_ROTA
                                                         ID_ROTA_REPOM     = WA_ZLEST0123_ALV-ID_ROTA_REPOM
                                                         ID_PERCURSO_REPOM = WA_ZLEST0123_ALV-ID_PERCURSO_REPOM BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_ZLEST0123_ALV-DS_PERCURSO_REPOM = WA_ZLEST0122-DS_PERCURSO_REPOM.
      ENDIF.

      WA_ZLEST0123_ALV-VLR_CUSTO_VI = 0.
      LOOP AT IT_VFKP INTO WA_VFKP WHERE REBEL EQ WA_ZLEST0123-TKNUM.
        LOOP AT IT_KONV INTO WA_KONV WHERE KNUMV EQ WA_VFKP-KNUMV.
          ADD  WA_KONV-KWERT TO WA_ZLEST0123_ALV-VLR_CUSTO_VI.
        ENDLOOP.
      ENDLOOP.

*@Q3@  Pendente
*@5Y@  Enviado
*@DF@  Autorizado
*@F1@  Erro

      CASE WA_ZLEST0123_ALV-TP_STATUS_AUT.
        WHEN '1'.
          WA_ZLEST0123_ALV-ICO_STATUS_AUT = '@Q3@'.
        WHEN '2'.
          WA_ZLEST0123_ALV-ICO_STATUS_AUT = '@5Y@'.
        WHEN '3'.
          WA_ZLEST0123_ALV-ICO_STATUS_AUT = '@DF@'.
        WHEN '4'.
          WA_ZLEST0123_ALV-ICO_STATUS_AUT = '@F1@'.
      ENDCASE.

      CASE WA_ZLEST0123_ALV-TP_STATUS_CAN.
        WHEN '1'.
          WA_ZLEST0123_ALV-ICO_STATUS_CAN = '@Q3@'.
        WHEN '2'.
          WA_ZLEST0123_ALV-ICO_STATUS_CAN = '@5Y@'.
        WHEN '3'.
          WA_ZLEST0123_ALV-ICO_STATUS_CAN = '@DF@'.
        WHEN '4'.
          WA_ZLEST0123_ALV-ICO_STATUS_CAN = '@F1@'.
      ENDCASE.

      APPEND WA_ZLEST0123_ALV TO IT_ZLEST0123_ALV.
    ENDLOOP.

    E_REGISTROS = IT_ZLEST0123_ALV[].

  ENDMETHOD.


  METHOD ZIF_REPOM~SET_BRANCH.
    IF ME->BRANCH NE I_BRANCH.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->BRANCH = I_BRANCH.
  ENDMETHOD.


  METHOD ZIF_REPOM~SET_BUKRS.
    IF ME->BUKRS NE I_BUKRS.
      ME->CK_ALTERADO = ABAP_TRUE.
    ENDIF.

    ME->BUKRS = I_BUKRS.
  ENDMETHOD.
ENDCLASS.
