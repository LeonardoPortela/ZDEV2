*&---------------------------------------------------------------------*
*& Report  ZFIR0080
*& Cadastro de Fornecedores - Informativo de Pagamento
*&---------------------------------------------------------------------*
*& Transação:
*& Cadastro de fornecedores que receberão o e-mail de informe de
*& pagamento às 12:00 ( Excessão ).
*&---------------------------------------------------------------------*

REPORT ZFIR0080.


CLASS FORNECEDOR DEFINITION.

  PUBLIC SECTION.

    TYPES: BEGIN OF TY_SAIDA,
             LIFNR      TYPE LFA1-LIFNR,
             NAME1      TYPE LFA1-NAME1,
             USUARIO    TYPE USNAM,
             DATA_ATUAL TYPE CHAR10,
             HORA_ATUAL TYPE SY-UZEIT,
           END OF TY_SAIDA.

    DATA: OBJ_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
          OBJ_ALV       TYPE REF TO CL_GUI_ALV_GRID,
          T_SAIDA       TYPE TABLE OF TY_SAIDA,
          V_LIFNR       TYPE LFA1-LIFNR,
          V_NAME1       TYPE LFA1-NAME1,
          V_UZEIT       TYPE ZFIT0147-HORA_ATUAL.


    METHODS: CONSTRUCTOR.

    METHODS: SELECIONA_DADOS.

    METHODS: CRIA_TELA.

    METHODS: SALVA_FORNECEDOR.

    METHODS: EXCLUI_FORNECEDOR.

ENDCLASS.


CLASS FORNECEDOR IMPLEMENTATION.

  METHOD CONSTRUCTOR.

    CREATE OBJECT OBJ_CONTAINER EXPORTING CONTAINER_NAME = 'CONTAINER'.
    CREATE OBJECT OBJ_ALV EXPORTING I_PARENT = OBJ_CONTAINER.

  ENDMETHOD.



  METHOD SELECIONA_DADOS.

    CLEAR: T_SAIDA[], ME->V_LIFNR, ME->V_NAME1, ME->V_UZEIT.

    SELECT Z~LIFNR, Z~USUARIO, Z~DATA_ATUAL,
           Z~HORA_ATUAL, L~NAME1
       FROM ZFIT0147 AS Z
       INNER JOIN LFA1 AS L
       ON Z~LIFNR = L~LIFNR
       INTO TABLE @DATA(T_ZFIT0147).

    IF ( SY-SUBRC = 0 ).

      SORT T_ZFIT0147[] BY NAME1 ASCENDING.

      LOOP AT T_ZFIT0147[] INTO DATA(W_ZFIT0147).

        DATA(W_SAIDA) = VALUE TY_SAIDA(
            LIFNR = W_ZFIT0147-LIFNR
            NAME1      = W_ZFIT0147-NAME1
            USUARIO    = W_ZFIT0147-USUARIO
            HORA_ATUAL = W_ZFIT0147-HORA_ATUAL  ).

        W_SAIDA-DATA_ATUAL = |{ W_ZFIT0147-DATA_ATUAL+06(02) }.{ W_ZFIT0147-DATA_ATUAL+04(02) }.{ W_ZFIT0147-DATA_ATUAL+00(04) }|.

        APPEND W_SAIDA TO T_SAIDA[].

      ENDLOOP.

      CLEAR: T_ZFIT0147[].

    ENDIF.

  ENDMETHOD.


  METHOD CRIA_TELA.

    DATA(T_FIELDCAT) = VALUE LVC_T_FCAT(
        ( FIELDNAME = 'LIFNR'       COLTEXT = 'Cód. Fornecedor'     COL_OPT = 'X' NO_ZERO = 'X' )
        ( FIELDNAME = 'NAME1'       COLTEXT = 'Desc. Fornecedor'    COL_OPT = 'X' NO_ZERO = 'X' )
        ( FIELDNAME = 'HORA_ATUAL'  COLTEXT = 'Hora de Envio'       COL_OPT = 'X' NO_ZERO = 'X' )
        ( FIELDNAME = 'DATA_ATUAL'  COLTEXT = 'Data Atualização'    COL_OPT = 'X' NO_ZERO = 'X' )
        ( FIELDNAME = 'USUARIO'     COLTEXT = 'Usuário'             COL_OPT = 'X' NO_ZERO = 'X' ) ).

    DATA(GS_LAYOUT) = VALUE LVC_S_LAYO( SEL_MODE = 'A' NO_TOOLBAR = 'X'  ).

    IF ( OBJ_ALV IS NOT INITIAL ).

      CALL METHOD OBJ_ALV->SET_TABLE_FOR_FIRST_DISPLAY
        EXPORTING
          I_SAVE                        = 'A'
          IS_LAYOUT                     = GS_LAYOUT
        CHANGING
          IT_OUTTAB                     = T_SAIDA[]
          IT_FIELDCATALOG               = T_FIELDCAT[]
        EXCEPTIONS
          INVALID_PARAMETER_COMBINATION = 1
          PROGRAM_ERROR                 = 2
          TOO_MANY_LINES                = 3
          OTHERS                        = 4.

    ELSE.

      OBJ_ALV->REFRESH_TABLE_DISPLAY( ).

    ENDIF.

  ENDMETHOD.

  METHOD SALVA_FORNECEDOR.

    CHECK ( V_LIFNR IS NOT INITIAL ).

    ME->V_LIFNR = |{ ME->V_LIFNR ALPHA = IN }|.


    DATA(_INSERT) = VALUE ZFIT0147(
        LIFNR       = V_LIFNR
        USUARIO     = SY-UNAME
        DATA_ATUAL  = SY-DATUM
        HORA_ATUAL  = ME->V_UZEIT  ).


    MODIFY ZFIT0147 FROM _INSERT.

    COMMIT WORK.

    MESSAGE 'Cadastro atualizado com sucesso!' TYPE 'S'.

    ME->V_LIFNR = |{ ME->V_LIFNR ALPHA = OUT }|.

    ME->SELECIONA_DADOS( ).

    OBJ_ALV->REFRESH_TABLE_DISPLAY( ).

  ENDMETHOD.


  METHOD EXCLUI_FORNECEDOR.

    OBJ_ALV->GET_SELECTED_ROWS(
        IMPORTING
            ET_INDEX_ROWS = DATA(T_INDEX_ROWS)
            ET_ROW_NO     = DATA(T_ROW_NO) ).

    LOOP AT T_INDEX_ROWS[] INTO DATA(W_INDEX).

      READ TABLE T_SAIDA[] INTO DATA(W_SAIDA) INDEX W_INDEX-INDEX.

      DELETE FROM ZFIT0147 WHERE LIFNR = W_SAIDA-LIFNR.

    ENDLOOP.

    IF ( SY-SUBRC = 0 ).

      MESSAGE 'Registro(s) eliminado(s) com sucesso!' TYPE 'S'.

      ME->SELECIONA_DADOS( ).
      OBJ_ALV->REFRESH_TABLE_DISPLAY( ).

    ENDIF.

  ENDMETHOD.

ENDCLASS.

START-OF-SELECTION.

  DATA(OBJ_FORNECEDOR) = NEW FORNECEDOR( ).

  OBJ_FORNECEDOR->SELECIONA_DADOS( ).
  OBJ_FORNECEDOR->CRIA_TELA( ).

  CALL SCREEN 0100.

END-OF-SELECTION.


MODULE STATUS_0100 OUTPUT.
  SET PF-STATUS 'ST01'.
  SET TITLEBAR 'T01'.
ENDMODULE.


MODULE USER_COMMAND_0100 INPUT.

  CASE SY-UCOMM.

    WHEN 'SAVE'.

      OBJ_FORNECEDOR->SALVA_FORNECEDOR( ).

    WHEN 'EXCLUIR'.

      OBJ_FORNECEDOR->EXCLUI_FORNECEDOR( ).

    WHEN 'BACK'.

      LEAVE TO SCREEN 0.

  ENDCASE.

ENDMODULE.


MODULE REFRESH_NAME1 INPUT.

  OBJ_FORNECEDOR->V_LIFNR = |{ OBJ_FORNECEDOR->V_LIFNR ALPHA = IN }|.

  SELECT SINGLE NAME1 FROM LFA1 INTO OBJ_FORNECEDOR->V_NAME1
      WHERE LIFNR = OBJ_FORNECEDOR->V_LIFNR.

  OBJ_FORNECEDOR->V_LIFNR = |{ OBJ_FORNECEDOR->V_LIFNR ALPHA = OUT }|.

ENDMODULE.
