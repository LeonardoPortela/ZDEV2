*&---------------------------------------------------------------------*
*& Description: Create installation's local for equipments
*& Pattern....: Singleton
*& Transação..: ZPM0029
*& Autor......: Enio Jesus
*& Data.......: 02/03/2017
*&---------------------------------------------------------------------*

REPORT ZPMR0019.

TABLES: ZPMT001, ZPMT002.

TYPES:
  BEGIN OF TY_INSTALLATION_LOCAL,
    GRUPO             TYPE CHAR4,
    EMPRESA           TYPE CHAR4,
    CENTRO            TYPE CHAR4,
    SETOR             TYPE CHAR4,
    EQSUP             TYPE CHAR5,
    EQINF             TYPE CHAR5,
    EQSUP_TEXT        TYPE CHAR50,
    EQINF_TEXT        TYPE CHAR50,
    SETOR_TEXT        TYPE CHAR50,
    KEY_SUPERIOR      TYPE CHAR30,
    KEY_SUPERIOR_TEXT TYPE CHAR40,
    KEY               TYPE CHAR30,
    KEY_TEXT          TYPE CHAR40,
  END OF TY_INSTALLATION_LOCAL,

  BEGIN OF TY_LOCATIONS,
    TPLNR TYPE IFLO-TPLNR,
    PLTXT TYPE IFLO-PLTXT,
  END OF TY_LOCATIONS,

  BEGIN OF TY_FIELDS,
    GROUP     TYPE CHAR3,
    VALUE     TYPE NUM1,
    INVISIBLE TYPE NUM1,
  END OF TY_FIELDS,

  BEGIN OF TY_SEARCH_HELP,
    CODE TYPE QPCT-CODE,
    TEXT TYPE QPCT-KURZTEXT,
  END OF TY_SEARCH_HELP.

DATA:
  BEGIN OF RADIO_BUTTON,
    SETOR TYPE ABAP_BOOL,
    EQSUP TYPE ABAP_BOOL,
    EQINF TYPE ABAP_BOOL,
  END OF RADIO_BUTTON.

DATA FIELDS           TYPE TABLE OF TY_FIELDS.
DATA PARAMETERS       TYPE TABLE OF TY_SEARCH_HELP.
DATA LOCATIONS        TYPE TABLE OF TY_LOCATIONS.
DATA RETURN_TAB       TYPE TABLE OF DDSHRETVAL WITH HEADER LINE.
DATA DSELC            TYPE TABLE OF DSELC WITH HEADER LINE.
DATA LOCATION_INSTALL TYPE TY_INSTALLATION_LOCAL.

CLASS MAIN DEFINITION.
  PUBLIC SECTION.
    METHODS SEARCH_HELP_SETOR.
    METHODS SEARCH_HELP_EQINF.
    METHODS SEARCH_HELP_EQSUP.
    METHODS SET_STATUS.
    METHODS SET_TITLE.
    METHODS PROCESS_BEFORE_OUTPUT.

    METHODS VALIDATE_FIELDS
      RETURNING VALUE(OK) TYPE ABAP_BOOL.

    METHODS PARAMETERS_ARE_VALID
      EXCEPTIONS
        FIELD_VALUE_INVALID.

    METHODS DISPLAY_LOCATIONS_TO_SELECT
      IMPORTING
        KEY           TYPE CHAR30
      EXPORTING
        LOCATION_KEY  TYPE TY_LOCATIONS-TPLNR
        LOCATION_TEXT TYPE TY_LOCATIONS-PLTXT
      EXCEPTIONS
        NOT_SELECTED
        DATA_NOT_FOUND.

    METHODS USER_COMMAND
      IMPORTING
        UCOMM TYPE SY-UCOMM
      EXCEPTIONS
        INCORRECT_DATA.

  PRIVATE SECTION.
    DATA LOCATION_KEY_SUPERIOR TYPE CHAR30.
    DATA LOCATION_KEY          TYPE CHAR30.
ENDCLASS.

CLASS MAIN IMPLEMENTATION.
  METHOD SEARCH_HELP_SETOR.
    SELECT CODIGO DESCRICAO
      FROM ZPMT001
      INTO TABLE PARAMETERS.

    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        RETFIELD        = 'CODE'
        DYNPPROG        = SY-REPID
        DYNPNR          = SY-DYNNR
        DYNPROFIELD     = 'LOCATION_INSTALL-SETOR'
        VALUE_ORG       = 'S'
      TABLES
        VALUE_TAB       = PARAMETERS
        RETURN_TAB      = RETURN_TAB
        DYNPFLD_MAPPING = DSELC.
  ENDMETHOD.

  METHOD VALIDATE_FIELDS.
    OK = ABAP_TRUE.

    IF ( RADIO_BUTTON-SETOR = ABAP_TRUE ).
      IF LOCATION_INSTALL-CENTRO IS INITIAL.
        OK = ABAP_FALSE.
      ELSEIF LOCATION_INSTALL-EMPRESA IS INITIAL.
        OK = ABAP_FALSE.
      ELSEIF LOCATION_INSTALL-GRUPO IS INITIAL.
        OK = ABAP_FALSE.
      ELSEIF LOCATION_INSTALL-SETOR IS INITIAL.
        OK = ABAP_FALSE.
      ENDIF.
    ELSEIF ( RADIO_BUTTON-EQSUP = ABAP_TRUE ).
      IF LOCATION_INSTALL-CENTRO IS INITIAL.
        OK = ABAP_FALSE.
      ELSEIF LOCATION_INSTALL-EMPRESA IS INITIAL.
        OK = ABAP_FALSE.
      ELSEIF LOCATION_INSTALL-SETOR IS INITIAL.
        OK = ABAP_FALSE.
      ELSEIF LOCATION_INSTALL-GRUPO IS INITIAL.
        OK = ABAP_FALSE.
      ELSEIF LOCATION_INSTALL-EQSUP IS INITIAL.
        OK = ABAP_FALSE.
      ENDIF.
    ELSE.
      IF LOCATION_INSTALL-CENTRO IS INITIAL.
        OK = ABAP_FALSE.
      ELSEIF LOCATION_INSTALL-EMPRESA IS INITIAL.
        OK = ABAP_FALSE.
      ELSEIF LOCATION_INSTALL-EQINF IS INITIAL.
        OK = ABAP_FALSE.
      ELSEIF LOCATION_INSTALL-EQSUP IS INITIAL.
        OK = ABAP_FALSE.
      ELSEIF LOCATION_INSTALL-SETOR IS INITIAL.
        OK = ABAP_FALSE.
      ELSEIF LOCATION_INSTALL-GRUPO IS INITIAL.
        OK = ABAP_FALSE.
      ENDIF.
    ENDIF.

    IF OK <> ABAP_TRUE.
      MESSAGE TEXT-001 TYPE 'S' DISPLAY LIKE 'E'.
    ENDIF.
  ENDMETHOD.

  METHOD PARAMETERS_ARE_VALID.
    IF ME->VALIDATE_FIELDS( ) = ABAP_TRUE.

      IF LOCATION_INSTALL-SETOR IS NOT INITIAL.
        SELECT SINGLE * INTO ZPMT001 FROM ZPMT001
         WHERE CODIGO = LOCATION_INSTALL-SETOR.

        IF SY-SUBRC IS NOT INITIAL.
          MESSAGE TEXT-003 TYPE 'S' DISPLAY LIKE 'E'.
          RAISE FIELD_VALUE_INVALID.
        ELSE.
          MOVE ZPMT001-DESCRICAO TO LOCATION_INSTALL-SETOR_TEXT.
        ENDIF.
      ENDIF.

      IF LOCATION_INSTALL-EQSUP IS NOT INITIAL.
        SELECT SINGLE * INTO ZPMT002 FROM ZPMT002
         WHERE CODIGO = LOCATION_INSTALL-EQSUP
           AND EQHIER = 1.

        IF SY-SUBRC IS NOT INITIAL.
          MESSAGE TEXT-004 TYPE 'S' DISPLAY LIKE 'E'.
          RAISE FIELD_VALUE_INVALID.
        ELSE.
          MOVE ZPMT002-DESCRICAO TO LOCATION_INSTALL-EQSUP_TEXT.
        ENDIF.
      ENDIF.

      IF LOCATION_INSTALL-EQINF IS NOT INITIAL.
        SELECT SINGLE * INTO ZPMT002 FROM ZPMT002
         WHERE CODIGO = LOCATION_INSTALL-EQINF
           AND EQHIER = 2.

        IF SY-SUBRC IS NOT INITIAL.
          MESSAGE TEXT-004 TYPE 'S' DISPLAY LIKE 'E'.
          RAISE FIELD_VALUE_INVALID.
        ELSE.
          MOVE ZPMT002-DESCRICAO TO LOCATION_INSTALL-EQINF_TEXT.
        ENDIF.
      ENDIF.

    ELSE.
      RAISE FIELD_VALUE_INVALID.
    ENDIF.
  ENDMETHOD.

  METHOD SEARCH_HELP_EQINF.
    SELECT CODIGO DESCRICAO
      FROM ZPMT002
      INTO TABLE PARAMETERS
     WHERE EQHIER = 2.

    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        RETFIELD        = 'CODE'
        DYNPPROG        = SY-REPID
        DYNPNR          = SY-DYNNR
        DYNPROFIELD     = 'LOCATION_INSTALL-EQINF'
        VALUE_ORG       = 'S'
      TABLES
        VALUE_TAB       = PARAMETERS
        RETURN_TAB      = RETURN_TAB
        DYNPFLD_MAPPING = DSELC.
  ENDMETHOD.

  METHOD SEARCH_HELP_EQSUP.
    DATA TABLE TYPE RSISR_T_HELP_VALUE.

    SELECT CODIGO DESCRICAO
      FROM ZPMT002
      INTO TABLE TABLE
     WHERE EQHIER = 1.

    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        RETFIELD        = 'VALUE'
        DYNPPROG        = SY-REPID
        DYNPNR          = SY-DYNNR
        DYNPROFIELD     = 'LOCATION_INSTALL-EQSUP'
        VALUE_ORG       = 'S'
      TABLES
        VALUE_TAB       = TABLE
        RETURN_TAB      = RETURN_TAB
        DYNPFLD_MAPPING = DSELC.
  ENDMETHOD.

  METHOD SET_STATUS.
    SET PF-STATUS 'STATUS_001'.
  ENDMETHOD.

  METHOD SET_TITLE.
    SET TITLEBAR 'TITLE_001'.
  ENDMETHOD.

  METHOD PROCESS_BEFORE_OUTPUT.
    "//Set default
    IF FIELDS IS INITIAL.
      FIELDS = VALUE #( ( GROUP = 'GR3' VALUE = 0 INVISIBLE = 0 ) "//Eqp.Superior
                        ( GROUP = 'GR4' VALUE = 0 INVISIBLE = 0 ) "//Eqp.Inferior
                      ).
    ENDIF.

    LOOP AT FIELDS INTO DATA(_FIELDS).
      LOOP AT SCREEN.
        IF ( SCREEN-GROUP1 = _FIELDS-GROUP ).
          SCREEN-INPUT     = _FIELDS-VALUE.
          SCREEN-OUTPUT    = _FIELDS-VALUE.
          SCREEN-ACTIVE    = _FIELDS-VALUE.
          SCREEN-INVISIBLE = _FIELDS-INVISIBLE.
        ENDIF.

        MODIFY SCREEN.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.

  METHOD USER_COMMAND.
    DATA SEARCH_KEY   TYPE CHAR30.
    DATA KEY_SEQUENCE TYPE NUMC2.

    CASE UCOMM.
      WHEN 'RB_CHOISE'.
        CLEAR: LOCATION_INSTALL.

        IF RADIO_BUTTON-SETOR = ABAP_TRUE.
          FIELDS = VALUE #( ( GROUP = 'GR3' VALUE = 0 INVISIBLE = 0 )
                            ( GROUP = 'GR4' VALUE = 0 INVISIBLE = 0 ) ).
        ELSEIF RADIO_BUTTON-EQSUP = ABAP_TRUE.
          FIELDS = VALUE #( ( GROUP = 'GR3' VALUE = 1 INVISIBLE = 0 )
                            ( GROUP = 'GR4' VALUE = 0 INVISIBLE = 0 ) ).
        ELSE.
          FIELDS = VALUE #( ( GROUP = 'GR3' VALUE = 1 INVISIBLE = 0 )
                            ( GROUP = 'GR4' VALUE = 1 INVISIBLE = 0 ) ).
        ENDIF.

        LEAVE TO SCREEN 001.

      WHEN 'OK_CODE'.
        CALL METHOD PARAMETERS_ARE_VALID
          EXCEPTIONS
            FIELD_VALUE_INVALID = 4.

        IF ( SY-SUBRC IS INITIAL ).

          IF ( RADIO_BUTTON-SETOR = ABAP_TRUE ).
            LOCATION_INSTALL-KEY_SUPERIOR = |{ LOCATION_INSTALL-GRUPO }.{ LOCATION_INSTALL-EMPRESA }.{ LOCATION_INSTALL-CENTRO }|.
            LOCATION_INSTALL-KEY          = |{ LOCATION_INSTALL-GRUPO }.{ LOCATION_INSTALL-EMPRESA }.{ LOCATION_INSTALL-CENTRO }.{ LOCATION_INSTALL-SETOR }|.

          ELSEIF ( RADIO_BUTTON-EQSUP = ABAP_TRUE ).
            LOCATION_INSTALL-KEY_SUPERIOR = |{ LOCATION_INSTALL-GRUPO }.{ LOCATION_INSTALL-EMPRESA }.{ LOCATION_INSTALL-CENTRO }.{ LOCATION_INSTALL-SETOR }|.
            LOCATION_INSTALL-KEY          = |{ LOCATION_INSTALL-GRUPO }.{ LOCATION_INSTALL-EMPRESA }.{ LOCATION_INSTALL-CENTRO }.{ LOCATION_INSTALL-SETOR }.{ LOCATION_INSTALL-EQSUP }|.

            SEARCH_KEY = LOCATION_INSTALL-KEY && '%'.

            SELECT TPLNR PLTXT
              FROM IFLO
              INTO TABLE LOCATIONS
             WHERE TPLNR LIKE SEARCH_KEY ORDER BY PRIMARY KEY .

            DELETE ADJACENT DUPLICATES FROM LOCATIONS COMPARING TPLNR.
            SORT LOCATIONS BY TPLNR+22(2).

            IF ( NOT LOCATIONS IS INITIAL ).
              KEY_SEQUENCE = LOCATIONS[ LINES( LOCATIONS ) ]-TPLNR+22(2).
              ADD 1 TO KEY_SEQUENCE.
            ELSE.
              KEY_SEQUENCE = 01.
            ENDIF.

            LOCATION_INSTALL-KEY = LOCATION_INSTALL-KEY &&  KEY_SEQUENCE.

          ELSE.
            LOCATION_INSTALL-KEY_SUPERIOR = |{ LOCATION_INSTALL-GRUPO }.{ LOCATION_INSTALL-EMPRESA }.{ LOCATION_INSTALL-CENTRO }.{ LOCATION_INSTALL-SETOR }.{ LOCATION_INSTALL-EQSUP }%|.

            CALL METHOD ME->DISPLAY_LOCATIONS_TO_SELECT
              EXPORTING
                KEY            = LOCATION_INSTALL-KEY_SUPERIOR
              IMPORTING
                LOCATION_KEY   = LOCATION_INSTALL-KEY_SUPERIOR
                LOCATION_TEXT  = LOCATION_INSTALL-KEY_SUPERIOR_TEXT
              EXCEPTIONS
                NOT_SELECTED   = 4
                DATA_NOT_FOUND = 7.

            IF ( SY-SUBRC IS INITIAL ).
              LOCATION_INSTALL-KEY =
                |{ LOCATION_INSTALL-GRUPO }.{ LOCATION_INSTALL-EMPRESA }.{ LOCATION_INSTALL-CENTRO }.{ LOCATION_INSTALL-SETOR }.{ LOCATION_INSTALL-KEY_SUPERIOR+19 }.{ LOCATION_INSTALL-EQINF }|.

              SEARCH_KEY = LOCATION_INSTALL-KEY && '%'.

              SELECT TPLNR PLTXT
                FROM IFLO
                INTO TABLE LOCATIONS
               WHERE TPLNR LIKE SEARCH_KEY.

              SORT LOCATIONS BY TPLNR+28(2).

              IF ( NOT LOCATIONS IS INITIAL ).
                KEY_SEQUENCE = LOCATIONS[ LINES( LOCATIONS ) ]-TPLNR+28(2).
                ADD 1 TO KEY_SEQUENCE.
              ELSE.
                KEY_SEQUENCE = 01.
              ENDIF.

              LOCATION_INSTALL-KEY = LOCATION_INSTALL-KEY &&  KEY_SEQUENCE.

            ELSEIF SY-SUBRC = 4.
              MESSAGE TEXT-002 TYPE 'S' DISPLAY LIKE 'W'.
              RAISE INCORRECT_DATA.

            ELSE.
              MESSAGE TEXT-005 TYPE 'S' DISPLAY LIKE 'E'.
              RAISE INCORRECT_DATA.
            ENDIF.
          ENDIF.

        ELSE.
          RAISE INCORRECT_DATA.
        ENDIF.

      WHEN 'BTN_CREATE_LOCATION'.
        DATA LOCATION        TYPE BAPI_ITOB_PARMS-FUNCLOC_INT.
        DATA RETURN          TYPE BAPIRET2.

        IF LOCATION_INSTALL-KEY IS INITIAL.
          CALL METHOD ME->USER_COMMAND
            EXPORTING
              UCOMM          = 'OK_CODE'
            EXCEPTIONS
              INCORRECT_DATA = 4.
        ENDIF.

        CHECK SY-SUBRC IS INITIAL.

        DATA(_GENERAL_DATA)  =
          VALUE BAPI_ITOB( DESCRIPT = LOCATION_INSTALL-KEY_TEXT ).

        DATA(_SPECIFIC_DATA) =
          VALUE BAPI_ITOB_FL_ONLY( STRIND = 'X' CATEGORY = 'M' SUPFLOC = LOCATION_INSTALL-KEY_SUPERIOR ).

        CALL FUNCTION 'BAPI_FUNCLOC_CREATE' "#EC CI_USAGE_OK[2438131]
          EXPORTING
            EXTERNAL_NUMBER = CONV CHAR40( LOCATION_INSTALL-KEY )
            DATA_GENERAL    = _GENERAL_DATA
            DATA_SPECIFIC   = _SPECIFIC_DATA
          IMPORTING
            FUNCTLOCATION   = LOCATION
            RETURN          = RETURN.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            WAIT = ABAP_TRUE.

        IF ( RETURN IS INITIAL AND LOCATION IS NOT INITIAL ).
          "//Call transaction to set some other informations to the locations
          SET PARAMETER ID 'IFL' FIELD LOCATION_INSTALL-KEY.
          SET PARAMETER ID 'ISR' FIELD 'X'.
          CALL TRANSACTION 'IL02' AND SKIP FIRST SCREEN.
          "//

          MESSAGE |Local de instalação criado: { LOCATION }| TYPE 'S'.
          CLEAR LOCATION_INSTALL.
        ELSE.
          MESSAGE RETURN-MESSAGE TYPE 'S' DISPLAY LIKE 'E'.
        ENDIF.

      WHEN 'NEW_SETOR'.
        AUTHORITY-CHECK OBJECT 'Z_LOC_INST' ID 'ACTVT' FIELD '01'.
        IF SY-SUBRC IS INITIAL.
          CALL FUNCTION 'VIEW_MAINTENANCE_CALL'
            EXPORTING
              ACTION    = 'U'
              VIEW_NAME = 'ZPMT001'.
        ELSE.
          MESSAGE TEXT-006 TYPE 'S' DISPLAY LIKE 'E'.
        ENDIF.

      WHEN 'NEW_EQPTO'.
        AUTHORITY-CHECK OBJECT 'Z_LOC_INST' ID 'ACTVT' FIELD '01'.
        IF SY-SUBRC IS INITIAL.
          CALL FUNCTION 'VIEW_MAINTENANCE_CALL'
            EXPORTING
              ACTION    = 'U'
              VIEW_NAME = 'ZPMT002'.
        ELSE.
          MESSAGE TEXT-006 TYPE 'S' DISPLAY LIKE 'E'.
        ENDIF.
      WHEN '&F12'.
        LEAVE TO SCREEN 0.
      WHEN '&F10'.
        LEAVE PROGRAM.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD DISPLAY_LOCATIONS_TO_SELECT.
    DATA SELFIELD  TYPE SLIS_SELFIELD.

    SELECT TPLNR PLTXT
      FROM IFLO
      INTO TABLE LOCATIONS
     WHERE TPLNR LIKE KEY ORDER BY PRIMARY KEY .

    IF LOCATIONS IS INITIAL.
      RAISE DATA_NOT_FOUND.
    ENDIF.

    LOOP AT LOCATIONS INTO DATA(_LOCATION).
      IF STRLEN( _LOCATION-TPLNR ) > 24.
        DELETE LOCATIONS INDEX SY-TABIX.
      ENDIF.
    ENDLOOP.

    DELETE ADJACENT DUPLICATES FROM LOCATIONS COMPARING TPLNR.

    DATA(_FIELDS) =
      VALUE SLIS_T_FIELDCAT_ALV( ( FIELDNAME = 'TPLNR' SELTEXT_M = 'Local'     OUTPUTLEN = 30 )
                                 ( FIELDNAME = 'PLTXT' SELTEXT_M = 'Descrição' OUTPUTLEN = 40 )
                               ).

    CALL FUNCTION 'REUSE_ALV_POPUP_TO_SELECT'
      EXPORTING
        I_TITLE               = 'Selecione o local de instalação superior'
        I_SELECTION           = 'X'
*       I_ALLOW_NO_SELECTION  =
*       I_ZEBRA               = ' '
        I_SCREEN_START_COLUMN = 5
        I_SCREEN_START_LINE   = 5
        I_SCREEN_END_COLUMN   = 80
        I_SCREEN_END_LINE     = 20
*       I_CHECKBOX_FIELDNAME  =
*       I_LINEMARK_FIELDNAME  =
*       I_SCROLL_TO_SEL_LINE  = 'X'
        I_TABNAME             = '1'
        IT_FIELDCAT           = _FIELDS
      IMPORTING
        ES_SELFIELD           = SELFIELD
*       E_EXIT                =
      TABLES
        T_OUTTAB              = LOCATIONS.

    IF SELFIELD IS NOT INITIAL.
      TRY.
          LOCATION_KEY  = LOCATIONS[ SELFIELD-TABINDEX ]-TPLNR.
          LOCATION_TEXT = LOCATIONS[ SELFIELD-TABINDEX ]-PLTXT.
        CATCH CX_SY_ITAB_LINE_NOT_FOUND.
      ENDTRY.
    ELSE.
      RAISE NOT_SELECTED.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

START-OF-SELECTION.
  DATA MAIN_INSTANCE TYPE REF TO MAIN.

END-OF-SELECTION.

MODULE OUTPUT_001 OUTPUT.
  "//Start application
  CREATE OBJECT MAIN_INSTANCE.

  MAIN_INSTANCE->SET_STATUS( ).
  MAIN_INSTANCE->SET_TITLE( ).

  MAIN_INSTANCE->PROCESS_BEFORE_OUTPUT( ).
ENDMODULE.

MODULE INPUT_001 INPUT.
  CALL METHOD MAIN_INSTANCE->USER_COMMAND
    EXPORTING
      UCOMM          = SY-UCOMM
    EXCEPTIONS
      INCORRECT_DATA = 4.
ENDMODULE.

MODULE SEARCH_HELP_EQP_SUPERIOR INPUT.
  MAIN_INSTANCE->SEARCH_HELP_EQSUP( ).
ENDMODULE.

MODULE SEARCH_HELP_EQP_INFERIOR INPUT.
  MAIN_INSTANCE->SEARCH_HELP_EQINF( ).
ENDMODULE.

MODULE SEARCH_HELP_SETOR INPUT.
  MAIN_INSTANCE->SEARCH_HELP_SETOR( ).
ENDMODULE.
