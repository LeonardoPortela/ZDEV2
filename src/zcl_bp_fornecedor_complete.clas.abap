class ZCL_BP_FORNECEDOR_COMPLETE definition
  public
  final
  create public .

public section.

  interfaces IF_BADI_INTERFACE .
  interfaces IF_EX_VENDOR_EXTENSION_COMPLET .
protected section.
private section.
ENDCLASS.



CLASS ZCL_BP_FORNECEDOR_COMPLETE IMPLEMENTATION.


  METHOD IF_EX_VENDOR_EXTENSION_COMPLET~COMPLETE.

    DATA: LT_LFBK TYPE STANDARD TABLE OF LFBK.
    DATA: LW_FLFBK_NEW_DATA LIKE LINE OF LT_LFBK.
    DATA: LW_CS_VENDOR_FLFBK LIKE LINE OF CS_VENDOR-FLFBK-NEW_DATA.
    DATA: LW_LFA1 TYPE LFA1.

****** SAP x VIP Integration
    IF CS_VENDOR-LFA1-NEW_DATA IS NOT INITIAL.

      LW_LFA1 = CS_VENDOR-LFA1-NEW_DATA.

*** BUG - 141884 - Inicio - CBRAND
** Casos em que o update não esta trigger na cs_vendor
      IF CS_VENDOR-LFA1-UPD <> 'U'.
        SELECT * FROM BUT000
         INTO TABLE @DATA(LIT_BUT000)
          WHERE PARTNER EQ @CS_VENDOR-LFA1-NEW_DATA-LIFNR
              AND CHDAT EQ @SY-DATUM.
        IF SY-SUBRC = 0.
          CS_VENDOR-LFA1-UPD = 'U'.
        ENDIF.
      ENDIF.
*** BUG - 141884 - Fim - CBRAND

      CALL FUNCTION 'ZFI_VIP_COUNTERPARTIES'
        EXPORTING
          I_LFA1     = CS_VENDOR-LFA1-NEW_DATA  " Mestre de fornecedores (parte geral)
          I_CREATION = COND #( WHEN CS_VENDOR-LFA1-UPD = 'U' THEN ABAP_FALSE ELSE ABAP_TRUE ).

    ELSE.
      LW_LFA1 = CS_VENDOR-LFA1-OLD_DATA.
    ENDIF.

* A estrutura LFBK volta somente com uma conta e não todas as que estão sendo criadas
*      MOVE-CORRESPONDING cs_vendor-flfbk-new_data TO lt_lfbk. "CSB - 03.11.2023
    IF CS_VENDOR-FLFBK-NEW_DATA[] IS NOT INITIAL.
      LOOP AT CS_VENDOR-FLFBK-NEW_DATA INTO LW_CS_VENDOR_FLFBK.

        MOVE-CORRESPONDING LW_CS_VENDOR_FLFBK TO LW_FLFBK_NEW_DATA.

        APPEND LW_FLFBK_NEW_DATA TO LT_LFBK.
        CLEAR: LW_CS_VENDOR_FLFBK, LW_FLFBK_NEW_DATA.

      ENDLOOP.
    ELSE.
      IF CS_VENDOR-LFBK-NEW_DATA IS NOT INITIAL.
        APPEND CS_VENDOR-LFBK-NEW_DATA TO LT_LFBK.
      ENDIF.
    ENDIF.

    IF LT_LFBK IS NOT INITIAL.
      CALL FUNCTION 'ZFI_VIP_COUNTERPARTIES_BANK'
        EXPORTING
          I_LFA1     = LW_LFA1 " Mestre de fornecedores (parte geral)
          I_CREATION = COND #( WHEN CS_VENDOR-LFBK-UPD = 'U' THEN ABAP_FALSE ELSE ABAP_TRUE )
        TABLES
          T_LFBK     = LT_LFBK[]. " Mestre de fornecedores (coordenadas do banco)

    ENDIF.

*-US 135191-18-06-2024-#135191-RJF-inicio
    DATA: LV_AF_TERMO_AL5BANK TYPE C,
          LT_KNA1             TYPE STANDARD TABLE OF KNA1,
          LW_KNA1X            TYPE KNA1.

    CLEAR: LV_AF_TERMO_AL5BANK.
    IMPORT LV_AF_TERMO_AL5BANK TO LV_AF_TERMO_AL5BANK FROM MEMORY ID 'AF_TERMO_AL5BANK'.
    DELETE FROM MEMORY ID 'AF_TERMO_AL5BANK'.

*"// wbarbosa BUG-165542 03/02/2025
    DATA: VL_LIFNR TYPE LIFNR.
    DATA: E_PROTOCOLO TYPE ZMME0005.

    VL_LIFNR = |{ LW_LFA1-LIFNR ALPHA = IN }|.
    IMPORT PROTOCOLO TO E_PROTOCOLO FROM  MEMORY ID VL_LIFNR.
*
    IF E_PROTOCOLO IS NOT INITIAL.
      FREE MEMORY ID VL_LIFNR.
    ENDIF.
*"// wbarbosa BUG-165542 03/02/2025

    IF LV_AF_TERMO_AL5BANK EQ ABAP_TRUE.
      IF LW_LFA1-LIFNR IS NOT INITIAL.
        LW_KNA1X-LIFNR = LW_LFA1-LIFNR.
        APPEND LW_KNA1X TO LT_KNA1.
      ENDIF.
      CALL FUNCTION 'ZBP_ACEITE_TERMO' STARTING NEW TASK '1' " IN UPDATE TASK
*"// wbarbosa BUG-165542 03/02/2025
        EXPORTING
          I_PROTOCOLO      = E_PROTOCOLO-PROTOCOLO
          I_ACEITE         = E_PROTOCOLO-ACEITE
*"// wbarbosa BUG-165542 03/02/2025
        TABLES
          I_FORNECEDOR_SAP = LT_KNA1[].

    ENDIF.
*-US 135191-18-06-2024-#135191-RJF-fim
  ENDMETHOD.
ENDCLASS.
