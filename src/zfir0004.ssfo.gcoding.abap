DATA: BEGIN OF TL_EKBE_AUX OCCURS 0,
       AWKEY TYPE BKPF-AWKEY,
       BUKRS TYPE BKPF-BUKRS,
       GJAHR TYPE BKPF-GJAHR,
      END OF TL_EKBE_AUX.
DATA: WL_WERKS TYPE LFA1-LIFNR,
      WL_AWKEY TYPE BKPF-AWKEY.

* Busca dados do cabecalho da ordem de compra
SELECT SINGLE *
 FROM EKKO
 INTO WG_EKKO
   WHERE EBELN EQ EBELN.

*Busca dados do item de compra
SELECT SINGLE *
  FROM EKPO
    INTO WG_EKPO
    WHERE EBELN EQ EBELN
      AND EBELP EQ EBELP.


* Busca dados do fornecedor
SELECT SINGLE *
  FROM LFA1
  INTO WG_LFA1
    WHERE LIFNR EQ WG_EKKO-LIFNR.

CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
  EXPORTING
    INPUT  = WG_EKPO-WERKS
  IMPORTING
    OUTPUT = WL_WERKS.

*Busca dados do centro/filial
SELECT *
  FROM LFA1
  APPENDING TABLE TG_LFA1
    WHERE LIFNR EQ  WL_WERKS. "WG_EKPO-WERKS.

*Busca dados do mestre de empresa
SELECT SINGLE *
  FROM T001
  INTO WG_T001
    WHERE BUKRS EQ WG_EKKO-BUKRS.

*Busca dados do mestre de filial
SELECT SINGLE *
  FROM T001W
  INTO WG_T001W
    WHERE WERKS EQ WG_EKPO-WERKS.

SELECT *
  FROM EKBE
  INTO TABLE TG_EKBE
   WHERE EBELN EQ EBELN
     AND EBELP EQ EBELP
     AND VGABE EQ '2'.

IF SY-SUBRC IS INITIAL.
  SELECT *
    FROM RBKP
    INTO TABLE TG_RBKP
    FOR ALL ENTRIES IN TG_EKBE
     WHERE BELNR EQ TG_EKBE-BELNR
       AND GJAHR EQ TG_EKBE-GJAHR.

  IF SY-SUBRC IS INITIAL.
    SELECT *
      FROM LFA1
      APPENDING TABLE TG_LFA1
      FOR ALL ENTRIES IN TG_RBKP
       WHERE LIFNR EQ TG_RBKP-LIFNR.

  ENDIF.

  LOOP AT TG_EKBE INTO WG_EKBE.
    TL_EKBE_AUX-BUKRS = WG_EKPO-BUKRS.
    CONCATENATE WG_EKBE-BELNR WG_EKBE-GJAHR INTO TL_EKBE_AUX-AWKEY.
    TL_EKBE_AUX-GJAHR = WG_EKBE-GJAHR.

    APPEND TL_EKBE_AUX.
    CLEAR TL_EKBE_AUX.
  ENDLOOP.

  IF TL_EKBE_AUX[] IS NOT INITIAL.
    SELECT *
      FROM BKPF
      INTO TABLE TG_BKPF
       FOR ALL ENTRIES IN TL_EKBE_AUX
       WHERE AWKEY EQ TL_EKBE_AUX-AWKEY
         AND BUKRS EQ TL_EKBE_AUX-BUKRS
         AND GJAHR EQ TL_EKBE_AUX-GJAHR.

    IF SY-SUBRC IS INITIAL.
      SELECT *
        FROM WITH_ITEM
         INTO TABLE TG_WITH_ITEM
         FOR ALL ENTRIES IN TG_BKPF
         WHERE BELNR EQ TG_BKPF-BELNR
           AND GJAHR EQ TG_BKPF-GJAHR
           AND BUKRS EQ WG_EKKO-BUKRS.
    ENDIF.
    LOOP AT TG_EKBE INTO WG_EKBE.
      LOOP AT TG_RBKP INTO WG_RBKP
        WHERE BELNR EQ WG_EKBE-BELNR
          AND GJAHR EQ WG_EKBE-GJAHR.

        WG_TOTAL_NF = ( WG_TOTAL_NF + WG_RBKP-RMWWR ).
        CLEAR: WG_RBKP-RMWWR.
      ENDLOOP.

      CONCATENATE WG_EKBE-BELNR WG_EKBE-GJAHR INTO WL_AWKEY.

      READ TABLE TG_BKPF INTO WG_BKPF
        WITH KEY AWKEY = WL_AWKEY
                 BUKRS = WG_EKKO-BUKRS
                 GJAHR = WG_EKBE-GJAHR.
      IF SY-SUBRC IS INITIAL.
        LOOP AT TG_WITH_ITEM INTO WG_WITH_ITEM
          WHERE BELNR EQ WG_BKPF-BELNR
            AND GJAHR EQ WG_BKPF-GJAHR.
*          IF SY-SUBRC IS INITIAL.
          IF WG_WITH_ITEM-WITHT EQ 'CT'.
            WG_TOTAL_PIS = ( WG_TOTAL_PIS + WG_WITH_ITEM-WT_QBSHH ).

          ELSEIF WG_WITH_ITEM-WITHT EQ 'IR'.
            WG_TOTAL_IR = ( WG_TOTAL_IR + WG_WITH_ITEM-WT_QBSHH ).

          ELSEIF WG_WITH_ITEM-WITHT NE 'IR'
             AND WG_WITH_ITEM-WITHT NE 'CT'.
            WG_TOTAL_INSS = ( WG_TOTAL_INSS + WG_WITH_ITEM-WT_QBSHH ).
          ENDIF.
*          ENDIF.
          CLEAR: WG_WITH_ITEM.
        ENDLOOP.
      ENDIF.
    ENDLOOP.
    WG_TOTAL = ( WG_TOTAL_PIS + WG_TOTAL_IR  +
                 WG_TOTAL_INSS                 ).

  ENDIF.
ENDIF.
