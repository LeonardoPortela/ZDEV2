CLASS ZCL_ROMANEIO DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES ZIF_CADASTRO .

    ALIASES CK_ALTEROU
      FOR ZIF_CADASTRO~CK_ALTEROU .
    ALIASES EXCLUIR_REGISTRO
      FOR ZIF_CADASTRO~EXCLUIR_REGISTRO .
    ALIASES GET_REGISTRO
      FOR ZIF_CADASTRO~GET_REGISTRO .
    ALIASES GRAVAR_REGISTRO
      FOR ZIF_CADASTRO~GRAVAR_REGISTRO .
    ALIASES LIMPAR_REGISTRO
      FOR ZIF_CADASTRO~LIMPAR_REGISTRO .
    ALIASES NOVO_REGISTRO
      FOR ZIF_CADASTRO~NOVO_REGISTRO .
    ALIASES SET_REGISTRO
      FOR ZIF_CADASTRO~SET_REGISTRO .
    ALIASES VALIDAR_EXCLUSAO
      FOR ZIF_CADASTRO~VALIDAR_EXCLUSAO .
    ALIASES VALIDAR_REGISTRO
      FOR ZIF_CADASTRO~VALIDAR_REGISTRO .
    ALIASES VALIDA_ATRIBUTO_ALTERAVEL
      FOR ZIF_CADASTRO~VALIDA_ATRIBUTO_ALTERAVEL .

    CONSTANTS INTERFACE_IB_ROMANEIO TYPE ZID_INTERF VALUE '14' ##NO_TEXT.
    CONSTANTS INTERFACE_SEME_SEM_PESO_OPUS TYPE ZID_INTERF VALUE '48' ##NO_TEXT.
    CONSTANTS INTERFACE_INS_FATURA_FRETE TYPE ZID_INTERF VALUE '49' ##NO_TEXT.
    CONSTANTS INTERFACE_REM_ARM_NFE_INBOUND TYPE ZID_INTERF VALUE '50' ##NO_TEXT.
    CONSTANTS INTERFACE_FERT_SEM_PESO_OPUS TYPE ZID_INTERF VALUE '51' ##NO_TEXT.
    CONSTANTS INTERFACE_DEFE_SEM_PESO_OPUS TYPE ZID_INTERF VALUE '52' ##NO_TEXT.
    CONSTANTS INTERFACE_CARGA_SAP TYPE ZID_INTERF VALUE '55' ##NO_TEXT.
    CONSTANTS ST_TP_MOVIMENTO_ENTRADA TYPE ZTP_MOV VALUE 'E' ##NO_TEXT.
    CONSTANTS ST_TP_MOVIMENTO_SAIDA TYPE ZTP_MOV VALUE 'S' ##NO_TEXT.
    CONSTANTS ST_TP_FRETE_CIF TYPE ZTP_FRETE VALUE 'C' ##NO_TEXT.
    CONSTANTS ST_TP_FRETE_FOB TYPE ZTP_FRETE VALUE 'F' ##NO_TEXT.
    CLASS-DATA AT_ROMANEIO TYPE REF TO ZCL_ROMANEIO .
    DATA CK_PERMITE_DATA_RETROATIVA TYPE CHAR01 VALUE ABAP_FALSE ##NO_TEXT.
    DATA ST_NOT_COMMIT TYPE CHAR1 .

    METHODS ADD_FARDOS
      IMPORTING
        !I_FARDOS TYPE ZSDT0001_ITEM_FD
      RAISING
        ZCX_ROMANEIO .
    METHODS ADD_ITEM
      CHANGING
        !I_ITEM TYPE ZSDT0001_ITEM .
    METHODS DEL_ITEM
      IMPORTING
        !I_ITEM TYPE ZSDT0001_ITEM
      RAISING
        ZCX_ROMANEIO_EXCEPTION .
    METHODS SET_ITEM
      IMPORTING
        !I_ITEM TYPE ZSDT0001_ITEM
      RAISING
        ZCX_ROMANEIO_EXCEPTION .
    METHODS SET_TP_MOVIMENTO
      IMPORTING
        !I_TP_MOVIMENTO TYPE ZTP_MOV .
    METHODS SET_VBELN
      IMPORTING
        !I_VBELN TYPE VBELN .
    METHODS SET_NR_ROT
      IMPORTING
        !I_NR_ROT TYPE Z_NR_ROT .
    METHODS SET_DT_MOVIMENTO
      IMPORTING
        !I_DT_MOVIMENTO TYPE ZDT_MOV .
    METHODS SET_NR_SAFRA
      IMPORTING
        !I_NR_SAFRA TYPE ZNR_SAFRA .
    METHODS SET_BUKRS
      IMPORTING
        !I_BUKRS TYPE BUKRS .
    METHODS SET_BRANCH
      IMPORTING
        !I_BRANCH TYPE J_1BBRANC_ .
    METHODS SET_PARID
      IMPORTING
        !I_PARID TYPE ZPARID .
    METHODS SET_ID_CLI_DEST
      IMPORTING
        !I_ID_CLI_DEST TYPE ZID_CLI_DEST .
    CLASS-METHODS GERA_ERRO_GERAL
      IMPORTING
        !I_TEXTO TYPE STRING
      RAISING
        ZCX_ROMANEIO .
    METHODS SET_TP_FRETE
      IMPORTING
        !I_TP_FRETE TYPE ZTP_FRETE .
    METHODS SET_MATNR
      IMPORTING
        !I_MATNR TYPE MATNR .
    METHODS SET_PESO_LIQ
      IMPORTING
        !I_PESO_LIQ TYPE NTGEW .
    METHODS SET_PESO_FISCAL
      IMPORTING
        !I_PESO_FISCAL TYPE BRGEW .
    METHODS SET_NFNUM
      IMPORTING
        !I_NFNUM TYPE ZNFNUM .
    METHODS SET_SERIES
      IMPORTING
        !I_SERIES TYPE J_1BSERIES .
    METHODS SET_DOCDAT
      IMPORTING
        !I_DOCDAT TYPE J_1BDOCDAT .
    METHODS SET_NETWR
      IMPORTING
        !I_NETWR TYPE J_1BNETVAL .
    METHODS SET_NFE
      IMPORTING
        !I_NFE TYPE ZNFE .
    METHODS SET_PLACA_CAV
      IMPORTING
        !I_PLACA_CAV TYPE ZPLACA .
    METHODS SET_PLACA_CAR1
      IMPORTING
        !I_PLACA_CAR1 TYPE ZPLACA .
    METHODS SET_PLACA_CAR2
      IMPORTING
        !I_PLACA_CAR2 TYPE ZPLACA .
    METHODS SET_PLACA_CAR3
      IMPORTING
        !I_PLACA_CAR3 TYPE ZPLACA .
    METHODS SET_MOTORISTA
      IMPORTING
        !I_MOTORISTA TYPE ZMOTORISTA .
    METHODS SET_NR_TICKET
      IMPORTING
        !I_NR_TICKET TYPE ZNR_TICKET .
    METHODS SET_DT_FECHAMENTO
      IMPORTING
        !I_DT_FECHAMENTO TYPE ZDT_FECHAM .
    METHODS SET_HR_FECHAMENTO
      IMPORTING
        !I_HR_FECHAMENTO TYPE UTIME .
    METHODS SET_DT_ABERTURA
      IMPORTING
        !I_DT_ABERTURA TYPE ZDT_FECHAM .
    METHODS SET_HR_ABERTURA
      IMPORTING
        !I_HR_ABERTURA TYPE UTIME .
    METHODS SET_NR_PERC_UMIDADE
      IMPORTING
        !I_NR_PERC_UMIDADE TYPE ZNR_PERC_UMIDADE .
    METHODS SET_NR_PERC_CARUNCHADO
      IMPORTING
        !I_NR_PERC_CARUNCHADO TYPE ZNR_PERC_CARUNCHADO .
    METHODS SET_NR_QTD_UMIDADE
      IMPORTING
        !I_NR_QTD_UMIDADE TYPE ZNR_QTD_UMIDADE .
    METHODS SET_NR_QTD_CARUNCHADO
      IMPORTING
        !I_NR_QTD_CARUNCHADO TYPE ZNR_QTD_CARUNCHADO .
    METHODS SET_NR_PERC_IMPUREZA
      IMPORTING
        !I_NR_PERC_IMPUREZA TYPE ZNR_PERC_IMPUREZA .
    METHODS SET_NR_QTD_IMPUREZA
      IMPORTING
        !I_NR_QTD_IMPUREZA TYPE ZNR_QTD_IMPUREZA .
    METHODS SET_NR_PERC_AVARIA
      IMPORTING
        !I_NR_PERC_AVARIA TYPE ZNR_PERC_AVARIA .
    METHODS SET_NR_PERC_AVARIA_ARD
      IMPORTING
        !I_NR_PERC_AVARIA_ARD TYPE ZNR_PERC_AVARIA .
    METHODS SET_NR_PERC_AVARIA_ARQ
      IMPORTING
        !I_NR_PERC_AVARIA_ARQ TYPE ZNR_PERC_AVARIA .
    METHODS SET_NR_PERC_AVARIA_FER
      IMPORTING
        !I_NR_PERC_AVARIA_FER TYPE ZNR_PERC_AVARIA .
    METHODS SET_NR_PERC_AVARIA_GER
      IMPORTING
        !I_NR_PERC_AVARIA_GER TYPE ZNR_PERC_AVARIA .
    METHODS SET_NR_PERC_AVARIA_GES
      IMPORTING
        !I_NR_PERC_AVARIA_GES TYPE ZNR_PERC_AVARIA .
    METHODS SET_NR_PERC_AVARIA_MOF
      IMPORTING
        !I_NR_PERC_AVARIA_MOF TYPE ZNR_PERC_AVARIA .
    METHODS SET_NR_PERC_AVARIA_PIC
      IMPORTING
        !I_NR_PERC_AVARIA_PIC TYPE ZNR_PERC_AVARIA .
    METHODS SET_NR_PERC_AVARIA_QUE
      IMPORTING
        !I_NR_PERC_AVARIA_QUE TYPE ZNR_PERC_AVARIA .
    METHODS SET_NR_QTD_AVARIA
      IMPORTING
        !I_NR_QTD_AVARIA TYPE ZNR_QTD_AVARIA .
    METHODS SET_NR_PERC_ARDIDO
      IMPORTING
        !I_NR_PERC_ARDIDO TYPE ZNR_PERC_ARDIDO .
    METHODS SET_NR_QTD_ARDIDO
      IMPORTING
        !I_NR_QTD_ARDIDO TYPE ZNR_QTD_ARDIDO .
    METHODS SET_NR_PERC_QUEBRA
      IMPORTING
        !I_NR_PERC_QUEBRA TYPE ZNR_PERC_QUEBRA .
    METHODS SET_NR_QTD_QUEBRA
      IMPORTING
        !I_NR_QTD_QUEBRA TYPE ZNR_QTD_QUEBRA .
    METHODS SET_NR_PERC_ESVERD
      IMPORTING
        !I_NR_PERC_ESVERD TYPE ZNR_PERC_ESVERD .
    METHODS SET_NR_QTD_ESVERD
      IMPORTING
        !I_NR_QTD_ESVERD TYPE ZNR_QTD_ESVERD .
    METHODS SET_DOC_REM
      IMPORTING
        !I_DOC_REM TYPE ZDOC_REM .
    METHODS SET_ID_INTERFACE
      IMPORTING
        !I_ID_INTERFACE TYPE ZID_INTERF .
    METHODS SET_STATUS
      IMPORTING
        !I_STATUS TYPE ZSTATUS .
    METHODS SET_TKNUM
      IMPORTING
        !I_TKNUM TYPE TKNUM .
    METHODS SET_DOC_MATERIAL
      IMPORTING
        !I_DOC_MATERIAL TYPE MBLNR .
    METHODS SET_ANO_MATERIAL
      IMPORTING
        !I_ANO_MATERIAL TYPE MJAHR .
    METHODS SET_PESO_SUBTOTAL
      IMPORTING
        !I_PESO_SUBTOTAL TYPE BRGEW .
    METHODS SET_DT_CHEGADA
      IMPORTING
        !I_DT_CHEGADA TYPE ZDT_MOV .
    METHODS SET_NR_NOTA_CONTA_OR
      IMPORTING
        !I_NR_NOTA_CONTA_OR TYPE ZNFNUM .
    METHODS SET_NR_SERIE_CONTA_O
      IMPORTING
        !I_NR_SERIE_CONTA_O TYPE J_1BSERIES .
    METHODS SET_ID_REFERENCIA
      IMPORTING
        !I_ID_REFERENCIA TYPE ZCH_REF .
    METHODS SET_TP_TRANSGENIA
      IMPORTING
        !I_TP_TRANSGENIA TYPE CHAR2 .
    METHODS SET_DS_OBS
      IMPORTING
        !I_DS_OBS TYPE ZDE_DS_OBS_ROM .
    METHODS SET_CT_AQUAV
      IMPORTING
        !I_CT_AQUAV TYPE CHAR1 .
    METHODS SET_DOCNUM_AQUAV
      IMPORTING
        !I_DOCNUM_AQUAV TYPE J_1BDOCNUM .
    METHODS SET_ST_PROC
      IMPORTING
        !I_ST_PROC TYPE ZST_PROC .
    METHODS SET_FATURA_PROD
      IMPORTING
        !I_FATURA_PROD TYPE VBELN_VF .
    METHODS SET_NRO_NF_PROD
      IMPORTING
        !I_NRO_NF_PROD TYPE J_1BDOCNUM .
    METHODS SET_DOC_TRANSP
      IMPORTING
        !I_DOC_TRANSP TYPE TKNUM .
    METHODS SET_FKNUM
      IMPORTING
        !I_FKNUM TYPE FKNUM .
    METHODS SET_OV_FRETE
      IMPORTING
        !I_OV_FRETE TYPE VBELN_VA .
    METHODS SET_FATURA_FRETE
      IMPORTING
        !I_FATURA_FRETE TYPE VBELN_VF .
    METHODS SET_NRO_NF_FRETE
      IMPORTING
        !I_NRO_NF_FRETE TYPE J_1BDOCNUM .
    METHODS SET_AGENTE_FRETE
      IMPORTING
        !I_AGENTE_FRETE TYPE LIFNR .
    METHODS SET_KBETR
      IMPORTING
        !I_KBETR TYPE KBETR_KOND .
    METHODS SET_REGION
      IMPORTING
        !I_REGION TYPE REGIO .
    METHODS SET_LOCAL_DESCARGA
      IMPORTING
        !I_LOCAL_DESCARGA TYPE ZDE_LOCAL_DESCARGA_OPUS .
    METHODS SET_TIPO_ENTRADA
      IMPORTING
        !I_TIPO_ENTRADA TYPE CHAR03 .
    METHODS SET_SEQ_LCTO
      IMPORTING
        !I_SEQ_LCTO TYPE ZFIWED006 .
    METHODS SET_NRO_NF_REM
      IMPORTING
        !I_NRO_NF_REM TYPE J_1BDOCNUM .
    METHODS SET_DOC_AVISO
      IMPORTING
        !I_DOC_AVISO TYPE VBELN_VL .
    METHODS SET_EBELN
      IMPORTING
        !I_EBELN TYPE EBELN .
    METHODS SET_PESO_RETIDO_EST
      IMPORTING
        !I_PESO_RETIDO_EST TYPE BRGEW .
    METHODS SET_PESO_LIQRET_EST
      IMPORTING
        !I_PESO_LIQRET_EST TYPE BRGEW .
    METHODS SET_PESO_RETIDO_REAL
      IMPORTING
        !I_PESO_RETIDO_REAL TYPE BRGEW .
    METHODS SET_PESO_LIQRET_REAL
      IMPORTING
        !I_PESO_LIQRET_REAL TYPE BRGEW .
    METHODS SET_VINC_TOT_AQUAV
      IMPORTING
        !I_VINC_TOT_AQUAV TYPE CHAR01 .
    METHODS SET_CTE_EMIT_AQUAV
      IMPORTING
        !I_CTE_EMIT_AQUAV TYPE CHAR01 .
    METHODS SET_NRO_CG
      IMPORTING
        !I_NRO_CG TYPE ZSDT0001-NRO_CG .
    METHODS SET_DOC_MATERIAL_E
      IMPORTING
        !I_DOC_MATERIAL_E TYPE MBLNR .
    METHODS SET_ANO_MATERIAL_E
      IMPORTING
        !I_ANO_MATERIAL_E TYPE MJAHR .
    METHODS SET_CH_REFER_ENT
      IMPORTING
        !I_CH_REFER_ENT TYPE ZCH_REF .
    METHODS SET_CABECALHO_ROMANEIO
      IMPORTING
        !I_ROMANEIO TYPE ZSDT0001 .
    METHODS GET_ITENS
      RETURNING
        VALUE(R_ITENS) TYPE ZSDT0001_ITEM_T .
    METHODS SET_ID_CARGA
      IMPORTING
        !I_ID_CARGA TYPE ZDE_ID_CARGA .
    METHODS SET_ID_NOTA
      IMPORTING
        !I_ID_NOTA TYPE ZDE_ID_NOTA .
    METHODS SET_PESO_BRUTO
      IMPORTING
        !I_PESO_BRUTO TYPE ZDE_PESO_BRUTO .
    METHODS SET_PESO_TARA
      IMPORTING
        !I_PESO_TARA TYPE ZDE_PESO_TARA .
    METHODS GET_IMPRESSORAS_FILIAL
      EXPORTING
        !E_IDIMPRESSORA TYPE STRING
      RAISING
        ZCX_ROMANEIO .
    CLASS-METHODS GET_IMPRESSORAS_FILIAL_
      IMPORTING
        !I_FILIAL       TYPE CHAR04
      EXPORTING
        !E_IDIMPRESSORA TYPE STRING
      RAISING
        ZCX_ROMANEIO .
    METHODS IMPRIMIR_PRD
      IMPORTING
        !I_NAO_IMPRIMIR      TYPE CHAR01 OPTIONAL
      EXPORTING
        VALUE(E_DATA_XTRING) TYPE ZDE_DATA_XSTRING
      RAISING
        ZCX_ROMANEIO .
    CLASS-METHODS IMPRIMIR_PRD_
      IMPORTING
        !I_CENTRO            TYPE STRING
        !I_SAFRA             TYPE STRING
        !I_NRROMANEIO        TYPE STRING
        !I_TPROMANEIO        TYPE STRING
        !I_NAO_IMPRIMIR      TYPE CHAR01 OPTIONAL
      EXPORTING
        VALUE(E_DATA_XTRING) TYPE ZDE_DATA_XSTRING
      RAISING
        ZCX_ROMANEIO .
    METHODS IMPRIMIR_TICKET
      IMPORTING
        !I_IDIMPRESSORA TYPE STRING OPTIONAL
      RAISING
        ZCX_ROMANEIO .
    CLASS-METHODS IMPRIMIR_TICKET_
      IMPORTING
        !I_CENTRO       TYPE STRING
        !I_SAFRA        TYPE STRING
        !I_NRROMANEIO   TYPE STRING
        !I_TPROMANEIO   TYPE STRING
        !I_IDIMPRESSORA TYPE STRING OPTIONAL
      RAISING
        ZCX_ROMANEIO .
    CLASS-METHODS GET_CK_FATURAR
      IMPORTING
        !I_CH_REFERENCIA_SAI   TYPE ZCH_REF
        !I_SOMENTE_CHV_FATURAR TYPE CHAR01 OPTIONAL
      EXPORTING
        !E_ROMANEIOS           TYPE ZSDT0001_T
        !E_FATURAR             TYPE CHAR01
        !E_PESO_CARGA          TYPE ZDE_NM_PESO_SUBTOTAL
        !E_PESO_ROMANEIOS      TYPE ZDE_NM_PESO_SUBTOTAL
        !E_QTD_EMBALAGENS      TYPE ZDE_QT_EMBALAGENS
        !E_MENSAGEM            TYPE CHAR255
        !E_CHV_FATURAR         TYPE ZCH_REF .
    CLASS-METHODS SET_FORCAR_REENVIO_OPUS_TO_SAP
      IMPORTING
        !I_CH_REFERENCIA_SAI TYPE ZCH_REF
      RAISING
        ZCX_ERROR .
    CLASS-METHODS GET_QTD_EMBALAGEM
      IMPORTING
        !I_CH_REFERENCIA_SAI TYPE ZCH_REF
      EXPORTING
        !E_QTD_EMBALAGENS    TYPE ZDE_QT_EMBALAGENS
      RAISING
        ZCX_ROMANEIO .
    CLASS-METHODS GET_CK_ROM_FINAL
      IMPORTING
        !I_CHV_ROM_CARGA   TYPE ZCH_REF
      EXPORTING
        VALUE(E_ROM_FINAL) TYPE ZSDT0001 .
*---> 20.06.2023 - Migração S4 - DG
    "      value(R_STATUS) type CHAR02
*<--- 20.06.2023 - Migração S4 - DG
    CLASS-METHODS GET_STATUS_OPUS
      IMPORTING
        !I_REFERENCIA   TYPE ZCH_REF
        !I_TP_MOVIMENTO TYPE ZTP_MOV
      RETURNING
        VALUE(R_STATUS) TYPE ZCHAR02
      RAISING
        ZCX_ERROR .
    METHODS SET_ID_ORDEM
      IMPORTING
        !I_ID_ORDEM TYPE ZDE_ID_ORDEM .
    METHODS GET_PESO_SUBTOTAL
      RETURNING
        VALUE(R_PESO_SUBTOTAL) TYPE BRGEW .
    METHODS GET_PESO_TARA
      RETURNING
        VALUE(R_PESO_TARA) TYPE ZDE_PESO_TARA .
    METHODS GET_CONSULTA_STATUS_OPUS
      EXPORTING
        VALUE(E_STATUS)            TYPE ZDE_STATUS_CARGA
        VALUE(E_BLOQUEADO)         TYPE STRING
        VALUE(E_MENSAGEM_BLOQUEIO) TYPE STRING
      RETURNING
        VALUE(R_ROMANEIO)          TYPE REF TO ZCL_ROMANEIO
      RAISING
        ZCX_ROMANEIO .
    CLASS-METHODS GET_INSTANCE
      RETURNING
        VALUE(R_ROMANEIO) TYPE REF TO ZCL_ROMANEIO .
    CLASS-METHODS SET_CANCELAR_ROMANEIO
      IMPORTING
        !I_CH_REFERENCIA TYPE ZCH_REF .
    METHODS SET_COMMIT
      IMPORTING
        !I_NOT_COMMIT TYPE CHAR1 OPTIONAL .
    METHODS GET_COMMIT
      RETURNING
        VALUE(E_NOT_COMMIT) TYPE CHAR1 .
    CLASS-METHODS SET_MENSAGEM_OPUS
      IMPORTING
        !I_CH_REFERENCIA     TYPE ZCH_REF
        !I_FATURAMENTO_AUTOM TYPE CHAR01 OPTIONAL
        !I_POPUP             TYPE CHAR01 OPTIONAL
      EXPORTING
        !E_MENSAGEM          TYPE CHAR255 .
    METHODS SET_DADOS_EUDR
      IMPORTING
        !I_DADOS_EUDR TYPE ZSTRUCT_DADOS_EUDR .
    METHODS SET_ROMANEIO_COMPLETO
      IMPORTING
        !I_ROMANEIO_COMPLETO TYPE ZDE_ROMANEIO_COMPLETO .

  PROTECTED SECTION.

    DATA ROMANEIO TYPE ZSDT0001 .
  PRIVATE SECTION.

    DATA ITENS TYPE ZSDT0001_ITEM_T .
    DATA FARDOS TYPE ZSDT0001_ITEM_FD_T .
ENDCLASS.



CLASS ZCL_ROMANEIO IMPLEMENTATION.


  METHOD ADD_FARDOS.
    APPEND I_FARDOS TO ME->FARDOS.
    ME->CK_ALTEROU = ABAP_TRUE.
  ENDMETHOD.


  METHOD ADD_ITEM.

    DATA: LC_ITEM  TYPE ZDE_CD_ITEM_ROM.

    "Inclui um Lote na Sequencia
    CLEAR: LC_ITEM.

    LOOP AT ME->ITENS INTO DATA(WA_ITEM) WHERE CD_ITEM(1) EQ '$'.
      CONCATENATE '0' WA_ITEM-CD_ITEM+1(9) INTO WA_ITEM-CD_ITEM.
      IF WA_ITEM-CD_ITEM GE LC_ITEM.
        ADD 1 TO WA_ITEM-CD_ITEM.
        LC_ITEM = WA_ITEM-CD_ITEM.
      ENDIF.
    ENDLOOP.

    IF LC_ITEM IS INITIAL.
      LC_ITEM = '0000000001'.
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = LC_ITEM
        IMPORTING
          OUTPUT = LC_ITEM.
    ENDIF.

    CONCATENATE '$' LC_ITEM+1(9) INTO I_ITEM-CD_ITEM.
    APPEND I_ITEM TO ME->ITENS.
    ME->CK_ALTEROU = ABAP_TRUE.

  ENDMETHOD.


  METHOD DEL_ITEM.

    READ TABLE ME->ITENS ASSIGNING FIELD-SYMBOL(<FS_ITEM>) WITH KEY CD_ITEM = I_ITEM-CD_ITEM.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_ROMANEIO_EXCEPTION
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_ROMANEIO_EXCEPTION=>ZCX_ITEM_NAO_EXISTE-MSGID
                            MSGNO = ZCX_ROMANEIO_EXCEPTION=>ZCX_ITEM_NAO_EXISTE-MSGNO
                            ATTR1 = CONV #( I_ITEM-CD_ITEM ) )
          MSGID  = ZCX_ROMANEIO_EXCEPTION=>ZCX_ITEM_NAO_EXISTE-MSGID
          MSGNO  = ZCX_ROMANEIO_EXCEPTION=>ZCX_ITEM_NAO_EXISTE-MSGNO
          MSGTY  = 'E'
          MSGV1  = CONV #( I_ITEM-CD_ITEM ).
    ELSE.
      ME->CK_ALTEROU = ABAP_TRUE.
      DELETE ME->ITENS  WHERE CD_ITEM = I_ITEM-CD_ITEM.
      DELETE ME->FARDOS WHERE CD_ITEM = I_ITEM-CD_ITEM.
    ENDIF.

  ENDMETHOD.


  METHOD GERA_ERRO_GERAL.

    DATA: LC_TEXTO TYPE C LENGTH 200.
    LC_TEXTO = I_TEXTO.
    SY-MSGV1 = LC_TEXTO+000(50).
    SY-MSGV2 = LC_TEXTO+050(50).
    SY-MSGV3 = LC_TEXTO+100(50).
    SY-MSGV4 = LC_TEXTO+150(50).

    RAISE EXCEPTION TYPE ZCX_ROMANEIO
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_ROMANEIO=>ZCX_ERRO_GERAL-MSGID
                          MSGNO = ZCX_ROMANEIO=>ZCX_ERRO_GERAL-MSGNO
                          ATTR1 = CONV #( SY-MSGV1 )
                          ATTR2 = CONV #( SY-MSGV2 )
                          ATTR3 = CONV #( SY-MSGV3 )
                          ATTR4 = CONV #( SY-MSGV4 ) )
        MSGID  = ZCX_ROMANEIO=>ZCX_ERRO_GERAL-MSGID
        MSGNO  = ZCX_ROMANEIO=>ZCX_ERRO_GERAL-MSGNO
        MSGTY  = 'E'
        MSGV1  = SY-MSGV1
        MSGV2  = SY-MSGV2
        MSGV3  = SY-MSGV3
        MSGV4  = SY-MSGV4.

  ENDMETHOD.


  METHOD GET_CK_FATURAR.

    TYPES BEGIN OF TY_ROMANEIO.
    TYPES: ID_SEQ_PLA_ROMANEIOS   TYPE ZCH_REF.
    TYPES: NR_PESO_SUB_TOTAL      TYPE STRING.
    TYPES: TP_STATUS              TYPE STRING.
    TYPES: NR_PESO_LIQUIDO_COMERCIAL TYPE STRING.
    TYPES: NM_QTD_EMBALAGENS      TYPE STRING.
    TYPES END OF TY_ROMANEIO.

    DATA: V_ID_CLI_DEST     TYPE ZSDT0001-ID_CLI_DEST,
          IT_ROMANEIOS_OPUS TYPE TABLE OF TY_ROMANEIO,
          LC_QTD_EIXOS      TYPE ZQT_EIXO.

    DATA: LC_NM_PESO_SUBTOTAL_API  TYPE ZDE_NM_PESO_SUBTOTAL,
          LC_NM_QTD_EMBALAGENS_API TYPE ZDE_QT_EMBALAGENS.

    DATA: LOB_WEB_SERVICE    TYPE REF TO ZCL_WEBSERVICE,
          LIT_ROMANEIOS_OPUS TYPE ZDE_ROMANEIO_JSON_001_T.

*-US 141899-04.06.2024-#141899-JT-inicio
    DATA: LC_FATURAMENTO_AUTOMATICO TYPE REF TO ZCL_FATURAMENTO_AUTOMATICO,
          VG_FATURAMENTO_AUTOM      TYPE CHAR01.
*-US 141899-04.06.2024-#141899-JT-fim

    CLEAR: V_ID_CLI_DEST.

*-US 141899-04.06.2024-#141899-JT-inicio
*----------------------------------
*---verifica faturamento automatico
*----------------------------------
    SELECT SINGLE *
      FROM ZLEST0241
      INTO @DATA(_ZLEST0241)
     WHERE CH_REFERENCIA = @I_CH_REFERENCIA_SAI
       AND CANCELADO     = @ABAP_FALSE.

    IF SY-SUBRC = 0.
      VG_FATURAMENTO_AUTOM = ABAP_TRUE.

      IF SY-TCODE(2)  = 'VT'       OR SY-TCODE = 'ZOPUS'       OR SY-TCODE   = 'ZTRANSF'  OR SY-TCODE     = 'ZLES0060' OR
       ( SY-TCODE     = 'ZLES0086' OR SY-CPROG = 'ZLESR0077' ) OR SY-TCODE   = 'ZLES0106' OR SY-TCODE     = 'ZLES0113' OR
         SY-TCODE     = 'ZLES0115' OR SY-TCODE = 'ZLES0136'    OR SY-TCODE   = 'ZMM0079'  OR SY-TCODE     = 'ZMM0127'  OR
         SY-TCODE     = 'ZLES0200' OR SY-CPROG = 'ZMMR183'.
        VG_FATURAMENTO_AUTOM = ABAP_FALSE.
      ENDIF.
    ENDIF.
*-US 141899-04.06.2024-#141899-JT-fim

    E_FATURAR        = ABAP_FALSE.
    E_PESO_CARGA     = 0.
    E_PESO_ROMANEIOS = 0.
    E_QTD_EMBALAGENS = 0.

    SELECT SINGLE * INTO @DATA(WA_ZSDT0001)
      FROM ZSDT0001
     WHERE CH_REFERENCIA EQ @I_CH_REFERENCIA_SAI.

    IF SY-SUBRC NE 0.
      E_MENSAGEM = 'Registro do Romaneio Chave de Referencia: ' && I_CH_REFERENCIA_SAI && ' não encontrado!'.
      RETURN.
    ENDIF.

    "CS2024000917 - Comentando regra, pois validação deve ser feita no OPUS
    " Início - Bloqueio para não permitir faturar - DEVK9A1TH0 - #128345 RSA
*    IF NOT wa_zsdt0001-matnr IS INITIAL.
*      SELECT SINGLE matnr, matkl
*             FROM mara
*             INTO @DATA(wa_mara)
*             WHERE matnr EQ @wa_zsdt0001-matnr.
*      IF wa_mara-matkl EQ '700140' AND wa_zsdt0001-peso_liq EQ wa_zsdt0001-peso_subtotal.
*        e_mensagem = 'Peso Bruto e Peso Liquido estão idênticos. Por favor corrigir no romaneio.'.
*        RETURN.
*      ENDIF.
*    ENDIF.
    " Fim - Bloqueio para não permitir faturar - DEVK9A1TH0 - #128345 RSA
    "CS2024000917 - Comentando regra, pois validação deve ser feita no OPUS - Fim


    "Verificar Quantidade de Eixos
    LC_QTD_EIXOS = 0.

    IF WA_ZSDT0001-PLACA_CAV IS NOT INITIAL.

      SELECT SINGLE * INTO @DATA(WA_ZLEST0002)
        FROM ZLEST0002
       WHERE PC_VEICULO EQ @WA_ZSDT0001-PLACA_CAV.

      IF SY-SUBRC IS INITIAL.
        ADD WA_ZLEST0002-QT_EIXO TO LC_QTD_EIXOS.
      ENDIF.

    ENDIF.

    IF WA_ZSDT0001-PLACA_CAR1 IS NOT INITIAL.

      SELECT SINGLE * INTO @WA_ZLEST0002
        FROM ZLEST0002
       WHERE PC_VEICULO EQ @WA_ZSDT0001-PLACA_CAR1.

      IF SY-SUBRC IS INITIAL.
        ADD WA_ZLEST0002-QT_EIXO TO LC_QTD_EIXOS.
      ENDIF.

    ENDIF.

    IF WA_ZSDT0001-PLACA_CAR2 IS NOT INITIAL.

      SELECT SINGLE * INTO @WA_ZLEST0002
        FROM ZLEST0002
       WHERE PC_VEICULO EQ @WA_ZSDT0001-PLACA_CAR2.

      IF SY-SUBRC IS INITIAL.
        ADD WA_ZLEST0002-QT_EIXO TO LC_QTD_EIXOS.
      ENDIF.

    ENDIF.

    IF WA_ZSDT0001-PLACA_CAR3 IS NOT INITIAL.

      SELECT SINGLE * INTO @WA_ZLEST0002
        FROM ZLEST0002
       WHERE PC_VEICULO EQ @WA_ZSDT0001-PLACA_CAR3.

      IF SY-SUBRC IS INITIAL.
        ADD WA_ZLEST0002-QT_EIXO TO LC_QTD_EIXOS.
      ENDIF.

    ENDIF.

    IF LC_QTD_EIXOS GT 9.
      MESSAGE S074(ZREPOM) INTO E_MENSAGEM.
      RETURN.
    ENDIF.

    V_ID_CLI_DEST = WA_ZSDT0001-ID_CLI_DEST.

    DATA(LVA_DISABLE_CHECK_FATURAR) = ABAP_FALSE.

    SELECT SINGLE *
      FROM SETLEAF INTO @DATA(WL_SET_LEAF)
     WHERE SETNAME = 'ZCL_ROMANEIO'
       AND VALFROM = 'DISABLE_CK_FAT'.

    IF SY-SUBRC EQ 0.
      LVA_DISABLE_CHECK_FATURAR = ABAP_TRUE.
    ENDIF.

    "Cockpit de Insumos
    IF WA_ZSDT0001-ID_INTERFACE EQ ZCL_ROMANEIO=>INTERFACE_FERT_SEM_PESO_OPUS OR
       WA_ZSDT0001-ID_INTERFACE EQ ZCL_ROMANEIO=>INTERFACE_DEFE_SEM_PESO_OPUS OR
       WA_ZSDT0001-ID_INTERFACE EQ ZCL_ROMANEIO=>INTERFACE_SEME_SEM_PESO_OPUS OR
       LVA_DISABLE_CHECK_FATURAR EQ ABAP_TRUE.
      "OR WA_ZSDT0001-ID_INTERFACE EQ ZCL_ROMANEIO=>INTERFACE_INS_FATURA_FRETE.

      E_FATURAR = ABAP_TRUE.
      "APPEND wa_zsdt0001 TO e_romaneios.             "*-US 143658-15.07.2024-#143658-JT-comentado
      "e_peso_carga      = wa_zsdt0001-peso_subtotal. "*-US 143658-15.07.2024-#143658-JT-comentado
      "e_peso_romaneios  = wa_zsdt0001-peso_subtotal. "*-US 143658-15.07.2024-#143658-JT-comentado

*-US 143658-15.07.2024-#143658-JT-inicio
      "Busca o Romaneio
      SELECT SINGLE * INTO @DATA(WA_ROMANEIO)
        FROM ZSDT0001OVRO
       WHERE CH_REFERENCIA_SAI EQ @I_CH_REFERENCIA_SAI.

      IF SY-SUBRC IS NOT INITIAL.
        SELECT * INTO TABLE @DATA(IT_ZSDT0001_S)
          FROM ZSDT0001
         WHERE CH_REFERENCIA EQ @I_CH_REFERENCIA_SAI.

        LOOP AT IT_ZSDT0001_S INTO WA_ZSDT0001.
          APPEND WA_ZSDT0001 TO E_ROMANEIOS.
        ENDLOOP.

        SORT E_ROMANEIOS BY NR_ROMANEIO.
        LOOP AT E_ROMANEIOS INTO DATA(_WL_ROM_FAT) WHERE ID_CLI_DEST = V_ID_CLI_DEST.
          E_CHV_FATURAR = _WL_ROM_FAT-CH_REFERENCIA.
          EXIT.
        ENDLOOP.
        RETURN.
      ENDIF.

      "Busca Todos os Romaneios da Carga
      SELECT * INTO TABLE @DATA(IT_ROMANEIOS)
        FROM ZSDT0001OVRO
       WHERE ID_CARGA EQ @WA_ROMANEIO-ID_CARGA.

      SORT IT_ROMANEIOS BY CH_REFERENCIA_SAI.

      "Busca os Romaneios enviados pelo OPUS interface 14
      SELECT * INTO TABLE IT_ZSDT0001_S
        FROM ZSDT0001
         FOR ALL ENTRIES IN IT_ROMANEIOS
       WHERE CH_REFERENCIA EQ IT_ROMANEIOS-CH_REFERENCIA_SAI.

      SELECT SINGLE * INTO @DATA(W_CARGA)
        FROM ZSDT0001CG
       WHERE ID_CARGA EQ @WA_ROMANEIO-ID_CARGA.

      E_PESO_CARGA = W_CARGA-NM_PESO_SUBTOTAL.

      LOOP AT IT_ZSDT0001_S INTO WA_ZSDT0001.
        READ TABLE IT_ROMANEIOS INTO DATA(WA_ROMANEIOS) WITH KEY CH_REFERENCIA_SAI = WA_ZSDT0001-CH_REFERENCIA BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          APPEND WA_ZSDT0001 TO E_ROMANEIOS.
          E_PESO_ROMANEIOS = E_PESO_ROMANEIOS + WA_ROMANEIOS-NM_PESO_SUBTOTAL.
          E_QTD_EMBALAGENS = E_QTD_EMBALAGENS + WA_ROMANEIOS-NM_QTD_EMBALAGENS.
        ENDIF.
      ENDLOOP.

      SORT E_ROMANEIOS BY NR_ROMANEIO.
      LOOP AT E_ROMANEIOS INTO _WL_ROM_FAT WHERE ID_CLI_DEST = V_ID_CLI_DEST.
        E_CHV_FATURAR = _WL_ROM_FAT-CH_REFERENCIA.
        EXIT.
      ENDLOOP.
*-US 143658-15.07.2024-#143658-JT-fim
      EXIT.
    ENDIF.
    "CHECK WA_ZSDT0001-ID_INTERFACE NE ZCL_ROMANEIO=>INTERFACE_FERT_SEM_PESO_OPUS.
    "CHECK WA_ZSDT0001-ID_INTERFACE NE ZCL_ROMANEIO=>INTERFACE_DEFE_SEM_PESO_OPUS.
    "CHECK WA_ZSDT0001-ID_INTERFACE NE ZCL_ROMANEIO=>INTERFACE_SEME_SEM_PESO_OPUS.

    "Romaneio de Entrada FOB - SAP
    IF WA_ZSDT0001-ID_INTERFACE EQ ZCL_ROMANEIO=>INTERFACE_CARGA_SAP.

      SELECT SINGLE * INTO @DATA(WS_ZSDT0001CG)
        FROM ZSDT0001CG
       WHERE ID_CARGA EQ @WA_ZSDT0001-ID_CARGA.

      IF WS_ZSDT0001CG-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CONFERIDO.
        CONCATENATE 'Romaneio' WA_ZSDT0001-NR_ROMANEIO 'não está com a Carga conferida na ZMM0127' INTO E_MENSAGEM SEPARATED BY SPACE.
        RETURN.
      ENDIF.

      SELECT * INTO TABLE @E_ROMANEIOS
        FROM ZSDT0001
       WHERE ID_CARGA     EQ @WA_ZSDT0001-ID_CARGA
         AND TP_MOVIMENTO EQ 'S'.

      LOOP AT E_ROMANEIOS INTO WA_ZSDT0001.
        E_PESO_CARGA      = E_PESO_CARGA     + WA_ZSDT0001-PESO_SUBTOTAL.
        E_PESO_ROMANEIOS  = E_PESO_ROMANEIOS + WA_ZSDT0001-PESO_SUBTOTAL.

        TRY.
            CALL METHOD ZCL_ROMANEIO=>GET_STATUS_OPUS
              EXPORTING
                I_REFERENCIA   = WA_ZSDT0001-CH_REFERENCIA
                I_TP_MOVIMENTO = WA_ZSDT0001-TP_MOVIMENTO
              RECEIVING
                R_STATUS       = DATA(LV_STATUS_ROM).

            IF LV_STATUS_ROM EQ 'CA'.
              CONCATENATE 'Romaneio' WA_ZSDT0001-NR_ROMANEIO 'está cancelado no OPUS!' INTO E_MENSAGEM SEPARATED BY SPACE.
              RETURN.
            ENDIF.
          CATCH ZCX_ERROR INTO DATA(ZCX_ERROR2).
            ZCX_ERROR2->ZIF_ERROR~PUBLISHED_ERRO( EXPORTING I_MSGTY = 'I'  I_MSGTY_DISPLAY = 'E' ).
            RETURN.
        ENDTRY.

      ENDLOOP.

      E_FATURAR = ABAP_TRUE.

    ENDIF.

    CHECK WA_ZSDT0001-ID_INTERFACE NE ZCL_ROMANEIO=>INTERFACE_CARGA_SAP.

    "Busca o Romaneio
    SELECT SINGLE * INTO @DATA(WA_ROMANEIO_SAIDA)
      FROM ZSDT0001OVRO
     WHERE CH_REFERENCIA_SAI EQ @I_CH_REFERENCIA_SAI.

    IF SY-SUBRC IS NOT INITIAL.

*-US 141899-04.06.2024-#141899-JT-inicio
      ZCL_ROMANEIO=>SET_MENSAGEM_OPUS( EXPORTING I_CH_REFERENCIA     = I_CH_REFERENCIA_SAI
                                                 I_FATURAMENTO_AUTOM = VG_FATURAMENTO_AUTOM
                                       IMPORTING E_MENSAGEM          = E_MENSAGEM ).
      RETURN.
*      TRY .
*          zcl_romaneio=>set_forcar_reenvio_opus_to_sap( i_ch_referencia_sai = i_ch_referencia_sai ).
*        CATCH zcx_error INTO DATA(zcx_error).
*         MESSAGE ID zcx_error->msgid TYPE 'S' NUMBER zcx_error->msgno WITH zcx_error->msgv1 zcx_error->msgv2 zcx_error->msgv3 zcx_error->msgv4
*            INTO e_mensagem.
*          RETURN.
*      ENDTRY.
*
*      SELECT SINGLE * INTO @wa_romaneio_saida
*        FROM zsdt0001ovro
*       WHERE ch_referencia_sai EQ @i_ch_referencia_sai.
*-US 141899-04.06.2024-#141899-JT-fim
    ENDIF.

    CHECK SY-SUBRC IS INITIAL.

    "Busca Todos os Romaneios da Carga
    SELECT * INTO TABLE @DATA(IT_ROMANEIOS_SAIDA)
      FROM ZSDT0001OVRO
     WHERE ID_CARGA EQ @WA_ROMANEIO_SAIDA-ID_CARGA.
    SORT IT_ROMANEIOS_SAIDA BY CH_REFERENCIA_SAI.

    "Busca os Romaneios enviados pelo OPUS interface 14
    SELECT * INTO TABLE @DATA(IT_ZSDT0001)
      FROM ZSDT0001
       FOR ALL ENTRIES IN @IT_ROMANEIOS_SAIDA
     WHERE CH_REFERENCIA EQ @IT_ROMANEIOS_SAIDA-CH_REFERENCIA_SAI.

    LOOP AT IT_ZSDT0001 INTO WA_ZSDT0001.
      READ TABLE IT_ROMANEIOS_SAIDA WITH KEY CH_REFERENCIA_SAI = WA_ZSDT0001-CH_REFERENCIA BINARY SEARCH TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        APPEND WA_ZSDT0001 TO E_ROMANEIOS.
      ENDIF.
    ENDLOOP.

    LOOP AT E_ROMANEIOS INTO WA_ZSDT0001.
      READ TABLE IT_ROMANEIOS_SAIDA WITH KEY CH_REFERENCIA_SAI = WA_ZSDT0001-CH_REFERENCIA BINARY SEARCH INTO DATA(WA_ROMANEIOS_SAIDA).
      IF SY-SUBRC IS INITIAL.
        E_PESO_ROMANEIOS = E_PESO_ROMANEIOS + WA_ROMANEIOS_SAIDA-NM_PESO_SUBTOTAL.
        E_QTD_EMBALAGENS = E_QTD_EMBALAGENS + WA_ROMANEIOS_SAIDA-NM_QTD_EMBALAGENS.
      ENDIF.
    ENDLOOP.

    SELECT SINGLE * INTO @DATA(WA_CARGA)
      FROM ZSDT0001CG
     WHERE ID_CARGA EQ @WA_ROMANEIO_SAIDA-ID_CARGA.

    E_PESO_CARGA = WA_CARGA-NM_PESO_SUBTOTAL.

    IF E_PESO_CARGA NE E_PESO_ROMANEIOS.

*-US 141899-04.06.2024-#141899-JT-inicio
      ZCL_ROMANEIO=>SET_MENSAGEM_OPUS( EXPORTING I_CH_REFERENCIA     = I_CH_REFERENCIA_SAI
                                                 I_FATURAMENTO_AUTOM = VG_FATURAMENTO_AUTOM
                                       IMPORTING E_MENSAGEM          = E_MENSAGEM ).
      RETURN.
*      TRY .
*          zcl_romaneio=>set_forcar_reenvio_opus_to_sap( i_ch_referencia_sai = i_ch_referencia_sai ).
*        CATCH zcx_error INTO zcx_error.
*         MESSAGE ID zcx_error->msgid TYPE 'S' NUMBER zcx_error->msgno WITH zcx_error->msgv1 zcx_error->msgv2 zcx_error->msgv3 zcx_error->msgv4
*            INTO e_mensagem.
*      RETURN.
*      ENDTRY.

*      SELECT SINGLE * INTO @wa_carga
*        FROM zsdt0001cg
*       WHERE id_carga EQ @wa_romaneio_saida-id_carga.
*
*      e_peso_carga = wa_carga-nm_peso_subtotal.
*
*      IF e_peso_carga NE e_peso_romaneios.
*        e_mensagem = 'Peso da Carga: ' && e_peso_carga && ' diferente do peso total dos romaneios: ' && e_peso_romaneios.
*        RETURN.
*      ENDIF.
*-US 141899-04.06.2024-#141899-JT-fim
    ENDIF.

    LOOP AT E_ROMANEIOS ASSIGNING FIELD-SYMBOL(<FS_ROMANEIO>).
      READ TABLE IT_ROMANEIOS_SAIDA WITH KEY CH_REFERENCIA_SAI = <FS_ROMANEIO>-CH_REFERENCIA BINARY SEARCH INTO WA_ROMANEIOS_SAIDA.
      IF SY-SUBRC IS INITIAL.
        <FS_ROMANEIO>-PESO_BRUTO    = WA_ROMANEIOS_SAIDA-NM_PESO_BRUTO.
        <FS_ROMANEIO>-PESO_TARA     = WA_ROMANEIOS_SAIDA-NM_PESO_TARA.
        <FS_ROMANEIO>-PESO_SUBTOTAL = WA_ROMANEIOS_SAIDA-NM_PESO_SUBTOTAL.
      ENDIF.
    ENDLOOP.

    SORT E_ROMANEIOS BY NR_ROMANEIO.
    LOOP AT E_ROMANEIOS INTO DATA(_WL_ROM_FATURAR) WHERE ID_CLI_DEST = V_ID_CLI_DEST.
      E_CHV_FATURAR = _WL_ROM_FATURAR-CH_REFERENCIA.
      EXIT.
    ENDLOOP.

    CHECK I_SOMENTE_CHV_FATURAR EQ ABAP_FALSE.

    SELECT SINGLE * INTO @DATA(WA_TESTE)
      FROM ZWAT0003.

    CHECK SY-SUBRC IS INITIAL.

    "Novo Metodo Faturamento
    SELECT SINGLE *
      FROM SETLEAF INTO @DATA(LWA_ZLES0136_API)
     WHERE SETNAME EQ 'ZLES0136_CONFIG'
       AND VALFROM EQ 'ACTIVE_API_0002'.

    IF SY-SUBRC EQ 0.

      CREATE OBJECT LOB_WEB_SERVICE.

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~AUTENTICA_OPUS         = ABAP_TRUE.
      LOB_WEB_SERVICE->ZIF_WEBSERVICE~CK_USA_AUTH_WEBSERVICE = ABAP_TRUE.
      LOB_WEB_SERVICE->ZIF_WEBSERVICE~NM_AUTH_WEBSERVICE     = 'OPUS_CONSULTA_ROMANEIO_SAIDA_DESMEMB'.

      TRY.
          DATA(LOB_HTTP) = LOB_WEB_SERVICE->URL( I_ADD_URL = CONV #( I_CH_REFERENCIA_SAI ) ).      "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
          DATA(LOB_URI)  = LOB_WEB_SERVICE->GET_URI(  ).
        CATCH ZCX_WEBSERVICE INTO DATA(LC_EXCEPTION).
          E_MENSAGEM = 'Serviço OPUS_CONSULTA_ROMANEIO_SAIDA_DESMEMB não parametrizado!'.
          RETURN.
      ENDTRY.

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = LOB_HTTP ).

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~CONSULTAR(
        EXPORTING
          I_HTTP                     = LOB_HTTP
        IMPORTING
          E_CODE                     = DATA(LVA_CODE)
          E_REASON                   = DATA(LVA_REASON)
        RECEIVING
          E_RESULTADO                = DATA(LVA_JSON_RETORNO)
        EXCEPTIONS
          HTTP_COMMUNICATION_FAILURE = 1
          HTTP_INVALID_STATE         = 2
          HTTP_PROCESSING_FAILED     = 3
          HTTP_INVALID_TIMEOUT       = 4
          OTHERS                     = 5
      ).

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO E_MENSAGEM.
        RETURN.
      ENDIF.

      IF ( LVA_CODE NE 200 ) OR ( LVA_JSON_RETORNO IS INITIAL ).
        CONCATENATE 'Não foi possivel consultar o romaneio chave:' I_CH_REFERENCIA_SAI 'no OPUS!' INTO E_MENSAGEM SEPARATED BY SPACE.
        RETURN.
      ENDIF.

      CALL METHOD /UI2/CL_JSON=>DESERIALIZE
        EXPORTING
          JSON = LVA_JSON_RETORNO
        CHANGING
          DATA = LIT_ROMANEIOS_OPUS.

      DELETE LIT_ROMANEIOS_OPUS WHERE TIPOSTATUS EQ 'CA'.

      IF LIT_ROMANEIOS_OPUS[] IS INITIAL.
        CONCATENATE 'Romaneio saida chave:' I_CH_REFERENCIA_SAI 'não encontrado no OPUS!' INTO E_MENSAGEM SEPARATED BY SPACE.
        RETURN.
      ENDIF.

      LOOP AT IT_ZSDT0001 INTO DATA(LWA_ZSDT0001).
        READ TABLE LIT_ROMANEIOS_OPUS INTO DATA(LWA_ROMANEIO_OPUS_API) WITH KEY IDSEQPLAROMANEIOS = LWA_ZSDT0001-CH_REFERENCIA.
        CHECK SY-SUBRC EQ 0.

        UPDATE ZSDT0001 SET PESO_LIQ_COMERCIAL = LWA_ROMANEIO_OPUS_API-NRPESOLIQUIDOCOMERCIAL
                            PESO_SUBTOTAL      = LWA_ROMANEIO_OPUS_API-NUMEROPESOSUBTOTAL
                            PESO_TARA          = LWA_ROMANEIO_OPUS_API-NUMEROPESOTARA
         WHERE CH_REFERENCIA EQ LWA_ROMANEIO_OPUS_API-IDSEQPLAROMANEIOS.
      ENDLOOP.

      LC_NM_PESO_SUBTOTAL_API  = 0.
      LC_NM_QTD_EMBALAGENS_API = 0.

      IF LIT_ROMANEIOS_OPUS[] IS NOT INITIAL.

        DATA(_SINCRONIZAR_ROMANEIOS) = ABAP_FALSE.

        LOOP AT LIT_ROMANEIOS_OPUS INTO DATA(LWA_ROMANEIOS_API).
          ADD LWA_ROMANEIOS_API-NUMEROPESOSUBTOTAL  TO LC_NM_PESO_SUBTOTAL_API.
          ADD LWA_ROMANEIOS_API-NMQTDEMBALAGENS     TO LC_NM_QTD_EMBALAGENS_API.
        ENDLOOP.

        IF LINES( LIT_ROMANEIOS_OPUS[] ) NE ( LINES( E_ROMANEIOS[] ) ).
          _SINCRONIZAR_ROMANEIOS = ABAP_TRUE.
        ENDIF.

        IF E_PESO_ROMANEIOS NE LC_NM_PESO_SUBTOTAL_API.
          _SINCRONIZAR_ROMANEIOS = ABAP_TRUE.
          "E_MENSAGEM = 'Peso da Carga: ' && E_PESO_ROMANEIOS && ' diferente do peso total dos romaneios no OPUS: ' && LC_NM_PESO_SUBTOTAL_API.
          "RETURN.
        ENDIF.

        IF E_QTD_EMBALAGENS NE LC_NM_QTD_EMBALAGENS_API.
          _SINCRONIZAR_ROMANEIOS = ABAP_TRUE.
          "E_MENSAGEM = 'Qtd de Volumes: ' && E_QTD_EMBALAGENS && ' diferente dos romaneios no OPUS: ' && LC_NM_QTD_EMBALAGENS_API.
          "RETURN.
        ENDIF.

        IF _SINCRONIZAR_ROMANEIOS EQ ABAP_TRUE.
          LOOP AT LIT_ROMANEIOS_OPUS INTO DATA(LWA_ROMANEIO_OPUS) .
            TRY .
                ZCL_ROMANEIO=>SET_FORCAR_REENVIO_OPUS_TO_SAP( I_CH_REFERENCIA_SAI = CONV #( LWA_ROMANEIO_OPUS-IDSEQPLAROMANEIOS ) ).
              CATCH ZCX_ERROR INTO DATA(ZCX_ERROR).
*-US 141899-04.06.2024-#141899-JT-inicio
                ZCL_ROMANEIO=>SET_MENSAGEM_OPUS( EXPORTING I_CH_REFERENCIA     = I_CH_REFERENCIA_SAI
                                                           I_FATURAMENTO_AUTOM = VG_FATURAMENTO_AUTOM
                                                 IMPORTING E_MENSAGEM          = E_MENSAGEM ).
*               MESSAGE ID zcx_error->msgid TYPE 'S' NUMBER zcx_error->msgno WITH zcx_error->msgv1 zcx_error->msgv2 zcx_error->msgv3 zcx_error->msgv4
*                  INTO e_mensagem.
*-US 141899-04.06.2024-#141899-JT-fim
                RETURN.
            ENDTRY.
          ENDLOOP.
          E_MENSAGEM = 'Dados adicionais do romaneio não integrados no SAP pelo OPUS.' &&
                       'Realizar a ação de Alterar e Gravar no OPUS. ' &&
                       'Caso o problema persista abrir IR para suporte OPUS.'.
*                      'Romaneio(s) em sincronização! Favor aguardar um momento e tentar novamente!'.
          RETURN.
        ENDIF.

      ENDIF.

      E_FATURAR = ABAP_TRUE.

      RETURN.

    ENDIF.
    "Novo Metodo Faturamento


    TRY .

        DATA(I_SQL) =
        'SELECT S.ID_SEQ_PLA_ROMANEIOS, NVL(S.NR_PESO_SUB_TOTAL,0) AS NR_PESO_SUB_TOTAL, S.TP_STATUS, NVL(S.NR_PESO_LIQUIDO_COMERCIAL,s.nr_peso_liquido_comercial) AS NR_PESO_LIQUIDO_COMERCIAL, ' &&
        '       NVL((SELECT SUM( MS.NR_QTD_EMBALAGEM_PRODUTO ) FROM OPUS.MR_ROMANEIO_EMBALAGEM_PROD MS WHERE MS.ID_ROMANEIO_SAIDA = S.ID_ROMANEIO_SAIDA ),0) AS NM_QTD_EMBALAGENS ' &&
        '  FROM OPUS.MR_ROMANEIO_SAIDA S ' &&
        ' WHERE S.ID_SEQ_PLA_ROMANEIOS = ' && I_CH_REFERENCIA_SAI &&
        ' UNION ' &&
        ' SELECT S2.ID_SEQ_PLA_ROMANEIOS, NVL(S2.NR_PESO_SUB_TOTAL,0) AS NR_PESO_SUB_TOTAL, S2.TP_STATUS, NVL(S2.NR_PESO_LIQUIDO_COMERCIAL,s.nr_peso_liquido_comercial) AS NR_PESO_LIQUIDO_COMERCIAL, ' &&
        '       NVL((SELECT SUM( MS.NR_QTD_EMBALAGEM_PRODUTO ) FROM OPUS.MR_ROMANEIO_EMBALAGEM_PROD MS WHERE MS.ID_ROMANEIO_SAIDA = S2.ID_ROMANEIO_SAIDA ),0) AS NM_QTD_EMBALAGENS ' &&
        '  FROM OPUS.MR_ROMANEIO_SAIDA S, ' &&
        '       OPUS.MR_ROMANEIO_SAIDA S2 ' &&
        ' WHERE S.ID_SEQ_PLA_ROMANEIOS    = ' && I_CH_REFERENCIA_SAI &&
        '   AND S.ID_ROMANEIO_DESMEMBRADO = S2.ID_ROMANEIO_SAIDA ' &&
        ' UNION ' &&
        ' SELECT S3.ID_SEQ_PLA_ROMANEIOS, NVL(S3.NR_PESO_SUB_TOTAL,0) AS NR_PESO_SUB_TOTAL, S3.TP_STATUS, NVL(S3.NR_PESO_LIQUIDO_COMERCIAL,s.nr_peso_liquido_comercial) AS NR_PESO_LIQUIDO_COMERCIAL, ' &&
        '       NVL((SELECT SUM( MS.NR_QTD_EMBALAGEM_PRODUTO ) FROM OPUS.MR_ROMANEIO_EMBALAGEM_PROD MS WHERE MS.ID_ROMANEIO_SAIDA = S3.ID_ROMANEIO_SAIDA ),0) AS NM_QTD_EMBALAGENS ' &&
        '  FROM OPUS.MR_ROMANEIO_SAIDA S, ' &&
        '       OPUS.MR_ROMANEIO_SAIDA S2, ' &&
        '       OPUS.MR_ROMANEIO_SAIDA S3 ' &&
        ' WHERE S.ID_SEQ_PLA_ROMANEIOS    = ' && I_CH_REFERENCIA_SAI &&
        '   AND S.ID_ROMANEIO_DESMEMBRADO = S2.ID_ROMANEIO_SAIDA ' &&
        '   AND S2.ID_ROMANEIO_SAIDA      = S3.ID_ROMANEIO_DESMEMBRADO ' &&
        ' UNION ' &&
        ' SELECT S2.ID_SEQ_PLA_ROMANEIOS, NVL(S2.NR_PESO_SUB_TOTAL,0) AS NR_PESO_SUB_TOTAL, S2.TP_STATUS, NVL(S2.NR_PESO_LIQUIDO_COMERCIAL,s.nr_peso_liquido_comercial) AS NR_PESO_LIQUIDO_COMERCIAL, ' &&
        '       NVL((SELECT SUM( MS.NR_QTD_EMBALAGEM_PRODUTO ) FROM OPUS.MR_ROMANEIO_EMBALAGEM_PROD MS WHERE MS.ID_ROMANEIO_SAIDA = S2.ID_ROMANEIO_SAIDA ),0) AS NM_QTD_EMBALAGENS ' &&
        '  FROM OPUS.MR_ROMANEIO_SAIDA S, ' &&
        '       OPUS.MR_ROMANEIO_SAIDA S2 ' &&
        ' WHERE S.ID_SEQ_PLA_ROMANEIOS   = ' && I_CH_REFERENCIA_SAI &&
        '   AND S.ID_ROMANEIO_SAIDA      = S2.ID_ROMANEIO_DESMEMBRADO ' .

        ZCL_SQL_API_PYTHON=>ZIF_SQL_API_PYTHON~GET_INSTANCE( )->EXEC_SQL( EXPORTING I_SQL = I_SQL IMPORTING E_DATA = IT_ROMANEIOS_OPUS ).

        DELETE IT_ROMANEIOS_OPUS WHERE TP_STATUS EQ 'CA'.

        " VERIFICA SE VEIO O ROMANEIO DE SAIDA NA API
        IF IT_ROMANEIOS_OPUS[] IS NOT INITIAL .

          LOOP AT IT_ZSDT0001 INTO DATA(W_ZSDT0001).

            READ TABLE IT_ROMANEIOS_OPUS INTO DATA(WA_ROMANEIO_OPUS_API) WITH KEY ID_SEQ_PLA_ROMANEIOS = W_ZSDT0001-CH_REFERENCIA.

            " VERIFICA SE O SUBTOTAL QUE ESTÁ NA TABELA 0001 ESTÁ DIFERENTO DO QUE A DO OPUS SE SIM ATUALIZA.
*           IF WA_ROMANEIO_OPUS_API-NR_PESO_SUB_TOTAL <> W_ZSDT0001-PESO_SUBTOTAL.
*
*              UPDATE ZSDT0001
*                SET  PESO_LIQ = WA_ROMANEIO_OPUS_API-NR_PESO_SUB_TOTAL
*                     PESO_LIQ_COMERCIAL = WA_ROMANEIO_OPUS_API-NR_PESO_LIQUIDO_COMERCIAL
*              WHERE CH_REFERENCIA = WA_ROMANEIO_OPUS_API-ID_SEQ_PLA_ROMANEIOS.
*
*            ELSE.

            UPDATE ZSDT0001
              SET  PESO_LIQ_COMERCIAL = WA_ROMANEIO_OPUS_API-NR_PESO_LIQUIDO_COMERCIAL
            WHERE CH_REFERENCIA = WA_ROMANEIO_OPUS_API-ID_SEQ_PLA_ROMANEIOS.

*           ENDIF.

          ENDLOOP.
        ELSE.
          E_MENSAGEM = 'Romaneio não encontrado no OPUS '.
          RETURN.
        ENDIF.

      CATCH ZCX_SQL_API_PYTHON INTO DATA(ERRO_PYTHON).    "
        ERRO_PYTHON->ZIF_ERROR~PUBLISHED_ERRO( EXPORTING I_MSGTY = 'I'  I_MSGTY_DISPLAY = 'E' ).
        RETURN.
      CATCH ZCX_ERROR INTO DATA(ERRO_GERAL).
        ERRO_GERAL->ZIF_ERROR~PUBLISHED_ERRO( EXPORTING I_MSGTY = 'I'  I_MSGTY_DISPLAY = 'E' ).
        RETURN.
    ENDTRY.

    LC_NM_PESO_SUBTOTAL_API  = 0.
    LC_NM_QTD_EMBALAGENS_API = 0.

    IF IT_ROMANEIOS_OPUS[] IS NOT INITIAL.
      LOOP AT IT_ROMANEIOS_OPUS INTO DATA(WA_ROMANEIOS_API).
        ADD WA_ROMANEIOS_API-NR_PESO_SUB_TOTAL TO LC_NM_PESO_SUBTOTAL_API.
        ADD WA_ROMANEIOS_API-NM_QTD_EMBALAGENS TO LC_NM_QTD_EMBALAGENS_API.
      ENDLOOP.

      IF LINES( IT_ROMANEIOS_OPUS[] ) NE ( LINES( E_ROMANEIOS[] ) ).
        LOOP AT IT_ROMANEIOS_OPUS INTO DATA(WA_ROMANEIO_OPUS) .
          "READ TABLE E_ROMANEIOS WITH KEY CH_REFERENCIA = WA_ROMANEIO_OPUS-ID_SEQ_PLA_ROMANEIOS TRANSPORTING NO FIELDS.
          "IF SY-SUBRC NE 0.
          ZCL_ROMANEIO=>SET_FORCAR_REENVIO_OPUS_TO_SAP( I_CH_REFERENCIA_SAI = WA_ROMANEIO_OPUS-ID_SEQ_PLA_ROMANEIOS ).
          "E_MENSAGEM = 'Romaneio Desmembrado em sincronização! Favor aguardar um momento e tentar novamente!'.
          "RETURN.
          "ENDIF.
        ENDLOOP.
        E_MENSAGEM = 'Dados adicionais do romaneio não integrados no SAP pelo OPUS.' &&
                     'Realizar a ação de Alterar e Gravar no OPUS. ' &&
                     'Caso o problema persista abrir IR para suporte OPUS.'.
*         e_mensagem = 'Romaneio Desmembrado em sincronização! Favor aguardar um momento e tentar novamente!'.
        RETURN.
      ENDIF.

      IF E_PESO_ROMANEIOS NE LC_NM_PESO_SUBTOTAL_API.
        E_MENSAGEM = 'Peso da Carga: ' && E_PESO_ROMANEIOS && ' diferente do peso total dos romaneios no OPUS: ' && LC_NM_PESO_SUBTOTAL_API.
        RETURN.
      ENDIF.

      IF E_QTD_EMBALAGENS NE LC_NM_QTD_EMBALAGENS_API.
        E_MENSAGEM = 'Qtd de Volumes: ' && E_QTD_EMBALAGENS && ' diferente dos romaneios no OPUS: ' && LC_NM_QTD_EMBALAGENS_API.
        RETURN.
      ENDIF.

    ENDIF.

    E_FATURAR = ABAP_TRUE.

  ENDMETHOD.


  METHOD GET_CK_ROM_FINAL.

    TYPES: BEGIN OF TY_TVRO,
             DIAS   TYPE TRAZT,
             ROUTE  TYPE TVRO-ROUTE,
             TRAZTD TYPE TVRO-TRAZTD,
           END OF TY_TVRO.

    DATA: T_VTTK      TYPE TABLE OF VTTK,
          T_TVRO      TYPE TABLE OF TY_TVRO,
          V_DIAS      TYPE C LENGTH 100,
          V_TRAZTD    TYPE C LENGTH 100,
          V_DIAS_MAX  TYPE TRAZT,
          T_ROMANEIOS TYPE ZSDT0001_T.

    CLEAR: E_ROM_FINAL, T_ROMANEIOS[].

    CHECK ( I_CHV_ROM_CARGA IS NOT INITIAL ).

    CALL METHOD ZCL_ROMANEIO=>GET_CK_FATURAR
      EXPORTING
        I_CH_REFERENCIA_SAI = I_CHV_ROM_CARGA
      IMPORTING
        E_ROMANEIOS         = T_ROMANEIOS.

    DELETE T_ROMANEIOS WHERE DOC_TRANSP IS INITIAL.

    CHECK T_ROMANEIOS[] IS NOT INITIAL.

    LOOP AT T_ROMANEIOS ASSIGNING FIELD-SYMBOL(<FS_ROM>).
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = <FS_ROM>-DOC_TRANSP
        IMPORTING
          OUTPUT = <FS_ROM>-DOC_TRANSP.
    ENDLOOP.

    IF LINES( T_ROMANEIOS[] ) EQ 1.
      LOOP AT T_ROMANEIOS INTO DATA(_WL_ROM).
        E_ROM_FINAL = _WL_ROM.
      ENDLOOP.
      RETURN.
    ENDIF.

    SELECT *
      FROM VTTK INTO TABLE T_VTTK
       FOR ALL ENTRIES IN T_ROMANEIOS
     WHERE TKNUM EQ T_ROMANEIOS-DOC_TRANSP.

    CHECK T_VTTK[] IS NOT INITIAL.

    SELECT *
      FROM TVRO INTO CORRESPONDING FIELDS OF TABLE T_TVRO
       FOR ALL ENTRIES IN T_VTTK
     WHERE ROUTE EQ T_VTTK-ROUTE.

    LOOP AT T_TVRO ASSIGNING FIELD-SYMBOL(<FS_TVRO>).
      CLEAR: <FS_TVRO>-DIAS, V_DIAS.

      CHECK <FS_TVRO>-TRAZTD IS NOT INITIAL.

      V_TRAZTD = <FS_TVRO>-TRAZTD.

      REPLACE ALL OCCURRENCES OF '.' IN V_TRAZTD WITH ''.
      CONDENSE V_TRAZTD NO-GAPS.

      CALL FUNCTION 'CONVERSION_EXIT_TSTRG_OUTPUT'
        EXPORTING
          INPUT  = V_TRAZTD
        IMPORTING
          OUTPUT = V_DIAS.

      REPLACE ALL OCCURRENCES OF ',' IN V_DIAS WITH '.'.
      CONDENSE V_DIAS NO-GAPS.

      <FS_TVRO>-DIAS = V_DIAS.
    ENDLOOP.

    CLEAR: V_DIAS_MAX.
    LOOP AT T_ROMANEIOS INTO _WL_ROM.
      READ TABLE T_VTTK INTO DATA(_WL_VTTK) WITH KEY TKNUM = _WL_ROM-DOC_TRANSP.
      CHECK SY-SUBRC EQ 0.

      READ TABLE T_TVRO INTO DATA(_WL_TRVRO) WITH KEY ROUTE = _WL_VTTK-ROUTE.
      CHECK SY-SUBRC EQ 0.

      IF _WL_TRVRO-DIAS > V_DIAS_MAX.
        E_ROM_FINAL = _WL_ROM.
        V_DIAS_MAX  = _WL_TRVRO-DIAS.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD GET_COMMIT.

    DATA: NOT_COMMIT   TYPE CHAR1.

    IMPORT NOT_COMMIT TO ME->ST_NOT_COMMIT FROM MEMORY ID 'ZCL_ROMANEIO_COMMIT'.

    E_NOT_COMMIT = ME->ST_NOT_COMMIT.

    FREE MEMORY ID 'ZCL_ROMANEIO_COMMIT'.

  ENDMETHOD.


  METHOD GET_CONSULTA_STATUS_OPUS.

    R_ROMANEIO = ME.

    CLEAR: E_STATUS,
           E_BLOQUEADO,
           E_MENSAGEM_BLOQUEIO.

    TRY .

        ZCL_API_OPUS=>GET_STATUS_ROMANEIO(
          EXPORTING
            I_TP_MOVIMENTO      = CONV #( ROMANEIO-TP_MOVIMENTO )
            I_NR_SAFRA          = CONV #( ROMANEIO-NR_SAFRA )
            I_BRANCH            = CONV #( ROMANEIO-BRANCH )
            I_NR_ROMANEIO       = CONV #( ROMANEIO-NR_ROMANEIO )
          IMPORTING
            E_URL               = DATA(E_URL)
            E_CODE              = DATA(E_CODE)
            E_REASON            = DATA(E_REASON)
            E_STATUS            = E_STATUS
            E_BLOQUEADO         = E_BLOQUEADO
            E_MENSAGEM_BLOQUEIO = E_MENSAGEM_BLOQUEIO
          RECEIVING
            R_RESULTADO         = DATA(R_RESULTADO) ).

      CATCH ZCX_ERROR INTO DATA(EX_ERROR).    "

        RAISE EXCEPTION TYPE ZCX_ROMANEIO
          EXPORTING
            TEXTID = VALUE #( MSGID = EX_ERROR->MSGID
                              MSGNO = EX_ERROR->MSGNO
                              ATTR1 = EX_ERROR->MSGV1
                              ATTR2 = EX_ERROR->MSGV2
                              ATTR3 = EX_ERROR->MSGV3
                              ATTR4 = EX_ERROR->MSGV4 )
            MSGID  = EX_ERROR->MSGID
            MSGNO  = EX_ERROR->MSGNO
            MSGTY  = 'E'
            MSGV1  = EX_ERROR->MSGV1
            MSGV2  = EX_ERROR->MSGV2
            MSGV3  = EX_ERROR->MSGV3
            MSGV4  = EX_ERROR->MSGV4.

    ENDTRY.

  ENDMETHOD.


  METHOD GET_IMPRESSORAS_FILIAL.
    ZCL_ROMANEIO=>GET_IMPRESSORAS_FILIAL_( EXPORTING I_FILIAL = ME->ROMANEIO-BRANCH IMPORTING  E_IDIMPRESSORA = E_IDIMPRESSORA ).
  ENDMETHOD.


  METHOD GET_IMPRESSORAS_FILIAL_.

    DATA: OB_WEB_SERVICE TYPE REF TO ZCL_WEBSERVICE,
          PDF_DATA       TYPE XSTRING.

    DATA(JSON_ENTRADA) = '{' &&
                            '"centro" : "' && I_FILIAL && '" ' &&
                         '}'.

    "IR - Integração OPUS - Impressoras
    CREATE OBJECT OB_WEB_SERVICE.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~AUTENTICA_OPUS = ABAP_TRUE.

    TRY .
        OB_WEB_SERVICE->SET_SERVICO( I_SERVICO = 'IM' ).
        OB_WEB_SERVICE->SET_TIPO( I_TIPO = 'O' ).
        DATA(I_CLIENTE) = OB_WEB_SERVICE->URL( ). "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
      CATCH ZCX_WEBSERVICE INTO DATA(LC_EXCEPTION).
        CLEAR: OB_WEB_SERVICE.
        DATA(LC_MSG) = LC_EXCEPTION->GET_LONGTEXT( ).
        ZCL_ROMANEIO=>GERA_ERRO_GERAL( I_TEXTO = LC_MSG ).
    ENDTRY.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = I_CLIENTE ).

    OB_WEB_SERVICE->ZIF_WEBSERVICE~CONSULTAR(
      EXPORTING
        I_HTTP                     = I_CLIENTE
        I_XML                      = JSON_ENTRADA
      RECEIVING
        E_RESULTADO                = DATA(JSON_RETORNO)
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3
        HTTP_INVALID_TIMEOUT       = 4
        OTHERS                     = 5
    ).

    IF SY-SUBRC <> 0.
      RAISE EXCEPTION TYPE ZCX_ROMANEIO
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGTY  = 'E'
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    CLEAR: OB_WEB_SERVICE.

    CHECK JSON_RETORNO IS NOT INITIAL.

    DATA: LISTA TYPE ZDE_OPUS_IMPRESSORA_T.

    CALL METHOD /UI2/CL_JSON=>DESERIALIZE
      EXPORTING
        JSON = JSON_RETORNO
      CHANGING
        DATA = LISTA.

    IF LISTA IS NOT INITIAL.
      DATA: E_INDEX TYPE  LVC_INDEX.

      CALL FUNCTION 'ZALV_SEL_LINHA_TABLE_INTERNA'
        EXPORTING
          I_STRUCTURE_NAME = 'ZDE_OPUS_IMPRESSORA'
          I_TITLE          = 'Selecione a Impressora'
          IT_OUTTAB        = LISTA[]
        IMPORTING
          E_INDEX          = E_INDEX.

      IF E_INDEX IS NOT INITIAL.
        READ TABLE LISTA INTO DATA(WA_LISTA) INDEX E_INDEX.
        IF SY-SUBRC IS INITIAL.
          E_IDIMPRESSORA = WA_LISTA-IP.
        ENDIF.
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD GET_INSTANCE.

    IF ZCL_ROMANEIO=>AT_ROMANEIO IS NOT BOUND.
      CREATE OBJECT ZCL_ROMANEIO=>AT_ROMANEIO.
    ENDIF.

    R_ROMANEIO = ZCL_ROMANEIO=>AT_ROMANEIO.

  ENDMETHOD.


  METHOD GET_ITENS.

    MOVE ME->ITENS[] TO R_ITENS[].

  ENDMETHOD.


  METHOD GET_PESO_SUBTOTAL.

    DATA: LIT_ROMANEIOS_OPUS TYPE ZDE_ROMANEIO_JSON_001_T.
    DATA: LOB_WEB_SERVICE    TYPE REF TO ZCL_WEBSERVICE.
    DATA: LVA_MSG_ERROR TYPE C LENGTH 200.

    CLEAR: R_PESO_SUBTOTAL.

    SELECT SINGLE *
      FROM SETLEAF INTO @DATA(LWA_ZLES0136_API)
     WHERE SETNAME EQ 'ZLES0136_CONFIG'
       AND VALFROM EQ 'ACTIVE_API_0005'.

    IF SY-SUBRC EQ 0.

      IF ROMANEIO-PESO_SUBTOTAL IS NOT INITIAL.
        R_PESO_SUBTOTAL = ROMANEIO-PESO_SUBTOTAL.
        RETURN.
      ENDIF.

      SELECT SINGLE * INTO @DATA(WA_ROMANEIO_SAP)
        FROM ZSDT0001OVRO
       WHERE CH_REFERENCIA_SAI EQ @ME->ROMANEIO-CH_REFERENCIA.

      IF SY-SUBRC IS INITIAL.
        ROMANEIO-PESO_SUBTOTAL = WA_ROMANEIO_SAP-NM_PESO_SUBTOTAL.
        R_PESO_SUBTOTAL        = ROMANEIO-PESO_SUBTOTAL.
        RETURN.
      ENDIF.

      CREATE OBJECT LOB_WEB_SERVICE.

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~AUTENTICA_OPUS         = ABAP_TRUE.
      LOB_WEB_SERVICE->ZIF_WEBSERVICE~CK_USA_AUTH_WEBSERVICE = ABAP_TRUE.
      LOB_WEB_SERVICE->ZIF_WEBSERVICE~NM_AUTH_WEBSERVICE     = 'OPUS_CONSULTA_ROMANEIO_SAIDA_ENTRADA'.

      TRY.
          DATA(LOB_HTTP) = LOB_WEB_SERVICE->URL( I_ADD_URL = CONV #( ME->ROMANEIO-CH_REFERENCIA ) ).      "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
          DATA(LOB_URI)  = LOB_WEB_SERVICE->GET_URI(  ).
        CATCH ZCX_WEBSERVICE INTO DATA(LC_EXCEPTION).
          LVA_MSG_ERROR = 'Serviço OPUS_CONSULTA_ROMANEIO_SAIDA_ENTRADA não parametrizado!'.
          ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = CONV #( LVA_MSG_ERROR ) ).
      ENDTRY.

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = LOB_HTTP ).

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~CONSULTAR(
        EXPORTING
          I_HTTP                     = LOB_HTTP
        IMPORTING
          E_CODE                     = DATA(LVA_CODE)
          E_REASON                   = DATA(LVA_REASON)
        RECEIVING
          E_RESULTADO                = DATA(LVA_JSON_RETORNO)
        EXCEPTIONS
          HTTP_COMMUNICATION_FAILURE = 1
          HTTP_INVALID_STATE         = 2
          HTTP_PROCESSING_FAILED     = 3
          HTTP_INVALID_TIMEOUT       = 4
          OTHERS                     = 5
      ).

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO LVA_MSG_ERROR.
        ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = CONV #( LVA_MSG_ERROR ) ).
      ENDIF.

      IF ( LVA_CODE NE 200 ) OR ( LVA_JSON_RETORNO IS INITIAL ).
        CONCATENATE 'Não foi possivel consultar o romaneio chave:' ME->ROMANEIO-CH_REFERENCIA 'no OPUS!' INTO LVA_MSG_ERROR SEPARATED BY SPACE.
        ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = CONV #( LVA_MSG_ERROR ) ).
      ENDIF.

      CALL METHOD /UI2/CL_JSON=>DESERIALIZE
        EXPORTING
          JSON = LVA_JSON_RETORNO
        CHANGING
          DATA = LIT_ROMANEIOS_OPUS.

      IF LIT_ROMANEIOS_OPUS[] IS INITIAL.
        CONCATENATE 'Romaneio chave:' ME->ROMANEIO-CH_REFERENCIA 'não encontrado no OPUS!' INTO LVA_MSG_ERROR SEPARATED BY SPACE.
        ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = CONV #( LVA_MSG_ERROR ) ).
      ENDIF.

      LOOP AT LIT_ROMANEIOS_OPUS INTO DATA(LWA_ROMANEIO).
        ROMANEIO-PESO_SUBTOTAL = LWA_ROMANEIO-NUMEROPESOSUBTOTAL.
      ENDLOOP.

      R_PESO_SUBTOTAL = ROMANEIO-PESO_SUBTOTAL.

      RETURN.
    ENDIF.

    "Fim novo Metodo Consulta ---------------------------------------------------------------------------------------------------

    TYPES BEGIN OF TY_ROMANEIO.
    TYPES: NR_PESO_SUB_TOTAL TYPE ZDE_NM_PESO_TARA.
    TYPES END OF TY_ROMANEIO.

    DATA: V_ID_CLI_DEST     TYPE ZSDT0001-ID_CLI_DEST,
          IT_ROMANEIOS_OPUS TYPE TABLE OF TY_ROMANEIO.

    IF ROMANEIO-PESO_SUBTOTAL IS INITIAL.

      SELECT SINGLE * INTO @DATA(WA_ROMANEIO)
        FROM ZSDT0001OVRO
       WHERE CH_REFERENCIA_SAI EQ @ME->ROMANEIO-CH_REFERENCIA.

      IF SY-SUBRC IS INITIAL.
        ROMANEIO-PESO_SUBTOTAL = WA_ROMANEIO-NM_PESO_SUBTOTAL.
      ELSE.

        SELECT SINGLE * INTO @DATA(WA_TESTE)
          FROM ZWAT0003.

        IF SY-SUBRC IS INITIAL.
          DATA(LC_USA_API) = ABAP_TRUE.
        ELSE.
          LC_USA_API = ABAP_FALSE.
        ENDIF.

        IF LC_USA_API NE ABAP_TRUE.

          TRY .
              DATA(I_SQL) = 'SELECT AA.NR_PESO_SUB_TOTAL FROM OPUS.MR_ROMANEIO_SAIDA AA WHERE AA.ID_SEQ_PLA_ROMANEIOS = ' && ME->ROMANEIO-CH_REFERENCIA.

              ZCL_SQL_API_PYTHON=>ZIF_SQL_API_PYTHON~GET_INSTANCE(
                )->EXEC_SQL( EXPORTING I_SQL = I_SQL IMPORTING E_DATA = IT_ROMANEIOS_OPUS
                ).

              READ TABLE IT_ROMANEIOS_OPUS INDEX 1 INTO DATA(WA_RESULT_API).
              IF SY-SUBRC IS INITIAL.
                ROMANEIO-PESO_SUBTOTAL = WA_RESULT_API-NR_PESO_SUB_TOTAL.
              ENDIF.

            CATCH ZCX_SQL_API_PYTHON INTO DATA(ERRO_PYTHON).    "
              ERRO_PYTHON->ZIF_ERROR~PUBLISHED_ERRO( EXPORTING I_MSGTY = 'I'  I_MSGTY_DISPLAY = 'E' ).
            CATCH ZCX_ERROR INTO DATA(ERRO_GERAL).
              ERRO_GERAL->ZIF_ERROR~PUBLISHED_ERRO( EXPORTING I_MSGTY = 'I'  I_MSGTY_DISPLAY = 'E' ).
          ENDTRY.
        ENDIF.
      ENDIF.
    ENDIF.

    R_PESO_SUBTOTAL = ROMANEIO-PESO_SUBTOTAL.

  ENDMETHOD.


  METHOD GET_PESO_TARA.

    DATA: LIT_ROMANEIOS_OPUS TYPE ZDE_ROMANEIO_JSON_001_T.
    DATA: LOB_WEB_SERVICE    TYPE REF TO ZCL_WEBSERVICE.
    DATA: LVA_MSG_ERROR TYPE C LENGTH 200.

    CLEAR: R_PESO_TARA.

    SELECT SINGLE *
      FROM SETLEAF INTO @DATA(LWA_ZLES0136_API)
     WHERE SETNAME EQ 'ZLES0136_CONFIG'
       AND VALFROM EQ 'ACTIVE_API_0004'.

    IF SY-SUBRC EQ 0.

      IF ROMANEIO-PESO_TARA IS NOT INITIAL.
        R_PESO_TARA = ROMANEIO-PESO_TARA.
        RETURN.
      ENDIF.

      SELECT SINGLE * INTO @DATA(WA_ROMANEIO_SAP)
        FROM ZSDT0001OVRO
       WHERE CH_REFERENCIA_SAI EQ @ME->ROMANEIO-CH_REFERENCIA.

      IF SY-SUBRC IS INITIAL.
        ROMANEIO-PESO_TARA = WA_ROMANEIO_SAP-NM_PESO_TARA.
        R_PESO_TARA        = ROMANEIO-PESO_TARA.
        RETURN.
      ENDIF.

      CREATE OBJECT LOB_WEB_SERVICE.

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~AUTENTICA_OPUS         = ABAP_TRUE.
      LOB_WEB_SERVICE->ZIF_WEBSERVICE~CK_USA_AUTH_WEBSERVICE = ABAP_TRUE.
      LOB_WEB_SERVICE->ZIF_WEBSERVICE~NM_AUTH_WEBSERVICE     = 'OPUS_CONSULTA_ROMANEIO_SAIDA_ENTRADA'.

      TRY.
          DATA(LOB_HTTP) = LOB_WEB_SERVICE->URL( I_ADD_URL = CONV #( ME->ROMANEIO-CH_REFERENCIA ) ).      "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
          DATA(LOB_URI)  = LOB_WEB_SERVICE->GET_URI(  ).
        CATCH ZCX_WEBSERVICE INTO DATA(LC_EXCEPTION).
          LVA_MSG_ERROR = 'Serviço OPUS_CONSULTA_ROMANEIO_SAIDA_ENTRADA não parametrizado!'.
          ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = CONV #( LVA_MSG_ERROR ) ).
      ENDTRY.

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = LOB_HTTP ).

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~CONSULTAR(
        EXPORTING
          I_HTTP                     = LOB_HTTP
        IMPORTING
          E_CODE                     = DATA(LVA_CODE)
          E_REASON                   = DATA(LVA_REASON)
        RECEIVING
          E_RESULTADO                = DATA(LVA_JSON_RETORNO)
        EXCEPTIONS
          HTTP_COMMUNICATION_FAILURE = 1
          HTTP_INVALID_STATE         = 2
          HTTP_PROCESSING_FAILED     = 3
          HTTP_INVALID_TIMEOUT       = 4
          OTHERS                     = 5
      ).

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO LVA_MSG_ERROR.
        ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = CONV #( LVA_MSG_ERROR ) ).
      ENDIF.

      IF ( LVA_CODE NE 200 ) OR ( LVA_JSON_RETORNO IS INITIAL ).
        CONCATENATE 'Não foi possivel consultar o romaneio chave:' ME->ROMANEIO-CH_REFERENCIA 'no OPUS!' INTO LVA_MSG_ERROR SEPARATED BY SPACE.
        ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = CONV #( LVA_MSG_ERROR ) ).
      ENDIF.

      CALL METHOD /UI2/CL_JSON=>DESERIALIZE
        EXPORTING
          JSON = LVA_JSON_RETORNO
        CHANGING
          DATA = LIT_ROMANEIOS_OPUS.

      IF LIT_ROMANEIOS_OPUS[] IS INITIAL.
        CONCATENATE 'Romaneio chave:' ME->ROMANEIO-CH_REFERENCIA 'não encontrado no OPUS!' INTO LVA_MSG_ERROR SEPARATED BY SPACE.
        ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = CONV #( LVA_MSG_ERROR ) ).
      ENDIF.

      LOOP AT LIT_ROMANEIOS_OPUS INTO DATA(LWA_ROMANEIO).
        ROMANEIO-PESO_TARA = LWA_ROMANEIO-NUMEROPESOTARA.
      ENDLOOP.

      R_PESO_TARA = ROMANEIO-PESO_TARA.

      RETURN.
    ENDIF.

    "Fim novo Metodo Consulta ---------------------------------------------------------------------------------------------------


    TYPES BEGIN OF TY_ROMANEIO.
    TYPES: NR_PESO_TARA TYPE ZDE_NM_PESO_TARA.
    TYPES END OF TY_ROMANEIO.

    DATA: V_ID_CLI_DEST     TYPE ZSDT0001-ID_CLI_DEST,
          IT_ROMANEIOS_OPUS TYPE TABLE OF TY_ROMANEIO.

    IF ROMANEIO-PESO_TARA IS INITIAL.

      SELECT SINGLE * INTO @DATA(WA_ROMANEIO)
        FROM ZSDT0001OVRO
       WHERE CH_REFERENCIA_SAI EQ @ME->ROMANEIO-CH_REFERENCIA.

      IF SY-SUBRC IS INITIAL.
        ROMANEIO-PESO_TARA = WA_ROMANEIO-NM_PESO_TARA.
      ELSE.

        SELECT SINGLE * INTO @DATA(WA_TESTE)
          FROM ZWAT0003.

        IF SY-SUBRC IS INITIAL.
          DATA(LC_USA_API) = ABAP_TRUE.
        ELSE.
          LC_USA_API = ABAP_FALSE.
        ENDIF.

        IF LC_USA_API NE ABAP_TRUE.

          TRY .
              DATA(I_SQL) = 'SELECT AA.NR_PESO_TARA FROM OPUS.MR_ROMANEIO_SAIDA AA WHERE AA.ID_SEQ_PLA_ROMANEIOS = ' && ME->ROMANEIO-CH_REFERENCIA.

              ZCL_SQL_API_PYTHON=>ZIF_SQL_API_PYTHON~GET_INSTANCE(
                )->EXEC_SQL( EXPORTING I_SQL = I_SQL IMPORTING E_DATA = IT_ROMANEIOS_OPUS
                ).

              READ TABLE IT_ROMANEIOS_OPUS INDEX 1 INTO DATA(WA_RESULT_API).
              IF SY-SUBRC IS INITIAL.
                ROMANEIO-PESO_TARA = WA_RESULT_API-NR_PESO_TARA.
              ENDIF.

            CATCH ZCX_SQL_API_PYTHON INTO DATA(ERRO_PYTHON).    "
              ERRO_PYTHON->ZIF_ERROR~PUBLISHED_ERRO( EXPORTING I_MSGTY = 'I'  I_MSGTY_DISPLAY = 'E' ).
            CATCH ZCX_ERROR INTO DATA(ERRO_GERAL).
              ERRO_GERAL->ZIF_ERROR~PUBLISHED_ERRO( EXPORTING I_MSGTY = 'I'  I_MSGTY_DISPLAY = 'E' ).
          ENDTRY.
        ENDIF.
      ENDIF.
    ENDIF.

    R_PESO_TARA = ROMANEIO-PESO_TARA.

  ENDMETHOD.


  METHOD GET_QTD_EMBALAGEM.

    E_QTD_EMBALAGENS = 0.

    SELECT SINGLE * INTO @DATA(WA_ZSDT0001OVRO)
      FROM ZSDT0001OVRO
     WHERE CH_REFERENCIA_SAI EQ @I_CH_REFERENCIA_SAI.

    E_QTD_EMBALAGENS = WA_ZSDT0001OVRO-NM_QTD_EMBALAGENS.

    CHECK SY-SUBRC IS NOT INITIAL.

    RAISE EXCEPTION TYPE ZCX_ROMANEIO
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_ROMANEIO=>ZCX_ERRO_QTD_EMBALAGENS-MSGID
                          MSGNO = ZCX_ROMANEIO=>ZCX_ERRO_QTD_EMBALAGENS-MSGNO )
        MSGTY  = 'E'
        MSGID  = ZCX_ROMANEIO=>ZCX_ERRO_QTD_EMBALAGENS-MSGID
        MSGNO  = ZCX_ROMANEIO=>ZCX_ERRO_QTD_EMBALAGENS-MSGNO.

  ENDMETHOD.


  METHOD GET_STATUS_OPUS.

    DATA: LIT_ROMANEIOS_OPUS TYPE ZDE_ROMANEIO_JSON_001_T.
    DATA: LOB_WEB_SERVICE    TYPE REF TO ZCL_WEBSERVICE.
    DATA: LVA_MSG_ERROR TYPE C LENGTH 200.


    CLEAR: R_STATUS.

    SELECT SINGLE *
      FROM SETLEAF INTO @DATA(LWA_ZLES0136_API)
     WHERE SETNAME EQ 'ZLES0136_CONFIG'
       AND VALFROM EQ 'ACTIVE_API_0003'.

    IF SY-SUBRC EQ 0.

      CREATE OBJECT LOB_WEB_SERVICE.

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~AUTENTICA_OPUS         = ABAP_TRUE.
      LOB_WEB_SERVICE->ZIF_WEBSERVICE~CK_USA_AUTH_WEBSERVICE = ABAP_TRUE.
      LOB_WEB_SERVICE->ZIF_WEBSERVICE~NM_AUTH_WEBSERVICE     = 'OPUS_CONSULTA_ROMANEIO_SAIDA_ENTRADA'.

      TRY.
          DATA(LOB_HTTP) = LOB_WEB_SERVICE->URL( I_ADD_URL = CONV #( I_REFERENCIA ) ).      "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
          DATA(LOB_URI)  = LOB_WEB_SERVICE->GET_URI(  ).
        CATCH ZCX_WEBSERVICE INTO DATA(LC_EXCEPTION).
          LVA_MSG_ERROR = 'Serviço OPUS_CONSULTA_ROMANEIO_SAIDA_ENTRADA não parametrizado!'.
          ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = CONV #( LVA_MSG_ERROR ) ).
      ENDTRY.

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = LOB_HTTP ).

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~CONSULTAR(
        EXPORTING
          I_HTTP                     = LOB_HTTP
        IMPORTING
          E_CODE                     = DATA(LVA_CODE)
          E_REASON                   = DATA(LVA_REASON)
        RECEIVING
          E_RESULTADO                = DATA(LVA_JSON_RETORNO)
        EXCEPTIONS
          HTTP_COMMUNICATION_FAILURE = 1
          HTTP_INVALID_STATE         = 2
          HTTP_PROCESSING_FAILED     = 3
          HTTP_INVALID_TIMEOUT       = 4
          OTHERS                     = 5
      ).

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO LVA_MSG_ERROR.
        ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = CONV #( LVA_MSG_ERROR ) ).
      ENDIF.

      IF ( LVA_CODE NE 200 ) OR ( LVA_JSON_RETORNO IS INITIAL ).
        CONCATENATE 'Não foi possivel consultar o romaneio chave:' I_REFERENCIA 'no OPUS!' INTO LVA_MSG_ERROR SEPARATED BY SPACE.
        ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = CONV #( LVA_MSG_ERROR ) ).
      ENDIF.

      CALL METHOD /UI2/CL_JSON=>DESERIALIZE
        EXPORTING
          JSON = LVA_JSON_RETORNO
        CHANGING
          DATA = LIT_ROMANEIOS_OPUS.

      IF LIT_ROMANEIOS_OPUS[] IS INITIAL.
        CONCATENATE 'Romaneio chave:' I_REFERENCIA 'não encontrado no OPUS!' INTO LVA_MSG_ERROR SEPARATED BY SPACE.
        ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = CONV #( LVA_MSG_ERROR ) ).
      ENDIF.

      LOOP AT LIT_ROMANEIOS_OPUS INTO DATA(LWA_ROMANEIO).
        R_STATUS = LWA_ROMANEIO-TIPOSTATUS.
      ENDLOOP.

      RETURN.
    ENDIF.

    TYPES BEGIN OF TY_ROMANEIO.
*---> 20.06.2023 - Migração S4 - DG
    "    TYPES: TP_STATUS TYPE CHAR02.
    TYPES: TP_STATUS TYPE ZCHAR02.
*<--- 20.06.2023 - Migração S4 - DG
    TYPES END OF TY_ROMANEIO.

    DATA: IT_ROMANEIOS_OPUS TYPE TABLE OF TY_ROMANEIO.
    SELECT COUNT(*)
      INTO @DATA(_CONT)
      FROM ZWAT0003.
    IF _CONT = 0. "Não há parametros API / Não valida
      CASE I_TP_MOVIMENTO.
        WHEN 'S'.
          R_STATUS = 'FE'.
        WHEN 'E'.
          R_STATUS = 'CO'.
      ENDCASE.
    ELSE.
      TRY .

          CASE I_TP_MOVIMENTO.
            WHEN 'S'.
              DATA(I_SQL) = 'SELECT TP_STATUS FROM OPUS.MR_ROMANEIO_SAIDA S WHERE S.ID_SEQ_PLA_ROMANEIOS = ' && I_REFERENCIA.
            WHEN 'E'.
              I_SQL = 'SELECT TP_STATUS FROM OPUS.MR_ROMANEIO_ENTRADA S WHERE S.ID_SEQ_PLA_ROMANEIOS = ' && I_REFERENCIA.
          ENDCASE.

          ZCL_SQL_API_PYTHON=>ZIF_SQL_API_PYTHON~GET_INSTANCE(
            )->EXEC_SQL( EXPORTING I_SQL = I_SQL IMPORTING E_DATA = IT_ROMANEIOS_OPUS
            ).

          READ TABLE IT_ROMANEIOS_OPUS INDEX 1 INTO DATA(WA_ROMANEIOS_OPUS).

          R_STATUS = WA_ROMANEIOS_OPUS-TP_STATUS.

        CATCH ZCX_SQL_API_PYTHON INTO DATA(ERRO_PYTHON).    "
          ERRO_PYTHON->ZIF_ERROR~PUBLISHED_ERRO( EXPORTING I_MSGTY = 'I'  I_MSGTY_DISPLAY = 'E' ).
        CATCH ZCX_ERROR INTO DATA(ERRO_GERAL).
          ERRO_GERAL->ZIF_ERROR~PUBLISHED_ERRO( EXPORTING I_MSGTY = 'I'  I_MSGTY_DISPLAY = 'E' ).
      ENDTRY.
    ENDIF.

  ENDMETHOD.


  METHOD IMPRIMIR_PRD.

    ZCL_ROMANEIO=>IMPRIMIR_PRD_(
      EXPORTING
        I_CENTRO       = CONV #( ME->ROMANEIO-BRANCH )
        I_SAFRA        = CONV #( ME->ROMANEIO-NR_SAFRA )
        I_NRROMANEIO   = CONV #( ME->ROMANEIO-NR_ROMANEIO )
        I_TPROMANEIO   = CONV #( ME->ROMANEIO-TP_MOVIMENTO )
        I_NAO_IMPRIMIR = I_NAO_IMPRIMIR
      IMPORTING
        E_DATA_XTRING  = E_DATA_XTRING ).

  ENDMETHOD.


  METHOD IMPRIMIR_PRD_.

    DATA: OB_WEB_SERVICE TYPE REF TO ZCL_WEBSERVICE,
          PDF_DATA       TYPE XSTRING.

    FREE: E_DATA_XTRING.

    DATA(JSON_ENTRADA) = '{' &&
                            '"centro" : "' && I_CENTRO && '", ' &&
                            '"safra"  : "' && I_SAFRA && '", ' &&
                            '"nrromaneio"  : "' && I_NRROMANEIO && '", ' &&
                            '"tpromaneio"  : "' && I_TPROMANEIO && '" ' &&
                         '}'.

    "IR - Integração OPUS - Romaneio Completo - PDF Romaneio
    CREATE OBJECT OB_WEB_SERVICE.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~AUTENTICA_OPUS = ABAP_TRUE.

    TRY .
        OB_WEB_SERVICE->SET_SERVICO( I_SERVICO = 'IR' ).
        OB_WEB_SERVICE->SET_TIPO( I_TIPO = 'O' ).
        DATA(I_CLIENTE) = OB_WEB_SERVICE->URL( ). "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
      CATCH ZCX_WEBSERVICE INTO DATA(LC_EXCEPTION).
        CLEAR: OB_WEB_SERVICE.
        DATA(LC_MSG) = LC_EXCEPTION->GET_LONGTEXT( ).
        ZCL_ROMANEIO=>GERA_ERRO_GERAL( I_TEXTO = LC_MSG ).
    ENDTRY.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = I_CLIENTE ).

    OB_WEB_SERVICE->ZIF_WEBSERVICE~CONSULTAR(
      EXPORTING
        I_HTTP                     = I_CLIENTE
        I_XML                      = JSON_ENTRADA
      IMPORTING
        E_DATA                     = PDF_DATA
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3
        HTTP_INVALID_TIMEOUT       = 4
        OTHERS                     = 5
    ).

    IF SY-SUBRC <> 0.
      RAISE EXCEPTION TYPE ZCX_ROMANEIO
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGTY  = 'E'
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    CLEAR: OB_WEB_SERVICE.

*-CS2021000696 - 10.08.2021 - JT - inicio
    IF I_NAO_IMPRIMIR = ABAP_FALSE.
      CALL FUNCTION 'ZSMARTFORMS_PDF_FILE_PREVIEW'
        EXPORTING
          PDF_DATA = PDF_DATA.
    ENDIF.

    E_DATA_XTRING = PDF_DATA.
*-CS2021000696 - 10.08.2021 - JT - fim

  ENDMETHOD.


  METHOD IMPRIMIR_TICKET.

    ZCL_ROMANEIO=>IMPRIMIR_TICKET_(
      EXPORTING
        I_CENTRO       = CONV #( ME->ROMANEIO-BRANCH )
        I_SAFRA        = CONV #( ME->ROMANEIO-NR_SAFRA )
        I_NRROMANEIO   = CONV #( ME->ROMANEIO-NR_ROMANEIO )
        I_TPROMANEIO   = CONV #( ME->ROMANEIO-TP_MOVIMENTO )
        I_IDIMPRESSORA = I_IDIMPRESSORA ).

  ENDMETHOD.


  METHOD IMPRIMIR_TICKET_.

    DATA: OB_WEB_SERVICE TYPE REF TO ZCL_WEBSERVICE,
          PDF_DATA       TYPE XSTRING.

    "Selecionar Impressora""""""""""""""""""""""
    IF I_IDIMPRESSORA IS INITIAL.
      ZCL_ROMANEIO=>GET_IMPRESSORAS_FILIAL_( EXPORTING I_FILIAL = CONV #( I_CENTRO ) IMPORTING E_IDIMPRESSORA = DATA(E_IP) ).
    ELSE.
      E_IP = I_IDIMPRESSORA.
    ENDIF.
    """"""""""""""""""""""""""""""""""""""""""""

    CHECK E_IP IS NOT INITIAL.

    DATA(JSON_ENTRADA) = '{' &&
                            '"centro" : "'        && I_CENTRO       && '", ' &&
                            '"safra"  : "'        && I_SAFRA        && '", ' &&
                            '"nrromaneio"  : "'   && I_NRROMANEIO   && '", ' &&
                            '"tpromaneio"  : "'   && I_TPROMANEIO   && '", ' &&
                            '"idImpressora"  : "'  && E_IP && '" }'.

    "IR - Integração OPUS - Romaneio Completo - Ticket
    CREATE OBJECT OB_WEB_SERVICE.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~AUTENTICA_OPUS = ABAP_TRUE.

    TRY .
        OB_WEB_SERVICE->SET_SERVICO( I_SERVICO = 'IK' ).
        OB_WEB_SERVICE->SET_TIPO( I_TIPO = 'O' ).
        DATA(I_CLIENTE) = OB_WEB_SERVICE->URL( ). "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
      CATCH ZCX_WEBSERVICE INTO DATA(LC_EXCEPTION).
        CLEAR: OB_WEB_SERVICE.
        DATA(LC_MSG) = LC_EXCEPTION->GET_LONGTEXT( ).
        ZCL_ROMANEIO=>GERA_ERRO_GERAL( I_TEXTO = LC_MSG ).
    ENDTRY.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = I_CLIENTE ).

    OB_WEB_SERVICE->ZIF_WEBSERVICE~CONSULTAR(
      EXPORTING
        I_HTTP                     = I_CLIENTE
        I_XML                      = JSON_ENTRADA
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3
        HTTP_INVALID_TIMEOUT       = 4
        OTHERS                     = 5
    ).

    IF SY-SUBRC <> 0.
      RAISE EXCEPTION TYPE ZCX_ROMANEIO
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGTY  = 'E'
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    CLEAR: OB_WEB_SERVICE.

  ENDMETHOD.


  METHOD SET_AGENTE_FRETE.
    IF ME->ROMANEIO-AGENTE_FRETE NE I_AGENTE_FRETE.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-AGENTE_FRETE = I_AGENTE_FRETE.
  ENDMETHOD.


  METHOD SET_ANO_MATERIAL.
    IF ME->ROMANEIO-ANO_MATERIAL NE I_ANO_MATERIAL.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-ANO_MATERIAL = I_ANO_MATERIAL.
  ENDMETHOD.


  METHOD SET_ANO_MATERIAL_E.
    IF ME->ROMANEIO-ANO_MATERIAL_E NE I_ANO_MATERIAL_E.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-ANO_MATERIAL_E = I_ANO_MATERIAL_E.
  ENDMETHOD.


  METHOD SET_BRANCH.
    IF ME->ROMANEIO-BRANCH NE I_BRANCH.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-BRANCH = I_BRANCH.
  ENDMETHOD.


  METHOD SET_BUKRS.
    IF ME->ROMANEIO-BUKRS NE I_BUKRS.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-BUKRS = I_BUKRS.
  ENDMETHOD.


  METHOD SET_CABECALHO_ROMANEIO.

    ME->SET_AGENTE_FRETE(       I_AGENTE_FRETE =       I_ROMANEIO-AGENTE_FRETE ).
    ME->SET_TP_MOVIMENTO(       I_TP_MOVIMENTO =       I_ROMANEIO-TP_MOVIMENTO ).
    ME->SET_VBELN(              I_VBELN =              I_ROMANEIO-VBELN ).
    ME->SET_NR_ROT(             I_NR_ROT =             I_ROMANEIO-NR_ROT ).
    ME->SET_DT_MOVIMENTO(       I_DT_MOVIMENTO =       I_ROMANEIO-DT_MOVIMENTO ).
    ME->SET_NR_SAFRA(           I_NR_SAFRA =           I_ROMANEIO-NR_SAFRA ).
    ME->SET_BUKRS(              I_BUKRS =              I_ROMANEIO-BUKRS ).
    ME->SET_BRANCH(             I_BRANCH =             I_ROMANEIO-BRANCH ).
    ME->SET_PARID(              I_PARID =              I_ROMANEIO-PARID ).
    ME->SET_ID_CLI_DEST(        I_ID_CLI_DEST =        I_ROMANEIO-ID_CLI_DEST ).
    ME->SET_TP_FRETE(           I_TP_FRETE =           I_ROMANEIO-TP_FRETE ).
    ME->SET_MATNR(              I_MATNR =              I_ROMANEIO-MATNR ).
    ME->SET_PESO_LIQ(           I_PESO_LIQ =           I_ROMANEIO-PESO_LIQ ).
    ME->SET_PESO_FISCAL(        I_PESO_FISCAL =        I_ROMANEIO-PESO_FISCAL ).
    ME->SET_NFNUM(              I_NFNUM =              I_ROMANEIO-NFNUM ).
    ME->SET_SERIES(             I_SERIES =             I_ROMANEIO-SERIES ).
    ME->SET_DOCDAT(             I_DOCDAT =             I_ROMANEIO-DOCDAT ).
    ME->SET_NETWR(              I_NETWR =              I_ROMANEIO-NETWR ).
    ME->SET_NFE(                I_NFE =                I_ROMANEIO-NFE ).
    ME->SET_PLACA_CAV(          I_PLACA_CAV =          I_ROMANEIO-PLACA_CAV ).
    ME->SET_PLACA_CAR1(         I_PLACA_CAR1 =         I_ROMANEIO-PLACA_CAR1 ).
    ME->SET_PLACA_CAR2(         I_PLACA_CAR2 =         I_ROMANEIO-PLACA_CAR2 ).
    ME->SET_PLACA_CAR3(         I_PLACA_CAR3 =         I_ROMANEIO-PLACA_CAR3 ).
    ME->SET_MOTORISTA(          I_MOTORISTA =          I_ROMANEIO-MOTORISTA ).
    ME->SET_NR_TICKET(          I_NR_TICKET =          I_ROMANEIO-NR_TICKET ).
    ME->SET_DT_FECHAMENTO(      I_DT_FECHAMENTO =      I_ROMANEIO-DT_FECHAMENTO ).
    ME->SET_HR_FECHAMENTO(      I_HR_FECHAMENTO =      I_ROMANEIO-HR_FECHAMENTO ).
    ME->SET_DT_ABERTURA(        I_DT_ABERTURA =        I_ROMANEIO-DT_ABERTURA ).
    ME->SET_HR_ABERTURA(        I_HR_ABERTURA =        I_ROMANEIO-HR_ABERTURA ).
    ME->SET_NR_PERC_UMIDADE(    I_NR_PERC_UMIDADE =    I_ROMANEIO-NR_PERC_UMIDADE ).
    ME->SET_NR_QTD_UMIDADE(     I_NR_QTD_UMIDADE =     I_ROMANEIO-NR_QTD_UMIDADE ).
    ME->SET_NR_PERC_IMPUREZA(   I_NR_PERC_IMPUREZA =   I_ROMANEIO-NR_PERC_IMPUREZA ).
    ME->SET_NR_QTD_IMPUREZA(    I_NR_QTD_IMPUREZA =    I_ROMANEIO-NR_QTD_IMPUREZA ).
    ME->SET_NR_PERC_AVARIA(     I_NR_PERC_AVARIA =     I_ROMANEIO-NR_PERC_AVARIA ).
    ME->SET_NR_QTD_AVARIA(      I_NR_QTD_AVARIA =      I_ROMANEIO-NR_QTD_AVARIA ).
    ME->SET_NR_PERC_ARDIDO(     I_NR_PERC_ARDIDO =     I_ROMANEIO-NR_PERC_ARDIDO ).
    ME->SET_NR_QTD_ARDIDO(      I_NR_QTD_ARDIDO =      I_ROMANEIO-NR_QTD_ARDIDO ).
    ME->SET_NR_PERC_QUEBRA(     I_NR_PERC_QUEBRA =     I_ROMANEIO-NR_PERC_QUEBRA ).
    ME->SET_NR_QTD_QUEBRA(      I_NR_QTD_QUEBRA =      I_ROMANEIO-NR_QTD_QUEBRA ).
    ME->SET_NR_PERC_ESVERD(     I_NR_PERC_ESVERD =     I_ROMANEIO-NR_PERC_ESVERD ).
    ME->SET_NR_QTD_ESVERD(      I_NR_QTD_ESVERD =      I_ROMANEIO-NR_QTD_ESVERD ).
    ME->SET_DOC_REM(            I_DOC_REM =            I_ROMANEIO-DOC_REM ).
    ME->SET_ID_INTERFACE(       I_ID_INTERFACE =       I_ROMANEIO-ID_INTERFACE ).
    ME->SET_STATUS(             I_STATUS =             I_ROMANEIO-STATUS ).
    ME->SET_TKNUM(              I_TKNUM =              I_ROMANEIO-TKNUM ).
    ME->SET_DOC_MATERIAL(       I_DOC_MATERIAL =       I_ROMANEIO-DOC_MATERIAL ).
    ME->SET_ANO_MATERIAL(       I_ANO_MATERIAL =       I_ROMANEIO-ANO_MATERIAL ).
    ME->SET_PESO_SUBTOTAL(      I_PESO_SUBTOTAL =      I_ROMANEIO-PESO_SUBTOTAL ).
    ME->SET_DT_CHEGADA(         I_DT_CHEGADA =         I_ROMANEIO-DT_CHEGADA ).
    ME->SET_NR_NOTA_CONTA_OR(   I_NR_NOTA_CONTA_OR =   I_ROMANEIO-NR_NOTA_CONTA_OR ).
    ME->SET_NR_SERIE_CONTA_O(   I_NR_SERIE_CONTA_O =   I_ROMANEIO-NR_SERIE_CONTA_O ).
    ME->SET_ID_REFERENCIA(      I_ID_REFERENCIA =      I_ROMANEIO-ID_REFERENCIA ).
    ME->SET_TP_TRANSGENIA(      I_TP_TRANSGENIA =      I_ROMANEIO-TP_TRANSGENIA ).
    ME->SET_DS_OBS(             I_DS_OBS =             I_ROMANEIO-DS_OBS ).
    ME->SET_CT_AQUAV(           I_CT_AQUAV =           I_ROMANEIO-CT_AQUAV ).
    ME->SET_DOCNUM_AQUAV(       I_DOCNUM_AQUAV =       I_ROMANEIO-DOCNUM_AQUAV ).
    ME->SET_ST_PROC(            I_ST_PROC =            I_ROMANEIO-ST_PROC ).
    ME->SET_FATURA_PROD(        I_FATURA_PROD =        I_ROMANEIO-FATURA_PROD ).
    ME->SET_NRO_NF_PROD(        I_NRO_NF_PROD =        I_ROMANEIO-NRO_NF_PROD ).
    ME->SET_DOC_TRANSP(         I_DOC_TRANSP =         I_ROMANEIO-DOC_TRANSP ).
    ME->SET_FKNUM(              I_FKNUM =              I_ROMANEIO-FKNUM ).
    ME->SET_OV_FRETE(           I_OV_FRETE =           I_ROMANEIO-OV_FRETE ).
    ME->SET_FATURA_FRETE(       I_FATURA_FRETE =       I_ROMANEIO-FATURA_FRETE ).
    ME->SET_NRO_NF_FRETE(       I_NRO_NF_FRETE =       I_ROMANEIO-NRO_NF_FRETE ).
    ME->SET_AGENTE_FRETE(       I_AGENTE_FRETE =       I_ROMANEIO-AGENTE_FRETE ).
    ME->SET_KBETR(              I_KBETR =              I_ROMANEIO-KBETR ).
    ME->SET_REGION(             I_REGION =             I_ROMANEIO-REGION ).
    ME->SET_LOCAL_DESCARGA(     I_LOCAL_DESCARGA =     I_ROMANEIO-LOCAL_DESCARGA ).
    ME->SET_TIPO_ENTRADA(       I_TIPO_ENTRADA =       I_ROMANEIO-TIPO_ENTRADA ).
    ME->SET_SEQ_LCTO(           I_SEQ_LCTO =           I_ROMANEIO-SEQ_LCTO ).
    ME->SET_NRO_NF_REM(         I_NRO_NF_REM =         I_ROMANEIO-NRO_NF_REM ).
    ME->SET_DOC_AVISO(          I_DOC_AVISO =          I_ROMANEIO-DOC_AVISO ).
    ME->SET_EBELN(              I_EBELN =              I_ROMANEIO-EBELN ).
    ME->SET_PESO_RETIDO_EST(    I_PESO_RETIDO_EST =    I_ROMANEIO-PESO_RETIDO_EST ).
    ME->SET_PESO_LIQRET_EST(    I_PESO_LIQRET_EST =    I_ROMANEIO-PESO_LIQRET_EST ).
    ME->SET_PESO_RETIDO_REAL(   I_PESO_RETIDO_REAL =   I_ROMANEIO-PESO_RETIDO_REAL ).
    ME->SET_PESO_LIQRET_REAL(   I_PESO_LIQRET_REAL =   I_ROMANEIO-PESO_LIQRET_REAL ).
    ME->SET_VINC_TOT_AQUAV(     I_VINC_TOT_AQUAV =     I_ROMANEIO-VINC_TOT_AQUAV ).
    ME->SET_CTE_EMIT_AQUAV(     I_CTE_EMIT_AQUAV =     I_ROMANEIO-CTE_EMIT_AQUAV ).
    ME->SET_NRO_CG(             I_NRO_CG =             I_ROMANEIO-NRO_CG ).
    ME->SET_DOC_MATERIAL_E(     I_DOC_MATERIAL_E =     I_ROMANEIO-DOC_MATERIAL_E ).
    ME->SET_ANO_MATERIAL_E(     I_ANO_MATERIAL_E =     I_ROMANEIO-ANO_MATERIAL_E ).
    ME->SET_CH_REFER_ENT(       I_CH_REFER_ENT =       I_ROMANEIO-CH_REFER_ENT ).

  ENDMETHOD.


  METHOD SET_CANCELAR_ROMANEIO.

    SELECT SINGLE * INTO @DATA(WA_ZSDT0001)
      FROM ZSDT0001
     WHERE CH_REFERENCIA EQ @I_CH_REFERENCIA
       AND CH_REFERENCIA NE @SPACE.

    CHECK SY-SUBRC IS INITIAL.

    MODIFY ZSDT0001CA FROM WA_ZSDT0001.
    DELETE FROM ZSDT0001 WHERE CH_REFERENCIA EQ I_CH_REFERENCIA AND CH_REFERENCIA NE SPACE.

  ENDMETHOD.


  METHOD SET_CH_REFER_ENT.
    IF ME->ROMANEIO-CH_REFER_ENT NE I_CH_REFER_ENT.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-CH_REFER_ENT = I_CH_REFER_ENT.
  ENDMETHOD.


  METHOD SET_COMMIT.

    DATA: NOT_COMMIT   TYPE CHAR1.

    ME->ST_NOT_COMMIT = I_NOT_COMMIT.

    EXPORT NOT_COMMIT FROM ME->ST_NOT_COMMIT TO MEMORY ID 'ZCL_ROMANEIO_COMMIT'.

  ENDMETHOD.


  METHOD SET_CTE_EMIT_AQUAV.
    IF ME->ROMANEIO-CTE_EMIT_AQUAV NE I_CTE_EMIT_AQUAV.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-CTE_EMIT_AQUAV = I_CTE_EMIT_AQUAV.
  ENDMETHOD.


  METHOD SET_CT_AQUAV.
    IF ME->ROMANEIO-CT_AQUAV NE I_CT_AQUAV.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-CT_AQUAV = I_CT_AQUAV.
  ENDMETHOD.


  METHOD SET_DOCDAT.
    IF ME->ROMANEIO-DOCDAT NE I_DOCDAT.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-DOCDAT = I_DOCDAT.
  ENDMETHOD.


  METHOD SET_DOCNUM_AQUAV.
    IF ME->ROMANEIO-DOCNUM_AQUAV NE I_DOCNUM_AQUAV.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-DOCNUM_AQUAV = I_DOCNUM_AQUAV.
  ENDMETHOD.


  METHOD SET_DOC_AVISO.
    IF ME->ROMANEIO-DOC_AVISO NE I_DOC_AVISO.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-DOC_AVISO = I_DOC_AVISO.
  ENDMETHOD.


  METHOD SET_DOC_MATERIAL.
    IF ME->ROMANEIO-DOC_MATERIAL NE I_DOC_MATERIAL.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-DOC_MATERIAL = I_DOC_MATERIAL.
  ENDMETHOD.


  METHOD SET_DOC_MATERIAL_E.
    IF ME->ROMANEIO-DOC_MATERIAL_E NE I_DOC_MATERIAL_E.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-DOC_MATERIAL_E = I_DOC_MATERIAL_E.
  ENDMETHOD.


  METHOD SET_DOC_REM.
    IF ME->ROMANEIO-DOC_REM NE I_DOC_REM.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-DOC_REM = I_DOC_REM.
  ENDMETHOD.


  METHOD SET_DOC_TRANSP.
    IF ME->ROMANEIO-DOC_TRANSP NE I_DOC_TRANSP.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-DOC_TRANSP = I_DOC_TRANSP.
  ENDMETHOD.


  METHOD SET_DS_OBS.
    IF ME->ROMANEIO-DS_OBS NE I_DS_OBS.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-DS_OBS = I_DS_OBS.
  ENDMETHOD.


  METHOD SET_DT_ABERTURA.
    IF ME->ROMANEIO-DT_ABERTURA NE I_DT_ABERTURA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-DT_ABERTURA = I_DT_ABERTURA.
  ENDMETHOD.


  METHOD SET_DT_CHEGADA.
    IF ME->ROMANEIO-DT_CHEGADA NE I_DT_CHEGADA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-DT_CHEGADA = I_DT_CHEGADA.
  ENDMETHOD.


  METHOD SET_DT_FECHAMENTO.
    IF ME->ROMANEIO-DT_FECHAMENTO NE I_DT_FECHAMENTO.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-DT_FECHAMENTO = I_DT_FECHAMENTO.
  ENDMETHOD.


  METHOD SET_DT_MOVIMENTO.
    IF ME->ROMANEIO-DT_MOVIMENTO NE I_DT_MOVIMENTO.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-DT_MOVIMENTO = I_DT_MOVIMENTO.
  ENDMETHOD.


  METHOD SET_EBELN.
    IF ME->ROMANEIO-EBELN NE I_EBELN.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-EBELN = I_EBELN.
  ENDMETHOD.


  METHOD SET_FATURA_FRETE.
    IF ME->ROMANEIO-FATURA_FRETE NE I_FATURA_FRETE.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-FATURA_FRETE = I_FATURA_FRETE.
  ENDMETHOD.


  METHOD SET_FATURA_PROD.
    IF ME->ROMANEIO-FATURA_PROD NE I_FATURA_PROD.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-FATURA_PROD = I_FATURA_PROD.
  ENDMETHOD.


  METHOD SET_FKNUM.
    IF ME->ROMANEIO-FKNUM NE I_FKNUM.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-FKNUM = I_FKNUM.
  ENDMETHOD.


  METHOD SET_FORCAR_REENVIO_OPUS_TO_SAP.


    DATA: LVA_MSG_ERROR TYPE C LENGTH 200.


    SELECT SINGLE *
      FROM SETLEAF INTO @DATA(LWA_ZLES0136_API)
     WHERE SETNAME EQ 'ZLES0136_CONFIG'
       AND VALFROM EQ 'ACTIVE_API_0001'.

    IF SY-SUBRC EQ 0.

      DATA: LOB_WEB_SERVICE TYPE REF TO ZCL_WEBSERVICE.

      CREATE OBJECT LOB_WEB_SERVICE.

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~AUTENTICA_OPUS         = ABAP_TRUE.
      LOB_WEB_SERVICE->ZIF_WEBSERVICE~CK_USA_AUTH_WEBSERVICE = ABAP_TRUE.
      LOB_WEB_SERVICE->ZIF_WEBSERVICE~NM_AUTH_WEBSERVICE     = 'OPUS_REENVIO_ROMANEIO_OPUS_TO_SAP'.

      TRY.
          DATA(LOB_HTTP) = LOB_WEB_SERVICE->URL( I_ADD_URL = CONV #( I_CH_REFERENCIA_SAI ) ).      "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
          DATA(LOB_URI)  = LOB_WEB_SERVICE->GET_URI(  ).
        CATCH ZCX_WEBSERVICE INTO DATA(LC_EXCEPTION).
          LVA_MSG_ERROR = 'Serviço OPUS_REENVIO_ROMANEIO_OPUS_TO_SAP não parametrizado!'.
          ZCX_ERROR=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = CONV #( LVA_MSG_ERROR ) ).
      ENDTRY.

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = LOB_HTTP ).

      LOB_WEB_SERVICE->ZIF_WEBSERVICE~CONSULTAR(
        EXPORTING
          I_HTTP                     = LOB_HTTP
        IMPORTING
          E_CODE                     = DATA(LVA_CODE)
          E_REASON                   = DATA(LVA_REASON)
        RECEIVING
          E_RESULTADO                = DATA(LVA_JSON_RETORNO)
        EXCEPTIONS
          HTTP_COMMUNICATION_FAILURE = 1
          HTTP_INVALID_STATE         = 2
          HTTP_PROCESSING_FAILED     = 3
          HTTP_INVALID_TIMEOUT       = 4
          OTHERS                     = 5
      ).

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'I' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        RETURN.
      ENDIF.
      "Romaneio nao encontrado no OPUS
      IF ( LVA_CODE NE 200 ) AND ( LVA_CODE NE 404 ) .
        CONCATENATE 'Não foi possivel reenviar o romaneio chave:' I_CH_REFERENCIA_SAI 'para o SAP!' INTO LVA_MSG_ERROR SEPARATED BY SPACE.
        MESSAGE LVA_MSG_ERROR TYPE 'I'.
        RETURN.
      ENDIF.

      RETURN.

    ENDIF.

    TYPES BEGIN OF TY_ROMANEIO.
    TYPES: EXECUTOU TYPE STRING.
    TYPES END OF TY_ROMANEIO.

    DATA: E_DATA TYPE TY_ROMANEIO.

    SELECT SINGLE * INTO @DATA(WA_ZSDT0001)
      FROM ZSDT0001
     WHERE CH_REFERENCIA EQ @I_CH_REFERENCIA_SAI.

    SELECT SINGLE * INTO @DATA(WA_TESTE)
      FROM ZWAT0003.

    CHECK SY-SUBRC IS INITIAL.

    TRY .

        DATA(I_SCRIPT) =
        'DECLARE' &&
        ' RESULT boolean; ' &&
        ' LC_id_romaneio_saida opus.mr_romaneio_saida.id_romaneio_saida%TYPE; ' &&
        'BEGIN' &&
        '  select s.id_romaneio_saida INTO LC_id_romaneio_saida from opus.mr_romaneio_saida s, opus.sigam_safra a, sigam.empresas_filiais ef ' &&
        '   where s.nr_romaneio = ' && WA_ZSDT0001-NR_ROMANEIO &&
        '     and s.id_empresa = ef.cod_empresa ' &&
        '     and s.id_filial  = ef.cod_filial ' &&
        '     and s.id_safra = a.cod_safra ' &&
        '     and ef.id_filial_sap = ''' && WA_ZSDT0001-BRANCH && ''' ' &&
        '     and a.safra_descricao = ''' && WA_ZSDT0001-NR_SAFRA && '''; ' &&
        '  RESULT := pkg_replicacao.opus_to_sap_carga_saida_repl(pid_romaneio => LC_id_romaneio_saida ); ' &&
        '  COMMIT; ' &&
        ' END;'.

        ZCL_SQL_API_PYTHON=>ZIF_SQL_API_PYTHON~GET_INSTANCE(
          )->EXEC_SCRIPT( EXPORTING I_SCRIPT = I_SCRIPT IMPORTING E_DATA = E_DATA
          ).

      CATCH ZCX_SQL_API_PYTHON INTO DATA(ERRO_PYTHON).    "
        ERRO_PYTHON->ZIF_ERROR~PUBLISHED_ERRO( EXPORTING I_MSGTY = 'I'  I_MSGTY_DISPLAY = 'E' ).
      CATCH ZCX_ERROR INTO DATA(ERRO_GERAL).
        ERRO_GERAL->ZIF_ERROR~PUBLISHED_ERRO( EXPORTING I_MSGTY = 'I'  I_MSGTY_DISPLAY = 'E' ).
    ENDTRY.

  ENDMETHOD.


  METHOD SET_HR_ABERTURA.
    IF ME->ROMANEIO-HR_ABERTURA NE I_HR_ABERTURA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-HR_ABERTURA = I_HR_ABERTURA.
  ENDMETHOD.


  METHOD SET_HR_FECHAMENTO.
    IF ME->ROMANEIO-HR_FECHAMENTO NE I_HR_FECHAMENTO.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-HR_FECHAMENTO = I_HR_FECHAMENTO.
  ENDMETHOD.


  METHOD SET_ID_CARGA.

    IF ME->ROMANEIO-ID_CARGA NE I_ID_CARGA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-ID_CARGA = I_ID_CARGA.

  ENDMETHOD.


  METHOD SET_ID_CLI_DEST.

    DATA: LC_ID_CLI_DEST TYPE ZSDT0001-ID_CLI_DEST.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = I_ID_CLI_DEST
      IMPORTING
        OUTPUT = LC_ID_CLI_DEST.

    IF ME->ROMANEIO-ID_CLI_DEST NE LC_ID_CLI_DEST.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-ID_CLI_DEST = LC_ID_CLI_DEST.

  ENDMETHOD.


  METHOD SET_ID_INTERFACE.
    IF ME->ROMANEIO-ID_INTERFACE NE I_ID_INTERFACE.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-ID_INTERFACE = I_ID_INTERFACE.
  ENDMETHOD.


  METHOD SET_ID_NOTA.

    IF ME->ROMANEIO-ID_NOTA NE I_ID_NOTA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-ID_NOTA = I_ID_NOTA.

  ENDMETHOD.


  METHOD SET_ID_ORDEM.

    DATA(LC_CK_ALTEROU) =
      ZCL_ATRIBUI_ROM_DOCTRANS=>SET_ID_ORDEM_ROMANEIO(
      EXPORTING
        I_ID_ORDEM = I_ID_ORDEM    " Ordem de Carregamento
      CHANGING
        I_ZSDT0001 = ME->ROMANEIO  " Informações para preenchimento dos dados de remessa. (OPUS)
    ).

    IF LC_CK_ALTEROU EQ ABAP_TRUE.
      ME->CK_ALTEROU = LC_CK_ALTEROU.
    ENDIF.

  ENDMETHOD.


  METHOD SET_ID_REFERENCIA.
    IF ME->ROMANEIO-ID_REFERENCIA NE I_ID_REFERENCIA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-ID_REFERENCIA = I_ID_REFERENCIA.
  ENDMETHOD.


  METHOD SET_ITEM.

    READ TABLE ME->ITENS ASSIGNING FIELD-SYMBOL(<FS_ITEM>) WITH KEY CD_ITEM = I_ITEM-CD_ITEM.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_ROMANEIO_EXCEPTION
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_ROMANEIO_EXCEPTION=>ZCX_ITEM_NAO_EXISTE-MSGID
                            MSGNO = ZCX_ROMANEIO_EXCEPTION=>ZCX_ITEM_NAO_EXISTE-MSGNO
                            ATTR1 = CONV #( I_ITEM-CD_ITEM ) )
          MSGID  = ZCX_ROMANEIO_EXCEPTION=>ZCX_ITEM_NAO_EXISTE-MSGID
          MSGNO  = ZCX_ROMANEIO_EXCEPTION=>ZCX_ITEM_NAO_EXISTE-MSGNO
          MSGTY  = 'E'
          MSGV1  = CONV #( I_ITEM-CD_ITEM ).
    ELSE.
      IF <FS_ITEM>-CHARG NE I_ITEM-CHARG.
        ME->CK_ALTEROU = ABAP_TRUE.
      ENDIF.
      IF <FS_ITEM>-LFIMG NE I_ITEM-LFIMG.
        ME->CK_ALTEROU = ABAP_TRUE.
      ENDIF.
      IF <FS_ITEM>-BRGEW NE I_ITEM-BRGEW.
        ME->CK_ALTEROU = ABAP_TRUE.
      ENDIF.
      IF <FS_ITEM>-NTGEW NE I_ITEM-NTGEW.
        ME->CK_ALTEROU = ABAP_TRUE.
      ENDIF.
      IF <FS_ITEM>-GEWEI NE I_ITEM-GEWEI.
        ME->CK_ALTEROU = ABAP_TRUE.
      ENDIF.
      IF <FS_ITEM>-VOLUM NE I_ITEM-VOLUM.
        ME->CK_ALTEROU = ABAP_TRUE.
      ENDIF.
      IF <FS_ITEM>-VOLEH NE I_ITEM-VOLEH.
        ME->CK_ALTEROU = ABAP_TRUE.
      ENDIF.
      IF <FS_ITEM>-MATNR NE I_ITEM-MATNR.
        ME->CK_ALTEROU = ABAP_TRUE.
      ENDIF.
      IF <FS_ITEM>-MEINS NE I_ITEM-MEINS.
        ME->CK_ALTEROU = ABAP_TRUE.
      ENDIF.
      IF <FS_ITEM>-POSNR NE I_ITEM-POSNR.
        ME->CK_ALTEROU = ABAP_TRUE.
      ENDIF.
      IF <FS_ITEM>-VBELN NE I_ITEM-VBELN.
        ME->CK_ALTEROU = ABAP_TRUE.
      ENDIF.
      IF <FS_ITEM>-PART_LOTE NE I_ITEM-PART_LOTE.
        ME->CK_ALTEROU = ABAP_TRUE.
      ENDIF.

      <FS_ITEM>-CHARG     = I_ITEM-CHARG.
      <FS_ITEM>-LFIMG     = I_ITEM-LFIMG.
      <FS_ITEM>-BRGEW     = I_ITEM-BRGEW.
      <FS_ITEM>-NTGEW     = I_ITEM-NTGEW.
      <FS_ITEM>-GEWEI     = I_ITEM-GEWEI.
      <FS_ITEM>-VOLUM     = I_ITEM-VOLUM.
      <FS_ITEM>-VOLEH     = I_ITEM-VOLEH.
      <FS_ITEM>-MATNR     = I_ITEM-MATNR.
      <FS_ITEM>-MEINS     = I_ITEM-MEINS.
      <FS_ITEM>-POSNR     = I_ITEM-POSNR.
      <FS_ITEM>-VBELN     = I_ITEM-VBELN.
      <FS_ITEM>-PART_LOTE = I_ITEM-PART_LOTE.

    ENDIF.

  ENDMETHOD.


  METHOD SET_KBETR.
    IF ME->ROMANEIO-KBETR NE I_KBETR.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-KBETR = I_KBETR.
  ENDMETHOD.


  METHOD SET_LOCAL_DESCARGA.
    IF ME->ROMANEIO-LOCAL_DESCARGA NE I_LOCAL_DESCARGA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-LOCAL_DESCARGA = I_LOCAL_DESCARGA.
  ENDMETHOD.


  METHOD SET_MATNR.
    IF ME->ROMANEIO-MATNR NE I_MATNR.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-MATNR = I_MATNR.
  ENDMETHOD.


  METHOD SET_MOTORISTA.
    IF ME->ROMANEIO-MOTORISTA NE I_MOTORISTA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-MOTORISTA = I_MOTORISTA.
  ENDMETHOD.


  METHOD SET_NETWR.
    IF ME->ROMANEIO-NETWR NE I_NETWR.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NETWR = I_NETWR.
  ENDMETHOD.


  METHOD SET_NFE.
    IF ME->ROMANEIO-NFE NE I_NFE.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NFE = I_NFE.
  ENDMETHOD.


  METHOD SET_NFNUM.
    IF ME->ROMANEIO-NFNUM NE I_NFNUM.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NFNUM = I_NFNUM.
  ENDMETHOD.


  METHOD SET_NRO_CG.
    IF ME->ROMANEIO-NRO_CG NE I_NRO_CG.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NRO_CG = I_NRO_CG.
  ENDMETHOD.


  METHOD SET_NRO_NF_FRETE.
    IF ME->ROMANEIO-NRO_NF_FRETE NE I_NRO_NF_FRETE.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NRO_NF_FRETE = I_NRO_NF_FRETE.
  ENDMETHOD.


  METHOD SET_NRO_NF_PROD.
    IF ME->ROMANEIO-NRO_NF_PROD NE I_NRO_NF_PROD.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NRO_NF_PROD = I_NRO_NF_PROD.
  ENDMETHOD.


  METHOD SET_NRO_NF_REM.
    IF ME->ROMANEIO-NRO_NF_REM NE I_NRO_NF_REM.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NRO_NF_REM = I_NRO_NF_REM.
  ENDMETHOD.


  METHOD SET_NR_NOTA_CONTA_OR.
    IF ME->ROMANEIO-NR_NOTA_CONTA_OR NE I_NR_NOTA_CONTA_OR.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_NOTA_CONTA_OR = I_NR_NOTA_CONTA_OR.
  ENDMETHOD.


  METHOD SET_NR_PERC_ARDIDO.
    IF ME->ROMANEIO-NR_PERC_ARDIDO NE I_NR_PERC_ARDIDO.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_ARDIDO = I_NR_PERC_ARDIDO.
  ENDMETHOD.


  METHOD SET_NR_PERC_AVARIA.
    IF ME->ROMANEIO-NR_PERC_AVARIA NE I_NR_PERC_AVARIA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_AVARIA = I_NR_PERC_AVARIA.
  ENDMETHOD.


  METHOD SET_NR_PERC_AVARIA_ARD.
    IF ME->ROMANEIO-NR_PERC_AVA_ARD NE I_NR_PERC_AVARIA_ARD.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_AVA_ARD = I_NR_PERC_AVARIA_ARD.
  ENDMETHOD.


  METHOD SET_NR_PERC_AVARIA_ARQ.
    IF ME->ROMANEIO-NR_PERC_AVA_ARQ NE I_NR_PERC_AVARIA_ARQ.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_AVA_ARQ = I_NR_PERC_AVARIA_ARQ.
  ENDMETHOD.


  METHOD SET_NR_PERC_AVARIA_FER.
    IF ME->ROMANEIO-NR_PERC_AVA_FER NE I_NR_PERC_AVARIA_FER.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_AVA_FER = I_NR_PERC_AVARIA_FER.
  ENDMETHOD.


  METHOD SET_NR_PERC_AVARIA_GER.
    IF ME->ROMANEIO-NR_PERC_AVA_GER NE I_NR_PERC_AVARIA_GER.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_AVA_GER = I_NR_PERC_AVARIA_GER.
  ENDMETHOD.


  METHOD SET_NR_PERC_AVARIA_GES.
    IF ME->ROMANEIO-NR_PERC_AVA_GES NE I_NR_PERC_AVARIA_GES.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_AVA_GES = I_NR_PERC_AVARIA_GES.
  ENDMETHOD.


  METHOD SET_NR_PERC_AVARIA_MOF.
    IF ME->ROMANEIO-NR_PERC_AVA_MOF NE I_NR_PERC_AVARIA_MOF.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_AVA_MOF = I_NR_PERC_AVARIA_MOF.
  ENDMETHOD.


  METHOD SET_NR_PERC_AVARIA_PIC.
    IF ME->ROMANEIO-NR_PERC_AVA_PIC NE I_NR_PERC_AVARIA_PIC.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_AVA_PIC = I_NR_PERC_AVARIA_PIC.
  ENDMETHOD.


  METHOD SET_NR_PERC_AVARIA_QUE.
    IF ME->ROMANEIO-NR_PERC_AVA_QUE NE I_NR_PERC_AVARIA_QUE.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_AVA_QUE = I_NR_PERC_AVARIA_QUE.
  ENDMETHOD.


  METHOD SET_NR_PERC_CARUNCHADO.
    IF ME->ROMANEIO-NR_PERC_CARUNCH NE I_NR_PERC_CARUNCHADO.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_CARUNCH = I_NR_PERC_CARUNCHADO.
  ENDMETHOD.


  METHOD SET_NR_PERC_ESVERD.
    IF ME->ROMANEIO-NR_PERC_ESVERD NE I_NR_PERC_ESVERD.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_ESVERD = I_NR_PERC_ESVERD.
  ENDMETHOD.


  METHOD SET_NR_PERC_IMPUREZA.
    IF ME->ROMANEIO-NR_PERC_IMPUREZA NE I_NR_PERC_IMPUREZA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_IMPUREZA = I_NR_PERC_IMPUREZA.
  ENDMETHOD.


  METHOD SET_NR_PERC_QUEBRA.
    IF ME->ROMANEIO-NR_PERC_QUEBRA NE I_NR_PERC_QUEBRA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_QUEBRA = I_NR_PERC_QUEBRA.
  ENDMETHOD.


  METHOD SET_NR_PERC_UMIDADE.
    IF ME->ROMANEIO-NR_PERC_UMIDADE NE I_NR_PERC_UMIDADE.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_PERC_UMIDADE = I_NR_PERC_UMIDADE.
  ENDMETHOD.


  METHOD SET_NR_QTD_ARDIDO.
    IF ME->ROMANEIO-NR_QTD_ARDIDO NE I_NR_QTD_ARDIDO.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_QTD_ARDIDO = I_NR_QTD_ARDIDO.
  ENDMETHOD.


  METHOD SET_NR_QTD_AVARIA.
    IF ME->ROMANEIO-NR_QTD_AVARIA NE I_NR_QTD_AVARIA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_QTD_AVARIA = I_NR_QTD_AVARIA.
  ENDMETHOD.


  METHOD SET_NR_QTD_CARUNCHADO.
    IF ME->ROMANEIO-NR_QTD_CARUNCH NE I_NR_QTD_CARUNCHADO.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_QTD_CARUNCH = I_NR_QTD_CARUNCHADO.
  ENDMETHOD.


  METHOD SET_NR_QTD_ESVERD.
    IF ME->ROMANEIO-NR_QTD_ESVERD NE I_NR_QTD_ESVERD.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_QTD_ESVERD = I_NR_QTD_ESVERD.
  ENDMETHOD.


  METHOD SET_NR_QTD_IMPUREZA.
    IF ME->ROMANEIO-NR_QTD_IMPUREZA NE I_NR_QTD_IMPUREZA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_QTD_IMPUREZA = I_NR_QTD_IMPUREZA.
  ENDMETHOD.


  METHOD SET_NR_QTD_QUEBRA.
    IF ME->ROMANEIO-NR_QTD_QUEBRA NE I_NR_QTD_QUEBRA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_QTD_QUEBRA = I_NR_QTD_QUEBRA.
  ENDMETHOD.


  METHOD SET_NR_QTD_UMIDADE.
    IF ME->ROMANEIO-NR_QTD_UMIDADE NE I_NR_QTD_UMIDADE.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_QTD_UMIDADE = I_NR_QTD_UMIDADE.
  ENDMETHOD.


  METHOD SET_NR_ROT.
    IF ME->ROMANEIO-NR_ROT NE I_NR_ROT.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_ROT = I_NR_ROT.
  ENDMETHOD.


  METHOD SET_NR_SAFRA.
    IF ME->ROMANEIO-NR_SAFRA NE I_NR_SAFRA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_SAFRA = I_NR_SAFRA.
  ENDMETHOD.


  METHOD SET_NR_SERIE_CONTA_O.
    IF ME->ROMANEIO-NR_SERIE_CONTA_O NE I_NR_SERIE_CONTA_O.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_SERIE_CONTA_O = I_NR_SERIE_CONTA_O.
  ENDMETHOD.


  METHOD SET_NR_TICKET.
    IF ME->ROMANEIO-NR_TICKET NE I_NR_TICKET.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-NR_TICKET = I_NR_TICKET.
  ENDMETHOD.


  METHOD SET_OV_FRETE.
    IF ME->ROMANEIO-OV_FRETE NE I_OV_FRETE.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-OV_FRETE = I_OV_FRETE.
  ENDMETHOD.


  METHOD SET_PARID.

    DATA: LC_PARID TYPE ZPARID.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = I_PARID
      IMPORTING
        OUTPUT = LC_PARID.

    IF ME->ROMANEIO-PARID NE LC_PARID.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.

    ME->ROMANEIO-PARID = LC_PARID.

  ENDMETHOD.


  METHOD SET_PESO_BRUTO.

    IF ME->ROMANEIO-PESO_BRUTO NE I_PESO_BRUTO.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-PESO_BRUTO = I_PESO_BRUTO.

  ENDMETHOD.


  METHOD SET_PESO_FISCAL.
    IF ME->ROMANEIO-PESO_FISCAL NE I_PESO_FISCAL.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-PESO_FISCAL = I_PESO_FISCAL.
  ENDMETHOD.


  METHOD SET_PESO_LIQ.
    IF ME->ROMANEIO-PESO_LIQ NE I_PESO_LIQ.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-PESO_LIQ = I_PESO_LIQ.
  ENDMETHOD.


  METHOD SET_PESO_LIQRET_EST.
    IF ME->ROMANEIO-PESO_LIQRET_EST NE I_PESO_LIQRET_EST.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-PESO_LIQRET_EST = I_PESO_LIQRET_EST.
  ENDMETHOD.


  METHOD SET_PESO_LIQRET_REAL.
    IF ME->ROMANEIO-PESO_LIQRET_REAL NE I_PESO_LIQRET_REAL.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-PESO_LIQRET_REAL = I_PESO_LIQRET_REAL.
  ENDMETHOD.


  METHOD SET_PESO_RETIDO_EST.
    IF ME->ROMANEIO-PESO_RETIDO_EST NE I_PESO_RETIDO_EST.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-PESO_RETIDO_EST = I_PESO_RETIDO_EST.
  ENDMETHOD.


  METHOD SET_PESO_RETIDO_REAL.
    IF ME->ROMANEIO-PESO_RETIDO_REAL NE I_PESO_RETIDO_REAL.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-PESO_RETIDO_REAL = I_PESO_RETIDO_REAL.
  ENDMETHOD.


  METHOD SET_PESO_SUBTOTAL.
    IF ME->ROMANEIO-PESO_SUBTOTAL NE I_PESO_SUBTOTAL.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-PESO_SUBTOTAL = I_PESO_SUBTOTAL.
  ENDMETHOD.


  METHOD SET_PESO_TARA.

    IF ME->ROMANEIO-PESO_TARA NE I_PESO_TARA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-PESO_TARA = I_PESO_TARA.

  ENDMETHOD.


  METHOD SET_PLACA_CAR1.
    IF ME->ROMANEIO-PLACA_CAR1 NE I_PLACA_CAR1.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-PLACA_CAR1 = I_PLACA_CAR1.
  ENDMETHOD.


  METHOD SET_PLACA_CAR2.
    IF ME->ROMANEIO-PLACA_CAR2 NE I_PLACA_CAR2.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-PLACA_CAR2 = I_PLACA_CAR2.
  ENDMETHOD.


  METHOD SET_PLACA_CAR3.
    IF ME->ROMANEIO-PLACA_CAR3 NE I_PLACA_CAR3.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-PLACA_CAR3 = I_PLACA_CAR3.
  ENDMETHOD.


  METHOD SET_PLACA_CAV.
    IF ME->ROMANEIO-PLACA_CAV NE I_PLACA_CAV.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-PLACA_CAV = I_PLACA_CAV.
  ENDMETHOD.


  METHOD SET_REGION.
    IF ME->ROMANEIO-REGION NE I_REGION.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-REGION = I_REGION.
  ENDMETHOD.


  METHOD SET_SEQ_LCTO.
    IF ME->ROMANEIO-SEQ_LCTO NE I_SEQ_LCTO.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-SEQ_LCTO = I_SEQ_LCTO.
  ENDMETHOD.


  METHOD SET_SERIES.
    IF ME->ROMANEIO-SERIES NE I_SERIES.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-SERIES = I_SERIES.
  ENDMETHOD.


  METHOD SET_STATUS.
    IF ME->ROMANEIO-STATUS NE I_STATUS.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-STATUS = I_STATUS.
  ENDMETHOD.


  METHOD SET_ST_PROC.
    IF ME->ROMANEIO-ST_PROC NE I_ST_PROC.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-ST_PROC = I_ST_PROC.
  ENDMETHOD.


  METHOD SET_TIPO_ENTRADA.
    IF ME->ROMANEIO-TIPO_ENTRADA NE I_TIPO_ENTRADA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-TIPO_ENTRADA = I_TIPO_ENTRADA.
  ENDMETHOD.


  METHOD SET_TKNUM.
    IF ME->ROMANEIO-TKNUM NE I_TKNUM.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-TKNUM = I_TKNUM.
  ENDMETHOD.


  METHOD SET_TP_FRETE.
    IF ME->ROMANEIO-TP_FRETE NE I_TP_FRETE.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-TP_FRETE = I_TP_FRETE.
  ENDMETHOD.


  METHOD SET_TP_MOVIMENTO.
    IF ME->ROMANEIO-TP_MOVIMENTO NE I_TP_MOVIMENTO.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-TP_MOVIMENTO = I_TP_MOVIMENTO.
  ENDMETHOD.


  METHOD SET_TP_TRANSGENIA.
    IF ME->ROMANEIO-TP_TRANSGENIA NE I_TP_TRANSGENIA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-TP_TRANSGENIA = I_TP_TRANSGENIA.
  ENDMETHOD.


  METHOD SET_VBELN.
    IF ME->ROMANEIO-VBELN NE I_VBELN.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-VBELN = I_VBELN.
  ENDMETHOD.


  METHOD SET_VINC_TOT_AQUAV.
    IF ME->ROMANEIO-VINC_TOT_AQUAV NE I_VINC_TOT_AQUAV.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.
    ME->ROMANEIO-VINC_TOT_AQUAV = I_VINC_TOT_AQUAV.
  ENDMETHOD.


  METHOD ZIF_CADASTRO~EXCLUIR_REGISTRO.

    DATA: LC_EXCLUIDO TYPE ZSDT0001EX.

    I_EXCLUIU = ABAP_FALSE.

    IF ME->VALIDAR_EXCLUSAO( ) EQ ABAP_TRUE.

      MOVE-CORRESPONDING ME->ROMANEIO TO LC_EXCLUIDO.
      LC_EXCLUIDO-DT_REGISTRO = SY-DATLO.
      LC_EXCLUIDO-HR_REGISTRO = SY-TIMLO.
      LC_EXCLUIDO-US_REGISTRO = SY-UNAME.
      MODIFY ZSDT0001EX FROM LC_EXCLUIDO.

      DELETE FROM ZSDT0001_ITEM WHERE CH_REFERENCIA EQ ME->ROMANEIO-CH_REFERENCIA.
      DELETE FROM ZSDT0001      WHERE CH_REFERENCIA EQ ME->ROMANEIO-CH_REFERENCIA.
      COMMIT WORK.

      I_EXCLUIU = ABAP_TRUE.
      MESSAGE S002.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~GET_REGISTRO.

    MOVE-CORRESPONDING ME->ROMANEIO TO E_REGISTRO.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~GRAVAR_REGISTRO.

    DATA: LC_ITEM TYPE ZSDT0001_ITEM-CD_ITEM.

    I_GRAVOU = ABAP_FALSE.

    IF ME->CK_ALTEROU EQ ABAP_TRUE.

      IF ME->VALIDAR_REGISTRO( ) EQ ABAP_TRUE.

        IF ME->ROMANEIO-CH_REFERENCIA IS INITIAL.
          CALL FUNCTION 'NUMBER_GET_NEXT'
            EXPORTING
              NR_RANGE_NR             = '01'
              OBJECT                  = 'ZSD_CH_R14'
            IMPORTING
              NUMBER                  = ME->ROMANEIO-CH_REFERENCIA
            EXCEPTIONS
              INTERVAL_NOT_FOUND      = 1
              NUMBER_RANGE_NOT_INTERN = 2
              OBJECT_NOT_FOUND        = 3
              QUANTITY_IS_0           = 4
              QUANTITY_IS_NOT_1       = 5
              INTERVAL_OVERFLOW       = 6
              BUFFER_OVERFLOW         = 7
              OTHERS                  = 8.

          IF SY-SUBRC IS NOT INITIAL.
            RAISE EXCEPTION TYPE ZCX_CADASTRO
              EXPORTING
                TEXTID = VALUE #( MSGID = SY-MSGID
                                  MSGNO = SY-MSGNO
                                  ATTR1 = CONV #( SY-MSGV1 )
                                  ATTR2 = CONV #( SY-MSGV2 )
                                  ATTR3 = CONV #( SY-MSGV3 )
                                  ATTR4 = CONV #( SY-MSGV4 ) )
                MSGID  = SY-MSGID
                MSGNO  = SY-MSGNO
                MSGTY  = 'E'
                MSGV1  = SY-MSGV1
                MSGV2  = SY-MSGV2
                MSGV3  = SY-MSGV3
                MSGV4  = SY-MSGV4.
          ENDIF.

          CONCATENATE 'RO' ME->ROMANEIO-CH_REFERENCIA INTO ME->ROMANEIO-CH_REFERENCIA.

          TRY.
              CALL METHOD ZCL_ROMANEIO_NUMERO=>GET_NEXT_NUMBER
                EXPORTING
                  I_BRANCH    = ME->ROMANEIO-BRANCH
                  I_SAFRA     = ME->ROMANEIO-NR_SAFRA
                  I_INTERFACE = ME->ROMANEIO-ID_INTERFACE
                RECEIVING
                  R_NUMERO    = ME->ROMANEIO-NR_ROMANEIO.

            CATCH ZCX_ROMANEIO_EXCEPTION .
              RAISE EXCEPTION TYPE ZCX_CADASTRO
                EXPORTING
                  TEXTID = VALUE #( MSGID = SY-MSGID
                                    MSGNO = SY-MSGNO
                                    ATTR1 = CONV #( SY-MSGV1 )
                                    ATTR2 = CONV #( SY-MSGV2 )
                                    ATTR3 = CONV #( SY-MSGV3 )
                                    ATTR4 = CONV #( SY-MSGV4 ) )
                  MSGID  = SY-MSGID
                  MSGNO  = SY-MSGNO
                  MSGTY  = SY-MSGTY
                  MSGV1  = SY-MSGV1
                  MSGV2  = SY-MSGV2
                  MSGV3  = SY-MSGV3
                  MSGV4  = SY-MSGV4.
          ENDTRY.
        ENDIF.

        MODIFY ZSDT0001 FROM ME->ROMANEIO.

        LC_ITEM = 0.
        LOOP AT ME->ITENS INTO DATA(WA_ITEM) WHERE CD_ITEM(1) NE '$'.
          IF LC_ITEM LE WA_ITEM-CD_ITEM.
            LC_ITEM = WA_ITEM-CD_ITEM.
          ENDIF.
        ENDLOOP.

        LOOP AT ME->ITENS ASSIGNING FIELD-SYMBOL(<FS_ITENS>).

          IF <FS_ITENS>-CD_ITEM(1) EQ '$'.
            ADD 1 TO LC_ITEM.

            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                INPUT  = LC_ITEM
              IMPORTING
                OUTPUT = <FS_ITENS>-CD_ITEM.
          ENDIF.

          <FS_ITENS>-CH_REFERENCIA = ME->ROMANEIO-CH_REFERENCIA.

        ENDLOOP.

        LOOP AT ME->FARDOS ASSIGNING FIELD-SYMBOL(<FS_FARDOS>).
          <FS_FARDOS>-CH_REFERENCIA = ME->ROMANEIO-CH_REFERENCIA.
        ENDLOOP.

        DELETE FROM ZSDT0001_ITEM WHERE CH_REFERENCIA = ME->ROMANEIO-CH_REFERENCIA.
        DELETE FROM ZSDT0001_ITEM_FD WHERE CH_REFERENCIA = ME->ROMANEIO-CH_REFERENCIA.

        IF ME->ITENS IS NOT INITIAL.
          MODIFY ZSDT0001_ITEM FROM TABLE ME->ITENS.
        ENDIF.

        IF ME->FARDOS IS NOT INITIAL.
          MODIFY ZSDT0001_ITEM_FD FROM TABLE ME->FARDOS.
        ENDIF.

*-IR063194 - 22.07.2021 - JT - inicio
        IF ME->GET_COMMIT( ) EQ ABAP_FALSE.
          COMMIT WORK.
        ENDIF.
*-IR063194 - 22.07.2021 - JT - fim

        ME->CK_ALTEROU = ABAP_FALSE.
        I_GRAVOU = ABAP_TRUE.
        MESSAGE S001.

      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~LIMPAR_REGISTRO.

    CLEAR: ME->ROMANEIO,
           ME->ITENS,
           ME->FARDOS.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~NOVO_REGISTRO.
    ME->LIMPAR_REGISTRO( ).
  ENDMETHOD.


  METHOD ZIF_CADASTRO~SET_REGISTRO.

    ME->LIMPAR_REGISTRO( ).

    SELECT SINGLE * INTO ME->ROMANEIO FROM ZSDT0001 WHERE CH_REFERENCIA EQ I_ID_REGISTRO.

    IF SY-SUBRC IS INITIAL.

      SELECT * INTO TABLE @DATA(IT_ZSDT0001_ITEM) FROM ZSDT0001_ITEM WHERE CH_REFERENCIA EQ @I_ID_REGISTRO.
      MOVE IT_ZSDT0001_ITEM[] TO ME->ITENS.

      ME->CK_ALTEROU = ABAP_FALSE.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~VALIDAR_EXCLUSAO.

    E_VALIDOU = ABAP_FALSE.

*    IF SY-TCODE NE 'VT02N' AND SY-TCODE NE 'VT01N' AND SY-TCODE NE 'ZLES0106' AND SY-TCODE NE 'ZLES0113' AND SY-TCODE NE 'ZLES0115'.
*      AUTHORITY-CHECK OBJECT 'ZREPOM' ID 'BUKRS'     FIELD ME->BUKRS
*                                      ID 'ZREPOMATV' FIELD '10'.
*      IF SY-SUBRC IS NOT INITIAL.
*        MESSAGE S063 DISPLAY LIKE 'E'.
*        EXIT.
*      ENDIF.
*    ENDIF.
*
*    CASE ME->TP_STATUS_AUT.
*      WHEN '2'.
*        MESSAGE S044 DISPLAY LIKE 'E'.
*        EXIT.
*      WHEN '3'.
*        MESSAGE S045 DISPLAY LIKE 'E'.
*        EXIT.
*    ENDCASE.

    CASE  ME->ROMANEIO-ID_INTERFACE.
      WHEN '48'.
        IF ME->ROMANEIO-DOC_REM IS NOT INITIAL.
          MESSAGE S015 DISPLAY LIKE 'E'.
          EXIT.
        ENDIF.
    ENDCASE.

    E_VALIDOU = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~VALIDAR_REGISTRO.

    E_VALIDOU = ABAP_FALSE.

    IF ME->ROMANEIO-BUKRS IS INITIAL.
      MESSAGE S003 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ME->ROMANEIO-BRANCH IS INITIAL.
      MESSAGE S004 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ME->ROMANEIO-NR_SAFRA IS INITIAL.
      MESSAGE S005 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ME->ROMANEIO-TP_MOVIMENTO IS INITIAL.
      MESSAGE S006 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ME->ROMANEIO-TP_MOVIMENTO NE ZCL_ROMANEIO=>ST_TP_MOVIMENTO_ENTRADA AND
       ME->ROMANEIO-TP_MOVIMENTO NE ZCL_ROMANEIO=>ST_TP_MOVIMENTO_SAIDA.
      MESSAGE S007 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ME->ROMANEIO-DT_MOVIMENTO IS INITIAL.
      MESSAGE S008 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ME->ROMANEIO-DT_MOVIMENTO LT SY-DATLO AND ME->ROMANEIO-CH_REFERENCIA IS INITIAL AND ME->CK_PERMITE_DATA_RETROATIVA EQ ABAP_FALSE.
      MESSAGE S009 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ME->ROMANEIO-PARID IS INITIAL.
      MESSAGE S010 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ME->ROMANEIO-ID_CLI_DEST IS INITIAL.
      MESSAGE S011 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ME->ROMANEIO-ID_INTERFACE IS INITIAL.
      MESSAGE S012 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF NOT
      ( ME->ROMANEIO-ID_INTERFACE EQ ZCL_ROMANEIO=>INTERFACE_IB_ROMANEIO OR
        ME->ROMANEIO-ID_INTERFACE EQ ZCL_ROMANEIO=>INTERFACE_SEME_SEM_PESO_OPUS OR
        ME->ROMANEIO-ID_INTERFACE EQ ZCL_ROMANEIO=>INTERFACE_FERT_SEM_PESO_OPUS OR
        ME->ROMANEIO-ID_INTERFACE EQ ZCL_ROMANEIO=>INTERFACE_DEFE_SEM_PESO_OPUS OR
        ME->ROMANEIO-ID_INTERFACE EQ ZCL_ROMANEIO=>INTERFACE_INS_FATURA_FRETE OR
        ME->ROMANEIO-ID_INTERFACE EQ ZCL_ROMANEIO=>INTERFACE_REM_ARM_NFE_INBOUND OR
        ME->ROMANEIO-ID_INTERFACE EQ ZCL_ROMANEIO=>INTERFACE_CARGA_SAP ).
      MESSAGE S013 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ME->ROMANEIO-ID_INTERFACE EQ ZCL_ROMANEIO=>INTERFACE_CARGA_SAP.

      IF ME->ROMANEIO-ID_CARGA IS INITIAL.
        MESSAGE S016 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      IF ( ME->ROMANEIO-ID_CARGA IS INITIAL OR ME->ROMANEIO-ID_NOTA IS INITIAL ) AND
         ME->ROMANEIO-TP_MOVIMENTO EQ ZCL_ROMANEIO=>ST_TP_MOVIMENTO_ENTRADA.
        MESSAGE S017 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

    ENDIF.

    E_VALIDOU = ABAP_TRUE.


  ENDMETHOD.


  METHOD ZIF_CADASTRO~VALIDA_ATRIBUTO_ALTERAVEL.

    R_PERMITIDO = ABAP_TRUE.

  ENDMETHOD.


  METHOD SET_MENSAGEM_OPUS.

    DATA: T_SET                     TYPE TABLE OF RGSB4,
          W_SET                     TYPE RGSB4,
          L_SEGUNDOS_PAR            TYPE I,
          L_SEGUNDOS_EXEC           TYPE I,
          LC_FATURAMENTO_AUTOMATICO TYPE REF TO ZCL_FATURAMENTO_AUTOMATICO.

    CREATE OBJECT LC_FATURAMENTO_AUTOMATICO.

*----------------------------------------
*-- tempo para validacao
*----------------------------------------
    CALL FUNCTION 'G_SET_GET_ALL_VALUES'
      EXPORTING
        CLASS         = '0000'
        SETNR         = 'ZLES0136_TIME_OPUS'
      TABLES
        SET_VALUES    = T_SET
      EXCEPTIONS
        SET_NOT_FOUND = 1
        OTHERS        = 2.

    READ TABLE T_SET INTO W_SET INDEX 1.
    IF SY-SUBRC = 0.
      L_SEGUNDOS_PAR = W_SET-FROM.
    ENDIF.

*----------------------------------------
*-- recupera romaneio
*----------------------------------------
    SELECT SINGLE *
      INTO @DATA(WA_ZSDT0001)
      FROM ZSDT0001
     WHERE CH_REFERENCIA EQ @I_CH_REFERENCIA.

    CHECK SY-SUBRC = 0.

*----------------------------------------
*-- calcula segundos
*----------------------------------------
    CL_ABAP_TSTMP=>TD_SUBTRACT( EXPORTING DATE1    = WA_ZSDT0001-DT_CRIACAO
                                          TIME1    = WA_ZSDT0001-HR_CRIACAO
                                          DATE2    = SY-DATUM
                                          TIME2    = SY-UZEIT
                                IMPORTING RES_SECS = L_SEGUNDOS_EXEC ).

    L_SEGUNDOS_EXEC = ABS( L_SEGUNDOS_EXEC ).

*----------------------------------------
*-- saida mensagens
*----------------------------------------
    IF L_SEGUNDOS_EXEC <= L_SEGUNDOS_PAR.
      CASE I_FATURAMENTO_AUTOM.
        WHEN ABAP_OFF.
          E_MENSAGEM = 'Dados adicionais do Romaneio em integração no SAP pelo OPUS!' && 'Aguarde uns instantes e faça nova tentativa.'.

          IF I_POPUP = ABAP_TRUE.
            CALL FUNCTION 'S_AUT_POPUP_TO_DISPLAY_TEXT_LO'
              EXPORTING
                IV_TITEL        = 'Erro Integração OPUS!'
                IV_TEXTLINE1    = 'Dados adicionais do Romaneio em integração no SAP pelo OPUS!'
                IV_TEXTLINE2    = 'Aguarde uns instantes e faça nova tentativa.'
                IV_TEXTLINE3    = ''
                IV_START_COLUMN = 20
                IV_START_ROW    = 10.
          ENDIF.

        WHEN ABAP_TRUE.
          DATA(L_MESG) = 'Dados adicionais do Romaneio em integração no SAP pelo OPUS!' && 'Aguarde uns instantes e faça nova tentativa.'.
          LC_FATURAMENTO_AUTOMATICO->SET_GRAVAR_MENSAGEM( I_CH_REFERENCIA = I_CH_REFERENCIA I_TYPE = 'E' I_MSG = L_MESG I_STATUS = 'REME' ).
      ENDCASE.
    ELSE.
      CASE I_FATURAMENTO_AUTOM.
        WHEN ABAP_OFF.
          E_MENSAGEM = 'Dados adicionais do romaneio não integrados no SAP pelo OPUS!' && 'Abrir um IR para Suporte OPUS!'.

          IF I_POPUP = ABAP_TRUE.
            CALL FUNCTION 'S_AUT_POPUP_TO_DISPLAY_TEXT_LO'
              EXPORTING
                IV_TITEL        = 'Erro Integração OPUS!'
                IV_TEXTLINE1    = 'Dados adicionais do romaneio não integrados no SAP pelo OPUS!'
                IV_TEXTLINE2    = 'Abrir um IR para Suporte OPUS!'
                IV_TEXTLINE3    = ''
                IV_START_COLUMN = 20
                IV_START_ROW    = 10.
          ENDIF.

        WHEN ABAP_TRUE.
          L_MESG = 'Dados adicionais do romaneio não integrados no SAP pelo OPUS!' && 'Abrir um IR para Suporte OPUS!'.
          LC_FATURAMENTO_AUTOMATICO->SET_GRAVAR_MENSAGEM( I_CH_REFERENCIA = I_CH_REFERENCIA I_TYPE = 'E' I_MSG = L_MESG I_STATUS = 'REME' ).
      ENDCASE.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~SET_REGISTROEX.
    ME->LIMPAR_REGISTRO( ).

    SELECT SINGLE * INTO CORRESPONDING FIELDS OF ME->ROMANEIO FROM ZSDT0001EX WHERE CH_REFERENCIA EQ I_ID_REGISTRO.
    IF SY-SUBRC NE 0.
      SELECT SINGLE * INTO CORRESPONDING FIELDS OF ME->ROMANEIO FROM ZSDT0001 WHERE CH_REFERENCIA EQ I_ID_REGISTRO.
    ENDIF.
  ENDMETHOD.


  METHOD SET_DADOS_EUDR.

    IF ME->ROMANEIO-EUDR NE I_DADOS_EUDR-EUDR.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.

    IF ME->ROMANEIO-PROTOCOLO_EUDR NE I_DADOS_EUDR-PROTOCOLO_EUDR.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.

    IF ME->ROMANEIO-ID_PROTOCOLO_EUDR NE I_DADOS_EUDR-ID_PROTOCOLO_EUDR.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.

    ME->ROMANEIO-EUDR              = I_DADOS_EUDR-EUDR.
    ME->ROMANEIO-PROTOCOLO_EUDR    = I_DADOS_EUDR-PROTOCOLO_EUDR.
    ME->ROMANEIO-ID_PROTOCOLO_EUDR = I_DADOS_EUDR-ID_PROTOCOLO_EUDR.

  ENDMETHOD.


  METHOD SET_ROMANEIO_COMPLETO.
    ME->ROMANEIO-ROMANEIO_COMPLETO = I_ROMANEIO_COMPLETO.
  ENDMETHOD.
ENDCLASS.
