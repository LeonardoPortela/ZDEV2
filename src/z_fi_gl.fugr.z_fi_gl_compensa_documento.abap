FUNCTION z_fi_gl_compensa_documento.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  TABLES
*"      IT_COMPENSAR STRUCTURE  ZDE_DOC_VALOR
*"      IT_RETORNO STRUCTURE  BAPIRET2
*"  EXCEPTIONS
*"      ERRO_BLOQUEIO
*"      CLIENT_INCORRECT
*"      FUNCTION_INVALID
*"      GROUP_NAME_MISSING
*"      MODE_INVALID
*"      UPDATE_INVALID
*"      ERRO
*"      CLEARING_PROCEDURE_INVALID
*"      CLEARING_PROCEDURE_MISSING
*"      TABLE_T041A_EMPTY
*"      TRANSACTION_CODE_INVALID
*"      AMOUNT_FORMAT_ERROR
*"      TOO_MANY_LINE_ITEMS
*"      COMPANY_CODE_INVALID
*"      SCREEN_NOT_FOUND
*"      NO_AUTHORIZATION
*"      SESSION_NOT_PROCESSABLE
*"----------------------------------------------------------------------

  FIELD-SYMBOLS: <DSCOMPE> TYPE ZDE_DOC_VALOR,
                 <DSTOTA>  TYPE ZDE_TOTALIZA_DOC,
                 <FS_BSEG> TYPE BSEG.

  DATA: IT_BSEG       TYPE TABLE OF BSEG WITH HEADER LINE,
        IT_BSEG_K     TYPE TABLE OF BSEG WITH HEADER LINE,
        IT_BSEG_C     TYPE TABLE OF BSEG WITH HEADER LINE,
        IT_BSEG_AUX   TYPE TABLE OF BSEG WITH HEADER LINE,
        IT_LFB1       TYPE TABLE OF LFB1 WITH HEADER LINE,
        IT_KNB1       TYPE TABLE OF KNB1 WITH HEADER LINE,
        IT_TOTALIZA   TYPE TABLE OF ZDE_TOTALIZA_DOC WITH HEADER LINE,
        LC_DOCUMENTO  TYPE I,
        LC_DOC_STR    TYPE ZCHAR02,
        LC_GSBER      TYPE GSBER,
        LC_DMBTR      TYPE DMBTR,
        LC_DMBTR_RES  TYPE DMBTR,
        LC_ITEM_SHDB  TYPE BUZEI,
        CK_CONTINUAR  TYPE C LENGTH 1,
        LC_MSG_NO     TYPE T100-MSGNR,
        LC_DATE_VL    TYPE CHAR16,
        WA_USR01      TYPE USR01,
        LC_PATTERN    TYPE C LENGTH 1,
        LC_SUBSTITUTE TYPE C LENGTH 1,
        I             TYPE I,
        CK_RESIDUAL   TYPE CHAR01,
        "AUSGZAHL	Saída de pagamentos
        "EINGZAHL	Entrada de pagamentos
        "GUTSCHRI	Crédito
        "UMBUCHNG	Transferência c/compensação
        LC_AUGLV      TYPE T041A-AUGLV.

  SELECT SINGLE * INTO WA_USR01 FROM USR01 WHERE BNAME EQ SY-UNAME.

*   1.234.567,89
* X	1,234,567.89
* Y	1 234 567,89

  CASE WA_USR01-DCPFM.
    WHEN SPACE.
      LC_PATTERN    = '.'.
      LC_SUBSTITUTE = ','.
    WHEN 'X'.
      LC_PATTERN    = ','.
      LC_SUBSTITUTE = '.'.
    WHEN 'Y'.
      LC_PATTERN    = ' '.
      LC_SUBSTITUTE = ','.
  ENDCASE.


  "SHDB - STANDARD ------------------------
  CONSTANTS:
    LC_TCODE   TYPE SY-TCODE      VALUE 'FB05',     "You get an error with any other value
    LC_SGFUNCT TYPE RFIPI-SGFUNCT VALUE 'C'.        "Post immediately

  DATA:
    LC_MODE    LIKE RFPDO-ALLGAZMD.             "modo de abertura do SHDB

  DATA:
    IT_BLNTAB  TYPE STANDARD TABLE OF BLNTAB  WITH HEADER LINE,
    IT_FTCLEAR TYPE STANDARD TABLE OF FTCLEAR WITH HEADER LINE,
    IT_FTPOST  TYPE STANDARD TABLE OF FTPOST  WITH HEADER LINE,
    IT_FTTAX   TYPE STANDARD TABLE OF FTTAX   WITH HEADER LINE,
    LC_RETURN  TYPE BAPIRET2.

  CALL FUNCTION 'FAGL_GET_BSEG_FOR_ALL_ENTRIES'
    EXPORTING IT_FOR_ALL_ENTRIES = IT_COMPENSAR
              I_WHERE_CLAUSE = |BUKRS EQ IT_FOR_ALL_ENTRIES-BUKRS AND BELNR EQ IT_FOR_ALL_ENTRIES-BELNR AND GJAHR EQ IT_FOR_ALL_ENTRIES-GJAHR AND BUZEI EQ IT_FOR_ALL_ENTRIES-BUZEI|
    IMPORTING ET_BSEG = IT_BSEG[]
    EXCEPTIONS NOT_FOUND = 1.
IF SY-SUBRC = 0 AND LINES( IT_BSEG[] ) > 0.
  MOVE-CORRESPONDING IT_BSEG[] TO IT_BSEG[].
  SY-DBCNT = LINES( IT_BSEG[] ).
ELSE.
  SY-SUBRC = 4.
  SY-DBCNT = 0.
ENDIF.


  SORT IT_BSEG BY BUKRS BELNR GJAHR BUZEI.

  IF IT_BSEG[] IS NOT INITIAL.
    CALL FUNCTION 'FAGL_GET_BSEG_FOR_ALL_ENTRIES'
    EXPORTING IT_FOR_ALL_ENTRIES = IT_BSEG[]
              I_WHERE_CLAUSE =
 |BUKRS EQ IT_FOR_ALL_ENTRIES-BUKRS AND BELNR EQ IT_FOR_ALL_ENTRIES-BELNR AND GJAHR EQ IT_FOR_ALL_ENTRIES-GJAHR AND BUZEI NE IT_FOR_ALL_ENTRIES-BUZEI AND KUNNR EQ IT_FOR_ALL_ENTRIES-KUNNR AND KUNNR NE SPACE AND AUGBL EQ SPACE|
    IMPORTING ET_BSEG = IT_BSEG_AUX[]
    EXCEPTIONS NOT_FOUND = 1.
IF SY-SUBRC = 0 AND LINES( IT_BSEG_AUX[] ) > 0.
  MOVE-CORRESPONDING IT_BSEG_AUX[] TO IT_BSEG_AUX[].
  SY-DBCNT = LINES( IT_BSEG_AUX[] ).
ELSE.
  SY-SUBRC = 4.
  SY-DBCNT = 0.
ENDIF.


    DATA ETL116C4R9163 TYPE TABLE OF BSEG.
CALL FUNCTION 'FAGL_GET_BSEG_FOR_ALL_ENTRIES'
    EXPORTING IT_FOR_ALL_ENTRIES = IT_BSEG[]
              I_WHERE_CLAUSE =
 |BUKRS EQ IT_FOR_ALL_ENTRIES-BUKRS AND BELNR EQ IT_FOR_ALL_ENTRIES-BELNR AND GJAHR EQ IT_FOR_ALL_ENTRIES-GJAHR AND BUZEI NE IT_FOR_ALL_ENTRIES-BUZEI AND LIFNR EQ IT_FOR_ALL_ENTRIES-LIFNR AND LIFNR NE SPACE AND AUGBL EQ SPACE|
    IMPORTING ET_BSEG = ETL116C4R9163
    EXCEPTIONS NOT_FOUND = 1.
IF SY-SUBRC = 0 AND LINES( ETL116C4R9163 ) > 0.
  APPEND LINES OF ETL116C4R9163 TO IT_BSEG_AUX.
  SY-DBCNT = LINES( ETL116C4R9163 ).
ELSE.
  SY-SUBRC = 4.
  SY-DBCNT = 0.
ENDIF.

  ENDIF.

  IF IT_BSEG_AUX[] IS NOT INITIAL.
    SORT IT_BSEG_AUX BY BUKRS BELNR GJAHR BUZEI.
    LOOP AT IT_BSEG.
      READ TABLE IT_BSEG_AUX WITH KEY BUKRS = IT_BSEG-BUKRS
                                      BELNR = IT_BSEG-BELNR
                                      GJAHR = IT_BSEG-GJAHR
                                      BUZEI = IT_BSEG-BUZEI.
      IF SY-SUBRC IS INITIAL.
        DELETE IT_BSEG_AUX INDEX SY-TABIX.
      ENDIF.
    ENDLOOP.
  ENDIF.

  SORT IT_BSEG BY BUKRS BELNR GJAHR BUZEI.

  CHECK IT_BSEG[] IS NOT INITIAL.

  LOOP AT IT_BSEG.
    IF IT_BSEG-ZLSPR IS NOT INITIAL.
      MESSAGE E035(ZFI) WITH IT_BSEG-BELNR RAISING ERRO_BLOQUEIO.
    ENDIF.
  ENDLOOP.

  CLEAR: IT_BSEG_K[].
  MOVE IT_BSEG[] TO IT_BSEG_K[].
  DELETE IT_BSEG_K WHERE LIFNR EQ SPACE.

  CLEAR: IT_BSEG_C[].
  MOVE IT_BSEG[] TO IT_BSEG_C[].
  DELETE IT_BSEG_K WHERE KUNNR EQ SPACE.

  IF IT_BSEG_K[] IS NOT INITIAL.
    SELECT * INTO TABLE IT_LFB1
      FROM LFB1
       FOR ALL ENTRIES IN IT_BSEG_K
     WHERE LIFNR EQ IT_BSEG_K-LIFNR
       AND BUKRS EQ IT_BSEG_K-BUKRS.
    LOOP AT IT_LFB1.
      IF IT_LFB1-ZAHLS IS NOT INITIAL.
        MESSAGE E671(F5) WITH IT_LFB1-LIFNR IT_LFB1-ZAHLS RAISING ERRO_BLOQUEIO.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF IT_BSEG_C[] IS NOT INITIAL.
    SELECT * INTO TABLE IT_KNB1
      FROM KNB1
       FOR ALL ENTRIES IN IT_BSEG_C
     WHERE KUNNR EQ IT_BSEG_C-KUNNR
       AND BUKRS EQ IT_BSEG_C-BUKRS.
    LOOP AT IT_KNB1.
      IF IT_KNB1-ZAHLS IS NOT INITIAL.
        MESSAGE E671(F5) WITH IT_KNB1-KUNNR IT_KNB1-ZAHLS RAISING ERRO_BLOQUEIO.
      ENDIF.
    ENDLOOP.
  ENDIF.

  SORT IT_COMPENSAR BY PARID.
  LC_DOCUMENTO = 0.

  LOOP AT IT_COMPENSAR ASSIGNING <DSCOMPE>.
    CLEAR: LC_GSBER, CK_CONTINUAR.

    READ TABLE IT_BSEG WITH KEY BUKRS = IT_COMPENSAR-BUKRS
                                BELNR = IT_COMPENSAR-BELNR
                                GJAHR = IT_COMPENSAR-GJAHR
                                BUZEI = IT_COMPENSAR-BUZEI BINARY SEARCH.
    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ELSE.
      LC_GSBER = IT_BSEG-GSBER.
    ENDIF.

    "Somente concatenar um no contador, não pode passar de 10
    CLEAR: IT_TOTALIZA.
    LOOP AT IT_TOTALIZA ASSIGNING <DSTOTA>
         WHERE KONTO     EQ <DSCOMPE>-KONTO     "Nº conta ou matchcode para conta a ser contabilizada
           AND BUKRS     EQ <DSCOMPE>-BUKRS     "Empresa
           AND GSBER     EQ LC_GSBER            "Divisão
           AND PARID     EQ <DSCOMPE>-PARID     "Identificação do parceiro (cliente, fornecedor, loc.negócio)
           AND KOART     EQ <DSCOMPE>-KOART     "Tipo de conta
           AND WAERS     EQ <DSCOMPE>-WAERS     "Código da moeda
           AND BUDAT     EQ <DSCOMPE>-BUDAT     "Data de Lançamento
           AND BLDAT     EQ <DSCOMPE>-BLDAT.    "Data do Documento
      CK_CONTINUAR = 'X'.
      ADD 1 TO <DSTOTA>-CONTADOR.
      IF ( <DSCOMPE>-KOART EQ 'D' AND <DSCOMPE>-SHKZG EQ 'S' ) OR "Cliente/Debito
         ( <DSCOMPE>-KOART EQ 'K' AND <DSCOMPE>-SHKZG EQ 'H' ).   "Fornecedor/Credito
        ADD <DSCOMPE>-DMBTR     TO <DSTOTA>-DMBTR.
        ADD <DSCOMPE>-DMBTR_RES TO <DSTOTA>-DMBTR_RES.
      ELSEIF ( <DSCOMPE>-KOART EQ 'D' AND <DSCOMPE>-SHKZG EQ 'H' ) OR "Cliente/Credito
             ( <DSCOMPE>-KOART EQ 'K' AND <DSCOMPE>-SHKZG EQ 'S' ).   "Fornecedor/Debito
        LC_DMBTR     = <DSCOMPE>-DMBTR * -1.
        LC_DMBTR_RES = <DSCOMPE>-DMBTR_RES * -1.
        ADD LC_DMBTR     TO <DSTOTA>-DMBTR.
        ADD LC_DMBTR_RES TO <DSTOTA>-DMBTR_RES.
      ENDIF.
      <DSCOMPE>-DOCUMENTO = <DSTOTA>-DOCUMENTO.

      IF <DSTOTA>-ZFBDT_RES IS INITIAL AND <DSCOMPE>-ZFBDT_RES IS NOT INITIAL.
        <DSTOTA>-ZFBDT_RES = <DSCOMPE>-ZFBDT_RES.
      ENDIF.

      IF <DSTOTA>-SGTXT IS INITIAL AND <DSCOMPE>-SGTXT IS NOT INITIAL.
        <DSTOTA>-SGTXT = <DSCOMPE>-SGTXT.
      ENDIF.

      IF <DSTOTA>-AUGTX IS INITIAL AND <DSCOMPE>-AUGTX IS NOT INITIAL.
        <DSTOTA>-AUGTX = <DSCOMPE>-AUGTX.
      ENDIF.
    ENDLOOP.

    "Cria um novo documento
    IF CK_CONTINUAR NE 'X'.
      ADD 1 TO LC_DOCUMENTO.
      MOVE LC_DOCUMENTO TO <DSCOMPE>-DOCUMENTO.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = <DSCOMPE>-DOCUMENTO
        IMPORTING
          OUTPUT = <DSCOMPE>-DOCUMENTO.
      IT_TOTALIZA-KONTO     = <DSCOMPE>-KONTO.
      IT_TOTALIZA-BUKRS     = <DSCOMPE>-BUKRS.
      IT_TOTALIZA-GSBER     = LC_GSBER.
      IT_TOTALIZA-PARID     = <DSCOMPE>-PARID.
      IT_TOTALIZA-KOART     = <DSCOMPE>-KOART.

      IF IT_TOTALIZA-ZFBDT_RES IS INITIAL AND <DSCOMPE>-ZFBDT_RES IS NOT INITIAL.
        IT_TOTALIZA-ZFBDT_RES = <DSCOMPE>-ZFBDT_RES.
      ENDIF.

      IT_TOTALIZA-WAERS     = <DSCOMPE>-WAERS.
      IT_TOTALIZA-BUDAT     = <DSCOMPE>-BUDAT.
      IT_TOTALIZA-BLDAT     = <DSCOMPE>-BLDAT.
      IT_TOTALIZA-DOCUMENTO = <DSCOMPE>-DOCUMENTO.
      IT_TOTALIZA-SGTXT     = <DSCOMPE>-SGTXT.
      IT_TOTALIZA-AUGTX     = <DSCOMPE>-AUGTX.
      IT_TOTALIZA-XBLNR     = <DSCOMPE>-XBLNR.
      IT_TOTALIZA-UMSKZ     = <DSCOMPE>-UMSKZ.

      IF ( <DSCOMPE>-KOART EQ 'D' AND <DSCOMPE>-SHKZG EQ 'S' ) OR "Cliente/Debito
         ( <DSCOMPE>-KOART EQ 'K' AND <DSCOMPE>-SHKZG EQ 'H' ).   "Fornecedor/Credito
        IT_TOTALIZA-DMBTR     = <DSCOMPE>-DMBTR.
        IT_TOTALIZA-DMBTR_RES = <DSCOMPE>-DMBTR_RES.
      ELSEIF ( <DSCOMPE>-KOART EQ 'D' AND <DSCOMPE>-SHKZG EQ 'H' ) OR "Cliente/Credito
             ( <DSCOMPE>-KOART EQ 'K' AND <DSCOMPE>-SHKZG EQ 'S' ).   "Fornecedor/Debito
        LC_DMBTR     = <DSCOMPE>-DMBTR     * -1.
        LC_DMBTR_RES = <DSCOMPE>-DMBTR_RES * -1.
        IT_TOTALIZA-DMBTR     = LC_DMBTR.
        IT_TOTALIZA-DMBTR_RES = LC_DMBTR_RES.
      ENDIF.

      IT_TOTALIZA-CONTADOR  = 1.

      CASE <DSCOMPE>-KOART.
        WHEN 'K'.
          SELECT SINGLE NAME1 INTO IT_TOTALIZA-NAME1 FROM LFA1 WHERE LIFNR EQ <DSCOMPE>-PARID.
        WHEN 'D'.
          SELECT SINGLE NAME1 INTO IT_TOTALIZA-NAME1 FROM KNA1 WHERE KUNNR EQ <DSCOMPE>-PARID.
      ENDCASE.
      APPEND IT_TOTALIZA.
    ENDIF.
  ENDLOOP.

  "Sequencia dos Itens no SHDS - Foi utilizado o campo standard OBZEI para sequencia.
  LC_ITEM_SHDB = 1.
  LOOP AT IT_COMPENSAR ASSIGNING <DSCOMPE>.
    "Itens Anteriores
    LOOP AT IT_BSEG_AUX ASSIGNING <FS_BSEG>
                  WHERE BUKRS EQ <DSCOMPE>-BUKRS
                    AND BELNR EQ <DSCOMPE>-BELNR
                    AND GJAHR EQ <DSCOMPE>-GJAHR
                    AND BUZEI LT <DSCOMPE>-BUZEI.
      <FS_BSEG>-OBZEI = LC_ITEM_SHDB.
      ADD 1 TO LC_ITEM_SHDB.
    ENDLOOP.

    "Item Atual
    <DSCOMPE>-ITEM_SHDB = LC_ITEM_SHDB.
    ADD 1 TO LC_ITEM_SHDB.

    "Itens posteriores
    LOOP AT IT_BSEG_AUX ASSIGNING <FS_BSEG>
                  WHERE BUKRS EQ <DSCOMPE>-BUKRS
                    AND BELNR EQ <DSCOMPE>-BELNR
                    AND GJAHR EQ <DSCOMPE>-GJAHR
                    AND BUZEI GT <DSCOMPE>-BUZEI.
      <FS_BSEG>-OBZEI = LC_ITEM_SHDB.
      ADD 1 TO LC_ITEM_SHDB.
    ENDLOOP.
  ENDLOOP.

  "Ajustando chaves de DEBITO/CREITO lançamento.
  LOOP AT IT_TOTALIZA ASSIGNING <DSTOTA>.
    LC_DMBTR = <DSTOTA>-DMBTR.
    CASE <DSTOTA>-KOART.
      WHEN 'K'.
        LC_AUGLV = 'EINGZAHL'.
        "EINGZAHL	Entrada de pagamentos

        <DSTOTA>-BLART = 'KZ'.
        IF LC_DMBTR GT 0.
          <DSTOTA>-BSCHL = '50'.
        ELSE.
          <DSTOTA>-BSCHL = '40'.
        ENDIF.
      WHEN 'D'.

        LC_AUGLV = 'AUSGZAHL'.
        "AUSGZAHL	Saída de pagamentos

        <DSTOTA>-BLART = 'DZ'.
        IF LC_DMBTR GT 0.
          <DSTOTA>-BSCHL = '40'.
        ELSE.
          <DSTOTA>-BSCHL = '50'.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  LC_MODE = 'N'.
  "
  CALL FUNCTION 'POSTING_INTERFACE_START'
    EXPORTING
      I_CLIENT           = SY-MANDT
      I_FUNCTION         = 'C'
      I_MODE             = LC_MODE
      I_UPDATE           = 'S'
      I_USER             = SY-UNAME
    EXCEPTIONS
      CLIENT_INCORRECT   = 1
      FUNCTION_INVALID   = 2
      GROUP_NAME_MISSING = 3
      MODE_INVALID       = 4
      UPDATE_INVALID     = 5
      OTHERS             = 6.

  IF SY-SUBRC IS NOT INITIAL.
    LC_RETURN-ID         = SY-MSGID.
    LC_RETURN-NUMBER     = SY-MSGNO.
    LC_RETURN-TYPE       = SY-MSGTY.
    LC_RETURN-MESSAGE_V1 = SY-MSGV1.
    LC_RETURN-MESSAGE_V2 = SY-MSGV2.
    LC_RETURN-MESSAGE_V3 = SY-MSGV3.
    LC_RETURN-MESSAGE_V4 = SY-MSGV4.

    WRITE SY-MSGNO TO LC_MSG_NO.
    CALL FUNCTION 'MESSAGE_PREPARE'
      EXPORTING
        MSG_ID                 = LC_RETURN-ID
        MSG_NO                 = LC_MSG_NO
        MSG_VAR1               = LC_RETURN-MESSAGE_V1
        MSG_VAR2               = LC_RETURN-MESSAGE_V2
        MSG_VAR3               = LC_RETURN-MESSAGE_V3
        MSG_VAR4               = LC_RETURN-MESSAGE_V4
      IMPORTING
        MSG_TEXT               = LC_RETURN-MESSAGE
      EXCEPTIONS
        FUNCTION_NOT_COMPLETED = 1
        MESSAGE_NOT_FOUND      = 2
        OTHERS                 = 3.

    APPEND LC_RETURN TO IT_RETORNO.
    EXIT.
  ENDIF.

  LOOP AT IT_TOTALIZA ASSIGNING <DSTOTA>.

    CLEAR: IT_BLNTAB[],
           IT_FTCLEAR[],
           IT_FTPOST[],
           IT_FTTAX[],
           LC_RETURN,
           CK_RESIDUAL.

    " Popular BABI para fazer as baixas/compensações """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " -->>>
    " -->>> CABEÇALHO
    IT_FTPOST-STYPE = 'K'."Header
    IT_FTPOST-COUNT = 1.  "number of Dynpro
    IT_FTPOST-FNAM  = 'BKPF-BUKRS'.
    IT_FTPOST-FVAL  = <DSTOTA>-BUKRS.
    APPEND IT_FTPOST.

    IT_FTPOST-FNAM = 'BKPF-WAERS'.
    IT_FTPOST-FVAL = <DSTOTA>-WAERS.
    APPEND IT_FTPOST.

    IT_FTPOST-FNAM = 'BKPF-BLDAT'.
    CONCATENATE <DSTOTA>-BLDAT+6(2) <DSTOTA>-BLDAT+4(2) <DSTOTA>-BLDAT(4) INTO IT_FTPOST-FVAL SEPARATED BY '.'.
    APPEND IT_FTPOST.

    IT_FTPOST-FNAM = 'BKPF-BUDAT'.
    CONCATENATE <DSTOTA>-BUDAT+6(2) <DSTOTA>-BUDAT+4(2) <DSTOTA>-BUDAT(4) INTO IT_FTPOST-FVAL SEPARATED BY '.'.
    APPEND IT_FTPOST.

    IT_FTPOST-FNAM = 'BKPF-MONAT'.
    IT_FTPOST-FVAL =  <DSTOTA>-BUDAT+4(2).
    APPEND IT_FTPOST.

    IT_FTPOST-FNAM = 'BKPF-BLART'.
    IT_FTPOST-FVAL = <DSTOTA>-BLART.
    APPEND IT_FTPOST.

    IT_FTPOST-FNAM = 'BKPF-XBLNR'.
    IT_FTPOST-FVAL = <DSTOTA>-XBLNR.
    APPEND IT_FTPOST.

    LOOP AT IT_COMPENSAR WHERE DOCUMENTO EQ <DSTOTA>-DOCUMENTO.
      IT_FTCLEAR-AGKOA  = IT_COMPENSAR-KOART.
      IT_FTCLEAR-AGKON  = IT_COMPENSAR-PARID.
      IT_FTCLEAR-AGUMS  = IT_COMPENSAR-UMSKZ.
      IT_FTCLEAR-AGBUK  = IT_COMPENSAR-BUKRS.
      IT_FTCLEAR-XFIFO  = 'X'.
      IT_FTCLEAR-XNOPS  = ABAP_TRUE.
      READ TABLE IT_BSEG WITH KEY BUKRS = IT_COMPENSAR-BUKRS BELNR = IT_COMPENSAR-BELNR GJAHR = IT_COMPENSAR-GJAHR BUZEI = IT_COMPENSAR-BUZEI.
      IF SY-SUBRC IS INITIAL.
        IF IT_BSEG-UMSKZ IS NOT INITIAL.
          IT_FTCLEAR-XNOPS  = ABAP_FALSE.
          IT_FTCLEAR-AGUMS = IT_BSEG-UMSKZ.
        ENDIF.
      ENDIF.
      IT_FTCLEAR-SELFD  = 'BELNR'.
      CONCATENATE IT_COMPENSAR-BELNR IT_COMPENSAR-GJAHR IT_COMPENSAR-BUZEI INTO IT_FTCLEAR-SELVON.
      APPEND IT_FTCLEAR.
    ENDLOOP.

    ADD 1 TO IT_FTPOST-COUNT.
    IT_FTPOST-STYPE = 'P'.
    IT_FTPOST-FNAM = 'RF05A-NEWBS'.
    IT_FTPOST-FVAL = <DSTOTA>-BSCHL.
    APPEND IT_FTPOST.

    IT_FTPOST-FNAM = 'RF05A-NEWKO'.
    IT_FTPOST-FVAL = <DSTOTA>-KONTO.
    APPEND IT_FTPOST.

    CASE <DSTOTA>-KOART.
      WHEN 'K'.
        MESSAGE S037(ZFI) WITH  <DSTOTA>-NAME1 INTO IT_FTPOST-FVAL.
      WHEN 'D'.
        MESSAGE S038(ZFI) WITH  <DSTOTA>-NAME1 INTO IT_FTPOST-FVAL.
    ENDCASE.
    I = STRLEN( IT_FTPOST-FVAL ).
    IF I GT 50.
      IT_FTPOST-FVAL = IT_FTPOST-FVAL(50).
    ENDIF.
    IT_FTPOST-FNAM = 'BSEG-SGTXT'.
    APPEND IT_FTPOST.

*    LOOP AT IT_COMPENSAR WHERE DOCUMENTO EQ <DSTOTA>-DOCUMENTO AND DMBTR_RES EQ 0.
*      LOOP AT IT_BSEG_AUX WHERE BUKRS EQ IT_COMPENSAR-BUKRS
*                            AND BELNR EQ IT_COMPENSAR-BELNR
*                            AND GJAHR EQ IT_COMPENSAR-GJAHR.
*
*        IF IT_BSEG_AUX-SHKZG EQ 'H' AND IT_BSEG_AUX-KOART EQ 'K'.
*          LC_DMBTR = ABS( IT_BSEG_AUX-DMBTR ) * -1.
*        ELSEIF IT_BSEG_AUX-SHKZG EQ 'S' AND IT_BSEG_AUX-KOART EQ 'K'.
*          LC_DMBTR = ABS( IT_BSEG_AUX-DMBTR ).
*        ELSEIF IT_BSEG_AUX-SHKZG EQ 'H' AND IT_BSEG_AUX-KOART EQ 'D'.
*          LC_DMBTR = ABS( IT_BSEG_AUX-DMBTR ) * -1.
*        ELSEIF IT_BSEG_AUX-SHKZG EQ 'S' AND IT_BSEG_AUX-KOART EQ 'D'.
*          LC_DMBTR = ABS( IT_BSEG_AUX-DMBTR ).
*        ENDIF.
*
*        MOVE LC_DMBTR TO LC_DATE_VL.
*        CONDENSE LC_DATE_VL NO-GAPS.
*
*        CALL FUNCTION 'STRING_REPLACE'
*          EXPORTING
*            PATTERN    = LC_PATTERN
*            SUBSTITUTE = LC_SUBSTITUTE
*          CHANGING
*            TEXT       = LC_DATE_VL.
*
*        LC_DOCUMENTO = IT_BSEG_AUX-OBZEI.
*        MOVE LC_DOCUMENTO TO LC_DOC_STR.
*        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*          EXPORTING
*            INPUT  = LC_DOC_STR
*          IMPORTING
*            OUTPUT = LC_DOC_STR.
*
*        CONCATENATE 'DF05B-PSDIF(' LC_DOC_STR ')' INTO IT_FTPOST-FNAM.
*        IT_FTPOST-FVAL = LC_DATE_VL.
*        APPEND IT_FTPOST.
*      ENDLOOP.
*    ENDLOOP.

    "Partida Residual """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    LOOP AT IT_COMPENSAR WHERE DOCUMENTO EQ <DSTOTA>-DOCUMENTO AND DMBTR_RES NE 0.

      IF IT_COMPENSAR-SHKZG EQ 'H' AND IT_COMPENSAR-KOART EQ 'K'.
        LC_DMBTR = ABS( IT_COMPENSAR-DMBTR_RES ) * -1.
      ELSEIF IT_COMPENSAR-SHKZG EQ 'S' AND IT_COMPENSAR-KOART EQ 'K'.
        LC_DMBTR = ABS( IT_COMPENSAR-DMBTR_RES ).
      ELSEIF IT_COMPENSAR-SHKZG EQ 'H' AND IT_COMPENSAR-KOART EQ 'D'.
        LC_DMBTR = ABS( IT_COMPENSAR-DMBTR_RES ) * -1.
      ELSEIF IT_COMPENSAR-SHKZG EQ 'S' AND IT_COMPENSAR-KOART EQ 'D'.
        LC_DMBTR = ABS( IT_COMPENSAR-DMBTR_RES ).
      ENDIF.
      MOVE LC_DMBTR TO LC_DATE_VL.
      CONDENSE LC_DATE_VL NO-GAPS.

      CALL FUNCTION 'STRING_REPLACE'
        EXPORTING
          PATTERN    = LC_PATTERN
          SUBSTITUTE = LC_SUBSTITUTE
        CHANGING
          TEXT       = LC_DATE_VL.

      LC_DOCUMENTO = IT_COMPENSAR-ITEM_SHDB.
      MOVE LC_DOCUMENTO TO LC_DOC_STR.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = LC_DOC_STR
        IMPORTING
          OUTPUT = LC_DOC_STR.

      CONCATENATE 'DF05B-PSDIF(' LC_DOC_STR ')' INTO IT_FTPOST-FNAM.
      IT_FTPOST-FVAL = LC_DATE_VL.
      APPEND IT_FTPOST.

      CK_RESIDUAL = 'X'.
    ENDLOOP.

    " -->>> GERAR DOC DO RESIDUAL ---------------------------------------------------------------------------------
    IF <DSTOTA>-DMBTR_RES IS NOT INITIAL.
      BREAK-POINT.
      IT_FTPOST-FNAM  = 'RF05A-NEWBS'.
      IT_FTPOST-FVAL  =  <DSTOTA>-BSCHL.
      APPEND IT_FTPOST.

      IT_FTPOST-FNAM  = 'BSEG-HKONT'.
      IT_FTPOST-FVAL  = <DSTOTA>-PARID.
      APPEND IT_FTPOST.

      IF <DSTOTA>-UMSKZ IS NOT INITIAL.
        IT_FTPOST-FNAM = 'RF05A-NEWUM'.
        IT_FTPOST-FVAL =  <DSTOTA>-UMSKZ.
        APPEND IT_FTPOST.
      ENDIF.

      IF <DSTOTA>-SHKZG EQ 'H' AND <DSTOTA>-KOART EQ 'K'.
        LC_DMBTR = ABS( <DSTOTA>-DMBTR_RES ) * -1.
      ELSEIF <DSTOTA>-SHKZG EQ 'S' AND <DSTOTA>-KOART EQ 'K'.
        LC_DMBTR = ABS( <DSTOTA>-DMBTR_RES ).
      ELSEIF <DSTOTA>-SHKZG EQ 'H' AND <DSTOTA>-KOART EQ 'D'.
        LC_DMBTR = ABS( IT_COMPENSAR-DMBTR_RES ) * -1.
      ELSEIF <DSTOTA>-SHKZG EQ 'S' AND <DSTOTA>-KOART EQ 'D'.
        LC_DMBTR = ABS( <DSTOTA>-DMBTR_RES ).
      ENDIF.

      MOVE LC_DMBTR TO LC_DATE_VL.
      CONDENSE LC_DATE_VL NO-GAPS.

      CALL FUNCTION 'STRING_REPLACE'
        EXPORTING
          PATTERN    = LC_PATTERN
          SUBSTITUTE = LC_SUBSTITUTE
        CHANGING
          TEXT       = LC_DATE_VL.

      IT_FTPOST-FNAM = 'BSEG-WRBTR'.
      IT_FTPOST-FVAL = LC_DATE_VL.
      APPEND IT_FTPOST.

      IT_FTPOST-FNAM = 'BSEG-GSBER'.
      IT_FTPOST-FVAL = <DSTOTA>-GSBER.
      APPEND IT_FTPOST.

      CASE <DSTOTA>-KOART.
        WHEN 'K'.
          MESSAGE S037(ZFI) WITH <DSTOTA>-NAME1 INTO IT_FTPOST-FVAL.
        WHEN 'D'.
          MESSAGE S038(ZFI) WITH <DSTOTA>-NAME1 INTO IT_FTPOST-FVAL.
      ENDCASE.

      IF STRLEN( IT_FTPOST-FVAL ) GT 50.
        IT_FTPOST-FVAL = IT_FTPOST-FVAL(50).
      ENDIF.
      IT_FTPOST-FNAM = 'BSEG-SGTXT'.
      APPEND IT_FTPOST.

      CONCATENATE <DSTOTA>-ZFBDT_RES+6(2) <DSTOTA>-ZFBDT_RES+4(2) <DSTOTA>-ZFBDT_RES(4) INTO LC_DATE_VL.
      IT_FTPOST-FNAM = 'BSEG-ZFBDT'.
      IT_FTPOST-FVAL = LC_DATE_VL.
      APPEND IT_FTPOST.
    ELSE.
      LC_DMBTR = <DSTOTA>-DMBTR.
      LC_DMBTR = ABS( LC_DMBTR ).
      MOVE LC_DMBTR TO LC_DATE_VL.
      CONDENSE LC_DATE_VL NO-GAPS.

      CALL FUNCTION 'STRING_REPLACE'
        EXPORTING
          PATTERN    = LC_PATTERN
          SUBSTITUTE = LC_SUBSTITUTE
        CHANGING
          TEXT       = LC_DATE_VL.

      IT_FTPOST-FNAM = 'BSEG-WRBTR'.
      IT_FTPOST-FVAL =  LC_DATE_VL.
      APPEND IT_FTPOST.
    ENDIF.

    ADD 1 TO IT_FTPOST-COUNT.
    IT_FTPOST-FNAM = 'COBL-GSBER'.
    IT_FTPOST-FVAL = <DSTOTA>-GSBER.
    APPEND IT_FTPOST.

    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    CALL FUNCTION 'POSTING_INTERFACE_CLEARING'
      EXPORTING
        I_AUGLV                    = LC_AUGLV
        I_TCODE                    = LC_TCODE
        I_SGFUNCT                  = LC_SGFUNCT
        I_NO_AUTH                  = 'X'
      IMPORTING
        E_MSGID                    = LC_RETURN-ID
        E_MSGNO                    = LC_RETURN-NUMBER
        E_MSGTY                    = LC_RETURN-TYPE
        E_MSGV1                    = LC_RETURN-MESSAGE_V1
        E_MSGV2                    = LC_RETURN-MESSAGE_V2
        E_MSGV3                    = LC_RETURN-MESSAGE_V3
        E_MSGV4                    = LC_RETURN-MESSAGE_V4
      TABLES
        T_BLNTAB                   = IT_BLNTAB
        T_FTCLEAR                  = IT_FTCLEAR
        T_FTPOST                   = IT_FTPOST
        T_FTTAX                    = IT_FTTAX
      EXCEPTIONS
        CLEARING_PROCEDURE_INVALID = 1
        CLEARING_PROCEDURE_MISSING = 2
        TABLE_T041A_EMPTY          = 3
        TRANSACTION_CODE_INVALID   = 4
        AMOUNT_FORMAT_ERROR        = 5
        TOO_MANY_LINE_ITEMS        = 6
        COMPANY_CODE_INVALID       = 7
        SCREEN_NOT_FOUND           = 8
        NO_AUTHORIZATION           = 9
        OTHERS                     = 10.

    IF SY-SUBRC IS NOT INITIAL.
      LC_RETURN-ID         = SY-MSGID.
      LC_RETURN-NUMBER     = SY-MSGNO.
      LC_RETURN-TYPE       = SY-MSGTY.
      LC_RETURN-MESSAGE_V1 = SY-MSGV1.
      LC_RETURN-MESSAGE_V2 = SY-MSGV2.
      LC_RETURN-MESSAGE_V3 = SY-MSGV3.
      LC_RETURN-MESSAGE_V4 = SY-MSGV4.

      WRITE SY-MSGNO TO LC_MSG_NO.
      CALL FUNCTION 'MESSAGE_PREPARE'
        EXPORTING
          MSG_ID                 = LC_RETURN-ID
          MSG_NO                 = LC_MSG_NO
          MSG_VAR1               = LC_RETURN-MESSAGE_V1
          MSG_VAR2               = LC_RETURN-MESSAGE_V2
          MSG_VAR3               = LC_RETURN-MESSAGE_V3
          MSG_VAR4               = LC_RETURN-MESSAGE_V4
        IMPORTING
          MSG_TEXT               = LC_RETURN-MESSAGE
        EXCEPTIONS
          FUNCTION_NOT_COMPLETED = 1
          MESSAGE_NOT_FOUND      = 2
          OTHERS                 = 3.

      APPEND LC_RETURN TO IT_RETORNO.
      CONTINUE.
    ENDIF.

    IF IT_BLNTAB[] IS INITIAL.
      APPEND LC_RETURN TO IT_RETORNO.
    ENDIF.

  ENDLOOP.

  CALL FUNCTION 'POSTING_INTERFACE_END'
    EXPORTING
      I_BDCIMMED              = 'X'
    EXCEPTIONS
      SESSION_NOT_PROCESSABLE = 1
      OTHERS                  = 2.

  IF SY-SUBRC IS NOT INITIAL.
    LC_RETURN-ID         = SY-MSGID.
    LC_RETURN-NUMBER     = SY-MSGNO.
    LC_RETURN-TYPE       = SY-MSGTY.
    LC_RETURN-MESSAGE_V1 = SY-MSGV1.
    LC_RETURN-MESSAGE_V2 = SY-MSGV2.
    LC_RETURN-MESSAGE_V3 = SY-MSGV3.
    LC_RETURN-MESSAGE_V4 = SY-MSGV4.

    WRITE SY-MSGNO TO LC_MSG_NO.
    CALL FUNCTION 'MESSAGE_PREPARE'
      EXPORTING
        MSG_ID                 = LC_RETURN-ID
        MSG_NO                 = LC_MSG_NO
        MSG_VAR1               = LC_RETURN-MESSAGE_V1
        MSG_VAR2               = LC_RETURN-MESSAGE_V2
        MSG_VAR3               = LC_RETURN-MESSAGE_V3
        MSG_VAR4               = LC_RETURN-MESSAGE_V4
      IMPORTING
        MSG_TEXT               = LC_RETURN-MESSAGE
      EXCEPTIONS
        FUNCTION_NOT_COMPLETED = 1
        MESSAGE_NOT_FOUND      = 2
        OTHERS                 = 3.

    APPEND LC_RETURN TO IT_RETORNO.
  ENDIF.

ENDFUNCTION.
