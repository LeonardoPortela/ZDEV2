*-----------------------------------------------------------------------------*
*&                          AMAGGI
*-----------------------------------------------------------------------------*
*& Criado por: Anderson Oenning
*& Data      : 21/06/2017
*& Especificado: Anderson Oenning
*-----------------------------------------------------------------------------*
*& Histórico de Alterações:                                                   *
*-----------------------------------------------------------------------------*
*&  Data       | Request    | Autor         | Alteração                       *
*&----------------------------------------------------------------------------*
*&             | DEVK972362 |               |  DEVK973409 / DEVK973700        *
*-----------------------------------------------------------------------------*


REPORT ZPMR0024.

TABLES: VIQMEL, CRHD.

TYPES: BEGIN OF TY_VIQMEL,
         ARBPL TYPE VIQMEL-ARBPL,
         IWERK TYPE VIQMEL-IWERK,
         KOSTL TYPE VIQMEL-KOSTL,
         QMNUM TYPE VIQMEL-QMNUM,
         AUFNR TYPE VIQMEL-AUFNR,
         OBJNR TYPE VIQMEL-OBJNR,
         QMART TYPE VIQMEL-QMART,
         QMTXT TYPE VIQMEL-QMTXT,
         ERDAT TYPE VIQMEL-ERDAT,
         QMDAB TYPE VIQMEL-QMDAB,
       END OF TY_VIQMEL.


TYPES: BEGIN OF TY_JEST,
         MANDT TYPE JEST-MANDT,
         OBJNR TYPE JEST-OBJNR,
         STAT  TYPE JEST-STAT,
         INACT TYPE JEST-INACT,
         CHGNR TYPE JEST-CHGNR,
         TXT04 TYPE TJ02T-TXT04,  " Descrição dos status
       END OF TY_JEST.

TYPES: BEGIN OF TY_CRHD,
         OBJID TYPE CRHD-OBJID,
         ARBPL TYPE CRHD-ARBPL,
         IWERK TYPE CRHD-WERKS,
       END OF TY_CRHD.

TYPES: BEGIN OF TY_T001W,         " Centro
         WERKS TYPE T001W-WERKS, " codigo
         NAME1 TYPE T001W-NAME1, " descrição
         IWERK TYPE T001W-IWERK. " Centro planejamento
TYPES: END OF TY_T001W.

TYPES: BEGIN OF TY_SAIDA,
         ARBPL        TYPE CRHD-ARBPL,
         IWERK(50)    TYPE C,
         KOSTL        TYPE VIQMEL-KOSTL,
         QMNUM        TYPE VIQMEL-QMNUM,
         QMART        TYPE VIQMEL-QMART,
         QMTXT        TYPE VIQMEL-QMTXT,
         AUFNR        TYPE VIQMEL-AUFNR,
         OBJNR        TYPE VIQMEL-OBJNR,
         STTXT        TYPE JEST-STAT,
         TXT04        TYPE  TJ02T-TXT04,
         NAME1        TYPE T001W-NAME1,
         QNOTASAB(16) TYPE I,
         QNOTAORD(16) TYPE P,
         QNOTAENC     TYPE I,
         PERCATRIB    TYPE P DECIMALS 2,
         PERCACONC    TYPE P DECIMALS 2,
         QNOTPEND(16) TYPE I,
       END OF TY_SAIDA.

DATA:
  IT_VIQMEL TYPE TABLE OF TY_VIQMEL WITH HEADER LINE,
  IT_T001W  TYPE TABLE OF TY_T001W WITH HEADER LINE,
  IT_SAIDA  TYPE TABLE OF TY_SAIDA,
  IT_JEST   TYPE TABLE OF TY_JEST WITH HEADER LINE,
  IT_CRHD   TYPE TABLE OF TY_CRHD WITH HEADER LINE.

DATA:
  WA_VIQMEL TYPE TY_VIQMEL,
  WA_T001W  TYPE TY_T001W,
  WA_SAIDA  TYPE TY_SAIDA,
  WA_JEST   TYPE TY_JEST,
  WA_CRHD   TYPE TY_CRHD.

DATA:
  "IT_SELECT           TYPE STANDARD TABLE OF TY_DADOS_IMOB,
  G_CUSTOM_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
  DG_SPLITTER_1      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
  DG_PARENT_1        TYPE REF TO CL_GUI_CONTAINER,
  DG_SPLITTER_2      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
  DG_PARENT_2        TYPE REF TO CL_GUI_CONTAINER,
  DG_PARENT_2A       TYPE REF TO CL_GUI_CONTAINER,
  DG_PARENT_ALV      TYPE REF TO CL_GUI_CONTAINER,
  PICTURE            TYPE REF TO CL_GUI_PICTURE,
  CTL_ALV            TYPE REF TO CL_GUI_ALV_GRID,
  DG_DYNDOC_ID       TYPE REF TO CL_DD_DOCUMENT,
  TABLE_ELEMENT      TYPE REF TO CL_DD_TABLE_ELEMENT,
  COLUMN             TYPE REF TO CL_DD_AREA,
  TABLE_ELEMENT2     TYPE REF TO CL_DD_TABLE_ELEMENT,
  COLUMN_1           TYPE REF TO CL_DD_AREA,
  DG_HTML_CNTRL      TYPE REF TO CL_GUI_HTML_VIEWER,
  IT_EXCLUDE_FCODE   TYPE UI_FUNCTIONS,
  WA_EXCLUDE_FCODE   LIKE LINE OF IT_EXCLUDE_FCODE,
  GS_LAYOUT          TYPE LVC_S_LAYO,
  GS_VARIANT         TYPE DISVARIANT,
  IT_FIELDCATALOG    TYPE LVC_T_FCAT,
  WA_FIELDCATALOG    TYPE LVC_S_FCAT,
  IT_SORT            TYPE LVC_T_SORT,
  "GS_SCROLL_COL       TYPE LVC_S_COL,
  "GS_SCROLL_ROW       TYPE LVC_S_ROID,
  "GS_STABLE           TYPE LVC_S_STBL,
  "IT_SELECTED_ROWS    TYPE LVC_T_ROW,
  "WA_SELECTED_ROWS    TYPE LVC_S_ROW,
  LS_STABLE          TYPE LVC_S_STBL,
  T_SORT             TYPE LVC_T_SORT,
  W_SORT             TYPE LVC_T_SORT WITH HEADER LINE.


DATA:
  TOTNOT TYPE P DECIMALS 2, "Variavel utilizada para calcular o percentual de notas atribuida.
  TONENC TYPE P DECIMALS 2. "Variavel utilizada para caulcar o percentual de notas encerradas.


SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-005.
SELECT-OPTIONS: P_QMART FOR VIQMEL-QMART, " Tipo de nota
                P_IWERK FOR VIQMEL-IWERK, " Centro
                P_ARBPL FOR CRHD-ARBPL, " Centro de Trabalho
*                P_KOSTL FOR VIQMEL-KOSTL, " Centro de Custo
                P_DATE  FOR VIQMEL-ERDAT OBLIGATORY.
SELECTION-SCREEN: END OF BLOCK B1.

START-OF-SELECTION.

  PERFORM ZF_SELECIONA_DADOS.
  PERFORM ZF_PREPARA_DADOS.

  IF IT_SAIDA IS NOT INITIAL.
    PERFORM ZF_EXIBE_ALV.
  ELSE.
    MESSAGE TEXT-006 TYPE 'S' DISPLAY LIKE 'E'.
    STOP.
  ENDIF.


FORM ZF_SELECIONA_DADOS.

* Seleciona informações da nota tabela Viqmel.
  SELECT ARBPL IWERK KOSTL QMNUM AUFNR OBJNR QMART QMTXT ERDAT QMDAB
 INTO TABLE IT_VIQMEL
 FROM VIQMEL
   WHERE  QMART IN P_QMART
   AND  IWERK IN P_IWERK
   AND  ERDAT IN P_DATE.



  SELECT WERKS NAME1 IWERK
    INTO TABLE IT_T001W
    FROM  T001W
    FOR ALL ENTRIES IN IT_VIQMEL
    WHERE IWERK EQ IT_VIQMEL-IWERK.

*  Busca os status da notas
  SELECT JEST~MANDT JEST~OBJNR JEST~STAT JEST~INACT JEST~CHGNR TJ02T~TXT04
 INTO TABLE IT_JEST
    FROM JEST
  INNER JOIN TJ02T ON TJ02T~ISTAT = JEST~STAT
  FOR ALL ENTRIES IN IT_VIQMEL
  WHERE JEST~OBJNR  EQ IT_VIQMEL-OBJNR
      AND TJ02T~TXT04 IN ('MSPN', 'MSPR', 'MSEN')
      AND JEST~INACT  NE 'X'
      AND TJ02T~SPRAS EQ 'P'.

* Busca o centro de trabalho responsavel.
  SELECT OBJID ARBPL WERKS
  INTO TABLE IT_CRHD
  FROM CRHD
  FOR ALL ENTRIES IN IT_VIQMEL
    WHERE OBJID EQ IT_VIQMEL-ARBPL
      AND  ARBPL IN P_ARBPL.
*        AND WERKS EQ IT_VIQMEL-IWERK.


ENDFORM.

FORM ZF_PREPARA_DADOS.

  LOOP AT IT_VIQMEL INTO WA_VIQMEL.
    WA_SAIDA-IWERK = WA_VIQMEL-IWERK."centro
    WA_SAIDA-QMART = WA_VIQMEL-QMART. " Tipo de Nota


*  Total de notas abertas.
    IF WA_VIQMEL-QMNUM IS NOT INITIAL.
      ADD 1 TO WA_SAIDA-QNOTASAB.
    ENDIF.

    READ TABLE IT_T001W WITH KEY IWERK = WA_VIQMEL-IWERK.

    READ TABLE IT_JEST INTO WA_JEST WITH KEY OBJNR =  WA_VIQMEL-OBJNR.

* Total de notas com ordem.
    IF WA_VIQMEL-AUFNR IS NOT INITIAL.
      ADD 1 TO WA_SAIDA-QNOTAORD.
    ENDIF.

    IF WA_VIQMEL-QMDAB = 0.
      ADD 1 TO WA_SAIDA-QNOTPEND.
    ENDIF.

* Total de notas aberas no periodo com Centro de Trabalho.
    IF SY-SUBRC IS INITIAL.
      READ TABLE IT_CRHD INTO WA_CRHD WITH KEY OBJID = WA_VIQMEL-ARBPL.
      WA_SAIDA-ARBPL = WA_CRHD-ARBPL.

      IF SY-SUBRC EQ 0.
        CONCATENATE IT_T001W-IWERK '-' IT_T001W-NAME1 INTO WA_SAIDA-IWERK .    " Centro
      ENDIF.

*    Total de notas encerradas.
      IF WA_JEST-OBJNR IS NOT INITIAL
        AND WA_JEST-TXT04 = 'MSEN'.
        ADD 1 TO WA_SAIDA-QNOTAENC.
      ENDIF.

      COLLECT WA_SAIDA INTO IT_SAIDA.

      CLEAR WA_VIQMEL.
      CLEAR WA_CRHD.
      CLEAR WA_SAIDA.
    ENDIF.
  ENDLOOP.

  IF P_ARBPL IS NOT INITIAL.
    DELETE IT_SAIDA WHERE ARBPL NOT IN P_ARBPL.

  ENDIF.

  LOOP AT IT_SAIDA INTO WA_SAIDA.

*    Calcula percentual de notas atribuidas.
    WA_SAIDA-PERCATRIB = ( WA_SAIDA-QNOTAORD / WA_SAIDA-QNOTASAB ) * 100.

*   Calcula o percentual de notas encerradas.
    WA_SAIDA-PERCACONC = ( WA_SAIDA-QNOTAENC / WA_SAIDA-QNOTASAB ) * 100.
    MODIFY IT_SAIDA FROM WA_SAIDA.
  ENDLOOP.

  SORT IT_SAIDA ASCENDING BY IWERK QMART.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.

  DATA:
    LST_LAYOUT TYPE LVC_S_LAYO.

  DATA: URL(255)                TYPE C,
        P_TEXT                  TYPE SDYDO_TEXT_ELEMENT,
        SDYDO_TEXT_ELEMENT(255),
        P_TEXT_TABLE            TYPE SDYDO_TEXT_TABLE,
        VL_CONT                 TYPE I,
        VL_BUTXT                TYPE T001-BUTXT,
        VL_DATES1               TYPE CHAR10,
        VL_DATES2               TYPE CHAR10.

  SET PF-STATUS 'A1'.
  SET TITLEBAR 'A1'.

  IF G_CUSTOM_CONTAINER IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    IF SY-SUBRC <> 0.
      MESSAGE A000(TREE_CONTROL_MSG).
    ENDIF.

    CREATE OBJECT DG_SPLITTER_1
      EXPORTING
        PARENT  = G_CUSTOM_CONTAINER
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_ALV.

    CREATE OBJECT DG_SPLITTER_2
      EXPORTING
        PARENT  = DG_PARENT_1
        ROWS    = 1
        COLUMNS = 2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 2
      RECEIVING
        CONTAINER = DG_PARENT_2A.

    CALL METHOD DG_SPLITTER_1->SET_ROW_HEIGHT
      EXPORTING
        ID     = 1
        HEIGHT = 11.

    CALL METHOD DG_SPLITTER_2->SET_COLUMN_WIDTH
      EXPORTING
        ID    = 1
        WIDTH = 65.

    CREATE OBJECT PICTURE
      EXPORTING
        PARENT = DG_PARENT_2A.

    PERFORM F_PEGA_IMAGEM USING 'LOGO_NOVO' CHANGING URL.

    CALL METHOD PICTURE->LOAD_PICTURE_FROM_URL
      EXPORTING
        URL = URL.

    CALL METHOD PICTURE->SET_DISPLAY_MODE
      EXPORTING
        DISPLAY_MODE = PICTURE->DISPLAY_MODE_FIT_CENTER.

    IF IT_SAIDA IS NOT INITIAL.
      P_TEXT = TEXT-007.
      PERFORM FILL_IT_FIELDCATALOG USING:
              01 'IWERK    '      'VIQMEL'    '25'  ' '     ' '    ' '   'Centro            ',
              02 'ARBPL    '      'VIQMEL'    '10'  ' '     ' '    ' '   'Centro Trab       ',
              03 'QMART    '      'VIQMEL'    '30'  ' '     ' '    ' '   'Tipo Nota         ',
              04 'QNOTASAB '      ''          '16'  ' '     ' '    'X'   'Qtd Nota Aberta   ',
              05 'QNOTAORD '      ''          '16'  ' '     ' '    'X'   'Qtd Nota Planejada',
              06 'QNOTAENC '      ''          '16'  ' '     ' '    'X'   'Qtd Nota Enc      ',
              07 'QNOTPEND '      ''          '16'  ' '     ' '    'X'   'Qtd Nota Pend     ',
*             07 'QNOTPEND '      'VIQMEL'    '30'  ' '     ' '    'X'   'Qtd Nota Pend     ',
              08 'PERCATRIB'      ''          '16'  ' '     ' '    'X'   '%Notas Atribuida  ',
              09 'PERCACONC'      ''          '16'  ' '     ' '    'X'   '%Notas Concluida  '.

      PERFORM FILL_IT_SORT.


*      PERFORM FILL_GS_VARIANT.

      GS_LAYOUT-SEL_MODE   = 'A'.
      GS_LAYOUT-CWIDTH_OPT = 'X'.
      CLEAR: IT_EXCLUDE_FCODE, IT_EXCLUDE_FCODE[].

      CREATE OBJECT CTL_ALV
        EXPORTING
          I_PARENT = DG_PARENT_ALV.

      "PERFORM EXCLUDE.

      CALL METHOD CTL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
        EXPORTING
          IS_LAYOUT            = GS_LAYOUT
          IS_VARIANT           = GS_VARIANT
          IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
          I_SAVE               = 'A'
        CHANGING
          IT_FIELDCATALOG      = IT_FIELDCATALOG
          IT_OUTTAB            = IT_SAIDA
          IT_SORT              = IT_SORT.


      CREATE OBJECT DG_DYNDOC_ID
        EXPORTING
          STYLE = 'ALV_GRID'.

      CALL METHOD DG_DYNDOC_ID->INITIALIZE_DOCUMENT.

      CALL METHOD DG_DYNDOC_ID->ADD_TABLE
        EXPORTING
          NO_OF_COLUMNS = 1
          BORDER        = '0'
          WIDTH         = '100%'
        IMPORTING
          TABLE         = TABLE_ELEMENT.

      CALL METHOD TABLE_ELEMENT->ADD_COLUMN
        IMPORTING
          COLUMN = COLUMN.

      CALL METHOD TABLE_ELEMENT->SET_COLUMN_STYLE
        EXPORTING
          COL_NO    = 1
          "SAP_ALIGN = 'CENTER'
          SAP_STYLE = CL_DD_DOCUMENT=>HEADING.

      CALL METHOD COLUMN->ADD_TEXT
        EXPORTING
          TEXT      = P_TEXT
          SAP_STYLE = 'HEADING'.

      CALL METHOD DG_DYNDOC_ID->ADD_TABLE
        EXPORTING
          NO_OF_COLUMNS = 2
          BORDER        = '0'
          WIDTH         = '100%'
        IMPORTING
          TABLE         = TABLE_ELEMENT2.

      CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
        EXPORTING
          SAP_STYLE   = 'SAP_BOLD'
          STYLE_CLASS = 'SAP_BOLD'
        IMPORTING
          COLUMN      = COLUMN_1.


* Mosta o cabeçario com o periodo pesquisado.
      LOOP AT P_DATE.
        IF P_DATE-OPTION EQ 'BT'.
          CONCATENATE P_DATE-LOW+6(2) '.' P_DATE-LOW+4(2) '.' P_DATE-LOW(4) INTO VL_DATES1.
          CONCATENATE P_DATE-HIGH+6(2) '.' P_DATE-HIGH+4(2) '.' P_DATE-HIGH(4) INTO VL_DATES2.
          CONCATENATE 'Período:' VL_DATES1 '-' VL_DATES2 INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          EXIT.
        ELSE.
          CONCATENATE P_DATE-LOW+6(2) '.' P_DATE-LOW+4(2) '.' P_DATE-LOW(4) INTO VL_DATES1.
          CONCATENATE 'Período:' VL_DATES1 INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        ENDIF.
      ENDLOOP.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      CLEAR: SDYDO_TEXT_ELEMENT, VL_DATES1, VL_DATES2.


      "------------------
      CALL METHOD COLUMN_1->ADD_TEXT
        EXPORTING
          TEXT_TABLE = P_TEXT_TABLE
          FIX_LINES  = 'X'.

      CALL METHOD DG_DYNDOC_ID->MERGE_DOCUMENT.

      CREATE OBJECT DG_HTML_CNTRL
        EXPORTING
          PARENT = DG_PARENT_2.

      DG_DYNDOC_ID->HTML_CONTROL = DG_HTML_CNTRL.

      CALL METHOD DG_DYNDOC_ID->DISPLAY_DOCUMENT
        EXPORTING
          REUSE_CONTROL      = 'X'
          PARENT             = DG_PARENT_2
        EXCEPTIONS
          HTML_DISPLAY_ERROR = 1.

      PERFORM AJUSTA_TOTAIS.

    ELSE.

      LS_STABLE-ROW = 'X'.
      LS_STABLE-COL = 'X'.

      CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
        EXPORTING
          IS_STABLE = LS_STABLE
        EXCEPTIONS
          FINISHED  = 1
          OTHERS    = 2.

      IF SY-SUBRC <> 0.
      ENDIF.

    ENDIF.
  ENDIF.


ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.
  CASE SY-UCOMM.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.

FORM FILL_GS_VARIANT .

  GS_VARIANT-REPORT      = SY-REPID.
  GS_VARIANT-HANDLE      = '0100'.
  GS_VARIANT-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT-USERNAME    = ABAP_FALSE.
  GS_VARIANT-VARIANT     = ABAP_FALSE.
  GS_VARIANT-TEXT        = ABAP_FALSE.
  GS_VARIANT-DEPENDVARS  = ABAP_FALSE.

ENDFORM.                    " FILL_GS_VARIANT

*Parametros da ALV.
FORM FILL_IT_FIELDCATALOG USING VALUE(P_COLNUM)
                                VALUE(P_FIELDNAME)
                                VALUE(P_TABNAME)
                                VALUE(P_LEN)
                                VALUE(P_EDIT)
                                VALUE(P_ICON)
                                VALUE(P_DO_SUM)
                                VALUE(P_HEADER).

  DATA:  WA_FIELDCATALOG  TYPE LVC_S_FCAT.

  WA_FIELDCATALOG-COL_POS     = P_COLNUM.
  WA_FIELDCATALOG-FIELDNAME   = P_FIELDNAME.
  WA_FIELDCATALOG-TABNAME     = P_TABNAME.
  WA_FIELDCATALOG-OUTPUTLEN   = P_LEN.
  WA_FIELDCATALOG-COLTEXT     = P_HEADER.
  WA_FIELDCATALOG-EDIT        = P_EDIT.
  WA_FIELDCATALOG-ICON        = P_ICON.
  WA_FIELDCATALOG-REF_TABLE   = P_TABNAME.
  WA_FIELDCATALOG-CHECKTABLE  = P_TABNAME.
  WA_FIELDCATALOG-DO_SUM      = P_DO_SUM.

  GS_LAYOUT-EXCP_CONDS    = 'X'.
  GS_LAYOUT-ZEBRA         = 'X'.
  GS_LAYOUT-SEL_MODE      = 'A'.
  GS_LAYOUT-CWIDTH_OPT    = 'X'.     "  Otimizar colunas na tela
  GS_LAYOUT-TOTALS_BEF     = ' '.
  APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

ENDFORM.
*Busca a logo Marca e adiciona no cabeçario.
FORM F_PEGA_IMAGEM  USING    NOME_LOGO
                  CHANGING URL.

  DATA: BEGIN OF GRAPHIC_TABLE OCCURS 0,
          LINE(255) TYPE X,
        END OF GRAPHIC_TABLE.

  DATA: L_GRAPHIC_XSTR TYPE XSTRING.
  DATA: GRAPHIC_SIZE   TYPE I.
  DATA: L_GRAPHIC_CONV TYPE I.
  DATA: L_GRAPHIC_OFFS TYPE I.

  REFRESH GRAPHIC_TABLE.

  CALL METHOD CL_SSF_XSF_UTILITIES=>GET_BDS_GRAPHIC_AS_BMP
    EXPORTING
      P_OBJECT = 'GRAPHICS'
      P_NAME   = NOME_LOGO
      P_ID     = 'BMAP'
      P_BTYPE  = 'BCOL'
    RECEIVING
      P_BMP    = L_GRAPHIC_XSTR.

  GRAPHIC_SIZE = XSTRLEN( L_GRAPHIC_XSTR ).
  L_GRAPHIC_CONV = GRAPHIC_SIZE.
  L_GRAPHIC_OFFS = 0.

  WHILE L_GRAPHIC_CONV > 255.

    GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(255).
    APPEND GRAPHIC_TABLE.
    L_GRAPHIC_OFFS = L_GRAPHIC_OFFS + 255.
    L_GRAPHIC_CONV = L_GRAPHIC_CONV - 255.

  ENDWHILE.

  GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(L_GRAPHIC_CONV).
  APPEND GRAPHIC_TABLE.

  CALL FUNCTION 'DP_CREATE_URL'
    EXPORTING
      TYPE     = 'IMAGE'
      SUBTYPE  = 'X-UNKNOWN'
      SIZE     = GRAPHIC_SIZE
      LIFETIME = 'T'
    TABLES
      DATA     = GRAPHIC_TABLE
    CHANGING
      URL      = URL.

ENDFORM.                    " F_PEGA_IMAGEM

*Ajustas os valores totais.
FORM AJUSTA_TOTAIS .

  DATA: LREF_DATA TYPE REF TO DATA.
  DATA: VL_CONTSUM TYPE I.
  FIELD-SYMBOLS: <L_SUM_TAB> TYPE TABLE,
                 <L_SUM>     TYPE TY_SAIDA.

  IF IT_SAIDA IS NOT INITIAL.
    "Ajuste de valores da linha de TOTAIS
    CALL METHOD CTL_ALV->GET_SUBTOTALS
      IMPORTING
        EP_COLLECT00 = LREF_DATA.

    ASSIGN LREF_DATA->* TO <L_SUM_TAB>.
    IF <L_SUM_TAB> IS ASSIGNED.
      READ TABLE <L_SUM_TAB> ASSIGNING <L_SUM> INDEX 1.
      IF SY-SUBRC EQ 0.
        CLEAR: <L_SUM>.

        LOOP AT IT_SAIDA INTO WA_SAIDA.
          VL_CONTSUM = VL_CONTSUM + 1.

          <L_SUM>-QNOTASAB = <L_SUM>-QNOTASAB + WA_SAIDA-QNOTASAB.
          <L_SUM>-QNOTAORD = <L_SUM>-QNOTAORD + WA_SAIDA-QNOTAORD.
          <L_SUM>-QNOTAENC = <L_SUM>-QNOTAENC + WA_SAIDA-QNOTAENC.
          <L_SUM>-QNOTPEND = <L_SUM>-QNOTPEND + WA_SAIDA-QNOTPEND.
          <L_SUM>-PERCATRIB = <L_SUM>-PERCATRIB + WA_SAIDA-PERCATRIB.
          <L_SUM>-PERCACONC = <L_SUM>-PERCACONC + WA_SAIDA-PERCACONC.
        ENDLOOP.

        <L_SUM>-PERCATRIB = ( <L_SUM>-QNOTAORD / <L_SUM>-QNOTASAB ) * 100.
        <L_SUM>-PERCACONC = ( <L_SUM>-QNOTAENC / <L_SUM>-QNOTASAB ) * 100.

        CLEAR: VL_CONTSUM.
        CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
          EXPORTING
            I_SOFT_REFRESH = 'X'.
      ENDIF.
    ENDIF.
  ENDIF.

  CLEAR: LREF_DATA.
  "Ajuste de valores da linha de SUB-TOTAIS Nível 01
  CALL METHOD CTL_ALV->GET_SUBTOTALS
    IMPORTING
      EP_COLLECT01 = LREF_DATA.

  ASSIGN LREF_DATA->* TO <L_SUM_TAB>.
  IF <L_SUM_TAB> IS ASSIGNED.
    LOOP AT <L_SUM_TAB> ASSIGNING <L_SUM>.
      IF <L_SUM> IS ASSIGNED.
        CLEAR: <L_SUM>-QNOTASAB,  <L_SUM>-QNOTAORD, <L_SUM>-QNOTAENC, <L_SUM>-QNOTPEND, <L_SUM>-PERCATRIB, <L_SUM>-PERCACONC.
        LOOP AT IT_SAIDA INTO WA_SAIDA
          WHERE IWERK EQ <L_SUM>-IWERK.
          VL_CONTSUM = VL_CONTSUM + 1.
          <L_SUM>-QNOTASAB = <L_SUM>-QNOTASAB + WA_SAIDA-QNOTASAB.
          <L_SUM>-QNOTAORD = <L_SUM>-QNOTAORD + WA_SAIDA-QNOTAORD.
          <L_SUM>-QNOTAENC = <L_SUM>-QNOTAENC + WA_SAIDA-QNOTAENC.
          <L_SUM>-QNOTPEND = <L_SUM>-QNOTPEND + WA_SAIDA-QNOTPEND.
          <L_SUM>-PERCATRIB = <L_SUM>-PERCATRIB + WA_SAIDA-PERCATRIB.
          <L_SUM>-PERCACONC = <L_SUM>-PERCACONC + WA_SAIDA-PERCACONC.
        ENDLOOP.

        <L_SUM>-PERCATRIB = ( <L_SUM>-QNOTAORD / <L_SUM>-QNOTASAB ) * 100.
        <L_SUM>-PERCACONC = ( <L_SUM>-QNOTAENC / <L_SUM>-QNOTASAB ) * 100.
        CLEAR: VL_CONTSUM.
      ENDIF.
    ENDLOOP.
  ENDIF.

  CALL METHOD CTL_ALV->GET_FRONTEND_LAYOUT
    IMPORTING
      ES_LAYOUT = GS_LAYOUT.

  GS_LAYOUT-CWIDTH_OPT = 'X'.

  CALL METHOD CTL_ALV->SET_FRONTEND_LAYOUT
    EXPORTING
      IS_LAYOUT = GS_LAYOUT.

  CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
    EXPORTING
      I_SOFT_REFRESH = 'X'.

ENDFORM.

FORM ZF_EXIBE_ALV .
  CALL SCREEN 100.
*
ENDFORM.

FORM FILL_IT_SORT .

  DATA: WA_SORT TYPE LVC_S_SORT.

  WA_SORT-SPOS = '1'.
  WA_SORT-FIELDNAME = 'IWERK'.
  "WA_SORT-DOWN = 'X'.
  WA_SORT-GROUP = '*'.
  WA_SORT-SUBTOT = 'X'.
  APPEND WA_SORT TO IT_SORT.

*  IF P_BEBER IS NOT INITIAL.
*
*    WA_SORT-SPOS = '2'.
*    WA_SORT-FIELDNAME = 'BEBER'.
*    "WA_SORT-DOWN = 'X'.
*    WA_SORT-GROUP = '*'.
*    WA_SORT-SUBTOT = 'X'.
*    APPEND WA_SORT TO IT_SORT.
*
*  ENDIF.
ENDFORM.
