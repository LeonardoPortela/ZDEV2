*----------------------------------------------------------------------*
***INCLUDE ZLESR0105_STATUS_0200.
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0200 OUTPUT.

  DATA: CHEGADA          TYPE REF TO ZCL_FERROVIARIO_CHEGADA,
        HIERARCHY_HEADER TYPE TREEV_HHDR.

  SET PF-STATUS 'PF0200'.
  SET TITLEBAR 'TL0200'.

  IF PLANILHA IS INITIAL.
    CREATE OBJECT PLANILHA.
    DATA(IT_RETORNO_AUX) = IT_RETORNO[].
    SORT IT_RETORNO_AUX BY DCL SERIEDCL IDVAGAO CNPJFERRO.
    DELETE ADJACENT DUPLICATES FROM IT_RETORNO_AUX COMPARING DCL SERIEDCL IDVAGAO CNPJFERRO.
    LOOP AT IT_RETORNO_AUX INTO DATA(WA_RETORNO).
      CREATE OBJECT CHEGADA.
      CHEGADA->MONTA_PROCESSO( I_DCL = WA_RETORNO-DCL I_SERIE = WA_RETORNO-SERIEDCL I_ID_VAGAO = WA_RETORNO-IDVAGAO I_CNPJ = WA_RETORNO-CNPJFERRO ).
      APPEND WA_RETORNO TO PLANILHA->POSICAO.
      APPEND CHEGADA TO PLANILHA->OBJETOS.
    ENDLOOP.
  ENDIF.

  IF DOCKING IS INITIAL AND CTL_ALV IS INITIAL.

    IF CK_DOCKING_CREATE EQ ABAP_TRUE.

      CREATE OBJECT DOCKING
        EXPORTING
          REPID     = SY-REPID
          DYNNR     = SY-DYNNR
          SIDE      = DOCKING->DOCK_AT_LEFT
          EXTENSION = 420.

      HIERARCHY_HEADER-HEADING = TEXT-014.
      HIERARCHY_HEADER-WIDTH   = 50.

      CREATE OBJECT TREE
        EXPORTING
          PARENT                = DOCKING
          NODE_SELECTION_MODE   = TREE->NODE_SEL_MODE_MULTIPLE
          ITEM_SELECTION        = 'X'
          HIERARCHY_COLUMN_NAME = C_TREE-COLUMN1
          HIERARCHY_HEADER      = HIERARCHY_HEADER.

      CREATE OBJECT G_APPLICATION.
      SET HANDLER G_APPLICATION->HANDLE_NODE_DOUBLE_CLICK  FOR TREE.
      SET HANDLER G_APPLICATION->HANDLE_ITEM_DOUBLE_CLICK  FOR TREE.
      SET HANDLER G_APPLICATION->HANDLE_EXPAND_NO_CHILDREN FOR TREE.
      SET HANDLER G_APPLICATION->HANDLE_LINK_CLICK         FOR TREE.
      SET HANDLER G_APPLICATION->HANDLE_BUTTON_CLICK       FOR TREE.
      SET HANDLER G_APPLICATION->HANDLE_CHECKBOX_CHANGE    FOR TREE.

      CALL METHOD TREE->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE-COLUMN4
          ALIGNMENT   = CL_GUI_COLUMN_TREE=>ALIGN_AT_RIGHT
          WIDTH       = 18
          HEADER_TEXT = TEXT-017.

      CALL METHOD TREE->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE-COLUMN5
          ALIGNMENT   = CL_GUI_COLUMN_TREE=>ALIGN_CENTER
          WIDTH       = 20
          HEADER_TEXT = TEXT-018.

      CALL METHOD TREE->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE-COLUMN6
          ALIGNMENT   = CL_GUI_COLUMN_TREE=>ALIGN_AT_RIGHT
          WIDTH       = 20
          HEADER_TEXT = TEXT-019.

      CALL METHOD TREE->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE-COLUMN7
          ALIGNMENT   = CL_GUI_COLUMN_TREE=>ALIGN_CENTER
          WIDTH       = 20
          HEADER_TEXT = TEXT-020.

      CALL METHOD TREE->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE-COLUMN8
          HIDDEN      = ABAP_TRUE
          WIDTH       = 20
          HEADER_TEXT = TEXT-020.

      CALL METHOD TREE->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE-COLUMN9
          HIDDEN      = ABAP_TRUE
          WIDTH       = 20
          HEADER_TEXT = TEXT-020.

      CALL METHOD TREE->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE-COLUMN10
          HIDDEN      = ABAP_TRUE
          WIDTH       = 20
          HEADER_TEXT = TEXT-020.

      CALL METHOD TREE->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE-COLUMN11
          HIDDEN      = ABAP_TRUE
          WIDTH       = 20
          HEADER_TEXT = TEXT-020.


* register events
      PERFORM REGISTER_EVENTS.
* set handler for tree1
      CREATE OBJECT TREE_EVENT_RECEIVER.
      SET HANDLER TREE_EVENT_RECEIVER->HANDLE_DOUBLE_CLICK FOR TREE.
      SET HANDLER TREE_EVENT_RECEIVER->HANDLE_ON_DRAG FOR TREE.
      SET HANDLER TREE_EVENT_RECEIVER->HANDLE_ON_DRAG_MULTIPLE FOR TREE.

      G_DROPEFFECT = CL_DRAGDROP=>MOVE.

      CREATE OBJECT DRAGDROP_TREE.

      CALL METHOD DRAGDROP_TREE->ADD
        EXPORTING
          FLAVOR     = 'LINE'
          DRAGSRC    = 'X'
          DROPTARGET = ''
          EFFECT     = G_DROPEFFECT.

      CALL METHOD DRAGDROP_TREE->GET_HANDLE
        IMPORTING
          HANDLE = G_HANDLE_TREE.

      CREATE OBJECT DRAGDROP_ALV.
      CALL METHOD DRAGDROP_ALV->ADD
        EXPORTING
          FLAVOR     = 'LINE'
          DRAGSRC    = ''
          DROPTARGET = 'X'
          EFFECT     = G_DROPEFFECT.

      CALL METHOD DRAGDROP_ALV->GET_HANDLE
        IMPORTING
          HANDLE = G_HANDLE_ALV.

      PERFORM MONTA_SAIDA.

    ENDIF.

    CREATE OBJECT DG_SPLITTER
      EXPORTING
        PARENT  = CL_GUI_CONTAINER=>SCREEN0
        ROWS    = 1
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DATA(CONTAINER).

    CREATE OBJECT CTL_ALV
      EXPORTING
        I_PARENT = CONTAINER.

    "Catalogo
    PERFORM FILL_IT_FIELDCATALOG.

    "Hints
    PERFORM FILL_IT_HINTS.

*   Fill info for layout variant
    PERFORM FILL_GS_VARIANT.

*   Set layout parameters for ALV grid
    GS_LAYOUT-GRID_TITLE = TEXT-100.
    GS_LAYOUT-SEL_MODE   = 'A'.
    GS_LAYOUT-ZEBRA      = ABAP_FALSE.
    "GS_LAYOUT-STYLEFNAME = 'STYLE'.
    GS_LAYOUT-SEL_MODE   = 'A'.
    GS_LAYOUT-EDIT_MODE  = ABAP_TRUE.
    GS_LAYOUT-CWIDTH_OPT = ABAP_TRUE.
    GS_LAYOUT-INFO_FNAME = 'LINE_COLOR'.
    "GS_LAYOUT-CTAB_FNAME = 'COLOR_CELL'.
    GS_LAYOUT-S_DRAGDROP-GRID_DDID = G_HANDLE_ALV.
    GS_LAYOUT-S_DRAGDROP-CNTR_DDID = G_HANDLE_ALV.
    GS_LAYOUT-S_DRAGDROP-COL_DDID  = G_HANDLE_ALV.
    GS_LAYOUT-S_DRAGDROP-ROW_DDID  = G_HANDLE_ALV.
    GS_LAYOUT-S_DRAGDROP-FIELDNAME = G_HANDLE_ALV.

    CLEAR: IT_EXCLUDE_FCODE, IT_EXCLUDE_FCODE[].

    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW    TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW    TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW      TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE         TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO          TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW    TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_COPY          TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW      TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_CUT           TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_CUT           TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_CHECK             TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_REFRESH           TO IT_EXCLUDE_FCODE.

    CALL METHOD CTL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT
        IS_VARIANT           = GS_VARIANT
        IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
        I_SAVE               = 'A'
        IT_EXCEPT_QINFO      = IT_EXCEPT_QINFO
      CHANGING
        IT_FIELDCATALOG      = IT_FIELDCATALOG
        IT_OUTTAB            = IT_RETORNO_EDT.

    CREATE OBJECT OBG_TOOLBAR EXPORTING IO_ALV_GRID = CTL_ALV.
    SET HANDLER OBG_TOOLBAR->ON_TOOLBAR FOR CTL_ALV.
    SET HANDLER OBG_TOOLBAR->HANDLE_USER_COMMAND FOR CTL_ALV.

    CTL_ALV->REGISTER_EDIT_EVENT( EXPORTING I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).
    CTL_ALV->REGISTER_EDIT_EVENT( EXPORTING I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED ).

    CREATE OBJECT EVENT_RECEIVER.
    SET HANDLER EVENT_RECEIVER->HANDLE_DATA_CHANGED FOR CTL_ALV.
    SET HANDLER EVENT_RECEIVER->HANDLE_HOTSPOT_CLICK FOR CTL_ALV.
    SET HANDLER EVENT_RECEIVER->HANDLE_BUTTON_CLICK FOR CTL_ALV.
    SET HANDLER EVENT_RECEIVER->HANDLE_F4 FOR CTL_ALV.
    SET HANDLER EVENT_RECEIVER->HANDLE_ONDROP FOR CTL_ALV.
    SET HANDLER EVENT_RECEIVER->HANDLE_ONDRAG FOR CTL_ALV.

    WA_STABLE-ROW = ABAP_TRUE.
    WA_STABLE-COL = ABAP_TRUE.

  ENDIF.

  CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE = WA_STABLE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0200_EXIT INPUT.

  DATA: ANSWER TYPE C.

  ANSWER = '1'.

  IF PLANILHA->VERIFICA_ALTEROU( ) EQ ABAP_TRUE.

    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        TITLEBAR              = TEXT-010
        TEXT_QUESTION         = TEXT-011
        TEXT_BUTTON_1         = TEXT-012
        ICON_BUTTON_1         = 'ICON_CHECKED'
        TEXT_BUTTON_2         = TEXT-013
        ICON_BUTTON_2         = 'ICON_INCOMPLETE'
        DEFAULT_BUTTON        = '2'
        DISPLAY_CANCEL_BUTTON = ' '
      IMPORTING
        ANSWER                = ANSWER
      EXCEPTIONS
        TEXT_NOT_FOUND        = 1
        OTHERS                = 2.

    IF SY-SUBRC IS NOT INITIAL.
      EXIT.
    ENDIF.
  ENDIF.

  CHECK ANSWER EQ '1'.

  PERFORM LIMPAR_TELA_0200 USING ABAP_TRUE.

  LEAVE TO SCREEN 0.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  REGISTER_EVENTS
*&---------------------------------------------------------------------*
FORM REGISTER_EVENTS.
  DATA: LT_EVENTS TYPE CNTL_SIMPLE_EVENTS,
        L_EVENT   TYPE CNTL_SIMPLE_EVENT.
* define the events which will be passed to the backend
  CLEAR L_EVENT.
  L_EVENT-EVENTID = CL_GUI_COLUMN_TREE=>EVENTID_NODE_DOUBLE_CLICK.
  L_EVENT-APPL_EVENT = 'X'.
  APPEND L_EVENT TO LT_EVENTS.
  CLEAR L_EVENT.
  L_EVENT-EVENTID = CL_GUI_COLUMN_TREE=>EVENTID_EXPAND_NO_CHILDREN.
  APPEND L_EVENT TO LT_EVENTS.
  CLEAR L_EVENT.
  L_EVENT-EVENTID = CL_GUI_COLUMN_TREE=>EVENTID_HEADER_CLICK.
  APPEND L_EVENT TO LT_EVENTS.
  CLEAR L_EVENT.
* register events
  CALL METHOD TREE->SET_REGISTERED_EVENTS
    EXPORTING
      EVENTS                    = LT_EVENTS
    EXCEPTIONS
      CNTL_ERROR                = 1
      CNTL_SYSTEM_ERROR         = 2
      ILLEGAL_EVENT_COMBINATION = 3.
  IF SY-SUBRC <> 0.
    MESSAGE X534(0K).
  ENDIF.
ENDFORM.                               " REGISTER_EVENTS

*&---------------------------------------------------------------------*
*&      Form  MONTA_SAIDA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM MONTA_SAIDA .

  DATA: CNODE       TYPE TREEV_NODE,
        NODE        TYPE TREEV_NODE,
        ITEM        TYPE MTREEITM,
        QTD_ITENS   TYPE I,
        LC_CNPJ(18).

  CLEAR: NODE_TABLE,
         ITEM_TABLE,
         NODE_TABLE[],
         ITEM_TABLE[].

  TREE->DELETE_ALL_NODES( ).

  DATA(IT_RETORNO_EMITENTE)  = IT_RETORNO[].
  DATA(IT_RETORNO_DCL_VAGAO) = IT_RETORNO[].
  SORT IT_RETORNO_EMITENTE BY EMIT_CNPJ.
  DELETE ADJACENT DUPLICATES FROM IT_RETORNO_EMITENTE COMPARING EMIT_CNPJ.
  SORT IT_RETORNO_DCL_VAGAO BY EMIT_CNPJ DCL IDVAGAO.
  DELETE ADJACENT DUPLICATES FROM IT_RETORNO_DCL_VAGAO COMPARING EMIT_CNPJ DCL IDVAGAO.

  QTD_ITENS = 0.

  LOOP AT IT_RETORNO_EMITENTE INTO DATA(WA_RETORNO_EMITENTE).
    ADD 1 TO QTD_ITENS.
    CLEAR: CNODE.
    CNODE-NODE_KEY   = QTD_ITENS.

    CONDENSE CNODE-NODE_KEY NO-GAPS.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = CNODE-NODE_KEY
      IMPORTING
        OUTPUT = CNODE-NODE_KEY.

    CNODE-HIDDEN     = ' '.                 " The node is visible,
    CNODE-DISABLED   = ' '.                 " selectable,
    CNODE-ISFOLDER   = 'X'.                 " a folder.
    CNODE-EXPANDER   = ' '.
    CNODE-N_IMAGE    = ICON_AGENT.
    CNODE-EXP_IMAGE  = ICON_AGENT.
    CNODE-DRAGDROPID = G_HANDLE_TREE.
    APPEND CNODE TO NODE_TABLE.

    CLEAR ITEM.
    ITEM-NODE_KEY  = CNODE-NODE_KEY.
    ITEM-ITEM_NAME = C_TREE-COLUMN1.
    ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_FONT_DEFAULT. " Text Item
    ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
    ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_INTENSIFIED.
    ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
    CONCATENATE WA_RETORNO_EMITENTE-EMIT_RSOCIAL WA_RETORNO_EMITENTE-EMIT_CNPJ INTO ITEM-TEXT SEPARATED BY ' - '.
    APPEND ITEM TO ITEM_TABLE.

    LOOP AT IT_RETORNO_DCL_VAGAO INTO DATA(WA_RETORNO) WHERE EMIT_CNPJ EQ WA_RETORNO_EMITENTE-EMIT_CNPJ.
      ADD 1 TO QTD_ITENS.
      CLEAR: NODE.
      NODE-NODE_KEY   = QTD_ITENS.

      CONDENSE NODE-NODE_KEY NO-GAPS.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = NODE-NODE_KEY
        IMPORTING
          OUTPUT = NODE-NODE_KEY.

      NODE-HIDDEN     = ' '.                 " The node is visible,
      NODE-DISABLED   = ' '.                 " selectable,
      NODE-ISFOLDER   = ' '.                 " a folder.
      NODE-EXPANDER   = ' '.
      NODE-N_IMAGE    = ICON_SUPPLIER.
      NODE-EXP_IMAGE  = ICON_SUPPLIER.
      NODE-DRAGDROPID = G_HANDLE_TREE.
      NODE-RELATKEY   = CNODE-NODE_KEY.
      NODE-RELATSHIP  = CL_GUI_COLUMN_TREE=>RELAT_LAST_CHILD.
      APPEND NODE TO NODE_TABLE.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE-COLUMN1.
      ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
      ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
      ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
      ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
      CONCATENATE WA_RETORNO-DCL WA_RETORNO-SERIEDCL INTO ITEM-TEXT SEPARATED BY '/'.
      CONCATENATE ITEM-TEXT WA_RETORNO-IDVAGAO INTO ITEM-TEXT SEPARATED BY ' - '.
      APPEND ITEM TO ITEM_TABLE.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE-COLUMN4.
      ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
      ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
      ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
      ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
      WRITE WA_RETORNO-QT_SAIDA TO ITEM-TEXT.
      CONDENSE ITEM-TEXT NO-GAPS.
      APPEND ITEM TO ITEM_TABLE.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE-COLUMN5.
      ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
      ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
      ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
      ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
      IF WA_RETORNO-DT_SAIDA IS NOT INITIAL.
        CONCATENATE WA_RETORNO-DT_SAIDA+6(2) '.' WA_RETORNO-DT_SAIDA+4(2) '.' WA_RETORNO-DT_SAIDA(4) INTO ITEM-TEXT.
      ENDIF.
      APPEND ITEM TO ITEM_TABLE.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE-COLUMN6.
      ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
      ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
      ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
      ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
      IF WA_RETORNO-QT_CHEGADA IS NOT INITIAL.
        WRITE WA_RETORNO-QT_CHEGADA TO ITEM-TEXT.
      ENDIF.
      CONDENSE ITEM-TEXT NO-GAPS.
      APPEND ITEM TO ITEM_TABLE.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE-COLUMN7.
      ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
      ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
      ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
      ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
      IF WA_RETORNO-DT_CHEGADA IS NOT INITIAL.
        CONCATENATE WA_RETORNO-DT_CHEGADA+6(2) '.' WA_RETORNO-DT_CHEGADA+4(2) '.' WA_RETORNO-DT_CHEGADA(4) INTO ITEM-TEXT.
      ENDIF.
      APPEND ITEM TO ITEM_TABLE.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE-COLUMN8.
      ITEM-TEXT      = WA_RETORNO-DCL.
      APPEND ITEM TO ITEM_TABLE.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE-COLUMN9.
      ITEM-TEXT      = WA_RETORNO-IDVAGAO.
      APPEND ITEM TO ITEM_TABLE.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE-COLUMN10.
      ITEM-TEXT      = WA_RETORNO-SERIEDCL.
      APPEND ITEM TO ITEM_TABLE.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE-COLUMN11.
      ITEM-TEXT      = WA_RETORNO-CNPJFERRO.
      APPEND ITEM TO ITEM_TABLE.

    ENDLOOP.

    ADD 1 TO QTD_ITENS.
  ENDLOOP.

  CALL METHOD TREE->ADD_NODES_AND_ITEMS
    EXPORTING
      NODE_TABLE                     = NODE_TABLE
      ITEM_TABLE                     = ITEM_TABLE
      ITEM_TABLE_STRUCTURE_NAME      = 'MTREEITM'
    EXCEPTIONS
      FAILED                         = 1
      CNTL_SYSTEM_ERROR              = 3
      ERROR_IN_TABLES                = 4
      DP_ERROR                       = 5
      TABLE_STRUCTURE_NAME_NOT_FOUND = 6.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  LIMPAR_TELA_0200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM LIMPAR_TELA_0200 USING CK_LIMPAR_TABELAS TYPE CHAR01.

  LOOP AT PLANILHA->OBJETOS INTO DATA(WA_OBJETO).
    CLEAR: WA_OBJETO.
  ENDLOOP.

  CLEAR: PLANILHA.

  IF CTL_ALV IS NOT INITIAL.
    CTL_ALV->FREE( ).
  ENDIF.
  CLEAR: CTL_ALV.

  IF CONTAINER IS NOT INITIAL.
    CONTAINER->FREE( ).
  ENDIF.
  CLEAR: CONTAINER.

  IF DG_SPLITTER IS NOT INITIAL.
    DG_SPLITTER->FREE( ).
  ENDIF.

  CLEAR: DG_SPLITTER, DRAGDROP_ALV, DRAGDROP_TREE, TREE_EVENT_RECEIVER.

  CLEAR: G_APPLICATION.

  IF TREE IS NOT INITIAL.
    TREE->FREE( ).
  ENDIF.
  CLEAR: TREE.

  IF DOCKING IS NOT INITIAL.
    DOCKING->FREE( ).
  ENDIF.
  CLEAR: DOCKING.

  IF CK_LIMPAR_TABELAS EQ ABAP_TRUE.
    CLEAR: IT_RETORNO_EDT[], IT_RETORNO_EDT, IT_RETORNO_SEL[], IT_RETORNO_SEL.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG
*&---------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG .

  DATA: LC_COL_POS  TYPE LVC_COLPOS.

  FIELD-SYMBOLS: <FS_CAT> TYPE LVC_S_FCAT.

  CLEAR: IT_FIELDCATALOG[].

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_RET_PESQ_FERRO_ENTRADA'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG.

  LOOP AT IT_FIELDCATALOG ASSIGNING <FS_CAT>.

    CASE <FS_CAT>-FIELDNAME.
      WHEN 'CD_CHAVE_CTE'.
        <FS_CAT>-NO_OUT = ABAP_TRUE.
        <FS_CAT>-EDIT   = ABAP_FALSE.
      WHEN 'CNPJFERRO'.
        <FS_CAT>-NO_OUT = ABAP_TRUE.
        <FS_CAT>-EDIT   = ABAP_FALSE.
      WHEN 'PESO_CHEGADA' OR 'DT_CHEGADA' OR 'ID_AGPESO'.
        <FS_CAT>-EDIT = ABAP_TRUE.
      WHEN OTHERS.
        <FS_CAT>-EDIT = ABAP_FALSE.
    ENDCASE.

    IF <FS_CAT>-FIELDNAME EQ 'ID_AGPESO'.
      <FS_CAT>-F4AVAILABL = ABAP_TRUE.
    ENDIF.

  ENDLOOP.

ENDFORM.                    " FILL_IT_FIELDCATALOG


*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT
*&---------------------------------------------------------------------*
FORM FILL_GS_VARIANT .

  GS_VARIANT-REPORT      = SY-REPID.
  GS_VARIANT-HANDLE      = '0200'.
  GS_VARIANT-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT-USERNAME    = ABAP_FALSE.
  GS_VARIANT-VARIANT     = ABAP_FALSE.
  GS_VARIANT-TEXT        = ABAP_FALSE.
  GS_VARIANT-DEPENDVARS  = ABAP_FALSE.

ENDFORM.                    " FILL_GS_VARIANT

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_HINTS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_HINTS .

*  DATA: IT_DD07V TYPE TABLE OF DD07V WITH HEADER LINE.
*
*  CLEAR: IT_EXCEPT_QINFO.
*
*  "Informações Documento
*  CALL FUNCTION 'GET_DOMAIN_VALUES'
*    EXPORTING
*      DOMNAME    = 'ZDM_ST_NFE_DOCUMENTO'
*    TABLES
*      VALUES_TAB = IT_DD07V.
*
*  LOOP AT IT_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
*    WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
*    WA_EXCEPT_QINFO-VALUE = ZCL_NFE_INBOUND=>GET_ICON_STATUS_DOCUMENTO( I_STATUS = CONV #( IT_DD07V-DOMVALUE_L ) ).
*    WA_EXCEPT_QINFO-TEXT  = IT_DD07V-DDTEXT.
*    WA_EXCEPT_QINFO-TABNAME   = 'ZDE_NFE_DIST_ALV'.
*    WA_EXCEPT_QINFO-FIELDNAME = 'ICO_ST_DOCUMENTO'.
*    APPEND WA_EXCEPT_QINFO TO IT_EXCEPT_QINFO.
*  ENDLOOP.
*
*  "Informações Fiscais
*  CALL FUNCTION 'GET_DOMAIN_VALUES'
*    EXPORTING
*      DOMNAME    = 'ZDM_ST_NFE_FISCAL'
*    TABLES
*      VALUES_TAB = IT_DD07V.
*
*  LOOP AT IT_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
*    WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
*    WA_EXCEPT_QINFO-VALUE = ZCL_NFE_INBOUND=>GET_ICON_STATUS_FISCAL( I_STATUS = CONV #( IT_DD07V-DOMVALUE_L ) ).
*    WA_EXCEPT_QINFO-TEXT  = IT_DD07V-DDTEXT.
*    WA_EXCEPT_QINFO-TABNAME   = 'ZDE_NFE_DIST_ALV'.
*    WA_EXCEPT_QINFO-FIELDNAME = 'ICO_ST_FISCAL'.
*    APPEND WA_EXCEPT_QINFO TO IT_EXCEPT_QINFO.
*  ENDLOOP.
*
*  "Informações Físicas
*  CALL FUNCTION 'GET_DOMAIN_VALUES'
*    EXPORTING
*      DOMNAME    = 'ZDM_ST_NFE_FISICO'
*    TABLES
*      VALUES_TAB = IT_DD07V.
*
*  LOOP AT IT_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
*    WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
*    WA_EXCEPT_QINFO-VALUE = ZCL_NFE_INBOUND=>GET_ICON_STATUS_FISCAL( I_STATUS = CONV #( IT_DD07V-DOMVALUE_L ) ).
*    WA_EXCEPT_QINFO-TEXT  = IT_DD07V-DDTEXT.
*    WA_EXCEPT_QINFO-TABNAME   = 'ZDE_NFE_DIST_ALV'.
*    WA_EXCEPT_QINFO-FIELDNAME = 'ICO_ST_FISICO'.
*    APPEND WA_EXCEPT_QINFO TO IT_EXCEPT_QINFO.
*  ENDLOOP.
*
*  "Informações Armazenagem
*  CALL FUNCTION 'GET_DOMAIN_VALUES'
*    EXPORTING
*      DOMNAME    = 'ZDM_ST_NFE_ARMAZEM'
*    TABLES
*      VALUES_TAB = IT_DD07V.
*
*  LOOP AT IT_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
*    WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
*    WA_EXCEPT_QINFO-VALUE = ZCL_NFE_INBOUND=>GET_ICON_STATUS_ARMAZEM( I_STATUS = CONV #( IT_DD07V-DOMVALUE_L ) ).
*    WA_EXCEPT_QINFO-TEXT  = IT_DD07V-DDTEXT.
*    WA_EXCEPT_QINFO-TABNAME   = 'ZDE_NFE_DIST_ALV'.
*    WA_EXCEPT_QINFO-FIELDNAME = 'ICO_ST_ARMAZEM'.
*    APPEND WA_EXCEPT_QINFO TO IT_EXCEPT_QINFO.
*  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  GET_SCROLL_INFO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SCROLL_INFO INPUT.

  IF CTL_ALV IS NOT INITIAL.
    CALL METHOD CTL_ALV->GET_SCROLL_INFO_VIA_ID
      IMPORTING
        ES_COL_INFO = GS_SCROLL_COL
        ES_ROW_NO   = GS_SCROLL_ROW.
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  GET_SELECTED_ROWS  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SELECTED_ROWS INPUT.

  CLEAR IT_SELECTED_ROWS.

  CHECK CTL_ALV IS NOT INITIAL.

  CALL METHOD CTL_ALV->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SELECTED_ROWS.

  CLEAR IT_RETORNO_SEL[].

  LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
    READ TABLE IT_RETORNO_EDT INTO DATA(WA_RETORNO_TY) INDEX WA_SELECTED_ROWS-INDEX.
    APPEND WA_RETORNO_TY TO IT_RETORNO_SEL.
  ENDLOOP.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0200 INPUT.

  DATA: FERRO  TYPE REF TO ZCL_FERROVIARIO_CHEGADA.

  CASE OK_CODE.
    WHEN 'REFRESH'.

      FERRO_CHEGADA->ZIF_PESQUISA~PESQUISAR( EXPORTING I_FILTROS = LC_FILTRO IMPORTING E_REGISTROS = IT_RETORNO ).
      PERFORM LIMPAR_TELA_0200 USING ABAP_TRUE.
      CLEAR: OK_CODE.

    WHEN 'EXECUTAR'.

      LOOP AT PLANILHA->OBJETOS INTO DATA(OBJ_GRAVAR).
        IF OBJ_GRAVAR->CK_ALTEROU EQ ABAP_TRUE.
          IF OBJ_GRAVAR->GET_ID_REFKEY( ) IS INITIAL.
            OBJ_GRAVAR->SET_ID_REFKEY( I_ID_REFKEY = ZCL_FERROVIARIO_CHEGADA=>GET_NEW_ID_REFKEY( ) ).
          ENDIF.
          OBJ_GRAVAR->GRAVAR_REGISTRO( ).
        ENDIF.
      ENDLOOP.

      PERFORM LIMPAR_TELA_0200 USING ABAP_TRUE.
      LEAVE TO SCREEN 0.

    WHEN 'DELETAR'.

      IF IT_RETORNO_SEL IS INITIAL.
        MESSAGE S127.
        EXIT.
      ENDIF.

      DATA(IT_RETORNO_SEL_DEL) = IT_RETORNO_SEL[].
      SORT IT_RETORNO_SEL_DEL BY DCL SERIEDCL IDVAGAO CNPJFERRO.
      DELETE ADJACENT DUPLICATES FROM IT_RETORNO_SEL_DEL COMPARING DCL SERIEDCL IDVAGAO CNPJFERRO.

      LOOP AT IT_RETORNO_SEL_DEL INTO DATA(WA_RETORNO_SEL_DEL).

        READ TABLE PLANILHA->POSICAO WITH KEY DCL       = WA_RETORNO_SEL_DEL-DCL
                                              SERIEDCL  = WA_RETORNO_SEL_DEL-SERIEDCL
                                              IDVAGAO   = WA_RETORNO_SEL_DEL-IDVAGAO
                                              CNPJFERRO = WA_RETORNO_SEL_DEL-CNPJFERRO TRANSPORTING NO FIELDS.

        IF SY-SUBRC IS NOT INITIAL.
          CONTINUE.
        ENDIF.

        READ TABLE PLANILHA->OBJETOS INDEX SY-TABIX INTO FERRO.

        IF SY-SUBRC IS NOT INITIAL.
          CONTINUE.
        ENDIF.

        "128  Deseja Realmente Eliminar a DCL &1 do Vagão &2?
        MESSAGE S128 WITH WA_RETORNO_SEL_DEL-DCL WA_RETORNO_SEL_DEL-IDVAGAO INTO DATA(LC_TEXTO).

        ANSWER = '1'.

        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            TITLEBAR              = TEXT-023
            TEXT_QUESTION         = LC_TEXTO
            TEXT_BUTTON_1         = TEXT-012
            ICON_BUTTON_1         = 'ICON_CHECKED'
            TEXT_BUTTON_2         = TEXT-013
            ICON_BUTTON_2         = 'ICON_INCOMPLETE'
            DEFAULT_BUTTON        = '2'
            DISPLAY_CANCEL_BUTTON = ' '
          IMPORTING
            ANSWER                = ANSWER
          EXCEPTIONS
            TEXT_NOT_FOUND        = 1
            OTHERS                = 2.

        IF SY-SUBRC IS NOT INITIAL.
          CONTINUE.
        ENDIF.

        IF ANSWER NE '1'.
          CONTINUE.
        ENDIF.

        FERRO->ZIF_CADASTRO~EXCLUIR_REGISTRO( ).

      ENDLOOP.

      PERFORM LIMPAR_TELA_0200 USING ABAP_TRUE.
      LEAVE TO SCREEN 0.

  ENDCASE.

ENDMODULE.
