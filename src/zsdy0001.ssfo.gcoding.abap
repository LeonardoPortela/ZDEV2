DATA : W_XBLNR      TYPE VBRK-XBLNR.
DATA : W_IT_GEN     LIKE LINE OF T_IT_GEN.
DATA : W_KONV       LIKE LINE OF T_KONV.
DATA : WA_VBRP      LIKE LINE OF T_VBRP.
DATA : WA_VBAP      LIKE LINE OF T_VBAP.
DATA : W_VBRK_XBLNR TYPE VBRK-XBLNR.
DATA : WA_KNMT      LIKE LINE OF T_KNMT.
DATA : S_VBPA       TYPE VBPA.
DATA : W_KPEIN      TYPE KONV-KPEIN.
DATA : W_KMEIN      TYPE KONV-KMEIN.
DATA : W_KUMZA      TYPE KONV-KUMZA.
DATA : W_VBELV      TYPE VBFA-VBELV.
DATA : W_ADRNR      TYPE ADRC-ADDRNUMBER.
DATA : WA_BSAS      TYPE BSAS.
DATA : WA_BSIS      TYPE BSIS.
DATA : WA_ZSDYT0049 TYPE ZSDYT0049.
DATA : WA_LFA1      TYPE LFA1.

*IF ( SY-UNAME EQ 'MBARBARA' ) OR ( SY-UNAME = 'ABAP' ).
*  BREAK-POINT .
*ENDIF.

*Empresa
SELECT SINGLE BUKRS
  FROM TVKO
  INTO W_BUKRS
  WHERE VKORG = IS_BIL_INVOICE-HD_ORG-SALESORG.

SELECT SINGLE ADRNR
  INTO W_ADRNR
  FROM T001
  WHERE BUKRS EQ W_BUKRS.

SELECT SINGLE *
  INTO ST_ADRC
  FROM ADRC
  WHERE ADDRNUMBER EQ W_ADRNR.

SELECT SINGLE LANDX
  INTO H_LAND
  FROM T005T
  WHERE SPRAS EQ 'S'
    AND LAND1 EQ ST_ADRC-COUNTRY.
*--------------------------------------------------

* IVA
CLEAR W_VARIABLE.
SELECT SINGLE PAVAL
  FROM T001Z
  INTO W_VARIABLE
  WHERE BUKRS = W_BUKRS
    AND PARTY = 'J1AFTV'.

IF W_VARIABLE IS NOT INITIAL.

  SELECT SINGLE TEXT60
    FROM J_1AFITPVT
    INTO W_IVA
    WHERE J_1AFITP = W_VARIABLE
      AND SPRAS    = 'S'.

ENDIF.
*------------------------------------------------

* CUIT
SELECT SINGLE PAVAL
  FROM T001Z
  INTO W_CUIT
  WHERE BUKRS = W_BUKRS
    AND PARTY = 'J1AIDN'.

W_CUIT_AUX = W_CUIT.

CONCATENATE W_CUIT(2) W_CUIT+2(8) W_CUIT+10(1)
       INTO W_CUIT
       SEPARATED BY '-'.
*-----------------------------------------------

* IIBB
CLEAR W_IIBB_TXT.
SELECT SINGLE PAVAL
  FROM T001Z
  INTO W_IIBB_TXT
  WHERE BUKRS = W_BUKRS
    AND PARTY = 'J1AGIN'.

IF W_IIBB_TXT IS NOT INITIAL.

  CONCATENATE W_IIBB_TXT(3)
              W_IIBB_TXT+3(6)
              W_IIBB_TXT+9(1)
         INTO W_IIBB_TXT
         SEPARATED BY '-'.

ENDIF.
*-------------------------------------------

* Inicio de Actividad
CLEAR W_INICIO_ACT.
SELECT SINGLE PAVAL
  FROM T001Z
  INTO W_INICIO_ACT
  WHERE BUKRS = W_BUKRS
    AND PARTY = 'J1AFDT'.

*-----------------------------------------------
* Informações de Corretor (Corredor)
SELECT SINGLE * INTO WA_ZSDYT0049
  FROM ZSDYT0049
 WHERE DOC_FAT EQ IS_BIL_INVOICE-HD_GEN-BIL_NUMBER.

if SY-SUBRC IS INITIAL AND WA_ZSDYT0049-LIFNR IS NOT INITIAL.

  SELECT SINGLE * INTO WA_LFA1
    FROM LFA1
   WHERE lifnr EQ WA_ZSDYT0049-LIFNR.

  IF SY-SUBRC IS INITIAL.
    G_CORR_NAME1  = WA_LFA1-NAME1.
    G_CORR_LIFNR  = WA_LFA1-LIFNR.
    G_CORR_STREET = WA_LFA1-STRAS.

    DATA: QSTR TYPE I.
    QSTR := STRLEN( WA_LFA1-STCD1 ).

    IF QSTR EQ 11.
      CONCATENATE WA_LFA1-STCD1(2) WA_LFA1-STCD1+2(8) WA_LFA1-STCD1+10(1)
             INTO G_CORR_STCD1
             SEPARATED BY '-'.
    ELSE.
      G_CORR_STCD1 = WA_LFA1-STCD1.
    ENDIF.
  ENDIF.

endif.
*-----------------------------------------------
* Factura
SELECT SINGLE VBELN FKDAT KUNRG XBLNR
              ZTERM VKORG VTWEG SPART
  FROM VBRK
  INTO S_XBLNR
  WHERE VBELN EQ IS_BIL_INVOICE-HD_GEN-BIL_NUMBER.

W_XBLNR = S_XBLNR-XBLNR.
W_LETRA = W_XBLNR+4(1).

CONCATENATE W_XBLNR(4) W_XBLNR+5(8)
       INTO W_NRO_FAC
       SEPARATED BY '-'.

CONCATENATE S_XBLNR-FKDAT+6(2) S_XBLNR-FKDAT+4(2) S_XBLNR-FKDAT(4)
       INTO W_FECHA
       SEPARATED BY '/'.

* Cliente
IF S_XBLNR-KUNRG IS NOT INITIAL.

*Señores
  SELECT SINGLE KUNNR REGIO LAND1 NAME1 STRAS PSTLZ ORT01 STCD1 FITYP
    FROM KNA1
    INTO S_KNA1
    WHERE KUNNR EQ S_XBLNR-KUNRG.

  IF S_KNA1 IS NOT INITIAL.

*Descripcion de region
    SELECT SINGLE BEZEI
       FROM T005U
       INTO W_BEZEI
       WHERE LAND1 EQ S_KNA1-LAND1
         AND BLAND EQ S_KNA1-REGIO
         AND SPRAS EQ 'S'.

*Descripcion IVA
    SELECT SINGLE TEXT60
      FROM J_1AFITPVT
      INTO W_TEXT60
      WHERE SPRAS    EQ 'S'
        AND J_1AFITP EQ S_KNA1-FITYP.

    W_IVA_DEST   = W_TEXT60.

    CONCATENATE S_KNA1-STCD1(2) S_KNA1-STCD1+2(8) S_KNA1-STCD1+10(1)
           INTO W_CUIT_DEST
           SEPARATED BY '-'.

  ENDIF.
*----------------------------------------------------

ENDIF.

CONCATENATE S_KNA1-STRAS S_KNA1-PSTLZ S_KNA1-ORT01
       INTO W_DIR
       SEPARATED BY '  '.
*----------------------------------------

* Tipo de Documento
SELECT SINGLE COD_DOC DESCRIPCION
  FROM ZYSD0001
  INTO (W_COD_DOCUMENT,W_DOC)
  WHERE TIPO_DOC EQ IS_BIL_INVOICE-HD_GEN-BIL_VBTYPE
    AND LETRA EQ W_LETRA.

* Datos comerciales
DATA: WA_LIKP TYPE LIKP,
      WA_VBFA TYPE VBFA.

DATA: W_KUNNR TYPE KNA1-KUNNR.

* Destino
SELECT SINGLE * INTO WA_LIKP
  FROM LIKP
  WHERE VBELN EQ IS_BIL_INVOICE-HD_REF-DELIV_NUMB.

W_KUNNR = WA_LIKP-KUNNR.
W_LFDAT = WA_LIKP-KODAT.

IF SY-SUBRC IS INITIAL.

  SELECT T~LANDX
    INTO W_DESTINO
    UP TO 1 ROWS
    FROM KNA1 AS K
    INNER JOIN T005T AS T
            ON K~LAND1 = T~LAND1
    WHERE K~KUNNR EQ W_KUNNR
      AND T~SPRAS EQ 'S'.
  ENDSELECT.

  CLEAR: W_BSTKD_E.

  SELECT SINGLE * INTO WA_VBFA
    FROM VBFA
   WHERE VBELN EQ WA_LIKP-VBELN
     "AND POSNN EQ WA_LIKP-POSNR
     AND VBTYP_N EQ 'J'
     AND VBTYP_V EQ 'C'.

  IF SY-SUBRC IS INITIAL.
    SELECT SINGLE BSTKD_E INTO W_BSTKD_E
      FROM VBKD
     WHERE VBELN EQ WA_VBFA-VBELV.
  ENDIF.

ENDIF.
*----------------------------------------------
* Nro de documento
W_DOCUMENTO  = S_XBLNR-VBELN.
*-----------------------------------------------

* Detalles de Productos y Cantidades
LOOP AT IS_BIL_INVOICE-IT_GEN
     INTO S_IT_GEN
     WHERE BIL_NUMBER EQ IS_BIL_INVOICE-HD_GEN-BIL_NUMBER.

  APPEND S_IT_GEN TO T_IT_GEN.

ENDLOOP.

SELECT SINGLE XBLNR KNUMV WAERK KURRF VTWEG KUNAG
  FROM VBRK
  INTO S_VBRK
  WHERE VBELN = S_IT_GEN-BIL_NUMBER.

SELECT MATNR VBELN POSNR FKIMG VRKME ARKTX NETWR WERKS LGORT AUBEL
  FROM VBRP
  INTO CORRESPONDING FIELDS OF TABLE T_VBRP
  WHERE VBELN = S_IT_GEN-BIL_NUMBER.

*Interlocutores
LOOP AT T_VBRP
     INTO S_VBRP
     WHERE VBELN = S_IT_GEN-BIL_NUMBER.

* Contrato
  CLEAR W_VBELV.
  SELECT SINGLE VBELV "BNAME MAHDT
    INTO W_VBELV      "INTO (W_BUQUE,W_FEBL)
    FROM VBFA
    WHERE VBELN   EQ S_VBRP-AUBEL
      AND VBTYP_V EQ 'G'.

  W_CONTRATO = W_VBELV.

* Interlocutor.
  SELECT SINGLE KUNNR
    FROM VBPA
    INTO S_VBRP-KUNAG
    WHERE VBELN = S_IT_GEN-BIL_NUMBER AND
          POSNR = S_VBRP-POSNR AND
          PARVW = 'AG'.

  SELECT SINGLE KUNNR
    FROM VBPA
    INTO S_VBRP-KUNWE
   WHERE VBELN = S_IT_GEN-BIL_NUMBER AND
         PARVW = 'WE'.

  IF SY-SUBRC NE 0.
    S_VBRP-KUNWE = S_VBRP-KUNAG.
  ENDIF.

  MODIFY T_VBRP FROM S_VBRP INDEX SY-TABIX.

  CLEAR: WA_KNMT-MATNR, WA_KNMT-KDMAT ,WA_KNMT-KUNNR.

  IF S_VBRP-KUNAG = S_VBRP-KUNWE.
    SELECT SINGLE MATNR KDMAT KUNNR
      FROM KNMT
      INTO WA_KNMT
     WHERE VKORG   = IS_BIL_INVOICE-HD_ORG-SALESORG
       AND VTWEG   = S_VBRK-VTWEG
       AND KUNNR   = S_VBRP-KUNAG
       AND MATNR   = S_VBRP-MATNR.
  ELSE.
    SELECT SINGLE MATNR KDMAT KUNNR
      FROM KNMT
      INTO WA_KNMT
     WHERE VKORG   = IS_BIL_INVOICE-HD_ORG-SALESORG
       AND VTWEG   = S_VBRK-VTWEG
       AND KUNNR   = S_VBRP-KUNWE
       AND MATNR   = S_VBRP-MATNR.
  ENDIF.

  IF NOT WA_KNMT-KDMAT IS INITIAL.
    MOVE WA_KNMT-KDMAT TO S_VBRP-KDMAT.
  ENDIF.

  MODIFY T_VBRP FROM S_VBRP INDEX SY-TABIX.

ENDLOOP.
*-------------------------------------------

* CAE
W_VBRK_XBLNR = S_VBRK-XBLNR(4).

SELECT SINGLE EBRCH WSBRNCH
FROM J_1ASNR
INTO (W_EBRCH,W_WSBRNCH)
WHERE J_1ASNR EQ W_VBRK_XBLNR
  AND BUKRS   EQ W_BUKRS.

SELECT SINGLE BRNCH CAE_NUM CAE_DUEDATE
  FROM J_1ACAE
  INTO S_J_1ACAE
  WHERE BUKRS   = W_BUKRS
    AND CAE_REF = IS_BIL_INVOICE-HD_GEN-BIL_NUMBER.
*     AND XBLNR   = S_XBLNR-XBLNR.

W_BRNCH = S_XBLNR-XBLNR(4).

W_J_1ACAE  = S_J_1ACAE-CAE_NUM.
W_J_1ACAE2 = S_J_1ACAE-CAE_DUEDATE.
W_J_1ACAE3 = S_J_1ACAE-BRNCH.

IF W_EBRCH = 'X' OR W_WSBRNCH = 'X'.
  CONCATENATE W_CUIT_AUX W_COD_DOCUMENT W_VBRK_XBLNR W_J_1ACAE W_J_1ACAE2 INTO W_BARCODE.
  W_CAE_NUM  = S_J_1ACAE-CAE_NUM.
  W_CAE_VENC = S_J_1ACAE-CAE_DUEDATE.
ENDIF.

DATA: W_DIGITO TYPE C.

CALL FUNCTION 'ZYSD0001'
  EXPORTING
    CODIGO_BARRA = W_BARCODE
  IMPORTING
    DIGITO       = W_DIGITO.

CONCATENATE W_BARCODE W_DIGITO
       INTO W_BARCODE.
*-------------------------------------------

*Precios
IF S_VBRK-KNUMV IS NOT INITIAL.

*--> 21/06/2023 - Migração S4 - DG - Início
*  SELECT KPOSN KSCHL KAPPL KBETR KWERT
*         KPEIN KMEIN
*         KNUMV KUMZA
*         KOAID KSTAT
*    FROM KONV
*    INTO CORRESPONDING FIELDS OF TABLE T_KONV
*   WHERE KNUMV EQ S_VBRK-KNUMV
*     and KSTAT EQ SPACE.


  SELECT KPOSN, KSCHL, KAPPL, KBETR, KWERT,
         KPEIN, KMEIN, KNUMV, KUMZA, KOAID, KSTAT
    FROM v_KONV
    INTO TABLE @data(lT_KONV_aux)
   WHERE KNUMV EQ @S_VBRK-KNUMV
     and KSTAT EQ @SPACE.

  move-corresponding lT_KONV_aux[] to T_KONV[].
*<-- 21/06/2023 - Migração S4 - DG - Fim

  LOOP AT T_KONV INTO S_KONV.

    SELECT SINGLE VTEXT
             INTO S_KONV-VTEXT
      FROM T685T
      WHERE KSCHL EQ S_KONV-KSCHL
        AND KAPPL EQ S_KONV-KAPPL
        AND SPRAS EQ 'S'.

    MODIFY T_KONV FROM S_KONV.

  ENDLOOP.

ENDIF.

*Armado de tabla final
*--------------------------------
DATA: W_PREC_UN  TYPE KONV-KBETR,
      W_POSNR    LIKE VBRP-POSNR,
      W_PREC_DEC TYPE P DECIMALS 5.   "LIKE konv-kbetr,

DATA: WA_J_1ACAE TYPE J_1ACAE,
      WA_BKPF    TYPE BKPF,
      WA_BSID    TYPE BSID,
      WA_BSAD    TYPE BSAD,
      WA_MAKT    TYPE MAKT.

FIELD-SYMBOLS: <FS_KONV> TYPE Y_KONV.


SORT T_VBRP ASCENDING BY MATNR POSNR.
SORT T_KONV ASCENDING BY KPOSN.

CLEAR W_TOTAL.

SELECT SINGLE * INTO WA_J_1ACAE
  FROM J_1ACAE
 WHERE CAE_REF EQ S_IT_GEN-BIL_NUMBER.

LOOP AT T_VBRP INTO WA_VBRP.

* Inicializar
  CLEAR: S_FINAL,
         W_POSNR.

* Cargar posiciones en tabla auxiliar
  S_FINAL-COD_VENT = WA_VBRP-MATNR.

  IF S_VBRK-WAERK EQ 'USD' AND WA_J_1ACAE-BRNCH = '0005'.
    SELECT SINGLE * INTO WA_MAKT
      FROM MAKT
     WHERE MATNR EQ WA_VBRP-MATNR
       AND SPRAS EQ 'E'.
    IF SY-SUBRC IS INITIAL AND WA_MAKT-MAKTX IS NOT INITIAL.
      S_FINAL-DESCRIP  = WA_MAKT-MAKTX.
    ELSE.
      S_FINAL-DESCRIP  = WA_VBRP-ARKTX.
    ENDIF.
  ELSE.
    S_FINAL-DESCRIP  = WA_VBRP-ARKTX.
  ENDIF.

  W_POSNR           = WA_VBRP-POSNR.

* Puerto
  SELECT SINGLE LGOBE
    INTO W_PUERTO
    FROM T001L
    WHERE WERKS EQ WA_VBRP-WERKS
      AND LGORT EQ WA_VBRP-LGORT.

*Precio Unitario
  CLEAR: W_PREC_DEC,
         W_KPEIN,
         W_KMEIN,
         W_KONV.

  IF S_VBRK-WAERK EQ 'USD'.

    IF WA_J_1ACAE-BRNCH = '0005'.

      SELECT SINGLE * INTO WA_BKPF
        FROM BKPF
       WHERE BUKRS EQ WA_J_1ACAE-BUKRS
         AND GJAHR EQ WA_J_1ACAE-CAE_REFYR
         AND AWKEY EQ WA_J_1ACAE-CAE_REF.

      IF SY-SUBRC IS INITIAL.

*        LOOP AT T_KONV ASSIGNING <FS_KONV>.
*          CASE <FS_KONV>-KSCHL.
*            WHEN 'PR00'.
*
*              SELECT SINGLE * INTO WA_BSID
*                FROM BSID
*               WHERE BUKRS EQ WA_BKPF-BUKRS
*                 AND BELNR EQ WA_BKPF-BELNR
*                 AND GJAHR EQ WA_BKPF-GJAHR.
*
*              IF SY-SUBRC IS NOT INITIAL.
*                SELECT SINGLE * INTO WA_BSAD
*                  FROM BSAD
*                 WHERE BUKRS EQ WA_BKPF-BUKRS
*                   AND BELNR EQ WA_BKPF-BELNR
*                   AND GJAHR EQ WA_BKPF-GJAHR.
*
*                IF SY-SUBRC IS INITIAL.
*                  <FS_KONV>-KWERT = WA_BSAD-DMBTR.
*                ENDIF.
*              ELSE.
*                <FS_KONV>-KWERT = WA_BSID-DMBTR.
*              ENDIF.
*          ENDCASE.
*        ENDLOOP.
      ENDIF.
    ELSEIF WA_J_1ACAE-BRNCH = '0006'.

      SELECT SINGLE * INTO WA_BKPF
        FROM BKPF
       WHERE BUKRS EQ WA_J_1ACAE-BUKRS
         AND GJAHR EQ WA_J_1ACAE-CAE_REFYR
         AND AWKEY EQ WA_J_1ACAE-CAE_REF.

      IF SY-SUBRC IS INITIAL.

        LOOP AT T_KONV ASSIGNING <FS_KONV>.
          IF <FS_KONV>-KSCHL EQ 'PR00'.
            <FS_KONV>-KWERT = 0.

            SELECT * INTO WA_BSIS
              FROM BSIS
             WHERE BUKRS EQ WA_BKPF-BUKRS
               AND BELNR EQ WA_BKPF-BELNR
               AND GJAHR EQ WA_BKPF-GJAHR.

              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
                EXPORTING
                  INPUT  = WA_BSIS-HKONT
                IMPORTING
                  OUTPUT = WA_BSIS-HKONT.

              IF WA_BSIS-HKONT(1) = '3'.
                <FS_KONV>-KWERT = <FS_KONV>-KWERT + WA_BSIS-DMBTR.
              ENDIF.
            ENDSELECT.

            SELECT * INTO WA_BSAS
              FROM BSAS
             WHERE BUKRS EQ WA_BKPF-BUKRS
               AND BELNR EQ WA_BKPF-BELNR
               AND GJAHR EQ WA_BKPF-GJAHR.

              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
                EXPORTING
                  INPUT  = WA_BSAS-HKONT
                IMPORTING
                  OUTPUT = WA_BSAS-HKONT.

              IF WA_BSAS-HKONT(1) = '3'.
                <FS_KONV>-KWERT = <FS_KONV>-KWERT + WA_BSAS-DMBTR.
              ENDIF.
            ENDSELECT.
          ELSE.

            SELECT SINGLE HWSTE INTO <FS_KONV>-KWERT
              FROM BSET
             WHERE BUKRS EQ WA_BKPF-BUKRS
               AND BELNR EQ WA_BKPF-BELNR
               AND GJAHR EQ WA_BKPF-GJAHR
               AND KSCHL EQ <FS_KONV>-KSCHL.

          ENDIF.
        ENDLOOP.
      ENDIF.

    ENDIF.
  ENDIF.

  LOOP AT T_KONV INTO W_KONV WHERE KPOSN EQ W_POSNR.

    IF W_KONV-KSCHL EQ 'VPRS'.
      CONTINUE.
    ENDIF.

    IF W_KONV-KSCHL EQ 'PR00'.
      IF S_VBRK-WAERK NE 'USD'.
        W_PREC_DEC  = W_PREC_DEC + W_KONV-KBETR.
      ELSE.
        CASE WA_J_1ACAE-BRNCH.
          WHEN '0006' OR '0005'.
            "W_PREC_DEC = W_PREC_DEC + ( W_KONV-KWERT / WA_VBRP-FKIMG ).
            W_PREC_DEC    = W_PREC_DEC + W_KONV-KBETR.
            S_FINAL-TOTAL = W_KONV-KWERT.
          WHEN OTHERS.
            W_PREC_DEC  = W_PREC_DEC + W_KONV-KBETR.
        ENDCASE.
      ENDIF.
      W_KPEIN     = W_KONV-KPEIN.
      W_KMEIN     = W_KONV-KMEIN.
      W_KUMZA     = W_KONV-KUMZA.
    ENDIF.
    W_TOTAL = W_TOTAL + W_KONV-KWERT.
  ENDLOOP.

  IF S_VBRK-WAERK NE 'USD'.
    IF WA_VBRP-VRKME NE W_KMEIN.
      S_FINAL-CANTIDAD = WA_VBRP-FKIMG / W_KUMZA.
    ELSE.
      S_FINAL-CANTIDAD = WA_VBRP-FKIMG.
    ENDIF.
  ELSE.
    CASE WA_J_1ACAE-BRNCH.
      WHEN '0006' OR '0005'.
        S_FINAL-CANTIDAD = WA_VBRP-FKIMG / W_KUMZA.
      WHEN OTHERS.
        IF WA_VBRP-VRKME NE W_KMEIN.
          S_FINAL-CANTIDAD = WA_VBRP-FKIMG / W_KUMZA.
        ELSE.
          S_FINAL-CANTIDAD = WA_VBRP-FKIMG.
        ENDIF.
    ENDCASE.
  ENDIF.

  SELECT SINGLE MSEHL
    INTO S_FINAL-UM
    FROM T006A
    WHERE SPRAS EQ 'S'
      AND MSEHI EQ W_KMEIN.

  S_FINAL-PREC_UN  = W_PREC_DEC.
  IF S_VBRK-WAERK NE 'USD'.
    S_FINAL-TOTAL = WA_VBRP-NETWR.
  ELSE.
    CASE WA_J_1ACAE-BRNCH.
      WHEN '0006' OR '0005'.

      WHEN OTHERS.
        S_FINAL-TOTAL = WA_VBRP-NETWR.
    ENDCASE.
  ENDIF.

  APPEND S_FINAL TO T_FINAL.
ENDLOOP.
* ----------------------------------------------

*Importe en Letras
*------------------------------
DATA: W_KTEXT TYPE TCURT-KTEXT.

CLEAR: W_WAERK.

IF ( S_VBRK-WAERK EQ 'USD' ) AND ( WA_J_1ACAE-BRNCH = '0005' ).

  W_WAERK = S_VBRK-WAERK.

  CALL FUNCTION 'SPELL_AMOUNT'
    EXPORTING
      AMOUNT    = W_TOTAL
      CURRENCY  = S_VBRK-WAERK
      LANGUAGE  = 'E'
    IMPORTING
      IN_WORDS  = W_CANT_EN_LETRAS
    EXCEPTIONS
      NOT_FOUND = 1
      TOO_LARGE = 2
      OTHERS    = 3.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  W_TEXTO_MONEDA = 'DOLLARS'.
  W_TEXT_COTIZACION = 'COTIZACION DE LA MONEDA '.
  W_COTIZACION = S_VBRK-KURRF.
  CONCATENATE ' Pesos' ' = 1 Dolar' INTO W_TEXT_COTIZACION2.

  SELECT SINGLE KTEXT INTO W_KTEXT FROM TCURT
    WHERE SPRAS EQ 'E'
      AND WAERS EQ S_VBRK-WAERK.

  IF W_CANT_EN_LETRAS-DECWORD NE 'ZERO'.
    W_CON = 'CON '.
    W_CENTAVOS = 'CENTAVOS'.
  ELSE.
    W_CANT_EN_LETRAS-DECWORD = ' '.
  ENDIF.

ELSE.

  CALL FUNCTION 'SPELL_AMOUNT'
    EXPORTING
      AMOUNT    = W_TOTAL
      CURRENCY  = S_VBRK-WAERK
      LANGUAGE  = 'S'
    IMPORTING
      IN_WORDS  = W_CANT_EN_LETRAS
    EXCEPTIONS
      NOT_FOUND = 1
      TOO_LARGE = 2
      OTHERS    = 3.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  W_TEXTO_MONEDA ='SON PESOS '.

  SELECT SINGLE KTEXT INTO W_KTEXT FROM TCURT
    WHERE SPRAS EQ 'S'
      AND WAERS EQ S_VBRK-WAERK.

  IF W_CANT_EN_LETRAS-DECWORD NE 'CERO'.
    W_CON = 'CON '.
    W_CENTAVOS = 'CENTAVOS'.
  ELSE.
    W_CANT_EN_LETRAS-DECWORD = ' '.
  ENDIF.

ENDIF.

W_TEXT_DIVISA(4) = S_VBRK-WAERK.
W_TEXT_DIVISA+5  = W_KTEXT.

*--------------------------------------------------------
* Textos de Cabecera
*--------------------------------------------------------*
DATA: VL_NAME TYPE THEAD-TDNAME.

VL_NAME = IS_BIL_INVOICE-HD_GEN-BIL_NUMBER.

CALL FUNCTION 'READ_TEXT'
  EXPORTING
    CLIENT                  = SY-MANDT
    ID                      = '0001'
    LANGUAGE                = 'S'
    NAME                    = VL_NAME
    OBJECT                  = 'VBBK'
  TABLES
    LINES                   = TXT_0001
  EXCEPTIONS
    ID                      = 1
    LANGUAGE                = 2
    NAME                    = 3
    NOT_FOUND               = 4
    OBJECT                  = 5
    REFERENCE_CHECK         = 6
    WRONG_ACCESS_TO_ARCHIVE = 7
    OTHERS                  = 8.

CALL FUNCTION 'READ_TEXT'
  EXPORTING
    CLIENT                  = SY-MANDT
    ID                      = '0002'
    LANGUAGE                = 'S'
    NAME                    = VL_NAME
    OBJECT                  = 'VBBK'
  TABLES
    LINES                   = TXT_0002
  EXCEPTIONS
    ID                      = 1
    LANGUAGE                = 2
    NAME                    = 3
    NOT_FOUND               = 4
    OBJECT                  = 5
    REFERENCE_CHECK         = 6
    WRONG_ACCESS_TO_ARCHIVE = 7
    OTHERS                  = 8.

CONCATENATE SY-MANDT S_XBLNR-KUNRG S_XBLNR-VKORG S_XBLNR-VTWEG S_XBLNR-SPART INTO VL_NAME.

CALL FUNCTION 'READ_TEXT'
  EXPORTING
    ID                      = 'ZCAR'
    LANGUAGE                = 'S'
    NAME                    = VL_NAME
    OBJECT                  = 'ZCLIENTE'
  TABLES
    LINES                   = TXT_0003
  EXCEPTIONS
    ID                      = 1
    LANGUAGE                = 2
    NAME                    = 3
    NOT_FOUND               = 4
    OBJECT                  = 5
    REFERENCE_CHECK         = 6
    WRONG_ACCESS_TO_ARCHIVE = 7
    OTHERS                  = 8.
