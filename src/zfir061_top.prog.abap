*&---------------------------------------------------------------------*
*&  Include           ZFIR060_TOP
*&---------------------------------------------------------------------*

REPORT ZFIR061.

INCLUDE <CL_ALV_CONTROL>.

TABLES: BSAS,SSCRFIELDS.

TYPES:

  BEGIN OF TY_FIELDS,
    CAMPO(30) TYPE C,
    GROUP1(5) TYPE C,
    VALUE     TYPE SY-TABIX,
    INVISIBLE TYPE SY-TABIX,
  END OF TY_FIELDS,

  BEGIN OF TY_SKAT,
    SAKNR TYPE SKAT-SAKNR,
    TXT50 TYPE SKAT-TXT50,
  END OF TY_SKAT,

  BEGIN OF TY_SKB1,
    SAKNR TYPE SKB1-SAKNR,
    MITKZ TYPE SKB1-MITKZ,
  END OF TY_SKB1,

  BEGIN OF TY_BKPF,
    BUKRS TYPE BKPF-BUKRS,
    BELNR TYPE BKPF-BELNR,
    GJAHR TYPE BKPF-GJAHR,
    KURSF TYPE BKPF-KURSF,
    KURS2 TYPE BKPF-KURS2,
    STBLG TYPE BKPF-STBLG,
    STJAH TYPE BKPF-STJAH,
    BUDAT TYPE BKPF-BUDAT,
  END OF TY_BKPF,

  BEGIN OF TY_BSAD,
    BUKRS TYPE BSAD-BUKRS,
    AUGDT TYPE BSAD-AUGDT,
    HKONT TYPE BSAD-HKONT,
    AUGBL TYPE BSAD-AUGBL,
    AUGGJ TYPE BSAD-AUGGJ,
    BELNR TYPE BSAD-BELNR,
    GJAHR TYPE BSAD-GJAHR,
    BUZEI TYPE BSAD-BUZEI,
    BUDAT TYPE BSAD-BUDAT,
    WAERS TYPE BSAD-WAERS,
    GSBER TYPE BSAD-GSBER,
    WRBTR TYPE BSAD-WRBTR,
    DMBTR TYPE BSAD-DMBTR,
    DMBE2 TYPE BSAD-DMBE2,
    SGTXT TYPE BSAD-SGTXT,
    SHKZG TYPE BSAD-SHKZG,
    STBLG TYPE BKPF-STBLG,
    STJAH TYPE BKPF-STJAH,
  END OF TY_BSAD,

  BEGIN OF TY_BSAK,
    BUKRS TYPE BSAK-BUKRS,
    BELNR TYPE BSAK-BELNR,
    AUGBL TYPE BSAK-AUGBL,
    SHKZG TYPE BSAK-SHKZG,
    HKONT TYPE BSAK-HKONT,
    SGTXT TYPE BSAK-SGTXT,
    GJAHR TYPE BSAK-GJAHR,
    XREF1 TYPE BSAK-XREF1,
  END OF TY_BSAK,

  BEGIN OF TY_BSEG,
    BUKRS TYPE BSEG-BUKRS,
    BELNR TYPE BSEG-BELNR,
    GJAHR TYPE BSEG-GJAHR,
    AUGBL TYPE BSEG-AUGBL,
    BEWAR TYPE BSEG-BEWAR,
  END OF TY_BSEG,

  BEGIN OF TY_BSE,
    BUKRS_CLR TYPE BSE_CLR-BUKRS_CLR,
    BELNR_CLR TYPE BSE_CLR-BELNR_CLR,
    GJAHR_CLR TYPE BSE_CLR-GJAHR_CLR,
    BELNR     TYPE BSE_CLR-BELNR,
    GJAHR     TYPE BSE_CLR-GJAHR,
    BUZEI     TYPE BSE_CLR-BUZEI,
    RDIFF     TYPE BSE_CLR-RDIFF,
    SHKZG     TYPE BSE_CLR-SHKZG,
  END OF TY_BSE,

  BEGIN OF TY_ZIB_CONTABIL_CHV,
    OBJ_KEY TYPE ZIB_CONTABIL_CHV-OBJ_KEY,
    BUKRS   TYPE ZIB_CONTABIL_CHV-BUKRS,
    BELNR   TYPE ZIB_CONTABIL_CHV-BELNR,
    GJAHR   TYPE ZIB_CONTABIL_CHV-GJAHR,
    XREF1   TYPE BSAK-XREF1,
  END OF TY_ZIB_CONTABIL_CHV,

  BEGIN OF TY_ZGL012,
    BUKRS            TYPE ZGL012_AVM-BUKRS,
    BELNR            TYPE ZGL012_AVM-BELNR,
    BUZEI            TYPE ZGL012_AVM-BUZEI,
    DT_AVAL          TYPE ZGL012_AVM-DT_AVAL,
    VLR_ACUM_MES_ATU TYPE ZGL012_AVM-VLR_ACUM_MES_ATU,
  END OF TY_ZGL012,


  BEGIN OF TY_SAIDA_0100,
    BELNR       TYPE BSAD-BELNR, " Nº documento
    HKONT       TYPE BSAD-HKONT, " Conta Patrimonial
    TXT50       TYPE SKAT-TXT50, " Denominação  conta
    GSBER       TYPE BSAD-GSBER, " Divisão
    BUDAT       TYPE BSAD-BUDAT, " Data do Lanc.
    ANOMEL(07),                  " mês e ano da  data  de lançamento
    DMBTR       TYPE BSAD-DMBTR, " Montante Moeda Interna
    DMBE2       TYPE BSAD-DMBE2, " Montante Moeda Forte
    WRBTR       TYPE BSAD-WRBTR, " Montante Moeda Documento
    WAERS       TYPE BSAD-WAERS, " Moeda Documento
    AUGBL       TYPE BSAD-AUGBL, " Doc . Compensação
    AUGDT       TYPE BSAD-AUGDT, " Data  Compensação
    ANOMEC(07),                  " Mês  e ano da  data  de compensação
    PTAXCA      TYPE BKPF-KURSF, " Ptax Captação
    PTAXCO      TYPE BKPF-KURSF, " Ptax Compensação
    VL_CTB      TYPE BSAD-DMBTR, " VC Contábil
    VL_FIS      TYPE BSAD-DMBTR, " VC Fiscal
    REC_DES(10),                 " Receita / Despesa
    DIF_CTB_FIS TYPE BSAD-DMBTR, "VC contábil  menos VC Fiscal
    VL_CTB_CX   TYPE BSAD-DMBTR, " VC Cx doc Contábil
    VL_CTB_DOC  TYPE BSAD-DMBTR, " VC CTB-VC DCTO Contábil  ( VL_CTB - VL_CTB_CX)
    VL_CTB_CP   TYPE BSAD-DMBTR, " VC competência
    SGTXT       TYPE BSAD-SGTXT,
    CONTA_VC    TYPE BSAD-HKONT, "conta Variação cambial
    ORIGEM(10),
  END  OF TY_SAIDA_0100,

  BEGIN OF TY_SAIDA_0200,
    LINHA         TYPE I,
    MARK(1),
    HKONT         TYPE ZFIT0131-HKONT,
    ID_SISTEMA    TYPE ZFIT0131-ID_SISTEMA,
    TXT50         TYPE SKAT-TXT50,
    USUARIO       TYPE ZFIT0131-USUARIO,
    DATA_REGISTRO TYPE ZFIT0131-DATA_REGISTRO,
    HORA_REGISTRO TYPE ZFIT0131-HORA_REGISTRO,
    STYLE         TYPE LVC_T_STYL,
  END  OF TY_SAIDA_0200,

  BEGIN OF TY_SAIDA_0200D,
    LINHA TYPE I,
    HKONT TYPE ZFIT0131-HKONT,
  END  OF TY_SAIDA_0200D,

  BEGIN OF TY_SAIDA_0300,
    LINHA         TYPE I,
    MARK(1),
    STATUS(04),
    BUKRS         TYPE ZFIT0130-BUKRS,
    GJAHR         TYPE ZFIT0130-GJAHR,
    DT_REGIME     TYPE ZFIT0130-DT_REGIME,
    REGIME        TYPE ZFIT0130-REGIME,
    TX_FIXADA     TYPE ZFIT0130-TX_FIXADA,
    DT_TX_FIXADA  TYPE ZFIT0130-DT_TX_FIXADA,
    OBSERV        TYPE ZFIT0130-OBSERV,
    USUARIO       TYPE ZFIT0130-USUARIO,
    DATA_REGISTRO TYPE ZFIT0130-DATA_REGISTRO,
    HORA_REGISTRO TYPE ZFIT0130-HORA_REGISTRO,
    STYLE         TYPE LVC_T_STYL,
  END  OF TY_SAIDA_0300,

  BEGIN OF TY_SAIDA_0400,
    LINHA           TYPE I,
    MARK(1),
    STATUS(04),
    CONTRATO_NUMERO TYPE ZFIT0135-CONTRATO_NUMERO,
    DATA_EFETIVA    TYPE ZFIT0135-DATA_EFETIVA,
    ENT_SAI         TYPE ZFIT0135-ENT_SAI,
    BUKRS           TYPE ZFIT0135-BUKRS,
    BELNR           TYPE ZFIT0135-BELNR,
    GJAHR           TYPE ZFIT0135-GJAHR,
    VALOR_VALIDO    TYPE ZFIT0135-VALOR_VALIDO,
    VALOR_PAGO      TYPE ZFIT0135-VALOR_PAGO,
    TAXA            TYPE ZFIT0135-TAXA,
    USUARIO         TYPE ZFIT0135-USUARIO,
    DATA_REGISTRO   TYPE ZFIT0135-DATA_REGISTRO,
    HORA_REGISTRO   TYPE ZFIT0135-HORA_REGISTRO,
*    STYLE           TYPE LVC_T_STYL,
  END  OF TY_SAIDA_0400,

  BEGIN OF TY_SAIDA_0300D,
    LINHA     TYPE I,
    BUKRS     TYPE ZFIT0130-BUKRS,
    GJAHR     TYPE ZFIT0130-GJAHR,
    DT_REGIME TYPE ZFIT0130-DT_REGIME,
    REGIME    TYPE ZFIT0130-REGIME,
  END  OF TY_SAIDA_0300D.


*----------------------------------------------------------------------*
* Estruturas ALV
*----------------------------------------------------------------------*
** Criação de tabela dinamica
DATA: T_FIELDCATALOG TYPE LVC_T_FCAT,
      W_FIELDCATALOG TYPE LVC_S_FCAT,
      WA_LAYOUT      TYPE LVC_S_LAYO,
      WA_STABLE      TYPE LVC_S_STBL,

      TG_FIELDS      TYPE TABLE OF TY_FIELDS   WITH HEADER LINE,
      TG_MSG_RET     TYPE TABLE OF ZFIWRS0002  WITH HEADER LINE.


*Class definition for ALV toolbar
CLASS:  LCL_ALV_TOOLBAR   DEFINITION DEFERRED.

*&--------------------------------------------------------------------&*
*& Declaração de Objetos/Classes                                      &*
*&--------------------------------------------------------------------&*
DATA: G_CONTAINER          TYPE SCRFNAME VALUE 'CC_ALV',
      G_CUSTOM_CONTAINER   TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      CONTAINER_1          TYPE REF TO CL_GUI_CONTAINER,       "splitter conteiner 1
      CONTAINER_2          TYPE REF TO CL_GUI_CONTAINER,       "splitter conteiner 2
      SPLITTER             TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      GRID1                TYPE REF TO CL_GUI_ALV_GRID,

      G_CONTAINER2         TYPE SCRFNAME VALUE 'CC_REGI',
      G_CUSTOM_CONTAINER2  TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      GRID2                TYPE REF TO CL_GUI_ALV_GRID,
      OBG_TOOLBAR          TYPE REF TO LCL_ALV_TOOLBAR,
      C_ALV_TOOLBARMANAGER TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,

      OBG_DOCKING          TYPE REF TO CL_GUI_DOCKING_CONTAINER,

      WA_STYLE             TYPE LVC_S_STYL,
      STYLE                TYPE LVC_T_STYL   WITH HEADER LINE,
      STYLE2               TYPE LVC_T_STYL   WITH HEADER LINE,
      GS_VARIANT_C         TYPE DISVARIANT.

*Declaration for toolbar buttons
DATA: TY_TOOLBAR TYPE STB_BUTTON.

DATA: OK-CODE         TYPE SY-UCOMM,
      TG_SELECTEDCELL TYPE LVC_T_CELL,
      WG_SELECTEDCELL TYPE LVC_S_CELL,
      X_FIELD(30),
      V_BUKRS         TYPE BKPF-BUKRS.

DATA: OK_CODE         LIKE SY-UCOMM,
      WG_MENSAGEM(30),
      WG_ACAO(30).
* ALV layout variant
DATA: GS_VARIANT TYPE DISVARIANT,
      VARIANTE   LIKE DISVARIANT.

*


DATA: D_BUTT1(4).


DATA: EVENT       TYPE CNTL_SIMPLE_EVENT,
      EVENTS      TYPE CNTL_SIMPLE_EVENTS,
      TL_FILTER   TYPE LVC_T_FILT,
      WL_FILTER   TYPE LVC_S_FILT,
      TL_FUNCTION TYPE UI_FUNCTIONS,
      WL_FUNCTION LIKE TL_FUNCTION  WITH HEADER LINE,

      LT_F4       TYPE LVC_T_F4     WITH HEADER LINE.
*-------------------------------------------------------------------
* Tabelas Internas and Work Areas.
*-------------------------------------------------------------------
DATA: IT_SAIDA_0100        TYPE TABLE OF TY_SAIDA_0100,
      WA_SAIDA_0100        TYPE TY_SAIDA_0100,

      IT_SAIDA_0200        TYPE TABLE OF TY_SAIDA_0200,
      WA_SAIDA_0200        TYPE TY_SAIDA_0200,

      IT_SAIDA_0200D       TYPE TABLE OF TY_SAIDA_0200D,
      WA_SAIDA_0200D       TYPE TY_SAIDA_0200D,

      IT_SAIDA_0300        TYPE TABLE OF TY_SAIDA_0300,
      WA_SAIDA_0300        TYPE TY_SAIDA_0300,

      IT_SAIDA_0400        TYPE TABLE OF TY_SAIDA_0400,
      WA_SAIDA_0400        TYPE TY_SAIDA_0400,

      IT_SAIDA_0300D       TYPE TABLE OF TY_SAIDA_0300D,
      WA_SAIDA_0300D       TYPE TY_SAIDA_0300D,

      IT_ZFIT0131          TYPE TABLE OF ZFIT0131,
      WA_ZFIT0131          TYPE ZFIT0131,

      IT_ZGL012            TYPE TABLE OF TY_ZGL012,
      WA_ZGL012            TYPE TY_ZGL012,

      WA_ZFIT0130          TYPE ZFIT0130,

      IT_SKAT              TYPE TABLE OF TY_SKAT,
      WA_SKAT              TYPE TY_SKAT,

      IT_SKB1              TYPE TABLE OF TY_SKB1,
      WA_SKB1              TYPE TY_SKB1,

      IT_BSAD              TYPE TABLE OF TY_BSAD,
      WA_BSAD              TYPE TY_BSAD,

      IT_BSAD_EST          TYPE TABLE OF TY_BSAD,
      WA_BSAD_EST          TYPE TY_BSAD,

      IT_BSAD_ESTD         TYPE TABLE OF TY_BSAD,
      WA_BSAD_ESTD         TYPE TY_BSAD,

      IT_BSAK              TYPE TABLE OF TY_BSAK,
      WA_BSAK              TYPE TY_BSAK,

      IT_BSEG              TYPE TABLE OF TY_BSEG,
      WA_BSEG              TYPE TY_BSEG,

      IT_BSE               TYPE TABLE OF TY_BSE,
      WA_BSE               TYPE TY_BSE,

      IT_BSE_EST           TYPE TABLE OF TY_BSE,
      WA_BSE_EST           TYPE TY_BSE,

      IT_BSE_ESTD          TYPE TABLE OF TY_BSE,
      WA_BSE_ESTD          TYPE TY_BSE,

      IT_ZFIT0132          TYPE TABLE OF ZFIT0132,
      WA_ZFIT0132          TYPE ZFIT0132,

      IT_ZFIT0133_CAP      TYPE TABLE OF ZFIT0133,
      IT_ZFIT0133_LIQ      TYPE TABLE OF ZFIT0133,
      WA_ZFIT0133_CAP      TYPE ZFIT0133,
      WA_ZFIT0133_LIQ      TYPE ZFIT0133,

      IT_ZFIT0134          TYPE TABLE OF ZFIT0134,
      WA_ZFIT0134          TYPE ZFIT0134,


      IT_ZFIT0135          TYPE TABLE OF ZFIT0135,
      WA_ZFIT0135          TYPE ZFIT0135,

      IT_ZIB_CONTABIL_CHV  TYPE TABLE OF TY_ZIB_CONTABIL_CHV,
      IT_ZIB_CONTABIL_CHV2 TYPE TABLE OF TY_ZIB_CONTABIL_CHV,
      WA_ZIB_CONTABIL_CHV  TYPE TY_ZIB_CONTABIL_CHV,

      IT_BKPF              TYPE TABLE OF TY_BKPF,
      WA_BKPF              TYPE TY_BKPF.

*&--------------------------------------------------------------------&*
*& Constantes                                                         &*
*&--------------------------------------------------------------------&*
CONSTANTS:
  C_0               TYPE C VALUE '0',
  C_1               TYPE C VALUE '1',
  C_2               TYPE C VALUE '2',
  C_B               TYPE C VALUE 'B',
  C_S               TYPE C VALUE 'S',
  C_L               TYPE C VALUE 'L',
  C_X               TYPE C VALUE 'X',
  C_D               TYPE C VALUE 'D',
  C_K               TYPE C VALUE 'K',
  C_W               TYPE C VALUE 'W',
  C_F               TYPE C VALUE 'F',
  C_T               TYPE C VALUE 'T',
  C_I               TYPE C VALUE 'I',
  C_N               TYPE C VALUE 'N',
  C_H               TYPE C VALUE 'H',
  C_AG(2)           TYPE C VALUE 'AG',
  C_NE(2)           TYPE C VALUE 'NE',
  C_01(2)           TYPE C VALUE '01',
  C_30(2)           TYPE C VALUE '30',
  C_40(2)           TYPE C VALUE '40',
  C_50(4)           TYPE C VALUE '0050',
  C_76(2)           TYPE C VALUE '76',
  C_71(2)           TYPE C VALUE '71',
  C_72(2)           TYPE C VALUE '72',
  C_BR(2)           TYPE C VALUE 'BR',
  C_LF(2)           TYPE C VALUE 'LF',
  C_LR(2)           TYPE C VALUE 'LR',
  C_Z1(2)           TYPE C VALUE 'Z1',
  C_ADD(3)          TYPE C VALUE 'ADD',
  C_DEL(3)          TYPE C VALUE 'DEL',
  C_DG1(3)          TYPE C VALUE 'DG1',
  C_DG2(3)          TYPE C VALUE 'DG2',
  C_DUMMY_HEADER(3) TYPE C VALUE '099',
  C_DUMMY_ITENS(3)  TYPE C VALUE '098',
  C_EXIT(4)         TYPE C VALUE 'EXIT',
  C_ROOT(4)         TYPE C VALUE 'ROOT',
  C_MINIMIZAR(4)    TYPE C VALUE '@K2@',
  C_MAXIMIZAR(4)    TYPE C VALUE '@K1@',
  C_BACK(4)         TYPE C VALUE 'BACK',
  C_SAVE(4)         TYPE C VALUE 'SAVE',
  C_DESAT(5)        TYPE C VALUE 'DESAT',
  C_DMBTR(5)        TYPE C VALUE 'DMBTR',
  C_MODIF(5)        TYPE C VALUE 'MODIF',
  C_CANCEL(6)       TYPE C VALUE 'CANCEL',
  C_DELDOC(6)       TYPE C VALUE 'DELDOC',
  C_DCLICK(6)       TYPE C VALUE 'DCLICK',
  C_SEARCH(6)       TYPE C VALUE 'SEARCH',
  C_ATUALI(6)       TYPE C VALUE 'ATUALI',
  C_ADD_MSG(7)      TYPE C VALUE 'ADD_MSG',
  C_DEL_MSG(7)      TYPE C VALUE 'DEL_MSG',
  C_CLOS_MSG(8)     TYPE C VALUE 'CLOS_MSG',
  C_SAVE_MSG(8)     TYPE C VALUE 'SAVE_MSG',
  C_DISPLA(6)       TYPE C VALUE 'DISPLA',
  C_SHOW_MSGRE(10)  TYPE C VALUE 'SHOW_MSGRE'.


*-----------------------------------------------------------------------
* Classe
*-----------------------------------------------------------------------
CLASS LCL_EVENT_HANDLER DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      ON_DOUBLE_CLICK FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
        IMPORTING E_ROW E_COLUMN.

    CLASS-METHODS:
      ON_HOTSPOT_CLICK FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
        IMPORTING E_ROW_ID E_COLUMN_ID.

    CLASS-METHODS:
      ON_DATA_CHANGED FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
        IMPORTING ER_DATA_CHANGED E_ONF4 E_ONF4_BEFORE E_ONF4_AFTER E_UCOMM .

    CLASS-METHODS:
      ON_DATA_CHANGED_FINISHED FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID
        IMPORTING E_MODIFIED ET_GOOD_CELLS.

ENDCLASS.                    "LCL_EVENT_HANDLER DEFINITION


CLASS LCL_EVENT_HANDLER IMPLEMENTATION.
  METHOD ON_DOUBLE_CLICK.
    IF E_ROW-INDEX GT 0 AND D_BUTT1 = 'BTN3' AND E_COLUMN = 'BELNR'.
      READ TABLE IT_SAIDA_0400 INTO WA_SAIDA_0400 INDEX E_ROW-INDEX.
      IF SY-SUBRC = 0 AND WA_SAIDA_0400-BUKRS IS NOT INITIAL
                      AND WA_SAIDA_0400-BELNR IS NOT INITIAL
                      AND WA_SAIDA_0400-GJAHR IS NOT INITIAL.
        SET PARAMETER ID 'BLN' FIELD WA_SAIDA_0400-BELNR.
        SET PARAMETER ID 'BUK' FIELD WA_SAIDA_0400-BUKRS.
        SET PARAMETER ID 'GJR' FIELD WA_SAIDA_0400-GJAHR.
        CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD ON_HOTSPOT_CLICK.
    DATA  W_ANSWER(1).

    IF D_BUTT1 = 'BTN1'.
      READ TABLE IT_SAIDA_0300 INTO WA_SAIDA_0300 INDEX E_ROW_ID-INDEX.
      IF SY-SUBRC = 0 AND WA_SAIDA_0300-STATUS IS NOT INITIAL.
        IF E_COLUMN_ID = 'STATUS'.
          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              TEXT_QUESTION         = 'Altera Status ?'
              TEXT_BUTTON_1         = 'Sim'(100)
              ICON_BUTTON_1         = 'ICON_OKAY '
              TEXT_BUTTON_2         = 'Não'(101)
              ICON_BUTTON_2         = 'ICON_CANCEL'
              DEFAULT_BUTTON        = '1'
              DISPLAY_CANCEL_BUTTON = ' '
              START_COLUMN          = 25
              START_ROW             = 6
            IMPORTING
              ANSWER                = W_ANSWER
            EXCEPTIONS
              TEXT_NOT_FOUND        = 1
              OTHERS                = 2.

          IF SY-SUBRC <> 0.
            MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
          ENDIF.

          IF W_ANSWER = '1'.
            IF WA_SAIDA_0300-STATUS = ICON_INCOMPLETE.
              WA_SAIDA_0300-STATUS = ICON_CHECKED.
            ELSE.
              WA_SAIDA_0300-STATUS = ICON_INCOMPLETE.
            ENDIF.
            MODIFY  IT_SAIDA_0300 FROM WA_SAIDA_0300 INDEX E_ROW_ID-INDEX TRANSPORTING STATUS.
            CALL METHOD GRID2->REFRESH_TABLE_DISPLAY
              EXPORTING
                IS_STABLE = WA_STABLE.
          ENDIF.
        ENDIF.
      ENDIF.
    ELSEIF D_BUTT1+3 NE 'BTN'.
      READ TABLE IT_SAIDA_0100 INTO WA_SAIDA_0100 INDEX E_ROW_ID-INDEX.
      IF SY-SUBRC = 0.
        IF E_COLUMN_ID = 'BELNR' AND WA_SAIDA_0100-BELNR IS NOT INITIAL.
          SET PARAMETER ID 'BLN' FIELD WA_SAIDA_0100-BELNR.
          SET PARAMETER ID 'BUK' FIELD V_BUKRS.
          SET PARAMETER ID 'GJR' FIELD WA_SAIDA_0100-BUDAT(4).
          CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
        ELSEIF E_COLUMN_ID = 'AUGBL' AND WA_SAIDA_0100-AUGBL IS NOT INITIAL.
          SET PARAMETER ID 'BLN' FIELD WA_SAIDA_0100-AUGBL.
          SET PARAMETER ID 'BUK' FIELD V_BUKRS.
          SET PARAMETER ID 'GJR' FIELD WA_SAIDA_0100-AUGDT(4).
          CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD ON_DATA_CHANGED.
    DATA: LS_GOOD  TYPE LVC_S_MODI,
          LV_VALUE TYPE LVC_VALUE,
          WL_SKAT  TYPE SKAT.

    LOOP AT ER_DATA_CHANGED->MT_GOOD_CELLS
                            INTO LS_GOOD
                            WHERE FIELDNAME = 'HKONT'.

      LV_VALUE = LS_GOOD-VALUE.
      CONDENSE LV_VALUE NO-GAPS.

      READ TABLE IT_SAIDA_0100 INTO WA_SAIDA_0100 INDEX LS_GOOD-ROW_ID.

      CLEAR WL_SKAT.
      WL_SKAT-SAKNR = LV_VALUE.
      SELECT SINGLE *
        FROM SKAT
        INTO WL_SKAT
        WHERE SPRAS = SY-LANGU
        AND   SAKNR = WL_SKAT-SAKNR.

      LV_VALUE = WL_SKAT-TXT50.
      CALL METHOD ER_DATA_CHANGED->MODIFY_CELL
        EXPORTING
          I_ROW_ID    = LS_GOOD-ROW_ID
          I_FIELDNAME = 'TXT50'
          I_VALUE     = LV_VALUE.
    ENDLOOP.


  ENDMETHOD.                    "ON_DATA_CHANGED

  METHOD ON_DATA_CHANGED_FINISHED.

    IF SY-DYNNR = '0200'.
      CALL METHOD GRID2->REFRESH_TABLE_DISPLAY
        EXPORTING
          IS_STABLE = WA_STABLE.
    ELSE.
      CALL METHOD GRID1->REFRESH_TABLE_DISPLAY
        EXPORTING
          IS_STABLE = WA_STABLE.
    ENDIF.

  ENDMETHOD.                    "on_data_changed_finished

ENDCLASS.                    "LCL_EVENT_HANDLER IMPLEMENTATION
*---------------------------------------------------------------------*
*       CLASS lcl_alv_toolbar DEFINITION
*---------------------------------------------------------------------*
*       ALV event handler
*---------------------------------------------------------------------*
CLASS LCL_ALV_TOOLBAR DEFINITION.
  PUBLIC SECTION.
*Constructor
    METHODS:
      CONSTRUCTOR
        IMPORTING IO_ALV_GRID TYPE REF TO CL_GUI_ALV_GRID,
*Event for toolbar
      ON_TOOLBAR FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
        IMPORTING E_OBJECT,

      HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING E_UCOMM.
ENDCLASS.                    "lcl_alv_toolbar DEFINITION

*---------------------------------------------------------------------*
*       CLASS lcl_alv_toolbar IMPLEMENTATION
*---------------------------------------------------------------------*
*       ALV event handler
*---------------------------------------------------------------------*
CLASS LCL_ALV_TOOLBAR IMPLEMENTATION.
  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT C_ALV_TOOLBARMANAGER
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.
  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.
    DATA: WL_DESACTIVE.

    IF ( WG_ACAO NE C_MODIF AND WG_ACAO NE C_ADD ) OR  D_BUTT1 EQ 'BTN3'.
      WL_DESACTIVE = 1.
    ENDIF.

    TY_TOOLBAR-ICON      = ICON_INSERT_ROW.
    TY_TOOLBAR-FUNCTION  = C_ADD.
    TY_TOOLBAR-DISABLED  = WL_DESACTIVE.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-ICON      = ICON_DELETE_ROW.
    TY_TOOLBAR-FUNCTION  = C_DEL.
    TY_TOOLBAR-DISABLED  = WL_DESACTIVE.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-BUTN_TYPE = 3.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

*   variable for Toolbar Button
    TY_TOOLBAR-ICON      = ICON_VIEW_CLOSE.
    TY_TOOLBAR-FUNCTION  = C_CLOS_MSG.
    TY_TOOLBAR-DISABLED  = SPACE.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.
**   Call reorganize method of toolbar manager to
**   display the toolbar
    CALL METHOD C_ALV_TOOLBARMANAGER->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.
  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.
    DATA: TG_SAIDA_AUX2 TYPE TABLE OF TY_SAIDA_0200,
          WL_SAIDA2     TYPE TY_SAIDA_0200,

          TG_SAIDA_AUX3 TYPE TABLE OF TY_SAIDA_0300,
          WL_SAIDA3     TYPE TY_SAIDA_0300,

          WL_LINES      TYPE SY-TABIX.

    REFRESH: TG_SAIDA_AUX2, TG_SAIDA_AUX3.

    CASE E_UCOMM.
      WHEN C_ADD.
        IF D_BUTT1 = 'BTN2'.
          WL_LINES = LINES( IT_SAIDA_0200 ) + 1.

          CALL METHOD GRID2->GET_SELECTED_CELLS
            IMPORTING
              ET_CELL = TG_SELECTEDCELL.
          CLEAR WG_SELECTEDCELL.
          IF TG_SELECTEDCELL[] IS NOT INITIAL.
            READ TABLE TG_SELECTEDCELL INTO WG_SELECTEDCELL INDEX 1.
          ENDIF.

          TG_SAIDA_AUX2[] = IT_SAIDA_0200[].
          REFRESH: IT_SAIDA_0200.
          LOOP AT TG_SAIDA_AUX2 INTO WL_SAIDA2.
            APPEND WL_SAIDA2 TO IT_SAIDA_0200.
            IF SY-TABIX = WG_SELECTEDCELL-ROW_ID-INDEX.
              CLEAR: WL_SAIDA2.
              WL_SAIDA2-LINHA = WL_LINES.
              APPEND WL_SAIDA2 TO IT_SAIDA_0200.
            ENDIF.
          ENDLOOP.
          IF WG_SELECTEDCELL-ROW_ID-INDEX = 0.
            CLEAR: WL_SAIDA2.
            WL_SAIDA2-LINHA = WL_LINES.
            APPEND WL_SAIDA2 TO IT_SAIDA_0200.
          ENDIF.


        ELSE.
          WL_LINES = LINES( IT_SAIDA_0300 ) + 1.

          CALL METHOD GRID2->GET_SELECTED_CELLS
            IMPORTING
              ET_CELL = TG_SELECTEDCELL.

          CLEAR WG_SELECTEDCELL.
          IF TG_SELECTEDCELL[] IS NOT INITIAL.
            READ TABLE TG_SELECTEDCELL INTO WG_SELECTEDCELL INDEX 1.
          ENDIF.

          TG_SAIDA_AUX3[] = IT_SAIDA_0300[].
          REFRESH: IT_SAIDA_0300.
          LOOP AT TG_SAIDA_AUX3 INTO WL_SAIDA3.
            APPEND WL_SAIDA3 TO IT_SAIDA_0300.
            IF SY-TABIX = WG_SELECTEDCELL-ROW_ID-INDEX.
              CLEAR: WL_SAIDA3.
              WL_SAIDA3-LINHA = WL_LINES.
              APPEND WL_SAIDA3 TO IT_SAIDA_0300.
            ENDIF.
          ENDLOOP.
          IF WG_SELECTEDCELL-ROW_ID-INDEX = 0.
            CLEAR: WL_SAIDA3.
            WL_SAIDA3-LINHA = WL_LINES.
            APPEND WL_SAIDA3 TO IT_SAIDA_0300.
          ENDIF.

        ENDIF.
        CALL METHOD GRID2->REFRESH_TABLE_DISPLAY
          EXPORTING
            IS_STABLE = WA_STABLE.
      WHEN C_DEL.
        CALL METHOD GRID2->GET_SELECTED_CELLS
          IMPORTING
            ET_CELL = TG_SELECTEDCELL.
        IF D_BUTT1 = 'BTN2'.
          LOOP AT TG_SELECTEDCELL INTO WG_SELECTEDCELL.
            READ TABLE IT_SAIDA_0200 INTO WL_SAIDA2 INDEX WG_SELECTEDCELL-ROW_ID-INDEX.
            "
            IF  WL_SAIDA2-STYLE[] IS NOT INITIAL.
              DELETE FROM ZFIT0131 WHERE HKONT = WL_SAIDA2-HKONT.
              COMMIT WORK.
            ENDIF.
            "
            DELETE IT_SAIDA_0200 INDEX WG_SELECTEDCELL-ROW_ID-INDEX.
          ENDLOOP.

        ELSE.
          LOOP AT TG_SELECTEDCELL INTO WG_SELECTEDCELL.
            READ TABLE IT_SAIDA_0300 INTO WL_SAIDA3 INDEX WG_SELECTEDCELL-ROW_ID-INDEX.
            "
            IF  WL_SAIDA3-STYLE[] IS NOT INITIAL.
              DELETE FROM ZFIT0130 WHERE BUKRS      = WL_SAIDA3-BUKRS
                                   AND   GJAHR      = WL_SAIDA3-GJAHR
                                   AND   DT_REGIME  = WL_SAIDA3-DT_REGIME
                                   AND   REGIME     = WL_SAIDA3-REGIME.
              COMMIT WORK.
            ENDIF.
            "
            DELETE IT_SAIDA_0300 INDEX WG_SELECTEDCELL-ROW_ID-INDEX.
          ENDLOOP.
        ENDIF.
        CALL METHOD GRID2->REFRESH_TABLE_DISPLAY
          EXPORTING
            IS_STABLE = WA_STABLE.
    ENDCASE.

  ENDMETHOD.                    "zm_handle_user_command

ENDCLASS.                    "lcl_alv_toolbar IMPLEMENTATION


*----------------------------------------------------------------------*
* Variaveis
*----------------------------------------------------------------------*
DATA: VG_DTINI_PROC TYPE SY-DATUM,
      VAR_ANSWER    TYPE C VALUE ''.


DATA: VG_REPID   LIKE SY-REPID,
      VG_VARIANT TYPE DISVARIANT.
*----------------------------------------------------------------------*
* tela de Seleção
*----------------------------------------------------------------------*

SELECTION-SCREEN: BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
PARAMETER: P_BUKRS  TYPE BSAS-BUKRS OBLIGATORY.

SELECT-OPTIONS: P_AUGDT  FOR BSAS-AUGDT OBLIGATORY NO-EXTENSION,
                P_BELNR  FOR BSAS-BELNR NO INTERVALS,
                P_HKONT  FOR BSAS-HKONT.

SELECTION-SCREEN: END OF BLOCK B1.


*SELECTION-SCREEN: BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-003.
*
*PARAMETERS: P_ANA RADIOBUTTON GROUP RB1, " Analítico
*            P_SIN RADIOBUTTON GROUP RB1. " Sintético
*
*
*SELECTION-SCREEN: END OF BLOCK B2.

SELECTION-SCREEN: BEGIN OF BLOCK B5 WITH FRAME TITLE TEXT-002.
PARAMETER: P_VARIA TYPE DISVARIANT-VARIANT.
SELECTION-SCREEN: END OF BLOCK B5.

SELECTION-SCREEN FUNCTION KEY 1.
SELECTION-SCREEN FUNCTION KEY 2.
SELECTION-SCREEN FUNCTION KEY 3.
SELECTION-SCREEN FUNCTION KEY 4.

INITIALIZATION.
  MOVE 'Regime por Empresa' TO SSCRFIELDS-FUNCTXT_01.
  MOVE 'Contas'             TO SSCRFIELDS-FUNCTXT_02.
  MOVE 'XRT-Cap'            TO SSCRFIELDS-FUNCTXT_03.
  MOVE 'Atualiza Tab XRT'   TO SSCRFIELDS-FUNCTXT_04.
  D_BUTT1 = 'NO'.

AT SELECTION-SCREEN.
  CLEAR VAR_ANSWER.
  IF SY-UCOMM = 'FC01'.
    D_BUTT1 = 'BTN1'.
    SSCRFIELDS-UCOMM = 'ONLI'.
  ELSEIF SY-UCOMM = 'FC02'.
    D_BUTT1 = 'BTN2'.
    SSCRFIELDS-UCOMM = 'ONLI'.
  ELSEIF SY-UCOMM = 'FC03'.
    D_BUTT1 = 'BTN3'.
    SSCRFIELDS-UCOMM = 'ONLI'.
  ELSEIF SY-UCOMM = 'FC04'.
    D_BUTT1 = 'BTN4'.
    SSCRFIELDS-UCOMM = 'ONLI'.
  ELSE.
    IF P_AUGDT-HIGH IS NOT INITIAL.
      IF P_AUGDT-LOW+0(4) NE P_AUGDT-HIGH+0(4).
        VAR_ANSWER  = 'X'.
        MESSAGE 'Periodo com exercícios diferentes.' TYPE 'W'.
        SET CURSOR FIELD 'P_AUGDT-LOW' .
      ENDIF.
      SELECT SINGLE *
        FROM ZFIT0130
        INTO WA_ZFIT0130
        WHERE BUKRS = P_BUKRS
        AND   GJAHR = P_AUGDT-LOW+0(4)
        AND   STATUS = ''.
      IF SY-SUBRC NE 0.
        VAR_ANSWER  = 'X'.
        MESSAGE 'Empresa sem parâmetro para este exercício' TYPE 'W'.
        SET CURSOR FIELD 'P_AUGDT-LOW' .
      ELSEIF WA_ZFIT0130-REGIME NE 'CX'.
        VAR_ANSWER  = 'X'.
        MESSAGE 'Empresa não está prevista para o regime de caixa neste período' TYPE 'W'.
        SET CURSOR FIELD 'P_AUGDT-LOW' .
      ENDIF.
    ENDIF.
  ENDIF.
*---------------------------------------------------------------------*
* Event selection-screen on value-request for p_var
*---------------------------------------------------------------------*


AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_VARIA.

  VG_REPID        = SY-REPID.
  VARIANTE-REPORT = VG_REPID.

  IF ( P_VARIA IS NOT INITIAL ).
    VG_VARIANT-VARIANT = P_VARIA.

  ENDIF.
  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      IS_VARIANT    = VARIANTE
      I_SAVE        = 'A'
    IMPORTING
      ES_VARIANT    = VARIANTE
    EXCEPTIONS
      NOT_FOUND     = 1
      PROGRAM_ERROR = 2
      OTHERS        = 3.

  IF ( SY-SUBRC NE 0 ).
    MESSAGE S000(Z01) WITH 'Não existe variante'.
    STOP.
  ELSE.
    MOVE VARIANTE-VARIANT TO P_VARIA.
    MOVE VARIANTE-VARIANT TO GS_VARIANT_C-VARIANT.
  ENDIF.

START-OF-SELECTION.

  IF D_BUTT1 = 'BTN1' OR D_BUTT1 = 'BTN2' OR D_BUTT1 = 'BTN3' OR D_BUTT1 = 'BTN4'.
    WG_ACAO = C_ADD.
    PERFORM F_BUSCA_DADOS2.
    IF D_BUTT1 NE 'BTN4'.
      CALL SCREEN 0200.
    ENDIF.
  ELSEIF VAR_ANSWER  NE  'X'.
    PERFORM F_SELECIONAR_DADOS.
    PERFORM F_PROCESSAR_DADOS.
    PERFORM F_IMPRIMIR_DADOS.
  ENDIF.
