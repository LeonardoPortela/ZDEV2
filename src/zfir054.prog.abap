************************************************************************
* Responsável ...: Amaggi Exportação & Importação Ltda                 *
* Data desenv ...: 20.04.2016                                          *
* Objetivo    ...: Controle de Liquidação de NDF                       *
* Transação   ...: ZFI0080                                             *
************************************************************************
* Data Modif    Autor         Descriçao      Hora           Request    *
************************************************************************
* 20.04.2016  Welgem Barbosa   Criação      10:50                      *
************************************************************************

REPORT  ZFIR054.

TABLES: ZFIT0083, ZFIT0096.

TYPES: BEGIN OF TY_F4,
         BUKRS         TYPE ZFIT0083-BUKRS,
         TRADE_ID      TYPE ZFIT0083-TRADE_ID,
         DATE_PERIOD_1 TYPE ZFIT0083-DATE_PERIOD_1,
         DATE_OF_DEAL  TYPE ZFIT0083-DATE_OF_DEAL,
         NOTE_TEXT_1   TYPE ZFIT0083-NOTE_TEXT_1,
         SIDE          TYPE ZFIT0083-SIDE,
       END OF TY_F4.

TYPES: BEGIN OF TY_SAIDA.
         INCLUDE STRUCTURE ZFIT0096.
TYPES:   HBKID TYPE ZFIT0094-HBKID.
TYPES: ESTILO TYPE LVC_T_STYL.
TYPES: SINAL_AUX TYPE CHAR1.
TYPES: CONTA_AUX TYPE CHAR1.
TYPES: BVTYP     TYPE BVTYP.
TYPES: ICONS     TYPE CHAR4.
TYPES: COLOR(4)  TYPE C.
TYPES: COLORTAB TYPE LVC_T_SCOL.
TYPES: END OF TY_SAIDA.

DATA : COLOR_TAB TYPE TABLE OF LVC_S_SCOL.

TYPES: BEGIN OF F4_STATUS,
         STATUS TYPE CHAR1,
         ICON   TYPE CHAR04,
       END OF F4_STATUS.

DATA: BEGIN OF IT_MSG OCCURS 0.
        INCLUDE STRUCTURE BDCMSGCOLL.
DATA: END OF IT_MSG.

DATA: IT_0083      TYPE TABLE OF ZFIT0083,
      IT_0096      TYPE TABLE OF ZFIT0096,
      IT_0096_AUX  TYPE TABLE OF ZFIT0096,
      IT_ZFIT0094  TYPE TABLE OF ZFIT0094,
      IT_ZFIT0095  TYPE TABLE OF ZFIT0095,
      IT_STATUS    TYPE TABLE OF F4_STATUS,
      WA_STATUS    TYPE F4_STATUS,
      IT_LFA1      TYPE TABLE OF LFA1,
      IT_KNA1      TYPE TABLE OF KNA1,
      IT_SKAT      TYPE TABLE OF SKAT,
      IT_SAIDA     TYPE TABLE OF TY_SAIDA,
      IT_SAIDA_AUX TYPE TABLE OF TY_SAIDA,
      IT_SAIDA_DEL TYPE TABLE OF TY_SAIDA,
      IT_RETURN    TYPE TABLE OF DDSHRETVAL WITH HEADER LINE,
      IT_F4        TYPE TABLE OF TY_F4 WITH HEADER LINE,
      WA_0096      TYPE ZFIT0096,
      WA_0096_AUX  TYPE ZFIT0096,
      WA_0083      TYPE ZFIT0083,
      WA_ZFIT0094  TYPE ZFIT0094,
      WA_ZFIT0095  TYPE ZFIT0095,
      WA_LFA1      TYPE LFA1,
      WA_KNA1      TYPE KNA1,
      WA_SKAT      TYPE SKAT,
      WA_SAIDA     TYPE TY_SAIDA,
      PORC_5       TYPE UKURS_CURR,
      VL_LOTE      TYPE ZGLT034.

DATA  WG_DOCUMENTO(10).

DATA: WA_CONT     TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      WA_ALV      TYPE REF TO CL_GUI_ALV_GRID,
      WA_CONT_PG  TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      WA_ALV_PG   TYPE REF TO CL_GUI_ALV_GRID,
      IT_SEL_ROWS TYPE LVC_T_ROW,
      WA_SEL_ROWS TYPE LVC_S_ROW,
      TY_TOOLBAR  TYPE STB_BUTTON,
      IT_FCAT     TYPE LVC_T_FCAT,
      WA_FCAT     TYPE LVC_S_FCAT,
      IT_FCAT_PG  TYPE LVC_T_FCAT,
      WA_FCAT_PG  TYPE LVC_S_FCAT,
      IT_SORT     TYPE LVC_T_SORT,
      WA_SORT     TYPE LVC_S_SORT,
      WA_VARIANTE TYPE DISVARIANT,
      WA_STABLE   TYPE LVC_S_STBL VALUE 'XX',
      WA_LAYOUT   TYPE LVC_S_LAYO,
      C_ALV_TM    TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,
      GT_ESTILO   TYPE LVC_T_STYL WITH HEADER LINE,
      WL_ESTILO   TYPE LVC_S_STYL,
      IT_DTA      TYPE STANDARD TABLE OF BDCDATA WITH HEADER LINE,
      WA_DTA      TYPE BDCDATA,
      OPT         TYPE CTU_PARAMS.

DATA: TI_BDCDATA TYPE STANDARD TABLE OF BDCDATA,
      WA_BDCDATA LIKE LINE OF TI_BDCDATA.

DATA: X_SCREEN TYPE SY-DYNNR VALUE '0101'.

DATA: VL_GDATU TYPE GDATU_INV,
      VL_UKURS TYPE UKURS_CURR.

DATA MOEDA TYPE WAERS.

DATA: OBJ_ZCL_UTIL_SD TYPE REF TO ZCL_UTIL_SD.


FIELD-SYMBOLS: <SAIDA> TYPE TY_SAIDA,
               <FCAT>  TYPE LVC_S_FCAT.

SELECTION-SCREEN: BEGIN OF SCREEN 0102 AS SUBSCREEN.
  SELECT-OPTIONS: P_BUK FOR ZFIT0083-BUKRS          NO INTERVALS,
                  P_TRA FOR ZFIT0083-TRADE_ID       NO-EXTENSION NO INTERVALS,
                  P_DTV FOR ZFIT0083-DATE_PERIOD_1,
                  P_DTO FOR ZFIT0083-DATE_OF_DEAL,
                  P_NAT FOR ZFIT0083-NOTE_TEXT_1    NO-EXTENSION NO INTERVALS,
                  P_STA FOR ZFIT0096-STATUS         NO-EXTENSION NO INTERVALS.
  SELECTION-SCREEN SKIP.
SELECTION-SCREEN: END OF SCREEN 0102.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_TRA-LOW.
  FREE IT_F4.
  CLEAR IT_F4.

  SELECT BUKRS TRADE_ID DATE_PERIOD_1 DATE_OF_DEAL NOTE_TEXT_1 SIDE
     FROM ZFIT0083 INTO TABLE IT_F4 WHERE DEAL_TYPE EQ '4'.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'TRADE_ID'
      VALUE_ORG       = 'S'
      DYNPPROG        = SY-REPID
      DYNPNR          = SY-DYNNR
    TABLES
      VALUE_TAB       = IT_F4
      RETURN_TAB      = IT_RETURN
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  P_TRA-LOW = IT_RETURN-FIELDVAL.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_NAT-LOW.
  FREE IT_ZFIT0095.
  SELECT * FROM ZFIT0095 INTO TABLE IT_ZFIT0095.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'NATUREZA'
      VALUE_ORG       = 'S'
      DYNPPROG        = SY-REPID
      DYNPNR          = SY-DYNNR
    TABLES
      VALUE_TAB       = IT_ZFIT0095
      RETURN_TAB      = IT_RETURN
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  P_NAT-LOW = IT_RETURN-FIELDVAL.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_STA-LOW.
  FREE IT_STATUS.
  SELECT STATUS ICON FROM ZFIT0096 INTO TABLE IT_STATUS.

  MOVE: 'E'    TO WA_STATUS-STATUS,
        '@09@' TO WA_STATUS-ICON.
  APPEND WA_STATUS TO IT_STATUS.

  SORT IT_STATUS.
  DELETE ADJACENT DUPLICATES FROM IT_STATUS COMPARING STATUS.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'STATUS'
      VALUE_ORG       = 'S'
      DYNPPROG        = SY-REPID
      DYNPNR          = SY-DYNNR
    TABLES
      VALUE_TAB       = IT_STATUS
      RETURN_TAB      = IT_RETURN
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  P_STA-LOW = IT_RETURN-FIELDVAL.

*       CLASS ZCL_EVENTS DEFINITION
CLASS ZCL_EVENTS DEFINITION.
  PUBLIC SECTION.
    METHODS: CONSTRUCTOR IMPORTING IO_ALV_GRID  TYPE REF TO CL_GUI_ALV_GRID,
      ON_TOOLBAR  FOR EVENT TOOLBAR               OF CL_GUI_ALV_GRID IMPORTING E_OBJECT E_INTERACTIVE SENDER,
      ON_DT_CH    FOR EVENT DATA_CHANGED          OF CL_GUI_ALV_GRID IMPORTING ER_DATA_CHANGED  E_ONF4 E_ONF4_BEFORE E_ONF4_AFTER E_UCOMM,
      ON_HANDLE   FOR EVENT USER_COMMAND          OF CL_GUI_ALV_GRID IMPORTING E_UCOMM,
      ON_CLICK    FOR EVENT HOTSPOT_CLICK         OF CL_GUI_ALV_GRID IMPORTING E_ROW_ID E_COLUMN_ID ES_ROW_NO.

ENDCLASS.                    "ZCL_EVENTS DEFINITION


*       CLASS ZCL_CONTROL_NDF DEFINITION
CLASS ZCL_CONTROL_NDF DEFINITION.
  PUBLIC SECTION.
    METHODS:
      CHECK_CAMPOS,
      SELECIONA_DADOS,
      AGRUPA_DADOS,
      MONTAR_ALV,
      MONTAR_LAY,
      CRIA_ALV,
      SORT,
      SALVAR_DADOS,
      CHECK_ESTORNO,
      GERAR_DOC_CONTABIL,
      REFRESH_DOC_CONTABIL,
      ESTORNO_DOC_CONTABIL,
      BLOCK_CAMPOS,
      REFRESH_DADOS,
      Z_RETORNA_STATUS_ZIB IMPORTING I_DOC_LCTO TYPE NUM10 I_ANO_LCTO TYPE NUM4
                           EXPORTING E_ZIBCHV   TYPE ZIB_CONTABIL_CHV E_ZIBERR TYPE ZIB_CONTABIL_ERR.

  PRIVATE SECTION.
    DATA: C_CHECK TYPE C.

ENDCLASS.                    "ZCL_CONTROL_NDF DEFINITION

DATA: OBG_EVENTS  TYPE REF TO ZCL_EVENTS,
      OBG_CONTROL TYPE REF TO ZCL_CONTROL_NDF.

*       CLASS ZCL_EVENTS IMPLEMENTATION
CLASS ZCL_EVENTS IMPLEMENTATION.

  METHOD CONSTRUCTOR.
    CREATE OBJECT C_ALV_TM
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.
  ENDMETHOD.                    "CONTRUCTOR


  METHOD ON_TOOLBAR.

    FIELD-SYMBOLS: <LS_TOOLBAR>  TYPE STB_BUTTON.

* Incluir novos Botoes
    FREE: TY_TOOLBAR.
    DEFINE TOOBAR.
      TY_TOOLBAR-ICON      = &1.
      TY_TOOLBAR-FUNCTION  = &2.
      TY_TOOLBAR-QUICKINFO = &3.
      TY_TOOLBAR-TEXT      = &4.
      TY_TOOLBAR-BUTN_TYPE = &5.
      APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
      CLEAR TY_TOOLBAR.
    END-OF-DEFINITION.
    TOOBAR:
            '@39@' 'GERAR'   'Gerar'     'Gerar Doc. Contabil' 0,
            ''     ''        ''          ''                    3,
            '@42@' 'REFRESH' 'Atualizar' 'Atualizar'           0,
            ''     ''        ''          ''                    3,
            '@F1@' 'ESTORNO' 'Estorno'   'Estorno'             0,
            ''     ''        ''          ''                    3.

    LOOP AT E_OBJECT->MT_TOOLBAR ASSIGNING <LS_TOOLBAR>.
      CASE <LS_TOOLBAR>-FUNCTION.
        WHEN '&CHECK' OR '&REFRESH' OR '&LOCAL&CUT' OR '&LOCAL&COPY' OR '&LOCAL&PASTE' OR '&LOCAL&UNDO'.
          DELETE E_OBJECT->MT_TOOLBAR INDEX SY-TABIX.
      ENDCASE.
    ENDLOOP.

    CALL METHOD C_ALV_TM->REORGANIZE( IO_ALV_TOOLBAR = E_OBJECT ).


  ENDMETHOD.                    "ON_TOOLBAR

  METHOD ON_DT_CH.

    DATA: LS_GOOD   TYPE LVC_S_MODI,
          DIFERENCA TYPE RFWRT.
    UNASSIGN <SAIDA>.

    LOOP AT ER_DATA_CHANGED->MT_GOOD_CELLS INTO LS_GOOD.
      READ TABLE IT_SAIDA ASSIGNING <SAIDA> INDEX LS_GOOD-ROW_ID.
      CONDENSE LS_GOOD-VALUE NO-GAPS.

      CASE LS_GOOD-FIELDNAME.
        WHEN 'AJ_BRUTO_BRL'.

          SELECT SINGLE VALFROM
            FROM SETLEAF
            INTO @DATA(LIMITE_DIFERENCA_POSITIVO)
              WHERE SETNAME EQ 'ZFI0080_AJUSTE_DIFERENCA'
                AND LINEID  EQ '0000000001'.

          IF SY-SUBRC IS NOT INITIAL.
            MESSAGE TEXT-011 TYPE 'I'.
            EXIT.
          ENDIF.

          DATA(LIMITE_DIFERENCA_NEGATIVO) = LIMITE_DIFERENCA_POSITIVO * -1.

          DIFERENCA = LS_GOOD-VALUE - <SAIDA>-AJ_BRUTO_BRL_F.

          IF DIFERENCA BETWEEN LIMITE_DIFERENCA_NEGATIVO AND LIMITE_DIFERENCA_POSITIVO.
            MOVE LS_GOOD-VALUE TO <SAIDA>-AJ_BRUTO_BRL.
            IF <SAIDA>-AJ_BRUTO_BRL > 0.
              <SAIDA>-IR_BRL = <SAIDA>-AJ_BRUTO_BRL * PORC_5.
            ELSE.
              <SAIDA>-IR_BRL = 0.
            ENDIF.
          ELSE.

            MESSAGE TEXT-008 TYPE 'I'.

            CALL METHOD ER_DATA_CHANGED->MODIFY_CELL(
                I_ROW_ID    = LS_GOOD-ROW_ID
                I_TABIX     = LS_GOOD-TABIX
                I_FIELDNAME = LS_GOOD-FIELDNAME
                I_VALUE     = <SAIDA>-AJ_BRUTO_BRL_F ).

          ENDIF.

        WHEN 'DT_LIQUIDACAO'.
          CREATE OBJECT OBJ_ZCL_UTIL_SD.

          MOVE LS_GOOD-VALUE TO <SAIDA>-DT_LIQUIDACAO.

          OBJ_ZCL_UTIL_SD->SET_KURST('B').
          OBJ_ZCL_UTIL_SD->SET_WAERK('USD').
          OBJ_ZCL_UTIL_SD->SET_TCURR( MOEDA ).

          MOVE  <SAIDA>-DT_LIQUIDACAO TO VL_GDATU.
          OBJ_ZCL_UTIL_SD->SET_DATA( VL_GDATU ).
          VL_UKURS = OBJ_ZCL_UTIL_SD->TAXA_CAMBIO( ).
          MOVE  VL_UKURS TO <SAIDA>-TX_OB08.

        WHEN 'IR_BRL'.

          DIFERENCA = LS_GOOD-VALUE - <SAIDA>-IR_BRL_F.
          IF DIFERENCA BETWEEN -3 AND 3.
            MOVE LS_GOOD-VALUE TO <SAIDA>-IR_BRL.
          ELSE.
            MESSAGE TEXT-008 TYPE 'I'.

            CALL METHOD ER_DATA_CHANGED->MODIFY_CELL(
                I_ROW_ID    = LS_GOOD-ROW_ID
                I_TABIX     = LS_GOOD-TABIX
                I_FIELDNAME = LS_GOOD-FIELDNAME
                I_VALUE     = <SAIDA>-IR_BRL_F ).
          ENDIF.

        WHEN 'TX_OB08'.

          IF <SAIDA>-BUKRS NE '0100'.

            LOOP AT IT_SAIDA ASSIGNING FIELD-SYMBOL(<TX_SAIDA>) WHERE DT_LIQUIDACAO EQ <SAIDA>-DT_LIQUIDACAO.
              MOVE LS_GOOD-VALUE TO <TX_SAIDA>-TX_OB08.
            ENDLOOP.

          ELSE.

            LOOP AT IT_SAIDA ASSIGNING <TX_SAIDA> WHERE DT_LIQUIDACAO >= SY-DATUM.
              MOVE LS_GOOD-VALUE TO <TX_SAIDA>-TX_OB08.
              PERFORM CALCULO CHANGING <TX_SAIDA>.
            ENDLOOP.
          ENDIF.
        WHEN 'DT_RECEBIMENTO' OR
        'N_CONTRATO' OR
        'CONF01' OR
        'CONF02' OR
        'DT_ENVIO' OR
        'COD_RAST' OR
        'RESP_ENVIO' OR
        'DEV_BANCO'.

          APPEND VALUE #(
                          FNAME = LS_GOOD-FIELDNAME
                          COLOR-COL = 5
                        ) TO COLOR_TAB.

          <SAIDA>-COLORTAB = COLOR_TAB.

*          <SAIDA>-COLOR = 'C500'.
      ENDCASE.

      IF LS_GOOD-FIELDNAME EQ 'DT_LIQUIDACAO' OR LS_GOOD-FIELDNAME EQ 'TX_OB08'.

        IF LS_GOOD-FIELDNAME NE 'DT_LIQUIDACAO'.
          <SAIDA>-TX_OB08 = LS_GOOD-VALUE.
        ENDIF.

        CASE <SAIDA>-SIDE.
          WHEN 'S'.
            <SAIDA>-AJ_BRUTO_BRL   =  <SAIDA>-AMOUNT_DEALT * ( <SAIDA>-EXCH_RAT_PERIOD1 - <SAIDA>-TX_OB08 ).
            <SAIDA>-AJ_BRUTO_BRL_F =  <SAIDA>-AJ_BRUTO_BRL.
          WHEN 'B'.
            <SAIDA>-AJ_BRUTO_BRL   =  <SAIDA>-AMOUNT_DEALT * ( <SAIDA>-TX_OB08 - <SAIDA>-EXCH_RAT_PERIOD1 ).
            <SAIDA>-AJ_BRUTO_BRL_F =  <SAIDA>-AJ_BRUTO_BRL.
        ENDCASE.

        IF <SAIDA>-AJ_BRUTO_BRL > 0.

          IF <SAIDA>-BUKRS NE '0100'.
            <SAIDA>-IR_BRL         = <SAIDA>-AJ_BRUTO_BRL    * PORC_5.
            <SAIDA>-IR_BRL_F       = <SAIDA>-IR_BRL.
          ELSE.
            <SAIDA>-IR_BRL         = 0.
            <SAIDA>-IR_BRL_F       = 0.
          ENDIF.

          READ TABLE IT_ZFIT0095 INTO WA_ZFIT0095 WITH KEY NATUREZA = <SAIDA>-NOTE_TEXT_1
                                                           BUKRS    = <SAIDA>-BUKRS
                                                           SINAL    = '+'.
          MOVE WA_ZFIT0095-HKONT   TO <SAIDA>-CONTA_IR.

        ELSE.
          <SAIDA>-IR_BRL    = 0.
          <SAIDA>-IR_BRL_F  = 0.
          <SAIDA>-SINAL_AUX = '-'.
          <SAIDA>-CONTA_AUX = ''.
          READ TABLE IT_ZFIT0095 INTO WA_ZFIT0095 WITH KEY NATUREZA = <SAIDA>-NOTE_TEXT_1
                                                           BUKRS    = <SAIDA>-BUKRS
                                                           SINAL    = '-'.
        ENDIF.

        MOVE: WA_ZFIT0095-TP_LCTO TO <SAIDA>-TP_LCTO,
              WA_ZFIT0095-SINAL   TO <SAIDA>-SINAL.

        CLEAR: WA_ZFIT0094.
        READ TABLE IT_ZFIT0094 INTO WA_ZFIT0094 WITH KEY BANCO_BLOOM = <SAIDA>-CONT_PART_DEAL_C
                                                         BUKRS       = <SAIDA>-BUKRS.

        IF NOT WA_ZFIT0094-LIFNR IS INITIAL AND NOT WA_ZFIT0094-KUNNR IS INITIAL.

          <SAIDA>-CONTA_AUX   = 'I'.
          CLEAR: WA_LFA1.

          CASE <SAIDA>-SINAL.
            WHEN '+'." Cliente
              READ TABLE IT_KNA1 INTO WA_KNA1 WITH KEY KUNNR = WA_ZFIT0094-KUNNR.
              MOVE: WA_ZFIT0094-KUNNR TO <SAIDA>-HKONT,
                    WA_KNA1-NAME1     TO <SAIDA>-TXT50.
            WHEN '-'." Fornecedor
              READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_ZFIT0094-LIFNR.
              MOVE: WA_ZFIT0094-LIFNR        TO <SAIDA>-HKONT,
                    WA_LFA1-NAME1            TO <SAIDA>-TXT50,
                    WA_ZFIT0094-BVTYP        TO <SAIDA>-BVTYP.
          ENDCASE.

        ELSEIF NOT WA_ZFIT0094-HKONT IS INITIAL.
          <SAIDA>-CONTA_AUX   = 'E'.
          CLEAR: WA_SKAT.
          READ TABLE IT_SKAT INTO WA_SKAT WITH KEY SAKNR = WA_ZFIT0094-HKONT.
          MOVE: WA_ZFIT0094-HKONT        TO <SAIDA>-HKONT,
                WA_SKAT-TXT50            TO <SAIDA>-TXT50.
        ENDIF.

        MOVE: WA_ZFIT0094-HKONT        TO <SAIDA>-CONTA.

      ENDIF.

      <SAIDA>-AJ_LIQUIDO_BRL = <SAIDA>-AJ_BRUTO_BRL - <SAIDA>-IR_BRL.

      TRY .
          <SAIDA>-AJ_BRUTO_USD = <SAIDA>-AJ_BRUTO_BRL / <SAIDA>-TX_OB08.
        CATCH  CX_SY_ZERODIVIDE.
          <SAIDA>-AJ_BRUTO_USD = 0.
      ENDTRY.

      TRY .
          <SAIDA>-IR_USD = <SAIDA>-IR_BRL / <SAIDA>-TX_OB08.
        CATCH  CX_SY_ZERODIVIDE.
          <SAIDA>-IR_USD = 0.
      ENDTRY.

      <SAIDA>-AJ_LIQUIDO_USD = <SAIDA>-AJ_BRUTO_USD - <SAIDA>-IR_USD.

      TRY .
          <SAIDA>-HEDGE = <SAIDA>-COUNTER_AMOUNT / <SAIDA>-TX_OB08.
        CATCH  CX_SY_ZERODIVIDE.
          <SAIDA>-HEDGE = 0.
      ENDTRY.


      CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY
        EXPORTING
          IS_STABLE = WA_STABLE.

    ENDLOOP.

    CALL METHOD ER_DATA_CHANGED->DISPLAY_PROTOCOL.

  ENDMETHOD.                    "ON_DT_CH

  METHOD ON_HANDLE.

    CASE E_UCOMM.
      WHEN 'GERAR'.
        OBG_CONTROL->GERAR_DOC_CONTABIL( ).
      WHEN 'REFRESH'.
        OBG_CONTROL->REFRESH_DOC_CONTABIL( ).
      WHEN 'ESTORNO'.
        OBG_CONTROL->ESTORNO_DOC_CONTABIL( ).
    ENDCASE.

  ENDMETHOD.                    "ON_DEL

  METHOD ON_CLICK.

    DATA WA_0096_DEL TYPE ZFIT0096.
    DATA: VL_LOTE TYPE ZGLT034-LOTE.
    DATA: VL_LCTO TYPE ZGLT035-DOC_LCTO.

    UNASSIGN <SAIDA>.

    READ TABLE IT_SAIDA ASSIGNING <SAIDA> INDEX E_ROW_ID.

    VL_LOTE = <SAIDA>-LOTE.
    VL_LCTO = <SAIDA>-DOC_LCTO.

    CASE E_COLUMN_ID.
      WHEN 'DOC_LCTO'.

        CHECK ( <SAIDA>-DOC_LCTO IS NOT INITIAL ).

        FREE: IT_DTA.
        DEFINE SHDB.
          CLEAR IT_DTA.
          WA_DTA-PROGRAM   = &1.
          WA_DTA-DYNPRO    = &2.
          WA_DTA-DYNBEGIN  = &3.
          WA_DTA-FNAM      = &4.
          WA_DTA-FVAL      = &5.
          APPEND WA_DTA TO IT_DTA.
        END-OF-DEFINITION.

        SHDB:
        'ZGL015'   '0050' 'X'  ' '                   ' ',
        ' '        ' '    ' '  'BDC_CURSOR'          'WG_ZGLT034-LOTE',
        ' '        ' '    ' '  'BDC_OKCODE'          '=DISPLA',
        'ZGL015'   '0050' 'X'  ' '                   ' ',
        ' '        ' '    ' '  'BDC_CURSOR'          'WG_ZGLT035-DOC_LCTO',
        ' '        ' '    ' '  'BDC_OKCODE'          '=SEARCH',
        ' '        ' '    ' '  'WG_ZGLT035-DOC_LCTO' <SAIDA>-DOC_LCTO.

        OPT-DISMODE = 'E'.
        CALL TRANSACTION 'ZGL016' USING IT_DTA OPTIONS FROM OPT.

*        SET PARAMETER ID 'BLN' FIELD VL_LCTO.
*        SET PARAMETER ID 'LOT' FIELD VL_LOTE.
*        CALL TRANSACTION 'ZGL016' AND SKIP FIRST SCREEN.

        SELECT SINGLE DOC_LCTO FROM ZGLT035 INTO <SAIDA>-DOC_LCTO
          WHERE DOC_LCTO EQ <SAIDA>-DOC_LCTO
            AND LOEKZ    EQ ''.

        IF NOT SY-SUBRC IS INITIAL.
          MOVE: ''     TO <SAIDA>-LOTE, "LOTE
                'S'    TO <SAIDA>-STATUS,"STATUS
                '@08@' TO <SAIDA>-ICON,"STATUS
                ''     TO <SAIDA>-DOC_LCTO.

          SELECT SINGLE * FROM ZFIT0096
              INTO WA_0096_DEL
                WHERE BUKRS EQ <SAIDA>-BUKRS AND
                      TRADE_ID EQ <SAIDA>-TRADE_ID.

          IF SY-SUBRC IS INITIAL.
            DELETE FROM ZFIT0096 WHERE BUKRS EQ WA_0096_DEL-BUKRS
                                AND TRADE_ID EQ WA_0096_DEL-TRADE_ID
                            AND DOC_CONTABIL EQ 0.
          ENDIF.

        ENDIF.

      WHEN 'DOC_CONTABIL'.

        CHECK ( <SAIDA>-DOC_CONTABIL IS NOT INITIAL ).
        SET PARAMETER ID 'BLN' FIELD <SAIDA>-DOC_CONTABIL.
        SET PARAMETER ID 'BUK' FIELD <SAIDA>-BUKRS.
        SET PARAMETER ID 'GJR' FIELD <SAIDA>-DT_LANCAMENTO(4).
        CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.

      WHEN 'LOTE'.

        CHECK ( <SAIDA>-LOTE IS NOT INITIAL ).

        SET PARAMETER ID 'LOT' FIELD VL_LOTE.
        CALL TRANSACTION 'ZGL017' AND SKIP FIRST SCREEN.

    ENDCASE.

    OBG_CONTROL->SELECIONA_DADOS( ).
    OBG_CONTROL->AGRUPA_DADOS( ).
    OBG_CONTROL->BLOCK_CAMPOS( ).
    CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = WA_STABLE.

  ENDMETHOD.                    "ON_CLICK

ENDCLASS.                    "ZCL_EVENTS IMPLEMENTATION

*       CLASS ZCL_CONTROL_NDF IMPLEMENTATION
CLASS ZCL_CONTROL_NDF IMPLEMENTATION.
  METHOD CHECK_CAMPOS.

    FIELD-SYMBOLS: <W_TRA> LIKE P_TRA.
    C_CHECK = ABAP_FALSE.

    SHIFT P_TRA-LOW LEFT DELETING LEADING '0'.

    IF NOT P_TRA-LOW IS INITIAL.
      SELECT SINGLE TRADE_ID FROM ZFIT0083 INTO IT_F4 WHERE TRADE_ID EQ P_TRA-LOW AND DEAL_TYPE EQ '4'.
      IF NOT SY-SUBRC IS INITIAL.
        MESSAGE S836(SD) WITH TEXT-005.
        EXIT.
        C_CHECK = ABAP_TRUE.
      ENDIF.
    ENDIF.

    IF NOT P_NAT-LOW IS INITIAL.
      SELECT SINGLE NOTE_TEXT_1 FROM ZFIT0083 INTO IT_F4 WHERE NOTE_TEXT_1 EQ P_NAT-LOW AND DEAL_TYPE EQ '4'.
      IF NOT SY-SUBRC IS INITIAL.
        MESSAGE S836(SD) WITH TEXT-006.
        EXIT.
        C_CHECK = ABAP_TRUE.
      ENDIF.
    ENDIF.

  ENDMETHOD.                    "CHECK_CAMPOS

  METHOD SELECIONA_DADOS.

    CHECK C_CHECK IS INITIAL.

    FREE: IT_0083, IT_SAIDA, IT_0096, IT_ZFIT0094, IT_ZFIT0095, IT_LFA1, IT_SKAT.
    IF NOT P_TRA-LOW IS INITIAL.

      SHIFT P_TRA-LOW LEFT DELETING LEADING '0'.

      SELECT * FROM ZFIT0096 INTO TABLE IT_0096
        WHERE BUKRS IN P_BUK
          AND TRADE_ID EQ P_TRA-LOW
          AND DATE_PERIOD_1 IN P_DTV
          AND DATE_OF_DEAL IN P_DTO
          AND NOTE_TEXT_1 IN P_NAT.

      SELECT * FROM ZFIT0083 INTO TABLE IT_0083
        WHERE BUKRS IN P_BUK
          AND TRADE_ID EQ P_TRA-LOW
          AND DATE_PERIOD_1 IN P_DTV
          AND DATE_OF_DEAL IN P_DTO
          AND NOTE_TEXT_1 IN P_NAT
          AND DEAL_TYPE EQ '4'
          AND REV_TRADE EQ ( SELECT MAX( REV_TRADE ) FROM ZFIT0083 WHERE TRADE_ID EQ P_TRA-LOW AND REV_TRADE NOT LIKE 'E%' )
.
      ME->CHECK_ESTORNO( ).

    ELSE.
      SELECT * FROM ZFIT0096 INTO TABLE IT_0096
          WHERE BUKRS IN P_BUK
            AND DATE_PERIOD_1 IN P_DTV
            AND DATE_OF_DEAL IN P_DTO
            AND NOTE_TEXT_1 IN P_NAT.

      SELECT * FROM ZFIT0083 INTO TABLE IT_0083
        WHERE BUKRS IN P_BUK
          AND DATE_PERIOD_1 IN P_DTV
          AND DATE_OF_DEAL IN P_DTO
          AND NOTE_TEXT_1 IN P_NAT
          AND DEAL_TYPE EQ '4'.

      ME->CHECK_ESTORNO( ).
    ENDIF.

    SELECT * FROM ZFIT0095 INTO TABLE IT_ZFIT0095.
    SELECT * FROM ZFIT0094 INTO TABLE IT_ZFIT0094.
    IF NOT IT_ZFIT0094 IS INITIAL.

      SELECT * FROM LFA1  INTO TABLE IT_LFA1
        FOR ALL ENTRIES IN IT_ZFIT0094
        WHERE LIFNR EQ IT_ZFIT0094-LIFNR
          AND SPRAS EQ SY-LANGU.

      SELECT * FROM KNA1  INTO TABLE IT_KNA1
        FOR ALL ENTRIES IN IT_ZFIT0094
        WHERE KUNNR EQ IT_ZFIT0094-KUNNR
          AND SPRAS EQ SY-LANGU.

      SELECT * FROM SKAT  INTO TABLE IT_SKAT
        FOR ALL ENTRIES IN IT_ZFIT0094
        WHERE SAKNR EQ IT_ZFIT0094-HKONT
          AND SPRAS EQ SY-LANGU
          AND KTOPL EQ '0050'.

    ENDIF.

  ENDMETHOD.                    "SELECIONA_DADOS

  METHOD AGRUPA_DADOS.

*    DATA: vl_gdatu TYPE gdatu_inv,
*          vl_ukurs TYPE ukurs_curr.

    DATA: OBJ_ZCL_UTIL_SD TYPE REF TO ZCL_UTIL_SD.

    CLEAR: OBJ_ZCL_UTIL_SD, WA_SAIDA, WA_0083.
    CREATE OBJECT OBJ_ZCL_UTIL_SD.

    OBJ_ZCL_UTIL_SD->SET_KURST('B').
    OBJ_ZCL_UTIL_SD->SET_WAERK('USD').
    OBJ_ZCL_UTIL_SD->SET_TCURR( MOEDA ).

    LOOP AT IT_0083 INTO WA_0083.

      MOVE: 'E'     TO WA_SAIDA-STATUS,
            '@09@' TO WA_SAIDA-ICON.

      MOVE: WA_0083-TRADE_ID TO WA_SAIDA-TRADE_ID,
            WA_0083-BUKRS    TO WA_SAIDA-BUKRS.

      MOVE: WA_0083-CONT_PART_DEAL_C TO WA_SAIDA-CONT_PART_DEAL_C,
            WA_0083-NOTE_TEXT_2      TO WA_SAIDA-NOTE_TEXT_2,
            WA_0083-DATE_OF_DEAL     TO WA_SAIDA-DATE_OF_DEAL.

      IF WA_0083-SETTLE_CURRENCY EQ 'BRL'.
        " #165879 - BGUAREZ  - 01.08.2025 - Inicio
        IF WA_0083-SIDE EQ 'B'.
          WA_SAIDA-SIDE = 'S'.
        ELSE.
          WA_SAIDA-SIDE = 'B'.
        ENDIF.
        " #165879 - BGUAREZ - 01.08.2025 - fim
        MOVE: WA_0083-AMOUNT_DEALT   TO WA_SAIDA-COUNTER_AMOUNT,
              WA_0083-COUNTER_AMOUNT TO WA_SAIDA-AMOUNT_DEALT.
      ELSE.

        WA_SAIDA-SIDE = WA_0083-SIDE. " #165879 - BGUAREZ - 02.09.2025 - fim

        "US #165879 - MMSILVA - 15.05.2025 - Inicio
        MOVE: WA_0083-AMOUNT_DEALT   TO WA_SAIDA-AMOUNT_DEALT,
              WA_0083-COUNTER_AMOUNT TO WA_SAIDA-COUNTER_AMOUNT.
      ENDIF.
      "US #165879 - MMSILVA - 15.05.2025 - Fim
      MOVE: WA_0083-EXCH_RAT_PERIOD1 TO WA_SAIDA-EXCH_RAT_PERIOD1,
            WA_0083-DATE_PERIOD_1    TO WA_SAIDA-DATE_PERIOD_1,
            WA_0083-DATE_PERIOD_1    TO WA_SAIDA-DT_LIQUIDACAO,
            WA_0083-DATE_PERIOD_1    TO WA_SAIDA-DT_LANCAMENTO.

      CALL FUNCTION 'DAYS_BETWEEN_TWO_DATES'
        EXPORTING
          I_DATUM_BIS = WA_0083-DATE_PERIOD_1  " Data Vencimento
          I_DATUM_VON = WA_0083-DATE_OF_DEAL  " Data Contratação
          I_STGMETH   = 2
        IMPORTING
          E_TAGE      = WA_SAIDA-PRAZO. " Diferença em dias

      IF WA_SAIDA-BUKRS NE '0100'.
        MOVE  WA_SAIDA-DT_LIQUIDACAO TO VL_GDATU.
        OBJ_ZCL_UTIL_SD->SET_DATA( VL_GDATU ).
        VL_UKURS = OBJ_ZCL_UTIL_SD->TAXA_CAMBIO( ).
        MOVE  VL_UKURS TO WA_SAIDA-TX_OB08.
        PORC_5 = '0.00005'.
      ELSE.
        PORC_5 = '1'.
      ENDIF.

*     US #165879 - MMSILVA - 15.05.2025 - Inicio
      IF WA_0083-SETTLE_CURRENCY EQ 'BRL'.
        WA_SAIDA-AJ_BRUTO_BRL   =  WA_0083-COUNTER_AMOUNT * ( WA_0083-EXCH_RAT_PERIOD1 - WA_SAIDA-TX_OB08 ).
        WA_SAIDA-AJ_BRUTO_BRL_F =  WA_0083-COUNTER_AMOUNT * ( WA_0083-EXCH_RAT_PERIOD1 - WA_SAIDA-TX_OB08 ).
      ELSE.
        CASE WA_0083-SIDE.
          WHEN 'S'.
            WA_SAIDA-AJ_BRUTO_BRL_F =  WA_0083-AMOUNT_DEALT * ( WA_0083-EXCH_RAT_PERIOD1 - WA_SAIDA-TX_OB08 ).
            WA_SAIDA-AJ_BRUTO_BRL   =  WA_0083-AMOUNT_DEALT * ( WA_0083-EXCH_RAT_PERIOD1 - WA_SAIDA-TX_OB08 ).
          WHEN 'B'.
            WA_SAIDA-AJ_BRUTO_BRL   =  WA_0083-AMOUNT_DEALT * ( WA_SAIDA-TX_OB08 - WA_0083-EXCH_RAT_PERIOD1 ).
            WA_SAIDA-AJ_BRUTO_BRL_F =  WA_0083-AMOUNT_DEALT * ( WA_SAIDA-TX_OB08 - WA_0083-EXCH_RAT_PERIOD1 ).
        ENDCASE.
      ENDIF.
*     US #165879 - MMSILVA - 15.05.2025 - Fim

      CONCATENATE WA_0083-NOTE_TEXT_1 WA_0083-NOTE_TEXT_2 INTO WA_SAIDA-NOTE_TEXT_1.
      CLEAR: WA_ZFIT0095.

      IF WA_SAIDA-AJ_BRUTO_BRL > 0.

        IF WA_SAIDA-BUKRS NE '0100'.
          WA_SAIDA-IR_BRL   = WA_SAIDA-AJ_BRUTO_BRL * PORC_5.
          WA_SAIDA-IR_BRL_F = WA_SAIDA-AJ_BRUTO_BRL * PORC_5.
        ELSE.
          WA_SAIDA-IR_BRL    = 0.
          WA_SAIDA-IR_BRL_F  = 0.
        ENDIF.

        WA_SAIDA-SINAL_AUX   = '+'.

        READ TABLE IT_ZFIT0095 INTO WA_ZFIT0095 WITH KEY NATUREZA = WA_SAIDA-NOTE_TEXT_1
                                                         BUKRS    = WA_0083-BUKRS
                                                         SINAL    = '+'.
        MOVE WA_ZFIT0095-HKONT   TO WA_SAIDA-CONTA_IR.
      ELSE.

        WA_SAIDA-IR_BRL    = 0.
        WA_SAIDA-IR_BRL_F  = 0.
        WA_SAIDA-SINAL_AUX = '-'.
        WA_SAIDA-CONTA_AUX = ''.
        READ TABLE IT_ZFIT0095 INTO WA_ZFIT0095 WITH KEY NATUREZA = WA_SAIDA-NOTE_TEXT_1
                                                         BUKRS    = WA_0083-BUKRS
                                                         SINAL    = '-'.
      ENDIF.

      MOVE: WA_ZFIT0095-TP_LCTO TO WA_SAIDA-TP_LCTO,
            WA_ZFIT0095-SINAL   TO WA_SAIDA-SINAL.

      CLEAR: WA_ZFIT0094.
      READ TABLE IT_ZFIT0094 INTO WA_ZFIT0094 WITH KEY BANCO_BLOOM = WA_0083-CONT_PART_DEAL_C
                                                       BUKRS       = WA_0083-BUKRS.

      IF NOT WA_ZFIT0094-LIFNR IS INITIAL AND NOT WA_ZFIT0094-KUNNR IS INITIAL.

        WA_SAIDA-CONTA_AUX   = 'I'.
        CLEAR: WA_LFA1.

        CASE WA_SAIDA-SINAL.
          WHEN '+'." Cliente
            READ TABLE IT_KNA1 INTO WA_KNA1 WITH KEY KUNNR = WA_ZFIT0094-KUNNR.
            MOVE: WA_ZFIT0094-KUNNR TO WA_SAIDA-HKONT,
                  WA_KNA1-NAME1     TO WA_SAIDA-TXT50.
          WHEN '-'." Fornecedor
            READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_ZFIT0094-LIFNR.
            MOVE: WA_ZFIT0094-LIFNR TO WA_SAIDA-HKONT,
                  WA_LFA1-NAME1     TO WA_SAIDA-TXT50,
                  WA_ZFIT0094-BVTYP TO WA_SAIDA-BVTYP.
        ENDCASE.

      ELSEIF NOT WA_ZFIT0094-HKONT IS INITIAL.
        WA_SAIDA-CONTA_AUX   = 'E'.
        CLEAR: WA_SKAT.
        READ TABLE IT_SKAT INTO WA_SKAT WITH KEY SAKNR = WA_ZFIT0094-HKONT.
        MOVE: WA_ZFIT0094-HKONT    TO WA_SAIDA-HKONT,
              WA_SKAT-TXT50        TO WA_SAIDA-TXT50.
      ENDIF.

      MOVE: WA_ZFIT0094-HKONT      TO WA_SAIDA-CONTA.

      IF WA_ZFIT0094-HBKID IS INITIAL.
        MOVE 'BBRA'             TO WA_SAIDA-HBKID.
      ELSE.
        MOVE WA_ZFIT0094-HBKID  TO WA_SAIDA-HBKID.
      ENDIF.


      WA_SAIDA-AJ_LIQUIDO_BRL = WA_SAIDA-AJ_BRUTO_BRL - WA_SAIDA-IR_BRL.

      TRY .
          WA_SAIDA-AJ_BRUTO_USD   = WA_SAIDA-AJ_BRUTO_BRL / WA_SAIDA-TX_OB08.
        CATCH  CX_SY_ZERODIVIDE.
          WA_SAIDA-AJ_BRUTO_USD = 0.
      ENDTRY.

      TRY .
          WA_SAIDA-IR_USD         = WA_SAIDA-IR_BRL       / WA_SAIDA-TX_OB08.
        CATCH  CX_SY_ZERODIVIDE.
          WA_SAIDA-IR_USD = 0.
      ENDTRY.

      WA_SAIDA-AJ_LIQUIDO_USD = WA_SAIDA-AJ_BRUTO_USD - WA_SAIDA-IR_USD.

      TRY .
          WA_SAIDA-HEDGE = WA_SAIDA-COUNTER_AMOUNT  / WA_SAIDA-TX_OB08.
        CATCH  CX_SY_ZERODIVIDE.
          WA_SAIDA-HEDGE = 0.
      ENDTRY.

      IF NOT WA_SAIDA-LOTE IS INITIAL.
        SELECT SINGLE * FROM ZGLT034 INTO VL_LOTE WHERE LOTE = WA_SAIDA-LOTE.
        IF SY-SUBRC IS INITIAL.
          IF VL_LOTE-STATUS_LOTE EQ 'L'.
            WA_SAIDA-ICONS = '@07@'.
            WA_SAIDA-COLOR = 'C500'.
          ELSE.
            WA_SAIDA-ICONS = '@06@'.
            WA_SAIDA-COLOR = 'C700'.
          ENDIF.
        ENDIF.
      ENDIF.

*     US #165879 - BGUAREZ - 01.08.2025 - Inicio
      IF WA_0083-SETTLE_CURRENCY EQ 'BRL' AND WA_SAIDA-EXCH_RAT_PERIOD1 > WA_SAIDA-TX_OB08 AND WA_SAIDA-SIDE EQ 'B'.
        IF WA_SAIDA-AJ_BRUTO_BRL > 0.
          WA_SAIDA-AJ_BRUTO_BRL = WA_SAIDA-AJ_BRUTO_BRL * -1.
        ENDIF.
        IF WA_SAIDA-AJ_LIQUIDO_BRL > 0.
          WA_SAIDA-AJ_LIQUIDO_BRL = WA_SAIDA-AJ_LIQUIDO_BRL  * -1.
        ENDIF.
        IF WA_SAIDA-AJ_BRUTO_BRL_F > 0.
          WA_SAIDA-AJ_BRUTO_BRL_F = WA_SAIDA-AJ_BRUTO_BRL_F * -1.
        ENDIF.
        IF WA_SAIDA-AJ_BRUTO_USD > 0.
          WA_SAIDA-AJ_BRUTO_USD = WA_SAIDA-AJ_BRUTO_USD * -1.
        ENDIF.
        IF WA_SAIDA-AJ_LIQUIDO_USD > 0.
          WA_SAIDA-AJ_LIQUIDO_USD = WA_SAIDA-AJ_LIQUIDO_USD * -1.
        ENDIF.
        IF WA_SAIDA-HEDGE > 0.
          WA_SAIDA-HEDGE = WA_SAIDA-HEDGE * -1.
        ENDIF.

      ENDIF.
*     US #165879 - BGUAREZ - 01.08.2025 - Inicio
      APPEND WA_SAIDA TO IT_SAIDA.
      CLEAR: WA_SAIDA.

    ENDLOOP.


    CLEAR: WA_SAIDA.
    LOOP AT IT_0096 INTO WA_0096.

      MOVE: WA_0096-BUKRS    TO WA_SAIDA-BUKRS,"BUKRS
            WA_0096-TRADE_ID TO WA_SAIDA-TRADE_ID."TRADE_ID

*      IF WA_0096- EQ 'BRL'.
*" #165879 - BGUAREZ  - 01.08.2025 - Inicio
*        IF WA_0083-SIDE EQ 'B'.
*        WA_SAIDA-SIDE = 'S'.
*      ELSEif WA_0083-SIDE EQ 'S'.
*        WA_SAIDA-SIDE = 'B'.
*      ENDIF.


      MOVE: WA_0096-CONT_PART_DEAL_C TO WA_SAIDA-CONT_PART_DEAL_C, "CONT_PART_DEAL_C
            WA_0096-NOTE_TEXT_2      TO WA_SAIDA-NOTE_TEXT_2, "NOTE_TEXT_2
            WA_0096-DATE_OF_DEAL     TO WA_SAIDA-DATE_OF_DEAL, "DATE_OF_DEAL
            WA_0096-SIDE             TO WA_SAIDA-SIDE, "SIDE
            WA_0096-AMOUNT_DEALT     TO WA_SAIDA-AMOUNT_DEALT, "AMOUNT_DEALT
            WA_0096-COUNTER_AMOUNT   TO WA_SAIDA-COUNTER_AMOUNT, "COUNTER_AMOUNT
            WA_0096-EXCH_RAT_PERIOD1 TO WA_SAIDA-EXCH_RAT_PERIOD1, "EXCH_RAT_PERIOD1
            WA_0096-DATE_PERIOD_1    TO WA_SAIDA-DATE_PERIOD_1, "DATE_PERIOD_1
            WA_0096-DT_LIQUIDACAO    TO WA_SAIDA-DT_LIQUIDACAO,
            WA_0096-DT_LANCAMENTO    TO WA_SAIDA-DT_LANCAMENTO,
            WA_0096-DT_RECEBIMENTO   TO WA_SAIDA-DT_RECEBIMENTO,
            WA_0096-N_CONTRATO       TO WA_SAIDA-N_CONTRATO,
            WA_0096-CONF01           TO WA_SAIDA-CONF01,
            WA_0096-CONF02           TO WA_SAIDA-CONF02,
            WA_0096-DT_ENVIO         TO WA_SAIDA-DT_ENVIO,
            WA_0096-COD_RAST         TO WA_SAIDA-COD_RAST,
            WA_0096-RESP_ENVIO       TO WA_SAIDA-RESP_ENVIO,
            WA_0096-DEV_BANCO        TO WA_SAIDA-DEV_BANCO.

      "DT_LIQUIDACAO

      CALL FUNCTION 'DAYS_BETWEEN_TWO_DATES' "PRAZO
        EXPORTING
          I_DATUM_BIS = WA_0096-DATE_PERIOD_1  " Data Maior
          I_DATUM_VON = WA_0096-DATE_OF_DEAL  " Data Menor
          I_STGMETH   = 2
        IMPORTING
          E_TAGE      = WA_SAIDA-PRAZO. " Diferença em dias

      IF WA_SAIDA-BUKRS NE '0100'.
        MOVE  WA_SAIDA-DT_LIQUIDACAO    TO VL_GDATU.
        OBJ_ZCL_UTIL_SD->SET_DATA( VL_GDATU ).
        VL_UKURS = OBJ_ZCL_UTIL_SD->TAXA_CAMBIO( ).
        MOVE  VL_UKURS TO WA_SAIDA-TX_OB08. "TX_OB08
        PORC_5 = '0.00005'.
      ELSE.
        WA_SAIDA-TX_OB08 = WA_0096-TX_OB08.
        PORC_5 = '1'.
      ENDIF.


      CASE WA_0096-SIDE.
        WHEN 'S'.
          WA_SAIDA-AJ_BRUTO_BRL   =  WA_0096-AJ_BRUTO_BRL. "AJ_BRUTO_BRL
          WA_SAIDA-AJ_BRUTO_BRL_F =  WA_0096-AMOUNT_DEALT * ( WA_0096-EXCH_RAT_PERIOD1 - WA_SAIDA-TX_OB08 ). "AJ_BRUTO_BRL_F
        WHEN 'B'.
          WA_SAIDA-AJ_BRUTO_BRL   =  WA_0096-AJ_BRUTO_BRL. "AJ_BRUTO_BRL
          WA_SAIDA-AJ_BRUTO_BRL_F =  WA_0096-AMOUNT_DEALT * ( WA_SAIDA-TX_OB08 - WA_0096-EXCH_RAT_PERIOD1 ). "AJ_BRUTO_BRL_F
      ENDCASE.

      MOVE WA_0096-NOTE_TEXT_1 TO WA_SAIDA-NOTE_TEXT_1.       "NOTE_TEXT_1

      CLEAR: WA_ZFIT0095.
      IF WA_SAIDA-AJ_BRUTO_BRL > 0.

        IF WA_SAIDA-BUKRS NE '0100'.
          WA_SAIDA-IR_BRL   = WA_0096-IR_BRL.       "IR_BRL
          WA_SAIDA-IR_BRL_F = WA_SAIDA-AJ_BRUTO_BRL * PORC_5.       "IR_BRL_F
        ELSE.
          WA_SAIDA-IR_BRL = 0. "IR_BRL
          WA_SAIDA-IR_BRL_F = 0."IR_BRL_F
        ENDIF.

        WA_SAIDA-SINAL_AUX   = '+'.
        READ TABLE IT_ZFIT0095 INTO WA_ZFIT0095 WITH KEY NATUREZA = WA_SAIDA-NOTE_TEXT_1
                                                         BUKRS    = WA_0096-BUKRS
                                                         SINAL    = '+'.
        MOVE WA_ZFIT0095-HKONT   TO WA_SAIDA-CONTA_IR."CONTA_IR
      ELSE.
        WA_SAIDA-IR_BRL = 0. "IR_BRL
        WA_SAIDA-IR_BRL_F = 0."IR_BRL_F
        WA_SAIDA-SINAL_AUX   = '-'.
        READ TABLE IT_ZFIT0095 INTO WA_ZFIT0095 WITH KEY NATUREZA = WA_SAIDA-NOTE_TEXT_1
                                                         BUKRS    = WA_0096-BUKRS
                                                         SINAL    = '-'.
      ENDIF.

      MOVE: WA_ZFIT0095-TP_LCTO TO WA_SAIDA-TP_LCTO, "TP_LCTO
            WA_ZFIT0095-SINAL   TO WA_SAIDA-SINAL. "SINAL

      CLEAR: WA_ZFIT0094.
      READ TABLE IT_ZFIT0094 INTO WA_ZFIT0094 WITH KEY BANCO_BLOOM = WA_0096-CONT_PART_DEAL_C
                                                       BUKRS       = WA_0096-BUKRS.
      IF NOT WA_ZFIT0094-LIFNR IS INITIAL AND NOT WA_ZFIT0094-KUNNR IS INITIAL.
        WA_SAIDA-CONTA_AUX   = 'I'.
        CLEAR: WA_LFA1.

        CASE WA_SAIDA-SINAL.
          WHEN '+'.
            READ TABLE IT_KNA1 INTO WA_KNA1 WITH KEY KUNNR = WA_ZFIT0094-KUNNR.
            MOVE: WA_ZFIT0094-KUNNR TO WA_SAIDA-HKONT,"HKONT
                  WA_KNA1-NAME1     TO WA_SAIDA-TXT50."TXT50
          WHEN '-'.
            READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_ZFIT0094-LIFNR.
            MOVE: WA_ZFIT0094-LIFNR        TO WA_SAIDA-HKONT,"HKONT
                  WA_LFA1-NAME1            TO WA_SAIDA-TXT50,"TXT50
                  WA_ZFIT0094-BVTYP        TO WA_SAIDA-BVTYP.
        ENDCASE.

      ELSEIF NOT WA_ZFIT0094-HKONT IS INITIAL.
        WA_SAIDA-CONTA_AUX   = 'E'.
        CLEAR: WA_SKAT.
        READ TABLE IT_SKAT INTO WA_SKAT WITH KEY SAKNR = WA_ZFIT0094-HKONT.
        MOVE: WA_ZFIT0094-HKONT        TO WA_SAIDA-HKONT,"HKONT
              WA_SKAT-TXT50            TO WA_SAIDA-TXT50."TXT50
      ENDIF.

      MOVE: WA_ZFIT0094-HKONT      TO WA_SAIDA-CONTA."CONTA

      IF WA_ZFIT0094-HBKID IS INITIAL.
        MOVE 'BBRA'             TO WA_SAIDA-HBKID. "banco empresa
      ELSE.
        MOVE WA_ZFIT0094-HBKID  TO WA_SAIDA-HBKID. "banco empresa
      ENDIF.

      WA_SAIDA-AJ_LIQUIDO_BRL = WA_SAIDA-AJ_BRUTO_BRL - WA_SAIDA-IR_BRL.       "AJ_LIQUIDO_BRL

      TRY .
          WA_SAIDA-AJ_BRUTO_USD   = WA_SAIDA-AJ_BRUTO_BRL / WA_SAIDA-TX_OB08.       "AJ_BRUTO_USD
        CATCH  CX_SY_ZERODIVIDE.
          WA_SAIDA-AJ_BRUTO_USD = 0.
      ENDTRY.

      TRY .
          WA_SAIDA-IR_USD         = WA_SAIDA-IR_BRL       / WA_SAIDA-TX_OB08.      "IR_USD
        CATCH  CX_SY_ZERODIVIDE.
          WA_SAIDA-IR_USD = 0.
      ENDTRY.

      WA_SAIDA-AJ_LIQUIDO_USD = WA_SAIDA-AJ_BRUTO_USD - WA_SAIDA-IR_USD.      "AJ_LIQUIDO_USD

      SELECT SINGLE DOC_LCTO FROM ZGLT035
        INTO WA_SAIDA-DOC_LCTO
        WHERE DOC_LCTO EQ WA_0096-DOC_LCTO
          AND LOEKZ    EQ ''.

      IF SY-SUBRC IS INITIAL.
        MOVE: WA_0096-LOTE      TO WA_SAIDA-LOTE, "LOTE
              WA_0096-STATUS    TO WA_SAIDA-STATUS,"STATUS
              WA_0096-ICON      TO WA_SAIDA-ICON."ICON
      ELSE.
        MOVE: ''     TO WA_SAIDA-LOTE, "LOTE
              'S'    TO WA_SAIDA-STATUS,"STATUS
              '@08@' TO WA_SAIDA-ICON."ICON
      ENDIF.

      MOVE: WA_0096-DOC_CONTABIL  TO WA_SAIDA-DOC_CONTABIL. "DOC_CONTABIL

      TRY .
          WA_SAIDA-HEDGE = WA_SAIDA-COUNTER_AMOUNT  / WA_SAIDA-TX_OB08.       "HEDGE
        CATCH  CX_SY_ZERODIVIDE.
          WA_SAIDA-HEDGE = 0.
      ENDTRY.

      IF NOT WA_SAIDA-LOTE IS INITIAL.
        SELECT SINGLE * FROM ZGLT034 INTO VL_LOTE WHERE LOTE = WA_SAIDA-LOTE.
        IF SY-SUBRC IS INITIAL.
          IF VL_LOTE-STATUS_LOTE EQ 'L'.
            WA_SAIDA-ICONS = '@07@'.
            WA_SAIDA-COLOR = 'C500'.
          ELSE.
            WA_SAIDA-ICONS = '@06@'.
            WA_SAIDA-COLOR = 'C700'.
          ENDIF.
        ENDIF.
      ENDIF.

      APPEND WA_SAIDA TO IT_SAIDA.
      CLEAR: WA_SAIDA.

    ENDLOOP.

    SORT IT_SAIDA BY BUKRS.

    IF NOT P_STA-LOW IS INITIAL.
      FREE: IT_SAIDA_AUX.

      LOOP AT IT_SAIDA INTO WA_SAIDA.
        CASE WA_SAIDA-STATUS.
          WHEN P_STA-LOW.
            APPEND WA_SAIDA TO IT_SAIDA_AUX.
        ENDCASE.
      ENDLOOP.

      FREE: IT_SAIDA.
      MOVE IT_SAIDA_AUX TO IT_SAIDA.

    ENDIF.

  ENDMETHOD.                    "AGRUPA_DADOS

  METHOD MONTAR_ALV.

    FREE: IT_FCAT, WA_FCAT.

    CASE X_SCREEN.
      WHEN '0101'.
        DEFINE ALV.
          WA_FCAT-HOTSPOT   = &1.
          WA_FCAT-REF_TABLE = &2.
          WA_FCAT-REF_FIELD = &3.
          WA_FCAT-TABNAME   = &4.
          WA_FCAT-FIELDNAME = &5.
          WA_FCAT-SCRTEXT_L = &6.
          WA_FCAT-SCRTEXT_M = &6.
          WA_FCAT-NO_ZERO   = &7.
          WA_FCAT-OUTPUTLEN = &8.
          WA_FCAT-EDIT      = &9.

          APPEND WA_FCAT TO IT_FCAT.
          CLEAR WA_FCAT.
        END-OF-DEFINITION.

        ALV:
          ''  ''         ''                 'IT_SAIDA' 'ICON'              'Status'                    ' '  ' '  ' ',
          ''  ''         ''                 'IT_SAIDA' 'BUKRS'             'Empresa'                   ' '  ' '  ' ',
          ''  ''         ''                 'IT_SAIDA' 'TRADE_ID'          'Id Operação'               ' '  ' '  ' ',
          ''  ''         ''                 'IT_SAIDA' 'NOTE_TEXT_1'       'Natureza Operação'         ' '  ' '  ' ',
          ''  ''         ''                 'IT_SAIDA' 'CONT_PART_DEAL_C'  'Banco'                     ' '  ' '  ' ',
          ''  ''         ''                 'IT_SAIDA' 'HKONT'             'Codigo SAP'                'X'  ' '  ' ',
          ''  ''         ''                 'IT_SAIDA' 'TXT50'             'Nome Banco'                ' '  ' '  ' ',
          ''  ''         ''                 'IT_SAIDA' 'NOTE_TEXT_2'       'Obserção'                  ' '  ' '  ' ',
          ''  ''         ''                 'IT_SAIDA' 'DATE_OF_DEAL'      'Dt. Contratação'           ' '  '10' ' ',
          ''  ''         ''                 'IT_SAIDA' 'SIDE'              'Posição'                   ' '  ' '  ' ',
          ''  ''         ''                 'IT_SAIDA' 'PRAZO'             'Prazo'                     ' '  ' '  ' ',
          ''  ''         ''                 'IT_SAIDA' 'AMOUNT_DEALT'      'Valor USD'                 ' '  '15' ' '.



        IF P_BUK-LOW EQ '0100'.
          ALV:
          ''  ''         ''                 'IT_SAIDA' 'COUNTER_AMOUNT'    'Valor ARS'                 ' '  '15' ' '.
        ELSE.
          ALV:
          ''  ''         ''                 'IT_SAIDA' 'COUNTER_AMOUNT'    'Valor BRL'                 ' '  '15' ' '.
        ENDIF.

        ALV:
        ''  ''         ''                 'IT_SAIDA' 'EXCH_RAT_PERIOD1'  'Strike'                    ' '  '09' ' ',
        ''  ''         ''                 'IT_SAIDA' 'DATE_PERIOD_1'     'Dt. Vencimento'            ' '  '10' ' ',
        ''  ''         ''                 'IT_SAIDA' 'DT_LIQUIDACAO'     'Dt. Liquidação'            ' '  '10' 'X',
        ''  ''         ''                 'IT_SAIDA' 'DT_LANCAMENTO'     'Dt. Lançamento'            ' '  '10' 'X'.

        IF P_BUK-LOW EQ '0100'.
          ALV:
          "''  ''         ''                 'IT_SAIDA' 'TX_OB08'           'Ptax D-1'                  ' '  '09' 'X',
          ''  'ZFIT0083' 'EXCH_RAT_PERIOD2' 'IT_SAIDA' 'TX_OB08'           'Ptax D-1'                  ' '  '09' 'X',
          ''  'ZFIT0083' 'FAR_COUNTER_AMOU' 'IT_SAIDA' 'AJ_BRUTO_BRL'      'Ajuste Bruto ARS'          ' '  '15' 'X',
          ''  ''         ''                 'IT_SAIDA' 'AJ_LIQUIDO_BRL'    'Ajuste Liquido ARS'        ' '  '15' ' '.
        ELSE.
          ALV:
          "''  ''         ''                 'IT_SAIDA' 'TX_OB08'           'Ptax D-1'                  ' '  '09' ' ',
          ''  'ZFIT0083' 'EXCH_RAT_PERIOD2' 'IT_SAIDA' 'TX_OB08'           'Ptax D-1'                  ' '  '09' ' ',
          ''  'ZFIT0083' 'FAR_COUNTER_AMOU' 'IT_SAIDA' 'AJ_BRUTO_BRL'      'Ajuste Bruto BRL'          ' '  '15' 'X',
          ''  'ZFIT0096' 'IR_BRL'           'IT_SAIDA' 'IR_BRL'            'IR $ BRL'                  ' '  '15' 'X',
          ''  ''         ''                 'IT_SAIDA' 'AJ_LIQUIDO_BRL'    'Ajuste Liquido BRL'        ' '  '15' ' '.
        ENDIF.

        ALV:
        ''  ''         ''                 'IT_SAIDA' 'AJ_BRUTO_USD'      'Ajuste Bruto USD'          ' '  '15' ' '.

        IF P_BUK-LOW NE '0100'.
          ALV:
        ''  ''         ''                 'IT_SAIDA' 'IR_USD'            'IR $ USD'                  ' '  '15' ' '.
        ENDIF.

        ALV:
        ''  ''         ''                 'IT_SAIDA' 'AJ_LIQUIDO_USD'    'Ajuste Liquido USD'        ' '  '15' ' ',
        ''  ''         ''                 'IT_SAIDA' 'ICONS'             'Staus Lote'                ' '  '04' ' ',
        'X' ''         ''                 'IT_SAIDA' 'LOTE'              'Lote'                      ' '  '15' ' ',
        'X' ''         ''                 'IT_SAIDA' 'DOC_LCTO'          'Doc. Lançamento'           ' '  '15' ' ',
        'X' ''         ''                 'IT_SAIDA' 'DOC_CONTABIL'      'Doc. Contabil'             ' '  '15' ' ',
        ' ' ''         ''                 'IT_SAIDA' 'HEDGE'             'Ajus. USD Tx. Resgate'     ' '  '20' ' ',
        ' ' ''         ''                 'IT_SAIDA' 'DT_RECEBIMENTO'    'Data Recebimento Contrato' ' '  '10' 'X',
        ' ' ''         ''                 'IT_SAIDA' 'N_CONTRATO'        'Número Contrato'           ' '  '15' 'X',
        ' ' ''         ''                 'IT_SAIDA' 'CONF01'            'Conferencia 01'            ' '  '20' 'X',
        ' ' ''         ''                 'IT_SAIDA' 'CONF02'            'Conferencia 02'            ' '  '20' 'X',
        ' ' ''         ''                 'IT_SAIDA' 'DT_ENVIO'          'Data do Envio'             ' '  '10' 'X',
        ' ' ''         ''                 'IT_SAIDA' 'COD_RAST'          'Código de Rastreio'        ' '  '20' 'X',
        ' ' ''         ''                 'IT_SAIDA' 'RESP_ENVIO'        'Responsável Envio'         ' '  '20' 'X',
        ' ' ''         ''                 'IT_SAIDA' 'DEV_BANCO'         'Devolução Banco'           ' '  '10' 'X'.

      WHEN '0103'.

        FREE IT_FCAT_PG.

        DEFINE ALV_PG.
          WA_FCAT_PG-FIELDNAME = &1.
          WA_FCAT_PG-SCRTEXT_L = &2.
          WA_FCAT_PG-SCRTEXT_M = &2.
          WA_FCAT_PG-OUTPUTLEN = &3.
          WA_FCAT_PG-DO_SUM    = &4.

          APPEND WA_FCAT_PG TO IT_FCAT_PG.
          CLEAR WA_FCAT_PG.
        END-OF-DEFINITION.

        ALV_PG:
           'ICON'              'Status'             '04' '',
           'BUKRS'             'Empresa'            '04' '',
           'TRADE_ID'          'Id Operação'        ''   '',
           'CONT_PART_DEAL_C'  'Banco'              ''   '',
           'HKONT'             'Codigo SAP'         ''   '',
           'TXT50'             'Nome Banco'         ''   '',
           'LOTE'              'Lote'               '11' '',
           'DOC_LCTO'          'Doc. Lançamento'    '11' '',
           'DOC_CONTABIL'      'Doc. Contabil'      '11' '',
           'DATE_PERIOD_1'     'Dt. Vencimento'     '10' '',
           'DT_LIQUIDACAO'     'Dt. Liquidação'     '10' '',
           'TX_OB08'           'Ptax D-1'           ''   ''.

        IF P_BUK-LOW NE '0100'.
          ALV_PG:
              'AJ_LIQUIDO_BRL'    'Ajuste Liquido BRL' '17' 'X'.
        ELSE.
          ALV_PG:
              'AJ_LIQUIDO_BRL'    'Ajuste Liquido ARS' '17' 'X'.
        ENDIF.

        ALV_PG:
        'AJ_LIQUIDO_USD'    'Ajuste Liquido USD' '17' 'X',
        'SINAL_AUX'         ''                   ''   '',
        'CONTA_AUX'         ''                   ''   ''.

    ENDCASE.

  ENDMETHOD.                    "MONTAR_ALV

  METHOD MONTAR_LAY.

    CLEAR: WA_LAYOUT, WA_VARIANTE.

    WA_LAYOUT-ZEBRA      = ABAP_TRUE.
    WA_LAYOUT-NO_ROWINS  = ABAP_TRUE.
    WA_LAYOUT-STYLEFNAME = 'ESTILO'.
    WA_LAYOUT-CTAB_FNAME = 'COLORTAB'.
    WA_LAYOUT-INFO_FNAME = 'COLOR'.
    WA_LAYOUT-SEL_MODE   = 'C'.
    WA_STABLE-ROW        = ABAP_TRUE.

    WA_VARIANTE-REPORT  = SY-REPID.

  ENDMETHOD.                    "MONTAR_LAY

  METHOD CRIA_ALV.

    CASE X_SCREEN.
      WHEN '0101'.

*        CALL METHOD CL_GUI_CFW=>FLUSH.

        IF WA_CONT IS INITIAL.

          CREATE OBJECT WA_CONT
            EXPORTING
              CONTAINER_NAME = 'C_01'.

          CREATE OBJECT WA_ALV
            EXPORTING
              I_SHELLSTYLE    = 0
              I_PARENT        = WA_CONT
              I_APPL_EVENTS   = SPACE
              I_FCAT_COMPLETE = SPACE.

          CREATE OBJECT OBG_EVENTS
            EXPORTING
              IO_ALV_GRID = WA_ALV.

          SET HANDLER: OBG_EVENTS->ON_DT_CH    FOR WA_ALV,
                       OBG_EVENTS->ON_TOOLBAR  FOR WA_ALV,
                       OBG_EVENTS->ON_HANDLE   FOR WA_ALV,
                       OBG_EVENTS->ON_CLICK    FOR WA_ALV.

          CALL METHOD WA_ALV->SET_TABLE_FOR_FIRST_DISPLAY
            EXPORTING
              IS_LAYOUT       = WA_LAYOUT
              IS_VARIANT      = WA_VARIANTE
              I_SAVE          = 'X'
            CHANGING
              IT_OUTTAB       = IT_SAIDA
              IT_FIELDCATALOG = IT_FCAT.

          CALL METHOD WA_ALV->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED ).
          CALL METHOD WA_ALV->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

        ELSE.

          CALL METHOD WA_ALV->SET_FRONTEND_FIELDCATALOG
            EXPORTING
              IT_FIELDCATALOG = IT_FCAT.

          CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY
            EXPORTING
              IS_STABLE = WA_STABLE.
        ENDIF.

      WHEN '0103'.

        OBG_CONTROL->SORT( ).

        IF WA_CONT_PG IS INITIAL.

          CREATE OBJECT WA_CONT_PG
            EXPORTING
              CONTAINER_NAME = 'C_02'.

          CREATE OBJECT WA_ALV_PG
            EXPORTING
              I_SHELLSTYLE    = 0
              I_PARENT        = WA_CONT_PG
              I_APPL_EVENTS   = SPACE
              I_FCAT_COMPLETE = SPACE.

          CALL METHOD WA_ALV_PG->SET_TABLE_FOR_FIRST_DISPLAY
            EXPORTING
              IS_LAYOUT       = WA_LAYOUT
              IS_VARIANT      = WA_VARIANTE
              I_SAVE          = 'X'
            CHANGING
              IT_OUTTAB       = IT_SAIDA
              IT_SORT         = IT_SORT
              IT_FIELDCATALOG = IT_FCAT_PG.

        ELSE.
          CALL METHOD WA_ALV_PG->REFRESH_TABLE_DISPLAY.
        ENDIF.

    ENDCASE.
  ENDMETHOD.                    "CRIA_ALV

  METHOD SORT.

    FREE IT_SORT.

    DEFINE SORT_.
      MOVE &1 TO WA_SORT-SPOS.
      MOVE &2 TO WA_SORT-FIELDNAME.
      MOVE &3 TO WA_SORT-DOWN.
      MOVE &4 TO WA_SORT-SUBTOT.
      APPEND WA_SORT TO IT_SORT.
      CLEAR WA_SORT.
    END-OF-DEFINITION.

    SORT_:
    '1' 'SINAL_AUX' ABAP_TRUE ABAP_TRUE,
    '2' 'CONTA_AUX' ABAP_TRUE ABAP_TRUE.

  ENDMETHOD.                    "SORT

  METHOD SALVAR_DADOS.

    CHECK NOT IT_SAIDA IS INITIAL.

    UNASSIGN <SAIDA>.
    CLEAR: WA_0096_AUX.
    FREE IT_0096_AUX.

    LOOP AT IT_SAIDA ASSIGNING <SAIDA>.

      IF <SAIDA>-STATUS EQ ''.
        MOVE 'S'    TO <SAIDA>-STATUS.
        MOVE '@08@' TO <SAIDA>-ICON.
      ENDIF.

      MOVE-CORRESPONDING <SAIDA> TO WA_0096_AUX.
      APPEND WA_0096_AUX TO IT_0096_AUX.

    ENDLOOP.

    MODIFY ZFIT0096 FROM TABLE IT_0096_AUX.

    ME->SELECIONA_DADOS( ).
    ME->AGRUPA_DADOS( ).

    CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = WA_STABLE.

  ENDMETHOD.                    "SALVAR_DADOS

  METHOD CHECK_ESTORNO.

    FIELD-SYMBOLS: <WA_0083>     TYPE ZFIT0083,
                   <WA_0083_AUX> TYPE ZFIT0083.

    UNASSIGN: <WA_0083>, <WA_0083_AUX>.

    LOOP AT IT_0083 ASSIGNING <WA_0083>.
      IF <WA_0083>-REV_TRADE CS 'E'.
        READ TABLE IT_0083 ASSIGNING <WA_0083_AUX> WITH KEY REV_TRADE = <WA_0083>-REV_TRADE+1(1)
                                                            TRADE_ID  = <WA_0083>-TRADE_ID.
        <WA_0083>-REV_TRADE = 'W'.
        <WA_0083_AUX>-REV_TRADE = 'W'.
      ENDIF.
    ENDLOOP.
    DELETE IT_0083 WHERE REV_TRADE EQ 'W'.

    LOOP AT IT_0096 INTO WA_0096.
      DELETE IT_0083 WHERE BUKRS EQ WA_0096-BUKRS AND TRADE_ID EQ WA_0096-TRADE_ID.
    ENDLOOP.

  ENDMETHOD.                    "CHECK_ESTORNO

  METHOD GERAR_DOC_CONTABIL.

    DATA: E_NUM_LOTE    TYPE ZLOTE_NUM,
          WL_ZGLT031    TYPE ZGLT031,
          GT_ZGL032_AUX TYPE TABLE OF ZGLT032,
          GT_ZGLT032    TYPE TABLE OF ZGLT032,
          WL_ZGLT032    TYPE ZGLT032,
          GT_ZGLT036    TYPE TABLE OF ZGLT036,
          WL_ZGLT036    TYPE ZGLT036,
          DP_RESP       TYPE CHAR2,
          DESCRICAO     TYPE ZDESCR_LOTE,
          LOTE          TYPE ZGLT035-LOTE,
          WL_ZGLT035    TYPE ZGLT035.

    CLEAR: IT_SEL_ROWS[], WA_SEL_ROWS.

    CALL METHOD WA_ALV->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = IT_SEL_ROWS.

    CHECK NOT IT_SEL_ROWS IS INITIAL.

    FREE: IT_SAIDA_DEL, LOTE.
    LOOP AT IT_SEL_ROWS INTO WA_SEL_ROWS.
      READ TABLE IT_SAIDA ASSIGNING <SAIDA> INDEX WA_SEL_ROWS-INDEX.
      APPEND <SAIDA> TO IT_SAIDA_DEL.
    ENDLOOP.

    SORT IT_SAIDA_DEL BY BUKRS.
    DELETE ADJACENT DUPLICATES FROM IT_SAIDA_DEL COMPARING BUKRS.
    IF LINES( IT_SAIDA_DEL ) NE 1.
      MESSAGE S836(SD) WITH TEXT-009.
      EXIT.
    ENDIF.

    LOOP AT IT_SEL_ROWS INTO WA_SEL_ROWS.
      DATA(INDEX_LOTE) = SY-TABIX.

      READ TABLE IT_SAIDA ASSIGNING <SAIDA> INDEX WA_SEL_ROWS-INDEX.

      CASE <SAIDA>-STATUS.
        WHEN  'P'  OR 'F' OR 'E'.

        WHEN OTHERS.

          CLEAR: WL_ZGLT035.
          SELECT SINGLE * FROM ZGLT031 INTO WL_ZGLT031 WHERE TP_LCTO EQ <SAIDA>-TP_LCTO.
          IF NOT WL_ZGLT031 IS INITIAL.

            FREE: GT_ZGL032_AUX, GT_ZGLT032.
            SELECT * FROM ZGLT032 INTO TABLE GT_ZGL032_AUX WHERE TP_LCTO EQ <SAIDA>-TP_LCTO.

            LOOP AT GT_ZGL032_AUX INTO WL_ZGLT032 WHERE TP_LCTO = <SAIDA>-TP_LCTO.

              IF WL_ZGLT032-HKONT = <SAIDA>-HKONT.
                APPEND WL_ZGLT032 TO GT_ZGLT032.
              ENDIF.

              CASE <SAIDA>-SINAL.
                WHEN '-'.
                  IF WL_ZGLT032-BSCHL = 40.
                    APPEND WL_ZGLT032 TO GT_ZGLT032.
                  ENDIF.
                WHEN '+'.
                  IF WL_ZGLT032-BSCHL = 50.
                    APPEND WL_ZGLT032 TO GT_ZGLT032.
                  ELSEIF WL_ZGLT032-HKONT EQ <SAIDA>-CONTA_IR.
                    APPEND WL_ZGLT032 TO GT_ZGLT032.
                  ENDIF.
              ENDCASE.

            ENDLOOP.

            IF NOT GT_ZGLT032 IS INITIAL.

              IF INDEX_LOTE EQ 1.

                MOVE WL_ZGLT031-DESCRICAO TO DESCRICAO.
                MOVE WL_ZGLT031-DPTO_RESP TO DP_RESP.

                CALL METHOD ZCL_GERAR_LOTE=>CREATE_LOTE
                  EXPORTING
                    I_BUKRS       = WL_ZGLT031-BUKRS
                    I_DESCR_LOTE  = DESCRICAO
                    I_DEP_RESP    = DP_RESP
                    I_USER_RESP   = SY-UNAME
                    I_STATUS_LOTE = 'A'
                  IMPORTING
                    E_NUM_LOTE    = LOTE.

              ENDIF.

              MOVE: LOTE                    TO WL_ZGLT035-LOTE,
                    LOTE                    TO <SAIDA>-LOTE,
                    <SAIDA>-BUKRS           TO WL_ZGLT035-BUKRS,
                    <SAIDA>-TP_LCTO         TO WL_ZGLT035-TP_LCTO,
                    DP_RESP                 TO WL_ZGLT035-DPTO_RESP,
                    <SAIDA>-TX_OB08         TO WL_ZGLT035-TAXA,
                    MOEDA                   TO WL_ZGLT035-MOEDA_DOC,
                    WL_ZGLT031-ST_LC_MOEDA  TO WL_ZGLT035-ST_LC_MOEDA,
                    WL_ZGLT031-MOEDA_INT_HIST TO WL_ZGLT035-MOEDA_INT_HIST,
                    WL_ZGLT031-MOEDA_FT_HIST TO WL_ZGLT035-MOEDA_FT_HIST,
                    WL_ZGLT031-MOEDA_GP_HIST TO WL_ZGLT035-MOEDA_GP_HIST,
                    WL_ZGLT031-BLART        TO WL_ZGLT035-BLART,
                    WL_ZGLT031-DESCRICAO    TO WL_ZGLT035-XBLNR,
                    WL_ZGLT031-BKTXT        TO WL_ZGLT035-BKTXT,
                    <SAIDA>-DT_LIQUIDACAO   TO WL_ZGLT035-BLDAT,
                    <SAIDA>-DT_LANCAMENTO   TO WL_ZGLT035-BUDAT,
                    <SAIDA>-DATE_PERIOD_1   TO WL_ZGLT035-DT_LCTO,
                    WL_ZGLT031-PROV_EST     TO WL_ZGLT035-PROV_EST,
                    WL_ZGLT031-ST_AP_FISCAL TO WL_ZGLT035-ST_AP_FISCAL,
                    <SAIDA>-DT_LANCAMENTO+4(2) TO WL_ZGLT035-MONAT,
                    <SAIDA>-DT_LANCAMENTO(4)   TO WL_ZGLT035-GJAHR,
                    SY-UNAME                TO WL_ZGLT035-USNAM,
                    SY-DATUM                TO WL_ZGLT035-DT_ENTRADA,
                    SY-UZEIT                TO WL_ZGLT035-HR_ENTRADA.

              FREE: GT_ZGLT036.
              LOOP AT GT_ZGLT032 INTO WL_ZGLT032.

                MOVE: SY-TABIX              TO WL_ZGLT036-SEQITEM,
                      WL_ZGLT032-TP_LCTO    TO WL_ZGLT036-TP_LCTO,
                      WL_ZGLT032-BSCHL      TO WL_ZGLT036-BSCHL.

                CASE <SAIDA>-BUKRS.
                  WHEN '0100'. MOVE 'T001' TO WL_ZGLT036-GSBER.
                  WHEN OTHERS.
                    CONCATENATE <SAIDA>-BUKRS+2(2) '01' INTO WL_ZGLT036-GSBER.
                ENDCASE.

                MOVE:
                     WL_ZGLT032-HKONT      TO WL_ZGLT036-HKONT,
                     WL_ZGLT032-SGTXT      TO WL_ZGLT036-SGTXT,
                     <SAIDA>-DT_LIQUIDACAO TO WL_ZGLT036-DT_VCT.

                IF '31_21_01_11' CS WL_ZGLT032-BSCHL.
                  MOVE:     'S'            TO WL_ZGLT036-ZLSCH.
                ENDIF.

                MOVE:
                     WL_ZGLT032-UMSKZ      TO WL_ZGLT036-UMSKZ,
                    <SAIDA>-BVTYP          TO WL_ZGLT036-BVTYP,
                    <SAIDA>-HBKID          TO WL_ZGLT036-HBKID.


                CASE <SAIDA>-SINAL.

                  WHEN '-'.
                    MOVE: ABS( <SAIDA>-AJ_LIQUIDO_BRL ) TO WL_ZGLT036-VLR_MOEDA_DOC,
                          ABS( <SAIDA>-AJ_LIQUIDO_BRL ) TO WL_ZGLT036-VLR_MOEDA_INT,
                          ABS( <SAIDA>-AJ_LIQUIDO_USD ) TO WL_ZGLT036-VLR_MOEDA_FORTE.

                  WHEN '+'.

                    IF <SAIDA>-CONTA_IR EQ WL_ZGLT032-HKONT.
                      IF <SAIDA>-BUKRS NE '0100'.

                        WL_ZGLT036-VLR_MOEDA_DOC    = ABS( <SAIDA>-IR_BRL ).
                        WL_ZGLT036-VLR_MOEDA_INT    = ABS( <SAIDA>-IR_BRL ).

                        IF <SAIDA>-IR_USD IS INITIAL.
                          WL_ZGLT036-VLR_MOEDA_FORTE  = '0.01'.
                        ELSE.
                          WL_ZGLT036-VLR_MOEDA_FORTE  = ABS( <SAIDA>-IR_USD ).
                        ENDIF.
                      ENDIF.
                    ELSEIF <SAIDA>-HKONT EQ WL_ZGLT032-HKONT.
                      WL_ZGLT036-VLR_MOEDA_DOC    = ABS( <SAIDA>-AJ_LIQUIDO_BRL ).
                      WL_ZGLT036-VLR_MOEDA_INT    = ABS( <SAIDA>-AJ_LIQUIDO_BRL ).
                      WL_ZGLT036-VLR_MOEDA_FORTE  = ABS( <SAIDA>-AJ_LIQUIDO_USD ).
                    ELSE.
                      WL_ZGLT036-VLR_MOEDA_DOC    = ABS( <SAIDA>-AJ_BRUTO_BRL ).
                      WL_ZGLT036-VLR_MOEDA_INT    = ABS( <SAIDA>-AJ_BRUTO_BRL ).
                      WL_ZGLT036-VLR_MOEDA_FORTE  = ABS( <SAIDA>-AJ_BRUTO_USD ).
                    ENDIF.

                ENDCASE.

                APPEND WL_ZGLT036 TO GT_ZGLT036.
                CLEAR: WL_ZGLT036, WL_ZGLT032.

              ENDLOOP.

              CALL METHOD ZCL_GERAR_LOTE=>CONTABILIZAR_LOTE(
                EXPORTING
                  I_ARREDONDA = ABAP_TRUE
                CHANGING
                  I_ZGLT036   = GT_ZGLT036
                  I_ZGLT035   = WL_ZGLT035 ).

              MOVE: 'P'                 TO <SAIDA>-STATUS,
                    '@B4@'              TO <SAIDA>-ICON,
                    WL_ZGLT035-LOTE     TO <SAIDA>-LOTE,
                    WL_ZGLT035-DOC_LCTO TO <SAIDA>-DOC_LCTO.

              CLEAR WA_0096_AUX.
              MOVE-CORRESPONDING <SAIDA> TO WA_0096_AUX.
              MODIFY ZFIT0096 FROM WA_0096_AUX.

              SUBMIT Z_GRAVA_ZIB_ZGL  WITH P_LOTE = LOTE AND RETURN.

            ELSE.
              MESSAGE S836(SD) WITH TEXT-003.
            ENDIF.
          ELSE.
            MESSAGE S836(SD) WITH TEXT-004.
          ENDIF.
      ENDCASE.
    ENDLOOP.

    OBG_CONTROL->BLOCK_CAMPOS( ).
    CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = WA_STABLE.

  ENDMETHOD.                    "GERAR_DOC_CONTABIL

  METHOD REFRESH_DOC_CONTABIL.

    DATA: WL_ZGLT034   TYPE ZGLT034,
          WL_ZIB_CHAVE TYPE ZIB_CONTABIL_CHV,
          WL_ZIB_ERRO  TYPE ZIB_CONTABIL_ERR.


    UNASSIGN <SAIDA>.
    CHECK NOT IT_SAIDA IS INITIAL.

    LOOP AT IT_SAIDA ASSIGNING <SAIDA>.

      CASE <SAIDA>-STATUS.
        WHEN 'P' OR 'F' OR 'E'.

          CHECK NOT <SAIDA>-BUKRS IS INITIAL.
          CHECK NOT <SAIDA>-LOTE IS INITIAL.

          SELECT SINGLE *
            FROM ZGLT034
            INTO WL_ZGLT034
           WHERE BUKRS = <SAIDA>-BUKRS
             AND LOTE  = <SAIDA>-LOTE.

          CHECK SY-SUBRC IS INITIAL.

          ME->Z_RETORNA_STATUS_ZIB( EXPORTING
                                   I_DOC_LCTO = <SAIDA>-DOC_LCTO
                                   I_ANO_LCTO = WL_ZGLT034-DATA_ATUAL(4)
                                   IMPORTING
                                   E_ZIBCHV   = WL_ZIB_CHAVE
                                   E_ZIBERR   = WL_ZIB_ERRO ).

          IF ( WL_ZIB_CHAVE IS NOT INITIAL ).
            MOVE: 'F'                TO <SAIDA>-STATUS,
                  '@2K@'             TO <SAIDA>-ICON,
                  WL_ZIB_CHAVE-BELNR TO <SAIDA>-DOC_CONTABIL.
            MESSAGE S836(SD) WITH TEXT-001.
          ELSEIF ( WL_ZIB_ERRO IS NOT INITIAL ).
            MOVE: 'E'    TO <SAIDA>-STATUS,
                  '@02@' TO <SAIDA>-ICON.
            MESSAGE S836(SD) WITH TEXT-002.
          ENDIF.

          CLEAR WA_0096_AUX.
          MOVE-CORRESPONDING <SAIDA> TO WA_0096_AUX.
          MODIFY ZFIT0096 FROM WA_0096_AUX.

      ENDCASE.
    ENDLOOP.

    OBG_CONTROL->BLOCK_CAMPOS( ).
    CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = WA_STABLE.

  ENDMETHOD.                    "REFRESH_DOC_CONTABIL

  METHOD Z_RETORNA_STATUS_ZIB.

    DATA V_OBJKEY    TYPE CHAR20.
    CLEAR: E_ZIBCHV, E_ZIBERR.

    CONCATENATE 'ZGL17' I_DOC_LCTO I_ANO_LCTO INTO V_OBJKEY.

    SELECT SINGLE *
      FROM ZIB_CONTABIL_CHV
      INTO E_ZIBCHV
     WHERE OBJ_KEY = V_OBJKEY.

    IF ( SY-SUBRC IS NOT INITIAL ).

      SELECT SINGLE *
        FROM ZIB_CONTABIL_ERR
        INTO E_ZIBERR
       WHERE OBJ_KEY = V_OBJKEY.
    ENDIF.

  ENDMETHOD.                    "z_retorna_status_zib


  METHOD ESTORNO_DOC_CONTABIL.

    DATA: P_RESP, CHECK, P_ERRO(1).

    CLEAR:      IT_SEL_ROWS[], WA_SEL_ROWS.
    UNASSIGN <SAIDA>.

    DATA: IT_MSG TYPE TABLE OF BDCMSGCOLL, " WITH HEADER LINE,
          WA_MSG TYPE BDCMSGCOLL.

    CALL METHOD WA_ALV->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = IT_SEL_ROWS.

    CHECK NOT IT_SEL_ROWS IS INITIAL.

    IF LINES( IT_SEL_ROWS ) EQ 1.
      READ TABLE IT_SEL_ROWS INTO WA_SEL_ROWS INDEX 1.
      READ TABLE IT_SAIDA ASSIGNING <SAIDA> INDEX WA_SEL_ROWS-INDEX.

      IF <SAIDA>-DOC_CONTABIL IS NOT INITIAL .

        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            TEXT_QUESTION         = |Deseja Estornar o Doc. { <SAIDA>-DOC_CONTABIL }?|
            TEXT_BUTTON_1         = 'Sim'
            TEXT_BUTTON_2         = 'Não'
            DISPLAY_CANCEL_BUTTON = ' '
          IMPORTING
            ANSWER                = P_RESP.

        CHECK P_RESP EQ 1.

        DATA: IT_BLNTAB TYPE TABLE OF BLNTAB.

        SELECT SINGLE *
          FROM BKPF
          INTO @DATA(WA_BKPF)
          WHERE BUKRS EQ @<SAIDA>-BUKRS
          AND BELNR EQ @<SAIDA>-DOC_CONTABIL
          AND STBLG EQ @ABAP_FALSE.

        IF SY-SUBRC IS INITIAL.

          FREE TI_BDCDATA.
          PERFORM F_BDC_DATA USING:
                      'SAPMF05A'  '0105'  'X'  ''                 ' ',
                      ''          ''      ''   'BDC_OKCODE'	      '/00',
                      ''          ''      ''   'RF05A-BELNS'      WA_BKPF-BELNR,
                      ''          ''      ''   'BKPF-BUKRS'       WA_BKPF-BUKRS,
                      ''          ''      ''   'RF05A-GJAHS'      WA_BKPF-GJAHR,
                      ''          ''      ''   'UF05A-STGRD'      '01',
*            ''          ''      ''   'BSIS-BUDAT'       VDATA,
                      'SAPMF05A'  '0105'  'X'  ''                 ' ',
                      ''          ''      ''   'BDC_OKCODE'	      '=BU'.

          CLEAR P_ERRO.

          PERFORM ZF_CALL_TRANSACTION USING 'FB08' CHANGING P_ERRO.

        ENDIF.

*        CALL FUNCTION 'POSTING_INTERFACE_START'
*          EXPORTING
*            I_FUNCTION = 'C'
*            I_MODE     = 'N'.
*
*        CALL FUNCTION 'POSTING_INTERFACE_REVERSE_DOC'
*          EXPORTING
*            I_BELNS                  = WA_BKPF-BELNR
*            I_BUKRS                  = WA_BKPF-BUKRS
*            I_TCODE                  = 'FB08'
*            I_STGRD                  = '01'
*            I_NO_AUTH                = ABAP_TRUE
*          TABLES
*            T_BLNTAB                 = IT_BLNTAB
*          EXCEPTIONS
*            TRANSACTION_CODE_INVALID = 1
*            NO_AUTHORIZATION         = 2
*            OTHERS                   = 3.
*
*        BREAK-POINT.
* IF IT_BLNTAB[] IS INITIAL.
*   MESSAGE 'Anulação executada, houve erro na reve
* ELSE.

*
*        CALL FUNCTION 'CALL_FB08'
*          EXPORTING
*            I_BUKRS      = WA_BKPF-BUKRS
*            I_BELNR      = WA_BKPF-BELNR
*            I_GJAHR      = WA_BKPF-GJAHR
*            I_STGRD      = '01'
*            I_NO_AUTH    = ABAP_TRUE
*          EXCEPTIONS
*            NOT_POSSIBLE = 1
*            OTHERS       = 2.

*        IF NOT SY-SUBRC IS INITIAL.
        IF NOT P_ERRO IS INITIAL.
          MESSAGE 'Anulação executada, houve erro na reversão FB08' TYPE 'I'.
        ELSE.

          MOVE: ABAP_FALSE TO <SAIDA>-DOC_CONTABIL,
                ABAP_FALSE TO <SAIDA>-LOTE,
                ABAP_FALSE TO <SAIDA>-DOC_LCTO,
                'S'        TO <SAIDA>-STATUS,
                '@08@'     TO <SAIDA>-ICON.

*          IF NOT <SAIDA>-DOC_LCTO IS INITIAL.
*            CLEAR CHECK.
*            PERFORM ESTORNA_DOC_LCTO USING <SAIDA>-DOC_LCTO CHANGING CHECK.
*
*            IF NOT CHECK IS INITIAL.
*              MOVE: ABAP_FALSE TO <SAIDA>-LOTE,
*                    ABAP_FALSE TO <SAIDA>-DOC_LCTO,
*                    'S'        TO <SAIDA>-STATUS,
*                    '@08@'     TO <SAIDA>-ICON.
*
*              CHECK NOT <SAIDA>-TRADE_ID IS INITIAL.
*
*              DELETE FROM ZFIT0096 WHERE TRADE_ID EQ <SAIDA>-TRADE_ID.
*              COMMIT WORK.
*
*            ENDIF.
*          ENDIF.

          CLEAR WA_0096_AUX.
          MOVE-CORRESPONDING <SAIDA> TO WA_0096_AUX.
          MODIFY ZFIT0096 FROM WA_0096_AUX.
        ENDIF.

      ELSE.

        IF NOT <SAIDA>-DOC_LCTO IS INITIAL.
          CLEAR CHECK.
          PERFORM ESTORNA_DOC_LCTO USING <SAIDA>-DOC_LCTO CHANGING CHECK.

          IF NOT CHECK IS INITIAL.

            MOVE: ABAP_FALSE TO <SAIDA>-LOTE,
                  ABAP_FALSE TO <SAIDA>-DOC_LCTO,
                  'S'        TO <SAIDA>-STATUS,
                  '@08@'     TO <SAIDA>-ICON.

            CLEAR WA_0096_AUX.
            MOVE-CORRESPONDING <SAIDA> TO WA_0096_AUX.
            MODIFY ZFIT0096 FROM WA_0096_AUX.

            CHECK NOT <SAIDA>-TRADE_ID IS INITIAL.

            DELETE FROM ZFIT0096 WHERE TRADE_ID EQ <SAIDA>-TRADE_ID.
            COMMIT WORK.

          ENDIF.
        ELSE.

          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              TEXT_QUESTION         = |Deseja Reiniciar o TRADE ID { <SAIDA>-TRADE_ID }?|
              TEXT_BUTTON_1         = 'Sim'
              TEXT_BUTTON_2         = 'Não'
              DISPLAY_CANCEL_BUTTON = ' '
            IMPORTING
              ANSWER                = P_RESP.

          CHECK P_RESP EQ 1.
          CHECK NOT <SAIDA>-TRADE_ID IS INITIAL.

          DELETE FROM ZFIT0096 WHERE TRADE_ID EQ <SAIDA>-TRADE_ID.
          COMMIT WORK.

        ENDIF.
      ENDIF.

    ELSE.
      MESSAGE S836(SD) WITH TEXT-007.
    ENDIF.

    OBG_CONTROL->BLOCK_CAMPOS( ).
    OBG_CONTROL->REFRESH_DADOS( ).
    CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = WA_STABLE.
  ENDMETHOD.                    "ESTORNO_DOC_CONTABIL

  METHOD BLOCK_CAMPOS.

    DATA: AT_TABIX TYPE SY-TABIX.
    UNASSIGN <SAIDA>.

    LOOP AT IT_SAIDA ASSIGNING <SAIDA>.
      AT_TABIX = SY-TABIX.
      FREE: GT_ESTILO, <SAIDA>-ESTILO.

      IF  <SAIDA>-DOC_LCTO IS NOT INITIAL.
        WL_ESTILO-STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
      ELSE.
        WL_ESTILO-STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
      ENDIF.

      WL_ESTILO-FIELDNAME = 'DT_LIQUIDACAO'.
      INSERT  WL_ESTILO INTO TABLE GT_ESTILO.

      WL_ESTILO-FIELDNAME = 'DT_LANCAMENTO'.
      INSERT  WL_ESTILO INTO TABLE GT_ESTILO.

      WL_ESTILO-FIELDNAME = 'AJ_BRUTO_BRL'.
      INSERT  WL_ESTILO INTO TABLE GT_ESTILO.

      WL_ESTILO-FIELDNAME = 'IR_BRL'.
      INSERT  WL_ESTILO INTO TABLE GT_ESTILO.

      INSERT LINES OF GT_ESTILO INTO TABLE <SAIDA>-ESTILO.
      MODIFY IT_SAIDA FROM <SAIDA> INDEX AT_TABIX.

    ENDLOOP.

  ENDMETHOD.                    "BLOCK_CAMPOS

  METHOD REFRESH_DADOS.

    ME->CHECK_CAMPOS( ).
    ME->SELECIONA_DADOS( ).
    ME->AGRUPA_DADOS( ).
    ME->BLOCK_CAMPOS( ).

  ENDMETHOD.                    "REFRESH_DADOS

ENDCLASS.                    "ZCL_CONTROL_NDF IMPLEMENTATION


START-OF-SELECTION.
  CALL SCREEN 0100.

END-OF-SELECTION.

*&      Module  PBO  OUTPUT
MODULE PBO OUTPUT.

  SET PF-STATUS 'PF0100'.
  SET TITLEBAR 'TI0100'.

  CREATE OBJECT: OBG_CONTROL.

  OBG_CONTROL->MONTAR_ALV( ).
  OBG_CONTROL->MONTAR_LAY( ).
  OBG_CONTROL->CRIA_ALV( ).


ENDMODULE.                 " PBO  OUTPUT

*&      Module  PAI  INPUT
MODULE PAI INPUT.

  CASE SY-UCOMM.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
    WHEN 'EXE'.
      FREE: IT_0083, IT_SAIDA, IT_0096.

      SELECT *
        FROM T001
        INTO TABLE @DATA(_MOEDA)
            WHERE BUKRS IN @P_BUK.

      SORT _MOEDA BY WAERS.
      DELETE ADJACENT DUPLICATES FROM _MOEDA COMPARING WAERS.

      IF LINES( _MOEDA ) > 1.
        MESSAGE 'Somente podem ser selecionas varias empresas com a mesma Moeda' TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.


      IF P_BUK-LOW IS INITIAL OR P_DTV-LOW IS INITIAL.
        MESSAGE S836(SD) WITH TEXT-010.
        EXIT.
      ENDIF.

      MOEDA = COND #( WHEN P_BUK-LOW EQ '0100' THEN 'ARS' ELSE 'BRL' ).

      OBG_CONTROL->CHECK_CAMPOS( ).
      OBG_CONTROL->SELECIONA_DADOS( ).
      OBG_CONTROL->AGRUPA_DADOS( ).
      OBG_CONTROL->BLOCK_CAMPOS( ).
    WHEN 'SAVE'.
      OBG_CONTROL->SALVAR_DADOS( ).
    WHEN 'BT_ALV'.

      IF X_SCREEN EQ '0101'.
        X_SCREEN = '0103'.
      ELSE.
        X_SCREEN = '0101'.
      ENDIF.

  ENDCASE.
ENDMODULE.                 " PAI  INPUT

*&      Module  PBO_0103  OUTPUT
MODULE PBO_0103 OUTPUT.
  OBG_CONTROL->MONTAR_ALV( ).
  OBG_CONTROL->MONTAR_LAY( ).
  OBG_CONTROL->CRIA_ALV( ).
ENDMODULE.                 " PBO_0103  OUTPUT
*&---------------------------------------------------------------------*
*&      Form  ESTORNA_DOC_LCTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<SAIDA>_DOC_LCTO  text
*----------------------------------------------------------------------*
FORM ESTORNA_DOC_LCTO USING P_DOC_LCTO CHANGING P_CHECK.

  DATA WL_ZGLT035 TYPE ZGLT035.
  DATA WG_ZGLT034 TYPE ZGLT034.

  SELECT SINGLE *
    FROM ZGLT035
    INTO WL_ZGLT035
  WHERE DOC_LCTO EQ P_DOC_LCTO
  AND LOEKZ EQ ABAP_FALSE.

  SELECT SINGLE * FROM ZGLT034 INTO WG_ZGLT034 WHERE LOTE EQ WL_ZGLT035-LOTE.

  CASE WG_ZGLT034-STATUS_LOTE.
    WHEN 'L'.
      MESSAGE |Documento { WL_ZGLT035-DOC_LCTO } não pode ser Estornado com status Liberado!| TYPE 'S' DISPLAY LIKE 'E'.
      EXIT.
    WHEN 'A'.
      MESSAGE |Documento { WL_ZGLT035-DOC_LCTO } não pode ser Estornado com status Aprovado!| TYPE 'S' DISPLAY LIKE 'E'.
      EXIT.
  ENDCASE.

  FREE: IT_DTA.
  DEFINE SHDB.
    CLEAR IT_DTA.
    WA_DTA-PROGRAM   = &1.
    WA_DTA-DYNPRO    = &2.
    WA_DTA-DYNBEGIN  = &3.
    WA_DTA-FNAM      = &4.
    WA_DTA-FVAL      = &5.
    APPEND WA_DTA TO IT_DTA.
  END-OF-DEFINITION.

  SHDB:
  'ZGL015'   '0050' 'X'  ' '                   ' ',
  ' '        ' '    ' '  'BDC_CURSOR'          'WG_ZGLT034-LOTE',
  ' '        ' '    ' '  'BDC_OKCODE'          '=DISPLA',

  'ZGL015'   '0050' 'X'  ' '                   ' ',
  ' '        ' '    ' '  'BDC_CURSOR'          'WG_ZGLT035-DOC_LCTO',
  ' '        ' '    ' '  'BDC_OKCODE'          '=SEARCH',
  ' '        ' '    ' '  'WG_ZGLT035-DOC_LCTO' WL_ZGLT035-DOC_LCTO,

  'ZGL015'   '0050' 'X'  ' '                   ' ',
  ' '        ' '    ' '  'BDC_CURSOR'          'WG_ZGLT035-DOC_LCTO',
  ' '        ' '    ' '  'BDC_OKCODE'          '=DELDOC',
  ' '        ' '    ' '  'WG_ZGLT035-DOC_LCTO' WL_ZGLT035-DOC_LCTO,

  'SAPLSPO1' '0500' 'X'  ' '                   ' ',
  ' '        ' '    ' '  'BDC_OKCODE'          '=OPT1',
  ' '        ' '    ' '  'BDC_SUBSCR'          'SAPLSPO1',

  'ZGL015'   '0050' 'X'  ' '                   ' ',
  ' '        ' '    ' '  'BDC_CURSOR'          'WG_ZGLT035-DOC_LCTO',
  ' '        ' '    ' '  'BDC_OKCODE'          '=BACK',
  ' '        ' '    ' '  'WG_ZGLT035-DOC_LCTO' WL_ZGLT035-DOC_LCTO.

  OPT-DISMODE = 'E'.
  CALL TRANSACTION 'ZGL016' USING IT_DTA OPTIONS FROM OPT.

  P_CHECK = ABAP_TRUE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_BDC_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_4429   text
*      -->P_4430   text
*      -->P_4431   text
*      -->P_4432   text
*      -->P_4433   text
*----------------------------------------------------------------------*
FORM F_BDC_DATA  USING P_PROGRAM P_DYNPRO P_START P_FNAM P_FVAL.

  APPEND VALUE #(
                PROGRAM   = P_PROGRAM
                DYNPRO    = P_DYNPRO
                DYNBEGIN  = P_START
                FNAM      = P_FNAM
                FVAL      = P_FVAL
  ) TO TI_BDCDATA.

ENDFORM.                    " F_BDC_DATA
*&---------------------------------------------------------------------*
*&      Form  ZF_CALL_TRANSACTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_4503   text
*      <--P_P_ERRO  text
*----------------------------------------------------------------------*
FORM ZF_CALL_TRANSACTION USING P_TRANS CHANGING P_ERRO.

  CONSTANTS: C_MSGID LIKE IT_MSG-MSGID VALUE 'F5',
             C_MSGNR LIKE IT_MSG-MSGNR VALUE '312',
             C_MSGNE LIKE IT_MSG-MSGNR VALUE '539'.

  DATA: WL_CONT    TYPE SY-TABIX,
        WL_MODE(1).

  FREE IT_MSG .

  WL_MODE = 'E'.

  CALL TRANSACTION P_TRANS USING TI_BDCDATA
                           MODE WL_MODE
                           MESSAGES INTO IT_MSG.

  CLEAR: WL_CONT.

  IF LINE_EXISTS( IT_MSG[ MSGTYP = 'A' ] ).
    P_ERRO = ABAP_TRUE.
  ELSE.
    IF LINE_EXISTS( IT_MSG[ MSGTYP = 'E' ] ).
      P_ERRO = ABAP_TRUE.
    ENDIF.
  ENDIF.

  CLEAR WG_DOCUMENTO.

  IF LINE_EXISTS( IT_MSG[ MSGID = C_MSGID
                          MSGNR = C_MSGNR
                         MSGTYP = 'S' ] ).

    WG_DOCUMENTO = IT_MSG[ MSGID = C_MSGID
                           MSGNR = C_MSGNR
                          MSGTYP = 'S' ]-MSGV1.
  ENDIF.

  IF  WG_DOCUMENTO IS INITIAL.
    P_ERRO = ABAP_TRUE.
  ELSE.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = WG_DOCUMENTO
      IMPORTING
        OUTPUT = WG_DOCUMENTO.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CALCULO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_<TX_SAIDA>  text
*----------------------------------------------------------------------*
FORM CALCULO  CHANGING P_SAIDA TYPE TY_SAIDA.

  CASE P_SAIDA-SIDE.
    WHEN 'S'.
      P_SAIDA-AJ_BRUTO_BRL   =  P_SAIDA-AMOUNT_DEALT * ( P_SAIDA-EXCH_RAT_PERIOD1 - P_SAIDA-TX_OB08 ).
      P_SAIDA-AJ_BRUTO_BRL_F =  P_SAIDA-AJ_BRUTO_BRL.
    WHEN 'B'.
      P_SAIDA-AJ_BRUTO_BRL   =  P_SAIDA-AMOUNT_DEALT * ( P_SAIDA-TX_OB08 - P_SAIDA-EXCH_RAT_PERIOD1 ).
      P_SAIDA-AJ_BRUTO_BRL_F =  P_SAIDA-AJ_BRUTO_BRL.
  ENDCASE.

  IF P_SAIDA-AJ_BRUTO_BRL > 0.

    IF P_SAIDA-BUKRS NE '0100'.
      P_SAIDA-IR_BRL         = P_SAIDA-AJ_BRUTO_BRL    * PORC_5.
      P_SAIDA-IR_BRL_F       = P_SAIDA-IR_BRL.
    ELSE.
      P_SAIDA-IR_BRL         = 0.
      P_SAIDA-IR_BRL_F       = 0.
    ENDIF.

    READ TABLE IT_ZFIT0095 INTO WA_ZFIT0095 WITH KEY NATUREZA = P_SAIDA-NOTE_TEXT_1
                                                     BUKRS    = P_SAIDA-BUKRS
                                                     SINAL    = '+'.
    MOVE WA_ZFIT0095-HKONT   TO P_SAIDA-CONTA_IR.

  ELSE.
    P_SAIDA-IR_BRL    = 0.
    P_SAIDA-IR_BRL_F  = 0.
    P_SAIDA-SINAL_AUX = '-'.
    P_SAIDA-CONTA_AUX = ''.
    READ TABLE IT_ZFIT0095 INTO WA_ZFIT0095 WITH KEY NATUREZA = P_SAIDA-NOTE_TEXT_1
                                                     BUKRS    = P_SAIDA-BUKRS
                                                     SINAL    = '-'.
  ENDIF.

  MOVE: WA_ZFIT0095-TP_LCTO TO P_SAIDA-TP_LCTO,
        WA_ZFIT0095-SINAL   TO P_SAIDA-SINAL.

  CLEAR: WA_ZFIT0094.
  READ TABLE IT_ZFIT0094 INTO WA_ZFIT0094 WITH KEY BANCO_BLOOM = P_SAIDA-CONT_PART_DEAL_C
                                                   BUKRS       = P_SAIDA-BUKRS.

  IF NOT WA_ZFIT0094-LIFNR IS INITIAL AND NOT WA_ZFIT0094-KUNNR IS INITIAL.

    P_SAIDA-CONTA_AUX   = 'I'.
    CLEAR: WA_LFA1.

    CASE P_SAIDA-SINAL.
      WHEN '+'." Cliente
        READ TABLE IT_KNA1 INTO WA_KNA1 WITH KEY KUNNR = WA_ZFIT0094-KUNNR.
        MOVE: WA_ZFIT0094-KUNNR TO P_SAIDA-HKONT,
              WA_KNA1-NAME1     TO P_SAIDA-TXT50.
      WHEN '-'." Fornecedor
        READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_ZFIT0094-LIFNR.
        MOVE: WA_ZFIT0094-LIFNR        TO P_SAIDA-HKONT,
              WA_LFA1-NAME1            TO P_SAIDA-TXT50,
              WA_ZFIT0094-BVTYP        TO P_SAIDA-BVTYP.
    ENDCASE.

  ELSEIF NOT WA_ZFIT0094-HKONT IS INITIAL.
    P_SAIDA-CONTA_AUX   = 'E'.
    CLEAR: WA_SKAT.
    READ TABLE IT_SKAT INTO WA_SKAT WITH KEY SAKNR = WA_ZFIT0094-HKONT.
    MOVE: WA_ZFIT0094-HKONT        TO P_SAIDA-HKONT,
          WA_SKAT-TXT50            TO P_SAIDA-TXT50.
  ENDIF.

  MOVE: WA_ZFIT0094-HKONT        TO P_SAIDA-CONTA.

  P_SAIDA-AJ_LIQUIDO_BRL = P_SAIDA-AJ_BRUTO_BRL - P_SAIDA-IR_BRL.

  TRY .
      P_SAIDA-AJ_BRUTO_USD = P_SAIDA-AJ_BRUTO_BRL / P_SAIDA-TX_OB08.
    CATCH  CX_SY_ZERODIVIDE.
      P_SAIDA-AJ_BRUTO_USD = 0.
  ENDTRY.

  TRY .
      P_SAIDA-IR_USD = P_SAIDA-IR_BRL / P_SAIDA-TX_OB08.
    CATCH  CX_SY_ZERODIVIDE.
      P_SAIDA-IR_USD = 0.
  ENDTRY.

  P_SAIDA-AJ_LIQUIDO_USD = P_SAIDA-AJ_BRUTO_USD - P_SAIDA-IR_USD.

  TRY .
      P_SAIDA-HEDGE = P_SAIDA-COUNTER_AMOUNT / P_SAIDA-TX_OB08.
    CATCH  CX_SY_ZERODIVIDE.
      P_SAIDA-HEDGE = 0.
  ENDTRY.


ENDFORM.
