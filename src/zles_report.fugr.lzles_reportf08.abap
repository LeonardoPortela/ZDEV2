*----------------------------------------------------------------------*
***INCLUDE LZLES_REPORTF08.
*----------------------------------------------------------------------*

FORM SELECIONAR_DADOS_FRETE_PROPRIO USING P_OPCAO.

  DATA: GT_VFKK  TYPE TABLE OF VFKK  WITH HEADER LINE,
        GT_VFKP  TYPE TABLE OF VFKP  WITH HEADER LINE,
        GT_VTTK  TYPE TABLE OF VTTK  WITH HEADER LINE,
        GT_VTTP  TYPE TABLE OF VTTP  WITH HEADER LINE,
        GT_LIPS  TYPE TABLE OF LIPS  WITH HEADER LINE,
        GT_MAKT  TYPE TABLE OF MAKT  WITH HEADER LINE,
        GT_T023T TYPE TABLE OF T023T WITH HEADER LINE,
        GT_LFA1  TYPE TABLE OF LFA1  WITH HEADER LINE.

  DATA: OBJ_ZCL_UTIL_SD TYPE REF TO ZCL_UTIL_SD.

  DATA: VL_TX_CAMBIO          TYPE UKURS_CURR,
        VL_GDATU              TYPE GDATU_INV,
        V_VALIDA              TYPE C,
        V_TIPO_VEICULO        TYPE ZDE_TP_PROP_VEICULO,
        V_TIPO_REMETENTE      TYPE ZDE_TP_REME_MERCADORIA,
        V_EMITE_CONHECIMENTO  TYPE CHAR01.

  CLEAR: GT_VFKK[], GT_VFKP[], GT_VTTK[], GT_LFA1[], GT_VTTP[], GT_LIPS[], GT_T023T[], GT_MAKT[].

  CREATE OBJECT OBJ_ZCL_UTIL_SD.

  CHECK P_OPCAO EQ 'R_FPROP'.

  SELECT *
    FROM VFKP INTO CORRESPONDING FIELDS OF TABLE GT_VFKP
   WHERE BUKRS IN IT_BUKRS
     AND BUDAT IN IT_AUGDT
     AND WAERS EQ 'BRL'
     AND NETWR GT 0.

  DELETE GT_VFKP WHERE REBEL IS INITIAL.

  CHECK GT_VFKP[] IS NOT INITIAL.

  SELECT *
    FROM VFKK INTO TABLE GT_VFKK
     FOR ALL ENTRIES IN GT_VFKP
   WHERE FKNUM EQ GT_VFKP-FKNUM.

  SELECT *
    FROM VTTK INTO TABLE GT_VTTK
     FOR ALL ENTRIES IN GT_VFKP
   WHERE TKNUM EQ GT_VFKP-REBEL.

  IF GT_VTTK[] IS NOT INITIAL.

    SELECT *
      FROM VTTP INTO TABLE GT_VTTP
       FOR ALL ENTRIES IN GT_VTTK
     WHERE TKNUM EQ GT_VTTK-TKNUM.

    IF GT_VTTP[] IS NOT INITIAL.

      SELECT *
        FROM LIPS INTO TABLE GT_LIPS
         FOR ALL ENTRIES IN GT_VTTP
       WHERE VBELN EQ GT_VTTP-VBELN.

      IF GT_LIPS[] IS NOT INITIAL.
        SELECT *
          FROM MAKT INTO TABLE GT_MAKT
           FOR ALL ENTRIES IN GT_LIPS
         WHERE MATNR EQ GT_LIPS-MATNR
           AND SPRAS EQ SY-LANGU.

        SELECT *
          FROM T023T INTO TABLE GT_T023T
           FOR ALL ENTRIES IN GT_LIPS
         WHERE MATKL EQ GT_LIPS-MATKL
           AND SPRAS EQ SY-LANGU.
      ENDIF.
    ENDIF.
  ENDIF.

  LOOP AT GT_VTTK.

    CLEAR: GW_SAIDA, V_VALIDA, V_TIPO_VEICULO, V_EMITE_CONHECIMENTO, V_TIPO_REMETENTE.

    READ TABLE GT_VFKP WITH KEY REBEL = GT_VTTK-TKNUM.
    CHECK SY-SUBRC EQ 0.

    READ TABLE GT_VFKK WITH KEY FKNUM = GT_VFKP-FKNUM.
    CHECK SY-SUBRC EQ 0.

    TRY.
      ZCL_FATURAMENTO=>ZIF_FATURAMENTO~GET_INSTANCE( )->GET_PROCESSO_EMISSAO_DOCS(
        EXPORTING
          I_TKNUM                = GT_VTTK-TKNUM
        IMPORTING
          E_TIPO_VEICULO         = V_TIPO_VEICULO
          E_TIPO_REMETENTE       = V_TIPO_REMETENTE
          E_CONHECIMENTO         = V_EMITE_CONHECIMENTO ).

    CATCH ZCX_FATURAMENTO.
      CONTINUE.
    CATCH ZCX_ERROR.
      CONTINUE.
    ENDTRY.

    IF NOT ( ( V_TIPO_VEICULO   EQ 'P' ) AND  "Veiculo Proprio
             ( V_TIPO_REMETENTE NE 'I' ) ).   "Não é Intercompany
      CONTINUE.
    ENDIF.

    READ TABLE GT_VTTP WITH KEY TKNUM = GT_VTTK-TKNUM.
    IF SY-SUBRC EQ 0.
      READ TABLE GT_LIPS WITH KEY VBELN = GT_VTTP-VBELN.
      IF SY-SUBRC EQ 0.
        READ TABLE GT_MAKT WITH KEY MATNR = GT_LIPS-MATNR.
        IF SY-SUBRC EQ 0.
          GW_SAIDA-MATNR = GT_MAKT-MATNR.
          GW_SAIDA-MAKTX = GT_MAKT-MAKTX.
        ENDIF.

        READ TABLE GT_T023T WITH KEY MATKL = GT_LIPS-MATKL.
        IF SY-SUBRC EQ 0.
          GW_SAIDA-MATKL = GT_T023T-MATKL.
          GW_SAIDA-WGBEZ = GT_T023T-WGBEZ.
        ENDIF.

      ENDIF.
    ENDIF.

    GW_SAIDA-BUKRS = GT_VFKP-BUKRS.
    GW_SAIDA-GSBER = GT_VFKP-WERKS.

    CASE V_TIPO_REMETENTE.
      WHEN 'P'.
        GW_SAIDA-BKTXT = 'Rem.Próprio'.
      WHEN 'T'.
        GW_SAIDA-BKTXT = 'Rem.Terceiro'.
    ENDCASE.

    GW_SAIDA-TKNUM = GT_VTTK-TKNUM.
    GW_SAIDA-FKNUM = GT_VFKP-FKNUM.
    GW_SAIDA-BUDAT = GT_VFKP-BUDAT.
    GW_SAIDA-AUGDT = GT_VFKP-BUDAT.
    GW_SAIDA-GJAHR = GT_VFKP-BUDAT(4).
    GW_SAIDA-ZFBDT = GT_VFKP-BUDAT.

    LOOP AT GT_VFKP WHERE REBEL EQ GT_VTTK-TKNUM.
      ADD GT_VFKP-NETWR TO GW_SAIDA-DMBTR.
    ENDLOOP.

    "Busca Taxa Data Compensação
    CLEAR: VL_TX_CAMBIO.
    MOVE GW_SAIDA-AUGDT TO VL_GDATU.

    OBJ_ZCL_UTIL_SD->SET_KURST('B').
    OBJ_ZCL_UTIL_SD->SET_WAERK('USD').
    OBJ_ZCL_UTIL_SD->SET_TCURR('BRL').
    OBJ_ZCL_UTIL_SD->SET_DATA( VL_GDATU ).

    VL_TX_CAMBIO = ABS( OBJ_ZCL_UTIL_SD->TAXA_CAMBIO( ) ).

    IF VL_TX_CAMBIO > 0.
      GW_SAIDA-DMBE2   = GW_SAIDA-DMBTR / VL_TX_CAMBIO.
      GW_SAIDA-TX_CAMB = VL_TX_CAMBIO.
    ENDIF.

*    READ TABLE GT_LFA1 WITH KEY LIFNR = GW_BSAK-LIFNR.
*    IF SY-SUBRC = 0.
*      GW_SAIDA-LIFNR = GT_LFA1-LIFNR.
*      GW_SAIDA-NAME1 = GT_LFA1-NAME1.
*    ENDIF.

    GW_SAIDA-TIPO = 'PR'.

    PERFORM F_VALIDA_LCTO USING GW_SAIDA P_OPCAO
                       CHANGING V_VALIDA.

    IF V_VALIDA IS INITIAL.
      CONTINUE.
    ENDIF.

    APPEND GW_SAIDA TO GT_SAIDA.

  ENDLOOP.

ENDFORM.
