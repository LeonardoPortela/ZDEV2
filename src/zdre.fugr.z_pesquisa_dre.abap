FUNCTION Z_PESQUISA_DRE.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(I_BUKRS) TYPE  BUKRS
*"     REFERENCE(I_GJAHR) TYPE  GJAHR
*"     REFERENCE(I_MONATI) TYPE  MONAT
*"     REFERENCE(I_MONATF) TYPE  MONAT
*"     REFERENCE(I_VERSN) TYPE  VERSN_011
*"     REFERENCE(I_WAERS) TYPE  WAERS
*"     REFERENCE(I_PESO) TYPE  CHAR1 OPTIONAL
*"     REFERENCE(I_ANAH) TYPE  CHAR1 OPTIONAL
*"     REFERENCE(I_ANAV) TYPE  CHAR1 OPTIONAL
*"     REFERENCE(I_MIL) TYPE  CHAR1 OPTIONAL
*"     REFERENCE(I_CON) TYPE  CHAR1 OPTIONAL
*"     REFERENCE(I_BUKRS2) TYPE  BUKRS OPTIONAL
*"     REFERENCE(I_VERSN2) TYPE  VERSN_011 OPTIONAL
*"  TABLES
*"      T_ZGL030_EST STRUCTURE  ZGL030_EST_D
*"----------------------------------------------------------------------


  DATA: V_LOOPI    TYPE I,
        V_LOOPF    TYPE I,
        V_MESAN    TYPE I,
        V_REAC(10),
        V_QTDC(10),
        V_VERC(10),
        V_HORC(10),
        V_MES(02),
        LC_KOKRS   TYPE KOKRS.

  FIELD-SYMBOLS: <FS_REA> TYPE ANY,
                 <FS_R03> TYPE ANY,
                 <FS_ANT> TYPE ANY,
                 <FS_QTD> TYPE ANY,
                 <FS_VER> TYPE ANY,
                 <FS_HOR> TYPE ANY.


  DATA: WA_ZGLT057            TYPE ZGLT057,
        WA_MONAT              TYPE ZGL025_DRE_ACM-MONAT,
        WA_ZGL015_DRE_EST08   TYPE ZGL015_DRE_EST08,
        WA_ZGL015_DRE_EST08_2 TYPE ZGL015_DRE_EST08.

  REFRESH: P_MONAT, P_BUKRS,P_VERSN,P_VBUND.
  CLEAR: P_MONAT, P_BUKRS,P_VERSN,P_VBUND.

  P_MONAT-LOW    = I_MONATI.
  P_MONAT-HIGH   = I_MONATF.
  P_MONAT-SIGN   = 'I'.
  P_MONAT-OPTION = 'BT'.
  APPEND P_MONAT.

  P_VERSN-LOW    = I_VERSN.
  P_VERSN-SIGN   = 'I'.
  P_VERSN-OPTION = 'EQ'.
  APPEND P_VERSN.

  P_BUKRS-LOW    = I_BUKRS.
  P_BUKRS-SIGN   = 'I'.
  P_BUKRS-OPTION = 'EQ'.
  APPEND P_BUKRS.

  IF I_CON = 'X'.

    P_BUKRS-LOW    = I_BUKRS2.
    P_BUKRS-SIGN   = 'I'.
    P_BUKRS-OPTION = 'EQ'.
    APPEND P_BUKRS.

    SELECT SINGLE *
      FROM ZGLT057
      INTO WA_ZGLT057
     WHERE BUKRS_1  = I_BUKRS
       AND VERSN_1  = I_VERSN
       AND BUKRS_2  = I_BUKRS2
       AND STATUS  = ''.

    IF SY-SUBRC NE 0.
      RETURN.
    ENDIF.

    "alterado para usar o parametro da função ao invés da tabela
    WA_ZGLT057-VERSN_2 = I_VERSN2.

    P_VERSN-LOW    = WA_ZGLT057-VERSN_2.
    P_VERSN-SIGN   = 'I'.
    P_VERSN-OPTION = 'EQ'.
    APPEND P_VERSN.

    P_VBUND-LOW    = WA_ZGLT057-VBUND_1.
    P_VBUND-SIGN   = 'I'.
    P_VBUND-OPTION = 'EQ'.
    APPEND P_VBUND.

    P_VBUND-LOW    = WA_ZGLT057-VBUND_2.
    P_VBUND-SIGN   = 'I'.
    P_VBUND-OPTION = 'EQ'.
    APPEND P_VBUND.
  ENDIF.

  P_WAERS        = I_WAERS.

  " Calcula Ultimo dia do mês.
  DATA: DATA_INI TYPE SY-DATUM,
        VMES(2),
        VANO(4),
        NMES     TYPE I,
        NANO     TYPE I.

  NMES = I_MONATI.
  NANO = I_GJAHR.
  IF I_MONATI = '12'.
    NMES = '01'.
    NANO = NANO + 1.
  ELSE.
    ADD 1 TO NMES.
  ENDIF.
  VMES = NMES.
  VANO = NANO.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = VMES
    IMPORTING
      OUTPUT = VMES.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = VANO
    IMPORTING
      OUTPUT = VANO.

  CONCATENATE VANO VMES '01' INTO DATA_INI.

  SUBTRACT 1 FROM DATA_INI.

*-------------------------------------------------------------
  REFRESH: IT_ZGL030_EST[],
           IT_ZGL015_DRE_EST02[],
           IT_ZGL015_DRE_EST03[],
           IT_ZGL015_DRE_EST04[],
           IT_ZGL015_DRE_EST05[],
           IT_ZGL015_DRE_EST06[],
           IT_ZGL015_DRE_EST02_[],
           IT_ZGL015_DRE_EST03_[],
           IT_ZGL015_DRE_EST04_[],
           IT_ZGL015_DRE_EST04_C[],
           IT_ZGL015_DRE_EST05_[],
           IT_ZGL015_DRE_EST06_[],
           IT_ZGL015_DRE_EST07[],
           IT_ZGL021_DRE_DADOS2[],
           IT_ZGL022_DRE_DADOS2[],
           IT_ZGL023_DRE_DADOS2[],
           IT_ZGL024_DRE_DADOS2[],
           IT_ZGL029_DRE_DADOS2[],
           IT_ZGL025_DRE_ACM[],
           IT_ZGL026_DRE_ACM[],
           IT_ZGL027_DRE_ACM[],
           IT_ZGL028_DRE_ACM[],
           IT_ZGL030_DRE_ACM2[],
           IT_SKAT[],
           IT_CSKS[],
           IT_CSKS_AUX[],
           IT_CEPCT[],
           IT_T023T[],
           TG_T001,
           TG_T005.

  DATA: WL_TABIX  TYPE SY-TABIX,
        WL_TABIX2 TYPE SY-TABIX,
        WL_TABIX3 TYPE SY-TABIX.

  "Conta Razão
  SELECT * INTO TABLE IT_ZGL021_DRE_DADOS2
    FROM ZGL021_DRE_DADOS
   WHERE BUKRS IN P_BUKRS
     AND VERSN IN P_VERSN
     AND MONAT IN P_MONAT
     AND GJAHR EQ I_GJAHR.

  SORT IT_ZGL021_DRE_DADOS2 BY MONAT DESCENDING.
  READ TABLE IT_ZGL021_DRE_DADOS2 INDEX 1.
  MOVE IT_ZGL021_DRE_DADOS2-MONAT TO WA_MONAT.
  "
  "Conta Razão / Centro de Custo
  SELECT * INTO TABLE IT_ZGL022_DRE_DADOS2
    FROM ZGL022_DRE_DADOS
   WHERE BUKRS IN P_BUKRS
     AND VERSN IN P_VERSN
     AND MONAT IN P_MONAT
     AND GJAHR EQ I_GJAHR.

  "Conta Razão / Centro de Lucro
  SELECT * INTO TABLE IT_ZGL023_DRE_DADOS2
    FROM ZGL023_DRE_DADOS
   WHERE BUKRS IN P_BUKRS
     AND VERSN IN P_VERSN
     AND MONAT IN P_MONAT
     AND GJAHR EQ I_GJAHR.

  "Conta Razão / Grupo de Material
  SELECT * INTO TABLE IT_ZGL024_DRE_DADOS2
    FROM ZGL024_DRE_DADOS
   WHERE BUKRS IN P_BUKRS
     AND VERSN IN P_VERSN
     AND MONAT IN P_MONAT
     AND GJAHR EQ I_GJAHR.

  "Dados Mês para eliminação na empresa 1 e 2 consolidação
  IF I_CON = 'X'.
    " Dados processados sociedade parceira para DRE - MÊS
    SELECT * INTO TABLE IT_ZGL029_DRE_DADOS2
      FROM ZGL029_DRE_DADOS
      WHERE BUKRS EQ I_BUKRS
        AND VERSN EQ I_VERSN
        AND MONAT IN P_MONAT
        AND GJAHR EQ I_GJAHR
        AND VBUND EQ WA_ZGLT057-VBUND_1
        AND EXISTS ( SELECT * FROM ZGLT060
                      WHERE ZGLT060~BUKRS1  = I_BUKRS
                        AND ZGLT060~WAERS   = I_WAERS
                        AND ZGLT060~CTA_LAN = ZGL029_DRE_DADOS~SAKNR ).

    SELECT * APPENDING TABLE IT_ZGL029_DRE_DADOS2
      FROM ZGL029_DRE_DADOS
      WHERE BUKRS EQ I_BUKRS2
        AND VERSN EQ WA_ZGLT057-VERSN_2
        AND MONAT IN P_MONAT
        AND GJAHR EQ I_GJAHR
        AND VBUND EQ WA_ZGLT057-VBUND_2
        AND EXISTS ( SELECT * FROM ZGLT060
                      WHERE ZGLT060~BUKRS1  = I_BUKRS2
                        AND ZGLT060~WAERS   = I_WAERS
                        AND ZGLT060~CTA_LAN = ZGL029_DRE_DADOS~SAKNR ).

    REFRESH IT_ZGL030_DRE_ACM2.
    LOOP AT IT_ZGL029_DRE_DADOS2.
      MOVE-CORRESPONDING IT_ZGL029_DRE_DADOS2 TO IT_ZGL030_DRE_ACM2.
      IT_ZGL030_DRE_ACM2-MONAT = WA_MONAT.
      COLLECT IT_ZGL030_DRE_ACM2.
    ENDLOOP.
  ENDIF.

  SELECT SINGLE *
    FROM T001
    INTO TG_T001
     WHERE BUKRS EQ I_BUKRS.

  SELECT SINGLE *
    FROM T005
    INTO TG_T005
     WHERE LAND1 EQ TG_T001-LAND1.

  SELECT SINGLE *
       FROM TKA02
       INTO TG_TKA02
      WHERE BUKRS EQ I_BUKRS.

  SELECT SINGLE * INTO WA_ZGL015_DRE_EST08
    FROM ZGL015_DRE_EST08
   WHERE VERSN   EQ I_VERSN
     AND BUKRS_B EQ I_BUKRS.

  IF SY-SUBRC IS NOT INITIAL.
    WA_ZGL015_DRE_EST08-BUKRS = I_BUKRS.
    WA_ZGL015_DRE_EST08-VERSN = I_VERSN.
  ENDIF.

  SELECT SINGLE KOKRS INTO LC_KOKRS FROM TKA02 WHERE BUKRS EQ I_BUKRS.
  SELECT * INTO TABLE IT_ZGL015_DRE_EST02 FROM ZGL015_DRE_EST02 WHERE BUKRS EQ WA_ZGL015_DRE_EST08-BUKRS AND VERSN EQ WA_ZGL015_DRE_EST08-VERSN.
  SELECT * INTO TABLE IT_ZGL015_DRE_EST03 FROM ZGL015_DRE_EST03 WHERE BUKRS EQ WA_ZGL015_DRE_EST08-BUKRS AND VERSN EQ WA_ZGL015_DRE_EST08-VERSN.
  SELECT * INTO TABLE IT_ZGL015_DRE_EST04 FROM ZGL015_DRE_EST04 WHERE BUKRS EQ WA_ZGL015_DRE_EST08-BUKRS AND VERSN EQ WA_ZGL015_DRE_EST08-VERSN.
  SELECT * INTO TABLE IT_ZGL015_DRE_EST05 FROM ZGL015_DRE_EST05 WHERE VERSN EQ WA_ZGL015_DRE_EST08-VERSN AND KOKRS EQ LC_KOKRS.
  SELECT * INTO TABLE IT_ZGL015_DRE_EST06 FROM ZGL015_DRE_EST06 WHERE BUKRS EQ WA_ZGL015_DRE_EST08-BUKRS AND VERSN EQ WA_ZGL015_DRE_EST08-VERSN.

  IF I_CON = 'X'.

    SELECT SINGLE * INTO WA_ZGL015_DRE_EST08_2
      FROM ZGL015_DRE_EST08
     WHERE VERSN   EQ WA_ZGLT057-VERSN_2
       AND BUKRS_B EQ I_BUKRS2.

    IF SY-SUBRC IS NOT INITIAL.
      WA_ZGL015_DRE_EST08_2-BUKRS = I_BUKRS2.
      WA_ZGL015_DRE_EST08_2-VERSN = WA_ZGLT057-VERSN_2.
    ENDIF.

    SELECT SINGLE KOKRS INTO LC_KOKRS FROM TKA02 WHERE BUKRS EQ I_BUKRS2.
    SELECT * APPENDING TABLE IT_ZGL015_DRE_EST02 FROM ZGL015_DRE_EST02 WHERE BUKRS EQ WA_ZGL015_DRE_EST08_2-BUKRS AND VERSN EQ WA_ZGL015_DRE_EST08_2-VERSN.
    SELECT * APPENDING TABLE IT_ZGL015_DRE_EST03 FROM ZGL015_DRE_EST03 WHERE BUKRS EQ WA_ZGL015_DRE_EST08_2-BUKRS AND VERSN EQ WA_ZGL015_DRE_EST08_2-VERSN.
    SELECT * APPENDING TABLE IT_ZGL015_DRE_EST04 FROM ZGL015_DRE_EST04 WHERE BUKRS EQ WA_ZGL015_DRE_EST08_2-BUKRS AND VERSN EQ WA_ZGL015_DRE_EST08_2-VERSN.
    SELECT * APPENDING TABLE IT_ZGL015_DRE_EST05 FROM ZGL015_DRE_EST05 WHERE VERSN EQ WA_ZGL015_DRE_EST08_2-VERSN AND KOKRS EQ LC_KOKRS.
    SELECT * APPENDING TABLE IT_ZGL015_DRE_EST06 FROM ZGL015_DRE_EST06 WHERE BUKRS EQ WA_ZGL015_DRE_EST08_2-BUKRS AND VERSN EQ WA_ZGL015_DRE_EST08_2-VERSN.

    " Inserindo contas virtuais - Empresa 1
    SELECT ZGL029_DRE_DADOS~MANDT
           ZGL029_DRE_DADOS~BUKRS
           ZGL029_DRE_DADOS~VERSN
           ZGL029_DRE_DADOS~MONAT
           ZGL029_DRE_DADOS~GJAHR
           ZGL029_DRE_DADOS~SAKNR
           ZGL029_DRE_DADOS~KOSTL
           ZGL029_DRE_DADOS~PRCTR
           ZGL029_DRE_DADOS~MATKL
           ZGL029_DRE_DADOS~VBUND
           ZGL029_DRE_DADOS~QTD_TON
           ZGL029_DRE_DADOS~VLR_REA
           ZGL029_DRE_DADOS~VLR_DOLAR
           ZGL029_DRE_DADOS~VLR_GRUPO
           ZGLT060~CTA_VIRTUAL
           ZGLT060~KOSTL2
           ZGLT060~PRCTR2
           ZGLT060~MATKL2
           ZGLT060~NIVEL
      INTO TABLE IT_ZGL029_DRE_AUX
      FROM ZGL029_DRE_DADOS
      INNER JOIN ZGLT060
        ON  ZGLT060~BUKRS1  = ZGL029_DRE_DADOS~BUKRS
        AND ZGLT060~BUKRS2  = I_BUKRS2
        AND ZGLT060~WAERS   = I_WAERS
        AND ZGLT060~CTA_LAN = ZGL029_DRE_DADOS~SAKNR
        AND ZGLT060~CTA_VIRTUAL NE ''
        AND ZGLT060~KOSTL1  = ZGL029_DRE_DADOS~KOSTL
        AND ZGLT060~PRCTR1  = ZGL029_DRE_DADOS~PRCTR
        AND ZGLT060~MATKL1  = ZGL029_DRE_DADOS~MATKL
      WHERE ZGL029_DRE_DADOS~BUKRS EQ I_BUKRS
       AND  ZGL029_DRE_DADOS~VERSN EQ I_VERSN
       AND  ZGL029_DRE_DADOS~MONAT IN P_MONAT
       AND  ZGL029_DRE_DADOS~GJAHR EQ I_GJAHR
       AND  ZGL029_DRE_DADOS~VBUND EQ WA_ZGLT057-VBUND_1.

    " Inserindo contas virtuais - Empresa 2
    SELECT ZGL029_DRE_DADOS~MANDT
        ZGL029_DRE_DADOS~BUKRS
        ZGL029_DRE_DADOS~VERSN
        ZGL029_DRE_DADOS~MONAT
        ZGL029_DRE_DADOS~GJAHR
        ZGL029_DRE_DADOS~SAKNR
        ZGL029_DRE_DADOS~KOSTL
        ZGL029_DRE_DADOS~PRCTR
        ZGL029_DRE_DADOS~MATKL
        ZGL029_DRE_DADOS~VBUND
        ZGL029_DRE_DADOS~QTD_TON
        ZGL029_DRE_DADOS~VLR_REA
        ZGL029_DRE_DADOS~VLR_DOLAR
        ZGL029_DRE_DADOS~VLR_GRUPO
        ZGLT060~CTA_VIRTUAL
        ZGLT060~KOSTL2
        ZGLT060~PRCTR2
        ZGLT060~MATKL2
        ZGLT060~NIVEL
   APPENDING TABLE IT_ZGL029_DRE_AUX
   FROM ZGL029_DRE_DADOS
   INNER JOIN ZGLT060
     ON  ZGLT060~BUKRS1  = ZGL029_DRE_DADOS~BUKRS
     AND ZGLT060~BUKRS2  = I_BUKRS
     AND ZGLT060~WAERS   = I_WAERS
     AND ZGLT060~CTA_LAN = ZGL029_DRE_DADOS~SAKNR
     AND ZGLT060~CTA_VIRTUAL NE ''
     AND ZGLT060~KOSTL1  = ZGL029_DRE_DADOS~KOSTL
     AND ZGLT060~PRCTR1  = ZGL029_DRE_DADOS~PRCTR
     AND ZGLT060~MATKL1  = ZGL029_DRE_DADOS~MATKL
   WHERE BUKRS EQ I_BUKRS2
    AND  VERSN EQ WA_ZGLT057-VERSN_2
    AND  MONAT IN P_MONAT
    AND  GJAHR EQ I_GJAHR
    AND  VBUND EQ WA_ZGLT057-VBUND_2.

    IF IT_ZGL029_DRE_AUX[] IS NOT INITIAL.

      SELECT SINGLE * INTO @DATA(WA_TKA02) FROM TKA02 WHERE BUKRS EQ @I_BUKRS.

      "Sem Objeto de Custo
      SELECT A~BUKRS, A~VERSN, A~NIVEL, A~SAKNR
        INTO TABLE @DATA(IT_EST03)
        FROM ZGL015_DRE_EST03 AS A
       WHERE BUKRS EQ @I_BUKRS
         AND VERSN EQ @I_VERSN
         AND NOT EXISTS ( SELECT * FROM ZGL015_DRE_EST04 AS B WHERE B~BUKRS EQ A~BUKRS AND B~VERSN EQ A~VERSN AND B~KTOPL EQ A~KTOPL AND B~SAKNR EQ A~SAKNR )
         AND NOT EXISTS ( SELECT * FROM ZGL015_DRE_EST05 AS C WHERE C~BUKRS EQ A~BUKRS AND C~VERSN EQ A~VERSN AND C~KTOPL EQ A~KTOPL AND C~SAKNR EQ A~SAKNR AND C~KOKRS EQ @WA_TKA02-KOKRS )
         AND NOT EXISTS ( SELECT * FROM ZGL015_DRE_EST06 AS D WHERE D~BUKRS EQ A~BUKRS AND D~VERSN EQ A~VERSN AND D~KTOPL EQ A~KTOPL AND D~SAKNR EQ A~SAKNR ).

      "Centro de Custo
      SELECT E~BUKRS, E~VERSN, E~NIVEL, E~SAKNR, E~KTOPL, C~KOSTL
        INTO TABLE @DATA(IT_EST04)
        FROM ZGL015_DRE_EST04 AS E
       INNER JOIN CSKS AS C ON C~KOSAR EQ E~KOSAR AND C~BUKRS EQ E~BUKRS AND C~KOKRS = @WA_TKA02-KOKRS
       WHERE E~BUKRS EQ @I_BUKRS
         AND E~VERSN EQ @I_VERSN.

      "Centro de Lucro
      SELECT A~BUKRS, A~VERSN, A~NIVEL, A~SAKNR, A~KTOPL, A~PRCTR
        INTO TABLE @DATA(IT_EST05)
        FROM ZGL015_DRE_EST05 AS A
       WHERE A~BUKRS EQ @I_BUKRS
         AND A~VERSN EQ @I_VERSN
         AND A~KOKRS EQ @WA_TKA02-KOKRS.

      "Grupo de Mercadoria
      SELECT A~BUKRS, A~VERSN, A~NIVEL, A~SAKNR, A~KTOPL, A~MATKL
        INTO TABLE @DATA(IT_EST06)
        FROM ZGL015_DRE_EST06 AS A
       WHERE BUKRS EQ @I_BUKRS
         AND VERSN EQ @I_VERSN.

*      SELECT SINGLE * INTO @WA_TKA02 FROM TKA02 WHERE BUKRS EQ @I_BUKRS2.
*
*      "Sem Objeto de Custo
*      SELECT A~BUKRS, A~VERSN, A~NIVEL, A~SAKNR
*        APPENDING TABLE @IT_EST03
*        FROM ZGL015_DRE_EST03 AS A
*       WHERE BUKRS EQ @I_BUKRS2
*         AND VERSN EQ @I_VERSN2
*         AND NOT EXISTS ( SELECT * FROM ZGL015_DRE_EST04 AS B WHERE B~BUKRS EQ A~BUKRS AND B~VERSN EQ A~VERSN AND B~KTOPL EQ A~KTOPL AND B~SAKNR EQ A~SAKNR )
*         AND NOT EXISTS ( SELECT * FROM ZGL015_DRE_EST05 AS C WHERE C~BUKRS EQ A~BUKRS AND C~VERSN EQ A~VERSN AND C~KTOPL EQ A~KTOPL AND C~SAKNR EQ A~SAKNR AND C~KOKRS EQ @WA_TKA02-KOKRS )
*         AND NOT EXISTS ( SELECT * FROM ZGL015_DRE_EST06 AS D WHERE D~BUKRS EQ A~BUKRS AND D~VERSN EQ A~VERSN AND D~KTOPL EQ A~KTOPL AND D~SAKNR EQ A~SAKNR ).
*
*      "Centro de Custo
*      SELECT E~BUKRS, E~VERSN, E~NIVEL, E~SAKNR, E~KTOPL, C~KOSTL
*        APPENDING TABLE @DATA(IT_EST04)
*        FROM ZGL015_DRE_EST04 AS E
*       INNER JOIN CSKS AS C ON C~KOSAR EQ E~KOSAR AND C~BUKRS EQ E~BUKRS AND C~KOKRS = @WA_TKA02-KOKRS
*       WHERE E~BUKRS EQ @I_BUKRS2
*         AND E~VERSN EQ @I_VERSN2.
*
*      "Centro de Lucro
*      SELECT A~BUKRS, A~VERSN, A~NIVEL, A~SAKNR, A~KTOPL, A~PRCTR
*        APPENDING TABLE @DATA(IT_EST05)
*        FROM ZGL015_DRE_EST05 AS A
*       WHERE A~BUKRS EQ @I_BUKRS2
*         AND A~VERSN EQ @I_VERSN2
*         AND A~KOKRS EQ @WA_TKA02-KOKRS.
*
*      "Grupo de Mercadoria
*      SELECT A~BUKRS, A~VERSN, A~NIVEL, A~SAKNR, A~KTOPL, A~MATKL
*        APPENDING TABLE @DATA(IT_EST06)
*        FROM ZGL015_DRE_EST06 AS A
*       WHERE BUKRS EQ @I_BUKRS2
*         AND VERSN EQ @I_VERSN2.

      SORT IT_EST03 BY SAKNR.
      SORT IT_EST04 BY SAKNR KOSTL.
      SORT IT_EST05 BY SAKNR PRCTR.
      SORT IT_EST06 BY SAKNR MATKL.
    ENDIF.

    LOOP AT IT_ZGL029_DRE_AUX.
      "conta razão
      IF IT_ZGL029_DRE_AUX-KOSTL2 IS INITIAL AND
         IT_ZGL029_DRE_AUX-PRCTR2 IS INITIAL AND
         IT_ZGL029_DRE_AUX-MATKL2 IS INITIAL. " Insere na 21
        MOVE-CORRESPONDING IT_ZGL029_DRE_AUX TO IT_ZGL021_DRE_DADOS2.
        IT_ZGL021_DRE_DADOS2-SAKNR = IT_ZGL029_DRE_AUX-CTA_VIRTUAL.
        "Troca a empresa
        IF IT_ZGL029_DRE_AUX-BUKRS  = I_BUKRS.
          IT_ZGL021_DRE_DADOS2-BUKRS = I_BUKRS2.
          IT_ZGL021_DRE_DADOS2-VERSN = WA_ZGLT057-VERSN_2.
        ELSE.
          IT_ZGL021_DRE_DADOS2-BUKRS = I_BUKRS.
          IT_ZGL021_DRE_DADOS2-VERSN = I_VERSN.
        ENDIF.

        "Ajustar Conta
        READ TABLE IT_EST03 WITH KEY SAKNR = IT_ZGL021_DRE_DADOS2-SAKNR INTO DATA(WA_EST03) BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          IT_ZGL021_DRE_DADOS2-NIVEL = WA_EST03-NIVEL.
        ENDIF.

        APPEND IT_ZGL021_DRE_DADOS2.
        CONTINUE.
      ENDIF.
      "centro custo
      IF IT_ZGL029_DRE_AUX-KOSTL2 IS NOT INITIAL.
        MOVE-CORRESPONDING IT_ZGL029_DRE_AUX TO IT_ZGL022_DRE_DADOS2.
        IT_ZGL022_DRE_DADOS2-SAKNR = IT_ZGL029_DRE_AUX-CTA_VIRTUAL.
        IT_ZGL022_DRE_DADOS2-KOSTL = IT_ZGL029_DRE_AUX-KOSTL2.
        "Troca a empresa
        IF IT_ZGL029_DRE_AUX-BUKRS  = I_BUKRS.
          IT_ZGL022_DRE_DADOS2-BUKRS = I_BUKRS2.
          IT_ZGL022_DRE_DADOS2-VERSN = WA_ZGLT057-VERSN_2.
        ELSE.
          IT_ZGL022_DRE_DADOS2-BUKRS = I_BUKRS.
          IT_ZGL022_DRE_DADOS2-VERSN = I_VERSN.
        ENDIF.

        "Ajustar Conta
        READ TABLE IT_EST04
        WITH KEY SAKNR = IT_ZGL022_DRE_DADOS2-SAKNR
                 KOSTL = IT_ZGL022_DRE_DADOS2-KOSTL
        INTO DATA(WA_EST04) BINARY SEARCH.

        IF SY-SUBRC IS INITIAL.
          IT_ZGL022_DRE_DADOS2-NIVEL = WA_EST04-NIVEL.
        ENDIF.

        APPEND IT_ZGL022_DRE_DADOS2.
        CONTINUE.
      ENDIF.

      "centro lucro
      IF IT_ZGL029_DRE_AUX-PRCTR2 IS NOT INITIAL.
        MOVE-CORRESPONDING IT_ZGL029_DRE_AUX TO IT_ZGL023_DRE_DADOS2.
        IT_ZGL023_DRE_DADOS2-SAKNR = IT_ZGL029_DRE_AUX-CTA_VIRTUAL.
        IT_ZGL023_DRE_DADOS2-PRCTR = IT_ZGL029_DRE_AUX-PRCTR2.
        "Troca a empresa
        IF IT_ZGL029_DRE_AUX-BUKRS  = I_BUKRS.
          IT_ZGL023_DRE_DADOS2-BUKRS = I_BUKRS2.
          IT_ZGL023_DRE_DADOS2-VERSN = WA_ZGLT057-VERSN_2.
        ELSE.
          IT_ZGL023_DRE_DADOS2-BUKRS = I_BUKRS.
          IT_ZGL023_DRE_DADOS2-VERSN = I_VERSN.
        ENDIF.

        "Ajustar Conta
        READ TABLE IT_EST05
        WITH KEY SAKNR = IT_ZGL023_DRE_DADOS2-SAKNR
                 PRCTR = IT_ZGL023_DRE_DADOS2-PRCTR
        INTO DATA(WA_EST05) BINARY SEARCH.

        IF SY-SUBRC IS INITIAL.
          IT_ZGL023_DRE_DADOS2-NIVEL = WA_EST05-NIVEL.
        ENDIF.

        APPEND IT_ZGL023_DRE_DADOS2.
        CONTINUE.
      ENDIF.

      "grupo de mercadoria
      IF IT_ZGL029_DRE_AUX-MATKL2 IS NOT INITIAL.
        MOVE-CORRESPONDING IT_ZGL029_DRE_AUX TO IT_ZGL024_DRE_DADOS2.
        IT_ZGL024_DRE_DADOS2-SAKNR = IT_ZGL029_DRE_AUX-CTA_VIRTUAL.
        IT_ZGL024_DRE_DADOS2-MATKL = IT_ZGL029_DRE_AUX-MATKL2.
        "Troca a empresa
        IF IT_ZGL029_DRE_AUX-BUKRS  = I_BUKRS.
          IT_ZGL024_DRE_DADOS2-BUKRS = I_BUKRS2.
          IT_ZGL024_DRE_DADOS2-VERSN = WA_ZGLT057-VERSN_2.
        ELSE.
          IT_ZGL024_DRE_DADOS2-BUKRS = I_BUKRS.
          IT_ZGL024_DRE_DADOS2-VERSN = I_VERSN.
        ENDIF.

        "Ajustar Conta
        READ TABLE IT_EST06
        WITH KEY SAKNR = IT_ZGL024_DRE_DADOS2-SAKNR
                 MATKL = IT_ZGL024_DRE_DADOS2-MATKL
        INTO DATA(WA_EST06) BINARY SEARCH.

        IF SY-SUBRC IS INITIAL.
          IT_ZGL024_DRE_DADOS2-NIVEL = WA_EST06-NIVEL.
        ENDIF.

        APPEND IT_ZGL024_DRE_DADOS2.
        CONTINUE.
      ENDIF.

    ENDLOOP.
    " fim contas virtuais

    SORT: IT_ZGL015_DRE_EST02 BY NIVEL,
          IT_ZGL015_DRE_EST03 BY NIVEL KTOPL SAKNR,
          IT_ZGL015_DRE_EST04 BY NIVEL KTOPL SAKNR KOSAR,
          IT_ZGL015_DRE_EST05 BY NIVEL KTOPL SAKNR KOKRS PRCTR,
          IT_ZGL015_DRE_EST06 BY NIVEL KTOPL SAKNR MATKL.

    DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST02 COMPARING NIVEL.
    DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST03 COMPARING NIVEL KTOPL SAKNR.
    DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST04 COMPARING NIVEL KTOPL SAKNR KOSAR.
    DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST05 COMPARING NIVEL KTOPL SAKNR KOKRS PRCTR.
    DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST06 COMPARING NIVEL KTOPL SAKNR MATKL.


  ENDIF.
  SELECT * INTO TABLE IT_ZGL015_DRE_EST07 FROM ZGL015_DRE_EST07 WHERE BUKRS EQ WA_ZGL015_DRE_EST08-BUKRS AND VERSN EQ WA_ZGL015_DRE_EST08-VERSN.

  " Acumulados
  REFRESH IT_ZGL025_DRE_ACM.
  LOOP AT IT_ZGL021_DRE_DADOS2.
    MOVE-CORRESPONDING IT_ZGL021_DRE_DADOS2 TO IT_ZGL025_DRE_ACM.
    IT_ZGL025_DRE_ACM-MONAT = WA_MONAT.
    COLLECT IT_ZGL025_DRE_ACM.
  ENDLOOP.

  REFRESH IT_ZGL026_DRE_ACM.
  LOOP AT IT_ZGL022_DRE_DADOS2.
    MOVE-CORRESPONDING IT_ZGL022_DRE_DADOS2 TO IT_ZGL026_DRE_ACM.
    IT_ZGL026_DRE_ACM-MONAT = WA_MONAT.
    COLLECT IT_ZGL026_DRE_ACM.
  ENDLOOP.

  REFRESH IT_ZGL027_DRE_ACM.
  LOOP AT IT_ZGL023_DRE_DADOS2.
    MOVE-CORRESPONDING IT_ZGL023_DRE_DADOS2 TO IT_ZGL027_DRE_ACM.
    IT_ZGL027_DRE_ACM-MONAT = WA_MONAT.
    COLLECT IT_ZGL027_DRE_ACM.
  ENDLOOP.

  REFRESH IT_ZGL028_DRE_ACM.
  LOOP AT IT_ZGL024_DRE_DADOS2.
    MOVE-CORRESPONDING IT_ZGL024_DRE_DADOS2 TO IT_ZGL028_DRE_ACM.
    IT_ZGL028_DRE_ACM-MONAT = WA_MONAT.
    COLLECT IT_ZGL028_DRE_ACM.
  ENDLOOP.

  DELETE IT_ZGL025_DRE_ACM WHERE VLR_REA EQ 0 AND VLR_DOLAR EQ 0 AND VLR_GRUPO EQ 0 .
  DELETE IT_ZGL026_DRE_ACM WHERE VLR_REA EQ 0 AND VLR_DOLAR EQ 0 AND VLR_GRUPO EQ 0 .
  DELETE IT_ZGL027_DRE_ACM WHERE VLR_REA EQ 0 AND VLR_DOLAR EQ 0 AND VLR_GRUPO EQ 0 .
  DELETE IT_ZGL028_DRE_ACM WHERE VLR_REA EQ 0 AND VLR_DOLAR EQ 0 AND VLR_GRUPO EQ 0 AND QTD_TON EQ 0.
  "
  MOVE: IT_ZGL015_DRE_EST02[] TO IT_ZGL015_DRE_EST02_[],
        IT_ZGL015_DRE_EST03[] TO IT_ZGL015_DRE_EST03_[],
        IT_ZGL015_DRE_EST05[] TO IT_ZGL015_DRE_EST05_[],
        IT_ZGL015_DRE_EST06[] TO IT_ZGL015_DRE_EST06_[].

  READ TABLE TG_TKA02 INDEX 1.
  LOOP AT IT_ZGL015_DRE_EST04.
    MOVE-CORRESPONDING IT_ZGL015_DRE_EST04 TO IT_ZGL015_DRE_EST04_.
    IT_ZGL015_DRE_EST04_-KOKRS = TG_TKA02-KOKRS.
    APPEND IT_ZGL015_DRE_EST04_.
  ENDLOOP.

  SORT IT_ZGL015_DRE_EST02_ BY NIVEL.
  DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST02_ COMPARING NIVEL.
  SORT IT_ZGL015_DRE_EST03_ BY KTOPL SAKNR.
  DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST03_ COMPARING KTOPL SAKNR.
  SORT IT_ZGL015_DRE_EST04_ BY KOSAR.
  DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST04_ COMPARING KOSAR.
  SORT IT_ZGL015_DRE_EST05_ BY KOKRS PRCTR.
  DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST05_ COMPARING KOKRS PRCTR.
  SORT IT_ZGL015_DRE_EST06_ BY MATKL.
  DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST06_ COMPARING MATKL.

  "Conta Razão **************************************************************************
  IF NOT IT_ZGL015_DRE_EST03_[] IS INITIAL.
    IF SY-UCOMM NE OK_CEXCEL.
      SELECT * INTO TABLE IT_SKAT
        FROM SKAT
         FOR ALL ENTRIES IN IT_ZGL015_DRE_EST03_
       WHERE SPRAS EQ SY-LANGU
         AND KTOPL EQ IT_ZGL015_DRE_EST03_-KTOPL
         AND SAKNR EQ IT_ZGL015_DRE_EST03_-SAKNR.

    ELSE.
      IF I_BUKRS EQ '0100'.
        SELECT * INTO TABLE IT_SKAT
      FROM SKAT
       FOR ALL ENTRIES IN IT_ZGL015_DRE_EST03_
     WHERE SPRAS EQ 'ES'
       AND KTOPL EQ IT_ZGL015_DRE_EST03_-KTOPL
       AND SAKNR EQ IT_ZGL015_DRE_EST03_-SAKNR.

      ELSE.
        SELECT * INTO TABLE IT_SKAT
      FROM SKAT
       FOR ALL ENTRIES IN IT_ZGL015_DRE_EST03_
     WHERE SPRAS EQ 'PT'
       AND KTOPL EQ IT_ZGL015_DRE_EST03_-KTOPL
       AND SAKNR EQ IT_ZGL015_DRE_EST03_-SAKNR.
      ENDIF.

    ENDIF.
  ENDIF.
  "**************************************************************************************
  "**************************************************************************************

  "Conta Razão / Centro de Custo ********************************************************
  IF NOT IT_ZGL015_DRE_EST04_[] IS INITIAL.
    SELECT * INTO TABLE IT_CSKS
      FROM CSKS
       FOR ALL ENTRIES IN IT_ZGL015_DRE_EST04_
     WHERE KOKRS EQ IT_ZGL015_DRE_EST04_-KOKRS
     AND   KOSAR EQ IT_ZGL015_DRE_EST04_-KOSAR
     AND   DATAB   LE  SY-DATUM "DATA_INI
     AND   DATBI   GE  SY-DATUM. "DATA_INI.
  ENDIF.

  IF IT_ZGL022_DRE_DADOS2[] IS NOT INITIAL.
    SELECT * INTO TABLE IT_CSKS_AUX
     FROM CSKS
      FOR ALL ENTRIES IN IT_ZGL022_DRE_DADOS2
    WHERE  KOKRS EQ TG_TKA02-KOKRS
     AND   KOSTL EQ IT_ZGL022_DRE_DADOS2-KOSTL
     AND   DATAB   LE SY-DATUM
     AND   DATBI   GE SY-DATUM.
  ENDIF.

  IF IT_ZGL026_DRE_ACM[] IS NOT INITIAL.
    SELECT * APPENDING TABLE IT_CSKS_AUX
     FROM CSKS
      FOR ALL ENTRIES IN IT_ZGL026_DRE_ACM
    WHERE  KOKRS EQ TG_TKA02-KOKRS
     AND   KOSTL EQ IT_ZGL026_DRE_ACM-KOSTL
     AND   DATAB   LE  SY-DATUM "DATA_INI
     AND   DATBI   GE  SY-DATUM. "DATA_INI.

  ENDIF.
*    IF sy-subrc IS INITIAL.
  SORT: IT_CSKS_AUX BY KOSTL.
  SORT: IT_SKAT BY SAKNR.
  LOOP AT IT_ZGL022_DRE_DADOS2.
    READ TABLE IT_SKAT
      WITH KEY SAKNR = IT_ZGL022_DRE_DADOS2-SAKNR
               BINARY SEARCH.

    READ TABLE IT_CSKS_AUX
      WITH KEY KOSTL = IT_ZGL022_DRE_DADOS2-KOSTL
               BINARY SEARCH.

    IF SY-SUBRC IS INITIAL.
      READ TABLE IT_ZGL015_DRE_EST04 TRANSPORTING NO FIELDS
        WITH KEY BUKRS = WA_ZGL015_DRE_EST08-BUKRS
                 VERSN = WA_ZGL015_DRE_EST08-VERSN
                 SAKNR = IT_ZGL022_DRE_DADOS2-SAKNR
                 NIVEL = IT_ZGL022_DRE_DADOS2-NIVEL
                 KTOPL = IT_SKAT-KTOPL
                 KOSAR = IT_CSKS_AUX-KOSAR.

      IF SY-SUBRC IS NOT INITIAL.
        IT_ZGL015_DRE_EST04-BUKRS = WA_ZGL015_DRE_EST08-BUKRS_B.
        IT_ZGL015_DRE_EST04-VERSN = WA_ZGL015_DRE_EST08-VERSN.
        IT_ZGL015_DRE_EST04-NIVEL = IT_ZGL022_DRE_DADOS2-NIVEL.
        IT_ZGL015_DRE_EST04-KTOPL = IT_SKAT-KTOPL.
        IT_ZGL015_DRE_EST04-SAKNR = IT_ZGL022_DRE_DADOS2-SAKNR.
        IT_ZGL015_DRE_EST04-KOSAR = IT_CSKS_AUX-KOSAR.

        MOVE-CORRESPONDING: IT_ZGL015_DRE_EST04 TO IT_ZGL015_DRE_EST04_.
        APPEND IT_ZGL015_DRE_EST04.
        APPEND IT_ZGL015_DRE_EST04_.
        APPEND IT_CSKS_AUX TO IT_CSKS.

      ENDIF.

    ENDIF.
    CLEAR: IT_ZGL015_DRE_EST04_, IT_ZGL022_DRE_DADOS2, IT_CSKS_AUX.
  ENDLOOP.

  LOOP AT IT_ZGL026_DRE_ACM.
    READ TABLE IT_SKAT
      WITH KEY SAKNR = IT_ZGL026_DRE_ACM-SAKNR
               BINARY SEARCH.

    READ TABLE IT_CSKS_AUX
      WITH KEY KOSTL = IT_ZGL026_DRE_ACM-KOSTL
               BINARY SEARCH.

    IF SY-SUBRC IS INITIAL.
      READ TABLE IT_ZGL015_DRE_EST04 TRANSPORTING NO FIELDS
        WITH KEY BUKRS = WA_ZGL015_DRE_EST08-BUKRS
                 VERSN = WA_ZGL015_DRE_EST08-VERSN
                 SAKNR = IT_ZGL026_DRE_ACM-SAKNR
                 NIVEL = IT_ZGL026_DRE_ACM-NIVEL
                 KTOPL = IT_SKAT-KTOPL
                 KOSAR = IT_CSKS_AUX-KOSAR.

      IF SY-SUBRC IS NOT INITIAL.
        IT_ZGL015_DRE_EST04-BUKRS = WA_ZGL015_DRE_EST08-BUKRS_B.
        IT_ZGL015_DRE_EST04-VERSN = WA_ZGL015_DRE_EST08-VERSN.
        IT_ZGL015_DRE_EST04-NIVEL = IT_ZGL026_DRE_ACM-NIVEL.
        IT_ZGL015_DRE_EST04-KTOPL = IT_SKAT-KTOPL.
        IT_ZGL015_DRE_EST04-SAKNR = IT_ZGL026_DRE_ACM-SAKNR.
        IT_ZGL015_DRE_EST04-KOSAR = IT_CSKS_AUX-KOSAR.

        MOVE-CORRESPONDING: IT_ZGL015_DRE_EST04 TO IT_ZGL015_DRE_EST04_.
        APPEND IT_ZGL015_DRE_EST04.
        APPEND IT_ZGL015_DRE_EST04_.
        APPEND IT_CSKS_AUX TO IT_CSKS.

      ENDIF.

    ENDIF.
    CLEAR: IT_ZGL015_DRE_EST04_, IT_ZGL022_DRE_DADOS2, IT_CSKS_AUX.
  ENDLOOP.


  IF NOT IT_CSKS[] IS INITIAL.
    SELECT * INTO TABLE IT_CSKT
      FROM CSKT
       FOR ALL ENTRIES IN IT_CSKS
     WHERE KOKRS EQ IT_CSKS-KOKRS
       AND KOSTL EQ IT_CSKS-KOSTL.
  ENDIF.


  SORT: IT_ZGL022_DRE_DADOS2 BY NIVEL SAKNR  KOSTL MONAT,
        IT_ZGL026_DRE_ACM BY NIVEL SAKNR KOSTL MONAT.

  SORT IT_ZGL015_DRE_EST04 BY NIVEL KTOPL SAKNR KOSAR.
  DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST04 COMPARING NIVEL KTOPL SAKNR KOSAR.

  LOOP AT IT_ZGL015_DRE_EST04.
    CLEAR: IT_ZGL015_DRE_EST04_C.
    MOVE-CORRESPONDING IT_ZGL015_DRE_EST04 TO IT_ZGL015_DRE_EST04_C.
    LOOP AT IT_CSKS WHERE KOSAR EQ IT_ZGL015_DRE_EST04_C-KOSAR.
      READ TABLE IT_ZGL022_DRE_DADOS2 WITH KEY NIVEL = IT_ZGL015_DRE_EST04_C-NIVEL
                                               SAKNR = IT_ZGL015_DRE_EST04_C-SAKNR
                                               KOSTL = IT_CSKS-KOSTL
                                               BINARY SEARCH.
      IF NOT SY-SUBRC IS INITIAL.
        READ TABLE IT_ZGL026_DRE_ACM WITH KEY NIVEL = IT_ZGL015_DRE_EST04_C-NIVEL
                                              SAKNR = IT_ZGL015_DRE_EST04_C-SAKNR
                                              KOSTL = IT_CSKS-KOSTL
                                              BINARY SEARCH.
        IF NOT SY-SUBRC IS INITIAL.

          CONTINUE.
        ENDIF.
      ENDIF.
      IT_ZGL015_DRE_EST04_C-KOKRS = IT_CSKS-KOKRS.
      IT_ZGL015_DRE_EST04_C-KOSTL = IT_CSKS-KOSTL.
      READ TABLE IT_CSKT WITH KEY KOKRS = IT_CSKS-KOKRS KOSTL = IT_CSKS-KOSTL.
      IF SY-SUBRC IS INITIAL.
        IT_ZGL015_DRE_EST04_C-LTEXT = IT_CSKT-LTEXT.
      ENDIF.
      APPEND IT_ZGL015_DRE_EST04_C.
    ENDLOOP.
  ENDLOOP.
  "**************************************************************************************
  "**************************************************************************************

  "Conta Razão / Centro de Lucro ********************************************************
  IF NOT IT_ZGL015_DRE_EST05_[] IS INITIAL.
    SELECT * INTO TABLE IT_CEPCT
      FROM CEPCT
       FOR ALL ENTRIES IN IT_ZGL015_DRE_EST05_
     WHERE SPRAS EQ SY-LANGU
       AND PRCTR EQ IT_ZGL015_DRE_EST05_-PRCTR
       AND KOKRS EQ IT_ZGL015_DRE_EST05_-KOKRS.
  ENDIF.
  "**************************************************************************************
  "**************************************************************************************

  "Conta Razão / Grupo de Material ******************************************************
  IF NOT IT_ZGL015_DRE_EST06_[] IS INITIAL.
    SELECT * INTO TABLE IT_T023T
      FROM T023T
       FOR ALL ENTRIES IN IT_ZGL015_DRE_EST06_
     WHERE SPRAS EQ SY-LANGU
       AND MATKL EQ IT_ZGL015_DRE_EST06_-MATKL.
  ENDIF.
  "**************************************************************************************
  "**************************************************************************************
  SORT: IT_ZGL015_DRE_EST04_C BY KOKRS KOSTL BUKRS VERSN NIVEL KTOPL SAKNR KOSAR.
  DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST04_C COMPARING KOKRS KOSTL BUKRS VERSN NIVEL KTOPL SAKNR KOSAR.

  SORT: IT_ZGL015_DRE_EST04 BY NIVEL KTOPL SAKNR.
  SORT: IT_ZGL015_DRE_EST04_C BY NIVEL KTOPL SAKNR KOSAR.
  SORT: IT_ZGL022_DRE_DADOS2 BY NIVEL SAKNR KOSTL MONAT.
  "Níveis
  "Contas.***********************************************************************************************************************************************
  LOOP AT IT_ZGL015_DRE_EST02 WHERE NIVEL_TOTAL EQ SPACE.
    CLEAR: IT_ZGL015_DRE_EST03  ,
           IT_ZGL015_DRE_EST04_C,
           IT_ZGL015_DRE_EST05  ,
           IT_ZGL015_DRE_EST06  ,
           IT_ZGL015_DRE_EST07  .

    PERFORM INSERT_EST USING IT_ZGL015_DRE_EST02 IT_ZGL015_DRE_EST03 IT_ZGL015_DRE_EST04_C IT_ZGL015_DRE_EST05 IT_ZGL015_DRE_EST06 IT_ZGL015_DRE_EST07 SPACE.

    LOOP AT IT_ZGL015_DRE_EST03 WHERE NIVEL EQ IT_ZGL015_DRE_EST02-NIVEL.

      CLEAR: IT_ZGL015_DRE_EST04_C,
             IT_ZGL015_DRE_EST05  ,
             IT_ZGL015_DRE_EST06  .

      READ TABLE IT_ZGL021_DRE_DADOS2 WITH KEY NIVEL = IT_ZGL015_DRE_EST02-NIVEL
                                              SAKNR = IT_ZGL015_DRE_EST03-SAKNR.

      IF SY-SUBRC IS NOT INITIAL.
        READ TABLE IT_ZGL025_DRE_ACM WITH KEY NIVEL = IT_ZGL015_DRE_EST02-NIVEL
                                              SAKNR = IT_ZGL015_DRE_EST03-SAKNR.
      ENDIF.

      IF SY-SUBRC IS INITIAL.
        PERFORM INSERT_EST USING IT_ZGL015_DRE_EST02 IT_ZGL015_DRE_EST03 IT_ZGL015_DRE_EST04_C IT_ZGL015_DRE_EST05 IT_ZGL015_DRE_EST06 IT_ZGL015_DRE_EST07 C_X.
        CONTINUE.
      ELSE.
        PERFORM INSERT_EST USING IT_ZGL015_DRE_EST02 IT_ZGL015_DRE_EST03 IT_ZGL015_DRE_EST04_C IT_ZGL015_DRE_EST05 IT_ZGL015_DRE_EST06 IT_ZGL015_DRE_EST07 SPACE.
      ENDIF.

      READ TABLE IT_ZGL015_DRE_EST04
        WITH KEY NIVEL = IT_ZGL015_DRE_EST02-NIVEL
                 KTOPL = IT_ZGL015_DRE_EST03-KTOPL
                 SAKNR = IT_ZGL015_DRE_EST03-SAKNR
                 BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WL_TABIX = SY-TABIX.


        "Centro de custo
        LOOP AT IT_ZGL015_DRE_EST04 FROM WL_TABIX.
          IF IT_ZGL015_DRE_EST04-NIVEL NE IT_ZGL015_DRE_EST02-NIVEL
          OR IT_ZGL015_DRE_EST04-KTOPL NE IT_ZGL015_DRE_EST03-KTOPL
          OR IT_ZGL015_DRE_EST04-SAKNR NE IT_ZGL015_DRE_EST03-SAKNR.
            EXIT.
          ENDIF.

          READ TABLE IT_ZGL015_DRE_EST04_C
         WITH KEY NIVEL = IT_ZGL015_DRE_EST02-NIVEL
                  KTOPL = IT_ZGL015_DRE_EST03-KTOPL
                  SAKNR = IT_ZGL015_DRE_EST03-SAKNR
                  KOSAR = IT_ZGL015_DRE_EST04-KOSAR
                  BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            WL_TABIX2 = SY-TABIX.


            LOOP AT IT_ZGL015_DRE_EST04_C FROM WL_TABIX2.
              IF IT_ZGL015_DRE_EST04_C-NIVEL NE IT_ZGL015_DRE_EST02-NIVEL
              OR IT_ZGL015_DRE_EST04_C-KTOPL NE IT_ZGL015_DRE_EST03-KTOPL
              OR IT_ZGL015_DRE_EST04_C-SAKNR NE IT_ZGL015_DRE_EST03-SAKNR
              OR IT_ZGL015_DRE_EST04_C-KOSAR NE IT_ZGL015_DRE_EST04-KOSAR.
                EXIT.
              ENDIF.

              CLEAR: IT_ZGL015_DRE_EST05  ,
                     IT_ZGL015_DRE_EST06  .
              PERFORM INSERT_EST USING IT_ZGL015_DRE_EST02 IT_ZGL015_DRE_EST03 IT_ZGL015_DRE_EST04_C IT_ZGL015_DRE_EST05 IT_ZGL015_DRE_EST06 IT_ZGL015_DRE_EST07 SPACE.
            ENDLOOP.
          ENDIF.
        ENDLOOP.
      ENDIF.

      "Centro de Lucro
      LOOP AT IT_ZGL015_DRE_EST05 WHERE NIVEL EQ IT_ZGL015_DRE_EST02-NIVEL AND KTOPL EQ IT_ZGL015_DRE_EST03-KTOPL AND SAKNR EQ IT_ZGL015_DRE_EST03-SAKNR.

        CLEAR: IT_ZGL015_DRE_EST04_C,
               IT_ZGL015_DRE_EST06  .

        PERFORM INSERT_EST USING IT_ZGL015_DRE_EST02 IT_ZGL015_DRE_EST03 IT_ZGL015_DRE_EST04_C IT_ZGL015_DRE_EST05 IT_ZGL015_DRE_EST06 IT_ZGL015_DRE_EST07 SPACE.
      ENDLOOP.

      "Grupo de Material
      LOOP AT IT_ZGL015_DRE_EST06 WHERE NIVEL EQ IT_ZGL015_DRE_EST02-NIVEL AND KTOPL EQ IT_ZGL015_DRE_EST03-KTOPL AND SAKNR EQ IT_ZGL015_DRE_EST03-SAKNR.

        CLEAR: IT_ZGL015_DRE_EST04_C,
               IT_ZGL015_DRE_EST05  .
        PERFORM INSERT_EST USING IT_ZGL015_DRE_EST02 IT_ZGL015_DRE_EST03 IT_ZGL015_DRE_EST04_C IT_ZGL015_DRE_EST05 IT_ZGL015_DRE_EST06 IT_ZGL015_DRE_EST07 SPACE.
      ENDLOOP.
    ENDLOOP.
  ENDLOOP.

  "******************************************************************************************************************************************************
  "******************************************************************************************************************************************************

  "Contas Agrupadas *************************************************************************************************************************************
  CLEAR: IT_ZGL015_DRE_EST02,
         IT_ZGL015_DRE_EST03,
         IT_ZGL015_DRE_EST04_C,
         IT_ZGL015_DRE_EST05,
         IT_ZGL015_DRE_EST06.

  SORT: IT_ZGL030_EST BY NIVEL NITXT LEVELN SAKNR TXT50 KOSTL LTEXT_CC PRCTR LTEXT_CL MATKL WGBEZ60.
  DELETE ADJACENT DUPLICATES FROM IT_ZGL030_EST
   COMPARING NIVEL NITXT LEVELN SAKNR TXT50 KOSTL LTEXT_CC PRCTR LTEXT_CL MATKL WGBEZ60.

  SORT IT_ZGL015_DRE_EST02 BY NIVEL.

  LOOP AT IT_ZGL015_DRE_EST02 WHERE NIVEL_TOTAL NE SPACE.

    READ TABLE IT_ZGL015_DRE_EST07 WITH KEY NIVEL = IT_ZGL015_DRE_EST02-NIVEL(2).
*      LOOP AT IT_ZGL015_DRE_EST07
*        WHERE NIVEL = IT_ZGL015_DRE_EST02-NIVEL(2).


    IF ( SY-SUBRC EQ 0 ).
      PERFORM INSERT_EST USING
                         IT_ZGL015_DRE_EST02
                         IT_ZGL015_DRE_EST03
                         IT_ZGL015_DRE_EST04_C
                         IT_ZGL015_DRE_EST05
                         IT_ZGL015_DRE_EST06
                         IT_ZGL015_DRE_EST07
                         SPACE.
    ENDIF.
*      ENDLOOP.
  ENDLOOP.
  "******************************************************************************************************************************************************
  "******************************************************************************************************************************************************

  CLEAR: IT_ZGL030_EST_AUX[].
  MOVE IT_ZGL030_EST[] TO IT_ZGL030_EST_AUX[].
  LOOP AT IT_ZGL030_EST_AUX WHERE SAKNR NE SPACE.
    READ TABLE IT_ZGL030_EST WITH KEY NIVEL = IT_ZGL030_EST_AUX-NIVEL  SAKNR = IT_ZGL030_EST_AUX-SAKNR.
    IF SY-SUBRC IS INITIAL.
      VG_TABIX = SY-TABIX.
      CLEAR: VG_EXISTE.
      "ALRS
      LOOP AT IT_ZGL030_EST WHERE NIVEL = IT_ZGL030_EST_AUX-NIVEL
                              AND SAKNR = IT_ZGL030_EST_AUX-SAKNR.
        IF   ( NOT IT_ZGL030_EST-KOSTL IS INITIAL ) OR
             ( NOT IT_ZGL030_EST-PRCTR IS INITIAL ) OR
             ( NOT IT_ZGL030_EST-MATKL IS INITIAL ) OR
             ( IT_ZGL030_EST-VLR_REA01 EQ 0 ) OR
             ( IT_ZGL030_EST-QTD_TON01 EQ 0 ) OR
             ( IT_ZGL030_EST-VLR_REA02 EQ 0 ) OR
             ( IT_ZGL030_EST-QTD_TON02 EQ 0 ) OR
             ( IT_ZGL030_EST-VLR_REA03 EQ 0 ) OR
             ( IT_ZGL030_EST-QTD_TON03 EQ 0 ) OR
             ( IT_ZGL030_EST-VLR_REA04 EQ 0 ) OR
             ( IT_ZGL030_EST-QTD_TON04 EQ 0 ) OR
             ( IT_ZGL030_EST-VLR_REA05 EQ 0 ) OR
             ( IT_ZGL030_EST-QTD_TON05 EQ 0 ) OR
             ( IT_ZGL030_EST-VLR_REA06 EQ 0 ) OR
             ( IT_ZGL030_EST-QTD_TON06 EQ 0 ) OR
             ( IT_ZGL030_EST-VLR_REA07 EQ 0 ) OR
             ( IT_ZGL030_EST-QTD_TON07 EQ 0 ) OR
             ( IT_ZGL030_EST-VLR_REA08 EQ 0 ) OR
             ( IT_ZGL030_EST-QTD_TON08 EQ 0 ) OR
             ( IT_ZGL030_EST-VLR_REA09 EQ 0 ) OR
             ( IT_ZGL030_EST-QTD_TON09 EQ 0 ) OR
             ( IT_ZGL030_EST-VLR_REA10 EQ 0 ) OR
             ( IT_ZGL030_EST-QTD_TON10 EQ 0 ) OR
             ( IT_ZGL030_EST-VLR_REA11 EQ 0 ) OR
             ( IT_ZGL030_EST-QTD_TON11 EQ 0 ) OR
             ( IT_ZGL030_EST-VLR_REA12 EQ 0 ) OR
             ( IT_ZGL030_EST-QTD_TON12 EQ 0 ) OR
             ( IT_ZGL030_EST-VLR_ACM EQ 0 ) OR
             ( IT_ZGL030_EST-QTD_ACM EQ 0 ) .
          VG_EXISTE = C_X.
        ENDIF.
      ENDLOOP.
      IF VG_EXISTE IS INITIAL.
        DELETE IT_ZGL030_EST INDEX VG_TABIX.
      ENDIF.
    ENDIF.
  ENDLOOP.



  SORT IT_ZGL030_EST BY NIVEL SAKNR KOSTL PRCTR MATKL.
  IF I_MIL IS NOT INITIAL OR I_ANAH IS NOT INITIAL OR I_ANAV IS NOT INITIAL.
    MOVE IT_ZGL030_EST[] TO IT_ZGL030_EST_AUX[].
    CLEAR: WL_TABIX3, IT_ZGL030_EST_AUX.
    READ TABLE IT_ZGL015_DRE_EST02 WITH KEY NIVEL = '00'.
    IF SY-SUBRC = 0.
      DELETE IT_ZGL030_EST_AUX WHERE NIVEL NE '02'.
      READ TABLE IT_ZGL030_EST_AUX WITH KEY NIVEL = '02'.
      WL_TABIX3 = SY-TABIX.
    ELSE.
      DELETE IT_ZGL030_EST_AUX WHERE NIVEL NE '03'.
      READ TABLE IT_ZGL030_EST_AUX WITH KEY NIVEL = '03'.
      WL_TABIX3 = SY-TABIX.
    ENDIF.

    LOOP AT IT_ZGL030_EST.
      V_LOOPI = P_MONAT-LOW.
      V_LOOPF = P_MONAT-HIGH.
      IF V_LOOPF = 0.
        V_LOOPF = V_LOOPI.
      ENDIF.
      WHILE V_LOOPI LE V_LOOPF.
        V_MES = V_LOOPI.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = V_MES
          IMPORTING
            OUTPUT = V_MES.
        CONCATENATE 'VLR_REA' V_MES INTO V_REAC.
        CONCATENATE 'QTD_TON' V_MES INTO V_QTDC.
        CONCATENATE 'ANA_VER' V_MES INTO V_VERC.
        CONCATENATE 'ANA_HOR' V_MES INTO V_HORC.

        ASSIGN COMPONENT V_QTDC OF STRUCTURE IT_ZGL030_EST TO <FS_QTD>.
        ASSIGN COMPONENT V_REAC OF STRUCTURE IT_ZGL030_EST TO <FS_REA>.
        IF I_MIL IS NOT INITIAL.
          DIVIDE <FS_REA> BY 1000.
          DIVIDE <FS_QTD> BY 1000.
        ENDIF.
        IF I_ANAV IS NOT INITIAL.
          IF WL_TABIX3 GT 0.
            READ TABLE IT_ZGL030_EST_AUX INDEX WL_TABIX3. "WITH KEY NIVEL = '03'.
          ENDIF.
          ASSIGN COMPONENT V_VERC OF STRUCTURE IT_ZGL030_EST TO <FS_VER>.
          ASSIGN COMPONENT V_REAC OF STRUCTURE IT_ZGL030_EST_AUX TO <FS_R03>.
          IF I_MIL IS NOT INITIAL.
            DIVIDE <FS_R03> BY 1000.
          ENDIF.
          IF <FS_R03> NE 0.
            <FS_VER> = ( <FS_REA> / <FS_R03> ) * 100.
          ENDIF.
        ENDIF.
        IF I_ANAH IS NOT INITIAL.
          ASSIGN COMPONENT V_HORC OF STRUCTURE IT_ZGL030_EST TO <FS_HOR>.
          IF V_MES NE '01'.
            V_MES = V_LOOPI - 1.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                INPUT  = V_MES
              IMPORTING
                OUTPUT = V_MES.
            CONCATENATE 'VLR_REA' V_MES INTO V_REAC.
            ASSIGN COMPONENT V_REAC OF STRUCTURE IT_ZGL030_EST TO <FS_ANT>.

*            IF <FS_REA> NE 0.
*              <FS_HOR> = ( ( <FS_REA> - <FS_ANT> ) / <FS_REA> ) * 100.
*            ENDIF.

            IF <FS_ANT> NE 0.
              <FS_HOR> = ( ( <FS_REA> - <FS_ANT> ) / <FS_ANT> ) * 100.
            ENDIF.
          ENDIF.
        ENDIF.
        ADD 1 TO V_LOOPI.
      ENDWHILE.
      IF I_MIL IS NOT INITIAL.
        DIVIDE IT_ZGL030_EST-VLR_ACM  BY 1000.
        DIVIDE IT_ZGL030_EST-QTD_ACM  BY 1000.
      ENDIF.

      MODIFY IT_ZGL030_EST.

    ENDLOOP.

  ENDIF.


  LOOP AT IT_ZGL030_EST.
    MOVE-CORRESPONDING IT_ZGL030_EST TO W_ZGL030_EST.

    APPEND W_ZGL030_EST TO T_ZGL030_EST.
  ENDLOOP.



ENDFUNCTION.

*&---------------------------------------------------------------------*
*&      Form  INSERT_EST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM INSERT_EST USING P_ZGL015_DRE_EST02   TYPE ZGL015_DRE_EST02
                      P_ZGL015_DRE_EST03   TYPE ZGL015_DRE_EST03
                      P_ZGL015_DRE_EST04_C TYPE TP_CUSTO
                      P_ZGL015_DRE_EST05   TYPE ZGL015_DRE_EST05
                      P_ZGL015_DRE_EST06   TYPE ZGL015_DRE_EST06
                      P_ZGL015_DRE_EST07   TYPE ZGL015_DRE_EST07
                      P_TOTI_CR            TYPE C.

  DATA: SOMA_VLR_REA01 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR_REA02 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR_REA03 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR_REA04 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR_REA05 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR_REA06 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR_REA07 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR_REA08 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR_REA09 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR_REA10 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR_REA11 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR_REA12 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR_ACM   TYPE ZGL030_EST-VLR_ACM,

        SOMA_VLR_REA29 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR_USD29 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR_GRP29 TYPE ZGL030_EST-VLR_REA01,
        SOMA_VLR30_ACM TYPE ZGL030_EST-VLR_ACM,
        SOMA_TON_ACM   TYPE ZGL024_DRE_DADOS-QTD_TON,

        TEXT_SOMA      TYPE ZGL015_DRE_EST02-NITXT,
        WL_ZGL030_EST  LIKE LINE OF IT_ZGL030_EST,
        WL_TABIX       TYPE SY-TABIX,
        TOT_VLR        TYPE ZGL030_EST-VLR_REA01,
        TOT_QTD        TYPE ZGL030_EST-QTD_TON01.

  READ TABLE TG_T005 INDEX 1.

  CLEAR: IT_ZGL030_EST.
  IT_ZGL030_EST-NIVEL    = P_ZGL015_DRE_EST02-NIVEL.
  IT_ZGL030_EST-NITXT    = P_ZGL015_DRE_EST02-NITXT.

  IF NOT P_ZGL015_DRE_EST03 IS INITIAL.
    IT_ZGL030_EST-SAKNR    = P_ZGL015_DRE_EST03-SAKNR.
    READ TABLE IT_SKAT WITH KEY KTOPL = P_ZGL015_DRE_EST03-KTOPL SAKNR = P_ZGL015_DRE_EST03-SAKNR.
    IF SY-SUBRC IS INITIAL.
      IT_ZGL030_EST-TXT50    = IT_SKAT-TXT50.
    ENDIF.
    IF NOT P_TOTI_CR IS INITIAL.
      IT_ZGL030_EST-VLR_REA01  = 0.
      IT_ZGL030_EST-QTD_TON01  = 0.
      IT_ZGL030_EST-ANA_VER01  = 0.
      IT_ZGL030_EST-ANA_HOR01  = 0.
      IT_ZGL030_EST-VLR_REA02  = 0.
      IT_ZGL030_EST-QTD_TON02  = 0.
      IT_ZGL030_EST-ANA_VER02  = 0.
      IT_ZGL030_EST-ANA_HOR03  = 0.
      IT_ZGL030_EST-VLR_REA03  = 0.
      IT_ZGL030_EST-QTD_TON03  = 0.
      IT_ZGL030_EST-ANA_VER03  = 0.
      IT_ZGL030_EST-ANA_HOR03  = 0.
      IT_ZGL030_EST-VLR_REA04  = 0.
      IT_ZGL030_EST-QTD_TON04  = 0.
      IT_ZGL030_EST-ANA_VER04  = 0.
      IT_ZGL030_EST-ANA_HOR04  = 0.
      IT_ZGL030_EST-VLR_REA05  = 0.
      IT_ZGL030_EST-QTD_TON05  = 0.
      IT_ZGL030_EST-ANA_VER05  = 0.
      IT_ZGL030_EST-ANA_HOR05  = 0.
      IT_ZGL030_EST-VLR_REA06  = 0.
      IT_ZGL030_EST-QTD_TON06  = 0.
      IT_ZGL030_EST-ANA_VER06  = 0.
      IT_ZGL030_EST-ANA_HOR06  = 0.
      IT_ZGL030_EST-VLR_REA07  = 0.
      IT_ZGL030_EST-QTD_TON07  = 0.
      IT_ZGL030_EST-ANA_VER07  = 0.
      IT_ZGL030_EST-ANA_HOR07  = 0.
      IT_ZGL030_EST-VLR_REA08  = 0.
      IT_ZGL030_EST-QTD_TON08  = 0.
      IT_ZGL030_EST-ANA_VER08  = 0.
      IT_ZGL030_EST-ANA_HOR08  = 0.
      IT_ZGL030_EST-VLR_REA09  = 0.
      IT_ZGL030_EST-QTD_TON09  = 0.
      IT_ZGL030_EST-ANA_VER09  = 0.
      IT_ZGL030_EST-ANA_HOR09  = 0.
      IT_ZGL030_EST-VLR_REA10  = 0.
      IT_ZGL030_EST-QTD_TON10  = 0.
      IT_ZGL030_EST-ANA_VER10  = 0.
      IT_ZGL030_EST-ANA_HOR10  = 0.
      IT_ZGL030_EST-VLR_REA11  = 0.
      IT_ZGL030_EST-QTD_TON11  = 0.
      IT_ZGL030_EST-ANA_VER11  = 0.
      IT_ZGL030_EST-ANA_HOR11  = 0.
      IT_ZGL030_EST-VLR_REA12  = 0.
      IT_ZGL030_EST-QTD_TON12  = 0.
      IT_ZGL030_EST-ANA_VER12  = 0.
      IT_ZGL030_EST-ANA_HOR12  = 0.
      IT_ZGL030_EST-QTD_ACM  = 0.
      IT_ZGL030_EST-VLR_ACM  = 0.
      LOOP AT IT_ZGL021_DRE_DADOS2 WHERE NIVEL EQ P_ZGL015_DRE_EST03-NIVEL
                                    AND  SAKNR EQ P_ZGL015_DRE_EST03-SAKNR.
        "Dados sociedade parceira para eliminação
        CLEAR: SOMA_VLR_REA29,
               SOMA_VLR_USD29,
               SOMA_VLR_GRP29,
               SOMA_VLR30_ACM.

        LOOP AT IT_ZGL029_DRE_DADOS2 WHERE BUKRS = IT_ZGL021_DRE_DADOS2-BUKRS
                                     AND   SAKNR = IT_ZGL021_DRE_DADOS2-SAKNR
                                     AND   MONAT = IT_ZGL021_DRE_DADOS2-MONAT
                                     AND   KOSTL = ''
                                     AND   PRCTR = ''
                                     AND   MATKL = ''.

          ADD IT_ZGL029_DRE_DADOS2-VLR_REA   TO SOMA_VLR_REA29.
          ADD IT_ZGL029_DRE_DADOS2-VLR_DOLAR TO SOMA_VLR_USD29.
          ADD IT_ZGL029_DRE_DADOS2-VLR_GRUPO TO SOMA_VLR_GRP29.
        ENDLOOP.

        CASE IT_ZGL021_DRE_DADOS2-MONAT.
          WHEN 1.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA01 = IT_ZGL030_EST-VLR_REA01 + IT_ZGL021_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA01 = IT_ZGL030_EST-VLR_REA01 + IT_ZGL021_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29 .
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA01 = IT_ZGL030_EST-VLR_REA01 + IT_ZGL021_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 2.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA02 = IT_ZGL030_EST-VLR_REA02 + IT_ZGL021_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA02 = IT_ZGL030_EST-VLR_REA02 + IT_ZGL021_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29 .
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA02 = IT_ZGL030_EST-VLR_REA02 + IT_ZGL021_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 3.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA03 = IT_ZGL030_EST-VLR_REA03 + IT_ZGL021_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA03 = IT_ZGL030_EST-VLR_REA03 + IT_ZGL021_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29 .
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA03 = IT_ZGL030_EST-VLR_REA03 + IT_ZGL021_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 4.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA04 = IT_ZGL030_EST-VLR_REA04 + IT_ZGL021_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA04 = IT_ZGL030_EST-VLR_REA04 + IT_ZGL021_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29 .
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA04 = IT_ZGL030_EST-VLR_REA04 + IT_ZGL021_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 5.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA05 = IT_ZGL030_EST-VLR_REA05 + IT_ZGL021_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA05 = IT_ZGL030_EST-VLR_REA05 + IT_ZGL021_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29 .
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA05 = IT_ZGL030_EST-VLR_REA05 + IT_ZGL021_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 6.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA06 = IT_ZGL030_EST-VLR_REA06 + IT_ZGL021_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA06 = IT_ZGL030_EST-VLR_REA06 + IT_ZGL021_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29 .
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA06 = IT_ZGL030_EST-VLR_REA06 + IT_ZGL021_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 7.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA07 = IT_ZGL030_EST-VLR_REA07 + IT_ZGL021_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA07 = IT_ZGL030_EST-VLR_REA07 + IT_ZGL021_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29 .
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA07 = IT_ZGL030_EST-VLR_REA07 + IT_ZGL021_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 8.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA08 = IT_ZGL030_EST-VLR_REA08 + IT_ZGL021_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA08 = IT_ZGL030_EST-VLR_REA08 + IT_ZGL021_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29 .
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA08 = IT_ZGL030_EST-VLR_REA08 + IT_ZGL021_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 9.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA09 = IT_ZGL030_EST-VLR_REA09 + IT_ZGL021_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA09 = IT_ZGL030_EST-VLR_REA09 + IT_ZGL021_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29 .
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA09 = IT_ZGL030_EST-VLR_REA09 + IT_ZGL021_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 10.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA10 = IT_ZGL030_EST-VLR_REA10 + IT_ZGL021_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA10 = IT_ZGL030_EST-VLR_REA10 + IT_ZGL021_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29 .
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA10 = IT_ZGL030_EST-VLR_REA10 + IT_ZGL021_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 11.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA11 = IT_ZGL030_EST-VLR_REA11 + IT_ZGL021_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA11 = IT_ZGL030_EST-VLR_REA11 + IT_ZGL021_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29 .
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA11 = IT_ZGL030_EST-VLR_REA11 + IT_ZGL021_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 12.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA12 = IT_ZGL030_EST-VLR_REA12 + IT_ZGL021_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA12 = IT_ZGL030_EST-VLR_REA12 + IT_ZGL021_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29 .
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA12 = IT_ZGL030_EST-VLR_REA12 + IT_ZGL021_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
        ENDCASE.

      ENDLOOP.
      LOOP AT IT_ZGL025_DRE_ACM WHERE NIVEL EQ P_ZGL015_DRE_EST03-NIVEL
                                  AND SAKNR EQ P_ZGL015_DRE_EST03-SAKNR.
        "Dados sociedade parceira para eliminação
        CLEAR: SOMA_VLR_REA29,
               SOMA_VLR_USD29,
               SOMA_VLR_GRP29,
               SOMA_VLR30_ACM.

        LOOP AT IT_ZGL030_DRE_ACM2 WHERE BUKRS = IT_ZGL025_DRE_ACM-BUKRS
                                   AND   SAKNR = IT_ZGL025_DRE_ACM-SAKNR
                                   AND   KOSTL = ''
                                   AND   PRCTR = ''
                                   AND   MATKL = ''.

          ADD IT_ZGL030_DRE_ACM2-VLR_REA   TO SOMA_VLR_REA29.
          ADD IT_ZGL030_DRE_ACM2-VLR_DOLAR TO SOMA_VLR_USD29.
          ADD IT_ZGL030_DRE_ACM2-VLR_GRUPO TO SOMA_VLR_GRP29.
        ENDLOOP.

        IF TG_T005-WAERS EQ P_WAERS.
          IT_ZGL030_EST-VLR_ACM = IT_ZGL030_EST-VLR_ACM + IT_ZGL025_DRE_ACM-VLR_REA - SOMA_VLR_REA29.
        ELSEIF TG_T005-CURHA EQ P_WAERS.
          IT_ZGL030_EST-VLR_ACM = IT_ZGL030_EST-VLR_ACM + IT_ZGL025_DRE_ACM-VLR_DOLAR - SOMA_VLR_USD29.
        ELSEIF TG_T005-CURIN EQ P_WAERS.
          IT_ZGL030_EST-VLR_ACM = IT_ZGL030_EST-VLR_ACM + IT_ZGL025_DRE_ACM-VLR_GRUPO - SOMA_VLR_GRP29.
        ENDIF.
      ENDLOOP.
      TOT_VLR = IT_ZGL030_EST-VLR_REA01 + IT_ZGL030_EST-VLR_REA02 + IT_ZGL030_EST-VLR_REA03 + IT_ZGL030_EST-VLR_REA04 +
                IT_ZGL030_EST-VLR_REA05 + IT_ZGL030_EST-VLR_REA06 + IT_ZGL030_EST-VLR_REA07 + IT_ZGL030_EST-VLR_REA08 +
                IT_ZGL030_EST-VLR_REA09 + IT_ZGL030_EST-VLR_REA10 + IT_ZGL030_EST-VLR_REA11 + IT_ZGL030_EST-VLR_REA12.
    ELSE.

    ENDIF.

  ENDIF.

  IF NOT P_ZGL015_DRE_EST04_C IS INITIAL.
    IT_ZGL030_EST-KOSTL      = P_ZGL015_DRE_EST04_C-KOSTL.
    IT_ZGL030_EST-KOSAR      = P_ZGL015_DRE_EST04_C-KOSAR.
    IT_ZGL030_EST-LTEXT_CC   = P_ZGL015_DRE_EST04_C-LTEXT.
    IT_ZGL030_EST-VLR_REA01  = 0.
    IT_ZGL030_EST-QTD_TON01  = 0.
    IT_ZGL030_EST-ANA_VER01  = 0.
    IT_ZGL030_EST-ANA_HOR01  = 0.
    IT_ZGL030_EST-VLR_REA02  = 0.
    IT_ZGL030_EST-QTD_TON02  = 0.
    IT_ZGL030_EST-ANA_VER02  = 0.
    IT_ZGL030_EST-ANA_HOR03  = 0.
    IT_ZGL030_EST-VLR_REA03  = 0.
    IT_ZGL030_EST-QTD_TON03  = 0.
    IT_ZGL030_EST-ANA_VER03  = 0.
    IT_ZGL030_EST-ANA_HOR03  = 0.
    IT_ZGL030_EST-VLR_REA04  = 0.
    IT_ZGL030_EST-QTD_TON04  = 0.
    IT_ZGL030_EST-ANA_VER04  = 0.
    IT_ZGL030_EST-ANA_HOR04  = 0.
    IT_ZGL030_EST-VLR_REA05  = 0.
    IT_ZGL030_EST-QTD_TON05  = 0.
    IT_ZGL030_EST-ANA_VER05  = 0.
    IT_ZGL030_EST-ANA_HOR05  = 0.
    IT_ZGL030_EST-VLR_REA06  = 0.
    IT_ZGL030_EST-QTD_TON06  = 0.
    IT_ZGL030_EST-ANA_VER06  = 0.
    IT_ZGL030_EST-ANA_HOR06  = 0.
    IT_ZGL030_EST-VLR_REA07  = 0.
    IT_ZGL030_EST-QTD_TON07  = 0.
    IT_ZGL030_EST-ANA_VER07  = 0.
    IT_ZGL030_EST-ANA_HOR07  = 0.
    IT_ZGL030_EST-VLR_REA08  = 0.
    IT_ZGL030_EST-QTD_TON08  = 0.
    IT_ZGL030_EST-ANA_VER08  = 0.
    IT_ZGL030_EST-ANA_HOR08  = 0.
    IT_ZGL030_EST-VLR_REA09  = 0.
    IT_ZGL030_EST-QTD_TON09  = 0.
    IT_ZGL030_EST-ANA_VER09  = 0.
    IT_ZGL030_EST-ANA_HOR09  = 0.
    IT_ZGL030_EST-VLR_REA10  = 0.
    IT_ZGL030_EST-QTD_TON10  = 0.
    IT_ZGL030_EST-ANA_VER10  = 0.
    IT_ZGL030_EST-ANA_HOR10  = 0.
    IT_ZGL030_EST-VLR_REA11  = 0.
    IT_ZGL030_EST-QTD_TON11  = 0.
    IT_ZGL030_EST-ANA_VER11  = 0.
    IT_ZGL030_EST-ANA_HOR11  = 0.
    IT_ZGL030_EST-VLR_REA12  = 0.
    IT_ZGL030_EST-QTD_TON12  = 0.
    IT_ZGL030_EST-ANA_VER12  = 0.
    IT_ZGL030_EST-ANA_HOR12  = 0.
    IT_ZGL030_EST-QTD_ACM    = 0.
    IT_ZGL030_EST-VLR_ACM    = 0.


    READ TABLE IT_ZGL022_DRE_DADOS2 TRANSPORTING NO FIELDS
      WITH KEY NIVEL = P_ZGL015_DRE_EST04_C-NIVEL
               SAKNR = P_ZGL015_DRE_EST04_C-SAKNR
               KOSTL = P_ZGL015_DRE_EST04_C-KOSTL
               BINARY SEARCH.

    IF SY-SUBRC IS INITIAL.
      WL_TABIX = SY-TABIX.

      LOOP AT IT_ZGL022_DRE_DADOS2 FROM WL_TABIX.

        IF IT_ZGL022_DRE_DADOS2-NIVEL NE  P_ZGL015_DRE_EST04_C-NIVEL
        OR IT_ZGL022_DRE_DADOS2-SAKNR NE  P_ZGL015_DRE_EST04_C-SAKNR
        OR IT_ZGL022_DRE_DADOS2-KOSTL NE  P_ZGL015_DRE_EST04_C-KOSTL.
          EXIT.
        ENDIF.
        "Dados sociedade parceira para eliminação
        CLEAR: SOMA_VLR_REA29,
               SOMA_VLR_USD29,
               SOMA_VLR_GRP29,
               SOMA_VLR30_ACM.

        LOOP AT IT_ZGL029_DRE_DADOS2 WHERE BUKRS = IT_ZGL022_DRE_DADOS2-BUKRS
                                       AND SAKNR = IT_ZGL022_DRE_DADOS2-SAKNR
                                       AND KOSTL = IT_ZGL022_DRE_DADOS2-KOSTL
                                       AND MONAT = IT_ZGL022_DRE_DADOS2-MONAT
                                       AND PRCTR = ''
                                       AND MATKL = ''.

          ADD IT_ZGL029_DRE_DADOS2-VLR_REA   TO SOMA_VLR_REA29.
          ADD IT_ZGL029_DRE_DADOS2-VLR_DOLAR TO SOMA_VLR_USD29.
          ADD IT_ZGL029_DRE_DADOS2-VLR_GRUPO TO SOMA_VLR_GRP29.
        ENDLOOP.

        CASE IT_ZGL022_DRE_DADOS2-MONAT.
          WHEN 1.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA01 = IT_ZGL030_EST-VLR_REA01 + IT_ZGL022_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA01 = IT_ZGL030_EST-VLR_REA01 + IT_ZGL022_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA01 = IT_ZGL030_EST-VLR_REA01 + IT_ZGL022_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 2.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA02 = IT_ZGL030_EST-VLR_REA02 + IT_ZGL022_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA02 = IT_ZGL030_EST-VLR_REA02 + IT_ZGL022_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA02 = IT_ZGL030_EST-VLR_REA02 + IT_ZGL022_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 3.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA03 = IT_ZGL030_EST-VLR_REA03 + IT_ZGL022_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA03 = IT_ZGL030_EST-VLR_REA03 + IT_ZGL022_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA03 = IT_ZGL030_EST-VLR_REA03 + IT_ZGL022_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 4.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA04 = IT_ZGL030_EST-VLR_REA04 + IT_ZGL022_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA04 = IT_ZGL030_EST-VLR_REA04 + IT_ZGL022_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA04 = IT_ZGL030_EST-VLR_REA04 + IT_ZGL022_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 5.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA05 = IT_ZGL030_EST-VLR_REA05 + IT_ZGL022_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA05 = IT_ZGL030_EST-VLR_REA05 + IT_ZGL022_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA05 = IT_ZGL030_EST-VLR_REA05 + IT_ZGL022_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 6.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA06 = IT_ZGL030_EST-VLR_REA06 + IT_ZGL022_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA06 = IT_ZGL030_EST-VLR_REA06 + IT_ZGL022_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA06 = IT_ZGL030_EST-VLR_REA06 + IT_ZGL022_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 7.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA07 = IT_ZGL030_EST-VLR_REA07 + IT_ZGL022_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA07 = IT_ZGL030_EST-VLR_REA07 + IT_ZGL022_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA07 = IT_ZGL030_EST-VLR_REA07 + IT_ZGL022_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 8.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA08 = IT_ZGL030_EST-VLR_REA08 + IT_ZGL022_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA08 = IT_ZGL030_EST-VLR_REA08 + IT_ZGL022_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA08 = IT_ZGL030_EST-VLR_REA08 + IT_ZGL022_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 9.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA09 = IT_ZGL030_EST-VLR_REA09 + IT_ZGL022_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA09 = IT_ZGL030_EST-VLR_REA09 + IT_ZGL022_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA09 = IT_ZGL030_EST-VLR_REA09 + IT_ZGL022_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 10.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA10 = IT_ZGL030_EST-VLR_REA10 + IT_ZGL022_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA10 = IT_ZGL030_EST-VLR_REA10 + IT_ZGL022_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA10 = IT_ZGL030_EST-VLR_REA10 + IT_ZGL022_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 11.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA11 = IT_ZGL030_EST-VLR_REA11 + IT_ZGL022_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA11 = IT_ZGL030_EST-VLR_REA11 + IT_ZGL022_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA11 = IT_ZGL030_EST-VLR_REA11 + IT_ZGL022_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
          WHEN 12.
            IF TG_T005-WAERS EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA12 = IT_ZGL030_EST-VLR_REA12 + IT_ZGL022_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
            ELSEIF TG_T005-CURHA EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA12 = IT_ZGL030_EST-VLR_REA12 + IT_ZGL022_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
            ELSEIF TG_T005-CURIN EQ P_WAERS.
              IT_ZGL030_EST-VLR_REA12 = IT_ZGL030_EST-VLR_REA12 + IT_ZGL022_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
            ENDIF.
        ENDCASE.

      ENDLOOP.
    ENDIF.

    READ TABLE IT_ZGL026_DRE_ACM TRANSPORTING NO FIELDS
     WITH KEY NIVEL = P_ZGL015_DRE_EST04_C-NIVEL
              SAKNR = P_ZGL015_DRE_EST04_C-SAKNR
              KOSTL = P_ZGL015_DRE_EST04_C-KOSTL
              BINARY SEARCH.
    IF SY-SUBRC IS INITIAL.
      WL_TABIX = SY-TABIX.

      LOOP AT IT_ZGL026_DRE_ACM FROM WL_TABIX.
        IF IT_ZGL026_DRE_ACM-NIVEL NE  P_ZGL015_DRE_EST04_C-NIVEL
        OR IT_ZGL026_DRE_ACM-SAKNR NE  P_ZGL015_DRE_EST04_C-SAKNR
        OR IT_ZGL026_DRE_ACM-KOSTL NE  P_ZGL015_DRE_EST04_C-KOSTL.
          EXIT.
        ENDIF.
        "Dados sociedade parceira para eliminação
        CLEAR: SOMA_VLR_REA29,
               SOMA_VLR_USD29,
               SOMA_VLR_GRP29,
               SOMA_VLR30_ACM.

        LOOP AT IT_ZGL030_DRE_ACM2 WHERE BUKRS = IT_ZGL026_DRE_ACM-BUKRS
                                   AND   SAKNR = IT_ZGL026_DRE_ACM-SAKNR
                                   AND   KOSTL = IT_ZGL026_DRE_ACM-KOSTL
                                   AND   PRCTR = ''
                                   AND   MATKL = ''.

          ADD IT_ZGL030_DRE_ACM2-VLR_REA   TO SOMA_VLR_REA29.
          ADD IT_ZGL030_DRE_ACM2-VLR_DOLAR TO SOMA_VLR_USD29.
          ADD IT_ZGL030_DRE_ACM2-VLR_GRUPO TO SOMA_VLR_GRP29.
        ENDLOOP.

        IF TG_T005-WAERS EQ P_WAERS.
          IT_ZGL030_EST-VLR_ACM = IT_ZGL030_EST-VLR_ACM + IT_ZGL026_DRE_ACM-VLR_REA - SOMA_VLR_REA29.
        ELSEIF TG_T005-CURHA EQ P_WAERS.
          IT_ZGL030_EST-VLR_ACM = IT_ZGL030_EST-VLR_ACM + IT_ZGL026_DRE_ACM-VLR_DOLAR - SOMA_VLR_USD29.
        ELSEIF TG_T005-CURIN EQ P_WAERS.
          IT_ZGL030_EST-VLR_ACM = IT_ZGL030_EST-VLR_ACM + IT_ZGL026_DRE_ACM-VLR_GRUPO - SOMA_VLR_GRP29.
        ENDIF.
      ENDLOOP.
    ENDIF.
    TOT_VLR = IT_ZGL030_EST-VLR_REA01 + IT_ZGL030_EST-VLR_REA02 + IT_ZGL030_EST-VLR_REA03 + IT_ZGL030_EST-VLR_REA04 +
              IT_ZGL030_EST-VLR_REA05 + IT_ZGL030_EST-VLR_REA06 + IT_ZGL030_EST-VLR_REA07 + IT_ZGL030_EST-VLR_REA08 +
              IT_ZGL030_EST-VLR_REA09 + IT_ZGL030_EST-VLR_REA10 + IT_ZGL030_EST-VLR_REA11 + IT_ZGL030_EST-VLR_REA12.
  ENDIF.

  IF NOT P_ZGL015_DRE_EST05 IS INITIAL.
    IT_ZGL030_EST-PRCTR = P_ZGL015_DRE_EST05-PRCTR.
    READ TABLE IT_CEPCT WITH KEY PRCTR = P_ZGL015_DRE_EST05-PRCTR
                                 KOKRS = P_ZGL015_DRE_EST05-KOKRS.
    IF SY-SUBRC IS INITIAL.
      IT_ZGL030_EST-LTEXT_CL = IT_CEPCT-LTEXT.
    ENDIF.
    IT_ZGL030_EST-VLR_REA01  = 0.
    IT_ZGL030_EST-QTD_TON01  = 0.
    IT_ZGL030_EST-ANA_VER01  = 0.
    IT_ZGL030_EST-ANA_HOR01  = 0.
    IT_ZGL030_EST-VLR_REA02  = 0.
    IT_ZGL030_EST-QTD_TON02  = 0.
    IT_ZGL030_EST-ANA_VER02  = 0.
    IT_ZGL030_EST-ANA_HOR03  = 0.
    IT_ZGL030_EST-VLR_REA03  = 0.
    IT_ZGL030_EST-QTD_TON03  = 0.
    IT_ZGL030_EST-ANA_VER03  = 0.
    IT_ZGL030_EST-ANA_HOR03  = 0.
    IT_ZGL030_EST-VLR_REA04  = 0.
    IT_ZGL030_EST-QTD_TON04  = 0.
    IT_ZGL030_EST-ANA_VER04  = 0.
    IT_ZGL030_EST-ANA_HOR04  = 0.
    IT_ZGL030_EST-VLR_REA05  = 0.
    IT_ZGL030_EST-QTD_TON05  = 0.
    IT_ZGL030_EST-ANA_VER05  = 0.
    IT_ZGL030_EST-ANA_HOR05  = 0.
    IT_ZGL030_EST-VLR_REA06  = 0.
    IT_ZGL030_EST-QTD_TON06  = 0.
    IT_ZGL030_EST-ANA_VER06  = 0.
    IT_ZGL030_EST-ANA_HOR06  = 0.
    IT_ZGL030_EST-VLR_REA07  = 0.
    IT_ZGL030_EST-QTD_TON07  = 0.
    IT_ZGL030_EST-ANA_VER07  = 0.
    IT_ZGL030_EST-ANA_HOR07  = 0.
    IT_ZGL030_EST-VLR_REA08  = 0.
    IT_ZGL030_EST-QTD_TON08  = 0.
    IT_ZGL030_EST-ANA_VER08  = 0.
    IT_ZGL030_EST-ANA_HOR08  = 0.
    IT_ZGL030_EST-VLR_REA09  = 0.
    IT_ZGL030_EST-QTD_TON09  = 0.
    IT_ZGL030_EST-ANA_VER09  = 0.
    IT_ZGL030_EST-ANA_HOR09  = 0.
    IT_ZGL030_EST-VLR_REA10  = 0.
    IT_ZGL030_EST-QTD_TON10  = 0.
    IT_ZGL030_EST-ANA_VER10  = 0.
    IT_ZGL030_EST-ANA_HOR10  = 0.
    IT_ZGL030_EST-VLR_REA11  = 0.
    IT_ZGL030_EST-QTD_TON11  = 0.
    IT_ZGL030_EST-ANA_VER11  = 0.
    IT_ZGL030_EST-ANA_HOR11  = 0.
    IT_ZGL030_EST-VLR_REA12  = 0.
    IT_ZGL030_EST-QTD_TON12  = 0.
    IT_ZGL030_EST-ANA_VER12  = 0.
    IT_ZGL030_EST-ANA_HOR12  = 0.
    IT_ZGL030_EST-QTD_ACM  = 0.
    IT_ZGL030_EST-VLR_ACM  = 0.
    LOOP AT IT_ZGL023_DRE_DADOS2 WHERE NIVEL EQ P_ZGL015_DRE_EST05-NIVEL
                                   AND SAKNR EQ P_ZGL015_DRE_EST05-SAKNR
                                   AND PRCTR EQ P_ZGL015_DRE_EST05-PRCTR.

      "Dados sociedade parceira para eliminação
      CLEAR: SOMA_VLR_REA29,
             SOMA_VLR_USD29,
             SOMA_VLR_GRP29,
             SOMA_VLR30_ACM,
             SOMA_TON_ACM.

      LOOP AT IT_ZGL029_DRE_DADOS2 WHERE BUKRS = IT_ZGL023_DRE_DADOS2-BUKRS
                                     AND SAKNR = IT_ZGL023_DRE_DADOS2-SAKNR
                                     AND PRCTR = IT_ZGL023_DRE_DADOS2-PRCTR
                                     AND MONAT = IT_ZGL023_DRE_DADOS2-MONAT
                                     AND KOSTL = ''
                                     AND MATKL = ''.

        ADD IT_ZGL029_DRE_DADOS2-VLR_REA   TO SOMA_VLR_REA29.
        ADD IT_ZGL029_DRE_DADOS2-VLR_DOLAR TO SOMA_VLR_USD29.
        ADD IT_ZGL029_DRE_DADOS2-VLR_GRUPO TO SOMA_VLR_GRP29.
        ADD IT_ZGL029_DRE_DADOS2-QTD_TON   TO SOMA_TON_ACM.
      ENDLOOP.

      CASE IT_ZGL023_DRE_DADOS2-MONAT.
        WHEN 1.
          IT_ZGL030_EST-QTD_TON01 = IT_ZGL030_EST-QTD_TON01 + IT_ZGL023_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA01 = IT_ZGL030_EST-VLR_REA01 + IT_ZGL023_DRE_DADOS2-VLR_REA   - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA01 = IT_ZGL030_EST-VLR_REA01 + IT_ZGL023_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA01 = IT_ZGL030_EST-VLR_REA01 + IT_ZGL023_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 2.
          IT_ZGL030_EST-QTD_TON02 = IT_ZGL030_EST-QTD_TON02 + IT_ZGL023_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA02 = IT_ZGL030_EST-VLR_REA02 + IT_ZGL023_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA02 = IT_ZGL030_EST-VLR_REA02 + IT_ZGL023_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA02 = IT_ZGL030_EST-VLR_REA02 + IT_ZGL023_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 3.
          IT_ZGL030_EST-QTD_TON03 = IT_ZGL030_EST-QTD_TON03 + IT_ZGL023_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA03 = IT_ZGL030_EST-VLR_REA03 + IT_ZGL023_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA03 = IT_ZGL030_EST-VLR_REA03 + IT_ZGL023_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA03 = IT_ZGL030_EST-VLR_REA03 + IT_ZGL023_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 4.
          IT_ZGL030_EST-QTD_TON04 = IT_ZGL030_EST-QTD_TON04 + IT_ZGL023_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA04 = IT_ZGL030_EST-VLR_REA04 + IT_ZGL023_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA04 = IT_ZGL030_EST-VLR_REA04 + IT_ZGL023_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA04 = IT_ZGL030_EST-VLR_REA04 + IT_ZGL023_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 5.
          IT_ZGL030_EST-QTD_TON05 = IT_ZGL030_EST-QTD_TON05 + IT_ZGL023_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA05 = IT_ZGL030_EST-VLR_REA05 + IT_ZGL023_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA05 = IT_ZGL030_EST-VLR_REA05 + IT_ZGL023_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA05 = IT_ZGL030_EST-VLR_REA05 + IT_ZGL023_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 6.
          IT_ZGL030_EST-QTD_TON06 = IT_ZGL030_EST-QTD_TON06 + IT_ZGL023_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA06 = IT_ZGL030_EST-VLR_REA06 + IT_ZGL023_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA06 = IT_ZGL030_EST-VLR_REA06 + IT_ZGL023_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA06 = IT_ZGL030_EST-VLR_REA06 + IT_ZGL023_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 7.
          IT_ZGL030_EST-QTD_TON07 = IT_ZGL030_EST-QTD_TON07 + IT_ZGL023_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA07 = IT_ZGL030_EST-VLR_REA07 + IT_ZGL023_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA07 = IT_ZGL030_EST-VLR_REA07 + IT_ZGL023_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA07 = IT_ZGL030_EST-VLR_REA07 + IT_ZGL023_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 8.
          IT_ZGL030_EST-QTD_TON08 = IT_ZGL030_EST-QTD_TON08 + IT_ZGL023_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA08 = IT_ZGL030_EST-VLR_REA08 + IT_ZGL023_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA08 = IT_ZGL030_EST-VLR_REA08 + IT_ZGL023_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA08 = IT_ZGL030_EST-VLR_REA08 + IT_ZGL023_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 9.
          IT_ZGL030_EST-QTD_TON09 = IT_ZGL030_EST-QTD_TON09 + IT_ZGL023_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA09 = IT_ZGL030_EST-VLR_REA09 + IT_ZGL023_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA09 = IT_ZGL030_EST-VLR_REA09 + IT_ZGL023_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA09 = IT_ZGL030_EST-VLR_REA09 + IT_ZGL023_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 10.
          IT_ZGL030_EST-QTD_TON10 = IT_ZGL030_EST-QTD_TON10 + IT_ZGL023_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA10 = IT_ZGL030_EST-VLR_REA10 + IT_ZGL023_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA10 = IT_ZGL030_EST-VLR_REA10 + IT_ZGL023_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA10 = IT_ZGL030_EST-VLR_REA10 + IT_ZGL023_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 11.
          IT_ZGL030_EST-QTD_TON11 = IT_ZGL030_EST-QTD_TON11 + IT_ZGL023_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA11 = IT_ZGL030_EST-VLR_REA11 + IT_ZGL023_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA11 = IT_ZGL030_EST-VLR_REA11 + IT_ZGL023_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA11 = IT_ZGL030_EST-VLR_REA11 + IT_ZGL023_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 12.
          IT_ZGL030_EST-QTD_TON12 = IT_ZGL030_EST-QTD_TON12 + IT_ZGL023_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA12 = IT_ZGL030_EST-VLR_REA12 + IT_ZGL023_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA12 = IT_ZGL030_EST-VLR_REA12 + IT_ZGL023_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA12 = IT_ZGL030_EST-VLR_REA12 + IT_ZGL023_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
      ENDCASE.

    ENDLOOP.
    LOOP AT IT_ZGL027_DRE_ACM WHERE NIVEL EQ P_ZGL015_DRE_EST05-NIVEL
                                AND SAKNR EQ P_ZGL015_DRE_EST05-SAKNR
                                AND PRCTR EQ P_ZGL015_DRE_EST05-PRCTR.

      "Dados sociedade parceira para eliminação
      CLEAR: SOMA_VLR_REA29,
            SOMA_VLR_USD29,
            SOMA_VLR_GRP29,
            SOMA_TON_ACM,
            SOMA_VLR30_ACM.

      LOOP AT IT_ZGL030_DRE_ACM2 WHERE BUKRS = IT_ZGL027_DRE_ACM-BUKRS
                                 AND   SAKNR = IT_ZGL027_DRE_ACM-SAKNR
                                 AND   PRCTR = IT_ZGL027_DRE_ACM-PRCTR
                                 AND   KOSTL = ''
                                 AND   MATKL = ''.

        ADD IT_ZGL030_DRE_ACM2-VLR_REA   TO SOMA_VLR_REA29.
        ADD IT_ZGL030_DRE_ACM2-VLR_DOLAR TO SOMA_VLR_USD29.
        ADD IT_ZGL030_DRE_ACM2-VLR_GRUPO TO SOMA_VLR_GRP29.
        ADD IT_ZGL030_DRE_ACM2-QTD_TON   TO SOMA_TON_ACM.
      ENDLOOP.

      IT_ZGL030_EST-QTD_ACM = IT_ZGL030_EST-QTD_ACM + IT_ZGL027_DRE_ACM-QTD_TON.
      IF TG_T005-WAERS EQ P_WAERS.
        IT_ZGL030_EST-VLR_ACM = IT_ZGL030_EST-VLR_ACM + IT_ZGL027_DRE_ACM-VLR_REA - SOMA_VLR_REA29.
      ELSEIF TG_T005-CURHA EQ P_WAERS.
        IT_ZGL030_EST-VLR_ACM = IT_ZGL030_EST-VLR_ACM + IT_ZGL027_DRE_ACM-VLR_DOLAR - SOMA_VLR_USD29.
      ELSEIF TG_T005-CURIN EQ P_WAERS.
        IT_ZGL030_EST-VLR_ACM = IT_ZGL030_EST-VLR_ACM + IT_ZGL027_DRE_ACM-VLR_GRUPO - SOMA_VLR_GRP29.
      ENDIF.
    ENDLOOP.
    TOT_VLR =  IT_ZGL030_EST-VLR_REA01 + IT_ZGL030_EST-VLR_REA02 + IT_ZGL030_EST-VLR_REA03 + IT_ZGL030_EST-VLR_REA04 +
               IT_ZGL030_EST-VLR_REA05 + IT_ZGL030_EST-VLR_REA06 + IT_ZGL030_EST-VLR_REA07 + IT_ZGL030_EST-VLR_REA08 +
               IT_ZGL030_EST-VLR_REA09 + IT_ZGL030_EST-VLR_REA10 + IT_ZGL030_EST-VLR_REA11 + IT_ZGL030_EST-VLR_REA12.

    TOT_QTD =  IT_ZGL030_EST-QTD_TON01 + IT_ZGL030_EST-QTD_TON02 + IT_ZGL030_EST-QTD_TON03 + IT_ZGL030_EST-QTD_TON04 +
               IT_ZGL030_EST-QTD_TON05 + IT_ZGL030_EST-QTD_TON06 + IT_ZGL030_EST-QTD_TON07 + IT_ZGL030_EST-QTD_TON08 +
               IT_ZGL030_EST-QTD_TON09 + IT_ZGL030_EST-QTD_TON10 + IT_ZGL030_EST-QTD_TON11 + IT_ZGL030_EST-QTD_TON12.
  ENDIF.

  IF NOT P_ZGL015_DRE_EST06 IS INITIAL.

    IT_ZGL030_EST-MATKL = P_ZGL015_DRE_EST06-MATKL.
    READ TABLE IT_T023T WITH KEY MATKL = P_ZGL015_DRE_EST06-MATKL.
    IF SY-SUBRC IS INITIAL.
      IT_ZGL030_EST-WGBEZ60 = IT_T023T-WGBEZ60.
    ENDIF.
    IT_ZGL030_EST-VLR_REA01  = 0.
    IT_ZGL030_EST-QTD_TON01  = 0.
    IT_ZGL030_EST-ANA_VER01  = 0.
    IT_ZGL030_EST-ANA_HOR01  = 0.
    IT_ZGL030_EST-VLR_REA02  = 0.
    IT_ZGL030_EST-QTD_TON02  = 0.
    IT_ZGL030_EST-ANA_VER02  = 0.
    IT_ZGL030_EST-ANA_HOR03  = 0.
    IT_ZGL030_EST-VLR_REA03  = 0.
    IT_ZGL030_EST-QTD_TON03  = 0.
    IT_ZGL030_EST-ANA_VER03  = 0.
    IT_ZGL030_EST-ANA_HOR03  = 0.
    IT_ZGL030_EST-VLR_REA04  = 0.
    IT_ZGL030_EST-QTD_TON04  = 0.
    IT_ZGL030_EST-ANA_VER04  = 0.
    IT_ZGL030_EST-ANA_HOR04  = 0.
    IT_ZGL030_EST-VLR_REA05  = 0.
    IT_ZGL030_EST-QTD_TON05  = 0.
    IT_ZGL030_EST-ANA_VER05  = 0.
    IT_ZGL030_EST-ANA_HOR05  = 0.
    IT_ZGL030_EST-VLR_REA06  = 0.
    IT_ZGL030_EST-QTD_TON06  = 0.
    IT_ZGL030_EST-ANA_VER06  = 0.
    IT_ZGL030_EST-ANA_HOR06  = 0.
    IT_ZGL030_EST-VLR_REA07  = 0.
    IT_ZGL030_EST-QTD_TON07  = 0.
    IT_ZGL030_EST-ANA_VER07  = 0.
    IT_ZGL030_EST-ANA_HOR07  = 0.
    IT_ZGL030_EST-VLR_REA08  = 0.
    IT_ZGL030_EST-QTD_TON08  = 0.
    IT_ZGL030_EST-ANA_VER08  = 0.
    IT_ZGL030_EST-ANA_HOR08  = 0.
    IT_ZGL030_EST-VLR_REA09  = 0.
    IT_ZGL030_EST-QTD_TON09  = 0.
    IT_ZGL030_EST-ANA_VER09  = 0.
    IT_ZGL030_EST-ANA_HOR09  = 0.
    IT_ZGL030_EST-VLR_REA10  = 0.
    IT_ZGL030_EST-QTD_TON10  = 0.
    IT_ZGL030_EST-ANA_VER10  = 0.
    IT_ZGL030_EST-ANA_HOR10  = 0.
    IT_ZGL030_EST-VLR_REA11  = 0.
    IT_ZGL030_EST-QTD_TON11  = 0.
    IT_ZGL030_EST-ANA_VER11  = 0.
    IT_ZGL030_EST-ANA_HOR11  = 0.
    IT_ZGL030_EST-VLR_REA12  = 0.
    IT_ZGL030_EST-QTD_TON12  = 0.
    IT_ZGL030_EST-ANA_VER12  = 0.
    IT_ZGL030_EST-ANA_HOR12  = 0.
    IT_ZGL030_EST-QTD_ACM  = 0.
    IT_ZGL030_EST-VLR_ACM  = 0.
    LOOP AT IT_ZGL024_DRE_DADOS2 WHERE NIVEL EQ P_ZGL015_DRE_EST06-NIVEL
                                  AND SAKNR EQ P_ZGL015_DRE_EST06-SAKNR
                                  AND MATKL EQ P_ZGL015_DRE_EST06-MATKL.

      "Dados sociedade parceira para eliminação
      CLEAR: SOMA_VLR_REA29,
             SOMA_VLR_USD29,
             SOMA_VLR_GRP29,
             SOMA_TON_ACM,
             SOMA_VLR30_ACM.

      LOOP AT IT_ZGL029_DRE_DADOS2 WHERE BUKRS = IT_ZGL024_DRE_DADOS2-BUKRS
                                   AND   SAKNR = IT_ZGL024_DRE_DADOS2-SAKNR
                                   AND   MATKL = IT_ZGL024_DRE_DADOS2-MATKL
                                   AND   MONAT = IT_ZGL024_DRE_DADOS2-MONAT
                                   AND   KOSTL = ''
                                   AND   PRCTR = ''.

        ADD IT_ZGL029_DRE_DADOS2-VLR_REA   TO SOMA_VLR_REA29.
        ADD IT_ZGL029_DRE_DADOS2-VLR_DOLAR TO SOMA_VLR_USD29.
        ADD IT_ZGL029_DRE_DADOS2-VLR_GRUPO TO SOMA_VLR_GRP29.
        ADD IT_ZGL029_DRE_DADOS2-QTD_TON   TO SOMA_TON_ACM.
      ENDLOOP.
      CASE IT_ZGL024_DRE_DADOS2-MONAT.
        WHEN 1.
          IT_ZGL030_EST-QTD_TON01 = IT_ZGL030_EST-QTD_TON01 + IT_ZGL024_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA01 = IT_ZGL030_EST-VLR_REA01 + IT_ZGL024_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA01 = IT_ZGL030_EST-VLR_REA01 + IT_ZGL024_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA01 = IT_ZGL030_EST-VLR_REA01 + IT_ZGL024_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 2.
          IT_ZGL030_EST-QTD_TON02 = IT_ZGL030_EST-QTD_TON02 + IT_ZGL024_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA02 = IT_ZGL030_EST-VLR_REA02 + IT_ZGL024_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA02 = IT_ZGL030_EST-VLR_REA02 + IT_ZGL024_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA02 = IT_ZGL030_EST-VLR_REA02 + IT_ZGL024_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 3.
          IT_ZGL030_EST-QTD_TON03 = IT_ZGL030_EST-QTD_TON03 + IT_ZGL024_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA03 = IT_ZGL030_EST-VLR_REA03 + IT_ZGL024_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA03 = IT_ZGL030_EST-VLR_REA03 + IT_ZGL024_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA03 = IT_ZGL030_EST-VLR_REA03 + IT_ZGL024_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 4.
          IT_ZGL030_EST-QTD_TON04 = IT_ZGL030_EST-QTD_TON04 + IT_ZGL024_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA04 = IT_ZGL030_EST-VLR_REA04 + IT_ZGL024_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA04 = IT_ZGL030_EST-VLR_REA04 + IT_ZGL024_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA04 = IT_ZGL030_EST-VLR_REA04 + IT_ZGL024_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 5.
          IT_ZGL030_EST-QTD_TON05 = IT_ZGL030_EST-QTD_TON05 + IT_ZGL024_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA05 = IT_ZGL030_EST-VLR_REA05 + IT_ZGL024_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA05 = IT_ZGL030_EST-VLR_REA05 + IT_ZGL024_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA05 = IT_ZGL030_EST-VLR_REA05 + IT_ZGL024_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 6.
          IT_ZGL030_EST-QTD_TON06 = IT_ZGL030_EST-QTD_TON06 + IT_ZGL024_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA06 = IT_ZGL030_EST-VLR_REA06 + IT_ZGL024_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA06 = IT_ZGL030_EST-VLR_REA06 + IT_ZGL024_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA06 = IT_ZGL030_EST-VLR_REA06 + IT_ZGL024_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 7.
          IT_ZGL030_EST-QTD_TON07 = IT_ZGL030_EST-QTD_TON07 + IT_ZGL024_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA07 = IT_ZGL030_EST-VLR_REA07 + IT_ZGL024_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA07 = IT_ZGL030_EST-VLR_REA07 + IT_ZGL024_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA07 = IT_ZGL030_EST-VLR_REA07 + IT_ZGL024_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 8.
          IT_ZGL030_EST-QTD_TON08 = IT_ZGL030_EST-QTD_TON08 + IT_ZGL024_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA08 = IT_ZGL030_EST-VLR_REA08 + IT_ZGL024_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA08 = IT_ZGL030_EST-VLR_REA08 + IT_ZGL024_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA08 = IT_ZGL030_EST-VLR_REA08 + IT_ZGL024_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 9.
          IT_ZGL030_EST-QTD_TON09 = IT_ZGL030_EST-QTD_TON09 + IT_ZGL024_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA09 = IT_ZGL030_EST-VLR_REA09 + IT_ZGL024_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA09 = IT_ZGL030_EST-VLR_REA09 + IT_ZGL024_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA09 = IT_ZGL030_EST-VLR_REA09 + IT_ZGL024_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 10.
          IT_ZGL030_EST-QTD_TON10 = IT_ZGL030_EST-QTD_TON10 + IT_ZGL024_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA10 = IT_ZGL030_EST-VLR_REA10 + IT_ZGL024_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA10 = IT_ZGL030_EST-VLR_REA10 + IT_ZGL024_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA10 = IT_ZGL030_EST-VLR_REA10 + IT_ZGL024_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 11.
          IT_ZGL030_EST-QTD_TON11 = IT_ZGL030_EST-QTD_TON11 + IT_ZGL024_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA11 = IT_ZGL030_EST-VLR_REA11 + IT_ZGL024_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA11 = IT_ZGL030_EST-VLR_REA11 + IT_ZGL024_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA11 = IT_ZGL030_EST-VLR_REA11 + IT_ZGL024_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
        WHEN 12.
          IT_ZGL030_EST-QTD_TON12 = IT_ZGL030_EST-QTD_TON12 + IT_ZGL024_DRE_DADOS2-QTD_TON - SOMA_TON_ACM.
          IF TG_T005-WAERS EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA12 = IT_ZGL030_EST-VLR_REA12 + IT_ZGL024_DRE_DADOS2-VLR_REA - SOMA_VLR_REA29.
          ELSEIF TG_T005-CURHA EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA12 = IT_ZGL030_EST-VLR_REA12 + IT_ZGL024_DRE_DADOS2-VLR_DOLAR - SOMA_VLR_USD29.
          ELSEIF TG_T005-CURIN EQ P_WAERS.
            IT_ZGL030_EST-VLR_REA12 = IT_ZGL030_EST-VLR_REA12 + IT_ZGL024_DRE_DADOS2-VLR_GRUPO - SOMA_VLR_GRP29.
          ENDIF.
      ENDCASE.

    ENDLOOP.
    LOOP AT IT_ZGL028_DRE_ACM WHERE NIVEL EQ P_ZGL015_DRE_EST06-NIVEL
                                AND SAKNR EQ P_ZGL015_DRE_EST06-SAKNR
                                AND MATKL EQ P_ZGL015_DRE_EST06-MATKL.
      "Dados sociedade parceira para eliminação
      CLEAR: SOMA_VLR_REA29,
            SOMA_VLR_USD29,
            SOMA_VLR_GRP29,
            SOMA_TON_ACM,
            SOMA_VLR30_ACM.

      LOOP AT IT_ZGL030_DRE_ACM2 WHERE BUKRS = IT_ZGL028_DRE_ACM-BUKRS
                                 AND   SAKNR = IT_ZGL028_DRE_ACM-SAKNR
                                 AND   MATKL = IT_ZGL028_DRE_ACM-MATKL
                                 AND   KOSTL = ''
                                 AND   PRCTR = ''.

        ADD IT_ZGL030_DRE_ACM2-VLR_REA   TO SOMA_VLR_REA29.
        ADD IT_ZGL030_DRE_ACM2-VLR_DOLAR TO SOMA_VLR_USD29.
        ADD IT_ZGL030_DRE_ACM2-VLR_GRUPO TO SOMA_VLR_GRP29.
        ADD IT_ZGL030_DRE_ACM2-QTD_TON   TO SOMA_TON_ACM.
      ENDLOOP.

      IT_ZGL030_EST-QTD_ACM = IT_ZGL030_EST-QTD_ACM + IT_ZGL028_DRE_ACM-QTD_TON.
      IF TG_T005-WAERS EQ P_WAERS.
        IT_ZGL030_EST-VLR_ACM = IT_ZGL030_EST-VLR_ACM + IT_ZGL028_DRE_ACM-VLR_REA - SOMA_VLR_REA29.
      ELSEIF TG_T005-CURHA EQ P_WAERS.
        IT_ZGL030_EST-VLR_ACM = IT_ZGL030_EST-VLR_ACM + IT_ZGL028_DRE_ACM-VLR_DOLAR - SOMA_VLR_USD29.
      ELSEIF TG_T005-CURIN EQ P_WAERS.
        IT_ZGL030_EST-VLR_ACM = IT_ZGL030_EST-VLR_ACM + IT_ZGL028_DRE_ACM-VLR_GRUPO - SOMA_VLR_GRP29.
      ENDIF.

    ENDLOOP.
    TOT_VLR =  IT_ZGL030_EST-VLR_REA01 + IT_ZGL030_EST-VLR_REA02 + IT_ZGL030_EST-VLR_REA03 + IT_ZGL030_EST-VLR_REA04 +
               IT_ZGL030_EST-VLR_REA05 + IT_ZGL030_EST-VLR_REA06 + IT_ZGL030_EST-VLR_REA07 + IT_ZGL030_EST-VLR_REA08 +
               IT_ZGL030_EST-VLR_REA09 + IT_ZGL030_EST-VLR_REA10 + IT_ZGL030_EST-VLR_REA11 + IT_ZGL030_EST-VLR_REA12.
    TOT_QTD =  IT_ZGL030_EST-QTD_TON01 + IT_ZGL030_EST-QTD_TON02 + IT_ZGL030_EST-QTD_TON03 + IT_ZGL030_EST-QTD_TON04 +
               IT_ZGL030_EST-QTD_TON05 + IT_ZGL030_EST-QTD_TON06 + IT_ZGL030_EST-QTD_TON07 + IT_ZGL030_EST-QTD_TON08 +
               IT_ZGL030_EST-QTD_TON09 + IT_ZGL030_EST-QTD_TON10 + IT_ZGL030_EST-QTD_TON11 + IT_ZGL030_EST-QTD_TON12.
  ENDIF.


  IF NOT P_ZGL015_DRE_EST07 IS INITIAL.

    DELETE ADJACENT DUPLICATES FROM IT_ZGL030_EST COMPARING ALL FIELDS.
    LOOP AT IT_ZGL015_DRE_EST07 WHERE NIVEL EQ P_ZGL015_DRE_EST07-NIVEL.
      LOOP AT IT_ZGL030_EST INTO WL_ZGL030_EST WHERE NIVEL(2) = IT_ZGL015_DRE_EST07-NIVEL_AGPD.
        SOMA_VLR_REA01 = SOMA_VLR_REA01 + WL_ZGL030_EST-VLR_REA01.
        SOMA_VLR_REA02 = SOMA_VLR_REA02 + WL_ZGL030_EST-VLR_REA02.
        SOMA_VLR_REA03 = SOMA_VLR_REA03 + WL_ZGL030_EST-VLR_REA03.
        SOMA_VLR_REA04 = SOMA_VLR_REA04 + WL_ZGL030_EST-VLR_REA04.
        SOMA_VLR_REA05 = SOMA_VLR_REA05 + WL_ZGL030_EST-VLR_REA05.
        SOMA_VLR_REA06 = SOMA_VLR_REA06 + WL_ZGL030_EST-VLR_REA06.
        SOMA_VLR_REA07 = SOMA_VLR_REA07 + WL_ZGL030_EST-VLR_REA07.
        SOMA_VLR_REA08 = SOMA_VLR_REA08 + WL_ZGL030_EST-VLR_REA08.
        SOMA_VLR_REA09 = SOMA_VLR_REA09 + WL_ZGL030_EST-VLR_REA09.
        SOMA_VLR_REA10 = SOMA_VLR_REA10 + WL_ZGL030_EST-VLR_REA10.
        SOMA_VLR_REA11 = SOMA_VLR_REA11 + WL_ZGL030_EST-VLR_REA11.
        SOMA_VLR_REA12 = SOMA_VLR_REA12 + WL_ZGL030_EST-VLR_REA12.
        SOMA_VLR_ACM = SOMA_VLR_ACM + WL_ZGL030_EST-VLR_ACM.
      ENDLOOP.
    ENDLOOP.

    IT_ZGL030_EST-NIVEL   = P_ZGL015_DRE_EST07-NIVEL.
    IT_ZGL030_EST-VLR_REA01 = SOMA_VLR_REA01.
    IT_ZGL030_EST-VLR_REA02 = SOMA_VLR_REA02.
    IT_ZGL030_EST-VLR_REA03 = SOMA_VLR_REA03.
    IT_ZGL030_EST-VLR_REA04 = SOMA_VLR_REA04.
    IT_ZGL030_EST-VLR_REA05 = SOMA_VLR_REA05.
    IT_ZGL030_EST-VLR_REA06 = SOMA_VLR_REA06.
    IT_ZGL030_EST-VLR_REA07 = SOMA_VLR_REA07.
    IT_ZGL030_EST-VLR_REA08 = SOMA_VLR_REA08.
    IT_ZGL030_EST-VLR_REA09 = SOMA_VLR_REA09.
    IT_ZGL030_EST-VLR_REA10 = SOMA_VLR_REA10.
    IT_ZGL030_EST-VLR_REA11 = SOMA_VLR_REA11.
    IT_ZGL030_EST-VLR_REA12 = SOMA_VLR_REA12.
    IT_ZGL030_EST-VLR_ACM = SOMA_VLR_ACM.
    IT_ZGL030_EST-NITXT   = P_ZGL015_DRE_EST02-NITXT.

    CLEAR: SOMA_VLR_REA01,
           SOMA_VLR_REA02,
           SOMA_VLR_REA03,
           SOMA_VLR_REA04,
           SOMA_VLR_REA05,
           SOMA_VLR_REA06,
           SOMA_VLR_REA07,
           SOMA_VLR_REA08,
           SOMA_VLR_REA09,
           SOMA_VLR_REA10,
           SOMA_VLR_REA11,
           SOMA_VLR_REA12,
           SOMA_VLR_ACM.
  ENDIF.

  IF SY-UCOMM NE OK_CEXCEL.
    APPEND IT_ZGL030_EST.
  ENDIF.
ENDFORM.                    "INSERT_EST
