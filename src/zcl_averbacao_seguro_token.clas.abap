class ZCL_AVERBACAO_SEGURO_TOKEN definition
  public
  final
  create public .

public section.

  interfaces ZIF_CADASTRO .
  interfaces ZIF_PESQUISA .

  aliases CK_ALTEROU
    for ZIF_CADASTRO~CK_ALTEROU .
  aliases EXCLUIR_REGISTRO
    for ZIF_CADASTRO~EXCLUIR_REGISTRO .
  aliases GET_REGISTRO
    for ZIF_CADASTRO~GET_REGISTRO .
  aliases GRAVAR_REGISTRO
    for ZIF_CADASTRO~GRAVAR_REGISTRO .
  aliases LIMPAR_REGISTRO
    for ZIF_CADASTRO~LIMPAR_REGISTRO .
  aliases NOVO_REGISTRO
    for ZIF_CADASTRO~NOVO_REGISTRO .
  aliases SET_REGISTRO
    for ZIF_CADASTRO~SET_REGISTRO .
  aliases VALIDAR_EXCLUSAO
    for ZIF_CADASTRO~VALIDAR_EXCLUSAO .
  aliases VALIDAR_REGISTRO
    for ZIF_CADASTRO~VALIDAR_REGISTRO .
  aliases VALIDA_ATRIBUTO_ALTERAVEL
    for ZIF_CADASTRO~VALIDA_ATRIBUTO_ALTERAVEL .

  methods GET_TOKEN
    returning
      value(R_ZLEST0145) type ZLEST0145 .
  methods SET_BUKRS
    importing
      !I_BUKRS type BUKRS .
  methods SET_BRANCH
    importing
      !I_BRANCH type J_1BBRANC_ .
  methods SET_NR_TOKEN
    importing
      !I_NR_TOKEN type ZDE_NR_TOKEN .
  methods SET_DT_VALIDADE
    importing
      !I_DT_VALIDADE type ZDE_DT_VALIDADE .
protected section.
private section.

  data TOKEN type ZLEST0145 .
ENDCLASS.



CLASS ZCL_AVERBACAO_SEGURO_TOKEN IMPLEMENTATION.


  METHOD GET_TOKEN.
    R_ZLEST0145 = ME->TOKEN.
  ENDMETHOD.


  METHOD SET_BRANCH.

    IF ME->TOKEN-BRANCH NE I_BRANCH.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.

    ME->TOKEN-BRANCH = I_BRANCH.

  ENDMETHOD.


  METHOD SET_BUKRS.

    IF ME->TOKEN-BUKRS NE I_BUKRS.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.

    ME->TOKEN-BUKRS = I_BUKRS.

  ENDMETHOD.


  method SET_DT_VALIDADE.

    IF ME->TOKEN-DT_VALIDADE NE I_DT_VALIDADE.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.

    ME->TOKEN-DT_VALIDADE = I_DT_VALIDADE.

  endmethod.


  method SET_NR_TOKEN.

    IF ME->TOKEN-NR_TOKEN NE I_NR_TOKEN.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.

    ME->TOKEN-NR_TOKEN = I_NR_TOKEN.

  endmethod.


  METHOD ZIF_CADASTRO~EXCLUIR_REGISTRO.

    I_EXCLUIU = ABAP_FALSE.

    IF ME->VALIDAR_EXCLUSAO( ) EQ ABAP_TRUE.

      DELETE FROM ZLEST0145 WHERE CD_TOKEN EQ ME->TOKEN-CD_TOKEN.
      COMMIT WORK.
      I_EXCLUIU = ABAP_TRUE.
      MESSAGE S002.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~GET_REGISTRO.

    MOVE-CORRESPONDING ME->TOKEN TO E_REGISTRO.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~GRAVAR_REGISTRO.

    DATA: LC_ITEM TYPE ZSDT0001_ITEM-CD_ITEM.

    I_GRAVOU = ABAP_FALSE.

    IF ME->CK_ALTEROU EQ ABAP_TRUE.

      IF ME->VALIDAR_REGISTRO( ) EQ ABAP_TRUE.

        IF ME->TOKEN-CD_TOKEN IS INITIAL.
          CALL FUNCTION 'NUMBER_GET_NEXT'
            EXPORTING
              NR_RANGE_NR             = '02'
              OBJECT                  = 'ZLESAVSEG'
            IMPORTING
              NUMBER                  = ME->TOKEN-CD_TOKEN
            EXCEPTIONS
              INTERVAL_NOT_FOUND      = 1
              NUMBER_RANGE_NOT_INTERN = 2
              OBJECT_NOT_FOUND        = 3
              QUANTITY_IS_0           = 4
              QUANTITY_IS_NOT_1       = 5
              INTERVAL_OVERFLOW       = 6
              BUFFER_OVERFLOW         = 7
              OTHERS                  = 8.

          IF SY-SUBRC IS NOT INITIAL.
            RAISE EXCEPTION TYPE ZCX_CADASTRO
              EXPORTING
                TEXTID = VALUE #( MSGID = SY-MSGID
                                  MSGNO = SY-MSGNO
                                  ATTR1 = CONV #( SY-MSGV1 )
                                  ATTR2 = CONV #( SY-MSGV2 )
                                  ATTR3 = CONV #( SY-MSGV3 )
                                  ATTR4 = CONV #( SY-MSGV4 ) )
                MSGID  = SY-MSGID
                MSGNO  = SY-MSGNO
                MSGTY  = 'E'
                MSGV1  = SY-MSGV1
                MSGV2  = SY-MSGV2
                MSGV3  = SY-MSGV3
                MSGV4  = SY-MSGV4.
          ENDIF.

        ENDIF.

        ME->TOKEN-DT_CADASTRO = SY-DATUM.
        ME->TOKEN-HR_CADASTRO = SY-UZEIT.
        ME->TOKEN-US_CADASTRO = SY-UNAME.

        MODIFY ZLEST0145 FROM ME->TOKEN.
        COMMIT WORK.
        ME->CK_ALTEROU = ABAP_FALSE.
        I_GRAVOU = ABAP_TRUE.
        MESSAGE S001.
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~LIMPAR_REGISTRO.

    CLEAR: ME->TOKEN.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~NOVO_REGISTRO.
    ME->LIMPAR_REGISTRO( ).
  ENDMETHOD.


  METHOD ZIF_CADASTRO~SET_REGISTRO.

    ME->LIMPAR_REGISTRO( ).

    SELECT SINGLE * INTO ME->TOKEN FROM ZLEST0145 WHERE CD_TOKEN EQ I_ID_REGISTRO.

    ME->CK_ALTEROU = ABAP_FALSE.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~VALIDAR_EXCLUSAO.

    E_VALIDOU = ABAP_FALSE.


    SELECT SINGLE * INTO @DATA(WA_ZLEST0143) FROM ZLEST0143 WHERE CD_TOKEN EQ @ME->TOKEN-CD_TOKEN.

    IF SY-SUBRC IS INITIAL.
      MESSAGE S010 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    E_VALIDOU = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~VALIDAR_REGISTRO.

    E_VALIDOU = ABAP_FALSE.

*011  Deve ser Informado e Empresa!
*012  Deve ser Informado o Local de NegÃ³cio!
*013  Deve ser Informado o Nr. do TOKEN!
*014  Deve ser Informado a Data de Validade!

    IF ME->TOKEN-BUKRS IS INITIAL.
      MESSAGE S011 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ME->TOKEN-BRANCH IS INITIAL.
      MESSAGE S012 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ME->TOKEN-NR_TOKEN IS INITIAL.
      MESSAGE S013 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ME->TOKEN-DT_VALIDADE IS INITIAL.
      MESSAGE S014 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    E_VALIDOU = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~VALIDA_ATRIBUTO_ALTERAVEL.

    R_PERMITIDO = ABAP_TRUE.

    IF I_CAMPO EQ 'CD_TOKEN' OR
       I_CAMPO EQ 'DT_CADASTRO' OR
       I_CAMPO EQ 'HR_CADASTRO' OR
       I_CAMPO EQ 'US_CADASTRO'.
      R_PERMITIDO = ABAP_FALSE.
    ENDIF.

    CHECK ME->TOKEN-CD_TOKEN IS NOT INITIAL.

    IF I_CAMPO EQ 'BUKRS' OR
       I_CAMPO EQ 'BRANCH' OR
       I_CAMPO EQ 'NR_TOKEN'.
      R_PERMITIDO = ABAP_FALSE.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_PESQUISA~PESQUISAR.

    DATA: LC_FILTRO  TYPE ZDE_ZLEST0145_FILTRO,
          LC_RETORNO TYPE ZDE_ZLEST0145_T.

    MOVE I_FILTROS TO LC_FILTRO.

    CLEAR: E_REGISTROS, E_PESQUISOU.

    SELECT *
      INTO TABLE LC_RETORNO
      FROM ZLEST0145
     WHERE CD_TOKEN    IN LC_FILTRO-CD_TOKEN
       AND BUKRS       IN LC_FILTRO-BUKRS
       AND BRANCH      IN LC_FILTRO-BRANCH
       AND NR_TOKEN    IN LC_FILTRO-NR_TOKEN
       AND DT_VALIDADE IN LC_FILTRO-DT_VALIDADE
       AND DT_CADASTRO IN LC_FILTRO-DT_CADASTRO
       AND US_CADASTRO IN LC_FILTRO-US_CADASTRO.

    CHECK SY-SUBRC IS INITIAL.

    E_REGISTROS = LC_RETORNO.
    E_PESQUISOU = ABAP_TRUE.

  ENDMETHOD.
ENDCLASS.
