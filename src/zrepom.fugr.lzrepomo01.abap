*----------------------------------------------------------------------*
***INCLUDE LZREPOMO01.
*----------------------------------------------------------------------*


CLASS LCL_ALV_TOOLBAR DEFINITION.
  PUBLIC SECTION.
*Constructor
    METHODS: CONSTRUCTOR         IMPORTING IO_ALV_GRID TYPE REF TO CL_GUI_ALV_GRID,
      ON_TOOLBAR          FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID IMPORTING E_OBJECT,
      HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID IMPORTING E_UCOMM.
ENDCLASS.                    "lcl_alv_toolbar DEFINITION

DATA: CTL_ALV_0101            TYPE REF TO CL_GUI_ALV_GRID,
      CTL_CON_0101            TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      GS_LAY_0101             TYPE LVC_S_LAYO,
      GS_VAR_0101             TYPE DISVARIANT,
      IT_CATALOG_0101         TYPE LVC_T_FCAT,
      IT_EXCLUDE_0101         TYPE UI_FUNCTIONS,
      IT_ZLEST0122_SEL_ALV    TYPE TABLE OF ZDE_ZLEST0122_ALV WITH HEADER LINE,
      WA_EXCLUDE_0101         LIKE LINE OF IT_EXCLUDE_0101,
      OBG_TOOLBAR_0101        TYPE REF TO LCL_ALV_TOOLBAR,
      OBJ_TOOLBARMANAGER_0101 TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER.

DATA: GS_SCROLL_COL_0101 TYPE LVC_S_COL,
      GS_SCROLL_ROW_0101 TYPE LVC_S_ROID.

*----------------------------------------------------------------------*
*       CLASS LCL_ALV_TOOLBAR IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_ALV_TOOLBAR IMPLEMENTATION.

  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT OBJ_TOOLBARMANAGER_0101
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.

  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    DATA: TY_TOOLBAR   TYPE STB_BUTTON.
*    "Separador
    TY_TOOLBAR-BUTN_TYPE = 3.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    "Incluir Percurso
    TY_TOOLBAR-ICON      = ICON_CREATE_TEXT.
    TY_TOOLBAR-FUNCTION  = 'INCLUIR'.
    TY_TOOLBAR-QUICKINFO = TEXT-008.
    TY_TOOLBAR-TEXT      = TEXT-008.
    TY_TOOLBAR-BUTN_TYPE = 0.
    TY_TOOLBAR-DISABLED  = CK_CONSULTA.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    "Editar Percurso
    TY_TOOLBAR-ICON      = ICON_CHANGE_TEXT.
    TY_TOOLBAR-FUNCTION  = 'EDITAR'.
    TY_TOOLBAR-QUICKINFO = TEXT-010.
    TY_TOOLBAR-TEXT      = TEXT-010.
    TY_TOOLBAR-BUTN_TYPE = 0.
    TY_TOOLBAR-DISABLED  = CK_CONSULTA.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    "Deletar Percurso
    TY_TOOLBAR-ICON      = ICON_DELETE.
    TY_TOOLBAR-FUNCTION  = 'EXCLUIR'.
    TY_TOOLBAR-QUICKINFO = TEXT-009.
    TY_TOOLBAR-TEXT      = TEXT-009.
    TY_TOOLBAR-BUTN_TYPE = 0.
    TY_TOOLBAR-DISABLED  = CK_CONSULTA.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR: TY_TOOLBAR.

    CALL METHOD OBJ_TOOLBARMANAGER_0101->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    DATA: ET_INDEX_ROWS	  TYPE LVC_T_ROW,
          I_ZLEST0122_ANT	TYPE ZLEST0122,
          I_ZLEST0122	    TYPE ZLEST0122.

    CASE E_UCOMM.
      WHEN 'INCLUIR'.

        CLEAR: ZDE_ZLEST0122_ALV.
        CLEAR: CK_ALTEROU_PERCURSO.
        ZDE_ZLEST0122_ALV-CD_PAIS = 'BR'.
        CALL SCREEN 0103 STARTING AT 05 05.

        IF CK_ALTEROU_PERCURSO EQ ABAP_TRUE.
          MOVE-CORRESPONDING ZDE_ZLEST0122_ALV TO I_ZLEST0122.
          OBJ_ROTA->INCLUIR_PERCURSO( EXPORTING I_ZLEST0122 = I_ZLEST0122 ).
        ENDIF.

      WHEN 'EXCLUIR' OR 'EDITAR'.

        CALL METHOD CTL_ALV_0101->GET_SELECTED_ROWS
          IMPORTING
            ET_INDEX_ROWS = ET_INDEX_ROWS.

        CLEAR: IT_ZLEST0122_SEL_ALV[].

        IF ET_INDEX_ROWS[] IS INITIAL.
          READ TABLE IT_ZLEST0122_ALV INTO DATA(WA_RETORNO_ALV) INDEX 1.
          CHECK SY-SUBRC IS INITIAL.
          APPEND WA_RETORNO_ALV TO IT_ZLEST0122_SEL_ALV.
        ELSE.
          LOOP AT ET_INDEX_ROWS INTO DATA(WA_INDEX_ROWS).
            READ TABLE IT_ZLEST0122_ALV INTO WA_RETORNO_ALV INDEX WA_INDEX_ROWS-INDEX.
            APPEND WA_RETORNO_ALV TO IT_ZLEST0122_SEL_ALV.
          ENDLOOP.
        ENDIF.

        CASE E_UCOMM.
          WHEN 'EXCLUIR'.

            LOOP AT IT_ZLEST0122_SEL_ALV INTO DATA(WA_ZLEST0122_SEL_ALV).
              OBJ_ROTA->EXCLUIR_PERCURSO(
                EXPORTING
                  I_ID_ROTA_REPOM     = WA_ZLEST0122_SEL_ALV-ID_ROTA_REPOM
                  I_ID_PERCURSO_REPOM = WA_ZLEST0122_SEL_ALV-ID_PERCURSO_REPOM ).
            ENDLOOP.

          WHEN 'EDITAR'.

            LOOP AT IT_ZLEST0122_SEL_ALV INTO WA_ZLEST0122_SEL_ALV.

              DATA(LC_PERCURSO_ORIGINAL) = WA_ZLEST0122_SEL_ALV.
              ZDE_ZLEST0122_ALV = WA_ZLEST0122_SEL_ALV.

              CLEAR: CK_ALTEROU_PERCURSO.
              CALL SCREEN 0103 STARTING AT 05 05.

              IF CK_ALTEROU_PERCURSO EQ ABAP_TRUE.
                MOVE-CORRESPONDING LC_PERCURSO_ORIGINAL TO I_ZLEST0122_ANT.
                MOVE-CORRESPONDING ZDE_ZLEST0122_ALV TO I_ZLEST0122.
                OBJ_ROTA->EDITAR_PERCURSO(
                  EXPORTING
                    I_ZLEST0122_ANT = I_ZLEST0122_ANT
                    I_ZLEST0122     = I_ZLEST0122 ).
              ENDIF.

            ENDLOOP.

        ENDCASE.

    ENDCASE.

    CLEAR: IT_ZLEST0122[], IT_ZLEST0122_ALV[].

    OBJ_ROTA->GET_PERCURSOS( IMPORTING E_PERCURSOS = DATA(IT_ZLEST0122_T) ).

    LOOP AT IT_ZLEST0122_T INTO DATA(WA_ZLEST0122_T).
      APPEND WA_ZLEST0122_T TO IT_ZLEST0122.
    ENDLOOP.

    LOOP AT IT_ZLEST0122 INTO DATA(LC_WA_ZLEST0122).
      CLEAR: WA_ZLEST0122_ALV.
      MOVE-CORRESPONDING LC_WA_ZLEST0122 TO WA_ZLEST0122_ALV.
      APPEND WA_ZLEST0122_ALV TO IT_ZLEST0122_ALV.
    ENDLOOP.

    LEAVE TO SCREEN 0100.

  ENDMETHOD. "zm_handle_user_command

ENDCLASS.                    "LCL_ALV_TOOLBAR_N55 IMPLEMENTATION

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.

  CLEAR: IT_UCOMM.

  IF CK_CONSULTA = ABAP_TRUE.
    APPEND OK_GRAVAR TO IT_UCOMM.
  ENDIF.

  SET PF-STATUS 'PF0100' EXCLUDING IT_UCOMM.
  IF CK_CONSULTA = ABAP_TRUE.
    SET TITLEBAR 'TL0100' WITH TEXT-001.
  ELSE.
    CASE CK_NOVA_ROTA.
      WHEN ABAP_TRUE.
        SET TITLEBAR 'TL0100' WITH TEXT-002.
      WHEN ABAP_FALSE.
        SET TITLEBAR 'TL0100' WITH TEXT-003.
    ENDCASE.
  ENDIF.

  IF CK_CONSULTA EQ ABAP_TRUE .
    LOOP AT SCREEN.
      SCREEN-INPUT = 0.
      MODIFY SCREEN.
    ENDLOOP.
  ELSEIF CK_NOVA_ROTA EQ ABAP_FALSE.
    LOOP AT SCREEN.
      IF SCREEN-GROUP1 EQ 'A1'.
        SCREEN-INPUT = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF CK_ALTEROU_0100 EQ ABAP_TRUE.
    IF ZDE_ZLEST0121_ALV-BUKRS IS NOT INITIAL.
      SELECT SINGLE BUTXT INTO ZDE_ZLEST0121_ALV-BUTXT
        FROM T001
       WHERE BUKRS EQ ZDE_ZLEST0121_ALV-BUKRS.

      IF ZDE_ZLEST0121_ALV-BRANCH IS NOT INITIAL.
        SELECT SINGLE NAME INTO ZDE_ZLEST0121_ALV-NAME
          FROM J_1BBRANCH
         WHERE BUKRS EQ ZDE_ZLEST0121_ALV-BUKRS
           AND BRANCH EQ ZDE_ZLEST0121_ALV-BRANCH.
      ENDIF.
    ENDIF.

    IF ZDE_ZLEST0121_ALV-CD_CID_ORIGEM IS NOT INITIAL.
      SELECT SINGLE TEXT INTO ZDE_ZLEST0121_ALV-DS_CID_ORIGEM
        FROM J_1BTXJURT
       WHERE SPRAS EQ SY-LANGU
         AND COUNTRY EQ ZDE_ZLEST0121_ALV-CD_PAIS
         AND TAXJURCODE EQ ZDE_ZLEST0121_ALV-CD_CID_ORIGEM.
    ENDIF.

    IF ZDE_ZLEST0121_ALV-CD_CID_DESTINO IS NOT INITIAL.
      SELECT SINGLE TEXT INTO ZDE_ZLEST0121_ALV-DS_CID_DESTINO
        FROM J_1BTXJURT
       WHERE SPRAS EQ SY-LANGU
         AND COUNTRY EQ ZDE_ZLEST0121_ALV-CD_PAIS
         AND TAXJURCODE EQ ZDE_ZLEST0121_ALV-CD_CID_DESTINO.
    ENDIF.
  ENDIF.

  CK_ALTEROU_0100 = ABAP_FALSE.

  IF CTL_CON_0101 IS INITIAL.

    CREATE OBJECT CTL_CON_0101
      EXPORTING
        CONTAINER_NAME = 'ALV_0101'.

    CREATE OBJECT CTL_ALV_0101
      EXPORTING
        I_PARENT = CTL_CON_0101.

    PERFORM FILL_IT_FIELDCATALOG_0101.
*   Fill info for layout variant

    PERFORM FILL_GS_VARIANT_0101.
*   Set layout parameters for ALV grid

    CREATE OBJECT OBG_TOOLBAR_0101
      EXPORTING
        IO_ALV_GRID = CTL_ALV_0101.

    SET HANDLER OBG_TOOLBAR_0101->ON_TOOLBAR FOR CTL_ALV_0101.
    SET HANDLER OBG_TOOLBAR_0101->HANDLE_USER_COMMAND FOR CTL_ALV_0101.

    GS_LAY_0101-GRID_TITLE = TEXT-004.
    GS_LAY_0101-SEL_MODE   = 'A'.
    GS_LAY_0101-ZEBRA      = ABAP_TRUE.

    CALL METHOD CTL_ALV_0101->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAY_0101
        IS_VARIANT           = GS_VAR_0101
        I_DEFAULT            = SPACE
        I_SAVE               = 'A'
        IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_0101
      CHANGING
        IT_FIELDCATALOG      = IT_CATALOG_0101
        IT_OUTTAB            = IT_ZLEST0122_ALV[].

    CALL METHOD CTL_ALV_0101->REFRESH_TABLE_DISPLAY.

  ELSE.
    CALL METHOD CTL_ALV_0101->REFRESH_TABLE_DISPLAY.
  ENDIF.

  CALL METHOD CTL_ALV_0101->GET_SCROLL_INFO_VIA_ID
    IMPORTING
      ES_COL_INFO = GS_SCROLL_COL_0101
      ES_ROW_NO   = GS_SCROLL_ROW_0101.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG_0101
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG_0101 .

  DATA: LC_COL_POS TYPE LVC_COLPOS.

  FIELD-SYMBOLS: <FS_CAT_0101> TYPE LVC_S_FCAT.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_ZLEST0122_ALV'
    CHANGING
      CT_FIELDCAT      = IT_CATALOG_0101.

  LC_COL_POS = 1.

  LOOP AT IT_CATALOG_0101 ASSIGNING <FS_CAT_0101>.
    CASE <FS_CAT_0101>-FIELDNAME.
      WHEN 'ID_ROTA'.
        <FS_CAT_0101>-OUTPUTLEN = 08.
      WHEN 'ID_ROTA_REPOM'.
        <FS_CAT_0101>-OUTPUTLEN = 08.
      WHEN 'ID_PERCURSO_REPOM'.
        <FS_CAT_0101>-OUTPUTLEN = 08.
      WHEN 'DS_PERCURSO_REPOM'.
        <FS_CAT_0101>-OUTPUTLEN = 40.
      WHEN 'CD_PAIS'.
        <FS_CAT_0101>-OUTPUTLEN = 5.
        <FS_CAT_0101>-NO_OUT = ABAP_TRUE.
      WHEN 'CD_CID_ORIGEM'.
        <FS_CAT_0101>-OUTPUTLEN = 10.
      WHEN 'DS_CID_ORIGEM'.
        <FS_CAT_0101>-OUTPUTLEN = 20.
      WHEN 'CD_CID_DESTINO'.
        <FS_CAT_0101>-OUTPUTLEN = 10.
      WHEN 'DS_CID_DESTINO'.
        <FS_CAT_0101>-OUTPUTLEN = 20.
      WHEN 'NR_KM_IDA'.
        <FS_CAT_0101>-OUTPUTLEN = 8.
      WHEN 'NR_KM_VOLTA'.
        <FS_CAT_0101>-OUTPUTLEN = 8.
      WHEN 'TP_PROC_TRANSP'.
        <FS_CAT_0101>-OUTPUTLEN = 05.
    ENDCASE.
  ENDLOOP.

ENDFORM.                    " FILL_IT_FIELDCATALOG_0101

*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT_0101
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FILL_GS_VARIANT_0101 .

  GS_VAR_0101-REPORT      = SY-REPID.
  GS_VAR_0101-HANDLE      = '0100'.
  GS_VAR_0101-LOG_GROUP   = ABAP_FALSE.
  GS_VAR_0101-USERNAME    = ABAP_FALSE.
  GS_VAR_0101-VARIANT     = ABAP_FALSE.
  GS_VAR_0101-TEXT        = ABAP_FALSE.
  GS_VAR_0101-DEPENDVARS  = ABAP_FALSE.

ENDFORM.                    " FILL_GS_VARIANT_0101
