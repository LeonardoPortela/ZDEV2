*----------------------------------------------------------------------*
***INCLUDE MZDRE0001_9008 .
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  STATUS_9008  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_9008 OUTPUT.

  SET PF-STATUS 'PF9003'.
  SET TITLEBAR 'TL9008'.

  CLEAR: VG_CENTRO_LUCRO,
         VG_CENTRO_LUCRO_2,
         VG_CENTRO_LUCRO_3,
         VG_CENTRO_LUCRO_4,
         VG_CENTRO_LUCRO_5.

  IF NOT ZGL015_DRE_EST05-PRCTR IS INITIAL.
    SELECT SINGLE LTEXT INTO VG_CENTRO_LUCRO
      FROM CEPCT
     WHERE SPRAS EQ SY-LANGU
       AND PRCTR EQ ZGL015_DRE_EST05-PRCTR
       AND KOKRS EQ ZGL015_DRE_EST05-KOKRS.
  ENDIF.

  IF NOT ( LS_PRCTR_2 IS INITIAL ).
    SELECT SINGLE LTEXT INTO VG_CENTRO_LUCRO_2
      FROM CEPCT
     WHERE SPRAS EQ SY-LANGU
       AND PRCTR EQ LS_PRCTR_2
       AND KOKRS EQ ZGL015_DRE_EST05-KOKRS.
  ENDIF.

  IF NOT ( LS_PRCTR_3 IS INITIAL ).
    SELECT SINGLE LTEXT INTO VG_CENTRO_LUCRO_3
      FROM CEPCT
     WHERE SPRAS EQ SY-LANGU
       AND PRCTR EQ LS_PRCTR_3
       AND KOKRS EQ ZGL015_DRE_EST05-KOKRS.
  ENDIF.

  IF NOT ( LS_PRCTR_4 IS INITIAL ).
    SELECT SINGLE LTEXT INTO VG_CENTRO_LUCRO_4
      FROM CEPCT
     WHERE SPRAS EQ SY-LANGU
       AND PRCTR EQ LS_PRCTR_4
       AND KOKRS EQ ZGL015_DRE_EST05-KOKRS.
  ENDIF.

  IF NOT ( LS_PRCTR_5 IS INITIAL ).
    SELECT SINGLE LTEXT INTO VG_CENTRO_LUCRO_5
      FROM CEPCT
     WHERE SPRAS EQ SY-LANGU
       AND PRCTR EQ LS_PRCTR_5
       AND KOKRS EQ ZGL015_DRE_EST05-KOKRS.
  ENDIF.

ENDMODULE.                 " STATUS_9008  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9008_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9008_EXIT INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.                 " USER_COMMAND_9008_EXIT  INPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9008  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9008 INPUT.

  DATA: VG_CCL             TYPE ZGL015_DRE_EST05,
        CCL_MSG            TYPE LTEXT,
        LC_BUKRS           TYPE BUKRS.

  IF OK_CODE_9008 EQ C_CONF.

    IF NOT ( ZGL015_DRE_EST05-PRCTR IS INITIAL ) .
      PERFORM VALIDA_CENTRO_EMPRESA USING ZGL015_DRE_EST05-PRCTR SY-SUBRC CHANGING LS_KOKRS_1 LC_BUKRS.
    ENDIF.
    CHECK SY-SUBRC IS INITIAL.

    IF NOT ( LS_PRCTR_2 IS INITIAL ) .
      PERFORM VALIDA_CENTRO_EMPRESA USING LS_PRCTR_2 SY-SUBRC CHANGING LS_KOKRS_2 LC_BUKRS.
    ENDIF.
    CHECK SY-SUBRC IS INITIAL.

    IF NOT ( LS_PRCTR_3 IS INITIAL ) .
      PERFORM VALIDA_CENTRO_EMPRESA USING LS_PRCTR_3 SY-SUBRC CHANGING LS_KOKRS_3 LC_BUKRS.
    ENDIF.
    CHECK SY-SUBRC IS INITIAL.

    IF NOT ( LS_PRCTR_4 IS INITIAL ) .
      PERFORM VALIDA_CENTRO_EMPRESA USING LS_PRCTR_4 SY-SUBRC CHANGING LS_KOKRS_4 LC_BUKRS.
    ENDIF.
    CHECK SY-SUBRC IS INITIAL.

    IF NOT ( LS_PRCTR_5 IS INITIAL ) .
      PERFORM VALIDA_CENTRO_EMPRESA USING LS_PRCTR_5 SY-SUBRC CHANGING LS_KOKRS_5 LC_BUKRS.
    ENDIF.
    CHECK SY-SUBRC IS INITIAL.

    IF NOT ( ZGL015_DRE_EST05-PRCTR IS INITIAL ) .
      ZGL015_DRE_EST05-KOKRS = LS_KOKRS_1.
      PERFORM VALIDA_CENTRO_EMPRESA USING ZGL015_DRE_EST05-PRCTR SY-SUBRC CHANGING ZGL015_DRE_EST05-KOKRS ZGL015_DRE_EST05-BUKRS.

      SELECT SINGLE * INTO VG_CCL
        FROM ZGL015_DRE_EST05
       WHERE VERSN EQ ZGL015_DRE_EST05-VERSN
         AND NIVEL EQ ZGL015_DRE_EST05-NIVEL
         AND KTOPL EQ ZGL015_DRE_EST05-KTOPL
         AND SAKNR EQ ZGL015_DRE_EST05-SAKNR
         AND KOKRS EQ ZGL015_DRE_EST05-KOKRS
         AND PRCTR EQ ZGL015_DRE_EST05-PRCTR.

      IF SY-SUBRC IS INITIAL.
        CLEAR: CCL_MSG.
        CONCATENATE 'Centro de Lucro já cadastrado!' ZGL015_DRE_EST05-PRCTR INTO CCL_MSG SEPARATED BY SPACE.
        MESSAGE  CCL_MSG TYPE 'E'.
      ENDIF.

      MODIFY ZGL015_DRE_EST05.
      PRIM_DRE_NIVEL_RE = C_X.
      MOVE-CORRESPONDING ZGL015_DRE_EST05 TO ZGL015_DRE_EST02.
    ENDIF.

    IF NOT ( LS_PRCTR_2 IS INITIAL ).
      ZGL015_DRE_EST05-KOKRS = LS_KOKRS_2.
      PERFORM VALIDA_CENTRO_EMPRESA USING LS_PRCTR_2 SY-SUBRC CHANGING ZGL015_DRE_EST05-KOKRS ZGL015_DRE_EST05-BUKRS.

      SELECT SINGLE * INTO VG_CCL
        FROM ZGL015_DRE_EST05
       WHERE VERSN EQ ZGL015_DRE_EST05-VERSN
         AND NIVEL EQ ZGL015_DRE_EST05-NIVEL
         AND KTOPL EQ ZGL015_DRE_EST05-KTOPL
         AND SAKNR EQ ZGL015_DRE_EST05-SAKNR
         AND KOKRS EQ ZGL015_DRE_EST05-KOKRS
         AND PRCTR EQ LS_PRCTR_2.

      IF SY-SUBRC IS INITIAL.
        CLEAR: CCL_MSG.
        CONCATENATE 'Centro de Lucro já cadastrado!' LS_PRCTR_2 INTO CCL_MSG SEPARATED BY SPACE.
        MESSAGE  CCL_MSG TYPE 'E'.
      ENDIF.

      ZGL015_DRE_EST05-PRCTR = LS_PRCTR_2.
      MODIFY ZGL015_DRE_EST05.
      PRIM_DRE_NIVEL_RE = C_X.
      MOVE-CORRESPONDING ZGL015_DRE_EST05 TO ZGL015_DRE_EST02.

    ENDIF.

    IF NOT ( LS_PRCTR_3 IS INITIAL ).
      ZGL015_DRE_EST05-KOKRS = LS_KOKRS_3.
      PERFORM VALIDA_CENTRO_EMPRESA USING LS_PRCTR_3 SY-SUBRC CHANGING ZGL015_DRE_EST05-KOKRS ZGL015_DRE_EST05-BUKRS.

      SELECT SINGLE * INTO VG_CCL
        FROM ZGL015_DRE_EST05
       WHERE VERSN EQ ZGL015_DRE_EST05-VERSN
         AND NIVEL EQ ZGL015_DRE_EST05-NIVEL
         AND KTOPL EQ ZGL015_DRE_EST05-KTOPL
         AND SAKNR EQ ZGL015_DRE_EST05-SAKNR
         AND KOKRS EQ ZGL015_DRE_EST05-KOKRS
         AND PRCTR EQ LS_PRCTR_3.

      IF SY-SUBRC IS INITIAL.
        CLEAR: CCL_MSG.
        CONCATENATE 'Centro de Lucro já cadastrado!' LS_PRCTR_3 INTO CCL_MSG SEPARATED BY SPACE.
        MESSAGE  CCL_MSG TYPE 'E'.
      ENDIF.

      ZGL015_DRE_EST05-PRCTR = LS_PRCTR_3.
      MODIFY ZGL015_DRE_EST05.
      PRIM_DRE_NIVEL_RE = C_X.
      MOVE-CORRESPONDING ZGL015_DRE_EST05 TO ZGL015_DRE_EST02.
    ENDIF.

    IF NOT ( LS_PRCTR_4 IS INITIAL ) .
      ZGL015_DRE_EST05-KOKRS = LS_KOKRS_4.
      PERFORM VALIDA_CENTRO_EMPRESA USING LS_PRCTR_4 SY-SUBRC CHANGING ZGL015_DRE_EST05-KOKRS ZGL015_DRE_EST05-BUKRS.

      SELECT SINGLE * INTO VG_CCL
        FROM ZGL015_DRE_EST05
       WHERE VERSN EQ ZGL015_DRE_EST05-VERSN
         AND NIVEL EQ ZGL015_DRE_EST05-NIVEL
         AND KTOPL EQ ZGL015_DRE_EST05-KTOPL
         AND SAKNR EQ ZGL015_DRE_EST05-SAKNR
         AND KOKRS EQ ZGL015_DRE_EST05-KOKRS
         AND PRCTR EQ LS_PRCTR_4.

      IF SY-SUBRC IS INITIAL.
        CLEAR: CCL_MSG.
        CONCATENATE 'Centro de Lucro já cadastrado!' LS_PRCTR_4 INTO CCL_MSG SEPARATED BY SPACE.
        MESSAGE  CCL_MSG TYPE 'E'.
      ENDIF.

      ZGL015_DRE_EST05-PRCTR = LS_PRCTR_4.
      MODIFY ZGL015_DRE_EST05.
      PRIM_DRE_NIVEL_RE = C_X.
      MOVE-CORRESPONDING ZGL015_DRE_EST05 TO ZGL015_DRE_EST02.
    ENDIF.

    IF NOT ( LS_PRCTR_5 IS INITIAL ).
      ZGL015_DRE_EST05-KOKRS = LS_KOKRS_5.
      PERFORM VALIDA_CENTRO_EMPRESA USING LS_PRCTR_5 SY-SUBRC CHANGING ZGL015_DRE_EST05-KOKRS ZGL015_DRE_EST05-BUKRS.

      SELECT SINGLE * INTO VG_CCL
        FROM ZGL015_DRE_EST05
       WHERE VERSN EQ ZGL015_DRE_EST05-VERSN
         AND NIVEL EQ ZGL015_DRE_EST05-NIVEL
         AND KTOPL EQ ZGL015_DRE_EST05-KTOPL
         AND SAKNR EQ ZGL015_DRE_EST05-SAKNR
         AND KOKRS EQ ZGL015_DRE_EST05-KOKRS
         AND PRCTR EQ LS_PRCTR_5.

      IF SY-SUBRC IS INITIAL.
        CLEAR: CCL_MSG.
        CONCATENATE 'Centro de Lucro já cadastrado!' LS_PRCTR_5 INTO CCL_MSG SEPARATED BY SPACE.
        MESSAGE  CCL_MSG TYPE 'E'.
      ENDIF.

      ZGL015_DRE_EST05-PRCTR = LS_PRCTR_5.
      MODIFY ZGL015_DRE_EST05.
      PRIM_DRE_NIVEL_RE = C_X.
      MOVE-CORRESPONDING ZGL015_DRE_EST05 TO ZGL015_DRE_EST02.
    ENDIF.

    CALL METHOD G_TREE->DELETE_ALL_NODES.

    CLEAR: LS_KOKRS_5, LS_KOKRS_4, LS_KOKRS_3, LS_KOKRS_2, LS_KOKRS_1.

    LEAVE TO SCREEN 0.
  ENDIF.

ENDMODULE.                 " USER_COMMAND_9008  INPUT

**&---------------------------------------------------------------------*
**&      Module  VALIDA_AREA_CUSTO_01  INPUT
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
*MODULE VALIDA_AREA_CUSTO_01 INPUT.
*  DATA: LC_BUKRS_01 TYPE KOKRS.
*  PERFORM VALIDA_CENTRO_EMPRESA USING ZGL015_DRE_EST05-PRCTR SY-SUBRC CHANGING LS_KOKRS_1 LC_BUKRS_01.
*  IF SY-SUBRC IS INITIAL.
*    CK_ERRO_CLUCRO = ABAP_FALSE.
*  ELSE.
*    CK_ERRO_CLUCRO = ABAP_TRUE.
*  ENDIF.
*ENDMODULE.
*
**&---------------------------------------------------------------------*
**&      Module  VALIDA_AREA_CUSTO_02  INPUT
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
*MODULE VALIDA_AREA_CUSTO_02 INPUT.
*  DATA: LC_BUKRS_02 TYPE KOKRS.
*  PERFORM VALIDA_CENTRO_EMPRESA USING LS_PRCTR_2 SY-SUBRC CHANGING LS_KOKRS_2 LC_BUKRS_02.
*  IF SY-SUBRC IS INITIAL.
*    CK_ERRO_CLUCRO = ABAP_FALSE.
*  ELSE.
*    CK_ERRO_CLUCRO = ABAP_TRUE.
*  ENDIF.
*ENDMODULE.
*
**&---------------------------------------------------------------------*
**&      Module  VALIDA_AREA_CUSTO_03  INPUT
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
*MODULE VALIDA_AREA_CUSTO_03 INPUT.
*  DATA: LC_BUKRS_03 TYPE KOKRS.
*  PERFORM VALIDA_CENTRO_EMPRESA USING LS_PRCTR_3 SY-SUBRC CHANGING LS_KOKRS_3 LC_BUKRS_03.
*  IF SY-SUBRC IS INITIAL.
*    CK_ERRO_CLUCRO = ABAP_FALSE.
*  ELSE.
*    CK_ERRO_CLUCRO = ABAP_TRUE.
*  ENDIF.
*ENDMODULE.
*
**&---------------------------------------------------------------------*
**&      Module  VALIDA_AREA_CUSTO_04  INPUT
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
*MODULE VALIDA_AREA_CUSTO_04 INPUT.
*  DATA: LC_BUKRS_04 TYPE KOKRS.
*  PERFORM VALIDA_CENTRO_EMPRESA USING LS_PRCTR_4 SY-SUBRC CHANGING LS_KOKRS_4 LC_BUKRS_04.
*  IF SY-SUBRC IS INITIAL.
*    CK_ERRO_CLUCRO = ABAP_FALSE.
*  ELSE.
*    CK_ERRO_CLUCRO = ABAP_TRUE.
*  ENDIF.
*ENDMODULE.
*
**&---------------------------------------------------------------------*
**&      Module  VALIDA_AREA_CUSTO_05  INPUT
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
*MODULE VALIDA_AREA_CUSTO_05 INPUT.
*  DATA: LC_BUKRS_05 TYPE KOKRS.
*  PERFORM VALIDA_CENTRO_EMPRESA USING LS_PRCTR_5 SY-SUBRC CHANGING LS_KOKRS_5 LC_BUKRS_05.
*  IF SY-SUBRC IS INITIAL.
*    CK_ERRO_CLUCRO = ABAP_FALSE.
*  ELSE.
*    CK_ERRO_CLUCRO = ABAP_TRUE.
*  ENDIF.
*ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  VALIDA_CENTRO_EMPRESA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ZGL015_DRE_EST05_PRCTR  text
*      -->P_LS_BUKRS_1  text
*----------------------------------------------------------------------*
FORM VALIDA_CENTRO_EMPRESA  USING    P_PRCTR TYPE PRCTR
                                     P_ERRO  TYPE SY-SUBRC
                            CHANGING P_KOKRS TYPE KOKRS
                                     P_BUKRS TYPE BUKRS.

  DATA: IT_CEPC       TYPE STANDARD TABLE OF CEPC.
  DATA: WA_CEPC       TYPE CEPC,
        WA_EMPRESA    TYPE TKA02,
        LC_QTD_LINHAS TYPE I.

  P_ERRO = 0.

  IF P_KOKRS IS INITIAL.
    SELECT * INTO TABLE IT_CEPC
      FROM CEPC
     WHERE PRCTR EQ P_PRCTR
       AND DATBI GE SY-DATUM.
  ELSE.
    "SELECT SINGLE * INTO WA_EMPRESA FROM TKA02 WHERE BUKRS EQ P_BUKRS.
    IF SY-SUBRC IS INITIAL.
      SELECT * INTO TABLE IT_CEPC
        FROM CEPC
       WHERE PRCTR EQ P_PRCTR
         AND DATBI GE SY-DATUM
         AND KOKRS EQ P_KOKRS.
    ELSE.
      P_ERRO = 1.
      MESSAGE I041(ZDRE) WITH P_KOKRS DISPLAY LIKE 'E'.
      P_ERRO = 1.
    ENDIF.
  ENDIF.

  SORT IT_CEPC BY KOKRS.
  DELETE ADJACENT DUPLICATES FROM IT_CEPC COMPARING KOKRS.

  DESCRIBE TABLE IT_CEPC LINES LC_QTD_LINHAS.

  IF LC_QTD_LINHAS GT 1.
    P_ERRO = 1.
    MESSAGE I042(ZDRE) WITH P_PRCTR DISPLAY LIKE 'E'.
    P_ERRO = 1.
  ELSEIF LC_QTD_LINHAS EQ 1.
    READ TABLE IT_CEPC INTO WA_CEPC INDEX 1.
    P_KOKRS = WA_CEPC-KOKRS.
    SELECT SINGLE BUKRS INTO P_BUKRS FROM TKA02 WHERE KOKRS EQ WA_CEPC-KOKRS.
  ELSE.
    P_ERRO = 1.
    MESSAGE I043(ZDRE) WITH P_PRCTR DISPLAY LIKE 'E'.
    P_ERRO = 1.
  ENDIF.

ENDFORM.
