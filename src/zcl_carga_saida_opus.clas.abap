class ZCL_CARGA_SAIDA_OPUS definition
  public
  final
  create public .

public section.

  interfaces ZIF_CARGA .
  PROTECTED SECTION.
  PRIVATE SECTION.

    ALIASES CARGA
      FOR ZIF_CARGA~CARGA .
    ALIASES CK_ALTEROU
      FOR ZIF_CARGA~CK_ALTEROU .
    ALIASES CLASSIFICACAO
      FOR ZIF_CARGA~CLASSIFICACAO .
    ALIASES CLASSIFICACAO_NOTAS
      FOR ZIF_CARGA~CLASSIFICACAO_NOTAS .
    ALIASES DOCUMENTO_FISCAL
      FOR ZIF_CARGA~DOCUMENTO_FISCAL .
    ALIASES RESULTADO
      FOR ZIF_CARGA~RESULTADO .
    ALIASES ST_GMO_NAO_TESTADO
      FOR ZIF_CARGA~ST_GMO_NAO_TESTADO .
    ALIASES ST_GMO_NEGATIVO
      FOR ZIF_CARGA~ST_GMO_NEGATIVO .
    ALIASES ST_GMO_POSITIVO
      FOR ZIF_CARGA~ST_GMO_POSITIVO .
    ALIASES ST_INTERFACE_AVISO
      FOR ZIF_CARGA~ST_INTERFACE_AVISO .
    ALIASES ST_INTERFACE_MIGO
      FOR ZIF_CARGA~ST_INTERFACE_MIGO .
    ALIASES ST_INTERFACE_MIRO
      FOR ZIF_CARGA~ST_INTERFACE_MIRO .
    ALIASES ST_MODEL_FISCAL_ELETRONICO
      FOR ZIF_CARGA~ST_MODEL_FISCAL_ELETRONICO .
    ALIASES ST_MODEL_FISCAL_PAPEL
      FOR ZIF_CARGA~ST_MODEL_FISCAL_PAPEL .
    ALIASES ST_STATUS_ABERTO
      FOR ZIF_CARGA~ST_STATUS_ABERTO .
    ALIASES ST_STATUS_CANCELADA
      FOR ZIF_CARGA~ST_STATUS_CANCELADA .
    ALIASES ST_STATUS_CONFERIDO
      FOR ZIF_CARGA~ST_STATUS_CONFERIDO .
    ALIASES ST_STATUS_ESTORNO_BLOQUEIO
      FOR ZIF_CARGA~ST_STATUS_ESTORNO_BLOQUEIO .
    ALIASES ST_STATUS_ESTORNO_ERRO
      FOR ZIF_CARGA~ST_STATUS_ESTORNO_ERRO .
    ALIASES ST_STATUS_ESTORNO_EXECUTADO
      FOR ZIF_CARGA~ST_STATUS_ESTORNO_EXECUTADO .
    ALIASES ST_STATUS_ESTORNO_SEM
      FOR ZIF_CARGA~ST_STATUS_ESTORNO_SEM .
    ALIASES ST_STATUS_ESTORNO_SOLICITADO
      FOR ZIF_CARGA~ST_STATUS_ESTORNO_SOLICITADO .
    ALIASES ST_STATUS_FECHADO
      FOR ZIF_CARGA~ST_STATUS_FECHADO .
    ALIASES ST_TP_CARACT_CLASS_ARDIDO
      FOR ZIF_CARGA~ST_TP_CARACT_CLASS_ARDIDO .
    ALIASES ST_TP_CARACT_CLASS_AVARIADO
      FOR ZIF_CARGA~ST_TP_CARACT_CLASS_AVARIADO .
    ALIASES ST_TP_CARACT_CLASS_ESVERDEADO
      FOR ZIF_CARGA~ST_TP_CARACT_CLASS_ESVERDEADO .
    ALIASES ST_TP_CARACT_CLASS_IMPUREZA
      FOR ZIF_CARGA~ST_TP_CARACT_CLASS_IMPUREZA .
    ALIASES ST_TP_CARACT_CLASS_QUEBRADO
      FOR ZIF_CARGA~ST_TP_CARACT_CLASS_QUEBRADO .
    ALIASES ST_TP_CARACT_CLASS_UMIDADE
      FOR ZIF_CARGA~ST_TP_CARACT_CLASS_UMIDADE .
    ALIASES ST_TP_FRETE_CFR
      FOR ZIF_CARGA~ST_TP_FRETE_CFR .
    ALIASES ST_TP_FRETE_CIF
      FOR ZIF_CARGA~ST_TP_FRETE_CIF .
    ALIASES ST_TP_FRETE_CIP
      FOR ZIF_CARGA~ST_TP_FRETE_CIP .
    ALIASES ST_TP_FRETE_CPT
      FOR ZIF_CARGA~ST_TP_FRETE_CPT .
    ALIASES ST_TP_FRETE_DAF
      FOR ZIF_CARGA~ST_TP_FRETE_DAF .
    ALIASES ST_TP_FRETE_DDP
      FOR ZIF_CARGA~ST_TP_FRETE_DDP .
    ALIASES ST_TP_FRETE_DDU
      FOR ZIF_CARGA~ST_TP_FRETE_DDU .
    ALIASES ST_TP_FRETE_DEQ
      FOR ZIF_CARGA~ST_TP_FRETE_DEQ .
    ALIASES ST_TP_FRETE_DES
      FOR ZIF_CARGA~ST_TP_FRETE_DES .
    ALIASES ST_TP_FRETE_EXW
      FOR ZIF_CARGA~ST_TP_FRETE_EXW .
    ALIASES ST_TP_FRETE_FAS
      FOR ZIF_CARGA~ST_TP_FRETE_FAS .
    ALIASES ST_TP_FRETE_FCA
      FOR ZIF_CARGA~ST_TP_FRETE_FCA .
    ALIASES ST_TP_FRETE_FOB
      FOR ZIF_CARGA~ST_TP_FRETE_FOB .
    ALIASES ADD_NOTA_FISCAL
      FOR ZIF_CARGA~ADD_NOTA_FISCAL .
    ALIASES BLOQUEAR_ENTRADA
      FOR ZIF_CARGA~BLOQUEAR_ENTRADA .
    ALIASES DESBLOQUEAR_ENTRADA
      FOR ZIF_CARGA~DESBLOQUEAR_ENTRADA .
    ALIASES EXCLUIR_NOTA_FISCAL
      FOR ZIF_CARGA~EXCLUIR_NOTA_FISCAL .
    ALIASES EXCLUIR_REGISTRO
      FOR ZIF_CARGA~EXCLUIR_REGISTRO .
    ALIASES FREE
      FOR ZIF_CARGA~FREE .
    ALIASES GERA_ERRO_GERAL
      FOR ZIF_CARGA~GERA_ERRO_GERAL .
    ALIASES GET_CALCULAR_SUBTOTAL
      FOR ZIF_CARGA~GET_CALCULAR_SUBTOTAL .
    ALIASES GET_CHECK_JOB_EXECUCAO
      FOR ZIF_CARGA~GET_CHECK_JOB_EXECUCAO .
    ALIASES GET_CHECK_JOB_EXECUCAO_ESTORNO
      FOR ZIF_CARGA~GET_CHECK_JOB_EXECUCAO_ESTORNO .
    ALIASES GET_FACTORY_TP_TRANSGENIA
      FOR ZIF_CARGA~GET_FACTORY_TP_TRANSGENIA .
    ALIASES GET_INFO_ALV_APRESENTACAO
      FOR ZIF_CARGA~GET_INFO_ALV_APRESENTACAO .
    ALIASES GET_INFO_ALV_APRESENTACAO_LOG
      FOR ZIF_CARGA~GET_INFO_ALV_APRESENTACAO_LOG .
    ALIASES GET_INFO_MESSAGEM_ESTORNO
      FOR ZIF_CARGA~GET_INFO_MESSAGEM_ESTORNO .
    ALIASES GET_INFO_ORDEM_VENDA
      FOR ZIF_CARGA~GET_INFO_ORDEM_VENDA .
    ALIASES GET_INFO_PLACA
      FOR ZIF_CARGA~GET_INFO_PLACA .
    ALIASES GET_LOGS_HISTORICO
      FOR ZIF_CARGA~GET_LOGS_HISTORICO .
    ALIASES GET_MENS_INTERFACE_ENTRADA
      FOR ZIF_CARGA~GET_MENS_INTERFACE_ENTRADA .
    ALIASES GET_NEW_ID_CARGA
      FOR ZIF_CARGA~GET_NEW_ID_CARGA .
    ALIASES GET_NEW_ID_CLASSIFICAO
      FOR ZIF_CARGA~GET_NEW_ID_CLASSIFICAO .
    ALIASES GET_NEW_ID_ENTRADA_ESTOQUE
      FOR ZIF_CARGA~GET_NEW_ID_ENTRADA_ESTOQUE .
    ALIASES GET_NOTA_FORNECEDOR_IE
      FOR ZIF_CARGA~GET_NOTA_FORNECEDOR_IE .
    ALIASES GET_PARTINER_ORDEM_VENDA
      FOR ZIF_CARGA~GET_PARTINER_ORDEM_VENDA .
    ALIASES GET_PEDIDO_COMPRA
      FOR ZIF_CARGA~GET_PEDIDO_COMPRA .
    ALIASES GET_RATEIA_DESCONTOS
      FOR ZIF_CARGA~GET_RATEIA_DESCONTOS .
    ALIASES GET_REGISTRO
      FOR ZIF_CARGA~GET_REGISTRO .
    ALIASES GET_RESULT_DESC_CLASSIFICACAO
      FOR ZIF_CARGA~GET_RESULT_DESC_CLASSIFICACAO .
    ALIASES GET_ROMANEIO_ENTRADA
      FOR ZIF_CARGA~GET_ROMANEIO_ENTRADA .
    ALIASES GET_ROMANEIO_SAIDA
      FOR ZIF_CARGA~GET_ROMANEIO_SAIDA .
    ALIASES GET_TP_STATUS
      FOR ZIF_CARGA~GET_TP_STATUS .
    ALIASES GRAVAR_REGISTRO
      FOR ZIF_CARGA~GRAVAR_REGISTRO .
    ALIASES LIMPAR_REGISTRO
      FOR ZIF_CARGA~LIMPAR_REGISTRO .
    ALIASES NOVO_REGISTRO
      FOR ZIF_CARGA~NOVO_REGISTRO .
    ALIASES PESQUISAR
      FOR ZIF_CARGA~PESQUISAR .
    ALIASES SET_ABRIR
      FOR ZIF_CARGA~SET_ABRIR .
    ALIASES SET_CANCELAR
      FOR ZIF_CARGA~SET_CANCELAR .
    ALIASES SET_CARGA
      FOR ZIF_CARGA~SET_CARGA .
    ALIASES SET_CONFERIDO
      FOR ZIF_CARGA~SET_CONFERIDO .
    ALIASES SET_DENQUEUE
      FOR ZIF_CARGA~SET_DENQUEUE .
    ALIASES SET_ENQUEUE
      FOR ZIF_CARGA~SET_ENQUEUE .
    ALIASES SET_FECHAR
      FOR ZIF_CARGA~SET_FECHAR .
    ALIASES SET_GERAR_ENTRADA_ESTOQUE
      FOR ZIF_CARGA~SET_GERAR_ENTRADA_ESTOQUE .
    ALIASES SET_GERAR_ESTORNO_ESTOQUE
      FOR ZIF_CARGA~SET_GERAR_ESTORNO_ESTOQUE .
    ALIASES SET_GERAR_ROMANEIO_ENTRADA
      FOR ZIF_CARGA~SET_GERAR_ROMANEIO_ENTRADA .
    ALIASES SET_GERAR_ROMANEIO_SAIDA
      FOR ZIF_CARGA~SET_GERAR_ROMANEIO_SAIDA .
    ALIASES SET_ID_CARGA
      FOR ZIF_CARGA~SET_ID_CARGA .
    ALIASES SET_ID_CLASSIFICACAO
      FOR ZIF_CARGA~SET_ID_CLASSIFICACAO .
    ALIASES SET_LOGS_ALTERACAO
      FOR ZIF_CARGA~SET_LOGS_ALTERACAO .
    ALIASES SET_ORDEM_CARREGAMENTO
      FOR ZIF_CARGA~SET_ORDEM_CARREGAMENTO .
    ALIASES SET_ORDEM_VENDA
      FOR ZIF_CARGA~SET_ORDEM_VENDA .
    ALIASES SET_PESOS_NOTAS
      FOR ZIF_CARGA~SET_PESOS_NOTAS .
    ALIASES SET_PROCESSAR_ENTRADA
      FOR ZIF_CARGA~SET_PROCESSAR_ENTRADA .
    ALIASES SET_PROCESSAR_ESTORNO
      FOR ZIF_CARGA~SET_PROCESSAR_ESTORNO .
    ALIASES SET_REGISTRO
      FOR ZIF_CARGA~SET_REGISTRO .
    ALIASES VALIDAR_EXCLUSAO
      FOR ZIF_CARGA~VALIDAR_EXCLUSAO .
    ALIASES VALIDAR_REGISTRO
      FOR ZIF_CARGA~VALIDAR_REGISTRO .
    ALIASES VALIDA_ATRIBUTO_ALTERAVEL
      FOR ZIF_CARGA~VALIDA_ATRIBUTO_ALTERAVEL .
    ALIASES VERIF_ESTORNO_PENDENTE
      FOR ZIF_CARGA~VERIF_ESTORNO_PENDENTE .
    ALIASES VERIF_ORDEM_CARREGAMENTO
      FOR ZIF_CARGA~VERIF_ORDEM_CARREGAMENTO .
ENDCLASS.



CLASS ZCL_CARGA_SAIDA_OPUS IMPLEMENTATION.


  METHOD ZIF_CARGA~ADD_NOTA_FISCAL.
    R_CARGA = ME.
  ENDMETHOD.


  METHOD ZIF_CARGA~ADD_ORDEM_VENDA.
    R_INSTANCIA = ME.
  ENDMETHOD.


  METHOD ZIF_CARGA~BLOQUEAR_ENTRADA.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~DESBLOQUEAR_ENTRADA.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~EXCLUIR_NOTA_FISCAL.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~EXCLUIR_REGISTRO.

    E_EXCLUIU = ABAP_FALSE.
    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~FREE.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~GERA_ERRO_GERAL.

    DATA: LC_TEXTO TYPE C LENGTH 200.
    LC_TEXTO = I_TEXTO.
    SY-MSGV1 = LC_TEXTO+000(50).
    SY-MSGV2 = LC_TEXTO+050(50).
    SY-MSGV3 = LC_TEXTO+100(50).
    SY-MSGV4 = LC_TEXTO+150(50).

    RAISE EXCEPTION TYPE ZCX_CARGA
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ERRO_GERAL-MSGID
                          MSGNO = ZCX_CARGA=>ZCX_ERRO_GERAL-MSGNO
                          ATTR1 = CONV #( SY-MSGV1 )
                          ATTR2 = CONV #( SY-MSGV2 )
                          ATTR3 = CONV #( SY-MSGV3 )
                          ATTR4 = CONV #( SY-MSGV4 ) )
        MSGID  = ZCX_CARGA=>ZCX_ERRO_GERAL-MSGID
        MSGNO  = ZCX_CARGA=>ZCX_ERRO_GERAL-MSGNO
        MSGTY  = 'E'
        MSGV1  = SY-MSGV1
        MSGV2  = SY-MSGV2
        MSGV3  = SY-MSGV3
        MSGV4  = SY-MSGV4.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CABECALHO_CARGA.

    R_CARGA = ME.

    SELECT SINGLE * INTO E_ZSDT0001CG FROM ZSDT0001CG WHERE ID_CARGA EQ I_ID_CARGA.
    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_NAO_ENCONTRADA-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_CARGA_NAO_ENCONTRADA-MSGNO
                            ATTR1 = CONV #( I_ID_CARGA ) )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_CARGA_NAO_ENCONTRADA-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_CARGA_NAO_ENCONTRADA-MSGID
          MSGV1  = CONV #( I_ID_CARGA ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CALCULAR_SUBTOTAL.
    R_CARGA = ME.
    E_PESO_SUBTOTAL = I_PESO_BRUTO - I_PESO_TARA.
  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CHECK_JOB_EXECUCAO.

    R_CARGA = ME.

*    TRY .
*        ZCL_JOB=>GET_JOB_EXECUCAO( I_JOB_NAME = ZCL_JOB=>ST_NAME_JOB_ENTRADA_ESTOQUE ).
*
*        RAISE EXCEPTION TYPE ZCX_CARGA
*          EXPORTING
*            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_JOB_ENTRADA_EXEC-MSGID MSGNO = ZCX_CARGA=>ZCX_JOB_ENTRADA_EXEC-MSGNO )
*            MSGTY  = 'E'
*            MSGID  = ZCX_CARGA=>ZCX_JOB_ENTRADA_EXEC-MSGID
*            MSGNO  = ZCX_CARGA=>ZCX_JOB_ENTRADA_EXEC-MSGNO.
*
*      CATCH ZCX_JOB.    "
*
*    ENDTRY.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CHECK_JOB_EXECUCAO_ESTORNO.

    R_CARGA = ME.

*    TRY .
*        ZCL_JOB=>GET_JOB_EXECUCAO( I_JOB_NAME = ZCL_JOB=>ST_NAME_JOB_ESTORNO_ESTOQUE ).
*
*        RAISE EXCEPTION TYPE ZCX_CARGA
*          EXPORTING
*            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_JOB_ESTORNO_EXEC-MSGID
*                              MSGNO = ZCX_CARGA=>ZCX_JOB_ESTORNO_EXEC-MSGNO )
*            MSGTY  = 'E'
*            MSGID  = ZCX_CARGA=>ZCX_JOB_ESTORNO_EXEC-MSGID
*            MSGNO  = ZCX_CARGA=>ZCX_JOB_ESTORNO_EXEC-MSGNO.
*
*      CATCH ZCX_JOB.    "
*
*    ENDTRY.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CK_CARGA_SEM_SOLIC_MANUT.

    R_INSTANCE = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CK_EXCLUIR_ROMANEIO_SAIDA.

    R_INSTANCIA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CK_GERA_SOBRA.

    R_INSTANCE = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CK_SAIDA_AUTOMATICA.

    R_INSTANCE = ME.

    SELECT SINGLE *
      FROM SETLEAF
      INTO @DATA(WA_SETLEAF)
     WHERE SETNAME EQ 'MAGGI_SAIDA_AUT_ZMM0127'
       AND VALFROM LE @ME->ZIF_CARGA~CARGA-ID_BRANCH
       AND VALTO GE @ME->ZIF_CARGA~CARGA-ID_BRANCH.

    CHECK SY-SUBRC IS NOT INITIAL.

    RAISE EXCEPTION TYPE ZCX_CARGA
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SAIDA_NAO_AUTOMATICA-MSGID MSGNO = ZCX_CARGA=>ZCX_SAIDA_NAO_AUTOMATICA-MSGNO )
        MSGTY  = 'E'
        MSGID  = ZCX_CARGA=>ZCX_SAIDA_NAO_AUTOMATICA-MSGID
        MSGNO  = ZCX_CARGA=>ZCX_SAIDA_NAO_AUTOMATICA-MSGNO.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CK_SOL_AJUSTE_NAO_PROC.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_DOCUMENTO_ENT_ESTORNADO.

    R_ESTORNADO = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_FACTORY_TP_TRANSGENIA.

*(Campo 1) IN_GMO
*(Campo 2) IN_SRR_DECLARADO
*(Campo 3) IN_SRR_DECLARADO_2
*(Campo 4) IN_TESTE_SRR_2
*(campo 5) IN_SRR_ORIGEM_PARTIC

    SELECT SINGLE * INTO @DATA(WA_MARA)
      FROM MARA
     WHERE MATNR EQ @ME->CARGA-ID_PRODUTO.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = WA_MARA-MATKL
      IMPORTING
        OUTPUT = WA_MARA-MATKL.

    CASE WA_MARA-MATKL.
      WHEN '700300'. "Resíduo de Soja

        E_TP_TRANSGENIA = 'CO'.
        EXIT.

      WHEN '700170'. "Milho

        E_TP_TRANSGENIA = 'D1'.
        EXIT.

      WHEN '700110'. "Soja

        CASE ME->CLASSIFICACAO-IN_GMO.

*1: Se campo 1 = NEGATIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:
*CONVENCIONAL (CO) Desmarcar "Negativo"
          WHEN ZIF_CARGA=>ST_GMO_NEGATIVO.
            E_TP_TRANSGENIA = 'CO'.
            EXIT.
*2: Se campo 1 = POSITIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:
*RR TESTADO (T1) Desmarcar "Positivo"
          WHEN ZIF_CARGA=>ST_GMO_POSITIVO.
            E_TP_TRANSGENIA = 'T1'.
            EXIT.
        ENDCASE.

*4: Se campo 3 = SIM, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:
*RR2 DECLARADO (D2)  Desmarcar "Sim"
        IF ME->CLASSIFICACAO-IN_SRR_DECLARADO_2 EQ ABAP_TRUE.
          E_TP_TRANSGENIA = 'D2'.
          EXIT.
        ENDIF.

        CASE ME->CLASSIFICACAO-IN_TESTE_SRR_2.
*5: Se campo 4 = POSITIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:
*RR2 TESTADO (T2)  Desmarcar "Positivo"
          WHEN ZIF_CARGA=>ST_GMO_POSITIVO.
            E_TP_TRANSGENIA = 'T2'.
            EXIT.
*6: Se campo 4 = NEGATIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:
*RR1 DECLARADO (D1)  Desmarcar "Negativo"
          WHEN ZIF_CARGA=>ST_GMO_NEGATIVO.
            E_TP_TRANSGENIA = 'D1'.
            EXIT.
        ENDCASE.

*5: Se campo 5 = SIM, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:
*PARTICIPANTE (PA) Desmarcar "Negativo"
        IF ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC EQ ABAP_TRUE.
          E_TP_TRANSGENIA = 'PA'.
          EXIT.
        ENDIF.

      WHEN OTHERS.
        E_TP_TRANSGENIA = SPACE.
    ENDCASE.

    RAISE EXCEPTION TYPE ZCX_CARGA
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ERRO_DETERMINAR_TRANSG-MSGID
                          MSGNO = ZCX_CARGA=>ZCX_ERRO_DETERMINAR_TRANSG-MSGNO )
        MSGTY  = 'E'
        MSGNO  = ZCX_CARGA=>ZCX_ERRO_DETERMINAR_TRANSG-MSGNO
        MSGID  = ZCX_CARGA=>ZCX_ERRO_DETERMINAR_TRANSG-MSGID.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_ALV_APRESENTACAO.

    R_CARGA = ME.

    DATA: WA_NOTA_ALV        TYPE ZDE_ZSDT0001NT_ALV,
          WA_ORDEM_ALV       TYPE ZDE_ZSDT0001OV_ALV,
          WA_PEDIDO_ALV      TYPE ZDE_ZSDT0001EK_ALV,
          WA_SOLICITACAO_ALV TYPE ZDE_ZSDT0001ACB_ALV.

    CLEAR: E_APRESENTACAO.

    "Carga
    MOVE-CORRESPONDING ME->CARGA TO E_APRESENTACAO-CARGA.

    "Transgenia
    MOVE-CORRESPONDING ME->CLASSIFICACAO TO E_APRESENTACAO-CARGA.

    "Classificação
    LOOP AT ME->RESULTADO INTO DATA(WA_RESULTADO) WHERE ID_CLASSIFICACAO EQ ME->CARGA-ID_CLASSIFICACAO.
      CASE WA_RESULTADO-TP_CARACTERISTICA.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
          E_APRESENTACAO-CARGA-NR_PERC_UMI = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_UMI = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
          E_APRESENTACAO-CARGA-NR_PERC_IMP = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_IMP = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
          E_APRESENTACAO-CARGA-NR_PERC_AVA = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_AVA = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
          E_APRESENTACAO-CARGA-NR_PERC_ARD = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_ARD = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
          E_APRESENTACAO-CARGA-NR_PERC_QUE = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_QUE = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
          E_APRESENTACAO-CARGA-NR_PERC_ESV = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_ESV = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
          E_APRESENTACAO-CARGA-NR_PERC_CAR = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_CAR = WA_RESULTADO-NR_QUANTIDADE_COM.
      ENDCASE.
    ENDLOOP.

    SELECT SINGLE NAME INTO E_APRESENTACAO-CARGA-NAME
      FROM J_1BBRANCH
     WHERE BUKRS  EQ E_APRESENTACAO-CARGA-ID_BUKRS
       AND BRANCH EQ E_APRESENTACAO-CARGA-ID_BRANCH.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_COLETA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_COLETA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_COLETA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_DESCARGA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_DESCARGA
        FROM KNA1 WHERE KUNNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_DESCARGA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_DESTINO IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_DESTINO
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_DESTINO.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_CLASSIFICADORA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_CLASSIFICADORA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_CLASSIFICADORA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_ENTREGA IS NOT INITIAL.
      SELECT SINGLE DS_LOCAL_ENTREGA
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_ENTREGA
        FROM ZSDT0001LE WHERE ID_LOCAL_ENTREGA EQ E_APRESENTACAO-CARGA-ID_LOCAL_ENTREGA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_PROPRIETARIO IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_PROPRIETARIO
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_PROPRIETARIO.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_OUTRO_PARTIC IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_OUTRO_PARTIC
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_OUTRO_PARTIC.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_AGENT_FRETE IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_AGENT_FRETE
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_AGENT_FRETE.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_MOTORISTA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_MOTORISTA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_MOTORISTA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_PRODUTO IS NOT INITIAL.
      SELECT SINGLE MAKTX
        INTO E_APRESENTACAO-CARGA-DS_PRODUTO
        FROM MAKT
       WHERE MATNR EQ E_APRESENTACAO-CARGA-ID_PRODUTO
         AND SPRAS EQ SY-LANGU.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_ORDEM IS NOT INITIAL.
      DATA(R_ORDEM_CARRGAMENTO) = ZCL_ORDEM_CARREGAMENTO=>BUSCA_ORDEM_CARREGAMENTO( I_ID_ORDEM = E_APRESENTACAO-CARGA-ID_ORDEM ).
      E_APRESENTACAO-CARGA-NR_ORDEM = R_ORDEM_CARRGAMENTO-NR_ORDEM.
      E_APRESENTACAO-ORDEM_CARREGA  = R_ORDEM_CARRGAMENTO.
    ENDIF.

    "Documentos Fiscais
    LOOP AT ME->DOCUMENTO_FISCAL INTO DATA(WA_NOTA).

      CLEAR: WA_NOTA_ALV.

      MOVE-CORRESPONDING WA_NOTA TO WA_NOTA_ALV.

      SELECT SINGLE NAME1
        INTO WA_NOTA_ALV-DS_FORNECEDOR
        FROM LFA1 WHERE LIFNR EQ WA_NOTA_ALV-ID_FORNECEDOR.

      WA_NOTA_ALV-ID_PRODUTO = E_APRESENTACAO-CARGA-ID_PRODUTO.
      WA_NOTA_ALV-DS_PRODUTO = E_APRESENTACAO-CARGA-DS_PRODUTO.

      SELECT SINGLE DS_ENTRADA
        INTO WA_NOTA_ALV-DS_ENTRADA
        FROM ZSDT0001TETX WHERE ID_ENTRADA EQ WA_NOTA-ID_ENTRADA.

      IF WA_NOTA_ALV-ID_ENTREGUE_POR IS NOT INITIAL.
        SELECT SINGLE NAME1
          INTO WA_NOTA_ALV-DS_ENTREGUE_POR
          FROM LFA1 WHERE LIFNR EQ WA_NOTA_ALV-ID_ENTREGUE_POR.
      ENDIF.

      "Classificação
      LOOP AT ME->RESULTADO INTO WA_RESULTADO WHERE ID_CLASSIFICACAO EQ WA_NOTA-ID_CLASSIFICACAO.
        CASE WA_RESULTADO-TP_CARACTERISTICA.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
            WA_NOTA_ALV-NR_PERC_UMI = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_UMI = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
            WA_NOTA_ALV-NR_PERC_IMP = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_IMP = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
            WA_NOTA_ALV-NR_PERC_AVA = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_AVA = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
            WA_NOTA_ALV-NR_PERC_ARD = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_ARD = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
            WA_NOTA_ALV-NR_PERC_QUE = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_QUE = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
            WA_NOTA_ALV-NR_PERC_ESV = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_ESV = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
            WA_NOTA_ALV-NR_PERC_CAR = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_CAR = WA_RESULTADO-NR_QUANTIDADE_COM.
        ENDCASE.
      ENDLOOP.

      APPEND WA_NOTA_ALV TO E_APRESENTACAO-NOTAS.
    ENDLOOP.

    "Ordens de Venda
    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM).
      CLEAR: WA_ORDEM_ALV.

      MOVE-CORRESPONDING WA_ORDEM TO WA_ORDEM_ALV.

      IF WA_ORDEM-NR_ORDEM_VENDA IS NOT INITIAL.
        TRY .
            ME->GET_INFO_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = WA_ORDEM-NR_ORDEM_VENDA IMPORTING E_ORDEM = DATA(R_ORDEM) ).
            WA_ORDEM_ALV-TP_TIPO_ORDEM  = R_ORDEM-TP_TIPO_ORDEM.
            WA_ORDEM_ALV-DS_TIPO_ORDEM  = R_ORDEM-DS_TIPO_ORDEM.
            WA_ORDEM_ALV-DS_TIPO_FRETE  = R_ORDEM-DS_TIPO_FRETE.
            WA_ORDEM_ALV-ID_PRODUTO     = R_ORDEM-ID_PRODUTO.
            WA_ORDEM_ALV-DS_PRODUTO     = R_ORDEM-DS_PRODUTO.
          CATCH ZCX_CARGA.    "
        ENDTRY.
      ENDIF.

      APPEND WA_ORDEM_ALV TO E_APRESENTACAO-ORDEM_VENDA.
    ENDLOOP.

    "Pedido de Compra
    LOOP AT ME->ZIF_CARGA~PEDIDO_COMPRA INTO DATA(WA_PEDIDO_COMPRA).
      CLEAR: WA_PEDIDO_ALV.

      MOVE-CORRESPONDING WA_PEDIDO_COMPRA TO WA_PEDIDO_ALV.

      IF WA_PEDIDO_COMPRA-NR_PEDIDO_COMPRA IS NOT INITIAL.
        TRY .
            ME->ZIF_CARGA~GET_INFO_PEDIDO_COMPRA(
              EXPORTING
                I_PEDIDO_COMPRA = WA_PEDIDO_COMPRA-NR_PEDIDO_COMPRA
              IMPORTING
                E_PEDIDO = DATA(E_PEDIDO) ).
            WA_PEDIDO_ALV-TP_TIPO_PEDIDO = E_PEDIDO-TP_TIPO_PEDIDO.
            WA_PEDIDO_ALV-DS_TIPO_PEDIDO = E_PEDIDO-DS_TIPO_PEDIDO.
            WA_PEDIDO_ALV-DS_TIPO_FRETE  = E_PEDIDO-DS_TIPO_FRETE.
            WA_PEDIDO_ALV-ID_PRODUTO     = E_PEDIDO-ID_PRODUTO.
            WA_PEDIDO_ALV-DS_PRODUTO     = E_PEDIDO-DS_PRODUTO.
          CATCH ZCX_CARGA.
        ENDTRY.
      ENDIF.

      APPEND WA_PEDIDO_ALV TO E_APRESENTACAO-PEDIDO_COMPRA.

    ENDLOOP.
    "Solicitação de Manutenção
    MOVE-CORRESPONDING ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO TO E_APRESENTACAO-MANUTENCAO.
    IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO IS NOT INITIAL.
      E_APRESENTACAO-MANUTENCAO-TP_SOLICITACAO_STATUS = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-TP_STATUS.
    ENDIF.

    "Solicitações de Manutenção da Carga
    LOOP AT ME->ZIF_CARGA~SOLICITACOES INTO DATA(WA_SOLICITACOES).
      CLEAR: WA_SOLICITACAO_ALV.
      MOVE-CORRESPONDING WA_SOLICITACOES TO WA_SOLICITACAO_ALV.
      WA_SOLICITACAO_ALV-TP_SOLICITACAO_STATUS = WA_SOLICITACOES-TP_STATUS.
      APPEND WA_SOLICITACAO_ALV TO E_APRESENTACAO-SOLICITACOES.
    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_ALV_APRESENTACAO_LOG.

    DATA: WA_NOTA_ALV  TYPE ZDE_ZSDT0001NT_ALV.
    DATA: WA_ORDEM_ALV TYPE ZDE_ZSDT0001OV_ALV.

    R_CARGA = ME.

    CLEAR: E_APRESENTACAO.

    SELECT SINGLE *
      INTO @DATA(WA_ZSDT0001CG_LOG)
      FROM ZSDT0001CGLG
     WHERE ID_CARGA    EQ @ME->CARGA-ID_CARGA
       AND DT_REGISTRO EQ @I_DT_REGISTRO
       AND HR_REGISTRO EQ @I_HR_REGISTRO
       AND US_REGISTRO EQ @I_US_REGISTRO.

    SELECT *
      INTO TABLE @DATA(IT_ZSDT0001NT_LOG)
      FROM ZSDT0001NTLG
     WHERE ID_CARGA    EQ @ME->CARGA-ID_CARGA
       AND DT_REGISTRO EQ @I_DT_REGISTRO
       AND HR_REGISTRO EQ @I_HR_REGISTRO
       AND US_REGISTRO EQ @I_US_REGISTRO.

    SELECT *
      INTO TABLE @DATA(IT_ZSDT0001OV_LOG)
      FROM ZSDT0001OVLG
     WHERE ID_CARGA    EQ @ME->CARGA-ID_CARGA
       AND DT_REGISTRO EQ @I_DT_REGISTRO
       AND HR_REGISTRO EQ @I_HR_REGISTRO
       AND US_REGISTRO EQ @I_US_REGISTRO.

    SELECT *
      INTO TABLE @DATA(IT_ZSDT0001CL_LOG)
      FROM ZSDT0001CLLG
     WHERE ID_CARGA    EQ @ME->CARGA-ID_CARGA
       AND DT_REGISTRO EQ @I_DT_REGISTRO
       AND HR_REGISTRO EQ @I_HR_REGISTRO
       AND US_REGISTRO EQ @I_US_REGISTRO.

    SELECT *
      INTO TABLE @DATA(IT_ZSDT0001RS_LOG)
      FROM ZSDT0001RSLG
     WHERE ID_CARGA    EQ @ME->CARGA-ID_CARGA
       AND DT_REGISTRO EQ @I_DT_REGISTRO
       AND HR_REGISTRO EQ @I_HR_REGISTRO
       AND US_REGISTRO EQ @I_US_REGISTRO.

    "Carga
    MOVE-CORRESPONDING WA_ZSDT0001CG_LOG TO E_APRESENTACAO-CARGA.

    READ TABLE IT_ZSDT0001CL_LOG INTO DATA(WA_ZSDT0001CL_LOG) WITH KEY ID_CLASSIFICACAO = WA_ZSDT0001CG_LOG-ID_CLASSIFICACAO.

    "Transgenia
    MOVE-CORRESPONDING WA_ZSDT0001CL_LOG TO E_APRESENTACAO-CARGA.

    IF WA_ZSDT0001CG_LOG-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CONFERIDO.
      "Classificação
      LOOP AT IT_ZSDT0001RS_LOG INTO DATA(WA_RESULTADO).
        CASE WA_RESULTADO-TP_CARACTERISTICA.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
            E_APRESENTACAO-CARGA-NR_PERC_UMI = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_UMI = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
            E_APRESENTACAO-CARGA-NR_PERC_IMP = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_IMP = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
            E_APRESENTACAO-CARGA-NR_PERC_AVA = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_AVA = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
            E_APRESENTACAO-CARGA-NR_PERC_ARD = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_ARD = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
            E_APRESENTACAO-CARGA-NR_PERC_QUE = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_QUE = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
            E_APRESENTACAO-CARGA-NR_PERC_ESV = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_ESV = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
            E_APRESENTACAO-CARGA-NR_PERC_CAR = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_CAR = WA_RESULTADO-NR_QUANTIDADE_COM.
        ENDCASE.
      ENDLOOP.
    ELSE.
      "Classificação
      LOOP AT IT_ZSDT0001RS_LOG INTO WA_RESULTADO WHERE ID_CLASSIFICACAO EQ WA_ZSDT0001CG_LOG-ID_CLASSIFICACAO.
        CASE WA_RESULTADO-TP_CARACTERISTICA.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
            E_APRESENTACAO-CARGA-NR_PERC_UMI = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_UMI = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
            E_APRESENTACAO-CARGA-NR_PERC_IMP = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_IMP = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
            E_APRESENTACAO-CARGA-NR_PERC_AVA = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_AVA = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
            E_APRESENTACAO-CARGA-NR_PERC_ARD = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_ARD = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
            E_APRESENTACAO-CARGA-NR_PERC_QUE = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_QUE = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
            E_APRESENTACAO-CARGA-NR_PERC_ESV = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_ESV = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
            E_APRESENTACAO-CARGA-NR_PERC_CAR = WA_RESULTADO-NR_PERCENTUAL_COM.
            E_APRESENTACAO-CARGA-NR_QTDE_CAR = WA_RESULTADO-NR_QUANTIDADE_COM.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    SELECT SINGLE NAME INTO E_APRESENTACAO-CARGA-NAME
      FROM J_1BBRANCH
     WHERE BUKRS  EQ E_APRESENTACAO-CARGA-ID_BUKRS
       AND BRANCH EQ E_APRESENTACAO-CARGA-ID_BRANCH.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_COLETA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_COLETA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_COLETA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_DESCARGA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_DESCARGA
        FROM KNA1 WHERE KUNNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_DESCARGA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_DESTINO IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_DESTINO
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_DESTINO.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_ENTREGA IS NOT INITIAL.
      SELECT SINGLE DS_LOCAL_ENTREGA
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_ENTREGA
        FROM ZSDT0001LE WHERE ID_LOCAL_ENTREGA EQ E_APRESENTACAO-CARGA-ID_LOCAL_ENTREGA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_PROPRIETARIO IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_PROPRIETARIO
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_PROPRIETARIO.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_OUTRO_PARTIC IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_OUTRO_PARTIC
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_OUTRO_PARTIC.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_AGENT_FRETE IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_AGENT_FRETE
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_AGENT_FRETE.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_MOTORISTA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_MOTORISTA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_MOTORISTA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_CLASSIFICADORA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_CLASSIFICADORA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_CLASSIFICADORA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_PRODUTO IS NOT INITIAL.
      SELECT SINGLE MAKTX
        INTO E_APRESENTACAO-CARGA-DS_PRODUTO
        FROM MAKT
       WHERE MATNR EQ E_APRESENTACAO-CARGA-ID_PRODUTO
         AND SPRAS EQ SY-LANGU.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_ORDEM IS NOT INITIAL.
      DATA(R_ORDEM_CARRGAMENTO) = ZCL_ORDEM_CARREGAMENTO=>BUSCA_ORDEM_CARREGAMENTO( I_ID_ORDEM = E_APRESENTACAO-CARGA-ID_ORDEM ).
      E_APRESENTACAO-CARGA-NR_ORDEM = R_ORDEM_CARRGAMENTO-NR_ORDEM.
      E_APRESENTACAO-ORDEM_CARREGA  = R_ORDEM_CARRGAMENTO.
    ENDIF.

    "Documentos Fiscais
    LOOP AT IT_ZSDT0001NT_LOG INTO DATA(WA_NOTA).

      MOVE-CORRESPONDING WA_NOTA TO WA_NOTA_ALV.

      SELECT SINGLE NAME1
        INTO WA_NOTA_ALV-DS_FORNECEDOR
        FROM LFA1 WHERE LIFNR EQ WA_NOTA_ALV-ID_FORNECEDOR.

      WA_NOTA_ALV-ID_PRODUTO = E_APRESENTACAO-CARGA-ID_PRODUTO.
      WA_NOTA_ALV-DS_PRODUTO = E_APRESENTACAO-CARGA-DS_PRODUTO.

      SELECT SINGLE DS_ENTRADA
        INTO WA_NOTA_ALV-DS_ENTRADA
        FROM ZSDT0001TETX WHERE ID_ENTRADA EQ WA_NOTA-ID_ENTRADA.

      IF WA_NOTA_ALV-ID_ENTREGUE_POR IS NOT INITIAL.
        SELECT SINGLE NAME1
          INTO WA_NOTA_ALV-DS_ENTREGUE_POR
          FROM LFA1 WHERE LIFNR EQ WA_NOTA_ALV-ID_ENTREGUE_POR.
      ENDIF.

*      IF WA_NOTA-NR_ORDEM_VENDA IS NOT INITIAL.
*        TRY .
*            ME->GET_INFO_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = WA_NOTA-NR_ORDEM_VENDA IMPORTING E_NOTA = DATA(R_ORDEM) ).
*            WA_NOTA_ALV-TP_TIPO_ORDEM  = R_ORDEM-TP_TIPO_ORDEM.
*            WA_NOTA_ALV-DS_TIPO_ORDEM  = R_ORDEM-DS_TIPO_ORDEM.
*            WA_NOTA_ALV-DS_TIPO_FRETE  = R_ORDEM-DS_TIPO_FRETE.
*          CATCH ZCX_CARGA.    "
*          CATCH ZCX_PARCEIROS.    "
*        ENDTRY.
*      ENDIF.

      IF WA_ZSDT0001CG_LOG-TP_STATUS EQ ZIF_CARGA=>ST_STATUS_CONFERIDO.
        "Classificação
        LOOP AT IT_ZSDT0001RS_LOG INTO WA_RESULTADO WHERE ID_CLASSIFICACAO EQ WA_NOTA-ID_CLASSIFICACAO.
          CASE WA_RESULTADO-TP_CARACTERISTICA.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
              WA_NOTA_ALV-NR_PERC_UMI = WA_RESULTADO-NR_PERCENTUAL_COM.
              WA_NOTA_ALV-NR_QTDE_UMI = WA_RESULTADO-NR_QUANTIDADE_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
              WA_NOTA_ALV-NR_PERC_IMP = WA_RESULTADO-NR_PERCENTUAL_COM.
              WA_NOTA_ALV-NR_QTDE_IMP = WA_RESULTADO-NR_QUANTIDADE_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
              WA_NOTA_ALV-NR_PERC_AVA = WA_RESULTADO-NR_PERCENTUAL_COM.
              WA_NOTA_ALV-NR_QTDE_AVA = WA_RESULTADO-NR_QUANTIDADE_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
              WA_NOTA_ALV-NR_PERC_ARD = WA_RESULTADO-NR_PERCENTUAL_COM.
              WA_NOTA_ALV-NR_QTDE_ARD = WA_RESULTADO-NR_QUANTIDADE_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
              WA_NOTA_ALV-NR_PERC_QUE = WA_RESULTADO-NR_PERCENTUAL_COM.
              WA_NOTA_ALV-NR_QTDE_QUE = WA_RESULTADO-NR_QUANTIDADE_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
              WA_NOTA_ALV-NR_PERC_ESV = WA_RESULTADO-NR_PERCENTUAL_COM.
              WA_NOTA_ALV-NR_QTDE_ESV = WA_RESULTADO-NR_QUANTIDADE_COM.
            WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
              WA_NOTA_ALV-NR_PERC_CAR = WA_RESULTADO-NR_PERCENTUAL_COM.
              WA_NOTA_ALV-NR_QTDE_CAR = WA_RESULTADO-NR_QUANTIDADE_COM.
          ENDCASE.
        ENDLOOP.
      ENDIF.

      APPEND WA_NOTA_ALV TO E_APRESENTACAO-NOTAS.
    ENDLOOP.

    "Ordens de Venda
    LOOP AT IT_ZSDT0001OV_LOG INTO DATA(WA_ORDEM).

      MOVE-CORRESPONDING WA_ORDEM TO WA_ORDEM_ALV.

      IF WA_ORDEM-NR_ORDEM_VENDA IS NOT INITIAL.
        TRY .
            ME->GET_INFO_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = WA_ORDEM-NR_ORDEM_VENDA IMPORTING E_ORDEM = DATA(R_ORDEM) ).
            WA_ORDEM_ALV-TP_TIPO_ORDEM  = R_ORDEM-TP_TIPO_ORDEM.
            WA_ORDEM_ALV-DS_TIPO_ORDEM  = R_ORDEM-DS_TIPO_ORDEM.
            WA_ORDEM_ALV-DS_TIPO_FRETE  = R_ORDEM-DS_TIPO_FRETE.
            WA_ORDEM_ALV-ID_PRODUTO     = R_ORDEM-ID_PRODUTO.
            WA_ORDEM_ALV-DS_PRODUTO     = R_ORDEM-DS_PRODUTO.
          CATCH ZCX_CARGA.    "
          CATCH ZCX_PARCEIROS.    "
        ENDTRY.
      ENDIF.

      APPEND WA_ORDEM_ALV TO E_APRESENTACAO-ORDEM_VENDA.

    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_MESSAGEM_ESTORNO.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_ORDEM_VENDA.

    R_CARGA = ME.

    SELECT K~VBELN,
           K~AUART,
           T~BEZEI,
           D~INCO1,
           P~MATNR,
           P~CHARG,
           M~MAKTX,
           K~KVGR3
      INTO TABLE @DATA(IT_TAB)
      FROM VBAK AS K
     INNER JOIN VBAP  AS P ON P~VBELN EQ K~VBELN
     INNER JOIN MAKT  AS M ON M~MATNR EQ P~MATNR AND M~SPRAS EQ @SY-LANGU
     INNER JOIN TVAKT AS T ON T~AUART EQ K~AUART AND T~SPRAS EQ @SY-LANGU
     INNER JOIN VBKD  AS D ON D~VBELN EQ K~VBELN AND D~POSNR EQ '000000'
     WHERE K~VBELN = @I_ORDEM_VENDA.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGNO )
          MSGID  = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGNO
          MSGTY  = 'E'.
    ENDIF.

    READ TABLE IT_TAB INDEX 1 INTO DATA(WA_TAB).

    E_ORDEM-NR_ORDEM_VENDA = WA_TAB-VBELN.
    E_ORDEM-TP_TIPO_ORDEM  = WA_TAB-AUART.
    E_ORDEM-DS_TIPO_ORDEM  = WA_TAB-BEZEI.
    E_ORDEM-DS_TIPO_FRETE  = WA_TAB-INCO1.
    E_ORDEM-ID_PRODUTO     = WA_TAB-MATNR.
    E_ORDEM-DS_PRODUTO     = WA_TAB-MAKTX.
    E_ORDEM-NR_SAFRA       = WA_TAB-CHARG.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_PEDIDO_COMPRA.

    R_CARGA = ME.

    SELECT K~EBELN AS EBELN,
           K~BUKRS AS ID_EMPRESA_SAIDA,
           K~RESWK AS ID_FILIAL_SAIDA,
           G~CHARG AS DS_SAFRA,
           K~BSART AS TIPO_PEDIDO,
           P~WERKS AS ID_LOCAL_DESTINO,
           P~MATNR AS MATNR,
           M~MAKTX AS MAKTX,
           T~BSART AS BSART,
           T~BATXT AS BATXT,
           P~INCO1 AS INCO1
      INTO TABLE @DATA(IT_TAB)
      FROM EKKO AS K
     INNER JOIN EKPO  AS P ON P~EBELN EQ K~EBELN
     INNER JOIN EKET  AS G ON G~EBELN EQ P~EBELN AND G~EBELP EQ P~EBELP
     INNER JOIN MAKT  AS M ON M~MATNR EQ P~MATNR AND M~SPRAS EQ @SY-LANGU
     INNER JOIN T161T AS T ON T~BSART EQ K~BSART AND T~SPRAS EQ @SY-LANGU
     WHERE K~EBELN EQ @I_PEDIDO_COMPRA
       AND K~STATU EQ '9'.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_NAO_ENC-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_NAO_ENC-MSGNO )
          MSGID  = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_NAO_ENC-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_NAO_ENC-MSGNO
          MSGTY  = 'E'.
    ENDIF.

    READ TABLE IT_TAB INDEX 1 INTO DATA(WA_TAB).

    E_PEDIDO-NR_PEDIDO_COMPRA    = WA_TAB-EBELN.
    E_PEDIDO-TP_TIPO_PEDIDO      = WA_TAB-BSART.
    E_PEDIDO-DS_TIPO_PEDIDO      = WA_TAB-BATXT.
    E_PEDIDO-DS_TIPO_FRETE       = WA_TAB-INCO1.
    E_PEDIDO-ID_PRODUTO          = WA_TAB-MATNR.
    E_PEDIDO-DS_PRODUTO          = WA_TAB-MAKTX.
    E_PEDIDO-ID_CENTRO_RECEBEDOR = WA_TAB-ID_LOCAL_DESTINO.
    E_PEDIDO-ID_CENTRO_SAIDA     = WA_TAB-ID_FILIAL_SAIDA.
    E_PEDIDO-NR_SAFRA            = WA_TAB-DS_SAFRA.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_PLACA.

    R_CARGA = ME.

    CHECK I_PLACA IS NOT INITIAL.

    SELECT SINGLE * INTO E_ZLEST0002
      FROM ZLEST0002
     WHERE PC_VEICULO EQ I_PLACA.

    IF SY-SUBRC IS NOT INITIAL AND I_TIPO_FRETE EQ ZIF_CARGA=>ST_TP_FRETE_CIF.

      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID    = VALUE #( MSGID = ZCX_CARGA=>ZCX_PLACA_SEM_CADASTRO-MSGID
                               MSGNO = ZCX_CARGA=>ZCX_PLACA_SEM_CADASTRO-MSGNO
                               ATTR1 = CONV #( I_PLACA ) )
          MSGID     = ZCX_CARGA=>ZCX_PLACA_SEM_CADASTRO-MSGID
          MSGNO     = ZCX_CARGA=>ZCX_PLACA_SEM_CADASTRO-MSGNO
          MSGTY     = 'E'
          MSGV1     = CONV #( I_PLACA )
          TRANSACAO = 'ZLES0003'.

    ENDIF.

    CHECK I_VALIDAR EQ ABAP_TRUE.

    "Valida Cadastro
    IF SY-SUBRC IS INITIAL.

      IF I_TIPO_FRETE NE ZIF_CARGA=>ST_TP_FRETE_CIF.
        IF E_ZLEST0002-PROPRIETARIO NE ME->CARGA-ID_PROPRIETARIO.
          RAISE EXCEPTION TYPE ZCX_CARGA
            EXPORTING
              TEXTID    = VALUE #( MSGID = ZCX_CARGA=>ZCX_ERRO_PROPRIETARIO-MSGID
                                   MSGNO = ZCX_CARGA=>ZCX_ERRO_PROPRIETARIO-MSGNO
                                   ATTR1 = CONV #( I_PLACA )
                                   ATTR2 = CONV #( ME->CARGA-ID_PROPRIETARIO ) )
              MSGID     = ZCX_CARGA=>ZCX_ERRO_PROPRIETARIO-MSGID
              MSGNO     = ZCX_CARGA=>ZCX_ERRO_PROPRIETARIO-MSGNO
              MSGTY     = 'E'
              MSGV1     = CONV #( I_PLACA )
              MSGV2     = CONV #( ME->CARGA-ID_PROPRIETARIO )
              TRANSACAO = 'ZLES0003'.
        ENDIF.
      ENDIF.

*068  Placa &1 não é de Tração!
      IF E_ZLEST0002-TP_VEICULO NE '0' AND I_TRACAO EQ ABAP_TRUE.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID    = VALUE #( MSGID = ZCX_CARGA=>ZCX_PLACA_NAO_TRACAO-MSGID
                                 MSGNO = ZCX_CARGA=>ZCX_PLACA_NAO_TRACAO-MSGNO
                                 ATTR1 = CONV #( I_PLACA ) )
            MSGID     = ZCX_CARGA=>ZCX_PLACA_NAO_TRACAO-MSGID
            MSGNO     = ZCX_CARGA=>ZCX_PLACA_NAO_TRACAO-MSGNO
            MSGTY     = 'E'
            MSGV1     = CONV #( I_PLACA )
            TRANSACAO = 'ZLES0003'.
      ENDIF.

*069  Placa &1 não é de Reboque!
      IF E_ZLEST0002-TP_VEICULO NE '1' AND I_TRACAO EQ ABAP_FALSE.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID    = VALUE #( MSGID = ZCX_CARGA=>ZCX_PLACA_NAO_REBOQUE-MSGID
                                 MSGNO = ZCX_CARGA=>ZCX_PLACA_NAO_REBOQUE-MSGNO
                                 ATTR1 = CONV #( I_PLACA ) )
            MSGID     = ZCX_CARGA=>ZCX_PLACA_NAO_REBOQUE-MSGID
            MSGNO     = ZCX_CARGA=>ZCX_PLACA_NAO_REBOQUE-MSGNO
            MSGTY     = 'E'
            MSGV1     = CONV #( I_PLACA )
            TRANSACAO = 'ZLES0003'.
      ENDIF.

*070  Veículo &1 sem informação de Qtde de Eixo!
      IF E_ZLEST0002-QT_EIXO IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID    = VALUE #( MSGID = ZCX_CARGA=>ZCX_PLACA_SEM_QTD_EIXO-MSGID
                                 MSGNO = ZCX_CARGA=>ZCX_PLACA_SEM_QTD_EIXO-MSGNO
                                 ATTR1 = CONV #( I_PLACA ) )
            MSGID     = ZCX_CARGA=>ZCX_PLACA_SEM_QTD_EIXO-MSGID
            MSGNO     = ZCX_CARGA=>ZCX_PLACA_SEM_QTD_EIXO-MSGNO
            MSGTY     = 'E'
            MSGV1     = CONV #( I_PLACA )
            TRANSACAO = 'ZLES0003'.
      ENDIF.

      IF I_TIPO_FRETE EQ ZIF_CARGA=>ST_TP_FRETE_CIF.

        CALL METHOD ZCL_WEBSERVICE_TIPCARD=>CONS_SITUACAO_TRANSPORTADOR
          EXPORTING
            I_PLACA     = I_PLACA
          RECEIVING
            E_CONSULTAS = DATA(E_CONSULTAS)
          EXCEPTIONS
            ERRO        = 1
            WEBSERVICE  = 2
            OTHERS      = 3.

        IF SY-SUBRC IS NOT INITIAL.
          MESSAGE W000(ZLES) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.

        READ TABLE E_CONSULTAS INDEX 1 INTO DATA(WA_ZLEST0135).
        IF WA_ZLEST0135-CK_RNTRC_ATIVO EQ ABAP_FALSE.
          SY-MSGV1 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+000(50).
          SY-MSGV2 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+050(50).
          SY-MSGV3 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+100(50).
          SY-MSGV4 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+150(50)..
          MESSAGE W000(ZLES) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.
      ENDIF.

    ELSEIF I_TIPO_FRETE EQ ZIF_CARGA=>ST_TP_FRETE_CPT.

      CALL METHOD ZCL_WEBSERVICE_TIPCARD=>CONS_SITUACAO_TRANSPORTADOR
        EXPORTING
          I_PLACA     = I_PLACA
          I_PARTINER  = ME->CARGA-ID_AGENT_FRETE
        RECEIVING
          E_CONSULTAS = E_CONSULTAS
        EXCEPTIONS
          ERRO        = 1
          WEBSERVICE  = 2
          OTHERS      = 3.

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE W000(ZLES) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      READ TABLE E_CONSULTAS INDEX 1 INTO WA_ZLEST0135.
      IF WA_ZLEST0135-CK_RNTRC_ATIVO EQ ABAP_FALSE.
        SY-MSGV1 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+000(50).
        SY-MSGV2 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+050(50).
        SY-MSGV3 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+100(50).
        SY-MSGV4 = WA_ZLEST0135-DS_MSG_TRANSPORTADOR+150(50)..
        MESSAGE W000(ZLES) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INSTANCE.

    IF ZIF_CARGA~AT_CARGA IS NOT BOUND.
      CREATE OBJECT ZIF_CARGA~AT_CARGA TYPE ZCL_CARGA_SAIDA_OPUS.
      R_INSTANCE = ZIF_CARGA~AT_CARGA.
    ELSE.
      R_INSTANCE = ZIF_CARGA~AT_CARGA.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_LOGS_HISTORICO.

    DATA: WA_LOGS    TYPE ZDE_LOG_REGISTRO.

    R_CARGA = ME.

    CLEAR: E_LOGS[], E_LOGS.

    TRY.
        EXEC SQL.
          OPEN DOCUMENTOS FOR
            SELECT * FROM (
            SELECT F.DT_REGISTRO, F.HR_REGISTRO, F.US_REGISTRO
              FROM SAPHANADB.ZSDT0001CGLG F
             WHERE ID_CARGA = :ME->CARGA-ID_CARGA ) TT
             ORDER BY DT_REGISTRO, HR_REGISTRO
        ENDEXEC.
      CATCH CX_SY_NATIVE_SQL_ERROR INTO DATA(EXC_REF).
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ERRO_PSQ_BANCO_DADOS-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_ERRO_PSQ_BANCO_DADOS-MSGNO )
            MSGID  = ZCX_CARGA=>ZCX_ERRO_PSQ_BANCO_DADOS-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_ERRO_PSQ_BANCO_DADOS-MSGNO
            MSGTY  = 'E'.
    ENDTRY.

    DO.
      EXEC SQL.
        FETCH NEXT DOCUMENTOS INTO
        :WA_LOGS-DT_REGISTRO,
        :WA_LOGS-HR_REGISTRO,
        :WA_LOGS-US_REGISTRO
      ENDEXEC.
      IF SY-SUBRC <> 0.
        EXIT.
      ELSE.
        APPEND WA_LOGS TO E_LOGS.
      ENDIF.
    ENDDO.

    EXEC SQL.
      CLOSE DOCUMENTOS
    ENDEXEC.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_MENS_INTERFACE_ENTRADA.
    R_CARGA = ME.
  ENDMETHOD.


  METHOD ZIF_CARGA~GET_NEW_ID_CARGA.
    R_CARGA = ME.
  ENDMETHOD.


  METHOD ZIF_CARGA~GET_NEW_ID_CLASSIFICAO.

    R_CARGA = ME.
  ENDMETHOD.


  METHOD ZIF_CARGA~GET_NEW_ID_ENTRADA_ESTOQUE.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_NEW_ID_SOLICITACAO_MANUT.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_NOTA_FORNECEDOR_IE.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_PARTINER_ORDEM_VENDA.

*    DATA: LC_FUNCAO_PARTINER  TYPE PARVW.
*
*    CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
*      EXPORTING
*        INPUT  = I_FUNCAO_PARTINER
*      IMPORTING
*        OUTPUT = LC_FUNCAO_PARTINER.

    R_CARGA = ME.

    SELECT SINGLE *
      INTO @E_PARTINER
      FROM VBPA
     WHERE VBELN = @I_ORDEM_VENDA
       AND PARVW = @I_FUNCAO_PARTINER.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_VENDA_PARTINER-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_ORDEM_VENDA_PARTINER-MSGNO
                            ATTR1 = CONV #( I_FUNCAO_PARTINER ) )
          MSGID  = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGNO
          MSGTY  = 'E'
          MSGV1  = CONV #( I_FUNCAO_PARTINER ).
    ENDIF.


  ENDMETHOD.


  METHOD zif_carga~get_pedido_compra.

    DATA: lc_pedido TYPE REF TO zcl_pedido_compra,
          lc_filtro TYPE zde_filtro_pedido_compra,
          it_ekko   TYPE zde_ekko_t.

    r_carga = me.

    CLEAR: e_info_pedido.

    "Buscar Centro a Fixar
    SELECT SINGLE * INTO @DATA(wa_afixar)
      FROM zsdt_depara_cen
     WHERE vkorg             EQ @me->carga-id_bukrs
       AND centro_real       EQ @me->carga-id_branch
       AND tp_centro_virtual EQ @zcl_pedido_compra=>st_tp_centro_a_fixar.

    IF sy-subrc IS NOT INITIAL.
      RAISE EXCEPTION TYPE zcx_carga
        EXPORTING
          textid    = VALUE #( msgid = zcx_carga=>zcx_centro_a_fixar-msgid
                               msgno = zcx_carga=>zcx_centro_a_fixar-msgno
                               attr1 = CONV #( me->carga-id_branch )
                               attr2 = 'ZSDT0036' )
          msgid     = zcx_carga=>zcx_centro_a_fixar-msgid
          msgno     = zcx_carga=>zcx_centro_a_fixar-msgno
          msgty     = 'E'
          msgv1     = CONV #( me->carga-id_branch )
          msgv2     = 'ZSDT0036'
          transacao = 'ZSDT0036'.
    ENDIF.

*   "Parâmetros Centro Fixo x Centro Afixar EUDR - BG #152940 - INICIO
*    SELECT SINGLE * INTO @DATA(wa_zmmt0017)
*      FROM zmmt0017
*     WHERE matnr          EQ @me->carga-id_produto
*       AND centro_fixo    EQ @me->carga-id_branch
*       AND centro_a_fixar EQ @wa_afixar-centrov_1
*       AND tp_produto     EQ @space.

     zcl_depara_centro_fixo_afixar=>zif_depara_centro_fixo_afixar~get_dados_depara(
        EXPORTING
          i_material        = me->carga-id_produto
          i_centro_fixo     = me->carga-id_branch
          i_centro_afixar   = wa_afixar-centrov_1
          i_tipo_produto    = ' '
        IMPORTING
          e_single_depara   = DATA(wa_zmmt0017)   ).

    "Parâmetros Centro Fixo x Centro Afixar EUDR - BG #152940 - FIM

    IF sy-subrc IS NOT INITIAL.
      "Centro &1 Centro a Fixar &2 e Material &3 sem Depósito! Transação &4!
      RAISE EXCEPTION TYPE zcx_carga
        EXPORTING
          textid    = VALUE #( msgid = zcx_carga=>zcx_centro_a_fixar_deposito-msgid
                               msgno = zcx_carga=>zcx_centro_a_fixar_deposito-msgno
                               attr1 = CONV #( me->carga-id_branch )
                               attr2 = CONV #( wa_afixar-centrov_1 )
                               attr3 = CONV #( me->carga-id_produto )
                               attr4 = 'ZMM0017' )
          msgid     = zcx_carga=>zcx_centro_a_fixar_deposito-msgid
          msgno     = zcx_carga=>zcx_centro_a_fixar_deposito-msgno
          msgty     = 'E'
          msgv1     = CONV #( me->carga-id_branch )
          msgv2     = CONV #( wa_afixar-centrov_1 )
          msgv3     = CONV #( me->carga-id_produto )
          msgv4     = 'ZMM0017'
          transacao = 'ZMM0017'.
    ENDIF.

    READ TABLE me->documento_fiscal WITH KEY id_nota = i_id_nota INTO DATA(wa_nota).

    CASE wa_nota-id_mod_fiscal.
      WHEN zif_carga=>st_model_fiscal_eletronico.
        SELECT SINGLE * INTO @DATA(wa_zsdt0001te)
          FROM zsdt0001te
         WHERE id_entrada EQ @wa_nota-id_entrada
           AND id_empresa EQ @me->carga-id_bukrs
           AND ck_nfe     EQ 'X'.
      WHEN zif_carga=>st_model_fiscal_papel.
        SELECT SINGLE * INTO wa_zsdt0001te
          FROM zsdt0001te
         WHERE id_entrada EQ wa_nota-id_entrada
           AND id_empresa EQ me->carga-id_bukrs
           AND ck_nfe     EQ space.
    ENDCASE.

    CREATE OBJECT lc_pedido.
    lc_filtro-ibukrs = VALUE #( sign = 'I'  option = 'EQ' ( low = me->carga-id_bukrs    high = me->carga-id_bukrs    ) ).
    lc_filtro-ilifnr = VALUE #( sign = 'I'  option = 'EQ' ( low = wa_nota-id_fornecedor high = wa_nota-id_fornecedor ) ).
    lc_filtro-imatnr = VALUE #( sign = 'I'  option = 'EQ' ( low = me->carga-id_produto  high = me->carga-id_produto  ) ).
    lc_filtro-icharg = VALUE #( sign = 'I'  option = 'EQ' ( low = me->carga-nr_safra    high = me->carga-nr_safra    ) ).
    lc_filtro-iwerks = VALUE #( sign = 'I'  option = 'EQ' ( low = wa_afixar-centrov_1   high = wa_afixar-centrov_1   ) ).
    lc_filtro-ibstyp = VALUE #( sign = 'I'  option = 'EQ' ( low = 'F'     high = 'F'     ) ).
    lc_filtro-ibsart = VALUE #( sign = 'I'  option = 'EQ' ( low = 'ZGR'   high = 'ZGR'   ) ).
    lc_filtro-iekorg = VALUE #( sign = 'I'  option = 'EQ' ( low = 'OC01'  high = 'OC01'  ) ).
    lc_filtro-iekgrp = VALUE #( sign = 'I'  option = 'EQ' ( low = 'G01'   high = 'G01'   ) ).
    lc_filtro-ifrgrl = VALUE #( sign = 'I'  option = 'EQ' ( low = space   high = space   ) ).
    lc_filtro-iebelp = VALUE #( sign = 'I'  option = 'EQ' ( low = '00010' high = '00010' ) ).
    lc_filtro-ibstae = VALUE #( sign = 'I'  option = 'EQ' ( low = '0004'  high = '0004'  ) ).
    lc_filtro-imwskz = VALUE #( sign = 'I'  option = 'EQ' ( low = wa_zsdt0001te-id_iva  high = wa_zsdt0001te-id_iva  ) ).
    lc_filtro-ilgort = VALUE #( sign = 'I'  option = 'EQ' ( low = wa_zmmt0017-lgort     high = wa_zmmt0017-lgort     ) ).

    IF lc_pedido->zif_pesquisa~pesquisar( EXPORTING i_filtros  = lc_filtro IMPORTING e_registros = it_ekko ) NE abap_true.
      RAISE EXCEPTION TYPE zcx_carga
        EXPORTING
          textid = VALUE #( msgid = zcx_carga=>zcx_sem_pedido_compra-msgid
                            msgno = zcx_carga=>zcx_sem_pedido_compra-msgno
                            attr1 = CONV #( wa_nota-id_fornecedor )
                            attr2 = CONV #( me->carga-nr_safra )
                            attr3 = CONV #( me->carga-id_produto )
                            attr4 = 'ZGR' )
          msgid  = zcx_carga=>zcx_sem_pedido_compra-msgid
          msgno  = zcx_carga=>zcx_sem_pedido_compra-msgno
          msgty  = 'E'
          msgv1  = CONV #( wa_nota-id_fornecedor )
          msgv2  = CONV #( me->carga-nr_safra )
          msgv3  = CONV #( me->carga-id_produto )
          msgv4  = 'ZGR'.
    ENDIF.

    READ TABLE it_ekko INDEX 1 INTO e_info_pedido-ekko.

    SELECT SINGLE * INTO e_info_pedido-ekpo
      FROM ekpo
     WHERE ebeln EQ e_info_pedido-ekko-ebeln
       AND ebelp EQ '00010'.

    SELECT SINGLE * INTO e_info_pedido-eket
      FROM eket
     WHERE ebeln EQ e_info_pedido-ekko-ebeln
       AND ebelp EQ '00010'.


  ENDMETHOD.


  METHOD ZIF_CARGA~GET_RATEIA_DESCONTOS.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_RECUPERAR_ENTRADA.

    R_INSTANCIA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_REGISTRO.
    R_CARGA = ME.
    MOVE-CORRESPONDING ME->CARGA TO E_REGISTRO.
  ENDMETHOD.


  METHOD ZIF_CARGA~GET_RESULT_DESC_CLASSIFICACAO.

    DATA: LO_JSON_SERIALIZER  TYPE REF TO CL_TREX_JSON_SERIALIZER.
    DATA: R_CLASSIFICACAO	     TYPE ZDE_PES_RESULTADO_CLASS.

    CREATE OBJECT LO_JSON_SERIALIZER EXPORTING DATA = I_CLASSIFICACAO.

    R_CARGA = ME.

    LO_JSON_SERIALIZER->SERIALIZE( ).
    DATA(JSON_INPUT) = LO_JSON_SERIALIZER->GET_DATA( ).
    REPLACE FIRST OCCURRENCE OF 'percentualimpureza' IN JSON_INPUT WITH '"percentualImpureza"'.

    DATA: OB_WEB_SERVICE TYPE REF TO ZCL_WEBSERVICE.

    CREATE OBJECT OB_WEB_SERVICE.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~AUTENTICA_OPUS = ABAP_TRUE.

    TRY .
        OB_WEB_SERVICE->SET_SERVICO( I_SERVICO = 'DC' ).
      CATCH ZCX_WEBSERVICE INTO DATA(LC_EXCEPTION).
    ENDTRY.

    OB_WEB_SERVICE->SET_TIPO( I_TIPO = 'O' ).

    TRY .
        DATA(VAR_HTTP) = OB_WEB_SERVICE->URL( ). "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
      CATCH ZCX_WEBSERVICE INTO LC_EXCEPTION.
    ENDTRY.

    OB_WEB_SERVICE->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = VAR_HTTP ).

    CALL METHOD OB_WEB_SERVICE->ZIF_WEBSERVICE~CONSULTAR
      EXPORTING
        I_HTTP                     = VAR_HTTP
        I_XML                      = JSON_INPUT
      RECEIVING
        E_RESULTADO                = DATA(JSON_RETORNO)
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3
        HTTP_INVALID_TIMEOUT       = 4
        OTHERS                     = 5.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    CALL METHOD /UI2/CL_JSON=>DESERIALIZE
      EXPORTING
        JSON = JSON_RETORNO
      CHANGING
        DATA = E_RESULTADO.

    IF E_RESULTADO-MESSAGE IS NOT INITIAL.
      ME->ZIF_CARGA~GERA_ERRO_GERAL( I_TEXTO = E_RESULTADO-MESSAGE ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_ROMANEIO_ENTRADA.
    R_CARGA = ME.
  ENDMETHOD.


  METHOD ZIF_CARGA~GET_ROMANEIO_SAIDA.

    DATA: R_ID_CARGA TYPE RANGE OF ZDE_ID_CARGA,
          R_ID_NOTA  TYPE RANGE OF ZDE_ID_NOTA.

    R_CARGA = ME.

    SELECT * INTO TABLE @DATA(IT_ZSDT0001OV)
      FROM ZSDT0001OVRO
     WHERE ID_CARGA EQ @I_ID_CARGA.

    CHECK SY-SUBRC IS INITIAL.

    SELECT * INTO TABLE E_ROMANEIOS
      FROM ZSDT0001
      FOR ALL ENTRIES IN IT_ZSDT0001OV
     WHERE CH_REFERENCIA EQ IT_ZSDT0001OV-CH_REFERENCIA_SAI
       AND TP_MOVIMENTO  EQ ZCL_ROMANEIO=>ST_TP_MOVIMENTO_SAIDA.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_TP_STATUS.
    R_CARGA = ME.
    E_TP_STATUS = ME->CARGA-TP_STATUS.
  ENDMETHOD.


  METHOD ZIF_CARGA~GET_VALIDAR_NOTA_FISCAL.

    R_INSTANCE = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_VERIFICA_EXISTE_SAIDA.


  ENDMETHOD.


  METHOD ZIF_CARGA~GRAVAR_REGISTRO.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~LIMPAR_REGISTRO.

    R_CARGA = ME.

    CLEAR: ME->CARGA,
           ME->CLASSIFICACAO,
           ME->RESULTADO,
           ME->DOCUMENTO_FISCAL,
           ME->CLASSIFICACAO_NOTAS,
           ME->ZIF_CARGA~ORDEM_VENDA,
           ME->ZIF_CARGA~PEDIDO_COMPRA,
           ME->ZIF_CARGA~AT_NAO_GERAR_BLOQUEIOS,
           ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA,
           ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO,
           ME->ZIF_CARGA~AT_MANUTENCAO,
           ME->ZIF_CARGA~SOLICITACOES,
           ME->ZIF_CARGA~CK_DIGITADO_UMIDADE,
           ME->ZIF_CARGA~CK_DIGITADO_IMPUREZA,
           ME->ZIF_CARGA~CK_DIGITADO_ARDIDO,
           ME->ZIF_CARGA~CK_DIGITADO_AVARIADO,
           ME->ZIF_CARGA~CK_DIGITADO_QUEBRADO,
           ME->ZIF_CARGA~CK_DIGITADO_ESVERDEADO.

  ENDMETHOD.


  METHOD ZIF_CARGA~NOVO_REGISTRO.
    R_CARGA = ME.
  ENDMETHOD.


  METHOD ZIF_CARGA~PESQUISAR.

    R_CARGA = ME.

    DATA: LC_FILTRO  TYPE ZDE_FILTRO_ZSDT0001CG,
          WA_RETORNO TYPE ZDE_ZSDT0001CG_ALV,
          LC_RETORNO TYPE ZDE_ZSDT0001CG_ALV_T.

    DATA: RG_TP_CARGA TYPE TABLE OF ZDE_TP_CARGA_R.

    RG_TP_CARGA = value #( SIGN = 'I' OPTION = 'EQ'
                            ( HIGH = ZIF_CARGA=>ST_TP_CARGA_SAIDA_OPUS LOW = ZIF_CARGA=>ST_TP_CARGA_SAIDA_OPUS )
                          ).

    MOVE I_FILTROS TO LC_FILTRO.

    DESCRIBE TABLE LC_FILTRO-INRSAFRA LINES DATA(LC_SAFRA).
    DESCRIBE TABLE LC_FILTRO-IIDBUKRS LINES DATA(LC_BUKRS).
    DESCRIBE TABLE LC_FILTRO-IIDBRANC LINES DATA(LC_BRANCH).

    IF LC_SAFRA IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGNO.
    ENDIF.

    IF LC_BUKRS IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGNO.
    ENDIF.

    IF LC_BRANCH IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGNO.
    ENDIF.

    CLEAR: E_PESQUISOU, E_REGISTROS.

    SELECT CA~ID_CARGA           AS ID_CARGA,
           CA~ID_ORDEM           AS ID_ORDEM,
           OD~NR_ORDEM           AS NR_ORDEM,
           CA~DT_MOVIMENTO       AS DT_MOVIMENTO,
           CA~NR_SAFRA           AS NR_SAFRA,
           CA~ID_BUKRS           AS ID_BUKRS,
           EN~BUTXT              AS BUTXT,
           CA~ID_BRANCH          AS ID_BRANCH,
           FN~NAME               AS NAME,
           CA~ID_AGENT_FRETE     AS ID_AGENT_FRETE,
           AG~NAME1              AS DS_AGENT_FRETE,
           CA~ID_LOCAL_COLETA    AS ID_LOCAL_COLETA,
           LC~NAME1              AS DS_LOCAL_COLETA,
           CA~ID_LOCAL_DESTINO   AS ID_LOCAL_DESTINO,
           LD~NAME1              AS DS_LOCAL_DESTINO,
           CA~ID_LOCAL_DESCARGA  AS ID_LOCAL_DESCARGA,
           LA~NAME1              AS DS_LOCAL_DESCARGA,
           CA~TP_FRETE           AS TP_FRETE,
           CA~ID_PRODUTO         AS ID_PRODUTO,
           MA~MAKTX              AS DS_PRODUTO,
           CA~NM_PESO_BRUTO      AS NM_PESO_BRUTO,
           CA~NM_PESO_TARA       AS NM_PESO_TARA,
           CA~NM_PESO_SUBTOTAL   AS NM_PESO_SUBTOTAL,
           CA~NM_PESO_DESCONTOS  AS NM_PESO_DESCONTOS,
           CA~NM_PESO_LIQUIDO    AS NM_PESO_LIQUIDO,
           CA~DS_PLACA_TRATOR    AS DS_PLACA_TRATOR,
           CA~ID_PROPRIETARIO    AS ID_PROPRIETARIO,
           PP~NAME1              AS DS_PROPRIETARIO,
           CA~DS_PLACA_REBOQ_1   AS DS_PLACA_REBOQ_1,
           CA~DS_PLACA_REBOQ_2   AS DS_PLACA_REBOQ_2,
           CA~DS_PLACA_REBOQ_3   AS DS_PLACA_REBOQ_3,
           CA~ID_MOTORISTA       AS ID_MOTORISTA,
           MT~NAME1              AS DS_MOTORISTA,
           CA~NR_TICKET          AS NR_TICKET,
           CA~IN_TRANSFERENCIA   AS IN_TRANSFERENCIA,
           CA~TP_STATUS          AS TP_STATUS,
           CA~DT_ABERTURA        AS DT_ABERTURA,
           CA~HR_ABERTURA        AS HR_ABERTURA,
           CA~US_ABERTURA        AS US_ABERTURA,
           CA~DT_FECHAMENTO      AS DT_FECHAMENTO,
           CA~HR_FECHAMENTO      AS HR_FECHAMENTO,
           CA~US_FECHAMENTO      AS US_FECHAMENTO,
           CA~DT_CONFERENCIA     AS DT_CONFERENCIA,
           CA~HR_CONFERENCIA     AS HR_CONFERENCIA,
           CA~US_CONFERENCIA     AS US_CONFERENCIA,
           CA~DT_CANCELAMENTO    AS DT_CANCELAMENTO,
           CA~HR_CANCELAMENTO    AS HR_CANCELAMENTO,
           CA~US_CANCELAMENTO    AS US_CANCELAMENTO,

           CL~ID_CLASSIFICACAO      AS ID_CLASSIFICACAO,
           CL~IN_GMO                AS IN_GMO,
           CL~NR_RESULTADO_01       AS NR_RESULTADO_01,
           CL~NR_RESULTADO_02       AS NR_RESULTADO_02,
           CL~NR_RES_RR1_RR2        AS NR_RES_RR1_RR2,
           CL~IN_GMO_03             AS IN_GMO_03,
           CL~IN_SRR_ORIGEM_PARTIC  AS IN_SRR_ORIGEM_PARTIC,
           CL~ID_OUTRO_PARTIC       AS ID_OUTRO_PARTIC,
           OT~NAME1                 AS DS_OUTRO_PARTIC,
           CL~IN_SRR_DECLARADO      AS IN_SRR_DECLARADO,
           CL~IN_TESTE_SRR          AS IN_TESTE_SRR,
           CL~IN_SRR_DECLARADO_2    AS IN_SRR_DECLARADO_2,
           CL~IN_TESTE_SRR_2        AS IN_TESTE_SRR_2,
           CL~TP_TRANSGENIA         AS TP_TRANSGENIA,

           R1~NR_PERCENTUAL_COM     AS NR_PERC_UMI,
           R2~NR_PERCENTUAL_COM     AS NR_PERC_IMP,
           R3~NR_PERCENTUAL_COM     AS NR_PERC_AVA,
           R4~NR_PERCENTUAL_COM     AS NR_PERC_ARD,
           R5~NR_PERCENTUAL_COM     AS NR_PERC_QUE,
           R6~NR_PERCENTUAL_COM     AS NR_PERC_ESV,

           R1~NR_QUANTIDADE_COM     AS NR_QTDE_UMI,
           R2~NR_QUANTIDADE_COM     AS NR_QTDE_IMP,
           R3~NR_QUANTIDADE_COM     AS NR_QTDE_AVA,
           R4~NR_QUANTIDADE_COM     AS NR_QTDE_ARD,
           R5~NR_QUANTIDADE_COM     AS NR_QTDE_QUE,
           R6~NR_QUANTIDADE_COM     AS NR_QTDE_ESV

      INTO TABLE @DATA(IT_TAB)
      FROM ZSDT0001CG AS CA
     INNER JOIN T001         AS EN ON EN~BUKRS EQ CA~ID_BUKRS
     INNER JOIN J_1BBRANCH   AS FN ON FN~BUKRS EQ CA~ID_BUKRS AND FN~BRANCH EQ CA~ID_BRANCH
      LEFT JOIN LFA1         AS LC ON LC~LIFNR EQ CA~ID_LOCAL_COLETA
      LEFT JOIN LFA1         AS LD ON LD~LIFNR EQ CA~ID_LOCAL_DESTINO
      LEFT JOIN KNA1         AS LA ON LA~KUNNR EQ CA~ID_LOCAL_DESCARGA
      LEFT JOIN ZSDT0001OD   AS OD ON OD~ID_ORDEM EQ CA~ID_ORDEM
      LEFT JOIN ZSDT0001CL   AS CL ON CL~ID_CARGA EQ CA~ID_CARGA AND CL~ID_CLASSIFICACAO EQ CA~ID_CLASSIFICACAO
      LEFT JOIN ZSDT0001RS   AS R1 ON R1~ID_CARGA EQ CL~ID_CARGA AND R1~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R1~TP_CARACTERISTICA EQ '01'
      LEFT JOIN ZSDT0001RS   AS R2 ON R2~ID_CARGA EQ CL~ID_CARGA AND R2~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R2~TP_CARACTERISTICA EQ '02'
      LEFT JOIN ZSDT0001RS   AS R3 ON R3~ID_CARGA EQ CL~ID_CARGA AND R3~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R3~TP_CARACTERISTICA EQ '03'
      LEFT JOIN ZSDT0001RS   AS R4 ON R4~ID_CARGA EQ CL~ID_CARGA AND R4~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R4~TP_CARACTERISTICA EQ '04'
      LEFT JOIN ZSDT0001RS   AS R5 ON R5~ID_CARGA EQ CL~ID_CARGA AND R5~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R5~TP_CARACTERISTICA EQ '05'
      LEFT JOIN ZSDT0001RS   AS R6 ON R6~ID_CARGA EQ CL~ID_CARGA AND R6~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R6~TP_CARACTERISTICA EQ '06'
      LEFT JOIN LFA1         AS AG ON AG~LIFNR EQ CA~ID_AGENT_FRETE
      LEFT JOIN LFA1         AS PP ON PP~LIFNR EQ CA~ID_PROPRIETARIO
      LEFT JOIN LFA1         AS MT ON MT~LIFNR EQ CA~ID_MOTORISTA
      LEFT JOIN LFA1         AS OT ON OT~LIFNR EQ CL~ID_OUTRO_PARTIC
     INNER JOIN MAKT         AS MA ON MA~SPRAS EQ @SY-LANGU AND MA~MATNR EQ CA~ID_PRODUTO
     WHERE CA~TP_CARGA           IN @RG_TP_CARGA
       AND CA~ID_CARGA           IN @LC_FILTRO-IIDCARGA
       AND CA~ID_ORDEM           IN @LC_FILTRO-IIDORDEM
       "AND EXISTS ( SELECT * FROM ZSDT0001NT AS NT WHERE NT~ID_CARGA = CA~ID_CARGA AND NT~ID_ENTRADA IN @LC_FILTRO-IIDENTRA )
       "AND CA~ID_LOCAL_ENTREGA   IN @LC_FILTRO-IIDLOCAL
       AND CA~DT_MOVIMENTO       IN @LC_FILTRO-IDTMOVIM
       AND CA~NR_SAFRA           IN @LC_FILTRO-INRSAFRA
       AND CA~ID_BUKRS           IN @LC_FILTRO-IIDBUKRS
       AND CA~ID_BRANCH          IN @LC_FILTRO-IIDBRANC
       AND CA~ID_AGENT_FRETE     IN @LC_FILTRO-IIDAGENT
       AND CA~ID_LOCAL_COLETA    IN @LC_FILTRO-IIDCOLET
       AND CA~ID_LOCAL_DESTINO   IN @LC_FILTRO-IIDDESTI
       AND CA~ID_LOCAL_DESCARGA  IN @LC_FILTRO-IIDDESCA
       AND CA~ID_PRODUTO         IN @LC_FILTRO-IIDPRODU
       AND CA~DS_PLACA_TRATOR    IN @LC_FILTRO-IDSTRATO
       AND CA~DS_PLACA_REBOQ_1   IN @LC_FILTRO-IDSREBO1
       AND CA~DS_PLACA_REBOQ_2   IN @LC_FILTRO-IDSREBO2
       AND CA~DS_PLACA_REBOQ_3   IN @LC_FILTRO-IDSREBO3
       AND CA~ID_MOTORISTA       IN @LC_FILTRO-IIDMOTOR
       AND CA~NR_TICKET          IN @LC_FILTRO-INRTICKE
       AND CA~TP_STATUS          IN @LC_FILTRO-ITPSTATU
       AND CA~DT_ABERTURA        IN @LC_FILTRO-IDTABERT
       AND CA~HR_ABERTURA        IN @LC_FILTRO-IHRABERT
       AND CA~DT_FECHAMENTO      IN @LC_FILTRO-IDTFECHA
       AND CA~HR_FECHAMENTO      IN @LC_FILTRO-IHRFECHA
     ORDER BY CA~ID_CARGA.

    LOOP AT IT_TAB INTO DATA(WA_TAB).
      CLEAR: WA_RETORNO.
      WA_RETORNO-ID_CARGA          = WA_TAB-ID_CARGA.
      WA_RETORNO-ID_ORDEM          = WA_TAB-ID_ORDEM.
      WA_RETORNO-NR_ORDEM          = WA_TAB-NR_ORDEM.
      WA_RETORNO-DT_MOVIMENTO      = WA_TAB-DT_MOVIMENTO.
      WA_RETORNO-NR_SAFRA          = WA_TAB-NR_SAFRA.
      WA_RETORNO-ID_BUKRS          = WA_TAB-ID_BUKRS.
      WA_RETORNO-BUTXT             = WA_TAB-BUTXT.
      WA_RETORNO-ID_BRANCH         = WA_TAB-ID_BRANCH.
      WA_RETORNO-NAME              = WA_TAB-NAME.
      WA_RETORNO-ID_AGENT_FRETE    = WA_TAB-ID_AGENT_FRETE.
      WA_RETORNO-DS_AGENT_FRETE    = WA_TAB-DS_AGENT_FRETE.
      WA_RETORNO-ID_LOCAL_COLETA   = WA_TAB-ID_LOCAL_COLETA.
      WA_RETORNO-DS_LOCAL_COLETA   = WA_TAB-DS_LOCAL_COLETA.
      WA_RETORNO-ID_LOCAL_DESTINO  = WA_TAB-ID_LOCAL_DESTINO.
      WA_RETORNO-DS_LOCAL_DESTINO  = WA_TAB-DS_LOCAL_DESTINO.
      WA_RETORNO-ID_LOCAL_DESCARGA = WA_TAB-ID_LOCAL_DESCARGA.
      WA_RETORNO-DS_LOCAL_DESCARGA = WA_TAB-DS_LOCAL_DESCARGA.
      WA_RETORNO-TP_FRETE          = WA_TAB-TP_FRETE.
      WA_RETORNO-ID_PRODUTO        = WA_TAB-ID_PRODUTO.
      WA_RETORNO-DS_PRODUTO        = WA_TAB-DS_PRODUTO.
      WA_RETORNO-NM_PESO_BRUTO     = WA_TAB-NM_PESO_BRUTO.
      WA_RETORNO-NM_PESO_TARA      = WA_TAB-NM_PESO_TARA.
      WA_RETORNO-NM_PESO_SUBTOTAL  = WA_TAB-NM_PESO_SUBTOTAL.
      WA_RETORNO-NM_PESO_DESCONTOS = WA_TAB-NM_PESO_DESCONTOS.
      WA_RETORNO-NM_PESO_LIQUIDO   = WA_TAB-NM_PESO_LIQUIDO.
      WA_RETORNO-DS_PLACA_TRATOR   = WA_TAB-DS_PLACA_TRATOR.
      WA_RETORNO-ID_PROPRIETARIO   = WA_TAB-ID_PROPRIETARIO.
      WA_RETORNO-DS_PROPRIETARIO   = WA_TAB-DS_PROPRIETARIO.
      WA_RETORNO-DS_PLACA_REBOQ_1  = WA_TAB-DS_PLACA_REBOQ_1.
      WA_RETORNO-DS_PLACA_REBOQ_2  = WA_TAB-DS_PLACA_REBOQ_2.
      WA_RETORNO-DS_PLACA_REBOQ_3  = WA_TAB-DS_PLACA_REBOQ_3.
      WA_RETORNO-ID_MOTORISTA      = WA_TAB-ID_MOTORISTA.
      WA_RETORNO-DS_MOTORISTA      = WA_TAB-DS_MOTORISTA.
      WA_RETORNO-NR_TICKET         = WA_TAB-NR_TICKET.
      WA_RETORNO-IN_TRANSFERENCIA  = WA_TAB-IN_TRANSFERENCIA.
      WA_RETORNO-TP_STATUS         = WA_TAB-TP_STATUS.
      WA_RETORNO-DT_ABERTURA       = WA_TAB-DT_ABERTURA.
      WA_RETORNO-HR_ABERTURA       = WA_TAB-HR_ABERTURA.
      WA_RETORNO-US_ABERTURA       = WA_TAB-US_ABERTURA.
      WA_RETORNO-DT_FECHAMENTO     = WA_TAB-DT_FECHAMENTO.
      WA_RETORNO-HR_FECHAMENTO     = WA_TAB-HR_FECHAMENTO.
      WA_RETORNO-US_FECHAMENTO     = WA_TAB-US_FECHAMENTO.
      WA_RETORNO-DT_CONFERENCIA    = WA_TAB-DT_CONFERENCIA.
      WA_RETORNO-HR_CONFERENCIA    = WA_TAB-HR_CONFERENCIA.
      WA_RETORNO-US_CONFERENCIA    = WA_TAB-US_CONFERENCIA.
      WA_RETORNO-DT_CANCELAMENTO   = WA_TAB-DT_CANCELAMENTO.
      WA_RETORNO-HR_CANCELAMENTO   = WA_TAB-HR_CANCELAMENTO.
      WA_RETORNO-US_CANCELAMENTO   = WA_TAB-US_CANCELAMENTO.

      WA_RETORNO-ID_CLASSIFICACAO       = WA_TAB-ID_CLASSIFICACAO.
      WA_RETORNO-IN_GMO                 = WA_TAB-IN_GMO.
      WA_RETORNO-NR_RESULTADO_01        = WA_TAB-NR_RESULTADO_01.
      WA_RETORNO-NR_RESULTADO_02        = WA_TAB-NR_RESULTADO_02.
      WA_RETORNO-NR_RES_RR1_RR2         = WA_TAB-NR_RES_RR1_RR2.
      WA_RETORNO-IN_GMO_03              = WA_TAB-IN_GMO_03.
      WA_RETORNO-IN_SRR_ORIGEM_PARTIC   = WA_TAB-IN_SRR_ORIGEM_PARTIC.
      WA_RETORNO-ID_OUTRO_PARTIC        = WA_TAB-ID_OUTRO_PARTIC.
      WA_RETORNO-DS_OUTRO_PARTIC        = WA_TAB-DS_OUTRO_PARTIC.
      WA_RETORNO-IN_SRR_DECLARADO       = WA_TAB-IN_SRR_DECLARADO.
      WA_RETORNO-IN_TESTE_SRR           = WA_TAB-IN_TESTE_SRR.
      WA_RETORNO-IN_SRR_DECLARADO_2     = WA_TAB-IN_SRR_DECLARADO_2.
      WA_RETORNO-IN_TESTE_SRR_2         = WA_TAB-IN_TESTE_SRR_2.
      WA_RETORNO-TP_TRANSGENIA          = WA_TAB-TP_TRANSGENIA.

      WA_RETORNO-NR_PERC_UMI   = WA_TAB-NR_PERC_UMI.
      WA_RETORNO-NR_PERC_IMP   = WA_TAB-NR_PERC_IMP.
      WA_RETORNO-NR_PERC_AVA   = WA_TAB-NR_PERC_AVA.
      WA_RETORNO-NR_PERC_ARD   = WA_TAB-NR_PERC_ARD.
      WA_RETORNO-NR_PERC_QUE   = WA_TAB-NR_PERC_QUE.
      WA_RETORNO-NR_PERC_ESV   = WA_TAB-NR_PERC_ESV.
      WA_RETORNO-NR_QTDE_UMI   = WA_TAB-NR_QTDE_UMI.
      WA_RETORNO-NR_QTDE_IMP   = WA_TAB-NR_QTDE_IMP.
      WA_RETORNO-NR_QTDE_AVA   = WA_TAB-NR_QTDE_AVA.
      WA_RETORNO-NR_QTDE_ARD   = WA_TAB-NR_QTDE_ARD.
      WA_RETORNO-NR_QTDE_QUE   = WA_TAB-NR_QTDE_QUE.
      WA_RETORNO-NR_QTDE_ESV   = WA_TAB-NR_QTDE_ESV.
      APPEND WA_RETORNO TO LC_RETORNO.
    ENDLOOP.

    CHECK LC_RETORNO[] IS NOT INITIAL.

    E_REGISTROS = LC_RETORNO.
    E_PESQUISOU = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CARGA~PESQUISAR_SOLICITACAO_MANUT.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SEND_CARGA_TO_OPUS.

    R_INSTANCIA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SEND_ESTORNO_CARGA_TO_OPUS.

    R_INSTANCIA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ABRIR.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ACEITE_SOLI_MANUTENCAO.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_CANCELAR.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_CANCELAR_SOLIC_MANUT.

    R_INSTANCE = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_CARGA.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_CONFERIDO.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_CONFERIR_SOLIC_MANUT.

    R_INSTANCE = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_CRIA_MANUTENCAO.

    R_INSTANCE = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_DENQUEUE.

    R_CARGA = ME.

    CHECK ME->ZIF_CARGA~AT_NAO_GERAR_BLOQUEIOS EQ ABAP_FALSE.

    CALL FUNCTION 'ZDENQUEUE_CARGA'
      EXPORTING
        ID_CARGA = I_CARGA.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ENQUEUE.

    CHECK ME->ZIF_CARGA~AT_NAO_GERAR_BLOQUEIOS EQ ABAP_FALSE.

    CALL FUNCTION 'ZENQUEUE_CARGA'
      EXPORTING
        ID_CARGA       = I_CARGA
      EXCEPTIONS
        FOREIGN_LOCK   = 1
        SYSTEM_FAILURE = 2
        OTHERS         = 3.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_FECHAR.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_GERAR_ENTRADA_ESTOQUE.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_GERAR_ESTORNO_ESTOQUE.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_GERAR_ROMANEIO_ENTRADA.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_GERAR_ROMANEIO_SAIDA.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ID_CARGA.

    R_CARGA = ME.

    ME->CARGA-ID_CARGA         = I_ID_CARGA.
    ME->CLASSIFICACAO-ID_CARGA = I_ID_CARGA.

    ME->SET_ENQUEUE( I_CARGA = ME->CARGA-ID_CARGA ).

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ID_CLASSIFICACAO.

    R_CARGA = ME.

    ME->CLASSIFICACAO-ID_CLASSIFICACAO = I_ID_CLASSIFICACAO.
    ME->CARGA-ID_CLASSIFICACAO         = I_ID_CLASSIFICACAO.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ID_SOLIC_MANUT.

    R_CARGA = ME.

    ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-ID_SOLICITACAO = I_ID_SOLICITACAO.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_LIMPA_ROMANEIO_SAIDA.

    R_INSTANCIA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_LOGS_ALTERACAO.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_NOTA_ENTRADA_PROPRIA.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_OBSERVACAO_NOTA.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ORDEM_CARREGAMENTO.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ORDEM_VENDA.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_PESOS_NOTAS.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_PROCESSAR_ENTRADA.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_PROCESSAR_ESTORNO.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_PROCESSAR_ESTORNO_SOBRA.

    R_INSTANCE = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_PROCESSAR_MANUTENCAO.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_PROCESSAR_SOBRA_FOB.

    R_INSTANCE = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_REGISTRO.

    R_CARGA = ME.

    ME->LIMPAR_REGISTRO( ).

    IF ME->CARGA-ID_CARGA IS NOT INITIAL AND I_NO_ENQUEUE EQ ABAP_FALSE.
      ME->SET_DENQUEUE( I_CARGA = ME->CARGA-ID_CARGA ).
    ENDIF.

    ME->ZIF_CARGA~GET_CABECALHO_CARGA(
      EXPORTING
        I_ID_CARGA   = I_ID_CARGA " Id. da Carga.
      IMPORTING
        E_ZSDT0001CG = ME->CARGA    " Cargas (Romaneios)
    ).

    SELECT SINGLE * INTO ME->CLASSIFICACAO FROM ZSDT0001CL WHERE ID_CARGA EQ I_ID_CARGA.
    SELECT * INTO TABLE ME->ZIF_CARGA~ORDEM_VENDA FROM ZSDT0001OV WHERE ID_CARGA EQ I_ID_CARGA.
    SELECT * INTO TABLE ME->ZIF_CARGA~PEDIDO_COMPRA FROM ZSDT0001EK WHERE ID_CARGA EQ I_ID_CARGA.
    SELECT * INTO TABLE ME->RESULTADO FROM ZSDT0001RS WHERE ID_CARGA EQ I_ID_CARGA AND ID_CLASSIFICACAO EQ ME->CARGA-ID_CLASSIFICACAO.
    SELECT * INTO TABLE ME->DOCUMENTO_FISCAL FROM ZSDT0001NT WHERE ID_CARGA EQ I_ID_CARGA.

    SELECT * INTO TABLE @DATA(IT_ZSDT0001ACG)
      FROM ZSDT0001ACG
     WHERE ID_CARGA_ORIGEM EQ @ME->CARGA-ID_CARGA.

    IF SY-SUBRC IS INITIAL.
      SELECT * INTO TABLE ME->ZIF_CARGA~SOLICITACOES
        FROM ZSDT0001ACB
         FOR ALL ENTRIES IN IT_ZSDT0001ACG
       WHERE ID_SOLICITACAO EQ IT_ZSDT0001ACG-ID_SOLICITACAO.
    ENDIF.

    SELECT * APPENDING TABLE ME->RESULTADO
      FROM ZSDT0001RS
       FOR ALL ENTRIES IN ME->DOCUMENTO_FISCAL
     WHERE ID_CARGA         EQ ME->DOCUMENTO_FISCAL-ID_CARGA
       AND ID_CLASSIFICACAO EQ ME->DOCUMENTO_FISCAL-ID_CLASSIFICACAO.

    SELECT * INTO TABLE ME->CLASSIFICACAO_NOTAS
      FROM ZSDT0001CL
      FOR ALL ENTRIES IN ME->DOCUMENTO_FISCAL
     WHERE ID_CARGA         EQ I_ID_CARGA
       AND ID_CLASSIFICACAO EQ ME->DOCUMENTO_FISCAL-ID_CLASSIFICACAO
       AND ID_CLASSIFICACAO NE ME->CARGA-ID_CLASSIFICACAO.

    IF I_NO_ENQUEUE EQ ABAP_FALSE.
      ME->SET_ENQUEUE( I_CARGA = ME->CARGA-ID_CARGA ).
    ENDIF.

    ME->ZIF_CARGA~SET_TIPO_FRETE_ORDEM_VENDA( ).

    ME->CK_ALTEROU = ABAP_FALSE.
    ME->ZIF_CARGA~CK_DIGITADO_UMIDADE    = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_IMPUREZA   = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_ARDIDO     = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_AVARIADO   = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_QUEBRADO   = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_ESVERDEADO = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_REGISTRO_MANUTENCAO.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_TIPO_FRETE_ORDEM_VENDA.

    R_INSTANCE = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_TRANSGENIA.

    DEFINE RETORNA.
      I_IN_GMO                = ME->CLASSIFICACAO-IN_GMO.
      I_NR_RESULTADO_01       = ME->CLASSIFICACAO-NR_RESULTADO_01.
      I_NR_RESULTADO_02       = ME->CLASSIFICACAO-NR_RESULTADO_02.
      I_NR_RES_RR1_RR2        = ME->CLASSIFICACAO-NR_RES_RR1_RR2.
      I_IN_GMO_03             = ME->CLASSIFICACAO-IN_GMO_03.
      I_IN_SRR_ORIGEM_PARTIC  = ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC.
      I_ID_OUTRO_PARTIC       = ME->CLASSIFICACAO-ID_OUTRO_PARTIC.
      I_IN_SRR_DECLARADO      = ME->CLASSIFICACAO-IN_SRR_DECLARADO.
      I_IN_TESTE_SRR          = ME->CLASSIFICACAO-IN_TESTE_SRR.
      I_IN_SRR_DECLARADO_2    = ME->CLASSIFICACAO-IN_SRR_DECLARADO_2.
      I_IN_TESTE_SRR_2        = ME->CLASSIFICACAO-IN_TESTE_SRR_2.
      I_ID_CLASSIFICADORA     = ME->CLASSIFICACAO-ID_CLASSIFICADORA.

      TRY .
        CLEAR: ME->CLASSIFICACAO-TP_TRANSGENIA.

        ME->ZIF_CARGA~GET_FACTORY_TP_TRANSGENIA(
          EXPORTING
            I_CLASSIFICACAO = ME->CLASSIFICACAO
          IMPORTING
            E_TP_TRANSGENIA = ME->CLASSIFICACAO-TP_TRANSGENIA ).
       CATCH ZCX_CARGA .
      ENDTRY.

      I_TP_TRANSGENIA = ME->CLASSIFICACAO-TP_TRANSGENIA.

    END-OF-DEFINITION.

*(Campo 1) IN_GMO
*(Campo 2) IN_SRR_DECLARADO
*(Campo 3) IN_SRR_DECLARADO_2
*(Campo 4) IN_TESTE_SRR_2
*(campo 5) IN_SRR_ORIGEM_PARTIC

    ME->CLASSIFICACAO-IN_GMO                = I_IN_GMO.
    ME->CLASSIFICACAO-NR_RESULTADO_01       = I_NR_RESULTADO_01.
    ME->CLASSIFICACAO-NR_RESULTADO_02       = I_NR_RESULTADO_02.
    ME->CLASSIFICACAO-NR_RES_RR1_RR2        = I_NR_RES_RR1_RR2.
    ME->CLASSIFICACAO-IN_GMO_03             = I_IN_GMO_03.
    ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC  = I_IN_SRR_ORIGEM_PARTIC.
    ME->CLASSIFICACAO-ID_OUTRO_PARTIC       = I_ID_OUTRO_PARTIC.
    ME->CLASSIFICACAO-IN_SRR_DECLARADO      = I_IN_SRR_DECLARADO.
    ME->CLASSIFICACAO-IN_TESTE_SRR          = I_IN_TESTE_SRR.
    ME->CLASSIFICACAO-IN_SRR_DECLARADO_2    = I_IN_SRR_DECLARADO_2.
    ME->CLASSIFICACAO-IN_TESTE_SRR_2        = I_IN_TESTE_SRR_2.
    ME->CLASSIFICACAO-ID_CLASSIFICADORA     = I_ID_CLASSIFICADORA.

    SELECT SINGLE * INTO @DATA(WA_MARA)
      FROM MARA
     WHERE MATNR EQ @ME->CARGA-ID_PRODUTO.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = WA_MARA-MATKL
      IMPORTING
        OUTPUT = WA_MARA-MATKL.

    "Campo Não Altera pela Tela
    ME->CLASSIFICACAO-IN_SRR_DECLARADO = ABAP_FALSE.

    CASE WA_MARA-MATKL.

      WHEN '700170'. "Milho

        "(Campo 1)
        ME->CLASSIFICACAO-IN_GMO              = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
        "(Campo 2)
        ME->CLASSIFICACAO-IN_SRR_DECLARADO    = ABAP_TRUE.
        "(Campo 3)
        ME->CLASSIFICACAO-IN_SRR_DECLARADO_2   = ABAP_FALSE.
        "(Campo 4)
        ME->CLASSIFICACAO-IN_TESTE_SRR_2       = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
        "(Campo 5)
        ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.

        ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
        ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
        ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

        CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.

      WHEN '700110'. "Soja


        CASE ME->CLASSIFICACAO-IN_GMO.

*REGRA                      TIPO DE PRODUTO PARA "RESETAR"
*1: Se campo 1 = NEGATIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:                      CONVENCIONAL (CO) Desmarcar "Negativo"
*	Campo 2 = Não
*	Campo 3 = Não
*	Campo 4 = Não Testado
*	Campo 5 = Não
*	OBS.: o campo "Soma RR1 + RR2" deve trazer automaticamente a soma dos valores dos campos "Resultado"

          WHEN ZIF_CARGA=>ST_GMO_NEGATIVO.

*3: O campo 2 deve ser bloqueado para marcação na empresa AMAGGI, exceto para as filiais Lucas (55), Porto Velho (19) e Portochuelo (61)
*0119	AMAGGI PORTO VELHO
*0155	AMAGGI LUCAS - FABRICA
*0161	AMAGGI PORTOCHUELO

            "(Campo 2)
            IF ME->CARGA-ID_BRANCH NE '0155' AND ME->CARGA-ID_BRANCH NE '0119' AND ME->CARGA-ID_BRANCH NE '0161'.
              ME->CLASSIFICACAO-IN_SRR_DECLARADO    = ABAP_FALSE.
            ENDIF.
            "(Campo 3)
            ME->CLASSIFICACAO-IN_SRR_DECLARADO_2  = ABAP_FALSE.
            "(Campo 4)
            ME->CLASSIFICACAO-IN_TESTE_SRR_2      = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
            "(campo 5)
            ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.
            CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.
            RETORNA.
            EXIT.

*2: Se campo 1 = POSITIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:                      RR TESTADO (T1) Desmarcar "Positivo"
*	Campo 2 = Não
*	Campo 3 = Não
*	Campo 4 = Não Testado
*	Campo 5 = Não
*	OBS.: ao menos 1 dos campos "Resultado" deve ser preenchido com valor > 0, e o campo "Soma RR1 + RR2" deve trazer automaticamente a soma dos valores dos campos "Resultado"

          WHEN ZIF_CARGA=>ST_GMO_POSITIVO.

*3: O campo 2 deve ser bloqueado para marcação na empresa AMAGGI, exceto para as filiais Lucas (55), Porto Velho (19) e Portochuelo (61)
*0119	AMAGGI PORTO VELHO
*0155	AMAGGI LUCAS - FABRICA
*0161	AMAGGI PORTOCHUELO

            "(Campo 2)
            IF ME->CARGA-ID_BRANCH NE '0155' AND ME->CARGA-ID_BRANCH NE '0119' AND ME->CARGA-ID_BRANCH NE '0161'.
              ME->CLASSIFICACAO-IN_SRR_DECLARADO    = ABAP_FALSE.
            ENDIF.
            "(Campo 3)
            ME->CLASSIFICACAO-IN_SRR_DECLARADO_2  = ABAP_FALSE.
            "(Campo 4)
            ME->CLASSIFICACAO-IN_TESTE_SRR_2      = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
            "(campo 5)
            ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.
            CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.

            ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
            ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
            ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

            RETORNA.
            EXIT.

        ENDCASE.

*4: Se campo 3 = SIM, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:                     RR2 DECLARADO (D2)  Desmarcar "Sim"
*	Campo 1 = Sem marcação
*	Campo 2 = Não
*	Campo 4 = Não Testado
*	Campo 5 = Não

        IF ME->CLASSIFICACAO-IN_SRR_DECLARADO_2 EQ ABAP_TRUE.
          "(Campo 1)
          ME->CLASSIFICACAO-IN_GMO              = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
          "(Campo 2)
          ME->CLASSIFICACAO-IN_SRR_DECLARADO    = ABAP_FALSE.
          "(Campo 4)
          ME->CLASSIFICACAO-IN_TESTE_SRR_2      = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
          "(campo 5)
          ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.
          CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.

          ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
          ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
          ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

          RETORNA.
          EXIT.
        ENDIF.

        CASE ME->CLASSIFICACAO-IN_TESTE_SRR_2.

*5: Se campo 4 = POSITIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:                      RR2 TESTADO (T2)  Desmarcar "Positivo"
*	Campo 1 = Sem marcação
*	Campo 2 = Não
*	Campo 3 = Não
*	Campo 5 = Não

          WHEN ZIF_CARGA=>ST_GMO_POSITIVO.

            "(Campo 1)
            ME->CLASSIFICACAO-IN_GMO               = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
            "(Campo 2)
            ME->CLASSIFICACAO-IN_SRR_DECLARADO     = ABAP_FALSE.
            "(Campo 3)
            ME->CLASSIFICACAO-IN_SRR_DECLARADO_2   = ABAP_FALSE.
            "(campo 5)
            ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.
            CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.

            ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
            ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
            ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

            RETORNA.
            EXIT.

*6: Se campo 4 = NEGATIVO, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:                      RR1 DECLARADO (D1)  Desmarcar "Negativo"
*	Campo 1 = Sem marcação
*	Campo 2 = Sim
*	Campo 3 = Não
*	Campo 5 = Não

          WHEN ZIF_CARGA=>ST_GMO_NEGATIVO.

            "(Campo 1)
            ME->CLASSIFICACAO-IN_GMO               = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
            "(Campo 2)
            ME->CLASSIFICACAO-IN_SRR_DECLARADO     = ABAP_TRUE.
            "(Campo 3)
            ME->CLASSIFICACAO-IN_SRR_DECLARADO_2   = ABAP_FALSE.
            "(campo 5)
            ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.
            CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.

            ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
            ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
            ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

            RETORNA.
            EXIT.

        ENDCASE.

*5: Se campo 5 = SIM, demais campos devem ser marcados com bloqueio para alteração conforme abaixo:                     PARTICIPANTE (PA) Desmarcar "Negativo"
*	Campo 1 = Sem marcação
*	Campo 2 = Não
*	Campo 3 = Não
*	Campo 4 = Não Testado
*	OBS.: Habilitar os campos "Participante" e "Endereço Parcipante" para que o usuário lance as informações. Não permitir a gravação com os campos em branco.

        IF ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC EQ ABAP_TRUE.
          "(Campo 1)
          ME->CLASSIFICACAO-IN_GMO              = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
          "(Campo 2)
          ME->CLASSIFICACAO-IN_SRR_DECLARADO    = ABAP_FALSE.
          "(Campo 3)
          ME->CLASSIFICACAO-IN_SRR_DECLARADO_2   = ABAP_FALSE.
          "(Campo 4)
          ME->CLASSIFICACAO-IN_TESTE_SRR_2      = ZIF_CARGA=>ST_GMO_NAO_TESTADO.

          ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
          ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
          ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

          RETORNA.
          EXIT.
        ENDIF.

      WHEN OTHERS.

        "(Campo 1)
        ME->CLASSIFICACAO-IN_GMO               = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
        "(Campo 2)
        ME->CLASSIFICACAO-IN_SRR_DECLARADO     = ABAP_FALSE.
        "(Campo 3)
        ME->CLASSIFICACAO-IN_SRR_DECLARADO_2   = ABAP_FALSE.
        "(Campo 4)
        ME->CLASSIFICACAO-IN_TESTE_SRR_2       = ZIF_CARGA=>ST_GMO_NAO_TESTADO.
        "(Campo 5)
        ME->CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC = ABAP_FALSE.
        CLEAR: ME->CLASSIFICACAO-ID_OUTRO_PARTIC.

        ME->CLASSIFICACAO-NR_RESULTADO_01 = 0.
        ME->CLASSIFICACAO-NR_RESULTADO_02 = 0.
        ME->CLASSIFICACAO-NR_RES_RR1_RR2  = 0.

    ENDCASE.

    RETORNA.

  ENDMETHOD.


  METHOD ZIF_CARGA~VALIDAR_EXCLUSAO.

    E_VALIDOU = ABAP_FALSE.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~VALIDAR_REGISTRO.

    R_CARGA = ME.
    E_VALIDOU = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CARGA~VALIDA_ATRIBUTO_ALTERAVEL.

    R_CARGA = ME.

    E_PERMITIDO = ABAP_FALSE.

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_ALTERACAO_MANUT_ROMANEIO.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_ESTORNO_PENDENTE.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_ORDEM_CARREGAMENTO.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_TICKET_PESAGEM.


  ENDMETHOD.


  METHOD zif_carga~set_ordem_carregamento_ext.

    r_carga = me.

  ENDMETHOD.
ENDCLASS.
