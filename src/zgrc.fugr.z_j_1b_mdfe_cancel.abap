FUNCTION Z_J_1B_MDFE_CANCEL.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(I_DOCNUM) TYPE  J_1BDOCNUM
*"     REFERENCE(I_MODE) TYPE  CHAR01 DEFAULT '1'
*"     REFERENCE(I_JUSTIFICATIVA_CANCEL) TYPE  CHAR255
*"  EXPORTING
*"     VALUE(ZET_BAPIRET2) TYPE  ZBAPIRETTAB
*"     VALUE(ZEV_ERROR_STATUS) TYPE  ZXNFE_ERRSTATUS
*"     VALUE(LV_RFCDEST_MDFE) TYPE  RFCDEST
*"  EXCEPTIONS
*"      RFC_ERROR
*"      COMMUNICATION_FAILURE
*"      SYSTEM_FAILURE
*"----------------------------------------------------------------------

  DATA: LV_XMDFEACTIVE TYPE J_1BXNFEACTIVE,
        ZIV_RESEND     TYPE ZXNFE_RESEND.

  DATA: LS_EVENT        TYPE J_1BNFE_EVENT,
        LS_ORIG_EVENT   TYPE J_1BNFE_EVENT,
        LV_FIRST_EVENT  TYPE FLAG,
        LV_NEW_SEQUENCE TYPE FLAG,
        LV_UPDMODE      TYPE CHAR1.

  DATA: ZIV_ACCESS_KEY TYPE  ZXNFE_ID,
        ZIV_TIMESTAMP  TYPE  TIMESTAMPL,
        ZIV_TIMEZONE   TYPE  AD_TZONE,
        ZIV_CUF        TYPE  ZXNFE_CUF,
        ZIV_CMUN       TYPE  ZXNFE_CMUN,
        ZIV_DTENC      TYPE  ZXNFE_DHEMI_UTC,
        GC_MDFE_CANCEL TYPE J_1BNFE_INT_EVENT VALUE 'EV_CANCEL',
        LC_MAX_SEQNUM  TYPE J_1BNFE_EVENT_SEQNO_EXT VALUE 20,
        GC_ERR_G       TYPE J_1BNFE_MS_ERROR VALUE 'G',
        GC_ERR_V       TYPE J_1BNFE_MS_ERROR VALUE 'V',
        GC_ERR_R       TYPE J_1BNFE_MS_ERROR VALUE 'R'.


* ENQUEUE J_1BNFE_EVENT
  CALL FUNCTION 'ENQUEUE_E_J_1BNFE_EVENT'
    EXPORTING
      MODE_J_1BNFE_EVENT = 'E'
      MANDT              = SY-MANDT
      DOCNUM             = I_DOCNUM
    EXCEPTIONS
      FOREIGN_LOCK       = 1
      SYSTEM_FAILURE     = 2
      OTHERS             = 3.

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 RAISING RFC_ERROR.
  ENDIF.

  SELECT SINGLE * INTO @DATA(WA_J_1BNFDOC)
    FROM J_1BNFE_ACTIVE
   WHERE DOCNUM EQ @I_DOCNUM.

  SELECT SINGLE * INTO @DATA(WA_J_1BNFDOC2)
    FROM J_1BNFDOC
   WHERE DOCNUM EQ @I_DOCNUM.


  DATA(_lva_send_to_cloud) = abap_false.

  SELECT SINGLE *
    FROM tvarvc INTO @DATA(lwa_tvarvc)
   WHERE name = 'BRANCH_DRC'
      AND low = @wa_j_1bnfdoc-branch.
  IF sy-subrc EQ 0 .
    _lva_send_to_cloud = abap_true.
  ENDIF.


  CALL FUNCTION 'J_1B_NFE_CHECK_RFC_DESTINATION'
    EXPORTING
      I_BUKRS      = WA_J_1BNFDOC-BUKRS
      I_BRANCH     = WA_J_1BNFDOC-BRANCH
      I_MODEL      = WA_J_1BNFDOC-MODEL
    IMPORTING
      E_RFCDEST    = LV_RFCDEST_MDFE
      E_XNFEACTIVE = LV_XMDFEACTIVE
    EXCEPTIONS
      RFC_ERROR    = 1
      OTHERS       = 2.

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 RAISING RFC_ERROR.
  ENDIF.

  CALL FUNCTION 'J_1BNFE_EVENT_PREPARE'
    EXPORTING
      IV_DOCNUM       = WA_J_1BNFDOC-DOCNUM
      IV_EVENT        = GC_MDFE_CANCEL
    IMPORTING
      ES_EVENT        = LS_EVENT
      ES_ORIG_EVENT   = LS_ORIG_EVENT
      EV_FIRST_EVENT  = LV_FIRST_EVENT
      EV_NEW_SEQUENCE = LV_NEW_SEQUENCE
    EXCEPTIONS
      INVALID_EVENT   = 1
      OTHERS          = 2.

  IF SY-SUBRC IS NOT INITIAL.
    CALL FUNCTION 'DEQUEUE_E_J_1BNFE_EVENT'
      EXPORTING
        MODE_J_1BNFE_EVENT = 'E'
        MANDT              = SY-MANDT
        DOCNUM             = I_DOCNUM.
    MESSAGE ID 'ZJ1B_NFE' TYPE 'E' NUMBER '001' RAISING RFC_ERROR.
  ENDIF.

* Check whether max official sequence number 20 is reached
  IF LS_ORIG_EVENT-EXT_SEQNUM >= LC_MAX_SEQNUM.
    CALL FUNCTION 'DEQUEUE_E_J_1BNFE_EVENT'
      EXPORTING
        MODE_J_1BNFE_EVENT = 'E'
        MANDT              = SY-MANDT
        DOCNUM             = I_DOCNUM.

    MESSAGE ID 'ZJ1B_NFE' TYPE 'E' NUMBER '002' RAISING RFC_ERROR.
    EXIT.
  ENDIF.

  IF NOT LS_ORIG_EVENT IS INITIAL. " it is not the first seq no
* Do not allow new CCe for MS status G
    IF LS_ORIG_EVENT-MS_ERROR = GC_ERR_G.

      CALL FUNCTION 'DEQUEUE_E_J_1BNFE_EVENT'
        EXPORTING
          MODE_J_1BNFE_EVENT = 'E'
          MANDT              = SY-MANDT
          DOCNUM             = I_DOCNUM.

      CASE I_MODE.
        WHEN 1.
          MESSAGE ID 'ZJ1B_NFE' TYPE 'E' NUMBER '003' RAISING RFC_ERROR.
        WHEN 2.
          MESSAGE ID 'ZJ1B_NFE' TYPE 'E' NUMBER '004' RAISING RFC_ERROR.
        WHEN OTHERS.
      ENDCASE.
    ENDIF.
* Do not allow new CCe if another one is still processed
    IF LS_ORIG_EVENT-DOCSTA IS INITIAL AND LS_ORIG_EVENT-MS_ERROR IS INITIAL.

      CALL FUNCTION 'DEQUEUE_E_J_1BNFE_EVENT'
        EXPORTING
          MODE_J_1BNFE_EVENT = 'E'
          MANDT              = SY-MANDT
          DOCNUM             = I_DOCNUM.

      CASE I_MODE.
        WHEN 1.
          MESSAGE ID 'ZJ1B_NFE' TYPE 'E' NUMBER '003' RAISING RFC_ERROR.
        WHEN 2.
          MESSAGE ID 'ZJ1B_NFE' TYPE 'E' NUMBER '004' RAISING RFC_ERROR.
        WHEN OTHERS.
      ENDCASE.
    ENDIF.
  ENDIF.

  ZIV_ACCESS_KEY = WA_J_1BNFDOC-REGIO && WA_J_1BNFDOC-NFYEAR && WA_J_1BNFDOC-NFMONTH && WA_J_1BNFDOC-STCD1 && WA_J_1BNFDOC-MODEL &&
                   WA_J_1BNFDOC-SERIE && WA_J_1BNFDOC-NFNUM9 && WA_J_1BNFDOC-DOCNUM9 && WA_J_1BNFDOC-CDV.

  SELECT SINGLE * INTO @DATA(WA_J_1BBRANCH)
    FROM J_1BBRANCH
   WHERE BUKRS  EQ @WA_J_1BNFDOC-BUKRS
     AND BRANCH EQ @WA_J_1BNFDOC-BRANCH.

  SELECT SINGLE * INTO @DATA(WA_ADRC)
    FROM ADRC
   WHERE ADDRNUMBER EQ @WA_J_1BBRANCH-ADRNR.

  DATA: LC_GOV_TIMESTAMP TYPE C LENGTH 25.
  DATA: IV_TIMESTAMP TYPE C LENGTH 14.

  CALL FUNCTION 'ZXNFE_CONV_UTC_TIMESTMP_TO_GOV'
    DESTINATION LV_RFCDEST_MDFE
    EXPORTING
      IV_TIMESTAMP          = IV_TIMESTAMP
      IV_UF                 = WA_ADRC-REGION
    IMPORTING
      CV_SEFAZ_DATE_UTC     = LC_GOV_TIMESTAMP
      EF_TIMEZONE           = ZIV_TIMEZONE
      LV_TIMESTAMPL         = ZIV_TIMESTAMP
      EV_ERROR_STATUS       = ZEV_ERROR_STATUS
      ET_BAPIRET2           = ZET_BAPIRET2
    EXCEPTIONS
      COMMUNICATION_FAILURE = 1
      SYSTEM_FAILURE        = 2.

  CASE SY-SUBRC.
    WHEN 1.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 RAISING COMMUNICATION_FAILURE.
    WHEN 2.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 RAISING SYSTEM_FAILURE.
    WHEN OTHERS.
      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 RAISING SYSTEM_FAILURE.
      ENDIF.
  ENDCASE.


*  CALL FUNCTION 'Z_FUSO_HORARIO_FILIAL'
*    EXPORTING
*      I_BUKRS      = WA_J_1BNFDOC-BUKRS
*      I_BRANCH     = WA_J_1BNFDOC-BRANCH
*    IMPORTING
*      "      E_TZNZONE    = ZIV_TIMEZONE
*      E_TIMESTAMPL = ZIV_TIMESTAMP.

*  IF ZIV_TIMEZONE IS INITIAL.
*    ZIV_TIMEZONE = SY-TIMLO.
*  ENDIF.

  DATA: IV_EVENT_TYPE               TYPE ZXNFE_EV_TPEVENTO,
        IV_INTERNAL_SEQUENCE_NUMBER TYPE ZXNFE_EV_NSEQEVENTO.

  IV_EVENT_TYPE = '110111'.
  IV_INTERNAL_SEQUENCE_NUMBER = LS_EVENT-SEQNUM.


  IF _lva_send_to_cloud = abap_true.

    DATA(lwa_event_info) = VALUE nfe_cloud_mdfe_map_event_info( ).

    DATA: lva_dhemit_utc TYPE zxnfe_dhemi_utc.
    PERFORM f_conv_timestamp_to_utc USING ls_event-issue_tmpl CHANGING lva_dhemit_utc.

    PERFORM f_set_data_sefaz USING lva_dhemit_utc CHANGING lwa_event_info-issuing_date_time.
    lwa_event_info-event_detail-cancellation-authorization_protocol = wa_j_1bnfdoc-authcod.
    lwa_event_info-event_detail-cancellation-reason                 = i_justificativa_cancel.
    lwa_event_info-sequence_number = ls_event-seqnum.
    lwa_event_info-type            = '110111'. "Cancelamento

    PERFORM f_send_mdfe_event_to_cloud USING wa_j_1bnfdoc-docnum
                                             ls_event
                                             lwa_event_info.

  ELSE.

    CALL FUNCTION '/XNFE/EV_ISSUE_MDFE_CANCEL'
      DESTINATION LV_RFCDEST_MDFE
      EXPORTING
        IV_ACCESS_KEY               = ZIV_ACCESS_KEY
        IV_DOCNUM                   = WA_J_1BNFDOC-DOCNUM
        IV_EVENT_TYPE               = IV_EVENT_TYPE
        IV_INTERNAL_SEQUENCE_NUMBER = IV_INTERNAL_SEQUENCE_NUMBER
        IV_TIMESTAMP                = ZIV_TIMESTAMP
        IV_TIMEZONE                 = ZIV_TIMEZONE
        IV_XJUST                    = I_JUSTIFICATIVA_CANCEL
        IV_RESEND                   = ZIV_RESEND
      IMPORTING
        EV_ERROR_STATUS             = ZEV_ERROR_STATUS
        ET_BAPIRET2                 = ZET_BAPIRET2
      EXCEPTIONS
        COMMUNICATION_FAILURE       = 1
        SYSTEM_FAILURE              = 2.

    CASE SY-SUBRC.
      WHEN 1.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 RAISING COMMUNICATION_FAILURE.
      WHEN 2.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 RAISING SYSTEM_FAILURE.
      WHEN OTHERS.
        IF SY-SUBRC IS NOT INITIAL.
          MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 RAISING SYSTEM_FAILURE.
        ENDIF.
    ENDCASE.

  ENDIF.

  SELECT SINGLE * INTO @DATA(VL_J_1BNFE_EVENT)
    FROM J_1BNFE_EVENT
   WHERE DOCNUM     EQ @WA_J_1BNFDOC-DOCNUM
     AND INT_EVENT  EQ @GC_MDFE_CANCEL
     AND SEQNUM     EQ @LS_EVENT-SEQNUM.

  LV_UPDMODE = 'I'.
  IF SY-SUBRC IS INITIAL.
    LV_UPDMODE = 'U'.
  ENDIF.

* Update the event tables
  CALL FUNCTION 'J_1BNFE_EVENT_UPDATE' IN UPDATE TASK
    EXPORTING
      IS_EVENT_COMMON = LS_EVENT
      IV_UPDMODE      = LV_UPDMODE.

* Move errors from messaging system to NF-e Monitor log
  IF ZET_BAPIRET2 IS NOT INITIAL.
    CALL FUNCTION 'J_1B_NFE_BAPIRET2_MAP_TO_LOG1'
      EXPORTING
        IV_DOCNUM   = WA_J_1BNFDOC-DOCNUM
        IT_BAPIRET2 = ZET_BAPIRET2.
  ENDIF.

ENDFUNCTION.
