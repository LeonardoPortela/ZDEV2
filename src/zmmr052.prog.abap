*&---------------------------------------------------------------------*
*& Transação: ZMM0123                                                  *
*& Autor....: Enio Jesus                                               *
*& Descrição: Solicitação de Reserva EPI                               *
*&---------------------------------------------------------------------*

REPORT ZMMR052.

TYPES:
  BEGIN OF TY_EMPLOYEE_TEXT,
    CARGO   TYPE T513S-STLTX,
    EMPRESA TYPE T001-BUTXT,
    FILIAL  TYPE T001W-NAME1,
    CCUSTO  TYPE CSKS-NAME1,
    ORDEM   TYPE AUFK-KTEXT,
  END OF TY_EMPLOYEE_TEXT,

  BEGIN OF TY_EMPLOYEE,
    MATRICULA         TYPE PA0001-PERNR,
    CPF               TYPE PA0465-CPF_NR,
    NOME              TYPE PA0001-SNAME,
    CARGO             TYPE T513S-STELL,
    EMPRESA           TYPE T001-BUKRS,
    FILIAL            TYPE T001W-WERKS,
    CCUSTO            TYPE CSKS-KOSTL,
    AUFNR             TYPE AUFK-AUFNR,
    URL_DIGITAL_LEFT  TYPE CHAR255,
    URL_DIGITAL_RIGHT TYPE CHAR255,
    URL_PHOTO         TYPE CHAR255,
    TEXT              TYPE TY_EMPLOYEE_TEXT,
  END OF TY_EMPLOYEE,

  BEGIN OF TY_ACCOUNTING_CLASS_TEXT,
    TP_MOVIMENTO TYPE T156T-BTEXT,
    CONTA_RAZAO  TYPE SKAT-TXT50,
    FILIAL       TYPE T001W-NAME1,
    CENTRO_CUSTO TYPE CSKS-NAME1,
    DEPOSITO     TYPE T001L-LGOBE,
    ORDEM        TYPE AUFK-KTEXT,
  END OF TY_ACCOUNTING_CLASS_TEXT,

  BEGIN OF TY_ACCOUNTING_CLASS,
    ID             TYPE CHAR10,
    EPI_TERCEIRO   TYPE ABAP_BOOL,
    EPI_ESPORADICO TYPE ABAP_BOOL,
    NOME_TERCEIRO  TYPE PA0001-SNAME,
    TP_MOVIMENT    TYPE T156-BWART,
    CONTA_RAZAO    TYPE SKAT-SAKNR,
    FILIAL         TYPE T001W-WERKS,
    CCUSTO         TYPE CSKS-KOSTL,
    AUFNR          TYPE AUFK-AUFNR,
    DEPOSITO       TYPE T001L-LGORT,
    RESERVA        TYPE BAPIRKPFC-RES_NO,
    TEXT           TYPE TY_ACCOUNTING_CLASS_TEXT,
  END OF TY_ACCOUNTING_CLASS,

  BEGIN OF TY_ITENS,
    STATUS   TYPE ICON-ID,
    MATNR    TYPE MAKT-MATNR,
    MAKTX    TYPE MAKT-MAKTX,
    MEINS    TYPE MARA-MEINS,
    QUANTITY TYPE P,
    ID       TYPE CHAR10,
    RESERVA  TYPE BAPIRKPFC-RES_NO,
  END OF TY_ITENS,

  BEGIN OF TY_FIELDS,
    GROUP TYPE CHAR3,
    VALUE TYPE NUM1,
  END OF TY_FIELDS,

  T_FILIAIS        TYPE STANDARD TABLE OF  RGSB4 WITH EMPTY KEY,
  T_PARAM_MATERIAL TYPE TABLE OF ZMMT0080
    WITH EMPTY KEY.

DATA:
  BEGIN OF EMPLOYEE_BLOCK,
    SUBSCREEN TYPE SY-DYNNR,
    ICON      TYPE STRING,
  END OF EMPLOYEE_BLOCK,

  BEGIN OF CLASSIFICATION_BLOCK,
    SUBSCREEN TYPE SY-DYNNR,
    ICON      TYPE STRING,
  END OF CLASSIFICATION_BLOCK,

  BEGIN OF ITENS_BLOCK,
    SUBSCREEN TYPE SY-DYNNR,
    ICON      TYPE STRING,
  END OF ITENS_BLOCK.

DATA ITEMS          TYPE TABLE OF TY_ITENS.
DATA REGISTER_ID    TYPE CHAR10.
DATA EMPLOYEE       TYPE TY_EMPLOYEE.
DATA CLASSIFICATION TYPE TY_ACCOUNTING_CLASS.
DATA T_EPI_CENTRO   TYPE STANDARD TABLE OF  RGSB4 WITH HEADER LINE.

*data reserva type sy-ucomm.

CONSTANTS:
  BEGIN OF SUBSCREEN,
    EMPTY          TYPE SY-DYNNR VALUE 0010,
    EMPLOYEE       TYPE SY-DYNNR VALUE 0002,
    CLASSIFICATION TYPE SY-DYNNR VALUE 0003,
    ITENS          TYPE SY-DYNNR VALUE 0004,
  END OF SUBSCREEN.

CALL SCREEN 0001.

CLASS CL_EMPLOYEE DEFINITION.
  PUBLIC SECTION.
    METHODS CONSTRUCTOR.
    METHODS PROCESS_BEFORE_OUTPUT.

    METHODS SET_EMPLOYEE_SUBSCREEN
      IMPORTING
        SCREEN TYPE SY-DYNNR.

    METHODS GET_DESCRIPTION_EMPRESA
      IMPORTING
        INPUT        TYPE ANY
      RETURNING
        VALUE(VALUE) TYPE STRING.

    METHODS GET_DESCRIPTION_CARGO
      IMPORTING
        INPUT        TYPE ANY
      RETURNING
        VALUE(VALUE) TYPE STRING.

    METHODS GET_EMPLOYEE_CPF
      IMPORTING
        MATRICULA    TYPE PA0465-PERNR
      RETURNING
        VALUE(VALUE) TYPE PA0465-CPF_NR.

    METHODS SET_FIELDS_GROUP1
      IMPORTING
        ENABLE  TYPE ABAP_BOOL OPTIONAL
        DISABLE TYPE ABAP_BOOL OPTIONAL.

    METHODS SET_FIELDS_GROUP2
      IMPORTING
        ENABLE  TYPE ABAP_BOOL OPTIONAL
        DISABLE TYPE ABAP_BOOL OPTIONAL.

    METHODS SET_FIELDS_GROUP3
      IMPORTING
        ENABLE  TYPE ABAP_BOOL OPTIONAL
        DISABLE TYPE ABAP_BOOL OPTIONAL.

    METHODS SET_FIELDS_GROUP4
      IMPORTING
        ENABLE  TYPE ABAP_BOOL OPTIONAL
        DISABLE TYPE ABAP_BOOL OPTIONAL.

    METHODS SET_SCREEN_FIELDS.

  PRIVATE SECTION.
    METHODS DISPLAY_LEFT_THUMB_IMAGE.
    METHODS DISPLAY_RIGHT_THUMB_IMAGE.
    METHODS DISPLAY_PHOTO.

    DATA IMAGE_HELPER          TYPE REF TO ZCL_IMAGE_HELPER.

    DATA PICTURE_LEFT_THUMB    TYPE REF TO CL_GUI_PICTURE.
    DATA CUSTOM_LEFT_THUMB     TYPE REF TO CL_GUI_CUSTOM_CONTAINER.
    DATA PICTURE_USER          TYPE REF TO CL_GUI_PICTURE.
    DATA CUSTOM_USER           TYPE REF TO CL_GUI_CUSTOM_CONTAINER.
    DATA PICTURE_RIGHT_THUMB   TYPE REF TO CL_GUI_PICTURE.
    DATA CUSTOM_RIGHT_THUMB    TYPE REF TO CL_GUI_CUSTOM_CONTAINER.

    DATA FIELDS_GROUP1         TYPE TABLE OF TY_FIELDS.
    DATA FIELDS_GROUP2         TYPE TABLE OF TY_FIELDS.
    DATA FIELDS_GROUP3         TYPE TABLE OF TY_FIELDS.
    DATA FIELDS_GROUP4         TYPE TABLE OF TY_FIELDS.
ENDCLASS.

CLASS CL_EMPLOYEE IMPLEMENTATION.
  METHOD CONSTRUCTOR.
    ME->IMAGE_HELPER = NEW ZCL_IMAGE_HELPER( ).
  ENDMETHOD.

  METHOD PROCESS_BEFORE_OUTPUT.
    ME->DISPLAY_RIGHT_THUMB_IMAGE( ).
    ME->DISPLAY_LEFT_THUMB_IMAGE( ).
    ME->DISPLAY_PHOTO( ).

    ME->SET_FIELDS_GROUP3(
      EXPORTING
        ENABLE  = COND #( WHEN CLASSIFICATION-RESERVA IS NOT INITIAL THEN ABAP_TRUE ELSE ABAP_FALSE )
        DISABLE = COND #( WHEN CLASSIFICATION-RESERVA IS INITIAL THEN ABAP_TRUE ELSE ABAP_FALSE )
    ).

    ME->SET_SCREEN_FIELDS( ).
  ENDMETHOD.
  METHOD SET_EMPLOYEE_SUBSCREEN.
    EMPLOYEE_BLOCK-ICON = SWITCH #( SCREEN WHEN 0010 THEN |{ ICON_EXPAND_ALL } Explandir|
                                                     ELSE |{ ICON_COLLAPSE_ALL } Dados colaborador| ).
    EMPLOYEE_BLOCK-SUBSCREEN = SCREEN.
  ENDMETHOD.

  METHOD GET_DESCRIPTION_EMPRESA.
    SELECT SINGLE BUTXT FROM T001 INTO VALUE WHERE BUKRS = INPUT.
  ENDMETHOD.

  METHOD GET_DESCRIPTION_CARGO.
    SELECT SINGLE STLTX FROM T513S INTO VALUE WHERE STELL = INPUT AND SPRSL = SY-LANGU.
  ENDMETHOD.

  METHOD GET_EMPLOYEE_CPF.
    SELECT SINGLE CPF_NR FROM PA0465 INTO VALUE WHERE PERNR = MATRICULA.
  ENDMETHOD.

  METHOD SET_FIELDS_GROUP1.
    "//Fields:
    "//-> Employee-id

    IF ENABLE = 'X'.
      ME->FIELDS_GROUP1 = VALUE #( ( GROUP = 'GR1' VALUE = 1 ) ).
    ELSEIF DISABLE = 'X'.
      ME->FIELDS_GROUP1 = VALUE #( ( GROUP = 'GR1' VALUE = 0 ) ).
    ENDIF.
  ENDMETHOD.

  METHOD SET_FIELDS_GROUP2.
    "//Fields:
    "//-> Employee-matricula
    "//-> Employee-cpf

    IF ENABLE = 'X'.
      ME->FIELDS_GROUP2 = VALUE #( ( GROUP = 'GR2' VALUE = 1 ) ).
    ELSEIF DISABLE = 'X'.
      ME->FIELDS_GROUP2 = VALUE #( ( GROUP = 'GR2' VALUE = 0 ) ).
    ENDIF.
  ENDMETHOD.

  METHOD SET_FIELDS_GROUP3.
    "//Fields:
    "//-> Classification-Reserva

    IF ENABLE = 'X'.
      ME->FIELDS_GROUP3 = VALUE #( ( GROUP = 'GR3' VALUE = 0 ) ).
    ELSEIF DISABLE = 'X'.
      ME->FIELDS_GROUP3 = VALUE #( ( GROUP = 'GR3' VALUE = 1 ) ).
    ENDIF.
  ENDMETHOD.

  METHOD SET_FIELDS_GROUP4.
    "//Fields:
    "//-> Classification-Nome_Terceiro

    IF ENABLE = 'X'.
      ME->FIELDS_GROUP4 = VALUE #( ( GROUP = 'GR4' VALUE = 1 ) ).
    ELSEIF DISABLE = 'X'.
      ME->FIELDS_GROUP4 = VALUE #( ( GROUP = 'GR4' VALUE = 0 ) ).
    ENDIF.
  ENDMETHOD.

  METHOD SET_SCREEN_FIELDS.
    CHECK ME->FIELDS_GROUP1 IS NOT INITIAL
       OR ME->FIELDS_GROUP2 IS NOT INITIAL
       OR ME->FIELDS_GROUP3 IS NOT INITIAL.

    LOOP AT SCREEN.
      LOOP AT ME->FIELDS_GROUP1 INTO DATA(_FIELD_GROUP1).
        IF SCREEN-GROUP1 = _FIELD_GROUP1-GROUP.
          SCREEN-INPUT = _FIELD_GROUP1-VALUE.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.

      LOOP AT ME->FIELDS_GROUP2 INTO DATA(_FIELD_GROUP2).
        IF SCREEN-GROUP1 = _FIELD_GROUP2-GROUP.
          SCREEN-INPUT = _FIELD_GROUP2-VALUE.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.

      LOOP AT ME->FIELDS_GROUP3 INTO DATA(_FIELD_GROUP3).
        IF SCREEN-GROUP1   = _FIELD_GROUP3-GROUP.
          SCREEN-INVISIBLE = _FIELD_GROUP3-VALUE.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.

      LOOP AT ME->FIELDS_GROUP4 INTO DATA(_FIELD_GROUP4).
        IF SCREEN-GROUP1 = _FIELD_GROUP4-GROUP.
          SCREEN-INPUT = _FIELD_GROUP4-VALUE.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.

  METHOD DISPLAY_LEFT_THUMB_IMAGE.
*    CALL METHOD me->biometry->split_hash
*      EXPORTING
*        input = employee-hash_digital_left
*      IMPORTING
*        image = DATA(_image_data).
*
*    DATA(_url) = me->photo->get_url_from_image( _image_data ).

    ME->IMAGE_HELPER->DISPLAY(
      EXPORTING
        CUSTOM_NAME      = 'CUSTOM_LEFT_THUMB'
        URL              = EMPLOYEE-URL_DIGITAL_LEFT
      CHANGING
        CUSTOM_INSTANCE  = CUSTOM_LEFT_THUMB
        PICTURE_INSTANCE = PICTURE_LEFT_THUMB
    ).

*    IF CUSTOM_LEFT_THUMB IS INITIAL.
*      CREATE OBJECT CUSTOM_LEFT_THUMB
*        EXPORTING
*          CONTAINER_NAME = 'CUSTOM_LEFT_THUMB'.
*
*      PICTURE_LEFT_THUMB =
*        NEW CL_GUI_PICTURE( PARENT = CUSTOM_LEFT_THUMB ).
*    ENDIF.
*
*    IF EMPLOYEE-URL_DIGITAL_LEFT IS INITIAL.
*      PICTURE_LEFT_THUMB->CLEAR_PICTURE( ).
*    ELSE.
*      PICTURE_LEFT_THUMB->LOAD_PICTURE_FROM_URL(
*        URL = EMPLOYEE-URL_DIGITAL_LEFT ).
*    ENDIF.
*
*    PICTURE_LEFT_THUMB->SET_DISPLAY_MODE(
*      DISPLAY_MODE = CL_GUI_PICTURE=>DISPLAY_MODE_FIT_CENTER ).
  ENDMETHOD.

  METHOD DISPLAY_PHOTO.
*    DATA(_IMAGE_DATA) = ME->PHOTO->GET_PHOTO( EMPLOYEE-MATRICULA ).
    "DATA(_url)        = me->photo->get_url_from_image( employee-hash_photo ).

    ME->IMAGE_HELPER->DISPLAY(
      EXPORTING
        CUSTOM_NAME      = 'CUSTOM_IMAGE'
        URL              = EMPLOYEE-URL_PHOTO
      CHANGING
        CUSTOM_INSTANCE  = CUSTOM_USER
        PICTURE_INSTANCE = PICTURE_USER
    ).

*    IF CUSTOM_USER IS INITIAL.
*      CREATE OBJECT CUSTOM_USER
*        EXPORTING
*          CONTAINER_NAME = 'CUSTOM_IMAGE'.
*
*      PICTURE_USER =
*        NEW CL_GUI_PICTURE( PARENT = CUSTOM_USER ).
*    ENDIF.
*
*    IF EMPLOYEE-URL_PHOTO IS NOT INITIAL.
*      PICTURE_USER->LOAD_PICTURE_FROM_URL(
*        URL = EMPLOYEE-URL_PHOTO ).
*    ELSE.
*      PICTURE_USER->CLEAR_PICTURE( ).
*    ENDIF.
*
*    PICTURE_USER->SET_DISPLAY_MODE(
*      DISPLAY_MODE = CL_GUI_PICTURE=>DISPLAY_MODE_FIT_CENTER ).
  ENDMETHOD.

  METHOD DISPLAY_RIGHT_THUMB_IMAGE.
*    CALL METHOD me->biometry->split_hash
*      EXPORTING
*        input = employee-hash_digital_right
*      IMPORTING
*        image = DATA(_image_data).
*
*    DATA(_url) = me->photo->get_url_from_image( _image_data ).

    ME->IMAGE_HELPER->DISPLAY(
      EXPORTING
        CUSTOM_NAME      = 'CUSTOM_RIGHT_THUMB'
        URL              = EMPLOYEE-URL_DIGITAL_RIGHT
      CHANGING
        CUSTOM_INSTANCE  = CUSTOM_RIGHT_THUMB
        PICTURE_INSTANCE = PICTURE_RIGHT_THUMB
    ).

*    IF CUSTOM_RIGHT_THUMB IS INITIAL.
*      CREATE OBJECT CUSTOM_RIGHT_THUMB
*        EXPORTING
*          CONTAINER_NAME = 'CUSTOM_RIGHT_THUMB'.
*
*      PICTURE_RIGHT_THUMB =
*        NEW CL_GUI_PICTURE( PARENT = CUSTOM_RIGHT_THUMB ).
*    ENDIF.
*
*    IF EMPLOYEE-URL_DIGITAL_RIGHT IS INITIAL.
*      PICTURE_RIGHT_THUMB->CLEAR_PICTURE( ).
*    ELSE.
*      PICTURE_RIGHT_THUMB->LOAD_PICTURE_FROM_URL(
*        URL = EMPLOYEE-URL_DIGITAL_RIGHT ).
*    ENDIF.
*
*    PICTURE_RIGHT_THUMB->SET_DISPLAY_MODE(
*      DISPLAY_MODE = CL_GUI_PICTURE=>DISPLAY_MODE_FIT_CENTER ).
  ENDMETHOD.
ENDCLASS.


CLASS CL_CLASSIFICATION DEFINITION.
  PUBLIC SECTION.
    METHODS PROCESS_BEFORE_OUTPUT.

    METHODS SET_CLASSIFICATION_SUBSCREEN
      IMPORTING
        SCREEN TYPE SY-DYNNR.

    METHODS SET_CLASSIFICATION_FIELDS
      IMPORTING
        ENABLE  TYPE ABAP_BOOL OPTIONAL
        DISABLE TYPE ABAP_BOOL OPTIONAL.

    METHODS GET_DEFAULT_CONTA_RAZAO
      RETURNING VALUE(VALUE) TYPE CHAR10.

    METHODS GET_DEFAULT_MOVIMENTO
      RETURNING VALUE(VALUE) TYPE CHAR10.

    METHODS GET_DEFAULT_DEPOSITO
      RETURNING VALUE(VALUE) TYPE CHAR10.

    METHODS GET_DESCRIPTION_MOVIMENTO
      IMPORTING
        INPUT        TYPE ANY
      RETURNING
        VALUE(VALUE) TYPE STRING.

    METHODS GET_DESCRIPTION_DEPOSITO
      IMPORTING
        INPUT        TYPE ANY OPTIONAL
        INPUT2       TYPE ANY OPTIONAL
      RETURNING
        VALUE(VALUE) TYPE STRING.

    METHODS GET_DESCRIPTION_CONTA_RAZAO
      IMPORTING
        INPUT        TYPE ANY
      RETURNING
        VALUE(VALUE) TYPE STRING.

    METHODS GET_DESCRIPTION_CENTRO_CUSTO
      IMPORTING
        INPUT        TYPE ANY
      RETURNING
        VALUE(VALUE) TYPE STRING.

    METHODS GET_DESCRIPTION_FILIAL
      IMPORTING
        INPUT        TYPE ANY
      RETURNING
        VALUE(VALUE) TYPE STRING.

    METHODS GET_DESCRIPTION_ORDEM
      IMPORTING
        INPUT        TYPE ANY
      RETURNING
        VALUE(VALUE) TYPE STRING.


    METHODS SET_CLASSIFICATION_DESCRIPTION.

  PRIVATE SECTION.
    METHODS SET_SCREEN_FIELDS.

    DATA FIELDS_CLASSIFICATION TYPE TABLE OF TY_FIELDS.

ENDCLASS.

CLASS CL_CLASSIFICATION IMPLEMENTATION.
  METHOD PROCESS_BEFORE_OUTPUT.
    ME->SET_SCREEN_FIELDS( ).
  ENDMETHOD.

  METHOD SET_CLASSIFICATION_SUBSCREEN.
    CLASSIFICATION_BLOCK-ICON = SWITCH #( SCREEN WHEN 0010 THEN |{ ICON_EXPAND_ALL } Explandir|
                                                           ELSE |{ ICON_COLLAPSE_ALL } Ocultar| ).
    CLASSIFICATION_BLOCK-SUBSCREEN = SCREEN.
  ENDMETHOD.

  METHOD SET_CLASSIFICATION_FIELDS.
    IF ENABLE = 'X'.
      ME->FIELDS_CLASSIFICATION = VALUE #( ( GROUP = 'GR1' VALUE = 1 ) ).
    ELSEIF DISABLE = 'X'.
      ME->FIELDS_CLASSIFICATION = VALUE #( ( GROUP = 'GR1' VALUE = 0 ) ).
    ENDIF.
  ENDMETHOD.

  METHOD SET_SCREEN_FIELDS.
    CHECK ME->FIELDS_CLASSIFICATION IS NOT INITIAL.

    LOOP AT SCREEN.
      LOOP AT ME->FIELDS_CLASSIFICATION INTO DATA(_FIELD_CLASSIFICATION).
        IF SCREEN-GROUP1 = _FIELD_CLASSIFICATION-GROUP.
          SCREEN-INPUT = _FIELD_CLASSIFICATION-VALUE.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.

  METHOD SET_CLASSIFICATION_DESCRIPTION.
    CLASSIFICATION-TEXT-TP_MOVIMENTO = ME->GET_DESCRIPTION_MOVIMENTO( CLASSIFICATION-TP_MOVIMENT ).
    CLASSIFICATION-TEXT-CONTA_RAZAO  = ME->GET_DESCRIPTION_CONTA_RAZAO( CLASSIFICATION-CONTA_RAZAO ).
*--> CS1051646 / IR122401
    CLASSIFICATION-TEXT-DEPOSITO = ME->GET_DESCRIPTION_DEPOSITO( EXPORTING INPUT  = CLASSIFICATION-DEPOSITO
                                                                           INPUT2 = CLASSIFICATION-FILIAL ).
*<-- CS1051646 / IR122401
    CLASSIFICATION-TEXT-FILIAL       = ME->GET_DESCRIPTION_FILIAL( CLASSIFICATION-FILIAL ).
    CLASSIFICATION-TEXT-CENTRO_CUSTO = ME->GET_DESCRIPTION_CENTRO_CUSTO( CLASSIFICATION-CCUSTO ).
    CLASSIFICATION-TEXT-ORDEM        = ME->GET_DESCRIPTION_ORDEM( CLASSIFICATION-AUFNR ).
  ENDMETHOD.

  METHOD GET_DEFAULT_CONTA_RAZAO.
    MOVE '0000412033' TO VALUE.
  ENDMETHOD.

  METHOD GET_DEFAULT_MOVIMENTO.
    MOVE '201' TO VALUE.
  ENDMETHOD.

  METHOD GET_DEFAULT_DEPOSITO.
    MOVE 'EP01' TO VALUE.
  ENDMETHOD.

  METHOD GET_DESCRIPTION_MOVIMENTO.
    SELECT SINGLE BTEXT FROM T156T INTO VALUE WHERE BWART = INPUT AND SPRAS = SY-LANGU.
  ENDMETHOD.

  METHOD GET_DESCRIPTION_DEPOSITO.
*--> CS1051646 / IR122401
    SELECT SINGLE LGOBE FROM T001L INTO VALUE WHERE LGORT = INPUT AND WERKS EQ INPUT2 .
*<-- CS1051646 / IR122401
  ENDMETHOD.

  METHOD GET_DESCRIPTION_CONTA_RAZAO.
    SELECT SINGLE TXT50 FROM SKAT INTO VALUE WHERE SPRAS = SY-LANGU AND SAKNR = INPUT.
  ENDMETHOD.

  METHOD GET_DESCRIPTION_FILIAL.
    SELECT SINGLE NAME1 FROM T001W INTO VALUE WHERE WERKS = INPUT.
  ENDMETHOD.

  METHOD GET_DESCRIPTION_CENTRO_CUSTO.
    SELECT SINGLE LTEXT FROM CSKT INTO VALUE WHERE KOSTL = INPUT.
  ENDMETHOD.

  METHOD GET_DESCRIPTION_ORDEM.
    SELECT  SINGLE KTEXT FROM AUFK INTO VALUE WHERE AUFNR = INPUT.
  ENDMETHOD.
*
ENDCLASS.

CLASS CL_ITEMS DEFINITION.
  PUBLIC SECTION.
    METHODS CONSTRUCTOR
      IMPORTING
        MAIN TYPE REF TO OBJECT.

    METHODS SET_ITEMS_SUBSCREEN
      IMPORTING
        SCREEN TYPE SY-DYNNR.

    METHODS REFRESH_SCREEN.

    METHODS CHECK_CHANGED_DATA_SCREEN.

    METHODS GET_PARAMETER_MATERIAL
      IMPORTING
        INPUT        TYPE ANY
      RETURNING
        VALUE(VALUE) TYPE ABAP_BOOL.

    METHODS GET_PARAMETER_MATERIALS
      IMPORTING
        INPUT        TYPE ANY
      RETURNING
        VALUE(VALUE) TYPE T_PARAM_MATERIAL.

    METHODS GET_PARAMETER_FILIAL
      IMPORTING
        INPUT        TYPE ANY
      RETURNING
        VALUE(VALUE) TYPE T_FILIAIS.

    METHODS GET_DESCRIPTION_MATERIAL
      IMPORTING
        INPUT        TYPE ANY
      RETURNING
        VALUE(VALUE) TYPE STRING.

    METHODS GET_UNIDADE_MEDIDA
      IMPORTING
        INPUT        TYPE ANY
      RETURNING
        VALUE(VALUE) TYPE STRING.

    METHODS GET_ALV_FIELDS_MODE
      RETURNING VALUE(RESULT) TYPE ABAP_BOOL.

    METHODS DISABLE_FIELDS_ITEMS.
    METHODS ENABLE_FIELDS_ITEMS.
    METHODS CLEAR_ITEMS.

    METHODS DISPLAY_ITEMS.
  PRIVATE SECTION.

    METHODS GET_FIELDCATALOG
      RETURNING VALUE(RESULT) TYPE LVC_T_FCAT.

    "//Events
    METHODS HANDLE_F4_POPUP FOR EVENT ONF4 OF CL_GUI_ALV_GRID
      IMPORTING E_FIELDNAME E_FIELDVALUE ES_ROW_NO ER_EVENT_DATA ET_BAD_CELLS E_DISPLAY.

    METHODS HANDLE_SET_TOOLBAR FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
      IMPORTING
        E_OBJECT.

    METHODS HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
      IMPORTING
        E_UCOMM.

    METHODS HANDLE_HOTSPOT FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
      IMPORTING
        E_ROW_ID
        E_COLUMN_ID
        ES_ROW_NO.

    METHODS HANDLE_DATA_CHANGED FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
      IMPORTING
        ER_DATA_CHANGED
        E_ONF4
        E_ONF4_BEFORE
        E_ONF4_AFTER
        E_UCOMM.

    DATA LAYOUT                    TYPE LVC_S_LAYO.
    DATA FIELDS_MODE               TYPE ABAP_BOOL VALUE ABAP_TRUE.
    DATA CLASSIFICATION_CONTROLLER TYPE REF TO CL_CLASSIFICATION.
    DATA CUSTOM                    TYPE REF TO CL_GUI_CUSTOM_CONTAINER.
    DATA ALV_TABLE                 TYPE REF TO CL_GUI_ALV_GRID.

ENDCLASS.

CLASS CL_ITEMS IMPLEMENTATION.
  METHOD CONSTRUCTOR.
    DATA(_MAIN) = MAIN.
  ENDMETHOD.

  METHOD SET_ITEMS_SUBSCREEN.
    ITENS_BLOCK-ICON = SWITCH #( SCREEN WHEN 0010 THEN |{ ICON_EXPAND_ALL } Explandir|
                                                  ELSE |{ ICON_COLLAPSE_ALL } Ocultar| ).
    ITENS_BLOCK-SUBSCREEN = SCREEN.
  ENDMETHOD.

  METHOD HANDLE_F4_POPUP.
    DATA FIELDS TYPE TABLE OF HELP_VALUE.
    DATA SELECTED_VALUES TYPE TABLE OF  HELP_VTAB.
    DATA VALUES TYPE VALUETAB.
    REFRESH T_EPI_CENTRO.
    CALL FUNCTION 'G_SET_GET_ALL_VALUES'
      EXPORTING
        CLASS         = '0000'
        SETNR         = 'MAGGI_ZMM0123_EPI'
      TABLES
        SET_VALUES    = T_EPI_CENTRO
      EXCEPTIONS
        SET_NOT_FOUND = 1
        OTHERS        = 2.
    IF SY-SUBRC <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*             WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
    SORT T_EPI_CENTRO BY FROM.
    DATA(_PARAMETERS) = ME->GET_PARAMETER_MATERIALS( EMPLOYEE-CARGO ).

    IF CLASSIFICATION-EPI_ESPORADICO = ABAP_FALSE.
      READ TABLE T_EPI_CENTRO WITH KEY FROM = CLASSIFICATION-FILIAL TRANSPORTING NO FIELDS. "REGRA NOVA
      IF SY-SUBRC = 0.
        SELECT *
         FROM ZMMT0100
         INTO TABLE @DATA(_MATERIALS2)
          WHERE WERKS     = @CLASSIFICATION-FILIAL
          AND   CARGO     = @EMPLOYEE-CARGO.
        "
        LOOP AT _MATERIALS2 INTO DATA(_MATERIAL2).
          APPEND _MATERIAL2-MATNR TO VALUES.
          APPEND ME->GET_DESCRIPTION_MATERIAL( _MATERIAL2-MATNR ) TO VALUES.
          APPEND ME->GET_UNIDADE_MEDIDA( _MATERIAL2-MATNR ) TO VALUES.
        ENDLOOP.
      ELSE.
        LOOP AT _PARAMETERS INTO DATA(_PARAMETER).
          SELECT *
            FROM ZMMT0085
            INTO TABLE @DATA(_MATERIALS)
           WHERE CODAGREPI = @_PARAMETER-CODAGREPI.

          LOOP AT _MATERIALS INTO DATA(_MATERIAL).
            APPEND _MATERIAL-MATNR TO VALUES.
            APPEND ME->GET_DESCRIPTION_MATERIAL( _MATERIAL-MATNR ) TO VALUES.
            APPEND ME->GET_UNIDADE_MEDIDA( _MATERIAL-MATNR ) TO VALUES.
          ENDLOOP.
        ENDLOOP.
      ENDIF.
    ELSE.
      SELECT A~MATNR, A~MEINS, B~MAKTX
        FROM MARA AS A
        INNER JOIN MAKT AS B ON A~MATNR = B~MATNR
        INTO TABLE @DATA(_MATERIAIS)
       WHERE MTART = 'ZEPI'.

      LOOP AT _MATERIAIS INTO DATA(_ITEM).
        APPEND _ITEM-MATNR TO VALUES.
        APPEND _ITEM-MAKTX TO VALUES.
        APPEND _ITEM-MEINS TO VALUES.
      ENDLOOP.
    ENDIF.

    FIELDS = VALUE #( ( TABNAME   = 'MAKT'
                        FIELDNAME = 'MATNR')

                      ( TABNAME   = 'MAKT'
                        FIELDNAME = 'MAKTX' )

                      ( TABNAME   = 'MARA'
                        FIELDNAME = 'MEINS' )
                    ).

    CALL FUNCTION 'HELP_VALUES_GET_WITH_TABLE_EXT'
      EXPORTING
        CUCOL                     = '10'
        CUROW                     = '5'
        FIELDNAME                 = 'MATNR'
        TABNAME                   = 'MARA'
*      IMPORTING
*       INDEX                     = SEL_INDEX
*       SELECT_VALUE              = WL_CHAR
      TABLES
        FIELDS                    = FIELDS
        SELECT_VALUES             = SELECTED_VALUES
        VALUETAB                  = VALUES
      EXCEPTIONS
        FIELD_NOT_IN_DDIC         = 001
        MORE_THEN_ONE_SELECTFIELD = 002
        NO_SELECTFIELD            = 003.

    LOOP AT SELECTED_VALUES INTO DATA(_VALUE).
      ASSIGN ITEMS[ ES_ROW_NO-ROW_ID ] TO FIELD-SYMBOL(<FS_ITEM>).

      CASE _VALUE-FIELDNAME.
        WHEN 'MATNR'.
*          <fs_item>-matnr = _value-value.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = _VALUE-VALUE
            IMPORTING
              OUTPUT = <FS_ITEM>-MATNR.

        WHEN 'MAKTX'.
          <FS_ITEM>-MAKTX = _VALUE-VALUE.
        WHEN 'MEINS'.
          <FS_ITEM>-MEINS = _VALUE-VALUE.
      ENDCASE.
    ENDLOOP.

    ME->REFRESH_SCREEN( ).
  ENDMETHOD.

  METHOD HANDLE_SET_TOOLBAR.
    E_OBJECT->MT_TOOLBAR = VALUE #( ( BUTN_TYPE = 0
                                      FUNCTION  = 'ADD'
                                      DISABLED  = SWITCH #( ME->GET_ALV_FIELDS_MODE( ) WHEN ABAP_FALSE THEN ABAP_TRUE ELSE ABAP_FALSE )
                                      ICON      = ICON_INSERT_ROW
                                      TEXT      = ''
                                    )

                                    ( BUTN_TYPE = 0
                                      DISABLED  = SWITCH #( ME->GET_ALV_FIELDS_MODE( ) WHEN ABAP_FALSE THEN ABAP_TRUE ELSE ABAP_FALSE )
                                      FUNCTION  = 'DEL'
                                      ICON      = ICON_DELETE_ROW
                                      QUICKINFO = '' )
                                  ).
  ENDMETHOD.

  METHOD HANDLE_USER_COMMAND.
    CALL METHOD ME->ALV_TABLE->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = DATA(SELECTED_ROWS).

    CASE E_UCOMM.
      WHEN 'ADD'.
        APPEND VALUE #( STATUS = ICON_LIGHT_OUT ) TO ITEMS.
      WHEN 'DEL'.
        TRY.
            DELETE ITEMS INDEX SELECTED_ROWS[ 1 ]-INDEX.
          CATCH CX_SY_ITAB_LINE_NOT_FOUND.
            MESSAGE TEXT-002 TYPE 'S' DISPLAY LIKE 'E'.
        ENDTRY.
      WHEN 'CHG'.
      WHEN OTHERS.
    ENDCASE.

    ME->REFRESH_SCREEN( ).
  ENDMETHOD.

  METHOD HANDLE_HOTSPOT.
    READ TABLE ITEMS ASSIGNING FIELD-SYMBOL(<FS_ITEM>) INDEX E_ROW_ID-INDEX.
    IF SY-SUBRC = 0.
      IF E_COLUMN_ID = 'RESERVA'.
        CHECK <FS_ITEM>-RESERVA IS NOT INITIAL.
        SET PARAMETER ID 'RES' FIELD <FS_ITEM>-RESERVA.
        CALL TRANSACTION 'MB23' AND SKIP FIRST SCREEN.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD HANDLE_DATA_CHANGED.
    LOOP AT ER_DATA_CHANGED->MT_GOOD_CELLS INTO DATA(_ITEM_CHANGED).

      IF _ITEM_CHANGED-FIELDNAME = 'MATNR'.
        READ TABLE ITEMS ASSIGNING FIELD-SYMBOL(<FS_ITEM>) INDEX _ITEM_CHANGED-ROW_ID.

        IF _ITEM_CHANGED-VALUE IS NOT INITIAL.
          IF ME->GET_PARAMETER_MATERIAL( _ITEM_CHANGED-VALUE ) = ABAP_FALSE.
            MESSAGE TEXT-002 TYPE 'S' DISPLAY LIKE 'E'.

            ME->HANDLE_F4_POPUP(
              EXPORTING
*               SENDER    =
                ES_ROW_NO = VALUE #( ROW_ID = _ITEM_CHANGED-ROW_ID )
*               ER_EVENT_DATA =
*               ET_BAD_CELLS  =
*               E_DISPLAY =
            ).

            LEAVE TO SCREEN 0001.
          ELSE.
            <FS_ITEM>-MAKTX = ME->GET_DESCRIPTION_MATERIAL( _ITEM_CHANGED-VALUE ).
            <FS_ITEM>-MEINS = ME->GET_UNIDADE_MEDIDA( _ITEM_CHANGED-VALUE ).
          ENDIF.

***        ELSE.
***          CLEAR <fs_item>.
        ENDIF.
      ENDIF.
    ENDLOOP.

    ME->REFRESH_SCREEN( ).
  ENDMETHOD.

  METHOD GET_PARAMETER_MATERIAL.
    REFRESH T_EPI_CENTRO.
    CALL FUNCTION 'G_SET_GET_ALL_VALUES'
      EXPORTING
        CLASS         = '0000'
        SETNR         = 'MAGGI_ZMM0123_EPI'
      TABLES
        SET_VALUES    = T_EPI_CENTRO
      EXCEPTIONS
        SET_NOT_FOUND = 1
        OTHERS        = 2.
    IF SY-SUBRC <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*             WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
    SORT T_EPI_CENTRO BY FROM.

    IF CLASSIFICATION-EPI_ESPORADICO = ABAP_FALSE.
      READ TABLE T_EPI_CENTRO WITH KEY FROM = CLASSIFICATION-FILIAL TRANSPORTING NO FIELDS.
      IF SY-SUBRC = 0.
        SELECT SINGLE *
          FROM ZMMT0100 AS A
           INTO @DATA(_PARAMETROS_MAT_EPI2)
           WHERE WERKS = @CLASSIFICATION-FILIAL
           AND CARGO = @EMPLOYEE-CARGO
           AND MATNR = @INPUT.
      ELSE.
        SELECT SINGLE *
          FROM ZMMT0080 AS A
         INNER JOIN ZMMT0085 AS B ON B~CODAGREPI = A~CODAGREPI
          INTO @DATA(_PARAMETROS_MAT_EPI)
         WHERE A~CARGO = @EMPLOYEE-CARGO
           AND B~MATNR = @INPUT.
      ENDIF.

      CHECK SY-SUBRC IS INITIAL.
      VALUE = ABAP_TRUE.

    ELSE.
      SELECT SINGLE *
        FROM MARA
        INTO @DATA(_MATERIAL)
       WHERE MATNR = @INPUT
         AND MTART = 'ZEPI'.

      CHECK SY-SUBRC IS INITIAL.
      VALUE = ABAP_TRUE.
    ENDIF.
  ENDMETHOD.

  METHOD GET_PARAMETER_MATERIALS.
    SELECT *
      FROM ZMMT0080
      INTO TABLE VALUE
     WHERE CARGO = INPUT.
  ENDMETHOD.

  METHOD GET_PARAMETER_FILIAL.
    CALL FUNCTION 'G_SET_GET_ALL_VALUES'
      EXPORTING
        CLASS         = '0000'
        SETNR         = 'MAGGI_BIOMETRIA'
      TABLES
        SET_VALUES    = VALUE
      EXCEPTIONS
        SET_NOT_FOUND = 1
        OTHERS        = 2.
    IF SY-SUBRC <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*             WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
    SORT VALUE BY FROM.
  ENDMETHOD.

  METHOD REFRESH_SCREEN.
    CHECK ALV_TABLE IS NOT INITIAL.
    DATA(STABLE) = VALUE LVC_S_STBL( ROW = 'X' COL = 'X' ).
    ALV_TABLE->REFRESH_TABLE_DISPLAY( IS_STABLE = STABLE ).
  ENDMETHOD.

  METHOD CHECK_CHANGED_DATA_SCREEN.
    ME->ALV_TABLE->CHECK_CHANGED_DATA( ).
  ENDMETHOD.



  METHOD GET_ALV_FIELDS_MODE.
    "// ME->FIELDS_MODE = TRUE  -> enabled
    "// ME->FIELDS_MODE = FALSE -> disabled

    RESULT = ME->FIELDS_MODE.
  ENDMETHOD.

  METHOD DISABLE_FIELDS_ITEMS.
    MOVE ABAP_FALSE TO ME->FIELDS_MODE.
  ENDMETHOD.

  METHOD ENABLE_FIELDS_ITEMS.
    MOVE ABAP_TRUE TO ME->FIELDS_MODE.
  ENDMETHOD.

  METHOD CLEAR_ITEMS.
    CLEAR ITEMS.
  ENDMETHOD.

  METHOD DISPLAY_ITEMS.
    IF ( ME->CUSTOM IS NOT BOUND ).
      CREATE OBJECT ME->CUSTOM
        EXPORTING
          CONTAINER_NAME = 'CUSTOM_ITEMS'.
    ENDIF.

    "//Get Field Catalog
    DATA(FIELDCAT) = ME->GET_FIELDCATALOG( ).

    IF ( ME->ALV_TABLE IS NOT BOUND ).

      "//Create Alv Object
      CREATE OBJECT ME->ALV_TABLE
        EXPORTING
          I_PARENT = ME->CUSTOM.

      "//Register f4 fields
      DATA(_F4_FIELDS) =
        VALUE LVC_T_F4( ( FIELDNAME = 'MATNR'
                          REGISTER  = ABAP_TRUE
                          GETBEFORE = ABAP_TRUE ) ).

      CALL METHOD ME->ALV_TABLE->REGISTER_F4_FOR_FIELDS
        EXPORTING
          IT_F4 = _F4_FIELDS.

      SET HANDLER:
      ME->HANDLE_SET_TOOLBAR       FOR ME->ALV_TABLE,
      ME->HANDLE_USER_COMMAND      FOR ME->ALV_TABLE,
      ME->HANDLE_DATA_CHANGED      FOR ME->ALV_TABLE,
      ME->HANDLE_HOTSPOT           FOR ME->ALV_TABLE,
      ME->HANDLE_F4_POPUP          FOR ME->ALV_TABLE.

      "//Display Datas
      CALL METHOD ME->ALV_TABLE->SET_TABLE_FOR_FIRST_DISPLAY
        EXPORTING
          IS_LAYOUT       = ME->LAYOUT
          I_SAVE          = ABAP_ON
        CHANGING
          IT_OUTTAB       = ITEMS
          IT_FIELDCATALOG = FIELDCAT.

*      ME->REFRESH_SCREEN( ).

      "//Register Modify Events
      CALL METHOD ME->ALV_TABLE->REGISTER_EDIT_EVENT
        EXPORTING
          I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.

      CALL METHOD ME->ALV_TABLE->REGISTER_EDIT_EVENT
        EXPORTING
          I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

      ME->CHECK_CHANGED_DATA_SCREEN( ).
    ELSE.
      ME->CHECK_CHANGED_DATA_SCREEN( ).
      ME->ALV_TABLE->SET_FRONTEND_FIELDCATALOG( FIELDCAT ).
      ME->REFRESH_SCREEN( ).

    ENDIF.
  ENDMETHOD.

  METHOD GET_FIELDCATALOG.
    RESULT = VALUE #( ( FIELDNAME  = 'MATNR'
                        SCRTEXT_M  = 'Material'
                        F4AVAILABL = ABAP_TRUE
*                        REF_TABLE  = 'MARA'
*                        REF_FIELD  = 'MATNR'
                        EDIT       = GET_ALV_FIELDS_MODE( )
                        NO_ZERO    = ABAP_TRUE )

                      ( FIELDNAME  = 'MAKTX'
                        SCRTEXT_M  = 'Descrição'
                        OUTPUTLEN  = 50
                        EDIT       = ABAP_FALSE )

                      ( FIELDNAME  = 'MEINS'
                        SCRTEXT_M  = 'Medida'
                        EDIT       = ABAP_FALSE )

                      ( FIELDNAME  = 'QUANTITY'
                        SCRTEXT_M  = 'Quantidade'
                        EDIT       = GET_ALV_FIELDS_MODE( ) )

                      ( FIELDNAME  = 'ID'
                        SCRTEXT_M  = 'Id'
                        OUTPUTLEN  = 8
                        EDIT       = ABAP_FALSE )

                       ( FIELDNAME  = 'RESERVA'
                        SCRTEXT_M  = 'Reserva'
                        HOTSPOT    = 'X'
                        OUTPUTLEN  = 10
                        EDIT       = ABAP_FALSE )
                    ).
  ENDMETHOD.

  METHOD GET_DESCRIPTION_MATERIAL.
    SELECT SINGLE MAKTX FROM MAKT INTO VALUE WHERE MATNR = INPUT.
  ENDMETHOD.

  METHOD GET_UNIDADE_MEDIDA.
    SELECT SINGLE MEINS FROM MARA INTO VALUE WHERE MATNR = INPUT.
  ENDMETHOD.
ENDCLASS.

CLASS CL_MAIN DEFINITION.
  PUBLIC SECTION.
    METHODS CONSTRUCTOR.
    METHODS PROCESS_BEFORE_OUTPUT.
    METHODS SET_TITLE.
    METHODS SET_STATUS.

    METHODS SET_ACTION
      IMPORTING
        UCOMM TYPE SY-UCOMM.

    METHODS GET_ACTION
      RETURNING VALUE(VALUE) TYPE SY-UCOMM.

    METHODS USER_COMMAND
      IMPORTING
        UCOMM TYPE SY-UCOMM.

    DATA EMPLOYEE_CONTROLLER   TYPE REF TO CL_EMPLOYEE.
    DATA CLASSIFICATION_CONTROLLER TYPE REF TO CL_CLASSIFICATION.
    DATA ITEMS_CONTROLLER          TYPE REF TO CL_ITEMS.

  PRIVATE SECTION.
    METHODS FORMAT_CPF
      IMPORTING
        CPF          TYPE ANY
      RETURNING
        VALUE(VALUE) TYPE PA0465-CPF_NR.

    METHODS NEW_REGISTER.
    METHODS COPY_REGISTER.
    METHODS SEARCH_REGISTER.
    METHODS SAVE_REGISTER.
    METHODS ASK_FOR_GENERATE_RESERVATION.
    METHODS SAVE_ITEMS.

    METHODS VALIDATE_REGISTERS
      EXCEPTIONS
        INVALID_CLASSIFICATION
        INVALID_ITEM.

    METHODS CREATE_RESERVATION.
    METHODS CHANGE_RESERVATION.

    METHODS GET_NEXT_ID
      IMPORTING
        INPUT        TYPE ANY
        TEMP         TYPE ABAP_BOOL
      RETURNING
        VALUE(VALUE) TYPE CHAR10.

    METHODS DISPLAY_MESSAGES
      IMPORTING
*---> 01/06/2023 - Migração S4 - JS
*       messages TYPE bbp_bapireturn_t.
        MESSAGES TYPE ZBBP_BAPIRETURN_T.
*<--- 01/06/2023 - Migração S4 - JS

    METHODS CLEAR_SCREEN.
    DATA BIOMETRY              TYPE REF TO ZCL_BIOMETRY.
    DATA IMAGE_HELPER          TYPE REF TO ZCL_IMAGE_HELPER.
    DATA CURRENT_ACTION        TYPE SY-UCOMM.
ENDCLASS.

CLASS CL_MAIN IMPLEMENTATION.
  METHOD CONSTRUCTOR.
    "//Controllers
    ME->EMPLOYEE_CONTROLLER       = NEW CL_EMPLOYEE( ).
    ME->CLASSIFICATION_CONTROLLER = NEW CL_CLASSIFICATION( ).
    ME->ITEMS_CONTROLLER          = NEW CL_ITEMS( ME->CLASSIFICATION_CONTROLLER ).

    "//Services
    ME->BIOMETRY                  = NEW ZCL_BIOMETRY( ).
    ME->IMAGE_HELPER              = NEW ZCL_IMAGE_HELPER( ).
  ENDMETHOD.

  METHOD PROCESS_BEFORE_OUTPUT.
    ME->SET_STATUS( ).
    ME->SET_TITLE( ).
  ENDMETHOD.

  METHOD SET_STATUS.
    DATA INVISIBLE_BUTTONS TYPE TABLE OF SY-UCOMM.
    CLEAR INVISIBLE_BUTTONS.

    INVISIBLE_BUTTONS =
      VALUE #( ( 'GENERATE' )
               ( 'CHANGE'   )
             ).

    IF CLASSIFICATION-ID(1) = '$' OR CLASSIFICATION-ID IS INITIAL.
      APPEND 'COPY' TO INVISIBLE_BUTTONS.

    ELSEIF NOT CLASSIFICATION-RESERVA IS INITIAL.
      APPEND 'SAVE' TO INVISIBLE_BUTTONS.
    ELSE.
      CLEAR INVISIBLE_BUTTONS.
    ENDIF.

    SET PF-STATUS 'STATUS_MAIN' EXCLUDING INVISIBLE_BUTTONS.
  ENDMETHOD.

  METHOD SET_ACTION.
    MOVE UCOMM TO ME->CURRENT_ACTION.
  ENDMETHOD.

  METHOD GET_ACTION.
    MOVE ME->CURRENT_ACTION TO VALUE.
  ENDMETHOD.

  METHOD SET_TITLE.
    SET TITLEBAR 'TITLE_MAIN'.
  ENDMETHOD.

  METHOD USER_COMMAND.
    CASE UCOMM.
      WHEN 'CANCEL' OR 'BACK'.
        LEAVE TO SCREEN 0.
      WHEN 'EXIT'.
        LEAVE PROGRAM.

      WHEN 'NEW'.
        ME->SET_ACTION( SY-UCOMM ).
        ME->CLEAR_SCREEN( ).

        ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP1( DISABLE = ABAP_TRUE ).
        ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP2( ENABLE  = ABAP_TRUE ).
        ME->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_FIELDS( ENABLE = ABAP_TRUE ).
        ME->ITEMS_CONTROLLER->ENABLE_FIELDS_ITEMS( ).

        ME->EMPLOYEE_CONTROLLER->SET_EMPLOYEE_SUBSCREEN( SUBSCREEN-EMPLOYEE ).
        ME->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_SUBSCREEN( SUBSCREEN-EMPTY ).
        ME->ITEMS_CONTROLLER->SET_ITEMS_SUBSCREEN( SUBSCREEN-EMPTY ).

      WHEN 'COPY'.
        ME->COPY_REGISTER( ).
        ME->SET_ACTION( 'NEW' ).

      WHEN 'SAVE'.
        ME->SET_ACTION( SY-UCOMM ).

        CALL METHOD ME->VALIDATE_REGISTERS
          EXCEPTIONS
            INVALID_CLASSIFICATION = 4
            INVALID_ITEM           = 7.

        IF SY-SUBRC IS INITIAL.
          ME->SAVE_REGISTER( ).
          ME->ASK_FOR_GENERATE_RESERVATION( ).
        ELSE.
          MESSAGE ID SY-MSGID TYPE 'I'
            NUMBER SY-MSGNO
            WITH   SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
            DISPLAY LIKE SY-MSGTY.
        ENDIF.
      WHEN 'SEARCH'.
        ME->SET_ACTION( SY-UCOMM ).

        CLEAR CLASSIFICATION-ID.

        ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP1( ENABLE  = ABAP_TRUE ).
        ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP2( DISABLE = ABAP_TRUE ).
        ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP4( DISABLE = ABAP_TRUE ).
        ME->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_FIELDS( DISABLE = ABAP_TRUE ).
        ME->ITEMS_CONTROLLER->DISABLE_FIELDS_ITEMS( ).

      WHEN 'CHANGE'.
        ME->SET_ACTION( SY-UCOMM ).

        ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP1( DISABLE = ABAP_TRUE ).
        ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP2( DISABLE = ABAP_TRUE ).
        ME->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_FIELDS( ENABLE = ABAP_TRUE ).
        ME->ITEMS_CONTROLLER->ENABLE_FIELDS_ITEMS( ).

      WHEN 'ENTER'.
        IF ME->GET_ACTION( ) = 'NEW'.
          ME->NEW_REGISTER( ).
        ELSEIF
           ME->GET_ACTION( ) = 'SEARCH'.
          ME->SEARCH_REGISTER( ).
        ENDIF.

        ME->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_DESCRIPTION( ).

      WHEN 'GENERATE'.

        CALL METHOD ME->VALIDATE_REGISTERS
          EXCEPTIONS
            INVALID_CLASSIFICATION = 4
            INVALID_ITEM           = 7.

        IF ( SY-SUBRC IS INITIAL ).
          ME->CREATE_RESERVATION( ).

          ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP2( DISABLE = ABAP_TRUE ).
          ME->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_FIELDS( DISABLE = ABAP_TRUE ).
          ME->ITEMS_CONTROLLER->DISABLE_FIELDS_ITEMS( ).

        ELSE.
          MESSAGE ID SY-MSGID TYPE 'I'
            NUMBER SY-MSGNO
            WITH   SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
            DISPLAY LIKE SY-MSGTY.
        ENDIF.

      WHEN 'CLASSIF_BLOCK_BTN'.
        IF CLASSIFICATION_BLOCK-SUBSCREEN = SUBSCREEN-EMPTY.
          CHECK EMPLOYEE IS NOT INITIAL.
          ME->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_SUBSCREEN( SUBSCREEN-CLASSIFICATION ).
        ELSE.
          ME->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_SUBSCREEN( SUBSCREEN-EMPTY ).
        ENDIF.
      WHEN 'ITENS_BLOCK_BTN'.
        IF ITENS_BLOCK-SUBSCREEN = SUBSCREEN-EMPTY.
          CHECK EMPLOYEE IS NOT INITIAL.
          ME->ITEMS_CONTROLLER->SET_ITEMS_SUBSCREEN( SUBSCREEN-ITENS ).
        ELSE.
          ME->ITEMS_CONTROLLER->SET_ITEMS_SUBSCREEN( SUBSCREEN-EMPTY ).
        ENDIF.

      WHEN '/CHECK_EPI_TERCEIRO'.
        IF CLASSIFICATION-EPI_TERCEIRO = ABAP_TRUE.
          ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP4( ENABLE = ABAP_TRUE ).
        ELSE.
          CLEAR CLASSIFICATION-NOME_TERCEIRO.
          ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP4( DISABLE = ABAP_TRUE ).
        ENDIF.

      WHEN '/CHECK_EPI_ESPORADICO'.
        ME->ITEMS_CONTROLLER->CLEAR_ITEMS( ).
        ME->ITEMS_CONTROLLER->REFRESH_SCREEN( ).
      WHEN 'PICK'.
        CHECK CLASSIFICATION-RESERVA IS NOT INITIAL.
        SET PARAMETER ID 'RES' FIELD CLASSIFICATION-RESERVA.
        CALL TRANSACTION 'MB23' AND SKIP FIRST SCREEN.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD CLEAR_SCREEN.
    CLEAR EMPLOYEE.
    CLEAR CLASSIFICATION.
    CLEAR ITEMS.
  ENDMETHOD.

  METHOD NEW_REGISTER.
    DATA: USER_REGISTER     TYPE PA0001,
          V_DT_DESLIGAMENTO TYPE DATS.

    DATA(_SEARCH_ID) =
      COND STRING( WHEN EMPLOYEE-MATRICULA IS NOT INITIAL
                   THEN EMPLOYEE-MATRICULA ELSE ME->FORMAT_CPF( EMPLOYEE-CPF )
                 ).

    CLEAR V_DT_DESLIGAMENTO. "// BUG-187619 WBARBOSA 080825
    IF CLASSIFICATION-EPI_TERCEIRO = ABAP_TRUE.

      SELECT SINGLE *
        FROM ZMMT0101 INTO @DATA(WA_ZMMT0101)
       WHERE CPF EQ @_SEARCH_ID.

      IF NOT SY-SUBRC IS INITIAL.
        SELECT SINGLE *
          FROM ZMMT0101 INTO WA_ZMMT0101
         WHERE MATRICULA EQ _SEARCH_ID.
      ENDIF.

      USER_REGISTER-PERNR = WA_ZMMT0101-MATRICULA.
      USER_REGISTER-WERKS = WA_ZMMT0101-FILIAL.
      USER_REGISTER-SNAME = WA_ZMMT0101-NOME.
      CLASSIFICATION-NOME_TERCEIRO = WA_ZMMT0101-EMPRESA.
      EMPLOYEE-TEXT-CARGO = WA_ZMMT0101-CARGO.

    ELSE.

      SELECT SINGLE *
        FROM PA0465 AS A
       INNER JOIN PA0001 AS B ON A~PERNR = B~PERNR
        INTO CORRESPONDING FIELDS OF USER_REGISTER
       WHERE A~CPF_NR = _SEARCH_ID
         AND B~ENDDA  = '99991231'
         AND A~SUBTY  = '0001'.

      IF NOT SY-SUBRC IS INITIAL.
        SELECT SINGLE *
           FROM PA0001 AS A
          INNER JOIN PA0465 AS B ON A~PERNR = B~PERNR
           INTO CORRESPONDING FIELDS OF USER_REGISTER
          WHERE B~PERNR = _SEARCH_ID
            AND A~ENDDA = '99991231'
            AND B~SUBTY = '0001'.
      ENDIF.

*"// BUG-187619 WBARBOSA 080825 INICIO
      CLEAR V_DT_DESLIGAMENTO.
      IF USER_REGISTER IS NOT INITIAL.
        CALL FUNCTION 'RP_GET_FIRE_DATE'
          EXPORTING
            PERSNR   = USER_REGISTER-PERNR
            STATUS2  = '0'
          IMPORTING
            FIREDATE = V_DT_DESLIGAMENTO.
      ENDIF.
*"// BUG-187619 WBARBOSA 080825 FIM

    ENDIF.

    IF USER_REGISTER IS NOT INITIAL AND V_DT_DESLIGAMENTO IS INITIAL.

      IF CLASSIFICATION-EPI_TERCEIRO = ABAP_TRUE.
        DATA(_CPF) = WA_ZMMT0101-CPF.
      ELSE.
        _CPF = ME->EMPLOYEE_CONTROLLER->GET_EMPLOYEE_CPF( USER_REGISTER-PERNR ).
      ENDIF.

      ME->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_SUBSCREEN( SUBSCREEN-CLASSIFICATION ).
      ME->ITEMS_CONTROLLER->SET_ITEMS_SUBSCREEN( SUBSCREEN-ITENS ).

      CALL METHOD ME->IMAGE_HELPER->GET_PHOTO_URL
        EXPORTING
          ID     = ZCL_IMAGE_HELPER=>ID_REPOSITORY-HR_PHOTO
          NAME   = CONV #( USER_REGISTER-PERNR )
*         NAME   = 'LOGO_AMAGGI'
        RECEIVING
          RESULT = EMPLOYEE-URL_PHOTO.

      EMPLOYEE-NOME         = USER_REGISTER-SNAME.
      EMPLOYEE-CARGO        = USER_REGISTER-STELL.
      EMPLOYEE-EMPRESA      = USER_REGISTER-BUKRS.
      EMPLOYEE-FILIAL       = USER_REGISTER-WERKS.
      EMPLOYEE-CCUSTO       = USER_REGISTER-KOSTL.
      EMPLOYEE-MATRICULA    = USER_REGISTER-PERNR.
      EMPLOYEE-CPF          = _CPF.
      IF CLASSIFICATION-EPI_TERCEIRO = ABAP_TRUE.

      ELSE.
        EMPLOYEE-TEXT-CARGO   = ME->EMPLOYEE_CONTROLLER->GET_DESCRIPTION_CARGO( USER_REGISTER-STELL        ).
      ENDIF.
      EMPLOYEE-TEXT-EMPRESA = ME->EMPLOYEE_CONTROLLER->GET_DESCRIPTION_EMPRESA( USER_REGISTER-BUKRS      ).
      EMPLOYEE-TEXT-FILIAL  = ME->CLASSIFICATION_CONTROLLER->GET_DESCRIPTION_FILIAL( USER_REGISTER-WERKS       ).
      EMPLOYEE-TEXT-CCUSTO  = ME->CLASSIFICATION_CONTROLLER->GET_DESCRIPTION_CENTRO_CUSTO( USER_REGISTER-KOSTL ).

      IF ( CLASSIFICATION-ID IS INITIAL ).
        CLASSIFICATION-ID           = ME->GET_NEXT_ID( INPUT = EMPLOYEE-MATRICULA TEMP = ABAP_TRUE ).
        CLASSIFICATION-TP_MOVIMENT  = ME->CLASSIFICATION_CONTROLLER->GET_DEFAULT_MOVIMENTO( ).
        CLASSIFICATION-CONTA_RAZAO  = ME->CLASSIFICATION_CONTROLLER->GET_DEFAULT_CONTA_RAZAO( ).
        CLASSIFICATION-DEPOSITO     = ME->CLASSIFICATION_CONTROLLER->GET_DEFAULT_DEPOSITO( ).
      ENDIF.


      IF CLASSIFICATION-AUFNR IS NOT INITIAL.
        CLASSIFICATION-TP_MOVIMENT  = 'Z91'.
      ENDIF.

      TRY.
          CALL METHOD ME->BIOMETRY->READ_DIGITAL(
            EXPORTING
              REGISTRATION = USER_REGISTER-PERNR
            RECEIVING
              RESULT       = DATA(_RESULT) ).

          DATA(_URLR) =
            ME->BIOMETRY->GET_DIGITAL_AS_URL_IMAGE2(
            IMAGE_XSTRING = _RESULT-IM_POLEGAR_DIREITO ).
          EMPLOYEE-URL_DIGITAL_RIGHT = _URLR.

          DATA(_URLL) =
            ME->BIOMETRY->GET_DIGITAL_AS_URL_IMAGE2(
            IMAGE_XSTRING = _RESULT-IM_POLEGAR_ESQUERDO ).
          EMPLOYEE-URL_DIGITAL_LEFT = _URLL.


        CATCH ZCX_BIOMETRY.
          MESSAGE TEXT-012 TYPE 'S' DISPLAY LIKE 'E'.
      ENDTRY.

    ELSE.
      ME->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_SUBSCREEN( SUBSCREEN-EMPTY ).
      ME->ITEMS_CONTROLLER->SET_ITEMS_SUBSCREEN( SUBSCREEN-EMPTY ).

      CLEAR: EMPLOYEE, ITEMS, CLASSIFICATION.
      ME->ITEMS_CONTROLLER->REFRESH_SCREEN( ).

      IF V_DT_DESLIGAMENTO IS INITIAL.
        MESSAGE TEXT-001 TYPE 'S' DISPLAY LIKE 'E'.
      ELSE.
        MESSAGE TEXT-016 TYPE 'S' DISPLAY LIKE 'E'.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD COPY_REGISTER.
    CLASSIFICATION-ID = GET_NEXT_ID( INPUT = EMPLOYEE-MATRICULA TEMP = ABAP_TRUE ).
    CLEAR CLASSIFICATION-RESERVA.

    ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP1( DISABLE = ABAP_TRUE ).
    ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP2( ENABLE  = ABAP_TRUE ).
    ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP4( ENABLE  = ABAP_TRUE ).
    ME->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_FIELDS( ENABLE = ABAP_TRUE ).
    ME->ITEMS_CONTROLLER->ENABLE_FIELDS_ITEMS( ).
  ENDMETHOD.

  METHOD SEARCH_REGISTER.
    DATA USER_REGISTER TYPE PA0001.
    DATA CPF           TYPE PA0465-CPF_NR.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = CLASSIFICATION-ID
      IMPORTING
        OUTPUT = CLASSIFICATION-ID.

    SELECT SINGLE *
      FROM ZMMT0081
      INTO @DATA(_SOLICITATION_HEADER)
     WHERE ID = @CLASSIFICATION-ID.

    IF ( SY-SUBRC IS INITIAL ).
      ME->ITEMS_CONTROLLER->CLEAR_ITEMS( ).
      ME->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_SUBSCREEN( SUBSCREEN-CLASSIFICATION ).
      ME->ITEMS_CONTROLLER->SET_ITEMS_SUBSCREEN( SUBSCREEN-ITENS ).

      SELECT *
        FROM ZMMT0082
        INTO TABLE @DATA(_SOLICITATION_ITEMS)
       WHERE ID = @_SOLICITATION_HEADER-ID.

      SELECT SINGLE *
         FROM PA0001 AS A
        INNER JOIN PA0465 AS B ON A~PERNR = B~PERNR
         INTO CORRESPONDING FIELDS OF USER_REGISTER
        WHERE A~PERNR = _SOLICITATION_HEADER-PERNR
          AND A~ENDDA = '99991231'
          AND B~SUBTY = '0001'.

      SELECT SINGLE CPF_NR
        FROM PA0465
        INTO CPF
       WHERE PERNR = _SOLICITATION_HEADER-PERNR.

      TRY.
          CALL METHOD ME->BIOMETRY->READ_DIGITAL(
            EXPORTING
              REGISTRATION = USER_REGISTER-PERNR
            RECEIVING
              RESULT       = DATA(_RESULT) ).

*          CALL METHOD ME->BIOMETRY->GET_DIGITAL_AS_URL_IMAGE
*            EXPORTING
*              HASH_DIGITAL = _RESULT-POLEGAR_ESQUERDO
*            RECEIVING
*              IMAGE_URL    = EMPLOYEE-URL_DIGITAL_LEFT.
*
*          CALL METHOD ME->BIOMETRY->GET_DIGITAL_AS_URL_IMAGE
*            EXPORTING
*              HASH_DIGITAL = _RESULT-POLEGAR_DIREITO
*            RECEIVING
*              IMAGE_URL    = EMPLOYEE-URL_DIGITAL_RIGHT.

          DATA(_URLR) =
            ME->BIOMETRY->GET_DIGITAL_AS_URL_IMAGE2(
            IMAGE_XSTRING = _RESULT-IM_POLEGAR_DIREITO ).
          EMPLOYEE-URL_DIGITAL_RIGHT = _URLR.

          DATA(_URLL) =
            ME->BIOMETRY->GET_DIGITAL_AS_URL_IMAGE2(
            IMAGE_XSTRING = _RESULT-IM_POLEGAR_ESQUERDO ).
          EMPLOYEE-URL_DIGITAL_LEFT = _URLL.

          CALL METHOD ME->IMAGE_HELPER->GET_PHOTO_URL
            EXPORTING
              ID     = ZCL_IMAGE_HELPER=>ID_REPOSITORY-HR_PHOTO
              NAME   = CONV #( USER_REGISTER-PERNR )
            RECEIVING
              RESULT = EMPLOYEE-URL_PHOTO.

          EMPLOYEE-NOME         = USER_REGISTER-SNAME.
          EMPLOYEE-CARGO        = USER_REGISTER-STELL.
          EMPLOYEE-EMPRESA      = USER_REGISTER-BUKRS.
          EMPLOYEE-FILIAL       = USER_REGISTER-WERKS.
          EMPLOYEE-CCUSTO       = USER_REGISTER-KOSTL.
          EMPLOYEE-MATRICULA    = USER_REGISTER-PERNR.
          EMPLOYEE-CPF          = CPF.
          EMPLOYEE-TEXT-CARGO   = ME->EMPLOYEE_CONTROLLER->GET_DESCRIPTION_CARGO( USER_REGISTER-STELL        ).
          EMPLOYEE-TEXT-EMPRESA = ME->EMPLOYEE_CONTROLLER->GET_DESCRIPTION_EMPRESA( USER_REGISTER-BUKRS      ).
          EMPLOYEE-TEXT-FILIAL  = ME->CLASSIFICATION_CONTROLLER->GET_DESCRIPTION_FILIAL( USER_REGISTER-WERKS       ).
          EMPLOYEE-TEXT-CCUSTO  = ME->CLASSIFICATION_CONTROLLER->GET_DESCRIPTION_CENTRO_CUSTO( USER_REGISTER-KOSTL ).
          EMPLOYEE-TEXT-ORDEM   = ME->CLASSIFICATION_CONTROLLER->GET_DESCRIPTION_CENTRO_CUSTO( _SOLICITATION_HEADER-AUFNR ).


          CLASSIFICATION-EPI_TERCEIRO = _SOLICITATION_HEADER-IS_TERCEIRO.
          CLASSIFICATION-NOME_TERCEIRO = _SOLICITATION_HEADER-NOME_TERCEIRO.
          CLASSIFICATION-EPI_ESPORADICO = _SOLICITATION_HEADER-ESPORADICO.
          CLASSIFICATION-ID           = _SOLICITATION_HEADER-ID.
          CLASSIFICATION-RESERVA      = _SOLICITATION_HEADER-RSNUM.
          CLASSIFICATION-TP_MOVIMENT  = _SOLICITATION_HEADER-BWART.
          CLASSIFICATION-CONTA_RAZAO  = _SOLICITATION_HEADER-SAKNR.
          CLASSIFICATION-DEPOSITO     = _SOLICITATION_HEADER-LGORT.
          CLASSIFICATION-FILIAL       = _SOLICITATION_HEADER-WERKS.
          CLASSIFICATION-CCUSTO       = _SOLICITATION_HEADER-KOSTL.
          CLASSIFICATION-AUFNR        = _SOLICITATION_HEADER-AUFNR.

          LOOP AT _SOLICITATION_ITEMS INTO DATA(_ITEM).
            APPEND VALUE #( MATNR    = _ITEM-MATNR
                            MAKTX    = ME->ITEMS_CONTROLLER->GET_DESCRIPTION_MATERIAL( _ITEM-MATNR )
                            MEINS    = ME->ITEMS_CONTROLLER->GET_UNIDADE_MEDIDA( _ITEM-MATNR )
                            QUANTITY = _ITEM-KTMNG
                            ID       = _SOLICITATION_HEADER-ID
                            RESERVA  = _SOLICITATION_HEADER-RSNUM
                          ) TO ITEMS.
          ENDLOOP.

        CATCH ZCX_BIOMETRY.
      ENDTRY.

    ELSE.
      CLEAR: EMPLOYEE, CLASSIFICATION, ITEMS.

      MESSAGE TEXT-007 TYPE 'S' DISPLAY LIKE 'E'.

      ME->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_SUBSCREEN( SUBSCREEN-EMPTY ).
      ME->ITEMS_CONTROLLER->SET_ITEMS_SUBSCREEN( SUBSCREEN-EMPTY ).
    ENDIF.
  ENDMETHOD.

  METHOD GET_NEXT_ID.
*    SELECT MAX( ID ) FROM ZMMT0081 INTO @DATA(_ID).

    IF TEMP = ABAP_TRUE.
      VALUE = '$000000001'.
    ELSE.
      CALL FUNCTION 'NUMBER_GET_NEXT'
        EXPORTING
          NR_RANGE_NR = '00'
          OBJECT      = 'Z_RES_EPI'
          QUANTITY    = '1'
        IMPORTING
          NUMBER      = VALUE.

      SHIFT VALUE LEFT DELETING LEADING '0'.
    ENDIF.
  ENDMETHOD.

  METHOD SAVE_REGISTER.

    ME->SAVE_ITEMS( ).

    ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP2( DISABLE = ABAP_TRUE ).
    ME->EMPLOYEE_CONTROLLER->SET_FIELDS_GROUP4( DISABLE = ABAP_TRUE ).
    ME->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_FIELDS( DISABLE = ABAP_TRUE ).
    ME->ITEMS_CONTROLLER->DISABLE_FIELDS_ITEMS( ).

    MESSAGE TEXT-005 TYPE 'S'.
  ENDMETHOD.

  METHOD ASK_FOR_GENERATE_RESERVATION.
    DATA ANSWER TYPE C.

    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        TITLEBAR       = 'Aviso'
*       DIAGNOSE_OBJECT       = ' '
        TEXT_QUESTION  = 'Deseja gerar a reserva agora?'
        TEXT_BUTTON_1  = 'Sim'
*       ICON_BUTTON_1  = ' '
        TEXT_BUTTON_2  = 'Não'
*       ICON_BUTTON_2  = ' '
        DEFAULT_BUTTON = '1'
*       DISPLAY_CANCEL_BUTTON = 'X'
*       USERDEFINED_F1_HELP   = ' '
*       START_COLUMN   = 25
*       START_ROW      = 6
*       POPUP_TYPE     =
*       IV_QUICKINFO_BUTTON_1 = ' '
*       IV_QUICKINFO_BUTTON_2 = ' '
      IMPORTING
        ANSWER         = ANSWER
*     TABLES
*       PARAMETER      =
*     EXCEPTIONS
*       TEXT_NOT_FOUND = 1
*       OTHERS         = 2
      .
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.

    CHECK ANSWER = '1'.
    ME->CREATE_RESERVATION( ).
  ENDMETHOD.

  METHOD SAVE_ITEMS.
    DATA ITEMS_SOLICITATION TYPE TABLE OF ZMMT0082.
    DATA TABIX              TYPE SY-TABIX.
    DATA VNOVO(1).
    IF CLASSIFICATION-ID(1) = '$'.
      VNOVO = 'S'.
    ELSE.
      VNOVO = 'N'.
    ENDIF.
    LOOP AT ITEMS INTO DATA(_ITEM).
      TABIX = SY-TABIX.
      IF VNOVO = 'S'.
        CLASSIFICATION-ID = GET_NEXT_ID( INPUT = EMPLOYEE-MATRICULA TEMP = ABAP_FALSE ).
      ENDIF.
      "
      DATA(_SOLICITATION_HEADER) =
        VALUE ZMMT0081( ID    = CLASSIFICATION-ID
                        PERNR = EMPLOYEE-MATRICULA
                        BWART = CLASSIFICATION-TP_MOVIMENT
                        SAKNR = CLASSIFICATION-CONTA_RAZAO
                        WERKS = CLASSIFICATION-FILIAL
                        KOSTL = CLASSIFICATION-CCUSTO
                        AUFNR =  CLASSIFICATION-AUFNR
                        IS_TERCEIRO = CLASSIFICATION-EPI_TERCEIRO
                        NOME_TERC_EMP = EMPLOYEE-NOME
                        NOME_TERCEIRO = CLASSIFICATION-NOME_TERCEIRO
                        ESPORADICO = CLASSIFICATION-EPI_ESPORADICO
                        LGORT = CLASSIFICATION-DEPOSITO
                        USNAM = SY-UNAME
                        DATUM = SY-DATUM
                      ).

      _ITEM-ID = CLASSIFICATION-ID.
      MODIFY ITEMS FROM _ITEM INDEX TABIX TRANSPORTING ID.
      MODIFY ZMMT0081 FROM _SOLICITATION_HEADER.

      REFRESH ITEMS_SOLICITATION.
      APPEND VALUE #( STATUS  = _ITEM-STATUS
                      ID      = CLASSIFICATION-ID
                      MATNR   = _ITEM-MATNR
                      KTMNG   = _ITEM-QUANTITY
                    ) TO ITEMS_SOLICITATION.

      DELETE FROM ZMMT0082
        WHERE ID = CLASSIFICATION-ID.

      MODIFY ZMMT0082 FROM TABLE ITEMS_SOLICITATION.
    ENDLOOP.

    COMMIT WORK.


  ENDMETHOD.

  METHOD CREATE_RESERVATION.
    DATA ITEMS_RESERVATION TYPE TABLE OF BAPIRESBC.
    DATA RETURN            TYPE TABLE OF BAPIRETURN.
    DATA RESERVATION       TYPE BAPIRKPFC-RES_NO.
    DATA ITEM              TYPE TY_ITENS.
    DATA MSG(50).
    DATA TABIX             TYPE SY-TABIX.
    DATA: T_VALUES  TYPE TABLE OF RGSB4.
    DATA: R_KOSTL TYPE RANGE OF CSKS-KOSTL.
    DATA: W_KOSTL LIKE LINE OF R_KOSTL.
    DATA: LVA_MSG TYPE STRING.


    DATA:  IT_RESERVA_CHANGE  TYPE TABLE OF BAPI2093_RES_ITEM_CHANGE.
    DATA:  WA_RESERVA_CHANGE  TYPE BAPI2093_RES_ITEM_CHANGE.
    DATA:  IT_RESERVA_CHANGEX TYPE TABLE OF BAPI2093_RES_ITEM_CHANGEX.
    DATA:  WA_RESERVA_CHANGEX TYPE BAPI2093_RES_ITEM_CHANGEX.
    DATA:  IT_RESERVA_RETURN  TYPE TABLE OF BAPIRET2.


    REFRESH T_VALUES.

    CALL FUNCTION 'G_SET_GET_ALL_VALUES'
      EXPORTING
        SETNR         = 'MAGGI_MB21'
        CLASS         = '0000'
      TABLES
        SET_VALUES    = T_VALUES
      EXCEPTIONS
        SET_NOT_FOUND = 1.

    IF SY-SUBRC IS INITIAL.
      LOOP AT T_VALUES INTO DATA(W_VALUES).
        W_KOSTL-SIGN   = 'I'.
        W_KOSTL-OPTION = 'EQ'.
        W_KOSTL-LOW    = W_VALUES-FROM.
        APPEND W_KOSTL TO R_KOSTL.
      ENDLOOP.
    ENDIF.

    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
      EXPORTING
        PERCENTAGE = SY-TABIX
        TEXT       = 'Gerando reservas...'.


    SELECT SINGLE * FROM AUFK INTO @DATA(WA_AUFK)  WHERE AUFNR EQ @CLASSIFICATION-AUFNR.


    DATA(_HEADER) =
         VALUE BAPIRKPFC( PLANT      = CLASSIFICATION-FILIAL
                          CREATED_BY = SY-UNAME
                          RES_DATE   = SY-DATUM
                          MOVE_TYPE  = CLASSIFICATION-TP_MOVIMENT
                          ORDER_NO   = COND #( WHEN CLASSIFICATION-AUFNR IS NOT INITIAL THEN CLASSIFICATION-AUFNR ELSE '' )
                          COST_CTR   = COND #( WHEN CLASSIFICATION-AUFNR IS NOT INITIAL THEN  COND #( WHEN WA_AUFK-KOSTL IS INITIAL THEN WA_AUFK-KOSTV )  ELSE CLASSIFICATION-CCUSTO )
                          G_L_ACCT   = CLASSIFICATION-CONTA_RAZAO
*-CS1126081-#RIMINI-03.08.2023-BEGIN
*                          move_stloc = classification-deposito   ).
                          ).
*-CS1126081-#RIMINI-03.08.2023-END

    REFRESH ITEMS_RESERVATION.
    LOOP AT ITEMS INTO ITEM.
      TABIX = SY-TABIX.

      SELECT SINGLE *
        FROM ZMMT0081 INTO @DATA(LWA_ZMMT0081_EDIT)
       WHERE ID EQ @ITEM-ID.

      IF ( SY-SUBRC NE 0 ) OR ( ITEM-ID IS INITIAL ).
        CONCATENATE TEXT-013  ITEM-ID TEXT-014 TEXT-015 INTO LVA_MSG SEPARATED BY SPACE.
        MESSAGE LVA_MSG TYPE 'I'.
        CONTINUE.
      ENDIF.


      "*---> 04/07/2023 - Migração S4 - LO
*      append value #( MATERIAL  = ITEM-MATNR
*                      PLANT     = CLASSIFICATION-FILIAL
*                      STORE_LOC = CLASSIFICATION-DEPOSITO
*                      QUANTITY  = ITEM-QUANTITY
*                      UNIT      = ITEM-MEINS
*                      G_L_ACCT  = CLASSIFICATION-CONTA_RAZAO
** RIM - CS1021478 - ANB - 15.09.2022 - Begin
*                      GR_RCPT   = CLASSIFICATION-CCUSTO
** RIM - CS1021478 - ANB - 15.09.2022 - End
*                      REQ_DATE  = SY-DATUM
*                    ) to ITEMS_RESERVATION.
      DATA(V_LEN) = STRLEN( ITEM-MATNR ).

      IF V_LEN > 18.
        APPEND VALUE #( MATERIAL_LONG  = ITEM-MATNR
                        PLANT          = CLASSIFICATION-FILIAL
                        STORE_LOC      = CLASSIFICATION-DEPOSITO
                        QUANTITY       = ITEM-QUANTITY
                        UNIT           = ITEM-MEINS
                        G_L_ACCT       = CLASSIFICATION-CONTA_RAZAO
* RIM - CS1021478 - ANB - 15.09.2022 - Begin
* ---> CS1090992 / IR136919 ---->
*gr_rcpt   = classification-ccusto
                      GR_RCPT   = EMPLOYEE-NOME
* <--- CS1090992 / IR136919 <----
* RIM - CS1021478 - ANB - 15.09.2022 - End
                        REQ_DATE       = SY-DATUM
                      ) TO ITEMS_RESERVATION.
      ELSE.
        APPEND VALUE #( MATERIAL  = ITEM-MATNR
                        PLANT     = CLASSIFICATION-FILIAL
                        STORE_LOC = CLASSIFICATION-DEPOSITO
                        QUANTITY  = ITEM-QUANTITY
                        UNIT      = ITEM-MEINS
                        G_L_ACCT  = CLASSIFICATION-CONTA_RAZAO
* RIM - CS1021478 - ANB - 15.09.2022 - Begin
                        GR_RCPT   = CLASSIFICATION-CCUSTO
* RIM - CS1021478 - ANB - 15.09.2022 - End
                        REQ_DATE  = SY-DATUM
                      ) TO ITEMS_RESERVATION.
      ENDIF.
      "*<--- 04/07/2023 - Migração S4 - LO

    ENDLOOP.

    CHECK ITEMS_RESERVATION IS NOT INITIAL.

    "*---> 05/07/2023 - Migração S4 - LO
    CALL FUNCTION 'BAPI_RESERVATION_CREATE' "#EC CI_USAGE_OK[2438131]
      EXPORTING
        RESERVATION_HEADER = _HEADER
      IMPORTING
        RESERVATION        = CLASSIFICATION-RESERVA
      TABLES
        RESERVATION_ITEMS  = ITEMS_RESERVATION
        RETURN             = RETURN.

    IF ( CLASSIFICATION-RESERVA IS NOT INITIAL ).
      LWA_ZMMT0081_EDIT-RSNUM = CLASSIFICATION-RESERVA.
      MODIFY ZMMT0081 FROM LWA_ZMMT0081_EDIT.
      COMMIT WORK.
      WAIT UP TO 2 SECONDS.
      "modifica itens da reserva.
      CLEAR: ITEM.


      LOOP AT ITEMS INTO ITEM.
        TABIX = SY-TABIX.
        ITEM-RESERVA = CLASSIFICATION-RESERVA.
        MODIFY ITEMS FROM ITEM INDEX TABIX TRANSPORTING RESERVA.

        "
        READ TABLE R_KOSTL INTO DATA(S_KOSTL) WITH KEY LOW = _HEADER-COST_CTR.
        IF SY-SUBRC EQ 0.
          WA_RESERVA_CHANGE-RES_ITEM = 1.
          WA_RESERVA_CHANGE-MOVEMENT = 'X'.
          APPEND  WA_RESERVA_CHANGE  TO IT_RESERVA_CHANGE.

          WA_RESERVA_CHANGEX-RES_ITEM = 1.
          WA_RESERVA_CHANGEX-MOVEMENT = 'X'.
          APPEND WA_RESERVA_CHANGEX TO IT_RESERVA_CHANGEX.

          CALL FUNCTION 'BAPI_RESERVATION_CHANGE' "#EC CI_USAGE_OK[2438131]
            EXPORTING
              RESERVATION               = ITEM-RESERVA
            TABLES
              RESERVATIONITEMS_CHANGED  = IT_RESERVA_CHANGE
              RESERVATIONITEMS_CHANGEDX = IT_RESERVA_CHANGEX
              RETURN                    = IT_RESERVA_RETURN.
          READ TABLE IT_RESERVA_RETURN INTO DATA(WA_RESERVA_RETURN) WITH KEY TYPE = 'E'.
          IF SY-SUBRC = 0.

          ELSE.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
              EXPORTING
                WAIT = 'X'.
          ENDIF.
        ELSE.
          SELECT *
            FROM RESB
            INTO TABLE @DATA(_T_RESB)
            WHERE RSNUM = @CLASSIFICATION-RESERVA.

          LOOP AT _T_RESB INTO DATA(_W_REB).
            CALL FUNCTION 'Z_MM_APROVA_RESERVA'
              EXPORTING
                KOSTL = CLASSIFICATION-CCUSTO
                RSNUM = CLASSIFICATION-RESERVA
                RSPOS = _W_REB-RSPOS.
          ENDLOOP.
        ENDIF.

        CONCATENATE TEXT-006 CLASSIFICATION-RESERVA INTO MSG SEPARATED BY SPACE.
        MESSAGE MSG TYPE 'S'.

      ENDLOOP.
    ELSE.
      ME->DISPLAY_MESSAGES( RETURN ).
    ENDIF.

  ENDMETHOD.

  METHOD CHANGE_RESERVATION.
    DATA ITEMS_CHANGED  TYPE TABLE OF BAPI2093_RES_ITEM_CHANGE.
    DATA ITEMS_CHANGEDX TYPE TABLE OF BAPI2093_RES_ITEM_CHANGEX.
    DATA NEW_ITEMS      TYPE TABLE OF BAPI2093_RES_ITEM_NEW.
*
*    LOOP AT items INTO DATA(_item).
*      APPEND VALUE #(
*       material  = _item-matnr
*                      plant     = classification-filial
*                      store_loc = classification-deposito
*                      quantity  = item-quantity
*                      unit      = item-meins
*                      g_l_acct  = classification-conta_razao
*                      req_date  = sy-datum
*      ) TO items_changed.
*    ENDLOOP.
*
*    CALL FUNCTION 'BAPI_RESERVATION_CHANGE'
*      EXPORTING
*        reservation               = classification-reserva
**       TESTRUN                   =
**       ATPCHECK                  =
*      TABLES
*        reservationitems_changed  = items_changed
*        reservationitems_changedx = items_changedx
*        reservationitems_new      = new_items
**       RETURN                    =
**       EXTENSIONIN               =
*      .

  ENDMETHOD.

  METHOD DISPLAY_MESSAGES.
    DATA MESSAGES_TABLE TYPE TABLE OF BAPIRET2.

    LOOP AT MESSAGES INTO DATA(_MESSAGE).
      APPEND VALUE BAPIRET2( TYPE       = _MESSAGE-TYPE
                             ID         = _MESSAGE-CODE(2)
                             NUMBER     = _MESSAGE-CODE+2
                             MESSAGE    = _MESSAGE-MESSAGE
                             MESSAGE_V1 = _MESSAGE-MESSAGE_V1
                             MESSAGE_V2 = _MESSAGE-MESSAGE_V2
                             MESSAGE_V3 = _MESSAGE-MESSAGE_V3
                             MESSAGE_V4 = _MESSAGE-MESSAGE_V4
                           ) TO MESSAGES_TABLE.
    ENDLOOP.

    CALL FUNCTION 'FINB_BAPIRET2_DISPLAY'
      EXPORTING
        IT_MESSAGE = MESSAGES_TABLE.
  ENDMETHOD.

  METHOD VALIDATE_REGISTERS.
    DATA VALUESNUM  TYPE TABLE OF BAPI1003_ALLOC_VALUES_NUM.
    DATA VALUESCHAR TYPE TABLE OF BAPI1003_ALLOC_VALUES_CHAR.
    DATA VALUESCURR TYPE TABLE OF BAPI1003_ALLOC_VALUES_CURR.
    DATA VALUECA    TYPE BAPI1003_ALLOC_VALUES_CHAR-VALUE_CHAR.
    DATA VALUEPERI  TYPE P LENGTH 4.
    DATA VALUEVALCA TYPE  BAPI1003_ALLOC_VALUES_NUM-VALUE_FROM.
    DATA VALUEVALCAC(50).
    DATA VALUEVALCAD TYPE SY-DATUM..
    DATA RETURN     TYPE TABLE OF  BAPIRET2.

    IF CLASSIFICATION-TP_MOVIMENT IS INITIAL
    OR CLASSIFICATION-CCUSTO      IS INITIAL
    OR CLASSIFICATION-CONTA_RAZAO IS INITIAL
    OR CLASSIFICATION-DEPOSITO    IS INITIAL
    OR CLASSIFICATION-FILIAL      IS INITIAL.
      MESSAGE TEXT-003 TYPE 'E' RAISING INVALID_CLASSIFICATION.
    ELSE.

      IF CLASSIFICATION-EPI_TERCEIRO = ABAP_TRUE.
        CHECK CLASSIFICATION-NOME_TERCEIRO IS INITIAL.
        MESSAGE TEXT-008 TYPE 'E' RAISING INVALID_CLASSIFICATION.
      ENDIF.

      DATA(_FILIAL) = ME->ITEMS_CONTROLLER->GET_PARAMETER_FILIAL( 0 ).
      READ TABLE _FILIAL INTO DATA(__FILIAL) WITH KEY FROM = CLASSIFICATION-FILIAL.
      IF SY-SUBRC NE 0.
        MESSAGE TEXT-009 TYPE 'E' RAISING INVALID_CLASSIFICATION.
      ENDIF.
    ENDIF.

    IF ITEMS IS INITIAL.
      MESSAGE TEXT-004 TYPE 'E' RAISING INVALID_ITEM.
    ENDIF.

    REFRESH T_EPI_CENTRO.
    CALL FUNCTION 'G_SET_GET_ALL_VALUES'
      EXPORTING
        CLASS         = '0000'
        SETNR         = 'MAGGI_ZMM0123_EPI'
      TABLES
        SET_VALUES    = T_EPI_CENTRO
      EXCEPTIONS
        SET_NOT_FOUND = 1
        OTHERS        = 2.
    IF SY-SUBRC <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*             WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
    SORT T_EPI_CENTRO BY FROM.

    LOOP AT ITEMS INTO DATA(_ITEM).
      IF CLASSIFICATION-EPI_ESPORADICO = ABAP_FALSE.
        READ TABLE T_EPI_CENTRO WITH KEY FROM = CLASSIFICATION-FILIAL TRANSPORTING NO FIELDS.
        IF SY-SUBRC = 0.
          SELECT SINGLE *
            FROM ZMMT0100 AS A
            INTO @DATA(_PARAMETROS_MAT_EPI)
           WHERE WERKS = @CLASSIFICATION-FILIAL
             AND CARGO = @EMPLOYEE-CARGO
             AND MATNR = @_ITEM-MATNR.

          IF SY-SUBRC NE 0.
            MESSAGE TEXT-002 TYPE 'E' RAISING INVALID_ITEM.
          ENDIF.
        ENDIF.
      ENDIF.

      SELECT SINGLE *
       FROM MARD AS A
       INTO @DATA(_MARD)
      WHERE WERKS = @CLASSIFICATION-FILIAL
        AND MATNR = @_ITEM-MATNR.

      IF SY-SUBRC NE 0.
        MESSAGE TEXT-011 TYPE 'E' RAISING INVALID_ITEM.
      ENDIF.

      IF _ITEM-QUANTITY = 0.
        MESSAGE TEXT-010 TYPE 'E' RAISING INVALID_ITEM.
      ENDIF.
*      Valida EPI
*      Checar valiudade CA
*      SELECT SINGLE MTART
*        FROM MARA
*        INTO @DATA(VMTART)
*        WHERE MATNR = @_ITEM-MATNR.
*      IF VMTART = 'ZEPI'.
*        CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
*          EXPORTING
*            OBJECTKEY       = CONV OBJNUM( _ITEM-MATNR )
*            OBJECTTABLE     = 'MARA'
*            CLASSNUM        = 'MATEPI'
*            CLASSTYPE       = '023'
*          TABLES
*            ALLOCVALUESNUM  = VALUESNUM
*            ALLOCVALUESCHAR = VALUESCHAR
*            ALLOCVALUESCURR = VALUESCURR
*            RETURN          = RETURN.
*
*        TRY.
*            VALUECA = VALUESCHAR[ CHARACT = 'ZEPI_CA' ]-VALUE_CHAR.
*          CATCH CX_SY_ITAB_LINE_NOT_FOUND.
*        ENDTRY.
*        TRY.
*            VALUEPERI = VALUESNUM[ CHARACT = 'ZEPI_PERI' ]-VALUE_FROM.
*          CATCH CX_SY_ITAB_LINE_NOT_FOUND.
*        ENDTRY.
*
*        TRY.
*            VALUEVALCA = VALUESNUM[ CHARACT = 'ZEPI_VALCA' ]-VALUE_FROM.
*          CATCH CX_SY_ITAB_LINE_NOT_FOUND.
*        ENDTRY.
*        IF VALUECA IS INITIAL.
*          MESSAGE |Este Material {  _ITEM-MATNR } esta sem CA, procure SSO|  TYPE 'E' RAISING INVALID_ITEM.
*        ENDIF.
*        IF VALUEPERI IS INITIAL.
*          MESSAGE |Este Material {  _ITEM-MATNR } esta sem periodicidade, procure SSO|  TYPE 'E' RAISING INVALID_ITEM.
*        ENDIF.
*        IF VALUEVALCA IS INITIAL.
*          MESSAGE |Este Material {  _ITEM-MATNR }  esta sem validade, procure SSO|  TYPE 'E' RAISING INVALID_ITEM.
*        ELSE.
*          WRITE: VALUEVALCA               TO VALUEVALCAC.
*          REPLACE ALL OCCURRENCES OF        '.'     IN VALUEVALCAC WITH ' '.
*          REPLACE ALL OCCURRENCES OF        ','     IN VALUEVALCAC WITH ' '.
*          CONDENSE VALUEVALCAC NO-GAPS.
*          VALUEVALCAD = VALUEVALCAC+0(8).
*          IF VALUEVALCAD LT SY-DATUM.
*            MESSAGE |Este Material {  _ITEM-MATNR }  esta vencido, procure SSO|  TYPE 'E' RAISING INVALID_ITEM.
*          ENDIF.
*        ENDIF.
*      ENDIF.

    ENDLOOP.
  ENDMETHOD.

  METHOD FORMAT_CPF.
    DATA(_CPF) = CONV STRING( CPF ).

    REPLACE ALL OCCURRENCES OF '.' IN _CPF WITH SPACE.
    REPLACE ALL OCCURRENCES OF '-' IN _CPF WITH SPACE.

    WRITE _CPF USING EDIT MASK '___.___.___-__' TO VALUE.
  ENDMETHOD.
ENDCLASS.

DATA MAIN TYPE REF TO CL_MAIN.

MODULE MAIN_OUTPUT OUTPUT.
  IF ( MAIN IS INITIAL ).

    MAIN = NEW CL_MAIN( ).

    MAIN->EMPLOYEE_CONTROLLER->SET_EMPLOYEE_SUBSCREEN( SUBSCREEN-EMPLOYEE ).
    MAIN->CLASSIFICATION_CONTROLLER->SET_CLASSIFICATION_SUBSCREEN( SUBSCREEN-EMPTY ).
    MAIN->ITEMS_CONTROLLER->SET_ITEMS_SUBSCREEN( SUBSCREEN-EMPTY ).

    MAIN->SET_ACTION( 'NEW' ).
  ENDIF.

  MAIN->PROCESS_BEFORE_OUTPUT( ).

ENDMODULE.

MODULE MAIN_INPUT INPUT.
  MAIN->USER_COMMAND( SY-UCOMM ).
ENDMODULE.

MODULE EMPLOYEE_OUTPUT OUTPUT.
  MAIN->EMPLOYEE_CONTROLLER->PROCESS_BEFORE_OUTPUT( ).
ENDMODULE.

MODULE EMPLOYEE_INPUT INPUT.
*  BREAK-POINT.
ENDMODULE.

MODULE CLASSIFICATION_OUTPUT OUTPUT.
  MAIN->CLASSIFICATION_CONTROLLER->PROCESS_BEFORE_OUTPUT( ).
ENDMODULE.

MODULE OUTPUT_ITEMS OUTPUT.
  MAIN->ITEMS_CONTROLLER->DISPLAY_ITEMS( ).
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  HELP_RESERVATION_ID  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE HELP_RESERVATION_ID INPUT.
  SELECT *
    FROM ZMMT0081
    INTO TABLE @DATA(_SOLICITATION_HEADER).

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD    = 'ID'
      DYNPPROG    = SY-REPID
      DYNPNR      = SY-DYNNR
      DYNPROFIELD = 'QPCT-CODE'
      VALUE_ORG   = 'S'
    TABLES
      VALUE_TAB   = _SOLICITATION_HEADER.
*      return_tab      = gt_return_tab
*      dynpfld_mapping = gt_dselc.
ENDMODULE.
