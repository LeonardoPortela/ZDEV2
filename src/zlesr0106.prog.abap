*&---------------------------------------------------------------------*
*& Report  ZLESR0105
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZLESR0106 MESSAGE-ID ZLES.

TABLES: ZLEST0039,
        ZLEST0019_L2_20,
        ZDE_FERRO_SAIDA_LAC.

*---------------------------------------------------------------------*
*       CLASS c_service DEFINITION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS C_SERVICE DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS GET_PIC_TAB             IMPORTING MIME_URL TYPE CSEQUENCE EXPORTING PIC_TAB  TYPE STANDARD TABLE.
    CLASS-METHODS VERIFICA_FILTRO_INITIAL RETURNING VALUE(R_VAZIO) TYPE CHAR01.
    CLASS-METHODS VERIFICA_FILTRO_INITIAL_E RETURNING VALUE(R_VAZIO) TYPE CHAR01.
ENDCLASS.                    "c_service DEFINITION

CLASS LCL_APPLICATION DEFINITION.
  PUBLIC SECTION.
    METHODS:
      HANDLE_NODE_DOUBLE_CLICK  FOR EVENT NODE_DOUBLE_CLICK  OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY,
      HANDLE_EXPAND_NO_CHILDREN FOR EVENT EXPAND_NO_CHILDREN OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY,
      HANDLE_ITEM_DOUBLE_CLICK  FOR EVENT ITEM_DOUBLE_CLICK  OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY ITEM_NAME,
      HANDLE_BUTTON_CLICK       FOR EVENT BUTTON_CLICK       OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY ITEM_NAME,
      HANDLE_LINK_CLICK         FOR EVENT LINK_CLICK         OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY ITEM_NAME,
      HANDLE_CHECKBOX_CHANGE    FOR EVENT CHECKBOX_CHANGE    OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY ITEM_NAME CHECKED.
ENDCLASS.                    "LCL_APPLICATION DEFINITION

CLASS LCL_ALV_TOOLBAR DEFINITION.
  PUBLIC SECTION.
*Constructor
    METHODS:
      CONSTRUCTOR         IMPORTING IO_ALV_GRID TYPE REF TO CL_GUI_ALV_GRID,
      ON_TOOLBAR          FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID IMPORTING E_OBJECT,
      HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID IMPORTING E_UCOMM.
ENDCLASS.                    "lcl_alv_toolbar DEFINITION

*----------------------------------------------------------------------*
*   INCLUDE BCALV_TREE_EVENT_REC_DRAGDROP                              *
*----------------------------------------------------------------------*
CLASS CL_TREE_EVENT_RECEIVER DEFINITION.
  PUBLIC SECTION.
    METHODS HANDLE_DOUBLE_CLICK  FOR EVENT NODE_DOUBLE_CLICK OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY.
    METHODS HANDLE_ON_DRAG FOR EVENT ON_DRAG OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY ITEM_NAME DRAG_DROP_OBJECT.
    METHODS HANDLE_ON_DRAG_MULTIPLE FOR EVENT ON_DRAG_MULTIPLE OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY_TABLE ITEM_NAME DRAG_DROP_OBJECT.
  PRIVATE SECTION.
ENDCLASS.

*----------------------------------------------------------------------*
*   INCLUDE BCALV_TREE_EVENT_REC_DRAGDROP                              *
*----------------------------------------------------------------------*
CLASS CL_TREE_EVENT_RECEIVER_2 DEFINITION.
  PUBLIC SECTION.
    METHODS HANDLE_ON_DRAG_MULTIPLE FOR EVENT ON_DRAG_MULTIPLE OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY_TABLE ITEM_NAME DRAG_DROP_OBJECT.
ENDCLASS.

CLASS LCL_EVENT_RECEIVER DEFINITION.
  PUBLIC SECTION.
    METHODS HANDLE_HOTSPOT_CLICK FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID IMPORTING E_COLUMN_ID ES_ROW_NO.
    METHODS HANDLE_BUTTON_CLICK FOR EVENT BUTTON_CLICK OF CL_GUI_ALV_GRID IMPORTING ES_COL_ID ES_ROW_NO.
    METHODS HANDLE_ONDROP FOR EVENT ONDROP OF CL_GUI_ALV_GRID IMPORTING E_ROW E_COLUMN ES_ROW_NO E_DRAGDROPOBJ.
    METHODS HANDLE_ONDRAG FOR EVENT ONDRAG OF CL_GUI_ALV_GRID IMPORTING E_ROW E_COLUMN ES_ROW_NO E_DRAGDROPOBJ.
    METHODS HANDLE_DATA_CHANGED FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID IMPORTING ER_DATA_CHANGED.
    METHODS HANDLE_F4 FOR EVENT ONF4 OF CL_GUI_ALV_GRID IMPORTING E_FIELDNAME ES_ROW_NO ER_EVENT_DATA ET_BAD_CELLS.
    METHODS HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID IMPORTING E_UCOMM.
    METHODS HANDLE_AFTER_USER_COMMAND FOR EVENT AFTER_USER_COMMAND OF CL_GUI_ALV_GRID IMPORTING E_UCOMM.
ENDCLASS.

CLASS LCL_DRAGDROP_OBJ_TREE DEFINITION.
  PUBLIC SECTION.
    DATA: NODE  TYPE TV_NODEKEY.
ENDCLASS.                    "lcl_dragdrop_obj_d0100 DEFINITION

CLASS LCL_DRAGDROP_OBJ_TREE_MULT DEFINITION.
  PUBLIC SECTION.
    DATA: NODE TYPE TABLE OF TV_NODEKEY,
          TIPO TYPE CHAR01.
ENDCLASS.                    "lcl_dragdrop_obj_d0100 DEFINITION

CLASS OBJ_CADASTRO DEFINITION.
  PUBLIC SECTION.
    DATA: POSICAO TYPE TABLE OF ZDE_RET_PESQ_FERRO_SAIDA.
    DATA: OBJETOS TYPE TABLE OF REF TO ZCL_FERROVIARIO_SAIDA.
    METHODS:
      VERIFICA_ALTEROU RETURNING VALUE(R_ALTEROU) TYPE CHAR01.
ENDCLASS.                    "c_service DEFINITION

DATA: PLANILHA TYPE REF TO OBJ_CADASTRO.

CLASS OBJ_CADASTRO IMPLEMENTATION.
  METHOD VERIFICA_ALTEROU.
    R_ALTEROU = ABAP_FALSE.
    LOOP AT OBJETOS INTO DATA(OBJETO).
      IF OBJETO->ZIF_CADASTRO~CK_ALTEROU EQ ABAP_TRUE.
        R_ALTEROU = ABAP_TRUE.
        EXIT.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.                    "c_service DEFINITION

CONSTANTS: CS_LINE_COLOR_FINALIZADO TYPE C LENGTH 4 VALUE 'C500',
           CS_LINE_COLOR_ALTERADO   TYPE C LENGTH 4 VALUE 'C300'.

TYPES: BEGIN OF TY_RETORNO.
        INCLUDE STRUCTURE ZDE_RET_PESQ_FERRO_SAIDA.
TYPES:   LINE_COLOR(4) TYPE C, "Used to store row color attributes
         COLOR_CELL    TYPE LVC_T_SCOL,  " Cell color
         STYLE         TYPE LVC_T_STYL,
         ICO_FUNC_LOTE TYPE CHAR04,
         END OF TY_RETORNO.

DATA: LC_FILTRO TYPE ZDE_FILTRO_FERRO_SAIDA.

DATA: CTL_CCCONTAINER_PICTURE TYPE REF TO CL_GUI_CONTAINER,
      SPLITTER                TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      PICTURE                 TYPE REF TO CL_GUI_PICTURE,
      FERRO_SAIDA             TYPE REF TO ZCL_FERROVIARIO_SAIDA.

DATA: OK_CODE TYPE SY-UCOMM.

DATA: DOCKING               TYPE REF TO CL_GUI_DOCKING_CONTAINER,
      TREE                  TYPE REF TO CL_GUI_COLUMN_TREE,
      TREE_DCLS             TYPE REF TO CL_GUI_COLUMN_TREE,
      G_APPLICATION         TYPE REF TO LCL_APPLICATION,
      TREE_EVENT_RECEIVER   TYPE REF TO CL_TREE_EVENT_RECEIVER,
      TREE_EVENT_RECEIVER2  TYPE REF TO CL_TREE_EVENT_RECEIVER_2,
      G_DROPEFFECT          TYPE I,
      DRAGDROP_TREE         TYPE REF TO CL_DRAGDROP,
      G_HANDLE_TREE         TYPE I,
      G_HANDLE_ALV          TYPE I,
      DRAGDROP_ALV          TYPE REF TO CL_DRAGDROP,
      IT_RETORNO            TYPE ZDE_RET_PESQ_FERRO_SAIDA_T,
      IT_LACAMENTO          TYPE TABLE OF TY_RETORNO,
      IT_LACAMENTO_SEL      TYPE TABLE OF TY_RETORNO,
      WA_RETORNO_EDT        TYPE TY_RETORNO,
      IT_RETORNO_EDT        TYPE TABLE OF TY_RETORNO,
      IT_RETORNO_SEL        TYPE TABLE OF TY_RETORNO,
      CK_DOCKING_CREATE     TYPE C LENGTH 1,
      CK_IMPORTANDO_ARQUIVO TYPE C LENGTH 1.

DATA: CTL_ALV         TYPE REF TO CL_GUI_ALV_GRID,
      DG_SPLITTER     TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_SPLITTER_DOC TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      OBG_TOOLBAR     TYPE REF TO LCL_ALV_TOOLBAR,
      TOOLBARMANAGER  TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,
      EVENT_RECEIVER  TYPE REF TO LCL_EVENT_RECEIVER,
      WA_STABLE       TYPE LVC_S_STBL,
      GS_SCROLL_COL   TYPE LVC_S_COL,
      GS_SCROLL_ROW   TYPE LVC_S_ROID,
      SB_TELA_0200    TYPE SY-DYNNR.

DATA: IT_FIELDCATALOG TYPE LVC_T_FCAT,
      WA_FIELDCATALOG TYPE LVC_S_FCAT.

DATA: IT_EXCEPT_QINFO TYPE LVC_T_QINF,
      WA_EXCEPT_QINFO TYPE LVC_S_QINF.

DATA: IT_EXCLUDE_FCODE TYPE UI_FUNCTIONS,
      WA_EXCLUDE_FCODE LIKE LINE OF IT_EXCLUDE_FCODE.

DATA: IT_SELECTED_ROWS TYPE LVC_T_ROW,
      WA_SELECTED_ROWS TYPE LVC_S_ROW.


DATA: GS_LAYOUT  TYPE LVC_S_LAYO,
      GS_VARIANT TYPE DISVARIANT.

DATA: NODE_TABLE TYPE TREEV_NTAB,
      ITEM_TABLE TYPE STANDARD TABLE OF MTREEITM.

DATA: NODE_TABLE_DOCS TYPE TREEV_NTAB,
      ITEM_TABLE_DOCS TYPE STANDARD TABLE OF MTREEITM.

CONSTANTS:
  BEGIN OF C_TREE,
    COLUMN1 TYPE TV_ITMNAME VALUE 'Transbordo',
    COLUMN4 TYPE TV_ITMNAME VALUE 'PesoO',
    COLUMN5 TYPE TV_ITMNAME VALUE 'NFTerceiro',
    COLUMN6 TYPE TV_ITMNAME VALUE 'DOCNUM',
  END OF C_TREE,
  BEGIN OF C_TREE_DCLS,
    COLUMN1  TYPE TV_ITMNAME VALUE 'Ferrovia',
    "COLUMN2  TYPE TV_ITMNAME VALUE 'DCL',
    COLUMN3  TYPE TV_ITMNAME VALUE 'DataS',
    COLUMN4  TYPE TV_ITMNAME VALUE 'PesoS',
    COLUMN8  TYPE TV_ITMNAME VALUE 'DCL',
    COLUMN9  TYPE TV_ITMNAME VALUE 'IdVagao',
    COLUMN10 TYPE TV_ITMNAME VALUE 'SerieDCL',
    COLUMN11 TYPE TV_ITMNAME VALUE 'CNPJFERRO',
  END OF C_TREE_DCLS.

SELECTION-SCREEN BEGIN OF SCREEN 0101 AS SUBSCREEN.
SELECTION-SCREEN BEGIN OF BLOCK CTE WITH FRAME TITLE TEXT-008.
SELECT-OPTIONS: EBUKRS FOR ZLEST0039-BUKRS,
                EBRANC FOR ZLEST0039-WERKS,
                EDTSAI FOR ZLEST0039-DATASAIDA,
                ETRANS FOR ZLEST0039-DATATRANSB,
                ENNOTA FOR ZLEST0039-NFENUM.
SELECTION-SCREEN END OF BLOCK CTE.

SELECTION-SCREEN BEGIN OF BLOCK VAGAO WITH FRAME TITLE TEXT-009.
SELECT-OPTIONS: ENRDCL FOR ZLEST0019_L2_20-DCL,
                EIDVAG FOR ZLEST0019_L2_20-IDVAGAO.
SELECTION-SCREEN END OF BLOCK VAGAO.
SELECTION-SCREEN END OF SCREEN 0101.

SELECT-OPTIONS: IBUKRS FOR ZLEST0039-BUKRS NO-DISPLAY,
                IBRANC FOR ZLEST0039-WERKS NO-DISPLAY,
                IDTSAI FOR ZLEST0039-DATASAIDA NO-DISPLAY,
                ITRANS FOR ZLEST0039-DATATRANSB NO-DISPLAY,
                INNOTA FOR ZLEST0039-NFENUM NO-DISPLAY,
                INRDCL FOR ZLEST0019_L2_20-DCL NO-DISPLAY,
                IIDVAG FOR ZLEST0019_L2_20-IDVAGAO NO-DISPLAY.

"Informações do Conhecimento de Transporte

START-OF-SELECTION.

  IF C_SERVICE=>VERIFICA_FILTRO_INITIAL( ) EQ ABAP_TRUE.
    CALL SCREEN 0001.
  ELSE.
    CREATE OBJECT FERRO_SAIDA.

    "Pesquisar
    TRY.
        CLEAR: LC_FILTRO.
        LC_FILTRO-INRDCL[] = INRDCL[].
        LC_FILTRO-IDTSAI[] = IDTSAI[].
        LC_FILTRO-IBUKRS[] = IBUKRS[].
        LC_FILTRO-IBRANC[] = IBRANC[].
        LC_FILTRO-INNOTA[] = INNOTA[].
        LC_FILTRO-IIDVAG[] = IIDVAG[].
        LC_FILTRO-ITRANS[] = ITRANS[].
        CK_DOCKING_CREATE     = ABAP_TRUE.
        IF FERRO_SAIDA->ZIF_PESQUISA~PESQUISAR( EXPORTING I_FILTROS = LC_FILTRO IMPORTING E_REGISTROS = IT_RETORNO ) EQ ABAP_TRUE.
          CALL SCREEN 0200.
        ENDIF.
      CATCH ZCX_CADASTRO INTO DATA(EX_CADASTRO).
        EX_CADASTRO->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
    ENDTRY.

    IF FERRO_SAIDA IS NOT INITIAL.
      CLEAR: FERRO_SAIDA.
    ENDIF.

    LEAVE PROGRAM.
  ENDIF.

INITIALIZATION.
  CK_IMPORTANDO_ARQUIVO = ABAP_FALSE.

*---------------------------------------------------------------------*
*       CLASS CL_TREE_EVENT_RECEIVER IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS CL_TREE_EVENT_RECEIVER IMPLEMENTATION.
* handle double_click
  METHOD HANDLE_DOUBLE_CLICK.

*    CHECK NOT node_key IS INITIAL.
*
*    READ TABLE item_table WITH KEY node_key = node_key item_name = c_tree-column1 INTO DATA(wa_item_table).
*
*    CHECK sy-subrc IS INITIAL.
*
*    READ TABLE e_ekpo_t WITH KEY ebeln = wa_item_table-text(10) ebelp = wa_item_table-text+11(5) INTO DATA(wa_ekpo_t).
*
*    CHECK sy-subrc IS INITIAL.
*
*    zcl_pedido_compra=>show_pedido( i_ebeln = wa_ekpo_t-ebeln ).

  ENDMETHOD.

* Drag & Drop
  METHOD HANDLE_ON_DRAG.

    CHECK NOT NODE_KEY IS INITIAL.

    DATA: L_OBJ  TYPE REF TO LCL_DRAGDROP_OBJ_TREE.

    CREATE OBJECT L_OBJ.

    L_OBJ->NODE = NODE_KEY.

    DRAG_DROP_OBJECT->OBJECT = L_OBJ.

  ENDMETHOD.

  METHOD HANDLE_ON_DRAG_MULTIPLE.

    DATA: W_OBJ  TYPE REF TO LCL_DRAGDROP_OBJ_TREE_MULT.

    CREATE OBJECT W_OBJ.
    LOOP AT NODE_KEY_TABLE INTO DATA(NODOS).
      APPEND NODOS TO W_OBJ->NODE.
      W_OBJ->TIPO = '1'.
    ENDLOOP.

    DRAG_DROP_OBJECT->OBJECT = W_OBJ.

  ENDMETHOD.

ENDCLASS.

CLASS CL_TREE_EVENT_RECEIVER_2 IMPLEMENTATION.
  METHOD HANDLE_ON_DRAG_MULTIPLE.

    DATA: W_OBJ  TYPE REF TO LCL_DRAGDROP_OBJ_TREE_MULT.

    CREATE OBJECT W_OBJ.
    LOOP AT NODE_KEY_TABLE INTO DATA(NODOS).
      APPEND NODOS TO W_OBJ->NODE.
      W_OBJ->TIPO = '2'.
    ENDLOOP.

    DRAG_DROP_OBJECT->OBJECT = W_OBJ.

  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS LCL_APPLICATION IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_APPLICATION IMPLEMENTATION.

  METHOD  HANDLE_NODE_DOUBLE_CLICK.
  ENDMETHOD.                    "HANDLE_NODE_DOUBLE_CLICK

  METHOD  HANDLE_ITEM_DOUBLE_CLICK.
  ENDMETHOD.                    "HANDLE_ITEM_DOUBLE_CLICK

  METHOD  HANDLE_LINK_CLICK.
  ENDMETHOD.                    "HANDLE_LINK_CLICK

  METHOD  HANDLE_BUTTON_CLICK.
  ENDMETHOD.                    "HANDLE_BUTTON_CLICK

  METHOD  HANDLE_CHECKBOX_CHANGE.
  ENDMETHOD.                    "HANDLE_CHECKBOX_CHANGE

  METHOD HANDLE_EXPAND_NO_CHILDREN.
  ENDMETHOD.                    "HANDLE_EXPAND_NO_CHILDREN

ENDCLASS.                    "LCL_APPLICATION IMPLEMENTATION

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.

  CASE OK_CODE.
    WHEN 'IMPORTAR'.
      CLEAR: OK_CODE.

      PERFORM IMPORTAR_DADOS_EXCEL.

    WHEN 'ENTRAR'.
      CLEAR: OK_CODE.
      IF C_SERVICE=>VERIFICA_FILTRO_INITIAL_E( ) EQ ABAP_FALSE.
        SUBMIT ZLESR0106 WITH INRDCL IN ENRDCL
                         WITH IDTSAI IN EDTSAI
                         WITH IBUKRS IN EBUKRS
                         WITH IBRANC IN EBRANC
                         WITH INNOTA IN ENNOTA
                         WITH IIDVAG IN EIDVAG
                         WITH ITRANS IN ETRANS AND RETURN.
      ENDIF.
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100_EXIT INPUT.
  LEAVE PROGRAM.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.
  SET PF-STATUS 'PF0100'.
  SET TITLEBAR 'TL0100'.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0001 OUTPUT.

  "SET PF-STATUS 'xxxxxxxx'.
  SET TITLEBAR 'TL0001'.

  IF SPLITTER IS INITIAL.

    CREATE OBJECT SPLITTER
      EXPORTING
        PARENT  = CL_GUI_CONTAINER=>SCREEN0 "CTL_CCCONTAINER
        ROWS    = 1
        COLUMNS = 1.

    CALL METHOD SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = CTL_CCCONTAINER_PICTURE.

    CREATE OBJECT PICTURE
      EXPORTING
        PARENT = CTL_CCCONTAINER_PICTURE
      EXCEPTIONS
        ERROR  = 1.

    CALL METHOD PICTURE->SET_DISPLAY_MODE
      EXPORTING
        DISPLAY_MODE = PICTURE->DISPLAY_MODE_STRETCH
      EXCEPTIONS
        ERROR        = 1.

    PERFORM LOAD_PIC_FROM_DB USING PICTURE.

  ENDIF.

  CALL SCREEN 0100 STARTING AT 20 02.

ENDMODULE.

##PERF_NO_TYPE
FORM LOAD_PIC_FROM_DB  USING  GUI_PICTURE TYPE REF TO CL_GUI_PICTURE.

  DATA URL(255).
  TYPES PIC_LINE(1022) TYPE X.
  DATA  PIC_TAB TYPE TABLE OF PIC_LINE.

  CLEAR URL.
  URL = '/SAP/PUBLIC/AMAGGI/Logo Principal.jpg'.

  C_SERVICE=>GET_PIC_TAB(
        EXPORTING MIME_URL = '/SAP/PUBLIC/AMAGGI/Logo Principal.jpg'
        IMPORTING PIC_TAB  = PIC_TAB ).

  CALL FUNCTION 'DP_CREATE_URL'
    EXPORTING
      TYPE    = 'image'
      SUBTYPE = 'GIF'
    TABLES
      DATA    = PIC_TAB
    CHANGING
      URL     = URL
    EXCEPTIONS
      OTHERS  = 1.

  CALL METHOD GUI_PICTURE->LOAD_PICTURE_FROM_URL
    EXPORTING
      URL = URL.

ENDFORM.                               " LOAD_PIC_FROM_DB

CLASS C_SERVICE IMPLEMENTATION.
  METHOD VERIFICA_FILTRO_INITIAL_E.
    IF NOT ( ENRDCL[] IS INITIAL AND
             EDTSAI[] IS INITIAL AND
             EBUKRS[] IS INITIAL AND
             EBRANC[] IS INITIAL AND
             ENNOTA[] IS INITIAL AND
             EIDVAG[] IS INITIAL AND
             ETRANS[] IS INITIAL ).
      R_VAZIO = ABAP_FALSE.
    ELSE.
      R_VAZIO = ABAP_TRUE.
    ENDIF.
  ENDMETHOD.
  METHOD VERIFICA_FILTRO_INITIAL.
    IF NOT ( INRDCL[] IS INITIAL AND
             IDTSAI[] IS INITIAL AND
             IBUKRS[] IS INITIAL AND
             IBRANC[] IS INITIAL AND
             INNOTA[] IS INITIAL AND
             IIDVAG[] IS INITIAL AND
             ITRANS[] IS INITIAL ).
      R_VAZIO = ABAP_FALSE.
    ELSE.
      R_VAZIO = ABAP_TRUE.
    ENDIF.
  ENDMETHOD.
  METHOD GET_PIC_TAB.
    DATA PIC_WA TYPE XSTRING.
    DATA LENGTH TYPE I.
    DATA MIME_API TYPE REF TO IF_MR_API.
    MIME_API = CL_MIME_REPOSITORY_API=>GET_API( ).
    MIME_API->GET( EXPORTING I_URL = MIME_URL
                             I_CHECK_AUTHORITY = ABAP_FALSE
                   IMPORTING E_CONTENT = PIC_WA
                   EXCEPTIONS OTHERS = 4 ).
    IF SY-SUBRC = 4.
      RETURN.
    ENDIF.
    CLEAR PIC_TAB.
    LENGTH = XSTRLEN( PIC_WA ).
    WHILE LENGTH >= 1022.
      APPEND PIC_WA(1022) TO PIC_TAB.
      SHIFT PIC_WA BY 1022 PLACES LEFT IN BYTE MODE.
      LENGTH = XSTRLEN( PIC_WA ).
    ENDWHILE.
    IF LENGTH > 0.
      APPEND PIC_WA TO PIC_TAB.
    ENDIF.
  ENDMETHOD.                    "get_pic_tab

ENDCLASS.                    "c_service IMPLEMENTATION

FORM LIMPAR_TELA.

  IF DRAGDROP_ALV IS NOT INITIAL.
    DRAGDROP_ALV->DESTROY( ).
  ENDIF.

  CLEAR: DRAGDROP_ALV.

  IF DRAGDROP_TREE IS NOT INITIAL.
    DRAGDROP_TREE->DESTROY( ).
  ENDIF.

  CLEAR: DRAGDROP_TREE.

  CLEAR: TREE_EVENT_RECEIVER.

  CLEAR: G_APPLICATION.

  IF TREE IS NOT INITIAL.
    TREE->FREE( ).
  ENDIF.
  CLEAR: TREE.

  IF DOCKING IS NOT INITIAL.
    DOCKING->FREE( ).
  ENDIF.

  CLEAR: DOCKING.
  CLEAR: FERRO_SAIDA.

  CLEAR: ZLEST0019_L2_20.

ENDFORM.

*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.

  METHOD HANDLE_HOTSPOT_CLICK.

  ENDMETHOD.                    "handle_hotspot_click

  METHOD HANDLE_BUTTON_CLICK.

  ENDMETHOD.                    "HANDLE_BUTTON_CLICK

  METHOD HANDLE_ONDROP.

    DATA: GS_ALV_REFRES_COND TYPE LVC_S_STBL.

    DATA(LC_NM_CLASS) = CL_ABAP_CLASSDESCR=>GET_CLASS_NAME( E_DRAGDROPOBJ->OBJECT ).

    FIND FIRST OCCURRENCE OF REGEX '\<LCL\w+' IN LC_NM_CLASS RESULTS DATA(RESULADO).
    LC_NM_CLASS = LC_NM_CLASS+RESULADO-OFFSET(RESULADO-LENGTH).

    CASE LC_NM_CLASS.
      WHEN 'LCL_DRAGDROP_OBJ_TREE_MULT'.
        DATA(LC_TYPE) = CAST LCL_DRAGDROP_OBJ_TREE_MULT( E_DRAGDROPOBJ->OBJECT )->TIPO.
        LOOP AT CAST LCL_DRAGDROP_OBJ_TREE_MULT( E_DRAGDROPOBJ->OBJECT )->NODE INTO DATA(WA_NODE).
          DATA(LC_NODE) = WA_NODE.
          PERFORM ADD_RETORNO_ALV USING LC_NODE LC_TYPE.
        ENDLOOP.
    ENDCASE.

    GS_ALV_REFRES_COND-ROW = ABAP_TRUE.
    GS_ALV_REFRES_COND-COL = ABAP_TRUE.

    CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE      = GS_ALV_REFRES_COND
        I_SOFT_REFRESH = ABAP_TRUE.

    CALL METHOD CL_GUI_CFW=>FLUSH.

  ENDMETHOD.                    "HANDLE_BUTTON_CLICK

  METHOD HANDLE_ONDRAG.

  ENDMETHOD.                    "HANDLE_BUTTON_CLICK

  METHOD HANDLE_DATA_CHANGED.
    PERFORM DATA_CHANGED USING ER_DATA_CHANGED.
  ENDMETHOD.

  METHOD HANDLE_F4.

  ENDMETHOD.

  METHOD HANDLE_USER_COMMAND.

  ENDMETHOD.

  METHOD HANDLE_AFTER_USER_COMMAND.

  ENDMETHOD.

ENDCLASS.

INCLUDE ZLESR0106_STATUS_0200.
*INCLUDE ZLESR0105_STATUS_0200.

*&---------------------------------------------------------------------*
*&      Form  ADD_RETORNO_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LC_NODE  text
*----------------------------------------------------------------------*
FORM ADD_RETORNO_ALV USING P_NODE TYPE TV_NODEKEY P_TYPE TYPE CHAR01.

  DATA: LC_DOCNUM TYPE J_1BDOCNUM.

  CASE P_TYPE.
    WHEN '1'.
      "DCL
      READ TABLE ITEM_TABLE WITH KEY NODE_KEY = P_NODE ITEM_NAME = C_TREE-COLUMN6  INTO DATA(WA_ITEM_NOTA).

      IF SY-SUBRC IS INITIAL.

        LC_DOCNUM    = WA_ITEM_NOTA-TEXT.

        CHECK LC_DOCNUM  IS NOT INITIAL.

        LOOP AT IT_RETORNO INTO DATA(WA_TESTAR_01) WHERE DOCNUM EQ LC_DOCNUM.

          READ TABLE IT_RETORNO_EDT WITH KEY DOCNUM   = LC_DOCNUM
                                             DCL      = WA_TESTAR_01-DCL
                                             SERIEDCL = WA_TESTAR_01-SERIEDCL
                                             IDVAGAO  = WA_TESTAR_01-IDVAGAO
                                             TRANSPORTING NO FIELDS.
          IF SY-SUBRC IS NOT INITIAL.
            "PROCURAR PROCESSO """"""""""""
            IF WA_TESTAR_01-DCL IS INITIAL OR WA_TESTAR_01-SERIEDCL IS INITIAL OR WA_TESTAR_01-CNPJFERRO IS INITIAL OR WA_TESTAR_01-IDVAGAO IS INITIAL.
              MESSAGE W129 WITH WA_TESTAR_01-NR_NF_PROPRIA WA_TESTAR_01-SERIE_PROPRIA.
              CONTINUE.
            ENDIF.
            """""""""""""""""""""""""""""""

            CLEAR: WA_RETORNO_EDT.
            MOVE-CORRESPONDING WA_TESTAR_01 TO WA_RETORNO_EDT.

            IF WA_TESTAR_01-DT_SAIDA IS NOT INITIAL.
              WA_RETORNO_EDT-LINE_COLOR = CS_LINE_COLOR_FINALIZADO.
            ENDIF.
            APPEND WA_RETORNO_EDT TO IT_RETORNO_EDT.
          ENDIF.
        ENDLOOP.
      ELSE.
        READ TABLE NODE_TABLE WITH KEY NODE_KEY = P_NODE INTO DATA(WA_NODE_TABLE).
        IF WA_NODE_TABLE-RELATKEY IS INITIAL.
          LOOP AT NODE_TABLE INTO DATA(WA_FILHO) WHERE RELATKEY EQ P_NODE.
            PERFORM ADD_RETORNO_ALV USING WA_FILHO-NODE_KEY P_TYPE.
          ENDLOOP.
        ENDIF.
      ENDIF.

    WHEN '2'.

      DATA: LC_DCL       TYPE ZDCL,
            LC_SERIEDCL	 TYPE ZSERIEDCL,
            LC_IDVAGAO   TYPE ZIDVAGAO,
            LC_CNPJFERRO TYPE ZCNPJFERRO.

      "DCL
      READ TABLE ITEM_TABLE_DOCS WITH KEY NODE_KEY = P_NODE ITEM_NAME = C_TREE_DCLS-COLUMN8  INTO DATA(WA_ITEM_DCL).
      READ TABLE ITEM_TABLE_DOCS WITH KEY NODE_KEY = P_NODE ITEM_NAME = C_TREE_DCLS-COLUMN9  INTO DATA(WA_ITEM_IDVAGAO).
      READ TABLE ITEM_TABLE_DOCS WITH KEY NODE_KEY = P_NODE ITEM_NAME = C_TREE_DCLS-COLUMN10 INTO DATA(WA_ITEM_SERIEDCL).
      READ TABLE ITEM_TABLE_DOCS WITH KEY NODE_KEY = P_NODE ITEM_NAME = C_TREE_DCLS-COLUMN11 INTO DATA(WA_ITEM_CNPJ).

      IF SY-SUBRC IS INITIAL.

        LC_DCL       = WA_ITEM_DCL-TEXT.
        LC_SERIEDCL  = WA_ITEM_SERIEDCL-TEXT.
        LC_IDVAGAO   = WA_ITEM_IDVAGAO-TEXT.
        LC_CNPJFERRO = WA_ITEM_CNPJ-TEXT.

        CHECK LC_DCL IS NOT INITIAL.
        CHECK LC_SERIEDCL IS NOT INITIAL.
        CHECK LC_IDVAGAO IS NOT INITIAL.
        CHECK LC_CNPJFERRO IS NOT INITIAL.
        "IdVagão

        LOOP AT IT_RETORNO INTO DATA(WA_TESTAR_02)
                           WHERE DCL       EQ LC_DCL
                             AND SERIEDCL  EQ LC_SERIEDCL
                             AND IDVAGAO   EQ LC_IDVAGAO
                             AND CNPJFERRO EQ LC_CNPJFERRO.

          READ TABLE IT_RETORNO_EDT WITH KEY DCL       = WA_TESTAR_02-DCL
                                             SERIEDCL  = WA_TESTAR_02-SERIEDCL
                                             IDVAGAO   = WA_TESTAR_02-IDVAGAO
                                             CNPJFERRO = WA_TESTAR_02-CNPJFERRO
                                             DOCNUM    = WA_TESTAR_02-DOCNUM TRANSPORTING NO FIELDS.
          IF SY-SUBRC IS NOT INITIAL.
            CLEAR: WA_RETORNO_EDT.
            MOVE-CORRESPONDING WA_TESTAR_02 TO WA_RETORNO_EDT.

            IF WA_TESTAR_02-DT_SAIDA IS NOT INITIAL.
              WA_RETORNO_EDT-LINE_COLOR = CS_LINE_COLOR_FINALIZADO.
            ENDIF.
            APPEND WA_RETORNO_EDT TO IT_RETORNO_EDT.
          ENDIF.

        ENDLOOP.

      ELSE.

        READ TABLE NODE_TABLE_DOCS WITH KEY NODE_KEY = P_NODE INTO WA_NODE_TABLE.
        IF WA_NODE_TABLE-RELATKEY IS INITIAL.
          LOOP AT NODE_TABLE_DOCS INTO WA_FILHO WHERE RELATKEY EQ P_NODE.
            PERFORM ADD_RETORNO_ALV USING WA_FILHO-NODE_KEY P_TYPE.
          ENDLOOP.
        ENDIF.
      ENDIF.

  ENDCASE.

ENDFORM.

CLASS LCL_ALV_TOOLBAR IMPLEMENTATION.

  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT TOOLBARMANAGER EXPORTING IO_ALV_GRID = IO_ALV_GRID.

  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    DATA: TY_TOOLBAR   TYPE STB_BUTTON.

*    "Separador
    TY_TOOLBAR-BUTN_TYPE = 3.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

    "021  Esconder Lateral
    "022  Mostrar Lateral

    "Marcar Todos os Documentos
    CLEAR: TY_TOOLBAR.
    TY_TOOLBAR-ICON      = ICON_ARROW_LEFT.
    TY_TOOLBAR-FUNCTION  = 'DEL'.
    TY_TOOLBAR-QUICKINFO = TEXT-021.
    TY_TOOLBAR-BUTN_TYPE = 0.
    IF CK_DOCKING_CREATE EQ ABAP_FALSE.
      TY_TOOLBAR-DISABLED  = ABAP_TRUE.
    ENDIF.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    "Marcar Todos os Documentos
    CLEAR: TY_TOOLBAR.
    TY_TOOLBAR-ICON      = ICON_ARROW_RIGHT.
    TY_TOOLBAR-FUNCTION  = 'ADD'.
    TY_TOOLBAR-QUICKINFO = TEXT-022.
    TY_TOOLBAR-BUTN_TYPE = 0.
    IF CK_DOCKING_CREATE EQ ABAP_TRUE.
      TY_TOOLBAR-DISABLED  = ABAP_TRUE.
    ENDIF.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    CALL METHOD TOOLBARMANAGER->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    CASE E_UCOMM.
      WHEN 'ADD'.
        CK_DOCKING_CREATE = ABAP_TRUE.
        PERFORM LIMPAR_TELA_0200 USING ABAP_FALSE.
        LEAVE TO SCREEN 0200.
      WHEN 'DEL'.
        CK_DOCKING_CREATE = ABAP_FALSE.
        PERFORM LIMPAR_TELA_0200 USING ABAP_FALSE.
        LEAVE TO SCREEN 0200.
    ENDCASE.

  ENDMETHOD. "zm_handle_user_command

ENDCLASS.

*&---------------------------------------------------------------------*
*&      Form  DATA_CHANGED
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ER_DATA_CHANGED  text
*----------------------------------------------------------------------*
FORM DATA_CHANGED USING  RR_DATA_CHANGED TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL.

  DATA: LC_QT_SAIDA  	     TYPE ZDE_QT_SAIDA,
        LC_DT_SAIDA	       TYPE ZDE_DT_SAIDA,
        OBJETO             TYPE REF TO ZCL_FERROVIARIO_SAIDA,
        GS_ALV_REFRES_COND TYPE LVC_S_STBL.

  GS_ALV_REFRES_COND-ROW = ABAP_TRUE.
  GS_ALV_REFRES_COND-COL = ABAP_TRUE.

  LOOP AT RR_DATA_CHANGED->MT_GOOD_CELLS INTO DATA(LS_MOD_CELLS).

    READ TABLE IT_RETORNO_EDT    ASSIGNING FIELD-SYMBOL(<FS_RETORNO>) INDEX LS_MOD_CELLS-ROW_ID.
    READ TABLE PLANILHA->POSICAO WITH KEY DCL       = <FS_RETORNO>-DCL
                                          SERIEDCL  = <FS_RETORNO>-SERIEDCL
                                          IDVAGAO   = <FS_RETORNO>-IDVAGAO
                                          CNPJFERRO = <FS_RETORNO>-CNPJFERRO TRANSPORTING NO FIELDS.
    READ TABLE PLANILHA->OBJETOS INDEX SY-TABIX INTO OBJETO.
    "PESO_CHEGADA
    "DT_CHEGADA
    CASE LS_MOD_CELLS-FIELDNAME.
      WHEN 'PESO_SAIDA'.

        CALL METHOD RR_DATA_CHANGED->GET_CELL_VALUE
          EXPORTING
            I_ROW_ID    = LS_MOD_CELLS-ROW_ID
            I_FIELDNAME = LS_MOD_CELLS-FIELDNAME
          IMPORTING
            E_VALUE     = LC_QT_SAIDA.

        IF LC_QT_SAIDA LT 0.
          CALL METHOD RR_DATA_CHANGED->ADD_PROTOCOL_ENTRY
            EXPORTING
              I_MSGID     = 'ZLES'
              I_MSGNO     = 124
              I_MSGTY     = 'E'
              I_FIELDNAME = LS_MOD_CELLS-FIELDNAME
              I_ROW_ID    = LS_MOD_CELLS-ROW_ID.
        ELSE.
          TRY .
              <FS_RETORNO>-QT_SAIDA =
              OBJETO->SET_QT_SAIDA(
                EXPORTING
                  I_BUKRS         =  <FS_RETORNO>-BUKRS
                  I_BRANCH        =  <FS_RETORNO>-BRANCH
                  I_NR_NF_PROPRIA =  <FS_RETORNO>-NR_NF_PROPRIA
                  I_SERIE_PROPRIA =  <FS_RETORNO>-SERIE_PROPRIA
                  I_QT_SAIDA      =  LC_QT_SAIDA ).

              <FS_RETORNO>-PESO_SAIDA   = LC_QT_SAIDA.
              <FS_RETORNO>-LINE_COLOR   = CS_LINE_COLOR_ALTERADO.

              "Registrar Total Vagão em Todos os Registros
              LOOP AT IT_RETORNO_EDT ASSIGNING FIELD-SYMBOL(<FS_RETORNO_EDT>)
                WHERE DCL       EQ <FS_RETORNO>-DCL
                  AND SERIEDCL  EQ <FS_RETORNO>-SERIEDCL
                  AND IDVAGAO   EQ <FS_RETORNO>-IDVAGAO
                  AND CNPJFERRO EQ <FS_RETORNO>-CNPJFERRO.
                <FS_RETORNO_EDT>-QT_SAIDA = <FS_RETORNO>-QT_SAIDA.
              ENDLOOP.

              CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
                EXPORTING
                  IS_STABLE      = GS_ALV_REFRES_COND
                  I_SOFT_REFRESH = ABAP_TRUE.

              CALL METHOD CL_GUI_CFW=>FLUSH.
            CATCH ZCX_FERROVIARIO_SAIDA INTO DATA(CX_FERROVIARIO_SAIDA).
              CALL METHOD RR_DATA_CHANGED->ADD_PROTOCOL_ENTRY
                EXPORTING
                  I_MSGID     = CX_FERROVIARIO_SAIDA->MSGID
                  I_MSGNO     = CX_FERROVIARIO_SAIDA->MSGNO
                  I_MSGTY     = CX_FERROVIARIO_SAIDA->MSGTY
                  I_MSGV1     = CX_FERROVIARIO_SAIDA->MSGV1
                  I_MSGV2     = CX_FERROVIARIO_SAIDA->MSGV2
                  I_MSGV3     = CX_FERROVIARIO_SAIDA->MSGV3
                  I_MSGV4     = CX_FERROVIARIO_SAIDA->MSGV4
                  I_FIELDNAME = LS_MOD_CELLS-FIELDNAME
                  I_ROW_ID    = LS_MOD_CELLS-ROW_ID.
          ENDTRY.

        ENDIF.

      WHEN 'DT_SAIDA'.

        CALL METHOD RR_DATA_CHANGED->GET_CELL_VALUE
          EXPORTING
            I_ROW_ID    = LS_MOD_CELLS-ROW_ID
            I_FIELDNAME = LS_MOD_CELLS-FIELDNAME
          IMPORTING
            E_VALUE     = LC_DT_SAIDA.

        IF LC_DT_SAIDA IS INITIAL OR LC_DT_SAIDA >= <FS_RETORNO>-DATA_EMISSAO.

          OBJETO->SET_DT_SAIDA( I_DT_SAIDA = LC_DT_SAIDA ).

          LOOP AT IT_RETORNO_EDT ASSIGNING <FS_RETORNO_EDT>
            WHERE DCL       EQ <FS_RETORNO>-DCL
              AND SERIEDCL  EQ <FS_RETORNO>-SERIEDCL
              AND IDVAGAO   EQ <FS_RETORNO>-IDVAGAO
              AND CNPJFERRO EQ <FS_RETORNO>-CNPJFERRO.
            <FS_RETORNO_EDT>-DT_SAIDA = LC_DT_SAIDA.
            <FS_RETORNO_EDT>-LINE_COLOR = CS_LINE_COLOR_ALTERADO.
          ENDLOOP.

          CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
            EXPORTING
              IS_STABLE      = GS_ALV_REFRES_COND
              I_SOFT_REFRESH = ABAP_TRUE.

          CALL METHOD CL_GUI_CFW=>FLUSH.

        ELSE.
          CALL METHOD RR_DATA_CHANGED->ADD_PROTOCOL_ENTRY
            EXPORTING
              I_MSGID     = 'ZLES'
              I_MSGNO     = 123
              I_MSGTY     = 'E'
              I_FIELDNAME = LS_MOD_CELLS-FIELDNAME
              I_ROW_ID    = LS_MOD_CELLS-ROW_ID.
        ENDIF.

    ENDCASE.

  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  IMPORTAR_DADOS_EXCEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM IMPORTAR_DADOS_EXCEL .

  DATA: ARQUIVO   TYPE REF TO ZCL_FERROVIARIO_ARQUIVO.

  CREATE OBJECT ARQUIVO.

  TRY.
      DATA(R_SAIDA) = ARQUIVO->GET_ARQUIVO_SAIDA_FERRO( ).

      CLEAR: IT_LACAMENTO.

      DELETE R_SAIDA WHERE DOCNUM IS INITIAL.

      LOOP AT R_SAIDA INTO DATA(WA_DCLS).
        CLEAR: WA_RETORNO_EDT.
        WA_RETORNO_EDT-DCL         = WA_DCLS-DCL.
        WA_RETORNO_EDT-SERIEDCL        = WA_DCLS-SERIEDCL.
        WA_RETORNO_EDT-IDVAGAO         = WA_DCLS-IDVAGAO.
        WA_RETORNO_EDT-CNPJFERRO       = WA_DCLS-CNPJFERRO.
        WA_RETORNO_EDT-BRANCH          = WA_DCLS-BRANCH.
        WA_RETORNO_EDT-BUKRS           = WA_DCLS-BUKRS.
        WA_RETORNO_EDT-NR_NF_PROPRIA   = WA_DCLS-NR_NF_PROPRIA.
        WA_RETORNO_EDT-COD_CLIENTE     = WA_DCLS-COD_CLIENTE.
        WA_RETORNO_EDT-CNPJCLIENTE     = WA_DCLS-CNPJCLIENTE.
        WA_RETORNO_EDT-DOCNUM          = WA_DCLS-DOCNUM.
        WA_RETORNO_EDT-PESO_SAIDA      = WA_DCLS-PESO_SAIDA.
        WA_RETORNO_EDT-DT_SAIDA        = WA_DCLS-DT_SAIDA.
        APPEND WA_RETORNO_EDT TO IT_LACAMENTO.
      ENDLOOP.

      "Monta os Processos por DCL/VAGAO/CNPJ
      DATA(IT_RETORNO_AUX) = IT_LACAMENTO[].
      DELETE IT_RETORNO_AUX WHERE DCL IS INITIAL.
      SORT IT_RETORNO_AUX BY DCL SERIEDCL IDVAGAO CNPJFERRO.
      DELETE ADJACENT DUPLICATES FROM IT_RETORNO_AUX COMPARING DCL SERIEDCL IDVAGAO CNPJFERRO.

      LOOP AT IT_RETORNO_AUX INTO WA_RETORNO_EDT.

        CLEAR: ZDE_FERRO_SAIDA_LAC.

        CREATE OBJECT LC_SAIDA.
        ZDE_FERRO_SAIDA_LAC-DCL        = WA_RETORNO_EDT-DCL.
        ZDE_FERRO_SAIDA_LAC-SERIEDCL   = WA_RETORNO_EDT-SERIEDCL.
        ZDE_FERRO_SAIDA_LAC-IDVAGAO    = WA_RETORNO_EDT-IDVAGAO.
        ZDE_FERRO_SAIDA_LAC-EMIT_CNPJ  = WA_RETORNO_EDT-CNPJFERRO.
        ZDE_FERRO_SAIDA_LAC-DTASAIDA   = WA_RETORNO_EDT-DT_SAIDA.
        LC_SAIDA->SET_VAGAO_SAIDA( CHANGING I_INFO_SAIDA = ZDE_FERRO_SAIDA_LAC ).

        LOOP AT IT_LACAMENTO INTO DATA(WA_RETORNO_1) WHERE DCL       EQ WA_RETORNO_EDT-DCL
                                                       AND SERIEDCL  EQ WA_RETORNO_EDT-SERIEDCL
                                                       AND IDVAGAO   EQ WA_RETORNO_EDT-IDVAGAO
                                                       AND CNPJFERRO EQ WA_RETORNO_EDT-CNPJFERRO.

          "Localizar Documento
          TRY .
              DATA(WA_SAIDA) = LC_SAIDA->ADD_NOTA_FISCAL( I_DOCNUM = WA_RETORNO_1-DOCNUM ).

              DATA(LC_QT_SAIDA_TOTAL) =
              LC_SAIDA->SET_QT_SAIDA(
                EXPORTING
                  I_BUKRS         = WA_SAIDA-BUKRS
                  I_BRANCH        = WA_SAIDA-BRANCH
                  I_NR_NF_PROPRIA = WA_SAIDA-NR_NF_PROPRIA
                  I_SERIE_PROPRIA = WA_SAIDA-SERIE_PROPRIA
                  I_QT_SAIDA      = WA_RETORNO_1-PESO_SAIDA ).

              LC_SAIDA->SET_DT_SAIDA( I_DT_SAIDA = WA_RETORNO_1-DT_SAIDA ).

              WA_SAIDA-PESO_SAIDA   = WA_RETORNO_1-PESO_SAIDA.
              WA_SAIDA-PESO_ORIGEM  = WA_SAIDA-PESO_ORIGEM.
              WA_SAIDA-EMIT_RSOCIAL = ZDE_FERRO_SAIDA_LAC-NAME1.
              WA_SAIDA-QT_SAIDA     = LC_QT_SAIDA_TOTAL.
              WA_SAIDA-DT_SAIDA     = WA_RETORNO_1-DT_SAIDA.
              APPEND WA_SAIDA TO IT_RETORNO.

              LOOP AT IT_RETORNO ASSIGNING FIELD-SYMBOL(<FS_RETORNO>) WHERE DCL       EQ WA_SAIDA-DCL
                                                                        AND CNPJFERRO EQ WA_SAIDA-CNPJFERRO
                                                                        AND SERIEDCL  EQ WA_SAIDA-SERIEDCL
                                                                        AND IDVAGAO   EQ WA_SAIDA-IDVAGAO
                                                                        AND DOCNUM    NE WA_SAIDA-DOCNUM.
                <FS_RETORNO>-QT_SAIDA = LC_QT_SAIDA_TOTAL.
                <FS_RETORNO>-DT_SAIDA = WA_RETORNO_1-DT_SAIDA.
              ENDLOOP.

            CATCH ZCX_FERROVIARIO_SAIDA INTO DATA(CX_FERROVIARIO_SAIDA).
              CX_FERROVIARIO_SAIDA->PUBLISHED_ERRO( I_MSGTY = 'W' ).
              DATA(CK_ERRO) = ABAP_TRUE.
          ENDTRY.
        ENDLOOP.

        IF CK_ERRO EQ ABAP_TRUE.
          DELETE IT_RETORNO WHERE DCL  EQ WA_SAIDA-DCL
                              AND SERIEDCL  EQ WA_SAIDA-SERIEDCL
                              AND IDVAGAO   EQ WA_SAIDA-IDVAGAO
                              AND CNPJFERRO EQ WA_SAIDA-CNPJFERRO.
          CLEAR: CK_ERRO.
        ENDIF.

        CLEAR: LC_SAIDA.
      ENDLOOP.


      CK_DOCKING_CREATE = ABAP_TRUE.

*      CREATE OBJECT repository.
*      repository->ferroviario_saida( ).

      PERFORM GERAR_PLANILHA_VAGOES USING ABAP_TRUE.
      CK_IMPORTANDO_ARQUIVO = ABAP_TRUE.

      CALL SCREEN 0200.

*      IF repository IS NOT INITIAL.
*        repository->free( ).
*        CLEAR: repository.
*      ENDIF.

    CATCH ZCX_ARQUIVO INTO DATA(CX_ARQUIVO).
      CX_ARQUIVO->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
  ENDTRY.

  CK_IMPORTANDO_ARQUIVO = ABAP_FALSE.
  CLEAR: ARQUIVO.

ENDFORM.
