FUNCTION Z_LES_BUSCA_SALDO_FERROVIARIO.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(NR_NF) TYPE  ZLEST0035-NR_NF
*"     REFERENCE(SERIE_NF) TYPE  ZLEST0035-SERIE_NF
*"     REFERENCE(CNPJ) TYPE  ZLEST0035-CNPJ
*"     REFERENCE(WERKS) TYPE  ZLEST0035-WERKS OPTIONAL
*"     REFERENCE(I_CHAVE_NFE) TYPE  ZDE_CHAVE_DOC_E OPTIONAL
*"     REFERENCE(I_FORNECEDOR_SERVICO) TYPE  LIFNR OPTIONAL
*"     REFERENCE(I_DOCNUM) TYPE  J_1BDOCNUM OPTIONAL
*"  EXPORTING
*"     REFERENCE(SALDO) TYPE  ZLEST0035-SALDO
*"     REFERENCE(QTD_CHEG) TYPE  ZLEST0035-QTD_CHEG
*"     REFERENCE(QTD_UTILIZADA) TYPE  ZLEST0035-QTD_CHEG
*"  TABLES
*"      TE_ZLEST0045 STRUCTURE  ZLEST0045 OPTIONAL
*"      TE_ZLEST0019 STRUCTURE  ZLEST0019 OPTIONAL
*"      TE_VTTK STRUCTURE  VTTK OPTIONAL
*"      TE_LIBERACAO STRUCTURE  ZIB_CTE_DIST_LBP OPTIONAL
*"  EXCEPTIONS
*"      QTD_CHEG_NOT_FOUND
*"----------------------------------------------------------------------

  DATA: BEGIN OF T_0019 OCCURS 0.
          INCLUDE TYPE ZLEST0019.
          DATA: NR_DESPACHO TYPE ZLEST0004-NR_DESPACHO,
        END OF T_0019.

  DATA: T_0045       TYPE TABLE OF ZLEST0045 WITH HEADER LINE,
        T_0044       TYPE TABLE OF ZLEST0044 WITH HEADER LINE,
        T_0003       TYPE TABLE OF ZLEST0003 WITH HEADER LINE,
        T_0004       TYPE TABLE OF ZLEST0004 WITH HEADER LINE,
        T_0006       TYPE TABLE OF ZLEST0006 WITH HEADER LINE,
        T_VTTK       TYPE TABLE OF VTTK      WITH HEADER LINE,
        WA_LIBERACAO TYPE ZIB_CTE_DIST_LBP,
        WL_0035      TYPE ZLEST0035,
        WA_ZLEST0133 TYPE ZLEST0133,
        WA_ZLEST0039 TYPE ZLEST0039,
        LC_DOCNUM	   TYPE J_1BDOCNUM,
        LC_WERKS     TYPE WERKS_D.

  RANGES: R_WERKS FOR ZLEST0035-WERKS.

  CLEAR: R_WERKS[].

  IF WERKS IS NOT INITIAL.
    R_WERKS-SIGN   = 'I'.
    R_WERKS-OPTION = 'EQ'.
    R_WERKS-LOW    = WERKS.
    APPEND R_WERKS.
  ENDIF.

  CLEAR: WA_ZLEST0133.

  IF I_FORNECEDOR_SERVICO IS NOT INITIAL.
    SELECT SINGLE * INTO WA_ZLEST0133
      FROM ZLEST0133
     WHERE LIFNR EQ I_FORNECEDOR_SERVICO.
  ENDIF.

  IF WA_ZLEST0133 IS INITIAL.
    "1  Peso Físico
    "2  Peso Fiscal
    WA_ZLEST0133-TP_PESO_LIMITE = '1'.
  ENDIF.

  CLEAR: SALDO, QTD_CHEG, WL_0035, QTD_UTILIZADA, LC_DOCNUM, LC_WERKS.
  REFRESH: T_0045, T_0044, T_VTTK, T_0003, T_0019, T_0006, T_0003, T_0004.

  CASE WA_ZLEST0133-TP_PESO_LIMITE.
    WHEN '1'.

      SELECT SINGLE * "qtd_cheg
        FROM ZLEST0035
         INTO WL_0035"saldo
          WHERE NR_NF    EQ NR_NF "chave+25(9)
            AND SERIE_NF EQ SERIE_NF "chave+22(3)
            AND CNPJ     EQ CNPJ  "chave+6(14).
            AND WERKS    IN R_WERKS.

      IF SY-SUBRC IS NOT INITIAL.
*-CS1090642-#RIMINI-05.10.2023-BEGIN
        SELECT SINGLE stcd1 FROM j_1bbranch
                 INTO @DATA(lv_stcd1)
                WHERE branch IN @r_werks.

        IF sy-subrc IS INITIAL.
          SELECT SINGLE * FROM zlest0035
                   INTO wl_0035
                  WHERE nr_nf    EQ nr_nf
                    AND serie_nf EQ serie_nf
                    AND cnpj     EQ lv_stcd1
                    AND werks    IN r_werks.

          IF sy-subrc IS NOT INITIAL.
            RAISE QTD_CHEG_NOT_FOUND.

          ENDIF. "SELECT SINGLE * FROM zlest0035
        ELSE.
*-CS1090642-#RIMINI-05.10.2023-END
          RAISE QTD_CHEG_NOT_FOUND.
*-CS1090642-#RIMINI-05.10.2023-BEGIN
        ENDIF. "SELECT SINGLE stcd1 FROM J_1BBRANCH
*-CS1090642-#RIMINI-05.10.2023-END
      ENDIF.

      LC_DOCNUM = WL_0035-DOCNUM.
      LC_WERKS  = WL_0035-WERKS.

      SALDO = WL_0035-QTD_CHEG.
    WHEN '2'.

      SELECT SINGLE * INTO WA_ZLEST0039 FROM ZLEST0039 WHERE DOCNUM = I_DOCNUM.

      IF SY-SUBRC IS NOT INITIAL.
        RAISE QTD_CHEG_NOT_FOUND.
      ENDIF.

      LC_DOCNUM = WA_ZLEST0039-DOCNUM.
      LC_WERKS  = WA_ZLEST0039-WERKS.

      SALDO = WA_ZLEST0039-PESOSAIDA.
  ENDCASE.

  QTD_CHEG = SALDO.

**> busca saldo do processo antigo
  SELECT *
    FROM ZLEST0019
    INTO TABLE T_0019
     WHERE NFENUM EQ NR_NF "chave+25(9)
       AND IDINTER EQ 'L2'
       AND BRANCH  EQ LC_WERKS.

  IF SY-SUBRC IS INITIAL.
    LOOP AT T_0019.
      MOVE T_0019-DCL TO T_0019-NR_DESPACHO.
      MODIFY T_0019.
    ENDLOOP.

    SELECT *
      FROM ZLEST0004
      INTO TABLE T_0004
        FOR ALL ENTRIES IN T_0019
         WHERE NR_DESPACHO EQ T_0019-NR_DESPACHO
           AND SERIE_DESPACHO EQ T_0019-SERIEDCL
           AND CGC_REMETENTE  EQ T_0019-CNPJCLIENTE.

    IF SY-SUBRC IS INITIAL.

      IF I_DOCNUM IS NOT INITIAL.
        SELECT SINGLE * INTO @DATA(WA_J_1BNFLIN)
          FROM J_1BNFLIN
         WHERE DOCNUM EQ @I_DOCNUM.
      ENDIF.

      IF WA_J_1BNFLIN IS NOT INITIAL AND WA_J_1BNFLIN-REFTYP  EQ 'BI'.
        SELECT *
          FROM ZLEST0006
          INTO TABLE T_0006
          WHERE NR_FATURA EQ WA_J_1BNFLIN-REFKEY(10)
            AND STATUS    EQ 'B'.
      ELSE.
        SELECT *
          FROM ZLEST0006
          INTO TABLE T_0006
           FOR ALL ENTRIES IN T_0004
            WHERE NR_FATURA EQ T_0004-NR_FATURA
              AND STATUS    EQ 'B'.
      ENDIF.

      IF SY-SUBRC IS INITIAL.
        SELECT *
          FROM VTTK
          INTO TABLE T_VTTK
           FOR ALL ENTRIES IN T_0006
           WHERE TKNUM EQ T_0006-NR_TRANS.
      ENDIF.
    ENDIF.
  ENDIF.
**<
  SELECT *
    FROM ZLEST0045
    INTO TABLE T_0045
     WHERE DOCNUM EQ LC_DOCNUM. "chave.

  IF SY-SUBRC IS INITIAL.
    SELECT *
      FROM ZLEST0044
      INTO TABLE T_0044
      FOR ALL ENTRIES IN T_0045
       WHERE CHAVE_CTE EQ T_0045-CHAVE_CTE
         AND NR_TRANS  NE SPACE.

    IF SY-SUBRC IS INITIAL.
      SELECT *
        FROM VTTK
        APPENDING TABLE T_VTTK
         FOR ALL ENTRIES IN T_0044
         WHERE TKNUM EQ T_0044-NR_TRANS
           AND VSART EQ '02'.
    ENDIF.
  ENDIF.

  SORT: T_0044 BY CHAVE_CTE,
        T_VTTK BY TKNUM,
        T_0004 BY NR_DESPACHO,
        T_0006 BY NR_FATURA.

  LOOP AT T_0045.
    READ TABLE T_0044
      WITH KEY CHAVE_CTE = T_0045-CHAVE_CTE
                  BINARY SEARCH.

    IF SY-SUBRC IS INITIAL.
      READ TABLE T_VTTK
        WITH KEY TKNUM = T_0044-NR_TRANS
                 BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        SUBTRACT T_0045-PESO_RATEADO FROM SALDO.
        ADD T_0045-PESO_RATEADO TO QTD_UTILIZADA.
      ENDIF.
    ENDIF.
  ENDLOOP.

  LOOP AT T_0019.
    READ TABLE T_0004
      WITH KEY NR_DESPACHO = T_0019-NR_DESPACHO
                    BINARY SEARCH.
    IF SY-SUBRC IS INITIAL.
      READ TABLE T_0006
        WITH KEY NR_FATURA = T_0004-NR_FATURA
                     BINARY SEARCH.

      IF SY-SUBRC IS INITIAL.
        READ TABLE T_VTTK
          WITH KEY TKNUM = T_0006-NR_TRANS
                   BINARY SEARCH.

        IF SY-SUBRC IS INITIAL.
          SUBTRACT T_0019-PESODVAGAO FROM SALDO.
          ADD T_0019-PESODVAGAO TO QTD_UTILIZADA.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.

  "Caso exista liberação de volume, esta liberação deve voltar volume,
  "--> se positivo deve aumentar saldo disponível
  "--> se negativo deve diminuir saldo disponível
  IF I_CHAVE_NFE IS NOT INITIAL.
    SELECT * INTO TABLE TE_LIBERACAO
      FROM ZIB_CTE_DIST_LBP
     WHERE N55_CHAVE_ACESSO EQ I_CHAVE_NFE.

    LOOP AT TE_LIBERACAO INTO WA_LIBERACAO.
      "Recalcular Quantidade Aprovada
      "Quantidade da CT-e - Quantidade de NF-e (Valor da CT-e é calculado com base na quantidade da CT-e)
      DATA(SALDO_NOTA_VINCULADO) = ( WA_LIBERACAO-QT_CARGA_CTE - WA_LIBERACAO-QT_NFE ) * -1.
      ADD SALDO_NOTA_VINCULADO TO SALDO.
    ENDLOOP.

  ENDIF.

  TE_VTTK[]      = T_VTTK[].
  TE_ZLEST0045[] = T_0045[].
  TE_ZLEST0019[] = T_0019[].
ENDFUNCTION.
