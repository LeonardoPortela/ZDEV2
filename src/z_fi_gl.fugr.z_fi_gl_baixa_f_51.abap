FUNCTION Z_FI_GL_BAIXA_F_51.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(P_BLART) TYPE  BLART OPTIONAL
*"     REFERENCE(P_TP_COMPENSACAO) TYPE  ZCHAR02 OPTIONAL
*"     REFERENCE(P_UMSKZ) TYPE  CHAR10 OPTIONAL
*"     REFERENCE(P_DESCONTO) TYPE  DMBTR OPTIONAL
*"     REFERENCE(P_FORMA_PAG_RESIDUAL) TYPE  SCHZW_BSEG OPTIONAL
*"     REFERENCE(P_COTACAO_BAIXA) TYPE  ZDE_TAX_CAMBIO_DT_DOC DEFAULT 0
*"  TABLES
*"      IT_COMPENSAR STRUCTURE  ZDE_DOC_VALOR
*"      IT_RETORNO STRUCTURE  BDCMSGCOLL OPTIONAL
*"      IT_BKPF_RET STRUCTURE  ZDE_DOC_VALOR OPTIONAL
*"      IT_BKPF_RET2 STRUCTURE  BAPIRET2 OPTIONAL
*"  EXCEPTIONS
*"      ERRO_BLOQUEIO
*"----------------------------------------------------------------------
  DATA: IT_MESSAGE          LIKE BDCMSGCOLL OCCURS 0 WITH HEADER LINE,
        WA_RETORNO          TYPE BDCMSGCOLL,
        IT_BSEG             TYPE TABLE OF BSEG WITH HEADER LINE,
        IT_BSEG_AUX         TYPE TABLE OF BSEG WITH HEADER LINE,
        IT_BSEG_AUX2        TYPE TABLE OF BSEG WITH HEADER LINE,
        LC_ITEM_SHDB        TYPE BUZEI,
        TI_BDCDATA          TYPE TABLE OF BDCDATA WITH HEADER LINE,
        LC_DATE_TX          TYPE CHAR08,
        LC_DATE_VL          TYPE CHAR16,
        LC_DOC_STR          TYPE ZCHAR02,
        CK_RESIDUAL         TYPE CHAR01,
        CK_RESIDUAL_ADT     TYPE CHAR01,
        SL_RETURN           TYPE BAPIRET2,
        IT_LFB1             TYPE TABLE OF LFB1 WITH HEADER LINE,
        IT_TOTALIZA         TYPE TABLE OF ZDE_TOTALIZA_DOC WITH HEADER LINE,
        LC_DOCUMENTO        TYPE I,
        CK_CONTINUAR        TYPE C LENGTH 1,
        LC_GSBER            TYPE GSBER,
        LC_MODE             TYPE CHAR01,
        LC_DMBTR            TYPE DMBTR,
        LC_DMBTR_RES        TYPE DMBTR,
        LC_VALOR_PAYMENTS_A TYPE DMBTR,
        LC_VALOR_PAYMENTS_B TYPE DMBTR,
        LC_VALOR_PAYMENTS_C TYPE DMBTR,
        LC_VALOR_PAYMENTS_D TYPE DMBTR,
        LC_VALOR_VARIACAO_A TYPE DMBTR,
        LC_VALOR_VARIACAO_B TYPE DMBTR,
        LC_VALOR_VARIACAO_C TYPE DMBTR,
        LC_VALOR_VARIACAO_D TYPE DMBTR,
        LC_BKPF_RET         TYPE ZDE_DOC_VALOR,
        I                   TYPE I,
        WA_USR01            TYPE USR01,
        LC_PATTERN          TYPE C LENGTH 1,
        LC_SUBSTITUTE       TYPE C LENGTH 1.

  DATA: WA_MOEDAS     TYPE X001,
        WA_T001_WAERS TYPE T001-WAERS.

  SELECT SINGLE * INTO WA_USR01 FROM USR01 WHERE BNAME EQ SY-UNAME.

*   1.234.567,89
* X	1,234,567.89
* Y	1 234 567,89

  CASE WA_USR01-DCPFM.
    WHEN SPACE.
      LC_PATTERN    = '.'.
      LC_SUBSTITUTE = ','.
    WHEN 'X'.
      LC_PATTERN    = ','.
      LC_SUBSTITUTE = '.'.
    WHEN 'Y'.
      LC_PATTERN    = ' '.
      LC_SUBSTITUTE = ','.
  ENDCASE.

  FIELD-SYMBOLS <DSCOMPE> TYPE ZDE_DOC_VALOR.
  FIELD-SYMBOLS <DSTOTA>  TYPE ZDE_TOTALIZA_DOC.
  FIELD-SYMBOLS <FS_BSEG> TYPE BSEG.

  CLEAR: IT_BKPF_RET[], IT_TOTALIZA[].

  CHECK IT_COMPENSAR[] IS NOT INITIAL.

  CALL FUNCTION 'FAGL_GET_BSEG_FOR_ALL_ENTRIES'
    EXPORTING IT_FOR_ALL_ENTRIES = IT_COMPENSAR
              I_WHERE_CLAUSE = |BUKRS EQ IT_FOR_ALL_ENTRIES-BUKRS AND BELNR EQ IT_FOR_ALL_ENTRIES-BELNR AND GJAHR EQ IT_FOR_ALL_ENTRIES-GJAHR AND BUZEI EQ IT_FOR_ALL_ENTRIES-BUZEI|
    IMPORTING ET_BSEG = IT_BSEG[]
    EXCEPTIONS NOT_FOUND = 1.
IF SY-SUBRC = 0 AND LINES( IT_BSEG[] ) > 0.
  MOVE-CORRESPONDING IT_BSEG[] TO IT_BSEG[].
  SY-DBCNT = LINES( IT_BSEG[] ).
ELSE.
  SY-SUBRC = 4.
  SY-DBCNT = 0.
ENDIF.


  IF IT_BSEG[] IS NOT INITIAL.
    CALL FUNCTION 'FAGL_GET_BSEG_FOR_ALL_ENTRIES'
    EXPORTING IT_FOR_ALL_ENTRIES = IT_BSEG[]
              I_WHERE_CLAUSE =
 |BUKRS EQ IT_FOR_ALL_ENTRIES-BUKRS AND BELNR EQ IT_FOR_ALL_ENTRIES-BELNR AND GJAHR EQ IT_FOR_ALL_ENTRIES-GJAHR AND BUZEI NE IT_FOR_ALL_ENTRIES-BUZEI AND KUNNR EQ IT_FOR_ALL_ENTRIES-KUNNR AND KUNNR NE SPACE AND AUGBL EQ SPACE|
    IMPORTING ET_BSEG = IT_BSEG_AUX[]
    EXCEPTIONS NOT_FOUND = 1.
IF SY-SUBRC = 0 AND LINES( IT_BSEG_AUX[] ) > 0.
  MOVE-CORRESPONDING IT_BSEG_AUX[] TO IT_BSEG_AUX[].
  SY-DBCNT = LINES( IT_BSEG_AUX[] ).
ELSE.
  SY-SUBRC = 4.
  SY-DBCNT = 0.
ENDIF.


    DATA ETL105C4R205 TYPE TABLE OF BSEG.
CALL FUNCTION 'FAGL_GET_BSEG_FOR_ALL_ENTRIES'
    EXPORTING IT_FOR_ALL_ENTRIES = IT_BSEG[]
              I_WHERE_CLAUSE =
 |BUKRS EQ IT_FOR_ALL_ENTRIES-BUKRS AND BELNR EQ IT_FOR_ALL_ENTRIES-BELNR AND GJAHR EQ IT_FOR_ALL_ENTRIES-GJAHR AND BUZEI NE IT_FOR_ALL_ENTRIES-BUZEI AND LIFNR EQ IT_FOR_ALL_ENTRIES-LIFNR AND LIFNR NE SPACE AND AUGBL EQ SPACE|
    IMPORTING ET_BSEG = ETL105C4R205
    EXCEPTIONS NOT_FOUND = 1.
IF SY-SUBRC = 0 AND LINES( ETL105C4R205 ) > 0.
  APPEND LINES OF ETL105C4R205 TO IT_BSEG_AUX.
  SY-DBCNT = LINES( ETL105C4R205 ).
ELSE.
  SY-SUBRC = 4.
  SY-DBCNT = 0.
ENDIF.

  ENDIF.

  IF IT_BSEG_AUX[] IS NOT INITIAL.
    SORT IT_BSEG_AUX BY BUKRS BELNR GJAHR BUZEI.
    LOOP AT IT_BSEG.
      READ TABLE IT_BSEG_AUX WITH KEY BUKRS = IT_BSEG-BUKRS
                                      BELNR = IT_BSEG-BELNR
                                      GJAHR = IT_BSEG-GJAHR
                                      BUZEI = IT_BSEG-BUZEI.
      IF SY-SUBRC IS INITIAL.
        DELETE IT_BSEG_AUX INDEX SY-TABIX.
      ENDIF.
    ENDLOOP.
  ENDIF.

  SORT IT_BSEG BY BUKRS BELNR GJAHR BUZEI.

  CHECK IT_BSEG[] IS NOT INITIAL.

  IF P_TP_COMPENSACAO NE '04'. "Diferente de "Transferência c/ Compensação"
    LOOP AT IT_BSEG.
      IF IT_BSEG-ZLSPR IS NOT INITIAL.
        MESSAGE E035(ZFI) WITH IT_BSEG-BELNR RAISING ERRO_BLOQUEIO.
      ENDIF.
    ENDLOOP.
  ENDIF.

  SELECT * INTO TABLE IT_LFB1
    FROM LFB1
     FOR ALL ENTRIES IN IT_BSEG
   WHERE LIFNR EQ IT_BSEG-LIFNR
     AND BUKRS EQ IT_BSEG-BUKRS.

  LOOP AT IT_LFB1.
    IF IT_LFB1-ZAHLS IS NOT INITIAL.
      MESSAGE E671(F5) WITH IT_LFB1-LIFNR IT_LFB1-ZAHLS RAISING ERRO_BLOQUEIO.
    ENDIF.
  ENDLOOP.

  "Totalizar """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  SORT IT_COMPENSAR BY PARID.
  LC_DOCUMENTO = 0.

  LOOP AT IT_COMPENSAR ASSIGNING <DSCOMPE>.

    CLEAR: LC_GSBER, CK_CONTINUAR.

    READ TABLE IT_BSEG WITH KEY BUKRS = IT_COMPENSAR-BUKRS
                                BELNR = IT_COMPENSAR-BELNR
                                GJAHR = IT_COMPENSAR-GJAHR
                                BUZEI = IT_COMPENSAR-BUZEI BINARY SEARCH.
    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ELSE.
      LC_GSBER = IT_BSEG-GSBER.
    ENDIF.

    "Somente concatenar um no contador, não pode passar de 10
    CLEAR: IT_TOTALIZA.
    LOOP AT IT_TOTALIZA ASSIGNING <DSTOTA>
         WHERE KONTO     EQ <DSCOMPE>-KONTO     "Nº conta ou matchcode para conta a ser contabilizada
           AND BUKRS     EQ <DSCOMPE>-BUKRS     "Empresa
           AND GSBER     EQ LC_GSBER            "Divisão
           AND PARID     EQ <DSCOMPE>-PARID     "Identificação do parceiro (cliente, fornecedor, loc.negócio)
           AND KOART     EQ <DSCOMPE>-KOART     "Tipo de conta
           AND WAERS     EQ <DSCOMPE>-WAERS     "Código da moeda
           AND BUDAT     EQ <DSCOMPE>-BUDAT     "Data de Lançamento
           AND BLDAT     EQ <DSCOMPE>-BLDAT     "Data do Documento
           AND WAERS_B   EQ <DSCOMPE>-WAERS_B   "Moeda do Pagamento
           AND WWERT     EQ <DSCOMPE>-WWERT     "Data de Conversão de Moedas
           AND SAKNR_VARIACAO_B EQ <DSCOMPE>-SAKNR_VARIACAO_B. "Conta da Variação de Câmbio

      CK_CONTINUAR = 'X'.
      ADD 1 TO <DSTOTA>-CONTADOR.
      IF ( <DSCOMPE>-KOART EQ 'D' AND <DSCOMPE>-SHKZG EQ 'S' ) OR "Cliente/Debito
         ( <DSCOMPE>-KOART EQ 'K' AND <DSCOMPE>-SHKZG EQ 'H' ).   "Fornecedor/Credito

        ADD <DSCOMPE>-DMBTR            TO <DSTOTA>-DMBTR.
        ADD <DSCOMPE>-DMBTR_RES        TO <DSTOTA>-DMBTR_RES.
        ADD <DSCOMPE>-VALOR_PAYMENTS_A TO <DSTOTA>-VALOR_PAYMENTS_A.
        ADD <DSCOMPE>-VALOR_PAYMENTS_B TO <DSTOTA>-VALOR_PAYMENTS_B.
        ADD <DSCOMPE>-VALOR_PAYMENTS_C TO <DSTOTA>-VALOR_PAYMENTS_C.
        ADD <DSCOMPE>-VALOR_PAYMENTS_D TO <DSTOTA>-VALOR_PAYMENTS_D.
        ADD <DSCOMPE>-VALOR_VARIACAO_A TO <DSTOTA>-VALOR_VARIACAO_A.
        ADD <DSCOMPE>-VALOR_VARIACAO_B TO <DSTOTA>-VALOR_VARIACAO_B.
        ADD <DSCOMPE>-VALOR_VARIACAO_C TO <DSTOTA>-VALOR_VARIACAO_C.
        ADD <DSCOMPE>-VALOR_VARIACAO_D TO <DSTOTA>-VALOR_VARIACAO_D.

      ELSEIF ( <DSCOMPE>-KOART EQ 'D' AND <DSCOMPE>-SHKZG EQ 'H' ) OR "Cliente/Credito
             ( <DSCOMPE>-KOART EQ 'K' AND <DSCOMPE>-SHKZG EQ 'S' ).   "Fornecedor/Debito

        LC_DMBTR            = <DSCOMPE>-DMBTR            * -1.
        LC_DMBTR_RES        = <DSCOMPE>-DMBTR_RES        * -1.
        LC_VALOR_PAYMENTS_A = <DSCOMPE>-VALOR_PAYMENTS_A * -1.
        LC_VALOR_PAYMENTS_B = <DSCOMPE>-VALOR_PAYMENTS_B * -1.
        LC_VALOR_PAYMENTS_C = <DSCOMPE>-VALOR_PAYMENTS_C * -1.
        LC_VALOR_PAYMENTS_D = <DSCOMPE>-VALOR_PAYMENTS_D * -1.

        LC_VALOR_VARIACAO_A = <DSCOMPE>-VALOR_VARIACAO_A * -1.
        LC_VALOR_VARIACAO_B = <DSCOMPE>-VALOR_VARIACAO_B * -1.
        LC_VALOR_VARIACAO_C = <DSCOMPE>-VALOR_VARIACAO_C * -1.
        LC_VALOR_VARIACAO_D = <DSCOMPE>-VALOR_VARIACAO_D * -1.

        ADD LC_DMBTR            TO <DSTOTA>-DMBTR.
        ADD LC_DMBTR_RES        TO <DSTOTA>-DMBTR_RES.
        ADD LC_VALOR_PAYMENTS_A TO <DSTOTA>-VALOR_PAYMENTS_A.
        ADD LC_VALOR_PAYMENTS_B TO <DSTOTA>-VALOR_PAYMENTS_B.
        ADD LC_VALOR_PAYMENTS_C TO <DSTOTA>-VALOR_PAYMENTS_C.
        ADD LC_VALOR_PAYMENTS_D TO <DSTOTA>-VALOR_PAYMENTS_D.

        ADD LC_VALOR_VARIACAO_A TO <DSTOTA>-VALOR_VARIACAO_A.
        ADD LC_VALOR_VARIACAO_B TO <DSTOTA>-VALOR_VARIACAO_B.
        ADD LC_VALOR_VARIACAO_C TO <DSTOTA>-VALOR_VARIACAO_C.
        ADD LC_VALOR_VARIACAO_D TO <DSTOTA>-VALOR_VARIACAO_D.

      ENDIF.
      <DSCOMPE>-DOCUMENTO = <DSTOTA>-DOCUMENTO.

      IF <DSTOTA>-ZFBDT_RES IS INITIAL AND <DSCOMPE>-ZFBDT_RES IS NOT INITIAL.
        <DSTOTA>-ZFBDT_RES = <DSCOMPE>-ZFBDT_RES.
      ENDIF.

      IF <DSTOTA>-SGTXT IS INITIAL AND <DSCOMPE>-SGTXT IS NOT INITIAL.
        <DSTOTA>-SGTXT = <DSCOMPE>-SGTXT.
      ENDIF.

      IF <DSTOTA>-AUGTX IS INITIAL AND <DSCOMPE>-AUGTX IS NOT INITIAL.
        <DSTOTA>-AUGTX = <DSCOMPE>-AUGTX.
      ENDIF.

    ENDLOOP.

    "Cria um novo documento
    IF CK_CONTINUAR NE 'X'.
      ADD 1 TO LC_DOCUMENTO.
      MOVE LC_DOCUMENTO TO <DSCOMPE>-DOCUMENTO.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = <DSCOMPE>-DOCUMENTO
        IMPORTING
          OUTPUT = <DSCOMPE>-DOCUMENTO.
      IT_TOTALIZA-KONTO     = <DSCOMPE>-KONTO.
      IT_TOTALIZA-BUKRS     = <DSCOMPE>-BUKRS.
      IT_TOTALIZA-GSBER     = LC_GSBER.
      IT_TOTALIZA-PARID     = <DSCOMPE>-PARID.
      IT_TOTALIZA-KOART     = <DSCOMPE>-KOART.

      IF IT_TOTALIZA-ZFBDT_RES IS INITIAL AND <DSCOMPE>-ZFBDT_RES IS NOT INITIAL.
        IT_TOTALIZA-ZFBDT_RES = <DSCOMPE>-ZFBDT_RES.
      ENDIF.

      IT_TOTALIZA-WAERS            = <DSCOMPE>-WAERS.
      IT_TOTALIZA-BUDAT            = <DSCOMPE>-BUDAT.
      IT_TOTALIZA-BLDAT            = <DSCOMPE>-BLDAT.
      IT_TOTALIZA-DOCUMENTO        = <DSCOMPE>-DOCUMENTO.
      IT_TOTALIZA-SGTXT            = <DSCOMPE>-SGTXT.
      IT_TOTALIZA-AUGTX            = <DSCOMPE>-AUGTX.
      IT_TOTALIZA-WWERT            = <DSCOMPE>-WWERT.

      IT_TOTALIZA-VALOR_PAYMENTS_A = <DSCOMPE>-VALOR_PAYMENTS_A.
      IT_TOTALIZA-VALOR_PAYMENTS_B = <DSCOMPE>-VALOR_PAYMENTS_B.
      IT_TOTALIZA-VALOR_PAYMENTS_C = <DSCOMPE>-VALOR_PAYMENTS_C.
      IT_TOTALIZA-VALOR_PAYMENTS_D = <DSCOMPE>-VALOR_PAYMENTS_D.

      IT_TOTALIZA-VALOR_VARIACAO_A = <DSCOMPE>-VALOR_VARIACAO_A.
      IT_TOTALIZA-VALOR_VARIACAO_B = <DSCOMPE>-VALOR_VARIACAO_B.
      IT_TOTALIZA-VALOR_VARIACAO_C = <DSCOMPE>-VALOR_VARIACAO_C.
      IT_TOTALIZA-VALOR_VARIACAO_D = <DSCOMPE>-VALOR_VARIACAO_D.
      IT_TOTALIZA-WAERS_B          = <DSCOMPE>-WAERS_B.
      IT_TOTALIZA-SAKNR_VARIACAO_B = <DSCOMPE>-SAKNR_VARIACAO_B.

      IF ( <DSCOMPE>-KOART EQ 'D' AND <DSCOMPE>-SHKZG EQ 'S' ) OR "Cliente/Debito
         ( <DSCOMPE>-KOART EQ 'K' AND <DSCOMPE>-SHKZG EQ 'H' ).   "Fornecedor/Credito

        IT_TOTALIZA-DMBTR            = <DSCOMPE>-DMBTR.
        IT_TOTALIZA-DMBTR_RES        = <DSCOMPE>-DMBTR_RES.
        IT_TOTALIZA-VALOR_PAYMENTS_A = <DSCOMPE>-VALOR_PAYMENTS_A.
        IT_TOTALIZA-VALOR_PAYMENTS_B = <DSCOMPE>-VALOR_PAYMENTS_B.
        IT_TOTALIZA-VALOR_PAYMENTS_C = <DSCOMPE>-VALOR_PAYMENTS_C.
        IT_TOTALIZA-VALOR_PAYMENTS_D = <DSCOMPE>-VALOR_PAYMENTS_D.

        IT_TOTALIZA-VALOR_VARIACAO_A = <DSCOMPE>-VALOR_VARIACAO_A.
        IT_TOTALIZA-VALOR_VARIACAO_B = <DSCOMPE>-VALOR_VARIACAO_B.
        IT_TOTALIZA-VALOR_VARIACAO_C = <DSCOMPE>-VALOR_VARIACAO_C.
        IT_TOTALIZA-VALOR_VARIACAO_D = <DSCOMPE>-VALOR_VARIACAO_D.

      ELSEIF ( <DSCOMPE>-KOART EQ 'D' AND <DSCOMPE>-SHKZG EQ 'H' ) OR "Cliente/Credito
             ( <DSCOMPE>-KOART EQ 'K' AND <DSCOMPE>-SHKZG EQ 'S' ).   "Fornecedor/Debito
        LC_DMBTR                     = <DSCOMPE>-DMBTR            * -1.
        LC_DMBTR_RES                 = <DSCOMPE>-DMBTR_RES        * -1.
        LC_VALOR_PAYMENTS_A          = <DSCOMPE>-VALOR_PAYMENTS_A * -1.
        LC_VALOR_PAYMENTS_B          = <DSCOMPE>-VALOR_PAYMENTS_B * -1.
        LC_VALOR_PAYMENTS_C          = <DSCOMPE>-VALOR_PAYMENTS_C * -1.
        LC_VALOR_PAYMENTS_D          = <DSCOMPE>-VALOR_PAYMENTS_D * -1.

        LC_VALOR_VARIACAO_A          = <DSCOMPE>-VALOR_VARIACAO_A." * -1.
        LC_VALOR_VARIACAO_B          = <DSCOMPE>-VALOR_VARIACAO_B." * -1.
        LC_VALOR_VARIACAO_C          = <DSCOMPE>-VALOR_VARIACAO_C." * -1.
        LC_VALOR_VARIACAO_D          = <DSCOMPE>-VALOR_VARIACAO_D." * -1.

        IT_TOTALIZA-DMBTR            = LC_DMBTR.
        IT_TOTALIZA-DMBTR_RES        = LC_DMBTR_RES.
        IT_TOTALIZA-VALOR_PAYMENTS_A = LC_VALOR_PAYMENTS_A.
        IT_TOTALIZA-VALOR_PAYMENTS_B = LC_VALOR_PAYMENTS_B.
        IT_TOTALIZA-VALOR_PAYMENTS_C = LC_VALOR_PAYMENTS_C.
        IT_TOTALIZA-VALOR_PAYMENTS_D = LC_VALOR_PAYMENTS_D.
*---> 15/06/2023 - Migração S4 - JS
*        IT_TOTALIZA-VALOR_VARIACAO_A = LC_VALOR_VARIACAO_A.
*        IT_TOTALIZA-VALOR_VARIACAO_B = LC_VALOR_VARIACAO_B.
*        IT_TOTALIZA-VALOR_VARIACAO_C = LC_VALOR_VARIACAO_C.
*        IT_TOTALIZA-VALOR_VARIACAO_D = LC_VALOR_VARIACAO_D.
        IT_TOTALIZA-VALOR_VARIACAO_A = CONV #( LC_VALOR_VARIACAO_A ).
        IT_TOTALIZA-VALOR_VARIACAO_B = CONV #( LC_VALOR_VARIACAO_B ).
        IT_TOTALIZA-VALOR_VARIACAO_C = CONV #( LC_VALOR_VARIACAO_C ).
        IT_TOTALIZA-VALOR_VARIACAO_D = CONV #( LC_VALOR_VARIACAO_D ).
*<--- 15/06/2023 - Migração S4 - JS

      ENDIF.

      IT_TOTALIZA-CONTADOR  = 1.

      CASE <DSCOMPE>-KOART.
        WHEN 'K'.
          SELECT SINGLE NAME1 INTO IT_TOTALIZA-NAME1 FROM LFA1 WHERE LIFNR EQ <DSCOMPE>-PARID.
        WHEN 'D'.
          SELECT SINGLE NAME1 INTO IT_TOTALIZA-NAME1 FROM KNA1 WHERE KUNNR EQ <DSCOMPE>-PARID.
      ENDCASE.
      APPEND IT_TOTALIZA.
    ENDIF.
  ENDLOOP.
  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  LC_ITEM_SHDB = 1.

  LOOP AT IT_COMPENSAR ASSIGNING <DSCOMPE>.
    "Itens Anteriores
    LOOP AT IT_BSEG_AUX ASSIGNING <FS_BSEG>
                  WHERE BUKRS EQ <DSCOMPE>-BUKRS
                    AND BELNR EQ <DSCOMPE>-BELNR
                    AND GJAHR EQ <DSCOMPE>-GJAHR
                    AND BUZEI LT <DSCOMPE>-BUZEI.
      <FS_BSEG>-OBZEI = LC_ITEM_SHDB.
      ADD 1 TO LC_ITEM_SHDB.
    ENDLOOP.

    "Item Atual
    <DSCOMPE>-ITEM_SHDB = LC_ITEM_SHDB.
    ADD 1 TO LC_ITEM_SHDB.

    "Itens posteriores
    LOOP AT IT_BSEG_AUX ASSIGNING <FS_BSEG>
                  WHERE BUKRS EQ <DSCOMPE>-BUKRS
                    AND BELNR EQ <DSCOMPE>-BELNR
                    AND GJAHR EQ <DSCOMPE>-GJAHR
                    AND BUZEI GT <DSCOMPE>-BUZEI.
      <FS_BSEG>-OBZEI = LC_ITEM_SHDB.
      ADD 1 TO LC_ITEM_SHDB.
    ENDLOOP.
  ENDLOOP.

  LOOP AT IT_TOTALIZA ASSIGNING <DSTOTA>.
    LC_DMBTR = <DSTOTA>-DMBTR.
    CASE <DSTOTA>-KOART.
      WHEN 'K'.
        IF P_BLART IS INITIAL.
          <DSTOTA>-BLART = 'KZ'.
        ELSE.
          <DSTOTA>-BLART = P_BLART.
        ENDIF.
        IF LC_DMBTR GT 0.
          <DSTOTA>-BSCHL = '50'.
        ELSE.
          <DSTOTA>-BSCHL = '40'.
        ENDIF.
      WHEN 'D'.
        IF P_BLART IS INITIAL.
          <DSTOTA>-BLART = 'DZ'.
        ELSE.
          <DSTOTA>-BLART = P_BLART.
        ENDIF.
        IF LC_DMBTR GT 0.
          <DSTOTA>-BSCHL = '40'.
        ELSE.
          <DSTOTA>-BSCHL = '50'.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  LOOP AT IT_TOTALIZA.

    CLEAR: TI_BDCDATA[].

    SELECT SINGLE WAERS INTO WA_T001_WAERS
      FROM T001
     WHERE BUKRS EQ IT_TOTALIZA-BUKRS.

    CALL FUNCTION 'FI_CURRENCY_INFORMATION'
      EXPORTING
        I_BUKRS = IT_TOTALIZA-BUKRS
      IMPORTING
        E_X001  = WA_MOEDAS.

    IF IT_TOTALIZA-WAERS_B IS INITIAL.

      "Tela Inicial
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'    '0122'            'X' .
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=SL'             ''.
      CONCATENATE IT_TOTALIZA-BLDAT+6(2) IT_TOTALIZA-BLDAT+4(2) IT_TOTALIZA-BLDAT(4) INTO LC_DATE_TX.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-BLDAT'	 LC_DATE_TX        ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-BLART'	 IT_TOTALIZA-BLART    ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-BUKRS'	 IT_TOTALIZA-BUKRS    ''.
      CONCATENATE IT_TOTALIZA-BUDAT+6(2) IT_TOTALIZA-BUDAT+4(2) IT_TOTALIZA-BUDAT(4) INTO LC_DATE_TX.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-BUDAT'	 LC_DATE_TX        ''.

      IF P_COTACAO_BAIXA IS INITIAL.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-WWERT'	 LC_DATE_TX ''.
      ELSE.
        CALL FUNCTION 'CONVERSION_EXIT_EXCRT_OUTPUT'
          EXPORTING
            INPUT  = P_COTACAO_BAIXA
          IMPORTING
            OUTPUT = LC_DATE_VL.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-KURSF'	 LC_DATE_VL ''.
      ENDIF.

      LC_DATE_TX = IT_TOTALIZA-BUDAT+4(2).
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-MONAT'	 LC_DATE_TX        ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-WAERS'	 IT_TOTALIZA-WAERS ''.

      IF IT_TOTALIZA-WWERT IS NOT INITIAL.
        CONCATENATE IT_TOTALIZA-WWERT+6(2) IT_TOTALIZA-WWERT+4(2) IT_TOTALIZA-WWERT(4) INTO LC_DATE_TX.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-WWERT'  LC_DATE_TX ''.
      ENDIF.

      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'FS006-DOCID' '*'               ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-AUGTX' IT_TOTALIZA-AUGTX ''.

      CASE P_TP_COMPENSACAO.
        WHEN '01'.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR' 'RF05A-XPOS1(01)' 'X'.
        WHEN '02'.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR' 'RF05A-XPOS1(02)' 'X'.
        WHEN '03'.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR' 'RF05A-XPOS1(03)' 'X'.
        WHEN '04'.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR' 'RF05A-XPOS1(04)' 'X'.
        WHEN OTHERS.
          IF ( IT_TOTALIZA-KOART EQ 'KZ' AND IT_TOTALIZA-BSCHL EQ '50' ) OR ( IT_TOTALIZA-KOART EQ 'DZ' AND IT_TOTALIZA-BSCHL EQ '40' ).
            PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR' 'RF05A-XPOS1(01)' ''.
          ELSEIF ( IT_TOTALIZA-KOART EQ 'KZ' AND IT_TOTALIZA-BSCHL EQ '40' ) OR ( IT_TOTALIZA-KOART EQ 'DZ' AND IT_TOTALIZA-BSCHL EQ '50' ).
            PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR' 'RF05A-XPOS1(02)' ''.
          ENDIF.
      ENDCASE.

      "Tela de Definição de Parceiro
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	   '0710'	           'X'.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'  '/00'             ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-AGBUK' IT_TOTALIZA-BUKRS ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-AGKON' IT_TOTALIZA-PARID ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-XPOS1(03)' 'X'           ''.

      IF P_UMSKZ IS NOT INITIAL.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-AGUMS' P_UMSKZ ''.
      ENDIF.

      "Inclusão de Documentos
      LOOP AT IT_COMPENSAR WHERE DOCUMENTO EQ IT_TOTALIZA-DOCUMENTO.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	       '0731'	            'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	     '/00'              ''.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-SEL01(01)' IT_COMPENSAR-BELNR ''.
      ENDLOOP.

      "Processar Documentos Selecionados """"""""""""""""""""""""""""""""""""""""""""""""""
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'   '0731'  'X'.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	'=PA'   ''.

      IF ( P_TP_COMPENSACAO = '04' ). "Desmarcar Itens não Relacionados 31.03.2017
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPDF05X'   '3100'  'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	'=PI' ''.

        LOOP AT IT_COMPENSAR WHERE DOCUMENTO EQ IT_TOTALIZA-DOCUMENTO.
          LOOP AT IT_BSEG_AUX WHERE BUKRS EQ IT_COMPENSAR-BUKRS
                                AND BELNR EQ IT_COMPENSAR-BELNR
                                AND GJAHR EQ IT_COMPENSAR-GJAHR.

            LC_DOCUMENTO = IT_BSEG_AUX-OBZEI.
            MOVE LC_DOCUMENTO TO LC_DOC_STR.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                INPUT  = LC_DOC_STR
              IMPORTING
                OUTPUT = LC_DOC_STR.
            CONCATENATE 'DF05B-PSBET(' LC_DOC_STR ')' INTO TI_BDCDATA-FVAL.

            PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR'  TI_BDCDATA-FVAL ''.
            PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPDF05X'      '3100'     'X'.
            PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'    '/00'      ''.
          ENDLOOP.
        ENDLOOP.
      ENDIF.

      "Seleciona Aba Residual """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPDF05X'   '3100'  'X'.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	'=REST' ''.

      CK_RESIDUAL     = ''.
      CK_RESIDUAL_ADT = ''.

      IF ( P_TP_COMPENSACAO NE '04' ). "Diferente Compensação

        "Partida Residual de Item não relacionado """""""""""""""""""""""""""""""""""""""""""""""""""""""""
        LOOP AT IT_COMPENSAR WHERE DOCUMENTO EQ IT_TOTALIZA-DOCUMENTO.
          LOOP AT IT_BSEG_AUX WHERE BUKRS EQ IT_COMPENSAR-BUKRS
                                AND BELNR EQ IT_COMPENSAR-BELNR
                                AND GJAHR EQ IT_COMPENSAR-GJAHR.

            IF IT_BSEG_AUX-SHKZG EQ 'H' AND IT_BSEG_AUX-KOART EQ 'K'.
              LC_DMBTR = ABS( IT_BSEG_AUX-DMBTR ) * -1.
            ELSEIF IT_BSEG_AUX-SHKZG EQ 'S' AND IT_BSEG_AUX-KOART EQ 'K'.
              LC_DMBTR = ABS( IT_BSEG_AUX-DMBTR ).
            ELSEIF IT_BSEG_AUX-SHKZG EQ 'H' AND IT_BSEG_AUX-KOART EQ 'D'.
              LC_DMBTR = ABS( IT_BSEG_AUX-DMBTR ) * -1.
            ELSEIF IT_BSEG_AUX-SHKZG EQ 'S' AND IT_BSEG_AUX-KOART EQ 'D'.
              LC_DMBTR = ABS( IT_BSEG_AUX-DMBTR ).
            ENDIF.

            MOVE LC_DMBTR TO LC_DATE_VL.
            CONDENSE LC_DATE_VL NO-GAPS.

            CALL FUNCTION 'STRING_REPLACE'
              EXPORTING
                PATTERN    = LC_PATTERN
                SUBSTITUTE = LC_SUBSTITUTE
              CHANGING
                TEXT       = LC_DATE_VL.

            LC_DOCUMENTO = IT_BSEG_AUX-OBZEI.

            MOVE LC_DOCUMENTO TO LC_DOC_STR.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                INPUT  = LC_DOC_STR
              IMPORTING
                OUTPUT = LC_DOC_STR.
            CONCATENATE 'DF05B-PSDIF(' LC_DOC_STR ')' INTO TI_BDCDATA-FNAM.

            PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPDF05X'      '3100'     'X'.
            PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'    '/00'      ''.
            PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING TI_BDCDATA-FNAM LC_DATE_VL ''.
            CK_RESIDUAL = 'X'.
            CONCATENATE IT_BSEG_AUX-ZFBDT+6(2) IT_BSEG_AUX-ZFBDT+4(2) IT_BSEG_AUX-ZFBDT(4) INTO LC_DATE_TX.
          ENDLOOP.
        ENDLOOP.

      ENDIF.

      "Partida Residual """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      LOOP AT IT_COMPENSAR WHERE DOCUMENTO EQ IT_TOTALIZA-DOCUMENTO AND DMBTR_RES NE 0.

        IF IT_COMPENSAR-SHKZG EQ 'H' AND IT_COMPENSAR-KOART EQ 'K'.
          LC_DMBTR = ABS( IT_COMPENSAR-DMBTR_RES ) * -1.
        ELSEIF IT_COMPENSAR-SHKZG EQ 'S' AND IT_COMPENSAR-KOART EQ 'K'.
          LC_DMBTR = ABS( IT_COMPENSAR-DMBTR_RES ).
        ELSEIF IT_COMPENSAR-SHKZG EQ 'H' AND IT_COMPENSAR-KOART EQ 'D'.
          LC_DMBTR = ABS( IT_COMPENSAR-DMBTR_RES ) * -1.
        ELSEIF IT_COMPENSAR-SHKZG EQ 'S' AND IT_COMPENSAR-KOART EQ 'D'.
          LC_DMBTR = ABS( IT_COMPENSAR-DMBTR_RES ).
        ENDIF.
        MOVE LC_DMBTR TO LC_DATE_VL.
        CONDENSE LC_DATE_VL NO-GAPS.

        CALL FUNCTION 'STRING_REPLACE'
          EXPORTING
            PATTERN    = LC_PATTERN
            SUBSTITUTE = LC_SUBSTITUTE
          CHANGING
            TEXT       = LC_DATE_VL.

        LC_DOCUMENTO = IT_COMPENSAR-ITEM_SHDB.
        MOVE LC_DOCUMENTO TO LC_DOC_STR.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = LC_DOC_STR
          IMPORTING
            OUTPUT = LC_DOC_STR.
        CONCATENATE 'DF05B-PSDIF(' LC_DOC_STR ')' INTO TI_BDCDATA-FNAM.

        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPDF05X'      '3100'     'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'    '/00'      ''.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING TI_BDCDATA-FNAM LC_DATE_VL ''.
        CONCATENATE IT_TOTALIZA-ZFBDT_RES+6(2) IT_TOTALIZA-ZFBDT_RES+4(2) IT_TOTALIZA-ZFBDT_RES(4) INTO LC_DATE_TX.
        CK_RESIDUAL = 'X'.

        IF IT_COMPENSAR-UMSKS = 'A'. "Classe Razão Especial Adiantamento
          CK_RESIDUAL_ADT = 'X'.
        ENDIF.

      ENDLOOP.

      IF IT_TOTALIZA-KONTO IS NOT INITIAL. "Ajuste Tipo 04-Compensação

        "Dar baixa a diferênça """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPDF05X'   '3100'  'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	'=KMD'  ''.

        "Efetuar Baixa na Diferênça """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'    '0700'            'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '/00'             ''.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-NEWKO' IT_TOTALIZA-KONTO ''.

        IF P_DESCONTO IS INITIAL.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-NEWBS' IT_TOTALIZA-BSCHL ''.

          IF <DSTOTA>-VALOR_PAYMENTS_A IS INITIAL.
            LC_DMBTR = <DSTOTA>-DMBTR.
          ELSE.
            LC_DMBTR = <DSTOTA>-VALOR_PAYMENTS_A.
          ENDIF.
        ELSE.
          LC_DMBTR = P_DESCONTO.

          IF LC_DMBTR GT 0.
            PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-NEWBS' '40' ''.
          ELSE.
            PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-NEWBS' '50' ''.
          ENDIF.
        ENDIF.

        LC_DMBTR = ABS( LC_DMBTR ).
        MOVE LC_DMBTR TO LC_DATE_VL.
        CONDENSE LC_DATE_VL NO-GAPS.

        CALL FUNCTION 'STRING_REPLACE'
          EXPORTING
            PATTERN    = LC_PATTERN
            SUBSTITUTE = LC_SUBSTITUTE
          CHANGING
            TEXT       = LC_DATE_VL.

        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	   '0300'	     'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=ZK'       ''.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BSEG-WRBTR'	 LC_DATE_VL  ''.

        CASE IT_TOTALIZA-KOART.
          WHEN 'K'.
            MESSAGE S037(ZFI) WITH  IT_TOTALIZA-NAME1 INTO TI_BDCDATA-FVAL.
          WHEN 'D'.
            MESSAGE S038(ZFI) WITH  IT_TOTALIZA-NAME1 INTO TI_BDCDATA-FVAL.
        ENDCASE.

        I = STRLEN( TI_BDCDATA-FVAL ).
        IF I GT 50.
          TI_BDCDATA-FVAL = TI_BDCDATA-FVAL(50).
        ENDIF.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BSEG-SGTXT'	 TI_BDCDATA-FVAL   ''.

        "Entrar com a Divisão """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        "Entrar com a Divisão """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        "Entrar com a Divisão """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        "Entrar com a Divisão """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPLKACB'	   '0002'	           'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=ENTE'           ''.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'COBL-GSBER'	 IT_TOTALIZA-GSBER ''.

        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	   '0330'	           'X'.

      ENDIF.

      "Simular lançamento """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=BS'             ''.

      "Dados de Partida Residual """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      IF CK_RESIDUAL EQ 'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'    '0700'            'X'.

        IF ( P_TP_COMPENSACAO = '04' ) AND ( CK_RESIDUAL_ADT IS NOT INITIAL ). "Ajuste Tipo 04-Compensação
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR'  'RF05A-AZEI1(01)' ''.
        ELSE.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR'  'RF05A-AZEI1(02)' ''.
        ENDIF.

        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'  '=PI'             ''.
        IF ( CK_RESIDUAL_ADT IS NOT INITIAL ).
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	   '0304'	           'X'.
        ELSEIF IT_TOTALIZA-KOART EQ 'K'.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	   '0302'	           'X'.
        ELSE.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	   '0301'	           'X'.
        ENDIF.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=BU'             ''.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BSEG-ZFBDT'	 LC_DATE_TX        ''.

        "Forma de Pagamento
        IF P_FORMA_PAG_RESIDUAL IS NOT INITIAL.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BSEG-ZLSCH'	 P_FORMA_PAG_RESIDUAL ''.
        ENDIF.

        "Texto do Item Residual
        IF IT_TOTALIZA-SGTXT IS NOT INITIAL.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BSEG-SGTXT'	 IT_TOTALIZA-SGTXT ''.
        ENDIF.

        IF P_TP_COMPENSACAO = '04'. "Ajuste Tipo 04-Compensação
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=BU'             ''.
        ENDIF.

      ELSE.
        "Salvar lançamento """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	   '0700'	           'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=BU'             ''.
      ENDIF.

    ELSE.
      "Entrar com a Diferença Variação Cambial """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      "Entrar com a Diferença Variação Cambial """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      "Entrar com a Diferença Variação Cambial """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      "Entrar com a Diferença Variação Cambial """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""

      "Tela Inicial
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'    '0122'            'X' .
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=SL'             ''.
      CONCATENATE IT_TOTALIZA-BLDAT+6(2) IT_TOTALIZA-BLDAT+4(2) IT_TOTALIZA-BLDAT(4) INTO LC_DATE_TX.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-BLDAT'	 LC_DATE_TX        ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-BLART'	 IT_TOTALIZA-BLART    ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-BUKRS'	 IT_TOTALIZA-BUKRS    ''.
      CONCATENATE IT_TOTALIZA-BUDAT+6(2) IT_TOTALIZA-BUDAT+4(2) IT_TOTALIZA-BUDAT(4) INTO LC_DATE_TX.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-BUDAT'	 LC_DATE_TX        ''.

      IF P_COTACAO_BAIXA IS INITIAL.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-WWERT'	 LC_DATE_TX ''.
      ELSE.
        CALL FUNCTION 'CONVERSION_EXIT_EXCRT_OUTPUT'
          EXPORTING
            INPUT  = P_COTACAO_BAIXA
          IMPORTING
            OUTPUT = LC_DATE_VL.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-KURSF'	 LC_DATE_VL ''.
      ENDIF.

      "PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-WWERT'   LC_DATE_TX        ''.
      LC_DATE_TX = IT_TOTALIZA-BUDAT+4(2).
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-MONAT'	 LC_DATE_TX        ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BKPF-WAERS'	 IT_TOTALIZA-WAERS ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'FS006-DOCID' '*'               ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-AUGTX' IT_TOTALIZA-AUGTX ''.

      CASE P_TP_COMPENSACAO.
        WHEN '01'.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR' 'RF05A-XPOS1(01)' 'X'.
        WHEN '02'.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR' 'RF05A-XPOS1(02)' 'X'.
        WHEN '03'.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR' 'RF05A-XPOS1(03)' 'X'.
        WHEN '04'.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR' 'RF05A-XPOS1(04)' 'X'.
        WHEN OTHERS.
          IF ( IT_TOTALIZA-KOART EQ 'KZ' AND IT_TOTALIZA-BSCHL EQ '50' ) OR ( IT_TOTALIZA-KOART EQ 'DZ' AND IT_TOTALIZA-BSCHL EQ '40' ).
            PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR' 'RF05A-XPOS1(01)' ''.
          ELSEIF ( IT_TOTALIZA-KOART EQ 'KZ' AND IT_TOTALIZA-BSCHL EQ '40' ) OR ( IT_TOTALIZA-KOART EQ 'DZ' AND IT_TOTALIZA-BSCHL EQ '50' ).
            PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_CURSOR' 'RF05A-XPOS1(02)' ''.
          ENDIF.
      ENDCASE.

      "Tela de Definição de Parceiro
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	   '0710'	           'X'.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'  '/00'             ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-AGBUK' IT_TOTALIZA-BUKRS ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-AGKON' IT_TOTALIZA-PARID ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-XPOS1(03)' 'X'           ''.

      "Inclusão de Documentos
      LOOP AT IT_COMPENSAR WHERE DOCUMENTO EQ IT_TOTALIZA-DOCUMENTO.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	       '0731'	            'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	     '/00'              ''.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-SEL01(01)' IT_COMPENSAR-BELNR ''.
      ENDLOOP.

      "Processar Documentos Selecionados """"""""""""""""""""""""""""""""""""""""""""""""""
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'   '0731'  'X'.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	'=PA'   ''.

      "Seleciona Aba Residual """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPDF05X'   '3100'  'X'.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	'=REST' ''.

      "Partida Residual de Item não relacionado """""""""""""""""""""""""""""""""""""""""""""""""""""""""
      LOOP AT IT_COMPENSAR WHERE DOCUMENTO EQ IT_TOTALIZA-DOCUMENTO.
        LOOP AT IT_BSEG_AUX WHERE BUKRS EQ IT_COMPENSAR-BUKRS
                              AND BELNR EQ IT_COMPENSAR-BELNR
                              AND GJAHR EQ IT_COMPENSAR-GJAHR.

          IF IT_BSEG_AUX-SHKZG EQ 'H' AND IT_BSEG_AUX-KOART EQ 'K'.
            LC_DMBTR = ABS( IT_BSEG_AUX-DMBTR ) * -1.
          ELSEIF IT_BSEG_AUX-SHKZG EQ 'S' AND IT_BSEG_AUX-KOART EQ 'K'.
            LC_DMBTR = ABS( IT_BSEG_AUX-DMBTR ).
          ELSEIF IT_BSEG_AUX-SHKZG EQ 'H' AND IT_BSEG_AUX-KOART EQ 'D'.
            LC_DMBTR = ABS( IT_BSEG_AUX-DMBTR ) * -1.
          ELSEIF IT_BSEG_AUX-SHKZG EQ 'S' AND IT_BSEG_AUX-KOART EQ 'D'.
            LC_DMBTR = ABS( IT_BSEG_AUX-DMBTR ).
          ENDIF.

          MOVE LC_DMBTR TO LC_DATE_VL.
          CONDENSE LC_DATE_VL NO-GAPS.

          CALL FUNCTION 'STRING_REPLACE'
            EXPORTING
              PATTERN    = LC_PATTERN
              SUBSTITUTE = LC_SUBSTITUTE
            CHANGING
              TEXT       = LC_DATE_VL.

          LC_DOCUMENTO = IT_BSEG_AUX-OBZEI.
          MOVE LC_DOCUMENTO TO LC_DOC_STR.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = LC_DOC_STR
            IMPORTING
              OUTPUT = LC_DOC_STR.
          CONCATENATE 'DF05B-PSDIF(' LC_DOC_STR ')' INTO TI_BDCDATA-FNAM.

          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPDF05X'      '3100'     'X'.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'    '/00'      ''.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING TI_BDCDATA-FNAM LC_DATE_VL ''.
          CK_RESIDUAL = 'X'.
          CONCATENATE IT_BSEG_AUX-ZFBDT+6(2) IT_BSEG_AUX-ZFBDT+4(2) IT_BSEG_AUX-ZFBDT(4) INTO LC_DATE_TX.
        ENDLOOP.
      ENDLOOP.

      "Partida Residual """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      LOOP AT IT_COMPENSAR WHERE DOCUMENTO EQ IT_TOTALIZA-DOCUMENTO AND DMBTR_RES NE 0.

        IF IT_COMPENSAR-SHKZG EQ 'H' AND IT_COMPENSAR-KOART EQ 'K'.
          LC_DMBTR = ABS( IT_COMPENSAR-DMBTR_RES ) * -1.
        ELSEIF IT_COMPENSAR-SHKZG EQ 'S' AND IT_COMPENSAR-KOART EQ 'K'.
          LC_DMBTR = ABS( IT_COMPENSAR-DMBTR_RES ).
        ELSEIF IT_COMPENSAR-SHKZG EQ 'H' AND IT_COMPENSAR-KOART EQ 'D'.
          LC_DMBTR = ABS( IT_COMPENSAR-DMBTR_RES ) * -1.
        ELSEIF IT_COMPENSAR-SHKZG EQ 'S' AND IT_COMPENSAR-KOART EQ 'D'.
          LC_DMBTR = ABS( IT_COMPENSAR-DMBTR_RES ).
        ENDIF.
        MOVE LC_DMBTR TO LC_DATE_VL.
        CONDENSE LC_DATE_VL NO-GAPS.

        CALL FUNCTION 'STRING_REPLACE'
          EXPORTING
            PATTERN    = LC_PATTERN
            SUBSTITUTE = LC_SUBSTITUTE
          CHANGING
            TEXT       = LC_DATE_VL.

        LC_DOCUMENTO = IT_COMPENSAR-ITEM_SHDB.
        MOVE LC_DOCUMENTO TO LC_DOC_STR.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = LC_DOC_STR
          IMPORTING
            OUTPUT = LC_DOC_STR.
        CONCATENATE 'DF05B-PSDIF(' LC_DOC_STR ')' INTO TI_BDCDATA-FNAM.

        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPDF05X'      '3100'     'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'    '/00'      ''.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING TI_BDCDATA-FNAM LC_DATE_VL ''.
        CONCATENATE IT_TOTALIZA-ZFBDT_RES+6(2) IT_TOTALIZA-ZFBDT_RES+4(2) IT_TOTALIZA-ZFBDT_RES(4) INTO LC_DATE_TX.
        CK_RESIDUAL = 'X'.

        IF IT_COMPENSAR-UMSKS = 'A'. "Classe Razão Especial Adiantamento
          CK_RESIDUAL_ADT = 'X'.
        ENDIF.

      ENDLOOP.

      "Dar baixa a diferênça """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPDF05X'   '3100'  'X'.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	'=KMD'  ''.

      "Efetuar Baixa na Diferênça """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'    '0700'            'X'.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '/00'             ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-NEWBS' IT_TOTALIZA-BSCHL ''.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-NEWKO' IT_TOTALIZA-KONTO ''.

      "Entrar com a Diferença Variação Cambial """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      "Entrar com a Diferença Variação Cambial """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      "Entrar com a Diferença Variação Cambial """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      "Entrar com a Diferença Variação Cambial """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'    '0300'            'X'.

      MOVE ABS( IT_TOTALIZA-VALOR_PAYMENTS_A ) TO LC_DATE_VL.
      CONDENSE LC_DATE_VL NO-GAPS.

      CALL FUNCTION 'STRING_REPLACE'
        EXPORTING
          PATTERN    = LC_PATTERN
          SUBSTITUTE = LC_SUBSTITUTE
        CHANGING
          TEXT       = LC_DATE_VL.

      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BSEG-WRBTR' LC_DATE_VL ''.

      IF IT_TOTALIZA-WAERS NE WA_T001_WAERS.
        MOVE ABS( IT_TOTALIZA-VALOR_PAYMENTS_C ) TO LC_DATE_VL.
        CONDENSE LC_DATE_VL NO-GAPS.

        CALL FUNCTION 'STRING_REPLACE'
          EXPORTING
            PATTERN    = LC_PATTERN
            SUBSTITUTE = LC_SUBSTITUTE
          CHANGING
            TEXT       = LC_DATE_VL.

        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BSEG-DMBTR' LC_DATE_VL ''.
      ENDIF.

      "Tem Variação
      IF IT_TOTALIZA-SAKNR_VARIACAO_B IS NOT INITIAL.

        IF IT_TOTALIZA-WAERS NE WA_MOEDAS-HWAE2.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=ZK'           ''.
        ELSE.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '/00'           ''.
        ENDIF.

        IF IT_TOTALIZA-DMBTR GE 0.
*          CASE IT_TOTALIZA-KOART.
*            WHEN 'D'.
              IF IT_TOTALIZA-VALOR_VARIACAO_A GT 0.
                IT_TOTALIZA-BSCHL = '50'.
              ELSE.
                IT_TOTALIZA-BSCHL = '40'.
              ENDIF.
*            WHEN 'K'.
*              IF IT_TOTALIZA-VALOR_VARIACAO_A GT 0.
*                IT_TOTALIZA-BSCHL = '40'.
*              ELSE.
*                IT_TOTALIZA-BSCHL = '50'.
*              ENDIF.
*          ENDCASE.
        ELSE.
*          CASE IT_TOTALIZA-KOART.
*            WHEN 'D'.
              IF IT_TOTALIZA-VALOR_VARIACAO_A GT 0.
                IT_TOTALIZA-BSCHL = '50'.
              ELSE.
                IT_TOTALIZA-BSCHL = '40'.
              ENDIF.
*            WHEN 'K'.
*              IF IT_TOTALIZA-VALOR_VARIACAO_A GT 0.
*                IT_TOTALIZA-BSCHL = '40'.
*              ELSE.
*                IT_TOTALIZA-BSCHL = '50'.
*              ENDIF.
*          ENDCASE.
        ENDIF.

*        CASE IT_TOTALIZA-KOART.
*          WHEN 'D'.
*            IF IT_TOTALIZA-VALOR_VARIACAO_A GT 0.
*              IT_TOTALIZA-BSCHL = '40'.
*            ELSE.
*              IT_TOTALIZA-BSCHL = '50'.
*            ENDIF.
*          WHEN 'K'.
*            IF IT_TOTALIZA-VALOR_VARIACAO_A GT 0.
*              IT_TOTALIZA-BSCHL = '50'.
*            ELSE.
*              IT_TOTALIZA-BSCHL = '40'.
*            ENDIF.
*        ENDCASE.

*        IF ( IT_TOTALIZA-DMBTR GE 0 AND IT_TOTALIZA-VALOR_VARIACAO_A GE 0 ) OR
*           ( IT_TOTALIZA-DMBTR LE 0 AND IT_TOTALIZA-VALOR_VARIACAO_A LE 0 ).
*          DATA(LC_SINAL_IGUAL) = ABAP_TRUE.
*        ELSE.
*          LC_SINAL_IGUAL = ABAP_FALSE.
*        ENDIF.
*
*        IF IT_TOTALIZA-BSCHL EQ '50'.
*          DATA(LC_CHAVE_INVERSA) = '40'.
*        ELSE.
*          LC_CHAVE_INVERSA = '50'.
*        ENDIF.
*
*        CASE LC_SINAL_IGUAL.
*          WHEN ABAP_TRUE.
*            IF IT_TOTALIZA-VALOR_VARIACAO_A LT 0.
*              CASE IT_TOTALIZA-KOART.
*                WHEN 'K'.
*                  IT_TOTALIZA-BSCHL = IT_TOTALIZA-BSCHL.
*                WHEN 'D'.
*                  IT_TOTALIZA-BSCHL = LC_CHAVE_INVERSA.
*              ENDCASE.
*            ELSE.
*              CASE IT_TOTALIZA-KOART.
*                WHEN 'K'.
*                  IT_TOTALIZA-BSCHL = LC_CHAVE_INVERSA.
*                WHEN 'D'.
*                  IT_TOTALIZA-BSCHL = IT_TOTALIZA-BSCHL.
*              ENDCASE.
*            ENDIF.
*          WHEN ABAP_FALSE.
*            IF IT_TOTALIZA-VALOR_VARIACAO_A LT 0.
*              CASE IT_TOTALIZA-KOART.
*                WHEN 'K'.
*                  IT_TOTALIZA-BSCHL = LC_CHAVE_INVERSA.
*                WHEN 'D'.
*                  IT_TOTALIZA-BSCHL = IT_TOTALIZA-BSCHL.
*              ENDCASE.
*            ELSE.
*              CASE IT_TOTALIZA-KOART.
*                WHEN 'K'.
*                  IT_TOTALIZA-BSCHL = IT_TOTALIZA-BSCHL.
*                WHEN 'D'.
*                  IT_TOTALIZA-BSCHL = LC_CHAVE_INVERSA.
*              ENDCASE.
*            ENDIF.
*        ENDCASE.

        "IT_TOTALIZA-DMBTR
        "IT_TOTALIZA-VALOR_VARIACAO_A
        "IT_TOTALIZA-KOART

*
*        CASE IT_TOTALIZA-KOART.
*          WHEN 'K'. "FORNECEDOR
*            IT_TOTALIZA-BLART = 'KZ'.
*            IF ( IT_TOTALIZA-SHKZG = 'S' AND IT_TOTALIZA-VALOR_VARIACAO_A GT 0 ). "DÉBITO
*              IT_TOTALIZA-BSCHL = '50'.
*            ELSE.
*              IT_TOTALIZA-BSCHL = '40'.
*            ENDIF.
*
*          WHEN 'D'. "CLIENTE
*            IT_TOTALIZA-BLART = 'DZ'.
*            IF ( IT_TOTALIZA-SHKZG = 'H' AND IT_TOTALIZA-VALOR_VARIACAO_A GT 0 ). "CRÉDITO
*              IT_TOTALIZA-BSCHL = '40'.
*            ELSE.
*              IT_TOTALIZA-BSCHL = '50'.
*            ENDIF.
*        ENDCASE.

        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-NEWBS' IT_TOTALIZA-BSCHL ''.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'RF05A-NEWKO' IT_TOTALIZA-SAKNR_VARIACAO_B ''.

        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPLKACB'	   '0002'	           'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=ENTE'           ''.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'COBL-GSBER'	 IT_TOTALIZA-GSBER ''.

        IF IT_TOTALIZA-WAERS NE WA_MOEDAS-HWAE2.

          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	   '0330'	         'X'.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '/00'         ''.

          MOVE ABS( IT_TOTALIZA-VALOR_PAYMENTS_D ) TO LC_DATE_VL.
          CONDENSE LC_DATE_VL NO-GAPS.

          CALL FUNCTION 'STRING_REPLACE'
            EXPORTING
              PATTERN    = LC_PATTERN
              SUBSTITUTE = LC_SUBSTITUTE
            CHANGING
              TEXT       = LC_DATE_VL.

          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BSEG-DMBE2' LC_DATE_VL ''.

        ENDIF.

        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	   '0300'	           'X'.
        IF IT_TOTALIZA-WAERS NE WA_MOEDAS-HWAE2.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=ZK'           ''.
        ELSE.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '/00'           ''.
        ENDIF.

        MOVE ABS( IT_TOTALIZA-VALOR_VARIACAO_A ) TO LC_DATE_VL.
        CONDENSE LC_DATE_VL NO-GAPS.

        CALL FUNCTION 'STRING_REPLACE'
          EXPORTING
            PATTERN    = LC_PATTERN
            SUBSTITUTE = LC_SUBSTITUTE
          CHANGING
            TEXT       = LC_DATE_VL.

        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BSEG-WRBTR'	 LC_DATE_VL        ''.

        IF IT_TOTALIZA-WAERS NE WA_T001_WAERS.
          MOVE ABS( IT_TOTALIZA-VALOR_VARIACAO_C ) TO LC_DATE_VL.
          CONDENSE LC_DATE_VL NO-GAPS.

          CALL FUNCTION 'STRING_REPLACE'
            EXPORTING
              PATTERN    = LC_PATTERN
              SUBSTITUTE = LC_SUBSTITUTE
            CHANGING
              TEXT       = LC_DATE_VL.

          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BSEG-DMBTR'	 LC_DATE_VL        ''.
        ENDIF.
        "ENDIF.

        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPLKACB'	   '0002'	           'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=ENTE'            ''.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'COBL-GSBER'	 IT_TOTALIZA-GSBER ''.

        "IF IT_TOTALIZA-SAKNR_VARIACAO_B IS NOT INITIAL.
        IF IT_TOTALIZA-WAERS NE WA_MOEDAS-HWAE2.

          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	   '0330'	         'X'.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=BS'         ''.

          MOVE ABS( IT_TOTALIZA-VALOR_VARIACAO_D ) TO LC_DATE_VL.
          CONDENSE LC_DATE_VL NO-GAPS.

          CALL FUNCTION 'STRING_REPLACE'
            EXPORTING
              PATTERN    = LC_PATTERN
              SUBSTITUTE = LC_SUBSTITUTE
            CHANGING
              TEXT       = LC_DATE_VL.

          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BSEG-DMBE2'	 LC_DATE_VL        ''.
        ELSE.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	   '0300'	           'X'.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=BS'             ''.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPLKACB'	   '0002'	           'X'.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=ENTE'            ''.
          PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'COBL-GSBER'	 IT_TOTALIZA-GSBER ''.
        ENDIF.
      ELSE.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '/00'             ''.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPLKACB'	   '0002'	           'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=ENTE'           ''.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'COBL-GSBER'	 IT_TOTALIZA-GSBER ''.

        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	   '0300'	           'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=BS'             ''.

        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPLKACB'	   '0002'	           'X'.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=ENTE'           ''.
        PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'COBL-GSBER'	 IT_TOTALIZA-GSBER ''.
      ENDIF.

      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'SAPMF05A'	   '0700'	           'X'.
      PERFORM ADD_MONTA_SHDB TABLES TI_BDCDATA USING 'BDC_OKCODE'	 '=BU'             ''.

    ENDIF.


    "Execução do SHDB """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    LC_MODE = 'N'.
    " A - Processing with display of screens
    " E - Display of screens only if an error occurs
    " N - Processing without display of screens
    " P - Processing without display of the screens

    "F-51
    CALL TRANSACTION 'F-51' USING TI_BDCDATA MODE LC_MODE UPDATE 'S' MESSAGES INTO IT_MESSAGE.

    READ TABLE IT_MESSAGE INTO WA_RETORNO WITH KEY MSGID  = 'F5' MSGNR  = '312' MSGTYP = 'S'.
    IF SY-SUBRC IS INITIAL.
      MOVE IT_COMPENSAR TO LC_BKPF_RET.
      LC_BKPF_RET-BELNR_C = WA_RETORNO-MSGV1.
      LC_BKPF_RET-GJAHR_C = IT_COMPENSAR-BUDAT(4).
      APPEND LC_BKPF_RET TO IT_BKPF_RET.
    ENDIF.

    LOOP AT IT_MESSAGE INTO WA_RETORNO.
      APPEND WA_RETORNO TO IT_RETORNO.
    ENDLOOP.
    CLEAR: IT_MESSAGE.

  ENDLOOP.

  LOOP AT IT_RETORNO.
    SL_RETURN-TYPE       = IT_RETORNO-MSGTYP.
    SL_RETURN-ID         = IT_RETORNO-MSGID.
    SL_RETURN-NUMBER     = IT_RETORNO-MSGNR.
    SL_RETURN-MESSAGE_V1 = IT_RETORNO-MSGV1.
    SL_RETURN-MESSAGE_V2 = IT_RETORNO-MSGV2.
    SL_RETURN-MESSAGE_V3 = IT_RETORNO-MSGV3.
    SL_RETURN-MESSAGE_V4 = IT_RETORNO-MSGV4.

    MESSAGE ID SL_RETURN-ID TYPE SL_RETURN-TYPE
     NUMBER SL_RETURN-NUMBER
       WITH SL_RETURN-MESSAGE_V1 SL_RETURN-MESSAGE_V2 SL_RETURN-MESSAGE_V3 SL_RETURN-MESSAGE_V4
       INTO SL_RETURN-MESSAGE.

    APPEND SL_RETURN TO IT_BKPF_RET2.
    CLEAR: SL_RETURN.
  ENDLOOP.

ENDFUNCTION.
