class ZCL_SQL_API_PYTHON definition
  public
  final
  create public .

public section.

  interfaces ZIF_SQL_API_PYTHON .
protected section.
private section.
ENDCLASS.



CLASS ZCL_SQL_API_PYTHON IMPLEMENTATION.


  method ZIF_SQL_API_PYTHON~EXEC_SCRIPT.

    DATA: LC_DOMINIO TYPE ZDE_DOMINIO,
          LC_JSON    TYPE STRING,
          LC_URL     TYPE STRING.

    R_SQL_API_PYTHON = ME.

    DEFINE ADD_TAG.
      CONCATENATE LC_JSON '"' &1 '": "' &2 '"' &3 INTO LC_JSON.
    END-OF-DEFINITION.

    R_SQL_API_PYTHON = ME.

    DATA(LC_DS_USUARIO) = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_USUARIO ) ).
    DATA(LC_DS_SENHA)   = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_SENHA ) ).
    DATA(LC_DS_BANCO)   = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_BANCO_IP ) ).
    DATA(LC_DS_PORTA)   = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_PORTA ) ).
    DATA(LC_DS_ORLI)    = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_ORLI ) ).

    CLEAR: LC_JSON.
    CONCATENATE '{' LC_JSON INTO LC_JSON.
    ADD_TAG 'usuario'   LC_DS_USUARIO ','.
    ADD_TAG 'senha'     LC_DS_SENHA   ','.
    ADD_TAG 'banco_ip'  LC_DS_BANCO   ','.
    ADD_TAG 'porta'     LC_DS_PORTA   ','.
    ADD_TAG 'orli'      LC_DS_ORLI    ','.
    ADD_TAG 'script'    I_SCRIPT ''.
    CONCATENATE LC_JSON '}' INTO LC_JSON.

    CONCATENATE ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-HOST '/servico/setExecutaScript' INTO LC_URL.
    ME->ZIF_SQL_API_PYTHON~SET_HTTP( EXPORTING I_URL = LC_URL I_JSON = LC_JSON IMPORTING E_CDATA = DATA(E_RESULTADO) ).

    CALL METHOD /UI2/CL_JSON=>DESERIALIZE
      EXPORTING
        JSON = E_RESULTADO
      CHANGING
        DATA = E_DATA.

  endmethod.


  METHOD ZIF_SQL_API_PYTHON~EXEC_SQL.

    DATA: LC_DOMINIO TYPE ZDE_DOMINIO,
          LC_JSON    TYPE STRING,
          LC_URL     TYPE STRING.

    R_SQL_API_PYTHON = ME.

    DEFINE ADD_TAG.
      CONCATENATE LC_JSON '"' &1 '": "' &2 '"' &3 INTO LC_JSON.
    END-OF-DEFINITION.

    R_SQL_API_PYTHON = ME.

    DATA(LC_DS_USUARIO) = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_USUARIO ) ).
    DATA(LC_DS_SENHA)   = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_SENHA ) ).
    DATA(LC_DS_BANCO)   = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_BANCO_IP ) ).
    DATA(LC_DS_PORTA)   = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_PORTA ) ).
    DATA(LC_DS_ORLI)    = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_ORLI ) ).

    CLEAR: LC_JSON.
    CONCATENATE '{' LC_JSON INTO LC_JSON.
    ADD_TAG 'usuario'   LC_DS_USUARIO ','.
    ADD_TAG 'senha'     LC_DS_SENHA   ','.
    ADD_TAG 'banco_ip'  LC_DS_BANCO   ','.
    ADD_TAG 'porta'     LC_DS_PORTA   ','.
    ADD_TAG 'orli'      LC_DS_ORLI    ','.
    ADD_TAG 'sql'       I_SQL ''.
    CONCATENATE LC_JSON '}' INTO LC_JSON.

    CONCATENATE ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-HOST ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-METHOD_SQL_API INTO LC_URL.
    ME->ZIF_SQL_API_PYTHON~SET_HTTP( EXPORTING I_URL = LC_URL I_JSON = LC_JSON IMPORTING E_CDATA = DATA(E_RESULTADO) ).

    CALL METHOD /UI2/CL_JSON=>DESERIALIZE
      EXPORTING
        JSON = E_RESULTADO
      CHANGING
        DATA = E_DATA.

  ENDMETHOD.


  METHOD ZIF_SQL_API_PYTHON~GERA_ERRO_GERAL.

    DATA: LC_TEXTO TYPE C LENGTH 200.
    LC_TEXTO = I_TEXTO.
    SY-MSGV1 = LC_TEXTO+000(50).
    SY-MSGV2 = LC_TEXTO+050(50).
    SY-MSGV3 = LC_TEXTO+100(50).
    SY-MSGV4 = LC_TEXTO+150(50).

    RAISE EXCEPTION TYPE ZCX_SQL_API_PYTHON
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_SQL_API_PYTHON=>ZCX_ERRO_GERAL-MSGID
                          MSGNO = ZCX_SQL_API_PYTHON=>ZCX_ERRO_GERAL-MSGNO
                          ATTR1 = CONV #( SY-MSGV1 )
                          ATTR2 = CONV #( SY-MSGV2 )
                          ATTR3 = CONV #( SY-MSGV3 )
                          ATTR4 = CONV #( SY-MSGV4 ) )
        MSGID  = ZCX_SQL_API_PYTHON=>ZCX_ERRO_GERAL-MSGID
        MSGNO  = ZCX_SQL_API_PYTHON=>ZCX_ERRO_GERAL-MSGNO
        MSGTY  = 'E'
        MSGV1  = SY-MSGV1
        MSGV2  = SY-MSGV2
        MSGV3  = SY-MSGV3
        MSGV4  = SY-MSGV4.

  ENDMETHOD.


  method ZIF_SQL_API_PYTHON~GETXMLCTE.

    DATA: LC_DOMINIO TYPE ZDE_DOMINIO,
          LC_JSON    TYPE STRING,
          LC_URL     TYPE STRING.

    R_SQL_API_PYTHON = ME.

    DEFINE ADD_TAG.
      CONCATENATE LC_JSON '"' &1 '": "' &2 '"' &3 INTO LC_JSON.
    END-OF-DEFINITION.

    R_SQL_API_PYTHON = ME.

    DATA(LC_DS_USUARIO) = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_USUARIO ) ).
    DATA(LC_DS_SENHA)   = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_SENHA ) ).
    DATA(LC_DS_BANCO)   = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_BANCO_IP ) ).
    DATA(LC_DS_PORTA)   = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_PORTA ) ).
    DATA(LC_DS_ORLI)    = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_ORLI ) ).

    CLEAR: LC_JSON.
    CONCATENATE '{' LC_JSON INTO LC_JSON.
    ADD_TAG 'usuario'   LC_DS_USUARIO ','.
    ADD_TAG 'senha'     LC_DS_SENHA   ','.
    ADD_TAG 'banco_ip'  LC_DS_BANCO   ','.
    ADD_TAG 'porta'     LC_DS_PORTA   ','.
    ADD_TAG 'orli'      LC_DS_ORLI    ','.
    ADD_TAG 'chave'     I_CHAVE ''.
    CONCATENATE LC_JSON '}' INTO LC_JSON.

    LC_URL = ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-HOST && '/nfe/getXMLCTe'.
    ME->ZIF_SQL_API_PYTHON~SET_HTTP( EXPORTING I_URL = LC_URL I_JSON = LC_JSON IMPORTING E_CDATA = E_XML ).

  endmethod.


  METHOD ZIF_SQL_API_PYTHON~GETXMLNFE.

    DATA: LC_DOMINIO TYPE ZDE_DOMINIO,
          LC_JSON    TYPE STRING,
          LC_URL     TYPE STRING.

    R_SQL_API_PYTHON = ME.

    DEFINE ADD_TAG.
      CONCATENATE LC_JSON '"' &1 '": "' &2 '"' &3 INTO LC_JSON.
    END-OF-DEFINITION.

    R_SQL_API_PYTHON = ME.

    DATA(LC_DS_USUARIO) = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_USUARIO ) ).
    DATA(LC_DS_SENHA)   = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_SENHA ) ).
    DATA(LC_DS_BANCO)   = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_BANCO_IP ) ).
    DATA(LC_DS_PORTA)   = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_PORTA ) ).
    DATA(LC_DS_ORLI)    = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ENCODE_BASE64( UNENCODED = CONV #( ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-DS_ORLI ) ).

    CLEAR: LC_JSON.
    CONCATENATE '{' LC_JSON INTO LC_JSON.
    ADD_TAG 'usuario'   LC_DS_USUARIO ','.
    ADD_TAG 'senha'     LC_DS_SENHA   ','.
    ADD_TAG 'banco_ip'  LC_DS_BANCO   ','.
    ADD_TAG 'porta'     LC_DS_PORTA   ','.
    ADD_TAG 'orli'      LC_DS_ORLI    ','.
    ADD_TAG 'chave'     I_CHAVE ''.
    CONCATENATE LC_JSON '}' INTO LC_JSON.

    LC_URL = ME->ZIF_SQL_API_PYTHON~AT_ZWAT0003-HOST && '/nfe/getXMLNFe'.
    ME->ZIF_SQL_API_PYTHON~SET_HTTP( EXPORTING I_URL = LC_URL I_JSON = LC_JSON IMPORTING E_CDATA = E_XML ).

  ENDMETHOD.


  METHOD ZIF_SQL_API_PYTHON~GET_INSTANCE.

    IF ZIF_SQL_API_PYTHON~AT_SQL_API_PYTHON IS NOT BOUND.
      CREATE OBJECT ZIF_SQL_API_PYTHON~AT_SQL_API_PYTHON TYPE ZCL_SQL_API_PYTHON.
      SELECT SINGLE * INTO ZIF_SQL_API_PYTHON~AT_SQL_API_PYTHON->AT_ZWAT0003
        FROM ZWAT0003.
    ENDIF.

    R_INSTANCE = ZIF_SQL_API_PYTHON~AT_SQL_API_PYTHON.

  ENDMETHOD.


  METHOD ZIF_SQL_API_PYTHON~SET_HTTP.

    DATA: TAM_XML_S   TYPE STRING, "Tamanho do Arquivo XML.
          TAM_XML_I   TYPE I,
          RETURN_CODE TYPE I,
          REASON      TYPE STRING.

    R_SQL_API_PYTHON = ME.

    CL_HTTP_CLIENT=>CREATE_BY_URL( EXPORTING URL    = I_URL
                                   IMPORTING CLIENT = DATA(E_HTTP)
                                   EXCEPTIONS ARGUMENT_NOT_FOUND = 1
                                              PLUGIN_NOT_ACTIVE  = 2
                                              INTERNAL_ERROR     = 3
                                     ).
    IF SY-SUBRC IS NOT INITIAL.
      IF SY-MSGID IS NOT INITIAL AND SY-MSGNO IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'E' NUMBER SY-MSGNO INTO DATA(MTEXT) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ELSE.
        MTEXT = '(CREATE_BY_URL) Erro de Comunicação com ' && I_URL.
      ENDIF.
      ZCX_SQL_API_PYTHON=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = MTEXT ).
    ENDIF.

    CALL METHOD E_HTTP->REQUEST->SET_HEADER_FIELD
      EXPORTING
        NAME  = '~request_method'
        VALUE = 'POST'.

    CALL METHOD E_HTTP->REQUEST->SET_HEADER_FIELD
      EXPORTING
        NAME  = '~server_protocol'
        VALUE = 'HTTP/1.1'.

    CALL METHOD E_HTTP->REQUEST->SET_HEADER_FIELD
      EXPORTING
        NAME  = 'Content-Type'
        VALUE = 'application/json'.

    IF I_USUARIO IS NOT INITIAL.
      E_HTTP->AUTHENTICATE( USERNAME = I_USUARIO PASSWORD = I_SENHA ).
    ENDIF.

    TAM_XML_I = STRLEN( I_JSON ). "Verifica o tamanho do arquivo XML.
    TAM_XML_S = TAM_XML_I.

    CALL METHOD E_HTTP->REQUEST->SET_HEADER_FIELD
      EXPORTING
        NAME  = 'Content-Length'
        VALUE = TAM_XML_S.

    CALL METHOD E_HTTP->REQUEST->SET_CDATA
      EXPORTING
        DATA   = I_JSON
        OFFSET = 0
        LENGTH = TAM_XML_I.

    CALL METHOD E_HTTP->SEND
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3
        HTTP_INVALID_TIMEOUT       = 4.

    IF SY-SUBRC IS NOT INITIAL.
      IF SY-MSGID IS NOT INITIAL AND SY-MSGNO IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'E' NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ELSE.
        MTEXT = '(SEND) Erro de Comunicação com ' && I_URL.
      ENDIF.
      ZCX_SQL_API_PYTHON=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = MTEXT ).
    ENDIF.

    CALL METHOD E_HTTP->RECEIVE
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3.

    IF SY-SUBRC IS NOT INITIAL.
      IF SY-MSGID IS NOT INITIAL AND SY-MSGNO IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'E' NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ELSE.
        MTEXT = '(RECEIVE) Erro de Comunicação com ' && I_URL.
      ENDIF.
      ZCX_SQL_API_PYTHON=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = MTEXT ).
    ENDIF.

    E_HTTP->RESPONSE->GET_STATUS( IMPORTING CODE = RETURN_CODE REASON = REASON ).

    IF RETURN_CODE NE 200.
      MTEXT = 'Erro: ' && RETURN_CODE && ' Texto: ' && REASON.
      ZCX_SQL_API_PYTHON=>ZIF_ERROR~GERA_ERRO_GERAL( I_TEXTO = MTEXT ).
    ENDIF.

    E_CDATA = E_HTTP->RESPONSE->GET_CDATA( ).
    E_HTTP->CLOSE( ).

  ENDMETHOD.
ENDCLASS.
