*&---------------------------------------------------------------------*
*& Report  ZSDR024
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZSDR024.

TABLES: ZSDT0212, J_1BNFLIN, J_1BNFDOC, MARA.

TYPE-POOLS: SLIS.

TYPES: BEGIN OF TY_SAIDA_01,
         BUKRS          TYPE J_1BNFDOC-BUKRS,
         BRANCH         TYPE J_1BNFDOC-BRANCH,
         MATNR          TYPE J_1BNFLIN-MATNR,
         MAKTX          TYPE MAKT-MAKTX,
         CHARG          TYPE J_1BNFLIN-CHARG,
         LOCAL_ESTOQUE  TYPE T001W-NAME1,
         SALDO_SAP      TYPE J_1BNFLIN-MENGE,
         SALDO_INDEA    TYPE J_1BNFLIN-MENGE,
         UNIDADE_MEDIDA TYPE CHAR100,
         CELLTAB        TYPE LVC_T_STYL,
         COLOR          TYPE CHAR4,
       END OF TY_SAIDA_01.

TYPES: BEGIN OF TY_SD_AUX,
         BUKRS          TYPE J_1BNFDOC-BUKRS,
         BRANCH         TYPE J_1BNFDOC-BRANCH,
         MATNR          TYPE J_1BNFLIN-MATNR,
         MAKTX          TYPE MAKT-MAKTX,
         CHARG          TYPE J_1BNFLIN-CHARG,
         LOCAL_ESTOQUE  TYPE T001W-NAME1,
         SALDO_SAP      TYPE J_1BNFLIN-MENGE,
         SALDO_INDEA    TYPE J_1BNFLIN-MENGE,
         UNIDADE_MEDIDA TYPE CHAR100,
       END OF TY_SD_AUX.


TYPES: BEGIN OF TY_SAIDA_02,
         BUKRS        TYPE J_1BNFDOC-BUKRS,
         BRANCH       TYPE J_1BNFDOC-BRANCH,
         DOCNUM       TYPE J_1BNFDOC-DOCNUM,
         NFNUM        TYPE J_1BNFDOC-NFNUM,
         DIRECT       TYPE J_1BNFDOC-DIRECT,
         ITMNUM       TYPE J_1BNFLIN-ITMNUM,
         MATNR        TYPE J_1BNFLIN-MATNR,
         MAKTX        TYPE MAKT-MAKTX,
         CHARG        TYPE J_1BNFLIN-CHARG,
         QNTD_NF      TYPE J_1BNFLIN-MENGE,
         UM_NF        TYPE J_1BNFLIN-MEINS,
         QNTD_ENVIADA TYPE J_1BNFLIN-MENGE,
         UM_ENVIADA   TYPE CHAR100,
       END OF   TY_SAIDA_02.

TYPES: BEGIN OF TY_SAIDA_03,
         ID_SEQ  TYPE ZSDT0220-ID_SEQ,
         BUKRS   TYPE ZSDT0220-BUKRS,
         BRANCH  TYPE ZSDT0220-BRANCH,
         DOCNUM  TYPE ZSDT0220-DOCNUM,
         NFENUM  TYPE ZSDT0220-NFENUM,
         ITMNUM  TYPE ZSDT0220-ITMNUM,
         MATNR   TYPE ZSDT0220-MATNR,
         CHARG   TYPE ZSDT0220-CHARG,
         MENGE   TYPE ZSDT0220-MENGE,
         MEINS   TYPE ZSDT0220-MEINS,
         CELLTAB TYPE LVC_T_STYL,
       END OF  TY_SAIDA_03.

TYPES: BEGIN OF TY_NOTAS,
         DOCNUM TYPE J_1BNFDOC-DOCNUM,
         CANCEL TYPE J_1BNFDOC-CANCEL,
         NFENUM TYPE J_1BNFDOC-NFENUM,
         NFNUM  TYPE J_1BNFDOC-NFNUM,
         BUKRS  TYPE J_1BNFDOC-BUKRS,
         BRANCH TYPE J_1BNFDOC-BRANCH,
         NFTYPE TYPE J_1BNFDOC-NFTYPE,
         DIRECT TYPE J_1BNFLIN-DIRECT,
         CHARG  TYPE J_1BNFLIN-CHARG,
         MEINS  TYPE J_1BNFLIN-MEINS,
         MENGE  TYPE J_1BNFLIN-MENGE,
         ITMNUM TYPE J_1BNFLIN-ITMNUM,
         MATNR  TYPE J_1BNFLIN-MATNR,
         MATKL  TYPE J_1BNFLIN-MATKL,
         ITMTYP TYPE J_1BNFLIN-ITMTYP,
         PARID  TYPE J_1BNFDOC-PARID,
       END OF TY_NOTAS.


TYPES: BEGIN OF TY_NOTAS_MANUAIS,
         DOCNUM TYPE J_1BNFDOC-DOCNUM,
         NFENUM TYPE J_1BNFDOC-NFENUM,
         NFNUM  TYPE J_1BNFDOC-NFNUM,
         BUKRS  TYPE J_1BNFDOC-BUKRS,
         BRANCH TYPE J_1BNFDOC-BRANCH,
         NFTYPE TYPE J_1BNFDOC-NFTYPE,
         DIRECT TYPE J_1BNFLIN-DIRECT,
         CHARG  TYPE J_1BNFLIN-CHARG,
         MEINS  TYPE J_1BNFLIN-MEINS,
         MENGE  TYPE J_1BNFLIN-MENGE,
         ITMNUM TYPE J_1BNFLIN-ITMNUM,
         MATNR  TYPE J_1BNFLIN-MATNR,
         MATKL  TYPE J_1BNFLIN-MATKL,
         ITMTYP TYPE J_1BNFLIN-ITMTYP,
         PARID  TYPE J_1BNFDOC-PARID,
       END OF TY_NOTAS_MANUAIS.


TYPES: BEGIN OF TY_CONTROLE,
         DOCNUM        TYPE J_1BNFDOC-DOCNUM,
         NFENUM        TYPE J_1BNFDOC-NFENUM,
         ITMNUM        TYPE J_1BNFLIN-ITMNUM,
         DIRECT        TYPE J_1BNFLIN-DIRECT,
         MATNR         TYPE J_1BNFLIN-MATNR,
         CHARG         TYPE J_1BNFLIN-CHARG,
         NFTYPE        TYPE J_1BNFDOC-NFTYPE,
         MEINS         TYPE J_1BNFLIN-MEINS,
         QTD_SAP       TYPE J_1BNFLIN-MENGE,
         QTD_INDEA     TYPE J_1BNFLIN-MENGE,
         LOCAL_ESTOQUE TYPE T001W-NAME1,
       END OF  TY_CONTROLE.

TYPES: BEGIN OF TY_PRODUTO,
         ID_PRODUTO     TYPE ZSDT0201-ID_PRODUTO,
         MATNR          TYPE MARA-MATNR,
         CHARG          TYPE J_1BNFLIN-CHARG,
         SALDO          TYPE ZSDT0209-SALDO,
         UNIDADE_MEDIDA TYPE CHAR100,
         VOLUME         TYPE ZSDT0201-VOLUME,
       END OF TY_PRODUTO.

TYPES: BEGIN OF TY_J_1BNFDOC,
         DOCNUM TYPE J_1BNFDOC-DOCNUM,
         NFENUM TYPE J_1BNFDOC-NFENUM,
         NFNUM  TYPE J_1BNFDOC-NFNUM,
         BUKRS  TYPE J_1BNFDOC-BUKRS,
         BRANCH TYPE J_1BNFDOC-BRANCH,
         NFTYPE TYPE J_1BNFDOC-NFTYPE,
         DIRECT TYPE J_1BNFLIN-DIRECT,
         CHARG  TYPE J_1BNFLIN-CHARG,
         MEINS  TYPE J_1BNFLIN-MEINS,
         MENGE  TYPE J_1BNFLIN-MENGE,
         ITMNUM TYPE J_1BNFLIN-ITMNUM,
         MATNR  TYPE J_1BNFLIN-MATNR,
         MATKL  TYPE J_1BNFLIN-MATKL,
         ITMTYP TYPE J_1BNFLIN-ITMTYP,
         PARID  TYPE J_1BNFDOC-PARID,
         REFTYP TYPE J_1BNFLIN-REFTYP,
         REFKEY TYPE J_1BNFLIN-REFKEY,
         SERIES TYPE J_1BNFDOC-SERIES,
       END OF TY_J_1BNFDOC.

TYPES: BEGIN OF TY_TEKBE,
         EBELN TYPE EKBE-EBELN,
         EBELP TYPE EKBE-EBELP,
         BELNR TYPE EKBE-BELNR,
         GJAHR TYPE EKBE-GJAHR,
         LFBNR TYPE EKBE-LFBNR,
         LFGJA TYPE EKBE-LFGJA,
       END OF  TY_TEKBE.

TYPES: BEGIN OF TY_MSEG.
         INCLUDE STRUCTURE MSEG.
         TYPES DOCNUM TYPE J_1BNFDOC-DOCNUM.
TYPES: END OF TY_MSEG.



DATA: IT_SAIDA_01      TYPE TABLE OF TY_SAIDA_01,
      WA_SAIDA_01      TYPE  TY_SAIDA_01,
      IT_SAIDA_02      TYPE TABLE OF TY_SAIDA_02,
      WA_SAIDA_02      TYPE  TY_SAIDA_02,
      IT_ZSDT0198      TYPE TABLE OF ZSDT0198,
      IT_SAIDA_03      TYPE TABLE OF TY_SAIDA_03,
      WA_SAIDA_03      TYPE TY_SAIDA_03,
      WA_ZSDT0198      TYPE ZSDT0198,
      IT_ZSDT0201      TYPE TABLE OF ZSDT0201,
      WA_ZSDT0201      TYPE ZSDT0201,
      IT_ZSDT0209      TYPE TABLE OF ZSDT0209,
      WA_ZSDT0209      TYPE ZSDT0209,
      IT_ZSDT0210      TYPE TABLE OF ZSDT0210,
      WA_ZSDT0210      TYPE ZSDT0210,
      IT_ZSDT0212      TYPE TABLE OF ZSDT0212,
      WA_ZSDT0212      TYPE ZSDT0212,
      IT_ZSDT0220      TYPE TABLE OF ZSDT0220,
      WA_ZSDT0220      TYPE ZSDT0220,
      IT_J_1BNFDOC     TYPE TABLE OF TY_J_1BNFDOC,
      WA_J_1BNFDOC     TYPE TY_J_1BNFDOC,
      IT_J_1BNFLIN     TYPE TABLE OF J_1BNFLIN,
      WA_J_1BNFLIN     TYPE  J_1BNFLIN,
      IT_MARA          TYPE TABLE OF MARA,
      WA_MARA          TYPE MARA,
      IT_MAKT          TYPE TABLE OF MAKT,
      WA_MAKT          TYPE MAKT,
      IT_NOTAS         TYPE TABLE OF TY_NOTAS,
      WA_NOTAS         TYPE TY_NOTAS,
      IT_NOTAS_MANUAIS TYPE TABLE OF TY_NOTAS_MANUAIS,
      WA_NOTAS_MANUAIS TYPE TY_NOTAS_MANUAIS,
      IT_CONTROLE      TYPE TABLE OF TY_CONTROLE,
      WA_CONTROLE      TYPE TY_CONTROLE,
      WA_CONTROLE_02   TYPE TY_CONTROLE,
      IT_PRODUTO       TYPE TABLE OF TY_PRODUTO,
      WA_PRODUTO       TYPE TY_PRODUTO,
      IT_SD_AUX        TYPE TABLE OF TY_SD_AUX,
      WA_SD_AUX        TYPE TY_SD_AUX,
      WA_SD_AUX_02     TYPE TY_SD_AUX,
      TMSEG            TYPE TABLE OF TY_MSEG,
      WMSEG            TYPE TY_MSEG,
      IT_MSEG          TYPE TABLE OF TY_MSEG,
      WA_MSEG          TYPE TY_MSEG,
      IT_EKBE          TYPE TABLE OF EKBE,
      WA_EKBE          TYPE EKBE,
      TEKBE            TYPE TABLE OF TY_TEKBE,
      WEKBE            TYPE TY_TEKBE.

DATA: G_GRID_01               TYPE REF TO CL_GUI_ALV_GRID,
      G_CUSTOM_CONTAINER_01   TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      C_ALV_TOOLBARMANAGER_01 TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,
      TL_FUNCTION_01          TYPE UI_FUNCTIONS,
      WL_FUNCTION_01          LIKE TL_FUNCTION_01 WITH HEADER LINE,
      TG_SELECTEDROW_01       TYPE LVC_T_ROW,
      WG_SELECTEDROW_01       TYPE LVC_S_ROW,
      IT_FCAT_01              TYPE TABLE OF LVC_S_FCAT,
      WL_FCAT_01              TYPE LVC_S_FCAT,
      WA_LAYOUT_01            TYPE LVC_S_LAYO,
      WA_STABLE_01            TYPE LVC_S_STBL VALUE 'XX'.

DATA: G_GRID_02               TYPE REF TO CL_GUI_ALV_GRID,
      G_CUSTOM_CONTAINER_02   TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      C_ALV_TOOLBARMANAGER_02 TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,
      TL_FUNCTION_02          TYPE UI_FUNCTIONS,
      WL_FUNCTION_02          LIKE TL_FUNCTION_02 WITH HEADER LINE,
      TG_SELECTEDROW_02       TYPE LVC_T_ROW,
      WG_SELECTEDROW_02       TYPE LVC_S_ROW,
      IT_FCAT_02              TYPE TABLE OF LVC_S_FCAT,
      WL_FCAT_02              TYPE LVC_S_FCAT,
      WA_LAYOUT_02            TYPE LVC_S_LAYO,
      WA_STABLE_02            TYPE LVC_S_STBL VALUE 'XX'.


DATA: G_GRID_03               TYPE REF TO CL_GUI_ALV_GRID,
      G_CUSTOM_CONTAINER_03   TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      C_ALV_TOOLBARMANAGER_03 TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,
      TL_FUNCTION_03          TYPE UI_FUNCTIONS,
      WL_FUNCTION_03          LIKE TL_FUNCTION_02 WITH HEADER LINE,
      TG_SELECTEDROW_03       TYPE LVC_T_ROW,
      WG_SELECTEDROW_03       TYPE LVC_S_ROW,
      IT_FCAT_03              TYPE TABLE OF LVC_S_FCAT,
      WL_FCAT_03              TYPE LVC_S_FCAT,
      WA_LAYOUT_03            TYPE LVC_S_LAYO,
      GT_ESTILO_03            TYPE LVC_T_STYL,
      WA_STABLE_03            TYPE LVC_S_STBL VALUE 'XX'.

DATA: LT_COLTAB TYPE LVC_T_SCOL,
      LS_COL    TYPE LVC_S_SCOL.


SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-002.
PARAMETERS: P_LAN RADIOBUTTON GROUP G1 USER-COMMAND MODIFICA_TELA DEFAULT 'X',
            P_SEM RADIOBUTTON GROUP G1,
            P_DEF RADIOBUTTON GROUP G1,
            P_TDS RADIOBUTTON GROUP G1.
SELECTION-SCREEN END OF BLOCK B2.

SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS: P_BUKRS  FOR J_1BNFDOC-BUKRS  NO INTERVALS OBLIGATORY MODIF ID T1,
                P_BRANCH FOR J_1BNFDOC-BRANCH NO INTERVALS OBLIGATORY MODIF ID T1,
                P_MATNR  FOR J_1BNFLIN-MATNR  NO INTERVALS MODIF ID T1,
                P_MATKL  FOR MARA-MATKL NO-DISPLAY MODIF ID T1.
SELECTION-SCREEN END OF BLOCK B1.

AT SELECTION-SCREEN OUTPUT.
  PERFORM MODIFICA_TELA.


INITIALIZATION.


START-OF-SELECTION.

  IF P_SEM IS NOT INITIAL.

    P_MATKL-SIGN   = 'I'.
    P_MATKL-OPTION = 'EQ'.
    P_MATKL-LOW    = '700130'.
    APPEND P_MATKL.
    P_MATKL-LOW    = '700230'.
    APPEND P_MATKL.
    P_MATKL-LOW    = '700240'.
    APPEND P_MATKL.
    P_MATKL-LOW    = '700350'.
    APPEND P_MATKL.

    PERFORM: Z_BUSCA_DADOS,
             Z_TRATAR_DADOS.
    CALL SCREEN 0100.

  ELSEIF P_DEF IS NOT INITIAL.

    P_MATKL-SIGN   = 'I'.
    P_MATKL-OPTION = 'EQ'.
    P_MATKL-LOW    = '658445'.
    APPEND P_MATKL.

    PERFORM: Z_BUSCA_DADOS,
             Z_TRATAR_DADOS.
    CALL SCREEN 0100.

  ELSEIF P_TDS IS NOT INITIAL.

    P_MATKL-SIGN   = 'I'.
    P_MATKL-OPTION = 'EQ'.
    P_MATKL-LOW    = '658445'.
    APPEND P_MATKL.
    P_MATKL-LOW    = '700130'.
    APPEND P_MATKL.
    P_MATKL-LOW    = '700230'.
    APPEND P_MATKL.
    P_MATKL-LOW    = '700240'.
    APPEND P_MATKL.
    P_MATKL-LOW    = '700350'.
    APPEND P_MATKL.

    PERFORM: Z_BUSCA_DADOS,
             Z_TRATAR_DADOS.
    CALL SCREEN 0100.

  ELSEIF P_LAN IS NOT INITIAL.

    PERFORM: Z_BUSCA_LANC.
    CALL SCREEN 0102.
  ENDIF.

CLASS LCL_EVENT_RECEIVER DEFINITION.
  PUBLIC SECTION.
    METHODS: ZM_HANDLE_CLICK FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
      IMPORTING E_COLUMN E_ROW ES_ROW_NO.
ENDCLASS.

CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.
  METHOD ZM_HANDLE_CLICK.
    PERFORM Z_HANDLER_DOUBLE_CLICK USING E_ROW E_COLUMN ES_ROW_NO.
  ENDMETHOD.
ENDCLASS.


*&---------------------------------------------------------------------*
*&      Form  Z_BUSCA_DADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM Z_BUSCA_DADOS .
  DATA ID_PROD   TYPE ZSDT0210-ID_MATNR_IDEA.
  DATA UNIDD_MED TYPE CHAR100.
  DATA VXBLNR    TYPE EKBE-XBLNR.
  DATA VNFENUM  TYPE J_1BNFDOC-NFENUM.

  SELECT *
    FROM ZSDT0220 INTO TABLE IT_ZSDT0220
  WHERE BUKRS  IN P_BUKRS
   AND  BRANCH IN P_BRANCH
   AND  MATNR  IN P_MATNR.

  IF IT_ZSDT0220 IS NOT INITIAL.

    SELECT  A~DOCNUM,  A~NFENUM,  A~NFNUM,   A~BUKRS,
            A~BRANCH,  A~NFTYPE,  A~DIRECT,  B~CHARG,
            B~MEINS,   B~MENGE,   B~ITMNUM,  B~MATNR,
            B~MATKL,   B~ITMTYP,  A~PARID,   B~REFTYP,
            B~REFKEY,  A~SERIES
         FROM J_1BNFDOC AS A
         INNER JOIN J_1BNFLIN AS B ON B~DOCNUM = A~DOCNUM
       INTO CORRESPONDING FIELDS OF TABLE @IT_J_1BNFDOC
      FOR ALL ENTRIES IN @IT_ZSDT0220
       WHERE A~DOCNUM  EQ @IT_ZSDT0220-DOCNUM
        AND  A~BUKRS   EQ @IT_ZSDT0220-BUKRS
        AND  A~BRANCH  EQ @IT_ZSDT0220-BRANCH
        AND  B~MATNR   EQ @IT_ZSDT0220-MATNR
        AND  B~MATKL   IN @P_MATKL
        AND  A~NFTYPE  IN ('NE', 'NF', 'YE', 'YD', 'YF', 'ZA',
                           'ZB', 'ZD', 'ZH', 'ZL', 'ZO', 'ZR',
                           'ZT', 'ZU', 'ZV').

    SORT IT_J_1BNFDOC BY DOCNUM.
    DELETE ADJACENT DUPLICATES FROM IT_J_1BNFDOC COMPARING DOCNUM.

    LOOP AT IT_J_1BNFDOC INTO WA_J_1BNFDOC.

      CASE WA_J_1BNFDOC-NFTYPE.
        WHEN  'NE' OR  'YE' OR  'YF' OR 'ZL'  OR 'E1'  OR 'ZH'.

          IF WA_J_1BNFDOC-NFNUM IS NOT INITIAL.
            VNFENUM = |{ WA_J_1BNFDOC-NFNUM ALPHA = OUT }|.
          ELSE.
            VNFENUM = |{ WA_J_1BNFDOC-NFENUM ALPHA = OUT }|.
          ENDIF.
          VXBLNR = |{ VNFENUM }{ '-' }{ WA_J_1BNFDOC-SERIES }|.

          CASE WA_J_1BNFDOC-REFTYP.
            WHEN 'LI'.

              SELECT  EBELN  EBELP  BELNR GJAHR  LFBNR  LFGJA
                FROM EKBE INTO TABLE TEKBE
               WHERE BELNR EQ WA_J_1BNFDOC-REFKEY+0(10)
                AND  GJAHR EQ WA_J_1BNFDOC-REFKEY+10(4).

              SORT TEKBE BY EBELN EBELP.
              DELETE ADJACENT DUPLICATES FROM TEKBE COMPARING EBELN EBELP.

              LOOP AT  TEKBE INTO WEKBE.

                IF WEKBE-LFBNR IS INITIAL.
                  SELECT  DISTINCT *
                    FROM EKBE  AS E INTO TABLE IT_EKBE
                  WHERE  E~EBELN EQ WEKBE-EBELN
                   AND   E~EBELP EQ WEKBE-EBELP
                   AND   E~VGABE EQ '1'
                   AND   E~XBLNR EQ VXBLNR
                   AND   E~SHKZG EQ  'S'
                   AND   E~BELNR EQ ( SELECT MAX( K~BELNR )
                                      FROM  EKBE AS K
                                      WHERE  K~EBELN = E~EBELN
                                       AND   K~EBELP = E~EBELP
                                       AND   K~VGABE = E~VGABE
                                       AND   K~XBLNR = E~XBLNR
                                       AND   K~SHKZG = E~SHKZG ) .
                  SELECT  *
                    FROM MSEG INTO TABLE TMSEG
                    FOR ALL ENTRIES IN IT_EKBE
                  WHERE MBLNR EQ IT_EKBE-BELNR
                   AND  MJAHR EQ IT_EKBE-GJAHR
                   AND  SHKZG EQ 'S'.

                ELSE.

                  SELECT  *
                    FROM MSEG INTO TABLE TMSEG
                    WHERE MBLNR EQ  WEKBE-LFBNR
                     AND  MJAHR EQ  WEKBE-LFGJA
                     AND  SHKZG EQ 'S'.

                ENDIF.

                LOOP AT TMSEG  INTO WMSEG.
                  WMSEG-DOCNUM = WA_J_1BNFDOC-DOCNUM.
                  APPEND WMSEG TO IT_MSEG.
                  CLEAR WMSEG.
                ENDLOOP.

                CLEAR WEKBE.
              ENDLOOP.

            WHEN 'ZW'.

              SELECT  *
                FROM ZFIWRT0008 INTO TABLE @DATA(IT_ZFIWRT0008)
               WHERE SEQ_LCTO EQ @WA_J_1BNFDOC-REFKEY.

              SELECT  *
                FROM MSEG INTO TABLE TMSEG
                FOR ALL ENTRIES IN IT_ZFIWRT0008
              WHERE  MBLNR EQ IT_ZFIWRT0008-MBLNR
                AND  MJAHR EQ IT_ZFIWRT0008-MJAHR
                AND  SHKZG EQ 'S'.

              LOOP AT TMSEG  INTO WMSEG.
                WMSEG-DOCNUM = WA_J_1BNFDOC-DOCNUM.
                APPEND WMSEG TO IT_MSEG.
                CLEAR WMSEG.
              ENDLOOP.

            WHEN 'MD'.

              SELECT *
                FROM MSEG INTO TABLE TMSEG
                  WHERE MBLNR EQ WA_J_1BNFDOC-REFKEY+0(10)
                   AND  MJAHR EQ WA_J_1BNFDOC-REFKEY+10(4)
                    AND  SHKZG EQ 'S'.

              LOOP AT TMSEG  INTO WMSEG.
                WMSEG-DOCNUM = WA_J_1BNFDOC-DOCNUM.
                APPEND WMSEG TO IT_MSEG.
                CLEAR WMSEG.
              ENDLOOP.
          ENDCASE.

          READ TABLE IT_MSEG INTO WA_MSEG WITH KEY DOCNUM = WA_J_1BNFDOC-DOCNUM.

          WA_NOTAS_MANUAIS-DOCNUM    =  WA_J_1BNFDOC-DOCNUM.
          WA_NOTAS_MANUAIS-NFENUM    =  WA_J_1BNFDOC-NFENUM.
          WA_NOTAS_MANUAIS-NFNUM     =  WA_J_1BNFDOC-NFNUM.
          WA_NOTAS_MANUAIS-BUKRS     =  WA_J_1BNFDOC-BUKRS.
          WA_NOTAS_MANUAIS-BRANCH    =  WA_J_1BNFDOC-BRANCH.
          WA_NOTAS_MANUAIS-NFTYPE    =  WA_J_1BNFDOC-NFTYPE.
          WA_NOTAS_MANUAIS-DIRECT    =  WA_J_1BNFDOC-DIRECT.
          WA_NOTAS_MANUAIS-CHARG     =  WA_MSEG-CHARG.
          WA_NOTAS_MANUAIS-MEINS     =  WA_MSEG-MEINS.
          WA_NOTAS_MANUAIS-MENGE     =  WA_MSEG-MENGE.
          "              WA_NOTAS_MANUAIS-ITMNUM    =  WA_J_1BNFDOC-ITMNUM.
          WA_NOTAS_MANUAIS-MATNR     =  WA_MSEG-MATNR.
          WA_NOTAS_MANUAIS-MATKL     =  WA_J_1BNFDOC-MATKL.
          WA_NOTAS_MANUAIS-ITMTYP    =  WA_J_1BNFDOC-ITMTYP.
          WA_NOTAS_MANUAIS-PARID     =  WA_J_1BNFDOC-PARID.
          APPEND  WA_NOTAS_MANUAIS TO IT_NOTAS_MANUAIS.


        WHEN OTHERS.

          WA_NOTAS_MANUAIS-DOCNUM    =  WA_J_1BNFDOC-DOCNUM.
          WA_NOTAS_MANUAIS-NFENUM    =  WA_J_1BNFDOC-NFENUM.
          WA_NOTAS_MANUAIS-NFNUM     =  WA_J_1BNFDOC-NFNUM.
          WA_NOTAS_MANUAIS-BUKRS     =  WA_J_1BNFDOC-BUKRS.
          WA_NOTAS_MANUAIS-BRANCH    =  WA_J_1BNFDOC-BRANCH.
          WA_NOTAS_MANUAIS-NFTYPE    =  WA_J_1BNFDOC-NFTYPE.
          WA_NOTAS_MANUAIS-DIRECT    =  WA_J_1BNFDOC-DIRECT.
          WA_NOTAS_MANUAIS-CHARG     =  WA_J_1BNFDOC-CHARG.
          WA_NOTAS_MANUAIS-MEINS     =  WA_J_1BNFDOC-MEINS.
          WA_NOTAS_MANUAIS-MENGE     =  WA_J_1BNFDOC-MENGE.
          WA_NOTAS_MANUAIS-ITMNUM    =  WA_J_1BNFDOC-ITMNUM.
          WA_NOTAS_MANUAIS-MATNR     =  WA_J_1BNFDOC-MATNR.
          WA_NOTAS_MANUAIS-MATKL     =  WA_J_1BNFDOC-MATKL.
          WA_NOTAS_MANUAIS-ITMTYP    =  WA_J_1BNFDOC-ITMTYP.
          WA_NOTAS_MANUAIS-PARID     =  WA_J_1BNFDOC-PARID.
          APPEND  WA_NOTAS_MANUAIS TO IT_NOTAS_MANUAIS.
      ENDCASE.

      CLEAR: WA_NOTAS_MANUAIS, WA_J_1BNFDOC, WA_MSEG, VXBLNR, VNFENUM.
    ENDLOOP.

  ENDIF.


  ""---------------------------------""----------------------------------------

  REFRESH: IT_J_1BNFDOC, IT_EKBE, TEKBE, IT_MSEG, TMSEG, IT_ZFIWRT0008.

  SELECT *
    FROM ZSDT0212 INTO TABLE IT_ZSDT0212
   WHERE STATUS IN ('A','C').

  IF  IT_ZSDT0212 IS NOT INITIAL.

    SELECT  A~DOCNUM,  A~CANCEL,  A~NFENUM,  A~NFNUM,
            A~BUKRS,   A~BRANCH,  A~NFTYPE,  A~DIRECT,
            B~CHARG,   B~MEINS,   B~MENGE,   B~ITMNUM,
            B~MATNR,   B~MATKL,   B~ITMTYP,  A~PARID,
            B~REFTYP,  B~REFKEY,  A~SERIES
         FROM J_1BNFDOC AS A
         INNER JOIN J_1BNFLIN AS B ON B~DOCNUM = A~DOCNUM
       INTO CORRESPONDING FIELDS OF TABLE @IT_J_1BNFDOC
        FOR ALL ENTRIES IN @IT_ZSDT0212
       WHERE A~DOCNUM  EQ @IT_ZSDT0212-DOCNUM
        AND  A~BUKRS   IN @P_BUKRS
        AND  A~BRANCH  IN @P_BRANCH
        AND  B~MATNR   IN @P_MATNR
        AND  B~MATKL   IN @P_MATKL
        AND  A~NFTYPE  IN ('NE', 'NF', 'YE', 'YD', 'YF', 'ZA',
                           'ZB', 'ZD', 'ZH', 'ZL', 'ZO', 'ZR',
                           'ZT', 'ZU', 'ZV').

    SORT IT_J_1BNFDOC BY DOCNUM.
    DELETE ADJACENT DUPLICATES FROM IT_J_1BNFDOC COMPARING DOCNUM.

    LOOP AT IT_J_1BNFDOC INTO WA_J_1BNFDOC.

      CASE WA_J_1BNFDOC-NFTYPE.
        WHEN  'NE' OR  'YE' OR  'YF' OR 'ZL'  OR 'E1'  OR 'ZH'.

          IF WA_J_1BNFDOC-NFNUM IS NOT INITIAL.
            VNFENUM = |{ WA_J_1BNFDOC-NFNUM ALPHA = OUT }|.
          ELSE.
            VNFENUM = |{ WA_J_1BNFDOC-NFENUM ALPHA = OUT }|.
          ENDIF.
          VXBLNR = |{ VNFENUM }{ '-' }{ WA_J_1BNFDOC-SERIES }|.

          CASE WA_J_1BNFDOC-REFTYP.
            WHEN 'LI'.

              SELECT  EBELN  EBELP  BELNR GJAHR  LFBNR  LFGJA
                FROM EKBE INTO TABLE TEKBE
               WHERE BELNR EQ WA_J_1BNFDOC-REFKEY+0(10)
                AND  GJAHR EQ WA_J_1BNFDOC-REFKEY+10(4).

              SORT TEKBE BY EBELN EBELP.
              DELETE ADJACENT DUPLICATES FROM TEKBE COMPARING EBELN EBELP.

              LOOP AT  TEKBE INTO WEKBE.

                IF WEKBE-LFBNR IS INITIAL.
                  SELECT  DISTINCT *
                    FROM EKBE  AS E INTO TABLE IT_EKBE
                  WHERE  E~EBELN EQ WEKBE-EBELN
                   AND   E~EBELP EQ WEKBE-EBELP
                   AND   E~VGABE EQ '1'
                   AND   E~XBLNR EQ VXBLNR
                   AND   E~SHKZG EQ  'S'
                   AND   E~BELNR EQ ( SELECT MAX( K~BELNR )
                                      FROM  EKBE AS K
                                      WHERE  K~EBELN = E~EBELN
                                       AND   K~EBELP = E~EBELP
                                       AND   K~VGABE = E~VGABE
                                       AND   K~XBLNR = E~XBLNR
                                       AND   K~SHKZG = E~SHKZG ) .
                  SELECT  *
                    FROM MSEG INTO TABLE TMSEG
                    FOR ALL ENTRIES IN IT_EKBE
                  WHERE MBLNR EQ IT_EKBE-BELNR
                   AND  MJAHR EQ IT_EKBE-GJAHR
                   AND  SHKZG EQ 'S'.

                ELSE.

                  SELECT  *
                    FROM MSEG INTO TABLE TMSEG
                    WHERE MBLNR EQ  WEKBE-LFBNR
                     AND  MJAHR EQ  WEKBE-LFGJA
                     AND  SHKZG EQ 'S'.

                ENDIF.

                LOOP AT TMSEG  INTO WMSEG.
                  WMSEG-DOCNUM = WA_J_1BNFDOC-DOCNUM.
                  APPEND WMSEG TO IT_MSEG.
                  CLEAR WMSEG.
                ENDLOOP.

                CLEAR WEKBE.
              ENDLOOP.

            WHEN 'ZW'.

              SELECT  *
                FROM ZFIWRT0008 INTO TABLE IT_ZFIWRT0008
               WHERE SEQ_LCTO EQ WA_J_1BNFDOC-REFKEY.

              SELECT  *
                FROM MSEG INTO TABLE TMSEG
                FOR ALL ENTRIES IN IT_ZFIWRT0008
              WHERE  MBLNR EQ IT_ZFIWRT0008-MBLNR
                AND  MJAHR EQ IT_ZFIWRT0008-MJAHR
                AND  SHKZG EQ 'S'.

              LOOP AT TMSEG  INTO WMSEG.
                WMSEG-DOCNUM = WA_J_1BNFDOC-DOCNUM.
                APPEND WMSEG TO IT_MSEG.
                CLEAR WMSEG.
              ENDLOOP.

            WHEN 'MD'.

              SELECT *
                FROM MSEG INTO TABLE TMSEG
                  WHERE MBLNR EQ WA_J_1BNFDOC-REFKEY+0(10)
                   AND  MJAHR EQ WA_J_1BNFDOC-REFKEY+10(4)
                   AND  SHKZG EQ 'S'.

              LOOP AT TMSEG  INTO WMSEG.
                WMSEG-DOCNUM = WA_J_1BNFDOC-DOCNUM.
                APPEND WMSEG TO IT_MSEG.
                CLEAR WMSEG.
              ENDLOOP.
          ENDCASE.

          READ TABLE IT_MSEG INTO WA_MSEG WITH KEY DOCNUM = WA_J_1BNFDOC-DOCNUM.

          WA_NOTAS-DOCNUM    =  WA_J_1BNFDOC-DOCNUM.
          WA_NOTAS-NFENUM    =  WA_J_1BNFDOC-NFENUM.
          WA_NOTAS-NFNUM     =  WA_J_1BNFDOC-NFNUM.
          WA_NOTAS-BUKRS     =  WA_J_1BNFDOC-BUKRS.
          WA_NOTAS-BRANCH    =  WA_J_1BNFDOC-BRANCH.
          WA_NOTAS-NFTYPE    =  WA_J_1BNFDOC-NFTYPE.
          WA_NOTAS-DIRECT    =  WA_J_1BNFDOC-DIRECT.
          WA_NOTAS-CHARG     =  WA_MSEG-CHARG.
          WA_NOTAS-MEINS     =  WA_MSEG-MEINS.
          WA_NOTAS-MENGE     =  WA_MSEG-MENGE.
          "WA_NOTAS-ITMNUM    =  WA_J_1BNFDOC-ITMNUM.
          WA_NOTAS-MATNR     =  WA_MSEG-MATNR.
          WA_NOTAS-MATKL     =  WA_J_1BNFDOC-MATKL.
          WA_NOTAS-ITMTYP    =  WA_J_1BNFDOC-ITMTYP.
          WA_NOTAS-PARID     =  WA_J_1BNFDOC-PARID.
          APPEND  WA_NOTAS TO IT_NOTAS.


        WHEN OTHERS.

          WA_NOTAS-DOCNUM    =  WA_J_1BNFDOC-DOCNUM.
          WA_NOTAS-NFENUM    =  WA_J_1BNFDOC-NFENUM.
          WA_NOTAS-NFNUM     =  WA_J_1BNFDOC-NFNUM.
          WA_NOTAS-BUKRS     =  WA_J_1BNFDOC-BUKRS.
          WA_NOTAS-BRANCH    =  WA_J_1BNFDOC-BRANCH.
          WA_NOTAS-NFTYPE    =  WA_J_1BNFDOC-NFTYPE.
          WA_NOTAS-DIRECT    =  WA_J_1BNFDOC-DIRECT.
          WA_NOTAS-CHARG     =  WA_J_1BNFDOC-CHARG.
          WA_NOTAS-MEINS     =  WA_J_1BNFDOC-MEINS.
          WA_NOTAS-MENGE     =  WA_J_1BNFDOC-MENGE.
          WA_NOTAS-ITMNUM    =  WA_J_1BNFDOC-ITMNUM.
          WA_NOTAS-MATNR     =  WA_J_1BNFDOC-MATNR.
          WA_NOTAS-MATKL     =  WA_J_1BNFDOC-MATKL.
          WA_NOTAS-ITMTYP    =  WA_J_1BNFDOC-ITMTYP.
          WA_NOTAS-PARID     =  WA_J_1BNFDOC-PARID.
          APPEND  WA_NOTAS TO IT_NOTAS.
      ENDCASE.

      CLEAR: WA_NOTAS, WA_J_1BNFDOC, WA_MSEG.
    ENDLOOP.


    SELECT *
      FROM ZSDT0209 INTO TABLE IT_ZSDT0209
      ORDER BY DATA_ATUAL HORA_ATUAL DESCENDING.

    LOOP AT IT_ZSDT0209 INTO WA_ZSDT0209.

      SELECT SINGLE *
        FROM ZSDT0201 INTO WA_ZSDT0201
        WHERE ID_PRODUTO EQ WA_ZSDT0209-IDPRODUTOEMBAGALEM.

      SELECT SINGLE *
        FROM ZSDT0198 INTO WA_ZSDT0198
       WHERE ID_CULTIVAR EQ WA_ZSDT0209-IDCULTIVAR.

      IF WA_ZSDT0201-ID_PRODUTO IS NOT INITIAL.
        ID_PROD   =  WA_ZSDT0201-ID_PRODUTO.
        UNIDD_MED = |{ WA_ZSDT0201-EMBALAGEM }{ '-' }{ WA_ZSDT0201-VOLUME }{ '-' }{ WA_ZSDT0201-UNIDADE }|.
        REPLACE ALL OCCURRENCES OF  '.'  IN UNIDD_MED  WITH ','.

      ELSE.
        ID_PROD =          WA_ZSDT0198-ID_CULTIVAR.
        UNIDD_MED = 'KG'.
      ENDIF.

      SELECT SINGLE *
        FROM ZSDT0210 INTO WA_ZSDT0210
       WHERE ID_MATNR_IDEA  EQ ID_PROD.

      IF SY-SUBRC = 0.
        WA_PRODUTO-ID_PRODUTO     =  WA_ZSDT0210-ID_MATNR_IDEA.
        WA_PRODUTO-MATNR          =  WA_ZSDT0210-MATNR.
        WA_PRODUTO-CHARG          =  WA_ZSDT0209-LOTE.
        WA_PRODUTO-SALDO          =  WA_ZSDT0209-SALDO.
        WA_PRODUTO-UNIDADE_MEDIDA =  UNIDD_MED.
        WA_PRODUTO-VOLUME         =  WA_ZSDT0201-VOLUME.

        APPEND WA_PRODUTO TO IT_PRODUTO.
      ENDIF.
      CLEAR: WA_ZSDT0209, WA_ZSDT0210, WA_ZSDT0201, WA_ZSDT0198, WA_PRODUTO, ID_PROD, UNIDD_MED.
    ENDLOOP.
  ENDIF.
ENDFORM.

FORM Z_TRATAR_DADOS.

  SORT IT_NOTAS BY MATNR CHARG.
  LOOP AT IT_NOTAS INTO WA_NOTAS.

    SELECT SINGLE *
      FROM T001W INTO @DATA(WA_T001W)
     WHERE WERKS EQ @WA_NOTAS-BRANCH.


    READ TABLE IT_PRODUTO INTO WA_PRODUTO WITH KEY MATNR = WA_NOTAS-MATNR
                                                   CHARG = WA_NOTAS-CHARG.

    WA_CONTROLE-DOCNUM  = WA_NOTAS-DOCNUM.
    WA_CONTROLE-ITMNUM  = WA_NOTAS-ITMNUM.
    WA_CONTROLE-CHARG   = WA_NOTAS-CHARG.
    WA_CONTROLE-NFTYPE  = WA_NOTAS-NFTYPE.
    WA_CONTROLE-MATNR   = WA_NOTAS-MATNR.
    WA_CONTROLE-DIRECT  = WA_NOTAS-DIRECT.
    WA_CONTROLE-MEINS   = WA_NOTAS-MEINS.
    WA_CONTROLE-LOCAL_ESTOQUE = WA_T001W-NAME1.

    IF WA_NOTAS-NFENUM IS NOT INITIAL.
      WA_CONTROLE-NFENUM  = WA_NOTAS-NFENUM.
    ELSE.
      WA_CONTROLE-NFENUM  = WA_NOTAS-NFNUM.
    ENDIF.

    CASE  WA_NOTAS-NFTYPE.
      WHEN 'NE' OR 'YE' OR 'YF' OR 'ZL'.
        WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP   +  WA_NOTAS-MENGE.
      WHEN 'YD'  OR 'ZB'.
        WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP   -  WA_NOTAS-MENGE.
      WHEN 'ZA'.
        IF WA_NOTAS-ITMTYP <> 'ZC'.
          WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP  - WA_NOTAS-MENGE.
        ELSEIF WA_NOTAS-ITMTYP EQ 'ZC'.
          WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP  - WA_NOTAS-MENGE.
          MOVE-CORRESPONDING WA_CONTROLE TO WA_CONTROLE_02.
        ENDIF.
      WHEN 'ZD' OR 'ZV'.
        WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP   +  WA_NOTAS-MENGE.
      WHEN 'ZR'.
        WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP   -  WA_NOTAS-MENGE.
      WHEN 'ZT'.
        WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP   -  WA_NOTAS-MENGE.
      WHEN 'ZU'.
        WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP   +  WA_NOTAS-MENGE.
      WHEN 'ZO'.
        WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP    - WA_NOTAS-MENGE.
        MOVE-CORRESPONDING WA_CONTROLE TO WA_CONTROLE_02.
      WHEN 'ZH'.
        WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP    - WA_NOTAS-MENGE.
        MOVE-CORRESPONDING WA_CONTROLE TO WA_CONTROLE_02.
    ENDCASE.

    IF  WA_PRODUTO-VOLUME <> '0'.
      WA_CONTROLE-QTD_INDEA  = ( WA_CONTROLE-QTD_SAP / WA_PRODUTO-VOLUME ).
    ELSE.
      WA_CONTROLE-QTD_INDEA  =  '0'.
    ENDIF.
    APPEND WA_CONTROLE TO IT_CONTROLE.


    READ TABLE IT_PRODUTO INTO DATA(WPRODUTO) WITH KEY MATNR = WA_NOTAS-MATNR.

    SELECT SINGLE * FROM MAKT INTO @DATA(WA_MAKT)
      WHERE MATNR EQ @WA_NOTAS-MATNR.

    WA_SD_AUX-BUKRS           =  WA_NOTAS-BUKRS.
    WA_SD_AUX-BRANCH          =  WA_NOTAS-BRANCH.
    WA_SD_AUX-MATNR           =  WA_NOTAS-MATNR.
    WA_SD_AUX-MAKTX           =  WA_MAKT-MAKTX.
    WA_SD_AUX-CHARG           =  WA_NOTAS-CHARG.
    WA_SD_AUX-LOCAL_ESTOQUE   =  WA_T001W-NAME1.

    IF WA_PRODUTO-VOLUME <> '0'.
      WA_SD_AUX-SALDO_SAP       = (  WA_CONTROLE-QTD_SAP  / WA_PRODUTO-VOLUME ).
    ELSE.
      WA_SD_AUX-SALDO_SAP       = (  WA_CONTROLE-QTD_SAP  ).
    ENDIF.

    WA_SD_AUX-SALDO_INDEA     =  WA_PRODUTO-SALDO.
    WA_SD_AUX-UNIDADE_MEDIDA  =  WPRODUTO-UNIDADE_MEDIDA.

    MOVE-CORRESPONDING WA_SD_AUX TO WA_SD_AUX_02.
    COLLECT WA_SD_AUX INTO IT_SD_AUX.


    CLEAR: WA_SD_AUX_02-SALDO_SAP, WA_SD_AUX_02-SALDO_INDEA,
           WA_CONTROLE_02-QTD_SAP, WA_CONTROLE_02-QTD_INDEA.

    IF ( WA_NOTAS-NFTYPE EQ 'ZA' AND  WA_NOTAS-ITMTYP EQ 'ZC' ) OR
         WA_NOTAS-NFTYPE EQ 'ZO' OR   WA_NOTAS-NFTYPE EQ 'ZH'.

      SELECT SINGLE * FROM LFA1 INTO @DATA(WA_LFA1)
       WHERE LIFNR EQ @WA_NOTAS-PARID.

      WA_CONTROLE_02-LOCAL_ESTOQUE =  WA_LFA1-NAME1.
      WA_CONTROLE_02-QTD_SAP    =  WA_CONTROLE_02-QTD_SAP    + WA_NOTAS-MENGE.
      WA_CONTROLE_02-QTD_INDEA  =  WA_CONTROLE_02-QTD_INDEA  + WA_PRODUTO-SALDO.
      APPEND WA_CONTROLE_02 TO IT_CONTROLE.


      WA_SD_AUX_02-LOCAL_ESTOQUE = WA_LFA1-NAME1.
      IF WA_PRODUTO-VOLUME <> '0'.
        WA_SD_AUX_02-SALDO_SAP       = (  WA_CONTROLE_02-QTD_SAP  / WA_PRODUTO-VOLUME ).
      ELSE.
        WA_SD_AUX_02-SALDO_SAP       = (  WA_CONTROLE_02-QTD_SAP  ).
      ENDIF.
      WA_SD_AUX_02-SALDO_INDEA      =  WA_PRODUTO-SALDO.
      COLLECT WA_SD_AUX_02 INTO IT_SD_AUX.
    ENDIF.

    CLEAR: WA_CONTROLE, WA_PRODUTO, WA_NOTAS, WA_SD_AUX, WA_CONTROLE_02, WA_SD_AUX_02.
  ENDLOOP.





  SORT IT_ZSDT0220 BY MATNR CHARG.

  LOOP AT IT_ZSDT0220 INTO WA_ZSDT0220.

    READ TABLE IT_NOTAS_MANUAIS INTO WA_NOTAS_MANUAIS WITH KEY DOCNUM = WA_ZSDT0220-DOCNUM.
    IF SY-SUBRC = 0   .

      SELECT SINGLE *
        FROM T001W INTO WA_T001W
       WHERE WERKS EQ WA_ZSDT0220-BRANCH.

      READ TABLE IT_PRODUTO INTO WA_PRODUTO WITH KEY MATNR = WA_NOTAS_MANUAIS-MATNR
                                                     CHARG = WA_NOTAS_MANUAIS-CHARG .

      WA_CONTROLE-DOCNUM        = WA_ZSDT0220-DOCNUM.
      WA_CONTROLE-ITMNUM        = WA_ZSDT0220-ITMNUM.
      WA_CONTROLE-CHARG         = WA_ZSDT0220-CHARG.
      WA_CONTROLE-MEINS         = WA_ZSDT0220-MEINS.
      WA_CONTROLE-NFENUM        = WA_ZSDT0220-NFENUM.
      WA_CONTROLE-MATNR         = WA_ZSDT0220-MATNR.
      WA_CONTROLE-NFTYPE        = WA_NOTAS_MANUAIS-NFTYPE.
      WA_CONTROLE-DIRECT        = WA_NOTAS_MANUAIS-DIRECT.
      WA_CONTROLE-LOCAL_ESTOQUE = WA_T001W-NAME1.

      CASE  WA_NOTAS_MANUAIS-NFTYPE.
        WHEN 'NE' OR 'YE' OR 'YF' OR 'ZL'.
          WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP   + WA_ZSDT0220-MENGE.
        WHEN 'YD' OR  'ZB'.
          WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP    - WA_ZSDT0220-MENGE.
        WHEN 'ZA'.
          IF WA_NOTAS_MANUAIS-ITMTYP <> 'ZC'.
            WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP    - WA_ZSDT0220-MENGE.
          ELSEIF WA_NOTAS_MANUAIS-ITMTYP EQ 'ZC'.
            WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP   - WA_ZSDT0220-MENGE.
            MOVE-CORRESPONDING WA_CONTROLE TO WA_CONTROLE_02.
          ENDIF.
        WHEN 'ZD' OR 'ZV'.
          WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP   + WA_ZSDT0220-MENGE.
        WHEN 'ZR'.
          WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP   - WA_ZSDT0220-MENGE.
        WHEN 'ZT'.
          WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP   - WA_ZSDT0220-MENGE.
        WHEN 'ZU'.
          WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP   + WA_ZSDT0220-MENGE.
        WHEN 'ZO'.
          WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP   - WA_ZSDT0220-MENGE.
          MOVE-CORRESPONDING WA_CONTROLE TO WA_CONTROLE_02.
        WHEN 'ZH'.
          WA_CONTROLE-QTD_SAP    =  WA_CONTROLE-QTD_SAP   - WA_ZSDT0220-MENGE.
          MOVE-CORRESPONDING WA_CONTROLE TO WA_CONTROLE_02.
      ENDCASE.

      IF  WA_PRODUTO-VOLUME <> '0'.
        WA_CONTROLE-QTD_INDEA  = ( WA_CONTROLE-QTD_SAP  /  WA_PRODUTO-VOLUME ).
      ELSE.
        WA_CONTROLE-QTD_INDEA  =   '0'.
      ENDIF.
      APPEND WA_CONTROLE TO IT_CONTROLE.

      CLEAR WA_MAKT.

      READ TABLE IT_PRODUTO INTO WPRODUTO WITH KEY MATNR = WA_NOTAS_MANUAIS-MATNR.

      SELECT SINGLE * FROM MAKT INTO WA_MAKT
      WHERE MATNR EQ WA_ZSDT0220-MATNR.

      WA_SD_AUX-BUKRS           =  WA_ZSDT0220-BUKRS.
      WA_SD_AUX-BRANCH          =  WA_ZSDT0220-BRANCH.
      WA_SD_AUX-MATNR           =  WA_ZSDT0220-MATNR.
      WA_SD_AUX-MAKTX           =  WA_MAKT-MAKTX.
      WA_SD_AUX-CHARG           =  WA_ZSDT0220-CHARG.
      WA_SD_AUX-LOCAL_ESTOQUE   =  WA_T001W-NAME1.


      IF WA_PRODUTO-VOLUME <> '0'.
        WA_SD_AUX-SALDO_SAP       = ( WA_CONTROLE-QTD_SAP / WA_PRODUTO-VOLUME ).
      ELSE.
        WA_SD_AUX-SALDO_SAP       = ( WA_CONTROLE-QTD_SAP ).
      ENDIF.

      WA_SD_AUX-SALDO_INDEA     =  WA_PRODUTO-SALDO.
      WA_SD_AUX-UNIDADE_MEDIDA  =  WPRODUTO-UNIDADE_MEDIDA.

      MOVE-CORRESPONDING WA_SD_AUX TO WA_SD_AUX_02.
      COLLECT WA_SD_AUX INTO IT_SD_AUX.



      CLEAR: WA_SD_AUX_02-SALDO_SAP, WA_SD_AUX_02-SALDO_INDEA,
             WA_CONTROLE_02-QTD_SAP, WA_CONTROLE_02-QTD_INDEA.

      IF ( WA_NOTAS_MANUAIS-NFTYPE EQ 'ZA' AND  WA_NOTAS_MANUAIS-ITMTYP EQ 'ZC' ) OR
           WA_NOTAS_MANUAIS-NFTYPE EQ 'ZO' OR   WA_NOTAS_MANUAIS-NFTYPE EQ 'ZH'.

        SELECT SINGLE * FROM LFA1 INTO WA_LFA1
         WHERE LIFNR EQ WA_NOTAS_MANUAIS-PARID.

        WA_CONTROLE_02-LOCAL_ESTOQUE =  WA_LFA1-NAME1.
        WA_CONTROLE_02-QTD_SAP       =  WA_CONTROLE_02-QTD_SAP    + WA_ZSDT0220-MENGE.
        WA_CONTROLE_02-QTD_INDEA     =  WA_CONTROLE_02-QTD_INDEA  + WA_PRODUTO-SALDO.
        APPEND WA_CONTROLE_02 TO IT_CONTROLE.


        WA_SD_AUX_02-LOCAL_ESTOQUE = WA_LFA1-NAME1.

        IF WA_PRODUTO-VOLUME <> '0'.
          WA_SD_AUX_02-SALDO_SAP       = (  WA_CONTROLE_02-QTD_SAP  / WA_PRODUTO-VOLUME ).
        ELSE.
          WA_SD_AUX_02-SALDO_SAP       = (  WA_CONTROLE_02-QTD_SAP  ).
        ENDIF.
        WA_SD_AUX_02-SALDO_INDEA       =  WA_PRODUTO-SALDO.
        COLLECT WA_SD_AUX_02 INTO IT_SD_AUX.
      ENDIF.
    ENDIF.

    CLEAR: WA_CONTROLE, WA_PRODUTO, WA_NOTAS, WA_SD_AUX, WA_ZSDT0220.
  ENDLOOP.

  MOVE-CORRESPONDING IT_SD_AUX TO IT_SAIDA_01.

  LOOP AT IT_SAIDA_01 INTO WA_SAIDA_01.
    IF WA_SAIDA_01-SALDO_SAP <> WA_SAIDA_01-SALDO_INDEA.
      WA_SAIDA_01-COLOR = 'C610'.
    ENDIF.
    MODIFY IT_SAIDA_01 FROM WA_SAIDA_01 INDEX SY-TABIX.
  ENDLOOP.

  SORT IT_SAIDA_01 BY BUKRS BRANCH MATNR CHARG ASCENDING.
ENDFORM.


FORM ALV_01.
  CLEAR WL_FCAT_01.
  REFRESH IT_FCAT_01[].

  PERFORM PREENCHE_CAT_01 USING :
        'BUKRS'             'Empresa'           '07'    ''    ''     ''     ''    '',
        'BRANCH'            'Filial'            '06'    ''    ''     ''     ''    '',
        'MATNR'             'Mateial'           '10'    'X'   ''     ''     ''    '',
        'MAKTX'             'Descrição'         '30'    ''    ''     ''     ''    '',
        'CHARG'             'Lote'              '10'    ''    ''     ''     ''    '',
        'LOCAL_ESTOQUE'     'Local Estoque'     '25'    ''    ''     ''     ''    '',
        'SALDO_SAP'         'Saldo SAP'         '10'    ''    'X'    ''     ''    '',
        'SALDO_INDEA'       'Saldo Indea'       '10'    ''    ''     ''     ''    '',
        'UNIDADE_MEDIDA'    'UM Indea'          '30'    ''    ''     ''     ''    ''.
ENDFORM.


FORM PREENCHE_CAT_01 USING VALUE(P_CAMPO)
                           VALUE(P_DESC)
                           VALUE(P_TAM)
                           VALUE(P_ZERO)
                           VALUE(P_HOT)
                           VALUE(P_SUM)
                           VALUE(P_JUST)
                           VALUE(P_COR).

  WL_FCAT_01-FIELDNAME = P_CAMPO.
  WL_FCAT_01-SCRTEXT_L = P_DESC.
  WL_FCAT_01-SCRTEXT_M = P_DESC.
  WL_FCAT_01-SCRTEXT_S = P_DESC.
  WL_FCAT_01-OUTPUTLEN = P_TAM.
  WL_FCAT_01-HOTSPOT   = P_HOT.
  WL_FCAT_01-NO_ZERO   = P_ZERO.
  WL_FCAT_01-DO_SUM    = P_SUM.
  WL_FCAT_01-JUST      = P_JUST.
  WL_FCAT_01-EMPHASIZE = P_COR.
  APPEND WL_FCAT_01 TO  IT_FCAT_01.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.
  DATA: WA_EVENT    TYPE REF TO LCL_EVENT_RECEIVER.

  SET PF-STATUS 'ST_0100'.
  SET TITLEBAR 'TL_0100'.

  PERFORM ALV_01.

  IF G_CUSTOM_CONTAINER_01 IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER_01
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER01'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        OTHERS                      = 6.

    IF G_GRID_01 IS INITIAL AND  G_CUSTOM_CONTAINER_01 IS NOT INITIAL.
      CREATE OBJECT G_GRID_01
        EXPORTING
          I_PARENT          = G_CUSTOM_CONTAINER_01
        EXCEPTIONS
          ERROR_CNTL_CREATE = 1
          ERROR_CNTL_INIT   = 2
          ERROR_CNTL_LINK   = 3
          ERROR_DP_CREATE   = 4
          OTHERS            = 5.
    ENDIF.

    WL_FUNCTION_01 = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
    APPEND WL_FUNCTION_01 TO TL_FUNCTION_01.
    WL_FUNCTION_01 = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
    APPEND WL_FUNCTION_01 TO TL_FUNCTION_01.
    WL_FUNCTION_01 = CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW.
    APPEND WL_FUNCTION_01 TO TL_FUNCTION_01.
    WL_FUNCTION_01 = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
    APPEND WL_FUNCTION_01 TO TL_FUNCTION_01.
    WL_FUNCTION_01 = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
    APPEND WL_FUNCTION_01 TO TL_FUNCTION_01.
    WL_FUNCTION_01 = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
    APPEND WL_FUNCTION_01 TO TL_FUNCTION_01.
    WL_FUNCTION_01 = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
    APPEND WL_FUNCTION_01 TO TL_FUNCTION_01.
    WL_FUNCTION_01 = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
    APPEND WL_FUNCTION_01 TO TL_FUNCTION_01.
    WL_FUNCTION_01 = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
    APPEND WL_FUNCTION_01 TO TL_FUNCTION_01.
    WL_FUNCTION_01 = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND WL_FUNCTION_01 TO TL_FUNCTION_01.
    WL_FUNCTION_01 = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND WL_FUNCTION_01 TO TL_FUNCTION_01.
    WL_FUNCTION_01 = CL_GUI_ALV_GRID=>MC_FC_CHECK.
    APPEND WL_FUNCTION_01 TO TL_FUNCTION_01.
    WL_FUNCTION_01 = CL_GUI_ALV_GRID=>MC_FC_REFRESH.
    APPEND WL_FUNCTION_01 TO TL_FUNCTION_01.

    IF WA_EVENT IS INITIAL.
      CREATE OBJECT WA_EVENT.
      SET HANDLER WA_EVENT->ZM_HANDLE_CLICK FOR G_GRID_01.
    ENDIF.

    WA_LAYOUT_01-INFO_FNAME = 'COLOR'.
    WA_LAYOUT_01-STYLEFNAME = 'CELLTAB'.

    CALL METHOD G_GRID_01->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT                     = WA_LAYOUT_01
        I_SAVE                        = 'A'
        IT_TOOLBAR_EXCLUDING          = TL_FUNCTION_01
      CHANGING
        IT_OUTTAB                     = IT_SAIDA_01[]
        IT_FIELDCATALOG               = IT_FCAT_01
      EXCEPTIONS
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        OTHERS                        = 4.

    CALL METHOD G_GRID_01->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.

    CALL METHOD G_GRID_01->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

    CALL METHOD G_GRID_01->SET_READY_FOR_INPUT
      EXPORTING
        I_READY_FOR_INPUT = 1.

  ELSE.
    CALL METHOD G_GRID_01->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = WA_STABLE_01.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.
  CASE SY-UCOMM.
    WHEN  'BACK'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.


FORM ALV_02.
  CLEAR WL_FCAT_02.
  REFRESH IT_FCAT_02[].

  PERFORM PREENCHE_CAT_02 USING :
        'BUKRS '         'Empresa'                '07'    ''    ''     ''     ''    '',
        'BRANCH'         'Filial'                 '06'    ''    ''     ''     ''    '',
        'DOCNUM'         'Nº Documento'           '12'    'X'   ''     ''     ''    '',
        'NFNUM'          'NFe'                    '10'    ''    ''     ''     ''    '',
        'DIRECT'         'Direção'                '07'    ''    ''     ''     ''    '',
        'ITMNUM'         'Item'                   '05'    ''    ''     ''     ''    '',
        'MATNR'          'Material'               '10'    'X'   ''     ''     ''    '',
        'MAKTX'          'Descrição'              '30'    ''    ''     ''     ''    '',
        'CHARG'          'Lote'                   '20'    ''    ''     ''     ''    '',
        'QNTD_NF'        'Quantidade NF'          '15'    ''    ''     'X'    ''    '',
        'UM_NF'          'UM NF'                  '10'    ''    ''     ''     ''    '',
        'QNTD_ENVIADA'   'Quantidade Enviada'     '18'    ''    ''     'X'    ''    '',
        'UM_ENVIADA'     'UM Enviada'             '25'    ''    ''     ''     ''    ''.
ENDFORM.


FORM PREENCHE_CAT_02 USING VALUE(P_CAMPO)
                           VALUE(P_DESC)
                           VALUE(P_TAM)
                           VALUE(P_ZERO)
                           VALUE(P_HOT)
                           VALUE(P_SUM)
                           VALUE(P_JUST)
                           VALUE(P_COR).

  WL_FCAT_02-FIELDNAME = P_CAMPO.
  WL_FCAT_02-SCRTEXT_L = P_DESC.
  WL_FCAT_02-SCRTEXT_M = P_DESC.
  WL_FCAT_02-SCRTEXT_S = P_DESC.
  WL_FCAT_02-OUTPUTLEN = P_TAM.
  WL_FCAT_02-HOTSPOT   = P_HOT.
  WL_FCAT_02-NO_ZERO   = P_ZERO.
  WL_FCAT_02-DO_SUM    = P_SUM.
  WL_FCAT_02-JUST      = P_JUST.
  WL_FCAT_02-EMPHASIZE = P_COR.
  APPEND WL_FCAT_02 TO  IT_FCAT_02.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0101  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0101 OUTPUT.
  SET PF-STATUS 'ST_0101'.
  SET TITLEBAR 'TL_0101'.

  PERFORM ALV_02.

  IF G_CUSTOM_CONTAINER_02 IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER_02
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER02'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        OTHERS                      = 6.

    IF G_GRID_02 IS INITIAL AND  G_CUSTOM_CONTAINER_02 IS NOT INITIAL.
      CREATE OBJECT G_GRID_02
        EXPORTING
          I_PARENT          = G_CUSTOM_CONTAINER_02
        EXCEPTIONS
          ERROR_CNTL_CREATE = 1
          ERROR_CNTL_INIT   = 2
          ERROR_CNTL_LINK   = 3
          ERROR_DP_CREATE   = 4
          OTHERS            = 5.
    ENDIF.

    WL_FUNCTION_02 = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
    APPEND WL_FUNCTION_02 TO TL_FUNCTION_02.
    WL_FUNCTION_02 = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
    APPEND WL_FUNCTION_02 TO TL_FUNCTION_02.
    WL_FUNCTION_02 = CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW.
    APPEND WL_FUNCTION_02 TO TL_FUNCTION_02.
    WL_FUNCTION_02 = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
    APPEND WL_FUNCTION_02 TO TL_FUNCTION_02.
    WL_FUNCTION_02 = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
    APPEND WL_FUNCTION_02 TO TL_FUNCTION_02.
    WL_FUNCTION_02 = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
    APPEND WL_FUNCTION_02 TO TL_FUNCTION_02.
    WL_FUNCTION_02 = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
    APPEND WL_FUNCTION_02 TO TL_FUNCTION_02.
    WL_FUNCTION_02 = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
    APPEND WL_FUNCTION_02 TO TL_FUNCTION_02.
    WL_FUNCTION_02 = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
    APPEND WL_FUNCTION_02 TO TL_FUNCTION_02.
    WL_FUNCTION_02 = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND WL_FUNCTION_02 TO TL_FUNCTION_02.
    WL_FUNCTION_02 = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND WL_FUNCTION_02 TO TL_FUNCTION_02.
    WL_FUNCTION_02 = CL_GUI_ALV_GRID=>MC_FC_CHECK.
    APPEND WL_FUNCTION_02 TO TL_FUNCTION_02.
    WL_FUNCTION_02 = CL_GUI_ALV_GRID=>MC_FC_REFRESH.
    APPEND WL_FUNCTION_02 TO TL_FUNCTION_02.


    CALL METHOD G_GRID_02->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT                     = WA_LAYOUT_02
        I_SAVE                        = 'A'
        IT_TOOLBAR_EXCLUDING          = TL_FUNCTION_02
      CHANGING
        IT_OUTTAB                     = IT_SAIDA_02[]
        IT_FIELDCATALOG               = IT_FCAT_02
      EXCEPTIONS
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        OTHERS                        = 4.

    CALL METHOD G_GRID_02->SET_READY_FOR_INPUT
      EXPORTING
        I_READY_FOR_INPUT = 1.

  ELSE.
    CALL METHOD G_GRID_02->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = WA_STABLE_02.
  ENDIF.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0101  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0101 INPUT.
  CASE SY-UCOMM.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.

FORM Z_HANDLER_DOUBLE_CLICK  USING     P_ROW
                                       P_COLUMN
                                       P_ROW_NO.
  CASE P_COLUMN.
    WHEN 'SALDO_SAP'.

      REFRESH IT_SAIDA_02.
      CLEAR WA_SAIDA_02.


      READ TABLE IT_SAIDA_01 INTO WA_SAIDA_01 INDEX P_ROW.
      IF SY-SUBRC = 0.

        LOOP AT IT_CONTROLE INTO WA_CONTROLE
          WHERE MATNR EQ WA_SAIDA_01-MATNR
           AND  CHARG EQ WA_SAIDA_01-CHARG
           AND  LOCAL_ESTOQUE EQ WA_SAIDA_01-LOCAL_ESTOQUE.

          SELECT SINGLE *
            FROM MAKT INTO WA_MAKT
           WHERE MATNR EQ WA_CONTROLE-MATNR.


          WA_SAIDA_02-BUKRS         =  WA_SAIDA_01-BUKRS.
          WA_SAIDA_02-BRANCH        =  WA_SAIDA_01-BRANCH.
          WA_SAIDA_02-DOCNUM        =  WA_CONTROLE-DOCNUM.
          WA_SAIDA_02-NFNUM         =  WA_CONTROLE-NFENUM.
          WA_SAIDA_02-DIRECT        =  WA_CONTROLE-DIRECT.
          WA_SAIDA_02-ITMNUM        =  WA_CONTROLE-ITMNUM.
          WA_SAIDA_02-MATNR         =  WA_CONTROLE-MATNR.
          WA_SAIDA_02-MAKTX         =  WA_MAKT-MAKTX.
          WA_SAIDA_02-CHARG         =  WA_CONTROLE-CHARG.
          WA_SAIDA_02-QNTD_NF       =  WA_CONTROLE-QTD_SAP.
          WA_SAIDA_02-UM_NF         =  WA_CONTROLE-MEINS.
          WA_SAIDA_02-QNTD_ENVIADA  =  WA_CONTROLE-QTD_INDEA.
          WA_SAIDA_02-UM_ENVIADA    =  WA_SAIDA_01-UNIDADE_MEDIDA.

          APPEND WA_SAIDA_02 TO IT_SAIDA_02.
          CLEAR: WA_CONTROLE, WA_MAKT, WA_SAIDA_02.
        ENDLOOP.
      ENDIF.

      SORT IT_SAIDA_02 BY DOCNUM ASCENDING.
      CALL SCREEN 0101.

  ENDCASE.
ENDFORM.


FORM ALV_03.
  CLEAR WL_FCAT_03.
  REFRESH IT_FCAT_03[].

  PERFORM PREENCHE_CAT_03 USING :
        'BUKRS'    'Empresa'          '07'    ''    ''     ''     ''    ''    ''   '',
        'BRANCH'   'Filial'           '06'    ''    ''     ''     ''    ''    ''   '',
        'DOCNUM'   'Nº Documento'     '12'    ''    ''     ''     ''    ''    ''   '',
        'NFENUM'   'Nr.Nota'          '10'    ''    ''     ''     ''    ''    ''   '',
        'ITMNUM'   'Item'             '10'    ''    ''     ''     ''    ''    ''   '',
        'MATNR'    'Material'         '10'    'X'   ''     ''     ''    ''    ''   '',
        'CHARG'    'Lote'             '20'    ''    ''     ''     ''    ''    ''   '',
        'MENGE'    'Quantidade'       '10'    ''    ''     ''     ''    ''    ''   '',
        'MEINS'    'UM'               '04'    ''    ''     ''     ''    ''    ''   ''.
ENDFORM.


FORM PREENCHE_CAT_03 USING VALUE(P_CAMPO)
                           VALUE(P_DESC)
                           VALUE(P_TAM)
                           VALUE(P_ZERO)
                           VALUE(P_HOT)
                           VALUE(P_SUM)
                           VALUE(P_JUST)
                           VALUE(P_COR)
                           VALUE(P_EDIT)
                           VALUE(P_F4).

  WL_FCAT_03-FIELDNAME    = P_CAMPO.
  WL_FCAT_03-SCRTEXT_L    = P_DESC.
  WL_FCAT_03-SCRTEXT_M    = P_DESC.
  WL_FCAT_03-SCRTEXT_S    = P_DESC.
  WL_FCAT_03-OUTPUTLEN    = P_TAM.
  WL_FCAT_03-HOTSPOT      = P_HOT.
  WL_FCAT_03-NO_ZERO      = P_ZERO.
  WL_FCAT_03-DO_SUM       = P_SUM.
  WL_FCAT_03-JUST         = P_JUST.
  WL_FCAT_03-EMPHASIZE    = P_COR.
  WL_FCAT_03-EDIT         = P_EDIT.
  WL_FCAT_03-F4AVAILABL  = P_F4.

  APPEND WL_FCAT_03 TO  IT_FCAT_03.
ENDFORM.


*&---------------------------------------------------------------------*
*&      Module  STATUS_0102  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0102 OUTPUT.

  SET PF-STATUS 'ST_0102'.
  SET TITLEBAR 'TL_0102'.

  PERFORM ALV_03.

  IF G_CUSTOM_CONTAINER_03 IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER_03
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER03'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        OTHERS                      = 6.

    IF G_GRID_03 IS INITIAL AND  G_CUSTOM_CONTAINER_03 IS NOT INITIAL.
      CREATE OBJECT G_GRID_03
        EXPORTING
          I_PARENT          = G_CUSTOM_CONTAINER_03
        EXCEPTIONS
          ERROR_CNTL_CREATE = 1
          ERROR_CNTL_INIT   = 2
          ERROR_CNTL_LINK   = 3
          ERROR_DP_CREATE   = 4
          OTHERS            = 5.
    ENDIF.

    WL_FUNCTION_03  = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
    APPEND WL_FUNCTION_03 TO TL_FUNCTION_03.
    WL_FUNCTION_03 = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
    APPEND WL_FUNCTION_03 TO TL_FUNCTION_03.
    WL_FUNCTION_03 = CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW.
    APPEND WL_FUNCTION_03 TO TL_FUNCTION_03.
    WL_FUNCTION_03 = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
    APPEND WL_FUNCTION_03 TO TL_FUNCTION_03.
    WL_FUNCTION_03 = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
    APPEND WL_FUNCTION_03 TO TL_FUNCTION_03.
    WL_FUNCTION_03 = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
    APPEND WL_FUNCTION_03 TO TL_FUNCTION_03.
    WL_FUNCTION_03 = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
    APPEND WL_FUNCTION_03 TO TL_FUNCTION_03.
    WL_FUNCTION_03 = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
    APPEND WL_FUNCTION_03 TO TL_FUNCTION_03.
    WL_FUNCTION_03 = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
    APPEND WL_FUNCTION_03 TO TL_FUNCTION_03.
    WL_FUNCTION_03 = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND WL_FUNCTION_03 TO TL_FUNCTION_03.
    WL_FUNCTION_03 = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
    APPEND WL_FUNCTION_03 TO TL_FUNCTION_03.
    WL_FUNCTION_03 = CL_GUI_ALV_GRID=>MC_FC_CHECK.
    APPEND WL_FUNCTION_03 TO TL_FUNCTION_03.
    WL_FUNCTION_03 = CL_GUI_ALV_GRID=>MC_FC_REFRESH.
    APPEND WL_FUNCTION_03 TO TL_FUNCTION_03.

    WA_LAYOUT_03-STYLEFNAME = 'CELLTAB'.

    CALL METHOD G_GRID_03->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT                     = WA_LAYOUT_03
        I_SAVE                        = 'A'
        IT_TOOLBAR_EXCLUDING          = TL_FUNCTION_03
      CHANGING
        IT_OUTTAB                     = IT_SAIDA_03[]
        IT_FIELDCATALOG               = IT_FCAT_03
      EXCEPTIONS
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        OTHERS                        = 4.


    CALL METHOD G_GRID_03->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.

    CALL METHOD G_GRID_03->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

    CALL METHOD G_GRID_03->SET_READY_FOR_INPUT
      EXPORTING
        I_READY_FOR_INPUT = 1.

  ELSE.

    CALL METHOD G_GRID_03->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = WA_STABLE_03.

    CALL METHOD G_GRID_03->SET_FRONTEND_FIELDCATALOG
      EXPORTING
        IT_FIELDCATALOG = IT_FCAT_03.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0102  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0102 INPUT.

  CASE SY-UCOMM.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
    WHEN 'SALVAR'.
      PERFORM Z_SALVAR_DADOS.

    WHEN '&INS'.
      CLEAR WA_SAIDA_03.
      APPEND INITIAL LINE TO IT_SAIDA_03.

      FREE WA_SAIDA_03-CELLTAB.
      GT_ESTILO_03 =  VALUE #(  ( FIELDNAME = 'BUKRS'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED )
                                ( FIELDNAME = 'BRANCH'     STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED )
                                ( FIELDNAME = 'DOCNUM'     STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED )
                                ( FIELDNAME = 'NFENUM'     STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED )
                                ( FIELDNAME = 'ITMNUM'     STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED )
                                ( FIELDNAME = 'MATNR'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED )
                                ( FIELDNAME = 'CHARG'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED )
                                ( FIELDNAME = 'MENGE'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED )
                                ( FIELDNAME = 'MEINS'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED )   ).
      INSERT LINES OF GT_ESTILO_03 INTO TABLE WA_SAIDA_03-CELLTAB.
      MODIFY IT_SAIDA_03 FROM WA_SAIDA_03 INDEX SY-TABIX.

    WHEN '&DEL'.
      CALL METHOD G_GRID_03->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = TG_SELECTEDROW_03.

      IF TG_SELECTEDROW_03[] IS INITIAL.
        MESSAGE 'Favor selecione uma linha!' TYPE 'I'.
        EXIT.
      ELSE.
        LOOP AT TG_SELECTEDROW_03 INTO WG_SELECTEDROW_03.

          READ TABLE IT_SAIDA_03 INTO WA_SAIDA_03 INDEX WG_SELECTEDROW_03-INDEX.

          DELETE FROM ZSDT0220 WHERE ID_SEQ EQ  WA_SAIDA_03-ID_SEQ.

        ENDLOOP.

        REFRESH IT_SAIDA_03.
        CLEAR WA_SAIDA_03.

        PERFORM Z_BUSCA_LANC.
      ENDIF.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  Z_BUSCA_LANC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM Z_BUSCA_LANC .

  SELECT *
    FROM ZSDT0220 INTO TABLE IT_ZSDT0220.

  LOOP AT IT_ZSDT0220 INTO WA_ZSDT0220.

    WA_SAIDA_03-ID_SEQ    = WA_ZSDT0220-ID_SEQ.
    WA_SAIDA_03-BUKRS     = WA_ZSDT0220-BUKRS.
    WA_SAIDA_03-BRANCH    = WA_ZSDT0220-BRANCH.
    WA_SAIDA_03-DOCNUM    = WA_ZSDT0220-DOCNUM.
    WA_SAIDA_03-NFENUM    = WA_ZSDT0220-NFENUM.
    WA_SAIDA_03-ITMNUM    = WA_ZSDT0220-ITMNUM.
    WA_SAIDA_03-MATNR     = WA_ZSDT0220-MATNR.
    WA_SAIDA_03-CHARG     = WA_ZSDT0220-CHARG.
    WA_SAIDA_03-MENGE     = WA_ZSDT0220-MENGE.
    WA_SAIDA_03-MEINS     = WA_ZSDT0220-MEINS.

    FREE WA_SAIDA_03-CELLTAB.
    GT_ESTILO_03 =  VALUE #(  ( FIELDNAME = 'BUKRS'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                              ( FIELDNAME = 'BRANCH'     STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                              ( FIELDNAME = 'DOCNUM'     STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                              ( FIELDNAME = 'NFENUM'     STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                              ( FIELDNAME = 'ITMNUM'     STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                              ( FIELDNAME = 'MATNR'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                              ( FIELDNAME = 'CHARG'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                              ( FIELDNAME = 'MENGE'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                              ( FIELDNAME = 'MEINS'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )   ).
    INSERT LINES OF GT_ESTILO_03 INTO TABLE WA_SAIDA_03-CELLTAB.

    APPEND WA_SAIDA_03 TO IT_SAIDA_03.
    CLEAR: WA_SAIDA_03, WA_ZSDT0220.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  Z_SALVAR_DADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM Z_SALVAR_DADOS .
  DATA IT_SALVAR TYPE TABLE OF  ZSDT0220.
  DATA WA_SALVAR TYPE ZSDT0220.

  REFRESH IT_SALVAR.
  CLEAR WA_SALVAR.


  LOOP AT IT_SAIDA_03 INTO WA_SAIDA_03.

    SELECT SINGLE * FROM ZSDT0220 INTO @DATA(T220)
      WHERE BUKRS   EQ @WA_SAIDA_03-BUKRS
      AND   BRANCH  EQ @WA_SAIDA_03-BRANCH
      AND   DOCNUM  EQ @WA_SAIDA_03-DOCNUM
      AND   NFENUM  EQ @WA_SAIDA_03-NFENUM
      AND   ITMNUM  EQ @WA_SAIDA_03-ITMNUM.

    IF SY-SUBRC <> 0.

      IF WA_SAIDA_03-BUKRS IS NOT INITIAL.

        SELECT SINGLE * FROM T001 INTO @DATA(WT001)
         WHERE BUKRS EQ @WA_SAIDA_03-BUKRS.

        IF SY-SUBRC = 0.
          WA_SALVAR-BUKRS  =  WA_SAIDA_03-BUKRS.
        ELSE.
          MESSAGE 'Empresa não existe!' TYPE 'I'.
          EXIT.
        ENDIF.
      ELSE.
        MESSAGE 'Favor informar a Empresa!' TYPE 'I'.
        EXIT.
      ENDIF.

      IF WA_SAIDA_03-BRANCH IS NOT INITIAL.
        SELECT SINGLE * FROM T001W INTO @DATA(WT001W)
         WHERE WERKS EQ @WA_SAIDA_03-BRANCH.

        IF SY-SUBRC = 0.
          WA_SALVAR-BRANCH  =  WA_SAIDA_03-BRANCH.
        ELSE.
          MESSAGE 'Filial não existe!' TYPE 'I'.
          EXIT.
        ENDIF.
      ELSE.
        MESSAGE 'Favor informar a Filial!' TYPE 'I'.
        EXIT.
      ENDIF.

      IF WA_SAIDA_03-DOCNUM IS NOT INITIAL .
        SELECT SINGLE * FROM J_1BNFDOC INTO @DATA(J_DOC)
          WHERE DOCNUM EQ @WA_SAIDA_03-DOCNUM.

        IF SY-SUBRC = 0.
          WA_SALVAR-DOCNUM = WA_SAIDA_03-DOCNUM.
        ELSE.
          MESSAGE 'Nº Documento não existe!' TYPE 'I'.
          EXIT.
        ENDIF.
      ELSEIF  WA_SAIDA_03-DOCNUM = '0'.
        WA_SALVAR-DOCNUM = WA_SAIDA_03-DOCNUM.
      ELSE.
        MESSAGE 'Favor informar a Nº Documento!' TYPE 'I'.
        EXIT.
      ENDIF.

      IF WA_SAIDA_03-ITMNUM IS NOT INITIAL.
        WA_SALVAR-ITMNUM = WA_SAIDA_03-ITMNUM.
      ELSE.
        MESSAGE 'Favor informar o item da nota fiscal' TYPE 'I'.
        EXIT.
      ENDIF.

      IF WA_SAIDA_03-MATNR IS NOT INITIAL.
        SELECT SINGLE * FROM MAKT INTO @DATA(WA_MAKT)
          WHERE MATNR EQ @WA_SAIDA_03-MATNR.

        IF SY-SUBRC = 0.
          WA_SALVAR-MATNR = WA_SAIDA_03-MATNR.
        ELSE.
          MESSAGE 'Material não existe!' TYPE 'I'.
          EXIT.
        ENDIF.
      ELSE.
        MESSAGE 'Favor informar o Material!' TYPE 'I'.
        EXIT.
      ENDIF.

      IF WA_SAIDA_03-NFENUM IS NOT INITIAL.
        CLEAR J_DOC.

        SELECT SINGLE * FROM J_1BNFDOC INTO J_DOC
          WHERE DOCNUM EQ WA_SAIDA_03-DOCNUM.

        IF J_DOC-NFENUM IS  NOT INITIAL OR J_DOC-NFNUM IS NOT INITIAL.
          WA_SALVAR-NFENUM = WA_SAIDA_03-NFENUM.

        ELSE.
          MESSAGE 'Nº Nota Fiscal não existe!'  TYPE  'I'.
          EXIT.
        ENDIF.
      ELSE.
        MESSAGE 'Favor informar o Nº NF!' TYPE 'I'.
        EXIT.
      ENDIF.

      SELECT * FROM ZSDT0220 INTO TABLE @DATA(TSEQUENCIA).
      SORT TSEQUENCIA BY ID_SEQ DESCENDING.
      READ TABLE TSEQUENCIA INTO DATA(WSEQ) INDEX 1.

      WA_SALVAR-ID_SEQ      = WSEQ-ID_SEQ + 1.
      WA_SALVAR-MANDT       = SY-MANDT.
      WA_SALVAR-CHARG       = WA_SAIDA_03-CHARG.
      WA_SALVAR-MENGE       = WA_SAIDA_03-MENGE.
      WA_SALVAR-MEINS       = WA_SAIDA_03-MEINS.
      WA_SALVAR-USNAM       = SY-UNAME.
      WA_SALVAR-DATA_ATUAL  = SY-DATUM.
      WA_SALVAR-HORA_ATUAL  = SY-UZEIT.

      INSERT ZSDT0220 FROM WA_SALVAR.
      COMMIT WORK.

      CLEAR: WA_SALVAR, WA_SAIDA_03.
    ENDIF.
  ENDLOOP.

  IF WA_SALVAR IS INITIAL.
    MESSAGE 'Dados gravado com sucesso!' TYPE 'I'.

    LOOP AT IT_SAIDA_03 INTO WA_SAIDA_03.
      FREE WA_SAIDA_03-CELLTAB.
      GT_ESTILO_03 =  VALUE #( ( FIELDNAME = 'BUKRS'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                               ( FIELDNAME = 'BRANCH'     STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                               ( FIELDNAME = 'DOCNUM'     STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                               ( FIELDNAME = 'NFENUM'     STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                               ( FIELDNAME = 'ITMNUM'     STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                               ( FIELDNAME = 'MATNR'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                               ( FIELDNAME = 'CHARG'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                               ( FIELDNAME = 'MENGE'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED )
                               ( FIELDNAME = 'MEINS'      STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED ) ).
      INSERT LINES OF GT_ESTILO_03 INTO TABLE WA_SAIDA_03-CELLTAB.
      MODIFY IT_SAIDA_03 FROM WA_SAIDA_03.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MODIFICA_TELA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM MODIFICA_TELA .

  LOOP AT SCREEN.
    IF P_LAN = 'X'.
      IF SCREEN-GROUP1 = 'T1'.
        SCREEN-INVISIBLE = 1.
        SCREEN-INPUT     = 0.
        SCREEN-ACTIVE    = 0.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.
    ELSE.
      IF SCREEN-GROUP1 = 'T1'.
        SCREEN-INVISIBLE = 0.
        SCREEN-INPUT     = 1.
        SCREEN-ACTIVE    = 1.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.
