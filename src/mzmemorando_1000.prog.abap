*----------------------------------------------------------------------*
***INCLUDE MZMEMORANDO_1000 .
*----------------------------------------------------------------------*

  DATA: WA_CONT_C   TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
        WA_ALV_C    TYPE REF TO CL_GUI_ALV_GRID,
        IT_FCAT_C   TYPE TABLE OF LVC_S_FCAT,
        WA_FCAT_C   TYPE LVC_S_FCAT,
        WA_LAYOUT_C TYPE LVC_S_LAYO.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_1000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  MODULE USER_COMMAND_1000 INPUT.

    CASE OK_CODE.
      WHEN C_CSMEMO.
        CLEAR: OK_CODE.
        PERFORM PESQUISAR_MEMORANDOS.
      WHEN C_EDMEMO.
        CLEAR: OK_CODE.
        PERFORM EDITAR_MEMORANDOS.
      WHEN C_LIBMEMO.
        CLEAR: OK_CODE.
        PERFORM LIBERA_MEMORANDOS.
        PERFORM PESQUISAR_MEMORANDOS.
      WHEN C_LIBRESP.
        CLEAR: OK_CODE, L_RESP.
        PERFORM LIBERA_RESPONSAVEL.
        PERFORM PESQUISAR_MEMORANDOS.
        PERFORM EDITAR_MEMORANDOS.
      WHEN C_LANCME.
        CLEAR: OK_CODE.
        PERFORM CONSULTAR_MEMORANDOS.
      WHEN C_LANCNV.
        CLEAR: OK_CODE.
        PERFORM LANCAR_MEMORANDOS.
      WHEN C_DLMEMO.
        CLEAR: OK_CODE.
        PERFORM ELIMINAR_MEMORANDOS.
      WHEN C_CSPROTO.
        CLEAR: OK_CODE.
        PERFORM CHAMAR_PROTOCOLOS.
      WHEN C_CSNFMM.
        CLEAR: OK_CODE.
        PERFORM LANCAR_MEMORANDOS_NOTAS.
      WHEN C_CSNFMS.
        CLEAR: OK_CODE.
        PERFORM LANCAR_MEMORANDOS_NOTAS_S.
      WHEN C_CSPRINT.
        PERFORM EMITIR_MEMORANDO.
        CLEAR: OK_CODE.
      WHEN C_CSNOTAS.
        PERFORM EMITIR_NOTAS_VINCULADAS.
        CLEAR: OK_CODE.
      WHEN C_DLCANCEL.
        CLEAR: OK_CODE.
        PERFORM CANCELAR_MEMORANDO.
        PERFORM PESQUISAR_MEMORANDOS.
      WHEN C_BACK OR C_EXIT OR C_CANCEL.
        LEAVE PROGRAM.
      WHEN C_FLT01.
        CLEAR: OK_CODE.
        VG_DYNNR_FLT  = C_1001.
        CTLFICHAS_FTR-ACTIVETAB = C_FLT01.
      WHEN C_FLT02.
        CLEAR: OK_CODE.
        VG_DYNNR_FLT = C_1003.
        CTLFICHAS_FTR-ACTIVETAB = C_FLT02.
      WHEN C_FLT03.
        CLEAR: OK_CODE.
        VG_DYNNR_FLT = C_1005.
        CTLFICHAS_FTR-ACTIVETAB = C_FLT03.
      WHEN C_TABMEMO.
        CLEAR: OK_CODE.
        VG_DYNNR_RES  = C_1002.
        CTLFICHAS-ACTIVETAB = C_TABMEMO.
      WHEN C_TABNOTA.
        CLEAR: OK_CODE.
        VG_DYNNR_RES  = C_1004.
        CTLFICHAS-ACTIVETAB = C_TABNOTA.
    ENDCASE.

  ENDMODULE.                 " USER_COMMAND_1000  INPUT

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_SELECAO_MEMORANDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM VERIFICA_SELECAO_MEMORANDO  USING  P_VG_VERIFICA_SELECAO TYPE SY-SUBRC.

    DATA: IT_SELECTED_ROWS TYPE LVC_T_ROW,
          WA_SELECTED_ROWS TYPE LVC_S_ROW.

    CLEAR: WA_MEMORANDO.

    CALL METHOD CTL_ALV_MEMO->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = IT_SELECTED_ROWS.

    LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
      READ TABLE IT_MEMORANDOS_ALV INTO WA_MEMORANDO INDEX WA_SELECTED_ROWS-INDEX.
    ENDLOOP.

    IF NOT WA_MEMORANDO IS INITIAL.
      P_VG_VERIFICA_SELECAO = 0.
      INICIA_SELEC = 'X'.
    ELSE.
      MESSAGE TEXT-E01 TYPE C_E DISPLAY LIKE C_S.
    ENDIF.

*  READ TABLE it_memorandos INTO wa_memorando WITH KEY mark = c_x.
*  p_vg_verifica_selecao = sy-subrc.
*
*  IF NOT sy-subrc IS INITIAL.
*    MESSAGE text-e01 TYPE c_e DISPLAY LIKE c_s.
*  ENDIF.

  ENDFORM.                    " VERIFICA_SELECAO_MEMORANDO

*&---------------------------------------------------------------------*
*&      Form  PESQUISAR_MEMORANDOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM PESQUISAR_MEMORANDOS .


    TYPES: BEGIN OF TY_NOTA,
             SIGN   TYPE CHAR1,
             OPTION TYPE  CHAR2,
             LOW    TYPE Z_MEMORANDO,
             HIGH   TYPE Z_MEMORANDO,
           END OF TY_NOTA.

    DATA: VG_TABIX      TYPE SY-TABIX,
          WA_EMISSOR    TYPE ZMEMO_CLIENTE,
          DADOS_FORN    TYPE LFA1,
          DADOS_CLIN    TYPE KNA1,
          VG_CPF        TYPE C LENGTH 14,
          VG_CNPJ       TYPE C LENGTH 18,
          IT_EMISSOR    TYPE TABLE OF ZMEMO_CLIENTE INITIAL SIZE 0 WITH HEADER LINE,
          IT_REMETENTE  TYPE TABLE OF ZMEMO_CLIENTE INITIAL SIZE 0 WITH HEADER LINE,
          IT_REPRESENTA TYPE TABLE OF ZMEMO_CLIENTE INITIAL SIZE 0 WITH HEADER LINE,
          IT_PRODUTO    TYPE TABLE OF ZMEMO_PRODUTO INITIAL SIZE 0 WITH HEADER LINE,
          WA_PRODUTO    TYPE ZMEMO_PRODUTO,
          WA_MAKT       TYPE MAKT,
          WA_PRTER      TYPE LXHME_RANGE_C1,
          IT_PRTER      TYPE TABLE OF LXHME_RANGE_C1,
          WA_ZIB_NFE    TYPE ZIB_NFE,
          IT_MEMO_LOCAL TYPE TABLE OF ZMEMO_MEMORANDO INITIAL SIZE 0 WITH HEADER LINE,
          IT_J_1BNFLIN  TYPE TABLE OF ZMEMO_NF_ INITIAL SIZE 0 WITH HEADER LINE,
          WA_J_1BNFLIN  TYPE ZMEMO_NF_,
          WA_VBRP       TYPE VBRP,
          WA_LIPS       TYPE LIPS,
          IT_VBRP       TYPE TABLE OF VBRP INITIAL SIZE 0 WITH HEADER LINE,
          IT_LIPS       TYPE TABLE OF LIPS INITIAL SIZE 0 WITH HEADER LINE,
          IT_NOTA       TYPE TABLE OF TY_NOTA WITH HEADER LINE.

    INICIA_SELEC = 'X'.

    CLEAR: IT_MEMORANDOS[].

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = T_REMETE-LOW
      IMPORTING
        OUTPUT = T_REMETE-LOW.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = T_NRNOTA-LOW
      IMPORTING
        OUTPUT = T_NRNOTA-LOW.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = T_EMISSO-LOW
      IMPORTING
        OUTPUT = T_EMISSO-LOW.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = T_REPRES-LOW
      IMPORTING
        OUTPUT = T_REPRES-LOW.

    IF ( NOT T_PROPR IS INITIAL ) OR ( ( T_PROPR IS INITIAL ) AND ( T_TERCE IS INITIAL ) ).
      WA_PRTER-SIGN   = 'I'.
      WA_PRTER-OPTION = 'EQ'.
      WA_PRTER-LOW    = C_X.
      WA_PRTER-HIGH   = C_X.
      APPEND WA_PRTER TO IT_PRTER.
    ENDIF.

    IF ( NOT T_TERCE IS INITIAL ) OR ( ( T_PROPR IS INITIAL ) AND ( T_TERCE IS INITIAL ) ).
      WA_PRTER-SIGN   = 'I'.
      WA_PRTER-OPTION = 'EQ'.
      WA_PRTER-LOW    = ' '.
      WA_PRTER-HIGH   = ' '.
      APPEND WA_PRTER TO IT_PRTER.
    ENDIF.

    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE IT_MEMORANDOS
      FROM ZDOC_MEMORANDO AS ME
     INNER JOIN ZDOC_MEMO_NF_EXP AS NF ON NF~NR_NOTA_EXP EQ ME~NR_NOTA_EXP
     WHERE NF~NUMERO_NOTA     IN T_NRNOTA
       AND NF~SERIE           IN T_SERIE
       AND NF~EMISSOR         IN T_EMISSO
       AND ME~REMETENTE       IN T_REMETE
       AND NF~DT_EMISSAO_NOTA IN T_DT_EMI
       AND ME~REPRESENTANTE   IN T_REPRES
       AND ME~CANCELADO       EQ T_CANCS
       AND ME~NUMERO_MEMO     IN T_MEMOR
       AND NF~PROPRIO         IN IT_PRTER
       AND ME~STATUS          IN T_STATU.

    "Informações do representante da nota de exportação
    MOVE IT_MEMORANDOS[] TO IT_MEMORANDOS_AUX[].
    SORT IT_MEMORANDOS_AUX BY MATERIAL.
    DELETE ADJACENT DUPLICATES FROM IT_MEMORANDOS_AUX COMPARING MATERIAL.
    CLEAR: IT_PRODUTO.

    LOOP AT IT_MEMORANDOS_AUX INTO WA_MEMORANDO.
      CLEAR: WA_MAKT.

      SELECT SINGLE * INTO WA_MAKT
        FROM MAKT
       WHERE MATNR EQ WA_MEMORANDO-MATERIAL
         AND SPRAS EQ SY-LANGU.
      IF SY-SUBRC IS INITIAL.
        WA_PRODUTO-MATNR = WA_MAKT-MATNR.
        WA_PRODUTO-MAKTG = WA_MAKT-MAKTG.
        APPEND WA_PRODUTO TO IT_PRODUTO.
      ENDIF.
    ENDLOOP.
    SORT IT_PRODUTO BY MATNR.

    "Informações do representante da nota de exportação
    MOVE IT_MEMORANDOS[] TO IT_MEMORANDOS_AUX[].
    SORT IT_MEMORANDOS_AUX BY REPRESENTANTE.
    DELETE ADJACENT DUPLICATES FROM IT_MEMORANDOS_AUX COMPARING REPRESENTANTE.
    CLEAR: IT_REPRESENTA.

    LOOP AT IT_MEMORANDOS_AUX INTO WA_MEMORANDO.
      CLEAR: DADOS_CLIN.

      CALL FUNCTION 'Z_PARCEIRO_INFO'
        EXPORTING
          P_PARCEIRO = WA_MEMORANDO-REPRESENTANTE
          P_PARTYPE  = C_C
        CHANGING
          WA_INFO_C  = DADOS_CLIN.

      WA_EMISSOR-COD  = WA_MEMORANDO-REPRESENTANTE.
      WA_EMISSOR-NOME = DADOS_CLIN-NAME1.
      IF DADOS_CLIN-STKZN IS INITIAL.
        CALL FUNCTION 'CONVERSION_EXIT_CGCBR_OUTPUT'
          EXPORTING
            INPUT  = DADOS_CLIN-STCD1
          IMPORTING
            OUTPUT = VG_CNPJ.
        WA_EMISSOR-CNPJ = VG_CNPJ.
      ELSE.
        CALL FUNCTION 'CONVERSION_EXIT_CPFBR_OUTPUT'
          EXPORTING
            INPUT  = DADOS_CLIN-STCD2
          IMPORTING
            OUTPUT = VG_CPF.
        WA_EMISSOR-CNPJ = VG_CPF.
      ENDIF.

      APPEND WA_EMISSOR TO IT_REPRESENTA.
    ENDLOOP.

    SORT IT_REPRESENTA BY COD.

    "Informações do exportador da nota de exportação
    MOVE IT_MEMORANDOS[] TO IT_MEMORANDOS_AUX[].
    SORT IT_MEMORANDOS_AUX BY EMISSOR.
    DELETE ADJACENT DUPLICATES FROM IT_MEMORANDOS_AUX COMPARING EMISSOR.
    CLEAR: IT_EMISSOR.

    LOOP AT IT_MEMORANDOS_AUX INTO WA_MEMORANDO.
      CLEAR: DADOS_CLIN.

      CALL FUNCTION 'Z_PARCEIRO_INFO'
        EXPORTING
          P_PARCEIRO = WA_MEMORANDO-EMISSOR
          P_PARTYPE  = C_C
        CHANGING
          WA_INFO_C  = DADOS_CLIN.

      WA_EMISSOR-COD  = WA_MEMORANDO-EMISSOR.
      WA_EMISSOR-NOME = DADOS_CLIN-NAME1.
      IF DADOS_CLIN-STKZN IS INITIAL.
        CALL FUNCTION 'CONVERSION_EXIT_CGCBR_OUTPUT'
          EXPORTING
            INPUT  = DADOS_CLIN-STCD1
          IMPORTING
            OUTPUT = VG_CNPJ.
        WA_EMISSOR-CNPJ = VG_CNPJ.
      ELSE.
        CALL FUNCTION 'CONVERSION_EXIT_CPFBR_OUTPUT'
          EXPORTING
            INPUT  = DADOS_CLIN-STCD2
          IMPORTING
            OUTPUT = VG_CPF.
        WA_EMISSOR-CNPJ = VG_CPF.
      ENDIF.

      APPEND WA_EMISSOR TO IT_EMISSOR.
    ENDLOOP.
    SORT IT_EMISSOR BY COD.

    "Informações do remetente da nota de exportação
    MOVE IT_MEMORANDOS[] TO IT_MEMORANDOS_AUX[].
    SORT IT_MEMORANDOS_AUX BY REMETENTE.
    DELETE ADJACENT DUPLICATES FROM IT_MEMORANDOS_AUX COMPARING REMETENTE.
    CLEAR: IT_REMETENTE.

    LOOP AT IT_MEMORANDOS_AUX INTO WA_MEMORANDO.
      CLEAR: DADOS_FORN.

      CALL FUNCTION 'Z_PARCEIRO_INFO'
        EXPORTING
          P_PARCEIRO   = WA_MEMORANDO-REMETENTE
          P_PARTYPE    = C_V
        CHANGING
          WA_INFO_PART = DADOS_FORN.

      WA_EMISSOR-COD  = WA_MEMORANDO-REMETENTE.
      WA_EMISSOR-NOME = DADOS_FORN-NAME1.
      IF DADOS_FORN-STKZN IS INITIAL.
        CALL FUNCTION 'CONVERSION_EXIT_CGCBR_OUTPUT'
          EXPORTING
            INPUT  = DADOS_FORN-STCD1
          IMPORTING
            OUTPUT = VG_CNPJ.
        WA_EMISSOR-CNPJ = VG_CNPJ.
      ELSE.
        CALL FUNCTION 'CONVERSION_EXIT_CPFBR_OUTPUT'
          EXPORTING
            INPUT  = DADOS_FORN-STCD2
          IMPORTING
            OUTPUT = VG_CPF.
        WA_EMISSOR-CNPJ = VG_CPF.
      ENDIF.

      APPEND WA_EMISSOR TO IT_REMETENTE.
    ENDLOOP.
    SORT IT_REMETENTE BY COD.

    "Informações do remetente da nota de exportação
    MOVE IT_MEMORANDOS[] TO IT_MEMORANDOS_AUX[].
    SORT IT_MEMORANDOS_AUX BY NR_NOTA_EXP.
    DELETE ADJACENT DUPLICATES FROM IT_MEMORANDOS_AUX COMPARING NR_NOTA_EXP.
    CLEAR: IT_NOTAS_EXP[].

    IF NOT IT_MEMORANDOS_AUX[] IS INITIAL.
      SELECT * INTO CORRESPONDING FIELDS OF TABLE IT_NOTAS_EXP
        FROM ZDOC_MEMO_NF_EXP
         FOR ALL ENTRIES IN IT_MEMORANDOS_AUX
       WHERE NR_NOTA_EXP EQ IT_MEMORANDOS_AUX-NR_NOTA_EXP.
    ENDIF.

    LOOP AT IT_MEMORANDOS INTO WA_MEMORANDO.
      VG_TABIX = SY-TABIX.

      "Emissor
      READ TABLE IT_EMISSOR INTO WA_EMISSOR WITH KEY COD = WA_MEMORANDO-EMISSOR BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_MEMORANDO-EMISSORN    = WA_EMISSOR-NOME.
        WA_MEMORANDO-EMISSORCNPJ = WA_EMISSOR-CNPJ.
      ENDIF.

      "Remetente
      READ TABLE IT_REMETENTE INTO WA_EMISSOR WITH KEY COD = WA_MEMORANDO-REMETENTE BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_MEMORANDO-REMETENTEN    = WA_EMISSOR-NOME.
        WA_MEMORANDO-REMETENTECNPJ = WA_EMISSOR-CNPJ.
      ENDIF.

      "Representante
      READ TABLE IT_REPRESENTA INTO WA_EMISSOR WITH KEY COD = WA_MEMORANDO-REPRESENTANTE BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_MEMORANDO-REPRESENTAN    = WA_EMISSOR-NOME.
        WA_MEMORANDO-REPRESENTACNPJ = WA_EMISSOR-CNPJ.
      ENDIF.

      READ TABLE IT_PRODUTO INTO WA_PRODUTO WITH KEY MATNR = WA_MEMORANDO-MATERIAL BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_MEMORANDO-MAKTG = WA_PRODUTO-MAKTG.
      ENDIF.

      PERFORM STATUS_MEMORANDO USING WA_MEMORANDO CHANGING WA_MEMORANDO-ICONE.
      MODIFY IT_MEMORANDOS INDEX VG_TABIX FROM WA_MEMORANDO TRANSPORTING ICONE EMISSORN EMISSORCNPJ REMETENTEN REMETENTECNPJ
                                                                         REPRESENTAN REPRESENTACNPJ MAKTG.
    ENDLOOP.

    SORT IT_MEMORANDOS[] BY NUMERO_NOTA NUMERO_MEMO.

    IF P_SAFRA IS NOT INITIAL.

      MOVE IT_MEMORANDOS[] TO IT_MEMO_LOCAL[].

      DELETE IT_MEMO_LOCAL[] WHERE DOCNUM EQ SPACE.
      SORT IT_MEMO_LOCAL BY DOCNUM.
      DELETE ADJACENT DUPLICATES FROM IT_MEMO_LOCAL COMPARING DOCNUM.

      IF NOT IT_MEMO_LOCAL[] IS INITIAL.

        SELECT * INTO CORRESPONDING FIELDS OF TABLE IT_J_1BNFLIN
          FROM J_1BNFLIN
           FOR ALL ENTRIES IN IT_MEMO_LOCAL
         WHERE DOCNUM EQ IT_MEMO_LOCAL-DOCNUM.

        DELETE IT_J_1BNFLIN WHERE REFTYP NE 'BI'.

        LOOP AT IT_J_1BNFLIN INTO WA_J_1BNFLIN.
          WA_J_1BNFLIN-REFK10 = WA_J_1BNFLIN-REFKEY(10).
          MODIFY IT_J_1BNFLIN INDEX SY-TABIX FROM WA_J_1BNFLIN TRANSPORTING REFK10.
        ENDLOOP.

        SORT IT_J_1BNFLIN BY DOCNUM.

        IF NOT IT_J_1BNFLIN[] IS INITIAL.
          SELECT * INTO TABLE IT_VBRP
            FROM VBRP
             FOR ALL ENTRIES IN IT_J_1BNFLIN
           WHERE VBELN EQ IT_J_1BNFLIN-REFK10
             AND POSNR EQ IT_J_1BNFLIN-REFITM.
          IF SY-SUBRC IS INITIAL.
            SELECT * INTO TABLE IT_LIPS
              FROM LIPS
               FOR ALL ENTRIES IN IT_VBRP
             WHERE VBELN EQ IT_VBRP-VGBEL
               AND POSNR EQ IT_VBRP-VGPOS.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    LOOP AT IT_NOTAS_EXP INTO WA_NOTAS_EXP.

      VG_TABIX = SY-TABIX.

      IF NOT WA_NOTAS_EXP-DOCNUM IS INITIAL.

        SELECT SINGLE * INTO WA_ZIB_NFE
          FROM ZIB_NFE
         WHERE DOCNUM       EQ WA_NOTAS_EXP-DOCNUM
           AND DS_URL_DANFE NE SPACE.

        IF SY-SUBRC IS INITIAL.
          WA_NOTAS_EXP-DANFE = WA_ZIB_NFE-DS_URL_DANFE.
        ENDIF.

        IF P_SAFRA IS NOT INITIAL.

          READ TABLE IT_J_1BNFLIN INTO WA_J_1BNFLIN WITH KEY DOCNUM = WA_NOTAS_EXP-DOCNUM.
          IF SY-SUBRC IS INITIAL.
            READ TABLE IT_VBRP INTO WA_VBRP WITH KEY VBELN = WA_J_1BNFLIN-REFK10 POSNR = WA_J_1BNFLIN-REFITM.
            IF SY-SUBRC IS INITIAL.
              READ TABLE IT_LIPS INTO WA_LIPS WITH KEY VBELN = WA_VBRP-VGBEL POSNR = WA_VBRP-VGPOS.
              IF SY-SUBRC IS INITIAL.
                WA_NOTAS_EXP-CHARG = WA_LIPS-CHARG.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.


      ENDIF.

      "Emissor
      READ TABLE IT_EMISSOR INTO WA_EMISSOR WITH KEY COD = WA_NOTAS_EXP-EMISSOR BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_NOTAS_EXP-EMISSORN    = WA_EMISSOR-NOME.
        WA_NOTAS_EXP-EMISSORCNPJ = WA_EMISSOR-CNPJ.
      ENDIF.

      READ TABLE IT_PRODUTO INTO WA_PRODUTO WITH KEY MATNR = WA_NOTAS_EXP-MATERIAL BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_NOTAS_EXP-MATERIALN = WA_PRODUTO-MAKTG.
      ENDIF.

      SELECT SUM( QUANTIDADE_MEMO ) INTO WA_NOTAS_EXP-QUANT_VINC
        FROM ZDOC_MEMORANDO
       WHERE NR_NOTA_EXP EQ WA_NOTAS_EXP-NR_NOTA_EXP
         AND DIRECAO EQ C_1.

      WA_NOTAS_EXP-SALDO_DISP = WA_NOTAS_EXP-QUANTIDADE - WA_NOTAS_EXP-QUANT_VINC.

      SELECT SUM( QUANTIDADE_MEMO ) INTO WA_NOTAS_EXP-QUANT_VINC_2
        FROM ZDOC_MEMORANDO
       WHERE NR_NOTA_EXP EQ WA_NOTAS_EXP-NR_NOTA_EXP
         AND DIRECAO EQ C_2.

      WA_NOTAS_EXP-SALDO_DISP_2 = WA_NOTAS_EXP-QUANTIDADE - WA_NOTAS_EXP-QUANT_VINC_2.

      MODIFY IT_NOTAS_EXP INDEX VG_TABIX FROM WA_NOTAS_EXP
        TRANSPORTING EMISSORN EMISSORCNPJ MATERIALN QUANT_VINC SALDO_DISP QUANT_VINC_2 SALDO_DISP_2 DANFE CHARG.

    ENDLOOP.

    IF P_SAFRA IS NOT INITIAL.

      DELETE IT_NOTAS_EXP WHERE CHARG NE P_SAFRA.

      LOOP AT IT_NOTAS_EXP INTO WA_NOTAS_EXP.
        IT_NOTA-SIGN   = 'I'.
        IT_NOTA-OPTION = 'EQ'.
        IT_NOTA-LOW    = WA_NOTAS_EXP-NR_NOTA_EXP.
        IT_NOTA-HIGH   = WA_NOTAS_EXP-NR_NOTA_EXP.
        APPEND IT_NOTA.
      ENDLOOP.

      IF IT_NOTAS_EXP[] IS INITIAL.
        CLEAR: IT_MEMORANDOS[].
      ELSE.
        DELETE IT_MEMORANDOS WHERE NR_NOTA_EXP NOT IN IT_NOTA.
      ENDIF.

    ENDIF.

    IF SY-TCODE EQ 'ZMEMO01N'.

      CALL FUNCTION 'Z_VALORES_DOMINIO'
        EXPORTING
          NAME      = 'ZFINALIDADE_MEMO'
        TABLES
          DD07V_TAB = IT_FNL_TEXT.

      CALL FUNCTION 'Z_VALORES_DOMINIO'
        EXPORTING
          NAME      = 'Z_MEMO_STATUS'
        TABLES
          DD07V_TAB = IT_STT_TEXT.

      CALL FUNCTION 'Z_VALORES_DOMINIO'
        EXPORTING
          NAME      = 'Z_MEMO_DIRECAO'
        TABLES
          DD07V_TAB = IT_DRC_TEXT.

      LOOP AT IT_MEMORANDOS INTO WA_MEMORANDO.

        VG_TABIX = SY-TABIX.

        READ TABLE IT_FNL_TEXT INTO WA_DMO_TEXT WITH KEY DOMVALUE_L = WA_MEMORANDO-TP_FINALIDADE.
        IF SY-SUBRC IS INITIAL.
          WA_MEMORANDO-TXTFINALIDADE = WA_DMO_TEXT-DDTEXT.
        ENDIF.
        READ TABLE IT_STT_TEXT INTO WA_DMO_TEXT WITH KEY DOMVALUE_L = WA_MEMORANDO-STATUS.
        IF SY-SUBRC IS INITIAL.
          WA_MEMORANDO-TXTSTATUS = WA_DMO_TEXT-DDTEXT.
        ENDIF.
        READ TABLE IT_DRC_TEXT INTO WA_DMO_TEXT WITH KEY DOMVALUE_L = WA_MEMORANDO-DIRECAO.
        IF SY-SUBRC IS INITIAL.
          WA_MEMORANDO-TXTDIRECAO = WA_DMO_TEXT-DDTEXT.
        ENDIF.

        MODIFY IT_MEMORANDOS INDEX VG_TABIX FROM WA_MEMORANDO TRANSPORTING TXTFINALIDADE TXTSTATUS TXTDIRECAO.

      ENDLOOP.

      MOVE IT_MEMORANDOS[] TO IT_MEMORANDOS_ALV.

    ENDIF.

  ENDFORM.                    " PESQUISAR_MEMORANDOS

*&---------------------------------------------------------------------*
*&      Form  LANCAR_MEMORANDOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM LANCAR_MEMORANDOS .

    DATA: WA_SETLEAF TYPE SETLEAF.

*  "Opter Área de contabilidade de custos
*  SELECT SINGLE * INTO wa_setleaf
*    FROM setleaf
*   WHERE setname EQ 'ZMEMORANDO_KOKRS'.
*
*  IF sy-subrc NE 0.
*    MESSAGE e022 DISPLAY LIKE c_s.
*  ENDIF.
*
*  "Opter Centro de custo
*  SELECT SINGLE * INTO wa_setleaf
*    FROM setleaf
*   WHERE setname EQ 'ZMEMORANDO_KOSTL'.
*
*  IF sy-subrc NE 0.
*    MESSAGE e023 DISPLAY LIKE c_s.
*  ENDIF.

    VG_DYNNR_ANT = VG_DYNNR_000.
    VG_DYNNR_000 = C_2000.
    VG_DYNNR_TAB = C_2003.
    VG_NOVO_LANC = C_X.

    CLEAR: VG_CONSUL_MEMO, ZDOC_MEMORANDO, ZDOC_MEMO_NF_EXP, IT_MEMORANDOS[], IT_MEMORANDO_TELA[], TERCEIRO.

  ENDFORM.                    " LANCAR_MEMORANDOS

*&---------------------------------------------------------------------*
*&      Form  CONSULTAR_MEMORANDOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
  FORM CONSULTAR_MEMORANDOS .

    DATA: VG_VERIFICA_SELECAO TYPE SY-SUBRC.

    PERFORM VERIFICA_SELECAO_MEMORANDO USING VG_VERIFICA_SELECAO.

    IF VG_VERIFICA_SELECAO EQ 0.
      VG_DYNNR_ANT   = VG_DYNNR_000.
      VG_DYNNR_000   = C_2000.
      VG_DYNNR_TAB   = C_2002.
      VG_CONSUL_MEMO = C_X.
      MOVE-CORRESPONDING WA_MEMORANDO TO ZDOC_MEMO_NF_EXP.

      TERCEIRO = COND #( WHEN WA_MEMORANDO-PROPRIO IS INITIAL THEN ABAP_TRUE ELSE ABAP_FALSE ).

      PERFORM POPULAR_MEMORANDOS.
      PERFORM POPULAR_CONHEC_MEMORANDO.

    ENDIF.

  ENDFORM.                    " CONSULTAR_MEMORANDOS

*&---------------------------------------------------------------------*
*&      Form  ELIMINAR_MEMORANDOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM ELIMINAR_MEMORANDOS .

    DATA: WA_PROTOLO_MEMO     TYPE ZDOC_MEMO_PRO_ME,
          VG_VERIFICA_SELECAO TYPE SY-SUBRC,
          VG_LINHAS           TYPE I,
          IT_MEMORANDO        TYPE TABLE OF ZDOC_MEMORANDO INITIAL SIZE 0 WITH HEADER LINE,
          ANSWER              TYPE C LENGTH 1,
          WA_DOC_MEMO         TYPE ZDOC_MEMORANDO.

    PERFORM VERIFICA_SELECAO_MEMORANDO USING VG_VERIFICA_SELECAO.

    IF VG_VERIFICA_SELECAO EQ 0.

      PERFORM VERIFICAR_MEMO_PROTOCOLADO USING WA_MEMORANDO-NR_MEMORANDO.

      SELECT SINGLE * INTO WA_PROTOLO_MEMO
        FROM ZDOC_MEMO_PRO_ME
       WHERE NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.

      IF SY-SUBRC EQ 0.
        MESSAGE E001 WITH WA_PROTOLO_MEMO-NR_PROTOCOLO DISPLAY LIKE C_S.
      ELSE.

        SELECT SINGLE * INTO WA_DOC_MEMO
          FROM ZDOC_MEMORANDO
         WHERE NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.

        IF NOT WA_DOC_MEMO-CANCELADO IS INITIAL.
          MESSAGE E068 WITH WA_DOC_MEMO-NUMERO_MEMO DISPLAY LIKE C_S.
        ENDIF.

        CASE WA_DOC_MEMO-STATUS.
          WHEN 'I' OR 'T' OR 'F'.
            MESSAGE E070 WITH WA_DOC_MEMO-NUMERO_MEMO DISPLAY LIKE C_S.
        ENDCASE.

        CALL FUNCTION 'POPUP_TO_CONFIRM_STEP'
          EXPORTING
            TITEL     = TEXT-001
            TEXTLINE1 = TEXT-004
            TEXTLINE2 = TEXT-005
          IMPORTING
            ANSWER    = ANSWER.

        CASE ANSWER.
          WHEN C_J.
            CLEAR VG_VERIFICA_SELECAO.
          WHEN C_N.
            VG_VERIFICA_SELECAO = 4.
          WHEN C_A.
            VG_VERIFICA_SELECAO = 4.
        ENDCASE.

        IF VG_VERIFICA_SELECAO IS INITIAL.

          SELECT *
            INTO CORRESPONDING FIELDS OF TABLE IT_MEMORANDO
            FROM ZDOC_MEMORANDO
           WHERE NR_NOTA_EXP EQ WA_MEMORANDO-NR_NOTA_EXP.

          DESCRIBE TABLE IT_MEMORANDO LINES VG_LINHAS.

          IF VG_LINHAS EQ 1.
            DELETE FROM ZDOC_MEMO_NF_EXP WHERE NR_NOTA_EXP EQ WA_MEMORANDO-NR_NOTA_EXP.
          ENDIF.

          DELETE FROM ZDOC_MEMO_NOTA   WHERE NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.
          DELETE FROM ZDOC_MEMO_NOTA_S WHERE NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.
          DELETE FROM ZDOC_MEMORANDO   WHERE NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.
          COMMIT WORK.
          DELETE IT_MEMORANDOS  WHERE NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.
          CLEAR: WA_MEMORANDO, WA_PROTOLO_MEMO.
        ENDIF.
      ENDIF.

    ENDIF.

  ENDFORM.                    " ELIMINAR_MEMORANDOS

*&---------------------------------------------------------------------*
*&      Form  EDITAR_MEMORANDOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM EDITAR_MEMORANDOS .

    DATA: VG_VERIFICA_SELECAO TYPE SY-SUBRC,
          WA_PROTOLO_MEMO     TYPE ZDOC_MEMO_PRO_ME,
          WA_DOC_MEMO         TYPE ZDOC_MEMORANDO.

    PERFORM VERIFICA_SELECAO_MEMORANDO USING VG_VERIFICA_SELECAO.

    TERCEIRO = COND #( WHEN WA_MEMORANDO-PROPRIO IS INITIAL THEN ABAP_TRUE ELSE ABAP_FALSE ).

    IF VG_VERIFICA_SELECAO EQ 0.
      IF L_RESP IS INITIAL.
        SELECT SINGLE * INTO WA_PROTOLO_MEMO
          FROM ZDOC_MEMO_PRO_ME
         WHERE NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.

        IF SY-SUBRC EQ 0.
          MESSAGE E001 WITH WA_PROTOLO_MEMO-NR_PROTOCOLO DISPLAY LIKE C_S.
        ELSE.

          SELECT SINGLE * INTO WA_DOC_MEMO
            FROM ZDOC_MEMORANDO
           WHERE NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.

          IF NOT WA_DOC_MEMO-CANCELADO IS INITIAL.
            MESSAGE W068 WITH WA_DOC_MEMO-NUMERO_MEMO.
          ENDIF.

          VG_DYNNR_ANT   = VG_DYNNR_000.
          VG_DYNNR_000   = C_2000.
          VG_DYNNR_TAB   = C_2002.
          MOVE-CORRESPONDING WA_MEMORANDO TO ZDOC_MEMO_NF_EXP.

          PERFORM POPULAR_MEMORANDOS.
          PERFORM POPULAR_CONHEC_MEMORANDO.

          CLEAR: VG_CONSUL_MEMO.
        ENDIF.
      ELSE.
        VG_DYNNR_ANT   = VG_DYNNR_000.
        VG_DYNNR_000   = C_2000.
        VG_DYNNR_TAB   = C_2002.
        MOVE-CORRESPONDING WA_MEMORANDO TO ZDOC_MEMO_NF_EXP.

        PERFORM POPULAR_MEMORANDOS.
        PERFORM POPULAR_CONHEC_MEMORANDO.

        CLEAR: VG_CONSUL_MEMO.
      ENDIF.
    ENDIF.

  ENDFORM.                    " EDITAR_MEMORANDOS

*&---------------------------------------------------------------------*
*&      Form  CHAMAR_PROTOCOLOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM CHAMAR_PROTOCOLOS .

    DATA: VG_VERIFICA_SELECAO TYPE SY-SUBRC.

    PERFORM VERIFICA_SELECAO_MEMORANDO USING VG_VERIFICA_SELECAO.

    IF VG_VERIFICA_SELECAO IS INITIAL.
      SET PARAMETER ID: 'ZMEMO' FIELD WA_MEMORANDO-NR_MEMORANDO.
      CALL TRANSACTION 'ZMEMO04'.
    ENDIF.
  ENDFORM.                    " CHAMAR_PROTOCOLOS

*&---------------------------------------------------------------------*
*&      Form  POPULAR_CONHEC_MEMORANDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM POPULAR_CONHEC_MEMORANDO .

    CLEAR: IT_CONHEC[].

    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE IT_CONHEC
      FROM ZDOC_MEMO_NOMEAC
     WHERE NR_NOTA_EXP EQ ZDOC_MEMO_NF_EXP-NR_NOTA_EXP.

    SEQU = 1.

    SORT IT_CONHEC[] BY NR_CONHEC.

    LOOP AT IT_CONHEC INTO WA_CONHEC.
      WA_CONHEC-SEQU = SEQU.
      MODIFY IT_CONHEC INDEX SY-TABIX FROM WA_CONHEC TRANSPORTING SEQU.
      SEQU = SEQU + 1.
    ENDLOOP.

*    DATA: IT_REG_EX TYPE TABLE OF ZREG_EXPORTACAO,
*          WA_REG_EX TYPE ZREG_EXPORTACAO,
*          IT_CONHEC_V TYPE TABLE OF ZNOM_CONHEC,
*          WA_CONHEC_V TYPE ZNOM_CONHEC,
*          NR_RE_S   TYPE ZDOC_MEMORANDO-NR_RE.
*
*    WRITE WA_ZDOC_MEMORANDO-NR_RE
*    USING EDIT MASK '__/_______-___' TO NR_RE_S.
*
*    SELECT SINGLE *
*      INTO WA_REG_EX
*      FROM ZREG_EXPORTACAO
*      WHERE NR_REGISTRO_EXPO EQ NR_RE_S.
*
*    SELECT *
*      INTO TABLE IT_CONHEC_V
*      FROM ZNOM_CONHEC
*      WHERE ID_NOMEACAO_TRAN EQ WA_REG_EX-ID_NOMEACAO_TRAN
*        AND IN_STATUS_COMEX  EQ ''.
*
*
*    CLEAR: IT_CONHEC[].
*
*    SELECT *
*      INTO CORRESPONDING FIELDS OF TABLE IT_CONHEC
*      FROM ZDOC_MEMO_NOMEAC
*      WHERE NR_NOTA_EXP EQ ZDOC_MEMO_NF_EXP-NR_NOTA_EXP.
*
*    LOOP AT IT_CONHEC INTO WA_CONHEC WHERE SINCRONIZADO IS INITIAL.
*        DELETE FROM ZDOC_MEMO_NOMEAC WHERE NR_NOTA_EXP EQ ZDOC_MEMO_NF_EXP-NR_NOTA_EXP
*                                  AND NR_CONHEC   EQ WA_CONHEC-NR_CONHEC.
*    ENDLOOP.
*    COMMIT WORK.
*
*    CLEAR WA_CONHEC.
*    REFRESH IT_CONHEC.
*
*    SEQU = 1.
*    LOOP AT IT_CONHEC_V INTO WA_CONHEC_V.
*
*      WA_CONHEC-SEQU         = SEQU.
*      WA_CONHEC-NR_NOTA_EXP  = ZDOC_MEMO_NF_EXP-NR_NOTA_EXP.
*      WA_CONHEC-NR_CONHEC    = WA_CONHEC_V-NR_CONHEC.
*      WA_CONHEC-DT_CONHEC    = WA_CONHEC_V-DT_DATA.
*      WA_CONHEC-SINCRONIZADO = 'X'.
*
*      MODIFY ZDOC_MEMO_NOMEAC FROM WA_CONHEC.
*
*      APPEND WA_CONHEC TO IT_CONHEC.
*      SEQU = SEQU + 1.
*
*    ENDLOOP.
*    COMMIT WORK.
*
*    SORT IT_CONHEC[] BY NR_CONHEC.


  ENDFORM.                    " POPULAR_CONHEC_MEMORANDO

*&---------------------------------------------------------------------*
*&      Form  LANCAR_MEMORANDOS_NOTAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM LANCAR_MEMORANDOS_NOTAS .

    DATA: VG_VERIFICA_SELECAO TYPE SY-SUBRC.

    PERFORM VERIFICA_SELECAO_MEMORANDO USING VG_VERIFICA_SELECAO.

    IF WA_MEMORANDO-CANCELADO IS INITIAL.
      IF VG_VERIFICA_SELECAO EQ 0.
        IF WA_MEMORANDO-DIRECAO EQ C_1.
          PERFORM VERIFICA_BLOQUEIO USING WA_MEMORANDO-NR_MEMORANDO.
          VG_4002_6002     = C_4002.
          VG_DYNNR_ANT     = VG_DYNNR_000.
          VG_DYNNR_000     = C_4000.
          J_1BNFDOC-DOCDAT = SY-DATUM.
          J_1BNFDOC-PSTDAT = SY-DATUM.
          VG_QTD_VINCU     = 0.
          MOVE-CORRESPONDING WA_MEMORANDO TO ZDOC_MEMORANDO.
          MOVE-CORRESPONDING WA_MEMORANDO TO ZDOC_MEMO_NF_EXP.
          PERFORM POPULAR_NOTAS_VINCULADAS USING ZDOC_MEMORANDO-NR_MEMORANDO.
        ELSE.
          MESSAGE TEXT-E09 TYPE C_E DISPLAY LIKE C_S.
        ENDIF.
      ENDIF.
    ELSE.
      WA_MEMORANDO-DIRECAO = C_1.
      CALL SCREEN 1006.

    ENDIF.

  ENDFORM.                    " LANCAR_MEMORANDOS_NOTAS

*&---------------------------------------------------------------------*
*&      Form  POPULAR_NOTAS_VINCULADAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM POPULAR_NOTAS_VINCULADAS USING VG_MEMORANDO TYPE Z_MEMORANDO.

    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE IT_NF_VINCU
      FROM ZDOC_MEMO_NOTA
     WHERE NR_MEMORANDO EQ VG_MEMORANDO.

    VG_VINCULADO = 0.
    LOOP AT IT_NF_VINCU INTO WA_NF_VINCU.
      VG_VINCULADO = VG_VINCULADO + WA_NF_VINCU-MENGE.
    ENDLOOP.

  ENDFORM.                    " POPULAR_NOTAS_VINCULADAS

*&---------------------------------------------------------------------*
*&      Form  POPULAR_MEMORANDOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM POPULAR_MEMORANDOS .

    CLEAR: IT_MEMORANDO_TELA[].

    VG_TOTAL_MEMORANDOS = 0.
    SEQU_MEMORANDO      = 0.

    SELECT *
      INTO WA_ZDOC_MEMORANDO
      FROM ZDOC_MEMORANDO
     WHERE NR_NOTA_EXP EQ ZDOC_MEMO_NF_EXP-NR_NOTA_EXP.

      CLEAR: WA_MEMORANDO_TELA.

      MOVE-CORRESPONDING WA_ZDOC_MEMORANDO TO WA_MEMORANDO_TELA.

      IF NOT WA_MEMORANDO_TELA-REPRESENTANTE IS INITIAL.
        SELECT SINGLE NAME1 INTO WA_MEMORANDO_TELA-VG_NOME_REPRESENTANTE
          FROM KNA1
         WHERE KUNNR EQ WA_MEMORANDO_TELA-REPRESENTANTE.
      ENDIF.

      IF NOT WA_MEMORANDO_TELA-REMETENTE IS INITIAL.
        SELECT SINGLE NAME1 INTO WA_MEMORANDO_TELA-VG_NOME_REMETENTE
          FROM LFA1
         WHERE LIFNR EQ WA_MEMORANDO_TELA-REMETENTE.
      ENDIF.

      IF NOT WA_MEMORANDO_TELA-PAIS_ORIGEM IS INITIAL.
        SELECT SINGLE LANDX INTO WA_MEMORANDO_TELA-VG_NOME_PAIS_ORIGEM
          FROM T005T
         WHERE SPRAS EQ SY-LANGU
           AND LAND1 EQ WA_MEMORANDO_TELA-PAIS_ORIGEM.
      ENDIF.

      IF NOT WA_MEMORANDO_TELA-UF_ORIGEM IS INITIAL.
        SELECT SINGLE BEZEI INTO WA_MEMORANDO_TELA-VG_NOME_UF_ORIGEM
          FROM T005U
         WHERE SPRAS EQ SY-LANGU
           AND LAND1 EQ WA_MEMORANDO_TELA-PAIS_ORIGEM
           AND BLAND EQ WA_MEMORANDO_TELA-UF_ORIGEM.
      ENDIF.

      IF NOT WA_MEMORANDO_TELA-PAIS_DESTINO IS INITIAL.
        SELECT SINGLE LANDX INTO WA_MEMORANDO_TELA-VG_NOME_PAIS_DESTINO
          FROM T005T
         WHERE SPRAS EQ SY-LANGU
           AND LAND1 EQ WA_MEMORANDO_TELA-PAIS_DESTINO.
      ENDIF.

      IF WA_MEMORANDO_TELA-NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.
        WA_MEMORANDO_TELA-MARK = C_X.
      ENDIF.

      VG_TOTAL_MEMORANDOS   = VG_TOTAL_MEMORANDOS + WA_MEMORANDO-QUANTIDADE_MEMO.
      WA_MEMORANDO_TELA-SEQ = SEQU_MEMORANDO + 1.
      SEQU_MEMORANDO        = SEQU_MEMORANDO + 1.

      MOVE-CORRESPONDING WA_MEMORANDO_TELA TO WA_MEMORANDO.

      PERFORM STATUS_MEMORANDO USING WA_MEMORANDO CHANGING WA_MEMORANDO_TELA-ICONE.

      APPEND WA_MEMORANDO_TELA TO IT_MEMORANDO_TELA.

    ENDSELECT.

  ENDFORM.                    " POPULAR_MEMORANDOS

*&---------------------------------------------------------------------*
*&      Form  EMITIR_MEMORANDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM EMITIR_MEMORANDO.

    DATA: VG_VERIFICA_SELECAO TYPE SY-SUBRC,
          WA_DOC_MEMO         TYPE ZDOC_MEMORANDO,
          VG_BRANCH           TYPE J_1BBRANCH-BRANCH,
          WA_ZDOC_MEMO_FORM   TYPE ZDOC_MEMO_FORM,
          WA_J_1BBRANCH       TYPE J_1BBRANCH,
          T_DATA              TYPE STANDARD TABLE OF  RGSB4 WITH HEADER LINE.

*     SET PARA EMPRESAS QUE UTILIZAM A FORMA ANTIGA
    CALL FUNCTION 'G_SET_GET_ALL_VALUES'
      EXPORTING
        CLASS         = '0000'
        SETNR         = 'ZMEMO01_LAYOUT'
      TABLES
        SET_VALUES    = T_DATA
      EXCEPTIONS
        SET_NOT_FOUND = 1
        OTHERS        = 2.

    SORT T_DATA BY FROM.
    CLEAR LAYOUT_NEW.

    PERFORM VERIFICA_SELECAO_MEMORANDO USING VG_VERIFICA_SELECAO.

    IF VG_VERIFICA_SELECAO EQ 0.

      DATA(_IS_DUE) = ABAP_FALSE.
      CALL FUNCTION 'ZDUE_CHECK_NR_RE'
        EXPORTING
          I_NUMERO  = WA_MEMORANDO-NR_RE
        IMPORTING
          E_IS_DUE  = _IS_DUE.

      IF _IS_DUE EQ ABAP_FALSE.
        IF ( WA_MEMORANDO-NR_DDE IS INITIAL ) OR ( WA_MEMORANDO-DT_DDE IS INITIAL ).
          MESSAGE TEXT-E15 TYPE C_E DISPLAY LIKE C_S.
          EXIT.
        ENDIF.
      ENDIF.

*      IF WA_MEMORANDO-DIRECAO EQ C_1.

      SELECT SINGLE * INTO WA_DOC_MEMO
        FROM ZDOC_MEMORANDO
       WHERE NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.

      READ TABLE T_DATA INDEX 1.
      IF WA_DOC_MEMO-DT_EMISSAO_MEMO GE T_DATA-FROM.
        MOVE 'X' TO LAYOUT_NEW.
      ENDIF.

*        IF NOT WA_DOC_MEMO-CANCELADO IS INITIAL.
*          MESSAGE E068 WITH WA_DOC_MEMO-NUMERO_MEMO DISPLAY LIKE C_S.
*        ENDIF.

      "Verifica se já foi vinculado notas
      IF WA_MEMORANDO-STATUS IS INITIAL.
        MESSAGE TEXT-E03 TYPE C_E DISPLAY LIKE C_S.
      ENDIF.
      "Verificar informação de formulário.
      IF WA_MEMORANDO-FORMULARIO IS INITIAL.
        MESSAGE TEXT-E11 TYPE C_E DISPLAY LIKE C_S.
      ENDIF.

      IF WA_MEMORANDO-DIRECAO NE 1.
*          CLEAR: OK_CODE.
*          CALL SCREEN 9998 STARTING AT 10 02.
*          CHECK OK_CODE NE C_CANCELAR.
        RADIO2 = C_X.
        CLEAR RADIO1.
        MOVE 'X' TO LAYOUT_NEW.
      ELSE.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = WA_MEMORANDO-REPRESENTANTE
          IMPORTING
            OUTPUT = VG_BRANCH.

        SELECT SINGLE * INTO WA_J_1BBRANCH
          FROM J_1BBRANCH
         WHERE BRANCH EQ VG_BRANCH.

        SELECT SINGLE * INTO WA_ZDOC_MEMO_FORM
          FROM ZDOC_MEMO_FORM
         WHERE BUKRS        EQ WA_J_1BBRANCH-BUKRS
           AND BRANCH	      EQ WA_J_1BBRANCH-BRANCH
           AND FORM_INICIAL LE WA_MEMORANDO-FORMULARIO
           AND FORM_FINAL   GE WA_MEMORANDO-FORMULARIO.

        IF NOT SY-SUBRC IS INITIAL.
          MESSAGE TEXT-E13 TYPE C_E DISPLAY LIKE C_S.
        ELSE.
          CASE WA_ZDOC_MEMO_FORM-TP_MOD_IMP.
            WHEN 1.
              RADIO1 = C_X.
              CLEAR RADIO2.
            WHEN 2.
              RADIO2 = C_X.
              CLEAR RADIO1.
            WHEN SPACE.
              MESSAGE TEXT-E14 TYPE C_E DISPLAY LIKE C_S.
          ENDCASE.
        ENDIF.
      ENDIF.

      PERFORM IMPRIMIR_MEMORANDO USING WA_MEMORANDO.
      MOVE-CORRESPONDING WA_MEMORANDO TO ZDOC_MEMORANDO.

      IF WA_MEMORANDO-STATUS NE C_T " SE DIFERENTE DE PROTOCOLADO E FECHADO
      AND WA_MEMORANDO-STATUS NE C_F.
        ZDOC_MEMORANDO-STATUS = C_I. " WELGEM
      ENDIF.

      MODIFY ZDOC_MEMORANDO FROM ZDOC_MEMORANDO.
*      ELSE.
*        MESSAGE TEXT-E08 TYPE C_E DISPLAY LIKE C_S.
*      ENDIF.
    ENDIF.

  ENDFORM.                    " EMITIR_MEMORANDO

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_MEMORANDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM IMPRIMIR_MEMORANDO  USING   MEMO TYPE ZMEMO_MEMORANDO.

    DATA: WA_EXPORTADOR    TYPE ZDOC_MEMO_EXPORTADOR,
          WA_NOTA_EXP      TYPE ZDOC_MEMO_EXP_NOTA,
          WA_PRODUTO       TYPE ZDOC_MEMO_EXP_PROD,
          WA_REMETENTE     TYPE ZDOC_MEMO_EXP_REME,
          WA_TRANSPORTADOR TYPE ZDOC_MEMO_EXP_TRANS,
          WA_REPRESETANTE  TYPE ZDOC_MEMO_EXP_REPR,
          WA_REPRESENTA    TYPE ZDOC_MEMO_REPRESENTANTE,
          WA_INFO_MEMO     TYPE ZDOC_MEMO_MEMORANDO,
          WA_MEMORANDO     TYPE ZDOC_MEMO_CAB,
          WA_NOTAS         TYPE ZDOC_MEMO_NOTAS,
          VG_VALOR         TYPE C LENGTH 13,
          VG_CPF           TYPE C LENGTH 14,
          VG_CNPJ          TYPE C LENGTH 18,
          WA_J_1BBRANCH    TYPE J_1BBRANCH,
          WA_J1BN_EXP      TYPE J_1BNFE_ACTIVE.

    DATA: DADOS_FORN TYPE LFA1,
          DADOS_CLIE TYPE KNA1,
          VG_TABIX   TYPE SY-TABIX.

    DATA: IT_BL    TYPE TABLE OF ZDOC_MEMO_NOMEAC INITIAL SIZE 0 WITH HEADER LINE,
          IT_NOTAS TYPE TABLE OF ZDOC_MEMO_NOTAS INITIAL SIZE 0 WITH HEADER LINE.

    CLEAR: NR_RE_AUX, VG_NOME_NR_RE, VG_ID_TRANS, VG_DS_TRANS.

*----------------------------------------------------------------------*
*  Representante
*----------------------------------------------------------------------*

    WA_REPRESETANTE-REPRESENTANTE  = MEMO-RESPONSAVEL.
    WA_REPRESETANTE-DATA_MEMORANDO = MEMO-DT_EMISSAO_MEMO.
    WA_REPRESETANTE-OBSERVACAO     = MEMO-OBSERVACAO.
    WA_REPRESETANTE-CANCELADO      = MEMO-CANCELADO.

    DATA(_IS_DUE) = ABAP_FALSE.
    CALL FUNCTION 'ZDUE_CHECK_NR_RE'
      EXPORTING
        I_NUMERO  = MEMO-NR_RE
      IMPORTING
        E_IS_DUE  = _IS_DUE.

    IF _IS_DUE EQ ABAP_FALSE.

      WRITE MEMO-NR_RE USING EDIT MASK '__/_______-___' TO NR_RE_AUX.

      IF NOT MEMO-NR_RE IS INITIAL.
        SELECT SINGLE ID_NOMEACAO_TRAN INTO VG_NOME_NR_RE
          FROM ZREG_EXPORTACAO
         WHERE NR_REGISTRO_EXPO EQ NR_RE_AUX.
      ENDIF.

    ELSE.

      SELECT SINGLE ID_NOMEACAO_TRAN INTO VG_NOME_NR_RE
        FROM ZSDT0170
       WHERE NUMERO_DUE = MEMO-NR_RE.

    ENDIF.

    IF NOT VG_NOME_NR_RE IS INITIAL.

      SELECT SINGLE ID_TRANSPORTE INTO VG_ID_TRANS
        FROM ZNOM_TRANSPORTE
       WHERE ID_NOMEACAO_TRAN EQ VG_NOME_NR_RE.

      SELECT SINGLE DS_NOME_TRANSPOR INTO VG_DS_TRANS
        FROM ZNOM_TRANSPORTE
       WHERE ID_NOMEACAO_TRAN EQ VG_NOME_NR_RE.

    ENDIF.

    IF VG_DS_TRANS IS INITIAL.
      CONCATENATE MEMO-OBSERVACAO ' '
      INTO WA_REPRESETANTE-OBSERVACAO1 SEPARATED BY SPACE.
    ELSE.
      CONCATENATE MEMO-OBSERVACAO '- MV' VG_DS_TRANS
      INTO WA_REPRESETANTE-OBSERVACAO1 SEPARATED BY SPACE.
    ENDIF.

*----------------------------------------------------------------------*
*  Informações do Representante
*----------------------------------------------------------------------*

    CLEAR: DADOS_CLIE.

    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO = MEMO-REPRESENTANTE
        P_PARTYPE  = C_C
      CHANGING
        WA_INFO_C  = DADOS_CLIE.

    WA_REPRESENTA-REP_RAZAO_SOCIAL = DADOS_CLIE-NAME1.
    WA_REPRESENTA-REP_ENDERECO     = DADOS_CLIE-STRAS.
    WA_REPRESENTA-REP_BAIRRO       = DADOS_CLIE-ORT02.
    WA_REPRESENTA-REP_UF           = DADOS_CLIE-REGIO.
    WA_REPRESENTA-REP_CEP          = DADOS_CLIE-PSTLZ.

    IF DADOS_FORN-STKZN IS INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_CGCBR_OUTPUT'
        EXPORTING
          INPUT  = DADOS_CLIE-STCD1
        IMPORTING
          OUTPUT = VG_CNPJ.
      WA_REPRESENTA-REP_CNPJ         = VG_CNPJ.
      WA_REPRESENTA-REP_IE           = DADOS_CLIE-STCD3.
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_CPFBR_OUTPUT'
        EXPORTING
          INPUT  = DADOS_CLIE-STCD2
        IMPORTING
          OUTPUT = VG_CPF.

      WA_REPRESENTA-REP_CNPJ         = VG_CPF.
      WA_REPRESENTA-REP_IE           = DADOS_CLIE-STCD2.
    ENDIF.

    SELECT SINGLE TEXT
      INTO WA_REPRESENTA-REP_CIDADE
      FROM J_1BTXJURT
     WHERE SPRAS      EQ SY-LANGU
       AND COUNTRY    EQ DADOS_CLIE-LAND1
       AND TAXJURCODE EQ DADOS_CLIE-TXJCD.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = DADOS_CLIE-KUNNR
      IMPORTING
        OUTPUT = DADOS_CLIE-KUNNR.

    WA_REPRESENTA-REP_BRANCH = DADOS_CLIE-KUNNR+6(4).

    SELECT SINGLE * INTO WA_J_1BBRANCH
      FROM J_1BBRANCH
     WHERE BRANCH EQ WA_REPRESENTA-REP_BRANCH.

    IF SY-SUBRC IS INITIAL.
      WA_REPRESENTA-REP_BUKRS = WA_J_1BBRANCH-BUKRS.
    ELSE.
      CLEAR: WA_REPRESENTA-REP_BRANCH, WA_REPRESENTA-REP_BUKRS.
    ENDIF.

*----------------------------------------------------------------------*
*  Exportador
*----------------------------------------------------------------------*

    CLEAR: DADOS_FORN.

    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO   = MEMO-EMISSOR
        P_PARTYPE    = C_V
      CHANGING
        WA_INFO_PART = DADOS_FORN.

    WA_EXPORTADOR-EXP_RAZAO_SOCIAL = DADOS_FORN-NAME1.
    WA_EXPORTADOR-EXP_ENDERECO     = DADOS_FORN-STRAS.
    WA_EXPORTADOR-EXP_BAIRRO       = DADOS_FORN-ORT02.
    WA_EXPORTADOR-EXP_UF           = DADOS_FORN-REGIO.
    WA_EXPORTADOR-EXP_CEP          = DADOS_FORN-PSTLZ.
    IF DADOS_FORN-STKZN IS INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_CGCBR_OUTPUT'
        EXPORTING
          INPUT  = DADOS_FORN-STCD1
        IMPORTING
          OUTPUT = VG_CNPJ.
      WA_EXPORTADOR-EXP_CNPJ         = VG_CNPJ.
      WA_EXPORTADOR-EXP_IE           = DADOS_FORN-STCD3.
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_CPFBR_OUTPUT'
        EXPORTING
          INPUT  = DADOS_FORN-STCD2
        IMPORTING
          OUTPUT = VG_CPF.
      WA_EXPORTADOR-EXP_CNPJ         = VG_CPF.
      WA_EXPORTADOR-EXP_IE           = DADOS_FORN-STCD2.
    ENDIF.

    SELECT SINGLE TEXT
      INTO WA_EXPORTADOR-EXP_CIDADE
      FROM J_1BTXJURT
     WHERE SPRAS      EQ SY-LANGU
       AND COUNTRY    EQ DADOS_FORN-LAND1
       AND TAXJURCODE EQ DADOS_FORN-TXJCD.

*----------------------------------------------------------------------*
*  Nota de Exportação
*----------------------------------------------------------------------*
    WA_NOTA_EXP-NUMERO     = MEMO-NUMERO_NOTA.
    IF MEMO-NFE IS INITIAL.
      WA_NOTA_EXP-MODELO     = C_01.
    ELSE.
      WA_NOTA_EXP-MODELO     = C_55.
    ENDIF.
    WA_NOTA_EXP-SERIE      = MEMO-SERIE.
    WA_NOTA_EXP-DT_EMISSAO = MEMO-DT_EMISSAO_NOTA.

*----------------------------------------------------------------------*
*  Produto Exportados
*----------------------------------------------------------------------*

    WRITE MEMO-QUANTIDADE TO VG_VALOR.
    SHIFT VG_VALOR LEFT DELETING LEADING SPACE.

    WA_PRODUTO-QUANTIDADE     = VG_VALOR.
    WA_PRODUTO-UNIDADE        = MEMO-UNIDADE.

    IF MEMO-PROPRIO IS INITIAL.
      SELECT SINGLE STEUC INTO WA_PRODUTO-NCM
        FROM MARC
       WHERE MATNR EQ MEMO-MATERIAL
*         AND WERKS EQ MEMO-REPRESENTANTE+6(4).
          AND WERKS EQ MEMO-REMETENTE+6(4).
      IF SY-SUBRC NE 0.
*        MESSAGE E037 WITH MEMO-MATERIAL MEMO-REPRESENTANTE+6(4) DISPLAY LIKE C_S.
        MESSAGE E037 WITH MEMO-MATERIAL MEMO-REMETENTE+6(4) DISPLAY LIKE C_S.
      ENDIF.
    ELSE.
      SELECT SINGLE NBM INTO WA_PRODUTO-NCM
        FROM J_1BNFLIN
       WHERE DOCNUM EQ MEMO-DOCNUM.
    ENDIF.

    SELECT SINGLE MAKTG INTO WA_PRODUTO-MATERIAL
      FROM MAKT
     WHERE MATNR EQ MEMO-MATERIAL
       AND SPRAS EQ SY-LANGU.

    WA_PRODUTO-MOEDA          = MEMO-MOEDA.

    WRITE MEMO-VALOR_UNITARIO TO VG_VALOR.
    SHIFT VG_VALOR LEFT DELETING LEADING SPACE.
    WA_PRODUTO-VALOR_UNITARIO = VG_VALOR.

    WRITE MEMO-VALOR_TOTAL TO VG_VALOR.
    SHIFT VG_VALOR LEFT DELETING LEADING SPACE.
    WA_PRODUTO-VALOR_TOTAL    = VG_VALOR.

*----------------------------------------------------------------------*
*  Remetente
*----------------------------------------------------------------------*

    CLEAR: DADOS_FORN.

    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO   = MEMO-REMETENTE
        P_PARTYPE    = C_V
      CHANGING
        WA_INFO_PART = DADOS_FORN.

    WA_REMETENTE-REM_RAZAO_SOCIAL = DADOS_FORN-NAME1.
    WA_REMETENTE-REM_ENDERECO     = DADOS_FORN-STRAS.
    WA_REMETENTE-REM_BAIRRO       = DADOS_FORN-ORT02.
    WA_REMETENTE-REM_UF           = DADOS_FORN-REGIO.
    WA_REMETENTE-REM_CEP          = DADOS_FORN-PSTLZ.

    IF DADOS_FORN-STKZN IS INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_CGCBR_OUTPUT'
        EXPORTING
          INPUT  = DADOS_FORN-STCD1
        IMPORTING
          OUTPUT = VG_CNPJ.
      WA_REMETENTE-REM_CNPJ         = VG_CNPJ.
      WA_REMETENTE-REM_IE           = DADOS_FORN-STCD3.
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_CPFBR_OUTPUT'
        EXPORTING
          INPUT  = DADOS_FORN-STCD2
        IMPORTING
          OUTPUT = VG_CPF.
      WA_REMETENTE-REM_CNPJ         = VG_CPF.
      WA_REMETENTE-REM_IE           = DADOS_FORN-STCD2.
    ENDIF.

    SELECT SINGLE TEXT
      INTO WA_REMETENTE-REM_CIDADE
      FROM J_1BTXJURT
     WHERE SPRAS      EQ SY-LANGU
       AND COUNTRY    EQ DADOS_FORN-LAND1
       AND TAXJURCODE EQ DADOS_FORN-TXJCD.

*----------------------------------------------------------------------*
*  Informações do Memorando
*----------------------------------------------------------------------*

    WA_INFO_MEMO-MEMO_NUMERO    = MEMO-NUMERO_MEMO.
    WA_INFO_MEMO-MEMO_DDE       = MEMO-NR_DDE.
    WA_INFO_MEMO-MEMO_DT_DDE    = MEMO-DT_DDE.
    WA_INFO_MEMO-MEMO_RE        = MEMO-NR_RE.
    WA_INFO_MEMO-MEMO_DT_RE     = MEMO-DT_RE.

    _IS_DUE = ABAP_FALSE.
    CALL FUNCTION 'ZDUE_CHECK_NR_RE'
      EXPORTING
        I_NUMERO  = MEMO-NR_RE
      IMPORTING
        E_IS_DUE  = _IS_DUE.

    IF _IS_DUE EQ ABAP_TRUE.
      WA_INFO_MEMO-MEMO_DS_RE_DUE = 'DU-e Nº:'.
      WA_INFO_MEMO-MEMO_DDE       = 'XXXXXXXXXX'.
    ELSE.
      WA_INFO_MEMO-MEMO_DS_RE_DUE = 'REGISTRO DE EXPORTAÇÃO Nº:'.
    ENDIF.

    SELECT SINGLE LANDX50
      INTO WA_INFO_MEMO-MEMO_PAIS_DEST
      FROM T005T
     WHERE SPRAS EQ SY-LANGU
       AND LAND1 EQ MEMO-PAIS_DESTINO.

*----------------------------------------------------------------------*
*  Notas Fiscais do Memorando
*----------------------------------------------------------------------*

    CALL FUNCTION 'Z_MEMO_AGRUPA_NOTAS_MEMORANDO'
      EXPORTING
        P_NR_MEMORANDO = MEMO-NR_MEMORANDO
        STATUS         = MEMO-CANCELADO
        LAYOUT_NEW     = LAYOUT_NEW
        DIRECAO        = MEMO-DIRECAO
      TABLES
        IT_NOTAS       = IT_NOTAS.

    LOOP AT IT_NOTAS INTO WA_NOTAS.
      VG_TABIX = SY-TABIX.
      WA_NOTAS-DESCRICAO = WA_NOTAS-DESCRICAO(25).
      MODIFY IT_NOTAS INDEX VG_TABIX FROM WA_NOTAS TRANSPORTING DESCRICAO.
    ENDLOOP.

    CLEAR: WA_NOTAS.

*----------------------------------------------------------------------*
*  B/L(s) do Memorando
*----------------------------------------------------------------------*

    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE IT_BL
      FROM ZDOC_MEMO_NOMEAC
     WHERE NR_NOTA_EXP EQ MEMO-NR_NOTA_EXP.

    IF SY-SUBRC EQ 0.
      PERFORM ADD_BL TABLES IT_BL USING WA_INFO_MEMO.
    ENDIF.

*----------------------------------------------------------------------*
*  Dados do Transportador
*----------------------------------------------------------------------*

    CLEAR: DADOS_FORN.

    CALL FUNCTION 'Z_PARCEIRO_INFO'
      EXPORTING
        P_PARCEIRO   = MEMO-TRANSPORTADOR
        P_PARTYPE    = C_V
      CHANGING
        WA_INFO_PART = DADOS_FORN.

    WA_TRANSPORTADOR-TRA_RAZAO_SOCIAL = DADOS_FORN-NAME1.
    WA_TRANSPORTADOR-TRA_ENDERECO     = DADOS_FORN-STRAS.
    WA_TRANSPORTADOR-TRA_BAIRRO       = DADOS_FORN-ORT02.
    WA_TRANSPORTADOR-TRA_UF           = DADOS_FORN-REGIO.
    WA_TRANSPORTADOR-TRA_CEP          = DADOS_FORN-PSTLZ.

    IF DADOS_FORN-STKZN IS INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_CGCBR_OUTPUT'
        EXPORTING
          INPUT  = DADOS_FORN-STCD1
        IMPORTING
          OUTPUT = VG_CNPJ.
      WA_TRANSPORTADOR-TRA_CNPJ         = VG_CNPJ.
      WA_TRANSPORTADOR-TRA_IE           = DADOS_FORN-STCD3.
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_CPFBR_OUTPUT'
        EXPORTING
          INPUT  = DADOS_FORN-STCD2
        IMPORTING
          OUTPUT = VG_CPF.

      WA_TRANSPORTADOR-TRA_CNPJ         = VG_CPF.
      WA_TRANSPORTADOR-TRA_IE           = DADOS_FORN-STCD2.
    ENDIF.

    SELECT SINGLE TEXT
      INTO WA_TRANSPORTADOR-TRA_CIDADE
      FROM J_1BTXJURT
     WHERE SPRAS      EQ SY-LANGU
       AND COUNTRY    EQ DADOS_FORN-LAND1
       AND TAXJURCODE EQ DADOS_FORN-TXJCD.

*----------------------------------------------------------------------*
*  Representante Legal - Assinatura
*----------------------------------------------------------------------*
    WA_MEMORANDO-LEG_NAME1 = MEMO-RESPONSAVEL.

*----------------------------------------------------------------------*
*  Chave de Exportação da Nota Fiscal
*----------------------------------------------------------------------*
    CLEAR WA_J1BN_EXP.

    SELECT SINGLE * FROM J_1BNFE_ACTIVE
      INTO WA_J1BN_EXP
        WHERE DOCNUM EQ MEMO-DOCNUM.

    WA_MEMORANDO-NFE_KEY_EXP = COND #( WHEN MEMO-DIRECAO EQ C_2
                                          THEN MEMO-CHV_NFE_TERC
                                          ELSE |{ WA_J1BN_EXP-REGIO }{ WA_J1BN_EXP-NFYEAR }{ WA_J1BN_EXP-NFMONTH }{ WA_J1BN_EXP-STCD1 }{ WA_J1BN_EXP-MODEL }{ WA_J1BN_EXP-SERIE }{ WA_J1BN_EXP-NFNUM9 }{ WA_J1BN_EXP-DOCNUM9 }{ WA_J1BN_EXP-CDV }| ).

*----------------------------------------------------------------------*
*  Memorando
*----------------------------------------------------------------------*
    MOVE-CORRESPONDING WA_EXPORTADOR    TO WA_MEMORANDO.
    MOVE-CORRESPONDING WA_NOTA_EXP      TO WA_MEMORANDO.
    MOVE-CORRESPONDING WA_PRODUTO       TO WA_MEMORANDO.
    MOVE-CORRESPONDING WA_REMETENTE     TO WA_MEMORANDO.
    MOVE-CORRESPONDING WA_TRANSPORTADOR TO WA_MEMORANDO.
    MOVE-CORRESPONDING WA_REPRESENTA    TO WA_MEMORANDO.
    MOVE-CORRESPONDING WA_REPRESETANTE  TO WA_MEMORANDO.
    MOVE-CORRESPONDING WA_INFO_MEMO     TO WA_MEMORANDO.

*----------------------------------------------------------------------*
*  Imprimir Memorando
*----------------------------------------------------------------------*
    PERFORM IMPRIMIR TABLES IT_NOTAS USING WA_MEMORANDO.

  ENDFORM.                    " IMPRIMIR_MEMORANDO
*&---------------------------------------------------------------------*
*&      Form  EMITIR_NOTAS_VINCULADAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
  FORM EMITIR_NOTAS_VINCULADAS .
    DATA: VG_VERIFICA_SELECAO TYPE SY-SUBRC.

    PERFORM VERIFICA_SELECAO_MEMORANDO USING VG_VERIFICA_SELECAO.

    IF VG_VERIFICA_SELECAO EQ 0.
      DATA: VL_FORMNAME TYPE TDSFNAME,
            VL_NAME     TYPE RS38L_FNAM.

      VL_FORMNAME = 'ZMEMO_NOTAS'.

      CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
        EXPORTING
          FORMNAME           = VL_FORMNAME
        IMPORTING
          FM_NAME            = VL_NAME
        EXCEPTIONS
          NO_FORM            = 1
          NO_FUNCTION_MODULE = 2
          OTHERS             = 3.

      IF SY-SUBRC <> 0.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        EXIT.
      ENDIF.

      CALL FUNCTION VL_NAME
        EXPORTING
          NR_MEMORANDO     = WA_MEMORANDO-NR_MEMORANDO
        EXCEPTIONS
          FORMATTING_ERROR = 1
          INTERNAL_ERROR   = 2
          SEND_ERROR       = 3
          USER_CANCELED    = 4
          OTHERS           = 5.

      IF SY-SUBRC <> 0.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

    ENDIF.

  ENDFORM.                    " EMITIR_NOTAS_VINCULADAS
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM IMPRIMIR TABLES IT_NOTAS STRUCTURE ZDOC_MEMO_NOTAS USING  WA_MEMORANDO TYPE ZDOC_MEMO_CAB.

    DATA: VL_FORMNAME TYPE TDSFNAME,
          VL_NAME     TYPE RS38L_FNAM.

    IF NOT RADIO1 IS INITIAL.
      VL_FORMNAME = 'ZMEMORANDO'.
    ELSE.
      IF NOT LAYOUT_NEW IS INITIAL.
        VL_FORMNAME = 'ZMEMORANDOA4_NEW'.
      ELSE.
        VL_FORMNAME = 'ZMEMORANDOA4'.
      ENDIF.
    ENDIF.

    CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
      EXPORTING
        FORMNAME           = VL_FORMNAME
      IMPORTING
        FM_NAME            = VL_NAME
      EXCEPTIONS
        NO_FORM            = 1
        NO_FUNCTION_MODULE = 2
        OTHERS             = 3.

    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      EXIT.
    ENDIF.

    CALL FUNCTION VL_NAME
      EXPORTING
        P_MEMO           = WA_MEMORANDO
      TABLES
        IT_NOTAS         = IT_NOTAS
      EXCEPTIONS
        FORMATTING_ERROR = 1
        INTERNAL_ERROR   = 2
        SEND_ERROR       = 3
        USER_CANCELED    = 4
        OTHERS           = 5.

    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDFORM.                    " IMPRIMIR

*&---------------------------------------------------------------------*
*&      Form  ADD_BL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM ADD_BL  TABLES   IT_BL STRUCTURE ZDOC_MEMO_NOMEAC
               USING    WA_INFO_MEMO TYPE ZDOC_MEMO_MEMORANDO.

    DATA: WA_BL  TYPE ZDOC_MEMO_NOMEAC,
          ULTIMA TYPE J_1BDOCDAT.

    LOOP AT IT_BL INTO WA_BL.
      IF WA_INFO_MEMO-MEMO_BL IS INITIAL.
        WA_INFO_MEMO-MEMO_BL = WA_BL-NR_CONHEC.
        ULTIMA               = WA_BL-DT_CONHEC.
        SHIFT WA_INFO_MEMO-MEMO_BL LEFT DELETING LEADING SPACE.
      ELSE.
        SHIFT WA_BL-NR_CONHEC LEFT DELETING LEADING SPACE.
        CONCATENATE WA_INFO_MEMO-MEMO_BL ',' INTO WA_INFO_MEMO-MEMO_BL.
        CONCATENATE WA_INFO_MEMO-MEMO_BL WA_BL-NR_CONHEC INTO WA_INFO_MEMO-MEMO_BL SEPARATED BY SPACE.
        IF WA_BL-DT_CONHEC GT ULTIMA.
          ULTIMA = WA_BL-DT_CONHEC.
        ENDIF.
      ENDIF.
      WA_INFO_MEMO-MEMO_DT_BL = ULTIMA.
    ENDLOOP.

  ENDFORM.                    " ADD_BL

*&---------------------------------------------------------------------*
*&      Form  LANCAR_MEMORANDOS_NOTAS_S
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM LANCAR_MEMORANDOS_NOTAS_S .

    DATA: VG_VERIFICA_SELECAO TYPE SY-SUBRC.

    PERFORM VERIFICA_SELECAO_MEMORANDO USING VG_VERIFICA_SELECAO.

    IF WA_MEMORANDO-CANCELADO IS INITIAL.
      IF VG_VERIFICA_SELECAO EQ 0.
        IF WA_MEMORANDO-DIRECAO EQ C_2.
          PERFORM VERIFICA_BLOQUEIO USING WA_MEMORANDO-NR_MEMORANDO.

          VG_4002_6002     = C_6002.
          VG_DYNNR_ANT     = VG_DYNNR_000.
          VG_DYNNR_000     = C_6000.
          J_1BNFDOC-DOCDAT = SY-DATUM.
          J_1BNFDOC-PSTDAT = SY-DATUM.
          VG_QTD_VINCU     = 0.
          MOVE-CORRESPONDING WA_MEMORANDO TO ZDOC_MEMORANDO.
          MOVE-CORRESPONDING WA_MEMORANDO TO ZDOC_MEMO_NF_EXP.
          PERFORM POPULAR_NOTAS_VINCULADAS_S USING ZDOC_MEMORANDO-NR_MEMORANDO.
        ELSE.
          MESSAGE TEXT-E08 TYPE C_E DISPLAY LIKE C_S.
        ENDIF.
      ENDIF.
    ELSE.
      WA_MEMORANDO-DIRECAO = C_2.
      CALL SCREEN 1006.
    ENDIF.

  ENDFORM.                    " LANCAR_MEMORANDOS_NOTAS_S

*&---------------------------------------------------------------------*
*&      Form  POPULAR_NOTAS_VINCULADAS_S
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM POPULAR_NOTAS_VINCULADAS_S  USING  VG_MEMORANDO TYPE Z_MEMORANDO.

    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE IT_NF_VINCU_S
      FROM ZDOC_MEMO_NOTA_S
     WHERE NR_MEMORANDO EQ VG_MEMORANDO.

    VG_VINCULADO = 0.
    LOOP AT IT_NF_VINCU_S INTO WA_NF_VINCU_S.
      VG_VINCULADO = VG_VINCULADO + WA_NF_VINCU_S-MENGE.
    ENDLOOP.

  ENDFORM.                    " POPULAR_NOTAS_VINCULADAS_S

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_MEMO_TER_INTERCOMPANY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM VERIFICA_MEMO_TER_INTERCOMPANY  USING  MEMORANDO TYPE ZMEMO_MEMORANDO
                                              VG_VERIFICA_SELECAO TYPE SY-SUBRC
                                              INTERCOMPANY TYPE C.

    DATA: DADOS_CLI  TYPE LFA1.

    IF MEMORANDO-PROPRIO IS INITIAL.
      CALL FUNCTION 'Z_PARCEIRO_INFO'
        EXPORTING
          P_PARCEIRO   = MEMORANDO-REMETENTE
          P_PARTYPE    = C_V
        CHANGING
          WA_INFO_PART = DADOS_CLI.

      IF ( DADOS_CLI-KTOKK EQ C_ZFIC ) AND ( NOT INTERCOMPANY IS INITIAL ).
        VG_VERIFICA_SELECAO = 0.
      ELSEIF ( DADOS_CLI-KTOKK NE C_ZFIC ) AND ( INTERCOMPANY IS INITIAL ).
        VG_VERIFICA_SELECAO = 0.
      ELSE.
        IF INTERCOMPANY IS INITIAL.
          VG_VERIFICA_SELECAO = 4.
          MESSAGE TEXT-E07 TYPE C_E DISPLAY LIKE C_S.
        ELSE.
          VG_VERIFICA_SELECAO = 4.
          MESSAGE TEXT-E06 TYPE C_E DISPLAY LIKE C_S.
        ENDIF.
      ENDIF.
    ELSE.
      IF NOT INTERCOMPANY IS INITIAL.
        VG_VERIFICA_SELECAO = 4.
        MESSAGE TEXT-E05 TYPE C_E DISPLAY LIKE C_S.
      ELSE.
        VG_VERIFICA_SELECAO = 0.
      ENDIF.
    ENDIF.

  ENDFORM.                    " VERIFICA_MEMO_TER_INTERCOMPANY

**&SPWIZARD: OUTPUT MODULE FOR TC 'TAB_MEMORANDOS'. DO NOT CHANGE THIS LI
**&SPWIZARD: UPDATE LINES FOR EQUIVALENT SCROLLBAR
*MODULE tab_memorandos_change_tc_attr OUTPUT.
*  DESCRIBE TABLE it_memorandos LINES tab_memorandos-lines.
*ENDMODULE.                    "TAB_MEMORANDOS_CHANGE_TC_ATTR OUTPUT

**&SPWIZARD: INPUT MODUL FOR TC 'TAB_MEMORANDOS'. DO NOT CHANGE THIS LINE
**&SPWIZARD: MARK TABLE
*MODULE tab_memorandos_mark INPUT.
*  DATA: g_tab_memorandos_wa2 LIKE LINE OF it_memorandos.
*  IF tab_memorandos-line_sel_mode = 1
*  AND it_memorandos-mark = c_x.
*    LOOP AT it_memorandos INTO g_tab_memorandos_wa2
*      WHERE mark = c_x.
*      g_tab_memorandos_wa2-mark = ''.
*      MODIFY it_memorandos
*        FROM g_tab_memorandos_wa2
*        TRANSPORTING mark.
*    ENDLOOP.
*  ENDIF.
*  MODIFY it_memorandos
*    INDEX tab_memorandos-current_line
*    TRANSPORTING mark.
*ENDMODULE.                    "TAB_MEMORANDOS_MARK INPUT

*&---------------------------------------------------------------------*
*&      Form  STATUS_MEMORANDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_MEMORANDO_STATUS  text
*      <--P_WA_MEMORANDO_ICONE  text
*----------------------------------------------------------------------*
  FORM STATUS_MEMORANDO  USING    WA_MEMORANDO_STATUS TYPE ZMEMO_MEMORANDO
                         CHANGING WA_MEMORANDO_ICONE  TYPE C.

*'P'  Pendente
*'I'  Emitido
*'T'  Protocolado
*'F'  Fechado
*' '  Aberto

    IF WA_MEMORANDO_STATUS-CANCELADO IS NOT INITIAL.
      WA_MEMORANDO_ICONE = ICON_CANCEL.
    ELSEIF WA_MEMORANDO_STATUS-STATUS IS INITIAL.
      WA_MEMORANDO_ICONE = ICON_LED_RED.
    ELSEIF WA_MEMORANDO_STATUS-STATUS EQ C_F.
      WA_MEMORANDO_ICONE = ICON_COMPLETE.
    ELSEIF WA_MEMORANDO_STATUS-STATUS EQ C_T.
      WA_MEMORANDO_ICONE = ICON_INCOMPLETION_LOG.
    ELSEIF WA_MEMORANDO_STATUS-STATUS EQ C_P.
      WA_MEMORANDO_ICONE = ICON_FAILURE.
    ELSE.
      WA_MEMORANDO_ICONE = ICON_LED_YELLOW.
    ENDIF.

  ENDFORM.                    " STATUS_MEMORANDO

*&---------------------------------------------------------------------*
*&      Form  CANCELAR_MEMORANDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM CANCELAR_MEMORANDO .

    DATA: WA_PROTOLO_MEMO     TYPE ZDOC_MEMO_PRO_ME,
          VG_VERIFICA_SELECAO TYPE SY-SUBRC,
          VG_LINHAS           TYPE I,
          IT_MEMORANDO        TYPE TABLE OF ZDOC_MEMORANDO INITIAL SIZE 0 WITH HEADER LINE,
          ANSWER              TYPE C LENGTH 1,
          WA_DOC_MEMO         TYPE ZDOC_MEMORANDO.

    PERFORM VERIFICA_SELECAO_MEMORANDO USING VG_VERIFICA_SELECAO.

    IF VG_VERIFICA_SELECAO EQ 0.

      PERFORM VERIFICAR_MEMO_PROTOCOLADO USING WA_MEMORANDO-NR_MEMORANDO.

      SELECT SINGLE * INTO WA_PROTOLO_MEMO
        FROM ZDOC_MEMO_PRO_ME
       WHERE NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.

      IF SY-SUBRC EQ 0.
        MESSAGE E001 WITH WA_PROTOLO_MEMO-NR_PROTOCOLO DISPLAY LIKE C_S.
      ELSE.

        SELECT SINGLE * INTO WA_DOC_MEMO
          FROM ZDOC_MEMORANDO
         WHERE NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.

        IF NOT WA_DOC_MEMO-CANCELADO IS INITIAL.
          MESSAGE E068 WITH WA_DOC_MEMO-NUMERO_MEMO DISPLAY LIKE C_S.
        ENDIF.

        CALL FUNCTION 'POPUP_TO_CONFIRM_STEP'
          EXPORTING
            TITEL     = TEXT-001
            TEXTLINE1 = TEXT-004
            TEXTLINE2 = TEXT-007
          IMPORTING
            ANSWER    = ANSWER.

        CASE ANSWER.
          WHEN C_J.
            CLEAR VG_VERIFICA_SELECAO.
          WHEN C_N.
            VG_VERIFICA_SELECAO = 4.
          WHEN C_A.
            VG_VERIFICA_SELECAO = 4.
        ENDCASE.

        IF VG_VERIFICA_SELECAO IS INITIAL.

          CALL FUNCTION 'Z_MEMO_CANCELA'
            EXPORTING
              P_NR_MEMORANDO = WA_MEMORANDO-NR_MEMORANDO.

        ENDIF.
      ENDIF.

    ENDIF.

  ENDFORM.                    " CANCELAR_MEMORANDO


*&---------------------------------------------------------------------*
*&      Module  STATUS_1000  OUTPUT
*&---------------------------------------------------------------------*
  MODULE STATUS_1000 OUTPUT.

    IF VG_DYNNR_FLT IS INITIAL.
      VG_DYNNR_FLT = C_1001.
      VG_DYNNR_RES = C_1002.
    ENDIF.

  ENDMODULE.                 " STATUS_1000  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  CHAMA_DOC_SAP  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  MODULE CHAMA_DOC_SAP INPUT.
    IF NOT IT_NOTAS_EXP-DOCNUM IS INITIAL.
      PERFORM VISUALIZAR_NOTA USING IT_NOTAS_EXP-DOCNUM.
    ENDIF.
  ENDMODULE.                 " CHAMA_DOC_SAP  INPUT


*&SPWIZARD: OUTPUT MODULE FOR TC 'TAB_MEMO_NF_EXP'. DO NOT CHANGE THIS L
*&SPWIZARD: UPDATE LINES FOR EQUIVALENT SCROLLBAR
  MODULE TAB_MEMO_NF_EXP_CHANGE_TC_ATTR OUTPUT.
    DESCRIBE TABLE IT_NOTAS_EXP LINES TAB_MEMO_NF_EXP-LINES.
  ENDMODULE.                    "TAB_MEMO_NF_EXP_CHANGE_TC_ATTR OUTPUT

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_BLOQUEIO
*&---------------------------------------------------------------------*
*       Bloqueio de Memorando de Exportação
*----------------------------------------------------------------------*
  FORM VERIFICA_BLOQUEIO  USING  NR_MEMORANDO TYPE Z_MEMORANDO.

    DATA: BEGIN OF WA_ENQ.
            INCLUDE STRUCTURE SEQG7.
    DATA: END OF WA_ENQ.

    DATA: GARG LIKE SEQG3-GARG,
          ENQ  LIKE STANDARD TABLE OF WA_ENQ.

    CHECK NOT NR_MEMORANDO IS INITIAL
          AND VG_DYNNR_000 NE C_6000
          AND VG_DYNNR_000 NE C_4000
          AND VG_DYNNR_000 NE C_2000.

    CALL FUNCTION 'ZENQUEUE_ZMEMORANDO'
      EXPORTING
        NR_MEMORANDO   = NR_MEMORANDO
      EXCEPTIONS
        FOREIGN_LOCK   = 1
        SYSTEM_FAILURE = 2
        OTHERS         = 3.

    CASE SY-SUBRC.
      WHEN 1.
        CONCATENATE SY-MANDT NR_MEMORANDO INTO GARG.

        CALL FUNCTION 'ENQUE_READ2'
          EXPORTING
            GNAME  = 'ZDOC_MEMORANDO'
            GARG   = GARG
            GUNAME = '*'
          TABLES
            ENQ    = ENQ.

        READ TABLE ENQ INTO WA_ENQ WITH KEY GNAME = 'ZDOC_MEMORANDO'.
        MESSAGE E000 WITH 'Memorando bloqueado por usuário' WA_ENQ-GUNAME.

      WHEN 2.
        MESSAGE E000 WITH 'Erro em bloqueio!'.
    ENDCASE.


  ENDFORM.                    " VERIFICA_BLOQUEIO

*&---------------------------------------------------------------------*
*&      Form  DESBLOQUEIA
*&---------------------------------------------------------------------*
*       Desbloqueio de Memorando de Exportação
*----------------------------------------------------------------------*
  FORM DESBLOQUEIA  USING NR_MEMORANDO TYPE Z_MEMORANDO.

    CHECK NOT NR_MEMORANDO IS INITIAL.

    CALL FUNCTION 'ZDEQUEUE_ZMEMORANDO'
      EXPORTING
        NR_MEMORANDO = NR_MEMORANDO.

  ENDFORM.                    " DESBLOQUEIA

*&---------------------------------------------------------------------*
*&      Module  CHAMA_DANFE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  MODULE CHAMA_DANFE INPUT.

    CHECK NOT IT_NOTAS_EXP-DANFE IS INITIAL.

    CALL FUNCTION 'Z_SD_PRINT_NFE_CTE'
      EXPORTING
        DOC_NUMERO = IT_NOTAS_EXP-DOCNUM.

    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDMODULE.                 " CHAMA_DANFE  INPUT

*&---------------------------------------------------------------------*
*&      Form  LIBERA_MEMORANDOS
*&---------------------------------------------------------------------*
*       Objeto de Autorização de Liberação de Romaneio
*----------------------------------------------------------------------*
  FORM LIBERA_MEMORANDOS .

    DATA: VG_VERIFICA_SELECAO TYPE SY-SUBRC,
          WA_DOC_MEMO         TYPE ZDOC_MEMORANDO.

    PERFORM VERIFICA_SELECAO_MEMORANDO USING VG_VERIFICA_SELECAO.

    IF VG_VERIFICA_SELECAO EQ 0.

*P  Pendente
*I  Emitido
*T  Protocolado
*F  Fechado
*   Aberto

      IF WA_MEMORANDO-STATUS EQ 'I'.

        SELECT SINGLE * INTO WA_DOC_MEMO
          FROM ZDOC_MEMORANDO
         WHERE NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.

        IF NOT WA_DOC_MEMO-CANCELADO IS INITIAL.
          MESSAGE E068 WITH WA_DOC_MEMO-NUMERO_MEMO DISPLAY LIKE C_S.
        ENDIF.

        WA_DOC_MEMO-STATUS = 'P'.
        MODIFY ZDOC_MEMORANDO FROM WA_DOC_MEMO.
        COMMIT WORK.

      ELSE.
        MESSAGE W081 WITH WA_DOC_MEMO-NUMERO_MEMO.
      ENDIF.

    ENDIF.


  ENDFORM.                    " LIBERA_MEMORANDOS

*&---------------------------------------------------------------------*
*&      Form  LIBERA_RESPONSAVEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM LIBERA_RESPONSAVEL.

    DATA: VG_VERIFICA_SELECAO TYPE SY-SUBRC,
          WA_DOC_MEMO         TYPE ZDOC_MEMORANDO.
*        L_RESP              TYPE C.

    PERFORM VERIFICA_SELECAO_MEMORANDO USING VG_VERIFICA_SELECAO.
    L_RESP = 'X'.
    IF VG_VERIFICA_SELECAO EQ 0.

      SELECT SINGLE * INTO WA_DOC_MEMO
        FROM ZDOC_MEMORANDO
       WHERE NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.

      IF NOT WA_DOC_MEMO-CANCELADO IS INITIAL.
        MESSAGE E068 WITH WA_DOC_MEMO-NUMERO_MEMO DISPLAY LIKE C_S.
      ENDIF.
    ENDIF.

  ENDFORM.                    " LIBERA_MEMORANDOS

*&---------------------------------------------------------------------*
*&      Module  CRIA_ALV  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  MODULE CRIA_ALV OUTPUT.

    DATA: VG_TABIX     TYPE SY-TABIX,
          WA_LAYOUT_S  TYPE LVC_S_LAYO,
          GS_VARIANT_C TYPE DISVARIANT.

* PROCESSO PARA ATUALIZAR A ALV TRAZENDO OS DADOS NOVAMENTE
* SE NÃO ESTIVER NA TELA PRINCIPAL É INICIADO A SELECT NOVAMENTE.
    IF INICIA_SELEC IS NOT INITIAL.
      PERFORM PESQUISAR_MEMORANDOS.
    ENDIF.

    CLEAR INICIA_SELEC.

    CONSTANTS: TABELA_PROGRAMA TYPE STRING VALUE 'IT_MEMORANDOS_ALV'.

    IF VG_PRIMEIRO_VISUAL IS INITIAL.

*   Create object for container
      CREATE OBJECT CTL_CCCONTAINER
        EXPORTING
          CONTAINER_NAME = 'MEMO_LISTA'.

      CREATE OBJECT CTL_ALV_MEMO
        EXPORTING
          I_PARENT = CTL_CCCONTAINER.

      PERFORM Z_ESTRUTURA_FIELDCAT USING:
     'ICONE'           SPACE    ' ' 01 03 'X'   ,
     'NUMERO_NOTA'     TEXT-T06 ' ' 02 09 'X'   ,
     'NUMERO_MEMO'     TEXT-T20 ' ' 03 08 'X'   ,
     'SERIE'           TEXT-T05 ' ' 04 03 'X'   ,

     'REPRESENTANTE'   TEXT-T26 ' ' 05 10 SPACE ,
     'REPRESENTAN'     TEXT-T27 ' ' 06 35 SPACE ,
     'REPRESENTACNPJ'  TEXT-T28 ' ' 07 18 SPACE ,

     'EMISSOR'         TEXT-T07 ' ' 08 10 SPACE ,
     'EMISSORN'        TEXT-T08 ' ' 09 35 SPACE ,
     'EMISSORCNPJ'     TEXT-T09 ' ' 10 18 SPACE ,

     'TXTSTATUS'       TEXT-T02 ' ' 11 10 SPACE ,
     'TXTDIRECAO'      TEXT-T04 ' ' 12 08 SPACE ,
     'TXTFINALIDADE'   TEXT-T03 ' ' 13 10 SPACE ,

     'DT_EMISSAO_NOTA' TEXT-T13 ' ' 14 10 SPACE ,

     'REMETENTE'       TEXT-T10 ' ' 15 10 SPACE ,
     'REMETENTEN'      TEXT-T11 ' ' 16 35 SPACE ,
     'REMETENTECNPJ'   TEXT-T12 ' ' 17 18 SPACE ,

     'PROPRIO'         TEXT-T14 ' ' 18 10 SPACE ,
     'DOCNUM'          TEXT-T15 ' ' 19 10 SPACE ,

     'MATERIAL'        TEXT-T16 ' ' 20 18 SPACE ,
     'MAKTG'           TEXT-T17 ' ' 21 35 SPACE ,

     'QUANTIDADE_MEMO' TEXT-T18 ' ' 22 13 SPACE ,
     'UNIDADE'         TEXT-T19 ' ' 23 03 SPACE ,

     'PAIS_ORIGEM'     TEXT-T21 ' ' 24 03 SPACE ,
     'UF_ORIGEM'       TEXT-T22 ' ' 25 03 SPACE ,
     'PAIS_DESTINO'    TEXT-T23 ' ' 26 03 SPACE ,
     'NR_DDE'          TEXT-T24 ' ' 27 15 SPACE ,
     'NR_RE'           TEXT-T25 ' ' 28 15 SPACE .


      GS_VARIANT_C-REPORT = SY-REPID.

      CALL METHOD CTL_ALV_MEMO->SET_TABLE_FOR_FIRST_DISPLAY
        EXPORTING
          IS_LAYOUT       = WA_LAYOUT_S
          IS_VARIANT      = GS_VARIANT_C
          I_SAVE          = 'A'
        CHANGING
          IT_FIELDCATALOG = IT_FIELDCATALOG
          IT_OUTTAB       = IT_MEMORANDOS_ALV[].

      VG_PRIMEIRO_VISUAL = C_X.

    ELSE.

      CALL FUNCTION 'Z_VALORES_DOMINIO'
        EXPORTING
          NAME      = 'ZFINALIDADE_MEMO'
        TABLES
          DD07V_TAB = IT_FNL_TEXT.

      CALL FUNCTION 'Z_VALORES_DOMINIO'
        EXPORTING
          NAME      = 'Z_MEMO_STATUS'
        TABLES
          DD07V_TAB = IT_STT_TEXT.

      CALL FUNCTION 'Z_VALORES_DOMINIO'
        EXPORTING
          NAME      = 'Z_MEMO_DIRECAO'
        TABLES
          DD07V_TAB = IT_DRC_TEXT.

      LOOP AT IT_MEMORANDOS INTO WA_MEMORANDO.

        VG_TABIX = SY-TABIX.

        READ TABLE IT_FNL_TEXT INTO WA_DMO_TEXT WITH KEY DOMVALUE_L = WA_MEMORANDO-TP_FINALIDADE.
        IF SY-SUBRC IS INITIAL.
          WA_MEMORANDO-TXTFINALIDADE = WA_DMO_TEXT-DDTEXT.
        ENDIF.
        READ TABLE IT_STT_TEXT INTO WA_DMO_TEXT WITH KEY DOMVALUE_L = WA_MEMORANDO-STATUS.
        IF SY-SUBRC IS INITIAL.
          WA_MEMORANDO-TXTSTATUS = WA_DMO_TEXT-DDTEXT.
        ENDIF.
        READ TABLE IT_DRC_TEXT INTO WA_DMO_TEXT WITH KEY DOMVALUE_L = WA_MEMORANDO-DIRECAO.
        IF SY-SUBRC IS INITIAL.
          WA_MEMORANDO-TXTDIRECAO = WA_DMO_TEXT-DDTEXT.
        ENDIF.

        MODIFY IT_MEMORANDOS INDEX VG_TABIX FROM WA_MEMORANDO TRANSPORTING TXTFINALIDADE TXTSTATUS TXTDIRECAO.

      ENDLOOP.

      MOVE IT_MEMORANDOS[] TO IT_MEMORANDOS_ALV.

      CALL METHOD CTL_ALV_MEMO->REFRESH_TABLE_DISPLAY.

    ENDIF.

  ENDMODULE.                 " CRIA_ALV  OUTPUT

*&---------------------------------------------------------------------*
*&      Form  Z_ESTRUTURA_FIELDCAT
*&---------------------------------------------------------------------*
* Alimentar a tabela interna de estrutura fieldcat.
*----------------------------------------------------------------------*
  FORM Z_ESTRUTURA_FIELDCAT  USING P_FIELDNAME
                                   P_TEXTO_GRANDE
                                   P_HOT
                                   P_POSICAO
                                   P_OUTPUTLEN
                                   P_FIX_COLUMN.
    CLEAR WA_FIELDCATALOG.
    WA_FIELDCATALOG-FIELDNAME     = P_FIELDNAME.
    WA_FIELDCATALOG-TABNAME       = 'IT_MEMORANDOS_ALV'.
    WA_FIELDCATALOG-SCRTEXT_L     = P_TEXTO_GRANDE.
    WA_FIELDCATALOG-SCRTEXT_M     = P_TEXTO_GRANDE.
    WA_FIELDCATALOG-SCRTEXT_S     = P_TEXTO_GRANDE.
    WA_FIELDCATALOG-HOTSPOT       = P_HOT.
    WA_FIELDCATALOG-COL_POS       = P_POSICAO.
    WA_FIELDCATALOG-OUTPUTLEN     = P_OUTPUTLEN.
    WA_FIELDCATALOG-FIX_COLUMN    = P_FIX_COLUMN.

    IF P_FIELDNAME EQ 'NR_DDE'.
      WA_FIELDCATALOG-CONVEXIT = 'ZDDEX'.
    ELSEIF P_FIELDNAME EQ 'NR_RE'.
      WA_FIELDCATALOG-CONVEXIT = 'ZREEX'.
    ENDIF.

    APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.


  ENDFORM.                    " Z_ESTRUTURA_FIELDCAT

*&---------------------------------------------------------------------*
*&      Module  SET_SCROLL_INFO  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  MODULE SET_SCROLL_INFO OUTPUT.

    CALL METHOD CTL_ALV_MEMO->SET_SCROLL_INFO_VIA_ID
      EXPORTING
        IS_COL_INFO = GS_SCROLL_COL
        IS_ROW_NO   = GS_SCROLL_ROW.

  ENDMODULE.                 " SET_SCROLL_INFO  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  STATUS_1006  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  MODULE STATUS_1006 OUTPUT.

    DATA: IT_DOC_C TYPE TABLE OF ZDOC_MEMO_NOTA_C,
          WA_DOC_C TYPE ZDOC_MEMO_NOTA_C.

    CLEAR IT_DOC_C.

    SET PF-STATUS 'S1006'.
    SET TITLEBAR  'T1006'.

    SELECT * FROM ZDOC_MEMO_NOTA_C
      INTO TABLE IT_DOC_C
      WHERE DIRECAO      EQ WA_MEMORANDO-DIRECAO
        AND NR_MEMORANDO EQ WA_MEMORANDO-NR_MEMORANDO.

    PERFORM MONTAR_ALV_1006.

    IF WA_CONT_C IS INITIAL.
      CREATE OBJECT WA_CONT_C
        EXPORTING
          CONTAINER_NAME              = 'T_1006'
        EXCEPTIONS
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          OTHERS                      = 6.

      CREATE OBJECT WA_ALV_C
        EXPORTING
          I_PARENT          = WA_CONT_C
        EXCEPTIONS
          ERROR_CNTL_CREATE = 1
          ERROR_CNTL_INIT   = 2
          ERROR_CNTL_LINK   = 3
          ERROR_DP_CREATE   = 4
          OTHERS            = 5.

      CALL METHOD WA_ALV_C->SET_TABLE_FOR_FIRST_DISPLAY
        EXPORTING
          IS_LAYOUT                     = WA_LAYOUT_C
*         IT_TOOLBAR_EXCLUDING          = TL_FUNCTION
        CHANGING
          IT_OUTTAB                     = IT_DOC_C
          IT_FIELDCATALOG               = IT_FCAT_C
        EXCEPTIONS
          INVALID_PARAMETER_COMBINATION = 1
          PROGRAM_ERROR                 = 2
          TOO_MANY_LINES                = 3
          OTHERS                        = 4.

      IF SY-SUBRC NE 0 .
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                  WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.
    ELSE.
      CALL METHOD WA_ALV_C->REFRESH_TABLE_DISPLAY.
    ENDIF.

  ENDMODULE.                 " STATUS_1006  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_1006  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  MODULE USER_COMMAND_1006 INPUT.

    CASE SY-UCOMM.
      WHEN 'BACK'.
        LEAVE TO SCREEN 0.
    ENDCASE.

  ENDMODULE.                 " USER_COMMAND_1006  INPUT
*&---------------------------------------------------------------------*
*&      Form  MONTAR_ALV_1006
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
  FORM MONTAR_ALV_1006 .

    PERFORM MONTAR_1006 USING:
    'DOCNUM'  'DocNum'   '20' '' 'X' '',
    'DOCDAT'  'Data'     'X' '' 'X' '',
    'MODEL'   'Modelo'   'X' '' 'X' '',
    'SERIES'  'Série'    'X' '' 'X' '',
    'NFNUM'	  'n° Nota'  'X' '' 'X' '',
    'NFENUM'  'n° Nfe'   'X' '' 'X' '',
    'MENGE'   'Nr. S.V.' 'X' '' 'X' ''.

  ENDFORM.                    " MONTAR_ALV_1006

*&---------------------------------------------------------------------*
*&      Form  MONTAR_1006
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_CAMPO    text
*      -->P_DESC     text
*      -->P_TAM      text
*      -->P_HOT      text
*      -->P_OPT      text
*      -->P_SUM      text
*----------------------------------------------------------------------*
  FORM MONTAR_1006 USING    P_CAMPO TYPE C
                             P_DESC  TYPE C
                             P_TAM   TYPE C
                             P_HOT   TYPE C
                             P_OPT   TYPE C
                             P_SUM   TYPE C
                     .

    WA_FCAT_C-FIELDNAME = P_CAMPO.
    WA_FCAT_C-SCRTEXT_S = P_DESC.
    WA_FCAT_C-COL_OPT   = P_TAM.
    WA_FCAT_C-HOTSPOT   = P_HOT.
    WA_FCAT_C-COL_OPT   = P_OPT.
    WA_FCAT_C-DO_SUM    = P_SUM.

    APPEND WA_FCAT_C TO IT_FCAT_C.

  ENDFORM.                    "MONTAR_1006
