REPORT  ZSDR0049.

TYPES:
BEGIN OF TY_LFA1,
  LIFNR TYPE LIFNR,
  ORT01 TYPE ORT01_GP,
END OF TY_LFA1,

BEGIN OF TY_T001L,
  LGORT TYPE LGORT_D,
  LGOBE TYPE LGOBE,
END OF TY_T001L,

BEGIN OF TY_SAIDA,
  MANDT      TYPE MANDT,
  TERMINAL   TYPE LIFNR,
  LGORT      TYPE LGORT_D,
  USUARIO    TYPE USNAM,
  DATA       TYPE DATS,
  HORA       TYPE RRSELTIME,
  DESC_T     TYPE ORT01_GP,
  DESC_D     TYPE LGOBE,
  DEL        TYPE C,
  STYLE      TYPE LVC_T_STYL,
END OF TY_SAIDA.

DATA: IT_0108       TYPE TABLE OF ZSDT0108,
      IT_SAIDA      TYPE TABLE OF TY_SAIDA,
      WA_SAIDA      TYPE TY_SAIDA,
      WA_0108       TYPE ZSDT0108,
      IT_SAIDA_DEL  TYPE TABLE OF TY_SAIDA,
      IT_SAIDA_ADD  TYPE TABLE OF TY_SAIDA,
      IT_SAIDA_AUX  TYPE TABLE OF TY_SAIDA,
      IT_LFA1       TYPE TABLE OF TY_LFA1,
      IT_T001L      TYPE TABLE OF TY_T001L,
      WG_ACAO(10),
      OK_CODE       LIKE SY-UCOMM,
      VA_CONT       TYPE SCRFNAME VALUE 'C_1',
      IT_FCAT       TYPE TABLE OF LVC_S_FCAT,
      WA_FCAT       TYPE LVC_S_FCAT,
      WA_LAYOUT     TYPE LVC_S_LAYO,
      TY_TOOLBAR    TYPE STB_BUTTON,
      WA_EXCLUDE    TYPE UI_FUNC,
      IT_EXCLUDE    TYPE UI_FUNCTIONS,
      WA_VARIANTE   TYPE DISVARIANT,
      IT_SEL_ROWS   TYPE LVC_T_ROW,
      WA_SEL_ROWS   TYPE LVC_S_ROW,
      WA_STABLE     TYPE LVC_S_STBL,
      STYLE         TYPE LVC_T_STYL WITH HEADER LINE,
      WA_CONT       TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      WA_ALV        TYPE REF TO CL_GUI_ALV_GRID,
      C_ALV_TM      TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER.

FIELD-SYMBOLS: <SAIDA> TYPE TY_SAIDA,
               <LFA1> TYPE TY_LFA1,
               <T001L> TYPE TY_T001L,
               <0108>  TYPE ZSDT0108.


*       CLASS ZCL_EVENTS DEFINITION
CLASS ZCL_EVENTS DEFINITION.
  PUBLIC SECTION.
    METHODS: CONSTRUCTOR IMPORTING IO_ALV_GRID  TYPE REF TO CL_GUI_ALV_GRID,
             ON_TOOLBAR  FOR EVENT TOOLBAR               OF CL_GUI_ALV_GRID IMPORTING E_OBJECT E_INTERACTIVE SENDER,
             ON_DT_CH    FOR EVENT DATA_CHANGED          OF CL_GUI_ALV_GRID IMPORTING ER_DATA_CHANGED,
             ON_DT_CH_FS FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID IMPORTING E_MODIFIED ET_GOOD_CELLS,
             ON_F4       FOR EVENT ONF4                  OF CL_GUI_ALV_GRID IMPORTING E_FIELDNAME E_FIELDVALUE ES_ROW_NO ER_EVENT_DATA ET_BAD_CELLS E_DISPLAY,
             ON_HANDLE   FOR EVENT USER_COMMAND          OF CL_GUI_ALV_GRID IMPORTING E_UCOMM.

  PRIVATE SECTION.
    DATA: ERROR_IN_DATA TYPE C.
    METHODS: CHECK_LIFNR IMPORTING PS_GOOD_LIFNR TYPE LVC_S_MODI PR_DATA_CHANGED TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL,
             CHECK_LGORT IMPORTING PS_GOOD TYPE LVC_S_MODI PR_DATA_CHANGED TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL.

ENDCLASS.                    "ZCL_EVENTS DEFINITION


*       CLASS ZCL_EXECUTE DEFINITION
CLASS ZCL_EXECUTE DEFINITION.
  PUBLIC SECTION.
    METHODS: SELECIONA_DADOS,
             ADICIONA_DADOS,
             DELETA_DADOS,
             SALVAR_DADOS,
             MONTAR_ALV,
             MONTAR_LAY,
             CRIA_ALV,
             BLOCK_CAMPOS.

ENDCLASS.                    "ZCL_EXECUTE IMPLEMENTATION

DATA: OBG_TOOLBAR   TYPE REF TO ZCL_EVENTS.
DATA: OBJ_EXECUTE TYPE REF TO ZCL_EXECUTE.

*       CLASS ZCL_EVENTS IMPLEMENTATION
CLASS ZCL_EVENTS IMPLEMENTATION.

  METHOD CONSTRUCTOR.
    CREATE OBJECT C_ALV_TM
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.
  ENDMETHOD.                    "CONTRUCTOR

  METHOD ON_F4.

    DATA: T4_LFA1   TYPE TABLE OF TY_LFA1,
          W4_LFA1   TYPE TY_LFA1,
          T4_T001L  TYPE TABLE OF TY_T001L,
          W4_T001L  TYPE TY_T001L,
          IT_RETURN TYPE TABLE OF DDSHRETVAL,
          WA_RETURN LIKE LINE  OF IT_RETURN,
          TERMINAL TYPE N LENGTH 10.

    FREE: T4_LFA1, T4_T001L.

    CASE E_FIELDNAME.
      WHEN 'TERMINAL'.
        SELECT LIFNR ORT01 FROM LFA1 INTO TABLE T4_LFA1.
        SORT T4_LFA1 BY LIFNR.

        IF T4_LFA1 IS NOT INITIAL.
          CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
            EXPORTING
              RETFIELD        = 'LIFNR'
              VALUE_ORG       = 'S'
            TABLES
              VALUE_TAB       = T4_LFA1
              RETURN_TAB      = IT_RETURN
            EXCEPTIONS
              PARAMETER_ERROR = 1
              NO_VALUES_FOUND = 2.

          IF SY-SUBRC IS INITIAL.

            READ TABLE IT_RETURN INTO WA_RETURN INDEX 1.
            READ TABLE IT_SAIDA ASSIGNING <SAIDA> WITH KEY TERMINAL = ''.
            IF SY-SUBRC IS INITIAL.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  INPUT  = WA_RETURN-FIELDVAL
                IMPORTING
                  OUTPUT = <SAIDA>-TERMINAL.
              READ TABLE T4_LFA1 INTO W4_LFA1 WITH KEY LIFNR = <SAIDA>-TERMINAL.
              IF SY-SUBRC IS INITIAL.
                <SAIDA>-DESC_T = W4_LFA1-ORT01.
              ENDIF.
            ENDIF.
          ELSE.
            MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
          ENDIF.
        ENDIF.

      WHEN 'LGORT'.
        SELECT LGORT LGOBE FROM T001L INTO TABLE T4_T001L.
        SORT T4_T001L BY LGORT.
        DELETE ADJACENT DUPLICATES FROM T4_T001L COMPARING LGORT.

        IF T4_T001L IS NOT INITIAL.
          CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
            EXPORTING
              RETFIELD        = 'LGORT'
              VALUE_ORG       = 'S'
            TABLES
              VALUE_TAB       = T4_T001L
              RETURN_TAB      = IT_RETURN
            EXCEPTIONS
              PARAMETER_ERROR = 1
              NO_VALUES_FOUND = 2.

          IF SY-SUBRC IS INITIAL.
            READ TABLE IT_RETURN INTO WA_RETURN INDEX 1.
            READ TABLE IT_SAIDA ASSIGNING <SAIDA> WITH KEY LGORT = ''.
            IF SY-SUBRC IS INITIAL.
              MOVE WA_RETURN-FIELDVAL TO <SAIDA>-LGORT.
              READ TABLE T4_T001L INTO W4_T001L WITH KEY LGORT = <SAIDA>-LGORT.
              IF SY-SUBRC IS INITIAL.
                <SAIDA>-DESC_D = W4_T001L-LGOBE.
              ENDIF.
            ENDIF.
          ELSE.
            MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
          ENDIF.
        ENDIF.
    ENDCASE.

    CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY.

  ENDMETHOD.                    "ON_DT_CH

  METHOD ON_DT_CH.

    DATA: LS_GOOD TYPE LVC_S_MODI.

    ERROR_IN_DATA = ABAP_FALSE.

    LOOP AT ER_DATA_CHANGED->MT_GOOD_CELLS INTO LS_GOOD.
      CASE LS_GOOD-FIELDNAME.
        WHEN 'TERMINAL'.
          ME->CHECK_LIFNR( PS_GOOD_LIFNR   = LS_GOOD PR_DATA_CHANGED = ER_DATA_CHANGED ).
        WHEN 'LGORT'.
          ME->CHECK_LGORT( PS_GOOD = LS_GOOD PR_DATA_CHANGED = ER_DATA_CHANGED ).
      ENDCASE.
    ENDLOOP.

    IF ERROR_IN_DATA EQ ABAP_TRUE.
      CALL METHOD ER_DATA_CHANGED->DISPLAY_PROTOCOL.
    ENDIF.

  ENDMETHOD.                    "ON_DT_CH

  METHOD ON_DT_CH_FS.

    DATA: LS_GOOD TYPE LVC_S_MODI.

    CHECK NOT ET_GOOD_CELLS IS INITIAL.
    READ TABLE ET_GOOD_CELLS INTO LS_GOOD INDEX 1.
    CHECK SY-SUBRC IS INITIAL.
    READ TABLE IT_SAIDA ASSIGNING <SAIDA> INDEX LS_GOOD-ROW_ID.

    MOVE SY-UNAME TO <SAIDA>-USUARIO.
    MOVE SY-DATUM TO <SAIDA>-DATA.
    MOVE SY-UZEIT TO <SAIDA>-HORA.

  ENDMETHOD.                    "ON_DT_CH_FS

  METHOD ON_TOOLBAR.
    DATA:
      LD_MSG      TYPE BAPI_MSG,
      LS_MENU     TYPE STB_BTNMNU.

    FIELD-SYMBOLS: <LS_TOOLBAR>  TYPE STB_BUTTON.

* Incluir novos Botoes para incluir e excluir linhas
    FREE: TY_TOOLBAR.
    DEFINE TOOBAR.
      TY_TOOLBAR-ICON      = &1.
      TY_TOOLBAR-FUNCTION  = &2.
      TY_TOOLBAR-QUICKINFO = &3.
      TY_TOOLBAR-BUTN_TYPE = &4.
      APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
      CLEAR TY_TOOLBAR.
    END-OF-DEFINITION.
    TOOBAR:
            '@17@' 'ADD'          'Adicionar'               0,
            '@18@' 'DEL'          'Deletar'                 0,
            ''     ''             ''                        3.

    CASE WG_ACAO.
      WHEN 'ADD' OR 'EXE'.
        LOOP AT E_OBJECT->MT_TOOLBAR ASSIGNING <LS_TOOLBAR>.
          CASE <LS_TOOLBAR>-FUNCTION.
*           Somente dessa maneira para remover esses botões chatos se vc tem ideia melhor faça.
            WHEN '&CHECK' OR '&REFRESH' OR '&LOCAL&CUT' OR '&LOCAL&COPY' OR '&LOCAL&PASTE' OR '&LOCAL&UNDO'.
              DELETE E_OBJECT->MT_TOOLBAR INDEX SY-TABIX.
            WHEN 'DEL'.
              IF WG_ACAO EQ 'ADD'.
                <LS_TOOLBAR>-DISABLED = ABAP_TRUE.
              ENDIF.
          ENDCASE.
        ENDLOOP.
    ENDCASE.

    CALL METHOD C_ALV_TM->REORGANIZE( IO_ALV_TOOLBAR = E_OBJECT ).

  ENDMETHOD.                    "ON_TOOLBAR

  METHOD ON_HANDLE.

    MOVE E_UCOMM TO WG_ACAO.

    CASE E_UCOMM.
      WHEN 'ADD'.
        OBJ_EXECUTE->ADICIONA_DADOS( ).
      WHEN 'DEL'.
        OBJ_EXECUTE->DELETA_DADOS( ).
    ENDCASE.

    OBJ_EXECUTE->MONTAR_ALV( ).

  ENDMETHOD.                    "ON_DEL

  METHOD CHECK_LIFNR.

    DATA: L_LIFNR TYPE LIFNR,
          WA_LFA1  TYPE LFA1,
          WA_GOOD_LGORT TYPE LVC_S_MODI.

    CALL METHOD PR_DATA_CHANGED->GET_CELL_VALUE
      EXPORTING
        I_ROW_ID    = PS_GOOD_LIFNR-ROW_ID
        I_FIELDNAME = PS_GOOD_LIFNR-FIELDNAME
      IMPORTING
        E_VALUE     = L_LIFNR.

    SELECT SINGLE * FROM LFA1 INTO WA_LFA1 WHERE LIFNR EQ L_LIFNR.
    IF NOT SY-SUBRC IS INITIAL.
      SHIFT L_LIFNR LEFT DELETING LEADING '0'.
      CALL METHOD PR_DATA_CHANGED->ADD_PROTOCOL_ENTRY
        EXPORTING
          I_MSGID     = '0K'
          I_MSGNO     = '000'
          I_MSGTY     = 'E'
          I_MSGV1     = TEXT-003
          I_MSGV2     = L_LIFNR
          I_MSGV3     = TEXT-004
          I_FIELDNAME = PS_GOOD_LIFNR-FIELDNAME
          I_ROW_ID    = PS_GOOD_LIFNR-ROW_ID.

      ERROR_IN_DATA = ABAP_TRUE.

    ENDIF.

    READ TABLE IT_SAIDA ASSIGNING <SAIDA> INDEX PS_GOOD_LIFNR-ROW_ID.
    MOVE WA_LFA1-ORT01 TO <SAIDA>-DESC_T.

    CALL METHOD PR_DATA_CHANGED->MODIFY_CELL( I_ROW_ID = PS_GOOD_LIFNR-ROW_ID
      I_TABIX = PS_GOOD_LIFNR-TABIX
      I_FIELDNAME = 'DESC_T'
      I_VALUE = <SAIDA>-DESC_T ).

  ENDMETHOD.                    "CHECK_LIFNR

  METHOD: CHECK_LGORT.

    DATA: L_LGORT TYPE LGORT_D,
          WA_T001L TYPE T001L,
          LS_GOOD TYPE LVC_S_MODI.

    CALL METHOD PR_DATA_CHANGED->GET_CELL_VALUE
      EXPORTING
        I_ROW_ID    = PS_GOOD-ROW_ID
        I_FIELDNAME = PS_GOOD-FIELDNAME
      IMPORTING
        E_VALUE     = L_LGORT.

    SELECT SINGLE * FROM T001L INTO WA_T001L WHERE LGORT EQ L_LGORT.
    IF NOT SY-SUBRC IS INITIAL.

      CALL METHOD PR_DATA_CHANGED->ADD_PROTOCOL_ENTRY
        EXPORTING
          I_MSGID     = '0K'
          I_MSGNO     = '000'
          I_MSGTY     = 'E'
          I_MSGV1     = TEXT-005
          I_MSGV2     = L_LGORT
          I_MSGV3     = TEXT-004
          I_FIELDNAME = PS_GOOD-FIELDNAME
          I_ROW_ID    = PS_GOOD-ROW_ID.

      ERROR_IN_DATA = ABAP_TRUE.
    ENDIF.

    READ TABLE IT_SAIDA ASSIGNING <SAIDA> INDEX PS_GOOD-ROW_ID.
    MOVE WA_T001L-LGOBE TO <SAIDA>-DESC_D.

    CALL METHOD PR_DATA_CHANGED->MODIFY_CELL( I_ROW_ID = PS_GOOD-ROW_ID
      I_TABIX = PS_GOOD-TABIX
      I_FIELDNAME = 'DESC_D'
      I_VALUE = <SAIDA>-DESC_D ).

  ENDMETHOD.                    "CHECK_LGORT

ENDCLASS.                    "ZCL_EVENTS IMPLEMENTATION

*       CLASS ZCL_EXECUTE IMPLEMENTATION
CLASS ZCL_EXECUTE IMPLEMENTATION.

  METHOD SALVAR_DADOS.

    IT_SAIDA_ADD = IT_SAIDA.
    LOOP AT IT_SAIDA_ADD INTO WA_SAIDA.
      IF WA_SAIDA-TERMINAL IS NOT INITIAL AND WA_SAIDA-LGORT IS NOT INITIAL.
        MOVE-CORRESPONDING WA_SAIDA TO WA_0108.
        INSERT INTO ZSDT0108 VALUES WA_0108.
      ENDIF.
    ENDLOOP.

    LOOP AT IT_SAIDA_DEL ASSIGNING <SAIDA> WHERE DEL EQ ABAP_TRUE.
      DELETE FROM ZSDT0108 WHERE TERMINAL EQ <SAIDA>-TERMINAL
                                AND LGORT EQ <SAIDA>-LGORT.
    ENDLOOP.

  ENDMETHOD.                    "SALVAR_DADOS

  METHOD SELECIONA_DADOS.

    FREE: IT_SAIDA_ADD, IT_SAIDA_DEL, IT_0108, IT_LFA1, IT_T001L, IT_SAIDA, IT_SAIDA_AUX.

    SELECT * FROM ZSDT0108 INTO TABLE IT_0108.

    IF NOT IT_0108 IS INITIAL.

      SELECT LIFNR ORT01
          FROM LFA1 INTO TABLE IT_LFA1
        FOR ALL ENTRIES IN IT_0108
        WHERE LIFNR EQ IT_0108-TERMINAL.

      SELECT LGORT LGOBE
          FROM T001L INTO TABLE IT_T001L
        FOR ALL ENTRIES IN IT_0108
        WHERE LGORT EQ IT_0108-LGORT.

      LOOP AT IT_0108 ASSIGNING <0108>.
        MOVE-CORRESPONDING <0108> TO WA_SAIDA.
        APPEND WA_SAIDA TO IT_SAIDA.
      ENDLOOP.

      LOOP AT IT_SAIDA ASSIGNING <SAIDA>.
        READ TABLE IT_LFA1 ASSIGNING <LFA1> WITH KEY LIFNR = <SAIDA>-TERMINAL.
        IF SY-SUBRC IS INITIAL.
          MOVE <LFA1>-ORT01  TO <SAIDA>-DESC_T.
        ENDIF.

        READ TABLE IT_T001L ASSIGNING <T001L> WITH KEY LGORT = <SAIDA>-LGORT.
        IF SY-SUBRC IS INITIAL.
          MOVE <T001L>-LGOBE TO <SAIDA>-DESC_D.
        ENDIF.
      ENDLOOP.
    ENDIF.


    ME->MONTAR_ALV( ).

    ME->BLOCK_CAMPOS( ).
  ENDMETHOD.                    "SELECIONA_DADOS

  METHOD ADICIONA_DADOS.

    IF IT_SAIDA_AUX IS INITIAL.
      MOVE IT_SAIDA TO IT_SAIDA_AUX.
      FREE IT_SAIDA.
    ENDIF.

    CLEAR WA_SAIDA.
    READ TABLE IT_SAIDA WITH KEY TERMINAL = '' TRANSPORTING NO FIELDS.
    IF NOT SY-SUBRC IS INITIAL.
      READ TABLE IT_SAIDA WITH KEY LGORT = '' TRANSPORTING NO FIELDS.
      IF NOT SY-SUBRC IS INITIAL.
        APPEND WA_SAIDA TO IT_SAIDA.
      ENDIF.
    ENDIF.

    ME->BLOCK_CAMPOS( ).

  ENDMETHOD.                    "ADICIONAR_DADOS

  METHOD DELETA_DADOS.

    CLEAR: IT_SEL_ROWS[], WA_SEL_ROWS.

    CALL METHOD WA_ALV->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = IT_SEL_ROWS.

    CHECK NOT IT_SEL_ROWS IS INITIAL.
    LOOP AT IT_SEL_ROWS INTO WA_SEL_ROWS.
      READ TABLE IT_SAIDA ASSIGNING <SAIDA> INDEX WA_SEL_ROWS-INDEX.
      IF SY-SUBRC IS INITIAL.
        <SAIDA>-DEL = ABAP_TRUE.
      ENDIF.
      APPEND <SAIDA> TO IT_SAIDA_DEL.
    ENDLOOP.

    DELETE IT_SAIDA WHERE DEL EQ ABAP_TRUE.

    OBJ_EXECUTE->CRIA_ALV( ).

  ENDMETHOD.                    "DELETAR_DADOS

  METHOD MONTAR_ALV.
    FREE IT_FCAT.
    PERFORM ALV_PREENCHE_CAT USING:
      1 '' '' 'IT_SAIDA' 'TERMINAL'  'Terminal'      '20' '' '' '' '',
      2 '' '' 'IT_SAIDA' 'DESC_T'    'Des. Terminal' '25' '' '' '' '',
      3 '' '' 'IT_SAIDA' 'LGORT'     'Deposito'      '20' '' '' '' '',
      4 '' '' 'IT_SAIDA' 'DESC_D'    'Des. Deposito' '25' '' '' '' ''.

    ME->MONTAR_LAY( ).

  ENDMETHOD.                    "MONTAR_ALV

  METHOD MONTAR_LAY.

    CLEAR: WA_LAYOUT, WA_VARIANTE.

    WA_LAYOUT-ZEBRA      = ABAP_TRUE.
    WA_LAYOUT-NO_ROWINS  = ABAP_TRUE.
    WA_LAYOUT-STYLEFNAME = 'STYLE'.
    WA_LAYOUT-INFO_FNAME = 'LINE_COLOR'.
    WA_LAYOUT-SEL_MODE   = 'C'.
    WA_STABLE-ROW        = ABAP_TRUE.

    WA_VARIANTE-REPORT  = SY-REPID.

    ME->CRIA_ALV( ).

  ENDMETHOD.                    "MONTAR_ALV

  METHOD CRIA_ALV.

    DATA: LT_F4 TYPE LVC_T_F4.
    DATA: WA_F4 TYPE LVC_S_F4.

    IF WA_CONT IS INITIAL.

      CREATE OBJECT WA_CONT
        EXPORTING
          CONTAINER_NAME = VA_CONT.

      CREATE OBJECT WA_ALV
        EXPORTING
          I_PARENT = WA_CONT.

      CREATE OBJECT OBG_TOOLBAR
        EXPORTING
          IO_ALV_GRID = WA_ALV.

      SET HANDLER: OBG_TOOLBAR->ON_TOOLBAR  FOR WA_ALV,
                   OBG_TOOLBAR->ON_HANDLE   FOR WA_ALV.

      FREE LT_F4.
      DEFINE F4.
        MOVE &1 TO WA_F4-FIELDNAME.
        MOVE &2 TO WA_F4-REGISTER.
        MOVE &3 TO WA_F4-GETBEFORE.
        APPEND WA_F4 TO LT_F4.
        CLEAR WA_F4.
      END-OF-DEFINITION.
      F4: 'LGORT'    ABAP_TRUE ABAP_TRUE,
          'TERMINAL' ABAP_TRUE ABAP_TRUE.


      CALL METHOD WA_ALV->SET_TABLE_FOR_FIRST_DISPLAY
        EXPORTING
          IS_LAYOUT                     = WA_LAYOUT
          IS_VARIANT                    = WA_VARIANTE
          I_SAVE                        = 'X'
        CHANGING
          IT_OUTTAB                     = IT_SAIDA
          IT_FIELDCATALOG               = IT_FCAT
        EXCEPTIONS
          INVALID_PARAMETER_COMBINATION = 1
          PROGRAM_ERROR                 = 2
          TOO_MANY_LINES                = 3
          OTHERS                        = 4.

      IF SY-SUBRC NE 0 .
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                  WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      CALL METHOD WA_ALV->REGISTER_EDIT_EVENT
        EXPORTING
          I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.

      CALL METHOD WA_ALV->REGISTER_EDIT_EVENT
        EXPORTING
          I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

      CALL METHOD WA_ALV->REGISTER_F4_FOR_FIELDS
        EXPORTING
          IT_F4 = LT_F4[].

      SET HANDLER: OBG_TOOLBAR->ON_TOOLBAR  FOR WA_ALV,
                   OBG_TOOLBAR->ON_DT_CH    FOR WA_ALV,
                   OBG_TOOLBAR->ON_DT_CH_FS FOR WA_ALV,
                   OBG_TOOLBAR->ON_F4       FOR WA_ALV.

    ELSE.
      CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY.
    ENDIF.
  ENDMETHOD.                    "CRIA_ALV

  METHOD BLOCK_CAMPOS.
    FIELD-SYMBOLS: <WA_FCAT>  TYPE LVC_S_FCAT.

    LOOP AT IT_FCAT ASSIGNING <WA_FCAT>.
      CASE <WA_FCAT>-FIELDNAME.
        WHEN 'TERMINAL' OR 'LGORT'.
          IF <WA_FCAT>-EDIT IS INITIAL.
            IF WG_ACAO EQ 'ADD'.
              MOVE ABAP_TRUE TO <WA_FCAT>-EDIT.
            ENDIF.
          ELSE.
            IF WG_ACAO NE 'ADD'.
              MOVE ABAP_FALSE TO <WA_FCAT>-EDIT.
            ENDIF.
          ENDIF.

      ENDCASE.
    ENDLOOP.

    CALL METHOD WA_ALV->SET_FRONTEND_FIELDCATALOG( IT_FIELDCATALOG = IT_FCAT ).



  ENDMETHOD.                    "BLOCK_CAMPO

ENDCLASS.                    "ZCL_EXECUTE DEFINITION

START-OF-SELECTION.
  CALL SCREEN 100.

END-OF-SELECTION.

*&      Module  PBO  OUTPUT
MODULE PBO OUTPUT.
  CREATE OBJECT OBJ_EXECUTE.

  SET PF-STATUS 'Z_STANDARD'.

  IF  WG_ACAO NE 'ADD'.
    OBJ_EXECUTE->SELECIONA_DADOS( ).
  ENDIF.
ENDMODULE.                 " PBO  OUTPUT

*&      Module  PAI  INPUT
MODULE PAI INPUT.

  MOVE SY-UCOMM TO WG_ACAO.

  CASE SY-UCOMM.
    WHEN 'EXE'.
      OBJ_EXECUTE->SELECIONA_DADOS( ).
    WHEN 'SAVE'.
      OBJ_EXECUTE->SALVAR_DADOS( ).
    WHEN 'BACK' OR 'EXIT'.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.                 " PAI  INPUT

*&      Form  ALV_PREENCHE_CAT
FORM ALV_PREENCHE_CAT  USING      VALUE(P_COL_POS)       TYPE I
                                  VALUE(P_REF_TABNAME)   LIKE DD02D-TABNAME
                                  VALUE(P_REF_FIELDNAME) LIKE DD03D-FIELDNAME
                                  VALUE(P_TABNAME)       LIKE DD02D-TABNAME
                                  VALUE(P_FIELD)         LIKE DD03D-FIELDNAME
                                  VALUE(P_SCRTEXT_L)     LIKE DD03P-SCRTEXT_L
                                  VALUE(P_OUTPUTLEN)
                                  VALUE(P_EDIT)
                                  VALUE(P_SUM)
                                  VALUE(P_EMPHASIZE)
                                  VALUE(P_F4).


  CLEAR WA_FCAT.
  WA_FCAT-FIELDNAME     = P_FIELD.
  WA_FCAT-TABNAME       = P_TABNAME.
  WA_FCAT-REF_TABLE     = P_REF_TABNAME.
  WA_FCAT-REF_FIELD     = P_REF_FIELDNAME.
  WA_FCAT-KEY           = ABAP_FALSE.
  WA_FCAT-COL_POS       = P_COL_POS.

  IF P_OUTPUTLEN IS NOT INITIAL.
    WA_FCAT-OUTPUTLEN      = P_OUTPUTLEN.
  ENDIF.

  WA_FCAT-REPTEXT       = P_SCRTEXT_L.
  WA_FCAT-SCRTEXT_S     = P_SCRTEXT_L.
  WA_FCAT-SCRTEXT_M     = P_SCRTEXT_L.
  WA_FCAT-SCRTEXT_L     = P_SCRTEXT_L.

  CASE P_FIELD.
    WHEN 'TERMINAL' OR 'LGORT'.
      WA_FCAT-F4AVAILABL    = 'X'.
  ENDCASE.

  APPEND WA_FCAT TO IT_FCAT.

ENDFORM.                    " ALV_PREENCHE_CAT
