class ZCL_ORDEM_PAGO definition
  public
  final
  create public .

public section.

  methods GET_CRIATE_ORD_PAGO_PDF_TEXT
    importing
      !I_BUKRS type BUKRS
      !I_GJAHR type GJAHR
      !I_BELNR type BELNR_D
    exporting
      !E_TEXT type STRING
      !E_TEXT_X type XSTRING
      !E_OTF type TT_ITCOO
      !E_TEXTO_TIPO type ZDE_TEXTO_TIPO_T
    returning
      value(R_ORDEM_PAGO) type ref to ZCL_ORDEM_PAGO .
  methods GET_CRIATE_TEXT_PDF
    importing
      !I_FREE_AREA type CHAR01 default ' '
    exporting
      !E_TEXT type STRING
      !E_TEXT_X type XSTRING
      !E_OTF type TT_ITCOO
    returning
      value(R_ORDEM_PAGO) type ref to ZCL_ORDEM_PAGO .
  methods GET_WITH_CRIATE_TEXT_PDF
    importing
      !I_FREE_AREA type CHAR01 default ' '
    exporting
      !E_TEXTO_TIPO type ZDE_TEXTO_TIPO_T
    returning
      value(R_ORDEM_PAGO) type ref to ZCL_ORDEM_PAGO .
  methods SET_WITH_WRITE_PDF
    importing
      !I_BUKRS type BUKRS
      !I_GJAHR type GJAHR
      !I_AUGBL type AUGBL
      !I_WT_WITHCD type WT_WITHCD
      !I_WITHT type WITHT
      !I_BELNR_O type BELNR_D
      !I_GJAHR_O type GJAHR
      !I_CERTIFICADO type TEXT30
      !I_TEXTO_X type XSTRING
    returning
      value(R_ORDEM_PAGO) type ref to ZCL_ORDEM_PAGO .
  methods SET_WRITE_PDF
    importing
      !I_TEXTO_X type XSTRING optional
    exporting
      !E_NAME type CHAR060
      !E_TB_TEXT_PDF_BINARY type ZDE_PDF_CHAR80
    returning
      value(R_ORDEM_PAGO) type ref to ZCL_ORDEM_PAGO .
  methods SET_WRITE_PDF_ALL
    importing
      !I_TEXTO_OTF type TT_ITCOO
      !I_TEXTOS_IMPOSTOS type ZDE_TEXTO_TIPO_T optional
    exporting
      !E_TEXTO_X type XSTRING
      !E_TEXTO type STRING
      !E_PDF type ZDE_PDF_CHAR80
    returning
      value(R_ORDEM_PAGO) type ref to ZCL_ORDEM_PAGO .
  methods SET_DOCUMENTO
    importing
      !I_BUKRS type BUKRS
      !I_GJAHR type GJAHR
      !I_BELNR type BELNR_D
    returning
      value(R_ORDEM_PAGO) type ref to ZCL_ORDEM_PAGO .
protected section.
private section.

  data BKPF type BKPF .
  data BSAK type BSAK .
  data WITH_ITEM_T type ZDE_WITH_ITEM_T .
ENDCLASS.



CLASS ZCL_ORDEM_PAGO IMPLEMENTATION.


  METHOD GET_CRIATE_ORD_PAGO_PDF_TEXT.

    R_ORDEM_PAGO = ME.

    ME->SET_DOCUMENTO(
             EXPORTING
               I_BUKRS = I_BUKRS
               I_GJAHR = I_GJAHR
               I_BELNR = I_BELNR
      )->GET_CRIATE_TEXT_PDF(
             EXPORTING
               I_FREE_AREA = ABAP_FALSE
             IMPORTING
               E_TEXT   = E_TEXT
               E_TEXT_X = E_TEXT_X
               E_OTF    = E_OTF

*      )->GET_WITH_CRIATE_TEXT_PDF(
*             EXPORTING
*               I_FREE_AREA = ABAP_TRUE
*             IMPORTING
*               E_TEXTO_TIPO = E_TEXTO_TIPO
      ).

  ENDMETHOD.


  METHOD GET_CRIATE_TEXT_PDF.

    DATA: RLC_BUKRS TYPE RANGE OF BUKRS,
          RLC_BELNR TYPE RANGE OF BELNR_D,
          RLC_GJAHR TYPE RANGE OF GJAHR,
          RLC_BUDAT TYPE RANGE OF BUDAT,
          HANDLE    TYPE REF TO ZCL_MEMORY_VARIAVEIS_AREA,
          ROOT      TYPE REF TO ZCL_MEMORY_VARIAVEIS,
          OREF      TYPE REF TO ZCL_MEMORY_VARIAVEIS.

    R_ORDEM_PAGO = ME.

    RLC_BUKRS = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->BKPF-BUKRS HIGH = ME->BKPF-BUKRS ) ).
    RLC_BELNR = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->BKPF-BELNR HIGH = ME->BKPF-BELNR ) ).
    RLC_GJAHR = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->BKPF-GJAHR HIGH = ME->BKPF-GJAHR ) ).
    RLC_BUDAT = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->BKPF-BUDAT HIGH = ME->BKPF-BUDAT ) ).

    SELECT SINGLE * INTO @DATA(WA_ZSDYT0052)
      FROM ZSDYT0052
     WHERE BUKRS    EQ @ME->BKPF-BUKRS
       AND AUGBL    EQ @ME->BKPF-BELNR
       AND GJAHR    EQ @ME->BKPF-GJAHR
       AND CK_PRINT EQ 'X'.

    IF SY-SUBRC IS NOT INITIAL.
      CLEAR: WA_ZSDYT0052.
    ENDIF.

    SELECT SINGLE * INTO @DATA(WA_ZSDYT0053)
      FROM ZSDYT0053
     WHERE BUKRS    EQ @ME->BKPF-BUKRS
       AND BELNR_O  EQ @ME->BKPF-BELNR
       AND GJAHR_O  EQ @ME->BKPF-GJAHR
       AND CK_PRINT EQ 'X'.

    IF SY-SUBRC IS NOT INITIAL.
      CLEAR: WA_ZSDYT0053.
    ENDIF.

    IF WA_ZSDYT0053 IS INITIAL OR WA_ZSDYT0052 IS INITIAL.
      DATA(CK_GERAR) = ABAP_TRUE.
    ELSE.
      CK_GERAR = ABAP_FALSE.
    ENDIF.

    CHECK CK_GERAR EQ ABAP_TRUE OR WA_ZSDYT0052-PDF IS INITIAL.

*    CONCATENATE ME->BKPF-BUKRS ME->BKPF-BELNR ME->BKPF-GJAHR INTO DATA(NM_INSTANCE).
*
*    TRY.
*        HANDLE = ZCL_MEMORY_VARIAVEIS_AREA=>ATTACH_FOR_WRITE( INST_NAME = CONV #( NM_INSTANCE ) ).
*        CREATE OBJECT ROOT AREA HANDLE HANDLE.
*        HANDLE->SET_ROOT( ROOT ).
*        CREATE OBJECT ROOT AREA HANDLE HANDLE TYPE ZCL_MEMORY_VARIAVEIS.
*        HANDLE->SET_ROOT( ROOT ).
*        HANDLE->DETACH_COMMIT( ).
*      CATCH CX_SHM_EXCLUSIVE_LOCK_ACTIVE.  "
*      CATCH CX_SHM_VERSION_LIMIT_EXCEEDED.  "
*      CATCH CX_SHM_CHANGE_LOCK_ACTIVE.  "
*      CATCH CX_SHM_PARAMETER_ERROR.  "
*      CATCH CX_SHM_PENDING_LOCK_REMOVED.  "
*      CATCH CX_SHM_ATTACH_ERROR.
*    ENDTRY.

    SUBMIT ZFIY0003 WITH BR_BUKRS IN RLC_BUKRS
                    WITH BR_BELNR IN RLC_BELNR
                    WITH BR_GJAHR IN RLC_GJAHR
                    WITH BR_BUDAT IN RLC_BUDAT
                    WITH RB_PRNT  EQ ABAP_TRUE
                    AND RETURN.

*    TRY.
*        HANDLE = ZCL_MEMORY_VARIAVEIS_AREA=>ATTACH_FOR_READ( INST_NAME = CONV #( NM_INSTANCE ) ).
*        OREF ?= HANDLE->ROOT.
*        OREF->GET_TEXTO_STRING(
*                IMPORTING
*                 E_STRING = E_TEXT
*           )->GET_TEXTO_XSTRING(
*                IMPORTING
*                 E_XSTRING = E_TEXT_X
*           )->GET_TEXTO_OTF(
*                IMPORTING
*                 E_OTF = E_OTF
*           ).
*        CLEAR OREF.
*        HANDLE->DETACH( ).
*        IF I_FREE_AREA EQ ABAP_TRUE.
*          HANDLE->FREE_AREA( ).
*        ENDIF.
*      CATCH CX_SHM_INCONSISTENT.  "
*      CATCH CX_SHM_NO_ACTIVE_VERSION.  "
*      CATCH CX_SHM_READ_LOCK_ACTIVE.  "
*      CATCH CX_SHM_EXCLUSIVE_LOCK_ACTIVE.  "
*      CATCH CX_SHM_PARAMETER_ERROR.  "
*      CATCH CX_SHM_CHANGE_LOCK_ACTIVE.  "
*      CATCH CX_SHM_ATTACH_ERROR.
*    ENDTRY.

  ENDMETHOD.


  METHOD GET_WITH_CRIATE_TEXT_PDF.

    DATA: RLC_BUKRS TYPE RANGE OF BUKRS,
          RLC_BELNR TYPE RANGE OF BELNR_D,
          RLC_GJAHR TYPE RANGE OF GJAHR,
          RLC_BUDAT TYPE RANGE OF BUDAT,
          HANDLE    TYPE REF TO ZCL_MEMORY_VARIAVEIS_AREA,
          ROOT      TYPE REF TO ZCL_MEMORY_VARIAVEIS,
          OREF      TYPE REF TO ZCL_MEMORY_VARIAVEIS.

    R_ORDEM_PAGO = ME.

    RLC_BUKRS = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->BKPF-BUKRS HIGH = ME->BKPF-BUKRS ) ).
    RLC_BELNR = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->BKPF-BELNR HIGH = ME->BKPF-BELNR ) ).
    RLC_GJAHR = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->BKPF-GJAHR HIGH = ME->BKPF-GJAHR ) ).
    RLC_BUDAT = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = ME->BKPF-BUDAT HIGH = ME->BKPF-BUDAT ) ).

    CONCATENATE ME->BKPF-BUKRS ME->BKPF-BELNR ME->BKPF-GJAHR INTO DATA(NM_INSTANCE).

    TRY.
        HANDLE = ZCL_MEMORY_VARIAVEIS_AREA=>ATTACH_FOR_WRITE( INST_NAME = CONV #( NM_INSTANCE ) ).
        CREATE OBJECT ROOT AREA HANDLE HANDLE.
        HANDLE->SET_ROOT( ROOT ).
        CREATE OBJECT ROOT AREA HANDLE HANDLE TYPE ZCL_MEMORY_VARIAVEIS.
        HANDLE->SET_ROOT( ROOT ).
        HANDLE->DETACH_COMMIT( ).
      CATCH CX_SHM_EXCLUSIVE_LOCK_ACTIVE.  "
      CATCH CX_SHM_VERSION_LIMIT_EXCEEDED.  "
      CATCH CX_SHM_CHANGE_LOCK_ACTIVE.  "
      CATCH CX_SHM_PARAMETER_ERROR.  "
      CATCH CX_SHM_PENDING_LOCK_REMOVED.  "
      CATCH CX_SHM_ATTACH_ERROR.
    ENDTRY.

    SUBMIT ZFIY0004 WITH BR_BUKRS IN RLC_BUKRS
                    WITH BR_BELNR IN RLC_BELNR
                    WITH BR_GJAHR IN RLC_GJAHR
                    WITH RB_PRNT  EQ ABAP_TRUE
                    AND RETURN.

    TRY.
        HANDLE = ZCL_MEMORY_VARIAVEIS_AREA=>ATTACH_FOR_READ( INST_NAME = CONV #( NM_INSTANCE ) ).
        OREF ?= HANDLE->ROOT.
        OREF->GET_TEXTOS_TPOS( IMPORTING E_TEXTO_TIPO = E_TEXTO_TIPO ).
        CLEAR OREF.
        HANDLE->DETACH( ).
        IF I_FREE_AREA EQ ABAP_TRUE.
          HANDLE->FREE_AREA( ).
        ENDIF.
      CATCH CX_SHM_INCONSISTENT.  "
      CATCH CX_SHM_NO_ACTIVE_VERSION.  "
      CATCH CX_SHM_READ_LOCK_ACTIVE.  "
      CATCH CX_SHM_EXCLUSIVE_LOCK_ACTIVE.  "
      CATCH CX_SHM_PARAMETER_ERROR.  "
      CATCH CX_SHM_CHANGE_LOCK_ACTIVE.  "
      CATCH CX_SHM_ATTACH_ERROR.
    ENDTRY.

  ENDMETHOD.


  METHOD SET_DOCUMENTO.

    R_ORDEM_PAGO = ME.

    SELECT SINGLE * INTO @DATA(WA_BKPF)
      FROM BKPF
     WHERE BUKRS EQ @I_BUKRS
       AND GJAHR EQ @I_GJAHR
       AND BELNR EQ @I_BELNR.

    CHECK SY-SUBRC IS INITIAL.

    SELECT SINGLE * INTO @DATA(WA_BSAK)
      FROM BSAK
     WHERE BUKRS EQ @I_BUKRS
       AND GJAHR EQ @I_GJAHR
       AND BELNR EQ @I_BELNR.

    IF SY-SUBRC IS NOT INITIAL.
      SELECT SINGLE * INTO @DATA(WA_BSIK)
        FROM BSIK
       WHERE BUKRS EQ @I_BUKRS
         AND GJAHR EQ @I_GJAHR
         AND BELNR EQ @I_BELNR.

      IF SY-SUBRC IS INITIAL.
        MOVE-CORRESPONDING WA_BSIK TO ME->BSAK.
      ENDIF.

    ELSE.
      ME->BSAK = WA_BSAK.
    ENDIF.

    ME->BKPF = WA_BKPF.

  ENDMETHOD.


  METHOD SET_WITH_WRITE_PDF.

    DATA: FILENAME TYPE STRING,
          LT_PDF   TYPE TABLE OF CHAR80.

    R_ORDEM_PAGO = ME.

    CHECK I_TEXTO_X IS NOT INITIAL.

    SELECT SINGLE * INTO @DATA(WA_ZLEST0007)
      FROM ZLEST0007
     WHERE ID_INTERFACE = '33'
       AND ID_CTG       = 'PDF'
       AND PREFIX       = 'OP'.

    CHECK SY-SUBRC IS INITIAL.

    SELECT SINGLE * INTO @DATA(WA_ZSDYT0053)
      FROM ZSDYT0053
     WHERE BUKRS     EQ @I_BUKRS
       AND GJAHR     EQ @I_GJAHR
       AND AUGBL     EQ @I_AUGBL
       AND WT_WITHCD EQ @I_WT_WITHCD
       AND WITHT     EQ @I_WITHT.

    IF SY-SUBRC IS NOT INITIAL.
      WA_ZSDYT0053-BUKRS       = I_BUKRS.
      WA_ZSDYT0053-GJAHR       = I_GJAHR.
      WA_ZSDYT0053-AUGBL       = I_AUGBL.
      WA_ZSDYT0053-CERTIFICADO = I_CERTIFICADO.
      WA_ZSDYT0053-WT_WITHCD   = I_WT_WITHCD.
      WA_ZSDYT0053-WITHT       = I_WITHT.
      WA_ZSDYT0053-BELNR_O     = I_BELNR_O.
      WA_ZSDYT0053-GJAHR_O     = I_GJAHR_O.
    ENDIF.

    CONCATENATE 'Ret_' I_WT_WITHCD '_' I_WITHT '_' I_CERTIFICADO '_' I_BELNR_O '.pdf' INTO WA_ZSDYT0053-NM_ARQUIVO.

    CONCATENATE WA_ZLEST0007-PATHUNIX WA_ZSDYT0053-NM_ARQUIVO INTO FILENAME.

    CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
      EXPORTING
        BUFFER     = I_TEXTO_X
      TABLES
        BINARY_TAB = LT_PDF.

    OPEN DATASET FILENAME FOR OUTPUT IN BINARY MODE.
    IF SY-SUBRC IS INITIAL.
      LOOP AT LT_PDF INTO DATA(LS_PDF).
        TRANSFER LS_PDF TO FILENAME NO END OF LINE.
      ENDLOOP.
      CLOSE DATASET FILENAME.
    ENDIF.

    IF SY-SUBRC IS INITIAL.
      WA_ZSDYT0053-CK_PRINT   = ABAP_TRUE.
      MODIFY ZSDYT0053 FROM WA_ZSDYT0053.
      COMMIT WORK.
    ENDIF.

  ENDMETHOD.


  METHOD SET_WRITE_PDF.

    DATA: FILENAME TYPE STRING.

    R_ORDEM_PAGO = ME.

*    SELECT SINGLE * INTO @DATA(WA_ZLEST0007)
*      FROM ZLEST0007
*     WHERE ID_INTERFACE = '33'
*       AND ID_CTG       = 'PDF'
*       AND PREFIX       = 'OP'.
*
*    CHECK SY-SUBRC IS INITIAL.
*
*    CHECK I_TEXTO_X IS NOT INITIAL.
*
*    SELECT SINGLE * INTO @DATA(WA_ZSDYT0052)
*      FROM ZSDYT0052
*     WHERE BUKRS EQ @ME->BKPF-BUKRS
*       AND GJAHR EQ @ME->BKPF-GJAHR
*       AND AUGBL EQ @ME->BKPF-BELNR.
*
*    IF SY-SUBRC IS NOT INITIAL.
*      WA_ZSDYT0052-BUKRS = ME->BSAK-BUKRS.
*      WA_ZSDYT0052-GJAHR = ME->BSAK-GJAHR.
*      WA_ZSDYT0052-AUGBL = ME->BKPF-BELNR.
*    ENDIF.

    CONCATENATE 'OP_' ME->BSAK-AUGBL '_' ME->BSAK-LIFNR '.pdf' INTO E_NAME.

*    CONCATENATE WA_ZLEST0007-PATHUNIX WA_ZSDYT0052-NM_ARQUIVO INTO FILENAME.
*
*    CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
*      EXPORTING
*        BUFFER     = I_TEXTO_X
*      TABLES
*        BINARY_TAB = E_TB_TEXT_PDF_BINARY.
*
*    OPEN DATASET FILENAME FOR OUTPUT IN BINARY MODE.
*    IF SY-SUBRC IS INITIAL.
*      LOOP AT E_TB_TEXT_PDF_BINARY INTO DATA(LS_PDF).
*        TRANSFER LS_PDF TO FILENAME NO END OF LINE.
*      ENDLOOP.
*      CLOSE DATASET FILENAME.
*    ENDIF.
*
*    IF SY-SUBRC IS INITIAL.
*      WA_ZSDYT0052-CK_PRINT   = ABAP_TRUE.
*      MODIFY ZSDYT0052 FROM WA_ZSDYT0052.
*      COMMIT WORK.
*    ENDIF.
*
*    E_NAME = WA_ZSDYT0052-NM_ARQUIVO.

  ENDMETHOD.


  METHOD SET_WRITE_PDF_ALL.

    DATA: TAB_OTF_FINAL TYPE TT_ITCOO,
          PDF_TAB       TYPE TABLE OF TLINE,
          BIN_FILESIZE  TYPE I,
          "LT_PDF        TYPE TABLE OF CHAR80,
          OBJ_TEXTO     TYPE REF TO ZCL_MEMORY_VARIAVEIS.

    SELECT SINGLE * INTO @DATA(WA_ZLEST0007)
      FROM ZLEST0007
     WHERE ID_INTERFACE = '33'
       AND ID_CTG       = 'PDF'
       AND PREFIX       = 'OP'.

    CHECK SY-SUBRC IS INITIAL.

    TAB_OTF_FINAL[] = I_TEXTO_OTF[].

    DESCRIBE TABLE I_TEXTOS_IMPOSTOS LINES DATA(LC_QTD).

    IF LC_QTD IS NOT INITIAL.

      "Merge
      LOOP AT I_TEXTOS_IMPOSTOS INTO DATA(WA_TEXTOS_IMPOSTOS).

        "removing the initial and final markers from the OTF data**********
        DELETE WA_TEXTOS_IMPOSTOS-OTF WHERE TDPRINTCOM = '//'.

        "searching for the end-of-page in OTF table************
        FIND ALL OCCURRENCES OF 'EP' IN TABLE TAB_OTF_FINAL RESULTS DATA(IT_RESULTADO).
        LOOP AT IT_RESULTADO INTO DATA(WA_RESULTADO).
          DATA(MY_TABIX) = WA_RESULTADO-LINE + 1.
        ENDLOOP.

        "appending the modified OTF table to the final OTF table****
        INSERT LINES OF WA_TEXTOS_IMPOSTOS-OTF INTO TAB_OTF_FINAL INDEX MY_TABIX.

      ENDLOOP.

    ENDIF.

    CONCATENATE WA_ZLEST0007-PATHUNIX 'OP_' ME->BSAK-AUGBL '.pdf' INTO DATA(FILENAME).

    CALL FUNCTION 'CONVERT_OTF'
      EXPORTING
        FORMAT        = 'PDF'
        MAX_LINEWIDTH = 132
      IMPORTING
        BIN_FILESIZE  = BIN_FILESIZE
        BIN_FILE      = E_TEXTO_X
      TABLES
        OTF           = TAB_OTF_FINAL[]
        LINES         = PDF_TAB.

    CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
      EXPORTING
        BUFFER     = E_TEXTO_X
      TABLES
        BINARY_TAB = E_PDF.

    CREATE OBJECT OBJ_TEXTO.

    OBJ_TEXTO->SET_TEXTO_XSTRING(
        EXPORTING
          I_XSTRING = E_TEXTO_X
      )->GET_TEXTO_STRING(
       IMPORTING
         E_STRING   = E_TEXTO
      ).

    CLEAR: OBJ_TEXTO.

    OPEN DATASET FILENAME FOR OUTPUT IN BINARY MODE.
    IF SY-SUBRC IS INITIAL.
      LOOP AT E_PDF INTO DATA(LS_PDF).
        TRANSFER LS_PDF TO FILENAME NO END OF LINE.
      ENDLOOP.
      CLOSE DATASET FILENAME.
    ENDIF.

  ENDMETHOD.
ENDCLASS.
