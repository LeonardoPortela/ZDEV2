*&---------------------------------------------------------------------*
*&  Include           ZRSPED01_0100
*&---------------------------------------------------------------------*

DATA: G_CUSTOM_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      DG_SPLITTER_1      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_PARENT_1        TYPE REF TO CL_GUI_CONTAINER,
      DG_SPLITTER_2      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_PARENT_2        TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_2A       TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_ALV      TYPE REF TO CL_GUI_CONTAINER,
      PICTURE            TYPE REF TO CL_GUI_PICTURE,
      GS_LAYOUT          TYPE LVC_S_LAYO,
      GS_VARIANT         TYPE DISVARIANT,
      IT_FIELDCATALOG    TYPE LVC_T_FCAT,
      WA_FIELDCATALOG    TYPE LVC_S_FCAT,
      CTL_ALV            TYPE REF TO CL_GUI_ALV_GRID,
      GS_SCROLL_COL      TYPE LVC_S_COL,
      GS_SCROLL_ROW      TYPE LVC_S_ROID,
      IT_EXCLUDE_FCODE   TYPE UI_FUNCTIONS,
      WA_EXCLUDE_FCODE   LIKE LINE OF IT_EXCLUDE_FCODE,
      DG_DYNDOC_ID       TYPE REF TO CL_DD_DOCUMENT,
      TABLE_ELEMENT      TYPE REF TO CL_DD_TABLE_ELEMENT,
      COLUMN             TYPE REF TO CL_DD_AREA,
      TABLE_ELEMENT2     TYPE REF TO CL_DD_TABLE_ELEMENT,
      COLUMN_1           TYPE REF TO CL_DD_AREA,
      COLUMN_2           TYPE REF TO CL_DD_AREA,
      DG_HTML_CNTRL      TYPE REF TO CL_GUI_HTML_VIEWER,
      IT_SELECT          TYPE STANDARD TABLE OF ZSPED002,
      WA_SELECT          TYPE ZSPED002,
      CK_GRAVOU          TYPE C LENGTH 1.
*      IT_FILTER          TYPE LVC_T_FILT.

DATA: IT_SELECTED_ROWS TYPE LVC_T_ROW,
      WA_SELECTED_ROWS TYPE LVC_S_ROW.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.

  CTL_ALV->CHECK_CHANGED_DATA( ).

  CASE SY-UCOMM.
    WHEN 'COPIAR'.
      PERFORM EDITAR_EMPRESA.
    WHEN 'SAVE'.
      PERFORM SALVAR.
    WHEN 'DELETAR'.
      PERFORM DELETAR.
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100_EXIT INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.

  DATA: URL(255)                TYPE C,
        P_TEXT                  TYPE SDYDO_TEXT_ELEMENT,
        SDYDO_TEXT_ELEMENT(255),
        P_TEXT_TABLE            TYPE SDYDO_TEXT_TABLE,
        VL_CONT                 TYPE I.

  DATA: GS_ALV_REFRES_COND TYPE LVC_S_STBL.

  SET PF-STATUS 'PF0100'.
  SET TITLEBAR 'TL0100'.

  IF G_CUSTOM_CONTAINER IS INITIAL.

    "create a container
    CREATE OBJECT G_CUSTOM_CONTAINER
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    IF SY-SUBRC <> 0.
      MESSAGE A000(TREE_CONTROL_MSG).
    ENDIF.

    CREATE OBJECT DG_SPLITTER_1
      EXPORTING
        PARENT  = G_CUSTOM_CONTAINER
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_ALV.

    CREATE OBJECT DG_SPLITTER_2
      EXPORTING
        PARENT  = DG_PARENT_1
        ROWS    = 1
        COLUMNS = 2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 2
      RECEIVING
        CONTAINER = DG_PARENT_2A.

    CALL METHOD DG_SPLITTER_1->SET_ROW_HEIGHT
      EXPORTING
        ID     = 1
        HEIGHT = 16.

    CALL METHOD DG_SPLITTER_2->SET_COLUMN_WIDTH
      EXPORTING
        ID    = 1
        WIDTH = 40.

    CREATE OBJECT PICTURE
      EXPORTING
        PARENT = DG_PARENT_2A.

    PERFORM F_PEGA_IMAGEM USING 'LOGO_NOVO' CHANGING URL.

    CALL METHOD PICTURE->LOAD_PICTURE_FROM_URL
      EXPORTING
        URL = URL.

    CALL METHOD PICTURE->SET_DISPLAY_MODE
      EXPORTING
        DISPLAY_MODE = PICTURE->DISPLAY_MODE_FIT_CENTER.

    PERFORM FILL_IT_FIELDCATALOG.

    "Fill info for layout variant
    PERFORM FILL_GS_VARIANT.

    GS_LAYOUT-SEL_MODE   = 'A'.
*    GS_LAYOUT-EDIT       = ABAP_TRUE.
    GS_LAYOUT-CWIDTH_OPT = 'X'.

    CLEAR: IT_EXCLUDE_FCODE, IT_EXCLUDE_FCODE[].
    PERFORM EXCLUDE.

    CREATE OBJECT CTL_ALV
      EXPORTING
        I_PARENT = DG_PARENT_ALV.

    SET HANDLER:
      LCL_EVENTHANDLER=>HANDLE_DATA_CHANGED          FOR CTL_ALV,
      LCL_EVENTHANDLER=>HANDLE_DATA_CHANGED_FINISHED FOR CTL_ALV.

    CALL METHOD CTL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT
        IS_VARIANT           = GS_VARIANT
        IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
        I_SAVE               = 'A'
      CHANGING
        IT_FIELDCATALOG      = IT_FIELDCATALOG
        IT_OUTTAB            = IT_ZSPED002.

    CREATE OBJECT DG_DYNDOC_ID
      EXPORTING
        STYLE = 'ALV_GRID'.

    CALL METHOD DG_DYNDOC_ID->INITIALIZE_DOCUMENT.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 1
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT.

    CALL METHOD TABLE_ELEMENT->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN.

    CALL METHOD TABLE_ELEMENT->SET_COLUMN_STYLE
      EXPORTING
        COL_NO    = 1
        SAP_ALIGN = 'LEFT'
        SAP_STYLE = CL_DD_DOCUMENT=>HEADING.

    P_TEXT = TEXT-001.

    CALL METHOD COLUMN->ADD_TEXT
      EXPORTING
        TEXT      = P_TEXT
        SAP_STYLE = 'HEADING'.

    "------------ cabeçalho

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 2
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT2.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      EXPORTING
        SAP_STYLE   = 'SAP_BOLD'
        STYLE_CLASS = 'SAP_BOLD'
      IMPORTING
        COLUMN      = COLUMN_1.

    CLEAR: P_TEXT_TABLE.

    IF P_BUKRS IS NOT INITIAL.
      LOOP AT P_BUKRS.
        IF P_BUKRS-OPTION NE 'EQ' AND P_BUKRS-OPTION NE 'BT'.
          SDYDO_TEXT_ELEMENT = 'Empresa: Multiplas Seleções'.
          EXIT.
        ELSEIF P_BUKRS-OPTION EQ 'BT'.
          CONCATENATE 'Empresa:' P_BUKRS-LOW '-' P_BUKRS-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          EXIT.
        ELSE.
          VL_CONT = VL_CONT + 1.
          IF VL_CONT GT 1.
            SDYDO_TEXT_ELEMENT = 'Empresa: Multiplas Seleções'.
          ELSE.
            CONCATENATE 'Empresa:' P_BUKRS-LOW INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ELSE.
      SDYDO_TEXT_ELEMENT = 'Empresa:'.
    ENDIF.

    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CLEAR: VL_CONT, SDYDO_TEXT_ELEMENT.

    IF P_VERSN IS NOT INITIAL.
      LOOP AT P_VERSN.
        IF P_VERSN-OPTION NE 'EQ' AND P_VERSN-OPTION NE 'BT'.
          SDYDO_TEXT_ELEMENT = 'Estrut. Balanço: Multiplas Seleções'.
          EXIT.
        ELSEIF P_VERSN-OPTION EQ 'BT'.
          CONCATENATE 'Estrut. Balanço:' P_VERSN-LOW '-' P_VERSN-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          EXIT.
        ELSE.
          VL_CONT = VL_CONT + 1.
          IF VL_CONT GT 1.
            SDYDO_TEXT_ELEMENT = 'Estrut. Balanço: Multiplas Seleções'.
          ELSE.
            CONCATENATE 'Estrut. Balanço:' P_VERSN-LOW INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          ENDIF.
        ENDIF.
      ENDLOOP.

      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      CLEAR: VL_CONT, SDYDO_TEXT_ELEMENT.
    ELSE.
      SDYDO_TEXT_ELEMENT = 'Estrut. Balanço:'.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      CLEAR: VL_CONT, SDYDO_TEXT_ELEMENT.
    ENDIF.

    CALL METHOD COLUMN_1->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE
        FIX_LINES  = 'X'.

    "------------------

    CALL METHOD DG_DYNDOC_ID->MERGE_DOCUMENT.

    CREATE OBJECT DG_HTML_CNTRL
      EXPORTING
        PARENT = DG_PARENT_2.

    DG_DYNDOC_ID->HTML_CONTROL = DG_HTML_CNTRL.

    CALL METHOD DG_DYNDOC_ID->DISPLAY_DOCUMENT
      EXPORTING
        REUSE_CONTROL      = 'X'
        PARENT             = DG_PARENT_2
      EXCEPTIONS
        HTML_DISPLAY_ERROR = 1.

  ELSE.

    GS_ALV_REFRES_COND-ROW = ABAP_TRUE.
    GS_ALV_REFRES_COND-COL = ABAP_TRUE.

    CALL METHOD CTL_ALV->GET_FRONTEND_LAYOUT
      IMPORTING
        ES_LAYOUT = GS_LAYOUT.

    GS_LAYOUT-CWIDTH_OPT = ABAP_TRUE.

    CALL METHOD CTL_ALV->SET_FRONTEND_LAYOUT
      EXPORTING
        IS_LAYOUT = GS_LAYOUT.

*    CALL METHOD CTL_ALV->SET_FILTER_CRITERIA
*      EXPORTING
*        IT_FILTER = IT_FILTER.

    CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = GS_ALV_REFRES_COND
        "I_SOFT_REFRESH = ABAP_TRUE
      EXCEPTIONS
        FINISHED  = 1
        OTHERS    = 2.

  ENDIF.

  CALL METHOD CTL_ALV->GET_SCROLL_INFO_VIA_ID
    IMPORTING
      ES_COL_INFO = GS_SCROLL_COL
      ES_ROW_NO   = GS_SCROLL_ROW.


ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  F_PEGA_IMAGEM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0190   text
*      <--P_URL  text
*----------------------------------------------------------------------*
FORM F_PEGA_IMAGEM  USING    NOME_LOGO
                    CHANGING URL.

  DATA: BEGIN OF GRAPHIC_TABLE OCCURS 0,
          LINE(255) TYPE X,
        END OF GRAPHIC_TABLE.
  DATA: L_GRAPHIC_XSTR TYPE XSTRING.
  DATA: GRAPHIC_SIZE   TYPE I.
  DATA: L_GRAPHIC_CONV TYPE I.
  DATA: L_GRAPHIC_OFFS TYPE I.

  REFRESH GRAPHIC_TABLE.
  CALL METHOD CL_SSF_XSF_UTILITIES=>GET_BDS_GRAPHIC_AS_BMP
    EXPORTING
      P_OBJECT = 'GRAPHICS'
      P_NAME   = NOME_LOGO
      P_ID     = 'BMAP'
      P_BTYPE  = 'BCOL'
    RECEIVING
      P_BMP    = L_GRAPHIC_XSTR.

  GRAPHIC_SIZE = XSTRLEN( L_GRAPHIC_XSTR ).
  L_GRAPHIC_CONV = GRAPHIC_SIZE.
  L_GRAPHIC_OFFS = 0.
  WHILE L_GRAPHIC_CONV > 255.
    GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(255).
    APPEND GRAPHIC_TABLE.
    L_GRAPHIC_OFFS = L_GRAPHIC_OFFS + 255.
    L_GRAPHIC_CONV = L_GRAPHIC_CONV - 255.
  ENDWHILE.
  GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(L_GRAPHIC_CONV).
  APPEND GRAPHIC_TABLE.
  CALL FUNCTION 'DP_CREATE_URL'
    EXPORTING
      TYPE     = 'IMAGE'
      SUBTYPE  = 'X-UNKNOWN'
      SIZE     = GRAPHIC_SIZE
      LIFETIME = 'T'
    TABLES
      DATA     = GRAPHIC_TABLE
    CHANGING
      URL      = URL.

ENDFORM.                    " F_PEGA_IMAGEM

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG
*&---------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG .
  DATA: LC_COL_POS  TYPE LVC_COLPOS.
  FIELD-SYMBOLS: <FS_CAT> TYPE LVC_S_FCAT.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZSPED002'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG.

  LOOP AT IT_FIELDCATALOG ASSIGNING <FS_CAT>.
    CASE <FS_CAT>-FIELDNAME.
      WHEN 'NR_PARAMETRO'.
        <FS_CAT>-EDIT = ABAP_FALSE.
      WHEN 'COD_AGLUTINACAO'.
        <FS_CAT>-EDIT = ABAP_FALSE.
      WHEN OTHERS.
        <FS_CAT>-EDIT = ABAP_TRUE.
    ENDCASE.

*    CASE <FS_CAT>-FIELDNAME .
*      WHEN 'GSBER'.
*        <FS_CAT>-CHECKTABLE = 'TGSB'.
*        <FS_CAT>-COLTEXT    = 'Filial'.
*        <FS_CAT>-F4AVAILABL = 'H_TGSB'.
*        <FS_CAT>-OUTPUTLEN  = 6.
*      WHEN 'KOSTL'.
*        <FS_CAT>-COLTEXT    = 'C. Custo'.
*        <FS_CAT>-F4AVAILABL = 'KOSTN'.
*        <FS_CAT>-OUTPUTLEN  = 12.
*      WHEN 'NIVEL_AA'.
*        <FS_CAT>-COLTEXT    = 'Nível'.
*        <FS_CAT>-OUTPUTLEN  = 6.
*      WHEN 'GJAHR'.
*        <FS_CAT>-CHECKTABLE = 'BKPF'.
*        <FS_CAT>-COLTEXT    = 'Ano Inv.'.
*        <FS_CAT>-OUTPUTLEN  = 8.
*    ENDCASE.
  ENDLOOP.

ENDFORM.                    " FILL_IT_FIELDCATALOG

*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT
*&---------------------------------------------------------------------*
FORM FILL_GS_VARIANT .
  GS_VARIANT-REPORT      = SY-REPID.
  GS_VARIANT-HANDLE      = '0100'.
  GS_VARIANT-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT-USERNAME    = ABAP_FALSE.
  GS_VARIANT-VARIANT     = ABAP_FALSE.
  GS_VARIANT-TEXT        = ABAP_FALSE.
  GS_VARIANT-DEPENDVARS  = ABAP_FALSE.
ENDFORM.                    " FILL_GS_VARIANT

*&---------------------------------------------------------------------*
*&      Module  GET_SCROLL_INFO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SCROLL_INFO INPUT.

  CALL METHOD CTL_ALV->GET_SCROLL_INFO_VIA_ID
    IMPORTING
      ES_COL_INFO = GS_SCROLL_COL
      ES_ROW_NO   = GS_SCROLL_ROW.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  GET_SELECTED_ROWS  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SELECTED_ROWS INPUT.

  DATA: IT_ZSPED002_SLT TYPE STANDARD TABLE OF ZSPED002,
        WA_ZSPED002_SLT TYPE ZSPED002.

  CLEAR IT_SELECTED_ROWS.

  CTL_ALV->CHECK_CHANGED_DATA( ).

  CALL METHOD CTL_ALV->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SELECTED_ROWS.

  CLEAR IT_SELECT.

  LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
    READ TABLE IT_ZSPED002 INTO WA_ZSPED002 INDEX WA_SELECTED_ROWS-INDEX.
    IF SY-SUBRC IS INITIAL.
      APPEND WA_ZSPED002 TO IT_SELECT.
    ENDIF.
  ENDLOOP.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  EDITAR_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM EDITAR_EMPRESA .

  DATA: GS_ALV_REFRES_COND TYPE LVC_S_STBL.

  GS_ALV_REFRES_COND-ROW = ABAP_TRUE.
  GS_ALV_REFRES_COND-COL = ABAP_TRUE.

  IF IT_SELECT IS INITIAL.
    MESSAGE TEXT-003 TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE TO SCREEN 0100.
    RETURN.
  ENDIF.

  CLEAR: CK_GRAVOU.

  "CK_PRIMEIRA_ENTRADA = ABAP_TRUE.
  CALL SCREEN 0002 STARTING AT 05 05.

  CLEAR: IT_SELECT.

  IF CK_GRAVOU = ABAP_TRUE.

    CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE      = GS_ALV_REFRES_COND
        I_SOFT_REFRESH = ABAP_TRUE.

  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  SALVAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SALVAR .

  DATA: IT_ZSPED002_AUX   TYPE STANDARD TABLE OF ZSPED002,
        IT_ZSPED002_DUP   TYPE STANDARD TABLE OF ZSPED002,
        IT_ZSPED002_VERSN TYPE STANDARD TABLE OF ZSPED002,
        IT_ZSPED002_DUPL  TYPE STANDARD TABLE OF ZSPED002,
        WA_ZSPED002_AUX   TYPE ZSPED002,
        WA_ZSPED002_DUP   TYPE ZSPED002.

  DATA: TI_I011Z TYPE STANDARD TABLE OF RF011Z,
        WA_I011Z TYPE RF011Z.

  DATA: IT_AGLUT TYPE STANDARD TABLE OF TY_AGLUT,
        WA_AGLUT TYPE TY_AGLUT.

  DATA: VL_CONT       TYPE I,
        VL_CHECK_BLOQ TYPE CHAR1,
        VL_MAX        TYPE ZSPED002-NR_PARAMETRO,
        VL_BUKRS      TYPE ZSPED002-BUKRS,
        VL_KTOPL      TYPE ZSPED002-KTOPL,
        VL_SAKNR      TYPE ZSPED002-SAKNR,
        VL_VERSN      TYPE ZSPED002-VERSN.

  IT_ZSPED002_VERSN = IT_ZSPED002.

  SORT IT_ZSPED002_VERSN BY VERSN ASCENDING.
  DELETE ADJACENT DUPLICATES FROM IT_ZSPED002_VERSN COMPARING VERSN.

  "Obtém os códigos aglutinadores das estruturas de balanço da tela
  LOOP AT IT_ZSPED002_VERSN INTO WA_ZSPED002.
    IF WA_ZSPED002-VERSN IS NOT INITIAL AND
       WA_ZSPED002-KTOPL IS NOT INITIAL .

      CALL FUNCTION 'FI_IMPORT_BALANCE_SHEET_POS'
        EXPORTING
          VERSION = WA_ZSPED002-VERSN
        TABLES
          I011Z   = TI_I011Z.

      LOOP AT TI_I011Z INTO WA_I011Z.
        WA_AGLUT-KTOPL = WA_ZSPED002-KTOPL.
        WA_AGLUT-VERSN = WA_ZSPED002-VERSN.
        WA_AGLUT-BILKT = WA_I011Z-BILKT.
        WA_AGLUT-VONKT = WA_I011Z-VONKT.
        WA_AGLUT-ERGSO = WA_I011Z-ERGSO.
        APPEND WA_AGLUT TO IT_AGLUT.
        CLEAR: WA_AGLUT.
      ENDLOOP.

    ENDIF.
  ENDLOOP.

  "Consistência de Códigos Aglutinadores
  LOOP AT IT_ZSPED002 INTO WA_ZSPED002.
    VL_CONT = VL_CONT + 1.

    LOOP AT IT_AGLUT INTO WA_AGLUT
      WHERE KTOPL EQ WA_ZSPED002-KTOPL
        AND VERSN EQ WA_ZSPED002-VERSN
        AND BILKT GE WA_ZSPED002-SAKNR
        AND VONKT LE WA_ZSPED002-SAKNR.
    ENDLOOP.

    IF SY-SUBRC IS NOT INITIAL.
      CLEAR: WA_ZSPED002-COD_AGLUTINACAO.
      VL_CHECK_BLOQ = ABAP_TRUE.
    ELSE.
      IF WA_ZSPED002-COD_AGLUTINACAO NE WA_AGLUT-ERGSO.
        WA_ZSPED002-COD_AGLUTINACAO = WA_AGLUT-ERGSO.
      ENDIF.
    ENDIF.

    MODIFY IT_ZSPED002 FROM WA_ZSPED002 INDEX VL_CONT.
  ENDLOOP.

  CLEAR: VL_CONT.

  IF VL_CHECK_BLOQ IS NOT INITIAL.
    MESSAGE TEXT-004 TYPE 'S' DISPLAY LIKE 'E'.
    CLEAR: VL_CHECK_BLOQ.
    LEAVE TO SCREEN 0100.
  ENDIF.

  IT_ZSPED002_DUPL = IT_ZSPED002.
  SORT IT_ZSPED002_DUPL BY BUKRS KTOPL VERSN SAKNR ASCENDING.

  "Consistência de Conta Duplicada na ALV
  LOOP AT IT_ZSPED002_DUPL INTO WA_ZSPED002.
    IF VL_BUKRS EQ WA_ZSPED002-BUKRS AND VL_KTOPL EQ WA_ZSPED002-KTOPL AND VL_SAKNR EQ WA_ZSPED002-SAKNR AND VL_VERSN EQ WA_ZSPED002-VERSN.
      VL_CHECK_BLOQ = ABAP_TRUE.
      EXIT.
    ENDIF.
    VL_BUKRS = WA_ZSPED002-BUKRS.
    VL_KTOPL = WA_ZSPED002-KTOPL.
    VL_SAKNR = WA_ZSPED002-SAKNR.
    VL_VERSN = WA_ZSPED002-VERSN.
  ENDLOOP.

  CLEAR: VL_BUKRS, VL_KTOPL, VL_SAKNR, VL_VERSN.

  SELECT *
     FROM ZSPED002
     INTO TABLE IT_ZSPED002_DUP.

  "Consistência de Conta Duplicada entre ALV e Tabela
  LOOP AT IT_ZSPED002_DUPL INTO WA_ZSPED002.
    READ TABLE IT_ZSPED002_DUP INTO WA_ZSPED002_DUP WITH KEY BUKRS = WA_ZSPED002-BUKRS
                                                             KTOPL = WA_ZSPED002-KTOPL
                                                             SAKNR = WA_ZSPED002-SAKNR
                                                             VERSN = WA_ZSPED002-VERSN.
    IF SY-SUBRC IS INITIAL.
      IF WA_ZSPED002-NR_PARAMETRO IS INITIAL.
        VL_CHECK_BLOQ = ABAP_TRUE.
        EXIT.
      ENDIF.
    ENDIF.
  ENDLOOP.

  IF VL_CHECK_BLOQ IS NOT INITIAL.
    MESSAGE TEXT-006 TYPE 'S' DISPLAY LIKE 'E'.
    CLEAR: VL_CHECK_BLOQ.
    LEAVE TO SCREEN 0100.
  ENDIF.

  "Salva
  SELECT MAX( NR_PARAMETRO )
    INTO VL_MAX
    FROM ZSPED002.

  SORT IT_ZSPED002 BY NR_PARAMETRO DESCENDING.

  LOOP AT IT_ZSPED002 INTO WA_ZSPED002.
    IF WA_ZSPED002-NR_PARAMETRO IS INITIAL.
      WA_ZSPED002-NR_PARAMETRO = VL_MAX + 1.
      VL_MAX = VL_MAX + 1.
    ENDIF.
    MODIFY IT_ZSPED002 FROM WA_ZSPED002 INDEX SY-TABIX.
  ENDLOOP.

  SORT IT_ZSPED002 BY NR_PARAMETRO ASCENDING.

  SELECT *
    FROM ZSPED002
    INTO TABLE IT_ZSPED002_AUX
    WHERE BUKRS       IN P_BUKRS
      AND KTOPL       IN P_KTOPL
      AND VERSN       IN P_VERSN
      AND DT_INIC_VAL IN P_DTINI
      AND DT_FIM_VAL  IN P_DTFIM.

  LOOP AT IT_ZSPED002_AUX INTO WA_ZSPED002.
    READ TABLE IT_ZSPED002 WITH KEY NR_PARAMETRO = WA_ZSPED002-NR_PARAMETRO TRANSPORTING NO FIELDS.
    IF SY-SUBRC IS NOT INITIAL.
      DELETE ZSPED002 FROM WA_ZSPED002.
    ENDIF.
  ENDLOOP.

  LOOP AT IT_ZSPED002 INTO WA_ZSPED002.
    READ TABLE IT_ZSPED002_AUX WITH KEY NR_PARAMETRO = WA_ZSPED002-NR_PARAMETRO TRANSPORTING NO FIELDS.
    IF SY-SUBRC IS INITIAL.
      MODIFY ZSPED002 FROM WA_ZSPED002.
    ELSE.
      INSERT ZSPED002 FROM WA_ZSPED002.
    ENDIF.
  ENDLOOP.

  PERFORM: LIMPAR_TABELAS,
           SELECIONAR_REGISTROS.

  MESSAGE TEXT-005 TYPE 'S'.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  EXCLUDE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM EXCLUDE .

*   Excluir Buttons Toolbar
  FREE: IT_EXCLUDE_FCODE.

  WA_EXCLUDE_FCODE = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
  APPEND WA_EXCLUDE_FCODE TO IT_EXCLUDE_FCODE.
*  WA_EXCLUDE_FCODE = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
*  APPEND WA_EXCLUDE_FCODE TO IT_EXCLUDE_FCODE.
*  WA_EXCLUDE_FCODE = CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW.
*  APPEND WA_EXCLUDE_FCODE TO IT_EXCLUDE_FCODE.
*  WA_EXCLUDE_FCODE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
*  APPEND WA_EXCLUDE_FCODE TO IT_EXCLUDE_FCODE.
*  WA_EXCLUDE_FCODE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
*  APPEND WA_EXCLUDE_FCODE TO IT_EXCLUDE_FCODE.
*  WA_EXCLUDE_FCODE = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
*  APPEND WA_EXCLUDE_FCODE TO IT_EXCLUDE_FCODE.
*  WA_EXCLUDE_FCODE = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
*  APPEND WA_EXCLUDE_FCODE TO IT_EXCLUDE_FCODE.
*  WA_EXCLUDE_FCODE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
*  APPEND WA_EXCLUDE_FCODE TO IT_EXCLUDE_FCODE.
  WA_EXCLUDE_FCODE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
  APPEND WA_EXCLUDE_FCODE TO IT_EXCLUDE_FCODE.
*  WA_EXCLUDE_FCODE = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
*  APPEND WA_EXCLUDE_FCODE TO IT_EXCLUDE_FCODE.
*  WA_EXCLUDE_FCODE = CL_GUI_ALV_GRID=>MC_FC_REFRESH.
*  APPEND WA_EXCLUDE_FCODE TO IT_EXCLUDE_FCODE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DELETAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DELETAR .

  DATA: GS_ALV_REFRES_COND TYPE LVC_S_STBL.
  DATA: WA_ZSPED002_DEL TYPE ZSPED002.


  GS_ALV_REFRES_COND-ROW = ABAP_TRUE.
  GS_ALV_REFRES_COND-COL = ABAP_TRUE.

  IF IT_SELECT IS INITIAL.
    MESSAGE TEXT-003 TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE TO SCREEN 0100.
    RETURN.
  ENDIF.

  "-----
  LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
    READ TABLE IT_ZSPED002 INTO WA_ZSPED002_DEL INDEX WA_SELECTED_ROWS-INDEX.
    IF SY-SUBRC IS INITIAL.
      WA_ZSPED002_DEL-BUKRS = 'ABCD'.
      MODIFY IT_ZSPED002 FROM WA_ZSPED002_DEL INDEX WA_SELECTED_ROWS-INDEX.
    ENDIF.
  ENDLOOP.

  DELETE IT_ZSPED002 WHERE BUKRS EQ 'ABCD'.
  "-----
*  LOOP AT IT_SELECT INTO WA_SELECT_DELETE.
*    DELETE IT_ZSPED002 WHERE NR_PARAMETRO = WA_SELECT_DELETE-NR_PARAMETRO.
*  ENDLOOP.

  CLEAR: IT_SELECT.

*  CALL METHOD CTL_ALV->GET_FILTER_CRITERIA
*    IMPORTING
*      ET_FILTER = IT_FILTER.

  CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE      = GS_ALV_REFRES_COND
      I_SOFT_REFRESH = ABAP_TRUE.

ENDFORM.
