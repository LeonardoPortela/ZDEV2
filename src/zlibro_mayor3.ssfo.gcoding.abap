DATA: WL_BUDAT LIKE LINE OF RG_BUDAT,
      WL_GJAHR TYPE BKPF-GJAHR.

DATA:
  IT_CONTAS TYPE ZCT_EMP_CONTAS,
  WA_CONTAS TYPE ZLC_EMP_CONTAS.

WL_GJAHR = BUDAT_LOW(4).
IF BUDAT_HIGH IS NOT INITIAL.
  V_MES    = BUDAT_HIGH+4(2).
ELSE.
  V_MES    = BUDAT_LOW+4(2).
ENDIF.

V_MES_A = BUDAT_LOW+4(2).
V_MES_A = V_MES_A - 1.

if V_MES eq 12.
  V_MES = 16.
endif.

WA_CONTAS-BUKRS = BUKRS.
WA_CONTAS-SAKNR = '*'.
APPEND WA_CONTAS TO IT_CONTAS.

BREAK ANRODRIGUES.

CALL FUNCTION 'Z_FI_GL_SALDO_FAGLFLEXT'
  EXPORTING
    RYEAR     = WL_GJAHR
*   WAERS     = '*'
    CONTAS    = IT_CONTAS
*   P_GERAR_TODAS       =
  TABLES
    IT_SALDOS = TG_SALDOS
*   IT_SALDOS_2         =
*   IT_SALDOS_3         =
* EXCEPTIONS
*   MOEDA_NAO_ADM       = 1
*   ERRO_LEDGER         = 2
*   OTHERS    = 3
  .
IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.


IF BUDAT_LOW IS NOT INITIAL.
  IF BUDAT_HIGH IS INITIAL.
    WL_BUDAT-SIGN = 'I'.
    WL_BUDAT-OPTION = 'EQ'.
    WL_BUDAT-LOW  = BUDAT_LOW.
    APPEND: WL_BUDAT TO RG_BUDAT.
    CLEAR: WL_BUDAT.
  ELSE.
    WL_BUDAT-SIGN = 'I'.
    WL_BUDAT-OPTION = 'BT'.
    WL_BUDAT-LOW  = BUDAT_LOW.
    WL_BUDAT-HIGH = BUDAT_HIGH.
    APPEND WL_BUDAT TO RG_BUDAT.
    CLEAR: WL_BUDAT.
  ENDIF.
ENDIF.

SELECT BUKRS GJAHR BUDAT BELNR BLART
  FROM BKPF
    INTO TABLE TG_BKPF
      WHERE BUKRS EQ BUKRS
        AND BUDAT IN RG_BUDAT
        AND GJAHR EQ WL_GJAHR.

IF SY-SUBRC IS INITIAL.
  SELECT RYEAR DOCNR RBUKRS RLDNR RCNTR RACCT HSL DRCRK BUZEI
    FROM FAGLFLEXA
      INTO TABLE TG_FAGLFLEXA
      FOR ALL ENTRIES IN TG_BKPF
        WHERE RYEAR  EQ TG_BKPF-GJAHR
          AND DOCNR  EQ TG_BKPF-BELNR
          AND RBUKRS EQ TG_BKPF-BUKRS
          AND RLDNR  EQ '0L'.

  IF SY-SUBRC IS INITIAL.
    SELECT KTOPL SAKNR TXT50
      FROM SKAT
        INTO TABLE TG_SKAT
        FOR ALL ENTRIES IN TG_FAGLFLEXA
          WHERE SAKNR EQ TG_FAGLFLEXA-RACCT
            AND KTOPL EQ '0050'
            AND SPRAS EQ 'S'. "'ES'.

    SELECT KTOPL SAKNR KTOKS
      FROM SKA1
        INTO TABLE TG_SKA1
        FOR ALL ENTRIES IN TG_FAGLFLEXA
          WHERE SAKNR EQ TG_FAGLFLEXA-RACCT
            AND KTOPL EQ '0050'.

    IF SY-SUBRC IS INITIAL.
      SELECT KTOPL KTOKS
        FROM T077S
          INTO TABLE TG_T077S
           FOR ALL ENTRIES IN TG_SKA1
             WHERE KTOKS EQ TG_SKA1-KTOKS
               AND KTOPL EQ '0050'.

      IF SY-SUBRC IS INITIAL.
        SELECT KTOPL KTOKS TXT30
          FROM T077Z
            INTO TABLE TG_T077Z
            FOR ALL ENTRIES IN TG_T077S
              WHERE KTOKS EQ TG_T077S-KTOKS
                AND KTOPL EQ '0050'
                 AND SPRAS EQ 'S'. "'ES'.
      ENDIF.
    ENDIF.
  ENDIF.
*  BREAK-POINT.
  SELECT BUKRS BELNR GJAHR BUZEI SGTXT
    FROM BSIS
      INTO TABLE TG_BSIS
      FOR ALL ENTRIES IN TG_BKPF
        WHERE BUKRS EQ BUKRS
          AND BELNR EQ TG_BKPF-BELNR
          AND GJAHR EQ TG_BKPF-GJAHR.

  IF SY-SUBRC IS INITIAL.
    SELECT BUKRS BELNR GJAHR BUZEI SGTXT
      FROM BSAS
       INTO TABLE TG_BSAS
       FOR ALL ENTRIES IN TG_BSIS
         WHERE BUKRS EQ TG_BSIS-BUKRS
           AND BELNR EQ TG_BSIS-BELNR
           AND GJAHR EQ TG_BSIS-GJAHR.
  ENDIF.
ENDIF.

SELECT SINGLE BUKRS BUTXT ADRNR
  FROM T001
    INTO WG_T001
      WHERE BUKRS EQ BUKRS.

CALL FUNCTION 'ISSR_MD_ADDRESS_COMPANY_GET'
  EXPORTING
    I_ADRNR  = WG_T001-ADRNR
  IMPORTING
    E_S_SADR = WG_ENDERECO.

*CALL FUNCTION 'NUMBER_GET_NEXT'
*  EXPORTING
*    nr_range_nr             = '01'
*    object                  = 'ZLIB_MAY'
*  IMPORTING
*    number                  = p_number
*  EXCEPTIONS
*    interval_not_found      = 1
*    number_range_not_intern = 2
*    object_not_found        = 3
*    quantity_is_0           = 4
*    quantity_is_not_1       = 5
*    interval_overflow       = 6
*    buffer_overflow         = 7
*    OTHERS                  = 8.

LOOP AT TG_FAGLFLEXA INTO WG_FAGLFLEXA.
  READ TABLE TG_BKPF INTO WG_BKPF
    WITH KEY GJAHR = WG_FAGLFLEXA-RYEAR
             BELNR = WG_FAGLFLEXA-DOCNR.

  IF SY-SUBRC IS INITIAL.
    READ TABLE TG_BSIS INTO WG_BSIS
      WITH KEY "BUKRS = WG_BKPF-BUKRS
               BELNR = WG_BKPF-BELNR
               GJAHR = WG_BKPF-GJAHR
               BUZEI = WG_FAGLFLEXA-BUZEI.

    IF SY-SUBRC IS NOT INITIAL.
      READ TABLE TG_BSAS INTO WG_BSAS
        WITH KEY "BUKRS = WG_BKPF-BUKRS
                 BELNR = WG_BKPF-BELNR
                 GJAHR = WG_BKPF-GJAHR
                 BUZEI = WG_FAGLFLEXA-BUZEI.
      IF SY-SUBRC = 0.
        WG_SAIDA-TEXTO = WG_BSAS-SGTXT.
      ENDIF.
    ELSE.
      WG_SAIDA-TEXTO = WG_BSIS-SGTXT.
    ENDIF.


    READ TABLE TG_SKAT INTO WG_SKAT
      WITH KEY SAKNR  = WG_FAGLFLEXA-RACCT
               KTOPL  = '0050'.

    READ TABLE TG_SKA1 INTO WG_SKA1
      WITH KEY SAKNR  = WG_FAGLFLEXA-RACCT
               KTOPL  = '0050'.

    IF SY-SUBRC IS INITIAL.
      READ TABLE TG_T077S INTO WG_T077S
        WITH KEY  KTOPL	=	'0050'
                  KTOKS	=	WG_SKA1-KTOKS.

      IF SY-SUBRC IS INITIAL.
        READ TABLE TG_T077Z INTO WG_T077Z
          WITH KEY KTOPL = '0050'
                   KTOKS = WG_T077S-KTOKS.

        WG_SAIDA-CONCEPTO = WG_T077Z-TXT30.
      ENDIF.

    ENDIF.

    WG_SAIDA-N_CTA   = WG_FAGLFLEXA-RACCT.
    WG_SAIDA-NOMBRE  = WG_SKAT-TXT50.
    WG_SAIDA-FECHA   = WG_BKPF-BUDAT.
    WG_SAIDA-N_ASTO  = WG_BKPF-BELNR.
    WG_SAIDA-N_COMPR = '00000000'.
    WG_SAIDA-TC      =  WG_BKPF-BLART.

    IF WG_FAGLFLEXA-DRCRK EQ 'S'.
      WG_SAIDA-DEBITOS = WG_FAGLFLEXA-HSL.
    ELSEIF WG_FAGLFLEXA-DRCRK EQ 'H'.
      WG_SAIDA-CREDITOS = WG_FAGLFLEXA-HSL.
    ENDIF.

    APPEND WG_SAIDA TO TG_SAIDA.

    WG_TOTAL_DEBITOS  = WG_TOTAL_DEBITOS  + WG_SAIDA-DEBITOS.
    WG_TOTAL_CREDITOS = WG_TOTAL_CREDITOS + WG_SAIDA-CREDITOS.

    CLEAR: WG_BKPF, WG_SKAT, WG_SKA1, WG_T077S, WG_T077Z,
           WG_BSAS, WG_BSIS, WG_SAIDA.
  ENDIF.
ENDLOOP.

WG_TOTAL_DEBITOS  = WG_TOTAL_DEBITOS  * 100.

IF WG_TOTAL_CREDITOS < 0.
  WG_TOTAL_CREDITOS = WG_TOTAL_CREDITOS * -1.
ENDIF.
WG_TOTAL_CREDITOS = WG_TOTAL_CREDITOS * 100.

DELETE TG_SAIDA WHERE CREDITOS = 0 AND DEBITOS = 0.

TG_AUX[] = TG_SAIDA[].

SORT: TG_AUX   BY N_CTA FECHA,
      TG_SAIDA BY N_CTA FECHA.

DELETE ADJACENT DUPLICATES FROM TG_AUX
                      COMPARING N_CTA.
