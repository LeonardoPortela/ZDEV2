**/===========================================================================\*
**|      db      `7MMM.     ,MMF'      db       .g8"""bgd    .g8"""bgd `7MMF' |*
**|     ;MM:       MMMb    dPMM       ;MM:    .dP'     `M  .dP'     `M   MM   |*
**|    ,V^MM.      M YM   ,M MM      ,V^MM.   dM'       `  dM'       `   MM   |*
**|   ,M  `MM      M  Mb  M' MM     ,M  `MM   MM           MM            MM   |*
**|   AbmmmqMA     M  YM.P'  MM     AbmmmqMA  MM.    `7MMF'MM.    `7MMF' MM   |*
**|  A'     VML    M  `YM'   MM    A'     VML `Mb.     MM  `Mb.     MM   MM   |*
**| AMA.   .AMMA..JML. `'  .JMML..AMA.   .AMMA. `"bmmmdPY    `"bmmmdPY .JMML. |*
**/===========================================================================\*

**/===========================================================================\*
**|  Desenvolvedor:                                                           |*
**|    + Welgem Barbosa ( welgem.barbosa@amaggi.com.br )                      |*
**|                                                                           |*
**|  Tester:                                                                  |*
**|    + Paulo Quevedo ( paulo.quevedo@amaggi.com.br )                        |*
**|  Changelog:                                                               |*
**|                                                                           |*
**/===========================================================================\*

**/===========================================================================\*
**| Descrição:                                                                |*
**| Cadastro de Nomeação - Exportação Algodão                                 |*
**/===========================================================================\*
*
REPORT ZSDR0067.

TABLES: ZNOM_CAD_TRANSPT, ZNOM_TRANSPORTE, SSCRFIELDS.

SELECTION-SCREEN: BEGIN OF SCREEN 0101 AS SUBSCREEN.
SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-001.
PARAMETERS: RB_TRANS AS CHECKBOX USER-COMMAND C_T,
            RB_NOMEA AS CHECKBOX USER-COMMAND C_N.
SELECTION-SCREEN SKIP.

SELECTION-SCREEN BEGIN OF LINE.

SELECTION-SCREEN POSITION 1.
PARAMETER: RB_NEW AS CHECKBOX USER-COMMAND C_W .
SELECTION-SCREEN COMMENT 2(13) TXT_NEW FOR FIELD RB_NEW.

SELECTION-SCREEN POSITION 17.
PARAMETER: RB_EDI AS CHECKBOX USER-COMMAND C_E.
SELECTION-SCREEN COMMENT 19(10) TXT_EDI FOR FIELD RB_EDI.

SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.

SELECTION-SCREEN COMMENT 1(31) VL_TERRA.
PARAMETER: RB_TERR AS CHECKBOX USER-COMMAND C_R.
SELECTION-SCREEN COMMENT 35(09) TXT_TERR FOR FIELD RB_TERR.

SELECTION-SCREEN POSITION 46.
PARAMETER: RB_MARI AS CHECKBOX USER-COMMAND C_M.
SELECTION-SCREEN COMMENT 47(10) TXT_MARI FOR FIELD RB_MARI.

SELECTION-SCREEN END OF LINE.

PARAMETERS: P_NOME TYPE ZNOM_CAD_TRANSPT-DS_NOME_TRANSPOR,
            P_TIPO TYPE ZNOM_CAD_TRANSPT-TIPO,
            P_ANO  TYPE ZNOM_TRANSPORTE-NR_ANO,
            P_MES  TYPE ZNOM_TRANSPORTE-NR_MES,
            P_BOO  TYPE ZNOM_TRANSPORTE-BOOKING.
SELECTION-SCREEN END OF BLOCK B2.

SELECTION-SCREEN BEGIN OF BLOCK B3 WITH FRAME TITLE TEXT-001.

SELECTION-SCREEN END OF BLOCK B3.

SELECTION-SCREEN: END OF SCREEN 0101.

CLASS ZCL_EVENTS DEFINITION.

  PUBLIC SECTION.
    METHODS:
      CONSTRUCTOR IMPORTING IO_ALV_GRID  TYPE REF TO CL_GUI_ALV_GRID,
      ON_TOOLBAR  FOR EVENT TOOLBAR               OF CL_GUI_ALV_GRID IMPORTING E_OBJECT E_INTERACTIVE SENDER,
      ON_DT_CH    FOR EVENT DATA_CHANGED          OF CL_GUI_ALV_GRID IMPORTING ER_DATA_CHANGED  E_ONF4 E_ONF4_BEFORE E_ONF4_AFTER E_UCOMM,
      ON_DT_CH_F  FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID IMPORTING E_MODIFIED ET_GOOD_CELLS,
      ON_HANDLE   FOR EVENT USER_COMMAND          OF CL_GUI_ALV_GRID IMPORTING E_UCOMM,
      ON_CLICK    FOR EVENT HOTSPOT_CLICK         OF CL_GUI_ALV_GRID IMPORTING E_ROW_ID E_COLUMN_ID ES_ROW_NO,
      ON_D_CLICK  FOR EVENT DOUBLE_CLICK          OF CL_GUI_ALV_GRID IMPORTING E_ROW E_COLUMN ES_ROW_NO.

ENDCLASS.

TYPES BEGIN OF TY_TRANSPORTE.
        INCLUDE STRUCTURE ZNOM_CAD_TRANSPT.
TYPES: FIELD_STYLE TYPE LVC_T_STYL,
       FLAG        TYPE C,
       COLOR(4)    TYPE C.
TYPES END OF TY_TRANSPORTE.

DATA: BEGIN OF TL_UCOMM OCCURS 0,
        UCOMM TYPE  SY-UCOMM,
      END OF TL_UCOMM.

TYPES: BEGIN OF TY_NOMEACAO,
         ICON(4),
         ID_NOMEACAO_TRAN TYPE ZNOM_TRANSPORTE-ID_NOMEACAO_TRAN,
         ID_NOME_TRAN_REG TYPE ZREG_EXPORTACAO-ID_NOMEACAO_TRAN,
         ID_TRANSPORTE    TYPE ZNOM_TRANSPORTE-ID_TRANSPORTE,
         DS_NOME_TRANSPOR TYPE ZNOM_CAD_TRANSPT-DS_NOME_TRANSPOR,
         NR_ANO           TYPE ZNOM_TRANSPORTE-NR_ANO,
         NR_MES           TYPE ZNOM_TRANSPORTE-NR_MES,
         BOOKING          TYPE ZNOM_TRANSPORTE-BOOKING,
         WERKS            TYPE ZNOM_TRANSPORTE-WERKS,
         WERKS_DESC       TYPE T001W-NAME1,
         BUKRS            TYPE ZNOM_TRANSPORTE-BUKRS,
         NRO_SOL_OV       TYPE ZNOM_TRANSPORTE-NRO_SOL_OV,
         KUNNR            TYPE ZSDT0051-KUNNR,
         KUNNR_DESC       TYPE KNA1-NAME1,
         BSTKD            TYPE ZSDT0051-BSTKD,
         INSTRUCAO        TYPE ZNOM_TRANSPORTE-INSTRUCAO,
         MATNR            TYPE ZSDT0051-MATNR,
         MATNR_DEC        TYPE C LENGTH 50,
         NR_QTDE_NOMEADA  TYPE ZNOM_TRANSPORTE-NR_QTDE_NOMEADA,
         IN_STATUS_COMEX  TYPE ZNOM_TRANSPORTE-IN_STATUS_COMEX,
         COLOR(4)         TYPE C,
         FLAG(1),
       END OF TY_NOMEACAO,

       BEGIN OF TY_RE,
         ID_REGISTRO_EXPO   TYPE ZREG_EXPORTACAO-ID_REGISTRO_EXPO,
         NR_REGISTRO_EXPO   TYPE ZREG_EXPORTACAO-NR_REGISTRO_EXPO,
         ID_EXPORTADOR      TYPE KUNNR,
         ID_EXPORTADOR_DESC TYPE KNA1-NAME1,
         WERKS              TYPE ZREG_EXPORTACAO-WERKS,
         WERKS_DESC         TYPE T001W_NAME1,
         CD_MATERIAL        TYPE ZREG_EXPORTACAO-CD_MATERIAL,
         ID_NOMEACAO_TRAN   TYPE ZREG_EXPORTACAO-ID_NOMEACAO_TRAN,
         ID_REGISTRO_VEND   TYPE ZREG_EXPORTACAO-ID_REGISTRO_VEND,
         DT_REGISTRO_EXPO   TYPE ZREG_EXPORTACAO-DT_REGISTRO_EXPO,
         ID_IMPORTADOR      TYPE LIFNR,
         ID_IMPORTADOR_DESC TYPE LFA1-NAME1,
         ID_PAIS_DESTINO    TYPE ZREG_EXPORTACAO-ID_PAIS_DESTINO,
         NR_VALOR_TOTAL     TYPE ZREG_EXPORTACAO-NR_VALOR_TOTAL,
         NR_QTDE            TYPE ZREG_EXPORTACAO-NR_QTDE,
         NR_VALOR_TM        TYPE ZREG_EXPORTACAO-NR_VALOR_TM,
         IN_STATUS_COMEX    TYPE ZREG_EXPORTACAO-IN_STATUS_COMEX,
         DUE                TYPE C,
         COLOR(4)           TYPE C,
         FLAG(1),
       END OF TY_RE,

       BEGIN OF TY_DDE,
         ID_DDE           TYPE ZDDE-ID_DDE,
         NR_DDE           TYPE ZDDE-NR_DDE,
         DT_DDE           TYPE ZDDE-DT_DDE,
         DT_AVERBACAO     TYPE ZDDE-DT_AVERBACAO,
         ID_NOMEACAO_TRAN TYPE ZDDE-ID_NOMEACAO_TRAN,
         NR_REGISTRO_EXPO TYPE ZREG_EXPORTACAO-NR_REGISTRO_EXPO,
         NR_QTDE          TYPE ZDDE-NR_QTDE,
         NR_VALOR         TYPE ZDDE-NR_VALOR,
         IN_STATUS_COMEX  TYPE ZDDE-IN_STATUS_COMEX,
         COLOR(4)         TYPE C,
         FLAG(1),
       END OF TY_DDE,

       BEGIN OF TY_DDE_APL,
         CHECK(1),
         ID_DDE           TYPE ZDDE_APLICACAO-ID_DDE,
         NR_DDE           TYPE ZDDE-NR_DDE,
         ID_REGISTRO_EXPO TYPE ZDDE_APLICACAO-ID_REGISTRO_EXPO,
         NR_REGISTRO_EXPO TYPE ZREG_EXPORTACAO-NR_REGISTRO_EXPO,
         NR_QTDE_         TYPE ZREG_EXPORTACAO-NR_QTDE,
         NR_VALOR_TOTAL   TYPE ZREG_EXPORTACAO-NR_VALOR_TOTAL,
       END OF TY_DDE_APL,

       BEGIN OF TY_BL,
         ID_CONHEC        TYPE ZNOM_CONHEC-ID_CONHEC,
         ID_NOMEACAO_TRAN TYPE ZNOM_CONHEC-ID_NOMEACAO_TRAN,
         DT_DATA          TYPE ZNOM_CONHEC-DT_DATA,
         NR_QTDE          TYPE ZNOM_CONHEC-NR_QTDE,
         NR_CONHEC        TYPE ZNOM_CONHEC-NR_CONHEC,
         SG_PAIS_DESTINO  TYPE ZNOM_CONHEC-SG_PAIS_DESTINO,
         LAND1            TYPE LAND1,
         DC_PAIS_DESTINO  TYPE T005T-LANDX,
         DS_TIPO          TYPE ZNOM_CONHEC-DS_TIPO,
         IN_STATUS_COMEX  TYPE ZNOM_CONHEC-IN_STATUS_COMEX,
         COLOR(4)         TYPE C,
         FLAG(1),
       END OF TY_BL,

       BEGIN OF TY_TELA,
         ABA TYPE SY-UCOMM,
         STS TYPE C,
         DIR TYPE C,
       END OF TY_TELA.

TYPES: BEGIN OF F4,
         NRO_SOL_OV TYPE ZSDED013,
         NAME1      TYPE NAME1_GP,
         MCOD3      TYPE MCDD3,
         TP_VENDA   TYPE ZSDED012,
         VKORG      TYPE VKORG,
         DATA_ATUAL TYPE RRSELDATE,
       END OF F4.

TYPES: BEGIN OF F4_RE,
         ID_REGISTRO_EXPO TYPE ZREG_EXPORTACAO-ID_REGISTRO_EXPO,
         NR_REGISTRO_EXPO TYPE ZREG_EXPORTACAO-NR_REGISTRO_EXPO,
       END OF F4_RE.

***********************************************************************
* Declaração de Variaveis Globais
***********************************************************************
DATA: GV_UCOMM      TYPE SY-UCOMM,
      WA_CONT       TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      WA_CONT_N     TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      WA_LAYOUT     TYPE LVC_S_LAYO,
      WA_STABLE     TYPE LVC_S_STBL,
      WA_VARIANTE   TYPE DISVARIANT,
      TY_TOOLBAR    TYPE STB_BUTTON,
      IT_SEL_ROWS   TYPE LVC_T_ROW,
      WA_SEL_ROWS   TYPE LVC_S_ROW,
      C_ALV_TM      TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,
      OBG_EVENTS    TYPE REF TO ZCL_EVENTS,
      WA_ALV        TYPE REF TO CL_GUI_ALV_GRID,
      WA_ALV_N      TYPE REF TO CL_GUI_ALV_GRID,
      OK_CODE       TYPE SY-UCOMM,
      WA_ACAO       TYPE SY-UCOMM,
      T_TELA        TYPE TABLE OF TY_TELA WITH HEADER LINE,
      DDE_NR_VALOR  TYPE ZDDE-NR_VALOR,
      DDE_NR_QTDE   TYPE ZDDE-NR_QTDE,
      CONVERT       TYPE P LENGTH 16,
      DDE_NR_QTDE_C TYPE C LENGTH 25.

DATA: WA_ALV_RE   TYPE REF TO CL_GUI_ALV_GRID,
      WA_ALV_DDE  TYPE REF TO CL_GUI_ALV_GRID,
      WA_ALV_BL   TYPE REF TO CL_GUI_ALV_GRID,
      WA_ALV_APL  TYPE REF TO CL_GUI_ALV_GRID,
      WA_CONT_RE  TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      WA_CONT_DDE TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      WA_CONT_BL  TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      WA_CONT_APL TYPE REF TO CL_GUI_CUSTOM_CONTAINER.

DATA: IT_F4         TYPE TABLE OF ZNOM_CAD_TRANSPT WITH HEADER LINE,
      F4_NRO_SOL_OV TYPE TABLE OF F4,
      IT_RETURN     TYPE TABLE OF DDSHRETVAL WITH HEADER LINE.

DATA: IT_NOMEACAO     TYPE TABLE OF TY_NOMEACAO WITH HEADER LINE,
      IT_NOMEACAO_E   TYPE TABLE OF TY_NOMEACAO WITH HEADER LINE,
      IT_NOME_BKP     TYPE TABLE OF TY_NOMEACAO WITH HEADER LINE,
      WA_NOMEACAO     TYPE TY_NOMEACAO,
      IT_ZSDT0170     TYPE TABLE OF ZSDT0170 WITH HEADER LINE,
      IT_ZSDT0172     TYPE TABLE OF ZSDT0172 WITH HEADER LINE,
      IT_RE           TYPE TABLE OF TY_RE WITH HEADER LINE,
      IT_RE_BKP       TYPE TABLE OF TY_RE WITH HEADER LINE,
      IT_F4_RE        TYPE TABLE OF F4_RE,
      WA_RE           TYPE TY_RE,
      IT_DDE          TYPE TABLE OF TY_DDE WITH HEADER LINE,
      IT_DDE_BKP      TYPE TABLE OF TY_DDE WITH HEADER LINE,
      WA_DDE          TYPE TY_DDE,
      IT_DDE_AP       TYPE TABLE OF ZDDE_APLICACAO WITH HEADER LINE,
      IT_DDE_DEL      TYPE TABLE OF ZDDE_APLICACAO WITH HEADER LINE,
      IT_APL          TYPE TABLE OF TY_DDE_APL WITH HEADER LINE,
      IT_BL           TYPE TABLE OF TY_BL WITH HEADER LINE,
      IT_BL_BKP       TYPE TABLE OF TY_BL WITH HEADER LINE,
      WA_BL           TYPE TY_BL,
      SALVAR          TYPE C,
      CAMPOS          TYPE C,
      C_NEW           TYPE C,
      CHECK_          TYPE C,
      VAR_SUBRC       TYPE SY-SUBRC,
      TXTDESC         TYPE LANDX,
      TG_MSG_RET      TYPE TABLE OF ZFIWRS0002 WITH DEFAULT KEY,
      WG_MENSAGEM(30).

FIELD-SYMBOLS: <NOMEACAO> TYPE TY_NOMEACAO,
               <RE>       TYPE TY_RE,
               <DDE>      TYPE TY_DDE.


CONSTANTS: BEGIN OF C_TAB_STRIP,
             TAB1 LIKE SY-UCOMM VALUE 'TAB_STRIP_FC1',
             TAB2 LIKE SY-UCOMM VALUE 'TAB_STRIP_FC2',
             TAB3 LIKE SY-UCOMM VALUE 'TAB_STRIP_FC3',
             TAB4 LIKE SY-UCOMM VALUE 'TAB_STRIP_FC4',
           END OF C_TAB_STRIP.

CONTROLS:  TAB_STRIP TYPE TABSTRIP.
DATA: BEGIN OF G_TAB_STRIP,
        SUBSCREEN   LIKE SY-DYNNR,
        PROG        LIKE SY-REPID VALUE 'ZSDR0067',
        PRESSED_TAB LIKE SY-UCOMM VALUE C_TAB_STRIP-TAB1,
      END OF G_TAB_STRIP.

DATA: TAB_STRIP_TAB1 TYPE SCREEN-NAME VALUE 'Nomeação',
      TAB_STRIP_TAB2 TYPE SCREEN-NAME VALUE 'RE',
      TAB_STRIP_TAB3 TYPE SCREEN-NAME VALUE 'DDE',
      TAB_STRIP_TAB4 TYPE SCREEN-NAME VALUE 'BL'.

DATA: X_SCREEN TYPE SY-DYNNR VALUE '0103'.
DATA: Y_SCREEN TYPE SY-DYNNR VALUE '0205'.

DATA: IT_TRANSPORTE TYPE TABLE OF TY_TRANSPORTE WITH HEADER LINE.

DATA: STR TYPE REF TO DATA.

DATA R_TABLE TYPE LVC_T_FCAT.

DATA LS_STABLE TYPE LVC_S_STBL.

DEFINE ABA.
  TAB_STRIP_TAB1 = &1.
  TAB_STRIP_TAB2 = &2.
  TAB_STRIP_TAB3 = &3.
  TAB_STRIP_TAB4 = &4.
END-OF-DEFINITION.

DEFINE ACAO.
  CALL FUNCTION 'SAPGUI_SET_FUNCTIONCODE'
    EXPORTING
      FUNCTIONCODE           = &1
    EXCEPTIONS
      FUNCTION_NOT_SUPPORTED = 1.
END-OF-DEFINITION.

AT SELECTION-SCREEN.
  GV_UCOMM = SSCRFIELDS-UCOMM.
*
AT SELECTION-SCREEN OUTPUT.
  PERFORM CONTROLE.
  PERFORM SELECT_SCREEN.

START-OF-SELECTION.
  CALL SCREEN 0100.

END-OF-SELECTION.

CLASS ZCL_EVENTS IMPLEMENTATION.

  METHOD CONSTRUCTOR.
    CREATE OBJECT C_ALV_TM
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.
  ENDMETHOD.

  METHOD ON_TOOLBAR.

    IF SY-UCOMM NE 'VINC_RE'.
      FIELD-SYMBOLS: <LS_TOOLBAR>  TYPE STB_BUTTON.

* Incluir novos Botoes
      FREE: TY_TOOLBAR.

      DEFINE TOOBAR.
        TY_TOOLBAR-ICON      = &1.
        TY_TOOLBAR-FUNCTION  = &2.
        TY_TOOLBAR-QUICKINFO = &3.
        TY_TOOLBAR-TEXT      = &4.
        TY_TOOLBAR-BUTN_TYPE = &5.
        APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
        CLEAR TY_TOOLBAR.
      END-OF-DEFINITION.

      TOOBAR: ''     ''        ''        ''         3.

      CASE ABAP_TRUE.
        WHEN RB_NEW.
          TOOBAR: '@17@' 'ADD'     'Incluir' 'Incluir'  0.
          TOOBAR: ''     ''        ''        ''         3.
          TOOBAR: '@18@' 'DEL'     'Excluir' 'Excluir'  0.
        WHEN RB_EDI.
          TOOBAR: '@0Z@' 'EDI'     'Editar'  'Editar'   0.
          TOOBAR: ''     ''        ''        ''         3.
          TOOBAR: '@18@' 'EXC'     'Excluir' 'Excluir'  0.
        WHEN RB_NOMEA.
          TOOBAR: '@0Z@' 'EDI_N'   'Editar'  'Editar'  0.
          TOOBAR: ''     ''        ''        ''         3.
          TOOBAR: '@18@' 'DEL_N'   'Excluir' 'Excluir'  0.
      ENDCASE.

      TOOBAR: ''     ''        ''          ''       3.

    ENDIF.

    LOOP AT E_OBJECT->MT_TOOLBAR ASSIGNING <LS_TOOLBAR>.
      CASE <LS_TOOLBAR>-FUNCTION.
        WHEN '&CHECK' OR '&REFRESH' OR '&LOCAL&CUT' OR '&LOCAL&COPY' OR '&LOCAL&PASTE' OR '&LOCAL&UNDO'.
          DELETE E_OBJECT->MT_TOOLBAR INDEX SY-TABIX.
      ENDCASE.
    ENDLOOP.

    CALL METHOD C_ALV_TM->REORGANIZE( IO_ALV_TOOLBAR = E_OBJECT ).

  ENDMETHOD.

  METHOD ON_DT_CH .
  ENDMETHOD.

  METHOD ON_DT_CH_F.
  ENDMETHOD.

  METHOD ON_HANDLE.

    WA_ACAO = E_UCOMM.

    CASE WA_ACAO.
      WHEN 'ADD'.   PERFORM ADD_LINHA.
      WHEN 'DEL'.   PERFORM DEL_LINHA.
      WHEN 'EDI'.   PERFORM EDI_LINHA.
      WHEN 'EXC'.   PERFORM EXC_LINHA.
      WHEN 'ADD_N'. PERFORM ADD_LINHA_N.
      WHEN 'DEL_N'. PERFORM EXC_LINHA_N.
      WHEN 'EDI_N'. PERFORM EDI_LINHA_N.
    ENDCASE.

  ENDMETHOD.

  METHOD ON_CLICK .

  ENDMETHOD.

  METHOD ON_D_CLICK.

    CHECK NOT  RB_NOMEA IS INITIAL.

    CASE G_TAB_STRIP-PRESSED_TAB.
      WHEN 'TAB_STRIP_FC1'. "NOMEAÇÃO

        FREE: IT_RE[], IT_DDE[], IT_BL[].
        CLEAR: IT_RE, IT_DDE, IT_BL.
        CLEAR: WA_RE, WA_DDE, WA_BL.

        CHECK NOT LINE_EXISTS( IT_NOMEACAO[ ICON = '@0Z@' ] ).
        CHECK IT_NOMEACAO[ E_ROW ]-ICON NE '@17@'.

        CLEAR WA_NOMEACAO.
        CHECK IT_NOMEACAO[ E_ROW ]-IN_STATUS_COMEX NE ABAP_TRUE.

        LOOP AT IT_NOMEACAO ASSIGNING FIELD-SYMBOL(<NOMEACAO>).
          IF SY-TABIX EQ ES_ROW_NO-ROW_ID.

            SELECT COUNT(*)
              FROM ZNOM_TRANSPORTE
              WHERE ID_NOMEACAO_TRAN EQ <NOMEACAO>-ID_NOME_TRAN_REG.

            IF SY-SUBRC EQ 0.
              PERFORM CONTROLE_TELA USING G_TAB_STRIP-PRESSED_TAB ABAP_FALSE.
            ENDIF.

            IF <NOMEACAO>-ICON NE '@18@'.

              <NOMEACAO>-COLOR = 'C110'.
              MOVE-CORRESPONDING <NOMEACAO> TO WA_NOMEACAO.

              SELECT SINGLE *
               FROM ZSDT0051
               INTO @DATA(WA_ZSDT0051)
               WHERE NRO_SOL_OV EQ @WA_NOMEACAO-NRO_SOL_OV.

*              SELECT SINGLE INSTRUCAO
*                FROM ZSDT0045
*                INTO WA_NOMEACAO-INSTRUCAO
*                WHERE OBJEK EQ WA_NOMEACAO-NRO_SOL_OV.

              SELECT SINGLE BUKRS
                FROM J_1BBRANCH
                  INTO WA_NOMEACAO-BUKRS
                 WHERE BRANCH EQ WA_NOMEACAO-WERKS.

              SELECT SINGLE NAME1
                FROM T001W
                 INTO  WA_NOMEACAO-WERKS_DESC
                WHERE WERKS EQ WA_NOMEACAO-WERKS.
              IF NOT SY-SUBRC IS INITIAL.
                CLEAR WA_NOMEACAO-WERKS_DESC.
              ENDIF.

              SELECT SINGLE NAME1
                FROM KNA1
                 INTO  WA_NOMEACAO-KUNNR_DESC
                WHERE KUNNR EQ WA_NOMEACAO-KUNNR.
              IF NOT SY-SUBRC IS INITIAL.
                CLEAR WA_NOMEACAO-KUNNR_DESC.
              ENDIF.

              PERFORM CONVERT_IN_OUT USING 'IN' CHANGING WA_NOMEACAO-MATNR.
              SELECT SINGLE MAKTX
                FROM MAKT
                 INTO  WA_NOMEACAO-MATNR_DEC
                WHERE MATNR EQ WA_NOMEACAO-MATNR
                  AND SPRAS EQ SY-LANGU.
              IF NOT SY-SUBRC IS INITIAL.
                CLEAR WA_NOMEACAO-MATNR_DEC.
              ENDIF.

              IF SY-SUBRC IS INITIAL.
                MOVE-CORRESPONDING WA_ZSDT0051 TO WA_NOMEACAO.
              ENDIF.
              SHIFT WA_NOMEACAO-MATNR LEFT DELETING LEADING '0'.
            ELSE.

              CASE <NOMEACAO>-ICON.
                WHEN '@16@'. <NOMEACAO>-COLOR = 'C500'.
                WHEN '@17@'. <NOMEACAO>-COLOR = 'C100'.
                WHEN '@0Z@'. <NOMEACAO>-COLOR = 'C700'.
              ENDCASE.
            ENDIF.
          ELSE.
            CASE <NOMEACAO>-ICON.
              WHEN '@16@'. <NOMEACAO>-COLOR = 'C500'.
              WHEN '@17@'. <NOMEACAO>-COLOR = 'C100'.
              WHEN '@0Z@'. <NOMEACAO>-COLOR = 'C700'.
            ENDCASE.
          ENDIF.
        ENDLOOP.

        IT_NOME_BKP[] = IT_NOMEACAO[].

        CALL METHOD WA_ALV_N->REFRESH_TABLE_DISPLAY.

      WHEN 'TAB_STRIP_FC2'. "RE

        CLEAR WA_RE.

        CHECK IT_RE[ ES_ROW_NO-ROW_ID ]-IN_STATUS_COMEX NE ABAP_TRUE.

        LOOP AT IT_RE ASSIGNING FIELD-SYMBOL(<RE>).
          CHECK <RE>-IN_STATUS_COMEX NE ABAP_TRUE.
          IF SY-TABIX EQ ES_ROW_NO-ROW_ID.

            WA_ACAO = 'D_CLI'.
            PERFORM CONTROLE_TELA USING G_TAB_STRIP-PRESSED_TAB ABAP_FALSE.
            <RE>-COLOR = 'C110'.
            MOVE-CORRESPONDING <RE> TO WA_RE.

            SELECT SINGLE NAME1
              FROM T001W
               INTO  WA_RE-WERKS_DESC
              WHERE WERKS EQ WA_RE-WERKS.

            IF NOT SY-SUBRC IS INITIAL.
              CLEAR WA_RE-WERKS_DESC.
            ENDIF.

            WA_RE-ID_EXPORTADOR = |{ WA_RE-ID_EXPORTADOR ALPHA = IN }|.

            SELECT SINGLE NAME1
              FROM KNA1
               INTO  WA_RE-ID_EXPORTADOR_DESC
              WHERE KUNNR EQ WA_RE-ID_EXPORTADOR.

            IF NOT SY-SUBRC IS INITIAL.
              CLEAR WA_RE-ID_EXPORTADOR_DESC.
            ENDIF.

            WA_RE-ID_IMPORTADOR = |{ WA_RE-ID_IMPORTADOR ALPHA = IN }|.

            SELECT SINGLE NAME1
              FROM LFA1
               INTO  WA_RE-ID_IMPORTADOR_DESC
              WHERE LIFNR EQ WA_RE-ID_IMPORTADOR.
            IF NOT SY-SUBRC IS INITIAL.
              CLEAR WA_RE-ID_IMPORTADOR_DESC.
            ENDIF.

          ELSE.
            <RE>-COLOR = ''.
          ENDIF.
        ENDLOOP.

        PERFORM LAND USING WA_RE-ID_PAIS_DESTINO.

        IT_RE_BKP[] = IT_RE[].

        CALL METHOD WA_ALV_RE->REFRESH_TABLE_DISPLAY.

      WHEN 'TAB_STRIP_FC3'. "DDE

        CLEAR WA_DDE.
        CHECK IT_DDE[ ES_ROW_NO-ROW_ID ]-IN_STATUS_COMEX NE ABAP_TRUE.

        LOOP AT IT_DDE ASSIGNING FIELD-SYMBOL(<DDE>).
          IF SY-TABIX EQ ES_ROW_NO-ROW_ID.
            WA_ACAO = 'D_CLI'.
            PERFORM CONTROLE_TELA USING G_TAB_STRIP-PRESSED_TAB ABAP_FALSE.
            <DDE>-COLOR = 'C110'.
            MOVE-CORRESPONDING <DDE> TO WA_DDE.
          ELSE.
            <DDE>-COLOR = ''.
          ENDIF.
        ENDLOOP.

        IT_DDE_BKP[] = IT_DDE[].

        CALL METHOD WA_ALV_DDE->REFRESH_TABLE_DISPLAY.

      WHEN 'TAB_STRIP_FC4'. "BL

        CLEAR WA_BL.
        CHECK IT_BL[ ES_ROW_NO-ROW_ID ]-IN_STATUS_COMEX NE ABAP_TRUE.

        LOOP AT IT_BL ASSIGNING FIELD-SYMBOL(<BL>).
          IF SY-TABIX EQ ES_ROW_NO-ROW_ID.
            WA_ACAO = 'D_CLI'.
            PERFORM CONTROLE_TELA USING G_TAB_STRIP-PRESSED_TAB ABAP_FALSE.
            <BL>-COLOR = 'C110'.
            MOVE-CORRESPONDING <BL> TO WA_BL.
          ELSE.
            <BL>-COLOR = ''.
          ENDIF.
        ENDLOOP.

        IT_BL_BKP[] = IT_BL[].

        CALL METHOD WA_ALV_BL->REFRESH_TABLE_DISPLAY.

    ENDCASE.
    CAMPOS = ABAP_TRUE.
    LEAVE TO SCREEN 0100.

  ENDMETHOD.
ENDCLASS.
FORM SELECT_SCREEN .

  LOOP AT SCREEN.

    IF RB_TRANS EQ ABAP_TRUE.

      IF SCREEN-NAME CS 'P_ANO'
      OR SCREEN-NAME CS 'P_MES'
      OR SCREEN-NAME CS 'P_BOO'
      OR SCREEN-NAME CS 'RB_TERR'
      OR SCREEN-NAME CS 'RB_MARI'
      OR SCREEN-NAME CS 'TXT_TERR'
      OR SCREEN-NAME CS 'TXT_MARI'
      OR SCREEN-NAME CS 'VL_TERRA'.
        SCREEN-ACTIVE = '0'.
      ENDIF.

      IF RB_NEW EQ ABAP_TRUE.

        IF SCREEN-NAME CS 'RB_TERR'
        OR SCREEN-NAME CS 'RB_MARI'
        OR SCREEN-NAME CS 'TXT_TERR'
        OR SCREEN-NAME CS 'TXT_MARI'
        OR SCREEN-NAME CS 'VL_TERRA'.
          SCREEN-ACTIVE = '1'.
        ENDIF.

        IF SCREEN-NAME CS 'P_TIPO'.
          SCREEN-ACTIVE = '0'.
        ENDIF.

        IF RB_TERR EQ ABAP_TRUE
          AND SCREEN-NAME EQ 'P_NOME'.
          SCREEN-INPUT = '0'.
        ENDIF.

      ENDIF.
      MODIFY SCREEN.
    ENDIF.

    IF RB_NOMEA EQ ABAP_TRUE.
      IF SCREEN-NAME CS 'P_TIPO'
      OR SCREEN-NAME CS 'RB_TERR'
      OR SCREEN-NAME CS 'RB_MARI'
      OR SCREEN-NAME CS 'RB_NEW'
      OR SCREEN-NAME CS 'TXT_NEW'
      OR SCREEN-NAME CS 'RB_EDI'
      OR SCREEN-NAME CS 'TXT_EDI'
      OR SCREEN-NAME CS 'TXT_TERR'
      OR SCREEN-NAME CS 'TXT_MARI'
      OR SCREEN-NAME CS 'VL_TERRA'.
        SCREEN-ACTIVE = '0'.
      ELSE.
        SCREEN-INPUT = '1'.
      ENDIF.

      MODIFY SCREEN.
    ENDIF.

  ENDLOOP.

ENDFORM.

FORM CONTROLE.

  PERFORM LIMPAR.

  VL_TERRA = 'Tipo do Transporte'.
  TXT_TERR = TEXT-004.
  TXT_MARI = TEXT-005.
  TXT_NEW  = TEXT-002.
  TXT_EDI  = TEXT-003.

  IF RB_TERR EQ ABAP_TRUE.
    P_NOME = 'TERRESTRE'.
  ENDIF.

  IF RB_TRANS EQ ABAP_TRUE
 AND RB_NEW   EQ ABAP_TRUE.
    RB_MARI = ABAP_TRUE.
  ENDIF.


ENDFORM.
FORM LIMPAR.
  CASE GV_UCOMM.
    WHEN 'C_T' OR 'C_N'.
      CLEAR: P_NOME, P_TIPO, P_ANO, P_MES, P_BOO, RB_NEW, RB_EDI, RB_TERR, RB_MARI.
    WHEN 'C_W' OR 'C_E'.
      CLEAR: P_NOME, P_TIPO, P_ANO, P_MES, P_BOO, RB_TERR, RB_MARI.
      FREE IT_TRANSPORTE[].
      IF NOT WA_ALV IS INITIAL.
        CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY.
      ENDIF.
    WHEN 'C_R'.
    WHEN 'C_M'.
  ENDCASE.
ENDFORM.

MODULE PBO_0100 OUTPUT.

  FREE: TL_UCOMM.
  CLEAR: TL_UCOMM.

  MOVE: 'BUSCAR' TO TL_UCOMM.
  APPEND TL_UCOMM.
  CLEAR: TL_UCOMM.

  CASE ABAP_TRUE.

    WHEN RB_TERR OR RB_MARI.
      IF SY-UCOMM NE 'SAVE'.
        X_SCREEN = '0102'.
      ENDIF.
      PERFORM CRIA_ALV_TRANSPORTE.

  ENDCASE.

  IF ( RB_EDI EQ ABAP_TRUE AND RB_NEW EQ ABAP_FALSE ) OR ( RB_NOMEA EQ ABAP_TRUE ).
    FREE TL_UCOMM.
  ENDIF.

  IF RB_NOMEA EQ ABAP_TRUE.
    IF SALVAR EQ ABAP_FALSE.
      MOVE: 'SAVE' TO TL_UCOMM.
      APPEND TL_UCOMM.
      CLEAR: TL_UCOMM.
    ELSE.
      FREE TL_UCOMM[].
    ENDIF.
  ENDIF.

  CALL METHOD CL_GUI_CFW=>DISPATCH.
  SET PF-STATUS 'PF0100'  EXCLUDING TL_UCOMM.
  SET TITLEBAR 'TB0100'.

ENDMODULE.

MODULE PAI_0100 INPUT.

  OK_CODE = SY-UCOMM.

  CASE OK_CODE.
    WHEN 'VINC_RE'.
      PERFORM VINCULAR_RE.
    WHEN 'BACK'.
      SALVAR = ABAP_FALSE.
      LEAVE TO SCREEN 0.
    WHEN 'SAVE'.
      WA_ACAO = OK_CODE.
      PERFORM SALVAR.
    WHEN 'BUSCAR'.
      CASE ABAP_TRUE.
        WHEN RB_TRANS.
          PERFORM BUSCA_TRANSPORTE.
        WHEN RB_NOMEA.
          WA_ACAO = OK_CODE.
          CLEAR: WA_NOMEACAO, WA_RE, WA_DDE, WA_BL.
          PERFORM BUSCA_NOMEACAO USING WA_ACAO.
      ENDCASE.
    WHEN 'OK'.
    WHEN 'SHOW_MSGRE'.
      PERFORM VERIFICA_ERROS.
    WHEN 'NEW'.

      CASE G_TAB_STRIP-PRESSED_TAB.
        WHEN 'TAB_STRIP_FC1'.  CLEAR: WA_NOMEACAO.
        WHEN 'TAB_STRIP_FC2'.
          CLEAR WA_RE.
          WA_RE-ID_IMPORTADOR = WA_NOMEACAO-KUNNR.
          WA_RE-ID_IMPORTADOR_DESC = WA_NOMEACAO-KUNNR_DESC.

          LOOP AT IT_RE ASSIGNING <RE> WHERE COLOR EQ 'C700'.
            <RE>-COLOR = ''.
          ENDLOOP.

        WHEN 'TAB_STRIP_FC3'.
          CLEAR WA_DDE.
          LOOP AT IT_DDE ASSIGNING <DDE> WHERE COLOR EQ 'C700'.
            <DDE>-COLOR = ''.
          ENDLOOP.
        WHEN 'TAB_STRIP_FC4'.  CLEAR WA_BL.
      ENDCASE.

      C_NEW  =  ABAP_TRUE.
      CAMPOS = ABAP_FALSE.

      PERFORM CONTROLE_TELA USING G_TAB_STRIP-PRESSED_TAB ABAP_TRUE.
    WHEN 'ADD'. PERFORM ADD_LINHA_N.
    WHEN 'CANCEL'.

      SALVAR = ABAP_FALSE.
      CAMPOS = ABAP_TRUE.

      CASE G_TAB_STRIP-PRESSED_TAB.
        WHEN 'TAB_STRIP_FC1'.
          CLEAR: WA_NOMEACAO.
          IT_NOMEACAO[] = IT_NOME_BKP[].
        WHEN 'TAB_STRIP_FC2'.
          CLEAR WA_RE.
          IT_RE[] = IT_RE_BKP[].
        WHEN 'TAB_STRIP_FC3'.
          CLEAR WA_DDE.
          IT_DDE[] = IT_DDE_BKP[].
        WHEN 'TAB_STRIP_FC4'.
          CLEAR WA_BL.
          IT_BL[] = IT_BL_BKP[].
      ENDCASE.

      FREE: IT_NOMEACAO_E.

  ENDCASE.

  CASE GV_UCOMM.
    WHEN 'C_T'.
      X_SCREEN = '0103'.
      RB_NOMEA = ABAP_FALSE.
      RB_MARI  = ABAP_FALSE.
      RB_TERR  = ABAP_FALSE.
    WHEN 'C_N'.
      X_SCREEN = '0103'.
      RB_TRANS = ABAP_FALSE.
      RB_MARI  = ABAP_FALSE.
      RB_TERR  = ABAP_FALSE.
    WHEN 'C_W'.
      RB_EDI   = ABAP_FALSE.
      X_SCREEN = '0103'.
    WHEN 'C_E'.
      RB_NEW   = ABAP_FALSE.
      X_SCREEN = '0103'.
    WHEN 'C_R'. RB_MARI  = ABAP_FALSE.
    WHEN 'C_M'. RB_TERR  = ABAP_FALSE.
  ENDCASE.

ENDMODULE.

FORM CRIA_ALV_TRANSPORTE.

  PERFORM FCAT USING 'TY_TRANSPORTE'.

  CLEAR: WA_LAYOUT, WA_VARIANTE.

  WA_LAYOUT-ZEBRA      = ABAP_TRUE.
  WA_LAYOUT-NO_ROWINS  = ABAP_TRUE.
  WA_LAYOUT-STYLEFNAME = 'FIELD_STYLE'.
  WA_LAYOUT-INFO_FNAME = 'COLOR'.
  WA_LAYOUT-SEL_MODE   = 'C'.
  WA_LAYOUT-BOX_FNAME  = 'FLAG'.
  WA_STABLE-ROW        = ABAP_TRUE.

  WA_VARIANTE-REPORT  = SY-REPID.

  LOOP AT R_TABLE ASSIGNING FIELD-SYMBOL(<FIELD>).
    CASE <FIELD>-FIELDNAME.
      WHEN 'MANDT'.
        <FIELD>-NO_OUT = ABAP_TRUE.
      WHEN 'TIPO' OR 'STATUS'.
        <FIELD>-OUTPUTLEN = '03'.
    ENDCASE.
  ENDLOOP.

  IF WA_CONT IS INITIAL.

    CREATE OBJECT WA_CONT
      EXPORTING
        CONTAINER_NAME = 'CC_TRANSPORTE'.

    CREATE OBJECT WA_ALV
      EXPORTING
        I_SHELLSTYLE    = 0
        I_PARENT        = WA_CONT
        I_APPL_EVENTS   = SPACE
        I_FCAT_COMPLETE = SPACE.

    CREATE OBJECT OBG_EVENTS
      EXPORTING
        IO_ALV_GRID = WA_ALV.

    SET HANDLER: OBG_EVENTS->ON_DT_CH    FOR WA_ALV,
                 OBG_EVENTS->ON_TOOLBAR  FOR WA_ALV,
                 OBG_EVENTS->ON_HANDLE   FOR WA_ALV,
                 OBG_EVENTS->ON_CLICK    FOR WA_ALV,
                 OBG_EVENTS->ON_D_CLICK  FOR WA_ALV.

    CALL METHOD WA_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = WA_LAYOUT
        IS_VARIANT      = WA_VARIANTE
        I_SAVE          = ABAP_TRUE
      CHANGING
        IT_OUTTAB       = IT_TRANSPORTE[]
        IT_FIELDCATALOG = R_TABLE[].

    CALL METHOD WA_ALV->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

    CALL METHOD WA_ALV->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.

    CALL METHOD WA_ALV->SET_READY_FOR_INPUT
      EXPORTING
        I_READY_FOR_INPUT = 1.

  ELSE.
    CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY.
  ENDIF.

ENDFORM.

FORM ADD_LINHA .

  DATA: SEQ TYPE N LENGTH 15.

  SELECT SINGLE *
    FROM ZNOM_CAD_TRANSPT
    WHERE DS_NOME_TRANSPOR EQ P_NOME
      AND STATUS NE 'E'.

  IF SY-SUBRC IS INITIAL. MESSAGE |O transporte { P_NOME } ja existe!| TYPE 'I'. EXIT. ENDIF.
  IF LINE_EXISTS( IT_TRANSPORTE[ DS_NOME_TRANSPOR = P_NOME ] ). MESSAGE |O transporte { P_NOME } ja existe!| TYPE 'I'. EXIT. ENDIF.

  CLEAR IT_TRANSPORTE.

  SEQ = LINES( IT_TRANSPORTE[] ).
  ADD 1 TO SEQ.
  MOVE SEQ TO IT_TRANSPORTE-ID_TRANSPORTE.

  IT_TRANSPORTE-ID_TRANSPORTE = |${ IT_TRANSPORTE-ID_TRANSPORTE+3(12) }|.

  TRANSLATE P_NOME TO UPPER CASE.
  MOVE P_NOME TO IT_TRANSPORTE-DS_NOME_TRANSPOR.

  CASE ABAP_TRUE.
    WHEN RB_TERR. MOVE 'T' TO IT_TRANSPORTE-TIPO.
    WHEN RB_MARI. MOVE 'M' TO IT_TRANSPORTE-TIPO.
  ENDCASE.

  MOVE 'A'      TO IT_TRANSPORTE-STATUS .
  MOVE SY-UNAME TO IT_TRANSPORTE-USNAM.
  MOVE SY-DATUM TO IT_TRANSPORTE-DATA_ATUAL.
  MOVE SY-UZEIT TO IT_TRANSPORTE-HORA_ATUAL.
  MOVE SY-MANDT TO IT_TRANSPORTE-MANDT.

  APPEND IT_TRANSPORTE.
  CLEAR IT_TRANSPORTE.

  SORT IT_TRANSPORTE BY ID_TRANSPORTE.

  CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY.

ENDFORM.

FORM DEL_LINHA .

  DATA: IT_DEL  TYPE TABLE OF ZNOM_CAD_TRANSPT WITH HEADER LINE,
        VAR_SEQ TYPE N LENGTH 15.

  CALL METHOD WA_ALV->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SEL_ROWS.

  CHECK NOT IT_SEL_ROWS IS INITIAL.

  LOOP AT IT_SEL_ROWS INTO WA_SEL_ROWS.
    IT_TRANSPORTE-FLAG = ABAP_TRUE.
    MODIFY IT_TRANSPORTE INDEX WA_SEL_ROWS-INDEX FROM IT_TRANSPORTE TRANSPORTING FLAG.
  ENDLOOP.

  DELETE IT_TRANSPORTE WHERE FLAG EQ ABAP_TRUE.

  LOOP AT IT_TRANSPORTE ASSIGNING FIELD-SYMBOL(<TRANS>).

    VAR_SEQ = SY-TABIX.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = VAR_SEQ
      IMPORTING
        OUTPUT = VAR_SEQ.

    <TRANS>-ID_TRANSPORTE = |${ VAR_SEQ+3(12) }|.
  ENDLOOP.

  CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY.

ENDFORM.

FORM SALVAR.

  DATA: IT_SAVE            TYPE TABLE OF ZNOM_CAD_TRANSPT WITH HEADER LINE,
        SEQ                TYPE ZNOM_CAD_TRANSPT-ID_TRANSPORTE,
        IT_ZNOM_TRANSPORTE TYPE TABLE OF ZNOM_TRANSPORTE WITH HEADER LINE,
        IT_ZREG_EXPORTACAO TYPE TABLE OF ZREG_EXPORTACAO WITH HEADER LINE,
        IT_ZDDE            TYPE TABLE OF ZDDE WITH HEADER LINE,
        IT_ZDDE_APLICACAO  TYPE TABLE OF ZDDE_APLICACAO WITH HEADER LINE,
        IT_ZNOM_CONHEC     TYPE TABLE OF ZNOM_CONHEC WITH HEADER LINE,
        SEQ_ID             TYPE NUMC10.

  PERFORM SET_ERROS.

  CHECK TG_MSG_RET[] IS INITIAL.

  CASE ABAP_TRUE.
    WHEN RB_NEW.

      SELECT MAX( ID_TRANSPORTE )
        FROM ZNOM_CAD_TRANSPT
        INTO SEQ.

      LOOP AT IT_TRANSPORTE ASSIGNING FIELD-SYMBOL(<TRANS>).

        MOVE-CORRESPONDING <TRANS> TO IT_SAVE.

        ADD 1 TO SEQ.
        IT_SAVE-ID_TRANSPORTE = SEQ.

        APPEND IT_SAVE.

      ENDLOOP.

      MODIFY ZNOM_CAD_TRANSPT FROM TABLE IT_SAVE.

      X_SCREEN = '0102'.

      FREE IT_TRANSPORTE.

    WHEN RB_EDI.

      LOOP AT IT_TRANSPORTE.
        MOVE-CORRESPONDING IT_TRANSPORTE TO IT_SAVE.
        APPEND IT_SAVE.
      ENDLOOP.

      MODIFY ZNOM_CAD_TRANSPT FROM TABLE IT_SAVE.

      X_SCREEN = '0102'.

      PERFORM BUSCA_TRANSPORTE.

    WHEN RB_NOMEA.

      CASE G_TAB_STRIP-PRESSED_TAB.
        WHEN 'TAB_STRIP_FC1'. "NOMEAÇÃO
          LOOP AT IT_NOMEACAO INTO WA_NOMEACAO WHERE FLAG EQ ABAP_TRUE.
            PERFORM EN_DE_QUERE USING WA_NOMEACAO-ID_NOMEACAO_TRAN 'DE' CHANGING SY-SUBRC.

            SELECT COUNT(*)
              FROM ZNOM_TRANSPORTE
              WHERE ID_NOMEACAO_TRAN EQ WA_NOMEACAO-ID_NOMEACAO_TRAN.

            IF NOT SY-SUBRC IS INITIAL.

              PERFORM GET_SNUM USING 'ZID_NOM_TR' CHANGING SEQ_ID.

              IF SEQ_ID IS INITIAL.
                MESSAGE 'Sequencia não pode ser Gerada! (ZID_NOM_TR)' TYPE 'S' DISPLAY LIKE 'E'.
                EXIT.
              ENDIF.
              WA_NOMEACAO-ID_NOMEACAO_TRAN = SEQ_ID.

            ENDIF.
            MOVE-CORRESPONDING WA_NOMEACAO TO IT_ZNOM_TRANSPORTE.
            APPEND IT_ZNOM_TRANSPORTE.
          ENDLOOP.

          MODIFY ZNOM_TRANSPORTE  FROM TABLE IT_ZNOM_TRANSPORTE.

        WHEN 'TAB_STRIP_FC2'. "RE

          LOOP AT IT_RE INTO WA_RE WHERE FLAG EQ ABAP_TRUE.

            PERFORM EN_DE_QUERE USING WA_RE-ID_NOMEACAO_TRAN 'DE' CHANGING SY-SUBRC.

            PERFORM CONVERT_IN_OUT USING 'IN'  CHANGING WA_RE-ID_EXPORTADOR.
            PERFORM CONVERT_IN_OUT USING 'IN'  CHANGING WA_RE-ID_IMPORTADOR.
            PERFORM CONVERT_IN_OUT USING 'IN'  CHANGING WA_RE-ID_NOMEACAO_TRAN.
            PERFORM CONVERT_IN_OUT USING 'OUT' CHANGING WA_RE-CD_MATERIAL.

            SELECT COUNT(*)
              FROM ZREG_EXPORTACAO
              WHERE ID_REGISTRO_EXPO EQ WA_RE-ID_REGISTRO_EXPO.

            IF NOT SY-SUBRC IS INITIAL.
              PERFORM GET_SNUM USING 'ZID_RE_EXP' CHANGING SEQ_ID.
              IF SEQ_ID IS INITIAL. MESSAGE 'Sequencia não pode ser Gerada! (ZID_RE_EXP)' TYPE 'S' DISPLAY LIKE 'E'. EXIT. ENDIF.
              WA_RE-ID_REGISTRO_EXPO = SEQ_ID.
            ENDIF.

            MOVE-CORRESPONDING WA_RE TO IT_ZREG_EXPORTACAO.

            APPEND IT_ZREG_EXPORTACAO.
            CLEAR IT_ZREG_EXPORTACAO.

          ENDLOOP.

          MODIFY ZREG_EXPORTACAO  FROM TABLE IT_ZREG_EXPORTACAO.

        WHEN 'TAB_STRIP_FC3'. "DDE
          LOOP AT IT_DDE INTO WA_DDE WHERE FLAG EQ ABAP_TRUE.

            PERFORM EN_DE_QUERE USING WA_DDE-ID_NOMEACAO_TRAN 'DE' CHANGING SY-SUBRC.

            MOVE-CORRESPONDING WA_DDE TO IT_ZDDE.

            SELECT SINGLE *
              FROM ZDDE
              INTO @DATA(W_DDE)
              WHERE NR_DDE EQ @WA_DDE-NR_DDE
              AND ID_NOMEACAO_TRAN EQ @WA_DDE-ID_NOMEACAO_TRAN
              AND IN_STATUS_COMEX EQ @ABAP_FALSE.

            IF SY-SUBRC IS INITIAL.
              MOVE W_DDE-ID_DDE TO IT_ZDDE-ID_DDE.
            ELSE.
              IF LINE_EXISTS( IT_ZDDE[ NR_DDE = WA_DDE-NR_DDE
                            ID_NOMEACAO_TRAN = WA_DDE-ID_NOMEACAO_TRAN
                 ] ).
                IT_ZDDE-ID_DDE = IT_ZDDE[ NR_DDE = WA_DDE-NR_DDE
                               ID_NOMEACAO_TRAN = WA_DDE-ID_NOMEACAO_TRAN ]-ID_DDE.
                IF IT_ZDDE-ID_DDE IS INITIAL.
                  PERFORM GET_SNUM USING 'ZID_DDE' CHANGING SEQ_ID.
                  IF SEQ_ID IS INITIAL. MESSAGE 'Sequencia não pode ser Gerada! (ZID_DDE)' TYPE 'S' DISPLAY LIKE 'E'. EXIT. ENDIF.
                  IT_ZDDE-ID_DDE = SEQ_ID.
                ENDIF.
              ELSE.
                PERFORM GET_SNUM USING 'ZID_DDE' CHANGING SEQ_ID.
                IF SEQ_ID IS INITIAL. MESSAGE 'Sequencia não pode ser Gerada! (ZID_DDE)' TYPE 'S' DISPLAY LIKE 'E'. EXIT. ENDIF.
                IT_ZDDE-ID_DDE = SEQ_ID.
              ENDIF.
            ENDIF.

            IT_ZDDE-NR_QTDE = DDE_NR_QTDE.
            IT_ZDDE-NR_VALOR = DDE_NR_VALOR.

            MOVE: IT_ZDDE-ID_DDE TO IT_ZDDE_APLICACAO-ID_DDE.

            TRY.
                IT_ZDDE_APLICACAO-ID_REGISTRO_EXPO = IT_RE[ NR_REGISTRO_EXPO = WA_DDE-NR_REGISTRO_EXPO ]-ID_REGISTRO_EXPO.
              CATCH CX_SY_ITAB_LINE_NOT_FOUND.
                CLEAR IT_DDE_AP-ID_REGISTRO_EXPO.
            ENDTRY.

*            SELECT COUNT(*)
*              FROM ZDDE
*              WHERE ID_DDE EQ IT_ZDDE-ID_DDE.
*
*            IF NOT SY-SUBRC IS INITIAL.
*              PERFORM GET_SNUM USING 'ZID_DDE' CHANGING SEQ_ID.
*              IF SEQ_ID IS INITIAL. MESSAGE 'Sequencia não pode ser Gerada! (ZID_DDE)' TYPE 'S' DISPLAY LIKE 'E'. EXIT. ENDIF.
*              IT_ZDDE-ID_DDE = SEQ_ID.
*              IT_ZDDE_APLICACAO-ID_DDE = SEQ_ID.
*            ENDIF.

            APPEND: IT_ZDDE, IT_ZDDE_APLICACAO.
            CLEAR: IT_ZDDE, IT_ZDDE_APLICACAO.

          ENDLOOP.

          MODIFY ZDDE FROM TABLE IT_ZDDE.
          MODIFY ZDDE_APLICACAO FROM TABLE IT_ZDDE_APLICACAO.

          IF IT_DDE_DEL[] IS NOT INITIAL.
            DELETE ZDDE_APLICACAO FROM TABLE IT_DDE_DEL.
          ENDIF.

        WHEN 'TAB_STRIP_FC4'. "BL

          LOOP AT IT_BL INTO WA_BL WHERE FLAG EQ ABAP_TRUE.

            PERFORM EN_DE_QUERE USING WA_BL-ID_NOMEACAO_TRAN 'DE' CHANGING SY-SUBRC.

            SELECT COUNT(*)
              FROM ZNOM_CONHEC
              WHERE ID_CONHEC EQ WA_BL-ID_CONHEC.

            IF NOT SY-SUBRC IS INITIAL.
              PERFORM GET_SNUM USING 'ZID_BL' CHANGING SEQ_ID.
              IF SEQ_ID IS INITIAL. MESSAGE 'Sequencia não pode ser Gerada! (ZID_BL)' TYPE 'S' DISPLAY LIKE 'E'. EXIT. ENDIF.
              WA_BL-ID_CONHEC = SEQ_ID.
            ENDIF.

            MOVE-CORRESPONDING WA_BL TO IT_ZNOM_CONHEC.
            APPEND IT_ZNOM_CONHEC.

          ENDLOOP.

          MODIFY ZNOM_CONHEC FROM TABLE IT_ZNOM_CONHEC.
          CLEAR WA_BL.

      ENDCASE.


      PERFORM BUSCA_NOMEACAO USING WA_ACAO.

      CASE G_TAB_STRIP-PRESSED_TAB.
        WHEN 'TAB_STRIP_FC1'. CALL METHOD WA_ALV_N->REFRESH_TABLE_DISPLAY.
        WHEN 'TAB_STRIP_FC2'. CALL METHOD WA_ALV_RE->REFRESH_TABLE_DISPLAY.
        WHEN 'TAB_STRIP_FC3'. CALL METHOD WA_ALV_DDE->REFRESH_TABLE_DISPLAY.
        WHEN 'TAB_STRIP_FC4'. CALL METHOD WA_ALV_BL->REFRESH_TABLE_DISPLAY.
      ENDCASE.

  ENDCASE.

  FREE: IT_ZNOM_TRANSPORTE, IT_ZREG_EXPORTACAO, IT_SAVE, IT_NOMEACAO_E, IT_DDE_DEL.
  SALVAR = ABAP_FALSE.
*  LEAVE TO SCREEN 0100.

ENDFORM.

FORM BUSCA_TRANSPORTE.

  DATA: NOME  TYPE STRING,
        VAR_X TYPE C LENGTH 1.

  FREE IT_TRANSPORTE.

  IF P_TIPO IS INITIAL.
    CASE ABAP_TRUE.
      WHEN RB_MARI. VAR_X = 'M'.
      WHEN RB_TERR. VAR_X = 'T'.
      WHEN OTHERS. MESSAGE 'É Obrigatorio o Preenchimento do Tipo do Transporte! ' TYPE 'I'.EXIT.
    ENDCASE.
  ELSE.
    VAR_X = P_TIPO.
  ENDIF.

  NOME = |%{ P_NOME }%|.

  SELECT * FROM ZNOM_CAD_TRANSPT
    INTO CORRESPONDING FIELDS OF TABLE IT_TRANSPORTE
    WHERE DS_NOME_TRANSPOR LIKE NOME
      AND TIPO EQ VAR_X
      AND STATUS NE 'E'.

  X_SCREEN = '0102'.
  PERFORM CRIA_ALV_TRANSPORTE.
  CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY.

ENDFORM.

FORM EDI_LINHA .

  DATA: IT_SELECTED_ROWS TYPE LVC_T_ROW,
        WA_SELECTED_ROWS TYPE LVC_S_ROW,
        LS_EDIT          TYPE LVC_S_STYL,
        ROW_EDIT         TYPE LVC_S_STYL,
        LT_EDIT          TYPE LVC_T_STYL.

  CALL METHOD WA_ALV->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SELECTED_ROWS.

  CHECK NOT IT_SELECTED_ROWS IS INITIAL.

  LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
    READ TABLE IT_TRANSPORTE ASSIGNING FIELD-SYMBOL(<TRANS>) INDEX WA_SELECTED_ROWS-INDEX.

    IF SY-SUBRC IS INITIAL.

      FREE: <TRANS>-FIELD_STYLE, LS_EDIT, LT_EDIT.

      LOOP AT R_TABLE ASSIGNING FIELD-SYMBOL(<FIELD>).

        CASE <FIELD>-FIELDNAME.
          WHEN 'MANDT' OR 'ID_TRANSPORTE' OR 'DS_NOME_TRANSPOR' OR 'STATUS' OR 'USNAM' OR 'DATA_ATUAL' OR 'HORA_ATUAL'.
            ROW_EDIT-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
            <FIELD>-EDIT = ABAP_FALSE.
          WHEN OTHERS.
            ROW_EDIT-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
            <FIELD>-EDIT = ABAP_TRUE.
        ENDCASE.

        FREE:  LS_EDIT, LT_EDIT.

        LS_EDIT-FIELDNAME = <FIELD>-FIELDNAME.
        LS_EDIT-STYLE = ROW_EDIT-STYLE.
        LS_EDIT-STYLE2 = SPACE.
        LS_EDIT-STYLE3 = SPACE.
        LS_EDIT-STYLE4 = SPACE.

        INSERT LS_EDIT INTO TABLE LT_EDIT.

        INSERT LINES OF LT_EDIT INTO TABLE <TRANS>-FIELD_STYLE.

      ENDLOOP.
    ENDIF.
  ENDLOOP.

  CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY.

ENDFORM.

FORM EXC_LINHA .

  DATA: IT_SELECTED_ROWS TYPE LVC_T_ROW,
        WA_SELECTED_ROWS TYPE LVC_S_ROW,
        LS_EDIT          TYPE LVC_S_STYL,
        ROW_EDIT         TYPE LVC_S_STYL,
        LT_EDIT          TYPE LVC_T_STYL,
        ID_NOMEACAO      TYPE ZNOM_TRANSPORTE-ID_NOMEACAO_TRAN.

  CALL METHOD WA_ALV->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SELECTED_ROWS.

  CHECK NOT IT_SELECTED_ROWS IS INITIAL.

  LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.

    TRY .
        IT_TRANSPORTE = IT_TRANSPORTE[ WA_SELECTED_ROWS-INDEX ].
      CATCH CX_SY_ITAB_LINE_NOT_FOUND.
    ENDTRY.

    SELECT SINGLE ID_NOMEACAO_TRAN
      FROM ZNOM_TRANSPORTE
      INTO ID_NOMEACAO
      WHERE ID_TRANSPORTE EQ IT_TRANSPORTE-ID_TRANSPORTE.

    IF NOT SY-SUBRC IS INITIAL.
      LOOP AT IT_TRANSPORTE ASSIGNING FIELD-SYMBOL(<TRA>).
        IF SY-TABIX EQ WA_SELECTED_ROWS-INDEX.
          <TRA>-STATUS = 'E'.
          <TRA>-COLOR = 'C700'.
        ENDIF.
      ENDLOOP.
    ELSE.
      SHIFT ID_NOMEACAO LEFT DELETING LEADING '0'.
      MESSAGE |Transporte já vinculado a nomeação { ID_NOMEACAO }! | TYPE 'I'.
    ENDIF.

  ENDLOOP.

  CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY.

ENDFORM.

MODULE TAB_STRIP_ACTIVE_TAB_SET OUTPUT.

  TAB_STRIP-ACTIVETAB = G_TAB_STRIP-PRESSED_TAB.

  CASE G_TAB_STRIP-PRESSED_TAB.
    WHEN C_TAB_STRIP-TAB1.
      G_TAB_STRIP-SUBSCREEN = '0105'.
      PERFORM CRIA_ALV TABLES IT_NOMEACAO USING 'NOMEACAO'.
      Y_SCREEN = '0205'.
    WHEN C_TAB_STRIP-TAB2.
      G_TAB_STRIP-SUBSCREEN = '0106'.
      PERFORM SELECAO.
      PERFORM CRIA_ALV TABLES IT_RE USING 'RE'.
      Y_SCREEN = '0206'.
    WHEN C_TAB_STRIP-TAB3.
      G_TAB_STRIP-SUBSCREEN = '0107'.
      PERFORM SELECAO.
      PERFORM CRIA_ALV TABLES IT_DDE USING 'DDE'.
      Y_SCREEN = '0207'.
    WHEN C_TAB_STRIP-TAB4.
      G_TAB_STRIP-SUBSCREEN = '0108'.
      PERFORM SELECAO.
      PERFORM CRIA_ALV TABLES IT_BL USING 'BL'.
      Y_SCREEN = '0208'.
  ENDCASE.

  PERFORM ALIMENTA_FIELDS USING Y_SCREEN.

ENDMODULE.

MODULE TAB_STRIP_ACTIVE_TAB_GET INPUT.

  DATA: P_RESP.
  OK_CODE = SY-UCOMM.
  CHECK NOT 'SAVE_ADD_NEW_OK_BUSCAR_CANCEL_VINC_RE_SHOW_MSGRE' CS OK_CODE.

  CLEAR P_RESP.
  CASE G_TAB_STRIP-PRESSED_TAB.
    WHEN 'TAB_STRIP_FC1'. "NOMEAÇÃO
      IF IT_NOMEACAO[] NE IT_NOME_BKP[].

        PERFORM BLOCK_ABAS USING TEXT-E01 CHANGING P_RESP.
        CASE P_RESP.
          WHEN 1.
            WA_ACAO = 'SALVAR'.
            PERFORM SALVAR.
          WHEN 2.
            CLEAR WA_NOMEACAO.
            IT_NOMEACAO[] = IT_NOME_BKP[].
            EXIT.
          WHEN OTHERS.
            WA_ACAO = ''.
            EXIT.
        ENDCASE.
        PERFORM BLOCK_BOTOES.

      ELSE.
        IF WA_NOMEACAO-ID_NOMEACAO_TRAN IS INITIAL.
          MESSAGE 'Selecione uma Nomeação para Proseguir!' TYPE 'S' DISPLAY LIKE 'E'.
          EXIT.
        ENDIF.
        IF OK_CODE EQ 'TAB_STRIP_FC4'.
          IF WA_RE-ID_PAIS_DESTINO IS INITIAL.
            MESSAGE 'Selecione um RE para Proseguir!' TYPE 'S' DISPLAY LIKE 'E'.
            EXIT.
          ENDIF.
        ENDIF.
      ENDIF.

    WHEN 'TAB_STRIP_FC2'. "RE
      IF IT_RE[] NE IT_RE_BKP[].
        PERFORM BLOCK_ABAS USING TEXT-E01 CHANGING P_RESP.
        CASE P_RESP.
          WHEN 1.
            WA_ACAO = 'SALVAR'.
            PERFORM SALVAR.
          WHEN 2.
            CLEAR WA_RE.
            IT_RE[] = IT_RE_BKP[].
            EXIT.
          WHEN OTHERS.
            WA_ACAO = ''.
            EXIT.
        ENDCASE.
        PERFORM BLOCK_BOTOES.
      ELSE.
        IF OK_CODE EQ 'TAB_STRIP_FC4'.
          IF WA_RE-ID_PAIS_DESTINO IS INITIAL.
            MESSAGE 'Selecione um RE para Proseguir!' TYPE 'S' DISPLAY LIKE 'E'.
            EXIT.
          ENDIF.
        ENDIF.
      ENDIF.
    WHEN 'TAB_STRIP_FC3'. "DDE
      IF IT_DDE[] NE IT_DDE_BKP[].
        PERFORM BLOCK_ABAS USING TEXT-E01 CHANGING P_RESP.
        IF P_RESP EQ 1.
          WA_ACAO = 'SALVAR'.
          PERFORM SALVAR.
        ELSE.
          CLEAR WA_DDE.
          IT_DDE[] = IT_DDE_BKP[].
          EXIT.
        ENDIF.
        PERFORM BLOCK_BOTOES.
      ELSE.
        IF OK_CODE EQ 'TAB_STRIP_FC4'.
          IF WA_RE-ID_PAIS_DESTINO IS INITIAL.
            MESSAGE 'Selecione um RE para Proseguir!' TYPE 'S' DISPLAY LIKE 'E'.
            EXIT.
          ENDIF.
        ENDIF.
      ENDIF.
    WHEN 'TAB_STRIP_FC4'. "BL
      IF IT_BL[] NE IT_BL_BKP[].
        PERFORM BLOCK_ABAS USING TEXT-E01 CHANGING P_RESP.
        IF P_RESP EQ 1.
          WA_ACAO = 'SALVAR'.
          PERFORM SALVAR.
        ELSE.
          CLEAR WA_BL.
          IT_BL[] = IT_BL_BKP[].
          EXIT.
        ENDIF.
        PERFORM BLOCK_BOTOES.
      ENDIF.
  ENDCASE.

  CASE OK_CODE.
    WHEN C_TAB_STRIP-TAB1.   G_TAB_STRIP-PRESSED_TAB = C_TAB_STRIP-TAB1.
    WHEN C_TAB_STRIP-TAB2.   G_TAB_STRIP-PRESSED_TAB = C_TAB_STRIP-TAB2.
    WHEN C_TAB_STRIP-TAB3.   G_TAB_STRIP-PRESSED_TAB = C_TAB_STRIP-TAB3.
    WHEN C_TAB_STRIP-TAB4.   G_TAB_STRIP-PRESSED_TAB = C_TAB_STRIP-TAB4.
  ENDCASE.

ENDMODULE.

MODULE F4 INPUT.

  FREE IT_F4.
  CLEAR IT_F4.

  SELECT *
     FROM ZNOM_CAD_TRANSPT
    INTO TABLE IT_F4
    WHERE STATUS NE 'E'.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'DS_NOME_TRANSPOR'
      VALUE_ORG       = 'S'
      DYNPPROG        = SY-REPID
      DYNPNR          = SY-DYNNR
    TABLES
      VALUE_TAB       = IT_F4
      RETURN_TAB      = IT_RETURN
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  P_NOME = IT_RETURN-FIELDVAL.

ENDMODULE.

FORM BUSCA_NOMEACAO USING P_ACAO.

  DATA: NAVIO TYPE CHAR50.
  DATA: ANO TYPE RANGE OF ZNOM_TRANSPORTE-NR_ANO WITH HEADER LINE.
  DATA: MES TYPE RANGE OF ZNOM_TRANSPORTE-NR_MES WITH HEADER LINE.
  DATA: BOO TYPE RANGE OF ZNOM_TRANSPORTE-BOOKING WITH HEADER LINE.

  FREE: IT_NOMEACAO[].
  FREE: IT_RE[].
  FREE: IT_DDE[].
  FREE: IT_BL[].
  CLEAR: IT_NOMEACAO, IT_RE, IT_DDE, IT_BL.


  CASE P_ACAO.
    WHEN 'BUSCAR'.
      G_TAB_STRIP-PRESSED_TAB = 'TAB_STRIP_FC1'.
  ENDCASE.

  PERFORM TELA.

  IF NOT P_ANO IS INITIAL.
    ANO-SIGN    = 'I'.
    ANO-OPTION  = 'EQ'.
    ANO-LOW     = P_ANO.
    ANO-HIGH    = P_ANO.
    APPEND ANO.
    CLEAR ANO.
  ENDIF.

  IF NOT P_MES IS INITIAL.
    MES-SIGN    = 'I'.
    MES-OPTION  = 'EQ'.
    MES-LOW     = P_MES.
    MES-HIGH    = P_MES.
    APPEND MES.
    CLEAR MES.
  ENDIF.

  IF NOT P_BOO IS INITIAL.
    BOO-SIGN    = 'I'.
    BOO-OPTION  = 'EQ'.
    BOO-LOW     = P_BOO.
    BOO-HIGH    = P_BOO.
    APPEND BOO.
    CLEAR BOO.
  ENDIF.


  NAVIO = |%{ P_NOME }%|.

  SELECT * FROM ZNOM_TRANSPORTE
    INTO CORRESPONDING FIELDS OF TABLE IT_NOMEACAO
    WHERE DS_NOME_TRANSPOR LIKE NAVIO
      AND NR_ANO IN ANO
      AND NR_MES IN MES
      AND BOOKING IN BOO
      AND ID_NOMEACAO_TRAN >= '7000000001'
      AND IN_STATUS_COMEX EQ ABAP_FALSE.

  LOOP AT IT_NOMEACAO ASSIGNING FIELD-SYMBOL(<NOMEACAO>).

    <NOMEACAO>-ICON = '@16@'.
    <NOMEACAO>-COLOR = 'C500'.
    <NOMEACAO>-ID_NOME_TRAN_REG = <NOMEACAO>-ID_NOMEACAO_TRAN.

    SELECT SINGLE *
     FROM ZSDT0051
     INTO @DATA(WA_ZSDT0051)
     WHERE NRO_SOL_OV EQ @<NOMEACAO>-NRO_SOL_OV.

    IF SY-SUBRC IS INITIAL.
      MOVE-CORRESPONDING WA_ZSDT0051 TO <NOMEACAO>.
    ENDIF.

    SHIFT <NOMEACAO>-ID_NOME_TRAN_REG LEFT DELETING LEADING '0'.

  ENDLOOP.

  IT_NOME_BKP[] = IT_NOMEACAO[].

  MOVE: 'SAVE' TO TL_UCOMM.
  APPEND TL_UCOMM.
  CLEAR: TL_UCOMM.

  X_SCREEN = '0104'.

ENDFORM.

MODULE F4_NRO_SOL_OV INPUT.

  SELECT A~NRO_SOL_OV K~NAME1 K~MCOD3 A~TP_VENDA A~VKORG A~DATA_ATUAL
    INTO TABLE F4_NRO_SOL_OV
    FROM ZSDT0051 AS A
    INNER JOIN KNA1 AS K ON K~KUNNR EQ A~KUNNR
    WHERE STATUS NE 'D'
      AND TP_VENDA EQ '00014'.

  SORT F4_NRO_SOL_OV BY NRO_SOL_OV DESCENDING.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'NRO_SOL_OV'
      VALUE_ORG       = 'S'
      DYNPPROG        = SY-REPID
      DYNPNR          = SY-DYNNR
    TABLES
      VALUE_TAB       = F4_NRO_SOL_OV
      RETURN_TAB      = IT_RETURN
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  CHECK NOT IT_RETURN-FIELDVAL IS INITIAL.

  WA_NOMEACAO-NRO_SOL_OV = IT_RETURN-FIELDVAL.

  PERFORM PREENCHE_CAMPOS.

ENDMODULE.

MODULE F4_DS_NOME_TRANSPOR INPUT.

  FREE IT_F4.
  CLEAR IT_F4.

  SELECT *
     FROM ZNOM_CAD_TRANSPT
    INTO TABLE IT_F4
    WHERE STATUS NE 'E'
    ORDER BY DS_NOME_TRANSPOR.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'ID_TRANSPORTE'
      VALUE_ORG       = 'S'
      DYNPPROG        = SY-REPID
      DYNPNR          = SY-DYNNR
    TABLES
      VALUE_TAB       = IT_F4
      RETURN_TAB      = IT_RETURN
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  TRY .
      P_NOME = WA_NOMEACAO-DS_NOME_TRANSPOR = IT_F4[ ID_TRANSPORTE = IT_RETURN-FIELDVAL(15) ]-DS_NOME_TRANSPOR.
      WA_NOMEACAO-ID_TRANSPORTE = IT_F4[ ID_TRANSPORTE = IT_RETURN-FIELDVAL(15) ]-ID_TRANSPORTE.
    CATCH CX_SY_ITAB_LINE_NOT_FOUND.
      CLEAR: P_NOME, WA_NOMEACAO-DS_NOME_TRANSPOR, WA_NOMEACAO-ID_TRANSPORTE.
  ENDTRY.

ENDMODULE.

MODULE ATUALIZA_DADOS INPUT.

  CASE G_TAB_STRIP-PRESSED_TAB.
    WHEN 'TAB_STRIP_FC1'. "NOMEAÇÃO

      PERFORM PREENCHE_CAMPOS.
      CLEAR SY-UCOMM.

    WHEN 'TAB_STRIP_FC2'. "RE

      PERFORM NR_MASC USING '1' CHANGING WA_RE-NR_REGISTRO_EXPO.
      PERFORM LAND USING WA_RE-ID_PAIS_DESTINO.

      SELECT SINGLE NAME1
        FROM T001W
         INTO  WA_RE-WERKS_DESC
        WHERE WERKS EQ WA_RE-WERKS.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = WA_RE-ID_EXPORTADOR
        IMPORTING
          OUTPUT = WA_RE-ID_EXPORTADOR.

*      SELECT SINGLE NAME1
*        FROM KNA1
*         INTO  WA_RE-ID_EXPORTADOR_DESC
*        WHERE KUNNR EQ WA_RE-ID_EXPORTADOR.

      SELECT SINGLE NAME1
        FROM LFA1
         INTO  WA_RE-ID_EXPORTADOR_DESC
        WHERE LIFNR EQ WA_RE-ID_EXPORTADOR.


      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = WA_RE-ID_IMPORTADOR
        IMPORTING
          OUTPUT = WA_RE-ID_IMPORTADOR.
*
*      SELECT SINGLE NAME1
*        FROM LFA1
*         INTO  WA_RE-ID_IMPORTADOR_DESC
*        WHERE LIFNR EQ WA_RE-ID_IMPORTADOR.
*
      SELECT SINGLE NAME1
        FROM KNA1
         INTO  WA_RE-ID_IMPORTADOR_DESC
        WHERE KUNNR EQ WA_RE-ID_IMPORTADOR.

      IF WA_RE-NR_VALOR_TOTAL IS NOT INITIAL AND
         WA_RE-NR_QTDE        IS NOT INITIAL.
        WA_RE-NR_VALOR_TM = ( WA_RE-NR_VALOR_TOTAL / WA_RE-NR_QTDE ) * 1000.
      ENDIF.

      LOOP AT IT_RE ASSIGNING <RE>
         WHERE COLOR = 'C700'.
        MOVE WA_RE TO <RE>.
      ENDLOOP.

    WHEN 'TAB_STRIP_FC3'. "DDE

      PERFORM NR_MASC USING '1' CHANGING WA_DDE-NR_REGISTRO_EXPO.
      PERFORM NR_MASC USING '2' CHANGING WA_DDE-NR_DDE.
*      PERFORM NR_MASC USING '3' CHANGING WA_DDE-NR_QTDE.

*      IF NOT LINE_EXISTS( IT_RE[ NR_REGISTRO_EXPO = WA_DDE-NR_REGISTRO_EXPO ]  ).
*        MESSAGE |O Nr. de Registro { WA_DDE-NR_REGISTRO_EXPO } não esta cadastrado na Aba RE!| TYPE 'S' DISPLAY LIKE 'E'.
*        CLEAR WA_DDE-NR_REGISTRO_EXPO.
*      ENDIF.

      TRY.
          IT_DDE_AP-ID_REGISTRO_EXPO = IT_RE[ NR_REGISTRO_EXPO = WA_DDE-NR_REGISTRO_EXPO ]-ID_REGISTRO_EXPO.
        CATCH CX_SY_ITAB_LINE_NOT_FOUND.
          CLEAR IT_DDE_AP-ID_REGISTRO_EXPO.
      ENDTRY.

      IF LINE_EXISTS( IT_DDE[ NR_DDE = WA_DDE-NR_DDE COLOR = 'C700' ] ).
        LOOP AT IT_DDE ASSIGNING <DDE> WHERE "COLOR EQ 'C700'
                                         NR_DDE EQ WA_DDE-NR_DDE
                                         AND NR_DDE EQ WA_DDE-NR_DDE.
          MOVE: WA_DDE-DT_DDE TO <DDE>-DT_DDE,
                WA_DDE-DT_AVERBACAO TO <DDE>-DT_AVERBACAO,
                ABAP_TRUE TO <DDE>-FLAG.

        ENDLOOP.
      ELSE.

        IF LINE_EXISTS( IT_DDE[ NR_DDE = WA_DDE-NR_DDE ]  ).
          TRY .
              WA_DDE-DT_DDE = IT_DDE[ NR_DDE = WA_DDE-NR_DDE ]-DT_DDE.
              WA_DDE-DT_AVERBACAO = IT_DDE[ NR_DDE = WA_DDE-NR_DDE ]-DT_AVERBACAO.
            CATCH CX_SY_ITAB_LINE_NOT_FOUND.
          ENDTRY.
        ENDIF.

      ENDIF.

    WHEN 'TAB_STRIP_FC4'. "BL

      DATA SOMA TYPE ZNOM_TRANSPORTE-NR_QTDE_NOMEADA.

      CLEAR SOMA.

      LOOP AT IT_BL INTO DATA(BL).
        ADD BL-NR_QTDE TO SOMA.
      ENDLOOP.

      ADD WA_BL-NR_QTDE TO SOMA.

      IF  SOMA GT WA_NOMEACAO-NR_QTDE_NOMEADA.
        CLEAR WA_BL-NR_QTDE.
        MESSAGE |A quantidade total não poderá ultrapassar a quantidade nomeada!| TYPE 'S' DISPLAY LIKE 'E'.
      ENDIF.

      LOOP AT IT_BL ASSIGNING FIELD-SYMBOL(<BL>)
        WHERE COLOR = 'C700'.
        MOVE WA_BL TO <BL>.
      ENDLOOP.

  ENDCASE.

  PERFORM SET_ERROS.

ENDMODULE.

FORM PREENCHE_CAMPOS .

  IF WA_NOMEACAO-DS_NOME_TRANSPOR IS INITIAL.
    MESSAGE 'É Obrigatório o Preenchimento da Descrição do Navio!' TYPE 'S' DISPLAY LIKE 'E'.
    CLEAR WA_NOMEACAO-DS_NOME_TRANSPOR.
    EXIT.
  ELSE.

    SELECT COUNT(*)
  FROM ZNOM_CAD_TRANSPT
  WHERE DS_NOME_TRANSPOR EQ WA_NOMEACAO-DS_NOME_TRANSPOR
    AND STATUS NE 'E'.

    IF NOT SY-SUBRC IS INITIAL.
      MESSAGE 'Navio não está Cadastrado!' TYPE 'S' DISPLAY LIKE 'E'.
      CLEAR WA_NOMEACAO-DS_NOME_TRANSPOR.
      EXIT.
    ENDIF.

  ENDIF.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = WA_NOMEACAO-NRO_SOL_OV
    IMPORTING
      OUTPUT = WA_NOMEACAO-NRO_SOL_OV.

  SELECT SINGLE *
    FROM ZSDT0051
    INTO @DATA(WA_ZSDT0051)
    WHERE NRO_SOL_OV EQ @WA_NOMEACAO-NRO_SOL_OV.

  IF SY-SUBRC IS INITIAL.
    MOVE-CORRESPONDING WA_ZSDT0051 TO WA_NOMEACAO.
  ENDIF.

*  IF NOT WA_NOMEACAO-NRO_SOL_OV IS INITIAL.
*    SELECT SINGLE INSTRUCAO
*      FROM ZSDT0045
*      INTO WA_NOMEACAO-INSTRUCAO
*      WHERE OBJEK EQ WA_NOMEACAO-NRO_SOL_OV.
*  ENDIF.

  SELECT SINGLE ID_TRANSPORTE
    FROM ZNOM_CAD_TRANSPT
      INTO WA_NOMEACAO-ID_TRANSPORTE
     WHERE STATUS NE 'E'
     AND DS_NOME_TRANSPOR EQ WA_NOMEACAO-DS_NOME_TRANSPOR.

  SELECT SINGLE BUKRS
    FROM J_1BBRANCH
      INTO WA_NOMEACAO-BUKRS
     WHERE BRANCH EQ WA_NOMEACAO-WERKS.

  SELECT SINGLE NAME1
    FROM T001W
     INTO  WA_NOMEACAO-WERKS_DESC
    WHERE WERKS EQ WA_NOMEACAO-WERKS.

  SELECT SINGLE NAME1
    FROM KNA1
     INTO  WA_NOMEACAO-KUNNR_DESC
    WHERE KUNNR EQ WA_NOMEACAO-KUNNR.

  PERFORM CONVERT_IN_OUT USING 'IN' CHANGING WA_NOMEACAO-MATNR.
  SELECT SINGLE MAKTX
    FROM MAKT
     INTO  WA_NOMEACAO-MATNR_DEC
    WHERE MATNR EQ WA_NOMEACAO-MATNR
      AND SPRAS EQ SY-LANGU.

  SHIFT WA_NOMEACAO-MATNR LEFT DELETING LEADING '0'.

  LOOP AT IT_NOMEACAO ASSIGNING FIELD-SYMBOL(<NOMEACAO>)
  WHERE ID_NOMEACAO_TRAN = WA_NOMEACAO-ID_NOMEACAO_TRAN
    AND ICON EQ '@0Z@'.
    MOVE WA_NOMEACAO TO <NOMEACAO>.
  ENDLOOP.

ENDFORM.

FORM CRIA_ALV_NOMEACAO TABLES T_TABLE USING P_DIRECAO.

  DATA: DIRECAO TYPE C LENGTH 255.
  CLEAR: WA_LAYOUT, WA_VARIANTE.

  WA_LAYOUT-ZEBRA      = ABAP_TRUE.
  WA_LAYOUT-NO_ROWINS  = ABAP_TRUE.
  WA_LAYOUT-STYLEFNAME = 'FIELD_STYLE'.
  WA_LAYOUT-INFO_FNAME = 'COLOR'.
  WA_LAYOUT-SEL_MODE   = 'C'.
  WA_LAYOUT-BOX_FNAME  = 'FLAG'.
  WA_STABLE-ROW        = ABAP_TRUE.

  WA_VARIANTE-REPORT  = SY-REPID.

  DIRECAO = |TY_{ P_DIRECAO }|.

  PERFORM FCAT USING DIRECAO.

  IF WA_CONT_N IS INITIAL.

    DIRECAO = |CC_{ P_DIRECAO }|.

    CREATE OBJECT WA_CONT_N
      EXPORTING
        CONTAINER_NAME = DIRECAO.

    CREATE OBJECT WA_ALV_N
      EXPORTING
        I_SHELLSTYLE    = 0
        I_PARENT        = WA_CONT_N
        I_APPL_EVENTS   = SPACE
        I_FCAT_COMPLETE = SPACE.

    CALL METHOD WA_ALV_N->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = WA_LAYOUT
        IS_VARIANT      = WA_VARIANTE
        I_SAVE          = ABAP_TRUE
      CHANGING
        IT_OUTTAB       = T_TABLE
        IT_FIELDCATALOG = R_TABLE[].

  ELSE.
    CALL METHOD WA_ALV_N->REFRESH_TABLE_DISPLAY.
  ENDIF.

ENDFORM.

FORM FCAT USING P_FCAT.
  FREE R_TABLE.

  ASSIGN P_FCAT TO FIELD-SYMBOL(<FS_STR>).
  CREATE DATA STR TYPE (<FS_STR>).

  R_TABLE =
  CORRESPONDING LVC_T_FCAT(
  CL_SALV_DATA_DESCR=>READ_STRUCTDESCR( CAST CL_ABAP_STRUCTDESCR(
  CL_ABAP_STRUCTDESCR=>DESCRIBE_BY_DATA_REF( STR ) ) ) ).

ENDFORM.

FORM CRIA_ALV  TABLES T_TABLE USING P_DIRECAO.

  DATA: DIRECAO TYPE C LENGTH 255.
  CLEAR: WA_LAYOUT, WA_VARIANTE.

  WA_LAYOUT-ZEBRA      = ABAP_TRUE.
  WA_LAYOUT-NO_ROWINS  = ABAP_TRUE.
  WA_LAYOUT-STYLEFNAME = 'FIELD_STYLE'.
  WA_LAYOUT-INFO_FNAME = 'COLOR'.
  WA_LAYOUT-SEL_MODE   = 'B'.
  WA_LAYOUT-BOX_FNAME  = 'FLAG'.
  WA_STABLE-ROW        = ABAP_TRUE.

  WA_VARIANTE-REPORT  = SY-REPID.

  LS_STABLE-ROW = ABAP_TRUE.
  LS_STABLE-COL = ABAP_TRUE.

  DIRECAO = |TY_{ P_DIRECAO }|.

  PERFORM FCAT USING DIRECAO.
  PERFORM MOD_FCAT TABLES T_TABLE[].

  DIRECAO = |CC_{ P_DIRECAO }|.

  CASE G_TAB_STRIP-PRESSED_TAB.
    WHEN 'TAB_STRIP_FC1'. "NOMEAÇÃO
      IF WA_CONT_N IS INITIAL.

        CREATE OBJECT WA_CONT_N
          EXPORTING
            CONTAINER_NAME = DIRECAO.

        CREATE OBJECT WA_ALV_N
          EXPORTING
            I_SHELLSTYLE    = 0
            I_PARENT        = WA_CONT_N
            I_APPL_EVENTS   = SPACE
            I_FCAT_COMPLETE = SPACE.

        CREATE OBJECT OBG_EVENTS
          EXPORTING
            IO_ALV_GRID = WA_ALV_N.

        SET HANDLER: OBG_EVENTS->ON_DT_CH    FOR WA_ALV_N,
                     OBG_EVENTS->ON_TOOLBAR  FOR WA_ALV_N,
                     OBG_EVENTS->ON_HANDLE   FOR WA_ALV_N,
                     OBG_EVENTS->ON_CLICK    FOR WA_ALV_N,
                     OBG_EVENTS->ON_D_CLICK  FOR WA_ALV_N.

        CALL METHOD WA_ALV_N->SET_TABLE_FOR_FIRST_DISPLAY
          EXPORTING
            IS_LAYOUT       = WA_LAYOUT
            IS_VARIANT      = WA_VARIANTE
            I_SAVE          = 'X'
          CHANGING
            IT_OUTTAB       = T_TABLE[]
            IT_FIELDCATALOG = R_TABLE[].

        CALL METHOD WA_ALV_N->REGISTER_EDIT_EVENT
          EXPORTING
            I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

        CALL METHOD WA_ALV_N->REGISTER_EDIT_EVENT
          EXPORTING
            I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.

        CALL METHOD WA_ALV_N->SET_READY_FOR_INPUT
          EXPORTING
            I_READY_FOR_INPUT = 1.
      ELSE.

        CALL METHOD WA_ALV_N->REFRESH_TABLE_DISPLAY
          EXPORTING
            IS_STABLE = LS_STABLE
          EXCEPTIONS
            FINISHED  = 1
            OTHERS    = 2.
      ENDIF.
    WHEN 'TAB_STRIP_FC2'. "RE
      IF WA_CONT_RE IS INITIAL.

        CREATE OBJECT WA_CONT_RE
          EXPORTING
            CONTAINER_NAME = DIRECAO.

        CREATE OBJECT WA_ALV_RE
          EXPORTING
            I_SHELLSTYLE    = 0
            I_PARENT        = WA_CONT_RE
            I_APPL_EVENTS   = SPACE
            I_FCAT_COMPLETE = SPACE.

        CREATE OBJECT OBG_EVENTS
          EXPORTING
            IO_ALV_GRID = WA_ALV_RE.

        SET HANDLER: OBG_EVENTS->ON_DT_CH    FOR WA_ALV_RE,
                     OBG_EVENTS->ON_TOOLBAR  FOR WA_ALV_RE,
                     OBG_EVENTS->ON_HANDLE   FOR WA_ALV_RE,
                     OBG_EVENTS->ON_CLICK    FOR WA_ALV_RE,
                     OBG_EVENTS->ON_D_CLICK  FOR WA_ALV_RE.

        CALL METHOD WA_ALV_RE->SET_TABLE_FOR_FIRST_DISPLAY
          EXPORTING
            IS_LAYOUT       = WA_LAYOUT
            IS_VARIANT      = WA_VARIANTE
            I_SAVE          = 'X'
          CHANGING
            IT_OUTTAB       = T_TABLE[]
            IT_FIELDCATALOG = R_TABLE[].

        CALL METHOD WA_ALV_RE->REGISTER_EDIT_EVENT
          EXPORTING
            I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

        CALL METHOD WA_ALV_RE->REGISTER_EDIT_EVENT
          EXPORTING
            I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.

        CALL METHOD WA_ALV_RE->SET_READY_FOR_INPUT
          EXPORTING
            I_READY_FOR_INPUT = 1.
      ELSE.

        CALL METHOD WA_ALV_RE->REFRESH_TABLE_DISPLAY
          EXPORTING
            IS_STABLE = LS_STABLE
          EXCEPTIONS
            FINISHED  = 1
            OTHERS    = 2.
      ENDIF.
    WHEN 'TAB_STRIP_FC3'. "DDE
      IF WA_CONT_DDE IS INITIAL.

        CREATE OBJECT WA_CONT_DDE
          EXPORTING
            CONTAINER_NAME = DIRECAO.

        CREATE OBJECT WA_ALV_DDE
          EXPORTING
            I_SHELLSTYLE    = 0
            I_PARENT        = WA_CONT_DDE
            I_APPL_EVENTS   = SPACE
            I_FCAT_COMPLETE = SPACE.

        CREATE OBJECT OBG_EVENTS
          EXPORTING
            IO_ALV_GRID = WA_ALV_DDE.

        SET HANDLER: OBG_EVENTS->ON_DT_CH    FOR WA_ALV_DDE,
                     OBG_EVENTS->ON_TOOLBAR  FOR WA_ALV_DDE,
                     OBG_EVENTS->ON_HANDLE   FOR WA_ALV_DDE,
                     OBG_EVENTS->ON_CLICK    FOR WA_ALV_DDE,
                     OBG_EVENTS->ON_D_CLICK  FOR WA_ALV_DDE.

        CALL METHOD WA_ALV_DDE->SET_TABLE_FOR_FIRST_DISPLAY
          EXPORTING
            IS_LAYOUT       = WA_LAYOUT
            IS_VARIANT      = WA_VARIANTE
            I_SAVE          = 'X'
          CHANGING
            IT_OUTTAB       = T_TABLE[]
            IT_FIELDCATALOG = R_TABLE[].

        CALL METHOD WA_ALV_DDE->REGISTER_EDIT_EVENT
          EXPORTING
            I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

        CALL METHOD WA_ALV_DDE->REGISTER_EDIT_EVENT
          EXPORTING
            I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.

        CALL METHOD WA_ALV_DDE->SET_READY_FOR_INPUT
          EXPORTING
            I_READY_FOR_INPUT = 1.
      ELSE.

        CALL METHOD WA_ALV_DDE->REFRESH_TABLE_DISPLAY
          EXPORTING
            IS_STABLE = LS_STABLE
          EXCEPTIONS
            FINISHED  = 1
            OTHERS    = 2.
      ENDIF.

      IF SY-UCOMM EQ 'VINC_RE'.

        IF WA_CONT_APL IS INITIAL.
          CREATE OBJECT WA_CONT_APL
            EXPORTING
              CONTAINER_NAME = DIRECAO.

          CREATE OBJECT WA_ALV_APL
            EXPORTING
              I_SHELLSTYLE    = 0
              I_PARENT        = WA_CONT_APL
              I_APPL_EVENTS   = SPACE
              I_FCAT_COMPLETE = SPACE.

          CREATE OBJECT OBG_EVENTS
            EXPORTING
              IO_ALV_GRID = WA_ALV_APL.

          SET HANDLER: OBG_EVENTS->ON_DT_CH    FOR WA_ALV_APL,
                       OBG_EVENTS->ON_DT_CH_F  FOR WA_ALV_APL,
                       OBG_EVENTS->ON_TOOLBAR  FOR WA_ALV_APL,
                       OBG_EVENTS->ON_HANDLE   FOR WA_ALV_APL,
                       OBG_EVENTS->ON_CLICK    FOR WA_ALV_APL,
                       OBG_EVENTS->ON_D_CLICK  FOR WA_ALV_APL.

          CALL METHOD WA_ALV_APL->SET_TABLE_FOR_FIRST_DISPLAY
            EXPORTING
              IS_LAYOUT       = WA_LAYOUT
              IS_VARIANT      = WA_VARIANTE
              I_SAVE          = 'X'
            CHANGING
              IT_OUTTAB       = T_TABLE[]
              IT_FIELDCATALOG = R_TABLE[].

          CALL METHOD WA_ALV_APL->REGISTER_EDIT_EVENT
            EXPORTING
              I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

          CALL METHOD WA_ALV_APL->REGISTER_EDIT_EVENT
            EXPORTING
              I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.

          CALL METHOD WA_ALV_APL->SET_READY_FOR_INPUT
            EXPORTING
              I_READY_FOR_INPUT = 1.
        ELSE.
          CALL METHOD WA_ALV_APL->REFRESH_TABLE_DISPLAY
            EXPORTING
              IS_STABLE = LS_STABLE
            EXCEPTIONS
              FINISHED  = 1
              OTHERS    = 2.
        ENDIF.
      ENDIF.

    WHEN 'TAB_STRIP_FC4'. "BL
      IF WA_CONT_BL IS INITIAL.

        CREATE OBJECT WA_CONT_BL
          EXPORTING
            CONTAINER_NAME = DIRECAO.

        CREATE OBJECT WA_ALV_BL
          EXPORTING
            I_SHELLSTYLE    = 0
            I_PARENT        = WA_CONT_BL
            I_APPL_EVENTS   = SPACE
            I_FCAT_COMPLETE = SPACE.

        CREATE OBJECT OBG_EVENTS
          EXPORTING
            IO_ALV_GRID = WA_ALV_BL.

        SET HANDLER: OBG_EVENTS->ON_DT_CH    FOR WA_ALV_BL,
                     OBG_EVENTS->ON_TOOLBAR  FOR WA_ALV_BL,
                     OBG_EVENTS->ON_HANDLE   FOR WA_ALV_BL,
                     OBG_EVENTS->ON_CLICK    FOR WA_ALV_BL,
                     OBG_EVENTS->ON_D_CLICK  FOR WA_ALV_BL.

        CALL METHOD WA_ALV_BL->SET_TABLE_FOR_FIRST_DISPLAY
          EXPORTING
            IS_LAYOUT       = WA_LAYOUT
            IS_VARIANT      = WA_VARIANTE
            I_SAVE          = 'X'
          CHANGING
            IT_OUTTAB       = T_TABLE[]
            IT_FIELDCATALOG = R_TABLE[].

        CALL METHOD WA_ALV_BL->REGISTER_EDIT_EVENT
          EXPORTING
            I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

        CALL METHOD WA_ALV_BL->REGISTER_EDIT_EVENT
          EXPORTING
            I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.

        CALL METHOD WA_ALV_BL->SET_READY_FOR_INPUT
          EXPORTING
            I_READY_FOR_INPUT = 1.
      ELSE.

        CALL METHOD WA_ALV_BL->REFRESH_TABLE_DISPLAY
          EXPORTING
            IS_STABLE = LS_STABLE
          EXCEPTIONS
            FINISHED  = 1
            OTHERS    = 2.
      ENDIF.
  ENDCASE.
ENDFORM.

FORM ADD_LINHA_N.

  DATA: SEQ TYPE N LENGTH 10.

  CASE G_TAB_STRIP-PRESSED_TAB.
    WHEN 'TAB_STRIP_FC1'. "NOMEAÇÃO

      MOVE-CORRESPONDING WA_NOMEACAO TO IT_NOMEACAO.

      SEQ = LINES( IT_NOMEACAO[] ).
      ADD 9000000000 TO SEQ.
      ADD 1 TO SEQ.
      MOVE SEQ TO IT_NOMEACAO-ID_NOMEACAO_TRAN.
      MOVE SEQ TO IT_NOMEACAO-ID_NOME_TRAN_REG.

      TRANSLATE P_NOME TO UPPER CASE.
      MOVE P_NOME TO IT_TRANSPORTE-DS_NOME_TRANSPOR.
      MOVE '@17@' TO IT_NOMEACAO-ICON.
      MOVE 'C100' TO IT_NOMEACAO-COLOR.
      IT_NOMEACAO-FLAG = ABAP_TRUE.

      APPEND IT_NOMEACAO.

      PERFORM MOD_FCAT TABLES IT_NOMEACAO[].

      CLEAR: IT_NOMEACAO, WA_NOMEACAO.

      CALL METHOD WA_ALV_N->REFRESH_TABLE_DISPLAY.
      CAMPOS = ABAP_TRUE.

    WHEN 'TAB_STRIP_FC2'. "RE

      IF TG_MSG_RET[] IS NOT INITIAL.
        SY-UCOMM = ''.
        EXIT.
      ENDIF.

      PERFORM CONVERT_IN_OUT USING 'IN' CHANGING WA_RE-ID_NOMEACAO_TRAN.
      PERFORM CONVERT_IN_OUT USING 'IN' CHANGING WA_RE-ID_EXPORTADOR.

      WA_RE-ID_NOMEACAO_TRAN = WA_NOMEACAO-ID_NOMEACAO_TRAN.
      WA_RE-ID_EXPORTADOR    = WA_NOMEACAO-WERKS.
      WA_RE-ID_IMPORTADOR    = WA_NOMEACAO-KUNNR.
      WA_RE-ID_REGISTRO_VEND = WA_NOMEACAO-NRO_SOL_OV.
      WA_RE-FLAG = ABAP_TRUE. " Marca se houve Auteração

      PERFORM CONVERT_IN_OUT USING 'IN' CHANGING WA_RE-ID_IMPORTADOR.

      SELECT SINGLE MATNR
        FROM ZSDT0051
        INTO WA_RE-CD_MATERIAL
        WHERE NRO_SOL_OV EQ WA_NOMEACAO-NRO_SOL_OV.

      CLEAR: IT_RE-ID_REGISTRO_EXPO, WA_RE-ID_REGISTRO_EXPO.

      MOVE-CORRESPONDING WA_RE TO IT_RE.

      APPEND IT_RE.

      PERFORM MOD_FCAT TABLES IT_RE[].

      CLEAR: IT_RE, WA_RE.

      CALL METHOD WA_ALV_RE->REFRESH_TABLE_DISPLAY.
      CAMPOS = ABAP_TRUE.

    WHEN 'TAB_STRIP_FC3'. "DDE

      IF NOT LINE_EXISTS( IT_APL[ CHECK = ABAP_TRUE ] ).
        MESSAGE 'É Obrigatório a vinculação do RE!' TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      DATA(VAR_APL) = REDUCE I( INIT X = 0 FOR WL IN  IT_APL
                        WHERE ( CHECK = ABAP_TRUE )
                                NEXT X = X + WL-NR_QTDE_ ).
      DATA(VAR_DDE) = REDUCE I( INIT X = 0 FOR WE IN  IT_DDE
                        WHERE ( ID_NOMEACAO_TRAN = WA_DDE-ID_NOMEACAO_TRAN )
                                NEXT X = X + WE-NR_QTDE ).

      IF ( VAR_APL + VAR_DDE ) GT WA_NOMEACAO-NR_QTDE_NOMEADA.
        MESSAGE 'Quantidade Vinculada Maior que a Nomeação!' TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      LOOP AT IT_APL WHERE CHECK EQ ABAP_TRUE.
        MOVE-CORRESPONDING WA_DDE TO IT_DDE.

        MOVE: WA_NOMEACAO-ID_NOMEACAO_TRAN TO IT_DDE-ID_NOMEACAO_TRAN,
              IT_DDE-ID_NOMEACAO_TRAN      TO WA_DDE-ID_NOMEACAO_TRAN.

        IT_DDE_AP-ID_REGISTRO_EXPO = IT_APL-ID_REGISTRO_EXPO.
        IT_DDE-NR_REGISTRO_EXPO = IT_APL-NR_REGISTRO_EXPO.
        IT_DDE-NR_QTDE = IT_APL-NR_QTDE_.
        IT_DDE-NR_VALOR = IT_APL-NR_VALOR_TOTAL. "Valor Total
        IT_DDE-FLAG = ABAP_TRUE. " Marca se houve Auteração
*        TRY.
*            IT_DDE_AP-ID_REGISTRO_EXPO = IT_RE[ NR_REGISTRO_EXPO = WA_DDE-NR_REGISTRO_EXPO ]-ID_REGISTRO_EXPO.
*          CATCH CX_SY_ITAB_LINE_NOT_FOUND.
*            CLEAR IT_DDE_AP-ID_REGISTRO_EXPO.
*        ENDTRY.

        ADD IT_APL-NR_QTDE_ TO DDE_NR_QTDE.
        ADD IT_APL-NR_VALOR_TOTAL TO DDE_NR_VALOR.
        APPEND: IT_DDE, IT_DDE_AP.
      ENDLOOP.

      CONVERT = DDE_NR_QTDE.
      WRITE CONVERT TO DDE_NR_QTDE_C.
      CONDENSE DDE_NR_QTDE_C NO-GAPS.

      PERFORM MOD_FCAT TABLES IT_DDE[].

      CLEAR: IT_DDE, IT_DDE_AP, WA_DDE.

      CALL METHOD WA_ALV_DDE->REFRESH_TABLE_DISPLAY.
      CAMPOS = ABAP_TRUE.

    WHEN 'TAB_STRIP_FC4'. "BL
      IF WA_BL-NR_CONHEC IS INITIAL
      OR WA_BL-NR_QTDE IS INITIAL
      OR WA_BL-DT_DATA IS INITIAL.
        MESSAGE |Todos os Campos são Obrigatórios!| TYPE 'S' DISPLAY LIKE 'E'.
        SY-UCOMM = 'NEW'.
        EXIT.
      ENDIF.

      DATA ID_NOME_TRAN_15 TYPE C LENGTH 15.
      ID_NOME_TRAN_15 = WA_NOMEACAO-ID_NOMEACAO_TRAN.
      PERFORM CONVERT_IN_OUT  USING 'IN' CHANGING ID_NOME_TRAN_15.

      WA_BL-ID_NOMEACAO_TRAN = WA_NOMEACAO-ID_NOMEACAO_TRAN.
      WA_BL-DS_TIPO = 'B/L'.
      WA_BL-SG_PAIS_DESTINO = WA_RE-ID_PAIS_DESTINO.
      WA_BL-FLAG = ABAP_TRUE. " Marca se houve Auteração

      SELECT SINGLE LANDX
        FROM T005T
        INTO WA_BL-DC_PAIS_DESTINO
        WHERE LAND1 EQ WA_BL-SG_PAIS_DESTINO
        AND SPRAS EQ SY-LANGU.

      MOVE-CORRESPONDING WA_BL TO IT_BL.

      APPEND IT_BL.

      PERFORM MOD_FCAT TABLES IT_BL[].

      CLEAR: WA_BL, IT_BL.

      CALL METHOD WA_ALV_BL->REFRESH_TABLE_DISPLAY.

      CAMPOS = ABAP_TRUE.
  ENDCASE.
  PERFORM SET_ERROS.
  SALVAR = ABAP_TRUE.
  LEAVE TO SCREEN 0100.
ENDFORM.

FORM EXC_LINHA_N .

  DATA: IT_DEL  TYPE TABLE OF ZNOM_CAD_TRANSPT WITH HEADER LINE,
        VAR_SEQ TYPE N LENGTH 15,
        CONT    TYPE SY-SUBRC,
        CONT_   TYPE SY-SUBRC.

  CASE G_TAB_STRIP-PRESSED_TAB.
    WHEN 'TAB_STRIP_FC1'. "NOMEAÇÃO

      FREE IT_SEL_ROWS.
      CALL METHOD WA_ALV_N->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SEL_ROWS.

      CHECK NOT IT_SEL_ROWS IS INITIAL.

      LOOP AT IT_SEL_ROWS INTO WA_SEL_ROWS.
        LOOP AT IT_NOMEACAO ASSIGNING <NOMEACAO>.
          IF  SY-TABIX EQ WA_SEL_ROWS-INDEX.

            PERFORM EN_DE_QUERE USING <NOMEACAO>-ID_NOMEACAO_TRAN 'EN' CHANGING SY-SUBRC.
            CHECK SY-SUBRC IS INITIAL.

            CHECK <NOMEACAO>-ID_NOMEACAO_TRAN IS NOT INITIAL.

            CLEAR VAR_SUBRC.
            PERFORM SELECT_DEL USING 'ZNOM_PROG_REME'  CHANGING CONT.
            PERFORM SELECT_DEL USING 'ZDOC_EXP'        CHANGING CONT.
            PERFORM SELECT_DEL USING 'ZDDE'            CHANGING CONT.
            PERFORM SELECT_DEL USING 'ZNOM_CONHEC'     CHANGING CONT.
            PERFORM SELECT_DEL_X USING 'ZREG_EXPORTACAO' CHANGING CONT.

            IF CONT IS INITIAL.
              <NOMEACAO>-ICON = '@18@'.
              <NOMEACAO>-FLAG = ABAP_TRUE.
              <NOMEACAO>-IN_STATUS_COMEX = ABAP_TRUE.
              MOVE-CORRESPONDING <NOMEACAO> TO WA_NOMEACAO.
            ELSE.
              MESSAGE 'Nomeação possui Documentos subsequentes Ativos!!' TYPE 'S' DISPLAY LIKE 'E'.
              EXIT.
            ENDIF.

          ENDIF.
        ENDLOOP.
      ENDLOOP.

      CALL METHOD WA_ALV_N->REFRESH_TABLE_DISPLAY.

    WHEN 'TAB_STRIP_FC2'. "RE

      FREE IT_SEL_ROWS.
      CALL METHOD WA_ALV_RE->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SEL_ROWS.

      CHECK NOT IT_SEL_ROWS IS INITIAL.

      LOOP AT IT_SEL_ROWS INTO WA_SEL_ROWS.
        LOOP AT IT_RE ASSIGNING <RE> WHERE DUE IS INITIAL.
          IF  SY-TABIX EQ WA_SEL_ROWS-INDEX.

            PERFORM EN_DE_QUERE USING <RE>-ID_NOMEACAO_TRAN 'EN' CHANGING SY-SUBRC.
            CHECK SY-SUBRC IS INITIAL.

            CLEAR VAR_SUBRC.
            MOVE-CORRESPONDING <RE> TO WA_RE.
            PERFORM SELECT_DEL USING 'ZDDE_APLICACAO' CHANGING CONT.
            IF NOT CONT IS INITIAL.
              PERFORM SELECT_DEL USING 'ZNOM_PROG_REME' CHANGING CONT_.
              PERFORM SELECT_DEL USING 'ZDOC_EXP'       CHANGING CONT_.
              IF NOT CONT_ IS INITIAL.
                <RE>-COLOR = 'C700'.
                <RE>-IN_STATUS_COMEX = ABAP_TRUE.
                <RE>-FLAG = ABAP_TRUE.
                MOVE-CORRESPONDING <RE> TO WA_RE.
              ELSE.
                MESSAGE |RE está vinculado a Nota de Exportação!| TYPE 'S' DISPLAY LIKE 'E'.
                EXIT.
              ENDIF.
            ELSE.
              MESSAGE 'RE está Vinculado a DDE!' TYPE 'S' DISPLAY LIKE 'E'.
              EXIT.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDLOOP.

      CALL METHOD WA_ALV_RE->REFRESH_TABLE_DISPLAY.

    WHEN 'TAB_STRIP_FC3'. "DDE

      FREE IT_SEL_ROWS.
      CALL METHOD WA_ALV_DDE->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SEL_ROWS.

      CHECK NOT IT_SEL_ROWS IS INITIAL.

      LOOP AT IT_SEL_ROWS INTO WA_SEL_ROWS.
        LOOP AT IT_DDE ASSIGNING <DDE>.
          IF  SY-TABIX EQ WA_SEL_ROWS-INDEX.

            PERFORM EN_DE_QUERE USING <DDE>-ID_NOMEACAO_TRAN 'EN' CHANGING SY-SUBRC.
            CHECK SY-SUBRC IS INITIAL.

            CLEAR VAR_SUBRC.

            PERFORM SELECT_DEL USING 'ZDOC_EXP' CHANGING CONT.

            IF NOT CONT IS INITIAL.
              DATA(LINES1) = REDUCE I( INIT X = 0 FOR WA IN IT_DDE
                                      WHERE ( ID_DDE = <DDE>-ID_DDE )
                                      NEXT X = X + 1 ).

              IF LINES1 EQ 1.
                <DDE>-IN_STATUS_COMEX = ABAP_TRUE.
                MOVE-CORRESPONDING <DDE> TO WA_DDE.
              ENDIF.

              <DDE>-COLOR = 'C700'.
              <DDE>-FLAG = ABAP_TRUE.

              CLEAR: <DDE>-NR_QTDE, <DDE>-NR_VALOR.

              IF LINE_EXISTS( IT_RE[ NR_REGISTRO_EXPO = <DDE>-NR_REGISTRO_EXPO
                                     ID_NOMEACAO_TRAN+5(10) = <DDE>-ID_NOMEACAO_TRAN ] ).
                APPEND VALUE
                #(
                        ID_DDE = <DDE>-ID_DDE
                        ID_REGISTRO_EXPO =
                        IT_RE[ NR_REGISTRO_EXPO = <DDE>-NR_REGISTRO_EXPO
                               ID_NOMEACAO_TRAN+5(10) = <DDE>-ID_NOMEACAO_TRAN
                             ]-ID_REGISTRO_EXPO
                 ) TO IT_DDE_DEL.
              ENDIF.

            ELSE.
              MESSAGE 'RE está Vinculado ao Doc de Exportacao!' TYPE 'S' DISPLAY LIKE 'E'.
              EXIT.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDLOOP.

      CALL METHOD WA_ALV_DDE->REFRESH_TABLE_DISPLAY.

    WHEN 'TAB_STRIP_FC4'. "BL

      FREE IT_SEL_ROWS.
      CALL METHOD WA_ALV_BL->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SEL_ROWS.

      CHECK NOT IT_SEL_ROWS IS INITIAL.

      LOOP AT IT_SEL_ROWS INTO WA_SEL_ROWS.
        LOOP AT IT_BL ASSIGNING FIELD-SYMBOL(<BL>).
          IF  SY-TABIX EQ WA_SEL_ROWS-INDEX.
            PERFORM EN_DE_QUERE USING <BL>-ID_NOMEACAO_TRAN 'EN' CHANGING SY-SUBRC.
            CHECK SY-SUBRC IS INITIAL.
            <BL>-COLOR = 'C700'.
            <BL>-IN_STATUS_COMEX = ABAP_TRUE.
            <BL>-FLAG = ABAP_TRUE.
            MOVE-CORRESPONDING <BL> TO WA_BL.
          ENDIF.
        ENDLOOP.
      ENDLOOP.

      CALL METHOD WA_ALV_BL->REFRESH_TABLE_DISPLAY.
  ENDCASE.

  PERFORM SET_ERROS.
  CAMPOS = ABAP_TRUE.
  SALVAR = ABAP_TRUE.
  LEAVE TO SCREEN 0100.

ENDFORM.

FORM MOD_FCAT TABLES IT_TABLE.

  DATA: CONT    TYPE N LENGTH 2,
        CONVERT TYPE C LENGTH 30,
        CAMPO   TYPE CHAR20.

  FIELD-SYMBOLS:
  <FS_CAMPO> TYPE ANY.

  DATA(CONT1) = LINES( IT_TABLE[] ).

  LOOP AT R_TABLE ASSIGNING FIELD-SYMBOL(<FIELD>).

    <FIELD>-COL_OPT = ABAP_TRUE.

    CASE <FIELD>-FIELDNAME.
      WHEN 'CHECK'.             <FIELD>-CHECKBOX = ABAP_TRUE. <FIELD>-EDIT = ABAP_TRUE.
*      WHEN 'NR_QTDE'.           <FIELD>-NO_OUT = ABAP_TRUE. "OCULTA A COLUNA
      WHEN 'BUKRS'.             <FIELD>-NO_OUT = ABAP_TRUE. "OCULTA A COLUNA
      WHEN 'ID_NOME_TRAN_REG'.  <FIELD>-NO_OUT = ABAP_TRUE. "OCULTA A COLUNA
      WHEN 'IN_STATUS_COMEX'.   <FIELD>-NO_OUT = ABAP_TRUE. "OCULTA A COLUNA
      WHEN 'WERKS_DESC'.        <FIELD>-NO_OUT = ABAP_TRUE. "OCULTA A COLUNA
      WHEN 'KUNNR_DESC'.        <FIELD>-NO_OUT = ABAP_TRUE. "OCULTA A COLUNA
      WHEN 'MATNR_DEC'.         <FIELD>-NO_OUT = ABAP_TRUE. "OCULTA A COLUNA
      WHEN 'ID_EXPORTADOR_DESC'.<FIELD>-NO_OUT = ABAP_TRUE. "OCULTA A COLUNA
      WHEN 'WERKS_DESC'.        <FIELD>-NO_OUT = ABAP_TRUE. "OCULTA A COLUNA
      WHEN 'ID_IMPORTADOR_DESC'.<FIELD>-NO_OUT = ABAP_TRUE. "OCULTA A COLUNA
      WHEN 'LAND1'             .<FIELD>-NO_OUT = ABAP_TRUE. "OCULTA A COLUNA
      WHEN 'ID_DDE'.            <FIELD>-SCRTEXT_L = 'Identificador de DDE'. <FIELD>-NO_OUT = ABAP_TRUE.
      WHEN 'ID_REGISTRO_EXPO'.  <FIELD>-SCRTEXT_L = 'ID RE'. <FIELD>-NO_OUT = ABAP_TRUE.
      WHEN 'BOOKING'.           <FIELD>-SCRTEXT_L = 'Nr. Booking'.
      WHEN 'BUKRS'.             <FIELD>-SCRTEXT_L = 'Empresa'.
      WHEN 'CD_MATERIAL'.       <FIELD>-SCRTEXT_L = 'Cod. Material'. <FIELD>-NO_ZERO = ABAP_TRUE.
      WHEN 'DS_NOME_TRANSPOR'.  <FIELD>-SCRTEXT_L = 'Descrição transportador'.
      WHEN 'DS_PORTO'.          <FIELD>-SCRTEXT_L = 'Porto'.
      WHEN 'DS_TERMINAL'.       <FIELD>-SCRTEXT_L = 'Descrição terminal'.
      WHEN 'DS_TIPO'.           <FIELD>-SCRTEXT_L = 'Tipo do Conhecimento'.
      WHEN 'DT_AVERBACAO'.      <FIELD>-SCRTEXT_L = 'Data Averbação DDE'.
      WHEN 'DT_DATA'.           <FIELD>-SCRTEXT_L = 'Data do Conhecimento'.
      WHEN 'DT_DDE'.            <FIELD>-SCRTEXT_L = 'Data DDE'.
      WHEN 'DT_REGISTRO_EXPO'.  <FIELD>-SCRTEXT_L = 'Data do registro de exportação'.
      WHEN 'ID_CONHEC'.         <FIELD>-SCRTEXT_L = 'Identificador Conhecimento'.
      WHEN 'ID_EXPORTADOR'.     <FIELD>-SCRTEXT_L = 'Exportador'.
      WHEN 'ID_IMPORTADOR'.     <FIELD>-SCRTEXT_L = 'Importador'.
      WHEN 'ID_NOMEACAO_TRAN'.  <FIELD>-SCRTEXT_L = 'ID Nomeação'. <FIELD>-NO_ZERO = ABAP_TRUE.
      WHEN 'ID_PAIS_DESTINO'.   <FIELD>-SCRTEXT_L = 'País'.
      WHEN 'ID_REGISTRO_VEND'.  <FIELD>-SCRTEXT_L = 'Nro. Sol. Venda'. <FIELD>-NO_ZERO = ABAP_TRUE.
      WHEN 'ID_TRANSPORTE'.     <FIELD>-SCRTEXT_L = 'ID Transporte'.
      WHEN 'IN_PERFORMANCE'.    <FIELD>-SCRTEXT_L = 'RE é Performance'.
      WHEN 'IN_STATUS_COMEX'.   <FIELD>-SCRTEXT_L = 'Desativado'.
      WHEN 'NR_ANO'.            <FIELD>-SCRTEXT_L = 'Ano'.
      WHEN 'NR_CONHEC'.         <FIELD>-SCRTEXT_L = 'Nr. do Conhecimento'.
      WHEN 'NR_DDE'.            <FIELD>-SCRTEXT_L = 'Número da DDE'.
      WHEN 'NR_MES'.            <FIELD>-SCRTEXT_L = 'Mês'.
      WHEN 'NR_QTDE'.           <FIELD>-SCRTEXT_L = 'Quantidade'.
      WHEN 'NR_QTDE_'.          <FIELD>-SCRTEXT_L = 'Quantidade'.
      WHEN 'NR_QTDE_NOMEADA'.   <FIELD>-SCRTEXT_L = 'Quantidade Nomeada'.
      WHEN 'NR_REGISTRO_EXPO'.  <FIELD>-SCRTEXT_L = 'Nr. RE'.
      WHEN 'NR_VALOR'.          <FIELD>-SCRTEXT_L = 'Valor total operação'.
      WHEN 'NR_VALOR_TM'.       <FIELD>-SCRTEXT_L = 'Valor por tonelada do RE'.
      WHEN 'NR_VALOR_TOTAL'.    <FIELD>-SCRTEXT_L = 'Valor total do RE'.
      WHEN 'NR_VIAGEM'.         <FIELD>-SCRTEXT_L = 'Quantidade de viagens ao ano'.
      WHEN 'NRO_SOL_OV'.        <FIELD>-SCRTEXT_L = 'Nr. Solicitação OV'.
      WHEN 'SG_PAIS_DESTINO'.   <FIELD>-SCRTEXT_L = 'Sigla do Pais de Destino'.
      WHEN 'WERKS'.             <FIELD>-SCRTEXT_L = 'Centro'.
    ENDCASE.

    <FIELD>-REPTEXT = <FIELD>-SCRTEXT_S = <FIELD>-SCRTEXT_M = <FIELD>-SCRTEXT_L.

  ENDLOOP.

ENDFORM.

MODULE MODIFY_SCREEN OUTPUT.

  LOOP AT SCREEN.

    IF SCREEN-NAME EQ 'VINC_RE' AND C_NEW NE ABAP_TRUE.
      SCREEN-INPUT = '0'.
      MODIFY SCREEN.
    ENDIF.

    LOOP AT T_TELA.
      CASE T_TELA-ABA.
        WHEN 'TAB_STRIP_FC1'.
          IF SCREEN-NAME CS 'WA_NOMEACAO-'.
            CASE SCREEN-NAME.
              WHEN 'WA_NOMEACAO-KUNNR'
                OR 'WA_NOMEACAO-BSTKD'
                OR 'WA_NOMEACAO-MATNR'.
              WHEN OTHERS.
                IF T_TELA-STS EQ ABAP_TRUE.
                  SCREEN-INPUT = '1'.
                ELSE.
                  SCREEN-INPUT = '0'.
                ENDIF.
                MODIFY SCREEN.
            ENDCASE.
          ENDIF.
        WHEN 'TAB_STRIP_FC2'.
          IF SCREEN-NAME CS 'WA_RE-'
       AND ( SCREEN-NAME NE 'WA_RE-ID_IMPORTADOR' AND
             SCREEN-NAME NE 'WA_RE-NR_VALOR_TM'
            ).
            IF T_TELA-STS EQ ABAP_TRUE.
              SCREEN-INPUT = '1'.
            ENDIF.
            MODIFY SCREEN.
          ENDIF.
        WHEN 'TAB_STRIP_FC3'.
          IF SCREEN-NAME CS 'WA_DDE-'
       AND ( SCREEN-NAME NE 'WA_DDE-NR_QTDE' AND
             SCREEN-NAME NE 'WA_DDE-NR_VALOR'
            ).
            IF T_TELA-STS EQ ABAP_TRUE.
              SCREEN-INPUT = '1'.
            ENDIF.
            MODIFY SCREEN.
          ENDIF.
        WHEN 'TAB_STRIP_FC4'.
          IF SCREEN-NAME CS 'WA_BL-'.
            IF T_TELA-STS EQ ABAP_TRUE.
              SCREEN-INPUT = '1'.
            ENDIF.
            MODIFY SCREEN.
          ENDIF.
      ENDCASE.

      IF C_NEW EQ ABAP_TRUE.
        IF SCREEN-NAME EQ 'ADD'.
          SCREEN-INPUT = '1'.
          MODIFY SCREEN.
        ENDIF.
      ELSE.
        IF SCREEN-NAME EQ 'ADD'.
          SCREEN-INPUT = '0'.
          MODIFY SCREEN.
        ENDIF.
      ENDIF.

      CASE SY-UCOMM.
        WHEN 'NEW'.
          IF SCREEN-NAME EQ 'ADD'.
            SCREEN-INPUT = '1'.
            MODIFY SCREEN.
          ENDIF.
        WHEN 'ADD'.
          IF SCREEN-NAME EQ 'ADD'.
            SCREEN-INPUT = '0'.
            MODIFY SCREEN.
          ENDIF.
          C_NEW = ABAP_FALSE.
      ENDCASE.

    ENDLOOP.

    IF CAMPOS EQ ABAP_TRUE.
      IF SCREEN-NAME NS 'TAB_STRIP'.
        IF SCREEN-NAME NE 'NEW'.
          SCREEN-INPUT = '0'.
          MODIFY SCREEN.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.

ENDMODULE.

FORM EDI_LINHA_N .

  DATA: IT_SELECTED_ROWS TYPE LVC_T_ROW,
        WA_SELECTED_ROWS TYPE LVC_S_ROW,
        LS_EDIT          TYPE LVC_S_STYL,
        ROW_EDIT         TYPE LVC_S_STYL,
        LT_EDIT          TYPE LVC_T_STYL,
        ID_NOMEACAO      TYPE ZNOM_TRANSPORTE-ID_NOMEACAO_TRAN.

  CASE G_TAB_STRIP-PRESSED_TAB.
    WHEN 'TAB_STRIP_FC1'. "NOMEAÇÃO

      FREE IT_SELECTED_ROWS.
      CALL METHOD WA_ALV_N->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SELECTED_ROWS.
      CHECK NOT IT_SELECTED_ROWS IS INITIAL.

      IF LINES( IT_SELECTED_ROWS[] ) EQ 1.
        WA_SELECTED_ROWS = IT_SELECTED_ROWS[ 1 ].

        IF IT_NOMEACAO[ WA_SELECTED_ROWS-INDEX ]-IN_STATUS_COMEX IS NOT INITIAL.
          CLEAR WA_NOMEACAO.
          MESSAGE |Não é possivel Editar Linha Excluida!| TYPE 'S' DISPLAY LIKE 'E'.
          EXIT.
        ENDIF.

        LOOP AT IT_NOMEACAO ASSIGNING FIELD-SYMBOL(<NOMEACAO>) WHERE ICON NE '@18@'.
          IF SY-TABIX EQ WA_SELECTED_ROWS-INDEX.

            PERFORM EN_DE_QUERE USING <NOMEACAO>-ID_NOMEACAO_TRAN 'EN' CHANGING SY-SUBRC.
            CHECK SY-SUBRC IS INITIAL.

            SELECT COUNT(*)
              FROM ZREG_EXPORTACAO
              WHERE ID_NOMEACAO_TRAN = <NOMEACAO>-ID_NOME_TRAN_REG.

            IF NOT SY-SUBRC IS INITIAL.

              PERFORM CONTROLE_TELA USING G_TAB_STRIP-PRESSED_TAB ABAP_TRUE.

              CLEAR WA_NOMEACAO.

              <NOMEACAO>-ICON = '@0Z@'.
              <NOMEACAO>-COLOR = 'C700'.
              <NOMEACAO>-FLAG = ABAP_TRUE. " Marca se houve Auteração

              MOVE-CORRESPONDING <NOMEACAO> TO WA_NOMEACAO.

              SELECT SINGLE *
               FROM ZSDT0051
               INTO @DATA(WA_ZSDT0051)
               WHERE NRO_SOL_OV EQ @WA_NOMEACAO-NRO_SOL_OV.

*              SELECT SINGLE INSTRUCAO
*                FROM ZSDT0045
*                INTO WA_NOMEACAO-INSTRUCAO
*                WHERE OBJEK EQ WA_NOMEACAO-NRO_SOL_OV.

              IF SY-SUBRC IS INITIAL.
                MOVE-CORRESPONDING WA_ZSDT0051 TO WA_NOMEACAO.
              ENDIF.

              SELECT SINGLE BUKRS
                FROM J_1BBRANCH
                  INTO WA_NOMEACAO-BUKRS
                 WHERE BRANCH EQ WA_NOMEACAO-WERKS.

              SELECT SINGLE NAME1
                FROM T001W
                 INTO  WA_NOMEACAO-WERKS_DESC
                WHERE WERKS EQ WA_NOMEACAO-WERKS.

              SELECT SINGLE NAME1
                FROM KNA1
                 INTO  WA_NOMEACAO-KUNNR_DESC
                WHERE KUNNR EQ WA_NOMEACAO-KUNNR.

              PERFORM CONVERT_IN_OUT USING 'IN' CHANGING WA_NOMEACAO-MATNR.

              SELECT SINGLE MAKTX
                FROM MAKT
                 INTO  WA_NOMEACAO-MATNR_DEC
                WHERE MATNR EQ WA_NOMEACAO-MATNR
                  AND SPRAS EQ SY-LANGU.

              SHIFT WA_NOMEACAO-MATNR LEFT DELETING LEADING '0'.

            ELSE.
              MESSAGE 'Existe Registro de Exportação para essa Nomeação!' TYPE 'S' DISPLAY LIKE 'E'.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ELSE.
        MESSAGE 'Selecione somente uma Linha!' TYPE 'I'.
      ENDIF.
      CALL METHOD WA_ALV_N->REFRESH_TABLE_DISPLAY.
    WHEN 'TAB_STRIP_FC2'. "RE

      CLEAR CHECK_.

      FREE IT_SELECTED_ROWS.
      CALL METHOD WA_ALV_RE->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SELECTED_ROWS.
      CHECK NOT IT_SELECTED_ROWS IS INITIAL.

      IF LINES( IT_SELECTED_ROWS[] ) EQ 1.
        WA_SELECTED_ROWS = IT_SELECTED_ROWS[ 1 ].

        IF IT_RE[ WA_SELECTED_ROWS-INDEX ]-IN_STATUS_COMEX IS NOT INITIAL.
          CLEAR WA_RE.
          MESSAGE |Não é possivel Editar Linha Excluida!| TYPE 'S' DISPLAY LIKE 'E'.
          EXIT.
        ENDIF.

        LOOP AT IT_RE ASSIGNING FIELD-SYMBOL(<RE>).
          IF SY-TABIX EQ WA_SELECTED_ROWS-INDEX.

            PERFORM EN_DE_QUERE USING <RE>-ID_NOMEACAO_TRAN 'EN' CHANGING SY-SUBRC.
            CHECK SY-SUBRC IS INITIAL.

            CLEAR WA_RE.
            PERFORM CONTROLE_TELA USING G_TAB_STRIP-PRESSED_TAB ABAP_TRUE.
            <RE>-COLOR = 'C700'.
            <RE>-FLAG = ABAP_TRUE. " Marca se houve Auteração
            MOVE-CORRESPONDING <RE> TO WA_RE.

            SELECT SINGLE NAME1
              FROM T001W
               INTO  WA_RE-WERKS_DESC
              WHERE WERKS EQ WA_RE-WERKS.

            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                INPUT  = WA_RE-ID_EXPORTADOR
              IMPORTING
                OUTPUT = WA_RE-ID_EXPORTADOR.

            SELECT SINGLE NAME1
              FROM KNA1
               INTO  WA_RE-ID_EXPORTADOR_DESC
              WHERE KUNNR EQ WA_RE-ID_EXPORTADOR.

            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                INPUT  = WA_RE-ID_IMPORTADOR
              IMPORTING
                OUTPUT = WA_RE-ID_IMPORTADOR.

            SELECT SINGLE NAME1
              FROM LFA1
               INTO  WA_RE-ID_IMPORTADOR_DESC
              WHERE LIFNR EQ WA_RE-ID_IMPORTADOR.

          ELSE.
            <RE>-COLOR = ''.
          ENDIF.

        ENDLOOP.

      ELSE.
        MESSAGE 'Selecione somente uma Linha!' TYPE 'I'.
      ENDIF.
      CALL METHOD WA_ALV_RE->REFRESH_TABLE_DISPLAY.

    WHEN 'TAB_STRIP_FC3'. "DDE

      FREE IT_SELECTED_ROWS.
      CALL METHOD WA_ALV_DDE->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SELECTED_ROWS.
      CHECK NOT IT_SELECTED_ROWS IS INITIAL.
      IF IT_DDE[ IT_SELECTED_ROWS[ 1 ]-INDEX ]-IN_STATUS_COMEX IS NOT INITIAL.
        CLEAR WA_DDE.
        MESSAGE |Não é possivel Editar Linha Excluida!| TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      IF LINES( IT_SELECTED_ROWS[] ) EQ 1.
        WA_SELECTED_ROWS = IT_SELECTED_ROWS[ 1 ].
        LOOP AT IT_DDE ASSIGNING FIELD-SYMBOL(<DDE>)  WHERE IN_STATUS_COMEX NE ABAP_TRUE.
          IF SY-TABIX EQ WA_SELECTED_ROWS-INDEX.

            PERFORM EN_DE_QUERE USING <DDE>-ID_NOMEACAO_TRAN 'EN' CHANGING SY-SUBRC.
            CHECK SY-SUBRC IS INITIAL.

            CLEAR WA_DDE.
            PERFORM CONTROLE_TELA USING G_TAB_STRIP-PRESSED_TAB ABAP_TRUE.
            <DDE>-COLOR = 'C700'.
            <DDE>-FLAG = ABAP_TRUE. " Marca se houve Auteração
            MOVE-CORRESPONDING <DDE> TO WA_DDE.
          ELSE.
            <DDE>-COLOR = ''.
          ENDIF.
        ENDLOOP.
      ELSE.
        MESSAGE 'Selecione somente uma Linha!' TYPE 'I'.
      ENDIF.
      CALL METHOD WA_ALV_DDE->REFRESH_TABLE_DISPLAY.
    WHEN 'TAB_STRIP_FC4'. "BL

      FREE IT_SELECTED_ROWS.
      CALL METHOD WA_ALV_BL->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SELECTED_ROWS.
      CHECK NOT IT_SELECTED_ROWS IS INITIAL.

      IF LINES( IT_SELECTED_ROWS[] ) EQ 1.
        WA_SELECTED_ROWS = IT_SELECTED_ROWS[ 1 ].

        IF IT_BL[ WA_SELECTED_ROWS-INDEX ]-IN_STATUS_COMEX IS NOT INITIAL.
          CLEAR WA_BL.
          MESSAGE |Não é possivel Editar Linha Excluida!| TYPE 'S' DISPLAY LIKE 'E'.
          EXIT.
        ENDIF.

        LOOP AT IT_BL ASSIGNING FIELD-SYMBOL(<BL>)  WHERE IN_STATUS_COMEX NE ABAP_TRUE.
          IF SY-TABIX EQ WA_SELECTED_ROWS-INDEX.

            PERFORM EN_DE_QUERE USING <BL>-ID_NOMEACAO_TRAN 'EN' CHANGING SY-SUBRC.
            CHECK SY-SUBRC IS INITIAL.

            CLEAR WA_BL.
            PERFORM CONTROLE_TELA USING G_TAB_STRIP-PRESSED_TAB ABAP_TRUE.
            <BL>-COLOR = 'C700'.
            <BL>-FLAG = ABAP_TRUE.
            MOVE-CORRESPONDING <BL> TO WA_BL.
          ELSE.
            <BL>-COLOR = ''.
          ENDIF.
        ENDLOOP.
      ELSE.
        MESSAGE 'Selecione somente uma Linha!' TYPE 'I'.
      ENDIF.
      CALL METHOD WA_ALV_BL->REFRESH_TABLE_DISPLAY.
  ENDCASE.

  SALVAR = ABAP_TRUE.
  CAMPOS = ABAP_FALSE.

  LEAVE TO SCREEN 0100.

ENDFORM.

MODULE PBO_0105 OUTPUT.

ENDMODULE.

MODULE PAI_0105 INPUT.

ENDMODULE.

FORM ALIMENTA_FIELDS USING P_SCREEN.
ENDFORM.

FORM GET_SNUM  USING SNUM CHANGING P_SEQ.

  CALL FUNCTION 'NUMBER_GET_NEXT'
    EXPORTING
      NR_RANGE_NR             = '01'
      OBJECT                  = SNUM
    IMPORTING
      NUMBER                  = P_SEQ
    EXCEPTIONS
      INTERVAL_NOT_FOUND      = 1
      NUMBER_RANGE_NOT_INTERN = 2
      OBJECT_NOT_FOUND        = 3
      QUANTITY_IS_0           = 4
      QUANTITY_IS_NOT_1       = 5
      INTERVAL_OVERFLOW       = 6
      BUFFER_OVERFLOW         = 7
      OTHERS                  = 8.

ENDFORM.

FORM SELECAO .

  DATA(NOMEACAO_TRAN) = WA_NOMEACAO-ID_NOME_TRAN_REG.
  SHIFT NOMEACAO_TRAN LEFT DELETING LEADING '0'.

  CASE G_TAB_STRIP-PRESSED_TAB.
    WHEN 'TAB_STRIP_FC2'.

      CHECK IT_RE[] IS INITIAL.
*
*      PERFORM VERIFICA_ERROS CHANGING CHECK_.
*
*      IF NOT CHECK_ IS INITIAL.
*        MESSAGE |Campo Obrigatório não Preenchido!| TYPE 'S' DISPLAY LIKE 'E'.
*        SY-UCOMM = ''.
*        EXIT.
*      ENDIF.

      PERFORM CONVERT_IN_OUT USING 'IN' CHANGING WA_NOMEACAO-ID_NOME_TRAN_REG.

      SELECT *
        FROM ZREG_EXPORTACAO
        INTO CORRESPONDING FIELDS OF TABLE IT_RE
        WHERE ID_NOMEACAO_TRAN EQ WA_NOMEACAO-ID_NOME_TRAN_REG
        AND IN_STATUS_COMEX EQ ABAP_FALSE.

      "Seleção DU-e
      CLEAR: IT_ZSDT0170[], IT_ZSDT0172[].
      SELECT *
        FROM ZSDT0170 INTO TABLE IT_ZSDT0170
       WHERE ID_NOMEACAO_TRAN EQ WA_NOMEACAO-ID_NOMEACAO_TRAN
         AND LOEKZ EQ ABAP_FALSE.

      IF IT_ZSDT0170[] IS NOT INITIAL.
        SELECT *
          FROM ZSDT0172 INTO TABLE IT_ZSDT0172
           FOR ALL ENTRIES IN IT_ZSDT0170
         WHERE ID_DUE EQ IT_ZSDT0170-ID_DUE.
      ENDIF.

      LOOP AT IT_ZSDT0170.

        READ TABLE IT_ZSDT0172 WITH KEY ID_DUE = IT_ZSDT0170-ID_DUE.
        CHECK SY-SUBRC EQ 0.

        CLEAR: IT_RE.

        SELECT SINGLE BRANCH INTO IT_RE-WERKS
          FROM J_1BBRANCH
         WHERE CGC_BRANCH EQ '0001'
           AND BRANCH     NE '0001'
           AND BUKRS      EQ IT_ZSDT0170-BUKRS.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = IT_RE-WERKS
          IMPORTING
            OUTPUT = IT_RE-ID_EXPORTADOR.

        SELECT SINGLE DESTINO_COUNTRY INTO IT_RE-ID_PAIS_DESTINO
          FROM ZSDT0174
         WHERE ID_DUE EQ IT_ZSDT0170-ID_DUE.

        IT_RE-DUE                    = ABAP_TRUE.
        IT_RE-ID_REGISTRO_EXPO       = IT_ZSDT0170-ID_DUE.
        IT_RE-NR_REGISTRO_EXPO       = IT_ZSDT0170-NUMERO_DUE.
        IT_RE-CD_MATERIAL            = IT_ZSDT0172-MATNR.
        IT_RE-ID_NOMEACAO_TRAN       = IT_ZSDT0170-ID_NOMEACAO_TRAN.
        IT_RE-DT_REGISTRO_EXPO       = IT_ZSDT0170-DT_REGISTRO.
        IT_RE-ID_IMPORTADOR          = IT_ZSDT0172-IMPORTADOR_CODIGO.
        IT_RE-NR_VALOR_TOTAL         = IT_ZSDT0172-VLR_LOCAL_EMBARQUE.
        IT_RE-NR_QTDE                = IT_ZSDT0172-PESO_LIQ_TOTAL.
        IT_RE-NR_VALOR_TM            = IT_ZSDT0172-PRECO_TON.

        APPEND IT_RE.
      ENDLOOP.

      SELECT *
        FROM ZSDT0051
        INTO TABLE @DATA(IT_ZSDT0051)
        FOR ALL ENTRIES IN @IT_NOMEACAO
        WHERE NRO_SOL_OV EQ @IT_NOMEACAO-NRO_SOL_OV.

      LOOP AT IT_RE ASSIGNING FIELD-SYMBOL(<RE>).
        TRY.
            <RE>-ID_IMPORTADOR = IT_ZSDT0051[ NRO_SOL_OV = IT_NOMEACAO[ ID_NOMEACAO_TRAN = <RE>-ID_NOMEACAO_TRAN ]-NRO_SOL_OV ]-KUNNR.
          CATCH CX_SY_ITAB_LINE_NOT_FOUND.
            CLEAR <RE>-ID_IMPORTADOR.
        ENDTRY.
      ENDLOOP.

      IT_RE_BKP[] = IT_RE[].

      PERFORM SET_ERROS.

    WHEN 'TAB_STRIP_FC3'.

      CLEAR: DDE_NR_QTDE, DDE_NR_VALOR.
      IF IT_DDE[] IS NOT INITIAL.
        LOOP AT IT_DDE.
          ADD IT_DDE-NR_QTDE TO DDE_NR_QTDE.
          ADD IT_DDE-NR_VALOR TO DDE_NR_VALOR.
        ENDLOOP.

        CONVERT = DDE_NR_QTDE.
        WRITE CONVERT TO DDE_NR_QTDE_C.
        CONDENSE DDE_NR_QTDE_C NO-GAPS.

        CLEAR IT_DDE.
      ENDIF.

      CHECK IT_DDE[] IS INITIAL.

      IF IT_RE[] IS INITIAL.
        SELECT *
          FROM ZREG_EXPORTACAO
          INTO CORRESPONDING FIELDS OF TABLE IT_RE
          WHERE ID_NOMEACAO_TRAN EQ WA_NOMEACAO-ID_NOME_TRAN_REG
          AND IN_STATUS_COMEX EQ ABAP_FALSE.
        IT_RE_BKP[] = IT_RE[].
      ENDIF.
*
*      SELECT * FROM ZDDE
*        INTO CORRESPONDING FIELDS OF TABLE IT_DDE
*        WHERE ID_NOMEACAO_TRAN EQ WA_NOMEACAO-ID_NOMEACAO_TRAN
*          AND IN_STATUS_COMEX EQ ABAP_FALSE.


      SELECT * FROM ZDDE
        INTO TABLE @DATA(IT_DDE_)
        WHERE ID_NOMEACAO_TRAN EQ @WA_NOMEACAO-ID_NOMEACAO_TRAN
          AND IN_STATUS_COMEX EQ @ABAP_FALSE.

      SELECT * FROM ZDDE_APLICACAO
        INTO TABLE @DATA(IT_DDE_APLICACAO)
        FOR ALL ENTRIES IN @IT_DDE
        WHERE ID_DDE EQ @IT_DDE-ID_DDE.

      LOOP AT IT_DDE_APLICACAO INTO DATA(WAPLICACAO).
        LOOP AT IT_DDE_ INTO DATA(WA_DDE_) WHERE ID_DDE EQ WAPLICACAO-ID_DDE.
          MOVE-CORRESPONDING WA_DDE_ TO IT_DDE.
          TRY .
              DATA(WA_RE_) = IT_RE[ ID_REGISTRO_EXPO = WAPLICACAO-ID_REGISTRO_EXPO ].
            CATCH CX_SY_ITAB_LINE_NOT_FOUND.
          ENDTRY.

          IT_DDE-NR_REGISTRO_EXPO = WA_RE_-NR_REGISTRO_EXPO.

          ADD WA_RE_-NR_QTDE TO DDE_NR_QTDE.
          ADD WA_RE_-NR_VALOR_TOTAL TO DDE_NR_VALOR.

          IT_DDE-NR_QTDE  = WA_RE_-NR_QTDE.
          IT_DDE-NR_VALOR = WA_RE_-NR_VALOR_TOTAL.

          APPEND IT_DDE.
        ENDLOOP.
      ENDLOOP.

      CONVERT = DDE_NR_QTDE.
      WRITE CONVERT TO DDE_NR_QTDE_C.
      CONDENSE DDE_NR_QTDE_C NO-GAPS.

*      SELECT * FROM ZDDE_APLICACAO
*        INTO TABLE @DATA(IT_DDE_APLICACAO)
*        FOR ALL ENTRIES IN @IT_RE
*        WHERE ID_REGISTRO_EXPO EQ @IT_RE-ID_REGISTRO_EXPO.

*      LOOP AT IT_DDE ASSIGNING FIELD-SYMBOL(<FDDE>).
*        TRY.
*            <FDDE>-NR_REGISTRO_EXPO = IT_RE[ ID_REGISTRO_EXPO = IT_DDE_APLICACAO[ ID_DDE = <FDDE>-ID_DDE ]-ID_REGISTRO_EXPO ]-NR_REGISTRO_EXPO.
*          CATCH CX_SY_ITAB_LINE_NOT_FOUND.
*            CLEAR <FDDE>-NR_REGISTRO_EXPO.
*        ENDTRY.
*
*        ADD <FDDE>-NR_QTDE TO DDE_NR_QTDE.
*        ADD <FDDE>-NR_VALOR TO DDE_NR_VALOR.
*
*      ENDLOOP.

      IT_DDE_BKP[] = IT_DDE[].

    WHEN 'TAB_STRIP_FC4'.

      CHECK IT_BL[] IS INITIAL.

      SELECT * FROM ZNOM_CONHEC
        INTO CORRESPONDING FIELDS OF TABLE IT_BL
        WHERE ID_NOMEACAO_TRAN EQ WA_NOMEACAO-ID_NOMEACAO_TRAN
          AND IN_STATUS_COMEX  EQ ABAP_FALSE.


      LOOP AT IT_BL ASSIGNING FIELD-SYMBOL(<BL>).
        <BL>-LAND1 = <BL>-SG_PAIS_DESTINO.
      ENDLOOP.

      SELECT *
        FROM T005T
        INTO TABLE @DATA(IT_T005)
        FOR  ALL ENTRIES IN @IT_BL
        WHERE LAND1 EQ @IT_BL-LAND1
        AND SPRAS EQ 'P'.

      LOOP AT IT_BL ASSIGNING <BL>.
        TRY .
            <BL>-DC_PAIS_DESTINO = IT_T005[ LAND1 = <BL>-LAND1 ]-LANDX.
          CATCH CX_SY_ITAB_LINE_NOT_FOUND.
        ENDTRY.
      ENDLOOP.

      IT_BL_BKP[] = IT_BL[].

  ENDCASE.

ENDFORM.

FORM TELA .

  FREE T_TELA.
  T_TELA-ABA = 'TAB_STRIP_FC1'.
  T_TELA-STS = ABAP_FALSE.
  T_TELA-DIR = ABAP_FALSE.
  APPEND T_TELA.
  CLEAR T_TELA.

  T_TELA-ABA = 'TAB_STRIP_FC2'.
  T_TELA-STS = ABAP_FALSE.
  T_TELA-DIR = ABAP_FALSE.
  APPEND T_TELA.
  CLEAR T_TELA.

  T_TELA-ABA = 'TAB_STRIP_FC3'.
  T_TELA-STS = ABAP_FALSE.
  T_TELA-DIR = ABAP_FALSE.
  APPEND T_TELA.
  CLEAR T_TELA.

  T_TELA-ABA = 'TAB_STRIP_FC4'.
  T_TELA-STS = ABAP_FALSE.
  T_TELA-DIR = ABAP_FALSE.
  APPEND T_TELA.
  CLEAR T_TELA.

ENDFORM.

FORM CONTROLE_TELA USING P_ABA P_STS.

  LOOP AT T_TELA ASSIGNING FIELD-SYMBOL(<TELA>).
    IF <TELA>-ABA EQ P_ABA.
      <TELA>-ABA = P_ABA.
      <TELA>-STS = P_STS.
    ENDIF.
  ENDLOOP.

ENDFORM.

MODULE F4_NR_REGISTRO_EXPO INPUT.

  CHECK NOT IT_RE[] IS INITIAL.

  SELECT * FROM ZREG_EXPORTACAO
    INTO CORRESPONDING FIELDS OF TABLE IT_F4_RE
    FOR  ALL ENTRIES IN IT_RE
    WHERE ID_REGISTRO_EXPO EQ IT_RE-ID_REGISTRO_EXPO.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'ID_REGISTRO_EXPO'
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = IT_F4_RE
      RETURN_TAB      = IT_RETURN
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  TRY .
      WA_DDE-NR_REGISTRO_EXPO = IT_F4_RE[ ID_REGISTRO_EXPO = IT_RETURN[ 1 ]-FIELDVAL(10) ]-NR_REGISTRO_EXPO.
    CATCH CX_SY_ITAB_LINE_NOT_FOUND.
      CLEAR: WA_DDE-NR_REGISTRO_EXPO.
  ENDTRY.

ENDMODULE.

FORM CONVERT_IN_OUT  USING P_DIRECAO CHANGING P_CONVERT.

  DATA STRING TYPE C LENGTH 28.
  CASE P_DIRECAO.
    WHEN 'IN'.  STRING = 'CONVERSION_EXIT_ALPHA_INPUT'.
    WHEN 'OUT'. STRING = 'CONVERSION_EXIT_ALPHA_OUTPUT'.
  ENDCASE.

  CALL FUNCTION STRING
    EXPORTING
      INPUT  = P_CONVERT
    IMPORTING
      OUTPUT = P_CONVERT.

ENDFORM.

FORM SELECT_DEL USING P_TABLE CHANGING P_SUBRC.
*  Checa se existe documentos com ligação
  CASE G_TAB_STRIP-PRESSED_TAB.
    WHEN 'TAB_STRIP_FC1'. "NOMEAÇÃO

      SELECT COUNT(*)
      FROM (P_TABLE)
      WHERE ID_NOMEACAO_TRAN EQ <NOMEACAO>-ID_NOMEACAO_TRAN.

      IF SY-SUBRC IS INITIAL.
        ADD 1 TO VAR_SUBRC.
        P_SUBRC = VAR_SUBRC.
      ENDIF.

    WHEN 'TAB_STRIP_FC2'.

      IF <RE>-ID_REGISTRO_EXPO IS INITIAL.
        P_SUBRC = 4.
        EXIT.
      ENDIF.

      SELECT COUNT(*)
      FROM (P_TABLE)
      WHERE ID_REGISTRO_EXPO EQ <RE>-ID_REGISTRO_EXPO.

      ADD SY-SUBRC TO VAR_SUBRC.
      P_SUBRC = VAR_SUBRC.

    WHEN 'TAB_STRIP_FC3'.

      IF <DDE>-ID_DDE IS INITIAL.
        P_SUBRC = 4.
        EXIT.
      ENDIF.

      SELECT COUNT(*)
      FROM (P_TABLE)
      WHERE ID_DDE EQ <DDE>-ID_DDE.

      ADD SY-SUBRC TO VAR_SUBRC.
      P_SUBRC = VAR_SUBRC.

    WHEN 'TAB_STRIP_FC4'.
  ENDCASE.

ENDFORM.
FORM BLOCK_ABAS USING V_TEXT CHANGING V_RESP.

  IF NOT TG_MSG_RET[] IS INITIAL.
    MESSAGE |Verifique Log de Erros!| TYPE 'I'.
    EXIT.
  ENDIF.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      TEXT_QUESTION         = V_TEXT
      TEXT_BUTTON_1         = 'Sim'
      TEXT_BUTTON_2         = 'Não'
      DISPLAY_CANCEL_BUTTON = ' '
    IMPORTING
      ANSWER                = V_RESP.

ENDFORM.

FORM DESMONTAR.

  IF NOT WA_CONT_N IS INITIAL.
    CALL METHOD WA_CONT_N->FREE.
    FREE    WA_CONT_N.
  ENDIF.

  CALL METHOD CL_GUI_CFW=>FLUSH.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  F4_PAIS  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE F4_PAIS INPUT.

  TYPES: BEGIN OF TY_LAND,
           LAND1 TYPE LAND1,
           LANDX TYPE LANDX,
         END OF TY_LAND.

  DATA: PAIS      TYPE TABLE OF TY_LAND WITH HEADER LINE.

  SELECT T005~LAND1 T005T~LANDX
    FROM T005
    INNER JOIN T005T ON T005T~LAND1 = T005~LAND1
    INTO TABLE PAIS
    WHERE T005T~SPRAS EQ SY-LANGU.

  SORT PAIS BY LANDX.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'LAND1'
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = PAIS
      RETURN_TAB      = IT_RETURN
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  TRY .
      PAIS = PAIS[ LAND1 = IT_RETURN[ 1 ]-FIELDVAL(2) ].
      WA_RE-ID_PAIS_DESTINO = PAIS-LAND1.
      TXTDESC = PAIS-LANDX.
    CATCH CX_SY_ITAB_LINE_NOT_FOUND.
      CLEAR: WA_RE-ID_PAIS_DESTINO, TXTDESC.
  ENDTRY.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  LAND
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_RE_ID_PAIS_DESTINO  text
*----------------------------------------------------------------------*
FORM LAND USING ID_PAIS_DESTINO.

  CHECK NOT ID_PAIS_DESTINO IS INITIAL.

  SELECT SINGLE LANDX
    FROM T005T
    INTO TXTDESC
    WHERE LAND1 EQ ID_PAIS_DESTINO
    AND SPRAS EQ SY-LANGU.

  IF NOT SY-SUBRC IS INITIAL.
    CLEAR TXTDESC.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  NR_RE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_RE_NR_REGISTRO_EXPO  text
*----------------------------------------------------------------------*
FORM NR_MASC USING DIRECAO CHANGING MASCARA.

  CHECK NOT MASCARA IS INITIAL.

  DATA P_1(13) TYPE P.

  REPLACE '-' WITH '' INTO MASCARA.
  REPLACE '/' WITH '' INTO MASCARA.
  REPLACE '.' WITH '' INTO MASCARA.
  REPLACE ',' WITH '' INTO MASCARA.
  CONDENSE MASCARA NO-GAPS.

  CASE DIRECAO.
    WHEN 1.
      WRITE MASCARA USING EDIT MASK '__/_______-___' TO MASCARA.
    WHEN 2.
      WRITE MASCARA USING EDIT MASK '__________-_' TO MASCARA.
    WHEN 3.
      P_1 = MASCARA.
      WRITE P_1 TO MASCARA.
  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  F4_INSTRUCAO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE F4_INSTRUCAO INPUT.

  CHECK NOT WA_NOMEACAO-NRO_SOL_OV IS INITIAL.

  TYPES: BEGIN OF TY_INSTRUCAO,
           INSTRUCAO TYPE ZSDT0045-INSTRUCAO,
         END OF TY_INSTRUCAO.

  DATA: F4_INSTRUCAO TYPE TABLE OF TY_INSTRUCAO WITH HEADER LINE.

  SELECT DISTINCT INSTRUCAO FROM ZSDT0045
    INTO CORRESPONDING FIELDS OF TABLE F4_INSTRUCAO
    WHERE OBJEK EQ WA_NOMEACAO-NRO_SOL_OV
    ORDER BY INSTRUCAO.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'INSTRUCAO'
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = F4_INSTRUCAO
      RETURN_TAB      = IT_RETURN
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

  TRY .
      WA_NOMEACAO-INSTRUCAO =  IT_RETURN-FIELDVAL.
    CATCH CX_SY_ITAB_LINE_NOT_FOUND.
      CLEAR: WA_NOMEACAO-INSTRUCAO.
  ENDTRY.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  BLOCK_DADOS  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE BLOCK_DADOS INPUT.

  IF NOT WA_NOMEACAO-INSTRUCAO IS INITIAL.

    SELECT COUNT(*)
      FROM ZSDT0045
      WHERE INSTRUCAO EQ WA_NOMEACAO-INSTRUCAO
      AND OBJEK EQ WA_NOMEACAO-NRO_SOL_OV.

    IF NOT SY-SUBRC IS INITIAL.
      MESSAGE |Instrução { WA_NOMEACAO-INSTRUCAO } não existe na Solicitação { WA_NOMEACAO-NRO_SOL_OV }!| TYPE 'S' DISPLAY LIKE 'E'.
      CLEAR WA_NOMEACAO-INSTRUCAO.
    ENDIF.

  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  BLOCK_BOTOES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM BLOCK_BOTOES .
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  VINCULAR_RE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM VINCULAR_RE.

  DATA: H1     TYPE N LENGTH 3,
        ALTURA TYPE N LENGTH 3.

  ALTURA = 15.
  FREE IT_APL.

  LOOP AT IT_RE.

    IF SY-TABIX GT 4.
      IF ( SY-TABIX MOD 2 ) EQ 0.
        ADD 1 TO ALTURA.
      ELSE.
        ADD 2 TO ALTURA.
      ENDIF.
    ENDIF.

    IT_APL-ID_DDE           = WA_DDE-ID_DDE.
    IT_APL-NR_DDE           = WA_DDE-NR_DDE.
    IT_APL-ID_REGISTRO_EXPO = IT_RE-ID_REGISTRO_EXPO.
    IT_APL-NR_REGISTRO_EXPO = IT_RE-NR_REGISTRO_EXPO.
    IT_APL-NR_QTDE_          = IT_RE-NR_QTDE. "Quantidade
    IT_APL-NR_VALOR_TOTAL   = IT_RE-NR_VALOR_TOTAL. "Valor Total
    APPEND IT_APL.
    CLEAR IT_APL.

  ENDLOOP.

  LOOP AT IT_DDE.
    DELETE IT_APL WHERE NR_REGISTRO_EXPO EQ IT_DDE-NR_REGISTRO_EXPO.
  ENDLOOP.

  CALL SCREEN 0300 STARTING AT 118 10
                   ENDING   AT 180 ALTURA.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0300 OUTPUT.
  SET PF-STATUS 'PF300'.
  SET TITLEBAR 'TI300'.

  PERFORM CRIA_ALV TABLES IT_APL USING 'DDE_APL'.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0300 INPUT.

  CASE SY-UCOMM.
    WHEN 'BACK'.
      FREE: IT_APL[].
      LEAVE TO SCREEN 0.
    WHEN 'EXE'.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  VERIFICA_ERROS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_CHECK_  text
*----------------------------------------------------------------------*
FORM VERIFICA_ERROS.

  PERFORM SET_ERROS.

  CALL FUNCTION 'Z_DOC_CHECK_NEW'
    EXPORTING
      I_SCREEN    = '100'
      I_SHOW      = ABAP_TRUE
      I_REPID     = SY-REPID
      I_POPUP     = 1
      I_SET_FIELD = 'X_FIELD'
    IMPORTING
      E_MESSAGEM  = WG_MENSAGEM
    TABLES
      IT_MSGS     = TG_MSG_RET.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_ERROS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SET_ERROS .

  FREE TG_MSG_RET[].

  CASE G_TAB_STRIP-PRESSED_TAB.
    WHEN 'TAB_STRIP_FC1'. "NOMEAÇÃO

      TG_MSG_RET =
        VALUE #( FOR LS_N IN IT_NOMEACAO WHERE ( (
                                                      DS_NOME_TRANSPOR IS INITIAL OR
                                                      NR_ANO IS INITIAL OR
                                                      NR_MES IS INITIAL OR
                                                      BOOKING IS INITIAL OR
                                                      WERKS IS INITIAL OR
                                                      NRO_SOL_OV IS INITIAL OR
                                                      NR_QTDE_NOMEADA IS INITIAL
*                                                      INSTRUCAO IS INITIAL
                                                     )
                                                     AND
                                                    ( IN_STATUS_COMEX NE ABAP_TRUE ) )
                             ( MSG = |Existem campos Obrigatório sem preenchimento!| )
               ).

    WHEN 'TAB_STRIP_FC2'. "RE

      TG_MSG_RET =
        VALUE #( FOR LS_R IN IT_RE WHERE (
                                           ( ID_PAIS_DESTINO IS INITIAL )
                                             AND
                                           ( IN_STATUS_COMEX NE ABAP_TRUE )
                                         )
                             ( MSG = |É Obrigatorio o Preenchimento do Campo Pais de Destino!| )
               ).

      DATA TOTAL_RE TYPE ZREG_EXPORTACAO-NR_QTDE.

      TOTAL_RE =  REDUCE #( INIT X = 0 FOR WA IN IT_RE WHERE ( IN_STATUS_COMEX NE ABAP_TRUE ) NEXT X = X + WA-NR_QTDE ).

      IF TOTAL_RE > WA_NOMEACAO-NR_QTDE_NOMEADA.
        APPEND VALUE #(
                         MSG = |Quantidade Vinculada de RE é Maior que a Nomeada!|
                        ) TO TG_MSG_RET.
      ENDIF.

    WHEN 'TAB_STRIP_FC3'. "DDE
    WHEN 'TAB_STRIP_FC4'. "BL
  ENDCASE.

  CALL FUNCTION 'Z_DOC_CHECK_NEW'
    EXPORTING
      I_SCREEN    = '100'
      I_REPID     = SY-REPID
      I_SET_FIELD = 'X_FIELD'
    IMPORTING
      E_MESSAGEM  = WG_MENSAGEM
    TABLES
      IT_MSGS     = TG_MSG_RET.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SELECT_DEL_X
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_6157   text
*      <--P_CONT  text
*----------------------------------------------------------------------*
FORM SELECT_DEL_X  USING P_TABLE CHANGING P_SUBRC.

  CASE G_TAB_STRIP-PRESSED_TAB.
    WHEN 'TAB_STRIP_FC1'. "NOMEAÇÃO

      DATA: NOMEACAO_TRAN TYPE ZREG_EXPORTACAO-ID_NOMEACAO_TRAN.

      NOMEACAO_TRAN = <NOMEACAO>-ID_NOMEACAO_TRAN.

      NOMEACAO_TRAN = |{ NOMEACAO_TRAN ALPHA = IN }|.

      SELECT COUNT(*)
        FROM (P_TABLE)
        WHERE ID_NOMEACAO_TRAN EQ NOMEACAO_TRAN
        AND IN_STATUS_COMEX EQ ABAP_FALSE.

      IF SY-SUBRC IS INITIAL.
        ADD 1 TO P_SUBRC.
      ENDIF.

  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EN_DE_QUERE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM EN_DE_QUERE USING V_NOMEACAO V_DIR CHANGING V_SUBRC.

  DATA: FUNCAO     TYPE STRING,
        TL_ENQ     TYPE TABLE OF SEQG3 WITH HEADER LINE,
        WL_NUM_ENQ TYPE SY-TABIX,
        WL_ARG     TYPE SEQG3-GARG,
        NOMEACAO   TYPE ZNOM_TRANSPORTE-ID_NOMEACAO_TRAN.

  NOMEACAO = V_NOMEACAO.

  FUNCAO = |{ V_DIR }QUEUE_EZNOM_TRANSPORTE|.

  IF V_DIR EQ 'DE'.

    WL_ARG = NOMEACAO.

    CALL FUNCTION 'ENQUEUE_READ'
      EXPORTING
        GNAME  = 'ZNOM_TRANSPORTE'
        GARG   = WL_ARG
      IMPORTING
        NUMBER = WL_NUM_ENQ
      TABLES
        ENQ    = TL_ENQ.

    IF WL_NUM_ENQ EQ 0.
      EXIT.
    ENDIF.

  ENDIF.

  CALL FUNCTION FUNCAO
    EXPORTING
      ID_NOMEACAO_TRAN = NOMEACAO
    EXCEPTIONS
      FOREIGN_LOCK     = 1
      SYSTEM_FAILURE   = 2
      OTHERS           = 3.

  CHECK SY-SUBRC IS NOT INITIAL.

  CHECK V_DIR EQ 'EN'.

  VAR_SUBRC = SY-SUBRC.

  MESSAGE |Nº da Nomeação Bloqueado pelo Usuário { SY-MSGV1 }| TYPE 'S' DISPLAY LIKE 'E'.

  V_SUBRC = VAR_SUBRC.

ENDFORM.
