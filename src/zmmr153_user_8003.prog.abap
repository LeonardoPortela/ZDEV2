*----------------------------------------------------------------------*
***INCLUDE ZMMR126_STATUS_8003.
*----------------------------------------------------------------------*

CLASS LCL_ALV_TOOLBAR_8003A DEFINITION.
  PUBLIC SECTION.
    METHODS: CONSTRUCTOR         IMPORTING IO_ALV_GRID TYPE REF TO CL_GUI_ALV_GRID,
      ON_TOOLBAR          FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID IMPORTING E_OBJECT,
      HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID IMPORTING E_UCOMM.
ENDCLASS.

CLASS LCL_ALV_TOOLBAR_8003B DEFINITION.
  PUBLIC SECTION.
    METHODS: CONSTRUCTOR         IMPORTING IO_ALV_GRID TYPE REF TO CL_GUI_ALV_GRID,
      ON_TOOLBAR          FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID IMPORTING E_OBJECT,
      HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID IMPORTING E_UCOMM.
ENDCLASS.

CLASS LCL_EVENT_RECEIVER_8003A DEFINITION.
  PUBLIC SECTION.
    DATA: VALIDAR_DATA  TYPE C,
          ERROR_IN_DATA TYPE C.

    METHODS: DATA_CHANGED_FINISHED FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID IMPORTING E_MODIFIED ET_GOOD_CELLS.

    METHODS: DATA_CHANGED FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID IMPORTING ER_DATA_CHANGED.

    METHODS: SUBTOTAL_TEXT FOR EVENT SUBTOTAL_TEXT OF CL_GUI_ALV_GRID IMPORTING ES_SUBTOTTXT_INFO EP_SUBTOT_LINE E_EVENT_DATA.

  PRIVATE SECTION.

    METHODS: PERFORM_SEMANTIC_CHECKS
      IMPORTING
        PR_DATA_CHANGED TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL.

ENDCLASS.                    "lcl_event_receiver DEFINITION


DATA: EVENT_HANDLER_8003A TYPE REF TO LCL_EVENT_RECEIVER_8003A.

DATA: CTL_CCCONTAINER_8003A    TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      CTL_ALV_8003A            TYPE REF TO CL_GUI_ALV_GRID,
      IT_FIELDCATALOG_8003A    TYPE LVC_T_FCAT,
      GS_VARIANT_8003A         TYPE DISVARIANT,
      GS_LAYOUT_8003A          TYPE LVC_S_LAYO,
      OBG_TOOLBAR_8003A        TYPE REF TO LCL_ALV_TOOLBAR_8003A,
      OBJ_TOOLBARMANAGER_8003A TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,
      GS_SCROLL_COL_8003A      TYPE LVC_S_COL,
      GS_SCROLL_ROW_8003A      TYPE LVC_S_ROID,
      WA_STABLE_8003A          TYPE LVC_S_STBL.

DATA: CTL_CCCONTAINER_8003B    TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      CTL_ALV_8003B            TYPE REF TO CL_GUI_ALV_GRID,
      IT_FIELDCATALOG_8003B    TYPE LVC_T_FCAT,
      GS_VARIANT_8003B         TYPE DISVARIANT,
      GS_LAYOUT_8003B          TYPE LVC_S_LAYO,
      OBG_TOOLBAR_8003B        TYPE REF TO LCL_ALV_TOOLBAR_8003B,
      OBJ_TOOLBARMANAGER_8003B TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,
      GS_SCROLL_COL_8003B      TYPE LVC_S_COL,
      GS_SCROLL_ROW_8003B      TYPE LVC_S_ROID,
      WA_STABLE_8003B          TYPE LVC_S_STBL.

CLASS LCL_ALV_TOOLBAR_8003A IMPLEMENTATION.

  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT OBJ_TOOLBARMANAGER_8003A
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.

  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    DATA: TY_TOOLBAR   TYPE STB_BUTTON.

*    "Separador
    CLEAR TY_TOOLBAR.
    TY_TOOLBAR-BUTN_TYPE = 3.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

*039  Consultar Take UP's
*040  Vincular Take UP
*041  Desvincular Take UP

    CLEAR TY_TOOLBAR.
    TY_TOOLBAR-ICON      = ICON_REFRESH.
    TY_TOOLBAR-FUNCTION  = 'TAKEUP'.
    TY_TOOLBAR-QUICKINFO = TEXT-039.
    TY_TOOLBAR-TEXT      = TEXT-039.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

*    "Separador
    CLEAR TY_TOOLBAR.
    TY_TOOLBAR-BUTN_TYPE = 3.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

    CLEAR TY_TOOLBAR.
    TY_TOOLBAR-ICON      = ICON_ARROW_RIGHT.
    TY_TOOLBAR-FUNCTION  = 'TAKEUPV'.
    TY_TOOLBAR-QUICKINFO = TEXT-040.
    TY_TOOLBAR-TEXT      = TEXT-040.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    CALL METHOD OBJ_TOOLBARMANAGER_8003A->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    CASE E_UCOMM.
      WHEN 'TAKEUP'.
        PERFORM TAKE_UP_DISPONIVEIS.
      WHEN 'TAKEUPV'.
        PERFORM TAKE_UP_VINCULAR.
    ENDCASE.

  ENDMETHOD. "zm_handle_user_command

ENDCLASS.

CLASS LCL_ALV_TOOLBAR_8003B IMPLEMENTATION.

  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT OBJ_TOOLBARMANAGER_8003B
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.

  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    DATA: TY_TOOLBAR   TYPE STB_BUTTON.
*    "Separador
    TY_TOOLBAR-BUTN_TYPE = 3.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

*    "Marcar Todos os Documentos
    CLEAR TY_TOOLBAR.
    TY_TOOLBAR-ICON      = ICON_ARROW_LEFT.
    TY_TOOLBAR-FUNCTION  = 'TAKEUPD'.
    TY_TOOLBAR-QUICKINFO = TEXT-041.
    TY_TOOLBAR-TEXT      = TEXT-041.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    CALL METHOD OBJ_TOOLBARMANAGER_8003B->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    DATA: ET_INDEX_ROWS	TYPE LVC_T_ROW.
    DATA: IT_DELETE TYPE TABLE OF ZDE_ZSDT0001TK_ALV.

    CALL METHOD CTL_ALV_8003B->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = ET_INDEX_ROWS.

    CASE E_UCOMM.
      WHEN 'TAKEUPD'.

*        CLEAR: IT_DELETE[], IT_DELETE.
*
*        LOOP AT ET_INDEX_ROWS INTO DATA(WA_INDEX_ROWS).
*          READ TABLE IT_TAKES_VINCU INTO DATA(WA_TAKES_VINCU) INDEX 1.
*          APPEND WA_TAKES_VINCU TO IT_DELETE.
*        ENDLOOP.
*
*        LOOP AT IT_DELETE INTO DATA(WA_DELETE).
*          TRY .
*              OBJETO->SET_EXC_TAKE_UP( EXPORTING I_TAKEUP = WA_DELETE ).
*              DELETE IT_TAKES_VINCU WHERE ID_NOTA EQ WA_DELETE-ID_NOTA AND ID_TAKEUP EQ WA_DELETE-ID_TAKEUP AND NU_BLOCO EQ WA_DELETE-NU_BLOCO.
*            CATCH ZCX_CARGA INTO EX_CARGA.
*              EX_CARGA->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
*          ENDTRY.
*        ENDLOOP.
*
*        PERFORM REAJUSTAR_SALDOS.
*
*        WA_STABLE_8003A-ROW = ABAP_TRUE.
*        WA_STABLE_8003A-COL = ABAP_TRUE.
*        CALL METHOD CTL_ALV_8003A->REFRESH_TABLE_DISPLAY
*          EXPORTING
*            IS_STABLE = WA_STABLE_8003A.
*
*        WA_STABLE_8003B-ROW = ABAP_TRUE.
*        WA_STABLE_8003B-COL = ABAP_TRUE.
*        CALL METHOD CTL_ALV_8003B->REFRESH_TABLE_DISPLAY
*          EXPORTING
*            IS_STABLE = WA_STABLE_8003B.

    ENDCASE.

  ENDMETHOD. "zm_handle_user_command

ENDCLASS.


CLASS LCL_EVENT_RECEIVER_8003A IMPLEMENTATION.

  METHOD SUBTOTAL_TEXT.

    DATA: LC_QT_VINCULAR TYPE ZDE_QTD_VINCULAR_ALGODAO,
          LC_TAKES_SALDO TYPE ZDE_ZSDT0001TK_ALV_VINC.

    FIELD-SYMBOLS: <FS>  TYPE ANY.
    FIELD-SYMBOLS: <FS2> TYPE ANY.
    ASSIGN E_EVENT_DATA->M_DATA->* TO <FS>.

    IF SY-SUBRC EQ 0.

      IF ES_SUBTOTTXT_INFO(11) EQ 'QT_VINCULAR'.

        ASSIGN EP_SUBTOT_LINE->* TO <FS2>.

        LC_QT_VINCULAR = 0.
        LOOP AT IT_TAKES_SALDO INTO DATA(WA_TAKES_SALDO).
          ADD WA_TAKES_SALDO-QT_VINCULAR TO LC_QT_VINCULAR.
        ENDLOOP.

        LC_TAKES_SALDO = <FS2>.
        LC_TAKES_SALDO-QT_VINCULAR = LC_QT_VINCULAR.
        <FS2> = LC_TAKES_SALDO.

      ENDIF.

    ENDIF.

  ENDMETHOD.

  METHOD DATA_CHANGED.

    ERROR_IN_DATA = SPACE.
    CALL METHOD PERFORM_SEMANTIC_CHECKS( ER_DATA_CHANGED ).
    IF ERROR_IN_DATA = 'X'.
      CALL METHOD ER_DATA_CHANGED->DISPLAY_PROTOCOL.
    ELSE.
    ENDIF.

  ENDMETHOD.

  METHOD DATA_CHANGED_FINISHED.

    IF E_MODIFIED IS NOT INITIAL.
      WA_STABLE_8003A-ROW = ABAP_TRUE.
      WA_STABLE_8003A-COL = ABAP_TRUE.
      CALL METHOD CTL_ALV_8003A->REFRESH_TABLE_DISPLAY
        EXPORTING
          IS_STABLE = WA_STABLE_8003A.
    ENDIF.

  ENDMETHOD.

  METHOD PERFORM_SEMANTIC_CHECKS.

    DATA: LC_QT_FARDOS TYPE ZDE_QTD_VINCULAR_ALGODAO,
          "LC_QT_VINCULAR TYPE ZDE_QTD_VINCULAR_ALGODAO,
          LV_VALUE     TYPE LVC_VALUE,
          LV_VALUE2    TYPE LVC_VALUE.

    DATA: LC_PESO_FARDO_SEM_EMB TYPE TY_VALOR,
          LC_PESO_FARDO_COM_EMB TYPE TY_VALOR,
          LC_PESO_EMBALAGEM     TYPE TY_VALOR.

    ERROR_IN_DATA = ABAP_FALSE.

    PERFORM CALCULA_MEDIA CHANGING LC_PESO_FARDO_SEM_EMB LC_PESO_FARDO_COM_EMB LC_PESO_EMBALAGEM.

    LOOP AT PR_DATA_CHANGED->MT_GOOD_CELLS INTO DATA(LS_GOOD) WHERE FIELDNAME = 'QT_FARDOS'.

      LV_VALUE = LS_GOOD-VALUE.
      CONDENSE LV_VALUE NO-GAPS.
      LC_QT_FARDOS = LV_VALUE.

      READ TABLE IT_TAKES_SALDO ASSIGNING FIELD-SYMBOL(<FS_VINCULAR>) INDEX LS_GOOD-ROW_ID.

      IF LC_PESO_FARDO_SEM_EMB IS NOT INITIAL.
        DATA(LC_QT_FARDOS_SALDO) = <FS_VINCULAR>-QT_SALDO / LC_PESO_FARDO_SEM_EMB.
      ELSE.
        LC_QT_FARDOS_SALDO = 0.
      ENDIF.

      "Valida Saldo de Quantidade de Fardos """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      IF LC_QT_FARDOS_SALDO LT LC_QT_FARDOS.

        WRITE LC_QT_FARDOS_SALDO TO LV_VALUE.
        CONDENSE LV_VALUE NO-GAPS.
        WRITE LC_QT_FARDOS TO LV_VALUE2.
        CONDENSE LV_VALUE2 NO-GAPS.

        "Se Estiver Errado o Valor
        CALL METHOD PR_DATA_CHANGED->ADD_PROTOCOL_ENTRY
          EXPORTING
            I_MSGID     = 'ZCARGA'
            I_MSGNO     = '273'
            I_MSGTY     = 'E'
            I_MSGV1     = LV_VALUE
            I_MSGV2     = LV_VALUE2
            I_FIELDNAME = LS_GOOD-FIELDNAME
            I_ROW_ID    = LS_GOOD-ROW_ID.

        ERROR_IN_DATA = ABAP_TRUE.
      ENDIF.

      DATA(LC_QT_VINCULAR) = LC_QT_FARDOS * LC_PESO_FARDO_SEM_EMB.

      "Valida Saldo de Quantidade de Kilos """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
      IF <FS_VINCULAR>-QT_SALDO LT LC_QT_VINCULAR.

        WRITE <FS_VINCULAR>-QT_SALDO TO LV_VALUE.
        CONDENSE LV_VALUE NO-GAPS.
        WRITE LC_QT_VINCULAR TO LV_VALUE2.
        CONDENSE LV_VALUE2 NO-GAPS.

        "Se Estiver Errado o Valor
        CALL METHOD PR_DATA_CHANGED->ADD_PROTOCOL_ENTRY
          EXPORTING
            I_MSGID     = 'ZCARGA'
            I_MSGNO     = '259'
            I_MSGTY     = 'E'
            I_MSGV1     = LV_VALUE
            I_MSGV2     = LV_VALUE2
            I_FIELDNAME = LS_GOOD-FIELDNAME
            I_ROW_ID    = LS_GOOD-ROW_ID.

        ERROR_IN_DATA = ABAP_TRUE.
      ENDIF.

      <FS_VINCULAR>-QT_VINCULAR = LC_QT_VINCULAR.

    ENDLOOP.

  ENDMETHOD.

ENDCLASS.                    "LCL_EVENT_RECEIVER_8003A IMPLEMENTATION



*&---------------------------------------------------------------------*
*&      Module  STATUS_8003  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_8003 OUTPUT.

*  DATA: IT_FUNCTION_8003 TYPE UI_FUNCTIONS.
*
*  CLEAR: IT_FUNCTION_8003[].
*  APPEND CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL TO IT_FUNCTION_8003.
*
*  SET PF-STATUS 'PF8001'.
*  SET TITLEBAR 'TL8003'.
*
*  IF CTL_ALV_8003A IS INITIAL.
*
*    CREATE OBJECT CTL_CCCONTAINER_8003A
*      EXPORTING
*        CONTAINER_NAME = 'ALV_8003A'.
*
*    CREATE OBJECT CTL_ALV_8003A
*      EXPORTING
*        I_PARENT = CTL_CCCONTAINER_8003A.
*
*    PERFORM FILL_IT_FIELDCATALOG_8003A.
*
*    PERFORM FILL_GS_VARIANT_8003A.
*
*    GS_LAYOUT_8003A-SEL_MODE   = 'A'.
*    GS_LAYOUT_8003A-ZEBRA      = ABAP_FALSE.
*    GS_LAYOUT_8003A-CWIDTH_OPT = ABAP_FALSE.
*
*    CREATE OBJECT OBG_TOOLBAR_8003A
*      EXPORTING
*        IO_ALV_GRID = CTL_ALV_8003A.
*
*    SET HANDLER OBG_TOOLBAR_8003A->ON_TOOLBAR FOR CTL_ALV_8003A.
*    SET HANDLER OBG_TOOLBAR_8003A->HANDLE_USER_COMMAND FOR CTL_ALV_8003A.
*
*    PERFORM TEXTO_NOTA_SELECIONADA CHANGING GS_LAYOUT_8003A-GRID_TITLE.
*
*    CALL METHOD CTL_ALV_8003A->SET_TABLE_FOR_FIRST_DISPLAY
*      EXPORTING
*        IS_LAYOUT            = GS_LAYOUT_8003A
*        IS_VARIANT           = GS_VARIANT_8003A
*        I_SAVE               = 'A'
*        IT_TOOLBAR_EXCLUDING = IT_FUNCTION_8003
*      CHANGING
*        IT_FIELDCATALOG      = IT_FIELDCATALOG_8003A
*        IT_OUTTAB            = IT_TAKES_SALDO[].
*
*    CALL METHOD CTL_ALV_8003A->REGISTER_EDIT_EVENT
*      EXPORTING
*        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.
*
*    CALL METHOD CTL_ALV_8003A->REGISTER_EDIT_EVENT
*      EXPORTING
*        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.
*
*    CREATE OBJECT EVENT_HANDLER_8003A.
*    SET HANDLER EVENT_HANDLER_8003A->DATA_CHANGED_FINISHED FOR CTL_ALV_8003A.
*    SET HANDLER EVENT_HANDLER_8003A->DATA_CHANGED          FOR CTL_ALV_8003A.
*    SET HANDLER EVENT_HANDLER_8003A->SUBTOTAL_TEXT         FOR CTL_ALV_8003A.
*
*  ENDIF.
*
*  IF CTL_ALV_8003B IS INITIAL.
*
*    CREATE OBJECT CTL_CCCONTAINER_8003B
*      EXPORTING
*        CONTAINER_NAME = 'ALV_8003B'.
*
*    CREATE OBJECT CTL_ALV_8003B
*      EXPORTING
*        I_PARENT = CTL_CCCONTAINER_8003B.
*
*    PERFORM FILL_IT_FIELDCATALOG_8003B.
*
*    PERFORM FILL_GS_VARIANT_8003B.
*
*    GS_LAYOUT_8003B-SEL_MODE   = 'A'.
*    GS_LAYOUT_8003B-ZEBRA      = ABAP_FALSE.
*    GS_LAYOUT_8003B-CWIDTH_OPT = ABAP_FALSE.
*
*    CREATE OBJECT OBG_TOOLBAR_8003B
*      EXPORTING
*        IO_ALV_GRID = CTL_ALV_8003B.
*
*    SET HANDLER OBG_TOOLBAR_8003B->ON_TOOLBAR FOR CTL_ALV_8003B.
*    SET HANDLER OBG_TOOLBAR_8003B->HANDLE_USER_COMMAND FOR CTL_ALV_8003B.
*
*    CALL METHOD CTL_ALV_8003B->SET_TABLE_FOR_FIRST_DISPLAY
*      EXPORTING
*        IS_LAYOUT            = GS_LAYOUT_8003B
*        IS_VARIANT           = GS_VARIANT_8003B
*        I_SAVE               = 'A'
*        IT_TOOLBAR_EXCLUDING = IT_FUNCTION_8003
*      CHANGING
*        IT_FIELDCATALOG      = IT_FIELDCATALOG_8003B
*        IT_OUTTAB            = IT_TAKES_VINCU[].
*
*  ENDIF.
*
*  WA_STABLE_8003A-ROW = ABAP_TRUE.
*  WA_STABLE_8003A-COL = ABAP_TRUE.
*
*  CALL METHOD CTL_ALV_8003A->REFRESH_TABLE_DISPLAY
*    EXPORTING
*      IS_STABLE = WA_STABLE_8003A.
*
*  WA_STABLE_8003B-ROW = ABAP_TRUE.
*  WA_STABLE_8003B-COL = ABAP_TRUE.
*
*  CALL METHOD CTL_ALV_8003B->REFRESH_TABLE_DISPLAY
*    EXPORTING
*      IS_STABLE = WA_STABLE_8003B.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT_8003A
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_GS_VARIANT_8003A.

  GS_VARIANT_8003A-REPORT      = SY-REPID.
  GS_VARIANT_8003A-HANDLE      = '0312'.
  GS_VARIANT_8003A-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT_8003A-USERNAME    = ABAP_FALSE.
  GS_VARIANT_8003A-VARIANT     = ABAP_FALSE.
  GS_VARIANT_8003A-TEXT        = ABAP_FALSE.
  GS_VARIANT_8003A-DEPENDVARS  = ABAP_FALSE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG_8003A
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG_8003A .

  FIELD-SYMBOLS: <FS_CAT> TYPE LVC_S_FCAT.

  CLEAR: IT_FIELDCATALOG_8003A[].

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_ZSDT0001TK_ALV_VINC'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG_8003A.

  LOOP AT IT_FIELDCATALOG_8003A ASSIGNING <FS_CAT>.

    <FS_CAT>-TABNAME = 'ZDE_ZSDT0001TK_ALV_VINC'.

    CASE <FS_CAT>-FIELDNAME.
      WHEN 'ID_TAKEUP' OR 'NU_BLOCO'.
        <FS_CAT>-JUST      = 'C'.
        <FS_CAT>-OUTPUTLEN = 08.
      WHEN 'QT_BLOCO' OR 'QT_SALDO' OR 'QT_VINCULADA' .
        <FS_CAT>-DO_SUM = ABAP_TRUE.
        <FS_CAT>-OUTPUTLEN = 12.
      WHEN 'QT_VINCULAR'.
        <FS_CAT>-DO_SUM = ABAP_TRUE.
        <FS_CAT>-EDIT = ABAP_FALSE.
        <FS_CAT>-OUTPUTLEN = 12.
      WHEN 'QT_FARDOS'.
        <FS_CAT>-DO_SUM = ABAP_TRUE.
        <FS_CAT>-EDIT = ABAP_TRUE.
        <FS_CAT>-OUTPUTLEN = 08.
      WHEN OTHERS.
        <FS_CAT>-NO_OUT = ABAP_TRUE.
    ENDCASE.

  ENDLOOP.

ENDFORM.



*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT_8003A
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_GS_VARIANT_8003B.

  GS_VARIANT_8003B-REPORT      = SY-REPID.
  GS_VARIANT_8003B-HANDLE      = '0311'.
  GS_VARIANT_8003B-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT_8003B-USERNAME    = ABAP_FALSE.
  GS_VARIANT_8003B-VARIANT     = ABAP_FALSE.
  GS_VARIANT_8003B-TEXT        = ABAP_FALSE.
  GS_VARIANT_8003B-DEPENDVARS  = ABAP_FALSE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG_8003A
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG_8003B .

  DATA: LC_COL_POS  TYPE LVC_COLPOS.

  FIELD-SYMBOLS: <FS_CAT> TYPE LVC_S_FCAT.

  CLEAR: IT_FIELDCATALOG_8003B[].

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_ZSDT0001TK_ALV'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG_8003B.

  LOOP AT IT_FIELDCATALOG_8003B ASSIGNING <FS_CAT>.

    <FS_CAT>-TABNAME = 'ZDE_ZSDT0001TK_ALV'.

    CASE <FS_CAT>-FIELDNAME.
      WHEN 'ID_TAKEUP' OR 'NU_BLOCO'.
        <FS_CAT>-JUST = 'C'.
        <FS_CAT>-OUTPUTLEN = 08.
      WHEN 'QT_VINCULADA'.
        <FS_CAT>-DO_SUM = ABAP_TRUE.
        <FS_CAT>-OUTPUTLEN = 12.
      WHEN 'QT_FARDOS'.
        <FS_CAT>-DO_SUM = ABAP_TRUE.
        <FS_CAT>-OUTPUTLEN = 10.
      WHEN OTHERS.
        <FS_CAT>-NO_OUT = ABAP_TRUE.
    ENDCASE.

  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  VINCULAR_TAKE_UP_NOTA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_SALDO  text
*----------------------------------------------------------------------*
FORM VINCULAR_TAKE_UP_NOTA  USING P_WA_SALDO TYPE ZDE_ZSDT0001TK_ALV_VINC.

*  DATA: LC_TOTAL_VINC_NOTA TYPE ZDE_QTD_VINC_ALGODAO,
*        LC_QTD_PERMITIDA   TYPE ZDE_QTD_VINC_ALGODAO,
*        LC_QTD_FARDOS      TYPE ZDE_NM_FARDOS.
*
*  READ TABLE IT_NOTAS INDEX 1 INTO DATA(WA_NOTA_SELECIONADA).
*
*  CHECK WA_NOTA_SELECIONADA IS NOT INITIAL.
*
*  "Total já vinculado
*  LC_TOTAL_VINC_NOTA = 0.
*  LC_QTD_FARDOS      = 0.
*  LOOP AT IT_TAKES_VINCU INTO DATA(WA_VINCULADO) WHERE ID_NOTA EQ WA_NOTA_SELECIONADA-ID_NOTA.
*    ADD WA_VINCULADO-QT_VINCULADA TO LC_TOTAL_VINC_NOTA.
*    ADD WA_VINCULADO-QT_FARDOS TO LC_QTD_FARDOS.
*  ENDLOOP.
*
*  LC_QTD_PERMITIDA = WA_NOTA_SELECIONADA-NR_QUANTIDADE - LC_TOTAL_VINC_NOTA.
*  LC_QTD_FARDOS    = WA_NOTA_SELECIONADA-NR_FARDO - LC_QTD_FARDOS.
*
*  IF LC_QTD_PERMITIDA GT P_WA_SALDO-QT_VINCULAR.
*    LC_QTD_PERMITIDA = P_WA_SALDO-QT_VINCULAR.
*  ENDIF.
*
*  IF LC_QTD_FARDOS GT P_WA_SALDO-QT_FARDOS.
*    LC_QTD_FARDOS = P_WA_SALDO-QT_FARDOS.
*  ENDIF.
*
*  CHECK LC_QTD_PERMITIDA GT 0.
*
*  CHECK LC_QTD_FARDOS GT 0.
*
*  DATA: I_TAKEUP TYPE ZDE_ZSDT0001TK_ALV.
*  MOVE-CORRESPONDING WA_NOTA_SELECIONADA TO I_TAKEUP.
*  I_TAKEUP-ID_TAKEUP = P_WA_SALDO-ID_TAKEUP.
*  I_TAKEUP-NU_BLOCO = P_WA_SALDO-NU_BLOCO.
*  I_TAKEUP-QT_VINCULADA = LC_QTD_PERMITIDA.
*  I_TAKEUP-QT_FARDOS = P_WA_SALDO-QT_FARDOS.
*
*  TRY .
*      OBJETO->SET_ADD_TAKE_UP( EXPORTING I_TAKEUP = I_TAKEUP IMPORTING E_TAKEUP = DATA(E_TAKEUP) ).
*
*      CHECK E_TAKEUP IS NOT INITIAL.
*
*      READ TABLE IT_TAKES_VINCU ASSIGNING FIELD-SYMBOL(<FS_TAKE>)
*      WITH KEY ID_NOTA = E_TAKEUP-ID_NOTA
*               ID_TAKEUP = E_TAKEUP-ID_TAKEUP
*               NU_BLOCO = E_TAKEUP-NU_BLOCO.
*
*      IF SY-SUBRC IS INITIAL.
*        MOVE-CORRESPONDING E_TAKEUP TO <FS_TAKE>.
*      ELSE.
*        APPEND E_TAKEUP TO IT_TAKES_VINCU.
*      ENDIF.
*
*    CATCH ZCX_CARGA INTO EX_CARGA.    "
*      EX_CARGA->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S'  I_MSGTY_DISPLAY = 'E' ).
*  ENDTRY.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  REAJUSTAR_SALDOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM REAJUSTAR_SALDOS .

*  DATA: LC_TOTAL_VINC TYPE ZDE_QTD_VINC_ALGODAO.
*
*  LOOP AT IT_TAKES_SALDO ASSIGNING FIELD-SYMBOL(<FS_TAKES>).
*
*    LC_TOTAL_VINC = 0.
*    LOOP AT IT_TAKES_VINCU INTO DATA(WA_VINCULADO)
*      WHERE ID_TAKEUP = <FS_TAKES>-ID_TAKEUP
*        AND NU_BLOCO  = <FS_TAKES>-NU_BLOCO.
*      ADD WA_VINCULADO-QT_VINCULADA TO LC_TOTAL_VINC.
*    ENDLOOP.
*
*    "QT_VINCULADA_ORIGINAL       somente carregada após o retorno do WebService
*    "QT_VINCULADA_NOTA_ORIGINAL  somente carregada após o retorno do WebService
*
*    <FS_TAKES>-QT_VINCULADA_NOTA = LC_TOTAL_VINC.
*    <FS_TAKES>-QT_SALDO     = ( <FS_TAKES>-QT_BLOCO - <FS_TAKES>-QT_VINCULADA_ORIGINAL ) - LC_TOTAL_VINC.
*    <FS_TAKES>-QT_VINCULADA = <FS_TAKES>-QT_VINCULADA_ORIGINAL + ( <FS_TAKES>-QT_VINCULADA_NOTA - <FS_TAKES>-QT_VINCULADA_ORIGINAL ).
*    <FS_TAKES>-QT_VINCULAR  = ( <FS_TAKES>-QT_BLOCO - <FS_TAKES>-QT_VINCULADA ).
*
*  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  TEXTO_NOTA_SELECIONADA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_LAYOUT_8003B_GRID_TITLE  text
*----------------------------------------------------------------------*
FORM TEXTO_NOTA_SELECIONADA  CHANGING P_TITLE TYPE LVC_TITLE.

  READ TABLE IT_NOTAS INDEX 1 INTO DATA(WA_NOTA_SELECIONADA).

  CHECK WA_NOTA_SELECIONADA IS NOT INITIAL.

  DATA: LC_DATA TYPE C LENGTH 10.
  WRITE WA_NOTA_SELECIONADA-DT_EMISSAO TO LC_DATA.

  DATA(P_NOTA) = ZCL_STRING=>TRIM( I_STR = CONV #( WA_NOTA_SELECIONADA-NR_NOTA ) ) && '-' &&
                 ZCL_STRING=>TRIM( I_STR = CONV #( WA_NOTA_SELECIONADA-NM_SERIE ) ).

  CONCATENATE 'Nota:' P_NOTA 'Dt.Emissão:' LC_DATA INTO P_TITLE SEPARATED BY SPACE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  REAJUSTAR_ORIGINAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM REAJUSTAR_ORIGINAL .

  CHECK OBJETO->CARGA-ID_CARGA IS NOT INITIAL.

  SELECT * INTO TABLE @DATA(IT_ZSDT0001TK)
    FROM ZSDT0001TK
   WHERE ID_CARGA EQ @OBJETO->CARGA-ID_CARGA.

  LOOP AT IT_ZSDT0001TK INTO DATA(WA_ZSDT0001TK).

    READ TABLE IT_TAKES_SALDO WITH KEY ID_TAKEUP = WA_ZSDT0001TK-ID_TAKEUP NU_BLOCO = WA_ZSDT0001TK-NU_BLOCO ASSIGNING FIELD-SYMBOL(<FS_TAKEUP>).
    IF SY-SUBRC IS INITIAL.
      ADD WA_ZSDT0001TK-QT_VINCULADA TO <FS_TAKEUP>-QT_VINCULADA_NOTA_ORIGINAL.
    ENDIF.

  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_8003_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_8003_EXIT INPUT.

*  CLEAR: OK_CODE, CK_ADD_TAKE_UP.

  PERFORM LIMPAR_8003.

  LEAVE TO SCREEN 0.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  LIMPAR_8003
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM LIMPAR_8003 .

  CLEAR: OBG_TOOLBAR_8003B, EVENT_HANDLER_8003A, OBG_TOOLBAR_8003A.

  IF CTL_ALV_8003B IS NOT INITIAL.
    CTL_ALV_8003B->FREE(
      EXCEPTIONS
        CNTL_ERROR        = 1
        CNTL_SYSTEM_ERROR = 2
        OTHERS            = 3
    ).
  ENDIF.
  CLEAR: CTL_ALV_8003B.

  IF CTL_CCCONTAINER_8003B IS NOT INITIAL.
    CTL_CCCONTAINER_8003B->FREE(
      EXCEPTIONS
        CNTL_ERROR        = 1
        CNTL_SYSTEM_ERROR = 2
        OTHERS            = 3
    ).
  ENDIF.
  CLEAR: CTL_CCCONTAINER_8003B.


  IF CTL_ALV_8003A IS NOT INITIAL.
    CTL_ALV_8003A->FREE(
      EXCEPTIONS
        CNTL_ERROR        = 1
        CNTL_SYSTEM_ERROR = 2
        OTHERS            = 3
    ).
  ENDIF.
  CLEAR: CTL_ALV_8003A.

  IF CTL_CCCONTAINER_8003A IS NOT INITIAL.
    CTL_CCCONTAINER_8003A->FREE(
      EXCEPTIONS
        CNTL_ERROR        = 1
        CNTL_SYSTEM_ERROR = 2
        OTHERS            = 3
    ).
  ENDIF.
  CLEAR: CTL_CCCONTAINER_8003A.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_8003  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_8003 INPUT.

  CASE OK_CODE.
    WHEN 'CONF'.
      CLEAR: OK_CODE.
      "CK_ADD_TAKE_UP = ABAP_TRUE.
      PERFORM LIMPAR_8003.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  TAKE_UP_DISPONIVEIS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM TAKE_UP_DISPONIVEIS .

  READ TABLE IT_NOTAS INDEX 1 INTO DATA(WA_NOTA_SELECIONADA).

  CHECK WA_NOTA_SELECIONADA IS NOT INITIAL.

  "Consumir WebService
  CLEAR: IT_TAKES_SALDO[], IT_TAKES_SALDO.

  DATA: OB_WEB_SERVICE TYPE REF TO ZCL_WEBSERVICE.

  TRY .

      DATA(LC_ID_PRODUTO) = ZDE_ZSDT0001CG_ALV-ID_PRODUTO.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          INPUT  = LC_ID_PRODUTO
        IMPORTING
          OUTPUT = LC_ID_PRODUTO.

      CREATE OBJECT OB_WEB_SERVICE.
      OB_WEB_SERVICE->SET_TIPO( I_TIPO = 'O' ).
      OB_WEB_SERVICE->SET_SERVICO( I_SERVICO = 'SA' ).
      DATA(VAR_URL)  = OB_WEB_SERVICE->GET_URI( ) &&
                       '/' && ZDE_ZSDT0001CG_ALV-NR_SAFRA &&
                       '/' && WA_NOTA_SELECIONADA-ID_FORNECEDOR &&
                       '/' && LC_ID_PRODUTO .
      "&& '/' && ZDE_ZSDT0001CG_ALV-ID_BRANCH.

      DATA(VAR_HTTP) = OB_WEB_SERVICE->URL( I_URL = CONV #( VAR_URL ) ). "Recupear qual é a URL que é preciso atribuir ao HEADER do WebService.
      OB_WEB_SERVICE->ZIF_WEBSERVICE~ABRIR_CONEXAO( I_HTTP = VAR_HTTP ).

      CALL METHOD VAR_HTTP->REQUEST->SET_HEADER_FIELD
        EXPORTING
          NAME  = '~request_method'
          VALUE = 'GET'.

      OB_WEB_SERVICE->ZIF_WEBSERVICE~CONSULTAR(
         EXPORTING
           I_HTTP                     = VAR_HTTP
         IMPORTING
           E_CODE                     = DATA(E_CODE)
           E_REASON                   = DATA(E_REASON)
         RECEIVING
           E_RESULTADO                = DATA(JSON_RETORNO)
         EXCEPTIONS
           HTTP_COMMUNICATION_FAILURE = 1
           HTTP_INVALID_STATE         = 2
           HTTP_PROCESSING_FAILED     = 3
           HTTP_INVALID_TIMEOUT       = 4
           OTHERS                     = 5 ).

      IF SY-SUBRC IS NOT INITIAL.
        CLEAR OB_WEB_SERVICE.
        MESSAGE ID SY-MSGID TYPE 'I' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 DISPLAY LIKE SY-MSGTY.
        EXIT.
      ENDIF.

      CLEAR OB_WEB_SERVICE.

    CATCH ZCX_WEBSERVICE INTO DATA(LC_EXCEPTION).
      CLEAR OB_WEB_SERVICE.
  ENDTRY.

  IF E_CODE EQ '200'.

    DATA: IT_SALDO_OPUS TYPE ZDE_LINHA_SALDO_OPUS_T,
          WA_ALV_VINC   TYPE ZDE_ZSDT0001TK_ALV_VINC.

    /UI2/CL_JSON=>DESERIALIZE( EXPORTING JSON = JSON_RETORNO CHANGING DATA = IT_SALDO_OPUS ).

    LOOP AT IT_SALDO_OPUS INTO DATA(WA_SALDO_OPUS).
      CLEAR: WA_ALV_VINC.

      CONDENSE WA_SALDO_OPUS-CODIGOTAKEUP.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          INPUT  = WA_SALDO_OPUS-CODIGOTAKEUP
        IMPORTING
          OUTPUT = WA_SALDO_OPUS-CODIGOTAKEUP.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          INPUT  = WA_SALDO_OPUS-NUMEROBLOCO
        IMPORTING
          OUTPUT = WA_SALDO_OPUS-NUMEROBLOCO.

      WA_ALV_VINC-ID_TAKEUP    = WA_SALDO_OPUS-CODIGOTAKEUP.
      WA_ALV_VINC-NU_BLOCO     = WA_SALDO_OPUS-NUMEROBLOCO.
      WA_ALV_VINC-QT_BLOCO     = WA_SALDO_OPUS-QUANTIDADESALDOVOLUME.
      WA_ALV_VINC-QT_SALDO     = WA_SALDO_OPUS-QUANTIDADESALDOVOLUME.
      WA_ALV_VINC-QT_VINCULADA = 0.
      WA_ALV_VINC-QT_FARDOS    = 0.
      WA_ALV_VINC-QT_VINCULAR  = 0.
      APPEND WA_ALV_VINC TO IT_TAKES_SALDO.
    ENDLOOP.

    "ID_TAKEUP  1 Tipo  ZDE_ID_TAKEUP NUMC  10  0 Identificador do Take UP
    "NU_BLOCO 1 Tipo  ZDE_NM_BLOCO_ALGODAO  NUMC  10  0 Número do Bloco de Algodão
    "QT_BLOCO 1 Tipo  ZDE_QTD_BLOCO_ALGODAO DEC 9 0 Qtd. Total Bloco
    "QT_SALDO 1 Tipo  ZDE_QTD_SALDO_ALGODAO DEC 9 0 Qtd. Saldo Bloco
    "QT_VINCULADA 1 Tipo  ZDE_QTD_VINC_ALGODAO  DEC 9 0 Quantidade Vinculada de Algodão
    "QT_VINCULAR  1 Tipo  ZDE_QTD_VINCULAR_ALGODAO  DEC 9 0 Quantidade a Vincular de Algodão
    "QT_VINCULADA_NOTA  1 Tipo  ZDE_QTD_VINC_ALGODAO  DEC 9 0 Quantidade Vinculada de Algodão
    "QT_VINCULADA_ORIGINAL  1 Tipo  ZDE_QTD_VINC_ALGODAO  DEC 9 0 Quantidade Vinculada de Algodão
    "QT_VINCULADA_NOTA_ORIGINAL 1 Tipo  ZDE_QTD_VINC_ALGODAO  DEC 9 0 Quantidade Vinculada de Algodão
    "IT_TAKES_SALDO
    "APPEND VALUE #( ID_TAKEUP = 84 NU_BLOCO = 01 QT_BLOCO = 500000 QT_SALDO = 500000 QT_VINCULADA = 0 QT_VINCULAR  = 500000 ) TO IT_TAKES_SALDO.
    "APPEND VALUE #( ID_TAKEUP = 85 NU_BLOCO = 23 QT_BLOCO = 550000 QT_SALDO = 550000 QT_VINCULADA = 0 QT_VINCULAR  = 550000 ) TO IT_TAKES_SALDO.

  ELSE.
    DATA(LC_TEXTO_ERRO) = |OPUS API: { E_REASON }|.
    MESSAGE LC_TEXTO_ERRO TYPE 'S' DISPLAY LIKE 'E'.
  ENDIF.

  PERFORM REAJUSTAR_ORIGINAL.
  PERFORM REAJUSTAR_SALDOS.

  CTL_ALV_8003A->REFRESH_TABLE_DISPLAY( ).

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  TAKE_UP_VINCULAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM TAKE_UP_VINCULAR .

  DATA: ET_INDEX_ROWS	TYPE LVC_T_ROW.

  CALL METHOD CTL_ALV_8003A->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = ET_INDEX_ROWS.

  LOOP AT ET_INDEX_ROWS INTO DATA(WA_LINHA) WHERE ROWTYPE IS INITIAL.

    READ TABLE IT_TAKES_SALDO ASSIGNING FIELD-SYMBOL(<FS_VINCULAR>) INDEX WA_LINHA-INDEX.

    MOVE-CORRESPONDING <FS_VINCULAR> TO ZDE_ZSDT0001TK_ALV_VINC.

    CLEAR: CK_CONFERIU_FARDOS.

    IF ZDE_ZSDT0001TK_ALV_VINC-QT_FARDOS IS INITIAL.
      CALL SCREEN 9008 STARTING AT 40 10.
    ELSE.
      CK_CONFERIU_FARDOS = ABAP_TRUE.
    ENDIF.

    IF CK_CONFERIU_FARDOS EQ ABAP_TRUE.
      PERFORM VINCULAR_TAKE_UP_NOTA USING ZDE_ZSDT0001TK_ALV_VINC.
      <FS_VINCULAR>-QT_VINCULAR = 0.
      <FS_VINCULAR>-QT_FARDOS   = 0.
    ENDIF.

  ENDLOOP.

  PERFORM REAJUSTAR_SALDOS.

  WA_STABLE_8003B-ROW = ABAP_TRUE.
  WA_STABLE_8003B-COL = ABAP_TRUE.

  CALL METHOD CTL_ALV_8003B->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE = WA_STABLE_8003B.

  WA_STABLE_8003A-ROW = ABAP_TRUE.
  WA_STABLE_8003A-COL = ABAP_TRUE.

  CALL METHOD CTL_ALV_8003A->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE = WA_STABLE_8003A.

ENDFORM.
