FUNCTION Z_GRC_GET_STATUS_DOC.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(I_DOCNUM) TYPE  J_1BDOCNUM OPTIONAL
*"     REFERENCE(I_OBJ_KEY) TYPE  AWKEY OPTIONAL
*"  EXPORTING
*"     REFERENCE(E_STATUS) TYPE  STRING
*"     REFERENCE(E_STATUS_DESC) TYPE  STRING
*"     REFERENCE(E_LINK_PDF) TYPE  STRING
*"     REFERENCE(E_LINK_XML) TYPE  STRING
*"     REFERENCE(E_CHAVE) TYPE  STRING
*"     REFERENCE(E_PROTOCOLO) TYPE  STRING
*"     REFERENCE(E_DOCNUM_ESTORNO) TYPE  STRING
*"     REFERENCE(E_DOCNUM) TYPE  STRING
*"  RAISING
*"      ZCX_DOC_ELETRONICO
*"----------------------------------------------------------------------
  DATA: LVA_DOCNUM TYPE J_1BDOCNUM.

  CLEAR: E_STATUS, E_LINK_PDF, E_LINK_XML, E_CHAVE, E_PROTOCOLO, LVA_DOCNUM.

  IF I_OBJ_KEY IS NOT INITIAL.
    SELECT SINGLE *
      FROM ZSDT0231 INTO @DATA(LWA_ZSDT0231)
     WHERE OBJ_KEY EQ @I_OBJ_KEY.

    IF ( SY-SUBRC EQ 0 ) AND ( LWA_ZSDT0231-DOCNUM IS NOT INITIAL ).
      LVA_DOCNUM = LWA_ZSDT0231-DOCNUM.
    ENDIF.

  ELSEIF I_DOCNUM IS NOT INITIAL.
    LVA_DOCNUM = I_DOCNUM.
  ENDIF.

  DATA(INS_NFE) = ZCL_NFE=>ZIF_DOC_ELETRONICO~GET_INSTANCE( I_DOCNUM = LVA_DOCNUM ).
  INS_NFE->SET_REGISTRO( EXPORTING I_DOCNUM = LVA_DOCNUM I_SEM_BLOQUEIO = ABAP_TRUE ).

  E_DOCNUM = LVA_DOCNUM.

  SELECT SINGLE * INTO @DATA(WA_J_1BNFDOC)
    FROM J_1BNFDOC
   WHERE DOCREF EQ @LVA_DOCNUM.

  IF SY-SUBRC IS INITIAL.
    E_DOCNUM_ESTORNO = WA_J_1BNFDOC-DOCNUM.
  ENDIF.

  "Verificar se está Autorizado o Uso
  TRY .
      INS_NFE->GET_CK_AUTORIZADO_USO(
        )->GET_STATUS( IMPORTING E_STATUS = DATA(E_STATUS_OBJ) E_STATUS_DESC = DATA(E_STATUS_DESC_OBJ)   " Status Documento Eletrônico
        )->GET_URLS_DOCS(
           IMPORTING
             E_LINK_PDF  = E_LINK_PDF
             E_LINK_XML  = E_LINK_XML
        ).
      E_STATUS = E_STATUS_OBJ.
      E_STATUS_DESC = E_STATUS_DESC_OBJ.

      E_CHAVE = INS_NFE->AT_INFO_DOC_ELETRONICO-REGIO &&
                INS_NFE->AT_INFO_DOC_ELETRONICO-NFYEAR &&
                INS_NFE->AT_INFO_DOC_ELETRONICO-NFMONTH &&
                INS_NFE->AT_INFO_DOC_ELETRONICO-STCD1 &&
                INS_NFE->AT_INFO_DOC_ELETRONICO-MODEL &&
                INS_NFE->AT_INFO_DOC_ELETRONICO-SERIE &&
                INS_NFE->AT_INFO_DOC_ELETRONICO-NFNUM9 &&
                INS_NFE->AT_INFO_DOC_ELETRONICO-DOCNUM9 &&
                INS_NFE->AT_INFO_DOC_ELETRONICO-CDV.

      E_PROTOCOLO = INS_NFE->AT_INFO_DOC_ELETRONICO-AUTHCOD.

      CLEAR: INS_NFE.
      EXIT.
    CATCH ZCX_DOC_ELETRONICO.
  ENDTRY.

  "Verificar se está Autorizado o Cancelamento
  TRY .
      INS_NFE->GET_CK_AUTORIZADO_CANCEL(
        )->GET_STATUS( IMPORTING E_STATUS = E_STATUS_OBJ  E_STATUS_DESC = E_STATUS_DESC_OBJ   " Status Documento Eletrônico
        ).
      E_STATUS = E_STATUS_OBJ.
      E_STATUS_DESC = E_STATUS_DESC_OBJ.
      CLEAR: INS_NFE.
      EXIT.
    CATCH ZCX_DOC_ELETRONICO.
  ENDTRY.

  "Verificar se está Autorizado o Cancelamento
  INS_NFE->GET_STATUS( IMPORTING E_STATUS = E_STATUS_OBJ E_STATUS_DESC = E_STATUS_DESC_OBJ
       )->GET_URLS_DOCS( IMPORTING E_LINK_PDF  = E_LINK_PDF E_LINK_XML  = E_LINK_XML
       ).

  E_STATUS = E_STATUS_OBJ.
  E_STATUS_DESC = E_STATUS_DESC_OBJ.
  CLEAR: INS_NFE.

ENDFUNCTION.
