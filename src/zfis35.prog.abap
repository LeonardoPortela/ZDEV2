*&---------------------------------------------------------------------*
*& Report  ZFIS35
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZFIS35.

TABLES: ZSDT0001.


TYPES: BEGIN OF TY_SAIDA,
         DOCNUM       TYPE J_1BNFDOC-DOCNUM,
         DT_MOVIMENTO TYPE ZSDT0001-DT_MOVIMENTO,
         NR_ROMANEIO  TYPE ZSDT0001-NR_ROMANEIO,
         BRANCH       TYPE J_1BNFDOC-BRANCH,
         PLACA_CAV    TYPE ZSDT0001-PLACA_CAV,
         NFENUM       TYPE J_1BNFDOC-NFENUM,
         SERIES       TYPE J_1BNFDOC-SERIES,
         DIRECT(1)    TYPE C,
         CFOP         TYPE J_1BNFLIN-CFOP,
         STCD2        TYPE LFA1-STCD1,
         STCD3        TYPE LFA1-STCD3,
         LIFNR        TYPE LFA1-LIFNR,
         NAME1        TYPE LFA1-NAME1,
         ORT01        TYPE LFA1-ORT01,
         REGIO        TYPE LFA1-REGIO,
         MATKL        TYPE J_1BNFLIN-MATNR,
         MAKTX        TYPE J_1BNFLIN-MAKTX,
         GRUPO_MER    TYPE MARA-MATKL,
         WGBEZ60      TYPE T023T-WGBEZ60,
         PSTDAT       TYPE J_1BNFDOC-PSTDAT,
         DOCDAT       TYPE J_1BNFDOC-DOCDAT,
         MENGE        TYPE J_1BNFLIN-MENGE,
         NETPR        TYPE J_1BNFLIN-NETPR,
         NETWR        TYPE J_1BNFLIN-NETWR,
         BASE         TYPE J_1BNFSTX-BASE,
         TAXVAL       TYPE J_1BNFSTX-TAXVAL,
         OTHBAS       TYPE J_1BNFSTX-OTHBAS,
         EXCBAS       TYPE J_1BNFSTX-EXCBAS,
         TAXVAL_PIS   TYPE J_1BNFSTX-TAXVAL,
         TAXVAL_CONF  TYPE J_1BNFSTX-TAXVAL,
         DOC_REM      TYPE ZSDT0001-DOC_REM,
         FATURA_PROD  TYPE ZSDT0001-FATURA_PROD,
         REFKEY       TYPE J_1BNFLIN-REFKEY,
         VBELN        TYPE ZSDT0001-VBELN,
         EBELN        TYPE ZFIWRT0008-EBELN,
         NR_PED_TRANS TYPE ZSDT0001-VBELN,
       END OF TY_SAIDA.

TYPES: BEGIN OF TY_J_1BNFDOC,
         DOCNUM TYPE J_1BNFDOC-DOCNUM,
         DOCTYP TYPE J_1BNFDOC-DOCTYP,
         DIRECT TYPE J_1BNFDOC-DIRECT,
         DOCDAT TYPE J_1BNFDOC-DOCDAT,
         PSTDAT TYPE J_1BNFDOC-PSTDAT,
         BUKRS  TYPE J_1BNFDOC-BUKRS,
         BRANCH TYPE J_1BNFDOC-BRANCH,
         NFENUM TYPE J_1BNFDOC-NFENUM,
         NFE    TYPE J_1BNFDOC-NFE,
         SERIES TYPE J_1BNFDOC-SERIES,
         PARVW  TYPE J_1BNFDOC-PARVW,
         PARID  TYPE J_1BNFDOC-PARID,
         CGC    TYPE J_1BNFDOC-CGC,
         CPF    TYPE J_1BNFDOC-CPF,
         STAINS TYPE J_1BNFDOC-STAINS,
         NAME1  TYPE J_1BNFDOC-NAME1,
         ORT01  TYPE J_1BNFDOC-ORT01,
         REGIO  TYPE J_1BNFDOC-REGIO,

       END OF TY_J_1BNFDOC.

TYPES: BEGIN OF TY_J_1BNFLIN,
         DOCNUM TYPE J_1BNFLIN-DOCNUM,
         ITMNUM TYPE J_1BNFLIN-ITMNUM,
         MATKL  TYPE J_1BNFLIN-MATKL,
         MAKTX  TYPE J_1BNFLIN-MAKTX,
         CFOP   TYPE J_1BNFLIN-CFOP,
         REFTYP TYPE J_1BNFLIN-REFTYP,
         REFKEY TYPE J_1BNFLIN-REFKEY,
         MENGE  TYPE J_1BNFLIN-MENGE,
         MEINS  TYPE J_1BNFLIN-MEINS,
         NETPR  TYPE J_1BNFLIN-NETPR,
         NETWR  TYPE J_1BNFLIN-NETWR,
         MATNR  TYPE J_1BNFLIN-MATNR,
       END OF TY_J_1BNFLIN.

TYPES: BEGIN OF TY_J_1BNFSTX,
         DOCNUM TYPE J_1BNFSTX-DOCNUM,
         TAXTYP TYPE J_1BNFSTX-TAXTYP,
         TAXVAL TYPE J_1BNFSTX-TAXVAL,
         BASE   TYPE J_1BNFSTX-BASE,
         OTHBAS TYPE J_1BNFSTX-OTHBAS,
         EXCBAS TYPE J_1BNFSTX-EXCBAS,
       END OF TY_J_1BNFSTX.


TYPES:  BEGIN OF TY_ZFIWRT0008,
          SEQ_LCTO      TYPE ZFIWRT0008-SEQ_LCTO,
          EBELN         TYPE ZFIWRT0008-EBELN,
          CH_REFERENCIA TYPE ZFIWRT0008-CH_REFERENCIA,
        END OF TY_ZFIWRT0008.


TYPES: BEGIN OF TY_ZSDT0001,
         BUKRS         TYPE ZSDT0001-BUKRS,
         DT_MOVIMENTO  TYPE ZSDT0001-DT_MOVIMENTO,
         PARID         TYPE ZSDT0001-PARID,
         DOC_REM       TYPE ZSDT0001-DOC_REM,
         FATURA_PROD   TYPE ZSDT0001-FATURA_PROD,
         NRO_NF_PROD   TYPE ZSDT0001-NRO_NF_PROD,
         NRO_NF_FRETE  TYPE ZSDT0001-NRO_NF_FRETE,
         NRO_NF_REM    TYPE ZSDT0001-NRO_NF_REM,
         EBELN         TYPE ZSDT0001-EBELN,
         CH_REFERENCIA TYPE ZSDT0001-CH_REFERENCIA,
         NR_ROMANEIO   TYPE ZSDT0001-NR_ROMANEIO,
         PLACA_CAV     TYPE ZSDT0001-PLACA_CAV,
         VBELN         TYPE ZSDT0001-VBELN,
         MATNR         TYPE ZSDT0001-MATNR,
         MATKL         TYPE MARA-MATKL,
       END OF TY_ZSDT0001.


TYPES: BEGIN OF TY_MARA,
         MATNR TYPE MARA-MATNR,
         MATKL TYPE MARA-MATKL,
       END OF TY_MARA.

TYPES: BEGIN OF TY_T023T,
         SPRAS   TYPE  T023T-SPRAS,
         MATKL   TYPE T023T-MATKL,
         WGBEZ60 TYPE T023T-WGBEZ60,
       END OF TY_T023T.

TYPES: BEGIN OF TY_VBAK,
         VBELN TYPE VBAK-VBELN,
       END OF TY_VBAK.


TYPES: BEGIN OF TY_VBFA,
         VBELV     TYPE VBFA-VBELN,
         VBTYP_V   TYPE VBFA-VBTYP_V,
         VBTYP_N   TYPE VBFA-VBTYP_N,
         ERDAT     TYPE VBFA-ERDAT,
         VBELN(35) TYPE C,
       END OF TY_VBFA.




DATA: T_SAIDA        TYPE TABLE OF TY_SAIDA,
      T_J_1BNFDOC    TYPE TABLE OF TY_J_1BNFDOC,
      T_J_1BNFDOC_CT TYPE TABLE OF TY_J_1BNFDOC,
      T_J_1BNFDOC_DT TYPE TABLE OF TY_J_1BNFDOC,
      T_J_1BNFLIN    TYPE TABLE OF TY_J_1BNFLIN,
      T_J_1BNFLIN_CT TYPE TABLE OF TY_J_1BNFLIN,
      T_J_1BNFLIN_DT TYPE TABLE OF TY_J_1BNFLIN,
      T_J_1BNFSTX    TYPE TABLE OF TY_J_1BNFSTX,
      T_J_1BNFSTX_CT TYPE TABLE OF TY_J_1BNFSTX,
      T_J_1BNFSTX_DT TYPE TABLE OF TY_J_1BNFSTX,
      T_ZFIWRT0008   TYPE TABLE OF TY_ZFIWRT0008,
      T_ZSDT0001     TYPE TABLE OF TY_ZSDT0001,
      T_ZSDT0001_AUX TYPE TABLE OF TY_ZSDT0001,
      T_ZSDT0001_CT  TYPE TABLE OF TY_ZSDT0001,
      T_ZSDT0001_DT  TYPE TABLE OF TY_ZSDT0001,
      T_MARA         TYPE TABLE OF TY_MARA,
      T_MARA_CT      TYPE TABLE OF TY_MARA,
      T_MARA_DT      TYPE TABLE OF TY_MARA,
      T_T023T        TYPE TABLE OF TY_T023T,
      T_T023T_DT     TYPE TABLE OF TY_T023T,
      T_T023T_CT     TYPE TABLE OF TY_T023T,
      T_VBAK         TYPE TABLE OF TY_VBAK,
      T_VBFA         TYPE TABLE OF TY_VBFA.



DATA:  WA_SAIDA        TYPE TY_SAIDA,
       WA_J_1BNFDOC    TYPE TY_J_1BNFDOC,
       WA_J_1BNFDOC_CT TYPE TY_J_1BNFDOC,
       WA_J_1BNFDOC_DT TYPE TY_J_1BNFDOC,
       WA_J_1BNFLIN    TYPE TY_J_1BNFLIN,
       WA_J_1BNFLIN_CT TYPE TY_J_1BNFLIN,
       WA_J_1BNFLIN_DT TYPE TY_J_1BNFLIN,
       WA_J_1BNFSTX    TYPE TY_J_1BNFSTX,
       WA_J_1BNFSTX_CT TYPE TY_J_1BNFSTX,
       WA_J_1BNFSTX_DT TYPE TY_J_1BNFSTX,
       WA_ZFIWRT0008   TYPE TY_ZFIWRT0008,
       WA_ZSDT0001     TYPE TY_ZSDT0001,
       WA_ZSDT0001_AUX TYPE TY_ZSDT0001,
       WA_ZSDT0001_CT  TYPE TY_ZSDT0001,
       WA_ZSDT0001_DT  TYPE TY_ZSDT0001,
       WA_MARA         TYPE TY_MARA,
       WA_MARA_CT      TYPE TY_MARA,
       WA_MARA_DT      TYPE TY_MARA,
       WA_T023T        TYPE TY_T023T,
       WA_T023T_CT     TYPE TY_T023T,
       WA_T023T_DT     TYPE TY_T023T,
       WA_VBAK         TYPE TY_VBAK,
       WA_VBFA         TYPE TY_VBFA.


DATA: GS_VARIANT   TYPE DISVARIANT,
      VARIANTE     LIKE DISVARIANT,
      GS_VARIANT_C TYPE DISVARIANT.



DATA: G_CUSTOM_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      DG_SPLITTER_1      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_PARENT_1        TYPE REF TO CL_GUI_CONTAINER,
      DG_SPLITTER_2      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_PARENT_2        TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_2A       TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_ALV      TYPE REF TO CL_GUI_CONTAINER,
      PICTURE            TYPE REF TO CL_GUI_PICTURE,
      GS_LAYOUT          TYPE LVC_S_LAYO,
      CTL_ALV            TYPE REF TO CL_GUI_ALV_GRID,
      IT_FIELDCATALOG    TYPE LVC_T_FCAT,
      WA_FIELDCATALOG    TYPE LVC_S_FCAT,
      GS_SCROLL_COL      TYPE  LVC_S_COL,
      GS_SCROLL_ROW      TYPE LVC_S_ROID,
      IT_EXCLUDE_FCODE   TYPE UI_FUNCTIONS,
      WA_EXCLUDE_FCODE   LIKE LINE OF IT_EXCLUDE_FCODE,
      DG_DYNDOC_ID       TYPE REF TO CL_DD_DOCUMENT,
      TABLE_ELEMENT      TYPE REF TO CL_DD_TABLE_ELEMENT,
      COLUMN             TYPE REF TO CL_DD_AREA,
      TABLE_ELEMENT2     TYPE REF TO CL_DD_TABLE_ELEMENT,
      COLUMN_1           TYPE REF TO CL_DD_AREA,
      COLUMN_2           TYPE REF TO CL_DD_AREA,
      COLUMN_3           TYPE REF TO CL_DD_AREA,
      DG_HTML_CNTRL      TYPE REF TO CL_GUI_HTML_VIEWER,
      IT_HEADER          TYPE KKBLO_T_LISTHEADER WITH HEADER LINE.   "Cabe√ßalho

DATA:IT_FCAT    TYPE TABLE OF LVC_S_FCAT.


DATA: C_ALV_TOOLBARMANAGER TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,
      TY_TOOBAR            TYPE STB_BUTTON.

DATA: V_REFKEY       TYPE  ZFIWRT0008-SEQ_LCTO,
      V_PARID(4)     TYPE C,
      V_PARID_RESULT TYPE J_1BNFDOC-PARID.




SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS:
                P_BUKRS       FOR ZSDT0001-BUKRS OBLIGATORY NO INTERVALS,
                DT_MOV        FOR ZSDT0001-DT_MOVIMENTO OBLIGATORY,
                P_NR_ROM      FOR ZSDT0001-NR_ROMANEIO,
                P_PONTO       FOR ZSDT0001-PARID OBLIGATORY NO INTERVALS,
                P_FILIAL      FOR ZSDT0001-BRANCH,
                P_CLI         FOR ZSDT0001-ID_CLI_DEST NO INTERVALS,
                P_MAT         FOR ZSDT0001-MATNR NO INTERVALS,
                P_NUMOV       FOR ZSDT0001-VBELN NO INTERVALS,
                P_PEDIDO      FOR ZSDT0001-EBELN NO INTERVALS,
                P_PEDIMP      FOR ZSDT0001-EBELN NO INTERVALS.

SELECTION-SCREEN END OF BLOCK B1.


SELECTION-SCREEN: BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-002.
PARAMETER: P_VARIA TYPE DISVARIANT-VARIANT.
SELECTION-SCREEN: END OF BLOCK B2.


DATA: VG_REPID   LIKE SY-REPID,
      VG_VARIANT TYPE DISVARIANT.

IF VARIANTE IS INITIAL.
  VARIANTE-REPORT = SY-REPID.
  VARIANTE-VARIANT = P_VARIA.
ENDIF.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_VARIA.

  VG_REPID         = SY-REPID.
  VG_VARIANT-REPORT = VG_REPID.

  IF ( P_VARIA IS NOT INITIAL ).
    VG_VARIANT-VARIANT = P_VARIA.
  ENDIF.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      IS_VARIANT    = VARIANTE
      I_SAVE        = 'A'
    IMPORTING
      ES_VARIANT    = VARIANTE
    EXCEPTIONS
      NOT_FOUND     = 1
      PROGRAM_ERROR = 2
      OTHERS        = 3.

  IF ( SY-SUBRC NE 0 ).
    MESSAGE S000(Z01) WITH 'N√£o existe variante'.
    STOP.
  ELSE.
    MOVE VARIANTE-VARIANT TO P_VARIA.
    MOVE VARIANTE-VARIANT TO GS_VARIANT_C-VARIANT.
  ENDIF.


INITIALIZATION.


START-OF-SELECTION.

  PERFORM CARREGA_DADOS.
  PERFORM TRATAR_DADOS.
  PERFORM IMPRIMI_ALV.

END-OF-SELECTION.


FORM CARREGA_DADOS.

  PERFORM SELECAO.

  IF T_ZSDT0001 IS NOT INITIAL.
*    SELECT MATNR
*           MATKL
*      FROM MARA
*      INTO TABLE T_MARA
*      FOR ALL ENTRIES IN T_ZSDT0001
*      WHERE MATNR EQ T_ZSDT0001-MATNR.
*
*    LOOP AT T_MARA INTO WA_MARA.
*      CASE WA_MARA-MATKL.
*        WHEN '658430' OR '658450' OR '658440' OR '700150' .

    PERFORM NF_REMESSA_IMPORTACAO.
    PERFORM CTE_REMESSA_IMPORTACAO.
    PERFORM DANFE_VENDA_TRANSFERENCIA.
*      ENDCASE.
*
*    ENDLOOP.
  ENDIF.

ENDFORM.
FORM SELECAO.


  IF P_BUKRS  IS NOT INITIAL AND  DT_MOV   IS NOT INITIAL AND
     P_PONTO  IS NOT INITIAL AND  P_NR_ROM IS INITIAL     AND
     P_FILIAL IS INITIAL     AND  P_CLI    IS INITIAL     AND
     P_MAT    IS INITIAL     AND  P_NUMOV  IS INITIAL     AND
     P_PEDIDO IS INITIAL     AND  P_PEDIMP IS INITIAL.

    SELECT Z~BUKRS        Z~DT_MOVIMENTO  Z~PARID          Z~DOC_REM
           Z~FATURA_PROD  Z~NRO_NF_PROD   Z~NRO_NF_FRETE   Z~NRO_NF_REM
           Z~EBELN        Z~CH_REFERENCIA Z~NR_ROMANEIO    Z~PLACA_CAV
           Z~VBELN        Z~MATNR         M~MATKL
       FROM ZSDT0001 AS Z
       INNER JOIN MARA  AS M ON M~MATNR EQ Z~MATNR
       INTO TABLE T_ZSDT0001
       WHERE Z~BUKRS        IN P_BUKRS
       AND   Z~DT_MOVIMENTO IN DT_MOV
       AND   Z~PARID        IN P_PONTO
       AND   M~MATKL        IN ('658430', '658450' , '658440' , '700150').

  ELSEIF P_BUKRS  IS NOT INITIAL AND  DT_MOV   IS NOT INITIAL AND
         P_PONTO  IS NOT INITIAL AND  P_NR_ROM IS NOT INITIAL AND
         P_FILIAL IS INITIAL     AND  P_CLI    IS INITIAL     AND
         P_MAT    IS INITIAL     AND  P_NUMOV  IS INITIAL     AND
         P_PEDIDO IS INITIAL     AND  P_PEDIMP IS INITIAL.

    SELECT Z~BUKRS        Z~DT_MOVIMENTO  Z~PARID          Z~DOC_REM
           Z~FATURA_PROD  Z~NRO_NF_PROD   Z~NRO_NF_FRETE   Z~NRO_NF_REM
           Z~EBELN        Z~CH_REFERENCIA Z~NR_ROMANEIO    Z~PLACA_CAV
           Z~VBELN        Z~MATNR         M~MATKL
       FROM ZSDT0001 AS Z
       INNER JOIN MARA  AS M ON M~MATNR EQ Z~MATNR
       INTO TABLE T_ZSDT0001
       WHERE Z~BUKRS        IN P_BUKRS
       AND   Z~DT_MOVIMENTO IN DT_MOV
       AND   Z~PARID        IN P_PONTO
       AND   Z~NR_ROMANEIO  IN P_NR_ROM
       AND   M~MATKL        IN ('658430', '658450' , '658440' , '700150').


  ELSEIF  P_BUKRS  IS NOT INITIAL AND  DT_MOV   IS NOT INITIAL AND
          P_PONTO  IS NOT INITIAL AND  P_NR_ROM IS INITIAL     AND
          P_FILIAL IS NOT INITIAL AND  P_CLI    IS INITIAL     AND
          P_MAT    IS INITIAL     AND  P_NUMOV  IS INITIAL     AND
          P_PEDIDO IS INITIAL     AND  P_PEDIMP IS INITIAL.

    SELECT Z~BUKRS        Z~DT_MOVIMENTO  Z~PARID          Z~DOC_REM
           Z~FATURA_PROD  Z~NRO_NF_PROD   Z~NRO_NF_FRETE   Z~NRO_NF_REM
           Z~EBELN        Z~CH_REFERENCIA Z~NR_ROMANEIO    Z~PLACA_CAV
           Z~VBELN        Z~MATNR         M~MATKL
       FROM ZSDT0001 AS Z
       INNER JOIN MARA  AS M ON M~MATNR EQ Z~MATNR
       INTO TABLE T_ZSDT0001
       WHERE Z~BUKRS        IN P_BUKRS
       AND   Z~DT_MOVIMENTO IN DT_MOV
       AND   Z~PARID        IN P_PONTO
       AND   Z~BRANCH       IN P_FILIAL
       AND   M~MATKL        IN ('658430', '658450' , '658440' , '700150').

  ELSEIF  P_BUKRS  IS NOT INITIAL AND  DT_MOV   IS NOT INITIAL AND
          P_PONTO  IS NOT INITIAL AND  P_NR_ROM IS INITIAL     AND
          P_FILIAL IS INITIAL     AND  P_CLI    IS NOT INITIAL AND
          P_MAT    IS INITIAL     AND  P_NUMOV  IS INITIAL     AND
          P_PEDIDO IS INITIAL     AND  P_PEDIMP IS INITIAL.

    SELECT Z~BUKRS        Z~DT_MOVIMENTO  Z~PARID          Z~DOC_REM
           Z~FATURA_PROD  Z~NRO_NF_PROD   Z~NRO_NF_FRETE   Z~NRO_NF_REM
           Z~EBELN        Z~CH_REFERENCIA Z~NR_ROMANEIO    Z~PLACA_CAV
           Z~VBELN        Z~MATNR         M~MATKL
       FROM ZSDT0001 AS Z
       INNER JOIN MARA  AS M ON M~MATNR EQ Z~MATNR
       INTO TABLE T_ZSDT0001
       WHERE Z~BUKRS        IN P_BUKRS
       AND   Z~DT_MOVIMENTO IN DT_MOV
       AND   Z~PARID        IN P_PONTO
       AND   Z~ID_CLI_DEST  IN P_CLI
       AND   M~MATKL      IN ('658430', '658450' , '658440' , '700150').

  ELSEIF  P_BUKRS  IS NOT INITIAL AND  DT_MOV   IS NOT INITIAL AND
          P_PONTO  IS NOT INITIAL AND  P_NR_ROM IS INITIAL     AND
          P_FILIAL IS INITIAL     AND  P_CLI    IS INITIAL     AND
          P_MAT    IS NOT INITIAL AND  P_NUMOV  IS INITIAL     AND
          P_PEDIDO IS INITIAL     AND  P_PEDIMP IS INITIAL.

    SELECT Z~BUKRS        Z~DT_MOVIMENTO  Z~PARID          Z~DOC_REM
           Z~FATURA_PROD  Z~NRO_NF_PROD   Z~NRO_NF_FRETE   Z~NRO_NF_REM
           Z~EBELN        Z~CH_REFERENCIA Z~NR_ROMANEIO    Z~PLACA_CAV
           Z~VBELN        Z~MATNR         M~MATKL
       FROM ZSDT0001 AS Z
       INNER JOIN MARA  AS M ON M~MATNR EQ Z~MATNR
       INTO TABLE T_ZSDT0001
       WHERE Z~BUKRS        IN P_BUKRS
       AND   Z~DT_MOVIMENTO IN DT_MOV
       AND   Z~PARID        IN P_PONTO
       AND   Z~MATNR        IN P_MAT
       AND   M~MATKL        IN ('658430', '658450' , '658440' , '700150').

  ELSEIF  P_BUKRS  IS NOT INITIAL AND  DT_MOV   IS NOT INITIAL AND
          P_PONTO  IS NOT INITIAL AND  P_NR_ROM IS INITIAL     AND
          P_FILIAL IS INITIAL     AND  P_CLI    IS INITIAL     AND
          P_MAT    IS INITIAL     AND  P_NUMOV  IS NOT INITIAL AND
          P_PEDIDO IS INITIAL     AND  P_PEDIMP IS INITIAL.

    SELECT Z~BUKRS        Z~DT_MOVIMENTO  Z~PARID          Z~DOC_REM
           Z~FATURA_PROD  Z~NRO_NF_PROD   Z~NRO_NF_FRETE   Z~NRO_NF_REM
           Z~EBELN        Z~CH_REFERENCIA Z~NR_ROMANEIO    Z~PLACA_CAV
           Z~VBELN        Z~MATNR         M~MATKL
       FROM ZSDT0001 AS Z
       INNER JOIN MARA  AS M ON M~MATNR EQ Z~MATNR
       INTO TABLE T_ZSDT0001
       WHERE Z~BUKRS        IN P_BUKRS
       AND   Z~DT_MOVIMENTO IN DT_MOV
       AND   Z~PARID        IN P_PONTO
       AND   Z~VBELN        IN P_NUMOV
       AND   M~MATKL        IN ('658430', '658450' , '658440' , '700150').

  ELSEIF  P_BUKRS  IS NOT INITIAL AND  DT_MOV   IS NOT INITIAL AND
          P_PONTO  IS NOT INITIAL AND  P_NR_ROM IS INITIAL     AND
          P_FILIAL IS INITIAL     AND  P_CLI    IS INITIAL     AND
          P_MAT    IS INITIAL     AND  P_NUMOV  IS INITIAL     AND
          P_PEDIDO IS NOT INITIAL AND  P_PEDIMP IS INITIAL.

    SELECT Z~BUKRS        Z~DT_MOVIMENTO  Z~PARID          Z~DOC_REM
           Z~FATURA_PROD  Z~NRO_NF_PROD   Z~NRO_NF_FRETE   Z~NRO_NF_REM
           Z~EBELN        Z~CH_REFERENCIA Z~NR_ROMANEIO    Z~PLACA_CAV
           Z~VBELN        Z~MATNR         M~MATKL
       FROM ZSDT0001 AS Z
       INNER JOIN MARA  AS M ON M~MATNR EQ Z~MATNR
       INTO TABLE T_ZSDT0001
       WHERE Z~BUKRS        IN P_BUKRS
       AND   Z~DT_MOVIMENTO IN DT_MOV
       AND   Z~PARID        IN P_PONTO
       AND   Z~EBELN        IN P_PEDIDO
       AND   M~MATKL        IN ('658430', '658450' , '658440' , '700150').

  ELSEIF  P_BUKRS  IS NOT INITIAL AND  DT_MOV   IS NOT INITIAL AND
          P_PONTO  IS NOT INITIAL AND  P_NR_ROM IS INITIAL     AND
          P_FILIAL IS INITIAL     AND  P_CLI    IS INITIAL     AND
          P_MAT    IS INITIAL     AND  P_NUMOV  IS INITIAL     AND
          P_PEDIDO IS INITIAL     AND  P_PEDIMP IS NOT INITIAL.

    SELECT Z~BUKRS        Z~DT_MOVIMENTO  Z~PARID          Z~DOC_REM
           Z~FATURA_PROD  Z~NRO_NF_PROD   Z~NRO_NF_FRETE   Z~NRO_NF_REM
           Z~EBELN        Z~CH_REFERENCIA Z~NR_ROMANEIO    Z~PLACA_CAV
           Z~VBELN        Z~MATNR         M~MATKL
       FROM ZSDT0001 AS Z
       INNER JOIN MARA  AS M ON M~MATNR EQ Z~MATNR
       INTO TABLE T_ZSDT0001
       WHERE Z~BUKRS        IN P_BUKRS
       AND   Z~DT_MOVIMENTO IN DT_MOV
       AND   Z~PARID        IN P_PONTO
       AND   Z~EBELN        IN P_PEDIMP
       AND   M~MATKL        IN ('658430', '658450' , '658440' , '700150').

  ELSE.

    SELECT Z~BUKRS        Z~DT_MOVIMENTO  Z~PARID          Z~DOC_REM
           Z~FATURA_PROD  Z~NRO_NF_PROD   Z~NRO_NF_FRETE   Z~NRO_NF_REM
           Z~EBELN        Z~CH_REFERENCIA Z~NR_ROMANEIO    Z~PLACA_CAV
           Z~VBELN        Z~MATNR         M~MATKL
       FROM ZSDT0001 AS Z
       INNER JOIN MARA  AS M ON M~MATNR EQ Z~MATNR
       INTO TABLE T_ZSDT0001
      WHERE Z~BUKRS        IN P_BUKRS
       AND  Z~DT_MOVIMENTO IN DT_MOV
       AND  Z~PARID        IN P_PONTO
       AND  Z~NR_ROMANEIO  IN P_NR_ROM
       AND  Z~BRANCH       IN P_FILIAL
       AND  Z~ID_CLI_DEST  IN P_CLI
       AND  Z~MATNR        IN P_MAT
       AND  Z~VBELN        IN P_NUMOV
       AND  Z~EBELN        IN P_PEDIDO
       AND  Z~EBELN        IN P_PEDIMP
       AND  M~MATKL        IN ('658430', '658450' , '658440' , '700150').
  ENDIF.
ENDFORM.

FORM NF_REMESSA_IMPORTACAO.


  SELECT  DOCNUM  DOCTYP  DIRECT  DOCDAT
          PSTDAT  BUKRS   BRANCH  NFENUM
          NFE     SERIES  PARVW   PARID
          CGC     CPF     STAINS  NAME1
          ORT01   REGIO
     FROM J_1BNFDOC
    INTO TABLE T_J_1BNFDOC
    FOR ALL ENTRIES IN T_ZSDT0001
    WHERE DOCNUM EQ T_ZSDT0001-NRO_NF_REM
    AND   DOCTYP EQ '1'
    AND   DIRECT EQ '1'.

  IF T_J_1BNFDOC[] IS NOT INITIAL.

    SELECT  DOCNUM ITMNUM MATKL  MAKTX
            CFOP   REFTYP REFKEY MENGE
            MEINS  NETPR  NETWR  MATNR
      FROM J_1BNFLIN
      INTO TABLE T_J_1BNFLIN
      FOR ALL ENTRIES IN T_ZSDT0001
      WHERE DOCNUM EQ T_ZSDT0001-NRO_NF_REM.

    READ TABLE T_J_1BNFLIN INTO WA_J_1BNFLIN INDEX 1.
    V_REFKEY =  WA_J_1BNFLIN-REFKEY(10).


    SELECT DOCNUM  TAXTYP TAXVAL BASE
           OTHBAS  EXCBAS
      FROM J_1BNFSTX
      INTO TABLE T_J_1BNFSTX
      FOR ALL ENTRIES IN  T_ZSDT0001
      WHERE DOCNUM EQ  T_ZSDT0001-NRO_NF_REM
      AND   TAXTYP IN ('ICOF', 'IPIS', 'ICM3').


    SELECT  SEQ_LCTO
            EBELN
            CH_REFERENCIA
      FROM ZFIWRT0008
      INTO TABLE T_ZFIWRT0008
      WHERE SEQ_LCTO EQ  V_REFKEY.

    READ TABLE T_ZFIWRT0008 INTO WA_ZFIWRT0008 WITH KEY SEQ_LCTO =  V_REFKEY.


    IF WA_ZFIWRT0008-CH_REFERENCIA IS NOT INITIAL.

      SELECT BUKRS       DT_MOVIMENTO  PARID    DOC_REM
             FATURA_PROD NRO_NF_PROD   NRO_NF_FRETE
             NRO_NF_REM  EBELN         CH_REFERENCIA
             NR_ROMANEIO PLACA_CAV      VBELN
        FROM ZSDT0001
        INTO TABLE T_ZSDT0001_AUX
        FOR ALL ENTRIES IN T_ZFIWRT0008
        WHERE CH_REFERENCIA EQ T_ZFIWRT0008-CH_REFERENCIA.
    ENDIF.


    IF T_J_1BNFLIN IS NOT INITIAL.
      "Grupo de Mercadoria
      SELECT MATNR MATKL
       FROM MARA
        INTO TABLE T_MARA
        FOR ALL ENTRIES IN  T_J_1BNFLIN
      WHERE MATKL EQ T_J_1BNFLIN-MATKL
        AND MATNR EQ T_J_1BNFLIN-MATNR .
    ENDIF.

    IF T_MARA IS NOT INITIAL.
      "Nome  do grupo de Mercadoria
      SELECT SPRAS  MATKL  WGBEZ60
        FROM T023T
        INTO TABLE T_T023T
        FOR ALL ENTRIES IN T_MARA
        WHERE MATKL EQ T_MARA-MATKL
         AND  SPRAS EQ 'PT'.
    ENDIF.

  ENDIF.
ENDFORM.

FORM CTE_REMESSA_IMPORTACAO.

  "Dados cabe√ßalho do CT-e
  SELECT  DOCNUM  DOCTYP  DIRECT  DOCDAT
          PSTDAT  BUKRS   BRANCH  NFENUM
          NFE     SERIES  PARVW   PARID
          CGC     CPF     STAINS  NAME1
          ORT01   REGIO
    FROM J_1BNFDOC
    INTO TABLE T_J_1BNFDOC_CT
    FOR ALL ENTRIES IN T_ZSDT0001
    WHERE DOCNUM EQ T_ZSDT0001-NRO_NF_FRETE
    AND   DOCTYP EQ '1'
    AND   DIRECT EQ '2'.

  IF T_J_1BNFDOC_CT[] IS NOT INITIAL.

    "Dados itens do CT-e
    SELECT  DOCNUM ITMNUM MATKL  MAKTX
            CFOP   REFTYP REFKEY MENGE
            MEINS  NETPR  NETWR  MATNR
      FROM J_1BNFLIN
      INTO TABLE T_J_1BNFLIN_CT
      FOR ALL ENTRIES IN T_ZSDT0001
      WHERE DOCNUM EQ T_ZSDT0001-NRO_NF_FRETE.


    "Valor  do cofins CT-e, Pis, ICMS
    SELECT DOCNUM  TAXTYP  TAXVAL
           BASE    OTHBAS  EXCBAS
      FROM J_1BNFSTX
      INTO TABLE T_J_1BNFSTX_CT
      FOR ALL ENTRIES IN T_ZSDT0001
      WHERE DOCNUM EQ T_ZSDT0001-NRO_NF_FRETE
      AND   TAXTYP IN ('ICOF', 'IPIS', 'ICM3').

    IF T_J_1BNFLIN_CT IS NOT INITIAL.
      "Grupo de Mercadoria
      SELECT MATNR MATKL
       FROM MARA
        INTO TABLE T_MARA_CT
        FOR ALL ENTRIES IN  T_J_1BNFLIN_CT
      WHERE MATKL EQ T_J_1BNFLIN_CT-MATKL
        AND MATNR EQ T_J_1BNFLIN_CT-MATNR.
    ENDIF.

    IF T_MARA_CT IS NOT INITIAL.
      "Nome  do grupo de Mercadoria
      SELECT SPRAS  MATKL  WGBEZ60
        FROM T023T
        INTO TABLE T_T023T_CT
        FOR ALL ENTRIES IN T_MARA_CT
        WHERE MATKL EQ T_MARA_CT-MATKL
         AND  SPRAS EQ 'PT'.
    ENDIF.

  ENDIF.

ENDFORM.

FORM DANFE_VENDA_TRANSFERENCIA.
  DATA: VVBELN TYPE J_1BNFLIN-REFKEY.

  IF WA_ZSDT0001-NRO_NF_PROD IS INITIAL.

    SELECT VBELV    VBTYP_V
           VBTYP_N  ERDAT VBELN
    FROM VBFA
    INTO TABLE T_VBFA
    FOR ALL ENTRIES IN T_ZSDT0001
    WHERE VBELV   = T_ZSDT0001-DOC_REM
    AND   VBTYP_V = 'J'
    AND  ( VBTYP_N = 'M' OR VBTYP_N = 'R' ).



    LOOP AT T_VBFA INTO WA_VBFA.

      IF WA_VBFA-VBTYP_N = 'R'.
        CLEAR VVBELN.

        CONCATENATE WA_VBFA-VBELN WA_VBFA-ERDAT+0(4) INTO WA_VBFA-VBELN.

        SELECT  SINGLE DOCNUM ITMNUM MATKL  MAKTX
                       CFOP   REFTYP REFKEY MENGE
                       MEINS  NETPR  NETWR  MATNR
         FROM J_1BNFLIN
        INTO WA_J_1BNFLIN_DT
        WHERE REFKEY EQ WA_VBFA-VBELN.

      ELSE.

        SELECT  SINGLE DOCNUM ITMNUM MATKL  MAKTX
                CFOP   REFTYP REFKEY MENGE
                MEINS  NETPR  NETWR  MATNR
        FROM J_1BNFLIN
        INTO  WA_J_1BNFLIN_DT
        WHERE REFKEY EQ WA_VBFA-VBELN.

      ENDIF.

      APPEND WA_J_1BNFLIN_DT TO T_J_1BNFLIN_DT.
      CLEAR: WA_J_1BNFLIN_DT, WA_VBFA.

    ENDLOOP.

*
*    IF T_VBFA IS NOT INITIAL.
*
*
*      SELECT  DOCNUM ITMNUM MATKL  MAKTX
*              CFOP   REFTYP REFKEY MENGE
*              MEINS  NETPR  NETWR  MATNR
*      FROM J_1BNFLIN
*      INTO TABLE T_J_1BNFLIN_DT
*        FOR ALL ENTRIES IN T_VBFA
*      WHERE REFKEY EQ T_VBFA-VBELN.
*
*
*    ENDIF.

    IF T_J_1BNFLIN_DT IS NOT INITIAL.

      "Dados Cabe√ßalho da NF-e de venda direta
      SELECT  DOCNUM  DOCTYP  DIRECT  DOCDAT
              PSTDAT  BUKRS   BRANCH  NFENUM
              NFE     SERIES  PARVW   PARID
              CGC     CPF     STAINS  NAME1
              ORT01   REGIO
          FROM J_1BNFDOC
          INTO TABLE T_J_1BNFDOC_DT
          FOR ALL ENTRIES IN T_J_1BNFLIN_DT
        WHERE DOCNUM  EQ T_J_1BNFLIN_DT-DOCNUM
        AND   DOCTYP  EQ '1'
        AND   DIRECT  EQ '2'.


      SELECT DOCNUM  TAXTYP  TAXVAL
             BASE    OTHBAS  EXCBAS
        FROM J_1BNFSTX
        INTO TABLE T_J_1BNFSTX_DT
        FOR  ALL ENTRIES IN T_J_1BNFLIN_DT
      WHERE DOCNUM EQ T_J_1BNFLIN_DT-DOCNUM
        AND TAXTYP  IN ('ICOF', 'IPIS', 'ICM3' ,'ICM0', 'ICON', 'IPSN').

      "Grupo de Mercadoria
      SELECT MATNR MATKL
       FROM MARA
        INTO TABLE T_MARA_DT
        FOR ALL ENTRIES IN  T_J_1BNFLIN_DT
      WHERE MATKL EQ T_J_1BNFLIN_DT-MATKL
        AND MATNR EQ T_J_1BNFLIN_DT-MATNR.
    ENDIF.


    IF T_MARA_DT IS NOT INITIAL.
      "Nome  do grupo de Mercadoria
      SELECT SPRAS  MATKL  WGBEZ60
        FROM T023T
        INTO TABLE T_T023T_DT
        FOR ALL ENTRIES IN T_MARA_DT
        WHERE MATKL EQ T_MARA_DT-MATKL
         AND  SPRAS EQ 'PT'.
    ENDIF.

  ELSE.

    "Dados cabe√ßalho da NF-e de venda ou transfer√™ncia
    SELECT  DOCNUM  DOCTYP  DIRECT  DOCDAT
            PSTDAT  BUKRS   BRANCH  NFENUM
            NFE     SERIES  PARVW   PARID
            CGC     CPF     STAINS  NAME1
            ORT01   REGIO
      FROM J_1BNFDOC
      INTO TABLE T_J_1BNFDOC_DT
      FOR ALL ENTRIES IN T_ZSDT0001
      WHERE DOCNUM =  T_ZSDT0001-NRO_NF_PROD
       AND  DOCTYP  EQ '1'
       AND  DIRECT  EQ '2'.

    READ TABLE T_ZSDT0001 INTO WA_ZSDT0001 INDEX 1.

    READ TABLE T_J_1BNFDOC_DT INTO WA_J_1BNFDOC_DT WITH KEY DOCNUM = WA_ZSDT0001-NRO_NF_PROD
                                                            DOCTYP = '1'
                                                            DIRECT = '2'.

    IF T_J_1BNFDOC_DT[] IS NOT INITIAL.

      "Dados itens da nf-e  de  venda ou transfer√™ncia
      SELECT  DOCNUM ITMNUM MATKL  MAKTX
              CFOP   REFTYP REFKEY MENGE
              MEINS  NETPR  NETWR  MATNR
        FROM J_1BNFLIN
        INTO TABLE T_J_1BNFLIN_DT
        FOR ALL ENTRIES IN T_ZSDT0001
      WHERE DOCNUM EQ T_ZSDT0001-NRO_NF_PROD.

      "Valor  do cofins, PIS E ICMS/ isentos   nf-e  de  venda ou transfer√™ncia
      SELECT DOCNUM  TAXTYP  TAXVAL
             BASE    OTHBAS   EXCBAS
        FROM J_1BNFSTX
        INTO TABLE T_J_1BNFSTX_DT
        FOR ALL ENTRIES IN T_ZSDT0001
      WHERE DOCNUM EQ T_ZSDT0001-NRO_NF_PROD
        AND TAXTYP IN ('ICOF', 'IPIS', 'ICM3' ,'ICM0', 'ICON', 'IPSN').


      IF T_J_1BNFLIN_DT IS NOT INITIAL.
        "Grupo de Mercadoria
        SELECT MATNR MATKL
         FROM MARA
          INTO TABLE T_MARA_DT
          FOR ALL ENTRIES IN  T_J_1BNFLIN_DT
        WHERE MATKL EQ T_J_1BNFLIN_DT-MATKL
          AND MATNR EQ T_J_1BNFLIN_DT-MATNR.
      ENDIF.

      IF T_MARA_DT IS NOT INITIAL.
        "Nome  do grupo de Mercadoria
        SELECT SPRAS  MATKL  WGBEZ60
          FROM T023T
          INTO TABLE T_T023T_DT
          FOR ALL ENTRIES IN T_MARA_DT
          WHERE MATKL EQ T_MARA_DT-MATKL
           AND  SPRAS EQ 'PT'.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.

FORM TRATAR_DADOS.

  LOOP AT T_ZSDT0001 INTO WA_ZSDT0001.

    READ TABLE T_J_1BNFDOC INTO WA_J_1BNFDOC WITH KEY DOCNUM = WA_ZSDT0001-NRO_NF_REM.
    IF SY-SUBRC = 0.
      IF WA_ZFIWRT0008-CH_REFERENCIA IS INITIAL.
        WA_SAIDA-DT_MOVIMENTO = WA_ZSDT0001-DT_MOVIMENTO.
        WA_SAIDA-NR_ROMANEIO  = WA_ZSDT0001-NR_ROMANEIO.
        WA_SAIDA-PLACA_CAV    = WA_ZSDT0001-PLACA_CAV.
      ELSE.
        "NF-e  (Danfe)  remessas de importa√ß√£o
        READ TABLE T_ZSDT0001_AUX INTO WA_ZSDT0001_AUX WITH KEY  CH_REFERENCIA = WA_ZFIWRT0008-CH_REFERENCIA.
        IF SY-SUBRC = 0 .
          WA_SAIDA-DT_MOVIMENTO = WA_ZSDT0001_AUX-DT_MOVIMENTO.
          WA_SAIDA-NR_ROMANEIO  = WA_ZSDT0001_AUX-NR_ROMANEIO.
          WA_SAIDA-PLACA_CAV    = WA_ZSDT0001_AUX-PLACA_CAV.
        ENDIF.
      ENDIF.

      READ TABLE T_ZFIWRT0008 INTO WA_ZFIWRT0008 WITH KEY SEQ_LCTO =  V_REFKEY.
      IF SY-SUBRC = 0.
        WA_SAIDA-EBELN        =  WA_ZFIWRT0008-EBELN.
      ENDIF.

      WA_SAIDA-DOCNUM = WA_J_1BNFDOC-DOCNUM.
      WA_SAIDA-BRANCH = WA_J_1BNFDOC-BRANCH.
      WA_SAIDA-NFENUM = WA_J_1BNFDOC-NFENUM.
      WA_SAIDA-SERIES = WA_J_1BNFDOC-SERIES.

      IF WA_J_1BNFDOC-DIRECT = '1'.
        WA_SAIDA-DIRECT = 'E'.
      ELSEIF WA_J_1BNFDOC-DIRECT = '2'.
        WA_SAIDA-DIRECT = 'S'.
      ENDIF.

      WA_SAIDA-PSTDAT = WA_J_1BNFDOC-PSTDAT.
      WA_SAIDA-DOCDAT = WA_J_1BNFDOC-DOCDAT.


      READ TABLE T_J_1BNFLIN INTO WA_J_1BNFLIN WITH KEY DOCNUM = WA_ZSDT0001-NRO_NF_REM.
      IF SY-SUBRC = 0.
        WA_SAIDA-CFOP   = WA_J_1BNFLIN-CFOP.
        WA_SAIDA-MAKTX  = WA_J_1BNFLIN-MAKTX.
        "WA_SAIDA-MATKL  = WA_J_1BNFLIN-MATNR.
        WA_SAIDA-MENGE  = WA_J_1BNFLIN-MENGE.
        WA_SAIDA-NETPR  = WA_J_1BNFLIN-NETPR.
        WA_SAIDA-NETWR  = WA_J_1BNFLIN-NETWR.
        IF WA_J_1BNFDOC-DIRECT = '1'.
          WA_SAIDA-REFKEY = WA_J_1BNFLIN-REFKEY.
        ENDIF.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            INPUT  = WA_J_1BNFLIN-MATNR
          IMPORTING
            OUTPUT = WA_SAIDA-MATKL.

      ENDIF.


      LOOP AT T_J_1BNFSTX INTO  WA_J_1BNFSTX WHERE DOCNUM = WA_ZSDT0001-NRO_NF_REM.
        IF WA_J_1BNFSTX-TAXTYP = 'ICM3'.
          WA_SAIDA-BASE   = WA_J_1BNFSTX-BASE.
          WA_SAIDA-TAXVAL = WA_J_1BNFSTX-TAXVAL.
          WA_SAIDA-OTHBAS = WA_J_1BNFSTX-OTHBAS.
          WA_SAIDA-EXCBAS = WA_J_1BNFSTX-EXCBAS.
        ELSEIF WA_J_1BNFSTX-TAXTYP = 'IPIS'.
          WA_SAIDA-TAXVAL_PIS =  WA_J_1BNFSTX-TAXVAL.
        ELSEIF WA_J_1BNFSTX-TAXTYP = 'ICOF'.
          WA_SAIDA-TAXVAL_CONF =  WA_J_1BNFSTX-TAXVAL.
        ENDIF.
      ENDLOOP.

      IF ( WA_J_1BNFDOC-CGC <> '00000000000000' OR
           WA_J_1BNFDOC-CGC <> ' ' ).
        WA_SAIDA-STCD2 = WA_J_1BNFDOC-CGC.
      ELSE.
        WA_SAIDA-STCD2 = WA_J_1BNFDOC-CPF.
      ENDIF.
      WA_SAIDA-STCD3 = WA_J_1BNFDOC-STAINS.
      WA_SAIDA-NAME1 = WA_J_1BNFDOC-NAME1.
      WA_SAIDA-ORT01 = WA_J_1BNFDOC-ORT01.
      WA_SAIDA-REGIO = WA_J_1BNFDOC-REGIO.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          INPUT  = WA_J_1BNFDOC-PARID
        IMPORTING
          OUTPUT = WA_SAIDA-LIFNR.

      READ TABLE T_MARA INTO WA_MARA WITH KEY  MATNR = WA_J_1BNFLIN-MATNR.
      IF SY-SUBRC = 0.
        WA_SAIDA-GRUPO_MER = WA_MARA-MATKL.
      ENDIF.

      READ TABLE T_T023T INTO WA_T023T WITH KEY SPRAS = 'PT'
                                                MATKL =  WA_MARA-MATKL.
      IF SY-SUBRC = 0.
        WA_SAIDA-WGBEZ60 = WA_T023T-WGBEZ60.
      ENDIF.

      IF WA_SAIDA IS NOT INITIAL.
        APPEND WA_SAIDA TO T_SAIDA.
      ENDIF.

      CLEAR: WA_SAIDA.
    ENDIF.

    READ TABLE T_J_1BNFDOC_CT INTO WA_J_1BNFDOC_CT WITH KEY DOCNUM = WA_ZSDT0001-NRO_NF_FRETE.
    "CT-e ( Dacte) sobre as notas  de  remessas de importa√ß√£o
    IF SY-SUBRC = 0.
      IF WA_ZSDT0001-NRO_NF_FRETE IS NOT INITIAL.
        WA_SAIDA-DT_MOVIMENTO = WA_ZSDT0001-DT_MOVIMENTO.
        WA_SAIDA-NR_ROMANEIO  = WA_ZSDT0001-NR_ROMANEIO.
        WA_SAIDA-PLACA_CAV    = WA_ZSDT0001-PLACA_CAV.
        WA_SAIDA-EBELN        = WA_ZSDT0001-EBELN.
      ENDIF.

      WA_SAIDA-DOCNUM = WA_J_1BNFDOC_CT-DOCNUM.
      WA_SAIDA-BRANCH = WA_J_1BNFDOC_CT-BRANCH.
      WA_SAIDA-NFENUM = WA_J_1BNFDOC_CT-NFENUM.
      WA_SAIDA-SERIES = WA_J_1BNFDOC_CT-SERIES.

      IF WA_J_1BNFDOC_CT-DIRECT = '1'.
        WA_SAIDA-DIRECT = 'E'.
      ELSEIF WA_J_1BNFDOC_CT-DIRECT = '2'.
        WA_SAIDA-DIRECT = 'S'.
      ENDIF.

      WA_SAIDA-PSTDAT = WA_J_1BNFDOC_CT-PSTDAT.
      WA_SAIDA-DOCDAT = WA_J_1BNFDOC_CT-DOCDAT.


      READ TABLE T_J_1BNFLIN_CT INTO WA_J_1BNFLIN_CT WITH KEY DOCNUM = WA_ZSDT0001-NRO_NF_FRETE.
      IF SY-SUBRC = 0.
        WA_SAIDA-CFOP   = WA_J_1BNFLIN_CT-CFOP.
        "WA_SAIDA-MATKL  = WA_J_1BNFLIN_CT-MATNR.
        WA_SAIDA-MAKTX  = WA_J_1BNFLIN_CT-MAKTX.
        WA_SAIDA-MENGE  = WA_J_1BNFLIN_CT-MENGE.
        WA_SAIDA-NETPR  = WA_J_1BNFLIN_CT-NETPR.
        WA_SAIDA-NETWR  = WA_J_1BNFLIN_CT-NETWR.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            INPUT  = WA_J_1BNFLIN-MATNR
          IMPORTING
            OUTPUT = WA_SAIDA-MATKL.
      ENDIF.


      LOOP AT T_J_1BNFSTX_CT INTO  WA_J_1BNFSTX_CT WHERE DOCNUM = WA_ZSDT0001-NRO_NF_FRETE.
        IF WA_J_1BNFSTX_CT-TAXTYP = 'ICM3'.
          WA_SAIDA-BASE   = WA_J_1BNFSTX_CT-BASE.
          WA_SAIDA-TAXVAL = WA_J_1BNFSTX_CT-TAXVAL.
          WA_SAIDA-OTHBAS = WA_J_1BNFSTX_CT-OTHBAS.
          WA_SAIDA-EXCBAS = WA_J_1BNFSTX_CT-EXCBAS.
        ELSEIF WA_J_1BNFSTX_CT-TAXTYP = 'IPIS'.
          WA_SAIDA-TAXVAL_PIS =  WA_J_1BNFSTX_CT-TAXVAL.
        ELSEIF WA_J_1BNFSTX_CT-TAXTYP = 'ICOF'.
          WA_SAIDA-TAXVAL_CONF =  WA_J_1BNFSTX_CT-TAXVAL.
        ENDIF.
      ENDLOOP.

      IF ( WA_J_1BNFDOC_CT-CGC <> '00000000000000' OR
           WA_J_1BNFDOC_CT-CGC <> ' ' ).
        WA_SAIDA-STCD2 = WA_J_1BNFDOC_CT-CGC.
      ELSE.
        WA_SAIDA-STCD2 = WA_J_1BNFDOC_CT-CPF.
      ENDIF.
      WA_SAIDA-STCD3 = WA_J_1BNFDOC_CT-STAINS.
      WA_SAIDA-NAME1 = WA_J_1BNFDOC_CT-NAME1.
      WA_SAIDA-ORT01 = WA_J_1BNFDOC_CT-ORT01.
      WA_SAIDA-REGIO = WA_J_1BNFDOC_CT-REGIO.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          INPUT  = WA_J_1BNFDOC_CT-PARID
        IMPORTING
          OUTPUT = WA_SAIDA-LIFNR.


      READ TABLE T_MARA_CT INTO WA_MARA_CT WITH KEY  MATNR = WA_J_1BNFLIN_CT-MATNR.
      IF SY-SUBRC = 0.
        WA_SAIDA-GRUPO_MER = WA_MARA_CT-MATKL.
      ENDIF.

      READ TABLE T_T023T_CT INTO WA_T023T_CT WITH KEY SPRAS = 'PT'
                                                      MATKL =  WA_MARA_CT-MATKL.
      IF SY-SUBRC = 0.
        WA_SAIDA-WGBEZ60 = WA_T023T_CT-WGBEZ60.
      ENDIF.

      IF WA_SAIDA IS NOT INITIAL.
        APPEND WA_SAIDA TO T_SAIDA.
      ENDIF.

      CLEAR: WA_SAIDA.
    ENDIF.


    "NF-e (Danfe) de venda  ou transfer√™ncia

    IF  WA_ZSDT0001-NRO_NF_PROD = '' .

      READ TABLE T_VBFA INTO WA_VBFA WITH KEY VBELV  = WA_ZSDT0001-DOC_REM.
      IF SY-SUBRC = 0.
        WA_SAIDA-FATURA_PROD  =  WA_VBFA-VBELN.
      ENDIF.

      READ TABLE T_J_1BNFLIN_DT INTO WA_J_1BNFLIN_DT WITH KEY REFKEY = WA_VBFA-VBELN.
      IF SY-SUBRC = 0.
        WA_SAIDA-CFOP   = WA_J_1BNFLIN_DT-CFOP.
        WA_SAIDA-MAKTX  = WA_J_1BNFLIN_DT-MAKTX.
        WA_SAIDA-MENGE  = WA_J_1BNFLIN_DT-MENGE.
        WA_SAIDA-NETPR  = WA_J_1BNFLIN_DT-NETPR.
        WA_SAIDA-NETWR  = WA_J_1BNFLIN_DT-NETWR.
        IF WA_J_1BNFDOC_DT-DIRECT = '1'.
          WA_SAIDA-REFKEY = WA_J_1BNFLIN_DT-REFKEY.
        ENDIF.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            INPUT  = WA_J_1BNFLIN_DT-MATNR
          IMPORTING
            OUTPUT = WA_SAIDA-MATKL.
      ENDIF.
      READ TABLE T_J_1BNFDOC_DT INTO WA_J_1BNFDOC_DT WITH KEY DOCNUM = WA_J_1BNFLIN_DT-DOCNUM.
      IF SY-SUBRC = 0.
        WA_SAIDA-DOCNUM = WA_J_1BNFDOC_DT-DOCNUM.
        WA_SAIDA-BRANCH = WA_J_1BNFDOC_DT-BRANCH.
        WA_SAIDA-NFENUM = WA_J_1BNFDOC_DT-NFENUM.
        WA_SAIDA-SERIES = WA_J_1BNFDOC_DT-SERIES.

        IF WA_J_1BNFDOC_DT-DIRECT = '1'.
          WA_SAIDA-DIRECT = 'E'.
        ELSEIF WA_J_1BNFDOC_DT-DIRECT = '2'.
          WA_SAIDA-DIRECT = 'S'.
        ENDIF.

        WA_SAIDA-PSTDAT = WA_J_1BNFDOC_DT-PSTDAT.
        WA_SAIDA-DOCDAT = WA_J_1BNFDOC_DT-DOCDAT.

        SELECT VBELN
            FROM VBAK
            INTO TABLE T_VBAK
            WHERE VBELN EQ WA_ZSDT0001-VBELN.

        READ TABLE  T_VBAK INTO WA_VBAK WITH KEY VBELN = WA_ZSDT0001-VBELN.

        IF WA_VBAK-VBELN IS NOT INITIAL.
          WA_SAIDA-VBELN        = WA_ZSDT0001-VBELN.
        ELSE.
          WA_SAIDA-NR_PED_TRANS = WA_ZSDT0001-VBELN.
        ENDIF.

        IF WA_ZSDT0001-DOC_REM  IS NOT INITIAL.
          WA_SAIDA-NR_ROMANEIO  =  WA_ZSDT0001-NR_ROMANEIO .
          WA_SAIDA-DT_MOVIMENTO =  WA_ZSDT0001-DT_MOVIMENTO.
          WA_SAIDA-PLACA_CAV    =  WA_ZSDT0001-PLACA_CAV.
          WA_SAIDA-EBELN        =  WA_ZSDT0001-EBELN.
          WA_SAIDA-DOC_REM      =  WA_ZSDT0001-DOC_REM.
        ENDIF.
      ENDIF.

      LOOP AT T_J_1BNFSTX_DT INTO  WA_J_1BNFSTX_DT WHERE DOCNUM = WA_J_1BNFLIN_DT-DOCNUM.
        IF WA_J_1BNFSTX_DT-TAXTYP = 'ICM3' OR WA_J_1BNFSTX_DT-TAXTYP = 'ICM0'.
          WA_SAIDA-BASE   = WA_J_1BNFSTX_DT-BASE.
          WA_SAIDA-TAXVAL = WA_J_1BNFSTX_DT-TAXVAL.
          WA_SAIDA-OTHBAS = WA_J_1BNFSTX_DT-OTHBAS.
          WA_SAIDA-EXCBAS = WA_J_1BNFSTX_DT-EXCBAS.
        ELSEIF WA_J_1BNFSTX_DT-TAXTYP = 'IPIS' OR WA_J_1BNFSTX_DT-TAXTYP = 'IPSN'.
          WA_SAIDA-TAXVAL_PIS =  WA_J_1BNFSTX_DT-TAXVAL.
        ELSEIF WA_J_1BNFSTX_DT-TAXTYP = 'ICOF' OR WA_J_1BNFSTX_DT-TAXTYP = 'ICON'.
          WA_SAIDA-TAXVAL_CONF =  WA_J_1BNFSTX_DT-TAXVAL.
        ENDIF.
      ENDLOOP.

      IF ( WA_J_1BNFDOC_DT-CGC <> '00000000000000' OR
           WA_J_1BNFDOC_DT-CGC <> ' ' ).
        WA_SAIDA-STCD2 = WA_J_1BNFDOC_DT-CGC.
      ELSE.
        WA_SAIDA-STCD2 = WA_J_1BNFDOC_DT-CPF.
      ENDIF.

      WA_SAIDA-STCD3 = WA_J_1BNFDOC_DT-STAINS.
      WA_SAIDA-NAME1 = WA_J_1BNFDOC_DT-NAME1.
      WA_SAIDA-ORT01 = WA_J_1BNFDOC_DT-ORT01.
      WA_SAIDA-REGIO = WA_J_1BNFDOC_DT-REGIO.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          INPUT  = WA_J_1BNFDOC_DT-PARID
        IMPORTING
          OUTPUT = WA_SAIDA-LIFNR.

    ELSE.

      READ TABLE T_J_1BNFDOC_DT INTO WA_J_1BNFDOC_DT WITH KEY DOCNUM = WA_ZSDT0001-NRO_NF_PROD.
      IF SY-SUBRC = 0.
        WA_SAIDA-DOCNUM = WA_J_1BNFDOC_DT-DOCNUM.
        WA_SAIDA-BRANCH = WA_J_1BNFDOC_DT-BRANCH.
        WA_SAIDA-NFENUM = WA_J_1BNFDOC_DT-NFENUM.
        WA_SAIDA-SERIES = WA_J_1BNFDOC_DT-SERIES.

        IF WA_J_1BNFDOC_DT-DIRECT = '1'.
          WA_SAIDA-DIRECT = 'E'.
        ELSEIF WA_J_1BNFDOC_DT-DIRECT = '2'.
          WA_SAIDA-DIRECT = 'S'.
        ENDIF.

        WA_SAIDA-PSTDAT = WA_J_1BNFDOC_DT-PSTDAT.
        WA_SAIDA-DOCDAT = WA_J_1BNFDOC_DT-DOCDAT.

        SELECT VBELN
            FROM VBAK
            INTO TABLE T_VBAK
            WHERE VBELN EQ WA_ZSDT0001-VBELN.

        READ TABLE  T_VBAK INTO WA_VBAK WITH KEY VBELN = WA_ZSDT0001-VBELN.

        IF WA_VBAK-VBELN IS NOT INITIAL.
          WA_SAIDA-VBELN        = WA_ZSDT0001-VBELN.
        ELSE.
          WA_SAIDA-NR_PED_TRANS = WA_ZSDT0001-VBELN.
        ENDIF.


        IF WA_ZSDT0001-NRO_NF_PROD IS NOT INITIAL.
          WA_SAIDA-NR_ROMANEIO  =  WA_ZSDT0001-NR_ROMANEIO .
          WA_SAIDA-DT_MOVIMENTO =  WA_ZSDT0001-DT_MOVIMENTO.
          WA_SAIDA-PLACA_CAV    =  WA_ZSDT0001-PLACA_CAV.
          WA_SAIDA-EBELN        =  WA_ZSDT0001-EBELN.
          WA_SAIDA-DOC_REM      =  WA_ZSDT0001-DOC_REM.
          WA_SAIDA-FATURA_PROD  =  WA_ZSDT0001-FATURA_PROD.
        ENDIF.

      ENDIF.

      READ TABLE T_J_1BNFLIN_DT INTO WA_J_1BNFLIN_DT WITH KEY DOCNUM = WA_ZSDT0001-NRO_NF_PROD.
      IF SY-SUBRC = 0.
        WA_SAIDA-CFOP   = WA_J_1BNFLIN_DT-CFOP.
        "WA_SAIDA-MATKL  = WA_J_1BNFLIN_DT-MATNR.
        WA_SAIDA-MAKTX  = WA_J_1BNFLIN_DT-MAKTX.
        WA_SAIDA-MENGE  = WA_J_1BNFLIN_DT-MENGE.
        WA_SAIDA-NETPR  = WA_J_1BNFLIN_DT-NETPR.
        WA_SAIDA-NETWR  = WA_J_1BNFLIN_DT-NETWR.
        IF WA_J_1BNFDOC_DT-DIRECT = '1'.
          WA_SAIDA-REFKEY = WA_J_1BNFLIN_DT-REFKEY.
        ENDIF.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            INPUT  = WA_J_1BNFLIN_DT-MATNR
          IMPORTING
            OUTPUT = WA_SAIDA-MATKL.
      ENDIF.

      LOOP AT T_J_1BNFSTX_DT INTO  WA_J_1BNFSTX_DT WHERE DOCNUM = WA_ZSDT0001-NRO_NF_PROD.
        IF WA_J_1BNFSTX_DT-TAXTYP = 'ICM3' OR WA_J_1BNFSTX_DT-TAXTYP = 'ICM0'.
          WA_SAIDA-BASE   = WA_J_1BNFSTX_DT-BASE.
          WA_SAIDA-TAXVAL = WA_J_1BNFSTX_DT-TAXVAL.
          WA_SAIDA-OTHBAS = WA_J_1BNFSTX_DT-OTHBAS.
          WA_SAIDA-EXCBAS = WA_J_1BNFSTX_DT-EXCBAS.
        ELSEIF WA_J_1BNFSTX_DT-TAXTYP = 'IPIS' OR WA_J_1BNFSTX_DT-TAXTYP = 'IPSN'.
          WA_SAIDA-TAXVAL_PIS =  WA_J_1BNFSTX_DT-TAXVAL.
        ELSEIF WA_J_1BNFSTX_DT-TAXTYP = 'ICOF' OR WA_J_1BNFSTX_DT-TAXTYP = 'ICON'.
          WA_SAIDA-TAXVAL_CONF =  WA_J_1BNFSTX_DT-TAXVAL.
        ENDIF.
      ENDLOOP.

      IF ( WA_J_1BNFDOC_DT-CGC <> '00000000000000' OR
           WA_J_1BNFDOC_DT-CGC <> ' ' ).
        WA_SAIDA-STCD2 = WA_J_1BNFDOC_DT-CGC.
      ELSE.
        WA_SAIDA-STCD2 = WA_J_1BNFDOC_DT-CPF.
      ENDIF.

      WA_SAIDA-STCD3 = WA_J_1BNFDOC_DT-STAINS.
      WA_SAIDA-NAME1 = WA_J_1BNFDOC_DT-NAME1.
      WA_SAIDA-ORT01 = WA_J_1BNFDOC_DT-ORT01.
      WA_SAIDA-REGIO = WA_J_1BNFDOC_DT-REGIO.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          INPUT  = WA_J_1BNFDOC_DT-PARID
        IMPORTING
          OUTPUT = WA_SAIDA-LIFNR.
    ENDIF.

    READ TABLE T_MARA_DT INTO WA_MARA_DT WITH KEY  MATNR = WA_J_1BNFLIN_DT-MATNR.
    IF SY-SUBRC = 0.
      WA_SAIDA-GRUPO_MER = WA_MARA_DT-MATKL.
    ENDIF.

    READ TABLE T_T023T_DT INTO WA_T023T_DT WITH KEY SPRAS = 'PT'
                                                    MATKL =  WA_MARA_DT-MATKL.
    IF SY-SUBRC = 0.
      WA_SAIDA-WGBEZ60 = WA_T023T_DT-WGBEZ60.
    ENDIF.

    IF WA_SAIDA-NR_ROMANEIO IS NOT INITIAL.
      APPEND WA_SAIDA TO T_SAIDA.
    ENDIF.


    CLEAR:  WA_SAIDA,
            WA_J_1BNFDOC,
            WA_J_1BNFDOC_CT,
            WA_J_1BNFDOC_DT,
            WA_J_1BNFLIN,
            WA_J_1BNFLIN_CT,
            WA_J_1BNFLIN_DT,
            WA_J_1BNFSTX,
            WA_J_1BNFSTX_CT,
            WA_J_1BNFSTX_DT,
            WA_ZFIWRT0008,
            WA_ZSDT0001,
            WA_ZSDT0001_AUX,
            WA_ZSDT0001_CT,
            WA_ZSDT0001_DT,
            WA_MARA,
            WA_MARA_CT,
            WA_MARA_DT,
            WA_T023T,
            WA_T023T_CT,
            WA_T023T_DT,
            WA_VBAK,
            WA_VBFA.

  ENDLOOP.

ENDFORM.


FORM IMPRIMI_ALV.

  CLEAR: IT_FIELDCATALOG[].
  PERFORM PREENCHE_CAT USING:

       'DOCNUM'           'Nr. Dcto'                                 '08'     ''      '' '' '',
       'DT_MOVIMENTO'     'Data Romaneio'                            '13'     ''      '' '' '',
       'NR_ROMANEIO'      'Romaneio'                                 '08'     ''      '' '' '',
       'BRANCH'           'Filial'                                   '07'     ''      '' '' '',
       'PLACA_CAV'        'Placa Cavalo'                             '12'     ''      '' '' '',
       'NFENUM'           'Nr. Nota'                                 '09'     ''      '' '' '',
       'SERIES'           'S√©rie'                                    '05'     ''      '' '' '',
       'DIRECT'           'Ent/Sa√≠da'                                '07'     ''      '' '' '',
       'CFOP'             'CFOP'                                     '09'     ''      '' '' '',
       'STCD2'            'CPF/CNPJ'                                 '14'     ''      '' '' '',
       'STCD3'            'Insc. Parceiro'                           '14'     ''      '' '' '',
       'LIFNR'            'C√≥d. Parceiro'                            '13'     ''      '' '' '',
       'NAME1'            'Nome Parceiro'                            '40'     ''      '' '' '',
       'ORT01'            'Municipio Parceiro'                       '20'     ''      '' '' '',
       'REGIO'            'UF'                                       '02'     ''      '' '' '',
       'MATKL'            'Produto'                                  '18'     ''      '' '' '',
       'MAKTX'            'Descri√ß√£o Produto'                        '40'     ''      '' '' '',
       'GRUPO_MER'        'Grupo Mercadoria'                         '10'     ''      '' '' '',
       'WGBEZ60'          'Descri√ß√£o do Grupo'                       '40'     ''      '' '' '',
       'PSTDAT'           'Data Lan√ßamento'                          '15'     ''      '' '' '',
       'DOCDAT'           'Data Documento'                           '14'     ''      '' '' '',
       'MENGE'            'Quantidade'                               '10'     ''      '' '' '',
       'NETPR'            'Valor Unit√°rio'                           '14'     ''      '' '' '',
       'NETWR'            'Valor NF'                                 '10'     ''      '' '' '',
       'BASE'             'Base ICMS'                                '08'     ''      '' '' '',
       'TAXVAL'           'Valor ICMS'                               '10'     ''      '' '' '',
       'OTHBAS'           'Outros ICMS'                              '10'     ''      '' '' '',
       'EXCBAS'           'Isento ICMS'                              '10'     ''      '' '' '',
       'TAXVAL_PIS'       'Valor PIS'                                '10'     ''      '' '' '',
       'TAXVAL_CONF'      'Valor Cofins'                             '10'     ''      '' '' '',
       'DOC_REM'          'Dcto  Remessa'                            '13'     ''      '' '' '',
       'FATURA_PROD'      'Dcto  Fatura'                             '12'     ''      '' '' '',
       'REFKEY'           'Dcto ZNFW'                                '10'     ''      '' '' '',
       'VBELN'            'Num. OV'                                  '10'     ''      '' '' '',
       'EBELN'            'Num. Ped. Importa√ß√£o'                     '19'     ''      '' '' '',
       'NR_PED_TRANS'     'Num. Ped. Transferencia'                  '21'     ''      '' '' ''.


  CALL SCREEN 0100.

ENDFORM.

FORM PREENCHE_CAT USING VALUE(P_CAMPO)
                        VALUE(P_DESC)
                        VALUE(P_TAM)
                        VALUE(P_ZERO)
                        VALUE(P_HOT)
                        VALUE(P_SUM)
                        VALUE(P_JUST).

  WA_FIELDCATALOG-FIELDNAME   = P_CAMPO.
  WA_FIELDCATALOG-COLTEXT     = P_DESC.
  WA_FIELDCATALOG-SCRTEXT_L   = P_DESC.
  WA_FIELDCATALOG-SCRTEXT_M   = P_DESC.
  WA_FIELDCATALOG-SCRTEXT_S   = P_DESC.


  WA_FIELDCATALOG-OUTPUTLEN   = P_TAM.
  WA_FIELDCATALOG-HOTSPOT     = P_HOT.
  WA_FIELDCATALOG-NO_ZERO     = P_ZERO.
  WA_FIELDCATALOG-DO_SUM      = P_SUM.
  WA_FIELDCATALOG-JUST        = P_JUST.

  APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.

  DATA: URL(255)                TYPE C,
        DATA_INI(10)            TYPE C,
        DATA_FIM(10)            TYPE C,
        P_TEXT                  TYPE SDYDO_TEXT_ELEMENT,
        SDYDO_TEXT_ELEMENT(255),
        P_TEXT_TABLE            TYPE SDYDO_TEXT_TABLE,
        VL_CONT                 TYPE I.


  SET PF-STATUS 'STATUS'.
  SET TITLEBAR  'TITULO'.

  IF G_CUSTOM_CONTAINER IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    IF SY-SUBRC <> 0.
      MESSAGE A000(TREE_CONTROL_MSG).
    ENDIF.

    CREATE OBJECT DG_SPLITTER_1
      EXPORTING
        PARENT  = G_CUSTOM_CONTAINER
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_ALV.

    CREATE OBJECT DG_SPLITTER_2
      EXPORTING
        PARENT  = DG_PARENT_1
        ROWS    = 1
        COLUMNS = 2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 2
      RECEIVING
        CONTAINER = DG_PARENT_2A.

    CALL METHOD DG_SPLITTER_1->SET_ROW_HEIGHT
      EXPORTING
        ID     = 1
        HEIGHT = 18.

    CALL METHOD DG_SPLITTER_2->SET_COLUMN_WIDTH
      EXPORTING
        ID    = 1
        WIDTH = 50.

    CREATE OBJECT PICTURE
      EXPORTING
        PARENT = DG_PARENT_2A.

    PERFORM PEGA_LOGO USING 'LOGO_NOVO' CHANGING URL.

    CALL METHOD PICTURE->LOAD_PICTURE_FROM_URL
      EXPORTING
        URL = URL.

    CALL METHOD PICTURE->SET_DISPLAY_MODE
      EXPORTING
        DISPLAY_MODE = PICTURE->DISPLAY_MODE_FIT_CENTER.

    PERFORM FILL_GS_VARIANT.

    GS_LAYOUT-SEL_MODE   = 'A'.
    GS_LAYOUT-STYLEFNAME = 'CELLSTYLES'.
    CLEAR: IT_EXCLUDE_FCODE, IT_EXCLUDE_FCODE[].


    CREATE OBJECT CTL_ALV
      EXPORTING
        I_PARENT = DG_PARENT_ALV.


    CALL METHOD CTL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT                     = GS_LAYOUT
        I_SAVE                        = 'A'
        IS_VARIANT                    = VARIANTE
"       IT_TOOLBAR_EXCLUDING          = IT_EXCLUDE_FCODE
      CHANGING
        IT_FIELDCATALOG               = IT_FIELDCATALOG
        IT_OUTTAB                     = T_SAIDA
      EXCEPTIONS
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        OTHERS                        = 4.

    CREATE OBJECT DG_DYNDOC_ID
      EXPORTING
        STYLE = 'ALV_GRID'.

    CALL METHOD DG_DYNDOC_ID->INITIALIZE_DOCUMENT.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 1
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT.

    CALL METHOD TABLE_ELEMENT->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN.

    CALL METHOD TABLE_ELEMENT->SET_COLUMN_STYLE
      EXPORTING
        COL_NO    = 1
        "SAP_ALIGN = 'CENTER'
        SAP_STYLE = CL_DD_DOCUMENT=>HEADING.

    P_TEXT = TEXT-003.

    CALL METHOD COLUMN->ADD_TEXT
      EXPORTING
        TEXT      = P_TEXT
        SAP_STYLE = 'HEADING'.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 2
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT2.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      EXPORTING
        SAP_STYLE   = 'SAP_BOLD'
        STYLE_CLASS = 'SAP_BOLD'
      IMPORTING
        COLUMN      = COLUMN_1.

    CLEAR: P_TEXT_TABLE.
    "Empresa
    IF P_BUKRS IS NOT INITIAL.

      LOOP AT P_BUKRS.
        IF P_BUKRS-OPTION NE 'EQ' AND P_BUKRS-OPTION NE 'BT'.
          SDYDO_TEXT_ELEMENT = 'Empresa: Multiplas Sele√ß√µes'.
          EXIT.
        ELSEIF P_BUKRS-OPTION EQ 'BT'.

          CONCATENATE 'Empresa:' P_BUKRS-LOW  INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.

          CONCATENATE SDYDO_TEXT_ELEMENT P_BUKRS-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          EXIT.
        ELSE.
          VL_CONT = VL_CONT + 1.
          IF VL_CONT GT 1.
            SDYDO_TEXT_ELEMENT = 'Empresa: Multiplas Sele√ß√µes'.
          ELSE.
            CONCATENATE 'Empresa:' P_BUKRS-LOW  INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          ENDIF.
        ENDIF.
      ENDLOOP.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      CLEAR: VL_CONT, SDYDO_TEXT_ELEMENT.
    ENDIF.
    "------------------
    "Romaneio
    IF P_NR_ROM IS NOT  INITIAL.
      LOOP AT P_NR_ROM.
        IF P_NR_ROM-OPTION NE 'EQ' AND P_NR_ROM-OPTION NE 'BT'.
          SDYDO_TEXT_ELEMENT = 'Romaneio: Multiplas Sele√ß√µes'.
          EXIT.
        ELSEIF P_NR_ROM-OPTION EQ 'BT'.

          CONCATENATE 'Romaneio:' P_NR_ROM-LOW  INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.

          CONCATENATE SDYDO_TEXT_ELEMENT P_NR_ROM-HIGH  INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.

          EXIT.
        ELSE.
          VL_CONT = VL_CONT + 1.
          IF VL_CONT GT 1.
            SDYDO_TEXT_ELEMENT = 'Romaneio: Multiplas Sele√ß√µes'.
          ELSE.
            CONCATENATE 'Romaneio:' P_NR_ROM-LOW  INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          ENDIF.
        ENDIF.
      ENDLOOP.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      CLEAR: VL_CONT, SDYDO_TEXT_ELEMENT.
    ENDIF.

    "Data Romaneio
    IF DT_MOV IS NOT INITIAL.
      CONCATENATE  DT_MOV-LOW+6(2)  '.'  DT_MOV-LOW+4(2)  '.' DT_MOV-LOW(4)  INTO DATA_INI.
      CONCATENATE  DT_MOV-HIGH+6(2) '.'  DT_MOV-HIGH+4(2) '.' DT_MOV-HIGH(4) INTO DATA_FIM.

      CONCATENATE 'Data Romaneio:  ' DATA_INI  INTO  SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      IF DATA_FIM <> '00.00.0000' .
        CONCATENATE SDYDO_TEXT_ELEMENT DATA_FIM  INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ENDIF.

      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      CLEAR: VL_CONT, SDYDO_TEXT_ELEMENT,  DATA_INI, DATA_FIM.
    ENDIF.
    "------------------

    "Ponto de Coleta
    IF P_PONTO IS NOT INITIAL.
      LOOP AT P_PONTO.
        IF P_PONTO-OPTION NE 'EQ' AND P_PONTO-OPTION NE 'BT'.
          SDYDO_TEXT_ELEMENT = 'Ponto de Coleta : Multiplas Sele√ß√µes'.
          EXIT.
        ELSEIF P_PONTO-OPTION EQ 'BT'.
          CONCATENATE 'Ponto de Coleta:' P_PONTO-LOW INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          EXIT.
        ELSE.
          VL_CONT = VL_CONT + 1.
          IF VL_CONT GT 1.
            SDYDO_TEXT_ELEMENT = 'Ponto de Coleta: Multiplas Sele√ß√µes'.
          ELSE.
            CONCATENATE 'Ponto de Coleta:' P_PONTO-LOW INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          ENDIF.
        ENDIF.
      ENDLOOP.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      CLEAR: VL_CONT, SDYDO_TEXT_ELEMENT.
    ENDIF.

    "------------------
    CALL METHOD COLUMN_1->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE
        FIX_LINES  = 'X'.

    CALL METHOD DG_DYNDOC_ID->MERGE_DOCUMENT.

    CREATE OBJECT DG_HTML_CNTRL
      EXPORTING
        PARENT = DG_PARENT_2.

    DG_DYNDOC_ID->HTML_CONTROL = DG_HTML_CNTRL.

    CALL METHOD DG_DYNDOC_ID->DISPLAY_DOCUMENT
      EXPORTING
        REUSE_CONTROL      = 'X'
        PARENT             = DG_PARENT_2
      EXCEPTIONS
        HTML_DISPLAY_ERROR = 1.
  ENDIF.
ENDMODULE.


FORM FILL_GS_VARIANT.
  GS_VARIANT-REPORT    = SY-REPID.
  GS_VARIANT-HANDLE     = '0100'.
  GS_VARIANT-LOG_GROUP  = ABAP_FALSE.
  GS_VARIANT-USERNAME   = ABAP_FALSE.
  GS_VARIANT-TEXT       = ABAP_FALSE.
  GS_VARIANT-DEPENDVARS = ABAP_FALSE.

ENDFORM.

FORM PEGA_LOGO USING NOME_LOGO CHANGING URL.

  DATA: BEGIN OF GRAPHIC_TABLE OCCURS 0,
          LINE(255) TYPE X,
        END OF GRAPHIC_TABLE.
  DATA: L_GRAPHIC_XSTR TYPE XSTRING.
  DATA: GRAPHIC_SIZE   TYPE I.
  DATA: L_GRAPHIC_CONV TYPE I.
  DATA: L_GRAPHIC_OFFS TYPE I.

  REFRESH GRAPHIC_TABLE.

  CALL METHOD CL_SSF_XSF_UTILITIES=>GET_BDS_GRAPHIC_AS_BMP
    EXPORTING
      P_OBJECT = 'GRAPHICS'
      P_NAME   = NOME_LOGO
      P_ID     = 'BMAP'
      P_BTYPE  = 'BCOL'
    RECEIVING
      P_BMP    = L_GRAPHIC_XSTR.

  GRAPHIC_SIZE = XSTRLEN( L_GRAPHIC_XSTR ).
  L_GRAPHIC_CONV = GRAPHIC_SIZE.
  L_GRAPHIC_OFFS = 0.

  WHILE L_GRAPHIC_CONV > 255.
    GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(255).
    APPEND GRAPHIC_TABLE.
    L_GRAPHIC_OFFS = L_GRAPHIC_OFFS + 255.
    L_GRAPHIC_CONV = L_GRAPHIC_CONV - 255.
  ENDWHILE.
  GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(L_GRAPHIC_CONV).
  APPEND GRAPHIC_TABLE.

  CALL FUNCTION 'DP_CREATE_URL'
    EXPORTING
      TYPE     = 'IMAGE'
      SUBTYPE  = 'X-UNKNOWN'
      SIZE     = GRAPHIC_SIZE
      LIFETIME = 'T'
    TABLES
      DATA     = GRAPHIC_TABLE
    CHANGING
      URL      = URL.

ENDFORM.
