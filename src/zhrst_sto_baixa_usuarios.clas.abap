CLASS ZHRST_STO_BAIXA_USUARIOS DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    DATA T_REQUESTS_API TYPE ZHRST_STO_RESCISOES_TAB .
    DATA:T_REQUESTS TYPE TABLE OF ZHCMT_PA0001.
    CONSTANTS C_ERROR TYPE CHAR1 VALUE 'E' ##NO_TEXT.
    CONSTANTS C_SUCCESS TYPE CHAR1 VALUE 'S' ##NO_TEXT.

    METHODS CONSTRUCTOR
      IMPORTING dataini TYPE datum
                datafim TYPE datum.
    METHODS GET_REQUESTS_FROM_API
      RETURNING
        VALUE(RETURN) TYPE BAPIRETURN1 .
    METHODS FILL_TABLE_REQUESTS
      RETURNING
        VALUE(RETURN) TYPE BAPIRETURN1 .
    METHODS COMMIT_WORK
      RETURNING
        VALUE(RETURN) TYPE BAPIRETURN1 .
    METHODS GET_TOKEN_API .
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA V_DESTINATION TYPE CHAR20 VALUE '' ##NO_TEXT.
    DATA V_USERNAME TYPE STRING .
    DATA V_PASSWORD TYPE STRING .
    DATA V_URL_REQ_RESCISOES_APROVADAS TYPE STRING .
    DATA V_TOKEN TYPE STRING .
    DATA V_ACCESSKEY TYPE STRING .
    DATA V_CONTROLLER TYPE STRING .
    DATA V_DATAINI TYPE STRING.
    DATA V_DATAFIM TYPE STRING.

    METHODS GET_API_JSON_STRING
      IMPORTING
        !I_URL               TYPE STRING
      RETURNING
        VALUE(E_JSON_STRING) TYPE STRING .
ENDCLASS.



CLASS ZHRST_STO_BAIXA_USUARIOS IMPLEMENTATION.


  METHOD COMMIT_WORK.

* Rescisoes
    IF T_REQUESTS[] IS NOT INITIAL.
      DELETE FROM ZHCMT_PA0001.
      COMMIT WORK.
      MODIFY ZHCMT_PA0001 FROM TABLE T_REQUESTS.
      IF SY-SUBRC IS INITIAL.
        COMMIT WORK.
        RETURN-TYPE = C_SUCCESS.
        RETURN-MESSAGE = 'Dados gravados com sucesso'(S01).
      ELSE.
        ROLLBACK WORK.
        RETURN-TYPE = C_ERROR.
        RETURN-MESSAGE = 'Ocorreu um erro ao atualizar a tabela ZHCMT_PA0001'(E01).
        RETURN.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD CONSTRUCTOR.

    CLEAR: V_DESTINATION, V_USERNAME, V_PASSWORD, V_DATAINI, V_DATAFIM,
           V_URL_REQ_RESCISOES_APROVADAS, V_TOKEN, V_ACCESSKEY, V_CONTROLLER.

    SELECT * INTO TABLE @DATA(LT_PARAMETROS) FROM ZHRST_WEBSEMPRE.

    READ TABLE LT_PARAMETROS INTO DATA(LS_PARAMETRO) WITH KEY PARAMETRO = 'DESTINATION_PORTALRH'.
    IF SY-SUBRC IS INITIAL.
      V_DESTINATION = LS_PARAMETRO-VALOR.
    ENDIF.

    READ TABLE LT_PARAMETROS INTO LS_PARAMETRO WITH KEY PARAMETRO = 'URL_REQ_RESCISOES_APROVADAS'.
    IF SY-SUBRC IS INITIAL.
      V_URL_REQ_RESCISOES_APROVADAS = LS_PARAMETRO-VALOR.
    ENDIF.

    READ TABLE LT_PARAMETROS INTO LS_PARAMETRO WITH KEY PARAMETRO = 'ACESSKEY_PORTALRH'.
    IF SY-SUBRC IS INITIAL.
      V_ACCESSKEY = LS_PARAMETRO-VALOR.
    ENDIF.

    READ TABLE LT_PARAMETROS INTO LS_PARAMETRO WITH KEY PARAMETRO = 'CONTROLLER_PORTALRH'.
    IF SY-SUBRC IS INITIAL.
      V_CONTROLLER = LS_PARAMETRO-VALOR.
    ENDIF.

    V_DATAINI = DATAINI.

    V_DATAFIM = DATAFIM.


  ENDMETHOD.


  METHOD FILL_TABLE_REQUESTS.

    DATA:
      LS_DADOS LIKE LINE OF T_REQUESTS,
      LV_STELL TYPE STELL.

    CLEAR RETURN.
    DATA: I         TYPE I,
          NUM_VAGAS TYPE I.

    LOOP AT T_REQUESTS_API INTO DATA(LS_DADOS_API).

      MOVE-CORRESPONDING LS_DADOS_API TO LS_DADOS.
      APPEND LS_DADOS TO T_REQUESTS.

    ENDLOOP.


  ENDMETHOD.


  METHOD GET_API_JSON_STRING.

    DATA: LO_HTTP_CLIENT TYPE REF TO IF_HTTP_CLIENT,
          LI_HTTP_CLIENT TYPE REF TO IF_HTTP_CLIENT,
          LO_REST_CLIENT TYPE REF TO CL_REST_HTTP_CLIENT,
          LV_URL         TYPE        STRING,
          LV_BODY        TYPE        STRING,
          TOKEN          TYPE        STRING,
          LO_RESPONSE    TYPE REF TO IF_REST_ENTITY.

* GEt Token
    ME->GET_TOKEN_API( ).

* Create HTTP intance using RFC restination created
* You can directly use the REST service URL as well
    CL_HTTP_CLIENT=>CREATE_BY_DESTINATION(
      EXPORTING
        DESTINATION              = V_DESTINATION     " Logical destination (specified in function call)
      IMPORTING
        CLIENT                   = LO_HTTP_CLIENT    " HTTP Client Abstraction
      EXCEPTIONS
        ARGUMENT_NOT_FOUND       = 1
        DESTINATION_NOT_FOUND    = 2
        DESTINATION_NO_AUTHORITY = 3
        PLUGIN_NOT_ACTIVE        = 4
        INTERNAL_ERROR           = 5
        OTHERS                   = 6
    ).

* If you are using cl_http_client=>create_by_url use this code to supress and pass your
* http basic authenication
    LO_HTTP_CLIENT->PROPERTYTYPE_LOGON_POPUP = LO_HTTP_CLIENT->CO_DISABLED.

*Set Token
    CALL METHOD LO_HTTP_CLIENT->REQUEST->SET_HEADER_FIELD
      EXPORTING
        NAME  = 'Authorization'
*       NAME  = ''
        VALUE = V_TOKEN.

* Create REST client instance
    CREATE OBJECT LO_REST_CLIENT
      EXPORTING
        IO_HTTP_CLIENT = LO_HTTP_CLIENT.

* Set HTTP version
    LO_HTTP_CLIENT->REQUEST->SET_VERSION( IF_HTTP_REQUEST=>CO_PROTOCOL_VERSION_1_0 ).

    IF LO_HTTP_CLIENT IS BOUND AND LO_REST_CLIENT IS BOUND.

      LO_HTTP_CLIENT->REQUEST->SET_METHOD( 'POST' ).
      LO_HTTP_CLIENT->REQUEST->SET_CONTENT_TYPE( 'application/json' ).

*   Set the URI if any
      CL_HTTP_UTILITY=>SET_REQUEST_URI(
        EXPORTING
          REQUEST = LO_HTTP_CLIENT->REQUEST   " HTTP Framework (iHTTP) HTTP Request
          URI     = I_URL                     " URI String (in the Form of /path?query-string)
      ).

      DATA: LV_YEAR  TYPE CHAR4,
            LV_MONTH TYPE CHAR2,
            LV_DAY   TYPE CHAR2,
            LV_DATE  TYPE CHAR10.

      LV_YEAR = V_DATAINI(4).
      LV_MONTH = V_DATAINI+4(2).
      LV_DAY = V_DATAINI+6(2).
      CONCATENATE LV_DAY LV_MONTH LV_YEAR INTO LV_DATE SEPARATED BY '/'.

      LV_BODY = '{'.
      LV_BODY = LV_BODY && | "data_inicial": "| && LV_DATE && |",|.

      CLEAR: LV_YEAR, LV_MONTH, LV_DAY, LV_DATE.

      LV_YEAR = V_DATAFIM(4).
      LV_MONTH = V_DATAFIM+4(2).
      LV_DAY = V_DATAFIM+6(2).
      CONCATENATE LV_DAY LV_MONTH LV_YEAR INTO LV_DATE SEPARATED BY '/'.

      LV_BODY = LV_BODY && | "data_final": "| && LV_DATE && |"|.
      LV_BODY = LV_BODY && '}'.

      CALL METHOD LO_HTTP_CLIENT->REQUEST->SET_CDATA
        EXPORTING
          DATA = LV_BODY.

      CALL METHOD LO_HTTP_CLIENT->SEND
        EXCEPTIONS
          HTTP_COMMUNICATION_FAILURE = 1
          HTTP_INVALID_STATE         = 2
          HTTP_PROCESSING_FAILED     = 3
          HTTP_INVALID_TIMEOUT       = 4.

      CALL METHOD LO_HTTP_CLIENT->RECEIVE
        EXCEPTIONS
          HTTP_COMMUNICATION_FAILURE = 1
          HTTP_INVALID_STATE         = 2
          HTTP_PROCESSING_FAILED     = 3.

      LO_HTTP_CLIENT->RESPONSE->GET_STATUS( IMPORTING CODE = DATA(HTTP_STATUS) ).

      DATA(JSON_RESPONSE) = LO_HTTP_CLIENT->RESPONSE->GET_CDATA( ).
      LO_HTTP_CLIENT->CLOSE( ).
      E_JSON_STRING = JSON_RESPONSE.

    ENDIF.


  ENDMETHOD.


  METHOD GET_REQUESTS_FROM_API.

    DATA:
      LT_REQUISICOES TYPE ZHRST_STO_RESCISOES_TAB,
      LS_REQUISICOES LIKE LINE OF LT_REQUISICOES,
      LV_JSON_STRING TYPE STRING,
      LR_DATA        TYPE REF TO DATA,
      LT_FIELDS      TYPE TABLE OF DFIES,
      LT_FIELDS_SUB  TYPE TABLE OF DFIES.

    DATA: LT_ZHCMT_PA0001 TYPE ZHRST_STO_RESCISOES_EST.

    CLEAR RETURN.

* Retorna a string JSON
    CALL METHOD ME->GET_API_JSON_STRING
      EXPORTING
        I_URL         = V_URL_REQ_RESCISOES_APROVADAS
      RECEIVING
        E_JSON_STRING = LV_JSON_STRING.

* Converte a string JSON para uma tabela interna
    CALL METHOD /UI2/CL_JSON=>DESERIALIZE
      EXPORTING
        JSON         = LV_JSON_STRING
        PRETTY_NAME  = /UI2/CL_JSON=>PRETTY_MODE-USER
        ASSOC_ARRAYS = ABAP_TRUE
      CHANGING
        DATA         = LT_ZHCMT_PA0001.

    IF LT_ZHCMT_PA0001 IS NOT INITIAL.

      LOOP AT LT_ZHCMT_PA0001-DATA INTO DATA(LS_ZHCMT_PA0001).

        REPLACE ALL OCCURRENCES OF '/' IN LS_ZHCMT_PA0001-DATA_DESLIGAMENTO WITH ''.
*
        DATA: LA_YEAR  TYPE CHAR4,
              LA_MONTH TYPE CHAR2,
              LA_DAY   TYPE CHAR2.

        LA_DAY   = LS_ZHCMT_PA0001-DATA_DESLIGAMENTO(2).
        LA_MONTH = LS_ZHCMT_PA0001-DATA_DESLIGAMENTO+2(2).
        LA_YEAR  = LS_ZHCMT_PA0001-DATA_DESLIGAMENTO+4(4).

        CONCATENATE LA_YEAR LA_MONTH LA_DAY INTO LS_ZHCMT_PA0001-DATA_DESLIGAMENTO.

        MOVE-CORRESPONDING LS_ZHCMT_PA0001 TO LS_REQUISICOES.
        APPEND LS_REQUISICOES TO LT_REQUISICOES.

      ENDLOOP.

    ENDIF.

    ME->T_REQUESTS_API[] = LT_REQUISICOES[].

  ENDMETHOD.


  METHOD GET_TOKEN_API.

    TYPES: BEGIN OF TY_TOKEN,
             AUTHENTICATED TYPE STRING,
             CREATED       TYPE STRING,
             EXPIRATION    TYPE STRING,
             ACCESSTOKEN   TYPE STRING,
             REFRESHTOKEN  TYPE STRING,
             ACCESSKEY     TYPE STRING,
             CONTROLLER    TYPE STRING,
             MESSAGE       TYPE STRING,
           END OF TY_TOKEN.

    DATA: "lo_http_client TYPE REF TO if_http_client,
      E_CLIENT       TYPE REF TO IF_HTTP_CLIENT,
      JSONT          TYPE STRING,
      T_RESULTADO    TYPE  STRING,
      LO_REST_CLIENT TYPE REF TO CL_REST_HTTP_CLIENT,
      LC_RETORNO     TYPE TY_TOKEN.

* Create HTTP intance using RFC restination created
* You can directly use the REST service URL as well
    CL_HTTP_CLIENT=>CREATE_BY_DESTINATION(
     EXPORTING
       DESTINATION              = V_DESTINATION     " Logical destination (specified in function call)
     IMPORTING
       CLIENT                   = E_CLIENT    " HTTP Client Abstraction
     EXCEPTIONS
       ARGUMENT_NOT_FOUND       = 1
       DESTINATION_NOT_FOUND    = 2
       DESTINATION_NO_AUTHORITY = 3
       PLUGIN_NOT_ACTIVE        = 4
       INTERNAL_ERROR           = 5
       OTHERS                   = 6
   ).

    CREATE OBJECT LO_REST_CLIENT
      EXPORTING
        IO_HTTP_CLIENT = E_CLIENT.

    E_CLIENT->REQUEST->SET_VERSION( IF_HTTP_REQUEST=>CO_PROTOCOL_VERSION_1_0 ).
    E_CLIENT->PROPERTYTYPE_LOGON_POPUP = ABAP_FALSE.

    CL_HTTP_UTILITY=>SET_REQUEST_URI(
      EXPORTING
        REQUEST = E_CLIENT->REQUEST   " HTTP Framework (iHTTP) HTTP Request
        URI     = 'v1/oauth/token'              " URI String (in the Form of /path?query-string)
    ).

    CALL METHOD E_CLIENT->REQUEST->SET_HEADER_FIELD
      EXPORTING
        NAME  = '~request_method'
        VALUE = IF_REST_MESSAGE=>GC_METHOD_POST.

    CALL METHOD E_CLIENT->REQUEST->SET_HEADER_FIELD
      EXPORTING
        NAME  = 'Content-Type'
        VALUE = 'application/json'.

    JSONT = '{"accessKey": "' && V_ACCESSKEY && '", "controller": "' &&  V_CONTROLLER && '" }'.

    CALL METHOD E_CLIENT->REQUEST->SET_CDATA
      EXPORTING
        DATA = JSONT.

    CALL METHOD E_CLIENT->SEND
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3
        HTTP_INVALID_TIMEOUT       = 4.

    CALL METHOD E_CLIENT->RECEIVE
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3.

    E_CLIENT->RESPONSE->GET_STATUS( IMPORTING CODE = DATA(RETURN_CODET) ).
    T_RESULTADO = E_CLIENT->RESPONSE->GET_CDATA( ).
    IF T_RESULTADO IS INITIAL.
      T_RESULTADO = E_CLIENT->RESPONSE->GET_DATA( ).
    ENDIF.

    /UI2/CL_JSON=>DESERIALIZE(
       EXPORTING
         JSON = T_RESULTADO
         PRETTY_NAME = /UI2/CL_JSON=>PRETTY_MODE-CAMEL_CASE
        CHANGING DATA = LC_RETORNO ).

    V_TOKEN = |Bearer { LC_RETORNO-ACCESSTOKEN }|.

  ENDMETHOD.
ENDCLASS.
