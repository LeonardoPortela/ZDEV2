*&---------------------------------------------------------------------*
*& Report  ZSDR0078
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZSDR0078.
************************************************************************
* TABLES
************************************************************************
TABLES: T001.
************************************************************************
* TYPES
************************************************************************
TYPES: BEGIN OF TY_TOTAL,
         COL1 TYPE CHAR10,                    "HEADER
         COL2 TYPE ZSDT0148-VLR_TRCHE,        "VLT_TRCHE
*         COL3 TYPE ZSDT0148-VLR_TRCHE_BRL,    "VLT_TRCHE_BRL
         COL4 TYPE ZSDT0148-VLR_PMIO_BRL,     "VLR_PMIO_MED
         COL5 TYPE ZSDT0148-VLR_PMIO.         "VLT_PMIO
*         COL6 TYPE ZSDT0148-VLR_PMIO_BRL.     "VLT_PMIO_BRL
TYPES: END OF TY_TOTAL.

TYPES: BEGIN OF TY_REALIZADO,
         COL1 TYPE CHAR11,                    "HEADER
         COL2 TYPE ZSDT0148-VLR_TRCHE,        "VLT_TRCHE
*         COL3 TYPE ZSDT0148-VLR_TRCHE_BRL,    "VLT_TRCHE_BRL
         COL4 TYPE ZSDT0148-VLR_PMIO_BRL,     "VLR_PMIO_MED
         COL5 TYPE ZSDT0148-VLR_PMIO.         "VLT_PMIO
*         COL6 TYPE ZSDT0148-VLR_PMIO_BRL.     "VLT_PMIO_BRL
TYPES: END OF TY_REALIZADO.
************************************************************************
* DATA
************************************************************************
DATA: IT_ZSDT0147    TYPE STANDARD TABLE OF ZSDT0147,
      IT_ZSDT0148_R  TYPE STANDARD TABLE OF ZSDT0148,
      IT_ZSDT0148_P  TYPE STANDARD TABLE OF ZSDT0148,

      IT_TOTAL     TYPE STANDARD TABLE OF TY_TOTAL,
      IT_REALIZADO TYPE STANDARD TABLE OF TY_REALIZADO.
*** ALV
DATA:  G_CUSTOM_CONTAINER        TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
       CTL_ALV1                  TYPE REF TO CL_GUI_ALV_GRID,
       CTL_ALV2                  TYPE REF TO CL_GUI_ALV_GRID,
       IT_EXCLUDE                TYPE UI_FUNCTIONS,
       GS_LAYOUT1                TYPE LVC_S_LAYO,
       GS_LAYOUT2                TYPE LVC_S_LAYO,
       IT_FIELDCATALOG_TOTAL     TYPE LVC_T_FCAT,
       IT_FIELDCATALOG_REALIZADO TYPE LVC_T_FCAT,
       DG_SPLITTER               TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
       DG_PARENT_1               TYPE REF TO CL_GUI_CONTAINER,
       DG_PARENT_2               TYPE REF TO CL_GUI_CONTAINER,
       VL_TAXA                   TYPE TCURR-UKURS.

************************************************************************
* SELECTION SCREEN
************************************************************************
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
PARAMETERS: P_ANOCTR TYPE GJAHR OBLIGATORY.
SELECT-OPTIONS: P_MOECTR FOR T001-WAERS OBLIGATORY NO-EXTENSION NO INTERVALS.
SELECTION-SCREEN END OF BLOCK B1.

START-OF-SELECTION.

  PERFORM SELECIONA_DADOS.
  PERFORM TRATA_DADOS_TOTAL.
  PERFORM TRATA_DADOS_REALIZADO.

  CALL SCREEN 5000.

*&---------------------------------------------------------------------*
*&      Form  SELECIONA_DADOS
*&---------------------------------------------------------------------*
FORM SELECIONA_DADOS .

  RANGES: R_DATA FOR ZSDT0147-DATA_ATUAL.
  DATA: S_DATA LIKE LINE OF R_DATA.

  S_DATA-OPTION = 'BT'.
  S_DATA-SIGN = 'I'.
  CONCATENATE P_ANOCTR '0101' INTO S_DATA-LOW.
  CONCATENATE P_ANOCTR '1231' INTO S_DATA-HIGH.
  APPEND S_DATA TO R_DATA.

*** Seleciona Programado ***
  SELECT *
    FROM ZSDT0147
    INTO TABLE IT_ZSDT0147
    WHERE DT_LMTE_FINANC IN R_DATA
      AND WAERK      IN P_MOECTR
      AND STATUS     NE 'C'.

  IF IT_ZSDT0147 IS NOT INITIAL.

    SELECT *
      FROM ZSDT0148
      INTO TABLE IT_ZSDT0148_P
      FOR ALL ENTRIES IN IT_ZSDT0147
      WHERE NRO_CONT EQ IT_ZSDT0147-NRO_CONT
        AND STATUS   NE 'C'.

  ENDIF.

*** Seleiona Realizado ***

    SELECT *
      FROM ZSDT0148 AS I
      INNER JOIN ZSDT0147 AS C ON I~NRO_CONT EQ C~NRO_CONT
      INTO CORRESPONDING FIELDS OF TABLE IT_ZSDT0148_R
       WHERE  I~DATA_RECEB  IN R_DATA
          AND I~STATUS      NE 'C'
          AND C~WAERK       IN P_MOECTR.


ENDFORM.



*&---------------------------------------------------------------------*
*&      Form  TRATA_DADOS_TOTAL
*&---------------------------------------------------------------------*
FORM TRATA_DADOS_TOTAL.

  DATA: WA_TOTAL         TYPE TY_TOTAL,
        WA_TOTAL_AUX1    TYPE TY_TOTAL,
        WA_TOTAL_AUX2    TYPE TY_TOTAL,
        WA_ZSDT0148_R    TYPE ZSDT0148,
        WA_ZSDT0148_P    TYPE ZSDT0148,
        WA_ZSDT0147      TYPE ZSDT0147,
*        VL_DATA_TAXA1(8) TYPE N,
*        VL_DATA_TAXA2    TYPE SY-DATUM,
*        VL_INICIO        TYPE DATS,
*        VL_FINAL         TYPE DATS,
        VL_PERC          TYPE F,
        VLR_TOT_TRANCHES TYPE ZSDT0148-VLR_TRCHE,
        VL_SALDO         TYPE ZSDT0147-VLR_CONT.


  CLEAR: WA_TOTAL.

  WA_TOTAL-COL1           = 'Realizado'.

  LOOP AT IT_ZSDT0148_R INTO WA_ZSDT0148_R.
    WA_TOTAL-COL2         = WA_TOTAL-COL2 + WA_ZSDT0148_R-VLR_TRCHE.
*    WA_TOTAL-COL3         = WA_TOTAL-COL3 + WA_ZSDT0148_R-VLR_TRCHE_BRL.
    WA_TOTAL-COL5         = WA_TOTAL-COL5 + WA_ZSDT0148_R-VLR_PMIO.
*    WA_TOTAL-COL6         = WA_TOTAL-COL6 + WA_ZSDT0148_R-VLR_PMIO_BRL.
  ENDLOOP.

  TRY .
      WA_TOTAL-COL4           = ( WA_TOTAL-COL5 / WA_TOTAL-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_TOTAL-COL4           = 0.
  ENDTRY.

  APPEND WA_TOTAL TO IT_TOTAL.
  CLEAR: WA_TOTAL.
***************************************


  WA_TOTAL-COL1           = '  Programado  '.

  LOOP AT IT_ZSDT0147 INTO WA_ZSDT0147.
    CLEAR: VLR_TOT_TRANCHES, VL_SALDO, VL_PERC.
    VL_PERC = WA_ZSDT0147-PERC_PREMIO / 100.

    LOOP AT IT_ZSDT0148_P INTO WA_ZSDT0148_P WHERE NRO_CONT = WA_ZSDT0147-NRO_CONT.
        VLR_TOT_TRANCHES  = VLR_TOT_TRANCHES + WA_ZSDT0148_P-VLR_TRCHE.
    ENDLOOP.
    VL_SALDO              = WA_ZSDT0147-VLR_CONT - VLR_TOT_TRANCHES.

    WA_TOTAL-COL2         = WA_TOTAL-COL2 + VL_SALDO.

    IF WA_ZSDT0147-PERC_PREMIO IS NOT INITIAL.
        WA_TOTAL-COL5     = WA_TOTAL-COL5 + ( VL_SALDO * VL_PERC ).
    ENDIF.

  ENDLOOP.

*  READ TABLE IT_TOTAL INTO WA_TOTAL_AUX1 INDEX 1.
*  IF SY-SUBRC IS INITIAL.
*    WA_TOTAL-COL2         =  WA_TOTAL-COL2 - WA_TOTAL_AUX1-COL2.
*    WA_TOTAL-COL5         =  WA_TOTAL-COL5 - WA_TOTAL_AUX1-COL5.
*  ENDIF.

*  CLEAR: VL_TAXA, VL_DATA_TAXA1, VL_DATA_TAXA2.
*  VL_DATA_TAXA1 = '99999999' - SY-DATUM.
*  VL_DATA_TAXA2 = VL_DATA_TAXA1.
*
*  "Seleciona Taxa para conta da col3 e col6 e t√≠tulo da ALV TOTAL
*  SELECT SINGLE UKURS
*    FROM TCURR
*    INTO VL_TAXA
*    WHERE KURST EQ 'B'
*      AND FCURR EQ P_MOECTR-LOW
*      AND TCURR EQ 'BRL'
*      AND GDATU EQ VL_DATA_TAXA2.
*
*  IF SY-SUBRC IS INITIAL.
*    WA_TOTAL-COL3           = WA_TOTAL-COL2 * VL_TAXA.
*    WA_TOTAL-COL6           = WA_TOTAL-COL5 * VL_TAXA.
*  ELSE.
*    WA_TOTAL-COL3           = WA_TOTAL-COL2.
*    WA_TOTAL-COL6           = WA_TOTAL-COL5.
*  ENDIF.

  TRY .
      WA_TOTAL-COL4           = ( WA_TOTAL-COL5 / WA_TOTAL-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_TOTAL-COL4           = 0.
  ENDTRY.

  APPEND WA_TOTAL TO IT_TOTAL.
  CLEAR: WA_TOTAL.
**********************************************

  WA_TOTAL-COL1           = 'Total'.

*  LOOP AT IT_ZSDT0147 INTO WA_ZSDT0147.
*    CLEAR: VL_PERC.
*    VL_PERC = WA_ZSDT0147-PERC_PREMIO / 100.
*    WA_TOTAL-COL2         = WA_TOTAL-COL2 + WA_ZSDT0147-VLR_CONT.
*    WA_TOTAL-COL5         = WA_TOTAL-COL5 + ( WA_ZSDT0147-VLR_CONT * VL_PERC ).
*  ENDLOOP.

  READ TABLE IT_TOTAL INTO WA_TOTAL_AUX1 INDEX 1.
  IF SY-SUBRC IS INITIAL.
    READ TABLE IT_TOTAL INTO WA_TOTAL_AUX2 INDEX 2.
    IF SY-SUBRC IS INITIAL.
      WA_TOTAL-COL2       = WA_TOTAL_AUX1-COL2 + WA_TOTAL_AUX2-COL2.
      WA_TOTAL-COL5       = WA_TOTAL_AUX1-COL5 + WA_TOTAL_AUX2-COL5.
*      WA_TOTAL-COL3       = WA_TOTAL_AUX1-COL3 + WA_TOTAL_AUX2-COL3.
*      WA_TOTAL-COL6       = WA_TOTAL_AUX1-COL6 + WA_TOTAL_AUX2-COL6.
    ENDIF.
  ENDIF.

  TRY .
      WA_TOTAL-COL4           = ( WA_TOTAL-COL5 / WA_TOTAL-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_TOTAL-COL4           = 0.
  ENDTRY.

  APPEND WA_TOTAL TO IT_TOTAL.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  TRATA_DADOS_REALIZADO
*&---------------------------------------------------------------------*
FORM TRATA_DADOS_REALIZADO .

  DATA: WA_ZSDT0148  TYPE ZSDT0148,
        WA_REALIZADO TYPE TY_REALIZADO,
        VL_INICIO    TYPE DATS,
        VL_FINAL     TYPE DATS.

  WA_REALIZADO-COL1 = 'Jan'.

  PERFORM CALCULA_MES USING '01'
                      CHANGING VL_INICIO
                               VL_FINAL.

  LOOP AT IT_ZSDT0148_R INTO WA_ZSDT0148 WHERE DATA_RECEB GE VL_INICIO AND DATA_RECEB LE VL_FINAL.
*    WA_REALIZADO-COL3 = WA_REALIZADO-COL3 + WA_ZSDT0148-VLR_TRCHE_BRL.
*    WA_REALIZADO-COL6 = WA_REALIZADO-COL6 + WA_ZSDT0148-VLR_PMIO_BRL.
    WA_REALIZADO-COL2 = WA_REALIZADO-COL2 + WA_ZSDT0148-VLR_TRCHE.
    WA_REALIZADO-COL5 = WA_REALIZADO-COL5 + WA_ZSDT0148-VLR_PMIO.
  ENDLOOP.

  TRY .
      WA_REALIZADO-COL4 = ( WA_REALIZADO-COL5 / WA_REALIZADO-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_REALIZADO-COL4 = 0.
  ENDTRY.

  APPEND WA_REALIZADO TO IT_REALIZADO.
  CLEAR: WA_REALIZADO, VL_INICIO, VL_FINAL.

  WA_REALIZADO-COL1 = 'Fev'.

  PERFORM CALCULA_MES USING '02'
                      CHANGING VL_INICIO
                               VL_FINAL.

  LOOP AT IT_ZSDT0148_R INTO WA_ZSDT0148 WHERE DATA_RECEB GE VL_INICIO AND DATA_RECEB LE VL_FINAL.
*    WA_REALIZADO-COL3 = WA_REALIZADO-COL3 + WA_ZSDT0148-VLR_TRCHE_BRL.
*    WA_REALIZADO-COL6 = WA_REALIZADO-COL6 + WA_ZSDT0148-VLR_PMIO_BRL.
    WA_REALIZADO-COL2 = WA_REALIZADO-COL2 + WA_ZSDT0148-VLR_TRCHE.
    WA_REALIZADO-COL5 = WA_REALIZADO-COL5 + WA_ZSDT0148-VLR_PMIO.
  ENDLOOP.

  TRY .
      WA_REALIZADO-COL4 = ( WA_REALIZADO-COL5 / WA_REALIZADO-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_REALIZADO-COL4 = 0.
  ENDTRY.

  APPEND WA_REALIZADO TO IT_REALIZADO.
  CLEAR: WA_REALIZADO, VL_INICIO, VL_FINAL.

  WA_REALIZADO-COL1 = 'Mar'.

  PERFORM CALCULA_MES USING '03'
                      CHANGING VL_INICIO
                               VL_FINAL.

  LOOP AT IT_ZSDT0148_R INTO WA_ZSDT0148 WHERE DATA_RECEB GE VL_INICIO AND DATA_RECEB LE VL_FINAL.
*    WA_REALIZADO-COL3 = WA_REALIZADO-COL3 + WA_ZSDT0148-VLR_TRCHE_BRL.
*    WA_REALIZADO-COL6 = WA_REALIZADO-COL6 + WA_ZSDT0148-VLR_PMIO_BRL.
    WA_REALIZADO-COL2 = WA_REALIZADO-COL2 + WA_ZSDT0148-VLR_TRCHE.
    WA_REALIZADO-COL5 = WA_REALIZADO-COL5 + WA_ZSDT0148-VLR_PMIO.
  ENDLOOP.

  TRY .
      WA_REALIZADO-COL4 = ( WA_REALIZADO-COL5 / WA_REALIZADO-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_REALIZADO-COL4 = 0.
  ENDTRY.

  APPEND WA_REALIZADO TO IT_REALIZADO.
  CLEAR: WA_REALIZADO, VL_INICIO, VL_FINAL.

  WA_REALIZADO-COL1 = 'Abr'.

  PERFORM CALCULA_MES USING '04'
                      CHANGING VL_INICIO
                               VL_FINAL.

  LOOP AT IT_ZSDT0148_R INTO WA_ZSDT0148 WHERE DATA_RECEB GE VL_INICIO AND DATA_RECEB LE VL_FINAL.
*    WA_REALIZADO-COL3 = WA_REALIZADO-COL3 + WA_ZSDT0148-VLR_TRCHE_BRL.
*    WA_REALIZADO-COL6 = WA_REALIZADO-COL6 + WA_ZSDT0148-VLR_PMIO_BRL.
    WA_REALIZADO-COL2 = WA_REALIZADO-COL2 + WA_ZSDT0148-VLR_TRCHE.
    WA_REALIZADO-COL5 = WA_REALIZADO-COL5 + WA_ZSDT0148-VLR_PMIO.
  ENDLOOP.

  TRY .
      WA_REALIZADO-COL4 = ( WA_REALIZADO-COL5 / WA_REALIZADO-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_REALIZADO-COL4 = 0.
  ENDTRY.

  APPEND WA_REALIZADO TO IT_REALIZADO.
  CLEAR: WA_REALIZADO, VL_INICIO, VL_FINAL.

  WA_REALIZADO-COL1 = 'Mai'.

  PERFORM CALCULA_MES USING '05'
                      CHANGING VL_INICIO
                               VL_FINAL.

  LOOP AT IT_ZSDT0148_R INTO WA_ZSDT0148 WHERE DATA_RECEB GE VL_INICIO AND DATA_RECEB LE VL_FINAL.
*    WA_REALIZADO-COL3 = WA_REALIZADO-COL3 + WA_ZSDT0148-VLR_TRCHE_BRL.
*    WA_REALIZADO-COL6 = WA_REALIZADO-COL6 + WA_ZSDT0148-VLR_PMIO_BRL.
    WA_REALIZADO-COL2 = WA_REALIZADO-COL2 + WA_ZSDT0148-VLR_TRCHE.
    WA_REALIZADO-COL5 = WA_REALIZADO-COL5 + WA_ZSDT0148-VLR_PMIO.
  ENDLOOP.

  TRY .
      WA_REALIZADO-COL4 = ( WA_REALIZADO-COL5 / WA_REALIZADO-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_REALIZADO-COL4 = 0.
  ENDTRY.

  APPEND WA_REALIZADO TO IT_REALIZADO.
  CLEAR: WA_REALIZADO, VL_INICIO, VL_FINAL.

  WA_REALIZADO-COL1 = 'Jun'.

  PERFORM CALCULA_MES USING '06'
                      CHANGING VL_INICIO
                               VL_FINAL.

  LOOP AT IT_ZSDT0148_R INTO WA_ZSDT0148 WHERE DATA_RECEB GE VL_INICIO AND DATA_RECEB LE VL_FINAL.
*    WA_REALIZADO-COL3 = WA_REALIZADO-COL3 + WA_ZSDT0148-VLR_TRCHE_BRL.
*    WA_REALIZADO-COL6 = WA_REALIZADO-COL6 + WA_ZSDT0148-VLR_PMIO_BRL.
    WA_REALIZADO-COL2 = WA_REALIZADO-COL2 + WA_ZSDT0148-VLR_TRCHE.
    WA_REALIZADO-COL5 = WA_REALIZADO-COL5 + WA_ZSDT0148-VLR_PMIO.
  ENDLOOP.

  TRY .
      WA_REALIZADO-COL4 = ( WA_REALIZADO-COL5 / WA_REALIZADO-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_REALIZADO-COL4 = 0.
  ENDTRY.

  APPEND WA_REALIZADO TO IT_REALIZADO.
  CLEAR: WA_REALIZADO, VL_INICIO, VL_FINAL.

  WA_REALIZADO-COL1 = 'Jul'.

  PERFORM CALCULA_MES USING '07'
                   CHANGING VL_INICIO
                            VL_FINAL.

  LOOP AT IT_ZSDT0148_R INTO WA_ZSDT0148 WHERE DATA_RECEB GE VL_INICIO AND DATA_RECEB LE VL_FINAL.
*    WA_REALIZADO-COL3 = WA_REALIZADO-COL3 + WA_ZSDT0148-VLR_TRCHE_BRL.
*    WA_REALIZADO-COL6 = WA_REALIZADO-COL6 + WA_ZSDT0148-VLR_PMIO_BRL.
    WA_REALIZADO-COL2 = WA_REALIZADO-COL2 + WA_ZSDT0148-VLR_TRCHE.
    WA_REALIZADO-COL5 = WA_REALIZADO-COL5 + WA_ZSDT0148-VLR_PMIO.
  ENDLOOP.

  TRY .
      WA_REALIZADO-COL4 = ( WA_REALIZADO-COL5 / WA_REALIZADO-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_REALIZADO-COL4 = 0.
  ENDTRY.

  APPEND WA_REALIZADO TO IT_REALIZADO.
  CLEAR: WA_REALIZADO, VL_INICIO, VL_FINAL.

  WA_REALIZADO-COL1 = 'Ago'.

  PERFORM CALCULA_MES USING '08'
                      CHANGING VL_INICIO
                               VL_FINAL.

  LOOP AT IT_ZSDT0148_R INTO WA_ZSDT0148 WHERE DATA_RECEB GE VL_INICIO AND DATA_RECEB LE VL_FINAL.
*    WA_REALIZADO-COL3 = WA_REALIZADO-COL3 + WA_ZSDT0148-VLR_TRCHE_BRL.
*    WA_REALIZADO-COL6 = WA_REALIZADO-COL6 + WA_ZSDT0148-VLR_PMIO_BRL.
    WA_REALIZADO-COL2 = WA_REALIZADO-COL2 + WA_ZSDT0148-VLR_TRCHE.
    WA_REALIZADO-COL5 = WA_REALIZADO-COL5 + WA_ZSDT0148-VLR_PMIO.
  ENDLOOP.

  TRY .
      WA_REALIZADO-COL4 = ( WA_REALIZADO-COL5 / WA_REALIZADO-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_REALIZADO-COL4 = 0.
  ENDTRY.

  APPEND WA_REALIZADO TO IT_REALIZADO.
  CLEAR: WA_REALIZADO, VL_INICIO, VL_FINAL.

  WA_REALIZADO-COL1 = 'Set'.

  PERFORM CALCULA_MES USING '09'
                      CHANGING VL_INICIO
                               VL_FINAL.

  LOOP AT IT_ZSDT0148_R INTO WA_ZSDT0148 WHERE DATA_RECEB GE VL_INICIO AND DATA_RECEB LE VL_FINAL.
*    WA_REALIZADO-COL3 = WA_REALIZADO-COL3 + WA_ZSDT0148-VLR_TRCHE_BRL.
*    WA_REALIZADO-COL6 = WA_REALIZADO-COL6 + WA_ZSDT0148-VLR_PMIO_BRL.
    WA_REALIZADO-COL2 = WA_REALIZADO-COL2 + WA_ZSDT0148-VLR_TRCHE.
    WA_REALIZADO-COL5 = WA_REALIZADO-COL5 + WA_ZSDT0148-VLR_PMIO.
  ENDLOOP.

  TRY .
      WA_REALIZADO-COL4 = ( WA_REALIZADO-COL5 / WA_REALIZADO-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_REALIZADO-COL4 = 0.
  ENDTRY.

  APPEND WA_REALIZADO TO IT_REALIZADO.
  CLEAR: WA_REALIZADO, VL_INICIO, VL_FINAL.

  WA_REALIZADO-COL1 = 'Out'.

  PERFORM CALCULA_MES USING '10'
                      CHANGING VL_INICIO
                               VL_FINAL.

  LOOP AT IT_ZSDT0148_R INTO WA_ZSDT0148 WHERE DATA_RECEB GE VL_INICIO AND DATA_RECEB LE VL_FINAL.
*    WA_REALIZADO-COL3 = WA_REALIZADO-COL3 + WA_ZSDT0148-VLR_TRCHE_BRL.
*    WA_REALIZADO-COL6 = WA_REALIZADO-COL6 + WA_ZSDT0148-VLR_PMIO_BRL.
    WA_REALIZADO-COL2 = WA_REALIZADO-COL2 + WA_ZSDT0148-VLR_TRCHE.
    WA_REALIZADO-COL5 = WA_REALIZADO-COL5 + WA_ZSDT0148-VLR_PMIO.
  ENDLOOP.

  TRY .
      WA_REALIZADO-COL4 = ( WA_REALIZADO-COL5 / WA_REALIZADO-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_REALIZADO-COL4 = 0.
  ENDTRY.

  APPEND WA_REALIZADO TO IT_REALIZADO.
  CLEAR: WA_REALIZADO, VL_INICIO, VL_FINAL.

  WA_REALIZADO-COL1 = 'Nov'.

  PERFORM CALCULA_MES USING '11'
                      CHANGING VL_INICIO
                               VL_FINAL.

  LOOP AT IT_ZSDT0148_R INTO WA_ZSDT0148 WHERE DATA_RECEB GE VL_INICIO AND DATA_RECEB LE VL_FINAL.
*    WA_REALIZADO-COL3 = WA_REALIZADO-COL3 + WA_ZSDT0148-VLR_TRCHE_BRL.
*    WA_REALIZADO-COL6 = WA_REALIZADO-COL6 + WA_ZSDT0148-VLR_PMIO_BRL.
    WA_REALIZADO-COL2 = WA_REALIZADO-COL2 + WA_ZSDT0148-VLR_TRCHE.
    WA_REALIZADO-COL5 = WA_REALIZADO-COL5 + WA_ZSDT0148-VLR_PMIO.
  ENDLOOP.

  TRY .
      WA_REALIZADO-COL4 = ( WA_REALIZADO-COL5 / WA_REALIZADO-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_REALIZADO-COL4 = 0.
  ENDTRY.

  APPEND WA_REALIZADO TO IT_REALIZADO.
  CLEAR: WA_REALIZADO, VL_INICIO, VL_FINAL.

  WA_REALIZADO-COL1 = 'Dez'.

  PERFORM CALCULA_MES USING '12'
                      CHANGING VL_INICIO
                               VL_FINAL.

  LOOP AT IT_ZSDT0148_R INTO WA_ZSDT0148 WHERE DATA_RECEB GE VL_INICIO AND DATA_RECEB LE VL_FINAL.
*    WA_REALIZADO-COL3 = WA_REALIZADO-COL3 + WA_ZSDT0148-VLR_TRCHE_BRL.
*    WA_REALIZADO-COL6 = WA_REALIZADO-COL6 + WA_ZSDT0148-VLR_PMIO_BRL.
    WA_REALIZADO-COL2 = WA_REALIZADO-COL2 + WA_ZSDT0148-VLR_TRCHE.
    WA_REALIZADO-COL5 = WA_REALIZADO-COL5 + WA_ZSDT0148-VLR_PMIO.
  ENDLOOP.

  TRY .
      WA_REALIZADO-COL4 = ( WA_REALIZADO-COL5 / WA_REALIZADO-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_REALIZADO-COL4 = 0.
  ENDTRY.

  APPEND WA_REALIZADO TO IT_REALIZADO.
  CLEAR: WA_REALIZADO, VL_INICIO, VL_FINAL.

  WA_REALIZADO-COL1 = 'Total Geral'.

  CONCATENATE P_ANOCTR '0101' INTO VL_INICIO.
  CONCATENATE P_ANOCTR '1231' INTO VL_FINAL.

  LOOP AT IT_ZSDT0148_R INTO WA_ZSDT0148 WHERE DATA_RECEB GE VL_INICIO AND DATA_RECEB LE VL_FINAL.
*    WA_REALIZADO-COL3 = WA_REALIZADO-COL3 + WA_ZSDT0148-VLR_TRCHE_BRL.
*    WA_REALIZADO-COL6 = WA_REALIZADO-COL6 + WA_ZSDT0148-VLR_PMIO_BRL.
    WA_REALIZADO-COL2 = WA_REALIZADO-COL2 + WA_ZSDT0148-VLR_TRCHE.
    WA_REALIZADO-COL5 = WA_REALIZADO-COL5 + WA_ZSDT0148-VLR_PMIO.
  ENDLOOP.

  TRY .
      WA_REALIZADO-COL4 = ( WA_REALIZADO-COL5 / WA_REALIZADO-COL2 ) * 100.
    CATCH CX_ROOT.
      WA_REALIZADO-COL4 = 0.
  ENDTRY.

  APPEND WA_REALIZADO TO IT_REALIZADO.
  CLEAR: WA_REALIZADO, VL_INICIO, VL_FINAL.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CALCULA_MES
*&---------------------------------------------------------------------*
FORM CALCULA_MES  USING    VALUE(P_MES) TYPE CHAR2
                        CHANGING VL_INICIO TYPE DATS
                                 VL_FINAL  TYPE DATS.

  CONCATENATE P_ANOCTR P_MES '01' INTO VL_INICIO.

  CALL FUNCTION 'RP_LAST_DAY_OF_MONTHS'
    EXPORTING
      DAY_IN            = VL_INICIO
    IMPORTING
      LAST_DAY_OF_MONTH = VL_FINAL
    EXCEPTIONS
      DAY_IN_NO_DATE    = 1
      OTHERS            = 2.

  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_5000_EXIT  INPUT
*&---------------------------------------------------------------------*
MODULE USER_COMMAND_5000_EXIT INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_5000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_5000 OUTPUT.

  DATA: NAME_COL2 TYPE STRING,
        NAME_COL5 TYPE STRING,
        NAME_MOEDA TYPE STRING.

  SET PF-STATUS 'STATUS5000'.
  SET TITLEBAR 'T0001'.

  IF G_CUSTOM_CONTAINER IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER5000'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    IF SY-SUBRC <> 0.
      MESSAGE A000(TREE_CONTROL_MSG).
    ENDIF.

    CREATE OBJECT DG_SPLITTER
      EXPORTING
        PARENT  = G_CUSTOM_CONTAINER
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_1.

    CALL METHOD DG_SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_2.

    CREATE OBJECT CTL_ALV1
      EXPORTING
        I_PARENT = DG_PARENT_1.

    CREATE OBJECT CTL_ALV2
      EXPORTING
        I_PARENT = DG_PARENT_2.

    CALL METHOD DG_SPLITTER->SET_ROW_MODE
      EXPORTING
        MODE = DG_SPLITTER->MODE_RELATIVE.

    CALL METHOD DG_SPLITTER->SET_ROW_HEIGHT
      EXPORTING
        ID     = 1
        HEIGHT = 20.

    CALL METHOD DG_SPLITTER->SET_ROW_HEIGHT
      EXPORTING
        ID     = 2
        HEIGHT = 80.

    GS_LAYOUT1-CWIDTH_OPT = 'X'.
    GS_LAYOUT1-SEL_MODE   = 'A'.
    GS_LAYOUT1-GRID_TITLE = P_ANOCTR && ' - Total' .
    GS_LAYOUT2-CWIDTH_OPT = 'X'.
    GS_LAYOUT2-SEL_MODE   = 'A'.
    GS_LAYOUT2-GRID_TITLE = P_ANOCTR && ' - Realizado'.

    CONCATENATE '(' P_MOECTR-LOW  ')' INTO NAME_MOEDA.
    CONCATENATE  '  FOB Perf. ' NAME_MOEDA INTO NAME_COL2 SEPARATED BY SPACE.
    CONCATENATE '  Pr√™mio recebido ' NAME_MOEDA INTO NAME_COL5 SEPARATED BY SPACE.

    PERFORM COMPLETA_TABELA_CATALOG TABLES IT_FIELDCATALOG_TOTAL USING:
        01 'COL1'      ' '  ' '  ' '            ' '                ' '  'X'  'C'  ' '  ' '  ' ',
        02 'COL2'      ' '  ' '  'ZSDT0148'     'VLR_TRCHE'        ' '  'X'  ' '  ' '  ' '  NAME_COL2,
*        03 'COL3'      ' '  ' '  'ZSDT0148'     'VLR_TRCHE_BRL'    ' '  'X'  ' '  ' '  ' '  'R$ FOB Perf.',
        03 'COL4'      ' '  ' '  'ZSDT0148'     'VLR_TRCHE'        ' '  'X'  ' '  ' '  ' '  '  Pr√™mio L√≠quido M√©dio % ',
        04 'COL5'      ' '  ' '  'ZSDT0148'     'VLR_PMIO'         ' '  'X'  ' '  ' '  ' '  NAME_COL5.
*        06 'COL6'      ' '  ' '  'ZSDT0148'     'VLR_PMIO_BRL'     ' '  'X'  ' '  ' '  ' '  'Pr√™mio l√≠quido (R$)'.

    PERFORM COMPLETA_TABELA_CATALOG TABLES IT_FIELDCATALOG_REALIZADO USING:
        01 'COL1'      ' '  ' '  ' '            ' '                ' '  'X'  'C'  ' '  ' '  'Per√≠odo',
        02 'COL2'      ' '  ' '  'ZSDT0148'     'VLR_TRCHE'        ' '  'X'  ' '  ' '  ' '  NAME_COL2,
*        03 'COL3'      ' '  ' '  'ZSDT0148'     'VLR_TRCHE_BRL'    ' '  'X'  ' '  ' '  ' '  'R$ FOB Perf.',
        03 'COL4'      ' '  ' '  'ZSDT0148'     'VLR_TRCHE'        ' '  'X'  ' '  ' '  ' '  '  Pr√™mio L√≠quido M√©dio % ',
        04 'COL5'      ' '  ' '  'ZSDT0148'     'VLR_PMIO'         ' '  'X'  ' '  ' '  ' '  NAME_COL5.
*        06 'COL6'      ' '  ' '  'ZSDT0148'     'VLR_PMIO_BRL'     ' '  'X'  ' '  ' '  ' '  'Pr√™mio l√≠quido (R$)'.

    CALL METHOD CTL_ALV1->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = GS_LAYOUT1
        I_SAVE          = 'A'
*       IT_TOOLBAR_EXCLUDING = IT_EXCLUDE
      CHANGING
        IT_FIELDCATALOG = IT_FIELDCATALOG_TOTAL
        IT_OUTTAB       = IT_TOTAL.

    CALL METHOD CTL_ALV2->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = GS_LAYOUT2
        I_SAVE          = 'A'
*       IT_TOOLBAR_EXCLUDING = IT_EXCLUDE
      CHANGING
        IT_FIELDCATALOG = IT_FIELDCATALOG_REALIZADO
        IT_OUTTAB       = IT_REALIZADO.

  ELSE.

    CALL METHOD CTL_ALV1->REFRESH_TABLE_DISPLAY.
    CALL METHOD CTL_ALV2->REFRESH_TABLE_DISPLAY.

  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  COMPLETA_TABELA_CATALOG
*&---------------------------------------------------------------------*
FORM COMPLETA_TABELA_CATALOG  TABLES P_IT_FIELDACATALOG STRUCTURE LVC_S_FCAT
                               USING VALUE(P_COLNUM)
                                     VALUE(P_FIELDNAME)
                                     VALUE(P_TABNAME)
                                     VALUE(P_DOMNAME)
                                     VALUE(P_REFTABLE)
                                     VALUE(P_REFFIELD)
                                     VALUE(P_HOTSPOT)
                                     VALUE(P_OPT)
                                     VALUE(P_JUST)
                                     VALUE(P_EDIT)
                                     VALUE(P_F4)
                                     VALUE(P_HEADER).

  DATA: WA_FIELDCATALOG TYPE LVC_S_FCAT.

  WA_FIELDCATALOG-COL_POS    = P_COLNUM.
  WA_FIELDCATALOG-FIELDNAME  = P_FIELDNAME.
  WA_FIELDCATALOG-TABNAME    = P_TABNAME.
  WA_FIELDCATALOG-COLTEXT    = P_HEADER.
  WA_FIELDCATALOG-REF_TABLE  = P_REFTABLE.
  WA_FIELDCATALOG-REF_FIELD  = P_REFFIELD.
  WA_FIELDCATALOG-DOMNAME    = P_DOMNAME.
  WA_FIELDCATALOG-HOTSPOT    = P_HOTSPOT.
  WA_FIELDCATALOG-COL_OPT    = P_OPT.
  WA_FIELDCATALOG-JUST       = P_JUST.
  WA_FIELDCATALOG-EDIT       = P_EDIT.
  WA_FIELDCATALOG-F4AVAILABL = P_F4.
  APPEND WA_FIELDCATALOG TO P_IT_FIELDACATALOG.

ENDFORM.
