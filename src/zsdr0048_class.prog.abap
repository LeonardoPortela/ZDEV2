** Busca taxa curva no WebService
CLASS LCL_ACAO DEFINITION.
  PUBLIC SECTION.

    CLASS-METHODS BUSCA_TAXA
      IMPORTING
        !I_DATA_LIB   TYPE ZSDT0094-DATA_LIB
        !I_DATA_VENC  TYPE ZSDT0094-DATA_VENC
        !I_TIPO_TAXA  TYPE ZSDT0094-TIPO_TAXA
      RETURNING
        VALUE(E_TAXA) TYPE KURRF.

    METHODS: VALIDA_CAMPOS.
    CLASS-METHODS SALVAR_DADOS.

ENDCLASS.                    "LCL_ACAO_48 DEFINITION

* CLASS LCL_AlV_Toolbar DEFINITION
* ALV Event Handler
CLASS LCL_ALV_TOOLBAR DEFINITION.
  PUBLIC SECTION.
*Constructor
    METHODS: CONSTRUCTOR
      IMPORTING IO_ALV_GRID TYPE REF TO CL_GUI_ALV_GRID,
*Event for toolbar
      ON_TOOLBAR FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
        IMPORTING E_OBJECT,

      ON_TOOLBAR_0102 FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
        IMPORTING E_OBJECT,

      HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING E_UCOMM,

      HANDLE_USER_COMMAND_0102 FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING E_UCOMM,

      ON_DATA_CHANGER FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
        IMPORTING ER_DATA_CHANGED E_ONF4 E_ONF4_BEFORE E_ONF4_AFTER E_UCOMM,

      ON_DATA_CHANGED_FINISHED FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID
        IMPORTING E_MODIFIED ET_GOOD_CELLS,

      ON_DATA_CHANGER_0102 FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
        IMPORTING ER_DATA_CHANGED E_ONF4 E_ONF4_BEFORE E_ONF4_AFTER E_UCOMM,

      ON_F4 FOR EVENT ONF4 OF CL_GUI_ALV_GRID
        IMPORTING E_FIELDNAME E_FIELDVALUE ES_ROW_NO ER_EVENT_DATA
                  ET_BAD_CELLS E_DISPLAY.

ENDCLASS.                    "LCL_ALV_TOOLBAR DEFINITION


*  DATA: BUSCA_TX TYPE REF TO LCL_ACAO.
*  CREATE OBJECT BUSCA_TX.

*       CLASS LCL_ALV_TOOLBAR IMPLEMENTATION
CLASS LCL_ALV_TOOLBAR IMPLEMENTATION.
  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT C_ALV_TOOLBARMANAGER
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.

*   Create ALV toolbar manager instance
    CREATE OBJECT C_ALV_TOOLBARMANAGER_0102
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.

  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    TY_TOOLBAR-ICON      = ICON_CHANGE.
    TY_TOOLBAR-FUNCTION  = 'EDIT'.
    TY_TOOLBAR-DISABLED  = WL_DESACTIVE.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-ICON      = ICON_INSERT_ROW.
    TY_TOOLBAR-FUNCTION  = 'ADD'.
    TY_TOOLBAR-DISABLED  = WL_DESACTIVE.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-ICON      = ICON_DELETE_ROW.
    TY_TOOLBAR-FUNCTION  = 'DEL'.
    TY_TOOLBAR-DISABLED  = WL_DESACTIVE.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-ICON      = ICON_REFRESH.
    TY_TOOLBAR-FUNCTION  = 'REN'.
    TY_TOOLBAR-DISABLED  = WL_DESACTIVE.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-BUTN_TYPE = 3.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-ICON      = ICON_RELEASE.
    TY_TOOLBAR-FUNCTION  =  'TAXA'.
    TY_TOOLBAR-DISABLED  = ' '.
    TY_TOOLBAR-BUTN_TYPE = 0.
    TY_TOOLBAR-QUICKINFO = 'Taxa Curva'.
    TY_TOOLBAR-TEXT      = 'Taxa Curva'.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-BUTN_TYPE = 3.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-ICON      = ICON_SYSTEM_UNDO.
    TY_TOOLBAR-FUNCTION  =  'REV'.
    TY_TOOLBAR-DISABLED  = ' '.
    TY_TOOLBAR-BUTN_TYPE = 0.
    TY_TOOLBAR-QUICKINFO = 'Reversão'.
    TY_TOOLBAR-TEXT      = 'Reversão'.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.


*   Call reorganize method of toolbar manager to
*   display the toolbar
    CALL METHOD C_ALV_TOOLBARMANAGER->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.

  ENDMETHOD.                    "on_toolbar

  METHOD ON_TOOLBAR_0102.

    TY_TOOLBAR_0102-ICON      = ICON_INSERT_ROW.
    TY_TOOLBAR_0102-FUNCTION  = 'ADD'.
    TY_TOOLBAR_0102-DISABLED  = WL_DESACTIVE.
    TY_TOOLBAR_0102-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR_0102 TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR_0102.

    TY_TOOLBAR_0102-ICON      = ICON_DELETE_ROW.
    TY_TOOLBAR_0102-FUNCTION  = 'DEL'.
    TY_TOOLBAR_0102-DISABLED  = WL_DESACTIVE.
    TY_TOOLBAR_0102-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR_0102 TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR_0102.

    TY_TOOLBAR_0102-BUTN_TYPE = 3.
    APPEND TY_TOOLBAR_0102 TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR_0102.

*   Call reorganize method of toolbar manager to
*   display the toolbar
    CALL METHOD C_ALV_TOOLBARMANAGER_0102->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.
    DATA: P_RESP.
    DATA: P_QUESTION TYPE C LENGTH 255.

    CASE E_UCOMM.
      WHEN 'EDIT'.

        CLEAR IT_SELECTED_ROWS.

        CALL METHOD OBJ_GRID->GET_SELECTED_ROWS
          IMPORTING
            ET_INDEX_ROWS = IT_SELECTED_ROWS.

        IF IT_SELECTED_ROWS IS NOT INITIAL.

          PERFORM CHANGE_ROWS USING 'ACTIVE' ''.
          PERFORM CHANGE_CATALOGO USING 'X'.
          WL_DESACTIVE = 'X'.

        ELSE.
          MESSAGE S836(SD) DISPLAY LIKE 'E' WITH TEXT-M01.
        ENDIF.

        CALL METHOD OBJ_GRID->REFRESH_TABLE_DISPLAY
          EXPORTING
            IS_STABLE = GS_STABLE.

      WHEN 'DEL'.

        CLEAR: WA_ZSDT0094, WL_ZSDT0094.


        CALL METHOD OBJ_GRID->GET_SELECTED_ROWS
          IMPORTING
            ET_INDEX_ROWS = IT_SELECTED_ROWS.

        IF IT_SELECTED_ROWS IS NOT INITIAL.

          CASE LINES( IT_SELECTED_ROWS ).
            WHEN 1.
              P_QUESTION = TEXT-E01.
            WHEN OTHERS.
              P_QUESTION = TEXT-E02.
          ENDCASE.

          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              TEXT_QUESTION         = P_QUESTION
              TEXT_BUTTON_1         = 'Sim'
              TEXT_BUTTON_2         = 'Não'
              DISPLAY_CANCEL_BUTTON = ' '
            IMPORTING
              ANSWER                = P_RESP.

          CASE P_RESP.
            WHEN 1.

              LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.

                READ TABLE IT_ZSDT0094 INTO WA_ZSDT0094 INDEX WA_SELECTED_ROWS-INDEX.
                MOVE-CORRESPONDING WA_ZSDT0094 TO WL_ZSDT0094.
                DELETE ZSDT0094 FROM WL_ZSDT0094.
                COMMIT WORK.

              ENDLOOP.

              REFRESH IT_ZSDT0094.
              PERFORM SELECIONAR_DADOS.

          ENDCASE.
        ENDIF.

        CALL METHOD OBJ_GRID->REFRESH_TABLE_DISPLAY
          EXPORTING
            IS_STABLE = GS_STABLE.

      WHEN 'REN'.

        PERFORM SELECIONAR_DADOS.

        CALL METHOD OBJ_GRID->REFRESH_TABLE_DISPLAY
          EXPORTING
            IS_STABLE = GS_STABLE.

      WHEN 'TAXA'.
        CLEAR: WA_TAXA.
        CALL SCREEN 101 STARTING AT 3 3.

      WHEN 'ADD'.
        CALL SCREEN 102 STARTING AT 3 3.

      WHEN 'REV'.

        FREE: GT_ZSDT0094, IT_SELECTED_ROWS.

        CALL METHOD OBJ_GRID->GET_SELECTED_ROWS
          IMPORTING
            ET_INDEX_ROWS = IT_SELECTED_ROWS.

        IF IT_SELECTED_ROWS IS NOT INITIAL.

          LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.

            READ TABLE IT_ZSDT0094 INTO WA_ZSDT0094 INDEX WA_SELECTED_ROWS-INDEX.
            MOVE-CORRESPONDING WA_ZSDT0094 TO WL_ZSDT0094.
            APPEND WL_ZSDT0094 TO GT_ZSDT0094.
          ENDLOOP.

        ENDIF.

        PERFORM REVERSAO TABLES GT_ZSDT0094.

        PERFORM SELECIONAR_DADOS.

        CALL METHOD OBJ_GRID->REFRESH_TABLE_DISPLAY.


    ENDCASE.

  ENDMETHOD.                    "HANDLE_USER_COMMAND

  METHOD HANDLE_USER_COMMAND_0102.

    CASE E_UCOMM.
      WHEN 'DEL'.

        CALL METHOD OBJ_GRID_0102->GET_SELECTED_ROWS
          IMPORTING
            ET_INDEX_ROWS = IT_SELECTED_ROWS.

        CHECK IT_SELECTED_ROWS IS NOT INITIAL.

        LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
          READ TABLE IT_ADD ASSIGNING FIELD-SYMBOL(<ADD>) INDEX  WA_SELECTED_ROWS-INDEX.
          <ADD>-CHECK = ABAP_TRUE.
        ENDLOOP.

        DELETE IT_ADD WHERE CHECK EQ ABAP_TRUE.

      WHEN 'ADD'.

        CALL METHOD OBJ_GRID_0102->GET_FRONTEND_FIELDCATALOG
          IMPORTING
            ET_FIELDCATALOG = IT_FCAT_0102.

        LOOP AT IT_FCAT_0102 INTO WA_FCAT.

          CASE WA_FCAT-FIELDNAME.
            WHEN 'PROGRAMA'    OR 'NRO_SOL_OV' OR
                 'DATA_VENC'   OR 'DATA_LIB'   OR
                 'TAXA_CURVA'  OR 'TIPO_TAXA'  OR
                 'TAXA_CAMBIO' OR 'TIPO'       OR
                 'SAFRA'       OR 'ZIEME'.

              COL-FNAME = WA_FCAT-FIELDNAME.
              COLOR-COL = '6'.
              COLOR-INT = '0'.
              COLOR-INV = '0'.
              COL-COLOR = COLOR.

              APPEND COL TO COLTAB.
              FREE: COL, COLOR.

              WA_ADD-COLOR_CELL = COLTAB.

          ENDCASE.
        ENDLOOP.

        APPEND WA_ADD TO IT_ADD.

        PERFORM CHANGE_ROWS USING 'ACTIVE' 'P'.
        PERFORM CHANGE_CATALOGO USING ''.

    ENDCASE.

    CALL METHOD OBJ_GRID_0102->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = GS_STABLE.

  ENDMETHOD.

  METHOD ON_DATA_CHANGED_FINISHED.

  ENDMETHOD.

  METHOD ON_DATA_CHANGER.

    DATA: LS_GOOD TYPE LVC_S_MODI,
          FRETE   TYPE C LENGTH 30,
          LEN1    TYPE I,
          OFST1   TYPE I,
          STR_C   TYPE STRING.

    LOOP AT ER_DATA_CHANGED->MT_GOOD_CELLS
                             INTO LS_GOOD
                             WHERE FIELDNAME = 'CADENCIA_QTE'.
    ENDLOOP.

    LOOP AT ER_DATA_CHANGED->MT_GOOD_CELLS
                             INTO LS_GOOD
                             WHERE FIELDNAME = 'FRETE_CIF'
                                OR FIELDNAME = 'FRETE_PORTO'.

      CALL METHOD ER_DATA_CHANGED->GET_CELL_VALUE
        EXPORTING
          I_ROW_ID    = LS_GOOD-ROW_ID
          I_TABIX     = LS_GOOD-TABIX
          I_FIELDNAME = LS_GOOD-FIELDNAME
        IMPORTING
          E_VALUE     = FRETE.

      TRANSLATE FRETE USING ',.'.
      CONDENSE FRETE NO-GAPS.

      IF LS_GOOD-FIELDNAME EQ 'FRETE_CIF'.

        CALL METHOD ER_DATA_CHANGED->MODIFY_CELL(
            I_ROW_ID    = LS_GOOD-ROW_ID
            I_TABIX     = LS_GOOD-TABIX
            I_FIELDNAME = LS_GOOD-FIELDNAME
            I_VALUE     = FRETE ).

        EXIT.

      ENDIF.

      LEN1 = STRLEN( FRETE ).
      TRANSLATE FRETE  TO UPPER CASE.

      DO.

        IF OFST1 = LEN1.
          EXIT.
        ENDIF.

        IF FRETE+OFST1(1) EQ '.'.
          EXIT.
        ELSE.
          CONCATENATE STR_C FRETE+OFST1(1) INTO STR_C.
        ENDIF.

        OFST1 = OFST1 + 1.

      ENDDO.

      FRETE = STR_C.

      CALL METHOD ER_DATA_CHANGED->MODIFY_CELL(
          I_ROW_ID    = LS_GOOD-ROW_ID
          I_TABIX     = LS_GOOD-TABIX
          I_FIELDNAME = LS_GOOD-FIELDNAME
          I_VALUE     = FRETE ).


    ENDLOOP.

  ENDMETHOD.                    "ON_DATA_CHANGER

  METHOD ON_DATA_CHANGER_0102.

    DATA: LS_GOOD       TYPE LVC_S_MODI.
    DATA: DATA_VENC  TYPE ZSDT0094-DATA_VENC,
          DATA_LIB   TYPE ZSDT0094-DATA_LIB,
          TIPO_TAXA  TYPE ZSDT0094-TIPO_TAXA,
          TAXA_CURVA TYPE KURRF,
          FRETE      TYPE C LENGTH 30,
          LEN1       TYPE I,
          OFST1      TYPE I,
          STR_C      TYPE STRING.


    DATA: GOBJ_ZCL_TAXA_CURVA          TYPE REF TO ZCL_TAXA_CURVA,
          GOBJ_ZCL_WEBSERVICE_TX_CURVA TYPE REF TO ZCL_WEBSERVICE_TX_CURVA.

    FREE: GOBJ_ZCL_TAXA_CURVA, GOBJ_ZCL_WEBSERVICE_TX_CURVA.
    CREATE OBJECT GOBJ_ZCL_TAXA_CURVA.
    CREATE OBJECT GOBJ_ZCL_WEBSERVICE_TX_CURVA.

    LOOP AT ER_DATA_CHANGED->MT_GOOD_CELLS
                                 INTO LS_GOOD
                                  WHERE FIELDNAME = 'PROGRAMA'.

      READ TABLE IT_ADD ASSIGNING FIELD-SYMBOL(<ADD>) INDEX LS_GOOD-TABIX.
      READ TABLE GT_VALUES INTO DATA(VALUES) WITH KEY DDTEXT = LS_GOOD-VALUE(60).

      PERFORM BUILD_DROPDOWN1 USING VALUES-DOMVALUE_L LS_GOOD-FIELDNAME.

      CALL METHOD ER_DATA_CHANGED->MODIFY_CELL(
          I_ROW_ID    = LS_GOOD-ROW_ID
          I_TABIX     = LS_GOOD-TABIX
          I_FIELDNAME = 'DATA_REGISTRO'
          I_VALUE     = <ADD>-DATA_REGISTRO ).

      CALL METHOD ER_DATA_CHANGED->MODIFY_CELL(
          I_ROW_ID    = LS_GOOD-ROW_ID
          I_TABIX     = LS_GOOD-TABIX
          I_FIELDNAME = 'HORA_REGISTRO'
          I_VALUE     = <ADD>-HORA_REGISTRO ).

    ENDLOOP.

    LOOP AT ER_DATA_CHANGED->MT_GOOD_CELLS
                                 INTO LS_GOOD
                                  WHERE FIELDNAME = 'DATA_LIB' OR
                                        FIELDNAME = 'DATA_VENC' OR
                                        FIELDNAME = 'TIPO_TAXA'.

      CLEAR: DATA_LIB, DATA_VENC, TIPO_TAXA.

      CALL METHOD ER_DATA_CHANGED->GET_CELL_VALUE
        EXPORTING
          I_ROW_ID    = LS_GOOD-ROW_ID
          I_TABIX     = LS_GOOD-TABIX
          I_FIELDNAME = 'DATA_LIB'
        IMPORTING
          E_VALUE     = DATA_LIB.

      CALL METHOD ER_DATA_CHANGED->GET_CELL_VALUE
        EXPORTING
          I_ROW_ID    = LS_GOOD-ROW_ID
          I_TABIX     = LS_GOOD-TABIX
          I_FIELDNAME = 'DATA_VENC'
        IMPORTING
          E_VALUE     = DATA_VENC.

      CALL METHOD ER_DATA_CHANGED->GET_CELL_VALUE
        EXPORTING
          I_ROW_ID    = LS_GOOD-ROW_ID
          I_TABIX     = LS_GOOD-TABIX
          I_FIELDNAME = 'TIPO_TAXA'
        IMPORTING
          E_VALUE     = TIPO_TAXA.

      CHECK NOT DATA_VENC IS INITIAL AND
            NOT DATA_LIB  IS INITIAL AND
            NOT TIPO_TAXA IS INITIAL.

      TRANSLATE TIPO_TAXA TO UPPER CASE.

      TAXA_CURVA = LCL_ACAO=>BUSCA_TAXA( I_DATA_LIB  = DATA_LIB
                                         I_DATA_VENC = DATA_VENC
                                         I_TIPO_TAXA = TIPO_TAXA ).

      CALL METHOD ER_DATA_CHANGED->MODIFY_CELL(
          I_ROW_ID    = LS_GOOD-ROW_ID
          I_TABIX     = LS_GOOD-TABIX
          I_FIELDNAME = 'TAXA_CURVA'
          I_VALUE     = TAXA_CURVA ).

    ENDLOOP.

    LOOP AT ER_DATA_CHANGED->MT_GOOD_CELLS
                         INTO LS_GOOD
                         WHERE FIELDNAME = 'FRETE_CIF'
                            OR FIELDNAME = 'FRETE_PORTO'.

      CALL METHOD ER_DATA_CHANGED->GET_CELL_VALUE
        EXPORTING
          I_ROW_ID    = LS_GOOD-ROW_ID
          I_TABIX     = LS_GOOD-TABIX
          I_FIELDNAME = LS_GOOD-FIELDNAME
        IMPORTING
          E_VALUE     = FRETE.

      TRANSLATE FRETE USING ',.'.
      CONDENSE FRETE NO-GAPS.

      IF LS_GOOD-FIELDNAME EQ 'FRETE_CIF'.

        CALL METHOD ER_DATA_CHANGED->MODIFY_CELL(
            I_ROW_ID    = LS_GOOD-ROW_ID
            I_TABIX     = LS_GOOD-TABIX
            I_FIELDNAME = LS_GOOD-FIELDNAME
            I_VALUE     = FRETE ).

        EXIT.

      ENDIF.

      LEN1 = STRLEN( FRETE ).
      TRANSLATE FRETE  TO UPPER CASE.

      DO.

        IF OFST1 = LEN1.
          EXIT.
        ENDIF.

        IF FRETE+OFST1(1) EQ '.'.
          EXIT.
        ELSE.
          CONCATENATE STR_C FRETE+OFST1(1) INTO STR_C.
        ENDIF.

        OFST1 = OFST1 + 1.

      ENDDO.

      FRETE = STR_C.

      CALL METHOD ER_DATA_CHANGED->MODIFY_CELL(
          I_ROW_ID    = LS_GOOD-ROW_ID
          I_TABIX     = LS_GOOD-TABIX
          I_FIELDNAME = LS_GOOD-FIELDNAME
          I_VALUE     = FRETE ).


    ENDLOOP.



  ENDMETHOD.

  METHOD ON_F4.

    CLEAR WA_ZSDT0094.
    DATA: PROGRAMA   TYPE ZSDT0094-PROGRAMA,
          NRO_SOL_OV TYPE ZSDT0094-NRO_SOL_OV.


    IF VAR_DIR IS INITIAL.
      READ TABLE IT_ZSDT0094 INTO WA_ZSDT0094 INDEX ES_ROW_NO-ROW_ID.
      PROGRAMA   = WA_ZSDT0094-PROGRAMA.
      NRO_SOL_OV = WA_ZSDT0094-NRO_SOL_OV.
    ELSE.

      READ TABLE IT_ADD INTO WA_ADD INDEX ES_ROW_NO-ROW_ID.
      CHECK NOT WA_ADD-PROGRAMA IS INITIAL.
      CHECK NOT WA_ADD-NRO_SOL_OV IS INITIAL.
      READ TABLE GT_VALUES INTO DATA(VALUES) WITH KEY DDTEXT = WA_ADD-PROGRAMA(40).
      PERFORM GET_PROG USING VALUES-DOMVALUE_L CHANGING PROGRAMA.
      NRO_SOL_OV = WA_ADD-NRO_SOL_OV.

    ENDIF.

    FREE IT_F4.

    SELECT *
       FROM ZSDT0094
       INTO CORRESPONDING FIELDS OF TABLE IT_F4
       WHERE PROGRAMA EQ PROGRAMA.
*         AND NRO_SOL_OV EQ NRO_SOL_OV.

    SORT IT_F4 BY BEZEI.
    DELETE ADJACENT DUPLICATES FROM IT_F4 COMPARING BEZEI.

    CASE E_FIELDNAME.
      WHEN 'BEZEI'.
        CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
          EXPORTING
            RETFIELD   = 'BEZEI'
            VALUE_ORG  = 'S'
          TABLES
            VALUE_TAB  = IT_F4
            RETURN_TAB = IT_RETURN.

        IF SY-SUBRC IS INITIAL.
          LOOP AT IT_RETURN INTO WA_RETURN.

            IF VAR_DIR IS INITIAL.
              READ TABLE IT_ZSDT0094 ASSIGNING FIELD-SYMBOL(<W0094>) INDEX ES_ROW_NO-ROW_ID.
              IF SY-SUBRC IS INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    INPUT  = WA_RETURN-FIELDVAL
                  IMPORTING
                    OUTPUT = <W0094>-BEZEI.
              ENDIF.
            ELSE.
              READ TABLE IT_ADD ASSIGNING FIELD-SYMBOL(<ADD>) INDEX ES_ROW_NO-ROW_ID.
              IF SY-SUBRC IS INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    INPUT  = WA_RETURN-FIELDVAL
                  IMPORTING
                    OUTPUT = <ADD>-BEZEI.
              ENDIF.
            ENDIF.
          ENDLOOP.
        ENDIF.

    ENDCASE.

    ER_EVENT_DATA->M_EVENT_HANDLED = ABAP_TRUE.

    IF VAR_DIR IS INITIAL.
      CALL METHOD OBJ_GRID->REFRESH_TABLE_DISPLAY.
    ELSE.
      CALL METHOD OBJ_GRID_0102->REFRESH_TABLE_DISPLAY.
    ENDIF.

    CLEAR WA_ADD.

  ENDMETHOD.

ENDCLASS.                    "lcl_alv_toolbar IMPLEMENTATION


* Busca taxa
CLASS LCL_ACAO IMPLEMENTATION.

  METHOD BUSCA_TAXA.

    DATA: GOBJ_ZCL_TAXA_CURVA          TYPE REF TO ZCL_TAXA_CURVA,
          GOBJ_ZCL_WEBSERVICE_TX_CURVA TYPE REF TO ZCL_WEBSERVICE_TX_CURVA.

    FREE: GOBJ_ZCL_TAXA_CURVA, GOBJ_ZCL_WEBSERVICE_TX_CURVA.
    CREATE OBJECT GOBJ_ZCL_TAXA_CURVA.
    CREATE OBJECT GOBJ_ZCL_WEBSERVICE_TX_CURVA.

    CLEAR: WA_TAXA-COTACAO.
    IF WA_TAXA-DATA_FINAL LE SY-DATUM.
      SY-CPROG = 'ZCARGA'.
    ENDIF.

    WA_TAXA-COTACAO =
    GOBJ_ZCL_WEBSERVICE_TX_CURVA->BUSCAR_TAXA(  I_DATA     = I_DATA_VENC   " Dt. Vencimento
                                                I_DATA_LIB = I_DATA_LIB    " Dt. Liberação
                                                I_TIPO     = I_TIPO_TAXA ).

    E_TAXA = WA_TAXA-COTACAO.

    MOVE WA_TAXA-COTACAO TO CX3.
    CONDENSE CX3.

  ENDMETHOD.                    "BUSCA_TAXA

  METHOD VALIDA_CAMPOS.

* Valida se os campos foram preenchidos.
    IF WA_TAXA-DATA_INICIAL IS INITIAL
    OR WA_TAXA-DATA_FINAL   IS INITIAL.
      MESSAGE TEXT-M03 TYPE 'W'.

    ELSE.
*      Verifica se a data final é menos que a inicial
      IF WA_TAXA-DATA_FINAL LT WA_TAXA-DATA_INICIAL.
        MESSAGE TEXT-M02 TYPE 'W'.
      ELSE.
*       atribui o tipo da taxa para a variavel.
        CASE C.
          WHEN 'X'.
            MOVE 'C' TO WA_TAXA-TIPO_TAXA.
          WHEN ''.
            MOVE 'V' TO WA_TAXA-TIPO_TAXA.
        ENDCASE.

        LCL_ACAO=>BUSCA_TAXA( I_DATA_LIB = WA_TAXA-DATA_INICIAL
                              I_DATA_VENC = WA_TAXA-DATA_FINAL
                              I_TIPO_TAXA = WA_TAXA-TIPO_TAXA ).


      ENDIF.
    ENDIF.


  ENDMETHOD.                    "VALIDA_CAMPOS

  METHOD SALVAR_DADOS.

    FREE: IT_ZSDT0094_INPUT.
    CLEAR VAR_EXIT.

    LOOP AT IT_ADD INTO WA_ADD.

      IF WA_ADD-PROGRAMA    IS INITIAL OR
         WA_ADD-NRO_SOL_OV  IS INITIAL OR
         WA_ADD-DATA_VENC   IS INITIAL OR
         WA_ADD-DATA_LIB    IS INITIAL OR
         WA_ADD-TAXA_CURVA  IS INITIAL OR
         WA_ADD-TIPO_TAXA   IS INITIAL OR
         WA_ADD-TAXA_CAMBIO IS INITIAL OR
         WA_ADD-TIPO        IS INITIAL OR
         WA_ADD-SAFRA       IS INITIAL OR
         WA_ADD-ZIEME       IS INITIAL.
        VAR_EXIT = ABAP_TRUE.
        CONTINUE.
      ENDIF.

      CLEAR WL_ZSDT0094.

      READ TABLE GT_VALUES INTO DATA(VALUES) WITH KEY DDTEXT = WA_ADD-PROGRAMA(40).
      WA_ADD-DATA_REGISTRO = SY-DATUM.

      PERFORM GET_PROG USING VALUES-DOMVALUE_L CHANGING WA_ADD-PROGRAMA.

      MOVE-CORRESPONDING WA_ADD TO WL_ZSDT0094.
      APPEND WL_ZSDT0094 TO IT_ZSDT0094_INPUT.
    ENDLOOP.

    LOOP AT IT_ZSDT0094_INPUT ASSIGNING FIELD-SYMBOL(<WA_0094>).

      IF SY-TABIX EQ 1.
        <WA_0094>-HORA_REGISTRO = SY-UZEIT.
      ELSE.
        <WA_0094>-HORA_REGISTRO = IT_ZSDT0094_INPUT[ SY-TABIX - 1 ]-HORA_REGISTRO + 2.
      ENDIF.

    ENDLOOP.

    IF VAR_EXIT IS NOT INITIAL.
      MESSAGE |Existem campos Obrigatórios sem Preenchimento!| TYPE 'I'.
      FREE: WA_ADD, IT_ZSDT0094_INPUT.
      EXIT.
    ENDIF.

    MODIFY ZSDT0094 FROM TABLE IT_ZSDT0094_INPUT.
    COMMIT WORK.

    FREE: IT_ADD, WA_ADD, CONT, SL_ZSDT0094-FIELD_STYLE.

  ENDMETHOD.

ENDCLASS.                    "LCL_ACAO IMPLEMENTATION
