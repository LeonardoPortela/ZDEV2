CLASS ZCL_INTEGRACAO_DATASHARE DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES ZIF_INTEGRACAO_INJECT .
    INTERFACES ZIF_INTEGRACAO_DATASHARE .

    DATA AT_CLIENTESIM TYPE CHAR1 .

    METHODS CONSTRUCTOR
      IMPORTING
        VALUE(I_SERVICO)        TYPE /UI2/SERVICE_NAME OPTIONAL
        VALUE(I_REQ)            TYPE ZMMC_DADOS_INT_COUPA_EBAN OPTIONAL
        VALUE(I_FORNECEDOR_SAP) TYPE LIFNR OPTIONAL
        VALUE(I_CLIENTE)        TYPE KUNNR OPTIONAL
        VALUE(I_PROTOCOLO)      TYPE STRING OPTIONAL
        VALUE(I_ACEITE)         TYPE CHAR1 OPTIONAL
      RAISING
        ZCX_INTEGRACAO .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_INTEGRACAO_DATASHARE IMPLEMENTATION.


  METHOD CONSTRUCTOR.

*-US 135191-18-06-2024-#135191-RJF-inicio
    IF I_CLIENTE IS NOT INITIAL.
      AT_CLIENTESIM = ABAP_TRUE.
    ENDIF.
*-US 135191-18-06-2024-#135191-RJF-fim

    ME->ZIF_INTEGRACAO_DATASHARE~SET_SERVICO( I_SERVICO = I_SERVICO ).
    ME->ZIF_INTEGRACAO_DATASHARE~SET_PARAMETROS( I_PARAMETROS = |{ I_FORNECEDOR_SAP ALPHA = IN }| ).

    ME->ZIF_INTEGRACAO_DATASHARE~SET_PROTOCOLO( I_PROTOCOLO ). "// wbarbosa BUG-165542 03/02/2025
    ME->ZIF_INTEGRACAO_DATASHARE~SET_ACEITE( I_ACEITE ). "// wbarbosa BUG-165542 03/02/2025

    ME->ZIF_INTEGRACAO_INJECT~AT_ID_INTERFACE    = ZIF_INTEGRACAO=>AT_ID_INTERFACE_DATASHARE.
    ME->ZIF_INTEGRACAO_INJECT~AT_TP_INTEGRACAO   = ZIF_INTEGRACAO=>AT_TP_INTEGRACAO_OUTBOUND.
    ME->ZIF_INTEGRACAO_INJECT~AT_TP_CANAL        = ZIF_INTEGRACAO=>AT_TP_CANAL_COMUNICA_HTTP.
    ME->ZIF_INTEGRACAO_INJECT~AT_TP_SINCRONIA    = ZIF_INTEGRACAO=>AT_TP_SINCRONIA_SINCRONA.
    ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_NOT_CONTENT_LENGTH = ABAP_TRUE.
    ME->ZIF_INTEGRACAO_INJECT~AT_AUTENTICA_OPUS  = ZIF_INTEGRACAO=>AT_ID_INTERFACE_AUT_OPUS_NAO.
    ME->ZIF_INTEGRACAO_INJECT~AT_SEND_AUTENTICAO = ZIF_INTEGRACAO=>AT_ID_INTERFACE_AUT_SEND_SIM.
    ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_NOT_CONTENT_LENGTH = ABAP_TRUE.
    ME->ZIF_INTEGRACAO_INJECT~AT_AUTENTICA_MODULE = 'datasharing'.

    IF I_SERVICO IS NOT INITIAL.

      SELECT SINGLE * FROM ZAUTH_WEBSERVICE
        INTO ME->ZIF_INTEGRACAO_DATASHARE~AT_AUTH_WS
          WHERE SERVICE = I_SERVICO.

    ENDIF.

    SELECT SINGLE *
      FROM ZAUTH_WEBSERVICE
      INTO ME->ZIF_INTEGRACAO_DATASHARE~AT_TOKEN_WS
        WHERE SERVICE = 'TOKEN_DATASHARE'.

    IF ME->ZIF_INTEGRACAO_DATASHARE~AT_AUTH_WS  IS INITIAL OR
       ME->ZIF_INTEGRACAO_DATASHARE~AT_TOKEN_WS IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_INTEGRACAO.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_DATASHARE~GET_ID_REFERENCIA.
    R_IF_INTEGRACAO_DATASHARE = ME.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_DATASHARE~GET_INSTANCE.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_DATASHARE~SET_CADASTRO.

    DATA: RETORNO_ACEITE TYPE ZMMS007,
          EDADASHARE     TYPE ZMME0005.

    CHECK ME->ZIF_INTEGRACAO_DATASHARE~AT_PARAMETROS IS NOT INITIAL.

    IF AT_CLIENTESIM IS INITIAL. " *-US 135191-18-06-2024-#135191-RJF

      SELECT SINGLE *
        FROM LFA1
        INTO @DATA(WA_LFA1)
        WHERE LIFNR EQ @ME->ZIF_INTEGRACAO_DATASHARE~AT_PARAMETROS.

      IF WA_LFA1-ADRNR IS NOT INITIAL.
        SELECT SINGLE *
          FROM ADR6
          INTO @DATA(WA_ADR6)
          WHERE ADDRNUMBER = @WA_LFA1-ADRNR.

        SELECT *
          FROM ADR2
          INTO TABLE @DATA(IT_ADR2)
          WHERE ADDRNUMBER = @WA_LFA1-ADRNR.

        SELECT SINGLE *
          FROM ADRC
          INTO @DATA(WA_ADRC)
          WHERE ADDRNUMBER = @WA_LFA1-ADRNR.

      ENDIF.

      EDADASHARE = NEW ZCL_INTEGRACAO_APP_PRODUTOR( )->GET_PROTOCOLO( I_FORNECEDOR_SAP = ME->ZIF_INTEGRACAO_DATASHARE~AT_PARAMETROS ).
      EDADASHARE-PROTOCOLO = ME->ZIF_INTEGRACAO_DATASHARE~GET_PROTOCOLO( ). "// wbarbosa BUG-165542 03/02/2025
      EDADASHARE-ACEITE = ME->ZIF_INTEGRACAO_DATASHARE~GET_ACEITE( ). "// wbarbosa BUG-165542 03/02/2025

      RETORNO_ACEITE-PROTOCOLO     = EDADASHARE-PROTOCOLO.
      RETORNO_ACEITE-FORNECEDOR    = ME->ZIF_INTEGRACAO_DATASHARE~AT_PARAMETROS.
      RETORNO_ACEITE-ACEITE        = EDADASHARE-ACEITE.
      RETORNO_ACEITE-NOME             = WA_LFA1-NAME1.
      RETORNO_ACEITE-DATA_NASCIMENTO  = WA_LFA1-GBDAT.
      RETORNO_ACEITE-CPF              = WA_LFA1-STCD2.
      RETORNO_ACEITE-RG               = WA_LFA1-STCD3.
*    retorno_aceite-cnh
*    retorno_aceite-estado_civil
*    retorno_aceite-nome_conjuge
*    retorno_aceite-cpf_conjuge

      IF WA_ADRC IS NOT INITIAL.
        RETORNO_ACEITE-ENDERECO = |{ WA_ADRC-STREET } { WA_ADRC-HOUSE_NUM1 }, { WA_ADRC-CITY2 }, { WA_ADRC-CITY1 }-{ WA_ADRC-REGION }|.
      ENDIF.

      READ TABLE IT_ADR2 INTO DATA(WA_ADR2) WITH KEY ADDRNUMBER = WA_LFA1-ADRNR HOME_FLAG = ABAP_TRUE.
      IF SY-SUBRC IS INITIAL.
        RETORNO_ACEITE-TELEFONE1 = WA_ADR2-TELNR_LONG.
      ENDIF.

      READ TABLE IT_ADR2 INTO WA_ADR2 WITH KEY ADDRNUMBER = WA_LFA1-ADRNR HOME_FLAG = ABAP_FALSE.
      IF SY-SUBRC IS INITIAL.
        RETORNO_ACEITE-TELEFONE2 = WA_ADR2-TELNR_LONG.
      ENDIF.

*    retorno_aceite-whatsapp
      RETORNO_ACEITE-EMAIL           = WA_ADR6-SMTP_ADDR.
      RETORNO_ACEITE-GRUPO_ECONOMICO = WA_LFA1-KONZS.

*    retorno_aceite-integrantes_grupo
*    retorno_aceite-cnpj_empresa_participacao
*    retorno_aceite-porcentagem_participacao_emp

*-US 135191-18-06-2024-#135191-RJF-inicio
    ELSE. "Cliente

      SELECT SINGLE *
        FROM KNA1
        INTO @DATA(WA_KNA1)
        WHERE KUNNR EQ @ME->ZIF_INTEGRACAO_DATASHARE~AT_PARAMETROS.

      IF WA_KNA1-ADRNR IS NOT INITIAL.
        SELECT SINGLE *
          FROM ADR6
          INTO @WA_ADR6
          WHERE ADDRNUMBER = @WA_KNA1-ADRNR.

        SELECT *
          FROM ADR2
          INTO TABLE @IT_ADR2
          WHERE ADDRNUMBER = @WA_KNA1-ADRNR.

        SELECT SINGLE *
          FROM ADRC
          INTO @WA_ADRC
          WHERE ADDRNUMBER = @WA_KNA1-ADRNR.

      ENDIF.

      EDADASHARE = NEW ZCL_INTEGRACAO_APP_PRODUTOR( )->GET_PROTOCOLO( I_FORNECEDOR_SAP = ME->ZIF_INTEGRACAO_DATASHARE~AT_PARAMETROS ).
      EDADASHARE-PROTOCOLO = ME->ZIF_INTEGRACAO_DATASHARE~GET_PROTOCOLO( ). "// wbarbosa BUG-165542 03/02/2025
      EDADASHARE-ACEITE = ME->ZIF_INTEGRACAO_DATASHARE~GET_ACEITE( ). "// wbarbosa BUG-165542 03/02/2025

      RETORNO_ACEITE-PROTOCOLO     = EDADASHARE-PROTOCOLO.
      RETORNO_ACEITE-CLIENTE       = ME->ZIF_INTEGRACAO_DATASHARE~AT_PARAMETROS.
      RETORNO_ACEITE-ACEITE        = EDADASHARE-ACEITE.
      RETORNO_ACEITE-NOME             = WA_KNA1-NAME1.
      RETORNO_ACEITE-DATA_NASCIMENTO  = WA_KNA1-RGDATE.
      RETORNO_ACEITE-CPF              = WA_KNA1-STCD2.
      RETORNO_ACEITE-RG               = WA_KNA1-STCD3.
*    retorno_aceite-cnh
*    retorno_aceite-estado_civil
*    retorno_aceite-nome_conjuge
*    retorno_aceite-cpf_conjuge

      IF WA_ADRC IS NOT INITIAL.
        RETORNO_ACEITE-ENDERECO = |{ WA_ADRC-STREET } { WA_ADRC-HOUSE_NUM1 }, { WA_ADRC-CITY2 }, { WA_ADRC-CITY1 }-{ WA_ADRC-REGION }|.
      ENDIF.

      READ TABLE IT_ADR2 INTO WA_ADR2 WITH KEY ADDRNUMBER = WA_KNA1-ADRNR HOME_FLAG = ABAP_TRUE.
      IF SY-SUBRC IS INITIAL.
        RETORNO_ACEITE-TELEFONE1 = WA_ADR2-TELNR_LONG.
      ENDIF.

      READ TABLE IT_ADR2 INTO WA_ADR2 WITH KEY ADDRNUMBER = WA_KNA1-ADRNR HOME_FLAG = ABAP_FALSE.
      IF SY-SUBRC IS INITIAL.
        RETORNO_ACEITE-TELEFONE2 = WA_ADR2-TELNR_LONG.
      ENDIF.

*    retorno_aceite-whatsapp
      RETORNO_ACEITE-EMAIL           = WA_ADR6-SMTP_ADDR.
      RETORNO_ACEITE-GRUPO_ECONOMICO = WA_KNA1-KONZS.

    ENDIF.
*-US 135191-18-06-2024-#135191-RJF-fim

    IF EDADASHARE-ACEITE EQ 'N'.
      CLEAR RETORNO_ACEITE.
      RETORNO_ACEITE-PROTOCOLO     = EDADASHARE-PROTOCOLO.
      IF AT_CLIENTESIM IS INITIAL. "*-US 135191-18-06-2024-#135191-RJF
        RETORNO_ACEITE-FORNECEDOR    = ME->ZIF_INTEGRACAO_DATASHARE~AT_PARAMETROS.
*-US 135191-18-06-2024-#135191-RJF-inicio
      ELSE.
        RETORNO_ACEITE-CLIENTE       = ME->ZIF_INTEGRACAO_DATASHARE~AT_PARAMETROS.
      ENDIF.
*-US 135191-18-06-2024-#135191-RJF-fim
      RETORNO_ACEITE-ACEITE        = EDADASHARE-ACEITE.
    ENDIF.

    CLEAR ZIF_INTEGRACAO_DATASHARE~AT_RETORNO.
    ZIF_INTEGRACAO_DATASHARE~AT_RETORNO = RETORNO_ACEITE.
    ME->ZIF_INTEGRACAO_INJECT~AT_REFERENCIA =
    VALUE #(
              TP_REFERENCIA = 'Data Share'
              ID_REFERENCIA = EDADASHARE-PROTOCOLO
    ).

    ME->ZIF_INTEGRACAO_DATASHARE~SET_DS_URL(
           )->SET_DS_DATA(
           )->SET_SEND_MSG( IMPORTING E_ID_INTEGRACAO = DATA(ID_INTEGRACAO) E_INTEGRACAO  = DATA(E_INTEGRACAO) ).

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_DATASHARE~SET_DS_DATA.

    CALL METHOD /UI2/CL_JSON=>SERIALIZE
      EXPORTING
        DATA        = ME->ZIF_INTEGRACAO_DATASHARE~AT_RETORNO
        PRETTY_NAME = /UI2/CL_JSON=>PRETTY_MODE-CAMEL_CASE
      RECEIVING
        R_JSON      = ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_BODY.

    ME->ZIF_INTEGRACAO_DATASHARE~AT_XML = ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_BODY.

    R_IF_INTEGRACAO_DATASHARE = ME.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_DATASHARE~SET_DS_URL.

    ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_FORMATO          = 'JSON'.
    ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_CONTENT_TYPE     = ME->ZIF_INTEGRACAO_DATASHARE~AT_AUTH_WS-CONTENT_TYPE.
    ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_URL              = ME->ZIF_INTEGRACAO_DATASHARE~AT_AUTH_WS-URL.
    ME->ZIF_INTEGRACAO_INJECT~AT_INFO_REQUEST_HTTP-DS_METODO           = ME->ZIF_INTEGRACAO_DATASHARE~AT_AUTH_WS-METHOD.

    ME->ZIF_INTEGRACAO_DATASHARE~SET_ID_REFERENCIA( ).

    R_IF_INTEGRACAO_DATASHARE = ME.


  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_DATASHARE~SET_ID_REFERENCIA.
    R_IF_INTEGRACAO_DATASHARE = ME.
    ME->ZIF_INTEGRACAO_DATASHARE~GET_ID_REFERENCIA( IMPORTING E_REFERENCIA = ME->ZIF_INTEGRACAO_INJECT~AT_REFERENCIA ).
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_DATASHARE~SET_PARAMETROS.

    CHECK I_PARAMETROS IS NOT INITIAL.

    ZIF_INTEGRACAO_DATASHARE~AT_PARAMETROS = I_PARAMETROS.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_DATASHARE~SET_SEND_MSG.

    DATA LC_INTEGRAR TYPE REF TO ZCL_INTEGRACAO.

    R_IF_INTEGRACAO_DATASHARE = ME.

    CREATE OBJECT LC_INTEGRAR.

    "Cria MSG para Integração via HTTP
    LC_INTEGRAR->ZIF_INTEGRACAO~SET_MSG_INJECT( I_MSG = CAST #( ME )
      )->SET_NEW_MSG( IMPORTING E_ID_INTEGRACAO = E_ID_INTEGRACAO
      )->SET_OUTBOUND_MSG(
      )->SET_PROCESSAR_RETORNO(
      )->SET_INTEGRAR_RETORNO(
      )->GET_REGISTRO( IMPORTING E_INTEGRACAO = E_INTEGRACAO
      )->FREE(
      ).

    CLEAR: LC_INTEGRAR.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_DATASHARE~SET_SERVICO.
    IF I_SERVICO IS NOT INITIAL.
      ZIF_INTEGRACAO_DATASHARE~AT_SERVICO = I_SERVICO.
    ENDIF.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_DATASHARE~SET_XML.
    R_IF_INTEGRACAO_DATASHARE = ME.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~GET_FORM_REQUEST_HTTP.
    R_IF_INTEGRACAO_INJECT = ME.
    E_FORM_FIELDS = ME->ZIF_INTEGRACAO_INJECT~AT_FORM_FIELDS.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~GET_HEADER_REQUEST_HTTP.

    R_IF_INTEGRACAO_INJECT = ME.
    E_HEADER_FIELDS = ME->ZIF_INTEGRACAO_INJECT~AT_HEADER_FIELDS.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_BEFORE_ERROR_OUTBOUND_MSG.
    E_SUCESSO = ABAP_TRUE.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_BEFORE_SEND_OUTBOUND_MSG.

    R_IF_INTEGRACAO_INJECT = ME.

    TRY .
        CAST ZCL_INTEGRACAO_TOKEN_DATASHARE(
               ZCL_INTEGRACAO_TOKEN_DATASHARE=>ZIF_INTEGRACAO_TOKEN_DATASHARE~GET_INSTANCE(
                 )->GET_TOKEN( )
             )->ZIF_INTEGRACAO_INJECT~GET_HEADER_REQUEST_HTTP(
          IMPORTING
            E_HEADER_FIELDS = DATA(E_HEADER_FIELDS) ).

        ME->ZIF_INTEGRACAO_INJECT~SET_HEADER_REQUEST_HTTP( I_HEADER_FIELDS = E_HEADER_FIELDS ).

      CATCH ZCX_ERROR INTO DATA(EX_ERRO).

        RAISE EXCEPTION TYPE ZCX_INTEGRACAO
          EXPORTING
            TEXTID = VALUE #( MSGID = EX_ERRO->ZIF_ERROR~MSGID
                              MSGNO = EX_ERRO->ZIF_ERROR~MSGNO
                              ATTR1 = CONV #( EX_ERRO->ZIF_ERROR~MSGV1 )
                              ATTR2 = CONV #( EX_ERRO->ZIF_ERROR~MSGV2 )
                              ATTR3 = CONV #( EX_ERRO->ZIF_ERROR~MSGV3 )
                              ATTR4 = CONV #( EX_ERRO->ZIF_ERROR~MSGV4 ) )
            MSGID  = EX_ERRO->ZIF_ERROR~MSGID
            MSGNO  = EX_ERRO->ZIF_ERROR~MSGNO
            MSGTY  = 'E'
            MSGV1  = EX_ERRO->ZIF_ERROR~MSGV1
            MSGV2  = EX_ERRO->ZIF_ERROR~MSGV2
            MSGV3  = EX_ERRO->ZIF_ERROR~MSGV3
            MSGV4  = EX_ERRO->ZIF_ERROR~MSGV4.

    ENDTRY.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_FORM_REQUEST_HTTP.
    R_IF_INTEGRACAO_INJECT = ME.
    ME->ZIF_INTEGRACAO_INJECT~AT_FORM_FIELDS = I_FORM_FIELDS.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_HEADER_REQUEST_HTTP.
    R_IF_INTEGRACAO_INJECT = ME.
    ME->ZIF_INTEGRACAO_INJECT~AT_HEADER_FIELDS = I_HEADER_FIELDS.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_INTEGRAR_INBOUND.
    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO = ABAP_TRUE.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_INTEGRAR_RETORNO.

    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_PARAMETRO.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_PROCESSA_INBOUND.
    R_IF_INTEGRACAO_INJECT = ME.
    E_SUCESSO = ABAP_TRUE.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_INJECT~SET_PROCESSA_RETORNO.

    E_SUCESSO = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_DATASHARE~GET_ACEITE.
    R_ACEITE = ZIF_INTEGRACAO_DATASHARE~AT_ACEITE.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_DATASHARE~GET_PROTOCOLO.
    R_PROTOCOLO = ZIF_INTEGRACAO_DATASHARE~AT_PROTOCOLO.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_DATASHARE~SET_ACEITE.
    CHECK I_ACEITE IS NOT INITIAL.
    ZIF_INTEGRACAO_DATASHARE~AT_ACEITE = I_ACEITE.
  ENDMETHOD.


  METHOD ZIF_INTEGRACAO_DATASHARE~SET_PROTOCOLO.
    IF I_PROTOCOLO IS NOT INITIAL.
      ZIF_INTEGRACAO_DATASHARE~AT_PROTOCOLO = I_PROTOCOLO.
    ENDIF.
  ENDMETHOD.
ENDCLASS.
