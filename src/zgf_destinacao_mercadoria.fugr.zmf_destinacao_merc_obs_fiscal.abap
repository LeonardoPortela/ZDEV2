FUNCTION ZMF_DESTINACAO_MERC_OBS_FISCAL.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(I_ID_DESTINACAO) TYPE  ZDE_DESTINACAO
*"     REFERENCE(I_INFORMAR) TYPE  CHAR01 DEFAULT ABAP_TRUE
*"  EXPORTING
*"     REFERENCE(E_TEXTO) TYPE  STRING
*"  RAISING
*"      ZCX_MATERIAL_DESTINACAO
*"----------------------------------------------------------------------

  CLEAR: E_TEXTO, TL_TLINES[], TL_TLINES, TL_LINES_TEMP, TL_LINES_TEMP[].

  LC_NAME = |{ SY-MANDT }{ I_ID_DESTINACAO }|.

  LC_ID_DESTINACAO = I_ID_DESTINACAO.

  OB_DESTINACAO = ZCL_FACTORY_MAT_DESTINACAO=>ZIF_FACTORY_MAT_DESTINACAO~GET_INSTANCE(
    )->SET_FACTORY_OBJETO( EXPORTING I_ID_DESTINACAO = LC_ID_DESTINACAO
    )->GET_FACTORY_OBJETO(
    )->SET_REGISTRO( I_ID_DESTINACAO = I_ID_DESTINACAO
    ).

  CALL FUNCTION 'READ_TEXT'
    EXPORTING
      ID                      = I_TDID
      LANGUAGE                = SY-LANGU
      NAME                    = LC_NAME
      OBJECT                  = LC_OBJECT
    TABLES
      LINES                   = TL_TLINES
    EXCEPTIONS
      ID                      = 1
      LANGUAGE                = 2
      NAME                    = 3
      NOT_FOUND               = 4
      OBJECT                  = 5
      REFERENCE_CHECK         = 6
      WRONG_ACCESS_TO_ARCHIVE = 7
      OTHERS                  = 8.

  CASE I_INFORMAR.
    WHEN ABAP_TRUE.

      IF TL_TLINES[] IS INITIAL.
        OB_DESTINACAO->GET_TEXTO_NOTA_FISCAL_PADRAO( IMPORTING E_STRING = DATA(E_STRING) ).

        CALL FUNCTION 'CONVERT_STRING_TO_TABLE'
          EXPORTING
            I_STRING         = E_STRING
            I_TABLINE_LENGTH = 132
          TABLES
            ET_TABLE         = TL_LINES_TEMP.

        LOOP AT TL_LINES_TEMP INTO DATA(WA_LINES_TEMP).
          CLEAR: WA_TLINES.
          WA_TLINES-TDLINE = WA_LINES_TEMP.
          APPEND WA_TLINES TO TL_TLINES.
        ENDLOOP.

      ENDIF.

      PERFORM VISUALIZAR_TEXTO.

    WHEN ABAP_FALSE.

      CLEAR: TL_LINES_TEMP[], TL_LINES_TEMP.

      LOOP AT TL_TLINES INTO WA_TLINES.
        APPEND WA_TLINES-TDLINE TO TL_LINES_TEMP.
      ENDLOOP.

      CALL FUNCTION 'CONVERT_TABLE_TO_STRING'
        EXPORTING
          I_TABLINE_LENGTH = 132
        IMPORTING
          E_STRING         = E_TEXTO
        TABLES
          IT_TABLE         = TL_LINES_TEMP.

      IF E_TEXTO IS INITIAL.
        OB_DESTINACAO->GET_TEXTO_NOTA_FISCAL_PADRAO( IMPORTING E_STRING = E_TEXTO ).
      ENDIF.

  ENDCASE.

ENDFUNCTION.
