*----------------------------------------------------------------------*
***INCLUDE LZMEMORANDOF01 .
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  PREENCHE_FILTROS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM PREENCHE_FILTROS  USING     P_BUKRS TYPE BUKRS
                                 P_WERKS TYPE WERKS_D
                                 P_MATNR TYPE MATNR
                                 P_DIRECAO TYPE Z_MEMO_DIRECAO
                                 P_REMETENTE TYPE KUNNR.

  DATA: GS_BUKRS  TYPE ZMEMO_BUKRS,
        GS_BRANCH TYPE ZMEMO_BRANCH,
        GS_MATNR  TYPE ZMEMO_MATNR,
        GS_CFOP   TYPE ZMEMO_CFOP,
        GS_REMET  TYPE ZMEMO_REMET.

  CLEAR: T_BUKRS[], T_MATNR[], T_CFOP[], T_WERKS[].

  IF NOT P_BUKRS IS INITIAL.
    GS_BUKRS-SIGN   = 'I'.
    GS_BUKRS-OPTION = 'EQ'.
    GS_BUKRS-LOW    = P_BUKRS.
    GS_BUKRS-HIGH   = P_BUKRS.
    APPEND GS_BUKRS TO T_BUKRS.
  ENDIF.

  IF NOT P_WERKS IS INITIAL.
    GS_BRANCH-SIGN   = 'I'.
    GS_BRANCH-OPTION = 'EQ'.
    GS_BRANCH-LOW    = P_WERKS.
    GS_BRANCH-HIGH   = P_WERKS.
    APPEND GS_BRANCH TO T_WERKS.
  ENDIF.

  IF NOT P_MATNR IS INITIAL.
    GS_MATNR-SIGN   = 'I'.
    GS_MATNR-OPTION = 'EQ'.
    GS_MATNR-LOW    = P_MATNR.
    GS_MATNR-HIGH   = P_MATNR.
    APPEND GS_MATNR TO T_MATNR.
  ENDIF.

  IF NOT P_REMETENTE IS INITIAL.
    GS_REMET-SIGN   = 'I'.
    GS_REMET-OPTION = 'EQ'.
    GS_REMET-LOW    = P_REMETENTE.
    GS_REMET-HIGH   = P_REMETENTE.
    APPEND GS_REMET TO T_REMET.
  ENDIF.

  IF P_DIRECAO EQ C_2.

    CALL FUNCTION 'Z_MEMO_CFOP_SAIDA'
      TABLES
        CFOPS = T_CFOP.

  ELSEIF P_DIRECAO EQ C_1.

    CALL FUNCTION 'Z_MEMO_CFOP_ENTRADAS'
      TABLES
        CFOPS = T_CFOP.

  ENDIF.

ENDFORM.                    " PREENCHE_FILTROS

*&---------------------------------------------------------------------*
*&      Form  BUSCA_NOTAS_SAIDA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM BUSCA_NOTAS_SAIDA TABLES T_EXPORT STRUCTURE LXHME_RANGE_C10
                              T_PERIOD STRUCTURE LXHME_RANGE_DATE
                              IT_NOTAS STRUCTURE ZEXPORT_NOTAS

                       USING  NOTAS_EXPORTACAO TYPE CHAR1
                              P_DIRECAO        TYPE Z_MEMO_DIRECAO
                              P_RET_NOTAS      TYPE CHAR1


.


  TYPES: BEGIN OF TY_DUES,
           DOCNUM     TYPE ZSDT0173-DOCNUM,
           NUMERO_DUE TYPE ZSDT0170-NUMERO_DUE,
         END OF TY_DUES,

         BEGIN OF TY_NAVIOS,
           DOCNUM           TYPE ZSDT0173-DOCNUM,
           DS_NOME_TRANSPOR TYPE ZNOM_TRANSPORTE-DS_NOME_TRANSPOR,
         END OF TY_NAVIOS.

  DATA: VG_VINCULADO        TYPE J_1BNETQTY,
        VG_DATA_60          TYPE SY-DATUM,
        VG_DATA_90          TYPE SY-DATUM,
        WA_RSEG             TYPE RSEG,
        WA_EKET             TYPE EKET,
        IT_RSEG             TYPE TABLE OF RSEG INITIAL SIZE 0 WITH HEADER LINE,
        IT_EKET             TYPE TABLE OF EKET INITIAL SIZE 0 WITH HEADER LINE,

        WA_VBRP             TYPE VBRP,
        WA_LIPS             TYPE LIPS,
        IT_VBRP             TYPE TABLE OF VBRP INITIAL SIZE 0 WITH HEADER LINE,
        IT_LIPS             TYPE TABLE OF LIPS INITIAL SIZE 0 WITH HEADER LINE,
        VG_TABIX            TYPE SY-TABIX,
        IT_NF_PLANEJADA     TYPE TABLE OF ZNOM_REME_NOTAS WITH HEADER LINE,
        IT_ZDOC_NF_PRODUTOR TYPE TABLE OF ZDOC_NF_PRODUTOR WITH HEADER LINE,
        IT_ZDOC_MEMO_NOTA   TYPE TABLE OF ZDOC_MEMO_NOTA,
        IT_ZSDT0170         TYPE TABLE OF ZSDT0170 WITH HEADER LINE,
        IT_ZSDT0173         TYPE TABLE OF ZSDT0173 WITH HEADER LINE,
        IT_ZNOM_TRANSPORTE  TYPE TABLE OF ZNOM_TRANSPORTE WITH HEADER LINE,

        IT_DUES             TYPE TABLE OF TY_DUES WITH HEADER LINE,
        IT_NAVIOS           TYPE TABLE OF TY_NAVIOS WITH HEADER LINE,

        WA_ZDOC_MEMO_NOTA   TYPE ZDOC_MEMO_NOTA,
        IT_ZDOC_MEMORANDO   TYPE TABLE OF ZDOC_MEMORANDO,
        WA_ZDOC_MEMORANDO   TYPE ZDOC_MEMORANDO,
        CONCATENA           TYPE CHAR100.

  TYPES:
    BEGIN OF TY_J_1BNFDOC,
      DOCNUM    TYPE J_1BNFDOC-DOCNUM,
      NFENUM    TYPE J_1BNFDOC-NFENUM,
      PARID     TYPE J_1BNFDOC-PARID,
      BUKRS     TYPE J_1BNFDOC-BUKRS,
      BRANCH    TYPE J_1BNFDOC-BRANCH,
      NFENUM_FK TYPE ZSDT0001-NFNUM,
    END OF TY_J_1BNFDOC,

    BEGIN OF TY_ZSDT0001,
      NFNUM          TYPE ZSDT0001-NFNUM,
      PARID          TYPE ZSDT0001-PARID,
      BUKRS          TYPE ZSDT0001-BUKRS,
      BRANCH         TYPE ZSDT0001-BRANCH,
      TP_MOVIMENTO   TYPE ZSDT0001-TP_MOVIMENTO,
      NR_SAFRA       TYPE ZSDT0001-NR_SAFRA,

      NR_ROMANEIO    TYPE ZSDT0001-NR_ROMANEIO,

      NR_ROMANEIO_FK TYPE ZSDT0001-ID_REFERENCIA,
    END OF TY_ZSDT0001,

    BEGIN OF TY_CARTA,
      DOCNUM        TYPE ZCARTA_CORRECAO-DOCNUM,
      NOVO_TERMINAL TYPE ZCARTA_CORRECAO-NOVO_TERMINAL,
    END OF TY_CARTA.

*
  FIELD-SYMBOLS <FS_ZSDT0001>  TYPE TY_ZSDT0001.
  FIELD-SYMBOLS <FS_J_1BNFDOC> TYPE TY_J_1BNFDOC.
*
*
  DATA:
    IT_J_1BNFDOC_1  TYPE TABLE OF TY_J_1BNFDOC,
    WA_J_1BNFDOC_1  TYPE TY_J_1BNFDOC,

    IT_ZSDT0001_1   TYPE TABLE OF TY_ZSDT0001,
    WA_ZSDT0001_1   TYPE TY_ZSDT0001,

    IT_ZSDT0001_S_1 TYPE TABLE OF ZSDT0001,
    WA_ZSDT0001_S_1 TYPE ZSDT0001,

    IT_VBPA_1       TYPE TABLE OF VBPA,
    WA_VBPA_1       TYPE  VBPA,

    IT_LFA1_1       TYPE TABLE OF LFA1,
    WA_LFA1_1       TYPE LFA1,

    IT_CARTA        TYPE TABLE OF TY_CARTA,
    WA_CARTA        TYPE TY_CARTA,

    IT_CARTA1       TYPE TABLE OF ZCARTA_CORRECAO,
    WA_CARTA1       TYPE ZCARTA_CORRECAO,

    IT_CARTA_AUX    TYPE TABLE OF ZCARTA_CORRECAO,
    WA_CARTA_AUX    TYPE ZCARTA_CORRECAO.

  DATA: WL_ZLEST0146 TYPE ZLEST0146,
        LT_ZLEST0147 TYPE ZLEST0147_T,
        LT_ZLEST0168 TYPE ZLEST0168_T,
        V_DOC_RATEIO TYPE CHAR01.


  IF P_DIRECAO EQ C_2.
    SELECT DC~DOCNUM LI~ITMNUM LI~MATNR LI~REFTYP LI~REFKEY LI~REFITM
      INTO CORRESPONDING FIELDS OF TABLE IT_NF_EXPORT
      FROM J_1BNFDOC AS DC
     INNER JOIN J_1BNFLIN AS LI ON LI~DOCNUM EQ DC~DOCNUM
     WHERE DC~BUKRS  IN T_BUKRS
       AND DC~BRANCH IN T_WERKS
       AND DC~PARID  IN T_EXPORT
       AND DC~PARID  IN T_REMET
       AND DC~DIRECT EQ C_2
       AND DC~CANCEL EQ VG_CANCEL
       AND DC~DOCTYP NE C_5
       AND DC~DOCDAT IN T_PERIOD
       AND LI~MATNR  IN T_MATNR
       AND LI~CFOP   IN T_CFOP.

  ELSEIF P_DIRECAO EQ C_1.

    IF IT_NF[] IS INITIAL.

      SELECT DC~DOCNUM LI~ITMNUM LI~MATNR LI~REFTYP LI~REFKEY LI~REFITM
        INTO CORRESPONDING FIELDS OF TABLE IT_NF_EXPORT
        FROM J_1BNFDOC AS DC
       INNER JOIN J_1BNFLIN AS LI ON LI~DOCNUM EQ DC~DOCNUM
       WHERE DC~BUKRS  IN T_BUKRS
         AND DC~BRANCH IN T_WERKS
         AND DC~PARID  IN T_EXPORT
         AND DC~PARID  IN T_REMET
         AND DC~PARTYP EQ C_V
         AND DC~DIRECT EQ C_1
         AND DC~CANCEL EQ VG_CANCEL
         AND DC~DOCTYP NE C_5
         AND DC~DOCDAT IN T_PERIOD
         AND LI~MATNR  IN T_MATNR
         AND LI~CFOP   IN T_CFOP.
    ELSE.
      IT_NF_EXPORT[] = IT_NF[].
    ENDIF.

    IF NOT IT_NF_EXPORT[] IS INITIAL.
********busca notas j치 vinculadas a partir das livres ( znom_reme_notas  ) - m칩dulo novo (planejamento)*********
      SELECT * INTO TABLE IT_NF_PLANEJADA
        FROM ZNOM_REME_NOTAS
         FOR ALL ENTRIES IN IT_NF_EXPORT
       WHERE DOCNUM EQ IT_NF_EXPORT-DOCNUM
         AND ITMNUM EQ IT_NF_EXPORT-ITMNUM.

********busca notas j치 vinculadas a partir das livres ( zdoc_nf_produtor ) - m칩dulo antigo*********
      SELECT * INTO TABLE IT_ZDOC_NF_PRODUTOR
        FROM ZDOC_NF_PRODUTOR AS P
         FOR ALL ENTRIES IN IT_NF_EXPORT
       WHERE DOCNUM_PROD EQ IT_NF_EXPORT-DOCNUM
         AND ITMNUM_PROD EQ IT_NF_EXPORT-ITMNUM
         AND NOT EXISTS ( SELECT * FROM ZNOM_PROG_REME AS R WHERE R~ID_REMESSA EQ P~VBELN ).

      SELECT * INTO TABLE IT_ZDOC_MEMO_NOTA
        FROM ZDOC_MEMO_NOTA
        FOR ALL ENTRIES IN IT_NF_EXPORT
        WHERE DOCNUM EQ IT_NF_EXPORT-DOCNUM.

      IF IT_ZDOC_MEMO_NOTA[] IS NOT INITIAL.
        SELECT * INTO TABLE IT_ZDOC_MEMORANDO
          FROM ZDOC_MEMORANDO
          FOR ALL ENTRIES IN IT_ZDOC_MEMO_NOTA
          WHERE NR_MEMORANDO EQ IT_ZDOC_MEMO_NOTA-NR_MEMORANDO.
      ENDIF.

      SELECT * INTO TABLE IT_ZSDT0173
        FROM ZSDT0173
         FOR ALL ENTRIES IN IT_NF_EXPORT
       WHERE DOCNUM EQ IT_NF_EXPORT-DOCNUM.

      IF IT_ZSDT0173[] IS NOT INITIAL.
        SELECT * INTO TABLE IT_ZSDT0170
          FROM ZSDT0170
           FOR ALL ENTRIES IN IT_ZSDT0173
         WHERE ID_DUE EQ IT_ZSDT0173-ID_DUE.

        DELETE IT_ZSDT0170 WHERE LOEKZ            IS NOT INITIAL OR
                                 BLOQUEIO_INTERNO IS NOT INITIAL.

        IF IT_ZSDT0170[] IS NOT INITIAL.
          SELECT *
            FROM ZNOM_TRANSPORTE INTO TABLE IT_ZNOM_TRANSPORTE
             FOR ALL ENTRIES IN IT_ZSDT0170
           WHERE ID_NOMEACAO_TRAN = IT_ZSDT0170-ID_NOMEACAO_TRAN.
        ENDIF.
      ENDIF.

      SELECT
      DOCNUM
      NFENUM
      PARID
      BUKRS
      BRANCH

       FROM J_1BNFDOC
       INTO TABLE IT_J_1BNFDOC_1
       FOR ALL ENTRIES IN IT_NF_EXPORT
       WHERE DOCNUM EQ IT_NF_EXPORT-DOCNUM.

      IF IT_J_1BNFDOC_1[] IS NOT INITIAL.

        LOOP AT IT_J_1BNFDOC_1 ASSIGNING <FS_J_1BNFDOC>.
          <FS_J_1BNFDOC>-NFENUM_FK = <FS_J_1BNFDOC>-NFENUM.
        ENDLOOP.

        SELECT
                 NFNUM
                 PARID
                 BUKRS
                 BRANCH
                 TP_MOVIMENTO
                 NR_SAFRA
                 NR_ROMANEIO

            FROM ZSDT0001
            INTO TABLE IT_ZSDT0001_1
            FOR ALL ENTRIES IN IT_J_1BNFDOC_1
            WHERE PARID  EQ IT_J_1BNFDOC_1-PARID
              AND NFNUM  EQ IT_J_1BNFDOC_1-NFENUM_FK
              AND BUKRS  EQ IT_J_1BNFDOC_1-BUKRS
              AND BRANCH EQ IT_J_1BNFDOC_1-BRANCH
              AND TP_MOVIMENTO EQ 'E'.

        IF IT_ZSDT0001_1[] IS NOT INITIAL.

          LOOP AT IT_ZSDT0001_1 ASSIGNING <FS_ZSDT0001>.
            SHIFT <FS_ZSDT0001>-NR_ROMANEIO LEFT DELETING LEADING '0'.
            <FS_ZSDT0001>-NR_ROMANEIO_FK = <FS_ZSDT0001>-NR_ROMANEIO.
          ENDLOOP.

          SELECT * FROM ZSDT0001
            INTO TABLE IT_ZSDT0001_S_1
            FOR ALL ENTRIES IN IT_ZSDT0001_1
            WHERE ID_REFERENCIA EQ IT_ZSDT0001_1-NR_ROMANEIO_FK
              AND BUKRS         EQ IT_ZSDT0001_1-BUKRS
              AND BRANCH        EQ IT_ZSDT0001_1-BRANCH
              AND NR_SAFRA      EQ IT_ZSDT0001_1-NR_SAFRA
              AND TP_MOVIMENTO  EQ 'S'.

          IF IT_ZSDT0001_S_1[] IS NOT INITIAL.
            SELECT * FROM VBPA
              INTO TABLE IT_VBPA_1
              FOR ALL ENTRIES IN IT_ZSDT0001_S_1
              WHERE VBELN EQ IT_ZSDT0001_S_1-VBELN
                AND PARVW EQ 'Z1'.

            "  CHECK NOT IT_VBPA IS INITIAL.
            IF IT_VBPA_1[] IS NOT INITIAL.
              SELECT * FROM LFA1
                INTO TABLE IT_LFA1_1
                FOR ALL ENTRIES IN IT_VBPA_1
                WHERE LIFNR EQ IT_VBPA_1-LIFNR.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.

    ENDIF.

  ENDIF.

  IF P_RET_NOTAS IS NOT INITIAL.

    "Notas com MIRO
    LOOP AT IT_NF_EXPORT INTO WA_NF_EXPORT WHERE REFTYP EQ 'LI'.
      WA_NF_EXPORT-REFK10 = WA_NF_EXPORT-REFKEY(10).
      WA_NF_EXPORT-GJAHR  = WA_NF_EXPORT-REFKEY+10(4).
      MODIFY IT_NF_EXPORT INDEX SY-TABIX FROM WA_NF_EXPORT TRANSPORTING REFK10 GJAHR.
    ENDLOOP.

    CLEAR: IT_NF_ITEM[].
    MOVE IT_NF_EXPORT[] TO IT_NF_ITEM[].
    DELETE IT_NF_ITEM WHERE REFTYP NE 'LI'.

    IF NOT IT_NF_ITEM[] IS INITIAL.

      SELECT * INTO TABLE IT_RSEG
        FROM RSEG
         FOR ALL ENTRIES IN IT_NF_ITEM
       WHERE BELNR EQ IT_NF_ITEM-REFK10
         AND GJAHR EQ IT_NF_ITEM-GJAHR
         AND BUZEI EQ IT_NF_ITEM-REFITM.

      IF SY-SUBRC IS INITIAL.

        SELECT * INTO TABLE IT_EKET
          FROM EKET
           FOR ALL ENTRIES IN IT_RSEG
         WHERE EBELN EQ IT_RSEG-EBELN
           AND EBELP EQ IT_RSEG-EBELP.

      ENDIF.

    ENDIF.

    "Notas com fatura
    LOOP AT IT_NF_EXPORT INTO WA_NF_EXPORT WHERE REFTYP EQ 'BI'.
      WA_NF_EXPORT-REFK10 = WA_NF_EXPORT-REFKEY(10).
      MODIFY IT_NF_EXPORT INDEX SY-TABIX FROM WA_NF_EXPORT TRANSPORTING REFK10.
    ENDLOOP.

    CLEAR: IT_NF_ITEM[].
    MOVE IT_NF_EXPORT[] TO IT_NF_ITEM[].
    DELETE IT_NF_ITEM WHERE REFTYP NE 'BI'.

    IF NOT IT_NF_ITEM[] IS INITIAL.
      SELECT * INTO TABLE IT_VBRP
        FROM VBRP
         FOR ALL ENTRIES IN IT_NF_ITEM
       WHERE VBELN EQ IT_NF_ITEM-REFK10
         AND POSNR EQ IT_NF_ITEM-REFITM.
      IF SY-SUBRC IS INITIAL.
        SELECT * INTO TABLE IT_LIPS
          FROM LIPS
           FOR ALL ENTRIES IN IT_VBRP
         WHERE VBELN EQ IT_VBRP-VGBEL
           AND POSNR EQ IT_VBRP-VGPOS.
      ENDIF.
    ENDIF.
  ENDIF.

  IF NOT NOTAS_EXPORTACAO IS INITIAL.
    MOVE IT_NF_EXPORT[] TO IT_NF_ITEM[].
    SORT IT_NF_ITEM BY MATNR.
    DELETE ADJACENT DUPLICATES FROM IT_NF_ITEM COMPARING MATNR.
    SELECT MATNR MAKTG INTO TABLE IT_PRODUTOS
      FROM MAKT
      FOR ALL ENTRIES IN IT_NF_ITEM
     WHERE SPRAS EQ SY-LANGU
       AND MATNR EQ IT_NF_ITEM-MATNR.
    SORT IT_PRODUTOS BY MATNR.
  ENDIF.

  SORT: IT_NF_EXPORT BY DOCNUM ITMNUM,
        IT_ZSDT0001_1 BY PARID
                         NFNUM
                         BUKRS
                         BRANCH
                         TP_MOVIMENTO,
        IT_ZSDT0001_S_1 BY  TP_MOVIMENTO
                            ID_REFERENCIA
                            BUKRS
                            BRANCH
                            NR_SAFRA,
       IT_VBPA_1        BY VBELN,
       IT_LFA1_1        BY LIFNR,
       IT_EKET          BY EBELN EBELP,
       IT_VBRP          BY VBELN POSNR,
       IT_LIPS          BY VBELN POSNR,
       IT_RSEG          BY BELNR GJAHR  BUZEI.

  LOOP AT IT_ZSDT0173.

    READ TABLE IT_ZSDT0170 WITH KEY ID_DUE = IT_ZSDT0173-ID_DUE.
    CHECK SY-SUBRC EQ 0.

    READ TABLE IT_ZNOM_TRANSPORTE WITH KEY ID_NOMEACAO_TRAN = IT_ZSDT0170-ID_NOMEACAO_TRAN.
    CHECK SY-SUBRC EQ 0 AND IT_ZNOM_TRANSPORTE-ID_NOMEACAO_TRAN IS NOT INITIAL.

    CLEAR: IT_DUES.
    IT_DUES-DOCNUM     = IT_ZSDT0173-DOCNUM.
    IT_DUES-NUMERO_DUE = IT_ZSDT0170-NUMERO_DUE.
    APPEND IT_DUES.

    CLEAR: IT_NAVIOS.
    IT_NAVIOS-DOCNUM           = IT_ZSDT0173-DOCNUM.
    IT_NAVIOS-DS_NOME_TRANSPOR = IT_ZNOM_TRANSPORTE-DS_NOME_TRANSPOR.
    APPEND IT_NAVIOS.
  ENDLOOP.

  SORT IT_DUES BY DOCNUM NUMERO_DUE.
  DELETE ADJACENT DUPLICATES FROM IT_DUES COMPARING DOCNUM NUMERO_DUE.

  SORT IT_NAVIOS BY DOCNUM DS_NOME_TRANSPOR.
  DELETE ADJACENT DUPLICATES FROM IT_NAVIOS COMPARING DOCNUM DS_NOME_TRANSPOR.

  LOOP AT IT_NF_EXPORT INTO WA_NF_EXPORT.

    CLEAR: WA_J_1BNFDOC_1, WA_ZSDT0001_1, WA_ZSDT0001_S_1, WA_VBPA_1, WA_LFA1_1, WA_NOTAS,
           WA_ZDOC_MEMORANDO, WA_ZDOC_MEMO_NOTA, WA_EKET, WA_VBRP, WA_LIPS, WA_RSEG, WA_J_1BNFDOC.

    SELECT SINGLE * INTO WA_J_1BNFDOC
      FROM J_1BNFDOC
     WHERE DOCNUM EQ WA_NF_EXPORT-DOCNUM.

    CLEAR IT_J_1BNFLIN[].

    SELECT * INTO CORRESPONDING FIELDS OF TABLE IT_J_1BNFLIN
      FROM J_1BNFLIN
     WHERE DOCNUM EQ WA_NF_EXPORT-DOCNUM AND ITMNUM EQ WA_NF_EXPORT-ITMNUM.

    LOOP AT IT_J_1BNFLIN INTO WA_J_1BNFLIN WHERE DOCNUM EQ WA_NF_EXPORT-DOCNUM.

      VG_TABIX = SY-TABIX.

      CLEAR: VG_VINCULADO.

      IF ( WA_J_1BNFDOC-PARTYP EQ C_B ) AND ( WA_J_1BNFLIN-CFOP(1) NE C_6 ) AND ( P_DIRECAO EQ C_2 ).
        CONTINUE.
      ELSEIF ( WA_J_1BNFDOC-PARTYP EQ C_B ) AND ( WA_J_1BNFLIN-CFOP(1) NE C_2 ) AND ( P_DIRECAO EQ C_1 ).
        CONTINUE.
      ENDIF.

      IF P_DIRECAO EQ C_2.
        SELECT SUM( MENGE ) INTO VG_VINCULADO
          FROM ZDOC_MEMO_NOTA_S
         WHERE DOCNUM EQ WA_J_1BNFLIN-DOCNUM AND ITMNUM EQ WA_J_1BNFLIN-ITMNUM.
      ELSEIF P_DIRECAO EQ C_1.
        SELECT SUM( MENGE ) INTO VG_VINCULADO
          FROM ZDOC_MEMO_NOTA
         WHERE DOCNUM EQ WA_J_1BNFLIN-DOCNUM AND ITMNUM EQ WA_J_1BNFLIN-ITMNUM.
      ENDIF.

      IF WA_J_1BNFDOC-MODEL NE 55.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = WA_J_1BNFDOC-NFNUM
          IMPORTING
            OUTPUT = WA_J_1BNFDOC-NFENUM.
      ENDIF.

      WA_NOTAS-DOCNUM      = WA_J_1BNFDOC-DOCNUM.
      WA_NOTAS-DT_EMISSAO  = WA_J_1BNFDOC-DOCDAT.
      WA_NOTAS-MODELO      = WA_J_1BNFDOC-MODEL.
      WA_NOTAS-SERIES      = WA_J_1BNFDOC-SERIES.
      WA_NOTAS-NFENUM      = WA_J_1BNFDOC-NFENUM.
      IF WA_J_1BNFDOC-PARTYP EQ C_B.
        WA_J_1BNFDOC-PARID = WA_J_1BNFDOC-PARID+4(4).
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = WA_J_1BNFDOC-PARID
          IMPORTING
            OUTPUT = WA_J_1BNFDOC-PARID.
      ENDIF.
      WA_NOTAS-EXPORTADOR  = WA_J_1BNFDOC-PARID.
      WA_NOTAS-EXPORTADORN =  WA_J_1BNFDOC-NAME1.
      WA_NOTAS-BUKRS       = WA_J_1BNFDOC-BUKRS.
      WA_NOTAS-WERKS       = WA_J_1BNFDOC-BRANCH.
      WA_NOTAS-ITMNUM      = WA_J_1BNFLIN-ITMNUM.
      WA_NOTAS-PRODUTO     = WA_J_1BNFLIN-MATNR.
      WA_NOTAS-NCM         = WA_J_1BNFLIN-NBM.
      WA_NOTAS-QUANTIDADE  = WA_J_1BNFLIN-MENGE.
      WA_NOTAS-UNIDADE     = 'KG'.
      WA_NOTAS-VINCULADO   = VG_VINCULADO.

      IF P_DIRECAO EQ C_1.
        PERFORM F_ATRIB_DT_CHEGADA USING WA_J_1BNFDOC
                                CHANGING WA_NOTAS-DT_CHEGADA.
      ENDIF.

      "Check se Documento est치 registrado no CCT
      CLEAR: WA_NOTAS-DT_RECEPCAO, WA_NOTAS-PESO_AFERIDO_RECEPCAO.

      CALL FUNCTION 'ZCCT_DADOS_RECEPCAO_CARGA'
        EXPORTING
          I_DOCNUM     = WA_NOTAS-DOCNUM
        IMPORTING
          E_ZLEST0146  = WL_ZLEST0146
          E_ZLEST0147  = LT_ZLEST0147
          E_ZLEST0168  = LT_ZLEST0168
          E_DOC_RATEIO = V_DOC_RATEIO.

      IF ( WL_ZLEST0146 IS NOT INITIAL ) AND ( V_DOC_RATEIO IS INITIAL ).
        WA_NOTAS-DT_RECEPCAO            = WL_ZLEST0146-DT_RECEPCAO.
        WA_NOTAS-PESO_AFERIDO_RECEPCAO  = WL_ZLEST0146-PESO_AFERIDO_RECEPCAO.
      ENDIF.

      "Atribui칞칚o DU-es e Navio
      CLEAR: WA_NOTAS-DUES, WA_NOTAS-NAVIOS.
      LOOP AT IT_DUES WHERE DOCNUM = WA_J_1BNFLIN-DOCNUM.
        IF WA_NOTAS-DUES IS NOT INITIAL.
          CONCATENATE WA_NOTAS-DUES ','  IT_DUES-NUMERO_DUE INTO WA_NOTAS-DUES.
        ELSE.
          WA_NOTAS-DUES = IT_DUES-NUMERO_DUE.
        ENDIF.
      ENDLOOP.

      LOOP AT IT_NAVIOS WHERE DOCNUM = WA_J_1BNFLIN-DOCNUM.
        IF WA_NOTAS-NAVIOS IS NOT INITIAL.
          CONCATENATE WA_NOTAS-NAVIOS ','  IT_NAVIOS-DS_NOME_TRANSPOR INTO WA_NOTAS-NAVIOS.
        ELSE.
          WA_NOTAS-NAVIOS = IT_NAVIOS-DS_NOME_TRANSPOR.
        ENDIF.
      ENDLOOP.

      IF WA_J_1BNFLIN-MEINS NE 'KG'.

        CALL FUNCTION 'ME_CONVERSION_MEINS'
          EXPORTING
            I_MATNR             = WA_J_1BNFLIN-MATNR
            I_MEIN1             = WA_J_1BNFLIN-MEINS
            I_MEINS             = 'KG'
            I_MENGE             = WA_J_1BNFLIN-MENGE
          IMPORTING
            MENGE               = WA_J_1BNFLIN-MENGE
          EXCEPTIONS
            ERROR_IN_CONVERSION = 1
            NO_SUCCESS          = 2
            OTHERS              = 3.

        IF SY-SUBRC <> 0.
          MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ELSE.
          WA_J_1BNFLIN-MEINS = 'KG'.
          MODIFY IT_J_1BNFLIN INDEX VG_TABIX FROM WA_J_1BNFLIN TRANSPORTING MENGE MEINS.
          WA_NOTAS-QUANTIDADE  = WA_J_1BNFLIN-MENGE.
        ENDIF.

      ENDIF.

      WA_NOTAS-SALDO       = WA_J_1BNFLIN-MENGE - VG_VINCULADO.

      IF WA_J_1BNFLIN-REFTYP EQ 'LI'.
        READ TABLE IT_RSEG INTO WA_RSEG WITH KEY BELNR = WA_NF_EXPORT-REFK10 GJAHR = WA_NF_EXPORT-GJAHR BUZEI = WA_NF_EXPORT-REFITM BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          READ TABLE IT_EKET INTO WA_EKET WITH KEY EBELN = WA_RSEG-EBELN EBELP = WA_RSEG-EBELP BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            WA_NOTAS-CHARG = WA_EKET-CHARG.
          ENDIF.
        ENDIF.
      ENDIF.

      IF WA_J_1BNFLIN-REFTYP EQ 'BI'.
        READ TABLE IT_VBRP INTO WA_VBRP WITH KEY VBELN = WA_NF_EXPORT-REFK10 POSNR = WA_NF_EXPORT-REFITM BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          READ TABLE IT_LIPS INTO WA_LIPS WITH KEY VBELN = WA_VBRP-VGBEL POSNR = WA_VBRP-VGPOS BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            WA_NOTAS-CHARG = WA_LIPS-CHARG.
          ENDIF.
        ENDIF.
      ENDIF.

      IF WA_J_1BNFLIN-REFTYP IS INITIAL.
        WRITE WA_J_1BNFDOC-GJAHR TO WA_NOTAS-CHARG.
      ENDIF.

      IF NOT NOTAS_EXPORTACAO IS INITIAL.
        READ TABLE IT_PRODUTOS INTO WA_PRODUTOS WITH KEY MATNR = WA_J_1BNFLIN-MATNR BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          WA_NOTAS-PRODUTON = WA_PRODUTOS-MAKTG.
        ENDIF.
      ENDIF.

      IF WA_NOTAS-SALDO GT 0.
        VG_DATA_60 = SY-DATUM - 60.
        VG_DATA_90 = SY-DATUM - 90.
        IF ( VG_DATA_60 LT WA_J_1BNFDOC-DOCDAT ) .
          WA_NOTAS-STATUS = ICON_STATUS_OK.
        ELSEIF ( VG_DATA_60 GE WA_J_1BNFDOC-DOCDAT ).
          IF ( VG_DATA_90 LT WA_J_1BNFDOC-DOCDAT ).
            WA_NOTAS-STATUS = ICON_STATUS_ALERT.
          ELSE.
            WA_NOTAS-STATUS = ICON_STATUS_CRITICAL.
          ENDIF.
        ENDIF.
      ELSE.
        WA_NOTAS-STATUS = ICON_STATUS_BEST.
      ENDIF.

      WA_NOTAS-QUANTPLANE = 0.
      WA_NOTAS-QUANTAPLAN = WA_J_1BNFLIN-MENGE.

      LOOP AT IT_NF_PLANEJADA WHERE DOCNUM EQ WA_NOTAS-DOCNUM
                              AND ITMNUM EQ WA_NOTAS-ITMNUM.
        WA_NOTAS-QUANTPLANE = WA_NOTAS-QUANTPLANE + IT_NF_PLANEJADA-NR_QUANTIDADE.
      ENDLOOP.
      LOOP AT IT_ZDOC_NF_PRODUTOR WHERE DOCNUM_PROD EQ WA_NOTAS-DOCNUM
                                    AND ITMNUM_PROD EQ WA_NOTAS-ITMNUM.
        WA_NOTAS-QUANTPLANE = WA_NOTAS-QUANTPLANE + IT_ZDOC_NF_PRODUTOR-MENGE.
      ENDLOOP.

      WA_NOTAS-QUANTAPLAN = WA_NOTAS-QUANTAPLAN - WA_NOTAS-QUANTPLANE.

      CLEAR CONCATENA.
      LOOP AT IT_ZDOC_MEMO_NOTA INTO WA_ZDOC_MEMO_NOTA WHERE DOCNUM EQ WA_NF_EXPORT-DOCNUM.
        LOOP AT IT_ZDOC_MEMORANDO INTO WA_ZDOC_MEMORANDO WHERE NR_MEMORANDO EQ WA_ZDOC_MEMO_NOTA-NR_MEMORANDO.
          IF WA_ZDOC_MEMORANDO-NR_MEMORANDO EQ WA_ZDOC_MEMO_NOTA-NR_MEMORANDO.
            IF WA_ZDOC_MEMO_NOTA-DOCNUM EQ WA_NF_EXPORT-DOCNUM.

              IF WA_NOTAS-NUMERO_MEMO IS INITIAL.

                CONCATENATE WA_ZDOC_MEMORANDO-NUMERO_MEMO CONCATENA INTO CONCATENA.
                WA_NOTAS-NUMERO_MEMO = CONCATENA.
              ELSE.

                CONCATENATE CONCATENA WA_ZDOC_MEMORANDO-NUMERO_MEMO  INTO CONCATENA SEPARATED BY ', '.
                WA_NOTAS-NUMERO_MEMO = CONCATENA.
              ENDIF.

            ENDIF.
          ENDIF.

        ENDLOOP.
      ENDLOOP.
      SHIFT WA_NOTAS-NUMERO_MEMO LEFT DELETING LEADING ','.
      SHIFT WA_NOTAS-NUMERO_MEMO LEFT DELETING LEADING ' '.

      READ TABLE IT_J_1BNFDOC_1   INTO WA_J_1BNFDOC_1   WITH KEY DOCNUM         = WA_NF_EXPORT-DOCNUM.
      READ TABLE IT_ZSDT0001_1    INTO WA_ZSDT0001_1    WITH KEY PARID          = WA_J_1BNFDOC_1-PARID
                                                                 NFNUM          = WA_J_1BNFDOC_1-NFENUM_FK
                                                                 BUKRS          = WA_J_1BNFDOC_1-BUKRS
                                                                 BRANCH         = WA_J_1BNFDOC_1-BRANCH
                                                                 TP_MOVIMENTO   = 'E' BINARY SEARCH.
      READ TABLE IT_ZSDT0001_S_1  INTO WA_ZSDT0001_S_1  WITH KEY TP_MOVIMENTO   = 'S'
                                                                 ID_REFERENCIA  = WA_ZSDT0001_1-NR_ROMANEIO_FK
                                                                 BUKRS          = WA_ZSDT0001_1-BUKRS
                                                                 BRANCH         = WA_ZSDT0001_1-BRANCH
                                                                 NR_SAFRA       = WA_ZSDT0001_1-NR_SAFRA BINARY SEARCH.
      READ TABLE IT_VBPA_1        INTO WA_VBPA_1        WITH KEY VBELN          = WA_ZSDT0001_S_1-VBELN BINARY SEARCH.
      READ TABLE IT_LFA1_1        INTO WA_LFA1_1        WITH KEY LIFNR          = WA_VBPA_1-LIFNR BINARY SEARCH.


      WA_NOTAS-DES_TERMINAL = WA_LFA1_1-NAME1.
      WA_NOTAS-NR_TERMINAL  = WA_LFA1_1-LIFNR.

      APPEND WA_NOTAS TO IT_NOTAS.
      CLEAR WA_NOTAS-NUMERO_MEMO.

    ENDLOOP.
    DELETE IT_NOTAS        WHERE QUANTIDADE = 1.
  ENDLOOP.

  IF P_DIRECAO EQ C_1.
    DATA: CONT TYPE N LENGTH 3.

    "Busca Notas com carta de Corre칞칚o.
    IF NOT IT_NOTAS[] IS INITIAL.
      SELECT DOCNUM INTO TABLE IT_CARTA FROM ZCARTA_CORRECAO
        FOR ALL ENTRIES IN IT_NOTAS
        WHERE DOCNUM        EQ IT_NOTAS-DOCNUM AND
              NOVO_TERMINAL NE ''.
*---> 04/07/2023 - Migra칞칚o S4 - WS
  SORT  IT_CARTA BY  DOCNUM.
*<--- 04/07/2023 - Migra칞칚o S4 - WS
      DELETE ADJACENT DUPLICATES FROM IT_CARTA COMPARING DOCNUM.
    ENDIF.

    IF NOT IT_CARTA IS INITIAL.

      LOOP AT IT_CARTA INTO WA_CARTA.
        SELECT * FROM ZCARTA_CORRECAO INTO TABLE IT_CARTA1 WHERE DOCNUM EQ WA_CARTA-DOCNUM.
        SORT: IT_CARTA1 BY DOCNUM DT_ATUALIZADO DESCENDING HR_ATUALIZADO DESCENDING.

        LOOP AT IT_CARTA1 INTO WA_CARTA1.
          CONT = CONT + 1.
          IF CONT EQ 1.
            LOOP AT IT_NOTAS INTO WA_NOTAS WHERE DOCNUM EQ WA_CARTA1-DOCNUM.
              WA_NOTAS-NR_TERMINAL  = WA_CARTA1-NOVO_TERMINAL.
              MODIFY IT_NOTAS FROM WA_NOTAS TRANSPORTING NR_TERMINAL.
            ENDLOOP.
          ENDIF.
        ENDLOOP.
        CONT = 0.
      ENDLOOP.
    ENDIF.
  ENDIF.
ENDFORM.                    " BUSCA_NOTAS_SAIDA

*&---------------------------------------------------------------------*
*&      Form  AGRUPA_ACOMPANHAMENTO
*&---------------------------------------------------------------------*
*       Agrupa notas do exportador
*----------------------------------------------------------------------*
FORM AGRUPA_ACOMPANHAMENTO  TABLES   IT_NOTAS STRUCTURE ZEXPORT_NOTAS
                                     IT_EXPORTACOES STRUCTURE ZEXPORT_ACOMP
                            USING    P_DIRECAO  TYPE Z_MEMO_DIRECAO.

  "Centro (Remetente)/C칩digo Exportador (Cliente)/CNPJ/Nome/Produto/Quantidade/Saldo N칚o Comprovado
  TYPES: BEGIN OF TY_BUKRS.
  TYPES: BUKRS TYPE BUKRS,
         BUTXT TYPE BUTXT.
  TYPES: END OF TY_BUKRS.

  TYPES: BEGIN OF TY_WERKS.
  TYPES: WERKS TYPE WERKS_D,
         NAME1 TYPE NAME1.
  TYPES: END OF TY_WERKS.

  TYPES: BEGIN OF TY_KNA1.
  TYPES: KUNNR TYPE KUNNR,
         NAME1 TYPE NAME1_GP,
         STCD1 TYPE STCD1,
         STCD2 TYPE STCD2,
         STKZN TYPE STKZN,
         REGIO TYPE REGIO.
  TYPES: END OF TY_KNA1.

  TYPES: BEGIN OF TY_MAKT.
  TYPES: MATNR TYPE MATNR,
         MAKTG TYPE MAKTG.
  TYPES: END OF TY_MAKT.

  TYPES: BEGIN OF TY_UNIT.
  TYPES: MSEHI TYPE MSEHI.
  TYPES: END OF TY_UNIT.

  TYPES: BEGIN OF TY_TERM.
  TYPES: LIFNR TYPE LIFNR.
  TYPES: NAME1 TYPE NAME1_GP.
  TYPES: END OF TY_TERM.

  DATA: WA_BUKRS   TYPE TY_BUKRS,
        WA_WERKS   TYPE TY_WERKS,
        WA_KNA1    TYPE TY_KNA1,
        WA_MAKT    TYPE TY_MAKT,
        WA_UNIT    TYPE TY_UNIT,
        WA_TERM    TYPE TY_TERM,
        QUANTIDADE TYPE J_1BNETQTY,
        QUANTCOMPE TYPE J_1BNETQTY,
        QUANTACOMP TYPE J_1BNETQTY,
        QUANTPLANE TYPE J_1BNETQTY,
        QUANTAPLAN TYPE J_1BNETQTY,

        WA_AUX     TYPE ZEXPORT_NOTAS,
        VG_CPF     TYPE C LENGTH 14,
        VG_CNPJ    TYPE C LENGTH 18,
        VG_DATA_60 TYPE SY-DATUM,
        VG_DATA_90 TYPE SY-DATUM,
        VG_STATUS  TYPE I.

  TYPES:
    BEGIN OF TY_J_1BNFDOC,
      DOCNUM    TYPE J_1BNFDOC-DOCNUM,
      NFENUM    TYPE J_1BNFDOC-NFENUM,
      PARID     TYPE J_1BNFDOC-PARID,
      BUKRS     TYPE J_1BNFDOC-BUKRS,
      BRANCH    TYPE J_1BNFDOC-BRANCH,
      NFENUM_FK TYPE ZSDT0001-NFNUM,
    END OF TY_J_1BNFDOC,

    BEGIN OF TY_ZSDT0001,
      NFNUM          TYPE ZSDT0001-NFNUM,
      PARID          TYPE ZSDT0001-PARID,
      BUKRS          TYPE ZSDT0001-BUKRS,
      BRANCH         TYPE ZSDT0001-BRANCH,
      TP_MOVIMENTO   TYPE ZSDT0001-TP_MOVIMENTO,
      NR_SAFRA       TYPE ZSDT0001-NR_SAFRA,

      NR_ROMANEIO    TYPE ZSDT0001-NR_ROMANEIO,

      NR_ROMANEIO_FK TYPE ZSDT0001-ID_REFERENCIA,
    END OF TY_ZSDT0001.

  FIELD-SYMBOLS <FS_ZSDT0001>  TYPE TY_ZSDT0001.


  DATA:
    IT_J_1BNFDOC  TYPE TABLE OF TY_J_1BNFDOC,
    WA_J_1BNFDOC  TYPE TY_J_1BNFDOC,

    IT_ZSDT0001   TYPE TABLE OF TY_ZSDT0001,
    WA_ZSDT0001   TYPE TY_ZSDT0001,

    IT_ZSDT0001_S TYPE TABLE OF ZSDT0001,
    WA_ZSDT0001_S TYPE ZSDT0001,

    IT_VBPA       TYPE TABLE OF VBPA,
    WA_VBPA       TYPE  VBPA,

    IT_LFA1       TYPE TABLE OF LFA1,
    WA_LFA1       TYPE LFA1.

  FIELD-SYMBOLS <FS_J_1BNFDOC> TYPE TY_J_1BNFDOC.


  DATA: IT_AUX   TYPE TABLE OF ZEXPORT_NOTAS INITIAL SIZE 0 WITH HEADER LINE,
        IT_BUKRS TYPE TABLE OF TY_BUKRS INITIAL SIZE 0 WITH HEADER LINE,
        IT_WERKS TYPE TABLE OF TY_WERKS INITIAL SIZE 0 WITH HEADER LINE,
        IT_KNA1  TYPE TABLE OF TY_KNA1  INITIAL SIZE 0 WITH HEADER LINE,
        IT_MAKT  TYPE TABLE OF TY_MAKT  INITIAL SIZE 0 WITH HEADER LINE,
        IT_UNIT  TYPE TABLE OF TY_UNIT  INITIAL SIZE 0 WITH HEADER LINE,
        IT_TERM  TYPE TABLE OF TY_TERM  INITIAL SIZE 0 WITH HEADER LINE.

  CHECK NOT IT_NOTAS[] IS INITIAL.

  "Busca Empresas
  CLEAR: IT_AUX[].
  MOVE IT_NOTAS[] TO IT_AUX[].
  SORT IT_AUX BY BUKRS.
  DELETE ADJACENT DUPLICATES FROM IT_AUX COMPARING BUKRS.
  SELECT BUKRS BUTXT INTO TABLE IT_BUKRS
    FROM T001
    FOR ALL ENTRIES IN IT_AUX
   WHERE BUKRS EQ IT_AUX-BUKRS.

  "Busca Centros
  CLEAR: IT_AUX[].
  MOVE IT_NOTAS[] TO IT_AUX[].
  SORT IT_AUX BY WERKS.
  DELETE ADJACENT DUPLICATES FROM IT_AUX COMPARING WERKS.
  SELECT WERKS NAME1 INTO TABLE IT_WERKS
    FROM T001W
    FOR ALL ENTRIES IN IT_AUX
   WHERE WERKS EQ IT_AUX-WERKS.

  SORT IT_WERKS BY WERKS.

  "Busca Exportador
  CLEAR: IT_AUX[].
  MOVE IT_NOTAS[] TO IT_AUX[].
  SORT IT_AUX BY EXPORTADOR.
  DELETE ADJACENT DUPLICATES FROM IT_AUX COMPARING EXPORTADOR.
  IF P_DIRECAO EQ C_2.
    SELECT KUNNR NAME1 STCD1 STCD2 STKZN REGIO INTO TABLE IT_KNA1
      FROM KNA1
      FOR ALL ENTRIES IN IT_AUX
     WHERE KUNNR EQ IT_AUX-EXPORTADOR.
  ELSEIF P_DIRECAO EQ C_1.
    SELECT LIFNR NAME1 STCD1 STCD2 STKZN REGIO INTO TABLE IT_KNA1
      FROM LFA1
      FOR ALL ENTRIES IN IT_AUX
     WHERE LIFNR EQ IT_AUX-EXPORTADOR.
  ENDIF.

  "Busca Produtos
  CLEAR: IT_AUX[].
  MOVE IT_NOTAS[] TO IT_AUX[].
  SORT IT_AUX BY PRODUTO.
  DELETE ADJACENT DUPLICATES FROM IT_AUX COMPARING PRODUTO.
  SELECT MATNR MAKTG INTO TABLE IT_MAKT
    FROM MAKT
    FOR ALL ENTRIES IN IT_AUX
   WHERE SPRAS EQ SY-LANGU
     AND MATNR EQ IT_AUX-PRODUTO.

  "Busca Unidade
  CLEAR: IT_AUX[].
  MOVE IT_NOTAS[] TO IT_AUX[].
  SORT IT_AUX BY UNIDADE.
  DELETE ADJACENT DUPLICATES FROM IT_AUX COMPARING UNIDADE.
  LOOP AT IT_AUX INTO WA_NOTAS.
    WA_UNIT-MSEHI = WA_NOTAS-UNIDADE.
    APPEND WA_UNIT TO IT_UNIT.
  ENDLOOP.

  "Busca Terminal
  CLEAR: IT_AUX[].
  MOVE IT_NOTAS[] TO IT_AUX[].
  SORT IT_AUX BY NR_TERMINAL.
  DELETE ADJACENT DUPLICATES FROM IT_AUX COMPARING NR_TERMINAL.
  IF P_DIRECAO EQ C_1.
    SELECT LIFNR NAME1 INTO TABLE IT_TERM
      FROM LFA1
      FOR ALL ENTRIES IN IT_AUX
     WHERE LIFNR EQ IT_AUX-NR_TERMINAL.
    APPEND WA_TERM TO IT_TERM.
  ENDIF.

  DATA: CONT1 TYPE N LENGTH 3.

  READ TABLE IT_BUKRS INDEX 1 INTO WA_BUKRS.

  SORT IT_NOTAS BY WERKS EXPORTADOR PRODUTO.

  IF P_DIRECAO EQ C_1.
    LOOP AT IT_WERKS INTO WA_WERKS.
      LOOP AT IT_KNA1 INTO WA_KNA1.
        LOOP AT IT_MAKT INTO WA_MAKT.
          LOOP AT IT_UNIT INTO WA_UNIT.
            LOOP AT IT_TERM INTO WA_TERM.
              IF WA_TERM-LIFNR IS INITIAL.
                QUANTIDADE = 0.
                QUANTACOMP = 0.
                QUANTCOMPE = 0.
                QUANTPLANE = 0.
                QUANTAPLAN = 0.
                VG_STATUS  = 0.
                LOOP AT IT_NOTAS INTO WA_NOTAS WHERE WERKS       = WA_WERKS-WERKS
                                                 AND EXPORTADOR  = WA_KNA1-KUNNR
                                                 AND PRODUTO     = WA_MAKT-MATNR
                                                 AND UNIDADE     = WA_UNIT-MSEHI
                                                 AND NR_TERMINAL = WA_TERM-LIFNR.

                  QUANTIDADE = QUANTIDADE + WA_NOTAS-QUANTIDADE.
                  QUANTACOMP = QUANTACOMP + WA_NOTAS-SALDO.
                  QUANTCOMPE = QUANTIDADE - QUANTACOMP.

                  QUANTPLANE = QUANTPLANE + WA_NOTAS-QUANTPLANE.
                  QUANTAPLAN = QUANTAPLAN + WA_NOTAS-QUANTAPLAN.

                  IF WA_NOTAS-SALDO GT 0.
                    VG_DATA_60 = SY-DATUM - 60.
                    VG_DATA_90 = SY-DATUM - 90.
                    IF ( VG_DATA_60 LT WA_NOTAS-DT_EMISSAO ) .
                      IF VG_STATUS LT 1.
                        VG_STATUS = 1.
                      ENDIF.
                    ELSEIF ( VG_DATA_60 GE WA_NOTAS-DT_EMISSAO ).
                      IF ( VG_DATA_90 LT WA_NOTAS-DT_EMISSAO ).
                        IF VG_STATUS LT 2.
                          VG_STATUS = 2.
                        ENDIF.
                      ELSE.
                        IF VG_STATUS LT 3.
                          VG_STATUS = 3.
                        ENDIF.
                      ENDIF.
                    ENDIF.
                  ELSE.
                    IF VG_STATUS LE 0.
                      VG_STATUS = 0.
                    ENDIF.
                  ENDIF.

                ENDLOOP.
                IF QUANTIDADE GT 0.

                  CASE VG_STATUS.
                    WHEN 0.
                      WA_ACOMP-STATUS = ICON_STATUS_BEST.
                    WHEN 1.
                      WA_ACOMP-STATUS = ICON_STATUS_OK.
                    WHEN 2.
                      WA_ACOMP-STATUS = ICON_STATUS_ALERT.
                    WHEN 3.
                      WA_ACOMP-STATUS = ICON_STATUS_CRITICAL.
                  ENDCASE.

                  "Informa칞칫es da Empresa
                  WA_ACOMP-BUKRS       = WA_BUKRS-BUKRS.
                  WA_ACOMP-BUKRSN      = WA_BUKRS-BUTXT.
                  "Informa칞칫es do Centro
                  WA_ACOMP-WERKS       = WA_WERKS-WERKS.
                  WA_ACOMP-WERKSN      = WA_WERKS-NAME1.
                  "Informa칞칫es do Exportador
                  WA_ACOMP-EXPORTADOR  = WA_KNA1-KUNNR.
                  WA_ACOMP-EXPORTADORN = WA_KNA1-NAME1.
                  WA_ACOMP-REGIAO      = WA_KNA1-REGIO.

                  IF WA_KNA1-STKZN IS INITIAL.
                    CALL FUNCTION 'CONVERSION_EXIT_CGCBR_OUTPUT'
                      EXPORTING
                        INPUT  = WA_KNA1-STCD1
                      IMPORTING
                        OUTPUT = VG_CNPJ.
                    WA_ACOMP-EXPORTCNPJ  = VG_CNPJ.
                  ELSE.
                    CALL FUNCTION 'CONVERSION_EXIT_CPFBR_OUTPUT'
                      EXPORTING
                        INPUT  = WA_KNA1-STCD2
                      IMPORTING
                        OUTPUT = VG_CPF.
                    WA_ACOMP-EXPORTCNPJ  = VG_CPF.
                  ENDIF.

                  "Informa칞칫es da Empresa
                  WA_ACOMP-PRODUTO     = WA_MAKT-MATNR.
                  WA_ACOMP-PRODUTON    = WA_MAKT-MAKTG.
                  "Informa칞칫es da Unidade
                  WA_ACOMP-UNIDADE     = WA_UNIT-MSEHI.
                  "Informa칞칫es de quantidade
                  WA_ACOMP-QUANTIDADE  = QUANTIDADE.
                  WA_ACOMP-QUANTCOMPE  = QUANTCOMPE.
                  WA_ACOMP-QUANTACOMP  = QUANTACOMP.
                  WA_ACOMP-QUANTPLANE  = QUANTPLANE.
                  WA_ACOMP-QUANTAPLAN  = QUANTAPLAN.
                  "Informa칞칫es do terminal
                  WA_ACOMP-DES_TERMINAL = WA_TERM-NAME1.
                  WA_ACOMP-NR_TERMINAL = WA_TERM-LIFNR.

                  APPEND WA_ACOMP TO IT_EXPORTACOES.
                  CLEAR: WA_ACOMP-NR_TERMINAL, WA_ACOMP-DES_TERMINAL.
                ENDIF.
              ENDIF.
            ENDLOOP.
          ENDLOOP.
        ENDLOOP.
      ENDLOOP.
    ENDLOOP.
    LOOP AT IT_WERKS INTO WA_WERKS.
      LOOP AT IT_KNA1 INTO WA_KNA1.
        LOOP AT IT_MAKT INTO WA_MAKT.
          LOOP AT IT_UNIT INTO WA_UNIT.
            LOOP AT IT_TERM INTO WA_TERM.
              IF WA_TERM-LIFNR IS NOT INITIAL.
                QUANTIDADE = 0.
                QUANTACOMP = 0.
                QUANTCOMPE = 0.
                QUANTPLANE = 0.
                QUANTAPLAN = 0.
                VG_STATUS  = 0.
                LOOP AT IT_NOTAS INTO WA_NOTAS WHERE WERKS       = WA_WERKS-WERKS
                                                 AND EXPORTADOR  = WA_KNA1-KUNNR
                                                 AND PRODUTO     = WA_MAKT-MATNR
                                                 AND UNIDADE     = WA_UNIT-MSEHI
                                                 AND NR_TERMINAL = WA_TERM-LIFNR.

                  QUANTIDADE = QUANTIDADE + WA_NOTAS-QUANTIDADE.
                  QUANTACOMP = QUANTACOMP + WA_NOTAS-SALDO.
                  QUANTCOMPE = QUANTIDADE - QUANTACOMP.

                  QUANTPLANE = QUANTPLANE + WA_NOTAS-QUANTPLANE.
                  QUANTAPLAN = QUANTAPLAN + WA_NOTAS-QUANTAPLAN.

                  IF WA_NOTAS-SALDO GT 0.
                    VG_DATA_60 = SY-DATUM - 60.
                    VG_DATA_90 = SY-DATUM - 90.
                    IF ( VG_DATA_60 LT WA_NOTAS-DT_EMISSAO ) .
                      IF VG_STATUS LT 1.
                        VG_STATUS = 1.
                      ENDIF.
                    ELSEIF ( VG_DATA_60 GE WA_NOTAS-DT_EMISSAO ).
                      IF ( VG_DATA_90 LT WA_NOTAS-DT_EMISSAO ).
                        IF VG_STATUS LT 2.
                          VG_STATUS = 2.
                        ENDIF.
                      ELSE.
                        IF VG_STATUS LT 3.
                          VG_STATUS = 3.
                        ENDIF.
                      ENDIF.
                    ENDIF.
                  ELSE.
                    IF VG_STATUS LE 0.
                      VG_STATUS = 0.
                    ENDIF.
                  ENDIF.

                ENDLOOP.
                IF QUANTIDADE GT 0.

                  CASE VG_STATUS.
                    WHEN 0.
                      WA_ACOMP-STATUS = ICON_STATUS_BEST.
                    WHEN 1.
                      WA_ACOMP-STATUS = ICON_STATUS_OK.
                    WHEN 2.
                      WA_ACOMP-STATUS = ICON_STATUS_ALERT.
                    WHEN 3.
                      WA_ACOMP-STATUS = ICON_STATUS_CRITICAL.
                  ENDCASE.

                  "Informa칞칫es da Empresa
                  WA_ACOMP-BUKRS       = WA_BUKRS-BUKRS.
                  WA_ACOMP-BUKRSN      = WA_BUKRS-BUTXT.
                  "Informa칞칫es do Centro
                  WA_ACOMP-WERKS       = WA_WERKS-WERKS.
                  WA_ACOMP-WERKSN      = WA_WERKS-NAME1.
                  "Informa칞칫es do Exportador
                  WA_ACOMP-EXPORTADOR  = WA_KNA1-KUNNR.
                  WA_ACOMP-EXPORTADORN = WA_KNA1-NAME1.
                  WA_ACOMP-REGIAO      = WA_KNA1-REGIO.

                  IF WA_KNA1-STKZN IS INITIAL.
                    CALL FUNCTION 'CONVERSION_EXIT_CGCBR_OUTPUT'
                      EXPORTING
                        INPUT  = WA_KNA1-STCD1
                      IMPORTING
                        OUTPUT = VG_CNPJ.
                    WA_ACOMP-EXPORTCNPJ  = VG_CNPJ.
                  ELSE.
                    CALL FUNCTION 'CONVERSION_EXIT_CPFBR_OUTPUT'
                      EXPORTING
                        INPUT  = WA_KNA1-STCD2
                      IMPORTING
                        OUTPUT = VG_CPF.
                    WA_ACOMP-EXPORTCNPJ  = VG_CPF.
                  ENDIF.

                  "Informa칞칫es da Empresa
                  WA_ACOMP-PRODUTO     = WA_MAKT-MATNR.
                  WA_ACOMP-PRODUTON    = WA_MAKT-MAKTG.
                  "Informa칞칫es da Unidade
                  WA_ACOMP-UNIDADE     = WA_UNIT-MSEHI.
                  "Informa칞칫es de quantidade
                  WA_ACOMP-QUANTIDADE  = QUANTIDADE.
                  WA_ACOMP-QUANTCOMPE  = QUANTCOMPE.
                  WA_ACOMP-QUANTACOMP  = QUANTACOMP.
                  WA_ACOMP-QUANTPLANE  = QUANTPLANE.
                  WA_ACOMP-QUANTAPLAN  = QUANTAPLAN.
                  "Informa칞칫es do terminal
                  WA_ACOMP-DES_TERMINAL = WA_TERM-NAME1.
                  WA_ACOMP-NR_TERMINAL = WA_TERM-LIFNR.

                  APPEND WA_ACOMP TO IT_EXPORTACOES.
                  CLEAR: WA_ACOMP-NR_TERMINAL, WA_ACOMP-DES_TERMINAL.
                ENDIF.
              ENDIF.
            ENDLOOP.
          ENDLOOP.
        ENDLOOP.
      ENDLOOP.
    ENDLOOP.
  ENDIF.

  IF P_DIRECAO EQ C_2.
    LOOP AT IT_WERKS INTO WA_WERKS.
      LOOP AT IT_KNA1 INTO WA_KNA1.
        LOOP AT IT_MAKT INTO WA_MAKT.
          LOOP AT IT_UNIT INTO WA_UNIT.
            QUANTIDADE = 0.
            QUANTACOMP = 0.
            QUANTCOMPE = 0.
            QUANTPLANE = 0.
            QUANTAPLAN = 0.
            VG_STATUS  = 0.
            LOOP AT IT_NOTAS INTO WA_NOTAS WHERE WERKS       = WA_WERKS-WERKS
                                             AND EXPORTADOR  = WA_KNA1-KUNNR
                                             AND PRODUTO     = WA_MAKT-MATNR
                                             AND UNIDADE     = WA_UNIT-MSEHI.

              QUANTIDADE = QUANTIDADE + WA_NOTAS-QUANTIDADE.
              QUANTACOMP = QUANTACOMP + WA_NOTAS-SALDO.
              QUANTCOMPE = QUANTIDADE - QUANTACOMP.

              QUANTPLANE = QUANTPLANE + WA_NOTAS-QUANTPLANE.
              QUANTAPLAN = QUANTAPLAN + WA_NOTAS-QUANTAPLAN.

              IF WA_NOTAS-SALDO GT 0.
                VG_DATA_60 = SY-DATUM - 60.
                VG_DATA_90 = SY-DATUM - 90.
                IF ( VG_DATA_60 LT WA_NOTAS-DT_EMISSAO ) .
                  IF VG_STATUS LT 1.
                    VG_STATUS = 1.
                  ENDIF.
                ELSEIF ( VG_DATA_60 GE WA_NOTAS-DT_EMISSAO ).
                  IF ( VG_DATA_90 LT WA_NOTAS-DT_EMISSAO ).
                    IF VG_STATUS LT 2.
                      VG_STATUS = 2.
                    ENDIF.
                  ELSE.
                    IF VG_STATUS LT 3.
                      VG_STATUS = 3.
                    ENDIF.
                  ENDIF.
                ENDIF.
              ELSE.
                IF VG_STATUS LE 0.
                  VG_STATUS = 0.
                ENDIF.
              ENDIF.
            ENDLOOP.
            IF QUANTIDADE GT 0.

              CASE VG_STATUS.
                WHEN 0.
                  WA_ACOMP-STATUS = ICON_STATUS_BEST.
                WHEN 1.
                  WA_ACOMP-STATUS = ICON_STATUS_OK.
                WHEN 2.
                  WA_ACOMP-STATUS = ICON_STATUS_ALERT.
                WHEN 3.
                  WA_ACOMP-STATUS = ICON_STATUS_CRITICAL.
              ENDCASE.

              "Informa칞칫es da Empresa
              WA_ACOMP-BUKRS       = WA_BUKRS-BUKRS.
              WA_ACOMP-BUKRSN      = WA_BUKRS-BUTXT.
              "Informa칞칫es do Centro
              WA_ACOMP-WERKS       = WA_WERKS-WERKS.
              WA_ACOMP-WERKSN      = WA_WERKS-NAME1.
              "Informa칞칫es do Exportador
              WA_ACOMP-EXPORTADOR  = WA_KNA1-KUNNR.
              WA_ACOMP-EXPORTADORN = WA_KNA1-NAME1.
              WA_ACOMP-REGIAO      = WA_KNA1-REGIO.

              IF WA_KNA1-STKZN IS INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_CGCBR_OUTPUT'
                  EXPORTING
                    INPUT  = WA_KNA1-STCD1
                  IMPORTING
                    OUTPUT = VG_CNPJ.
                WA_ACOMP-EXPORTCNPJ  = VG_CNPJ.
              ELSE.
                CALL FUNCTION 'CONVERSION_EXIT_CPFBR_OUTPUT'
                  EXPORTING
                    INPUT  = WA_KNA1-STCD2
                  IMPORTING
                    OUTPUT = VG_CPF.
                WA_ACOMP-EXPORTCNPJ  = VG_CPF.
              ENDIF.

              "Informa칞칫es da Empresa
              WA_ACOMP-PRODUTO     = WA_MAKT-MATNR.
              WA_ACOMP-PRODUTON    = WA_MAKT-MAKTG.
              "Informa칞칫es da Unidade
              WA_ACOMP-UNIDADE     = WA_UNIT-MSEHI.
              "Informa칞칫es de quantidade
              WA_ACOMP-QUANTIDADE  = QUANTIDADE.
              WA_ACOMP-QUANTCOMPE  = QUANTCOMPE.
              WA_ACOMP-QUANTACOMP  = QUANTACOMP.
              WA_ACOMP-QUANTPLANE  = QUANTPLANE.
              WA_ACOMP-QUANTAPLAN  = QUANTAPLAN.

              APPEND WA_ACOMP TO IT_EXPORTACOES.

            ENDIF.
          ENDLOOP.
        ENDLOOP.
      ENDLOOP.
    ENDLOOP.
  ENDIF.
  SORT IT_EXPORTACOES BY WERKS EXPORTADOR PRODUTO.
ENDFORM.                    " AGRUPA_ACOMPANHAMENTO

FORM F_ATRIB_DT_CHEGADA  USING P_J_1BNFDOC   TYPE J_1BNFDOC
                      CHANGING P_DT_CHEGADA  TYPE J_1BNFDOC-DOCDAT.

  DATA: V_ID_REFERENCIA TYPE ZSDT0001-ID_REFERENCIA.

  CLEAR P_DT_CHEGADA.

  CHECK P_J_1BNFDOC-DOCNUM IS NOT INITIAL.

  CALL FUNCTION 'Z_DATA_CHEGADA_NF_PORTO'
    EXPORTING
      I_BUKRS       = P_J_1BNFDOC-BUKRS
      I_BRANCH      = P_J_1BNFDOC-BRANCH
      I_PARID       = P_J_1BNFDOC-PARID
      I_DOCDAT      = P_J_1BNFDOC-DOCDAT
      I_NFENUM      = P_J_1BNFDOC-NFENUM
      I_SERIES      = P_J_1BNFDOC-SERIES
      I_NF_TERCEIRO = 'X'
    IMPORTING
      E_DT_CHEGADA  = P_DT_CHEGADA.

ENDFORM.
