*&---------------------------------------------------------------------*
*& Report  ZFIR068
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZFIR068.


TABLES: BKPF, LFA1, BSIS.


TYPES: BEGIN OF TY_SAIDA,
         SITUACAO(20) TYPE C,
         BUKRS        TYPE ZHRST_EFD_AUTOPT-BUKRS,
         GSBER        TYPE BSIS-GSBER,
         BELNR        TYPE ZHRST_EFD_AUTOPT-BELNR,
         BUDAT        TYPE BKPF-BUDAT,
         BLDAT        TYPE BKPF-BLDAT,
         GJAHR        TYPE ZHRST_EFD_AUTOPT-GJAHR,
         AWKEY        TYPE BKPF-AWKEY,
         XBLNR        TYPE RBKP-XBLNR,
         ZUONR        TYPE RBKP-ZUONR,
         LIFNR        TYPE RBKP-LIFNR,
         NAME1        TYPE HRPADBR_EMPLOYEE_NAME, "LFA1-NAME1,
         LGART        TYPE ZHRST_EFD_AUTOPT-LGART,
         LGTXT        TYPE T512T-LGTXT,
         WITHT        TYPE ZHRST_EFD_AUTOPT-WITHT,
         WT_WITHCD    TYPE ZHRST_EFD_AUTOPT-WT_WITHCD,
         BETPE        TYPE ZHRST_EFD_AUTOPT-BETPE,
         BETRG        TYPE ZHRST_EFD_AUTOPT-BETRG,
         WAERS        TYPE ZHRST_EFD_AUTOPT-WAERS,
         STCD2        TYPE LFA1-STCD2,
         STENR        TYPE LFA1-STENR,
         GBDAT        TYPE LFA1-GBDAT,
         CBO          TYPE ZHRST_EFD_AUTOBS-CBO,
         CATEG        TYPE ZHRST_EFD_AUTOBS-CATEG,
       END OF TY_SAIDA.

TYPES: BEGIN OF TY_BSIS,
         BUKRS TYPE BSIS-BUKRS,
         GJAHR TYPE BSIS-GJAHR,
         BELNR TYPE BSIS-BELNR,
         GSBER TYPE BSIS-GSBER,
       END OF TY_BSIS.

TYPES: BEGIN OF TY_BKPF,
         BUKRS  TYPE BKPF-BUKRS,
         GJAHR  TYPE BKPF-GJAHR,
         BELNR  TYPE BKPF-BELNR,
         AWKEY  TYPE BKPF-AWKEY,
         BUDAT  TYPE BKPF-BUDAT,
         BLDAT  TYPE BKPF-BLDAT,
         VAWKEY TYPE RBKP-BELNR,
       END OF TY_BKPF.

TYPES: BEGIN OF TY_RBKP,
         BELNR TYPE RBKP-BELNR,
         GJAHR TYPE RBKP-GJAHR,
         XBLNR TYPE RBKP-XBLNR,
         LIFNR TYPE RBKP-LIFNR,
         ZUONR TYPE RBKP-ZUONR,
       END OF TY_RBKP.

TYPES: BEGIN OF TY_LFA1,
         LIFNR TYPE LFA1-LIFNR,
         STCD2 TYPE LFA1-STCD2,
         STENR TYPE LFA1-STENR,
         GBDAT TYPE LFA1-GBDAT,
         NAME1 TYPE LFA1-NAME1,
       END OF TY_LFA1.

DATA: BEGIN OF TG_ENTRADA OCCURS 0,
        BUKRS     TYPE ZHRST_EFD_AUTOPT-BUKRS,
        BELNR     TYPE ZHRST_EFD_AUTOPT-BELNR,
        GJAHR     TYPE ZHRST_EFD_AUTOPT-GJAHR,
        LGART     TYPE ZHRST_EFD_AUTOPT-LGART,
        XABKR     TYPE ZHRST_EFD_AUTOPT-XABKR,
        BUZEI     TYPE ZHRST_EFD_AUTOPT-BUZEI,
        WITHT     TYPE ZHRST_EFD_AUTOPT-WITHT,
        WT_WITHCD TYPE ZHRST_EFD_AUTOPT-WT_WITHCD,
        BETPE     TYPE ZHRST_EFD_AUTOPT-BETPE,
        BETRG     TYPE ZHRST_EFD_AUTOPT-BETRG,
        WAERS     TYPE ZHRST_EFD_AUTOPT-WAERS.
DATA: END OF TG_ENTRADA.


DATA: BEGIN OF TG_ENTRADA_01 OCCURS 0,
        BUKRS     TYPE ZHRST_EFD_AUTOPT-BUKRS,
        BELNR     TYPE ZHRST_EFD_AUTOPT-BELNR,
        GJAHR     TYPE ZHRST_EFD_AUTOPT-GJAHR,
        LGART     TYPE ZHRST_EFD_AUTOPT-LGART,
        XABKR     TYPE ZHRST_EFD_AUTOPT-XABKR,
        BUZEI     TYPE ZHRST_EFD_AUTOPT-BUZEI,
        WITHT     TYPE ZHRST_EFD_AUTOPT-WITHT,
        WT_WITHCD TYPE ZHRST_EFD_AUTOPT-WT_WITHCD,
        BETPE     TYPE ZHRST_EFD_AUTOPT-BETPE,
        BETRG     TYPE ZHRST_EFD_AUTOPT-BETRG,
        WAERS     TYPE ZHRST_EFD_AUTOPT-WAERS.
DATA: END OF TG_ENTRADA_01.


TYPES: BEGIN OF TY_ZHRST_EFD_AUTOPT,
         BUKRS     TYPE ZHRST_EFD_AUTOPT-BUKRS,
         BELNR     TYPE ZHRST_EFD_AUTOPT-BELNR,
         GJAHR     TYPE ZHRST_EFD_AUTOPT-GJAHR,
         LGART     TYPE ZHRST_EFD_AUTOPT-LGART,
         XABKR     TYPE ZHRST_EFD_AUTOPT-XABKR,
         BUZEI     TYPE ZHRST_EFD_AUTOPT-BUZEI,
         WITHT     TYPE ZHRST_EFD_AUTOPT-WITHT,
         WT_WITHCD TYPE ZHRST_EFD_AUTOPT-WT_WITHCD,
         BETPE     TYPE ZHRST_EFD_AUTOPT-BETPE,
         BETRG     TYPE ZHRST_EFD_AUTOPT-BETRG,
         WAERS     TYPE ZHRST_EFD_AUTOPT-WAERS,
       END OF TY_ZHRST_EFD_AUTOPT.




DATA: IT_SAIDA            TYPE TABLE OF TY_SAIDA,
      WA_SAIDA            TYPE TY_SAIDA,
      IT_BSIS             TYPE TABLE OF TY_BSIS,
      WA_BSIS             TYPE TY_BSIS,
      IT_BKPF             TYPE TABLE OF TY_BKPF,
      WA_BKPF             TYPE TY_BKPF,

      IT_BKPF_AUX         TYPE TABLE OF TY_BKPF,
      WA_BKPF_AUX         TYPE TY_BKPF,

      IT_RBKP             TYPE TABLE OF TY_RBKP,
      WA_RBKP             TYPE TY_RBKP,
      IT_LFA1             TYPE TABLE OF TY_LFA1,
      WA_LFA1             TYPE TY_LFA1,

      IT_ZHRST_EFD_AUTOPT TYPE TABLE OF TY_ZHRST_EFD_AUTOPT,
      WA_ZHRST_EFD_AUTOPT TYPE TY_ZHRST_EFD_AUTOPT.

FIELD-SYMBOLS: <LT_DATA>      TYPE ANY TABLE,
               <LT_DATA_LINE> TYPE ANY TABLE,
               <LS_DATA>      TYPE ANY,
               <LS_DATA_LINE> TYPE ANY.

DATA: LR_DATA            TYPE REF TO DATA,
      LR_DATA_LINE       TYPE REF TO DATA,
      LR_DATA_DESCR      TYPE REF TO CL_ABAP_DATADESCR,
      LR_DATA_LINE_DESCR TYPE REF TO CL_ABAP_DATADESCR.


DATA: G_CUSTOM_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      DG_SPLITTER_1      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_PARENT_1        TYPE REF TO CL_GUI_CONTAINER,
      DG_SPLITTER_2      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_PARENT_2        TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_2A       TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_ALV      TYPE REF TO CL_GUI_CONTAINER,
      GS_LAYOUT          TYPE LVC_S_LAYO,
      GS_VARIANT         TYPE DISVARIANT,
      IT_EXCLUDE_FCODE   TYPE UI_FUNCTIONS,
      WA_EXCLUDE_FCODE   LIKE LINE OF IT_EXCLUDE_FCODE,
      DG_DYNDOC_ID       TYPE REF TO CL_DD_DOCUMENT,
      CTL_ALV            TYPE REF TO CL_GUI_ALV_GRID,
      TABLE_ELEMENT      TYPE REF TO CL_DD_TABLE_ELEMENT,
      COLUMN             TYPE REF TO CL_DD_AREA,
      TABLE_ELEMENT2     TYPE REF TO CL_DD_TABLE_ELEMENT,
      COLUMN_1           TYPE REF TO CL_DD_AREA,
      COLUMN_2           TYPE REF TO CL_DD_AREA,
      DG_HTML_CNTRL      TYPE REF TO CL_GUI_HTML_VIEWER.

DATA: WA_STABLE       TYPE LVC_S_STBL,
      IT_FIELDCATALOG TYPE LVC_T_FCAT,
      WA_FIELDCATALOG TYPE LVC_S_FCAT.


SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS:  P_MES   FOR BSIS-MONAT NO INTERVALS NO-EXTENSION OBLIGATORY,
                 P_ANO   FOR BKPF-GJAHR NO INTERVALS NO-EXTENSION OBLIGATORY,
                 P_BUKRS FOR BKPF-BUKRS,
                 P_LIFNR FOR LFA1-LIFNR,
                 P_BELNR FOR BKPF-BELNR.
SELECTION-SCREEN END OF BLOCK B1.

INITIALIZATION.

CLASS LCL_EVENT_RECEIVER DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      ZM_HANDLE_HOTSPOT_REPORT
                  FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
        IMPORTING E_ROW_ID E_COLUMN_ID ES_ROW_NO.

ENDCLASS.

CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.

  METHOD: ZM_HANDLE_HOTSPOT_REPORT.
    PERFORM USER_COMMAND USING E_ROW_ID E_COLUMN_ID  ES_ROW_NO.
  ENDMETHOD.

ENDCLASS.

START-OF-SELECTION.

  PERFORM BUSCA_DADOS.
  PERFORM TRATA_DADOS.
  PERFORM ALV.

END-OF-SELECTION.

FORM BUSCA_DADOS.

  PERFORM BUSCA_DADOS_ZHRST_EFD_EXAUTO.

ENDFORM.


FORM BUSCA_DADOS_ZHRST_EFD_EXAUTO.
  DATA: IT_RSPARAMS TYPE TABLE OF RSPARAMS,
        WA_RSPARAMS TYPE RSPARAMS.

  CLEAR IT_RSPARAMS[].

  WA_RSPARAMS-SELNAME = 'P_MES'.
  WA_RSPARAMS-KIND    = 'S'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = P_MES-OPTION.
  WA_RSPARAMS-LOW     = P_MES-LOW.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  WA_RSPARAMS-SELNAME = 'P_ANO'.
  WA_RSPARAMS-KIND    = 'S'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = P_ANO-OPTION.
  WA_RSPARAMS-LOW     = P_ANO-LOW.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  LOOP AT P_BUKRS.
    WA_RSPARAMS-SELNAME = 'SO_BUKRS'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = P_BUKRS-OPTION.
    WA_RSPARAMS-LOW     = P_BUKRS-LOW.
    WA_RSPARAMS-HIGH    = P_BUKRS-HIGH.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.

  LOOP AT P_LIFNR.
    WA_RSPARAMS-SELNAME = 'SO_LIFNR'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = P_LIFNR-OPTION.
    WA_RSPARAMS-LOW     = P_LIFNR-LOW.
    WA_RSPARAMS-HIGH    = P_LIFNR-HIGH.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.

  LOOP AT P_BELNR.
    WA_RSPARAMS-SELNAME = 'SO_BELNR'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = P_BELNR-OPTION.
    WA_RSPARAMS-LOW     = P_BELNR-LOW.
    WA_RSPARAMS-HIGH    = P_BELNR-HIGH.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.

  WA_RSPARAMS-SELNAME = 'P_TEST'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = 'X'.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.


  WA_RSPARAMS-SELNAME = 'P_DEL'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = ' '.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = SY-TABIX
      TEXT       = 'Extraindo dados em  ZHRST_EFD_EXAUTO...'.

  PERFORM F_PREPARE_RUN_TIME_INFO.

  SUBMIT ZHRST_EFD_EXAUTO WITH SELECTION-TABLE IT_RSPARAMS AND RETURN.

  PERFORM F_GET_RUNTIME_INFO.

  IF <LT_DATA> IS ASSIGNED.
    LOOP AT <LT_DATA> ASSIGNING <LS_DATA>.
      CLEAR TG_ENTRADA_01.
      MOVE-CORRESPONDING <LS_DATA> TO TG_ENTRADA_01.
      APPEND TG_ENTRADA_01.
    ENDLOOP.
  ENDIF.
ENDFORM.

FORM F_PREPARE_RUN_TIME_INFO.

  IF <LT_DATA> IS ASSIGNED.
    CLEAR <LT_DATA>[].
  ENDIF.

  IF <LT_DATA_LINE> IS ASSIGNED.
    CLEAR <LT_DATA_LINE>[].
  ENDIF.

  IF <LS_DATA> IS ASSIGNED.
    CLEAR  <LS_DATA>.
  ENDIF.

  IF <LS_DATA_LINE> IS ASSIGNED.
    CLEAR <LS_DATA_LINE>.
  ENDIF.

  FREE: LR_DATA, LR_DATA_DESCR, LR_DATA_LINE, LR_DATA_LINE_DESCR.

  CL_SALV_BS_RUNTIME_INFO=>SET( EXPORTING DISPLAY  = ABAP_FALSE
                                          METADATA = ABAP_FALSE
                                          DATA     = ABAP_TRUE ).
ENDFORM.

FORM F_GET_RUNTIME_INFO.
  TRY.
      CL_SALV_BS_RUNTIME_INFO=>GET_DATA_REF(
              IMPORTING R_DATA_DESCR        = LR_DATA_DESCR
                        R_DATA_LINE_DESCR   = LR_DATA_LINE_DESCR ).

      CHECK ( LR_DATA_DESCR IS NOT INITIAL )  OR  ( LR_DATA_LINE_DESCR IS NOT INITIAL ).

      CREATE DATA LR_DATA      TYPE HANDLE LR_DATA_DESCR.
      CREATE DATA LR_DATA_LINE TYPE HANDLE LR_DATA_LINE_DESCR.

      ASSIGN LR_DATA->*      TO <LT_DATA>.
      ASSIGN LR_DATA_LINE->* TO <LT_DATA_LINE>.


      CL_SALV_BS_RUNTIME_INFO=>GET_DATA( IMPORTING T_DATA      = <LT_DATA>
                                                   T_DATA_LINE = <LT_DATA_LINE> ).

    CATCH CX_SALV_BS_SC_RUNTIME_INFO.
  ENDTRY.

  CL_SALV_BS_RUNTIME_INFO=>CLEAR_ALL( ).

  ASSIGN LR_DATA->*      TO <LS_DATA>.
  ASSIGN LR_DATA_LINE->* TO <LS_DATA_LINE>.
ENDFORM.

FORM TRATA_DADOS.

  DATA: DATAINI       TYPE SY-DATUM,
        DATAFIM       TYPE SY-DATUM,
        R_ANO         TYPE RANGE OF GJAHR WITH HEADER LINE,
        TG_ENTRADA_02 LIKE SORTED TABLE OF TG_ENTRADA WITH NON-UNIQUE KEY  BUKRS BELNR GJAHR LGART XABKR BUZEI WITHT WT_WITHCD BETPE BETRG,
        IT_AUTOP_AUX  TYPE STANDARD TABLE OF TY_ZHRST_EFD_AUTOPT WITH NON-UNIQUE SORTED KEY C  COMPONENTS BUKRS BELNR GJAHR LGART  XABKR BUZEI WITHT WT_WITHCD BETPE BETRG.


  CONCATENATE P_ANO-LOW P_MES-LOW '01' INTO DATAINI.

  CALL FUNCTION 'LAST_DAY_OF_MONTHS'
    EXPORTING
      DAY_IN            = DATAINI
    IMPORTING
      LAST_DAY_OF_MONTH = DATAFIM.

  R_ANO-SIGN   = 'I'.
  R_ANO-OPTION = 'BT'.
  R_ANO-LOW    = P_ANO-LOW.
  R_ANO-HIGH   = ( P_ANO-LOW + 1 ).
  APPEND R_ANO.

  IF P_BELNR[] IS NOT INITIAL.
    SELECT   P~BUKRS P~BELNR P~GJAHR  P~LGART  P~XABKR  P~BUZEI
             P~WITHT P~WT_WITHCD  P~BETPE  P~BETRG P~WAERS
       FROM  ZHRST_EFD_AUTOPT AS P
      INNER JOIN BKPF AS B ON B~BELNR = P~BELNR AND  B~GJAHR = P~GJAHR AND B~BUKRS = P~BUKRS
      INTO TABLE IT_ZHRST_EFD_AUTOPT
    WHERE P~BUKRS EQ P_BUKRS-LOW
    AND   P~GJAHR IN R_ANO
    AND   B~BLDAT BETWEEN DATAINI AND DATAFIM "B~BUDAT BETWEEN DATAINI AND DATAFIM
    AND   P~BELNR EQ P_BELNR-LOW
    AND   P~LGART <> ' '.

  ELSE.

    SELECT   P~BUKRS P~BELNR P~GJAHR  P~LGART  P~XABKR  P~BUZEI
             P~WITHT P~WT_WITHCD  P~BETPE  P~BETRG P~WAERS
       FROM  ZHRST_EFD_AUTOPT AS P
    INNER JOIN BKPF AS B ON B~BELNR = P~BELNR AND  B~GJAHR = P~GJAHR AND B~BUKRS = P~BUKRS
    INTO TABLE IT_ZHRST_EFD_AUTOPT
  WHERE P~BUKRS EQ P_BUKRS-LOW
  AND   P~GJAHR IN R_ANO
  AND   B~BLDAT BETWEEN DATAINI AND DATAFIM "B~BUDAT BETWEEN DATAINI AND DATAFIM
  AND   P~LGART <> ' '.
  ENDIF.


  IF ( TG_ENTRADA_01[] IS NOT INITIAL ).

    SORT IT_ZHRST_EFD_AUTOPT[] BY BUKRS BELNR GJAHR ASCENDING.

    LOOP AT TG_ENTRADA_01[] INTO DATA(W_ENTRADA_01).

      READ TABLE IT_ZHRST_EFD_AUTOPT[] INTO DATA(W_ZHRST_EFD) WITH KEY BUKRS = W_ENTRADA_01-BUKRS
                                                                       BELNR = W_ENTRADA_01-BELNR
                                                                       GJAHR = W_ENTRADA_01-GJAHR
                                                                       LGART = W_ENTRADA_01-LGART.
      DATA(_TABIX) = SY-TABIX.

      IF ( SY-SUBRC = 0 ).

        APPEND W_ZHRST_EFD TO TG_ENTRADA[].
        DELETE IT_ZHRST_EFD_AUTOPT[] INDEX _TABIX.

      ELSE.


        APPEND W_ENTRADA_01 TO TG_ENTRADA[].


      ENDIF.

      CLEAR: W_ZHRST_EFD, W_ENTRADA_01.


    ENDLOOP.

    IF ( IT_ZHRST_EFD_AUTOPT[] IS NOT INITIAL ).

      LOOP AT IT_ZHRST_EFD_AUTOPT[] INTO W_ZHRST_EFD.

        APPEND W_ZHRST_EFD TO TG_ENTRADA[].

      ENDLOOP.

    ENDIF.

    SORT TG_ENTRADA[] BY BUKRS BELNR GJAHR LGART ASCENDING.

  ENDIF.

*  IT_AUTOP_AUX = IT_ZHRST_EFD_AUTOPT.
*  TG_ENTRADA_02[] = TG_ENTRADA_01[].
*
*  DATA(LT_NAME_VEHCAT) =  FILTER  #( IT_AUTOP_AUX  EXCEPT IN TG_ENTRADA_02[] WHERE
*                                                                             BUKRS      = BUKRS AND
*                                                                             BELNR      = BELNR AND
*                                                                             GJAHR      = GJAHR AND
*                                                                             LGART      = LGART ). " AND
**                                                                             XABKR      = XABKR AND
**                                                                             BUZEI      = BUZEI AND
**                                                                             WITHT      = WITHT AND
**                                                                             WT_WITHCD  = WT_WITHCD AND
**                                                                             BETPE      = BETPE AND
**                                                                             BETRG      = BETRG ).
*
*  IF LT_NAME_VEHCAT[] IS NOT INITIAL.
*    LOOP AT LT_NAME_VEHCAT INTO DATA(WA_LT).
*      APPEND WA_LT TO TG_ENTRADA_01[].
*    ENDLOOP.
*  ENDIF.
*
*
*  MOVE TG_ENTRADA_01[] TO TG_ENTRADA[].

*
*  IF IT_ZHRST_EFD_AUTOPT[] IS NOT INITIAL.
*    LOOP AT IT_ZHRST_EFD_AUTOPT INTO DATA(WA_ZAUTOPT).
*
*      READ TABLE TG_ENTRADA_01 INTO DATA(WA_TG) WITH KEY BUKRS = WA_ZAUTOPT-BUKRS
*                                                         GJAHR = WA_ZAUTOPT-GJAHR
*                                                         BELNR = WA_ZAUTOPT-BELNR
*                                                         LGART = WA_ZAUTOPT-LGART.
*      IF SY-SUBRC NE 0.
*        WA_TG-BUKRS        =  WA_ZAUTOPT-BUKRS.
*        WA_TG-BELNR        =  WA_ZAUTOPT-BELNR.
*        WA_TG-GJAHR        =  WA_ZAUTOPT-GJAHR.
*        WA_TG-LGART        =  WA_ZAUTOPT-LGART.
*        WA_TG-XABKR        =  WA_ZAUTOPT-XABKR.
*        WA_TG-BUZEI        =  WA_ZAUTOPT-BUZEI.
*        WA_TG-WITHT        =  WA_ZAUTOPT-WITHT.
*        WA_TG-WT_WITHCD    =  WA_ZAUTOPT-WT_WITHCD.
*        WA_TG-BETPE        =  WA_ZAUTOPT-BETPE.
*        WA_TG-BETRG        =  WA_ZAUTOPT-BETRG.
*        WA_TG-WAERS        =  WA_ZAUTOPT-WAERS.
*        APPEND WA_TG TO TG_ENTRADA.
*
*      ELSEIF WA_TG-BUKRS = WA_ZAUTOPT-BUKRS AND
*             WA_TG-GJAHR = WA_ZAUTOPT-GJAHR AND
*             WA_TG-BELNR = WA_ZAUTOPT-BELNR AND
*             WA_TG-LGART = WA_ZAUTOPT-LGART.
*
*        APPEND WA_TG TO TG_ENTRADA.
*
*      ENDIF.
*
*      CLEAR: WA_TG,  WA_ZAUTOPT.
*    ENDLOOP.
*  ELSE.
*    MOVE TG_ENTRADA_01[] TO TG_ENTRADA[].
*  ENDIF.






  LOOP AT TG_ENTRADA.

    WA_SAIDA-BUKRS      =  TG_ENTRADA-BUKRS.
    WA_SAIDA-BELNR      =  TG_ENTRADA-BELNR.
    WA_SAIDA-GJAHR      =  TG_ENTRADA-GJAHR.
    WA_SAIDA-WITHT      =  TG_ENTRADA-WITHT.
    WA_SAIDA-WT_WITHCD  =  TG_ENTRADA-WT_WITHCD.
    WA_SAIDA-BETPE      =  TG_ENTRADA-BETPE.
    "WA_SAIDA-BETRG      =  TG_ENTRADA-BETRG.
    WA_SAIDA-WAERS      =  TG_ENTRADA-WAERS.
    WA_SAIDA-LGART      =  TG_ENTRADA-LGART.


    SELECT SINGLE
        T5~LGTXT
    FROM T512T AS T5
    INTO WA_SAIDA-LGTXT
    WHERE
        MOLGA EQ '37'   AND
        LGART EQ  TG_ENTRADA-LGART.

*    WA_SAIDA-LGTXT = WA_T512T-LGTXT.


    SELECT SINGLE
        BSI~BUKRS
        BSI~GJAHR
        BSI~BELNR
        BSI~GSBER
    FROM BSIS AS BSI
    INTO WA_BSIS
    WHERE
        BSI~BUKRS = TG_ENTRADA-BUKRS AND
        BSI~GJAHR = TG_ENTRADA-GJAHR AND
        BSI~BELNR = TG_ENTRADA-BELNR.

    WA_SAIDA-GSBER = WA_BSIS-GSBER.

    IF WA_SAIDA-GSBER = '9121'. WA_SAIDA-GSBER = '0121'. ENDIF.


    SELECT SINGLE  BUKRS GJAHR  BELNR  AWKEY BUDAT BLDAT
      FROM BKPF INTO WA_BKPF
      WHERE BUKRS = TG_ENTRADA-BUKRS
      AND   GJAHR = TG_ENTRADA-GJAHR
      AND   BELNR = TG_ENTRADA-BELNR.

    IF SY-SUBRC = 0.
      WA_SAIDA-BUDAT  = WA_BKPF-BUDAT.
      WA_SAIDA-BLDAT  = WA_BKPF-BLDAT.
      WA_SAIDA-AWKEY  = WA_BKPF-AWKEY+0(10).
    ENDIF.

    SELECT  SINGLE BELNR GJAHR  XBLNR LIFNR ZUONR
        FROM  RBKP INTO  WA_RBKP
        WHERE BELNR EQ WA_BKPF-AWKEY+0(10)
        AND   GJAHR EQ WA_BKPF-GJAHR.

    IF SY-SUBRC = 0.
      WA_SAIDA-XBLNR  = WA_RBKP-XBLNR.
      WA_SAIDA-LIFNR  = |{ WA_RBKP-LIFNR ALPHA = OUT }|.
      WA_SAIDA-ZUONR  = WA_RBKP-ZUONR.
    ENDIF.

    SELECT SINGLE LIFNR, STCD2, KRAUS, STENR, GBDAT, NAME1, NAME2, NAME3, STCD5
    FROM LFA1 INTO @DATA(W_LFA1)
     WHERE  LIFNR EQ @WA_RBKP-LIFNR.

    IF SY-SUBRC = 0.
      WA_SAIDA-NAME1  = |{ W_LFA1-NAME1 } { W_LFA1-NAME2 } { W_LFA1-NAME3 }|.
      WA_SAIDA-STCD2  = W_LFA1-STCD2.
      WA_SAIDA-STENR  = W_LFA1-KRAUS. " W_LFA1-STENR.
      WA_SAIDA-GBDAT  = W_LFA1-GBDAT.
      WA_SAIDA-CBO    = |{ W_LFA1-STCD5+0(6) }|.
      WA_SAIDA-CATEG  = |{ W_LFA1-STCD5+7(3) }|.
    ENDIF.

    IF ( WA_SAIDA-LGART = '9HR7' OR WA_SAIDA-LGART = '9HR8' ).
      WA_SAIDA-WITHT     = ' '.
      WA_SAIDA-WT_WITHCD = ' '.
    ENDIF.


    SELECT  SINGLE BELNR, BETRG FROM ZHRST_EFD_AUTOPT INTO @DATA(WA_ZHRST_EFD_AUTOPT)
      WHERE BUKRS EQ  @TG_ENTRADA-BUKRS
      AND   BELNR EQ  @TG_ENTRADA-BELNR
      AND   GJAHR EQ  @TG_ENTRADA-GJAHR
      AND   LGART EQ  @TG_ENTRADA-LGART.

    IF SY-SUBRC = 0.
      WA_SAIDA-SITUACAO =  ICON_GREEN_LIGHT.
      WA_SAIDA-BETRG    =  WA_ZHRST_EFD_AUTOPT-BETRG.
    ELSE.
      WA_SAIDA-SITUACAO =  ICON_YELLOW_LIGHT.
      WA_SAIDA-BETRG    =  TG_ENTRADA-BETRG.
    ENDIF.

    APPEND WA_SAIDA TO IT_SAIDA.

    CLEAR: WA_SAIDA, WA_LFA1, W_LFA1, WA_RBKP, WA_BKPF, WA_BSIS, WA_ZHRST_EFD_AUTOPT.

  ENDLOOP.

  DELETE IT_SAIDA[] WHERE BLDAT < DATAINI OR BLDAT > DATAFIM.

ENDFORM.

FORM ALV.

  PERFORM PREENCHE_CAT USING:

        'SITUACAO'      'Situação'              '07'    ''     ''     ''      '',
        'BUKRS'         'Empresa'               '07'    ''     ''     ''      '',
        'GSBER'         'Filial'                '06'    ''     ''     ''      '',
        'BELNR'         'NºDoc.'                '10'    ''     'X'    ''      '',
        'BUDAT'         'Dt.Lançamento'         '12'    ''     ''     ''      '',
        'BLDAT'         'Dt.Documento'          '12'    ''     ''     ''      '',
        'GJAHR'         'Ano'                   '04'    ''     ''     ''      '',
        'AWKEY'         'Nº Miro'               '10'    ''     'X'    ''      '',
        'XBLNR'         'Nro.Nota'              '16'    ''     ''     ''      '',
        'ZUONR'         'Pedido'                '10'    ''     'X'    ''      '',
        'LIFNR'         'Fornecedor'            '08'    ''     ''     ''      '',
        'NAME1'         'Nome Fornecedor'       '25'    ''     ''     ''      '',
        'LGART'         'RSal.'                 '05'    ''     ''     ''      '',
        'LGTXT'         'Descrição Rubricas'    '25'    ''     ''     ''      '',
        'WITHT'         'Ctg.IRF'               '07'    ''     ''     ''      '',
        'WT_WITHCD'     'IRF'                   '04'    ''     ''     ''      '',
        'BETPE'         'Taxa IRF'              '08'    ''     ''     ''      '',
        'BETRG'         'Montante IRF'          '12'    ''     ''     ''      '',
        'WAERS'         'Moeda'                 '06'    ''     ''     ''      '',
        'STCD2'         'CPF'                   '12'    ''     ''     ''      '',
        'STENR'         'PIS'                   '12'    ''     ''     ''      '',
        'GBDAT'         'Dt.Nascimento'         '12'    ''     ''     ''      '',
        'CBO'           'CBO'                   '06'    ''     ''     ''      '',
        'CATEG'         'Categoria'             '05'    ''     ''     ''      ''.

  CALL SCREEN 0100.

ENDFORM.

FORM PREENCHE_CAT USING VALUE(P_CAMPO)
                        VALUE(P_DESC)
                        VALUE(P_TAM)
                        VALUE(P_ZERO)
                        VALUE(P_HOT)
                        VALUE(P_SUM)
                        VALUE(P_JUST).

  WA_FIELDCATALOG-FIELDNAME = P_CAMPO.
  WA_FIELDCATALOG-COLTEXT   = P_DESC.
  WA_FIELDCATALOG-SCRTEXT_L = P_DESC.
  WA_FIELDCATALOG-SCRTEXT_M = P_DESC.
  WA_FIELDCATALOG-SCRTEXT_S = P_DESC.


  WA_FIELDCATALOG-OUTPUTLEN = P_TAM.
  WA_FIELDCATALOG-HOTSPOT   = P_HOT.
  WA_FIELDCATALOG-NO_ZERO   = P_ZERO.
  WA_FIELDCATALOG-DO_SUM    = P_SUM.
  WA_FIELDCATALOG-JUST      = P_JUST.

  APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

ENDFORM.

FORM FILL_GS_VARIANT.
  GS_VARIANT-REPORT      = SY-REPID.
  GS_VARIANT-HANDLE      = '0100'.
  GS_VARIANT-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT-USERNAME    = ABAP_FALSE.
  GS_VARIANT-VARIANT     = ABAP_FALSE.
  GS_VARIANT-TEXT        = ABAP_FALSE.
  GS_VARIANT-DEPENDVARS  = ABAP_FALSE.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.
  DATA: P_TEXT                  TYPE SDYDO_TEXT_ELEMENT,
        SDYDO_TEXT_ELEMENT(255),
        P_TEXT_TABLE            TYPE SDYDO_TEXT_TABLE,
        VL_CONT                 TYPE I,
        VL_GTEXT                TYPE TGSBT-GTEXT.

  DATA: VL_BUTXT LIKE T001-BUTXT.

  SET PF-STATUS 'STATUS'.
  SET TITLEBAR 'TITULO'.

  IF G_CUSTOM_CONTAINER IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    IF SY-SUBRC <> 0.
      MESSAGE A000(TREE_CONTROL_MSG).
    ENDIF.

    CREATE OBJECT DG_SPLITTER_1
      EXPORTING
        PARENT  = G_CUSTOM_CONTAINER
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_ALV.

    CREATE OBJECT DG_SPLITTER_2
      EXPORTING
        PARENT  = DG_PARENT_1
        ROWS    = 1
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_2A.

    CALL METHOD DG_SPLITTER_1->SET_ROW_HEIGHT
      EXPORTING
        ID     = 1
        HEIGHT = 16.

    CALL METHOD DG_SPLITTER_2->SET_COLUMN_WIDTH
      EXPORTING
        ID    = 1
        WIDTH = 0.

    PERFORM FILL_GS_VARIANT.

    GS_LAYOUT-SEL_MODE   = 'A'.
    GS_LAYOUT-STYLEFNAME = 'CELLSTYLES'.

    CREATE OBJECT CTL_ALV
      EXPORTING
        I_PARENT = DG_PARENT_ALV.

    SET HANDLER: LCL_EVENT_RECEIVER=>ZM_HANDLE_HOTSPOT_REPORT FOR CTL_ALV.

    CALL METHOD CTL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = GS_LAYOUT
        IS_VARIANT      = GS_VARIANT
        "IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
        I_SAVE          = 'A'
      CHANGING
        IT_FIELDCATALOG = IT_FIELDCATALOG
        IT_OUTTAB       = IT_SAIDA.

    CREATE OBJECT DG_DYNDOC_ID
      EXPORTING
        STYLE = 'ALV_GRID'.

    CALL METHOD DG_DYNDOC_ID->INITIALIZE_DOCUMENT.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 1
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT.

    CALL METHOD TABLE_ELEMENT->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN.

    CALL METHOD TABLE_ELEMENT->SET_COLUMN_STYLE
      EXPORTING
        COL_NO    = 1
        SAP_ALIGN = 'LEFT'
        SAP_STYLE = CL_DD_DOCUMENT=>HEADING.

    P_TEXT = TEXT-002.


    CALL METHOD COLUMN->ADD_TEXT
      EXPORTING
        TEXT      = P_TEXT
        SAP_STYLE = 'HEADING'.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 2
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT2.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      EXPORTING
        SAP_STYLE   = 'SAP_BOLD'
        STYLE_CLASS = 'SAP_BOLD'
      IMPORTING
        COLUMN      = COLUMN_1.

    CLEAR: P_TEXT_TABLE.

    CALL METHOD COLUMN_1->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE
        FIX_LINES  = 'X'.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN_2.

    CALL METHOD TABLE_ELEMENT2->SET_COLUMN_STYLE
      EXPORTING
        COL_NO       = 2
        SAP_ALIGN    = 'LEFT'
        SAP_FONTSIZE = CL_DD_DOCUMENT=>MEDIUM.

    CLEAR: P_TEXT_TABLE.

    IF P_MES[] IS NOT INITIAL.
      CONCATENATE 'Mês:  ' P_MES-LOW  INTO  SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

      CONCATENATE 'Ano:  ' P_ANO-LOW   INTO  SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.


    IF P_BUKRS[] IS NOT INITIAL.
      LOOP AT P_BUKRS.
        IF P_BUKRS-OPTION NE 'EQ' AND P_BUKRS-OPTION NE 'BT'.
          SDYDO_TEXT_ELEMENT = 'Empresa: Multiplas Seleções'.
          EXIT.
        ELSEIF P_BUKRS-OPTION EQ 'BT'.

          SELECT SINGLE BUTXT FROM T001  INTO VL_BUTXT
            WHERE BUKRS EQ P_BUKRS-LOW
            AND SPRAS EQ SY-LANGU.

          CONCATENATE 'Empresa:' P_BUKRS-LOW VL_BUTXT '-' INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          CLEAR: VL_BUTXT.

          SELECT SINGLE BUTXT  FROM T001  INTO VL_BUTXT
            WHERE BUKRS EQ P_BUKRS-LOW
            AND SPRAS EQ SY-LANGU.

          CONCATENATE SDYDO_TEXT_ELEMENT P_BUKRS-HIGH VL_BUTXT INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.

          EXIT.
        ELSE.
          VL_CONT = VL_CONT + 1.
          IF VL_CONT GT 1.
            SDYDO_TEXT_ELEMENT = 'Empresa: Multiplas Seleções'.
          ELSE.
            SELECT SINGLE BUTXT  FROM T001 INTO VL_BUTXT
            WHERE BUKRS EQ P_BUKRS-LOW
            AND SPRAS EQ SY-LANGU.
            CONCATENATE 'Empresa:' P_BUKRS-LOW VL_BUTXT INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          ENDIF.
        ENDIF.
      ENDLOOP.

      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      CLEAR: VL_CONT, VL_BUTXT, SDYDO_TEXT_ELEMENT.
    ENDIF.

    IF P_LIFNR[] IS NOT INITIAL.
      LOOP AT P_LIFNR.
        IF P_LIFNR-OPTION NE 'EQ' AND P_LIFNR-OPTION NE 'BT'.
          SDYDO_TEXT_ELEMENT = 'Fornecedor: Multiplas Seleções'.
          EXIT.
        ELSEIF P_LIFNR-OPTION EQ 'BT'.

          SELECT SINGLE * FROM LFA1 INTO @DATA(W_LFA1)
            WHERE LIFNR EQ @P_LIFNR-LOW.

          CONCATENATE 'Fornecedor:' P_LIFNR-LOW  W_LFA1-NAME1 '-' INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          CLEAR: W_LFA1.

          SELECT SINGLE * FROM LFA1 INTO W_LFA1
            WHERE LIFNR EQ P_LIFNR-HIGH.

          CONCATENATE SDYDO_TEXT_ELEMENT P_LIFNR-HIGH W_LFA1-NAME1 INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          EXIT.
        ELSE.
          VL_CONT = VL_CONT + 1.
          IF VL_CONT GT 1.
            SDYDO_TEXT_ELEMENT = 'Fornecedor: Multiplas Seleções'.
          ELSE.
            SELECT SINGLE * FROM LFA1 INTO W_LFA1
              WHERE LIFNR EQ P_LIFNR-LOW.
            CONCATENATE 'Fornecedor:' P_LIFNR-LOW W_LFA1-NAME1 INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          ENDIF.
        ENDIF.
      ENDLOOP.

      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      CLEAR: VL_CONT, W_LFA1, SDYDO_TEXT_ELEMENT.
    ENDIF.

    IF P_BELNR[] IS NOT INITIAL.
      LOOP AT P_BELNR.
        IF P_BELNR-OPTION NE 'EQ' AND P_BELNR-OPTION NE 'BT'.
          SDYDO_TEXT_ELEMENT = 'NºDocumento: Multiplas Seleções'.
          EXIT.
        ELSEIF P_BELNR-OPTION EQ 'BT'.
          CONCATENATE 'NºDocumento:' P_BELNR-LOW  INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          CONCATENATE SDYDO_TEXT_ELEMENT P_BELNR-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          EXIT.
        ELSE.
          VL_CONT = VL_CONT + 1.
          IF VL_CONT GT 1.
            SDYDO_TEXT_ELEMENT = 'NºDocumento: Multiplas Seleções'.
          ELSE.
            CONCATENATE 'NºDocumento:' P_BELNR-LOW INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          ENDIF.
        ENDIF.
      ENDLOOP.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      CLEAR: VL_CONT,  SDYDO_TEXT_ELEMENT.

    ENDIF.

    CALL METHOD COLUMN_2->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE
        FIX_LINES  = 'X'.

    CALL METHOD DG_DYNDOC_ID->MERGE_DOCUMENT.

    CREATE OBJECT DG_HTML_CNTRL
      EXPORTING
        PARENT = DG_PARENT_2.

    DG_DYNDOC_ID->HTML_CONTROL = DG_HTML_CNTRL.

    CALL METHOD DG_DYNDOC_ID->DISPLAY_DOCUMENT
      EXPORTING
        REUSE_CONTROL      = 'X'
        PARENT             = DG_PARENT_2
      EXCEPTIONS
        HTML_DISPLAY_ERROR = 1.

  ELSE.
    CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = WA_STABLE.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.
  CASE SY-UCOMM.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.


FORM USER_COMMAND USING E_ROW_ID TYPE LVC_S_ROW
                        P_E_COLUMN_ID TYPE LVC_S_COL
                        P_ES_ROW_ID TYPE LVC_S_ROID.

  READ TABLE IT_SAIDA INTO WA_SAIDA INDEX E_ROW_ID-INDEX.

  CASE P_E_COLUMN_ID-FIELDNAME.
    WHEN 'BELNR'.
      SET PARAMETER ID: 'BLN' FIELD WA_SAIDA-BELNR,
                        'BUK' FIELD WA_SAIDA-BUKRS,
                        'GJR' FIELD WA_SAIDA-GJAHR.
      CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
    WHEN 'AWKEY'.
      SET PARAMETER ID: 'RBN' FIELD WA_SAIDA-AWKEY+0(10),
                        'GJR' FIELD WA_SAIDA-GJAHR.
      CALL TRANSACTION 'MIR4' AND SKIP FIRST SCREEN.
    WHEN 'ZUONR'.
      SET PARAMETER ID 'BAN' FIELD WA_SAIDA-ZUONR.
      CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.
  ENDCASE.
ENDFORM.
