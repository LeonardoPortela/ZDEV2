*----------------------------------------------------------------------*
***INCLUDE ZMMR126_STATUS_9011.
*----------------------------------------------------------------------*
TABLES: ZDE_INFO_FRETE_PEDAGIO,
        ZDE_INFO_FRETE_FRETE,
        ZDE_INFO_FRETE,
        ZSDT0001FT.

TYPES: BEGIN OF TY_UFS_ALV.
        INCLUDE STRUCTURE ZDE_ZSDT0001FTUFS_ALV.
TYPES:   LINE_COLOR(4) TYPE C, "Used to store row color attributes
         COLOR_CELL    TYPE LVC_T_SCOL,  " Cell color
         STYLE         TYPE LVC_T_STYL,
         END OF TY_UFS_ALV.

DATA: CTL_ALV_9011         TYPE REF TO CL_GUI_ALV_GRID,
      CTL_CONTAINER_9011   TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      GS_VARIANT_9011      TYPE DISVARIANT,
      IT_FIELDCATALOG_9011 TYPE LVC_T_FCAT,
      GS_LAYOUT_9011       TYPE LVC_S_LAYO.

DATA: EDITOR_9011             TYPE REF TO CL_GUI_TEXTEDIT,
      CONTAINER_9011          TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      LC_NAME_9011            LIKE  THEAD-TDNAME,
      IT_LINES_ZFAT           TYPE STANDARD TABLE OF TLINE WITH HEADER LINE,
      LONGTEXT_TAB            TYPE CATSXT_LONGTEXT_ITAB,
      LC_APRESENTACAO_9011    TYPE ZDE_CARGA_APRESENTACAO,
      LC_MSG_ERRO             TYPE STRING,
      LC_MSG_ERRO_PEDAGIO     TYPE STRING,

      "Variáveis para Itinerario
      CK_ALTEROU_ITINERARIO   TYPE CHAR01,
      IT_UFS_INTERMEDIARIOS   TYPE ZDE_ZSDT0001FTUFS_T,
      IT_UFS_INTERMEDIARIOS2  TYPE ZDE_ZSDT0001FTUFS_T,
      WA_UFS_INTERMEDIARIOS   TYPE ZSDT0001FTUFS,
      IT_UFS_ALV              TYPE TABLE OF TY_UFS_ALV,
      WA_UFS_ALV              TYPE TY_UFS_ALV,

      "Variáveis para Pedágio
      "LC_QTD_LINHAS_PED       TYPE I,
      LC_TX_CID_ORIGEM        TYPE TEXT60,
      LC_TX_CID_DESTINO       TYPE TEXT60,
      CK_PED_REPOM_ELETRONICO TYPE CHAR01,
      CK_PED_TIPFR_ELETRONICO TYPE CHAR01,
      CK_ALTEROU_PEDAGIO      TYPE CHAR01,

      "Variáveis para Valor de Frete
      LC_TEM_MARGEM_ADIANT    TYPE CHAR01,
      LC_TEM_MARGEM_ZERO      TYPE CHAR01,
      LC_LIMPAR_CK_PEDAGIO    TYPE CHAR01,
      LC_CK_SAIDA_EMITIDA     TYPE CHAR01,
      LC_CK_DOC_TRA_EMITIDO   TYPE CHAR01.

CLASS LCL_EVENT_RECEIVER_9011 DEFINITION.
  PUBLIC SECTION.

    DATA: ERROR_IN_DATA TYPE C.

    METHODS: DATA_CHANGED_FINISHED FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID IMPORTING E_MODIFIED ET_GOOD_CELLS.

    METHODS: DATA_CHANGED FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID IMPORTING ER_DATA_CHANGED.

  PRIVATE SECTION.

    METHODS: PERFORM_SEMANTIC_CHECKS
      IMPORTING
        PR_DATA_CHANGED TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL.

    METHODS: ATUALIZA_TRANSFERENCIA
      IMPORTING
        I_LINHA         TYPE LVC_S_MODI
        PR_DATA_CHANGED TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL.

ENDCLASS.                    "lcl_event_receiver DEFINITION

RANGES: RPLACA FOR ZLEST0002-PC_VEICULO.

DATA: WPLACA LIKE LINE OF RPLACA.
DATA: EVENT_HANDLER_9011 TYPE REF TO LCL_EVENT_RECEIVER_9011.

CLASS LCL_EVENT_RECEIVER_9011 IMPLEMENTATION.

  METHOD PERFORM_SEMANTIC_CHECKS.

    DATA: LC_SEQUENCIA TYPE ZDE_NM_SEQUENCIA.

    LOOP AT PR_DATA_CHANGED->MT_GOOD_CELLS INTO DATA(LS_GOOD) WHERE FIELDNAME EQ 'NM_SEQUENCIA'.

      IF LS_GOOD-VALUE IS NOT INITIAL.
        LC_SEQUENCIA = LS_GOOD-VALUE.
      ENDIF.

      IF LC_SEQUENCIA IS INITIAL.
        ERROR_IN_DATA = ABAP_FALSE.
        CALL METHOD ATUALIZA_TRANSFERENCIA
          EXPORTING
            I_LINHA         = LS_GOOD
            PR_DATA_CHANGED = PR_DATA_CHANGED.
        CONTINUE.
      ENDIF.

      ERROR_IN_DATA = ABAP_TRUE.

      "Verificar Informação """"""""""""""""""""""""""""""""
      READ TABLE IT_UFS_ALV INTO WA_UFS_ALV INDEX LS_GOOD-ROW_ID.
      IF WA_UFS_ALV-BLAND = ZDE_INFO_FRETE_PEDAGIO-CD_CID_ORIGEM(3).
        CALL METHOD PR_DATA_CHANGED->ADD_PROTOCOL_ENTRY
          EXPORTING
            I_MSGID     = 'ZCARGA'
            I_MSGNO     = '235'
            I_MSGTY     = 'E'
            I_FIELDNAME = LS_GOOD-FIELDNAME
            I_ROW_ID    = LS_GOOD-ROW_ID.
        EXIT.
      ENDIF.
      IF WA_UFS_ALV-BLAND = ZDE_INFO_FRETE_PEDAGIO-CD_CID_DESTINO(3).
        CALL METHOD PR_DATA_CHANGED->ADD_PROTOCOL_ENTRY
          EXPORTING
            I_MSGID     = 'ZCARGA'
            I_MSGNO     = '235'
            I_MSGTY     = 'E'
            I_FIELDNAME = LS_GOOD-FIELDNAME
            I_ROW_ID    = LS_GOOD-ROW_ID.
        EXIT.
      ENDIF.
      """"""""""""""""""""""""""""""""""""""""""""""""""""""

      ERROR_IN_DATA = ABAP_FALSE.

      CALL METHOD ATUALIZA_TRANSFERENCIA
        EXPORTING
          I_LINHA         = LS_GOOD
          PR_DATA_CHANGED = PR_DATA_CHANGED.

    ENDLOOP.

  ENDMETHOD.

  METHOD ATUALIZA_TRANSFERENCIA.

    DATA: LC_SEQUENCIA TYPE ZDE_NM_SEQUENCIA.

    IF I_LINHA-VALUE IS NOT INITIAL.
      LC_SEQUENCIA = I_LINHA-VALUE.
      IF LC_SEQUENCIA IS NOT INITIAL.
        DATA(LC_COR) = CS_LINE_COLOR_ALTERADO.
      ELSE.
        CLEAR: LC_COR.
      ENDIF.
    ELSE.
      CLEAR: LC_COR.
    ENDIF.

    CALL METHOD PR_DATA_CHANGED->MODIFY_CELL
      EXPORTING
        I_ROW_ID    = I_LINHA-ROW_ID
        I_FIELDNAME = 'LINE_COLOR'
        I_VALUE     = LC_COR.

  ENDMETHOD.

  METHOD DATA_CHANGED.
    ERROR_IN_DATA = SPACE.
    CALL METHOD PERFORM_SEMANTIC_CHECKS( ER_DATA_CHANGED ).
    IF ERROR_IN_DATA = 'X'.
      CALL METHOD ER_DATA_CHANGED->DISPLAY_PROTOCOL.
    ENDIF.
  ENDMETHOD.                    "on_data_chaged

  METHOD DATA_CHANGED_FINISHED.

    DATA: LC_NM_SEQUENCIA	TYPE ZDE_NM_SEQUENCIA.

    CHECK E_MODIFIED IS NOT INITIAL.

    READ TABLE ET_GOOD_CELLS INTO DATA(WA_GOOD_CELLS) INDEX 1.

    DATA(IT_UFS_ALV2) = IT_UFS_ALV[].

    SORT IT_UFS_ALV2 BY NM_SEQUENCIA ASCENDING.
    DELETE IT_UFS_ALV2 WHERE NM_SEQUENCIA IS INITIAL.

    READ TABLE IT_UFS_ALV INTO DATA(WA_UFS_ALV) INDEX WA_GOOD_CELLS-ROW_ID.
    DELETE IT_UFS_ALV2 WHERE BLAND EQ WA_UFS_ALV-BLAND.

    DATA(LC_NM_SEQUENCIA_NEW) = 1.
    LC_NM_SEQUENCIA = WA_GOOD_CELLS-VALUE.
    LOOP AT IT_UFS_ALV ASSIGNING FIELD-SYMBOL(<FS_ALV>) WHERE NM_SEQUENCIA IS NOT INITIAL AND NM_SEQUENCIA LT LC_NM_SEQUENCIA.
      <FS_ALV>-NM_SEQUENCIA = LC_NM_SEQUENCIA_NEW.
      ADD 1 TO LC_NM_SEQUENCIA_NEW.
    ENDLOOP.

    LC_NM_SEQUENCIA_NEW = LC_NM_SEQUENCIA.
    ADD 1 TO LC_NM_SEQUENCIA_NEW.
    LOOP AT IT_UFS_ALV ASSIGNING <FS_ALV> WHERE NM_SEQUENCIA IS NOT INITIAL AND NM_SEQUENCIA GE LC_NM_SEQUENCIA AND BLAND NE WA_UFS_ALV-BLAND.
      <FS_ALV>-NM_SEQUENCIA = LC_NM_SEQUENCIA_NEW.
      ADD 1 TO LC_NM_SEQUENCIA_NEW.
    ENDLOOP.

    IF WA_UFS_ALV-NM_SEQUENCIA IS INITIAL.
      DELETE IT_UFS_INTERMEDIARIOS WHERE BLAND = WA_UFS_ALV-BLAND.
    ENDIF.

    CHECK WA_UFS_ALV-NM_SEQUENCIA IS NOT INITIAL.

    READ TABLE IT_UFS_INTERMEDIARIOS WITH KEY BLAND = WA_UFS_ALV-BLAND TRANSPORTING NO FIELDS.
    IF SY-SUBRC IS INITIAL.
      LOOP AT IT_UFS_INTERMEDIARIOS ASSIGNING FIELD-SYMBOL(<FS_GRAVAR>).
        IF WA_UFS_ALV-BLAND EQ <FS_GRAVAR>-BLAND.
          <FS_GRAVAR>-ID_CARGA     = LC_APRESENTACAO_9011-CARGA-ID_CARGA.
          <FS_GRAVAR>-NM_SEQUENCIA = WA_UFS_ALV-NM_SEQUENCIA.
        ELSE.
          READ TABLE IT_UFS_ALV INTO WA_UFS_ALV WITH KEY BLAND = <FS_GRAVAR>-BLAND.
          <FS_GRAVAR>-NM_SEQUENCIA = WA_UFS_ALV-NM_SEQUENCIA.
        ENDIF.
      ENDLOOP.
    ELSE.
      CLEAR: WA_UFS_INTERMEDIARIOS.
      WA_UFS_INTERMEDIARIOS-BLAND          = WA_UFS_ALV-BLAND.
      WA_UFS_INTERMEDIARIOS-CD_CID_ORIGEM  = ZDE_INFO_FRETE_PEDAGIO-CD_CID_ORIGEM.
      WA_UFS_INTERMEDIARIOS-CD_CID_DESTINO = ZDE_INFO_FRETE_PEDAGIO-CD_CID_DESTINO.
      WA_UFS_INTERMEDIARIOS-ID_CARGA       = LC_APRESENTACAO_9011-CARGA-ID_CARGA.
      WA_UFS_INTERMEDIARIOS-LAND1          = 'BR'.
      WA_UFS_INTERMEDIARIOS-ROUTE          = ZDE_INFO_FRETE-ROUTE.
      WA_UFS_INTERMEDIARIOS-NM_SEQUENCIA   = WA_UFS_ALV-NM_SEQUENCIA.
      APPEND WA_UFS_INTERMEDIARIOS TO IT_UFS_INTERMEDIARIOS.
    ENDIF.

    CK_ALTEROU_ITINERARIO = ABAP_TRUE.

    CTL_ALV_9011->REFRESH_TABLE_DISPLAY( I_SOFT_REFRESH = ABAP_TRUE ).

  ENDMETHOD.

ENDCLASS.                    "lcl_event_receiver DEFINITION
*&---------------------------------------------------------------------*
*&      Module  STATUS_9011  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_9011 OUTPUT.

  DATA: IT_TUCOMM_9011 TYPE TABLE OF SY-UCOMM.

  IF ( EDITOR_9011 IS INITIAL ).

    TRY .
        OBJETO->GET_CK_EXCLUIR_ROMANEIO_SAIDA( ).
        LC_CK_SAIDA_EMITIDA = ABAP_FALSE.
      CATCH ZCX_CARGA.    "
        LC_CK_SAIDA_EMITIDA = ABAP_TRUE.
    ENDTRY.

    TRY .
        OBJETO->GET_CK_DOC_TRANSPORTE_EXISTE( ).
        LC_CK_DOC_TRA_EMITIDO = ABAP_TRUE.
      CATCH ZCX_CARGA.    "
        LC_CK_DOC_TRA_EMITIDO = ABAP_FALSE.
    ENDTRY.

    TRY .
        OBJETO->GET_INFO_ALV_APRESENTACAO(
          IMPORTING
            E_APRESENTACAO = LC_APRESENTACAO_9011 ).

      CATCH ZCX_ORDEM_CARREGAMENTO INTO EX_ORDEM.    "
        EX_ORDEM->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
        EXIT.
      CATCH ZCX_CARGA INTO EX_CARGA.    "
        EX_CARGA->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
        EXIT.
    ENDTRY.

    CLEAR: IT_TUCOMM_9011[].

    IF LC_CK_DOC_TRA_EMITIDO EQ ABAP_TRUE.
      APPEND 'VERIFICAR' TO IT_TUCOMM_9011.
      APPEND 'CONFIRMAR' TO IT_TUCOMM_9011.
    ENDIF.

    SET PF-STATUS 'PF9011' EXCLUDING IT_TUCOMM_9011.
    SET TITLEBAR 'TL9011'.

    CLEAR ZDE_INFO_FRETE_PEDAGIO.

    PERFORM AJUSTA_TELA_PEDAGIO_INICIAL.

    CREATE OBJECT CONTAINER_9011
      EXPORTING
        CONTAINER_NAME              = 'LONGTEXT'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        OTHERS                      = 6.

    CHECK SY-SUBRC IS INITIAL.

    CREATE OBJECT EDITOR_9011
      EXPORTING
        PARENT                 = CONTAINER_9011
        WORDWRAP_MODE          = '2'
        WORDWRAP_POSITION      = '72'
      EXCEPTIONS
        ERROR_CNTL_CREATE      = 1
        ERROR_CNTL_INIT        = 2
        ERROR_CNTL_LINK        = 3
        ERROR_DP_CREATE        = 4
        GUI_TYPE_NOT_SUPPORTED = 5
        OTHERS                 = 6.

    CHECK SY-SUBRC IS INITIAL.

    CONCATENATE SY-MANDT ZDE_ZSDT0001CG_ALV-ID_CARGA INTO LC_NAME_9011.
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        ID                      = 'ZFAT'
        LANGUAGE                = SY-LANGU
        NAME                    = LC_NAME_9011
        OBJECT                  = 'ZROMSAIDA'
      TABLES
        LINES                   = IT_LINES_ZFAT
      EXCEPTIONS
        ID                      = 1
        LANGUAGE                = 2
        NAME                    = 3
        NOT_FOUND               = 4
        OBJECT                  = 5
        REFERENCE_CHECK         = 6
        WRONG_ACCESS_TO_ARCHIVE = 7
        OTHERS                  = 8.

    IF SY-SUBRC IS INITIAL.
      LOOP AT IT_LINES_ZFAT INTO DATA(WA_LINES_ZFAT).
        APPEND WA_LINES_ZFAT-TDLINE TO LONGTEXT_TAB.
      ENDLOOP.

      CALL METHOD EDITOR_9011->SET_TEXT_AS_R3TABLE
        EXPORTING
          TABLE           = LONGTEXT_TAB
        EXCEPTIONS
          ERROR_DP        = 1
          ERROR_DP_CREATE = 2
          OTHERS          = 3.
    ENDIF.

    CALL METHOD EDITOR_9011->SET_READONLY_MODE
      EXPORTING
        READONLY_MODE = CONV #( COND STRING( WHEN LC_CK_SAIDA_EMITIDA EQ ABAP_TRUE THEN EDITOR_9011->TRUE ELSE EDITOR_9011->FALSE ) ).

    "Criar ALV """"""""""""""""""""""""""""""""""""""""""""""

    CREATE OBJECT CTL_CONTAINER_9011
      EXPORTING
        CONTAINER_NAME = 'ALV_UFS'.

    PERFORM FILL_IT_FIELDCATALOG_9011.

    "Hints
    PERFORM FILL_IT_HINTS_9011.

*   Fill info for layout variant
    PERFORM FILL_GS_VARIANT_9011.

    CREATE OBJECT CTL_ALV_9011
      EXPORTING
        I_PARENT          = CTL_CONTAINER_9011
      EXCEPTIONS
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        OTHERS            = 5.
    IF SY-SUBRC IS NOT INITIAL.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

    GS_LAYOUT_9011-SEL_MODE   = 'A'.

    GS_LAYOUT_9011-INFO_FNAME = 'LINE_COLOR'.
    GS_LAYOUT_9011-STYLEFNAME = 'STYLE'.
    GS_LAYOUT_9011-CTAB_FNAME = 'COLOR_CELL'.
    GS_LAYOUT_9011-ZEBRA      = ABAP_FALSE.
    GS_LAYOUT_9011-NO_TOOLBAR = ABAP_TRUE.
    GS_LAYOUT_9011-NO_ROWMARK = ABAP_TRUE.
    GS_LAYOUT_9011-NO_HEADERS = ABAP_TRUE.
    GS_LAYOUT_9011-EDIT_MODE  = COND STRING( WHEN LC_CK_DOC_TRA_EMITIDO EQ ABAP_FALSE THEN ABAP_TRUE ELSE ABAP_FALSE ).
    GS_LAYOUT_9011-GRID_TITLE = TEXT-038.

    CALL METHOD CTL_ALV_9011->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = GS_LAYOUT_9011
        IS_VARIANT      = GS_VARIANT_9011
        I_SAVE          = 'A'
      CHANGING
        IT_FIELDCATALOG = IT_FIELDCATALOG_9011
        IT_OUTTAB       = IT_UFS_ALV[].

    CALL METHOD CTL_ALV_9011->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.

    CALL METHOD CTL_ALV_9011->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

    CREATE OBJECT EVENT_HANDLER_9011.
    SET HANDLER EVENT_HANDLER_9011->DATA_CHANGED_FINISHED FOR CTL_ALV_9011.
    SET HANDLER EVENT_HANDLER_9011->DATA_CHANGED          FOR CTL_ALV_9011.
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""

  ENDIF.

  IF LC_LIMPAR_CK_PEDAGIO = ABAP_TRUE.
    CLEAR: ZDE_INFO_FRETE_PEDAGIO-CK_CREDITA_PED.
  ENDIF.
  LC_LIMPAR_CK_PEDAGIO = ABAP_FALSE.

  PERFORM AJUSTA_TELA_PEDAGIO.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9011_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9011_EXIT INPUT.
  CASE OK_CODE.
    WHEN 'CARD_PED'.
      CLEAR: OK_CODE.
      PERFORM INFORMA_CARTAO_PEDAGIO.

    WHEN 'CLEAR'.
      CLEAR: OK_CODE.
      LC_LIMPAR_CK_PEDAGIO = ABAP_TRUE.
      LEAVE TO SCREEN 9011.
    WHEN OTHERS.
      CK_VALIDACAO_SAIDA_AUTOM = ABAP_FALSE.
      PERFORM SAIR_9011.
  ENDCASE.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9011  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9011 INPUT.

  DATA: WL_HEADER TYPE THEAD.

  CASE OK_CODE.
    WHEN 'CONFIRMAR'.

      CHECK CK_ALTEROU_PEDAGIO    EQ ABAP_FALSE.
      CHECK CK_ALTEROU_ITINERARIO EQ ABAP_FALSE.

      IF CK_ERRO_FRETE_9011 EQ ABAP_TRUE.
        TRY .
            ZCL_CARGA_RECEBIMENTO=>ZIF_CARGA~GERA_ERRO_GERAL( I_TEXTO = LC_MSG_ERRO ).
          CATCH ZCX_CARGA INTO EX_CARGA.    "
            EX_CARGA->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'I' I_MSGTY_DISPLAY = 'E' ).
        ENDTRY.
        EXIT.
      ENDIF.

      IF CK_ERRO_PEDAGIO_9011 EQ ABAP_TRUE.
        TRY .
            ZCL_CARGA_RECEBIMENTO=>ZIF_CARGA~GERA_ERRO_GERAL( I_TEXTO = LC_MSG_ERRO_PEDAGIO ).
          CATCH ZCX_CARGA INTO EX_CARGA.    "
            EX_CARGA->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'I' I_MSGTY_DISPLAY = 'E' ).
        ENDTRY.
        EXIT.
      ENDIF.

      IF ZDE_INFO_FRETE_PEDAGIO-CK_TEM_PEDAGIO EQ ABAP_TRUE.

        IF CK_PED_REPOM_ELETRONICO EQ ABAP_TRUE AND
           ZDE_INFO_FRETE_PEDAGIO-NR_CARTAO_PED_REPOM IS INITIAL AND
           ZDE_INFO_FRETE_PEDAGIO-CK_CREDITA_PED EQ ABAP_TRUE.
          "233  Deve ser informado o Cartão de Pedágio da REPOM!
          MESSAGE I233 DISPLAY LIKE 'E'.
          EXIT.
        ENDIF.

        IF CK_PED_TIPFR_ELETRONICO EQ ABAP_TRUE.
          "234  Deve ser informado o Cartão de Pedágio da TipFrete!
          MESSAGE I234 DISPLAY LIKE 'E'.
          EXIT.
        ENDIF.

      ENDIF.

      CALL METHOD EDITOR_9011->GET_TEXT_AS_R3TABLE
        IMPORTING
          TABLE           = LONGTEXT_TAB
        EXCEPTIONS
          ERROR_DP        = 1
          ERROR_DP_CREATE = 2
          OTHERS          = 3.

      DESCRIBE TABLE LONGTEXT_TAB LINES DATA(LC_QTD_LINHAS).

      IF LC_QTD_LINHAS GT 0.

        CLEAR: IT_LINES_ZFAT[].
        LOOP AT LONGTEXT_TAB INTO DATA(WA_LINE).
          IT_LINES_ZFAT-TDLINE = WA_LINE.
          APPEND IT_LINES_ZFAT.
        ENDLOOP.

        WL_HEADER-TDOBJECT = 'ZROMSAIDA'.
        WL_HEADER-TDID     = 'ZFAT'.
        WL_HEADER-TDSPRAS  = SY-LANGU.
        CONCATENATE SY-MANDT ZDE_ZSDT0001CG_ALV-ID_CARGA INTO WL_HEADER-TDNAME.

        CALL FUNCTION 'SAVE_TEXT'
          EXPORTING
            HEADER          = WL_HEADER
            SAVEMODE_DIRECT = ABAP_TRUE
          TABLES
            LINES           = IT_LINES_ZFAT
          EXCEPTIONS
            ID              = 1
            LANGUAGE        = 2
            NAME            = 3
            OBJECT          = 4
            OTHERS          = 5.

        IF SY-SUBRC IS NOT INITIAL.
          MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 DISPLAY LIKE 'E'.
          EXIT.
        ENDIF.

      ELSE.

        WL_HEADER-TDOBJECT = 'ZROMSAIDA'.
        WL_HEADER-TDID     = 'ZFAT'.
        WL_HEADER-TDSPRAS  = SY-LANGU.
        CONCATENATE SY-MANDT ZDE_ZSDT0001CG_ALV-ID_CARGA INTO WL_HEADER-TDNAME.

        CALL FUNCTION 'DELETE_TEXT'
          EXPORTING
            ID        = WL_HEADER-TDID
            LANGUAGE  = WL_HEADER-TDSPRAS
            NAME      = WL_HEADER-TDNAME
            OBJECT    = WL_HEADER-TDOBJECT
          EXCEPTIONS
            NOT_FOUND = 1
            OTHERS    = 2.

      ENDIF.

      TRY .
          OBJETO->GET_CK_EXCLUIR_ROMANEIO_SAIDA( ).
        CATCH ZCX_CARGA INTO EX_CARGA.    "
          EX_CARGA->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
          EXIT.
      ENDTRY.

      TRY .
          OBJETO->GET_CK_DOC_TRANSPORTE_EXISTE( ).
          MESSAGE S253 WITH ZDE_ZSDT0001CG_ALV-ID_CARGA DISPLAY LIKE 'E'.
          EXIT.
        CATCH ZCX_CARGA.
      ENDTRY.

      CLEAR: ZSDT0001FT.
      MOVE-CORRESPONDING ZDE_INFO_FRETE TO ZSDT0001FT.
      MOVE-CORRESPONDING ZDE_INFO_FRETE_PEDAGIO TO ZSDT0001FT.
      MOVE-CORRESPONDING ZDE_INFO_FRETE_FRETE TO ZSDT0001FT.
      ZSDT0001FT-ID_CARGA = LC_APRESENTACAO_9011-CARGA-ID_CARGA.

      DELETE IT_UFS_INTERMEDIARIOS WHERE NM_SEQUENCIA IS INITIAL.
      IF IT_UFS_INTERMEDIARIOS[] IS NOT INITIAL.
        READ TABLE IT_UFS_INTERMEDIARIOS WITH KEY ID_CARGA = LC_APRESENTACAO_9011-CARGA-ID_CARGA TRANSPORTING NO FIELDS.
        IF SY-SUBRC IS NOT INITIAL.
          READ TABLE IT_UFS_INTERMEDIARIOS INTO WA_UFS_INTERMEDIARIOS INDEX 1.
          ZSDT0001FT-ID_CARGA_MODEL = WA_UFS_INTERMEDIARIOS-ID_CARGA.
          CLEAR IT_UFS_INTERMEDIARIOS[].
        ELSE.
          SORT IT_UFS_INTERMEDIARIOS BY NM_SEQUENCIA ASCENDING.
          DATA(LC_SEQUENCIA) = 1.
          LOOP AT IT_UFS_INTERMEDIARIOS ASSIGNING FIELD-SYMBOL(<FS_UFS>).
            <FS_UFS>-CD_CID_DESTINO = ZSDT0001FT-CD_CID_DESTINO.
            <FS_UFS>-CD_CID_ORIGEM  = ZSDT0001FT-CD_CID_ORIGEM.
            <FS_UFS>-ROUTE          = ZSDT0001FT-ROUTE.
            <FS_UFS>-ID_CARGA       = LC_APRESENTACAO_9011-CARGA-ID_CARGA.
            <FS_UFS>-NM_SEQUENCIA   = LC_SEQUENCIA.
            ADD 1 TO LC_SEQUENCIA.
          ENDLOOP.
          DELETE FROM ZSDT0001FTUFS WHERE ID_CARGA = LC_APRESENTACAO_9011-CARGA-ID_CARGA.
          ZSDT0001FT-ID_CARGA_MODEL = LC_APRESENTACAO_9011-CARGA-ID_CARGA.
        ENDIF.
      ENDIF.
      MODIFY ZSDT0001FT.
      IF IT_UFS_INTERMEDIARIOS[] IS NOT INITIAL.
        MODIFY ZSDT0001FTUFS FROM TABLE IT_UFS_INTERMEDIARIOS[].
      ENDIF.

      CK_VALIDACAO_SAIDA_AUTOM = ABAP_TRUE.

      PERFORM SAIR_9011.

  ENDCASE.

ENDMODULE.


*&---------------------------------------------------------------------*
*&      Form  SAIR_9011
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SAIR_9011 .

  CLEAR: EVENT_HANDLER_9011.

  IF CTL_ALV_9011 IS NOT INITIAL.
    CTL_ALV_9011->FREE( ).
  ENDIF.
  CLEAR: CTL_ALV_9011.

  IF CTL_CONTAINER_9011 IS NOT INITIAL.
    CTL_CONTAINER_9011->FREE( ).
  ENDIF.
  CLEAR: CTL_CONTAINER_9011.

  IF EDITOR_9011 IS NOT INITIAL.
    EDITOR_9011->FREE( ).
  ENDIF.
  CLEAR: EDITOR_9011.

  IF CONTAINER_9011 IS NOT INITIAL.
    CONTAINER_9011->FREE( ).
  ENDIF.
  CLEAR: CONTAINER_9011.

  CLEAR: IT_LINES_ZFAT[],
         IT_LINES_ZFAT,
         LONGTEXT_TAB[],
         LONGTEXT_TAB,
         ZSDT0001FT,
         ZDE_INFO_FRETE_PEDAGIO,
         ZDE_INFO_FRETE,
         ZSDT0001FT,
         IT_UFS_ALV[],
         IT_UFS_ALV.

  LEAVE TO SCREEN 0.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  AJUSTA_TELA_PEDAGIO_INICIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM AJUSTA_TELA_PEDAGIO_INICIAL .

  LC_TEM_MARGEM_ADIANT = ABAP_FALSE.
  LC_TEM_MARGEM_ZERO   = ABAP_FALSE.
  CK_ERRO_FRETE_9011   = ABAP_FALSE.
  CK_ALTEROU_PEDAGIO   = ABAP_FALSE.

  CLEAR: LC_MSG_ERRO.

  CLEAR: ZDE_INFO_FRETE.
  ZDE_INFO_FRETE-ID_LOCAL_COLETA   = LC_APRESENTACAO_9011-CARGA-ID_LOCAL_COLETA.
  ZDE_INFO_FRETE-DS_LOCAL_COLETA   = LC_APRESENTACAO_9011-CARGA-DS_LOCAL_COLETA.
  ZDE_INFO_FRETE-ID_LOCAL_DESCARGA = LC_APRESENTACAO_9011-CARGA-ID_LOCAL_DESCARGA.
  ZDE_INFO_FRETE-DS_LOCAL_DESCARGA = LC_APRESENTACAO_9011-CARGA-DS_LOCAL_DESCARGA.
  ZDE_INFO_FRETE-DS_PLACA_TRATOR   = LC_APRESENTACAO_9011-CARGA-DS_PLACA_TRATOR.
  ZDE_INFO_FRETE-ID_PROPRIETARIO   = LC_APRESENTACAO_9011-CARGA-ID_PROPRIETARIO.
  ZDE_INFO_FRETE-DS_PROPRIETARIO   = LC_APRESENTACAO_9011-CARGA-DS_PROPRIETARIO.
  ZDE_INFO_FRETE-DS_PLACA_REBOQ_1  = LC_APRESENTACAO_9011-CARGA-DS_PLACA_REBOQ_1.
  ZDE_INFO_FRETE-DS_PLACA_REBOQ_2  = LC_APRESENTACAO_9011-CARGA-DS_PLACA_REBOQ_2.
  ZDE_INFO_FRETE-DS_PLACA_REBOQ_3  = LC_APRESENTACAO_9011-CARGA-DS_PLACA_REBOQ_3.
  ZDE_INFO_FRETE-ID_MOTORISTA      = LC_APRESENTACAO_9011-CARGA-ID_MOTORISTA.
  ZDE_INFO_FRETE-DS_MOTORISTA      = LC_APRESENTACAO_9011-CARGA-DS_MOTORISTA.
  ZDE_INFO_FRETE-ID_BUKRS          = LC_APRESENTACAO_9011-CARGA-ID_BUKRS.
  ZDE_INFO_FRETE-ID_BRANCH         = LC_APRESENTACAO_9011-CARGA-ID_BRANCH.

  IF LC_CK_DOC_TRA_EMITIDO EQ ABAP_FALSE.
    SELECT SINGLE * INTO @DATA(WA_J_1BBRANCH)
      FROM J_1BBRANCH
     WHERE BRANCH EQ @LC_APRESENTACAO_9011-CARGA-ID_AGENT_FRETE+6(4).

    IF SY-SUBRC IS INITIAL.
      ZDE_INFO_FRETE-AG_BUKRS  = WA_J_1BBRANCH-BUKRS.
      ZDE_INFO_FRETE-AG_BRANCH = WA_J_1BBRANCH-BRANCH.
    ENDIF.

    READ TABLE LC_APRESENTACAO_9011-ORDEM_VENDA INDEX 1 INTO DATA(WA_ORDEM_VENDA).
    IF SY-SUBRC IS INITIAL.

      CLEAR: RPLACA[], RPLACA.
      WPLACA-SIGN   = 'I'.
      WPLACA-OPTION = 'EQ'.

      IF LC_APRESENTACAO_9011-CARGA-DS_PLACA_TRATOR IS NOT INITIAL.
        WPLACA-LOW  = LC_APRESENTACAO_9011-CARGA-DS_PLACA_TRATOR.
        WPLACA-HIGH = LC_APRESENTACAO_9011-CARGA-DS_PLACA_TRATOR.
        APPEND WPLACA TO RPLACA.
      ENDIF.

      IF LC_APRESENTACAO_9011-CARGA-DS_PLACA_REBOQ_1 IS NOT INITIAL.
        WPLACA-LOW  = LC_APRESENTACAO_9011-CARGA-DS_PLACA_REBOQ_1.
        WPLACA-HIGH = LC_APRESENTACAO_9011-CARGA-DS_PLACA_REBOQ_1.
        APPEND WPLACA TO RPLACA.
      ENDIF.

      IF LC_APRESENTACAO_9011-CARGA-DS_PLACA_REBOQ_2 IS NOT INITIAL.
        WPLACA-LOW  = LC_APRESENTACAO_9011-CARGA-DS_PLACA_REBOQ_2.
        WPLACA-HIGH = LC_APRESENTACAO_9011-CARGA-DS_PLACA_REBOQ_2.
        APPEND WPLACA TO RPLACA.
      ENDIF.

      IF LC_APRESENTACAO_9011-CARGA-DS_PLACA_REBOQ_3 IS NOT INITIAL.
        WPLACA-LOW  = LC_APRESENTACAO_9011-CARGA-DS_PLACA_REBOQ_3.
        WPLACA-HIGH = LC_APRESENTACAO_9011-CARGA-DS_PLACA_REBOQ_3.
        APPEND WPLACA TO RPLACA.
      ENDIF.

      IF RPLACA[] IS NOT INITIAL.
        SELECT * INTO TABLE @DATA(IT_ZLEST0002)
          FROM ZLEST0002
         WHERE PC_VEICULO IN @RPLACA.
      ENDIF.

      SELECT SINGLE * INTO @DATA(WA_VBAP)
        FROM VBAP
       WHERE VBELN EQ @WA_ORDEM_VENDA-NR_ORDEM_VENDA.

      IF SY-SUBRC IS INITIAL.

        ZDE_INFO_FRETE-ROUTE = WA_VBAP-ROUTE.

        " >>> Valor de Frete """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        " >>> Valor de Frete """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

        SELECT SINGLE * INTO @DATA(WA_VBAK)
          FROM VBAK
         WHERE VBELN EQ @WA_ORDEM_VENDA-NR_ORDEM_VENDA.

        SELECT SINGLE * INTO @DATA(WA_ZSDT0011)
          FROM ZSDT0011
         WHERE TP_MOVIMENTO EQ 'S'
           AND AUART        EQ @WA_VBAK-AUART.

        IF SY-SUBRC IS INITIAL.
          ZDE_INFO_FRETE_FRETE-SHTYP = WA_ZSDT0011-SHTYP.
        ENDIF.

        IF ( 'ZRDC_ZRFL' CS WA_ZSDT0011-AUART ) AND ( WA_ZSDT0011-AUART IS NOT INITIAL ).
          SELECT * INTO TABLE @DATA(IT_VBPA)
            FROM VBPA
           WHERE VBELN EQ @WA_ORDEM_VENDA-NR_ORDEM_VENDA
             AND PARVW IN ('LR','Z1').

          IF SY-SUBRC IS INITIAL.

            READ TABLE IT_VBPA INTO DATA(WA_VBPA) WITH KEY PARVW = 'LR'.
            IF SY-SUBRC IS INITIAL.
              SELECT SINGLE * INTO @DATA(WA_KNA1_LR)
                FROM KNA1
               WHERE KUNNR EQ @WA_VBPA-KUNNR.
            ENDIF.

            READ TABLE IT_VBPA INTO WA_VBPA WITH KEY PARVW = 'Z1'.
            IF SY-SUBRC IS INITIAL.
              SELECT SINGLE * INTO @DATA(WA_LFA1_LR)
                FROM LFA1
               WHERE LIFNR EQ @WA_VBPA-LIFNR.
            ENDIF.

            IF WA_KNA1_LR-STCD1 NE WA_LFA1_LR-STCD1.
              ZDE_INFO_FRETE_FRETE-SHTYP = 'Z001'.
            ELSE.
              ZDE_INFO_FRETE_FRETE-SHTYP = 'Z004'.
            ENDIF.
          ENDIF.
        ENDIF.

        SELECT SINGLE LZONE INTO @ZDE_INFO_FRETE_FRETE-LZONEA
          FROM LFA1
         WHERE LIFNR EQ @ZDE_INFO_FRETE-ID_LOCAL_COLETA.

        SELECT SINGLE LZONE INTO @ZDE_INFO_FRETE_FRETE-LZONEZ
          FROM KNA1
         WHERE KUNNR EQ @ZDE_INFO_FRETE-ID_LOCAL_DESCARGA.

        "Agregado
        READ TABLE IT_ZLEST0002 INTO DATA(WA_ZLEST0002) WITH KEY PC_VEICULO = LC_APRESENTACAO_9011-CARGA-DS_PLACA_TRATOR.
        IF SY-SUBRC = 0.
          IF WA_ZLEST0002-AGREGADO = 1.
            ZDE_INFO_FRETE_FRETE-ADD01 = '0000000001'.
          ELSE.
            ZDE_INFO_FRETE_FRETE-ADD01 = '0000000002'.
          ENDIF.
        ENDIF.

        ZDE_INFO_FRETE_FRETE-TP_ADMIM_FRETE = '09'.
        ZDE_INFO_FRETE_FRETE-MATNR          = LC_APRESENTACAO_9011-CARGA-ID_PRODUTO.
        ZDE_INFO_FRETE_FRETE-ID_AGENT_FRETE = LC_APRESENTACAO_9011-CARGA-ID_AGENT_FRETE.

        TRY .
            ZCL_CALC_FRETE=>GET_VALOR_FRETE(
              EXPORTING
                I_ROUTE        = ZDE_INFO_FRETE-ROUTE           " Itinerário
                I_TDLNR        = ZDE_INFO_FRETE_FRETE-ID_AGENT_FRETE " Nº do agente de frete
                I_SHTYP        = ZDE_INFO_FRETE_FRETE-SHTYP     " Tipo de transporte
                I_LZONEA       = ZDE_INFO_FRETE_FRETE-LZONEA    " Zona de partida
                I_LZONEZ       = ZDE_INFO_FRETE_FRETE-LZONEZ    " Zona de chegada
                I_ADD01        = ZDE_INFO_FRETE_FRETE-ADD01     " Suplem.1
                I_MATNR        = ZDE_INFO_FRETE_FRETE-MATNR     " Nº do material
                I_ORDEM_VENDA  = WA_ORDEM_VENDA-NR_ORDEM_VENDA  " Nº documento de vendas e distribuição
                I_PLACA_TRATOR = ZDE_INFO_FRETE-DS_PLACA_TRATOR " Placa Veículo Tração
              IMPORTING
                E_KBETR        = ZDE_INFO_FRETE_FRETE-KBETR " Montante/porcentagem de condição no caso de não haver escala
                E_KONWA        = ZDE_INFO_FRETE_FRETE-KONWA " Unidade de condição (moeda ou porcentagem)
                E_KRECH        = ZDE_INFO_FRETE_FRETE-KRECH " Regra de cálculo de condição
            ).
          CATCH ZCX_CALC_FRETE INTO DATA(EX_CALC_FRETE).    "
            EX_CALC_FRETE->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'S' ).
            CK_ERRO_FRETE_9011 = ABAP_TRUE.
            MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO LC_MSG_ERRO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDTRY.

        TRY .
            DATA(R_MARGADTO) =
            ZCL_CALC_FRETE=>GET_VALOR_ADIANTAMENTO(
              I_BUKRS  = LC_APRESENTACAO_9011-CARGA-ID_BUKRS
              I_BRANCH = LC_APRESENTACAO_9011-CARGA-ID_BRANCH
              I_LIFNR  = LC_APRESENTACAO_9011-CARGA-ID_PROPRIETARIO ).

            ZDE_INFO_FRETE_FRETE-VL_MARGADTO = R_MARGADTO.

            LC_TEM_MARGEM_ADIANT             = ABAP_TRUE.

            ZDE_INFO_FRETE_FRETE-VL_FRETE = ( LC_APRESENTACAO_9011-CARGA-NM_PESO_SUBTOTAL / 1000 ) * ZDE_INFO_FRETE_FRETE-KBETR.
            IF R_MARGADTO IS INITIAL.
              LC_TEM_MARGEM_ZERO = ABAP_TRUE.
              ZDE_INFO_FRETE_FRETE-VL_ADIANTAMENTO = 0.
            ELSE.
              ZDE_INFO_FRETE_FRETE-VL_ADIANTAMENTO = ZDE_INFO_FRETE_FRETE-VL_FRETE * ( ZDE_INFO_FRETE_FRETE-VL_MARGADTO / 100 ).
            ENDIF.

          CATCH ZCX_CALC_FRETE INTO EX_CALC_FRETE.
            EX_CALC_FRETE->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'S' ).
            CK_ERRO_FRETE_9011 = ABAP_TRUE.
            MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO LC_MSG_ERRO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDTRY.

        " Origem e Destino """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        SELECT SINGLE TXJCD INTO ZDE_INFO_FRETE_PEDAGIO-CD_CID_ORIGEM
          FROM LFA1
         WHERE LIFNR EQ LC_APRESENTACAO_9011-CARGA-ID_LOCAL_COLETA.

        SELECT SINGLE TXJCD INTO ZDE_INFO_FRETE_PEDAGIO-CD_CID_DESTINO
          FROM KNA1
         WHERE KUNNR EQ LC_APRESENTACAO_9011-CARGA-ID_LOCAL_DESCARGA.
        """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

        " >>> Pedágio """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        " >>> Pedágio """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

        SELECT SINGLE * INTO @DATA(WA_ZLEST0027)
          FROM ZLEST0027
         WHERE ROUTE EQ @WA_VBAP-ROUTE.

        IF SY-SUBRC IS NOT INITIAL.
          CK_ERRO_FRETE_9011 = ABAP_TRUE.
          MESSAGE S092(ZLES) INTO LC_MSG_ERRO.
        ELSE.
          ZDE_INFO_FRETE_PEDAGIO-CK_TEM_PEDAGIO = WA_ZLEST0027-CK_PEDAGIO.
          ZDE_INFO_FRETE_PEDAGIO-CK_CREDITA_PED = WA_ZLEST0027-CK_PEDAGIO.
        ENDIF.

        CASE ZDE_INFO_FRETE_PEDAGIO-CK_TEM_PEDAGIO.
          WHEN ABAP_TRUE.

            CK_ALTEROU_PEDAGIO = ABAP_TRUE.

            ZDE_INFO_FRETE_PEDAGIO-DT_VALOR_PED = LC_APRESENTACAO_9011-CARGA-DT_MOVIMENTO.

            SELECT * INTO TABLE @DATA(IT_ZLEST0090)
              FROM ZLEST0090
             WHERE WERKS      EQ @LC_APRESENTACAO_9011-CARGA-ID_BRANCH
               AND TP_SERVICO EQ '1'.

            IF SY-SUBRC IS INITIAL.
              "DESCRIBE TABLE IT_ZLEST0090 LINES LC_QTD_LINHAS_PED.
              READ TABLE IT_ZLEST0090 INTO DATA(WA_ZLEST0090) WITH KEY CK_DEFAULT = ABAP_TRUE.
              IF SY-SUBRC IS INITIAL.
                ZDE_INFO_FRETE_PEDAGIO-TP_ADMIM_PED = WA_ZLEST0090-TP_ADM.
              ELSE.
                READ TABLE IT_ZLEST0090 INTO WA_ZLEST0090 INDEX 1.
                ZDE_INFO_FRETE_PEDAGIO-TP_ADMIM_PED = WA_ZLEST0090-TP_ADM.
              ENDIF.
            ENDIF.

            ZDE_INFO_FRETE_PEDAGIO-NM_QTD_EIXOS = 0.
            LOOP AT IT_ZLEST0002 INTO WA_ZLEST0002.
              ZDE_INFO_FRETE_PEDAGIO-NM_QTD_EIXOS = ZDE_INFO_FRETE_PEDAGIO-NM_QTD_EIXOS + WA_ZLEST0002-QT_EIXO.
            ENDLOOP.

          WHEN ABAP_FALSE.

        ENDCASE.
      ENDIF.
    ENDIF.

    "Recupera Frete/Pedágio
    CK_ALTEROU_ITINERARIO = ABAP_TRUE.

    CLEAR: IT_UFS_INTERMEDIARIOS[], IT_UFS_INTERMEDIARIOS.

    PERFORM RECUPERA_UFS_INTERMEDIARIAS USING ZDE_INFO_FRETE-ROUTE ZDE_INFO_FRETE_PEDAGIO-CD_CID_ORIGEM ZDE_INFO_FRETE_PEDAGIO-CD_CID_DESTINO
      CHANGING IT_UFS_INTERMEDIARIOS
               ZSDT0001FT-ID_CARGA_MODEL.
  ELSE.

    SELECT SINGLE * INTO @DATA(WA_ZSDT0001FT)
      FROM ZSDT0001FT
     WHERE ID_CARGA EQ @LC_APRESENTACAO_9011-CARGA-ID_CARGA.

    CHECK SY-SUBRC IS INITIAL.

    MOVE-CORRESPONDING WA_ZSDT0001FT TO ZDE_INFO_FRETE_PEDAGIO.
    MOVE-CORRESPONDING WA_ZSDT0001FT TO ZDE_INFO_FRETE_FRETE.
    MOVE-CORRESPONDING WA_ZSDT0001FT TO ZDE_INFO_FRETE.
    MOVE-CORRESPONDING WA_ZSDT0001FT TO ZSDT0001FT.

    IF WA_ZSDT0001FT-ID_CARGA_MODEL IS NOT INITIAL.
      PERFORM RECUPERA_UFS_INTERMEDIARIAS USING ZDE_INFO_FRETE-ROUTE ZDE_INFO_FRETE_PEDAGIO-CD_CID_ORIGEM ZDE_INFO_FRETE_PEDAGIO-CD_CID_DESTINO
        CHANGING IT_UFS_INTERMEDIARIOS
                 WA_ZSDT0001FT-ID_CARGA_MODEL.
    ENDIF.

  ENDIF.

  CK_ALTEROU_PEDAGIO = ABAP_FALSE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  AJUSTA_TELA_PEDAGIO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM AJUSTA_TELA_PEDAGIO .

  IF LC_CK_DOC_TRA_EMITIDO EQ ABAP_TRUE.
    LOOP AT SCREEN.
      IF SCREEN-INPUT = '1'.
        SCREEN-INPUT = '0'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ELSE.

    " >>> Valor de Frete """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " >>> Valor de Frete """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    CASE LC_TEM_MARGEM_ADIANT.
      WHEN ABAP_TRUE.

        CASE LC_TEM_MARGEM_ZERO.
          WHEN ABAP_TRUE.
            "Bloquear todos os campo de entrada de adiantamento!
            "F1 - Campos Para Alteração de Adiantamento - Todos os campos
            LOOP AT SCREEN.
              IF SCREEN-GROUP1 = 'F1'.
                SCREEN-INPUT = '0'.
                MODIFY SCREEN.
              ENDIF.
            ENDLOOP.
          WHEN ABAP_FALSE.

            "Bloquear todos os campo de entrada de adiantamento!
            "F2 - Campos Para Alteração de Adiantamento - Campos Editáveis
            LOOP AT SCREEN.
              IF SCREEN-GROUP2 = 'F2'.
                SCREEN-INPUT = '1'.
                MODIFY SCREEN.
              ENDIF.
            ENDLOOP.
        ENDCASE.

      WHEN ABAP_FALSE.
        "Bloquear todos os campo de entrada de adiantamento!
        "F1 - Campos Para Alteração de Adiantamento - Todos os campos
        LOOP AT SCREEN.
          IF SCREEN-GROUP1 = 'F1'.
            SCREEN-INPUT = '0'.
            MODIFY SCREEN.
          ENDIF.
        ENDLOOP.
    ENDCASE.

  ENDIF.


  " >>> Pedágio """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  " >>> Pedágio """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  DATA: LC_INFORMADO  TYPE CHAR01,
        LC_PERCURSO   TYPE ZLEST0122,
        REPOM_ROTEIRO TYPE REF TO ZCL_REPOM_ROTEIRO_VLR_VPR.

  CK_ERRO_PEDAGIO_9011 = ABAP_FALSE.
  CLEAR: LC_MSG_ERRO_PEDAGIO.

  CLEAR: LC_TX_CID_ORIGEM.
  IF ZDE_INFO_FRETE_PEDAGIO-CD_CID_ORIGEM IS NOT INITIAL.
    SELECT SINGLE TEXT INTO LC_TX_CID_ORIGEM
      FROM J_1BTXJURT
     WHERE SPRAS      EQ SY-LANGU
       AND COUNTRY    EQ 'BR'
       AND TAXJURCODE EQ ZDE_INFO_FRETE_PEDAGIO-CD_CID_ORIGEM.
  ENDIF.

  CLEAR: LC_TX_CID_DESTINO.
  IF ZDE_INFO_FRETE_PEDAGIO-CD_CID_DESTINO IS NOT INITIAL.
    SELECT SINGLE TEXT INTO LC_TX_CID_DESTINO
      FROM J_1BTXJURT
     WHERE SPRAS      EQ SY-LANGU
       AND COUNTRY    EQ 'BR'
       AND TAXJURCODE EQ ZDE_INFO_FRETE_PEDAGIO-CD_CID_DESTINO.
  ENDIF.

  IF LC_CK_DOC_TRA_EMITIDO EQ ABAP_FALSE.

    CK_PED_REPOM_ELETRONICO = ABAP_FALSE.
    CK_PED_TIPFR_ELETRONICO = ABAP_FALSE.

    IF ZDE_INFO_FRETE_PEDAGIO-CK_TEM_PEDAGIO EQ ABAP_TRUE.

      SELECT SINGLE * INTO @DATA(WA_ZLEST0090)
        FROM ZLEST0090
       WHERE WERKS      EQ @LC_APRESENTACAO_9011-CARGA-ID_BRANCH
         AND TP_SERVICO EQ '1'
         AND TP_ADM     EQ @ZDE_INFO_FRETE_PEDAGIO-TP_ADMIM_PED.

      ZDE_INFO_FRETE_PEDAGIO-TP_ADM_USO = WA_ZLEST0090-TP_OP.

      CASE WA_ZLEST0090-TP_OP.
        WHEN 'E'. "Eletrônico

          "Repom Eletrônico
          IF WA_ZLEST0090-TP_ADM = '03'.
            CK_PED_REPOM_ELETRONICO = ABAP_TRUE.
          ENDIF.

          "TipFrete Eletrônico
          IF WA_ZLEST0090-TP_ADM = '09'.
            CK_PED_TIPFR_ELETRONICO = ABAP_TRUE.
          ENDIF.

        WHEN 'M'. "Manual

      ENDCASE.
    ENDIF.


    CASE ZDE_INFO_FRETE_PEDAGIO-CK_TEM_PEDAGIO.
      WHEN ABAP_TRUE.

        IF ZDE_INFO_FRETE_PEDAGIO-CK_CREDITA_PED EQ ABAP_TRUE.

          CASE ZDE_INFO_FRETE_PEDAGIO-TP_ADMIM_PED.
            WHEN '03'.

              CASE CK_PED_REPOM_ELETRONICO.
                WHEN ABAP_TRUE.
                  "REPOM Automático

                  "IF CK_ALTEROU_PEDAGIO EQ ABAP_TRUE.
                  CALL FUNCTION 'Z_REPOM_INFORMA_PERCURSO'
                    EXPORTING
                      I_BRANCH         = ZDE_INFO_FRETE-AG_BRANCH
                      I_BUKRS          = ZDE_INFO_FRETE-AG_BUKRS
                      I_CD_CID_ORIGEM  = ZDE_INFO_FRETE_PEDAGIO-CD_CID_ORIGEM
                      I_CD_CID_DESTINO = ZDE_INFO_FRETE_PEDAGIO-CD_CID_DESTINO
                    IMPORTING
                      E_INFORMADO      = LC_INFORMADO
                      E_PERCURSO       = LC_PERCURSO
                    EXCEPTIONS
                      SEM_PERCURSO     = 1
                      OTHERS           = 2.

                  IF SY-SUBRC IS INITIAL.
                    CREATE OBJECT REPOM_ROTEIRO.
                    REPOM_ROTEIRO->SET_BUKRS( EXPORTING I_BUKRS = ZDE_INFO_FRETE-AG_BUKRS ).
                    REPOM_ROTEIRO->SET_BRANCH( EXPORTING I_BRANCH = ZDE_INFO_FRETE-AG_BRANCH ).
                    REPOM_ROTEIRO->SET_VEICULO_EIXOS( EXPORTING I_VEICULO_EIXOS = ZDE_INFO_FRETE_PEDAGIO-NM_QTD_EIXOS ).
                    REPOM_ROTEIRO->SET_QTD_EIXOS_SUSPENSOS_IDA( EXPORTING I_QTD_EIXOS_SUSPENSOS_IDA = 0 ).
                    REPOM_ROTEIRO->SET_QTD_EIXOS_SUSPENSOS_VOLTA( EXPORTING I_QTD_EIXOS_SUSPENSOS_VOLTA = 0 ).
                    REPOM_ROTEIRO->SET_ID_ROTA_REPOM( EXPORTING I_ID_ROTA_REPOM = LC_PERCURSO-ID_ROTA_REPOM ).
                    REPOM_ROTEIRO->SET_ID_PERCURSO_REPOM( EXPORTING I_ID_PERCURSO_REPOM = LC_PERCURSO-ID_PERCURSO_REPOM ).
                    REPOM_ROTEIRO->SET_ID_ROTA( EXPORTING I_ID_ROTA = LC_PERCURSO-ID_ROTA ).

                    CALL METHOD REPOM_ROTEIRO->CONSULTAR_VALOR
                      IMPORTING
                        E_ERROS                    = DATA(LC_ERROS)
                      RECEIVING
                        I_RETORNOU                 = DATA(P_RETORNOU)
                      EXCEPTIONS
                        SERVICO_NAO_ENCONTRADO     = 1
                        HTTP_COMMUNICATION_FAILURE = 2
                        HTTP_INVALID_STATE         = 3
                        HTTP_PROCESSING_FAILED     = 4
                        HTTP_INVALID_TIMEOUT       = 5
                        ERRO                       = 6
                        OTHERS                     = 7.

                    IF SY-SUBRC IS NOT INITIAL.
                      CK_ERRO_PEDAGIO_9011 = ABAP_TRUE.
                      MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO LC_MSG_ERRO_PEDAGIO.
                      MESSAGE ID SY-MSGID TYPE 'I' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 DISPLAY LIKE 'E'.
                    ENDIF.

                    IF P_RETORNOU EQ ABAP_FALSE.
                      LOOP AT LC_ERROS INTO DATA(LC_ERRO).
                        CK_ERRO_PEDAGIO_9011 = ABAP_TRUE.
                        MESSAGE S017(ZREPOM) WITH LC_ERRO-ERRO_CODIGO LC_ERRO-ERRO_DESCRICAO INTO LC_MSG_ERRO_PEDAGIO.
                        MESSAGE I017(ZREPOM) WITH LC_ERRO-ERRO_CODIGO LC_ERRO-ERRO_DESCRICAO DISPLAY LIKE 'E'.
                      ENDLOOP.
                    ELSE.
                      ZDE_INFO_FRETE_PEDAGIO-VL_PEDAGIO        = REPOM_ROTEIRO->GET_VALOR_TOTAL_VPR( ).
                      ZDE_INFO_FRETE_PEDAGIO-ID_ROTA           = LC_PERCURSO-ID_ROTA.
                      ZDE_INFO_FRETE_PEDAGIO-ID_ROTA_REPOM     = LC_PERCURSO-ID_ROTA_REPOM.
                      ZDE_INFO_FRETE_PEDAGIO-ID_PERCURSO_REPOM = LC_PERCURSO-ID_PERCURSO_REPOM.
                    ENDIF.
                    CLEAR: REPOM_ROTEIRO.
                  ELSE.
                    CK_ERRO_PEDAGIO_9011 = ABAP_TRUE.
                    MESSAGE S040(ZREPOM) WITH ZDE_INFO_FRETE_PEDAGIO-CD_CID_ORIGEM ZDE_INFO_FRETE_PEDAGIO-CD_CID_DESTINO INTO LC_MSG_ERRO_PEDAGIO.
                    MESSAGE I040(ZREPOM) WITH ZDE_INFO_FRETE_PEDAGIO-CD_CID_ORIGEM ZDE_INFO_FRETE_PEDAGIO-CD_CID_DESTINO DISPLAY LIKE 'E'.
                  ENDIF.
                  "ENDIF.

                WHEN ABAP_FALSE.
                  "REPOM Manual

              ENDCASE.

            WHEN '09'.

              CASE CK_PED_TIPFR_ELETRONICO.
                WHEN ABAP_TRUE.
                  "TipFrete Automático
                  ZDE_INFO_FRETE_PEDAGIO-TP_CARD_PED = 'S'.

                  SELECT SINGLE * INTO @DATA(WA_ZLEST0091)
                    FROM ZLEST0091
                   WHERE QTD_EIXO EQ @ZDE_INFO_FRETE_PEDAGIO-NM_QTD_EIXOS.

                  SELECT *
                    FROM ZLEST0084
                    INTO TABLE @DATA(IT_ZLEST0084)
                   WHERE BRANCH         EQ @ZDE_INFO_FRETE-AG_BRANCH
                     AND MUNIC_ORIGEM   EQ @ZDE_INFO_FRETE_PEDAGIO-CD_CID_ORIGEM+3(7)
                     AND MUNIC_DESTINO  EQ @ZDE_INFO_FRETE_PEDAGIO-CD_CID_DESTINO+3(7)
                     AND CAT_VEICULO    EQ @WA_ZLEST0091-CATEGORIA
                     AND PRIORIDADE     EQ @ABAP_TRUE.

                  IF SY-SUBRC IS INITIAL.
                    SORT IT_ZLEST0084 BY VLR_PEDAGIO ASCENDING.
                    READ TABLE IT_ZLEST0084 INTO DATA(WA_ZLEST0084) INDEX 1.
                    IF ( ZDE_INFO_FRETE_PEDAGIO-DT_VALOR_PED >= WA_ZLEST0084-DT_VIGENCIA ).
                      IF NOT ( WA_ZLEST0084-VLR_PEDAGIO IS INITIAL ).
                        ZDE_INFO_FRETE_PEDAGIO-VL_PEDAGIO  = WA_ZLEST0084-VLR_PEDAGIO.
                        ZDE_INFO_FRETE_PEDAGIO-ID_ROTA_TIP = WA_ZLEST0084-ID_ROTA.
                      ENDIF.
                    ELSE.
                      CK_ERRO_FRETE_9011 = ABAP_TRUE.
                      MESSAGE I000(FI) DISPLAY LIKE 'W' WITH 'Data de Vigência menor que a do transporte.'.
                    ENDIF.
                  ENDIF.

                WHEN ABAP_FALSE.
                  "TipFrete Manual
              ENDCASE.

          ENDCASE.
        ENDIF.

        "Ativar Campos de Pedágio
        "P2 - Campos Para Alteração de Pedágio - Campos Editáveis
        LOOP AT SCREEN.
          IF SCREEN-GROUP2 = 'P2'.
            IF ZDE_INFO_FRETE_PEDAGIO-CK_CREDITA_PED EQ ABAP_FALSE.

              "Se não é para creditar pedágio mesno tendo
              IF SCREEN-NAME NE 'ZDE_INFO_FRETE_PEDAGIO-CK_CREDITA_PED'.
                "Desabilitar campos para entrada de dados
                SCREEN-INPUT = '0'.
                MODIFY SCREEN.
              ENDIF.

            ELSEIF SCREEN-NAME EQ 'BTN_CARTAO_REPOM'.

              CASE CK_PED_REPOM_ELETRONICO.
                WHEN ABAP_TRUE.
                  "Habilitar campos para entrada de dados
                  SCREEN-INPUT = '1'.
                  MODIFY SCREEN.
                WHEN ABAP_FALSE.
                  "Desabilitar campos para entrada de dados
                  SCREEN-INPUT = '0'.
                  MODIFY SCREEN.
              ENDCASE.

            ELSEIF SCREEN-NAME EQ 'ZDE_INFO_FRETE_PEDAGIO-NR_CARTAO_PED_REPOM'.

              CASE CK_PED_REPOM_ELETRONICO.
                WHEN ABAP_TRUE.
                  "Habilitar campos para entrada de dados
                  SCREEN-INPUT = '1'.
                  MODIFY SCREEN.
                WHEN ABAP_FALSE.
                  "Desabilitar campos para entrada de dados
                  SCREEN-INPUT = '0'.
                  MODIFY SCREEN.
              ENDCASE.

            ELSEIF SCREEN-NAME EQ 'ZDE_INFO_FRETE_PEDAGIO-VL_PEDAGIO'.
              CASE CK_PED_REPOM_ELETRONICO.
                WHEN ABAP_TRUE.
                  "Desabilitar campos para entrada de dados
                  "Valor do Pedágio não é informado é retornado pelo webservice da REPOM
                  SCREEN-INPUT = '0'.
                  MODIFY SCREEN.
                WHEN ABAP_FALSE.
                  "Habilitar campos para entrada de dados
                  "Valor do Pedágio deve ser informado
                  SCREEN-INPUT    = '1'.
                  MODIFY SCREEN.
              ENDCASE.
            ELSEIF SCREEN-NAME EQ 'ZDE_INFO_FRETE_PEDAGIO-CK_CREDITA_PED'.
              CASE ZDE_INFO_FRETE_PEDAGIO-CK_TEM_PEDAGIO.
                WHEN ABAP_TRUE.
                  "Habilita campos para entrada de dados
                  SCREEN-INPUT = '1'.
                  MODIFY SCREEN.
                WHEN ABAP_FALSE.
                  "Desabilitar campos para entrada de dados
                  SCREEN-INPUT = '0'.
                  MODIFY SCREEN.
              ENDCASE.
            ELSEIF SCREEN-NAME EQ 'ZDE_INFO_FRETE_PEDAGIO-TP_ADMIM_PED'.
              "IF LC_QTD_LINHAS_PED GT 1.
              "Habilitar campo de Administradora de Pedágio
              SCREEN-INPUT = '1'.
              MODIFY SCREEN.
              "ELSE.
              "Desabilitar campo de Administradora de Pedágio
              "  SCREEN-INPUT = '0'.
              "  MODIFY SCREEN.
              "ENDIF.
            ELSE.
              "Habilitar campos para entrada de dados
              SCREEN-INPUT = '1'.
              MODIFY SCREEN.
            ENDIF.
          ENDIF.
        ENDLOOP.

      WHEN ABAP_FALSE.
        "Bloquear todos os campo de entrada de pedágio!
        "P1 - Campos Para Alteração de Pedágio - Todos os campos
        LOOP AT SCREEN.
          IF SCREEN-GROUP1 = 'P1'.
            SCREEN-INPUT = '0'.
            MODIFY SCREEN.
          ENDIF.
        ENDLOOP.
    ENDCASE.

    CK_ALTEROU_PEDAGIO = ABAP_FALSE.

    IF CK_ALTEROU_ITINERARIO EQ ABAP_TRUE.

      READ TABLE IT_UFS_INTERMEDIARIOS WITH KEY ID_CARGA = SPACE TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS NOT INITIAL.
        READ TABLE IT_UFS_INTERMEDIARIOS WITH KEY ID_CARGA = LC_APRESENTACAO_9011-CARGA-ID_CARGA TRANSPORTING NO FIELDS.
        IF SY-SUBRC IS NOT INITIAL.
          CLEAR: ZSDT0001FT-ID_CARGA_MODEL.
          PERFORM RECUPERA_UFS_INTERMEDIARIAS USING ZDE_INFO_FRETE-ROUTE ZDE_INFO_FRETE_PEDAGIO-CD_CID_ORIGEM ZDE_INFO_FRETE_PEDAGIO-CD_CID_DESTINO
            CHANGING IT_UFS_INTERMEDIARIOS
                     ZSDT0001FT-ID_CARGA_MODEL.
        ENDIF.
      ENDIF.

      PERFORM CARREGA_ESTADOS_GRID.

      CK_ALTEROU_ITINERARIO = ABAP_FALSE.

      CTL_ALV_9011->REFRESH_TABLE_DISPLAY( ).

    ENDIF.
  ELSE.
    PERFORM CARREGA_ESTADOS_GRID.
    CTL_ALV_9011->REFRESH_TABLE_DISPLAY( ).
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  SET_VL_ADIANTAMENTO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SET_VL_ADIANTAMENTO INPUT.

  DATA(VL_ADIANTAMENTO_PERMITIDO) = ZDE_INFO_FRETE_FRETE-VL_FRETE * ( ZDE_INFO_FRETE_FRETE-VL_MARGADTO / 100 ).
  IF ZDE_INFO_FRETE_FRETE-VL_ADIANTAMENTO GT VL_ADIANTAMENTO_PERMITIDO.
    MESSAGE E022(ZLES) WITH ZDE_INFO_FRETE_FRETE-VL_MARGADTO.
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  INFORMA_CARTAO_PEDAGIO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM INFORMA_CARTAO_PEDAGIO.

  CHECK ZDE_INFO_FRETE_PEDAGIO-CK_CREDITA_PED EQ ABAP_TRUE AND
        ZDE_INFO_FRETE_PEDAGIO-CK_TEM_PEDAGIO EQ ABAP_TRUE.

  IF CK_PED_REPOM_ELETRONICO EQ ABAP_TRUE.
    "Cartão REPOM
    CLEAR ZDE_INFO_FRETE_PEDAGIO-NR_CARTAO_PED_REPOM.
    PERFORM INFORMA_CARTAO_PEDAGIO_REPOM CHANGING ZDE_INFO_FRETE_PEDAGIO-NR_CARTAO_PED_REPOM.
  ENDIF.

  IF CK_PED_TIPFR_ELETRONICO EQ ABAP_TRUE.
    "Cartão TipFrete

  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  INFORMA_CARTAO_PEDAGIO_REPOM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_ZDE_INFO_FRETE_PEDAGIO_NR_CART  text
*----------------------------------------------------------------------*
FORM INFORMA_CARTAO_PEDAGIO_REPOM  CHANGING P_CARTAO TYPE ZDE_REPOM_CARTAO_PED.

  DATA: I_CARTAO    TYPE  ZDE_REPOM_CARTAO,
        CK_VALIDADO TYPE  CHAR01,
        E_ERROS     TYPE  ZDE_REPOM_ERROS_T.

  CHECK P_CARTAO IS NOT INITIAL.

  I_CARTAO-BUKRS     = ZDE_INFO_FRETE-AG_BUKRS.
  I_CARTAO-BRANCH    = ZDE_INFO_FRETE-AG_BRANCH.
  I_CARTAO-NR_CARTAO = P_CARTAO.

  IF P_CARTAO IS INITIAL.
    CALL FUNCTION 'Z_REPOM_INFORMA_CARTAO_PED'
      IMPORTING
        CK_VALIDADO = CK_VALIDADO
      CHANGING
        I_CARTAO    = I_CARTAO.

    IF CK_VALIDADO EQ ABAP_TRUE.
      P_CARTAO = I_CARTAO-NR_CARTAO.
    ELSE.
      MESSAGE S232 DISPLAY LIKE 'E'.
    ENDIF.

  ELSE.
    CALL FUNCTION 'Z_REPOM_VALIDA_CARTAO'
      EXPORTING
        I_CARTAO = I_CARTAO "WA_REPOM_CARTAO
      IMPORTING
        E_VALIDO = CK_VALIDADO
        E_ERROS  = E_ERROS
      EXCEPTIONS
        ERRO     = 1
        OTHERS   = 2.

    IF SY-SUBRC IS NOT INITIAL.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ELSEIF CK_VALIDADO EQ ABAP_FALSE.
      LOOP AT E_ERROS INTO DATA(WA_ERRO).
        MESSAGE E017 WITH WA_ERRO-ERRO_CODIGO WA_ERRO-ERRO_DESCRICAO.
      ENDLOOP.
    ENDIF.

  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  SET_NR_CARTAO_PED_REPOM  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SET_NR_CARTAO_PED_REPOM INPUT.
  PERFORM INFORMA_CARTAO_PEDAGIO_REPOM CHANGING ZDE_INFO_FRETE_PEDAGIO-NR_CARTAO_PED_REPOM.
ENDMODULE.


*&---------------------------------------------------------------------*
*&      Module  SET_CREDITA_PEDAGIO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SET_CREDITA_PEDAGIO INPUT.

  IF ZDE_INFO_FRETE_PEDAGIO-CK_CREDITA_PED EQ ABAP_FALSE.
    CLEAR: ZDE_INFO_FRETE_PEDAGIO-NR_CARTAO_PED_REPOM,
           ZDE_INFO_FRETE_PEDAGIO-VL_PEDAGIO,
           ZDE_INFO_FRETE_PEDAGIO-CD_CID_DESTINO,
           ZDE_INFO_FRETE_PEDAGIO-CD_CID_ORIGEM.
  ENDIF.
  CHECK ZDE_INFO_FRETE_PEDAGIO-CK_CREDITA_PED EQ ABAP_TRUE.
  CK_ALTEROU_PEDAGIO = ABAP_TRUE.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  SET_ALTEROU_PEDAGIO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SET_ALTEROU_PEDAGIO INPUT.
  CK_ALTEROU_PEDAGIO = ABAP_TRUE.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  SET_ALTEROU_ITINERARIO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE SET_ALTEROU_ITINERARIO INPUT.
  CK_ALTEROU_ITINERARIO = ABAP_TRUE.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  RECUPERA_UFS_INTERMEDIARIAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM RECUPERA_UFS_INTERMEDIARIAS  USING    P_ROUTE TYPE ROUTE
                                           P_CD_CID_ORIGEM TYPE J_1BTXJCD
                                           P_CD_CID_DESTINO TYPE J_1BTXJCD

                                  CHANGING P_UFS TYPE ZDE_ZSDT0001FTUFS_T
                                           P_ID_CARGA_BASE TYPE ZDE_ID_CARGA.

  DATA: WA_ZSDT0001FTUFS TYPE ZSDT0001FTUFS.

  CLEAR: P_UFS.

  IF P_ID_CARGA_BASE IS NOT INITIAL.

    SELECT * INTO TABLE @DATA(IT_UFS_LOCAL)
      FROM ZSDT0001FTUFS AS UF1
     WHERE UF1~ID_CARGA EQ @P_ID_CARGA_BASE.

  ELSE.
    SELECT * INTO TABLE @IT_UFS_LOCAL
      FROM ZSDT0001FTUFS AS UF1
     WHERE UF1~ROUTE          EQ @P_ROUTE
       AND UF1~CD_CID_ORIGEM  EQ @P_CD_CID_ORIGEM
       AND UF1~CD_CID_DESTINO	EQ @P_CD_CID_DESTINO
       AND UF1~ID_CARGA       EQ ( SELECT MAX( UF2~ID_CARGA )
                                     FROM ZSDT0001FT AS UF2
                                    WHERE UF2~ROUTE          EQ UF1~ROUTE
                                      AND UF2~CD_CID_ORIGEM  EQ UF1~CD_CID_ORIGEM
                                      AND UF2~CD_CID_DESTINO EQ UF1~CD_CID_DESTINO ).

    IF SY-SUBRC IS NOT INITIAL.
      SELECT * INTO TABLE @IT_UFS_LOCAL
        FROM ZSDT0001FTUFS AS UF1
       WHERE UF1~ROUTE    EQ @P_ROUTE
         AND UF1~ID_CARGA EQ ( SELECT MAX( UF2~ID_CARGA )
                                 FROM ZSDT0001FT AS UF2
                                WHERE UF2~ROUTE EQ UF1~ROUTE ).
    ENDIF.
  ENDIF.

  LOOP AT IT_UFS_LOCAL INTO DATA(WA_UFS_LOCAL).
    APPEND WA_UFS_LOCAL TO P_UFS.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG_9011
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG_9011 .

  CLEAR: IT_FIELDCATALOG_9011[].

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_ZSDT0001FTUFS_ALV'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG_9011.

  LOOP AT IT_FIELDCATALOG_9011 ASSIGNING FIELD-SYMBOL(<FS_CAT>).
    <FS_CAT>-TABNAME = 'ZDE_ZSDT0001FTUFS_ALV'.
    CASE <FS_CAT>-FIELDNAME.
      WHEN 'NM_SEQUENCIA'.
        IF LC_APRESENTACAO_9011-CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CONFERIDO.
          <FS_CAT>-EDIT = ABAP_TRUE.
        ENDIF.
      WHEN OTHERS.
        <FS_CAT>-EDIT = ABAP_FALSE.
    ENDCASE.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_HINTS_9011
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_HINTS_9011 .

*  DATA: IT_DD07V        TYPE TABLE OF DD07V WITH HEADER LINE,
*        WA_EXCEPT_QINFO LIKE LINE OF IT_EXCEPT_QINFO,
*        LC_TP_STATUS    TYPE ZDE_STATUS_CARGA,
*        LC_ICO_CARGA    TYPE CHAR04.
**
*  CLEAR: IT_EXCEPT_QINFO[].
**
*  "Informações Documento
*  CALL FUNCTION 'GET_DOMAIN_VALUES'
*    EXPORTING
*      DOMNAME    = 'ZDM_STATUS_CARGA'
*    TABLES
*      VALUES_TAB = IT_DD07V.
*
*  LOOP AT IT_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
*    WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
*    LC_TP_STATUS = CONV #( IT_DD07V-DOMVALUE_L ).
*    PERFORM SETA_ICONE_STATUS USING LC_TP_STATUS CHANGING LC_ICO_CARGA.
*    WA_EXCEPT_QINFO-VALUE = LC_ICO_CARGA.
*    WA_EXCEPT_QINFO-TEXT  = IT_DD07V-DDTEXT.
*    WA_EXCEPT_QINFO-TABNAME   = 'ZDE_ZSDT0001CG_ALV'.
*    WA_EXCEPT_QINFO-FIELDNAME = 'ICO_CARGA'.
*    APPEND WA_EXCEPT_QINFO TO IT_EXCEPT_QINFO.
*  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT_9011
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_GS_VARIANT_9011 .

  GS_VARIANT_9011-REPORT      = SY-REPID.
  GS_VARIANT_9011-HANDLE      = '9011'.
  GS_VARIANT_9011-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT_9011-USERNAME    = ABAP_FALSE.
  GS_VARIANT_9011-VARIANT     = ABAP_FALSE.
  GS_VARIANT_9011-TEXT        = ABAP_FALSE.
  GS_VARIANT_9011-DEPENDVARS  = ABAP_FALSE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  AJUSTA_CORES_UFS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_<FS_UFS>  text
*----------------------------------------------------------------------*
FORM AJUSTA_CORES_UFS  CHANGING P_UFS TYPE TY_UFS_ALV.

  IF P_UFS-NM_SEQUENCIA IS INITIAL.
    CLEAR P_UFS-LINE_COLOR.
  ELSE.
    P_UFS-LINE_COLOR = CS_LINE_COLOR_ALTERADO.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  VERIFICAR_APAGAR_ESTADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM VERIFICAR_APAGAR_ESTADOS .



ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CARREGA_ESTADOS_GRID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CARREGA_ESTADOS_GRID .

  CLEAR: IT_UFS_ALV.

  SORT IT_UFS_INTERMEDIARIOS BY NM_SEQUENCIA ASCENDING.

  SELECT * INTO TABLE @DATA(IT_T005U)
    FROM T005U
   WHERE SPRAS EQ @SY-LANGU
     AND LAND1 EQ 'BR'
     AND BLAND GT '99'
     AND BLAND NE @ZDE_INFO_FRETE_PEDAGIO-CD_CID_ORIGEM(3)
     AND BLAND NE @ZDE_INFO_FRETE_PEDAGIO-CD_CID_DESTINO(3).

  SORT IT_T005U BY BLAND ASCENDING.

  LOOP AT IT_T005U INTO DATA(WA_T005U).
    WA_UFS_ALV-BLAND = WA_T005U-BLAND.
    WA_UFS_ALV-BEZEI = WA_T005U-BEZEI.
    APPEND WA_UFS_ALV TO IT_UFS_ALV.
  ENDLOOP.

  LOOP AT IT_UFS_INTERMEDIARIOS INTO DATA(WA_UFS_INTERMEDIARIOS).
    READ TABLE IT_UFS_ALV ASSIGNING FIELD-SYMBOL(<FS_UFS>) WITH KEY BLAND = WA_UFS_INTERMEDIARIOS-BLAND.
    IF SY-SUBRC IS INITIAL.
      <FS_UFS>-NM_SEQUENCIA = WA_UFS_INTERMEDIARIOS-NM_SEQUENCIA.
      PERFORM AJUSTA_CORES_UFS CHANGING <FS_UFS>.
    ENDIF.
  ENDLOOP.

ENDFORM.
