FUNCTION ZNFE_MIRO_XML_TERCEIRO.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(I_CHAVE_NFE) TYPE  ZDE_CHAVE_DOC_E
*"     VALUE(I_EBELN) TYPE  EBELN OPTIONAL
*"     VALUE(I_MBLNR) TYPE  MBLNR OPTIONAL
*"     VALUE(I_MJAHR) TYPE  MJAHR OPTIONAL
*"  EXPORTING
*"     REFERENCE(E_MESSAGEM_ERRO) TYPE  STRING
*"     REFERENCE(E_SUCESSO) TYPE  CHAR01
*"     REFERENCE(E_NOTA_FISCAL) TYPE  ZIB_NFE_RET_CAP
*"----------------------------------------------------------------------

  DATA: NFE        TYPE REF TO ZCL_NFE_INBOUND,
        WA_ITM     TYPE ZIB_NFE_RET_ITEM,
        LC_SUCESSO TYPE  CHAR01,
        LC_TEXTO   TYPE C LENGTH 15.

  E_SUCESSO = '0'.
  CLEAR: E_NOTA_FISCAL.

  IF I_EBELN IS NOT INITIAL.

    CALL FUNCTION 'Z_MM_VALIDA_PEDIDO_NFE'
      EXPORTING
        I_EBELN         = I_EBELN
        I_CHAVE_NFE     = I_CHAVE_NFE
        I_VERF_EXISTE   = ABAP_FALSE
      IMPORTING
        E_MESSAGEM_ERRO = E_MESSAGEM_ERRO
        E_SUCESSO       = LC_SUCESSO.

    IF LC_SUCESSO EQ '0'.
      EXIT.
    ENDIF.

  ENDIF.

  TRY .
      CREATE OBJECT NFE.
      "Localizando a NF-e
      NFE->ZIF_CADASTRO~SET_REGISTRO( I_ID_REGISTRO = I_CHAVE_NFE ).
      "Atualiza Documento Fiscal
      NFE->SET_INFO_SAP( ).

    CATCH ZCX_CADASTRO INTO DATA(EX_CADASTRO).

      NFE->FREE( ).
      CLEAR: NFE.
      MESSAGE ID EX_CADASTRO->MSGID TYPE EX_CADASTRO->MSGTY NUMBER EX_CADASTRO->MSGNO WITH EX_CADASTRO->MSGV1 EX_CADASTRO->MSGV2 EX_CADASTRO->MSGV3 EX_CADASTRO->MSGV4 INTO E_MESSAGEM_ERRO.
      EXIT.

    CATCH ZCX_PEDIDO_COMPRA_EXCEPTION INTO DATA(EX_PEDIDO).

      NFE->FREE( ).
      CLEAR: NFE.
      MESSAGE ID EX_PEDIDO->MSGID TYPE EX_PEDIDO->MSGTY NUMBER EX_PEDIDO->MSGNO WITH EX_PEDIDO->MSGV1 EX_PEDIDO->MSGV2 EX_PEDIDO->MSGV3 EX_PEDIDO->MSGV4 INTO E_MESSAGEM_ERRO.
      EXIT.

    CATCH ZCX_CHARG_EXCEPTION INTO DATA(EX_CHARG).

      NFE->FREE( ).
      CLEAR: NFE.
      MESSAGE ID EX_CHARG->MSGID TYPE EX_CHARG->MSGTY NUMBER EX_CHARG->MSGNO WITH EX_CHARG->MSGV1 EX_CHARG->MSGV2 EX_CHARG->MSGV3 EX_CHARG->MSGV4 INTO E_MESSAGEM_ERRO.
      EXIT.

    CATCH ZCX_NFE_INBOUND_EXCEPTION INTO DATA(EX_NFEIN).

      NFE->FREE( ).
      CLEAR: NFE.
      MESSAGE ID EX_NFEIN->MSGID TYPE EX_NFEIN->MSGTY NUMBER EX_NFEIN->MSGNO WITH EX_NFEIN->MSGV1 EX_NFEIN->MSGV2 EX_NFEIN->MSGV3 EX_NFEIN->MSGV4 INTO E_MESSAGEM_ERRO.
      EXIT.

  ENDTRY.

  SELECT SINGLE * INTO @DATA(WA_ZIB_NFE_DIST_TER)
    FROM ZIB_NFE_DIST_TER
   WHERE CHAVE_NFE EQ @I_CHAVE_NFE.

  IF SY-SUBRC IS NOT INITIAL.
    NFE->FREE( ).
    CLEAR: NFE.
    MESSAGE S020(ZNFE_DISTRI) WITH I_CHAVE_NFE INTO E_MESSAGEM_ERRO.
    EXIT.
  ENDIF.

  IF WA_ZIB_NFE_DIST_TER-P_EMISSOR IS INITIAL.
    NFE->FREE( ).
    CLEAR: NFE.

    IF ZIB_NFE_DIST_TER-FORNE_CNPJ IS NOT INITIAL.
      LC_TEXTO = WA_ZIB_NFE_DIST_TER-FORNE_CNPJ.
    ELSE.
      LC_TEXTO = WA_ZIB_NFE_DIST_TER-FORNE_CPF.
    ENDIF.

    MESSAGE S011(ZNFE_DISTRI) WITH LC_TEXTO WA_ZIB_NFE_DIST_TER-FORNE_IE INTO E_MESSAGEM_ERRO.
    EXIT.
  ENDIF.

  SELECT * INTO TABLE @DATA(IT_ZIB_NFE_DIST_ITM)
    FROM ZIB_NFE_DIST_ITM
   WHERE CHAVE_NFE EQ @I_CHAVE_NFE.

  IF SY-SUBRC IS NOT INITIAL.
    NFE->FREE( ).
    CLEAR: NFE.
    MESSAGE S116(ZNFE_DISTRI) WITH I_CHAVE_NFE INTO E_MESSAGEM_ERRO.
    EXIT.
  ENDIF.

  "Pedido de Compra
  IF I_EBELN IS NOT INITIAL.

    SELECT * INTO TABLE @DATA(IT_EKPO)
      FROM EKPO
     WHERE EBELN EQ @I_EBELN.

    IF SY-SUBRC IS NOT INITIAL.
      NFE->FREE( ).
      CLEAR: NFE.
      MESSAGE S117(ZNFE_DISTRI) WITH I_EBELN INTO E_MESSAGEM_ERRO.
      EXIT.
    ENDIF.

    SORT IT_EKPO BY MATNR.

  ENDIF.

  "Documento de Material
  IF I_MBLNR IS NOT INITIAL.

    SELECT * INTO TABLE @DATA(IT_MSEG)
      FROM MSEG
     WHERE MBLNR EQ @I_MBLNR
       AND MJAHR EQ @I_MJAHR.

    IF SY-SUBRC IS NOT INITIAL.
      NFE->FREE( ).
      CLEAR: NFE.
      MESSAGE S118(ZNFE_DISTRI) WITH I_MBLNR I_MJAHR INTO E_MESSAGEM_ERRO.
      EXIT.
    ENDIF.

    SORT IT_MSEG BY MATNR.

    "Verificar se Material é do Pedido
    LOOP AT IT_MSEG INTO DATA(WA_MSEG).
      IF I_EBELN IS NOT INITIAL AND WA_MSEG-EBELN NE I_EBELN.
        NFE->FREE( ).
        CLEAR: NFE.
        MESSAGE S119(ZNFE_DISTRI) WITH I_EBELN INTO E_MESSAGEM_ERRO.
        RETURN.
      ENDIF.
    ENDLOOP.

  ENDIF.

  DESCRIBE TABLE IT_ZIB_NFE_DIST_ITM LINES DATA(QT_ITENS_NFE).
  DESCRIBE TABLE IT_MSEG LINES DATA(QT_ITENS_MIGO).
  DESCRIBE TABLE IT_EKPO LINES DATA(QT_ITENS_PEDI).

  LOOP AT IT_ZIB_NFE_DIST_ITM ASSIGNING FIELD-SYMBOL(<ITEM_NFE>).

    NFE->GET_MATERIAL(
      EXPORTING
        I_EMISSOR          = WA_ZIB_NFE_DIST_TER-P_EMISSOR  " Nº conta do fornecedor
        I_PROD_CODIGO      = <ITEM_NFE>-PROD_CODIGO    " Nº item do documento
        I_UNIDADE_ITEM     = <ITEM_NFE>-PROD_UND_COMERCI    " Unidade Comercial
      RECEIVING
        R_001              = DATA(R_001)    " Depara Fornecedor/Unidade/Fator
      EXCEPTIONS
        NAO_ACHOU_DEPARADA = 1
        OTHERS             = 2
    ).

    IF SY-SUBRC IS NOT INITIAL.
      "Não achou vinculo
      IF QT_ITENS_NFE EQ QT_ITENS_MIGO AND QT_ITENS_MIGO EQ 1.
        READ TABLE IT_MSEG INTO WA_MSEG INDEX 1.
        <ITEM_NFE>-EBELN = WA_MSEG-EBELN.
        <ITEM_NFE>-EBELP = WA_MSEG-EBELP.
        <ITEM_NFE>-MBLNR = WA_MSEG-MBLNR.
        <ITEM_NFE>-MJAHR = WA_MSEG-MJAHR.
        <ITEM_NFE>-ZEILE = WA_MSEG-ZEILE.
        <ITEM_NFE>-MENGE = WA_MSEG-MENGE.
        <ITEM_NFE>-MEINS = WA_MSEG-MEINS.
        <ITEM_NFE>-MATNR = WA_MSEG-MATNR.
        CONTINUE.
      ENDIF.
      IF QT_ITENS_NFE EQ QT_ITENS_PEDI AND QT_ITENS_PEDI EQ 1.
        READ TABLE IT_EKPO INTO DATA(WA_EKPO) INDEX 1.
        <ITEM_NFE>-EBELN = WA_EKPO-EBELN.
        <ITEM_NFE>-EBELP = WA_EKPO-EBELP.
        <ITEM_NFE>-MATNR = WA_EKPO-MATNR.
        SELECT SINGLE MEINS INTO <ITEM_NFE>-MEINS FROM MARA WHERE MATNR EQ WA_EKPO-MATNR.
        CONTINUE.
      ENDIF.
    ELSE.
      <ITEM_NFE>-MATNR = R_001-MATNR.
      <ITEM_NFE>-MEINS = R_001-MEINS.
      <ITEM_NFE>-MENGE = <ITEM_NFE>-PROD_QTD_COMERCI * R_001-FATOR.
    ENDIF.

    IF <ITEM_NFE>-MATNR IS NOT INITIAL AND <ITEM_NFE>-MEINS IS NOT INITIAL.
      READ TABLE IT_MSEG INTO WA_MSEG WITH KEY MATNR = <ITEM_NFE>-MATNR.
      IF SY-SUBRC IS INITIAL.
        <ITEM_NFE>-EBELN = WA_MSEG-EBELN.
        <ITEM_NFE>-EBELP = WA_MSEG-EBELP.
        <ITEM_NFE>-MBLNR = WA_MSEG-MBLNR.
        <ITEM_NFE>-MJAHR = WA_MSEG-MJAHR.
        <ITEM_NFE>-ZEILE = WA_MSEG-ZEILE.
        <ITEM_NFE>-MENGE = WA_MSEG-MENGE.
        <ITEM_NFE>-MEINS = WA_MSEG-MEINS.
      ELSE.
        READ TABLE IT_EKPO INTO WA_EKPO WITH KEY MATNR = <ITEM_NFE>-MATNR.
        IF SY-SUBRC IS INITIAL.
          <ITEM_NFE>-EBELN = WA_EKPO-EBELN.
          <ITEM_NFE>-EBELP = WA_EKPO-EBELP.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.

  NFE->FREE( ).
  CLEAR: NFE.

  IF I_EBELN IS INITIAL.
    DATA(LC_VALIDADO) = ABAP_TRUE.

    LOOP AT IT_ZIB_NFE_DIST_ITM INTO DATA(WA_ZIB_NFE_DIST_ITM).
      IF WA_ZIB_NFE_DIST_ITM-EBELN IS NOT INITIAL AND LC_VALIDADO EQ ABAP_TRUE.
        CALL FUNCTION 'Z_MM_VALIDA_PEDIDO_NFE'
          EXPORTING
            I_EBELN         = WA_ZIB_NFE_DIST_TER-EBELN
            I_CHAVE_NFE     = I_CHAVE_NFE
            I_VERF_EXISTE   = ABAP_FALSE
          IMPORTING
            E_MESSAGEM_ERRO = E_MESSAGEM_ERRO
            E_SUCESSO       = LC_SUCESSO.

        IF LC_SUCESSO EQ '0'.
          LC_VALIDADO = ABAP_FALSE.
        ENDIF.
      ENDIF.
    ENDLOOP.

    IF LC_VALIDADO EQ ABAP_FALSE.
      RETURN.
    ENDIF.

  ENDIF.

  E_NOTA_FISCAL-CHAVE_NFE    = WA_ZIB_NFE_DIST_TER-CHAVE_NFE.
  E_NOTA_FISCAL-FORNE_CNPJ   = WA_ZIB_NFE_DIST_TER-FORNE_CNPJ.
  E_NOTA_FISCAL-FORNE_CPF    = WA_ZIB_NFE_DIST_TER-FORNE_CPF.
  E_NOTA_FISCAL-FORNE_IE     = WA_ZIB_NFE_DIST_TER-FORNE_IE.
  E_NOTA_FISCAL-FORNE_RAZAO  = WA_ZIB_NFE_DIST_TER-FORNE_RAZAO.
  E_NOTA_FISCAL-DESTINO_CNPJ = WA_ZIB_NFE_DIST_TER-DESTINO_CNPJ.
  E_NOTA_FISCAL-DESTINO_IE   = WA_ZIB_NFE_DIST_TER-DESTINO_IE.
  E_NOTA_FISCAL-NUMERO       = WA_ZIB_NFE_DIST_TER-NUMERO.
  E_NOTA_FISCAL-DT_EMISSAO   = WA_ZIB_NFE_DIST_TER-DT_EMISSAO.
  E_NOTA_FISCAL-HR_EMISSAO   = WA_ZIB_NFE_DIST_TER-HR_EMISSAO.
  E_NOTA_FISCAL-SERIE        = WA_ZIB_NFE_DIST_TER-SERIE.
  E_NOTA_FISCAL-MODEL        = WA_ZIB_NFE_DIST_TER-MODEL.
  E_NOTA_FISCAL-VL_TOTAL     = WA_ZIB_NFE_DIST_TER-VL_TOTAL.
  E_NOTA_FISCAL-E_TOMADORA   = WA_ZIB_NFE_DIST_TER-E_TOMADORA.
  E_NOTA_FISCAL-F_TOMADORA   = WA_ZIB_NFE_DIST_TER-F_TOMADORA.
  E_NOTA_FISCAL-P_EMISSOR    = WA_ZIB_NFE_DIST_TER-P_EMISSOR.

  LOOP AT IT_ZIB_NFE_DIST_ITM INTO WA_ZIB_NFE_DIST_ITM.

    CLEAR: WA_ITM.
    WA_ITM-PROD_ITEM        = WA_ZIB_NFE_DIST_ITM-PROD_ITEM.
    WA_ITM-PROD_CODIGO      = WA_ZIB_NFE_DIST_ITM-PROD_CODIGO.
    WA_ITM-PROD_CFOP        = WA_ZIB_NFE_DIST_ITM-PROD_CFOP.
    WA_ITM-PROD_DESCRICAO   = WA_ZIB_NFE_DIST_ITM-PROD_DESCRICAO.
    WA_ITM-PROD_UND_COMERCI = WA_ZIB_NFE_DIST_ITM-PROD_UND_COMERCI.
    WA_ITM-PROD_QTD_COMERCI = WA_ZIB_NFE_DIST_ITM-PROD_QTD_COMERCI.
    WA_ITM-PROD_VLR_TOTAL_B = WA_ZIB_NFE_DIST_ITM-PROD_VLR_TOTAL_B.
    WA_ITM-MATNR            = WA_ZIB_NFE_DIST_ITM-MATNR.

    SELECT SINGLE MAKTX INTO WA_ITM-MAKTX
      FROM MAKT
     WHERE SPRAS EQ 'P'
       AND MATNR EQ WA_ZIB_NFE_DIST_ITM-MATNR.

    WA_ITM-EBELN            = WA_ZIB_NFE_DIST_ITM-EBELN.
    WA_ITM-EBELP            = WA_ZIB_NFE_DIST_ITM-EBELP.
    WA_ITM-MENGE            = WA_ZIB_NFE_DIST_ITM-MENGE.
    WA_ITM-MEINS            = WA_ZIB_NFE_DIST_ITM-MEINS.

    CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
      EXPORTING
        INPUT          = WA_ITM-MEINS
        LANGUAGE       = 'P'
      IMPORTING
        OUTPUT         = WA_ITM-MEINS
      EXCEPTIONS
        UNIT_NOT_FOUND = 1
        OTHERS         = 2.

    APPEND WA_ITM TO E_NOTA_FISCAL-ITEM.

  ENDLOOP.

  E_SUCESSO = '1'.

ENDFUNCTION.
