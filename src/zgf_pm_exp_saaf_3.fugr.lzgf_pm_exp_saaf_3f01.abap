*----------------------------------------------------------------------*
***INCLUDE LZGF_PM_EXP_SAAF_3F01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  ZF_INSERIR_TODA_TABELA_03
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ZF_INSERIR_TODA_TABELA_03 .
* Preservar data/hora do ínício da seleção.
  CONCATENATE SY-DATUM SY-UZEIT INTO LV_TIMES.

* Selecionar todos os registros para serem enviados
  CLEAR IT_ZVAL[].
  SELECT ZVAL CONST
    FROM ZTPARAM
    INTO CORRESPONDING FIELDS OF TABLE IT_PARAM
   WHERE PARAM   EQ LC_TP_OBJ
     AND ABASTEC EQ LC_X.

  LOOP AT IT_PARAM.
    IT_ZVAL-ZVAL = IT_PARAM-ZVAL.
    APPEND IT_ZVAL.
  ENDLOOP.

  SELECT BUKRS SWERK EQUNR HERST HERLD TYPBZ OBJNR INTO TABLE IT_EQUI
    FROM ITOB FOR ALL ENTRIES IN IT_ZVAL
   WHERE EQTYP = IT_ZVAL-ZVAL
     AND IWERK = '1521'.

  SORT IT_EQUI ASCENDING BY S_COD_VEICULO.

  IF NOT IT_EQUI[] IS INITIAL.

    SELECT OBJNR LICENSE_NUM FUEL_PRI FUEL_SEC DIV1 DIV2 DIV3 TQ_COMBUSTIVEL_1 TQ_COMBUSTIVEL_2 TQ_COMBUSTIVEL_3 INTO TABLE IT_FLEET
      FROM FLEET FOR ALL ENTRIES IN IT_EQUI
      WHERE OBJNR = IT_EQUI-OBJNR.

    SORT IT_FLEET ASCENDING BY OBJNR.

    REFRESH IT_M_VEIC_SAAF.
    CLEAR:  IT_M_VEIC_SAAF.

    LOOP AT IT_EQUI.
      CLEAR IT_M_VEIC_SAAF.

*      CLEAR WA_DATA_GEN.
*      CALL FUNCTION 'BAPI_EQUI_GETDETAIL'
*        EXPORTING
*          EQUIPMENT        = IT_EQUI-S_COD_VEICULO
*        IMPORTING
*          DATA_GENERAL_EXP = WA_DATA_GEN.
*

      SELECT SINGLE EQKTU
        FROM EQKT
        INTO IT_M_VEIC_SAAF-S_DESCRICAO
       WHERE EQUNR = IT_EQUI-S_COD_VEICULO.

*      IT_M_VEIC_SAAF-S_DESCRICAO     = WA_DATA_GEN-DESCRIPT.
      IT_M_VEIC_SAAF-S_DESC_REDUZIDA = IT_M_VEIC_SAAF-S_DESCRICAO.

      SELECT SINGLE MAKTX
        FROM MAKT
        INTO IT_M_VEIC_SAAF-S_DESCRICAO
       WHERE MATNR = IT_EQUI-S_COD_VEICULO. "#EC CI_FLDEXT_OK[2215424]

      SELECT SINGLE CITY1
        INTO IT_M_VEIC_SAAF-S_CIDADE_VEICULO
        FROM ADRC AS A
  INNER JOIN J_1BBRANCH AS B ON A~ADDRNUMBER = B~ADRNR
       WHERE B~BUKRS  = IT_EQUI-EMPRESA
         AND B~BRANCH = IT_EQUI-FILIAL.

*      "//Com Chave completa - tabela de Local de negócios
*      SELECT ADRNR INTO LV_ADRNR
*          FROM J_1BBRANCH
*          WHERE BUKRS  = WA_DATA_GEN-COMP_CODE    "com Chave primária
*            AND BRANCH = WA_DATA_GEN-MAINTPLANT.  "com Chave primária
*      ENDSELECT.
*
*      "//Com Chave primária - tabela de endereços
*      SELECT CITY1 INTO IT_M_VEIC_SAAF-S_CIDADE_VEICULO
*        FROM ADRC UP TO 1 ROWS
*        WHERE ADDRNUMBER = LV_ADRNR.
*      ENDSELECT.
*
      READ TABLE IT_FLEET WITH KEY OBJNR = IT_EQUI-OBJNR BINARY SEARCH.

      IT_M_VEIC_SAAF-S_COD_VEICULO    = IT_EQUI-S_COD_VEICULO.
      IT_M_VEIC_SAAF-S_MODELO_VEICULO = IT_EQUI-S_MODELO_VEICULO.
      IT_M_VEIC_SAAF-S_MARCA_VEICULO  = IT_EQUI-S_MARCA_VEICULO.

*      IF IT_FLEET-I_CAPAC_TANQUE_1 IS INITIAL.
*        IT_M_VEIC_SAAF-I_CAPAC_TANQUE_1 = '0'.
*      ELSE.
*        IT_M_VEIC_SAAF-I_CAPAC_TANQUE_1 = IT_FLEET-I_CAPAC_TANQUE_1.
*      ENDIF.

      IT_M_VEIC_SAAF-I_CAPAC_TANQUE_1 = COND #( WHEN IT_FLEET-S_CAPAC_TANQUE_1 IS INITIAL THEN '0' ELSE IT_FLEET-S_CAPAC_TANQUE_1 ).
      IT_M_VEIC_SAAF-I_CAPAC_TANQUE_2 = COND #( WHEN IT_FLEET-S_CAPAC_TANQUE_2 IS INITIAL THEN '0' ELSE IT_FLEET-S_CAPAC_TANQUE_2 ).
      IT_M_VEIC_SAAF-I_CAPAC_TANQUE_3 = COND #( WHEN IT_FLEET-S_CAPAC_TANQUE_3 IS INITIAL THEN '0' ELSE IT_FLEET-S_CAPAC_TANQUE_3 ).

      CONDENSE IT_M_VEIC_SAAF-I_CAPAC_TANQUE_1.
      CONDENSE IT_M_VEIC_SAAF-I_CAPAC_TANQUE_2.
      CONDENSE IT_M_VEIC_SAAF-I_CAPAC_TANQUE_3.

*      IT_M_VEIC_SAAF-I_CAPAC_TANQUE_2     = '0'.
*      IT_M_VEIC_SAAF-I_CAPAC_TANQUE_3     = '0'.
      IT_M_VEIC_SAAF-I_NUM_DIGI_HODOMETRO = 2.
      IT_M_VEIC_SAAF-I_TIPO_TELEMETRIA    = '1'.
      IT_M_VEIC_SAAF-IB_TELEMETRIA_ATIVA  = 0.
*      IT_M_VEIC_SAAF-I_ID_TELEMETRIA      = '0'.
      IT_M_VEIC_SAAF-IB_ASSOCIAR_COMBOIO  = 0.
      IT_M_VEIC_SAAF-I_IMPRIME_TICKET     = 0.
      IT_M_VEIC_SAAF-I_TIPO_TANQUE_1      = 0.
      IT_M_VEIC_SAAF-I_TIPO_TANQUE_2      = 0.
      IT_M_VEIC_SAAF-I_TIPO_TANQUE_3      = 0.
      IT_M_VEIC_SAAF-IB_CONTROLA_KM       = '1'.
      IT_M_VEIC_SAAF-S_BARCODE            = '0'.
      IT_M_VEIC_SAAF-IB_SOLICITA_COTISTA  = '0'.
      IT_M_VEIC_SAAF-I_TIPO_AUTORIZACAO   = '1'.

      IT_M_VEIC_SAAF-S_PLACA = IT_FLEET-S_PLACA.
      PERFORM FORMATAR_PLACA CHANGING IT_M_VEIC_SAAF-S_PLACA.

      IT_M_VEIC_SAAF-S_GRUPO_COMBUSTIVEL  = LC_COMB.

      LV_LANGU = SY-LANGU.
      REFRESH IT_STATUS.
      CALL FUNCTION 'BAPI_EQUI_GETSTATUS'
        EXPORTING
          EQUIPMENT     = IT_EQUI-S_COD_VEICULO
          LANGUAGE      = LV_LANGU
        TABLES
          SYSTEM_STATUS = IT_STATUS
          USER_STATUS   = IT_USERST.
*
      IT_M_VEIC_SAAF-IB_VEICULO_ATIVO = LC_1.     "Ativo

      LOOP AT IT_STATUS.
        IF IT_STATUS-STATUS = LC_I0076 OR
           IT_STATUS-STATUS = LC_I0320.
          IT_M_VEIC_SAAF-IB_VEICULO_ATIVO = LC_0. "Inativo
        ENDIF.
      ENDLOOP.

      IT_M_VEIC_SAAF-S_DESC_COMB_SECUNDARIO_1 = IT_FLEET-S_DESC_COMB_SECUNDARIO_1.

      TRY.
          IT_M_VEIC_SAAF-S_COD_COMB_SECUNDARIO_1 = IT_T370_MAT[ FLUID_TYPE = IT_M_VEIC_SAAF-S_DESC_COMB_SECUNDARIO_1 ]-MATNR.

        CATCH CX_SY_ITAB_LINE_NOT_FOUND.
          CLEAR IT_M_VEIC_SAAF-S_DESC_COMB_SECUNDARIO_1.
      ENDTRY.

      IT_M_VEIC_SAAF-S_PAIS_VEICULO   = IT_EQUI-S_PAIS_VEICULO.
      IT_M_VEIC_SAAF-S_DIV_1          = COND #( WHEN IT_FLEET-S_DIV_1 IS INITIAL THEN '0' ELSE IT_FLEET-S_DIV_1 ).
      IT_M_VEIC_SAAF-S_DIV_2          = COND #( WHEN IT_FLEET-S_DIV_2 IS INITIAL THEN '0' ELSE IT_FLEET-S_DIV_2 ).
      IT_M_VEIC_SAAF-S_DIV_3          = COND #( WHEN IT_FLEET-S_DIV_3 IS INITIAL THEN '0' ELSE IT_FLEET-S_DIV_3 ).

      LV_X = LC_X.
      LV_002 = LC_002.
      REFRESH: IT_CLASS, IT_OBJECTDATA.
      LV_OBJECT =  IT_EQUI-S_COD_VEICULO.
      CALL FUNCTION 'CLAF_CLASSIFICATION_OF_OBJECTS'
        EXPORTING
          CLASSTEXT          = LV_X
          CLASSTYPE          = '002'
          FEATURES           = LV_X
          LANGUAGE           = SY-LANGU
          OBJECT             = LV_OBJECT
          KEY_DATE           = SY-DATUM
        TABLES
          T_CLASS            = IT_CLASS
          T_OBJECTDATA       = IT_OBJECTDATA
        EXCEPTIONS
          NO_CLASSIFICATION  = 1
          NO_CLASSTYPES      = 2
          INVALID_CLASS_TYPE = 3
          OTHERS             = 4.
      IF SY-SUBRC IS INITIAL.
        READ TABLE IT_CLASS INDEX 1.
        IT_M_VEIC_SAAF-S_PLANO_VEICULO = IT_CLASS-CLASS.
      ENDIF.
*
      REFRESH IT_DIIMPT.
      CALL FUNCTION 'GET_MEASURING_POINTS_4_EQUIPM'
        EXPORTING
          I_EQUNR   = IT_EQUI-S_COD_VEICULO
        TABLES
          ET_DIIMPT = IT_DIIMPT.
      IF NOT IT_DIIMPT[] IS INITIAL.

        TRY.
            IT_M_VEIC_SAAF-S_COD_COMB_PRINCIPAL = IT_DIIMPT[ ATNAM = LC_COMB_APT ]-LOCAS.

            SELECT SINGLE MAKTX
              FROM MAKT
              INTO IT_M_VEIC_SAAF-S_DESC_COMB_PRINCIPAL
             WHERE MATNR = IT_M_VEIC_SAAF-S_COD_COMB_PRINCIPAL. "#EC CI_FLDEXT_OK[2215424]
          CATCH CX_SY_ITAB_LINE_NOT_FOUND.
        ENDTRY.

* se encontrou o Point, busca a KM
        CLEAR LV_POINT.
        READ TABLE IT_DIIMPT INTO WA_DIIMPT WITH KEY PSORT = LC_HORIM.
        IF SY-SUBRC IS INITIAL.
          LV_POINT = WA_DIIMPT-POINT.
        ELSE.
          READ TABLE IT_DIIMPT INTO WA_DIIMPT WITH KEY PSORT = LC_ODOME.
          IF SY-SUBRC IS INITIAL.
            LV_POINT = WA_DIIMPT-POINT.
          ENDIF.
        ENDIF.
*
        IF NOT LV_POINT IS INITIAL.
          CLEAR IT_IMRG_WA.
          CALL FUNCTION 'MEASUREM_DOCUM_READ_LAST_BUF'
            EXPORTING
              POINT   = LV_POINT
            IMPORTING
              IMRG_WA = IT_IMRG_WA
                        EXCEPTIONS
                        IMRG_NOT_FOUND.
          IF SY-SUBRC IS INITIAL.
* Converte para KM
            CALL FUNCTION 'FLTP_CHAR_CONVERSION_FROM_SI'
              EXPORTING
                CHAR_UNIT       = IT_IMRG_WA-RECDU
                FLTP_VALUE_SI   = IT_IMRG_WA-CNTRR
                INDICATOR_VALUE = LC_X
                MASC_SYMBOL     = ' '
              IMPORTING
                CHAR_VALUE      = LV_KM_REAL_CH
              EXCEPTIONS
                NO_UNIT_GIVEN   = 1
                UNIT_NOT_FOUND  = 2
                OTHERS          = 3.
            IF SY-SUBRC IS INITIAL.
              TRANSLATE LV_KM_REAL_CH USING '.,'.
* Esta é a quilometragem atual
              IF WA_DIIMPT-PSORT = LC_HORIM.
                IT_M_VEIC_SAAF-F_HORIMETRO_INICIAL = LV_KM_REAL_CH.
                CONDENSE IT_M_VEIC_SAAF-F_HORIMETRO_INICIAL.
              ELSE.
                IT_M_VEIC_SAAF-F_KM_INICIAL = LV_KM_REAL_CH.
                CONDENSE IT_M_VEIC_SAAF-F_KM_INICIAL.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
* adiciona na View
      APPEND IT_M_VEIC_SAAF.
      CLEAR IT_M_VEIC_SAAF.
    ENDLOOP.
*
* Atualizar a tabela de controle com último código e data da última varredura
* Atualizar tabela ZTPM_EXP_P_SAAF
*    ztpm_exp_p_saaf-tabela     = lc_ztpm_m_veic_saaf.
*    ztpm_exp_p_saaf-codigo     = it_equi-s_cod_veiculo.
*    ztpm_exp_p_saaf-timestamp  = lv_times.
*    MODIFY ztpm_exp_p_saaf.
  ENDIF.
*
ENDFORM.

FORM FORMATAR_PLACA CHANGING P_PLACA.
  REPLACE ALL OCCURRENCES OF '-' IN P_PLACA WITH SPACE.
  REPLACE ALL OCCURRENCES OF '.' IN P_PLACA WITH SPACE.
  REPLACE ALL OCCURRENCES OF '/' IN P_PLACA WITH SPACE.
  REPLACE ALL OCCURRENCES OF ',' IN P_PLACA WITH SPACE.

  P_PLACA = P_PLACA(3) && '-' && P_PLACA+3.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ZF_INSERIR_NOVOS_TABELA_03
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ZF_INSERIR_NOVOS_TABELA_03 .
* Data a partir da qual haverá o processamento
  MOVE IT_EXP_P_SAAF-TIMESTAMP TO LV_TIMESS.
  CONDENSE LV_TIMESS.
  MOVE LV_TIMESS(8) TO LV_DATA.
  MOVE LV_TIMESS+8(6) TO LV_TIME.
* Preservar data/hora do ínício da seleção.
  CONCATENATE SY-DATUM SY-UZEIT INTO LV_TIMES.
*
* Seleciona somente histórico dos campos HERST HERLD TYPBZ
* Equi
  IT_FNAME-FNAME = LC_HERST.
  APPEND IT_FNAME.
  IT_FNAME-FNAME = LC_HERLD.
  APPEND IT_FNAME.
  IT_FNAME-FNAME = LC_TYPBZ.
  APPEND IT_FNAME.
* fleet
  IT_FNAME-FNAME = LC_KEY_NUM.
  APPEND IT_FNAME.
  IT_FNAME-FNAME = LC_LICENSE_NUM.
  APPEND IT_FNAME.
  IT_FNAME-FNAME = LC_FUEL_PRI.
  APPEND IT_FNAME.
  IT_FNAME-FNAME = LC_FUEL_SEC.
  APPEND IT_FNAME.
  IT_FNAME-FNAME = LC_CARD_NUM.
  APPEND IT_FNAME.
  IT_FNAME-FNAME = LC_FLEET_NUM.
  APPEND IT_FNAME.
*
  SORT IT_FNAME ASCENDING BY FNAME.

*  move IT_EXP_P_SAAF-timestamp+8(6) to lv_time.
* Selecionar os registros alterados a partir do último processamennto
  SELECT * INTO TABLE IT_CDHDR
    FROM CDHDR
    WHERE OBJECTCLAS EQ LC_EQUI
      AND UDATE      GE LV_DATA.
  LOOP AT IT_CDHDR.
    IF IT_CDHDR-UDATE = LV_DATA.
      IF IT_CDHDR-UTIME > LV_TIME.
        CONTINUE.
      ELSE.
        DELETE IT_CDHDR.
      ENDIF.
    ENDIF.
  ENDLOOP.
*
  IF NOT IT_CDHDR[] IS INITIAL.
    SELECT * INTO TABLE IT_CDPOS
     FROM CDPOS FOR ALL ENTRIES IN IT_CDHDR
     WHERE OBJECTCLAS EQ LC_EQUI
       AND OBJECTID   EQ IT_CDHDR-OBJECTID
       AND CHANGENR   EQ IT_CDHDR-CHANGENR.
*       AND TABNAME    EQ LC_EQUI.
* Reduzir a it_cdpos
    LOOP AT IT_CDPOS.
      READ TABLE IT_FNAME WITH KEY FNAME = IT_CDPOS-FNAME
      BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        CONTINUE.
      ELSE.
        DELETE IT_CDPOS.
      ENDIF.
    ENDLOOP.
* Selecionar CDHDR a partir da it_cdpos reduzida.
    REFRESH IT_CDHDR.
    SELECT * INTO TABLE IT_CDHDR
      FROM CDHDR FOR ALL ENTRIES IN IT_CDPOS
      WHERE OBJECTCLAS EQ LC_EQUI
        AND OBJECTID   EQ IT_CDPOS-OBJECTID
        AND CHANGENR   EQ IT_CDPOS-CHANGENR.
*
    CLEAR IT_M_VEIC_SAAF.
*
    SORT IT_CDPOS ASCENDING BY OBJECTCLAS OBJECTID.
*
    REFRESH IT_M_VEIC_SAAF.
*
    LOOP AT IT_CDPOS.
*
      IF NOT IT_M_VEIC_SAAF-S_COD_VEICULO =  IT_CDPOS-OBJECTID.
        IF NOT IT_M_VEIC_SAAF-S_COD_VEICULO IS INITIAL.
* adiciona na View
          APPEND IT_M_VEIC_SAAF.
          CLEAR: IT_M_VEIC_SAAF.
        ENDIF.
      ENDIF.
* só os campos que interessam
      IT_M_VEIC_SAAF-S_COD_VEICULO =  IT_CDPOS-OBJECTID.

      CASE IT_CDPOS-FNAME.
        WHEN LC_HERST.
          IT_M_VEIC_SAAF-S_MARCA_VEICULO = IT_CDPOS-VALUE_NEW.
          CONTINUE.
        WHEN LC_HERLD.
          IT_M_VEIC_SAAF-S_PAIS_VEICULO = IT_CDPOS-VALUE_NEW.
          CONTINUE.
        WHEN LC_TYPBZ.
          IT_M_VEIC_SAAF-S_MODELO_VEICULO = IT_CDPOS-VALUE_NEW.
          CONTINUE.
        WHEN LC_KEY_NUM.
          IT_M_VEIC_SAAF-I_CAPAC_TANQUE_1 = IT_CDPOS-VALUE_NEW.
          CONTINUE.
        WHEN LC_LICENSE_NUM.
          IT_M_VEIC_SAAF-S_PLACA = IT_CDPOS-VALUE_NEW.
          CONTINUE.
        WHEN LC_FUEL_PRI.
          IT_M_VEIC_SAAF-S_DESC_COMB_PRINCIPAL = IT_CDPOS-VALUE_NEW.
          CONTINUE.
        WHEN LC_FUEL_SEC.
          IT_M_VEIC_SAAF-S_DESC_COMB_SECUNDARIO_1 = IT_CDPOS-VALUE_NEW.
          CONTINUE.
        WHEN LC_CARD_NUM.
          IT_M_VEIC_SAAF-S_DIV_1 = IT_CDPOS-VALUE_NEW.
          CONTINUE.
        WHEN LC_FLEET_NUM.
          IT_M_VEIC_SAAF-S_DIV_2 = IT_CDPOS-VALUE_NEW.
          CONTINUE.
        WHEN OTHERS. DELETE IT_CDPOS.
      ENDCASE.
*
    ENDLOOP.
*
    IF IT_M_VEIC_SAAF-S_COD_VEICULO =  IT_CDPOS-OBJECTID.
      IF NOT IT_M_VEIC_SAAF-S_COD_VEICULO IS INITIAL.
* adiciona na View
        APPEND IT_M_VEIC_SAAF.
        CLEAR: IT_M_VEIC_SAAF.
      ENDIF.
    ENDIF.
*
  ENDIF.
* Atualizar a tabela de controle com último código e data da última varredura
* Atualizar tabela ZTPM_EXP_P_SAAF
  ZTPM_EXP_P_SAAF-TABELA     = LC_ZTPM_M_VEIC_SAAF.
  CLEAR ZTPM_EXP_P_SAAF-CODIGO.
  ZTPM_EXP_P_SAAF-TIMESTAMP  = LV_TIMES.
  MODIFY ZTPM_EXP_P_SAAF.
*
ENDFORM.
