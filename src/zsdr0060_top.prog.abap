*&---------------------------------------------------------------------*
*&  Include           ZSDR0060_TOP
*&---------------------------------------------------------------------*

TYPES: BEGIN OF TY_HEADER_LOTE,
         MARCA        TYPE ZSDT0129-MARCA,
         PLACA_CAV    TYPE ZSDT0129-PLACA_CAV,
         PLACA_CAR1   TYPE ZSDT0129-PLACA_CAR1,
         PLACA_CAR2   TYPE ZSDT0129-PLACA_CAR1,
         MOTORISTA    TYPE ZSDT0129-MOTORISTA,
         MOT_DESC     TYPE LFA1-NAME1,
         STCD2        TYPE LFA1-STCD2,
         TELF1        TYPE LFA1-TELF1,
         QTD_TOTAL_KG TYPE ZSDT0129-QTD_TOTAL_KG,
         CTG_TRANSP   TYPE ZSDT0129-CTG_TRANSP,
         CTG_TRANSP_D TYPE CHAR10,
         INCO1        TYPE ZSDT0129-INCO1,
         WRKST        TYPE MARA-WRKST,
         DT_ENTREGA   TYPE ZSDT0129-DT_ENTREGA.
TYPES: END OF TY_HEADER_LOTE.

TYPES: BEGIN OF TY_HEADER_CARGAD,
         COD_CE TYPE LFA1-LIFNR,
         NAME1  TYPE LFA1-NAME1,
         COD_TR TYPE LFA1-LIFNR,
         NAME2  TYPE LFA1-NAME1,
         VBELN  TYPE ZSDT0082-VBELN.
TYPES: END OF TY_HEADER_CARGAD.

TYPES: BEGIN OF TY_HEADER_OVS,
         PTO_COL TYPE LFA1-LIFNR,
         PTO_ENT TYPE KNA1-KUNNR,
         PRC_FRT TYPE ZSDT0133-PRECO_FRETE.
TYPES:  END OF TY_HEADER_OVS.

TYPES: BEGIN OF TY_F4_LOC_EMB,
         LIFNR        TYPE ZSDT0132-LIFNR,
         COD_LOC_EMB  TYPE ZSDT0132-NR_ROT,
         LOCAL_EMBARQ TYPE ZSDT0132-ROT_DESC.
TYPES: END OF TY_F4_LOC_EMB.

DATA: WA_HEADER_LOTE   TYPE TY_HEADER_LOTE,
      WA_HEADER_CARGAD TYPE TY_HEADER_CARGAD,
      WA_HEADER_OVS    TYPE TY_HEADER_OVS.

**&---------------------------------------------------------------------*
**&      Form  SORT
**&---------------------------------------------------------------------*
*FORM SORT USING P_FIELDNAME
*          CHANGING P_IT_SORT TYPE LVC_T_SORT.
*
*  DATA WA_SORT TYPE LVC_S_SORT.
*
*  WA_SORT-SPOS = '1' .
*  WA_SORT-FIELDNAME = P_FIELDNAME.
*  WA_SORT-UP = 'X' . "A to Z
*  WA_SORT-DOWN = SPACE .
*  APPEND WA_SORT TO P_IT_SORT.
*
*ENDFORM.
*
**&---------------------------------------------------------------------*
**&      Form  FILL_IT_FIELDCATALOG
**&---------------------------------------------------------------------*
*FORM FILL_IT_FIELDCATALOG  TABLES P_IT_FIELDACATALOG STRUCTURE LVC_S_FCAT
*                           USING VALUE(P_COLNUM)
*                                 VALUE(P_FIELDNAME)
*                                 VALUE(P_TABNAME)
*                                 VALUE(P_EMPHASIZE)
*                                 VALUE(P_EDIT)
*                                 VALUE(P_ICON)
*                                 VALUE(P_HOTSPOT)
*                                 VALUE(P_OPT)
*                                 VALUE(P_CHECKBOX)
*                                 VALUE(P_DOSUM)
*                                 VALUE(P_F4)
*                                 VALUE(P_HEADER).
*
*  DATA: WA_FIELDCATALOG TYPE LVC_S_FCAT.
*
*  WA_FIELDCATALOG-COL_POS    = P_COLNUM.
*  WA_FIELDCATALOG-FIELDNAME  = P_FIELDNAME.
*  WA_FIELDCATALOG-TABNAME    = P_TABNAME.
*  WA_FIELDCATALOG-EMPHASIZE  = P_EMPHASIZE.
*  WA_FIELDCATALOG-COLTEXT    = P_HEADER.
*  WA_FIELDCATALOG-EDIT       = P_EDIT.
*  WA_FIELDCATALOG-ICON       = P_ICON.
*  WA_FIELDCATALOG-REF_TABLE  = P_TABNAME.
*  WA_FIELDCATALOG-HOTSPOT    = P_HOTSPOT.
*  WA_FIELDCATALOG-COL_OPT    = P_OPT.
*  WA_FIELDCATALOG-CHECKBOX   = P_CHECKBOX.
*  WA_FIELDCATALOG-DO_SUM   = P_DOSUM.
*  WA_FIELDCATALOG-F4AVAILABL     = P_F4.
*  APPEND WA_FIELDCATALOG TO P_IT_FIELDACATALOG.
*
*ENDFORM.
*
**&---------------------------------------------------------------------*
**&      Form  EXCLUIR_BOTOES
**&---------------------------------------------------------------------*
*FORM EXCLUIR_BOTOES CHANGING P_IT_EXCLUDE TYPE UI_FUNCTIONS.
*
*  DATA: LS_EXCLUDE     TYPE UI_FUNC.
*
*  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
*  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
*  CLEAR LS_EXCLUDE.
*  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
*  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
*  CLEAR LS_EXCLUDE.
*  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
*  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
*  CLEAR LS_EXCLUDE.
*  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
*  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
*  CLEAR LS_EXCLUDE.
*  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
*  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
*  CLEAR LS_EXCLUDE.
*  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
*  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
*  CLEAR LS_EXCLUDE.
*  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
*  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
*  CLEAR LS_EXCLUDE.
*  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
*  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
*  CLEAR LS_EXCLUDE.
*  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
*  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
*  CLEAR LS_EXCLUDE.
*  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_PRINT.
*  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
*  CLEAR LS_EXCLUDE.
*  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_REFRESH.
*  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
*  CLEAR LS_EXCLUDE.
*  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_CHECK.
*  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
*  CLEAR LS_EXCLUDE.
*  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_GRAPH.
*  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
*  CLEAR LS_EXCLUDE.
*  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_INFO.
*  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
*  CLEAR LS_EXCLUDE.
*
*ENDFORM.
*
**&---------------------------------------------------------------------*
**&      Form  CHAMA_TEXTO_OBS
**&---------------------------------------------------------------------*
*FORM CHAMA_TEXTO_OBS USING WL_NAME TYPE THEAD-TDNAME.
*
*  DATA: IT_TEXTO TYPE STANDARD TABLE OF TLINE,
*        WA_TEXTO TYPE TLINE,
*        TL_TEXTO TYPE CATSXT_LONGTEXT_ITAB,
*        WL_TEXTO TYPE LINE OF CATSXT_LONGTEXT_ITAB.
*
*  CALL FUNCTION 'READ_TEXT'
*    EXPORTING
*      ID        = 'OBSE'
*      LANGUAGE  = SY-LANGU
*      NAME      = WL_NAME
*      OBJECT    = 'ZTEXTO'
*    TABLES
*      LINES     = IT_TEXTO
*    EXCEPTIONS
*      ID        = 1
*      LANGUAGE  = 2
*      NAME      = 3
*      NOT_FOUND = 4
*      OTHERS    = 5.
*
*  IF SY-SUBRC IS INITIAL.
*    LOOP AT IT_TEXTO INTO WA_TEXTO.
*      MOVE: WA_TEXTO-TDLINE TO WL_TEXTO.
*      APPEND WL_TEXTO TO TL_TEXTO.
*      CLEAR: WL_TEXTO.
*    ENDLOOP.
*  ENDIF.
*
*  CALL FUNCTION 'CATSXT_SIMPLE_TEXT_EDITOR'
*    EXPORTING
*      IM_TITLE        = 'Observação'
*      IM_DISPLAY_MODE = 'X'
*    CHANGING
*      CH_TEXT         = TL_TEXTO.
*
*ENDFORM.
*
**&---------------------------------------------------------------------*
**&      Form  CHAMA_TEXTO_ROT
**&---------------------------------------------------------------------*
*FORM CHAMA_TEXTO_ROT USING WL_NAME TYPE THEAD-TDNAME.
*
*  DATA: IT_TEXTO TYPE STANDARD TABLE OF TLINE,
*        WA_TEXTO TYPE TLINE,
*        TL_TEXTO TYPE CATSXT_LONGTEXT_ITAB,
*        WL_TEXTO TYPE LINE OF CATSXT_LONGTEXT_ITAB.
*
*  CALL FUNCTION 'READ_TEXT'
*    EXPORTING
*      ID        = 'ZROT'
*      LANGUAGE  = SY-LANGU
*      NAME      = WL_NAME
*      OBJECT    = 'ZSDROTEIRO'
*    TABLES
*      LINES     = IT_TEXTO
*    EXCEPTIONS
*      ID        = 1
*      LANGUAGE  = 2
*      NAME      = 3
*      NOT_FOUND = 4
*      OTHERS    = 5.
*
*  IF SY-SUBRC IS INITIAL.
*    LOOP AT IT_TEXTO INTO WA_TEXTO.
*      MOVE: WA_TEXTO-TDLINE TO WL_TEXTO.
*      APPEND WL_TEXTO TO TL_TEXTO.
*      CLEAR: WL_TEXTO.
*    ENDLOOP.
*  ENDIF.
*
*  CALL FUNCTION 'CATSXT_SIMPLE_TEXT_EDITOR'
*    EXPORTING
*      IM_TITLE        = 'Roteiro'
*      IM_DISPLAY_MODE = 'X'
*    CHANGING
*      CH_TEXT         = TL_TEXTO.
*
*ENDFORM.
*
**&---------------------------------------------------------------------*
**&      Form  CHAMA_ANEXO
**&---------------------------------------------------------------------*
*FORM CHAMA_ANEXO USING WA_BOR TYPE BORIDENT.
*
*  DATA: ANEXO_OBJ  TYPE REF TO CL_GOS_MANAGER.
*
*  CREATE OBJECT ANEXO_OBJ TYPE CL_GOS_MANAGER.
*
*  ANEXO_OBJ->SET_RW_MODE( IP_MODE = 'R' ).
*
*  ANEXO_OBJ->START_SERVICE_DIRECT(
*    EXPORTING
*      IP_SERVICE         = 'VIEW_ATTA'
*      IS_OBJECT          = WA_BOR
*    EXCEPTIONS
*      NO_OBJECT          = 1
*      OBJECT_INVALID     = 2
*      EXECUTION_FAILED   = 3
*      OTHERS             = 4 ).
*
*  COMMIT WORK.
*
*  CLEAR: WA_BOR.
*
*ENDFORM.
*
**&---------------------------------------------------------------------*
**&      Form  COMPLETA_MOTORISTA
**&---------------------------------------------------------------------*
*FORM COMPLETA_MOTORISTA CHANGING WA_HEADER_LOTE TYPE TY_HEADER_LOTE.
*
*  DATA: WA_LFA1 TYPE LFA1.
*
*  SELECT SINGLE *
*    FROM LFA1
*    INTO  WA_LFA1
*    WHERE LIFNR EQ WA_HEADER_LOTE-MOTORISTA.
*
*  WA_HEADER_LOTE-TELF1 = WA_LFA1-TELF1.
*  WA_HEADER_LOTE-STCD2 = WA_LFA1-STCD2.
*  WA_HEADER_LOTE-MOT_DESC = WA_LFA1-NAME1.
*
*ENDFORM.
*
**&---------------------------------------------------------------------*
**&      Form  F4_LOCAL_EMBARQUE
**&---------------------------------------------------------------------*
*FORM F4_LOCAL_EMBARQUE USING: ER_EVENT_DATA TYPE REF TO CL_ALV_EVENT_DATA
*                              ES_ROW_NO TYPE LVC_S_ROID.
*
*  DATA: IT_RET TYPE STANDARD TABLE OF DDSHRETVAL,
*        IT_F4  TYPE STANDARD TABLE OF TY_F4_LOC_EMB.
*
*  DATA: IT_ZSDT0132_F4 TYPE STANDARD TABLE OF ZSDT0132,
*        WA_ZSDT0132_F4 TYPE ZSDT0132.
*
*  DATA: WA_F4   TYPE TY_F4_LOC_EMB,
*        WA_RET  TYPE DDSHRETVAL,
*        WA_MODI TYPE LVC_S_MODI.
*
*  FIELD-SYMBOLS: <ITAB> TYPE LVC_T_MODI.
*
*  DATA : IT_FMAP TYPE STANDARD TABLE OF DSELC,
*         WA_FMAP TYPE DSELC.
*
*  WA_FMAP-FLDNAME = 'F0001'.
*  WA_FMAP-DYFLDNAME = 'LIFNR'.
*  APPEND WA_FMAP TO IT_FMAP.
*  WA_FMAP-FLDNAME = 'F0002'.
*  WA_FMAP-DYFLDNAME = 'COD_LOC_EMB'.
*  APPEND WA_FMAP TO IT_FMAP.
*  WA_FMAP-FLDNAME = 'F0003'.
*  WA_FMAP-DYFLDNAME = 'LOCAL_EMBARQ'.
*  APPEND WA_FMAP TO IT_FMAP.
*
*  SELECT *
*    FROM ZSDT0132
*    INTO TABLE IT_ZSDT0132_F4
*    WHERE MARCA  EQ WA_HEADER_LOTE-WRKST
*      AND STATUS NE 'I'.
*
*  LOOP AT IT_ZSDT0132_F4 INTO WA_ZSDT0132_F4.
*    WA_F4-LIFNR = WA_ZSDT0132_F4-LIFNR.
*    WA_F4-COD_LOC_EMB = WA_ZSDT0132_F4-NR_ROT.
*    WA_F4-LOCAL_EMBARQ = WA_ZSDT0132_F4-ROT_DESC.
*    APPEND WA_F4 TO IT_F4.
*  ENDLOOP.
*
*  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
*    EXPORTING
*      RETFIELD        = 'LIFNR'
*      WINDOW_TITLE    = 'Lista de Locais'(002)
*      VALUE_ORG       = 'S'
*      DYNPROFIELD     = 'LIFNR'
*    TABLES
*      VALUE_TAB       = IT_F4
*      RETURN_TAB      = IT_RET
*      DYNPFLD_MAPPING = IT_FMAP
*    EXCEPTIONS
*      PARAMETER_ERROR = 1
*      NO_VALUES_FOUND = 2
*      OTHERS          = 3.
*
*  IF SY-SUBRC = 0.
*    ASSIGN ER_EVENT_DATA->M_DATA->* TO <ITAB>.
*    READ TABLE IT_RET INTO WA_RET INDEX 1.
*    WA_MODI-ROW_ID   = ES_ROW_NO-ROW_ID.
*    WA_MODI-FIELDNAME = 'LIFNR'.
*    WA_MODI-VALUE     = WA_RET-FIELDVAL.
*    APPEND WA_MODI TO <ITAB>.
*    READ TABLE IT_RET INTO WA_RET INDEX 3.
*    WA_MODI-FIELDNAME = 'LOCAL_EMBARQ'.
*    WA_MODI-VALUE     = WA_RET-FIELDVAL.
*    APPEND WA_MODI TO <ITAB>.
*    READ TABLE IT_RET INTO WA_RET INDEX 2.
*    WA_MODI-FIELDNAME = 'COD_LOC_EMB'.
*    WA_MODI-VALUE     = WA_RET-FIELDVAL.
*    APPEND WA_MODI TO <ITAB>.
*  ENDIF.
*
*  ER_EVENT_DATA->M_EVENT_HANDLED = 'X'. "(to inform grid that f4 was handled manually)
*
*ENDFORM.
*
**&---------------------------------------------------------------------*
**&      Form  VALIDA_PLACA
**&---------------------------------------------------------------------*
*FORM VALIDA_PLACA_SEMENTES USING VALUE(P_PLACA)
*                                 VALUE(P_TPVEICULO)
*                           CHANGING VL_CHECK TYPE CHAR1.
*
*  DATA: WA_ZLEST0002 TYPE ZLEST0002,
*        VL_RENAVAM   TYPE ZLEST0002-CD_RENAVAM.
*
*  SELECT SINGLE *
*        FROM ZLEST0002
*        INTO WA_ZLEST0002
*        WHERE PC_VEICULO EQ P_PLACA
*          AND TP_VEICULO EQ P_TPVEICULO.
*
*  IF WA_ZLEST0002 IS NOT INITIAL.
*    IF WA_ZLEST0002-QT_EIXO = 0.
*      MESSAGE TEXT-080 TYPE 'S' DISPLAY LIKE 'E'.
*      VL_CHECK = ABAP_TRUE.
*    ELSE.
*      VL_RENAVAM = STRLEN( WA_ZLEST0002-CD_RENAVAM ).
*      IF VL_RENAVAM NOT BETWEEN 9 AND 11.
*        MESSAGE TEXT-081 TYPE 'S' DISPLAY LIKE 'E'.
*        VL_CHECK = ABAP_TRUE.
*      ENDIF.
*    ENDIF.
*  ELSE.
*    MESSAGE TEXT-082 TYPE 'S' DISPLAY LIKE 'E'.
*    VL_CHECK = ABAP_TRUE.
*  ENDIF.
*
*ENDFORM.
*
**&---------------------------------------------------------------------*
**&      Form  VALIDA_PLACA
**&---------------------------------------------------------------------*
*FORM VALIDA_PLACA_SEMENTES_2 USING VALUE(P_TPVEICULO)
*                             CHANGING WA_CARGA-PLACA TYPE ZLEST0002-PC_VEICULO
*                                      VL_CHECK TYPE CHAR1.
*
*  DATA: WA_ZLEST0002 TYPE ZLEST0002,
*        VL_RENAVAM   TYPE ZLEST0002-CD_RENAVAM.
*
*  CLEAR: VL_CHECK.
*
*  SELECT SINGLE *
*        FROM ZLEST0002
*        INTO WA_ZLEST0002
*        WHERE PC_VEICULO EQ WA_CARGA-PLACA
*          AND TP_VEICULO EQ P_TPVEICULO.
*
*  IF WA_ZLEST0002 IS NOT INITIAL.
*    IF WA_ZLEST0002-QT_EIXO = 0.
*      MESSAGE TEXT-080 TYPE 'S' DISPLAY LIKE 'E'.
*      VL_CHECK = ABAP_TRUE.
*      CLEAR: WA_CARGA-PLACA.
*    ELSE.
*      VL_RENAVAM = STRLEN( WA_ZLEST0002-CD_RENAVAM ).
*      IF VL_RENAVAM NOT BETWEEN 9 AND 11.
*        MESSAGE TEXT-081 TYPE 'S' DISPLAY LIKE 'E'.
*        VL_CHECK = ABAP_TRUE.
*        CLEAR: WA_CARGA-PLACA.
*      ENDIF.
*    ENDIF.
*  ELSE.
*    MESSAGE TEXT-082 TYPE 'S' DISPLAY LIKE 'E'.
*    VL_CHECK = ABAP_TRUE.
*    CLEAR: WA_CARGA-PLACA.
*  ENDIF.
*
*ENDFORM.
