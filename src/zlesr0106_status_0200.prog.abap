*----------------------------------------------------------------------*
***INCLUDE ZLESR0105_STATUS_0200.
*----------------------------------------------------------------------*

CLASS LCL_EVENT_RECEIVER_0202 DEFINITION DEFERRED.

DATA: CONTAINER_0202      TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      WA_LAYOUT_0202      TYPE LVC_S_LAYO,
      WA_STABLE_0202      TYPE LVC_S_STBL,
      IT_FIELDCAT_0202    TYPE LVC_T_FCAT,
      WA_VARIANT_0202     TYPE DISVARIANT,
      CL_GRID_0202        TYPE REF TO CL_GUI_ALV_GRID,
      IT_FUNCTION_0202    TYPE UI_FUNCTIONS,
      GS_SCROLL_COL_0202  TYPE LVC_S_COL,
      GS_SCROLL_ROW_0202  TYPE LVC_S_ROID,
      LC_SAIDA            TYPE REF TO ZCL_FERROVIARIO_SAIDA,
      EVENT_RECEIVER_0202 TYPE REF TO LCL_EVENT_RECEIVER_0202.

CLASS LCL_EVENT_RECEIVER_0202 DEFINITION.
  PUBLIC SECTION.
    METHODS HANDLE_ONDROP FOR EVENT ONDROP OF CL_GUI_ALV_GRID IMPORTING E_ROW E_COLUMN ES_ROW_NO E_DRAGDROPOBJ.
    METHODS HANDLE_DATA_CHANGED FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID IMPORTING ER_DATA_CHANGED.
    METHODS HANDLE_AFTER_USER_COMMAND FOR EVENT AFTER_USER_COMMAND OF CL_GUI_ALV_GRID IMPORTING E_UCOMM.
    METHODS HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID IMPORTING E_UCOMM.
ENDCLASS.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0200 OUTPUT.

  DATA: I_DCL	     TYPE ZDCL,
        I_SERIE	   TYPE ZSERIEDCL,
        I_ID_VAGAO TYPE ZIDVAGAO,
        I_CNPJ     TYPE ZCNPJFERRO,
        W_NOTAS	   TYPE ZLEST0019_L2_30,
        I_NOTAS	   TYPE ZDE_ZLEST0019_L2_30_T,
        IT_EXCLUIR TYPE TABLE OF SY-UCOMM.

  DATA: SAIDA            TYPE REF TO ZCL_FERROVIARIO_SAIDA,
        HIERARCHY_HEADER TYPE TREEV_HHDR.

  IF SB_TELA_0200 IS INITIAL.
    SB_TELA_0200 = '0201'.
  ENDIF.

  CLEAR: IT_EXCLUIR.
  IF CK_IMPORTANDO_ARQUIVO EQ ABAP_TRUE.
    APPEND 'ADD_DCL' TO IT_EXCLUIR.
    APPEND 'REFRESH' TO IT_EXCLUIR.
    APPEND 'DELETAR' TO IT_EXCLUIR.
  ENDIF.

  SET PF-STATUS 'PF0200' EXCLUDING IT_EXCLUIR.
  SET TITLEBAR 'TL0200'.

  IF PLANILHA IS INITIAL.
    PERFORM GERAR_PLANILHA_VAGOES USING ABAP_FALSE.
  ENDIF.

  IF DOCKING IS INITIAL.

    IF CK_DOCKING_CREATE EQ ABAP_TRUE.

      CREATE OBJECT DOCKING
        EXPORTING
          REPID     = SY-REPID
          DYNNR     = SY-DYNNR
          SIDE      = DOCKING->DOCK_AT_LEFT
          EXTENSION = 420.

      CREATE OBJECT DG_SPLITTER_DOC
        EXPORTING
          PARENT  = DOCKING
          ROWS    = 2
          COLUMNS = 1.

      CALL METHOD DG_SPLITTER_DOC->GET_CONTAINER
        EXPORTING
          ROW       = 1
          COLUMN    = 1
        RECEIVING
          CONTAINER = DATA(CONTAINER_VAGOES).

      CALL METHOD DG_SPLITTER_DOC->GET_CONTAINER
        EXPORTING
          ROW       = 2
          COLUMN    = 1
        RECEIVING
          CONTAINER = DATA(CONTAINER_NOTAS).

      HIERARCHY_HEADER-HEADING = TEXT-024.
      HIERARCHY_HEADER-WIDTH   = 50.

      "Ponto de Transbordo e Notas
      CREATE OBJECT TREE_DCLS
        EXPORTING
          PARENT                = CONTAINER_VAGOES
          NODE_SELECTION_MODE   = TREE_DCLS->NODE_SEL_MODE_MULTIPLE
          ITEM_SELECTION        = 'X'
          HIERARCHY_COLUMN_NAME = C_TREE_DCLS-COLUMN1
          HIERARCHY_HEADER      = HIERARCHY_HEADER.

      CALL METHOD TREE_DCLS->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE_DCLS-COLUMN3
          ALIGNMENT   = CL_GUI_COLUMN_TREE=>ALIGN_CENTER
          WIDTH       = 20
          HEADER_TEXT = TEXT-018.

      CALL METHOD TREE_DCLS->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE_DCLS-COLUMN4
          ALIGNMENT   = CL_GUI_COLUMN_TREE=>ALIGN_AT_RIGHT
          WIDTH       = 20
          HEADER_TEXT = TEXT-017.

      CALL METHOD TREE_DCLS->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE_DCLS-COLUMN8
          HIDDEN      = ABAP_TRUE
          WIDTH       = 20
          HEADER_TEXT = TEXT-020.

      CALL METHOD TREE_DCLS->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE_DCLS-COLUMN9
          HIDDEN      = ABAP_TRUE
          WIDTH       = 20
          HEADER_TEXT = TEXT-020.

      CALL METHOD TREE_DCLS->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE_DCLS-COLUMN10
          HIDDEN      = ABAP_TRUE
          WIDTH       = 20
          HEADER_TEXT = TEXT-020.

      CALL METHOD TREE_DCLS->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE_DCLS-COLUMN11
          HIDDEN      = ABAP_TRUE
          WIDTH       = 20
          HEADER_TEXT = TEXT-020.

      HIERARCHY_HEADER-HEADING = TEXT-014.
      HIERARCHY_HEADER-WIDTH   = 50.

      "Ponto de Transbordo e Notas
      CREATE OBJECT TREE
        EXPORTING
          PARENT                = CONTAINER_NOTAS
          NODE_SELECTION_MODE   = TREE->NODE_SEL_MODE_MULTIPLE
          ITEM_SELECTION        = 'X'
          HIERARCHY_COLUMN_NAME = C_TREE-COLUMN1
          HIERARCHY_HEADER      = HIERARCHY_HEADER.

      CALL METHOD TREE->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE-COLUMN4
          ALIGNMENT   = CL_GUI_COLUMN_TREE=>ALIGN_AT_RIGHT
          WIDTH       = 18
          HEADER_TEXT = TEXT-025.

      CALL METHOD TREE->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE-COLUMN5
          ALIGNMENT   = CL_GUI_COLUMN_TREE=>ALIGN_CENTER
          WIDTH       = 20
          HEADER_TEXT = TEXT-026.

      CALL METHOD TREE->ADD_COLUMN
        EXPORTING
          NAME        = C_TREE-COLUMN6
          HIDDEN      = ABAP_TRUE
          WIDTH       = 20
          HEADER_TEXT = TEXT-020.

      CREATE OBJECT G_APPLICATION.
      SET HANDLER G_APPLICATION->HANDLE_NODE_DOUBLE_CLICK  FOR TREE.
      SET HANDLER G_APPLICATION->HANDLE_ITEM_DOUBLE_CLICK  FOR TREE.
      SET HANDLER G_APPLICATION->HANDLE_EXPAND_NO_CHILDREN FOR TREE.
      SET HANDLER G_APPLICATION->HANDLE_LINK_CLICK         FOR TREE.
      SET HANDLER G_APPLICATION->HANDLE_BUTTON_CLICK       FOR TREE.
      SET HANDLER G_APPLICATION->HANDLE_CHECKBOX_CHANGE    FOR TREE.

* register events
      PERFORM REGISTER_EVENTS.
* set handler for tree1
      CREATE OBJECT TREE_EVENT_RECEIVER.
      SET HANDLER TREE_EVENT_RECEIVER->HANDLE_DOUBLE_CLICK FOR TREE.
      SET HANDLER TREE_EVENT_RECEIVER->HANDLE_ON_DRAG FOR TREE.
      SET HANDLER TREE_EVENT_RECEIVER->HANDLE_ON_DRAG_MULTIPLE FOR TREE.

      CREATE OBJECT TREE_EVENT_RECEIVER2.
      SET HANDLER TREE_EVENT_RECEIVER2->HANDLE_ON_DRAG_MULTIPLE FOR TREE_DCLS.

      G_DROPEFFECT = CL_DRAGDROP=>MOVE.

      "Drag and Drop TREE """""""""""""""""""""""""""""""""""""""""""""
      CREATE OBJECT DRAGDROP_TREE.

      CALL METHOD DRAGDROP_TREE->ADD
        EXPORTING
          FLAVOR     = 'LINE'
          DRAGSRC    = 'X'
          DROPTARGET = ''
          EFFECT     = G_DROPEFFECT.

      CALL METHOD DRAGDROP_TREE->GET_HANDLE
        IMPORTING
          HANDLE = G_HANDLE_TREE.

      "Drag and Drop ALV """"""""""""""""""""""""""""""""""""""""""""""
      CREATE OBJECT DRAGDROP_ALV.

      CALL METHOD DRAGDROP_ALV->ADD
        EXPORTING
          FLAVOR     = 'LINE'
          DRAGSRC    = ''
          DROPTARGET = 'X'
          EFFECT     = G_DROPEFFECT.

      CALL METHOD DRAGDROP_ALV->GET_HANDLE
        IMPORTING
          HANDLE = G_HANDLE_ALV.

      PERFORM MONTA_SAIDA.
      PERFORM MONTA_SAIDA_DCL.

    ENDIF.

  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0200_EXIT INPUT.

  DATA: ANSWER TYPE C.

  ANSWER = '1'.

  IF PLANILHA->VERIFICA_ALTEROU( ) EQ ABAP_TRUE.

    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        TITLEBAR              = TEXT-010
        TEXT_QUESTION         = TEXT-011
        TEXT_BUTTON_1         = TEXT-012
        ICON_BUTTON_1         = 'ICON_CHECKED'
        TEXT_BUTTON_2         = TEXT-013
        ICON_BUTTON_2         = 'ICON_INCOMPLETE'
        DEFAULT_BUTTON        = '2'
        DISPLAY_CANCEL_BUTTON = ' '
      IMPORTING
        ANSWER                = ANSWER
      EXCEPTIONS
        TEXT_NOT_FOUND        = 1
        OTHERS                = 2.

    IF SY-SUBRC IS NOT INITIAL.
      EXIT.
    ENDIF.
  ENDIF.

  CHECK ANSWER EQ '1'.

  PERFORM LIMPAR_TELA_0200 USING ABAP_TRUE.

  LEAVE TO SCREEN 0.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  REGISTER_EVENTS
*&---------------------------------------------------------------------*
FORM REGISTER_EVENTS.
  DATA: LT_EVENTS TYPE CNTL_SIMPLE_EVENTS,
        L_EVENT   TYPE CNTL_SIMPLE_EVENT.
* define the events which will be passed to the backend
  CLEAR L_EVENT.
  L_EVENT-EVENTID = CL_GUI_COLUMN_TREE=>EVENTID_NODE_DOUBLE_CLICK.
  L_EVENT-APPL_EVENT = 'X'.
  APPEND L_EVENT TO LT_EVENTS.
  CLEAR L_EVENT.
  L_EVENT-EVENTID = CL_GUI_COLUMN_TREE=>EVENTID_EXPAND_NO_CHILDREN.
  APPEND L_EVENT TO LT_EVENTS.
  CLEAR L_EVENT.
  L_EVENT-EVENTID = CL_GUI_COLUMN_TREE=>EVENTID_HEADER_CLICK.
  APPEND L_EVENT TO LT_EVENTS.
  CLEAR L_EVENT.
* register events
  CALL METHOD TREE->SET_REGISTERED_EVENTS
    EXPORTING
      EVENTS                    = LT_EVENTS
    EXCEPTIONS
      CNTL_ERROR                = 1
      CNTL_SYSTEM_ERROR         = 2
      ILLEGAL_EVENT_COMBINATION = 3.
  IF SY-SUBRC <> 0.
    MESSAGE X534(0K).
  ENDIF.
ENDFORM.                               " REGISTER_EVENTS

*&---------------------------------------------------------------------*
*&      Form  MONTA_SAIDA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM MONTA_SAIDA .

  DATA: CNODE       TYPE TREEV_NODE,
        NODE        TYPE TREEV_NODE,
        ITEM        TYPE MTREEITM,
        QTD_ITENS   TYPE I,
        LC_CNPJ(18).

  CLEAR: NODE_TABLE,
         ITEM_TABLE,
         NODE_TABLE[],
         ITEM_TABLE[].

  TREE->DELETE_ALL_NODES( ).
  DATA(IT_RETORNO_TRANBORDO)  = IT_RETORNO[].
  DATA(IT_RETORNO_NOTAS) = IT_RETORNO[].
  SORT IT_RETORNO_TRANBORDO BY PONTOTRANSB.
  DELETE ADJACENT DUPLICATES FROM IT_RETORNO_TRANBORDO COMPARING PONTOTRANSB.
  SORT IT_RETORNO_NOTAS BY DOCNUM.
  DELETE ADJACENT DUPLICATES FROM IT_RETORNO_NOTAS COMPARING DOCNUM.

  QTD_ITENS = 0.

  LOOP AT IT_RETORNO_TRANBORDO INTO DATA(WA_RETORNO_TRANBORDO).
    ADD 1 TO QTD_ITENS.
    CLEAR: CNODE.
    CNODE-NODE_KEY   = QTD_ITENS.

    CONDENSE CNODE-NODE_KEY NO-GAPS.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = CNODE-NODE_KEY
      IMPORTING
        OUTPUT = CNODE-NODE_KEY.

    CNODE-HIDDEN     = ' '.                 " The node is visible,
    CNODE-DISABLED   = ' '.                 " selectable,
    CNODE-ISFOLDER   = 'X'.                 " a folder.
    CNODE-EXPANDER   = ' '.
    CNODE-N_IMAGE    = ICON_AGENT.
    CNODE-EXP_IMAGE  = ICON_AGENT.
    CNODE-DRAGDROPID = G_HANDLE_TREE.
    APPEND CNODE TO NODE_TABLE.

    CLEAR ITEM.
    ITEM-NODE_KEY  = CNODE-NODE_KEY.
    ITEM-ITEM_NAME = C_TREE-COLUMN1.
    ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_FONT_DEFAULT. " Text Item
    ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
    ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_INTENSIFIED.
    ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
    CONCATENATE WA_RETORNO_TRANBORDO-TRANSB_RSOCIAL WA_RETORNO_TRANBORDO-PONTOTRANSB INTO ITEM-TEXT SEPARATED BY ' - '.
    APPEND ITEM TO ITEM_TABLE.

    LOOP AT IT_RETORNO_NOTAS INTO DATA(WA_RETORNO_NOTAS) WHERE PONTOTRANSB EQ WA_RETORNO_TRANBORDO-PONTOTRANSB.
      ADD 1 TO QTD_ITENS.
      CLEAR: NODE.
      NODE-NODE_KEY   = QTD_ITENS.

      CONDENSE NODE-NODE_KEY NO-GAPS.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = NODE-NODE_KEY
        IMPORTING
          OUTPUT = NODE-NODE_KEY.

      NODE-HIDDEN     = ' '.                 " The node is visible,
      NODE-DISABLED   = ' '.                 " selectable,
      NODE-ISFOLDER   = ' '.                 " a folder.
      NODE-EXPANDER   = ' '.
      NODE-N_IMAGE    = ICON_CUSTOMER_MASTER_DATA_LIST.
      NODE-EXP_IMAGE  = ICON_CUSTOMER_MASTER_DATA_LIST.
      NODE-DRAGDROPID = G_HANDLE_TREE.
      NODE-RELATKEY   = CNODE-NODE_KEY.
      NODE-RELATSHIP  = CL_GUI_COLUMN_TREE=>RELAT_LAST_CHILD.
      APPEND NODE TO NODE_TABLE.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE-COLUMN1.
      ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
      ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
      ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
      ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
      CONCATENATE WA_RETORNO_NOTAS-BUKRS WA_RETORNO_NOTAS-BRANCH INTO ITEM-TEXT SEPARATED BY '-'.
      CONCATENATE ITEM-TEXT WA_RETORNO_NOTAS-NR_NF_PROPRIA INTO ITEM-TEXT SEPARATED BY ' - '.
      CONCATENATE ITEM-TEXT WA_RETORNO_NOTAS-SERIE_PROPRIA INTO ITEM-TEXT SEPARATED BY '/'.
      APPEND ITEM TO ITEM_TABLE.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE-COLUMN4.
      ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
      ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
      ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
      ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
      WRITE WA_RETORNO_NOTAS-PESO_ORIGEM TO ITEM-TEXT.
      CONDENSE ITEM-TEXT NO-GAPS.
      APPEND ITEM TO ITEM_TABLE.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE-COLUMN5.
      ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
      ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
      ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
      ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
      CONCATENATE WA_RETORNO_NOTAS-NR_NF WA_RETORNO_NOTAS-SERIE INTO ITEM-TEXT SEPARATED BY '-'.
      APPEND ITEM TO ITEM_TABLE.

*      CLEAR ITEM.
*      ITEM-NODE_KEY  = NODE-NODE_KEY.
*      ITEM-ITEM_NAME = C_TREE-COLUMN6.
*      ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
*      ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
*      ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
*      ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
*      IF WA_RETORNO-QT_SAIDA IS NOT INITIAL.
*        WRITE WA_RETORNO-QT_SAIDA TO ITEM-TEXT.
*      ENDIF.
*      CONDENSE ITEM-TEXT NO-GAPS.
*      APPEND ITEM TO ITEM_TABLE.

*      CLEAR ITEM.
*      ITEM-NODE_KEY  = NODE-NODE_KEY.
*      ITEM-ITEM_NAME = C_TREE-COLUMN7.
*      ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
*      ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
*      ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
*      ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
*      IF WA_RETORNO-DT_SAIDA IS NOT INITIAL.
*        CONCATENATE WA_RETORNO-DT_SAIDA+6(2) '.' WA_RETORNO-DT_SAIDA+4(2) '.' WA_RETORNO-DT_SAIDA(4) INTO ITEM-TEXT.
*      ENDIF.
*      APPEND ITEM TO ITEM_TABLE.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE-COLUMN6.
      ITEM-TEXT      = WA_RETORNO_NOTAS-DOCNUM.
      APPEND ITEM TO ITEM_TABLE.

*      CLEAR ITEM.
*      ITEM-NODE_KEY  = NODE-NODE_KEY.
*      ITEM-ITEM_NAME = C_TREE-COLUMN9.
*      ITEM-TEXT      = WA_RETORNO-IDVAGAO.
*      APPEND ITEM TO ITEM_TABLE.
*
*      CLEAR ITEM.
*      ITEM-NODE_KEY  = NODE-NODE_KEY.
*      ITEM-ITEM_NAME = C_TREE-COLUMN10.
*      ITEM-TEXT      = WA_RETORNO-SERIEDCL.
*      APPEND ITEM TO ITEM_TABLE.
*
*      CLEAR ITEM.
*      ITEM-NODE_KEY  = NODE-NODE_KEY.
*      ITEM-ITEM_NAME = C_TREE-COLUMN11.
*      ITEM-TEXT      = WA_RETORNO-CNPJFERRO.
*      APPEND ITEM TO ITEM_TABLE.

    ENDLOOP.

    ADD 1 TO QTD_ITENS.
  ENDLOOP.

  CALL METHOD TREE->ADD_NODES_AND_ITEMS
    EXPORTING
      NODE_TABLE                     = NODE_TABLE
      ITEM_TABLE                     = ITEM_TABLE
      ITEM_TABLE_STRUCTURE_NAME      = 'MTREEITM'
    EXCEPTIONS
      FAILED                         = 1
      CNTL_SYSTEM_ERROR              = 3
      ERROR_IN_TABLES                = 4
      DP_ERROR                       = 5
      TABLE_STRUCTURE_NAME_NOT_FOUND = 6.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG
*&---------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG .

  DATA: LC_COL_POS  TYPE LVC_COLPOS.

  FIELD-SYMBOLS: <FS_CAT> TYPE LVC_S_FCAT.

  CLEAR: IT_FIELDCATALOG[].

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_RET_PESQ_FERRO_SAIDA'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG.

  LOOP AT IT_FIELDCATALOG ASSIGNING <FS_CAT>.

    CASE <FS_CAT>-FIELDNAME.
      WHEN 'CNPJFERRO'.
        <FS_CAT>-NO_OUT = ABAP_TRUE.
        <FS_CAT>-EDIT   = ABAP_FALSE.
      WHEN 'PESO_SAIDA' OR 'DT_SAIDA'.
        <FS_CAT>-EDIT = ABAP_TRUE.
      WHEN OTHERS.
        <FS_CAT>-EDIT = ABAP_FALSE.
    ENDCASE.

  ENDLOOP.

ENDFORM.                    " FILL_IT_FIELDCATALOG


*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT
*&---------------------------------------------------------------------*
FORM FILL_GS_VARIANT .

  GS_VARIANT-REPORT      = SY-REPID.
  GS_VARIANT-HANDLE      = '0200'.
  GS_VARIANT-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT-USERNAME    = ABAP_FALSE.
  GS_VARIANT-VARIANT     = ABAP_FALSE.
  GS_VARIANT-TEXT        = ABAP_FALSE.
  GS_VARIANT-DEPENDVARS  = ABAP_FALSE.

ENDFORM.                    " FILL_GS_VARIANT

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_HINTS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_HINTS .

*  DATA: IT_DD07V TYPE TABLE OF DD07V WITH HEADER LINE.
*
*  CLEAR: IT_EXCEPT_QINFO.
*
*  "Informações Documento
*  CALL FUNCTION 'GET_DOMAIN_VALUES'
*    EXPORTING
*      DOMNAME    = 'ZDM_ST_NFE_DOCUMENTO'
*    TABLES
*      VALUES_TAB = IT_DD07V.
*
*  LOOP AT IT_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
*    WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
*    WA_EXCEPT_QINFO-VALUE = ZCL_NFE_INBOUND=>GET_ICON_STATUS_DOCUMENTO( I_STATUS = CONV #( IT_DD07V-DOMVALUE_L ) ).
*    WA_EXCEPT_QINFO-TEXT  = IT_DD07V-DDTEXT.
*    WA_EXCEPT_QINFO-TABNAME   = 'ZDE_NFE_DIST_ALV'.
*    WA_EXCEPT_QINFO-FIELDNAME = 'ICO_ST_DOCUMENTO'.
*    APPEND WA_EXCEPT_QINFO TO IT_EXCEPT_QINFO.
*  ENDLOOP.
*
*  "Informações Fiscais
*  CALL FUNCTION 'GET_DOMAIN_VALUES'
*    EXPORTING
*      DOMNAME    = 'ZDM_ST_NFE_FISCAL'
*    TABLES
*      VALUES_TAB = IT_DD07V.
*
*  LOOP AT IT_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
*    WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
*    WA_EXCEPT_QINFO-VALUE = ZCL_NFE_INBOUND=>GET_ICON_STATUS_FISCAL( I_STATUS = CONV #( IT_DD07V-DOMVALUE_L ) ).
*    WA_EXCEPT_QINFO-TEXT  = IT_DD07V-DDTEXT.
*    WA_EXCEPT_QINFO-TABNAME   = 'ZDE_NFE_DIST_ALV'.
*    WA_EXCEPT_QINFO-FIELDNAME = 'ICO_ST_FISCAL'.
*    APPEND WA_EXCEPT_QINFO TO IT_EXCEPT_QINFO.
*  ENDLOOP.
*
*  "Informações Físicas
*  CALL FUNCTION 'GET_DOMAIN_VALUES'
*    EXPORTING
*      DOMNAME    = 'ZDM_ST_NFE_FISICO'
*    TABLES
*      VALUES_TAB = IT_DD07V.
*
*  LOOP AT IT_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
*    WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
*    WA_EXCEPT_QINFO-VALUE = ZCL_NFE_INBOUND=>GET_ICON_STATUS_FISCAL( I_STATUS = CONV #( IT_DD07V-DOMVALUE_L ) ).
*    WA_EXCEPT_QINFO-TEXT  = IT_DD07V-DDTEXT.
*    WA_EXCEPT_QINFO-TABNAME   = 'ZDE_NFE_DIST_ALV'.
*    WA_EXCEPT_QINFO-FIELDNAME = 'ICO_ST_FISICO'.
*    APPEND WA_EXCEPT_QINFO TO IT_EXCEPT_QINFO.
*  ENDLOOP.
*
*  "Informações Armazenagem
*  CALL FUNCTION 'GET_DOMAIN_VALUES'
*    EXPORTING
*      DOMNAME    = 'ZDM_ST_NFE_ARMAZEM'
*    TABLES
*      VALUES_TAB = IT_DD07V.
*
*  LOOP AT IT_DD07V WHERE DOMVALUE_L IS NOT INITIAL.
*    WA_EXCEPT_QINFO-TYPE  = CL_SALV_TOOLTIP=>C_TYPE_SYMBOL.
*    WA_EXCEPT_QINFO-VALUE = ZCL_NFE_INBOUND=>GET_ICON_STATUS_ARMAZEM( I_STATUS = CONV #( IT_DD07V-DOMVALUE_L ) ).
*    WA_EXCEPT_QINFO-TEXT  = IT_DD07V-DDTEXT.
*    WA_EXCEPT_QINFO-TABNAME   = 'ZDE_NFE_DIST_ALV'.
*    WA_EXCEPT_QINFO-FIELDNAME = 'ICO_ST_ARMAZEM'.
*    APPEND WA_EXCEPT_QINFO TO IT_EXCEPT_QINFO.
*  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  GET_SCROLL_INFO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SCROLL_INFO INPUT.

  IF CTL_ALV IS NOT INITIAL.
    CALL METHOD CTL_ALV->GET_SCROLL_INFO_VIA_ID
      IMPORTING
        ES_COL_INFO = GS_SCROLL_COL
        ES_ROW_NO   = GS_SCROLL_ROW.
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  GET_SELECTED_ROWS  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SELECTED_ROWS INPUT.

  CLEAR IT_SELECTED_ROWS.

  CHECK CTL_ALV IS NOT INITIAL.

  CALL METHOD CTL_ALV->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SELECTED_ROWS.

  CLEAR IT_RETORNO_SEL[].

  LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
    READ TABLE IT_RETORNO_EDT INTO DATA(WA_RETORNO_TY) INDEX WA_SELECTED_ROWS-INDEX.
    APPEND WA_RETORNO_TY TO IT_RETORNO_SEL.
  ENDLOOP.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0200 INPUT.

  DATA: FERRO  TYPE REF TO ZCL_FERROVIARIO_SAIDA.

  CASE OK_CODE.
    WHEN 'ADD_DCL'.

      CLEAR: ZDE_FERRO_SAIDA_LAC, IT_LACAMENTO[].
      SB_TELA_0200 = '0202'.
      PERFORM LIMPAR_ALV_0200.
      CLEAR: OK_CODE.

    WHEN 'REFRESH'.

      FERRO_SAIDA->ZIF_PESQUISA~PESQUISAR( EXPORTING I_FILTROS = LC_FILTRO IMPORTING E_REGISTROS = IT_RETORNO ).
      PERFORM LIMPAR_TELA_0200 USING ABAP_TRUE.
      CLEAR: OK_CODE.

    WHEN 'EXECUTAR'.

      LOOP AT PLANILHA->OBJETOS INTO DATA(OBJ_GRAVAR).
        IF OBJ_GRAVAR->CK_ALTEROU EQ ABAP_TRUE.
          IF OBJ_GRAVAR->GET_ID_REFKEY( ) IS INITIAL.
            OBJ_GRAVAR->SET_ID_REFKEY( I_ID_REFKEY = ZCL_FERROVIARIO=>GET_NEW_ID_REFKEY( ) ).
          ENDIF.
          IF OBJ_GRAVAR->VALIDAR_REGISTRO( ) EQ ABAP_TRUE.
            OBJ_GRAVAR->GRAVAR_REGISTRO( ).
          ELSE.
            MESSAGE ID SY-MSGID TYPE 'W' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
          ENDIF.
        ENDIF.
        CLEAR: OBJ_GRAVAR.
      ENDLOOP.

      PERFORM LIMPAR_TELA_0200 USING ABAP_TRUE.
      LEAVE TO SCREEN 0.

    WHEN 'DELETAR'.

      IF IT_RETORNO_SEL IS INITIAL.
        MESSAGE S127.
        EXIT.
      ENDIF.

      DATA(IT_RETORNO_SEL_DEL) = IT_RETORNO_SEL[].
      SORT IT_RETORNO_SEL_DEL BY DCL SERIEDCL IDVAGAO CNPJFERRO.
      DELETE ADJACENT DUPLICATES FROM IT_RETORNO_SEL_DEL COMPARING DCL SERIEDCL IDVAGAO CNPJFERRO.

      LOOP AT IT_RETORNO_SEL_DEL INTO DATA(WA_RETORNO_SEL_DEL).

        READ TABLE PLANILHA->POSICAO WITH KEY DCL       = WA_RETORNO_SEL_DEL-DCL
                                              SERIEDCL  = WA_RETORNO_SEL_DEL-SERIEDCL
                                              IDVAGAO   = WA_RETORNO_SEL_DEL-IDVAGAO
                                              CNPJFERRO = WA_RETORNO_SEL_DEL-CNPJFERRO TRANSPORTING NO FIELDS.
        IF SY-SUBRC IS NOT INITIAL.
          CONTINUE.
        ENDIF.

        READ TABLE PLANILHA->OBJETOS INDEX SY-TABIX INTO FERRO.

        IF SY-SUBRC IS NOT INITIAL.
          CONTINUE.
        ENDIF.

        "128  Deseja Realmente Eliminar a DCL &1 do Vagão &2?
        MESSAGE S128 WITH WA_RETORNO_SEL_DEL-DCL WA_RETORNO_SEL_DEL-IDVAGAO INTO DATA(LC_TEXTO).

        ANSWER = '1'.

        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            TITLEBAR              = TEXT-023
            TEXT_QUESTION         = LC_TEXTO
            TEXT_BUTTON_1         = TEXT-012
            ICON_BUTTON_1         = 'ICON_CHECKED'
            TEXT_BUTTON_2         = TEXT-013
            ICON_BUTTON_2         = 'ICON_INCOMPLETE'
            DEFAULT_BUTTON        = '2'
            DISPLAY_CANCEL_BUTTON = ' '
          IMPORTING
            ANSWER                = ANSWER
          EXCEPTIONS
            TEXT_NOT_FOUND        = 1
            OTHERS                = 2.

        IF SY-SUBRC IS NOT INITIAL.
          CONTINUE.
        ENDIF.

        IF ANSWER NE '1'.
          CONTINUE.
        ENDIF.

        FERRO->ZIF_CADASTRO~EXCLUIR_REGISTRO( ).

      ENDLOOP.

      PERFORM LIMPAR_TELA_0200 USING ABAP_TRUE.
      LEAVE TO SCREEN 0.

  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0201  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0201 OUTPUT.

  IF DG_SPLITTER IS INITIAL.
    CREATE OBJECT DG_SPLITTER
      EXPORTING
        PARENT  = CL_GUI_CONTAINER=>SCREEN0
        ROWS    = 1
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DATA(CONTAINER).

    CREATE OBJECT CTL_ALV
      EXPORTING
        I_PARENT = CONTAINER.

    "Catalogo
    PERFORM FILL_IT_FIELDCATALOG.

    "Hints
    PERFORM FILL_IT_HINTS.

*   Fill info for layout variant
    PERFORM FILL_GS_VARIANT.

*   Set layout parameters for ALV grid
    GS_LAYOUT-GRID_TITLE = TEXT-100.
    GS_LAYOUT-SEL_MODE   = 'A'.
    GS_LAYOUT-ZEBRA      = ABAP_FALSE.
    "GS_LAYOUT-STYLEFNAME = 'STYLE'.
    GS_LAYOUT-SEL_MODE   = 'A'.
    GS_LAYOUT-EDIT_MODE  = ABAP_TRUE.
    GS_LAYOUT-CWIDTH_OPT = ABAP_TRUE.
    GS_LAYOUT-INFO_FNAME = 'LINE_COLOR'.
    "GS_LAYOUT-CTAB_FNAME = 'COLOR_CELL'.
    GS_LAYOUT-S_DRAGDROP-GRID_DDID = G_HANDLE_ALV.
    GS_LAYOUT-S_DRAGDROP-CNTR_DDID = G_HANDLE_ALV.
    GS_LAYOUT-S_DRAGDROP-COL_DDID  = G_HANDLE_ALV.
    GS_LAYOUT-S_DRAGDROP-ROW_DDID  = G_HANDLE_ALV.
    GS_LAYOUT-S_DRAGDROP-FIELDNAME = G_HANDLE_ALV.

    CLEAR: IT_EXCLUDE_FCODE, IT_EXCLUDE_FCODE[].

    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW    TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW    TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW      TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE         TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO          TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW    TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_COPY          TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW      TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_CUT           TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_CUT           TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_CHECK             TO IT_EXCLUDE_FCODE.
    APPEND CL_GUI_ALV_GRID=>MC_FC_REFRESH           TO IT_EXCLUDE_FCODE.

    CALL METHOD CTL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT
        IS_VARIANT           = GS_VARIANT
        IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
        I_SAVE               = 'A'
        IT_EXCEPT_QINFO      = IT_EXCEPT_QINFO
      CHANGING
        IT_FIELDCATALOG      = IT_FIELDCATALOG
        IT_OUTTAB            = IT_RETORNO_EDT.

    CREATE OBJECT OBG_TOOLBAR EXPORTING IO_ALV_GRID = CTL_ALV.
    SET HANDLER OBG_TOOLBAR->ON_TOOLBAR FOR CTL_ALV.
    SET HANDLER OBG_TOOLBAR->HANDLE_USER_COMMAND FOR CTL_ALV.

    CTL_ALV->REGISTER_EDIT_EVENT( EXPORTING I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).
    CTL_ALV->REGISTER_EDIT_EVENT( EXPORTING I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED ).

    CREATE OBJECT EVENT_RECEIVER.
    SET HANDLER EVENT_RECEIVER->HANDLE_DATA_CHANGED FOR CTL_ALV.
    SET HANDLER EVENT_RECEIVER->HANDLE_HOTSPOT_CLICK FOR CTL_ALV.
    SET HANDLER EVENT_RECEIVER->HANDLE_BUTTON_CLICK FOR CTL_ALV.
    SET HANDLER EVENT_RECEIVER->HANDLE_F4 FOR CTL_ALV.
    SET HANDLER EVENT_RECEIVER->HANDLE_ONDROP FOR CTL_ALV.
    SET HANDLER EVENT_RECEIVER->HANDLE_ONDRAG FOR CTL_ALV.
    SET HANDLER EVENT_RECEIVER->HANDLE_AFTER_USER_COMMAND FOR CTL_ALV.
    SET HANDLER EVENT_RECEIVER->HANDLE_USER_COMMAND FOR CTL_ALV.

    WA_STABLE-ROW = ABAP_TRUE.
    WA_STABLE-COL = ABAP_TRUE.
  ENDIF.

  CALL METHOD CTL_ALV->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE = WA_STABLE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  LIMPAR_TELA_0200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM LIMPAR_TELA_0200 USING CK_LIMPAR_TABELAS TYPE CHAR01.

  LOOP AT PLANILHA->OBJETOS INTO DATA(WA_OBJETO).
    CLEAR: WA_OBJETO.
  ENDLOOP.

  CLEAR: PLANILHA.

  PERFORM LIMPAR_ALV_0200.

  CLEAR: G_APPLICATION.

  IF TREE IS NOT INITIAL.
    TREE->FREE( ).
  ENDIF.
  CLEAR: TREE.

  IF TREE_DCLS IS NOT INITIAL.
    TREE_DCLS->FREE( ).
  ENDIF.
  CLEAR: TREE_DCLS.

  IF CONTAINER_NOTAS IS NOT INITIAL.
    CONTAINER_NOTAS->FREE( ).
  ENDIF.
  CLEAR: CONTAINER_NOTAS.

  IF CONTAINER_VAGOES IS NOT INITIAL.
    CONTAINER_VAGOES->FREE( ).
  ENDIF.
  CLEAR: CONTAINER_VAGOES.

  IF DG_SPLITTER_DOC IS NOT INITIAL.
    DG_SPLITTER_DOC->FREE( ).
  ENDIF.
  CLEAR: DG_SPLITTER_DOC.

  IF DOCKING IS NOT INITIAL.
    DOCKING->FREE( ).
  ENDIF.
  CLEAR: DOCKING.

  CLEAR: TREE_EVENT_RECEIVER.
  CLEAR: TREE_EVENT_RECEIVER2.

  IF CK_LIMPAR_TABELAS EQ ABAP_TRUE.
    CLEAR: IT_RETORNO_EDT[], IT_RETORNO_EDT, IT_RETORNO_SEL[], IT_RETORNO_SEL,
           NODE_TABLE_DOCS  , ITEM_TABLE_DOCS  , NODE_TABLE_DOCS  , ITEM_TABLE_DOCS  ,
           NODE_TABLE_DOCS[], ITEM_TABLE_DOCS[], NODE_TABLE_DOCS[], ITEM_TABLE_DOCS[].
  ENDIF.

ENDFORM.

FORM LIMPAR_ALV_0200.

  IF CTL_ALV IS NOT INITIAL.
    CTL_ALV->FREE( ).
  ENDIF.
  CLEAR: CTL_ALV.

  IF CONTAINER IS NOT INITIAL.
    CONTAINER->FREE( ).
  ENDIF.
  CLEAR: CONTAINER.

  IF DG_SPLITTER IS NOT INITIAL.
    DG_SPLITTER->FREE( ).
  ENDIF.

  CLEAR: DG_SPLITTER, DRAGDROP_ALV, DRAGDROP_TREE, TREE_EVENT_RECEIVER.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0202  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0202 OUTPUT.

  WA_STABLE_0202-ROW = ABAP_TRUE.
  WA_STABLE_0202-COL = ABAP_TRUE.

  IF LC_SAIDA IS INITIAL.
    CREATE OBJECT LC_SAIDA.
    LC_SAIDA->SET_CK_REGISTRO_NOVO( I_CK_REGISTRO_NOVO = ABAP_TRUE ).
  ENDIF.

  CLEAR: ZDE_FERRO_SAIDA_LAC-NAME1, ZDE_FERRO_SAIDA_LAC-EMIT_CNPJ.
  IF ZDE_FERRO_SAIDA_LAC-LIFNR IS NOT INITIAL.
    SELECT SINGLE NAME1, STCD1
      INTO @DATA(WA_INFO)
      FROM LFA1
     WHERE LIFNR EQ @ZDE_FERRO_SAIDA_LAC-LIFNR.

    ZDE_FERRO_SAIDA_LAC-NAME1     = WA_INFO-NAME1.
    MOVE WA_INFO-STCD1 TO ZDE_FERRO_SAIDA_LAC-EMIT_CNPJ.
  ENDIF.

  IF CONTAINER_0202 IS INITIAL.

    CLEAR WA_LAYOUT_0202.

    WA_LAYOUT_0202-GRID_TITLE = TEXT-101.
    WA_LAYOUT_0202-ZEBRA      = ABAP_FALSE.
    WA_LAYOUT_0202-SEL_MODE   = 'A'.
    WA_LAYOUT_0202-EDIT_MODE  = ABAP_TRUE.
    WA_LAYOUT_0202-CWIDTH_OPT = ABAP_TRUE.
    WA_LAYOUT_0202-INFO_FNAME = 'LINE_COLOR'.
    WA_LAYOUT_0202-S_DRAGDROP-GRID_DDID = G_HANDLE_ALV.
    WA_LAYOUT_0202-S_DRAGDROP-CNTR_DDID = G_HANDLE_ALV.
    WA_LAYOUT_0202-S_DRAGDROP-COL_DDID  = G_HANDLE_ALV.
    WA_LAYOUT_0202-S_DRAGDROP-ROW_DDID  = G_HANDLE_ALV.
    WA_LAYOUT_0202-S_DRAGDROP-FIELDNAME = G_HANDLE_ALV.

    CREATE OBJECT CONTAINER_0202
      EXPORTING
        CONTAINER_NAME = 'ALV_NOTAS'.

    PERFORM FILL_IT_FIELDCATALOG_0202.

*   Fill info for layout variant
    PERFORM FILL_GS_VARIANT_0202.

    CREATE OBJECT CL_GRID_0202
      EXPORTING
        I_PARENT = CONTAINER_0202.

*    CREATE OBJECT OBG_TOOLBAR_0201
*      EXPORTING
*        IO_ALV_GRID = CL_GRID_0201.
*
*    SET HANDLER OBG_TOOLBAR_0201->ON_TOOLBAR FOR CL_GRID_0201.
*    SET HANDLER OBG_TOOLBAR_0201->HANDLE_USER_COMMAND FOR CL_GRID_0201.

    CL_GRID_0202->REGISTER_EDIT_EVENT( EXPORTING I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).
    CL_GRID_0202->REGISTER_EDIT_EVENT( EXPORTING I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED ).
    "APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW    TO IT_FUNCTION_0202. ""&LOCAL&DELETE_ROW
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW    TO IT_FUNCTION_0202.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW      TO IT_FUNCTION_0202.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE         TO IT_FUNCTION_0202.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW TO IT_FUNCTION_0202.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO          TO IT_FUNCTION_0202.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW    TO IT_FUNCTION_0202.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_COPY          TO IT_FUNCTION_0202.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW      TO IT_FUNCTION_0202.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_CUT           TO IT_FUNCTION_0202.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_CUT           TO IT_FUNCTION_0202.
    APPEND CL_GUI_ALV_GRID=>MC_FC_CHECK             TO IT_FUNCTION_0202.
    APPEND CL_GUI_ALV_GRID=>MC_FC_REFRESH           TO IT_FUNCTION_0202.

*    WA_F4_0201-FIELDNAME = 'EBELN'.
*    WA_F4_0201-REGISTER  = 'X'.
*    WA_F4_0201-GETBEFORE = 'X'.
*    INSERT WA_F4_0201 INTO TABLE IT_F4_0201.
*    WA_F4_0201-FIELDNAME = 'EBELP'.
*    INSERT WA_F4_0201 INTO TABLE IT_F4_0201.
*    WA_F4_0201-FIELDNAME = 'MATNR'.
*    INSERT WA_F4_0201 INTO TABLE IT_F4_0201.

    CREATE OBJECT EVENT_RECEIVER_0202.
    SET HANDLER EVENT_RECEIVER_0202->HANDLE_DATA_CHANGED FOR CL_GRID_0202.
    SET HANDLER EVENT_RECEIVER_0202->HANDLE_ONDROP FOR CL_GRID_0202.
    SET HANDLER EVENT_RECEIVER_0202->HANDLE_AFTER_USER_COMMAND FOR CL_GRID_0202.
*    SET HANDLER EVENT_RECEIVER_0201->HANDLE_HOTSPOT_CLICK_0201 FOR CL_GRID_0201.
*    SET HANDLER EVENT_RECEIVER_0201->HANDLE_BUTTON_CLICK_0201 FOR CL_GRID_0201.
*    SET HANDLER EVENT_RECEIVER_0201->HANDLE_F4_0201 FOR CL_GRID_0201.
*    SET HANDLER EVENT_RECEIVER_0201->HANDLE_ONDRAG_0201 FOR CL_GRID_0201.
    SET HANDLER EVENT_RECEIVER_0202->HANDLE_USER_COMMAND FOR CL_GRID_0202.

*    CALL METHOD CL_GRID_0201->REGISTER_F4_FOR_FIELDS EXPORTING IT_F4 = IT_F4_0201.

    CALL METHOD CL_GRID_0202->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_VARIANT                    = WA_VARIANT_0202
        I_SAVE                        = 'A'
        IS_LAYOUT                     = WA_LAYOUT_0202
        IT_TOOLBAR_EXCLUDING          = IT_FUNCTION_0202
      CHANGING
        IT_OUTTAB                     = IT_LACAMENTO[]
        IT_FIELDCATALOG               = IT_FIELDCAT_0202
      EXCEPTIONS
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        OTHERS                        = 4.

    IF SY-SUBRC IS NOT INITIAL.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDIF.

  CALL METHOD CL_GRID_0202->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE = WA_STABLE_0202.

  DATA(CK_ABERTO) = '1'.
  IF IT_LACAMENTO IS NOT INITIAL.
    CK_ABERTO = '0'.
  ENDIF.

  LOOP AT SCREEN.
    IF SCREEN-NAME(19) EQ 'ZDE_FERRO_SAIDA_LAC' AND SCREEN-GROUP1 = 'A1'.
      SCREEN-INPUT = CK_ABERTO.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0202  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0202 INPUT.
  CASE OK_CODE.
    WHEN 'BT_CANCEL'.
      CLEAR: OK_CODE.
      SB_TELA_0200 = '0201'.
      PERFORM LIMPAR_TELA_0202.
    WHEN 'BT_INCLUIR'.
      CLEAR: OK_CODE.
      TRY.
          IF LC_SAIDA->GET_ID_REFKEY( ) IS INITIAL.
            LC_SAIDA->SET_ID_REFKEY( I_ID_REFKEY = LC_SAIDA->GET_NEW_ID_REFKEY( ) ).
          ENDIF.

          IF LC_SAIDA->ZIF_CADASTRO~GRAVAR_REGISTRO( ) EQ ABAP_TRUE.
            SB_TELA_0200 = '0201'.
            PERFORM LIMPAR_TELA_0202.
            FERRO_SAIDA->ZIF_PESQUISA~PESQUISAR( EXPORTING I_FILTROS = LC_FILTRO IMPORTING E_REGISTROS = IT_RETORNO ).
            PERFORM LIMPAR_TELA_0200 USING ABAP_TRUE.
          ENDIF.
        CATCH ZCX_CADASTRO INTO DATA(CX_CADASTRO).
          CX_CADASTRO->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'E' ).
      ENDTRY.
  ENDCASE.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG_0202
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG_0202 .

  CLEAR: IT_FIELDCAT_0202[], IT_FIELDCAT_0202.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_RET_PESQ_FERRO_SAIDA'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCAT_0202.

  LOOP AT IT_FIELDCAT_0202 ASSIGNING FIELD-SYMBOL(<FS_0202>).
    <FS_0202>-EDIT = ABAP_FALSE.
    CASE <FS_0202>-FIELDNAME.
      WHEN 'PESO_SAIDA'.
        <FS_0202>-EDIT = ABAP_TRUE.
    ENDCASE.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT_0202
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_GS_VARIANT_0202 .

  WA_VARIANT_0202-REPORT      = SY-REPID.
  WA_VARIANT_0202-HANDLE      = '0202'.
  WA_VARIANT_0202-LOG_GROUP   = ABAP_FALSE.
  WA_VARIANT_0202-USERNAME    = ABAP_FALSE.
  WA_VARIANT_0202-VARIANT     = ABAP_FALSE.
  WA_VARIANT_0202-TEXT        = ABAP_FALSE.
  WA_VARIANT_0202-DEPENDVARS  = ABAP_FALSE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  LIMPAR_TELA_0202
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM LIMPAR_TELA_0202 .

  IF CL_GRID_0202 IS NOT INITIAL.
    CL_GRID_0202->FREE( ).
  ENDIF.
  CLEAR: CL_GRID_0202.

  IF CONTAINER_0202 IS NOT INITIAL.
    CONTAINER_0202->FREE( ).
  ENDIF.
  CLEAR: CONTAINER_0202.

  CLEAR: LC_SAIDA.

ENDFORM.

CLASS LCL_EVENT_RECEIVER_0202 IMPLEMENTATION.

  METHOD HANDLE_ONDROP.

    DATA(LC_NM_CLASS) = CL_ABAP_CLASSDESCR=>GET_CLASS_NAME( E_DRAGDROPOBJ->OBJECT ).

    FIND FIRST OCCURRENCE OF REGEX '\<LCL\w+' IN LC_NM_CLASS RESULTS DATA(RESULADO).
    LC_NM_CLASS = LC_NM_CLASS+RESULADO-OFFSET(RESULADO-LENGTH).

    CASE LC_NM_CLASS.
*      WHEN 'LCL_DRAGDROP_OBJ_TREE'.
*        DATA(LC_NODE) = CAST LCL_DRAGDROP_OBJ_TREE( E_DRAGDROPOBJ->OBJECT )->NODE.
*        PERFORM ADD_LANCAMENTO_ALV USING LC_NODE.
      WHEN 'LCL_DRAGDROP_OBJ_TREE_MULT'.
        CHECK CAST LCL_DRAGDROP_OBJ_TREE_MULT( E_DRAGDROPOBJ->OBJECT )->TIPO EQ '1'.

        LOOP AT CAST LCL_DRAGDROP_OBJ_TREE_MULT( E_DRAGDROPOBJ->OBJECT )->NODE INTO DATA(WA_NODE).
          DATA(LC_NODE) = WA_NODE.
          PERFORM ADD_LANCAMENTO_ALV USING LC_NODE.
        ENDLOOP.
    ENDCASE.

    LEAVE TO SCREEN 0200.

  ENDMETHOD.

  METHOD HANDLE_DATA_CHANGED.
    PERFORM DATA_CHANGED_0202 USING ER_DATA_CHANGED.
  ENDMETHOD.

  METHOD HANDLE_AFTER_USER_COMMAND.

    CASE E_UCOMM.
      WHEN '&LOCAL&DELETE_ROW'.
        LEAVE TO SCREEN 0200.
    ENDCASE.

  ENDMETHOD.

  METHOD HANDLE_USER_COMMAND.

    CASE E_UCOMM.
      WHEN '&LOCAL&DELETE_ROW'.
        PERFORM APAGAR_NOTAS_SELECIONADAS.
    ENDCASE.

  ENDMETHOD.


ENDCLASS.

*&---------------------------------------------------------------------*
*&      Form  ADD_RETORNO_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LC_NODE  text
*----------------------------------------------------------------------*
FORM ADD_LANCAMENTO_ALV  USING P_NODE TYPE TV_NODEKEY.

  DATA: LC_DOCNUM TYPE J_1BDOCNUM.

  "DCL
  READ TABLE ITEM_TABLE WITH KEY NODE_KEY = P_NODE ITEM_NAME = C_TREE-COLUMN6  INTO DATA(WA_ITEM_NOTA).

  IF SY-SUBRC IS INITIAL.

    LC_DOCNUM    = WA_ITEM_NOTA-TEXT.

    CHECK LC_DOCNUM  IS NOT INITIAL.

    READ TABLE IT_LACAMENTO WITH KEY DOCNUM = LC_DOCNUM TRANSPORTING NO FIELDS.
    IF SY-SUBRC IS NOT INITIAL.
      TRY.
          DATA(WA_SAIDA) = LC_SAIDA->ADD_NOTA_FISCAL( I_DOCNUM = LC_DOCNUM ).
          MOVE-CORRESPONDING WA_SAIDA TO WA_RETORNO_EDT.
          APPEND WA_RETORNO_EDT TO IT_LACAMENTO.
        CATCH ZCX_FERROVIARIO_SAIDA INTO DATA(CX_FERROVIARIO_SAIDA).
          CX_FERROVIARIO_SAIDA->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'W' ).
      ENDTRY.
    ENDIF.
  ELSE.

    READ TABLE NODE_TABLE WITH KEY NODE_KEY = P_NODE INTO DATA(WA_NODE_TABLE).
    IF WA_NODE_TABLE-RELATKEY IS INITIAL.
      LOOP AT NODE_TABLE INTO DATA(WA_FILHO) WHERE RELATKEY EQ P_NODE.
        PERFORM ADD_LANCAMENTO_ALV USING WA_FILHO-NODE_KEY.
      ENDLOOP.
    ENDIF.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  DATA_CHANGED_0202
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ER_DATA_CHANGED  text
*----------------------------------------------------------------------*
FORM DATA_CHANGED_0202 USING RR_DATA_CHANGED TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL.

  DATA: LC_QT_SAIDA  	     TYPE ZDE_QT_SAIDA,
        OBJETO             TYPE REF TO ZCL_FERROVIARIO_SAIDA,
        GS_ALV_REFRES_COND TYPE LVC_S_STBL.

  GS_ALV_REFRES_COND-ROW = ABAP_TRUE.
  GS_ALV_REFRES_COND-COL = ABAP_TRUE.

  LOOP AT RR_DATA_CHANGED->MT_GOOD_CELLS INTO DATA(LS_MOD_CELLS).

    READ TABLE IT_LACAMENTO ASSIGNING FIELD-SYMBOL(<FS_RETORNO>) INDEX LS_MOD_CELLS-ROW_ID.
    READ TABLE PLANILHA->POSICAO WITH KEY DCL       = <FS_RETORNO>-DCL
                                          SERIEDCL  = <FS_RETORNO>-SERIEDCL
                                          IDVAGAO   = <FS_RETORNO>-IDVAGAO
                                          CNPJFERRO = <FS_RETORNO>-CNPJFERRO TRANSPORTING NO FIELDS.
    READ TABLE PLANILHA->OBJETOS INDEX SY-TABIX INTO OBJETO.
    "PESO_CHEGADA
    "DT_CHEGADA
    CASE LS_MOD_CELLS-FIELDNAME.
      WHEN 'PESO_SAIDA'.

        CALL METHOD RR_DATA_CHANGED->GET_CELL_VALUE
          EXPORTING
            I_ROW_ID    = LS_MOD_CELLS-ROW_ID
            I_FIELDNAME = LS_MOD_CELLS-FIELDNAME
          IMPORTING
            E_VALUE     = LC_QT_SAIDA.

        IF LC_QT_SAIDA LT 0.
          CALL METHOD RR_DATA_CHANGED->ADD_PROTOCOL_ENTRY
            EXPORTING
              I_MSGID     = 'ZLES'
              I_MSGNO     = 124
              I_MSGTY     = 'E'
              I_FIELDNAME = LS_MOD_CELLS-FIELDNAME
              I_ROW_ID    = LS_MOD_CELLS-ROW_ID.
        ELSE.
          TRY .
              <FS_RETORNO>-QT_SAIDA =
              LC_SAIDA->SET_QT_SAIDA(
                EXPORTING
                  I_BUKRS         =  <FS_RETORNO>-BUKRS
                  I_BRANCH        =  <FS_RETORNO>-BRANCH
                  I_NR_NF_PROPRIA =  <FS_RETORNO>-NR_NF_PROPRIA
                  I_SERIE_PROPRIA =  <FS_RETORNO>-SERIE_PROPRIA
                  I_QT_SAIDA      =  LC_QT_SAIDA ).

              ZDE_FERRO_SAIDA_LAC-PESO_TOTAL = <FS_RETORNO>-QT_SAIDA.
              <FS_RETORNO>-PESO_SAIDA        = LC_QT_SAIDA.
              <FS_RETORNO>-LINE_COLOR   = CS_LINE_COLOR_ALTERADO.

              LOOP AT IT_LACAMENTO ASSIGNING FIELD-SYMBOL(<FS_RETORNO2>) WHERE DOCNUM NE <FS_RETORNO>-DOCNUM.
                <FS_RETORNO2>-QT_SAIDA = <FS_RETORNO>-QT_SAIDA.
              ENDLOOP.

              LEAVE TO SCREEN 0200.

            CATCH ZCX_FERROVIARIO_SAIDA INTO DATA(CX_FERROVIARIO_SAIDA).

              CALL METHOD RR_DATA_CHANGED->ADD_PROTOCOL_ENTRY
                EXPORTING
                  I_MSGID     = CX_FERROVIARIO_SAIDA->MSGID
                  I_MSGNO     = CX_FERROVIARIO_SAIDA->MSGNO
                  I_MSGTY     = CX_FERROVIARIO_SAIDA->MSGTY
                  I_MSGV1     = CX_FERROVIARIO_SAIDA->MSGV1
                  I_MSGV2     = CX_FERROVIARIO_SAIDA->MSGV2
                  I_MSGV3     = CX_FERROVIARIO_SAIDA->MSGV3
                  I_MSGV4     = CX_FERROVIARIO_SAIDA->MSGV4
                  I_FIELDNAME = LS_MOD_CELLS-FIELDNAME
                  I_ROW_ID    = LS_MOD_CELLS-ROW_ID.
          ENDTRY.

        ENDIF.

    ENDCASE.

  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  GET_SCROLL_INFO_0202  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SCROLL_INFO_0202 INPUT.

  IF CL_GRID_0202 IS NOT INITIAL.
    CALL METHOD CL_GRID_0202->GET_SCROLL_INFO_VIA_ID
      IMPORTING
        ES_COL_INFO = GS_SCROLL_COL_0202
        ES_ROW_NO   = GS_SCROLL_ROW_0202.
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  GET_SELECTED_ROWS_0202  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SELECTED_ROWS_0202 INPUT.

  PERFORM SELECIONA_REGISTROS_ALV_0202.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  ALTEROU_DCL_VAGAO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE ALTEROU_DCL_VAGAO INPUT.
  LC_SAIDA->SET_VAGAO_SAIDA( CHANGING I_INFO_SAIDA = ZDE_FERRO_SAIDA_LAC ).
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  MONTA_SAIDA_DCL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM MONTA_SAIDA_DCL .

  DATA: CNODE       TYPE TREEV_NODE,
        NODE        TYPE TREEV_NODE,
        ITEM        TYPE MTREEITM,
        QTD_ITENS   TYPE I,
        LC_CNPJ(18).

  CLEAR: NODE_TABLE_DOCS,
         ITEM_TABLE_DOCS,
         NODE_TABLE_DOCS[],
         ITEM_TABLE_DOCS[].

  TREE_DCLS->DELETE_ALL_NODES( ).

  DATA(IT_RETORNO_EMITENTE)  = IT_RETORNO[].
  DATA(IT_RETORNO_DCL_VAGAO) = IT_RETORNO[].
  SORT IT_RETORNO_EMITENTE BY EMIT_CNPJ.
  DELETE ADJACENT DUPLICATES FROM IT_RETORNO_EMITENTE COMPARING EMIT_CNPJ.
  SORT IT_RETORNO_DCL_VAGAO BY EMIT_CNPJ DCL IDVAGAO.
  DELETE ADJACENT DUPLICATES FROM IT_RETORNO_DCL_VAGAO COMPARING EMIT_CNPJ DCL IDVAGAO.

  QTD_ITENS = 0.

  LOOP AT IT_RETORNO_EMITENTE INTO DATA(WA_RETORNO_EMITENTE).

    ADD 1 TO QTD_ITENS.
    CLEAR: CNODE.
    CNODE-NODE_KEY   = QTD_ITENS.
    CONDENSE CNODE-NODE_KEY NO-GAPS.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = CNODE-NODE_KEY
      IMPORTING
        OUTPUT = CNODE-NODE_KEY.

    CNODE-HIDDEN     = ' '.                 " The node is visible,
    CNODE-DISABLED   = ' '.                 " selectable,
    CNODE-ISFOLDER   = 'X'.                 " a folder.
    CNODE-EXPANDER   = ' '.
    CNODE-N_IMAGE    = ICON_AGENT.
    CNODE-EXP_IMAGE  = ICON_AGENT.
    CNODE-DRAGDROPID = G_HANDLE_TREE.
    APPEND CNODE TO NODE_TABLE_DOCS.

    CLEAR ITEM.
    ITEM-NODE_KEY  = CNODE-NODE_KEY.
    ITEM-ITEM_NAME = C_TREE_DCLS-COLUMN1.
    ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_FONT_DEFAULT. " Text Item
    ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
    ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_INTENSIFIED.
    ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
    CONCATENATE WA_RETORNO_EMITENTE-EMIT_RSOCIAL WA_RETORNO_EMITENTE-EMIT_CNPJ INTO ITEM-TEXT SEPARATED BY ' - '.
    APPEND ITEM TO ITEM_TABLE_DOCS.

    LOOP AT IT_RETORNO_DCL_VAGAO INTO DATA(WA_RETORNO) WHERE EMIT_CNPJ EQ WA_RETORNO_EMITENTE-EMIT_CNPJ.

      ADD 1 TO QTD_ITENS.
      CLEAR: NODE.
      NODE-NODE_KEY   = QTD_ITENS.

      CONDENSE NODE-NODE_KEY NO-GAPS.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = NODE-NODE_KEY
        IMPORTING
          OUTPUT = NODE-NODE_KEY.

      NODE-HIDDEN     = ' '.                 " The node is visible,
      NODE-DISABLED   = ' '.                 " selectable,
      NODE-ISFOLDER   = ' '.                 " a folder.
      NODE-EXPANDER   = ' '.
      NODE-N_IMAGE    = ICON_SUPPLIER.
      NODE-EXP_IMAGE  = ICON_SUPPLIER.
      NODE-DRAGDROPID = G_HANDLE_TREE.
      NODE-RELATKEY   = CNODE-NODE_KEY.
      NODE-RELATSHIP  = CL_GUI_COLUMN_TREE=>RELAT_LAST_CHILD.
      APPEND NODE TO NODE_TABLE_DOCS.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE_DCLS-COLUMN1.
      ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
      ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
      ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
      ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
      CONCATENATE WA_RETORNO-DCL WA_RETORNO-SERIEDCL INTO ITEM-TEXT SEPARATED BY '/'.
      CONCATENATE ITEM-TEXT WA_RETORNO-IDVAGAO INTO ITEM-TEXT SEPARATED BY ' - '.
      APPEND ITEM TO ITEM_TABLE_DOCS.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE_DCLS-COLUMN4.
      ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
      ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
      ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
      ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
      WRITE WA_RETORNO-QT_SAIDA TO ITEM-TEXT.
      CONDENSE ITEM-TEXT NO-GAPS.
      APPEND ITEM TO ITEM_TABLE_DOCS.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE_DCLS-COLUMN3.
      ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
      ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_AUTO.
      ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
      ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
      IF WA_RETORNO-DT_SAIDA IS NOT INITIAL.
        CONCATENATE WA_RETORNO-DT_SAIDA+6(2) '.' WA_RETORNO-DT_SAIDA+4(2) '.' WA_RETORNO-DT_SAIDA(4) INTO ITEM-TEXT.
      ENDIF.
      APPEND ITEM TO ITEM_TABLE_DOCS.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE_DCLS-COLUMN8.
      ITEM-TEXT      = WA_RETORNO-DCL.
      APPEND ITEM TO ITEM_TABLE_DOCS.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE_DCLS-COLUMN9.
      ITEM-TEXT      = WA_RETORNO-IDVAGAO.
      APPEND ITEM TO ITEM_TABLE_DOCS.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE_DCLS-COLUMN10.
      ITEM-TEXT      = WA_RETORNO-SERIEDCL.
      APPEND ITEM TO ITEM_TABLE_DOCS.

      CLEAR ITEM.
      ITEM-NODE_KEY  = NODE-NODE_KEY.
      ITEM-ITEM_NAME = C_TREE_DCLS-COLUMN11.
      ITEM-TEXT      = WA_RETORNO-CNPJFERRO.
      APPEND ITEM TO ITEM_TABLE_DOCS.

    ENDLOOP.

    ADD 1 TO QTD_ITENS.

  ENDLOOP.

  CALL METHOD TREE_DCLS->ADD_NODES_AND_ITEMS
    EXPORTING
      NODE_TABLE                     = NODE_TABLE_DOCS
      ITEM_TABLE                     = ITEM_TABLE_DOCS
      ITEM_TABLE_STRUCTURE_NAME      = 'MTREEITM'
    EXCEPTIONS
      FAILED                         = 1
      CNTL_SYSTEM_ERROR              = 3
      ERROR_IN_TABLES                = 4
      DP_ERROR                       = 5
      TABLE_STRUCTURE_NAME_NOT_FOUND = 6.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  APAGAR_NOTAS_SELECIONADAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM APAGAR_NOTAS_SELECIONADAS .

  PERFORM SELECIONA_REGISTROS_ALV_0202.

  CHECK IT_LACAMENTO_SEL IS NOT INITIAL.

  LOOP AT IT_LACAMENTO_SEL INTO DATA(WA_LANCAMENTO).
    ZDE_FERRO_SAIDA_LAC-PESO_TOTAL = LC_SAIDA->EXC_NOTA_FISCAL( I_DOCNUM = WA_LANCAMENTO-DOCNUM ).
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  SELECIONA_REGISTROS_ALV_0202
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SELECIONA_REGISTROS_ALV_0202 .

  CLEAR IT_SELECTED_ROWS.

  CHECK CL_GRID_0202 IS NOT INITIAL.

  CALL METHOD CL_GRID_0202->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SELECTED_ROWS.

  CLEAR IT_RETORNO_SEL[].

  LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
    READ TABLE IT_LACAMENTO INTO DATA(WA_RETORNO_LC) INDEX WA_SELECTED_ROWS-INDEX.
    APPEND WA_RETORNO_LC TO IT_LACAMENTO_SEL.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  GERAR_PLANILHA_VAGOES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_CK_ALTEROU  text
*----------------------------------------------------------------------*
FORM GERAR_PLANILHA_VAGOES  USING P_ALTEROU TYPE CHAR01.

  "Monta os Processos por DCL/VAGAO/CNPJ
  CREATE OBJECT PLANILHA.
  DATA(IT_RETORNO_AUX) = IT_RETORNO[].
  DELETE IT_RETORNO_AUX WHERE DCL IS INITIAL.
  SORT IT_RETORNO_AUX BY DCL SERIEDCL IDVAGAO CNPJFERRO.
  DELETE ADJACENT DUPLICATES FROM IT_RETORNO_AUX COMPARING DCL SERIEDCL IDVAGAO CNPJFERRO.

  LOOP AT IT_RETORNO_AUX INTO DATA(WA_RETORNO).
    CLEAR: I_DCL, I_SERIE, I_ID_VAGAO, I_CNPJ, I_NOTAS.
    I_DCL        = WA_RETORNO-DCL.
    I_SERIE      = WA_RETORNO-SERIEDCL.
    I_ID_VAGAO   = WA_RETORNO-IDVAGAO.
    I_CNPJ       = WA_RETORNO-CNPJFERRO.

    LOOP AT IT_RETORNO INTO DATA(WA_RETORNO_1) WHERE DCL       EQ WA_RETORNO-DCL
                                                 AND SERIEDCL  EQ WA_RETORNO-SERIEDCL
                                                 AND IDVAGAO   EQ WA_RETORNO-IDVAGAO
                                                 AND CNPJFERRO EQ WA_RETORNO-CNPJFERRO.
      CLEAR: W_NOTAS.
      W_NOTAS-BRANCH          = WA_RETORNO_1-BRANCH.
      W_NOTAS-BUKRS           = WA_RETORNO_1-BUKRS.
      W_NOTAS-NFENUM          = WA_RETORNO_1-NR_NF_PROPRIA.
      W_NOTAS-COD_FORNECEDOR  = WA_RETORNO_1-COD_CLIENTE.
      W_NOTAS-DOCNUM          = WA_RETORNO_1-DOCNUM.
      W_NOTAS-CNPJCLIENTE     = WA_RETORNO_1-CNPJCLIENTE.
      W_NOTAS-DTADECARGA      = WA_RETORNO_1-DT_SAIDA.
      W_NOTAS-DTACHEGADA      = WA_RETORNO_1-DT_SAIDA.
      W_NOTAS-PESODVAGAO      = WA_RETORNO_1-PESO_SAIDA.
      APPEND W_NOTAS TO I_NOTAS.
    ENDLOOP.

    CREATE OBJECT SAIDA.
    SAIDA->MONTA_PROCESSO( I_DCL = I_DCL I_SERIE = I_SERIE I_ID_VAGAO = I_ID_VAGAO I_CNPJ = I_CNPJ I_NOTAS = I_NOTAS ).

    IF WA_RETORNO-DT_SAIDA IS NOT INITIAL.
      SAIDA->SET_DT_SAIDA( I_DT_SAIDA = WA_RETORNO-DT_SAIDA ).
    ENDIF.

    APPEND WA_RETORNO TO PLANILHA->POSICAO.
    SAIDA->CK_ALTEROU = P_ALTEROU.
    APPEND SAIDA TO PLANILHA->OBJETOS.
  ENDLOOP.

ENDFORM.
