FUNCTION Z_NW_ESTRATEGIA_EXECUTAR.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     VALUE(V_USUARIO) TYPE  SY-UNAME
*"  EXPORTING
*"     VALUE(MSG) TYPE  CHAR50
*"  TABLES
*"      T_LOTES STRUCTURE  ZFI_LOTES_IMP
*"      T_ESTRA STRUCTURE  ZFI_ESTRATEGIA_IMP
*"----------------------------------------------------------------------

*----------------------------------------------------------------------*
* TYPE POOLS
*----------------------------------------------------------------------*
  TYPE-POOLS: ICON.


  TYPES: BEGIN OF TY_ESTRA ,
           BUKRS     TYPE ZGLT038-BUKRS,
           LOTE      TYPE ZGLT038-LOTE,
           VALOR_DE  TYPE ZGLT037-VALOR_DE,
           VALOR_ATE TYPE ZGLT037-VALOR_ATE,
           APROVADOR TYPE ZGLT037-APROVADOR,
           NIVEL     TYPE ZGLT037-NIVEL,
           ESTADO(4),
           OPCOES(4),
         END OF TY_ESTRA,

         BEGIN OF TY_CADLOTE,
           EMPRESA(30) TYPE C,
           LOTE(50)    TYPE C,
           USUARIO(20) TYPE C,
           TOTAL       TYPE ZGLT036-VLR_MOEDA_INT,
           DEP_RESP(2),
           DATA(10),
         END OF TY_CADLOTE.

  DATA:   TG_ESTRA   TYPE TABLE OF TY_ESTRA,
          WG_CADLOTE TYPE TY_CADLOTE.

  DATA:  WL_ESTRA       LIKE LINE OF TG_ESTRA,
         WL_ESTRA2      LIKE LINE OF TG_ESTRA,
         W_ESTRA        TYPE         ZFI_ESTRATEGIA_IMP,
         WL_INPUT_ESTRA TYPE ZFIWRT0018,
         WL_ZFIWRT0008  TYPE ZFIWRT0008,
         FLAG_UNDO(1),
         LINHA_ESTRA    TYPE SY-TABIX,
         ULT_LINHA      TYPE SY-TABIX,
         E_ROW_ID       TYPE SY-TABIX.

  LOOP AT T_ESTRA.
    MOVE-CORRESPONDING T_ESTRA TO WL_ESTRA.
    MOVE T_ESTRA-LOTE TO WL_ESTRA-LOTE.
    APPEND WL_ESTRA TO TG_ESTRA.
  ENDLOOP.

  SORT TG_ESTRA BY NIVEL APROVADOR.
  READ TABLE TG_ESTRA INTO WL_ESTRA WITH KEY  APROVADOR = V_USUARIO.
  IF SY-SUBRC = 0.
    E_ROW_ID = SY-TABIX.
    READ TABLE T_LOTES INDEX 1.
    WG_CADLOTE-EMPRESA  = T_LOTES-EMPRESA.
    CONCATENATE  T_LOTES-LOTE'-'  INTO WG_CADLOTE-LOTE.
    WG_CADLOTE-USUARIO  = V_USUARIO .
    WG_CADLOTE-TOTAL    = T_LOTES-TOTAL.
    WG_CADLOTE-DEP_RESP = T_LOTES-DEP_RESP+0(2).
    WG_CADLOTE-DATA     = T_LOTES-DT_VENC.
    "
    IF WL_ESTRA-OPCOES NE ICON_SET_STATE AND WL_ESTRA-OPCOES NE ICON_SYSTEM_UNDO AND WL_ESTRA-OPCOES NE ICON_REJECT .
      MSG =  'Opção inválida para processamento!'.
      EXIT.
    ENDIF.

    IF V_USUARIO NE WL_ESTRA-APROVADOR.
      MSG =  'Usuário não é o aprovador deste nível!'.
      EXIT.
    ENDIF.
    IF  WL_ESTRA-OPCOES = ICON_SET_STATE.
      FLAG_UNDO = 'S'.
      LINHA_ESTRA =  E_ROW_ID.
      LOOP AT TG_ESTRA INTO WL_ESTRA2.
        ULT_LINHA = SY-TABIX.
        IF WL_ESTRA2-OPCOES = ICON_SET_STATE AND SY-TABIX LT E_ROW_ID.
          FLAG_UNDO = 'N'.
        ENDIF.
      ENDLOOP.

      IF FLAG_UNDO = 'S'.
        SELECT SINGLE *
          FROM ZFIWRT0008
          INTO WL_ZFIWRT0008
          WHERE SEQ_LCTO = WL_ESTRA-LOTE.
        WL_INPUT_ESTRA-MANDT       = SY-MANDT.
        WL_INPUT_ESTRA-SEQ_LCTO    = WL_ESTRA-LOTE.
        WL_INPUT_ESTRA-OPERACAO    = WL_ZFIWRT0008-OPERACAO.
        WL_INPUT_ESTRA-TIPO        = 'W'.
        WL_INPUT_ESTRA-NIVEL_APROV = WL_ESTRA-NIVEL.
        WL_INPUT_ESTRA-BRANCH      = WL_ZFIWRT0008-BRANCH.
        WL_INPUT_ESTRA-USNAM       = WL_ESTRA-APROVADOR.
        WL_INPUT_ESTRA-DATA_ATUAL  = SY-DATUM.
        WL_INPUT_ESTRA-HORA_ATUAL  = SY-UZEIT.
        WL_INPUT_ESTRA-USUARIO     = SY-UNAME.
        MODIFY ZFIWRT0018 FROM WL_INPUT_ESTRA.
        CLEAR WL_INPUT_ESTRA.
        IF ULT_LINHA = LINHA_ESTRA.
          CONCATENATE 'ZG0' WL_ESTRA-LOTE WL_ZFIWRT0008-BUDAT(4) INTO WL_ZFIWRT0008-OBJ_KEY.
          SELECT SINGLE *
            FROM ZFIWRT0001
            INTO @DATA(W001)
            WHERE OPERACAO = @WL_ZFIWRT0008-OPERACAO.

          IF W001-LM_APROVA EQ 'N'.
            UPDATE ZFIWRT0008 SET STATUS   = '2'
                                  OBJ_KEY  = WL_ZFIWRT0008-OBJ_KEY
           WHERE SEQ_LCTO = WL_ESTRA-LOTE.
          ELSE.
            UPDATE ZFIWRT0008 SET STATUS   = 'A'
                                  OBJ_KEY  = WL_ZFIWRT0008-OBJ_KEY
            WHERE SEQ_LCTO = WL_ESTRA-LOTE.
          ENDIF.
          COMMIT WORK.
          LOOP AT TG_ESTRA INTO WL_ESTRA.
            WL_ESTRA-OPCOES = ' ' .
            WL_ESTRA-ESTADO = ICON_CHECKED .
            MODIFY TG_ESTRA FROM WL_ESTRA INDEX SY-TABIX TRANSPORTING OPCOES ESTADO.
          ENDLOOP.
          MSG = 'Processamento concluído com sucesso'.
        ELSE.
          WL_ESTRA-OPCOES = ICON_SYSTEM_UNDO .
          WL_ESTRA-ESTADO = ICON_CHECKED .
          MODIFY TG_ESTRA FROM WL_ESTRA INDEX E_ROW_ID.
          PERFORM ENVIA_EMAIL(ZWRR0005) TABLES TG_ESTRA USING WG_CADLOTE E_ROW_ID .
          MSG = 'Processamento concluído com sucesso'.
        ENDIF.
      ELSE.
        MSG = 'Devem ser aprovadas as estratégias anteriores'.
      ENDIF.
    ELSEIF  WL_ESTRA-OPCOES = ICON_SYSTEM_UNDO .
      FLAG_UNDO = 'S'.
      LINHA_ESTRA =  E_ROW_ID.
      LOOP AT TG_ESTRA INTO WL_ESTRA2.
        IF WL_ESTRA2-OPCOES = ICON_SYSTEM_UNDO AND SY-TABIX GT E_ROW_ID.
          FLAG_UNDO = 'N'.
        ENDIF.
        IF WL_ESTRA2-OPCOES = ICON_MESSAGE_CRITICAL.
          MSG = 'Solicitação totalmente liberada'.
          FLAG_UNDO = 'N'.
          EXIT.
        ENDIF.
      ENDLOOP.
      IF FLAG_UNDO = 'S'.
        DELETE  FROM ZFIWRT0018
            WHERE SEQ_LCTO    = WL_ESTRA-LOTE
            AND   NIVEL_APROV = WL_ESTRA-NIVEL
            AND   USNAM       = WL_ESTRA-APROVADOR.
        WL_ESTRA-ESTADO = ICON_LED_YELLOW  .
        WL_ESTRA-OPCOES = ICON_SET_STATE.
        MODIFY TG_ESTRA FROM WL_ESTRA INDEX E_ROW_ID.
      ELSE.
        MSG = 'Devem ser reiniciadas as estratégias posteriores'.
      ENDIF.
    ELSEIF WL_ESTRA-OPCOES = ICON_REJECT.
      UPDATE ZFIWRT0008 SET STATUS = 'R'
            WHERE SEQ_LCTO = WL_ESTRA-LOTE.
      COMMIT WORK.

    ENDIF.
    LOOP AT TG_ESTRA INTO WL_ESTRA.
      IF E_ROW_ID = SY-TABIX.
        MOVE-CORRESPONDING WL_ESTRA TO W_ESTRA.
        MODIFY T_ESTRA FROM W_ESTRA INDEX SY-TABIX TRANSPORTING OPCOES ESTADO.
        EXIT.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFUNCTION.
