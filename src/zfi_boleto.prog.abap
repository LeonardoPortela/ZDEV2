*&---------------------------------------------------------------------*
*& Report
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  ZFI_BOLETO.

TYPES:
  BEGIN OF TY_J_1BNFLIN,
    DOCNUM      TYPE J_1BNFLIN-DOCNUM,
    REFKEY      TYPE J_1BNFLIN-REFKEY,
    AWKEY       TYPE BKPF-AWKEY,
   END OF TY_J_1BNFLIN,

   BEGIN OF TY_J_1BNFDOC,
     DOCNUM     TYPE J_1BNFDOC-DOCNUM,
     BUKRS      TYPE J_1BNFDOC-BUKRS,
     PSTDAT     TYPE J_1BNFDOC-PSTDAT,
     NFENUM     TYPE J_1BNFDOC-NFENUM,
   END OF TY_J_1BNFDOC,

   BEGIN OF TY_BKPF,
     BUKRS      TYPE BKPF-BUKRS,
     GJAHR      TYPE BKPF-GJAHR,
     AWKEY      TYPE BKPF-AWKEY,
     BELNR      TYPE BKPF-BELNR,
   END OF TY_BKPF,

   BEGIN OF TY_BSID,
     BUKRS       TYPE BSID-BUKRS,
     BELNR       TYPE BSID-BELNR,
     GJAHR       TYPE BSID-GJAHR,
     DMBTR       TYPE BSID-DMBTR,
     ZBD1T       TYPE BSID-ZBD1T,
     ZFBDT       TYPE BSID-ZFBDT,
     GSBER       TYPE BSID-GSBER,
     HBKID       TYPE BSID-HBKID,
     KUNNR       TYPE BSID-KUNNR,
     LIFNR_E     TYPE LFA1-LIFNR,
     LIFNR_F     TYPE LFA1-LIFNR,
   END OF TY_BSID,

   BEGIN OF TY_ZFIT0048,
     BUKRS         TYPE ZFIT0048-BUKRS,
     WERKS         TYPE ZFIT0048-WERKS,
     KUNNR         TYPE ZFIT0048-KUNNR,
     TXT_INSTRUCAO TYPE ZFIT0048-TXT_INSTRUCAO,
   END OF TY_ZFIT0048,

   BEGIN OF TY_T045T,
     BUKRS        TYPE T045T-BUKRS,
     HBKID        TYPE T045T-HBKID,
     DTAID        TYPE T045T-DTAID,
   END OF TY_T045T,

   BEGIN OF TY_T012K,
     BUKRS       TYPE T012K-BUKRS,
     HBKID       TYPE T012K-HBKID,
     BANKN       TYPE T012K-BANKN,
     BKONT       TYPE T012K-BKONT,
   END OF TY_T012K,

   BEGIN OF TY_T012,
     BUKRS       TYPE T012-BUKRS,
     HBKID       TYPE T012-HBKID,
     BANKL       TYPE T012-BANKL,
   END OF TY_T012,

   BEGIN OF TY_LFA1,
     LIFNR      TYPE LFA1-LIFNR,
     NAME1      TYPE LFA1-NAME1,
     STRAS      TYPE LFA1-STRAS,
     ORT02      TYPE LFA1-ORT02,
     PSTLZ      TYPE LFA1-PSTLZ,
     ORT01      TYPE LFA1-ORT01,
     REGIO      TYPE LFA1-REGIO,
     STCD1      TYPE LFA1-STCD1,
   END OF TY_LFA1,

   BEGIN OF TY_KNA1,
     KUNNR      TYPE KNA1-KUNNR,
     NAME1      TYPE KNA1-NAME1,
     STRAS      TYPE KNA1-STRAS,
     ORT02      TYPE KNA1-ORT02,
     PSTLZ      TYPE KNA1-PSTLZ,
     ORT01      TYPE KNA1-ORT01,
     REGIO      TYPE KNA1-REGIO,
     STCD1      TYPE KNA1-STCD1,
   END OF TY_KNA1,

   BEGIN OF TY_SAIDA,
     XENAME1       TYPE LFA1-NAME1,
     DTAID         TYPE T045T-DTAID,
     XESTRAS       TYPE LFA1-STRAS,
     XEORT02       TYPE LFA1-ORT02,
     XEORT01       TYPE LFA1-ORT01,
     XEREGIO       TYPE LFA1-REGIO,
     XEPSTLZ       TYPE LFA1-PSTLZ,
     NFENUM        TYPE J_1BNFDOC-NFENUM,
     REFKEY        TYPE J_1BNFLIN-REFKEY,
     XESTCD1       TYPE LFA1-STCD1,
     ZBD1T         TYPE BSID-ZFBDT,
     DMBTR         TYPE BSID-DMBTR,
     NAME1         TYPE KNA1-NAME1,
     STCD1         TYPE KNA1-STCD1,
     TXT_INSTRUCAO TYPE ZFIT0048-TXT_INSTRUCAO,
     DATA_SIST     TYPE SY-DATUM,
     BANKL         TYPE T012-BANKL,
     BANKN         TYPE T012K-BANKN,
     BKONT         TYPE T012K-BKONT,
     STRAS         TYPE KNA1-STRAS,
     ORT01         TYPE KNA1-ORT01,
     REGIO         TYPE KNA1-REGIO ,
     PSTLZ         TYPE KNA1-PSTLZ,
     XFNAME1       TYPE LFA1-NAME1,
     XFSTCD1       TYPE LFA1-STCD1,
     VAR_COD_BARRAS_FIM(44),
     VAR_LINHA_DIG(54),
   END OF TY_SAIDA.

CONSTANTS : C_X               TYPE C VALUE 'X'.

DATA: VDOCNUM TYPE J_1BNFDOC-DOCNUM,
      VL_FORM      TYPE TDSFNAME    ,
      VL_NAME      TYPE RS38L_FNAM  ,
      VDV_NOSSO(1).

*----------------------------------------------------------------------*
* TABELAS INTERNA
*----------------------------------------------------------------------*

DATA: IT_J_1BNFLIN  TYPE TABLE OF TY_J_1BNFLIN,
      IT_J_1BNFDOC  TYPE TABLE OF TY_J_1BNFDOC,
      IT_BKPF       TYPE TABLE OF TY_BKPF,
      IT_BSID       TYPE TABLE OF TY_BSID,
      IT_ZFIT0048   TYPE TABLE OF TY_ZFIT0048,
      IT_T045T      TYPE TABLE OF TY_T045T,
      IT_T012K      TYPE TABLE OF TY_T012K,
      IT_T012       TYPE TABLE OF TY_T012,
      IT_LFA1       TYPE TABLE OF TY_LFA1,
      IT_KNA1       TYPE TABLE OF TY_KNA1,
      IT_SAIDA      TYPE TABLE OF ZFI_BOLETO. " TY_SAIDA.


*----------------------------------------------------------------------*
* WORK AREA
*----------------------------------------------------------------------*
DATA: WA_J_1BNFLIN  TYPE TY_J_1BNFLIN,
      WA_J_1BNFDOC  TYPE TY_J_1BNFDOC,
      WA_BKPF       TYPE TY_BKPF,
      WA_BSID       TYPE TY_BSID,
      WA_ZFIT0048   TYPE TY_ZFIT0048,
      WA_T045T      TYPE TY_T045T,
      WA_T012K      TYPE TY_T012K,
      WA_T012       TYPE TY_T012,
      WA_LFA1       TYPE TY_LFA1,
      WA_KNA1       TYPE TY_KNA1,
      WA_SAIDA      TYPE ZFI_BOLETO. "TY_SAIDA.


SELECTION-SCREEN: BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
PARAMETERS:
                 P_DOC  TYPE J_1BNFDOC-DOCNUM  OBLIGATORY.

SELECTION-SCREEN: END OF BLOCK B1.

*&---------------------------------------------------------------------*
*& START OF SELECTION
*&---------------------------------------------------------------------*
START-OF-SELECTION.
 CALL FUNCTION 'Z_SD_PRINT_BOLETO'
      EXPORTING
        doc_numero     = p_doc
      EXCEPTIONS
        nao_localizado = 1
        OTHERS         = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

*  PERFORM:
*          F_SELECIONA_DADOS, " Form seleciona dados
*          F_PROCESSA_DADOS,
*          F_IMPRIME_SMART USING WA_SAIDA.


END-OF-SELECTION.
*&---------------------------------------------------------------------*
*&      Form  F_SELECIONA_DADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM F_SELECIONA_DADOS .

  VDOCNUM = P_DOC .
  SELECT  DOCNUM REFKEY
    FROM J_1BNFLIN
    INTO TABLE IT_J_1BNFLIN
    WHERE DOCNUM = VDOCNUM.

  LOOP AT IT_J_1BNFLIN INTO WA_J_1BNFLIN.
    WA_J_1BNFLIN-AWKEY = WA_J_1BNFLIN-REFKEY.
    MODIFY IT_J_1BNFLIN FROM WA_J_1BNFLIN INDEX SY-TABIX TRANSPORTING AWKEY.
  ENDLOOP.

  SELECT SINGLE DOCNUM BUKRS PSTDAT NFENUM
    FROM J_1BNFDOC
    INTO WA_J_1BNFDOC
    WHERE DOCNUM = VDOCNUM.

  SELECT BUKRS GJAHR AWKEY BELNR
    FROM BKPF
    INTO TABLE IT_BKPF
    FOR ALL ENTRIES IN IT_J_1BNFLIN
    WHERE BUKRS	=	WA_J_1BNFDOC-BUKRS
    AND   GJAHR	=	WA_J_1BNFDOC-PSTDAT+0(4)
    AND   AWKEY = IT_J_1BNFLIN-AWKEY.

  SELECT BUKRS BELNR GJAHR DMBTR ZBD1T ZFBDT GSBER HBKID KUNNR
    FROM BSID
    INTO TABLE IT_BSID
    FOR ALL ENTRIES IN IT_BKPF
    WHERE BUKRS =	IT_BKPF-BUKRS
    AND   BELNR	=	IT_BKPF-BELNR
    AND   GJAHR	=	IT_BKPF-GJAHR
    AND   ZLSCH	=	'D'
    AND   HBKID	=	'BBRA'.

  LOOP AT IT_BSID INTO WA_BSID.
    CONCATENATE WA_BSID-BUKRS+2(2) '01' INTO WA_BSID-LIFNR_E.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = WA_BSID-LIFNR_E
      IMPORTING
        OUTPUT = WA_BSID-LIFNR_E.
    WA_BSID-LIFNR_F = WA_BSID-GSBER.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = WA_BSID-LIFNR_F
      IMPORTING
        OUTPUT = WA_BSID-LIFNR_F.
    MODIFY IT_BSID FROM WA_BSID INDEX SY-TABIX TRANSPORTING LIFNR_E LIFNR_F.
  ENDLOOP.


  SELECT  BUKRS WERKS KUNNR TXT_INSTRUCAO
    FROM ZFIT0048
    INTO TABLE IT_ZFIT0048
    FOR ALL ENTRIES IN IT_BSID
    WHERE INSTRUCAO = '01'
    AND   BUKRS     = IT_BSID-BUKRS
    AND   WERKS     = IT_BSID-GSBER
    AND   KUNNR     = IT_BSID-KUNNR.
  IF IT_ZFIT0048[] IS INITIAL.
    SELECT  BUKRS WERKS KUNNR TXT_INSTRUCAO
    FROM ZFIT0048
    INTO TABLE IT_ZFIT0048
    FOR ALL ENTRIES IN IT_BSID
    WHERE INSTRUCAO = '01'
    AND   BUKRS     = IT_BSID-BUKRS
    AND   WERKS     = IT_BSID-GSBER.
    IF IT_ZFIT0048[] IS INITIAL.
      SELECT  BUKRS WERKS KUNNR TXT_INSTRUCAO
      FROM ZFIT0048
      INTO TABLE IT_ZFIT0048
      FOR ALL ENTRIES IN IT_BSID
      WHERE INSTRUCAO = '01'
      AND   BUKRS     = IT_BSID-BUKRS.
      IF IT_ZFIT0048[] IS INITIAL.
        SELECT  BUKRS WERKS KUNNR TXT_INSTRUCAO
        FROM ZFIT0048
        INTO TABLE IT_ZFIT0048
        WHERE INSTRUCAO = '01'.
      ENDIF.
    ENDIF.
  ENDIF.



  SELECT  BUKRS HBKID DTAID
    FROM T045T
    INTO TABLE IT_T045T
    FOR ALL ENTRIES IN IT_BSID
    WHERE BUKRS	=	IT_BSID-BUKRS
    AND   ZLSCH	=	'D'
    AND   HBKID	=	IT_BSID-HBKID.

  SELECT  BUKRS HBKID BANKN BKONT
    FROM T012K
    INTO TABLE IT_T012K
    FOR ALL ENTRIES IN IT_BSID
    WHERE BUKRS	=	IT_BSID-BUKRS
    AND   HBKID	=	IT_BSID-HBKID.

  SELECT BUKRS HBKID BANKL
   FROM T012
   INTO TABLE IT_T012
   FOR ALL ENTRIES IN IT_BSID
   WHERE BUKRS  = IT_BSID-BUKRS
   AND   HBKID  = IT_BSID-HBKID.

  "EMPRESA
  SELECT  LIFNR NAME1 STRAS ORT02 PSTLZ ORT01 REGIO STCD1
    FROM LFA1
    INTO TABLE IT_LFA1
    FOR ALL ENTRIES IN IT_BSID
    WHERE LIFNR = IT_BSID-LIFNR_E.

  "FILIAL
  SELECT  LIFNR NAME1 STRAS ORT02 PSTLZ ORT01 REGIO STCD1
    FROM LFA1
    APPENDING TABLE IT_LFA1
    FOR ALL ENTRIES IN IT_BSID
    WHERE LIFNR = IT_BSID-LIFNR_F.

  "CLIENTE
  SELECT  KUNNR NAME1 STRAS ORT02 PSTLZ ORT01 REGIO STCD1
  FROM KNA1
  INTO TABLE IT_KNA1
  FOR ALL ENTRIES IN IT_BSID
  WHERE KUNNR = IT_BSID-KUNNR.





ENDFORM.                    " F_SELECIONA_DADOS
*&---------------------------------------------------------------------*
*&      Form  F_PROCESSA_DADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM F_PROCESSA_DADOS .

  SORT:  IT_BKPF     BY BUKRS GJAHR AWKEY,
         IT_BSID     BY BUKRS BELNR GJAHR,
         IT_ZFIT0048 BY BUKRS WERKS KUNNR,
         IT_T045T    BY BUKRS	HBKID,
         IT_T012K    BY BUKRS	HBKID,
         IT_T012     BY BUKRS	HBKID,
         IT_LFA1     BY LIFNR,
         IT_KNA1     BY KUNNR.

  DATA: WL_CONT              TYPE SY-TABIX,
        WL_CONT_AUX          TYPE SY-TABIX,
        WL_CONT_AUX2         TYPE SY-TABIX.

  LOOP AT IT_J_1BNFLIN INTO WA_J_1BNFLIN.

    LOOP AT IT_BKPF INTO WA_BKPF WHERE BUKRS  = WA_J_1BNFDOC-BUKRS
                                 AND   GJAHR  = WA_J_1BNFDOC-PSTDAT+0(4)
                                 AND   AWKEY  = WA_J_1BNFLIN-AWKEY.

      LOOP AT IT_BSID INTO WA_BSID WHERE BUKRS = WA_BKPF-BUKRS
                                   AND   BELNR = WA_BKPF-BELNR
                                   AND   GJAHR = WA_BKPF-GJAHR.

        READ TABLE IT_T045T INTO WA_T045T WITH KEY BUKRS = WA_BSID-BUKRS 	HBKID = WA_BSID-HBKID BINARY SEARCH.
        WA_SAIDA-DTAID         = WA_T045T-DTAID.

        READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_BSID-LIFNR_E BINARY SEARCH.
        WA_SAIDA-XENAME1       = WA_LFA1-NAME1.
        WA_SAIDA-XESTRAS       = WA_LFA1-STRAS.
        WA_SAIDA-XEORT02       = WA_LFA1-ORT02.
        WA_SAIDA-XEORT01       = WA_LFA1-ORT01.
        WA_SAIDA-XEREGIO       = WA_LFA1-REGIO.
        WA_SAIDA-XEPSTLZ       = WA_LFA1-PSTLZ.
        WA_SAIDA-XESTCD1       = WA_LFA1-STCD1.

        WA_SAIDA-NFENUM        = WA_J_1BNFDOC-NFENUM.
        WA_SAIDA-REFKEY        = WA_J_1BNFLIN-REFKEY.

        WA_SAIDA-ZBD1T         = WA_BSID-ZFBDT + WA_BSID-ZBD1T.
        WA_SAIDA-DMBTR         = WA_BSID-DMBTR.

        IF IT_ZFIT0048[] IS NOT INITIAL.
          READ TABLE IT_ZFIT0048 INTO WA_ZFIT0048 INDEX 1.
          CLEAR: WL_CONT_AUX2, WL_CONT_AUX, WL_CONT.
          WL_CONT = STRLEN( WA_ZFIT0048-TXT_INSTRUCAO ).
          WL_CONT_AUX = WL_CONT / 79.
          DO.
            IF SY-INDEX = 1.
              WA_SAIDA-TXT_INSTRUCAO1 = WA_ZFIT0048-TXT_INSTRUCAO+WL_CONT_AUX2.
            ELSEIF SY-INDEX = 2.
              WA_SAIDA-TXT_INSTRUCAO2 = WA_ZFIT0048-TXT_INSTRUCAO+WL_CONT_AUX2.
            ELSEIF SY-INDEX = 3.
              WA_SAIDA-TXT_INSTRUCAO3 = WA_ZFIT0048-TXT_INSTRUCAO+WL_CONT_AUX2.
            ELSEIF SY-INDEX = 4.
              WA_SAIDA-TXT_INSTRUCAO4 = WA_ZFIT0048-TXT_INSTRUCAO+WL_CONT_AUX2.
            ELSEIF SY-INDEX = 5.
              WA_SAIDA-TXT_INSTRUCAO5 = WA_ZFIT0048-TXT_INSTRUCAO+WL_CONT_AUX2.
            ELSEIF SY-INDEX = 6.
              WA_SAIDA-TXT_INSTRUCAO6 = WA_ZFIT0048-TXT_INSTRUCAO+WL_CONT_AUX2.
            ENDIF.
            ADD 80 TO WL_CONT_AUX2.
            IF WL_CONT_AUX2 GT WL_CONT.
              EXIT.

            ENDIF.
          ENDDO.
        ENDIF.

        WA_SAIDA-DATA_SIST     = SY-DATUM.

        READ TABLE IT_T012 INTO WA_T012 WITH KEY BUKRS = WA_BSID-BUKRS 	HBKID = WA_BSID-HBKID BINARY SEARCH.
        WA_SAIDA-BANKL         = WA_T012-BANKL+5(10). "Agencia

        READ TABLE IT_T012K INTO WA_T012K WITH KEY BUKRS = WA_BSID-BUKRS 	HBKID = WA_BSID-HBKID BINARY SEARCH.
        WA_SAIDA-BANKN         = WA_T012K-BANKN.
        WA_SAIDA-BKONT         = WA_T012K-BKONT.

        READ TABLE IT_KNA1 INTO WA_KNA1 WITH KEY KUNNR = WA_BSID-KUNNR BINARY SEARCH.
        WA_SAIDA-NAME1         = WA_KNA1-NAME1.
        WA_SAIDA-STCD1         = WA_KNA1-STCD1.
        WA_SAIDA-STRAS         = WA_KNA1-STRAS.
        WA_SAIDA-ORT01         = WA_KNA1-ORT01.
        WA_SAIDA-REGIO         = WA_KNA1-REGIO.
        WA_SAIDA-PSTLZ         = WA_KNA1-PSTLZ.

        READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_BSID-LIFNR_F BINARY SEARCH.
        WA_SAIDA-XFNAME1       = WA_LFA1-NAME1.
        WA_SAIDA-XFSTCD1       = WA_LFA1-STCD1.

        PERFORM CALCULA_COD_BARRAS USING WA_SAIDA-DMBTR WA_SAIDA-ZBD1T WA_SAIDA-DTAID CHANGING VDV_NOSSO.

        CONCATENATE WA_SAIDA-DTAID '-' VDV_NOSSO INTO WA_SAIDA-DTAID.


        APPEND WA_SAIDA TO IT_SAIDA.

      ENDLOOP.
    ENDLOOP.

  ENDLOOP.

ENDFORM.                    " F_PROCESSA_DADOS
*&---------------------------------------------------------------------*
*&      Form  CALCULA_COD_BARRAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CALCULA_COD_BARRAS USING P_VALOR P_VENCTO P_NOSSO CHANGING VDV_NOSSO.

  " Variáveis para o código de barras
  DATA: VAR_COD_BARRAS(44),
        VAR_COD_BARRAS_COP(44),
        VAR_COD_BARRAS_INV(43),
        VAR_COD_BARRAS_FIM(44),
        VAR_BANCO(03) VALUE '001',
        VAR_MOEDA(01) VALUE '9',
        VAR_DIG05(01) VALUE ' ',
        VAR_FATOR(04),
        VAR_VALOR(10) TYPE N,
        VAR_ZEROS(06) VALUE '000000',                     "campo livre
        VAR_NOSSO_NUMERO(17) VALUE '10572570000000685',   "campo livre
        VAR_NOSSO_NUMERO_COP(17) ,                        "campo livre
        VAR_NOSSO_NUMERO_INV(17) ,                        "campo livre
        "VDV_NOSSO(1),
        VAR_CARTEIRA(02) VALUE '17'.                      "campo livre

  " Variáveis para a linha digitável
  DATA:  VAR_LINHA_DIG(54),
         VCAMPO1(9),
         VCAMPO1_FIM(11),
         VCAMPO1_INV(9),
         VCAMPO1_COP(9),
         VDV1(1),
         VCAMPO2(10),
         VCAMPO2_FIM(12),
         VCAMPO2_INV(10),
         VCAMPO2_COP(10),
         VDV2(1),
         VCAMPO3(10),
         VCAMPO3_FIM(12),
         VCAMPO3_INV(10),
         VCAMPO3_COP(10),
         VDV3(1),
         VCAMPO4(1),
         VCAMPO5(14),
         XCALC TYPE I,
         VCALC TYPE I,
         CCALC(2) TYPE N,
         VTOT_CAMPO_2(2) TYPE N,
         VTOT_CAMPO_3(3) TYPE N,
         VDEZENA TYPE I.

  DATA : DATA_BASE TYPE SY-DATUM VALUE '19971007',
         XCONTADOR TYPE I,
         XPOSICAO  TYPE I,
         XMULTI    TYPE I,
         XTOTAL    TYPE I,
         XRESTO    TYPE I,
         XDVCOD    TYPE I,
         CDVCOD(1).



  VAR_NOSSO_NUMERO = P_NOSSO.

  VAR_FATOR = P_VENCTO - DATA_BASE.
  VAR_VALOR = P_VALOR * 100.

  CONCATENATE VAR_BANCO VAR_MOEDA VAR_DIG05 VAR_FATOR VAR_VALOR VAR_ZEROS VAR_NOSSO_NUMERO VAR_CARTEIRA INTO VAR_COD_BARRAS.

  VAR_COD_BARRAS_COP = VAR_COD_BARRAS.

  " Inverte codigo de barras
  XCONTADOR = 0.
  WHILE VAR_COD_BARRAS_COP NE SPACE.
    ADD 1 TO XCONTADOR.
    XPOSICAO = 43 - XCONTADOR.
    VAR_COD_BARRAS_INV+XPOSICAO(1) = VAR_COD_BARRAS_COP(1).
    SHIFT VAR_COD_BARRAS_COP.
  ENDWHILE.

  " Calculo Digito DV
  XMULTI = 2.
  XTOTAL = 0.
  WHILE VAR_COD_BARRAS_INV NE SPACE.
    XPOSICAO = VAR_COD_BARRAS_INV(1).
    IF XMULTI = 10.
      XMULTI = 2.
    ENDIF.
    XTOTAL = XTOTAL + ( XMULTI * XPOSICAO ).
    ADD 1 TO XMULTI.
    SHIFT VAR_COD_BARRAS_INV.
  ENDWHILE.

  XRESTO = XTOTAL MOD 11.

  XDVCOD = 11 - XRESTO.

  IF XDVCOD = 0 OR XDVCOD = 10 OR XDVCOD = 11.
    XDVCOD = 1.
  ENDIF.

  CDVCOD = XDVCOD.
  CONCATENATE VAR_COD_BARRAS+0(4) CDVCOD VAR_COD_BARRAS+4(39)  INTO VAR_COD_BARRAS_FIM.

  " LINHA DIGITAVEL.
  CONCATENATE VAR_BANCO VAR_MOEDA VAR_COD_BARRAS_FIM+19(5) INTO VCAMPO1.
  VCAMPO2 = VAR_COD_BARRAS_FIM+24(10).
  VCAMPO3 = VAR_COD_BARRAS_FIM+34(10).
  VCAMPO4 = CDVCOD.
  CONCATENATE VAR_FATOR VAR_VALOR INTO VCAMPO5.


  " Inverte campo1
  VCAMPO1_COP = VCAMPO1.
  XCONTADOR = 0.
  WHILE VCAMPO1_COP NE SPACE.
    ADD 1 TO XCONTADOR.
    XPOSICAO = 9 - XCONTADOR.
    VCAMPO1_INV+XPOSICAO(1) = VCAMPO1_COP(1).
    SHIFT VCAMPO1_COP.
  ENDWHILE.

  " Calculo Digito DV Campo1
  XMULTI = 2.
  XTOTAL = 0.
  WHILE VCAMPO1_INV NE SPACE.
    XPOSICAO = VCAMPO1_INV(1).
    IF XMULTI = 0.
      XMULTI = 2.
    ENDIF.
    XCALC = ( XMULTI * XPOSICAO ).
    CCALC = XCALC .
    XCALC = 0.
    WHILE CCALC NE SPACE.
      VCALC = CCALC(1).
      XCALC = XCALC + VCALC.
      SHIFT CCALC.
    ENDWHILE.
    XTOTAL = XTOTAL + XCALC.
    SUBTRACT 1 FROM XMULTI.
    SHIFT VCAMPO1_INV.
  ENDWHILE.

  IF XTOTAL LT 100.
    VTOT_CAMPO_2 = XTOTAL.
    IF  XTOTAL < 10.
      VDEZENA = 10.
    ELSE.
      VDEZENA = VTOT_CAMPO_2+0(1).
      VDEZENA = ( VDEZENA + 1 ) * 10.
    ENDIF.
  ELSE.
    VTOT_CAMPO_3 = XTOTAL.
    VDEZENA = VTOT_CAMPO_3+0(2).
    VDEZENA = ( VDEZENA + 1 ) * 10.
  ENDIF.

  XDVCOD = VDEZENA - XTOTAL.
  IF XDVCOD = 10.
    VDV1 = 0.
  ELSE.
    VDV1 = XDVCOD.
  ENDIF.

  " Inverte campo2
  VCAMPO2_COP = VCAMPO2.
  XCONTADOR = 0.
  WHILE VCAMPO2_COP NE SPACE.
    ADD 1 TO XCONTADOR.
    XPOSICAO = 10 - XCONTADOR.
    VCAMPO2_INV+XPOSICAO(1) = VCAMPO2_COP(1).
    SHIFT VCAMPO2_COP.
  ENDWHILE.

  " Calculo Digito DV Campo2
  XMULTI = 2.
  XTOTAL = 0.
  WHILE VCAMPO2_INV NE SPACE.
    XPOSICAO = VCAMPO2_INV(1).
    IF XMULTI = 0.
      XMULTI = 2.
    ENDIF.
    XCALC = ( XMULTI * XPOSICAO ).
    CCALC = XCALC .
    XCALC = 0.
    WHILE CCALC NE SPACE.
      VCALC = CCALC(1).
      XCALC = XCALC + VCALC.
      SHIFT CCALC.
    ENDWHILE.
    XTOTAL = XTOTAL + XCALC.
    SUBTRACT 1 FROM XMULTI.
    SHIFT VCAMPO2_INV.
  ENDWHILE.

  IF XTOTAL LT 100.
    VTOT_CAMPO_2 = XTOTAL.
    IF  XTOTAL < 10.
      VDEZENA = 10.
    ELSE.
      VDEZENA = VTOT_CAMPO_2+0(1).
      VDEZENA = ( VDEZENA + 1 ) * 10.
    ENDIF.
  ELSE.
    VTOT_CAMPO_3 = XTOTAL.
    VDEZENA = VTOT_CAMPO_3+0(2).
    VDEZENA = ( VDEZENA + 1 ) * 10.
  ENDIF.

  XDVCOD = VDEZENA - XTOTAL.
  IF XDVCOD = 10.
    VDV2 = 0.
  ELSE.
    VDV2 = XDVCOD.
  ENDIF.

  " Inverte campo3
  VCAMPO3_COP = VCAMPO3.
  XCONTADOR = 0.
  WHILE VCAMPO3_COP NE SPACE.
    ADD 1 TO XCONTADOR.
    XPOSICAO = 10 - XCONTADOR.
    VCAMPO3_INV+XPOSICAO(1) = VCAMPO3_COP(1).
    SHIFT VCAMPO3_COP.
  ENDWHILE.

  " Calculo Digito DV Campo3
  XMULTI = 2.
  XTOTAL = 0.
  WHILE VCAMPO3_INV NE SPACE.
    XPOSICAO = VCAMPO3_INV(1).
    IF XMULTI = 0.
      XMULTI = 2.
    ENDIF.
    XCALC = ( XMULTI * XPOSICAO ).
    CCALC = XCALC .
    XCALC = 0.
    WHILE CCALC NE SPACE.
      VCALC = CCALC(1).
      XCALC = XCALC + VCALC.
      SHIFT CCALC.
    ENDWHILE.
    XTOTAL = XTOTAL + XCALC.
    SUBTRACT 1 FROM XMULTI.
    SHIFT VCAMPO3_INV.
  ENDWHILE.

  IF XTOTAL LT 100.
    VTOT_CAMPO_2 = XTOTAL.
    IF  XTOTAL < 10.
      VDEZENA = 10.
    ELSE.
      VDEZENA = VTOT_CAMPO_2+0(1).
      VDEZENA = ( VDEZENA + 1 ) * 10.
    ENDIF.
  ELSE.
    VTOT_CAMPO_3 = XTOTAL.
    VDEZENA = VTOT_CAMPO_3+0(2).
    VDEZENA = ( VDEZENA + 1 ) * 10.
  ENDIF.

  XDVCOD = VDEZENA - XTOTAL.
  IF XDVCOD = 10.
    VDV3 = 0.
  ELSE.
    VDV3 = XDVCOD.
  ENDIF.

  " monta linha digitável.
  CONCATENATE VCAMPO1+0(5) '.' VCAMPO1+5(4) VDV1 INTO  VCAMPO1_FIM.
  CONCATENATE VCAMPO2+0(5) '.' VCAMPO2+5(5) VDV2 INTO  VCAMPO2_FIM.
  CONCATENATE VCAMPO3+0(5) '.' VCAMPO3+5(5) VDV3 INTO  VCAMPO3_FIM.
  CONCATENATE VCAMPO1_FIM VCAMPO2_FIM VCAMPO3_FIM VCAMPO4 VCAMPO5 INTO VAR_LINHA_DIG SEPARATED BY SPACE.


  " Inverte NOSSO NUMERO
  VAR_NOSSO_NUMERO_COP = VAR_NOSSO_NUMERO.
  XCONTADOR = 0.
  WHILE VAR_NOSSO_NUMERO_COP NE SPACE.
    ADD 1 TO XCONTADOR.
    XPOSICAO = 17 - XCONTADOR.
    VAR_NOSSO_NUMERO_INV+XPOSICAO(1) = VAR_NOSSO_NUMERO_COP(1).
    SHIFT VAR_NOSSO_NUMERO_COP.
  ENDWHILE.

  " Calculo Digito NOSSO NUMERO
  XMULTI = 9.
  XTOTAL = 0.
  WHILE VAR_NOSSO_NUMERO_INV NE SPACE.
    XPOSICAO = VAR_NOSSO_NUMERO_INV(1).
    IF XMULTI = 1.
      XMULTI = 9.
    ENDIF.
    XCALC = ( XMULTI * XPOSICAO ).
    XTOTAL = XTOTAL + XCALC.
    SUBTRACT 1 FROM XMULTI.
    SHIFT VAR_NOSSO_NUMERO_INV.
  ENDWHILE.

  XRESTO = XTOTAL MOD 11.

  CLEAR VDV_NOSSO.
  IF XRESTO LT 10.
    VDV_NOSSO = XRESTO.
  ELSEIF XRESTO EQ 10.
    VDV_NOSSO = 'X'.
  ENDIF.

  WA_SAIDA-VAR_COD_BARRAS_FIM = VAR_COD_BARRAS_FIM.
  WA_SAIDA-VAR_LINHA_DIG = VAR_LINHA_DIG.

ENDFORM.                    " CALCULA_COD_BARRAS
*&---------------------------------------------------------------------*
*&      Form  F_IMPRIME_SMART
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_SAIDA  text
*----------------------------------------------------------------------*
FORM F_IMPRIME_SMART  USING    P_WA_SAIDA.
  DATA: LS_CONTROL            TYPE SSFCTRLOP,
          LS_OPTIONS            TYPE SSFCOMPOP,
          JOB_OUTPUT_INFO       TYPE SSFCRESCL,
          LS_XSFPARAM_LINE      TYPE SSFXSFP,
          V_BIN_FILESIZE TYPE I,
          IT_DOCS  TYPE STANDARD TABLE OF DOCS,
          IT_LINES TYPE STANDARD TABLE OF TLINE,
           LV_FNAME TYPE RS38L_FNAM ,
        LV_MAIL_RECIPIENT TYPE SWOTOBJID ,
        LV_MAIL_SENDER    TYPE SWOTOBJID ,
        LV_CONTROL        TYPE SSFCTRLOP ,
        LV_NAME           TYPE SO_NAME   ,
        LV_OUTPUT         TYPE SSFCOMPOP ,
        WL_ZMENG(20),
        WL_DMBTR(20),
        WL_VLRTOT(20).

  DATA: I_OTF TYPE ITCOO OCCURS 0 WITH HEADER LINE,
  I_TLINE TYPE TABLE OF TLINE WITH HEADER LINE,
  I_RECEIVERS TYPE TABLE OF SOMLRECI1 WITH HEADER LINE,
  I_RECORD LIKE SOLISTI1 OCCURS 0 WITH HEADER LINE,
* Objects to send mail.
  I_OBJPACK LIKE SOPCKLSTI1 OCCURS 0 WITH HEADER LINE,
  I_OBJTXT LIKE SOLISTI1 OCCURS 0 WITH HEADER LINE,
  I_OBJBIN LIKE SOLISTI1 OCCURS 0 WITH HEADER LINE,
  I_RECLIST LIKE SOMLRECI1 OCCURS 0 WITH HEADER LINE,
* Work Area declarations
  WA_OBJHEAD TYPE SOLI_TAB,
  W_CTRLOP TYPE SSFCTRLOP,
  W_COMPOP TYPE SSFCOMPOP,
  W_RETURN TYPE SSFCRESCL,
  WA_DOC_CHNG TYPE SODOCCHGI1,
  W_DATA TYPE SODOCCHGI1,
  WA_BUFFER TYPE STRING, "To convert from 132 to 255
* Variables declarations
  V_FORM_NAME TYPE RS38L_FNAM,
  V_LEN_IN LIKE SOOD-OBJLEN,
  V_LEN_OUT LIKE SOOD-OBJLEN,
  V_LEN_OUTN TYPE I,
  V_LINES_TXT TYPE I,
  V_LINES_BIN TYPE I.

  VL_FORM = 'ZFI_BOLETO_BB'.
*
  CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
    EXPORTING
      FORMNAME           = VL_FORM
    IMPORTING
      FM_NAME            = VL_NAME
    EXCEPTIONS
      NO_FORM            = 1
      NO_FUNCTION_MODULE = 2
      OTHERS             = 3.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.


*  Impresora
  LS_CONTROL-NO_DIALOG = 'X'. "Evita la pantalla de opciones de salida del formulario
  LS_OPTIONS-TDDEST   = 'LOCL'.
  LS_OPTIONS-TDIMMED  = C_X.
  LS_OPTIONS-TDNEWID  = C_X.
  LS_OPTIONS-TDNOARCH = C_X.
  "LS_OPTIONS-TDNOPREV = 'X'.

  LS_CONTROL-PREVIEW = SPACE.
  LS_CONTROL-DEVICE  = 'PRINTER'.
  LS_CONTROL-GETOTF  = ' '.

  CLEAR:JOB_OUTPUT_INFO.
  CALL FUNCTION VL_NAME
    EXPORTING
      USER_SETTINGS      = ' '
      CONTROL_PARAMETERS = LS_CONTROL
      OUTPUT_OPTIONS     = LS_OPTIONS
      WA_SAIDA           = P_WA_SAIDA
    IMPORTING
      JOB_OUTPUT_INFO    = JOB_OUTPUT_INFO
*    TABLES

    EXCEPTIONS
      FORMATTING_ERROR   = 1
      INTERNAL_ERROR     = 2
      SEND_ERROR         = 3
      USER_CANCELED      = 4
      OTHERS             = 5.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
ENDFORM.                    " F_IMPRIME_SMART
