
DATA:
  IT_LOTE            TYPE TABLE OF TY_LOTE,
  IT_ZFIT0042_RE     TYPE TABLE OF TY_ZFIT0042_RE,
  IT_VBRP            TYPE TABLE OF TY_VBRP,
  IT_ZFIT0036        TYPE TABLE OF TY_ZFIT0036,
  IT_LFA1            TYPE TABLE OF TY_LFA1,
  IT_ZIB_CONTABIL    TYPE TABLE OF TY_ZIB_CONTABIL,
  IT_ZDOC_EXP        TYPE TABLE OF TY_ZDOC_EXP,
  IT_ZNOM_TRANSPORTE TYPE TABLE OF TY_ZNOM_TRANSPORTE,
  IT_ZNOM_CONHEC     TYPE TABLE OF TY_ZNOM_CONHEC,
  IT_LIPS            TYPE TABLE OF TY_LIPS,
  IT_LFBK            TYPE TABLE OF TY_LFBK,
  IT_BNKA            TYPE TABLE OF TY_BNKA,

  WA_LOTE            TYPE TY_LOTE,
  WA_ZFIT0042_RE     TYPE TY_ZFIT0042_RE,
  WA_VBRP            TYPE TY_VBRP,
  WA_ZFIT0036        TYPE TY_ZFIT0036,
  WA_LFA1            TYPE TY_LFA1,
  WA_ZIB_CONTABIL    TYPE TY_ZIB_CONTABIL,
  WA_ZDOC_EXP        TYPE TY_ZDOC_EXP,
  WA_ZNOM_TRANSPORTE TYPE TY_ZNOM_TRANSPORTE,
  WA_ZNOM_CONHEC     TYPE TY_ZNOM_CONHEC,
  WA_LIPS            TYPE TY_LIPS,
  WA_LFBK            TYPE TY_LFBK,
  WA_BNKA            TYPE TY_BNKA,
  WA_ZSDT0170        TYPE ZSDT0170.

"Seleciona Dados
DATA:TABIX     TYPE SY-TABIX,
     VLOTE(10),
     STRING    TYPE ZFIT0036-OBSERVACAO.

BREAK COLIVEIRA.

CLEAR: VLOTE.
STRING = I_LOTE.
WHILE STRING NE SPACE.
  IF STRING(1) = '<'.
    CLEAR VLOTE.
  ELSEIF STRING(1) = '>'.
    WA_LOTE-LOTE = VLOTE.
    APPEND WA_LOTE TO IT_LOTE.
  ELSE.
    CONCATENATE VLOTE STRING(1) INTO VLOTE.
  ENDIF.
  SHIFT STRING.
ENDWHILE.

SELECT TP_OPERACAO DT_VENC NR_RE NUMERO_DUE NR_INVOICE LOTE DMBE2 NRO_FATURA TX_CAMBIO
  FROM ZFIT0042
  INTO TABLE IT_ZFIT0042_RE
  FOR ALL ENTRIES IN IT_LOTE
  WHERE LOTE        = IT_LOTE-LOTE
  AND   DT_VENC     = I_VENCI.

CHECK SY-SUBRC = 0.

IF I_TAXA GT 0.
  DELETE IT_ZFIT0042_RE WHERE TX_CAMBIO NE I_TAXA.
ENDIF.

CHECK IT_ZFIT0042_RE[] IS NOT INITIAL.

SELECT VBELN GSBER
  FROM VBRP
  INTO TABLE IT_VBRP
  FOR ALL ENTRIES IN IT_ZFIT0042_RE
  WHERE VBELN = IT_ZFIT0042_RE-NRO_FATURA.

LOOP AT IT_VBRP INTO WA_VBRP.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = WA_VBRP-GSBER
    IMPORTING
      OUTPUT = WA_VBRP-LIFNR.
  MODIFY IT_VBRP FROM WA_VBRP INDEX SY-TABIX TRANSPORTING LIFNR.
ENDLOOP.

SELECT BUKRS LOTE INVOICE OBJ_KEY NAVIO BVTYP DT_PGTO VLR_PGTO  MOEDA_PGTO
  FROM ZFIT0036
  INTO TABLE IT_ZFIT0036
  FOR ALL ENTRIES IN IT_ZFIT0042_RE
  WHERE LOTE      = IT_ZFIT0042_RE-LOTE.

CHECK SY-SUBRC = 0.

READ TABLE IT_ZFIT0036 INTO WA_ZFIT0036 INDEX 1.
SELECT SINGLE BUTXT
  INTO WG_BUTXT
FROM T001
WHERE BUKRS = WA_ZFIT0036-BUKRS.

SELECT  OBJ_KEY HKONT
  FROM ZIB_CONTABIL
  INTO TABLE IT_ZIB_CONTABIL
  FOR ALL ENTRIES IN IT_ZFIT0036
  WHERE OBJ_KEY = IT_ZFIT0036-OBJ_KEY
  AND BSCHL	 NOT IN ('40','50').

CHECK SY-SUBRC = 0.

SORT IT_ZFIT0036 BY OBJ_KEY.
LOOP AT IT_ZIB_CONTABIL  INTO WA_ZIB_CONTABIL.
  TABIX = SY-TABIX.
  READ TABLE IT_ZFIT0036 INTO WA_ZFIT0036 WITH KEY OBJ_KEY = WA_ZIB_CONTABIL-OBJ_KEY BINARY SEARCH.
  WA_ZIB_CONTABIL-BVTYP = WA_ZFIT0036-BVTYP.
  MODIFY IT_ZIB_CONTABIL FROM WA_ZIB_CONTABIL INDEX TABIX TRANSPORTING BVTYP.
ENDLOOP.


SELECT  LIFNR STCD1 NAME1
  FROM LFA1
  INTO TABLE IT_LFA1
  FOR ALL ENTRIES IN IT_ZIB_CONTABIL
  WHERE LIFNR = IT_ZIB_CONTABIL-HKONT.

CHECK SY-SUBRC = 0.

IF  IT_VBRP[] IS NOT INITIAL.
  SELECT  LIFNR STCD1 NAME1
    FROM LFA1
    APPENDING TABLE IT_LFA1
    FOR ALL ENTRIES IN IT_VBRP
    WHERE LIFNR = IT_VBRP-LIFNR.
ENDIF.

SELECT  NUMERO_DUE ID_DUE NR_REGISTRO_EXPO ID_NOMEACAO_TRAN VBELN
  FROM ZDOC_EXP
  INTO TABLE IT_ZDOC_EXP
  FOR ALL ENTRIES IN IT_ZFIT0042_RE
  WHERE NR_REGISTRO_EXPO  = IT_ZFIT0042_RE-NR_RE
  AND   NUMERO_DUE        = IT_ZFIT0042_RE-NUMERO_DUE.

CHECK SY-SUBRC = 0.

SELECT  ID_NOMEACAO_TRAN DS_NOME_TRANSPOR
  FROM ZNOM_TRANSPORTE
  INTO TABLE IT_ZNOM_TRANSPORTE
  FOR ALL ENTRIES IN IT_ZDOC_EXP
  WHERE ID_NOMEACAO_TRAN  = IT_ZDOC_EXP-ID_NOMEACAO_TRAN.

SELECT  ID_NOMEACAO_TRAN DT_DATA
  FROM ZNOM_CONHEC
  INTO TABLE IT_ZNOM_CONHEC
  FOR ALL ENTRIES IN IT_ZDOC_EXP
  WHERE ID_NOMEACAO_TRAN  = IT_ZDOC_EXP-ID_NOMEACAO_TRAN.


SELECT  VBELN MATNR ARKTX
  FROM LIPS
  INTO TABLE IT_LIPS
  FOR ALL ENTRIES IN IT_ZDOC_EXP
  WHERE  VBELN    = IT_ZDOC_EXP-VBELN.


IF IT_ZIB_CONTABIL[] IS NOT INITIAL.
  SELECT LIFNR BVTYP BANKS BANKL
    FROM LFBK
    INTO TABLE IT_LFBK
    FOR ALL ENTRIES IN IT_ZIB_CONTABIL
    WHERE LIFNR	=	IT_ZIB_CONTABIL-HKONT
    AND   BVTYP	=	IT_ZIB_CONTABIL-BVTYP.
ENDIF.



IF IT_LFBK[] IS NOT INITIAL.
  SELECT BANKS BANKL BANKA
    FROM BNKA
    INTO TABLE IT_BNKA
    FOR ALL ENTRIES IN IT_LFBK
    WHERE BANKS	=	IT_LFBK-BANKS
    AND   BANKL	=	IT_LFBK-BANKL.
ENDIF.
"Monta Saida
SORT:   IT_ZFIT0036     BY LOTE,
        IT_VBRP         BY VBELN,
        IT_ZIB_CONTABIL BY OBJ_KEY,
        IT_LFA1         BY LIFNR,
        IT_ZDOC_EXP     BY NUMERO_DUE NR_REGISTRO_EXPO,
        IT_ZNOM_CONHEC  BY ID_NOMEACAO_TRAN,
        IT_ZNOM_TRANSPORTE  BY ID_NOMEACAO_TRAN,
        IT_LIPS         BY VBELN,
        IT_LFBK         BY LIFNR BVTYP,
        IT_BNKA         BY BANKS  BANKL.

T_VLR_PGTO = 0.

DELETE IT_ZFIT0036 WHERE MOEDA_PGTO IS INITIAL.
DATA: IT_ZFIT0036_INV        TYPE TABLE OF TY_ZFIT0036.
IT_ZFIT0036_INV[] = IT_ZFIT0036[].

SORT IT_ZFIT0036_INV BY LOTE INVOICE.
DELETE ADJACENT DUPLICATES FROM IT_ZFIT0036_INV COMPARING LOTE INVOICE.

LOOP AT IT_ZFIT0042_RE INTO WA_ZFIT0042_RE.
  READ TABLE IT_ZFIT0036 INTO WA_ZFIT0036 WITH KEY LOTE = WA_ZFIT0042_RE-LOTE BINARY SEARCH.
  READ TABLE IT_ZIB_CONTABIL INTO WA_ZIB_CONTABIL WITH KEY OBJ_KEY = WA_ZFIT0036-OBJ_KEY BINARY SEARCH.
  WA_SAIDA_RE-HKONT         =  WA_ZIB_CONTABIL-HKONT.
  READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR =  WA_ZIB_CONTABIL-HKONT BINARY SEARCH.
  WA_SAIDA_RE-NAME1         = WA_LFA1-NAME1.

  READ TABLE  IT_LFBK INTO WA_LFBK WITH KEY  LIFNR  = WA_ZIB_CONTABIL-HKONT
                                             BVTYP  = WA_ZIB_CONTABIL-BVTYP BINARY SEARCH.
  READ TABLE IT_BNKA INTO WA_BNKA WITH KEY BANKS  = WA_LFBK-BANKS
                                           BANKL  = WA_LFBK-BANKL BINARY SEARCH.
  WA_SAIDA_RE-BANKA         = WA_BNKA-BANKA.


  WA_SAIDA_RE-INVOICE       = ''.
  LOOP AT IT_ZFIT0036_INV INTO WA_ZFIT0036 WHERE LOTE  = WA_ZFIT0042_RE-LOTE.
    CONCATENATE  WA_ZFIT0036-INVOICE '|' WA_SAIDA_RE-INVOICE  INTO WA_SAIDA_RE-INVOICE.
    CONDENSE WA_SAIDA_RE-INVOICE NO-GAPS.
  ENDLOOP.

  WA_SAIDA_RE-DT_PGTO       = WA_ZFIT0036-DT_PGTO.
  WA_SAIDA_RE-MOEDA_PGTO    = WA_ZFIT0036-MOEDA_PGTO.
  WA_SAIDA_RE-VLR_PGTO      = WA_ZFIT0042_RE-DMBE2.
  WA_SAIDA_RE-NAVIO         = WA_ZFIT0036-NAVIO.
  WA_SAIDA_RE-NR_RE         = WA_ZFIT0042_RE-NR_RE.
  IF WA_ZFIT0042_RE-NUMERO_DUE IS NOT INITIAL.
    WA_SAIDA_RE-NUMERO_DUE    = WA_ZFIT0042_RE-NUMERO_DUE.
  ELSE.
    WA_SAIDA_RE-NUMERO_DUE    = WA_ZFIT0042_RE-NR_RE.
  ENDIF.

  READ TABLE IT_VBRP INTO WA_VBRP WITH KEY VBELN = WA_ZFIT0042_RE-NRO_FATURA BINARY SEARCH.
  IF SY-SUBRC = 0.
    READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR =  WA_VBRP-LIFNR BINARY SEARCH.
    IF SY-SUBRC = 0.
      WA_SAIDA_RE-STCD1         = WA_LFA1-STCD1.
    ENDIF.
  ENDIF.

  READ TABLE IT_ZDOC_EXP INTO WA_ZDOC_EXP WITH KEY NUMERO_DUE        = WA_ZFIT0042_RE-NUMERO_DUE
                                                   NR_REGISTRO_EXPO  = WA_ZFIT0042_RE-NR_RE BINARY SEARCH.

  SELECT SINGLE *
    FROM ZSDT0170
    INTO WA_ZSDT0170
    WHERE ID_DUE     = WA_ZDOC_EXP-ID_DUE.
  IF SY-SUBRC = 0.
    WA_SAIDA_RE-CHAVE_ACESSO = WA_ZSDT0170-CHAVE_ACESSO.
  ENDIF.


  READ TABLE IT_ZNOM_CONHEC INTO WA_ZNOM_CONHEC WITH KEY ID_NOMEACAO_TRAN  = WA_ZDOC_EXP-ID_NOMEACAO_TRAN BINARY SEARCH.
  WA_SAIDA_RE-DT_DATA       = WA_ZNOM_CONHEC-DT_DATA.

  READ TABLE IT_ZNOM_TRANSPORTE INTO WA_ZNOM_TRANSPORTE WITH KEY ID_NOMEACAO_TRAN  = WA_ZDOC_EXP-ID_NOMEACAO_TRAN BINARY SEARCH.
  IF SY-SUBRC = 0.
    WA_SAIDA_RE-NAVIO         = WA_ZNOM_TRANSPORTE-DS_NOME_TRANSPOR.
  ENDIF.

  READ TABLE IT_LIPS INTO WA_LIPS WITH KEY VBELN    = WA_ZDOC_EXP-VBELN BINARY SEARCH.
  WA_SAIDA_RE-ARKTX         = WA_LIPS-ARKTX.
  ADD WA_SAIDA_RE-VLR_PGTO TO T_VLR_PGTO.
  APPEND WA_SAIDA_RE TO IT_SAIDA_RE.
  CLEAR WA_SAIDA_RE.
ENDLOOP.
