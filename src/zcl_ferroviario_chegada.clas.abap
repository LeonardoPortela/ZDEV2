class ZCL_FERROVIARIO_CHEGADA definition
  public
  inheriting from ZCL_FERROVIARIO
  final
  create public .

public section.

  interfaces ZIF_CADASTRO .
  interfaces ZIF_PESQUISA .

  aliases CK_ALTEROU
    for ZIF_CADASTRO~CK_ALTEROU .
  aliases EXCLUIR_REGISTRO
    for ZIF_CADASTRO~EXCLUIR_REGISTRO .
  aliases GET_REGISTRO
    for ZIF_CADASTRO~GET_REGISTRO .
  aliases GRAVAR_REGISTRO
    for ZIF_CADASTRO~GRAVAR_REGISTRO .
  aliases LIMPAR_REGISTRO
    for ZIF_CADASTRO~LIMPAR_REGISTRO .
  aliases NOVO_REGISTRO
    for ZIF_CADASTRO~NOVO_REGISTRO .
  aliases SET_REGISTRO
    for ZIF_CADASTRO~SET_REGISTRO .
  aliases VALIDAR_EXCLUSAO
    for ZIF_CADASTRO~VALIDAR_EXCLUSAO .
  aliases VALIDAR_REGISTRO
    for ZIF_CADASTRO~VALIDAR_REGISTRO .
  aliases VALIDA_ATRIBUTO_ALTERAVEL
    for ZIF_CADASTRO~VALIDA_ATRIBUTO_ALTERAVEL .

  methods GET_SAIDA_ALV
    returning
      value(R_PROCESSO) type ZDE_FERRO_CHEGADA .
  methods MONTA_PROCESSO
    importing
      !I_DCL type ZDCL optional
      !I_SERIE type ZSERIEDCL optional
      !I_ID_VAGAO type ZIDVAGAO optional
      !I_CNPJ type ZCNPJFERRO optional
      !I_BRANCH type J_1BBRANC_ optional
      !I_NFE type J_1BNFNUM9 optional .
  methods SET_QT_CHEGADA
    importing
      !I_BUKRS type BUKRS
      !I_BRANCH type J_1BBRANC_
      !I_NR_NF_PROPRIA type J_1BNFNUM9
      !I_SERIE_PROPRIA type J_1BSERIES
      !I_QT_CHEGADA type ZDE_QT_CHEGADA
    raising
      ZCX_FERROVIARIO_CHEGADA .
  methods SET_DT_CHEGADA
    importing
      !I_DT_CHEGADA type ZDE_DT_CHEGADA .
  methods SET_ID_AGPESO
    importing
      !I_ID_AGPESO type LIFNR
    returning
      value(R_LFA1) type LFA1
    raising
      ZCX_FERROVIARIO_CHEGADA .
  methods SET_QT_CHEGADA_TOTAL_RATEAR
    importing
      !I_QT_CHEGADA type ZDE_QT_CHEGADA
    raising
      ZCX_FERROVIARIO_CHEGADA .
protected section.
private section.

  data VAGAO_CHEGADA type ZLEST0019_L3_20 .
  data PESO_NOTAS_CHEGADAS type ZDE_ZLEST0019_L3_30_T .
  data VAGAO_SAIDA type ZLEST0019_L2_20 .
  data PESO_NOTAS_SAIDAS type ZDE_ZLEST0019_L2_30_T .
  data NOTAS_TERCEIRO type ZDE_ZLEST0041_T .
  data PROCESSO type ZDE_FERRO_CHEGADA .
ENDCLASS.



CLASS ZCL_FERROVIARIO_CHEGADA IMPLEMENTATION.


  METHOD GET_SAIDA_ALV.
    R_PROCESSO = ME->PROCESSO.
  ENDMETHOD.


  METHOD MONTA_PROCESSO.

    DATA: LC_ID_VAGAO(8),
          LC_TP_VAGAO(8),
          WA_NOTAS            TYPE ZDE_FERRO_CHEGADA_NOTAS,
          WA_ZLEST0041        TYPE ZLEST0041,
          LC_NUMR_IDENT_VAGAO	TYPE ZDE_ID_UN_TRANSP,
          V_CHAVE             TYPE ZLEST0019_L2_20-CHAVE,
          WA_NF_ENTRADA       TYPE ZLEST0019_L3_30,

          V_DCL               TYPE ZDCL,
          V_SERIE             TYPE ZSERIEDCL,
          V_CNPJ              TYPE ZCNPJFERRO,
          VL_NFENUM           TYPE J_1BNFDOC-NFENUM,
          VL_BRANCH           TYPE J_1BNFDOC-BRANCH,
          VL_LIFNR            TYPE LFA1-LIFNR.


    V_DCL    = I_DCL.
    V_SERIE  = I_SERIE.
    V_CNPJ   = I_CNPJ.

    CLEAR ME->PROCESSO.

    IF I_DCL IS NOT INITIAL AND I_SERIE IS NOT INITIAL AND I_ID_VAGAO IS NOT INITIAL AND I_CNPJ IS NOT INITIAL.

      ME->ZIF_CADASTRO~LIMPAR_REGISTRO( ).

      "Carregar Informações
      IF I_DCL = '0999999999'. "A BUNGE não informa o DCL
        CONCATENATE '0001-' I_BRANCH '-' I_NFE '000000' INTO V_CHAVE.
        "nota própria
        SELECT *
          FROM ZLEST0019_L2_30
          INTO TABLE @DATA(IT_L2_30)
          WHERE IDINTER  = 'L2'
          AND   TP_MOVI  = 'S'
          AND   TP_REG   = '30'
          AND   CHAVE    = @V_CHAVE.

        IF SY-SUBRC NE 0. " terceiro NFE?
          SELECT SINGLE LIFNR
               FROM LFA1
               INTO VL_LIFNR
              WHERE STCD1 = V_CNPJ.

          SELECT SINGLE *"nr_nf serie centro_comprador
            INTO @DATA(ST_ZLEST0041)
            FROM ZLEST0041
           WHERE NR_NF         = @I_NFE   "terceiro
             AND COD_CLIENTE   = @VL_LIFNR.

          IF SY-SUBRC IS INITIAL.
            VL_BRANCH = ST_ZLEST0041-CENTRO_COMPRADOR.
            CONCATENATE '0001-' VL_BRANCH '-' ST_ZLEST0041-NR_NF_PROPRIA '000000' INTO V_CHAVE.
            "
            SELECT *
              FROM ZLEST0019_L2_30
              INTO TABLE IT_L2_30
              WHERE IDINTER  = 'L2'
              AND   TP_MOVI  = 'S'
              AND   TP_REG   = '30'
              AND   CHAVE    = V_CHAVE.
          ENDIF.

        ENDIF.


        LOOP AT IT_L2_30 INTO DATA(WA_L2_30).
          SELECT SINGLE * INTO @DATA(WA_L2_20)
            FROM ZLEST0019_L2_20
           WHERE DCL       EQ @WA_L2_30-DCL
             AND SERIEDCL  EQ @WA_L2_30-SERIEDCL
             AND CNPJFERRO EQ @WA_L2_30-CNPJFERRO
             AND IDVAGAO   EQ @I_ID_VAGAO.
          IF SY-SUBRC = 0.
            V_DCL   = WA_L2_20-DCL.
            V_SERIE = WA_L2_20-SERIEDCL.
            V_CNPJ  = WA_L2_20-CNPJFERRO.
          ENDIF.
        ENDLOOP.

        IF V_DCL = '0999999999'.
          EXIT.
        ENDIF.

      ENDIF.


      SELECT SINGLE * INTO ME->VAGAO_SAIDA
        FROM ZLEST0019_L2_20
       WHERE DCL       EQ V_DCL
         AND SERIEDCL  EQ V_SERIE
         AND CNPJFERRO EQ V_CNPJ
         AND IDVAGAO   EQ I_ID_VAGAO.


      IF SY-SUBRC IS INITIAL.

        "Pesquisa pela Saída
        SELECT * INTO TABLE ME->PESO_NOTAS_SAIDAS
          FROM ZLEST0019_L2_30
         WHERE DCL       EQ ME->VAGAO_SAIDA-DCL
           AND CNPJFERRO EQ ME->VAGAO_SAIDA-CNPJFERRO
           AND ID_REFKEY EQ ME->VAGAO_SAIDA-ID_REFKEY.

        CHECK SY-SUBRC IS INITIAL.


        DATA(IT_NOTAS_SAIDAS) = ME->PESO_NOTAS_SAIDAS[].
        DELETE IT_NOTAS_SAIDAS WHERE DOCNUM IS INITIAL.

        SELECT * INTO TABLE @DATA(IT_ZLEST0039)
          FROM ZLEST0039
           FOR ALL ENTRIES IN @IT_NOTAS_SAIDAS
         WHERE DOCNUM EQ @IT_NOTAS_SAIDAS-DOCNUM.

        SORT IT_ZLEST0039 BY DOCNUM.

        IF IT_ZLEST0039 IS NOT INITIAL.

          SELECT * INTO TABLE @DATA(IT_ZSDT0001)
            FROM ZSDT0001
             FOR ALL ENTRIES IN @IT_ZLEST0039
           WHERE DOC_REM      EQ @IT_ZLEST0039-VBELN
             AND TP_MOVIMENTO EQ 'S'.

          SORT IT_ZSDT0001 BY DOC_REM.

        ENDIF.

        "Procurar Entrada
        SELECT SINGLE * INTO ME->VAGAO_CHEGADA
          FROM ZLEST0019_L3_20
         WHERE DCL     EQ ME->VAGAO_SAIDA-DCL
           "AND CHAVE   EQ ME->VAGAO_CHEGADA-CHAVE
           AND IDVAGAO EQ ME->VAGAO_SAIDA-IDVAGAO.

        IF SY-SUBRC IS INITIAL.
          ME->SET_ID_REFKEY( I_ID_REFKEY = ME->VAGAO_CHEGADA-ID_REFKEY ).
          SELECT * INTO TABLE ME->PESO_NOTAS_CHEGADAS
            FROM ZLEST0019_L3_30
           WHERE DCL       EQ ME->VAGAO_CHEGADA-DCL
             AND CNPJFERRO EQ ME->VAGAO_CHEGADA-CNPJFERRO
             AND ID_REFKEY EQ ME->VAGAO_CHEGADA-ID_REFKEY.
          SORT ME->PESO_NOTAS_CHEGADAS BY BUKRS BRANCH NFENUM.
        ELSE.
          "Criar Registro para Fazer a Entrada
          CONCATENATE ME->VAGAO_SAIDA-DCL ME->VAGAO_SAIDA-IDVAGAO INTO ME->VAGAO_CHEGADA-CHAVE.

          DATA(QTD_CRT) = STRLEN( ME->VAGAO_CHEGADA-CHAVE ).
          ADD -1 TO QTD_CRT.

          ME->VAGAO_CHEGADA-CHAVE            = ME->VAGAO_CHEGADA-CHAVE(QTD_CRT).
          ME->VAGAO_CHEGADA-IDINTER          = 'L3'.
          ME->VAGAO_CHEGADA-TP_MOVI          = 'E'.
          ME->VAGAO_CHEGADA-TP_REG           = '20'.
          ME->VAGAO_CHEGADA-DCL              = ME->VAGAO_SAIDA-DCL.
          ME->VAGAO_CHEGADA-SERIEDCL         = ME->VAGAO_SAIDA-SERIEDCL.
          ME->VAGAO_CHEGADA-CNPJFERRO        = ME->VAGAO_SAIDA-CNPJFERRO.
          ME->VAGAO_CHEGADA-NOMEMPFERRO      = ME->VAGAO_SAIDA-NOMEMPFERRO.
          ME->VAGAO_CHEGADA-IDVAGAO          = ME->VAGAO_SAIDA-IDVAGAO.
          ME->VAGAO_CHEGADA-PESOVAGAO        = ME->VAGAO_SAIDA-PESOVAGAO.
          ME->VAGAO_CHEGADA-STATUS_DUPLICA   = 0.
          ME->VAGAO_CHEGADA-ID_ZLEST0019_SAI = ME->VAGAO_SAIDA-ID_ZLEST0019.

          LOOP AT ME->PESO_NOTAS_SAIDAS INTO DATA(WA_PESO_NOTAS_SAIDAS).
            CLEAR: WA_NF_ENTRADA.
            MOVE-CORRESPONDING WA_PESO_NOTAS_SAIDAS TO WA_NF_ENTRADA.
            WA_NF_ENTRADA-IDINTER = 'L3'.
            WA_NF_ENTRADA-TP_MOVI = 'E'.
            WA_NF_ENTRADA-TP_REG  = '30'.
            WA_NF_ENTRADA-ID_ZLEST0019_SAI = WA_NF_ENTRADA-ID_ZLEST0019.
            CLEAR: WA_NF_ENTRADA-ERDAT,
                   WA_NF_ENTRADA-ERZET,
                   WA_NF_ENTRADA-ID_REFKEY,
                   WA_NF_ENTRADA-ID_ZLEST0019.

            APPEND WA_NF_ENTRADA TO ME->PESO_NOTAS_CHEGADAS.
          ENDLOOP.
          SORT ME->PESO_NOTAS_CHEGADAS BY BUKRS BRANCH NFENUM.
        ENDIF.
      ENDIF.

      "Pesquisa Notas de Terceiro
      LOOP AT ME->PESO_NOTAS_SAIDAS INTO DATA(WA_NF_CTE) WHERE NR_NF_TERCEIRO IS NOT INITIAL.
        WA_ZLEST0041-NR_NF       = WA_NF_CTE-NR_NF_TERCEIRO.
        WA_ZLEST0041-COD_CLIENTE = WA_NF_CTE-COD_FORNECEDOR.

        SELECT SINGLE * INTO WA_ZLEST0041
          FROM ZLEST0041
         WHERE NR_NF       EQ WA_ZLEST0041-NR_NF
           AND COD_CLIENTE EQ WA_ZLEST0041-COD_CLIENTE.

        IF SY-SUBRC IS INITIAL.
          APPEND WA_ZLEST0041 TO ME->NOTAS_TERCEIRO.
        ENDIF.
      ENDLOOP.
      SORT ME->NOTAS_TERCEIRO BY NR_NF COD_CLIENTE NR_NF_PROPRIA.

    ENDIF.

    ME->PROCESSO-EMIT_CNPJ       = ME->VAGAO_SAIDA-CNPJFERRO.
    ME->PROCESSO-DCL             = ME->VAGAO_SAIDA-DCL.
    ME->PROCESSO-IDVAGAO         = ME->VAGAO_SAIDA-IDVAGAO.
    ME->PROCESSO-PESO_SAIDA      = ME->VAGAO_SAIDA-PESOVAGAO.
    ME->PROCESSO-DTASAIDA        = ME->VAGAO_SAIDA-DTADECARGA.
    ME->PROCESSO-PESO_CHEGADA    = ME->VAGAO_CHEGADA-PESOVAGAO.
    ME->PROCESSO-DTACHEGADA      = ME->VAGAO_CHEGADA-DTADECARGA.

    "Agente de Pesagem
    SELECT SINGLE * INTO @DATA(WA_LFA1)
      FROM LFA1
     WHERE STCD1 EQ @ME->VAGAO_CHEGADA-CNPJFERRO.

    IF SY-SUBRC IS INITIAL.
      ME->PROCESSO-CNPJ_AGPESO = WA_LFA1-STCD1.
      ME->PROCESSO-ID_AGPESO   = WA_LFA1-LIFNR.
      ME->PROCESSO-DS_AGPESO   = WA_LFA1-NAME1.
    ENDIF.

    IF ME->PESO_NOTAS_SAIDAS IS NOT INITIAL.
      SELECT * INTO TABLE @DATA(IT_J_1BNFDOC)
        FROM J_1BNFDOC
         FOR ALL ENTRIES IN @ME->PESO_NOTAS_SAIDAS
       WHERE DOCNUM EQ @ME->PESO_NOTAS_SAIDAS-DOCNUM.

      SORT IT_J_1BNFDOC BY DOCNUM.
    ENDIF.

    LOOP AT ME->PESO_NOTAS_SAIDAS INTO DATA(WA_NF_SAIDA).

      WA_NOTAS-BUKRS           = WA_NF_SAIDA-BUKRS.
      WA_NOTAS-BRANCH          = WA_NF_SAIDA-BRANCH.
      WA_NOTAS-NR_NF_PROPRIA   = WA_NF_SAIDA-NFENUM.

      READ TABLE IT_J_1BNFDOC WITH KEY DOCNUM = WA_NF_SAIDA-DOCNUM INTO DATA(WA_J_1BNFDOC) BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_NOTAS-SERIE_PROPRIA   = WA_J_1BNFDOC-SERIES.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = WA_NOTAS-SERIE_PROPRIA
          IMPORTING
            OUTPUT = WA_NOTAS-SERIE_PROPRIA.

        WA_NOTAS-DOCNUM          = WA_J_1BNFDOC-DOCNUM.
      ENDIF.

      WA_NOTAS-PESO_ORIGEM     = WA_NF_SAIDA-PESONF.
      WA_NOTAS-PESO_SAIDA      = WA_NF_SAIDA-PESODVAGAO.
      WA_NOTAS-NR_NF           = WA_NF_SAIDA-NR_NF_TERCEIRO.
      WA_NOTAS-COD_CLIENTE     = WA_NF_SAIDA-COD_FORNECEDOR.

      READ TABLE ME->PESO_NOTAS_CHEGADAS INTO WA_NF_ENTRADA
      WITH KEY  BUKRS  = WA_NF_SAIDA-BUKRS
                BRANCH = WA_NF_SAIDA-BRANCH
                NFENUM = WA_NF_SAIDA-NFENUM BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_NOTAS-PESO_CHEGADA    = WA_NF_ENTRADA-PESODVAGAO.
      ENDIF.

      READ TABLE ME->NOTAS_TERCEIRO INTO DATA(WA_REMESSA)
      WITH KEY NR_NF         = WA_NF_SAIDA-NR_NF_TERCEIRO
               COD_CLIENTE   = WA_NF_SAIDA-COD_FORNECEDOR
               NR_NF_PROPRIA = WA_NF_SAIDA-NFENUM BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_NOTAS-CENTRO_COMPRADOR = WA_REMESSA-CENTRO_COMPRADOR.
        WA_NOTAS-COD_MATERIAL     = WA_REMESSA-COD_MATERIAL.
        WA_NOTAS-SERIE            = WA_REMESSA-SERIE.
      ENDIF.

      IF WA_NF_SAIDA-DOCNUM IS NOT INITIAL.

        "Busca Romaneio
        READ TABLE IT_ZLEST0039 INTO DATA(WA_ZLEST0039) WITH KEY DOCNUM = WA_NF_SAIDA-DOCNUM BINARY SEARCH.
        IF SY-SUBRC IS INITIAL AND WA_ZLEST0039-VBELN IS NOT INITIAL.

          READ TABLE IT_ZSDT0001 INTO DATA(WA_ZSDT0001) WITH KEY DOC_REM = WA_ZLEST0039-VBELN BINARY SEARCH.

          IF SY-SUBRC IS INITIAL.
            WA_NOTAS-NR_ROMANEIO      = WA_ZSDT0001-NR_ROMANEIO.
            WA_NOTAS-CH_REFERENCIA    = WA_ZSDT0001-CH_REFERENCIA.
            WA_NOTAS-NR_SAFRA         = WA_ZSDT0001-NR_SAFRA.
            WA_NOTAS-NR_TICKET        = WA_ZSDT0001-NR_TICKET.
            WA_NOTAS-NR_PERC_UMIDADE  = WA_ZSDT0001-NR_PERC_UMIDADE.
            WA_NOTAS-NR_QTD_UMIDADE   = WA_ZSDT0001-NR_QTD_UMIDADE.
            WA_NOTAS-NR_PERC_IMPUREZA = WA_ZSDT0001-NR_PERC_IMPUREZA.
            WA_NOTAS-NR_QTD_IMPUREZA  = WA_ZSDT0001-NR_QTD_IMPUREZA.
            WA_NOTAS-NR_PERC_AVARIA   = WA_ZSDT0001-NR_PERC_AVARIA.
            WA_NOTAS-NR_QTD_AVARIA    = WA_ZSDT0001-NR_QTD_AVARIA.
            WA_NOTAS-NR_PERC_ARDIDO   = WA_ZSDT0001-NR_PERC_ARDIDO.
            WA_NOTAS-NR_QTD_ARDIDO    = WA_ZSDT0001-NR_QTD_ARDIDO.
            WA_NOTAS-NR_PERC_QUEBRA   = WA_ZSDT0001-NR_PERC_QUEBRA.
            WA_NOTAS-NR_QTD_QUEBRA    = WA_ZSDT0001-NR_QTD_QUEBRA.
            WA_NOTAS-NR_PERC_ESVERD   = WA_ZSDT0001-NR_PERC_ESVERD.
            WA_NOTAS-NR_QTD_ESVERD    = WA_ZSDT0001-NR_QTD_ESVERD.
          ENDIF.
        ENDIF.
      ENDIF.

      APPEND WA_NOTAS TO ME->PROCESSO-NOTAS.
      SORT ME->PROCESSO-NOTAS BY BUKRS BRANCH NR_NF_PROPRIA SERIE_PROPRIA.
    ENDLOOP.

  ENDMETHOD.


  METHOD SET_DT_CHEGADA.

    IF ME->PROCESSO-DTACHEGADA NE I_DT_CHEGADA.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.

    ME->PROCESSO-DTACHEGADA = I_DT_CHEGADA.

    ME->VAGAO_CHEGADA-DTADECARGA = I_DT_CHEGADA.

    LOOP AT ME->PESO_NOTAS_SAIDAS INTO DATA(WA_SAIDAS).

      READ TABLE ME->PESO_NOTAS_CHEGADAS ASSIGNING FIELD-SYMBOL(<FS_NOTA>)
      WITH KEY BUKRS  = WA_SAIDAS-BUKRS
               BRANCH = WA_SAIDAS-BRANCH
               NFENUM = WA_SAIDAS-NFENUM
      BINARY SEARCH.

      IF SY-SUBRC IS INITIAL.
        <FS_NOTA>-DTACHEGADA = I_DT_CHEGADA.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD SET_ID_AGPESO.

    IF ME->PROCESSO-ID_AGPESO NE I_ID_AGPESO.
      ME->CK_ALTEROU = ABAP_TRUE.
    ENDIF.

    CLEAR R_LFA1.

    ME->PROCESSO-ID_AGPESO = I_ID_AGPESO.

    IF I_ID_AGPESO IS NOT INITIAL.

      SELECT SINGLE * INTO R_LFA1
        FROM LFA1
       WHERE LIFNR EQ I_ID_AGPESO.

      IF SY-SUBRC IS NOT INITIAL.
        RAISE EXCEPTION TYPE ZCX_FERROVIARIO_CHEGADA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_FERROVIARIO_CHEGADA=>ZCX_FORNE_NAO_ENCONTRADO-MSGID
                              MSGNO = ZCX_FERROVIARIO_CHEGADA=>ZCX_FORNE_NAO_ENCONTRADO-MSGNO
                              ATTR1 = CONV #( I_ID_AGPESO ) )
            MSGTY  = 'E'
            MSGID  = ZCX_FERROVIARIO_CHEGADA=>ZCX_FORNE_NAO_ENCONTRADO-MSGID
            MSGNO  = ZCX_FERROVIARIO_CHEGADA=>ZCX_FORNE_NAO_ENCONTRADO-MSGNO
            MSGV1  = CONV #( I_ID_AGPESO ).
      ELSE.
        ME->PROCESSO-CNPJ_AGPESO = R_LFA1-STCD1.
        ME->PROCESSO-DS_AGPESO   = R_LFA1-NAME1.
        ME->PROCESSO-ID_AGPESO   = R_LFA1-LIFNR.
      ENDIF.
    ELSE.
      CLEAR: ME->PROCESSO-CNPJ_AGPESO,
             ME->PROCESSO-DS_AGPESO,
             ME->PROCESSO-ID_AGPESO,
             ME->VAGAO_CHEGADA-CNPJFERRO.
    ENDIF.

    ME->VAGAO_CHEGADA-CNPJFERRO = ME->PROCESSO-CNPJ_AGPESO.

    LOOP AT ME->PESO_NOTAS_SAIDAS INTO DATA(WA_SAIDAS).

      READ TABLE ME->PESO_NOTAS_CHEGADAS ASSIGNING FIELD-SYMBOL(<FS_NOTA>)
      WITH KEY BUKRS  = WA_SAIDAS-BUKRS
               BRANCH = WA_SAIDAS-BRANCH
               NFENUM = WA_SAIDAS-NFENUM
      BINARY SEARCH.

      IF SY-SUBRC IS INITIAL.
        <FS_NOTA>-CNPJFERRO = ME->PROCESSO-CNPJ_AGPESO.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


METHOD SET_QT_CHEGADA.

  DATA: LVA_SERIES TYPE J_1BSERIES.

  LVA_SERIES = I_SERIE_PROPRIA.

  READ TABLE ME->PROCESSO-NOTAS ASSIGNING FIELD-SYMBOL(<DS_NOTA>)
  WITH KEY BUKRS         = I_BUKRS
           BRANCH        = I_BRANCH
           NR_NF_PROPRIA = I_NR_NF_PROPRIA
           SERIE_PROPRIA = LVA_SERIES BINARY SEARCH.

  IF SY-SUBRC IS NOT INITIAL.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT      = LVA_SERIES
      IMPORTING
        OUTPUT     = LVA_SERIES.

    READ TABLE ME->PROCESSO-NOTAS ASSIGNING <DS_NOTA>
    WITH KEY BUKRS         = I_BUKRS
             BRANCH        = I_BRANCH
             NR_NF_PROPRIA = I_NR_NF_PROPRIA
             SERIE_PROPRIA = LVA_SERIES BINARY SEARCH.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_FERROVIARIO_CHEGADA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_FERROVIARIO_CHEGADA=>ZCX_NOTA_NAO_ENCONTRADA-MSGID
                            MSGNO = ZCX_FERROVIARIO_CHEGADA=>ZCX_NOTA_NAO_ENCONTRADA-MSGNO
                            ATTR1 = CONV #( I_NR_NF_PROPRIA )
                            ATTR2 = CONV #( I_SERIE_PROPRIA ) )
          MSGID  = ZCX_FERROVIARIO_CHEGADA=>ZCX_NOTA_NAO_ENCONTRADA-MSGID
          MSGTY  = 'E'
          MSGNO  = ZCX_FERROVIARIO_CHEGADA=>ZCX_NOTA_NAO_ENCONTRADA-MSGNO
          MSGV1  = CONV #( I_NR_NF_PROPRIA )
          MSGV2  = CONV #( I_SERIE_PROPRIA ).
    ENDIF.
  ENDIF.

  IF <DS_NOTA>-PESO_CHEGADA NE I_QT_CHEGADA.
    ME->CK_ALTEROU = ABAP_TRUE.
  ENDIF.

  <DS_NOTA>-PESO_CHEGADA = I_QT_CHEGADA.

  READ TABLE ME->PESO_NOTAS_CHEGADAS ASSIGNING FIELD-SYMBOL(<FS_NOTA>)
  WITH KEY BUKRS  = I_BUKRS
           BRANCH = I_BRANCH
           NFENUM = I_NR_NF_PROPRIA
  BINARY SEARCH.

  IF SY-SUBRC IS INITIAL.
    <FS_NOTA>-PESODVAGAO = I_QT_CHEGADA.
  ENDIF.

  "Totaliza Entrada
  ME->VAGAO_CHEGADA-PESOVAGAO	= 0.
  LOOP AT ME->PESO_NOTAS_CHEGADAS INTO DATA(WA_CHEGADA).
    ADD WA_CHEGADA-PESODVAGAO TO ME->VAGAO_CHEGADA-PESOVAGAO.
  ENDLOOP.

ENDMETHOD.


  METHOD SET_QT_CHEGADA_TOTAL_RATEAR.

    DATA: I_QT_DIFERENCA  TYPE ZDE_QT_CHEGADA.


    ME->CK_ALTEROU = ABAP_TRUE.

    I_QT_DIFERENCA = ME->PROCESSO-PESO_SAIDA - I_QT_CHEGADA.

    "ME->PROCESSO-PESO_SAIDA
    "Peso de Saída Total

    LOOP AT ME->PESO_NOTAS_CHEGADAS ASSIGNING FIELD-SYMBOL(<FS_NOTA>).

      READ TABLE ME->PESO_NOTAS_SAIDAS INTO DATA(WA_NOTA_SAIDA)
      WITH KEY
          CNPJCLIENTE    = <FS_NOTA>-CNPJCLIENTE
          BUKRS          = <FS_NOTA>-BUKRS
          BRANCH         = <FS_NOTA>-BRANCH
          NFENUM         = <FS_NOTA>-NFENUM
          NFNUM          = <FS_NOTA>-NFNUM
          NR_NF_TERCEIRO = <FS_NOTA>-NR_NF_TERCEIRO
          COD_FORNECEDOR = <FS_NOTA>-COD_FORNECEDOR.

      IF SY-SUBRC IS INITIAL.
        <FS_NOTA>-PESODVAGAO = WA_NOTA_SAIDA-PESODVAGAO - ( ( ( WA_NOTA_SAIDA-PESODVAGAO * 100 ) / ME->PROCESSO-PESO_SAIDA ) * I_QT_DIFERENCA ).
        ADD <FS_NOTA>-PESODVAGAO TO ME->VAGAO_CHEGADA-PESOVAGAO.
      ENDIF.

    ENDLOOP.

    IF ME->VAGAO_CHEGADA-PESOVAGAO NE I_QT_CHEGADA.
      I_QT_DIFERENCA = I_QT_CHEGADA - ME->VAGAO_CHEGADA-PESOVAGAO.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~EXCLUIR_REGISTRO.

    I_EXCLUIU = ABAP_FALSE.

    IF ME->VALIDAR_EXCLUSAO( ) EQ ABAP_TRUE.

      "Informação do DCL/Vagão
      DELETE FROM ZLEST0019_L3_20
       WHERE ID_REFKEY  EQ ME->VAGAO_CHEGADA-ID_REFKEY.

      "Informação das Notas do DCL/Vagão
      DELETE FROM ZLEST0019_L3_30
       WHERE ID_REFKEY  EQ ME->VAGAO_CHEGADA-ID_REFKEY.

      "Informação do DCL/Vagão das Notas do DCL/Vagão - Antiga
      DELETE FROM ZLEST0019
       WHERE IDINTER    EQ 'L3'
         AND ID_REFKEY  EQ ME->VAGAO_CHEGADA-ID_REFKEY.

      COMMIT WORK.

      I_EXCLUIU = ABAP_TRUE.
      MESSAGE S002 WITH ME->VAGAO_CHEGADA-DCL.
      ME->LIMPAR_REGISTRO( ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~GET_REGISTRO.
    MOVE-CORRESPONDING ME->VAGAO_CHEGADA TO E_REGISTRO.
  ENDMETHOD.


  METHOD ZIF_CADASTRO~GRAVAR_REGISTRO.

    DATA: IT_TLINES    TYPE TABLE OF TLINE,
          WA_TLINES    TYPE TLINE,
          WA_HEADER    TYPE THEAD,
          WA_ZLEST0019 TYPE ZLEST0019,
          IT_ZLEST0019 TYPE TABLE OF ZLEST0019.

    I_GRAVOU = ABAP_FALSE.

    IF ME->CK_ALTEROU EQ ABAP_TRUE.

      IF ME->VALIDAR_REGISTRO( ) EQ ABAP_TRUE.

        IF ME->VAGAO_CHEGADA-ID_ZLEST0019 IS INITIAL.
          "Unitário
          ME->VAGAO_CHEGADA-ID_ZLEST0019 = ME->GET_NEW_ID_REFKEY( ).
        ENDIF.

        "ID para o Grupo
        ME->VAGAO_CHEGADA-ID_REFKEY = ME->ID_REFKEY.

        LOOP AT ME->PESO_NOTAS_CHEGADAS ASSIGNING FIELD-SYMBOL(<FS_ENTRADA>).
          <FS_ENTRADA>-ID_REFKEY = ME->ID_REFKEY.
          IF <FS_ENTRADA>-ID_ZLEST0019 IS INITIAL.
            <FS_ENTRADA>-ID_ZLEST0019 = ME->GET_NEW_ID_REFKEY( ).
          ENDIF.
          <FS_ENTRADA>-CNPJFERRO = ME->VAGAO_CHEGADA-CNPJFERRO.
          <FS_ENTRADA>-IDVAGAO   = ME->VAGAO_CHEGADA-IDVAGAO.
          <FS_ENTRADA>-ERDAT     = SY-DATUM.
          <FS_ENTRADA>-ERZET     = SY-UZEIT.
          <FS_ENTRADA>-UNAME     = SY-UNAME.
        ENDLOOP.

        ME->VAGAO_CHEGADA-ERDAT          = SY-DATUM.
        ME->VAGAO_CHEGADA-ERZET          = SY-UZEIT.
        ME->VAGAO_CHEGADA-UNAME          = SY-UNAME.
        ME->VAGAO_CHEGADA-IDVAGAO        = ME->VAGAO_SAIDA-IDVAGAO.
        ME->VAGAO_CHEGADA-DCL            = ME->VAGAO_SAIDA-DCL.
        MODIFY ZLEST0019_L3_20 FROM ME->VAGAO_CHEGADA.
        MODIFY ZLEST0019_L3_30 FROM TABLE ME->PESO_NOTAS_CHEGADAS.

        CLEAR: WA_ZLEST0019, IT_ZLEST0019, IT_ZLEST0019[].
        WA_ZLEST0019-IDINTER        = ME->VAGAO_CHEGADA-IDINTER.
        WA_ZLEST0019-TP_MOVI        = ME->VAGAO_CHEGADA-TP_MOVI.
        WA_ZLEST0019-TP_REG         = ME->VAGAO_CHEGADA-TP_REG.
        WA_ZLEST0019-CHAVE          = ME->VAGAO_CHEGADA-CHAVE.
        WA_ZLEST0019-DCL            = ME->VAGAO_CHEGADA-DCL.
        WA_ZLEST0019-SERIEDCL       = ME->VAGAO_CHEGADA-SERIEDCL.
        WA_ZLEST0019-CNPJFERRO      = ME->VAGAO_CHEGADA-CNPJFERRO.
        WA_ZLEST0019-NOMEMPFERRO    = ME->VAGAO_CHEGADA-NOMEMPFERRO.
        WA_ZLEST0019-DTAENVIO       = ME->VAGAO_CHEGADA-DTAENVIO.
        WA_ZLEST0019-HORAENVIO      = ME->VAGAO_CHEGADA-HORAENVIO.
        WA_ZLEST0019-OBS            = ME->VAGAO_CHEGADA-OBS.
        WA_ZLEST0019-IDVAGAO        = ME->VAGAO_CHEGADA-IDVAGAO.
        WA_ZLEST0019-PESOVAGAO      = ME->VAGAO_CHEGADA-PESOVAGAO.
        WA_ZLEST0019-DTADECARGA     = ME->VAGAO_CHEGADA-DTADECARGA.
        WA_ZLEST0019-HORADESCARGA   = ME->VAGAO_CHEGADA-HORADESCARGA.
        WA_ZLEST0019-CNPJCLIENTE    = ME->VAGAO_CHEGADA-CNPJCLIENTE.
        WA_ZLEST0019-BUKRS          = ME->VAGAO_CHEGADA-BUKRS.
        WA_ZLEST0019-BRANCH         = ME->VAGAO_CHEGADA-BRANCH.
        WA_ZLEST0019-NFENUM         = ME->VAGAO_CHEGADA-NFENUM.
        WA_ZLEST0019-NFNUM          = ME->VAGAO_CHEGADA-NFNUM.
        WA_ZLEST0019-PESONF         = ME->VAGAO_CHEGADA-PESONF.
        WA_ZLEST0019-PESODVAGAO     = ME->VAGAO_CHEGADA-PESODVAGAO.
        WA_ZLEST0019-DTACHEGADA     = ME->VAGAO_CHEGADA-DTACHEGADA.
        WA_ZLEST0019-PRODUTO        = ME->VAGAO_CHEGADA-PRODUTO.
        WA_ZLEST0019-ERDAT          = SY-DATUM.
        WA_ZLEST0019-ERZET          = SY-UZEIT.
        WA_ZLEST0019-UNAME          = SY-UNAME.
        WA_ZLEST0019-NR_NF_TERCEIRO = ME->VAGAO_CHEGADA-NR_NF_TERCEIRO.
        WA_ZLEST0019-COD_FORNECEDOR = ME->VAGAO_CHEGADA-COD_FORNECEDOR.
        WA_ZLEST0019-ID_ZLEST0019   = ME->VAGAO_CHEGADA-ID_ZLEST0019.
        WA_ZLEST0019-ID_REFKEY      = ME->VAGAO_CHEGADA-ID_REFKEY.
        WA_ZLEST0019-STATUS_DUPLICA = ME->VAGAO_CHEGADA-STATUS_DUPLICA.
        WA_ZLEST0019-OBSERVACAO     = ME->VAGAO_CHEGADA-OBSERVACAO.
        APPEND WA_ZLEST0019 TO IT_ZLEST0019.

        LOOP AT ME->PESO_NOTAS_CHEGADAS INTO DATA(WA_PESO_NOTAS_CHEGADAS).
          CLEAR WA_ZLEST0019.
          WA_ZLEST0019-IDINTER        = WA_PESO_NOTAS_CHEGADAS-IDINTER.
          WA_ZLEST0019-TP_MOVI        = WA_PESO_NOTAS_CHEGADAS-TP_MOVI.
          WA_ZLEST0019-TP_REG         = WA_PESO_NOTAS_CHEGADAS-TP_REG.
          WA_ZLEST0019-CHAVE          = WA_PESO_NOTAS_CHEGADAS-CHAVE.
          WA_ZLEST0019-DCL            = WA_PESO_NOTAS_CHEGADAS-DCL.
          WA_ZLEST0019-SERIEDCL       = WA_PESO_NOTAS_CHEGADAS-SERIEDCL.
          WA_ZLEST0019-CNPJFERRO      = WA_PESO_NOTAS_CHEGADAS-CNPJFERRO.
          WA_ZLEST0019-NOMEMPFERRO    = WA_PESO_NOTAS_CHEGADAS-NOMEMPFERRO.
          WA_ZLEST0019-DTAENVIO       = WA_PESO_NOTAS_CHEGADAS-DTAENVIO.
          WA_ZLEST0019-HORAENVIO      = WA_PESO_NOTAS_CHEGADAS-HORAENVIO.
          WA_ZLEST0019-OBS            = WA_PESO_NOTAS_CHEGADAS-OBS.
          WA_ZLEST0019-IDVAGAO        = WA_PESO_NOTAS_CHEGADAS-IDVAGAO.
          WA_ZLEST0019-PESOVAGAO      = WA_PESO_NOTAS_CHEGADAS-PESOVAGAO.
          WA_ZLEST0019-DTADECARGA     = WA_PESO_NOTAS_CHEGADAS-DTADECARGA.
          WA_ZLEST0019-HORADESCARGA   = WA_PESO_NOTAS_CHEGADAS-HORADESCARGA.
          WA_ZLEST0019-CNPJCLIENTE    = WA_PESO_NOTAS_CHEGADAS-CNPJCLIENTE.
          WA_ZLEST0019-BUKRS          = WA_PESO_NOTAS_CHEGADAS-BUKRS.
          WA_ZLEST0019-BRANCH         = WA_PESO_NOTAS_CHEGADAS-BRANCH.
          WA_ZLEST0019-NFENUM         = WA_PESO_NOTAS_CHEGADAS-NFENUM.
          WA_ZLEST0019-NFNUM          = WA_PESO_NOTAS_CHEGADAS-NFNUM.
          WA_ZLEST0019-PESONF         = WA_PESO_NOTAS_CHEGADAS-PESONF.
          WA_ZLEST0019-PESODVAGAO     = WA_PESO_NOTAS_CHEGADAS-PESODVAGAO.
          WA_ZLEST0019-DTACHEGADA     = WA_PESO_NOTAS_CHEGADAS-DTACHEGADA.
          WA_ZLEST0019-PRODUTO        = WA_PESO_NOTAS_CHEGADAS-PRODUTO.
          WA_ZLEST0019-ERDAT          = SY-DATUM.
          WA_ZLEST0019-ERZET          = SY-UZEIT.
          WA_ZLEST0019-UNAME          = SY-UNAME.
          WA_ZLEST0019-NR_NF_TERCEIRO = WA_PESO_NOTAS_CHEGADAS-NR_NF_TERCEIRO.
          WA_ZLEST0019-COD_FORNECEDOR = WA_PESO_NOTAS_CHEGADAS-COD_FORNECEDOR.
          WA_ZLEST0019-ID_ZLEST0019   = WA_PESO_NOTAS_CHEGADAS-ID_ZLEST0019.
          WA_ZLEST0019-ID_REFKEY      = WA_PESO_NOTAS_CHEGADAS-ID_REFKEY.
          WA_ZLEST0019-STATUS_DUPLICA = WA_PESO_NOTAS_CHEGADAS-STATUS_DUPLICA.
          WA_ZLEST0019-OBSERVACAO     = WA_PESO_NOTAS_CHEGADAS-OBSERVACAO.
          WA_ZLEST0019-DOCNUM         = WA_PESO_NOTAS_CHEGADAS-DOCNUM.
          WA_ZLEST0019-MATNR          = WA_PESO_NOTAS_CHEGADAS-MATNR.
          APPEND WA_ZLEST0019 TO IT_ZLEST0019.
        ENDLOOP.
        MODIFY ZLEST0019 FROM TABLE IT_ZLEST0019.

        COMMIT WORK.
        ME->CK_ALTEROU = ABAP_FALSE.
        I_GRAVOU = ABAP_TRUE.
        MESSAGE S001 WITH ME->VAGAO_CHEGADA-DCL.
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~LIMPAR_REGISTRO.
    CLEAR: ME->VAGAO_CHEGADA,
           ME->PESO_NOTAS_CHEGADAS,
           ME->VAGAO_SAIDA,
           ME->PESO_NOTAS_SAIDAS,
           "ME->CTE,
           "ME->CTE_VAGAO,
           "ME->CTE_VAGAO_NOTAS,
           ME->NOTAS_TERCEIRO.
  ENDMETHOD.


  METHOD ZIF_CADASTRO~NOVO_REGISTRO.
    ME->LIMPAR_REGISTRO( ).
  ENDMETHOD.


  METHOD ZIF_CADASTRO~SET_REGISTRO.

    DATA: LC_ID_VAGAO(8),
          LC_TP_VAGAO(8),
          WA_ZLEST0041 TYPE ZLEST0041.

    ME->LIMPAR_REGISTRO( ).

    SELECT SINGLE * INTO ME->VAGAO_CHEGADA FROM ZLEST0019_L3_20 WHERE ID_ZLEST0019 EQ I_ID_REGISTRO.

    IF SY-SUBRC IS INITIAL.
      SELECT SINGLE * INTO ME->VAGAO_SAIDA FROM ZLEST0019_L2_20
       WHERE DCL     EQ ME->VAGAO_CHEGADA-DCL
         AND IDVAGAO EQ ME->VAGAO_CHEGADA-IDVAGAO.

      IF SY-SUBRC IS INITIAL.
        ME->MONTA_PROCESSO( I_DCL      = ME->VAGAO_SAIDA-DCL
                            I_ID_VAGAO = ME->VAGAO_SAIDA-IDVAGAO
                            I_SERIE    = ME->VAGAO_SAIDA-SERIEDCL
                            I_CNPJ     = ME->VAGAO_SAIDA-CNPJFERRO  ).
      ENDIF.

    ENDIF.

    ME->CK_ALTEROU = ABAP_FALSE.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~VALIDAR_EXCLUSAO.

    E_VALIDOU = ABAP_FALSE.

    IF ME->GET_ID_REFKEY( ) IS INITIAL.
      MESSAGE S005 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    E_VALIDOU = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~VALIDAR_REGISTRO.

    E_VALIDOU = ABAP_FALSE.

    IF ME->ID_REFKEY IS INITIAL.
      MESSAGE S003 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    IF ME->VAGAO_SAIDA-DTADECARGA GT ME->VAGAO_CHEGADA-DTADECARGA.
      MESSAGE S004 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    E_VALIDOU = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CADASTRO~VALIDA_ATRIBUTO_ALTERAVEL.

    R_PERMITIDO = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_PESQUISA~PESQUISAR.

    DATA: LC_FILTRO  TYPE ZDE_FILTRO_FERRO_ENTRADA,
          WA_RETORNO TYPE ZDE_RET_PESQ_FERRO_ENTRADA,
          LC_RETORNO TYPE ZDE_RET_PESQ_FERRO_ENTRADA_T.

    LC_FILTRO = I_FILTROS.

    E_PESQUISOU = ABAP_FALSE.

    SELECT GG~IDVAGAO        AS CAB_IDVAGAO,
           GG~DCL            AS CAB_DCL,
           GG~SERIEDCL       AS CAB_SERIE,
           GG~CNPJFERRO      AS CAB_CNPJFERRO,
           GG~PESOVAGAO      AS CAB_PESO_SAIDA,
           GG~DTADECARGA     AS CAB_DATA_SAIDA,
           GG~ERDAT	         AS CAB_DT_SIS_SAIDA,
           GG~ERZET	         AS CAB_HR_SIS_SAIDA,
           GG~UNAME	         AS CAB_US_SIS_SAIDA,
           GG~ID_REFKEY      AS CAB_ID_REFKEY,
           GG~ID_ZLEST0019   AS CAB_ID_ZLEST0019,
           FERRO~KUNNR       AS CAB_KUNNR,
           FERRO~NAME1       AS CAB_NAME1,
           NT~CNPJCLIENTE    AS NTS_CNPJ_CLIENTE,
           NT~BUKRS          AS NTS_BUKRS,
           NT~BRANCH         AS NTS_BRANCH,
           NT~NFENUM         AS NTS_NFENUM,
           NS~SERIES         AS NTS_SERIE,
           NS~DOCNUM         AS NTS_DOCNUM,
           NT~PESONF         AS NTS_PESONF,
           NT~PESODVAGAO     AS NTS_PESOSAIDA,
           NT~MATNR          AS NTS_MATNR,
           NT~ID_REFKEY      AS NTS_ID_REFKEY,
           NT~ID_ZLEST0019   AS NTS_ID_ZLEST0019,
           NT~NR_NF_TERCEIRO AS NTS_NR_NF_TERCEIRO,
           NT~COD_FORNECEDOR AS NTS_COD_FORNECEDOR,
           NE~PESOVAGAO      AS CBE_PESO_CHEGADA,
           NE~DTADECARGA     AS CBE_DATA_CHEGADA,
           NE~CNPJFERRO      AS CBE_CNPJFERRO,
           NE~ID_REFKEY      AS CBE_ID_REFKEY,
           NE~ERDAT	         AS CBE_DT_SIS_ENTRADA,
           NE~ERZET	         AS CBE_HR_SIS_ENTRADA,
           NE~UNAME	         AS CBE_US_SIS_ENTRADA
      INTO TABLE @DATA(ITAB)
      FROM ZLEST0019_L2_20      AS GG
     INNER JOIN LFA1            AS FERRO ON FERRO~STCD1 = GG~CNPJFERRO
     INNER JOIN ZLEST0019_L2_30 AS NT    ON NT~DCL      = GG~DCL AND NT~CNPJFERRO = GG~CNPJFERRO
      LEFT JOIN ZLEST0019_L3_20 AS NE    ON NE~DCL      = GG~DCL   AND NE~IDVAGAO  = GG~IDVAGAO
      LEFT JOIN J_1BNFDOC       AS NS    ON NS~DOCNUM   = NT~DOCNUM
     WHERE GG~DTADECARGA     IN @LC_FILTRO-IDTSAI
       AND GG~DCL            IN @LC_FILTRO-INRDCL
       AND GG~IDVAGAO        IN @LC_FILTRO-IIDVAG
       AND FERRO~LIFNR       IN @LC_FILTRO-IFORNE
       AND NT~BUKRS          IN @LC_FILTRO-IBUKRS
       AND NT~BRANCH         IN @LC_FILTRO-IBRANC
       AND NT~NFENUM         IN @LC_FILTRO-INNOTA
       AND NE~DTADECARGA     IN @LC_FILTRO-IDTCHE
       AND FERRO~LIFNR       NE '0000140498' .

    CHECK SY-SUBRC IS INITIAL.

    "Romaneio de Saida
    DATA(IT_NOTAS_SAIDAS) = ITAB[].
    DELETE IT_NOTAS_SAIDAS WHERE NTS_DOCNUM IS INITIAL.

    SELECT * INTO TABLE @DATA(IT_ZLEST0039)
      FROM ZLEST0039
       FOR ALL ENTRIES IN @IT_NOTAS_SAIDAS
     WHERE DOCNUM EQ @IT_NOTAS_SAIDAS-NTS_DOCNUM.

    SORT IT_ZLEST0039 BY DOCNUM.

    IF IT_ZLEST0039 IS NOT INITIAL.

      SELECT * INTO TABLE @DATA(IT_ZSDT0001)
        FROM ZSDT0001
         FOR ALL ENTRIES IN @IT_ZLEST0039
       WHERE DOC_REM      EQ @IT_ZLEST0039-VBELN
         AND TP_MOVIMENTO EQ 'S'.

      SORT IT_ZSDT0001 BY DOC_REM.
    ENDIF.

    "Remessas por conta e ordem de terceiro
    DATA(ITAB_AUX) = ITAB[].
    DELETE ITAB_AUX WHERE NTS_NR_NF_TERCEIRO IS INITIAL.
    DELETE ITAB_AUX WHERE NTS_COD_FORNECEDOR IS INITIAL.
    SORT ITAB_AUX BY NTS_NR_NF_TERCEIRO NTS_COD_FORNECEDOR.
    DELETE ADJACENT DUPLICATES FROM ITAB_AUX COMPARING NTS_NR_NF_TERCEIRO NTS_COD_FORNECEDOR.

    IF ITAB_AUX IS NOT INITIAL.
      SELECT * INTO TABLE @DATA(IT_ZLEST0041)
        FROM ZLEST0041
         FOR ALL ENTRIES IN @ITAB_AUX
       WHERE NR_NF       EQ @ITAB_AUX-NTS_NR_NF_TERCEIRO
         AND COD_CLIENTE EQ @ITAB_AUX-NTS_COD_FORNECEDOR.
      SORT IT_ZLEST0041 BY NR_NF COD_CLIENTE.
    ENDIF.

    "Informações de Peso de Chegada
    CLEAR: ITAB_AUX.
    ITAB_AUX = ITAB[].
    DELETE ITAB_AUX WHERE CBE_CNPJFERRO IS INITIAL.
    SORT ITAB_AUX BY CBE_ID_REFKEY CAB_DCL CBE_CNPJFERRO.
    DELETE ADJACENT DUPLICATES FROM ITAB_AUX COMPARING CBE_ID_REFKEY CAB_DCL CBE_CNPJFERRO.

    IF ITAB_AUX IS NOT INITIAL.
      SELECT * INTO TABLE @DATA(IT_L3_30)
        FROM ZLEST0019_L3_30
         FOR ALL ENTRIES IN @ITAB_AUX
       WHERE DCL       EQ @ITAB_AUX-CAB_DCL
         AND CNPJFERRO EQ @ITAB_AUX-CBE_CNPJFERRO
         AND ID_REFKEY EQ @ITAB_AUX-CBE_ID_REFKEY.

      SORT IT_L3_30 BY DCL CNPJFERRO ID_REFKEY BUKRS BRANCH NFENUM.
    ENDIF.

    "Informação do Material
    CLEAR: ITAB_AUX.
    ITAB_AUX = ITAB[].
    DELETE ITAB_AUX WHERE NTS_MATNR IS INITIAL.
    SORT ITAB_AUX BY NTS_MATNR.
    DELETE ADJACENT DUPLICATES FROM ITAB_AUX COMPARING NTS_MATNR.
    IF ITAB_AUX IS NOT INITIAL.
      SELECT * INTO TABLE @DATA(IT_MATERIAL)
        FROM MAKT
         FOR ALL ENTRIES IN @ITAB_AUX
       WHERE SPRAS EQ @SY-LANGU
         AND MATNR EQ @ITAB_AUX-NTS_MATNR.

      SORT IT_MATERIAL BY MATNR.
    ENDIF.

    "Agente de Pesagem
    CLEAR: ITAB_AUX.
    ITAB_AUX = ITAB[].
    DELETE ITAB_AUX WHERE CBE_CNPJFERRO IS INITIAL.
    SORT ITAB_AUX BY CBE_CNPJFERRO.
    DELETE ADJACENT DUPLICATES FROM ITAB_AUX COMPARING CBE_CNPJFERRO.
    IF ITAB_AUX IS NOT INITIAL.
      SELECT * INTO TABLE @DATA(IT_LFA1)
        FROM LFA1
         FOR ALL ENTRIES IN @ITAB_AUX
       WHERE STCD1 EQ @ITAB_AUX-CBE_CNPJFERRO.

      SORT IT_LFA1 BY STCD1.
    ENDIF.

    LOOP AT ITAB INTO DATA(WA_ITAB).

      WA_RETORNO-EMIT_RSOCIAL    = WA_ITAB-CAB_NAME1.
      WA_RETORNO-EMIT_CNPJ       = WA_ITAB-CAB_CNPJFERRO.
      WA_RETORNO-DCL             = WA_ITAB-CAB_DCL.
      WA_RETORNO-SERIEDCL        = WA_ITAB-CAB_SERIE.
      WA_RETORNO-CNPJFERRO       = WA_ITAB-CAB_CNPJFERRO.
      WA_RETORNO-IDVAGAO         = WA_ITAB-CAB_IDVAGAO.
      WA_RETORNO-QT_SAIDA        = WA_ITAB-CAB_PESO_SAIDA.
      WA_RETORNO-DT_SAIDA        = WA_ITAB-CAB_DATA_SAIDA.
      WA_RETORNO-QT_CHEGADA      = WA_ITAB-CBE_PESO_CHEGADA.
      WA_RETORNO-DT_CHEGADA      = WA_ITAB-CBE_DATA_CHEGADA.

      CALL FUNCTION 'CONVERSION_EXIT_CGCBR_OUTPUT'
        EXPORTING
          INPUT  = WA_RETORNO-EMIT_CNPJ
        IMPORTING
          OUTPUT = WA_RETORNO-EMIT_CNPJ.

      WA_RETORNO-BUKRS           = WA_ITAB-NTS_BUKRS.
      WA_RETORNO-BRANCH          = WA_ITAB-NTS_BRANCH.
      WA_RETORNO-NR_NF_PROPRIA   = WA_ITAB-NTS_NFENUM.
      WA_RETORNO-SERIE_PROPRIA   = WA_ITAB-NTS_SERIE.
      WA_RETORNO-DOCNUM          = WA_ITAB-NTS_DOCNUM.
      WA_RETORNO-NR_NF           = WA_ITAB-NTS_NR_NF_TERCEIRO.
      WA_RETORNO-COD_CLIENTE     = WA_ITAB-NTS_COD_FORNECEDOR.
      WA_RETORNO-PESO_ORIGEM     = WA_ITAB-NTS_PESONF.
      WA_RETORNO-PESO_SAIDA      = WA_ITAB-NTS_PESOSAIDA.
      WA_RETORNO-COD_MATERIAL    = WA_ITAB-NTS_MATNR.

      WA_RETORNO-CNPJ_AGPESO     = WA_ITAB-CBE_CNPJFERRO.

      READ TABLE IT_LFA1 INTO DATA(WA_LFA1) WITH KEY STCD1 = WA_ITAB-CBE_CNPJFERRO BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WA_RETORNO-ID_AGPESO = WA_LFA1-LIFNR.
        WA_RETORNO-DS_AGPESO = WA_LFA1-NAME1.
      ENDIF.

      CALL FUNCTION 'CONVERSION_EXIT_CGCBR_OUTPUT'
        EXPORTING
          INPUT  = WA_RETORNO-CNPJ_AGPESO
        IMPORTING
          OUTPUT = WA_RETORNO-CNPJ_AGPESO.

      "Remessa por conta e Ordem de Terceiro
      IF WA_ITAB-NTS_NR_NF_TERCEIRO IS NOT INITIAL AND WA_ITAB-NTS_COD_FORNECEDOR IS NOT INITIAL.
        READ TABLE IT_ZLEST0041 INTO DATA(WA_ZLEST0041) WITH KEY NR_NF       = WA_ITAB-NTS_NR_NF_TERCEIRO
                                                                 COD_CLIENTE = WA_ITAB-NTS_COD_FORNECEDOR BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          WA_RETORNO-CENTRO_COMPRADOR = WA_ZLEST0041-CENTRO_COMPRADOR.
          WA_RETORNO-COD_MATERIAL     = WA_ZLEST0041-COD_MATERIAL.
          WA_RETORNO-SERIE            = WA_ZLEST0041-SERIE.
        ELSE.
          WA_RETORNO-COD_MATERIAL     = WA_ITAB-NTS_MATNR.
        ENDIF.
      ELSE.
        WA_RETORNO-COD_MATERIAL     = WA_ITAB-NTS_MATNR.
      ENDIF.

      "Informação de Peso de Entrada
      READ TABLE IT_L3_30 INTO DATA(WA_L3_30)
      WITH KEY DCL       = WA_ITAB-CAB_DCL
               CNPJFERRO = WA_ITAB-CBE_CNPJFERRO
               ID_REFKEY = WA_ITAB-CBE_ID_REFKEY
               BUKRS     = WA_ITAB-NTS_BUKRS
               BRANCH    = WA_ITAB-NTS_BRANCH
               NFENUM    = WA_ITAB-NTS_NFENUM.
      IF SY-SUBRC IS INITIAL.
        WA_RETORNO-PESO_CHEGADA = WA_L3_30-PESODVAGAO.
      ENDIF.

      IF WA_RETORNO-COD_MATERIAL IS NOT INITIAL.
        READ TABLE IT_MATERIAL INTO DATA(WA_MATERIAL) WITH KEY MATNR = WA_RETORNO-COD_MATERIAL BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          WA_RETORNO-DSC_MATERIAL = WA_MATERIAL-MAKTX.
        ENDIF.
      ENDIF.

      IF WA_RETORNO-DOCNUM IS NOT INITIAL.

        "Busca Romaneio
        READ TABLE IT_ZLEST0039 INTO DATA(WA_ZLEST0039) WITH KEY DOCNUM = WA_RETORNO-DOCNUM BINARY SEARCH.
        IF SY-SUBRC IS INITIAL AND WA_ZLEST0039-VBELN IS NOT INITIAL.
          READ TABLE IT_ZSDT0001 INTO DATA(WA_ZSDT0001) WITH KEY DOC_REM = WA_ZLEST0039-VBELN BINARY SEARCH.

          IF SY-SUBRC IS INITIAL.
            WA_RETORNO-NR_ROMANEIO      = WA_ZSDT0001-NR_ROMANEIO.
            WA_RETORNO-CH_REFERENCIA    = WA_ZSDT0001-CH_REFERENCIA.
            WA_RETORNO-NR_SAFRA         = WA_ZSDT0001-NR_SAFRA.
            WA_RETORNO-NR_TICKET        = WA_ZSDT0001-NR_TICKET.
            WA_RETORNO-NR_PERC_UMIDADE  = WA_ZSDT0001-NR_PERC_UMIDADE.
            WA_RETORNO-NR_QTD_UMIDADE   = WA_ZSDT0001-NR_QTD_UMIDADE.
            WA_RETORNO-NR_PERC_IMPUREZA = WA_ZSDT0001-NR_PERC_IMPUREZA.
            WA_RETORNO-NR_QTD_IMPUREZA  = WA_ZSDT0001-NR_QTD_IMPUREZA.
            WA_RETORNO-NR_PERC_AVARIA   = WA_ZSDT0001-NR_PERC_AVARIA.
            WA_RETORNO-NR_QTD_AVARIA    = WA_ZSDT0001-NR_QTD_AVARIA.
            WA_RETORNO-NR_PERC_ARDIDO   = WA_ZSDT0001-NR_PERC_ARDIDO.
            WA_RETORNO-NR_QTD_ARDIDO    = WA_ZSDT0001-NR_QTD_ARDIDO.
            WA_RETORNO-NR_PERC_QUEBRA   = WA_ZSDT0001-NR_PERC_QUEBRA.
            WA_RETORNO-NR_QTD_QUEBRA    = WA_ZSDT0001-NR_QTD_QUEBRA.
            WA_RETORNO-NR_PERC_ESVERD   = WA_ZSDT0001-NR_PERC_ESVERD.
            WA_RETORNO-NR_QTD_ESVERD    = WA_ZSDT0001-NR_QTD_ESVERD.
          ENDIF.
        ENDIF.
      ENDIF.

      APPEND WA_RETORNO TO LC_RETORNO.
    ENDLOOP.


    E_REGISTROS = LC_RETORNO.
    E_PESQUISOU = ABAP_TRUE.

  ENDMETHOD.
ENDCLASS.
