*&---------------------------------------------------------------------*
*&  Include           ZSDR0077_FORM
*&---------------------------------------------------------------------*

FORM F_REFRESH_ALV USING P_ALV.

  CASE P_ALV.
    WHEN '0100'.
      CALL METHOD OBJ_ALV_0100->REFRESH_TABLE_DISPLAY
        EXPORTING
          IS_STABLE = WA_STABLE.
    WHEN '0110'.

  ENDCASE.

ENDFORM.

FORM F_REFRESH_OBJETOS .

  CLEAR: GS_LAYOUT,
         GS_VARIANT.

  REFRESH: IT_EXCLUDE_FCODE.

ENDFORM.

FORM F_CRIAR_CATALOG USING P_SCREEN.

  FREE: WA_FCAT, IT_FCAT.

  CASE P_SCREEN.
    WHEN '0100'.

      PERFORM F_ESTRUTURA_ALV USING:

       01  'ZSDT0149'      'REGION'             'IT_SAIDA_0100'  'REGION'                    'UF'               '03'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       02  'ZSDT0149'      'BRANCH'             'IT_SAIDA_0100'  'BRANCH'                    'Filial'           '06'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       03  'ZSDT0149'      'TZONE'              'IT_SAIDA_0100'  'TZONE'                     'Fuso Horário'     '12'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       04  'ZSDT0149'      'DT_REGISTRO'        'IT_SAIDA_0100'  'DT_REGISTRO'               'Dt.Registro'      '12'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       05  'ZSDT0149'      'HR_REGISTRO'        'IT_SAIDA_0100'  'HR_REGISTRO'               'Hr.Registro'      '12'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
       06  'ZSDT0149'      'US_REGISTRO'        'IT_SAIDA_0100'  'US_REGISTRO'               'Us.Registro'      '12'   ' '    ''  ' ' ' ' ' ' ' ' '' .

    WHEN '0110'.


  ENDCASE.

ENDFORM.

FORM F_ESTRUTURA_ALV USING VALUE(P_COL_POS)       TYPE I
                           VALUE(P_REF_TABNAME)   LIKE DD02D-TABNAME
                           VALUE(P_REF_FIELDNAME) LIKE DD03D-FIELDNAME
                           VALUE(P_TABNAME)       LIKE DD02D-TABNAME
                           VALUE(P_FIELD)         LIKE DD03D-FIELDNAME
                           VALUE(P_SCRTEXT_L)     LIKE DD03P-SCRTEXT_L
                           VALUE(P_OUTPUTLEN)
                           VALUE(P_EDIT)
                           VALUE(P_SUM)
                           VALUE(P_EMPHASIZE)
                           VALUE(P_JUST)
                           VALUE(P_HOTSPOT)
                           VALUE(P_F4)
                           VALUE(P_CHECK).

  CLEAR WA_FCAT.

  WA_FCAT-FIELDNAME   = P_FIELD.
  WA_FCAT-TABNAME     = P_TABNAME.
  WA_FCAT-REF_TABLE   = P_REF_TABNAME.
  WA_FCAT-REF_FIELD   = P_REF_FIELDNAME.
  WA_FCAT-KEY         = ' '.
  WA_FCAT-EDIT        = P_EDIT.
  WA_FCAT-COL_POS     = P_COL_POS.
  WA_FCAT-OUTPUTLEN   = P_OUTPUTLEN.
  WA_FCAT-NO_OUT      = ' '.
  WA_FCAT-DO_SUM      = P_SUM.
  WA_FCAT-REPTEXT     = P_SCRTEXT_L.
  WA_FCAT-SCRTEXT_S   = P_SCRTEXT_L.
  WA_FCAT-SCRTEXT_M   = P_SCRTEXT_L.
  WA_FCAT-SCRTEXT_L   = P_SCRTEXT_L.
  WA_FCAT-EMPHASIZE   = P_EMPHASIZE.
  WA_FCAT-STYLE       =
  WA_FCAT-JUST        = P_JUST.
  WA_FCAT-HOTSPOT     = P_HOTSPOT.
  WA_FCAT-F4AVAILABL  = P_F4.
  WA_FCAT-CHECKBOX    = P_CHECK.

  APPEND WA_FCAT TO IT_FCAT.

ENDFORM.                    " ESTRUTURA_ALV

FORM F_EXCLUDE_FCODE USING P_SCREEN.

  APPEND CL_GUI_ALV_GRID=>MC_FC_REFRESH           TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW    TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW    TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW    TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_COPY          TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW      TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_CUT           TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO          TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE         TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_CHECK             TO IT_EXCLUDE_FCODE.

ENDFORM.

FORM F_LIMPA_VARIAVEIS .

  CLEAR: WA_SAIDA_0100,
         IT_SAIDA_0100[],
         TG_0149[].

ENDFORM.

FORM F_SELECIONAR_DADOS .

  PERFORM F_LIMPA_VARIAVEIS.

  SELECT *
    FROM ZSDT0149 INTO TABLE TG_0149.

  CHECK TG_0149[] IS NOT INITIAL.

ENDFORM.

FORM F_PROCESSA_DADOS .

  LOOP AT TG_0149.

    CLEAR: WA_SAIDA_0100.

    MOVE-CORRESPONDING TG_0149 TO WA_SAIDA_0100.

    APPEND WA_SAIDA_0100 TO IT_SAIDA_0100.

  ENDLOOP.

  SORT IT_SAIDA_0100 BY REGION.

ENDFORM.

FORM F_IMPORTAR_LCTO.

  CALL SCREEN 0111 STARTING AT 02 02 ENDING AT 83 04.

ENDFORM.

FORM F_IMPORT_ITENS .

  DATA: GT_PLANILHA   LIKE STANDARD TABLE OF ALSMEX_TABLINE,
        WL_PLANILHA   LIKE ALSMEX_TABLINE,
        VL_DT_TEMP    TYPE SYDATUM,
        GT_ZSDT0149   TYPE TABLE OF ZSDT0149 WITH HEADER LINE.

  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      TEXT = TEXT-I14.

  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      FILENAME                = P_FILE
      I_BEGIN_COL             = 1
      I_BEGIN_ROW             = 2
      I_END_COL               = 55
      I_END_ROW               = 10000
    TABLES
      INTERN                  = GT_PLANILHA
    EXCEPTIONS
      INCONSISTENT_PARAMETERS = 1
      UPLOAD_OLE              = 2
      OTHERS                  = 3.

  IF GT_PLANILHA[] IS INITIAL.
    MESSAGE S836(SD) WITH TEXT-E60 DISPLAY LIKE 'S'.
    RETURN.
  ENDIF.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
   EXPORTING
     TITLEBAR              = 'Confirmação'
     TEXT_QUESTION         = 'Deseja realmente importar os lançamentos da planilha selecionada?'
     TEXT_BUTTON_1         = 'Sim'
     TEXT_BUTTON_2         = 'Não'
     DEFAULT_BUTTON        = '1'
     DISPLAY_CANCEL_BUTTON = ''
   IMPORTING
     ANSWER                = VAR_ANSWER
   EXCEPTIONS
     TEXT_NOT_FOUND        = 1
     OTHERS                = 2.

 CHECK VAR_ANSWER EQ '1'.

  DATA(_INDEX) = 0.
  LOOP AT GT_PLANILHA INTO WL_PLANILHA.
    AT NEW ROW.
      CLEAR: GT_ZSDT0149.
      ADD 1 TO _INDEX.
    ENDAT.

    IF WL_PLANILHA-VALUE(1) = SPACE.
      SHIFT WL_PLANILHA-VALUE LEFT DELETING LEADING SPACE.
    ENDIF.

    CASE WL_PLANILHA-COL.
      WHEN 1.
        GT_ZSDT0149-REGION  = WL_PLANILHA-VALUE.
      WHEN 2.
        GT_ZSDT0149-BRANCH  = WL_PLANILHA-VALUE.
      WHEN 3.
        GT_ZSDT0149-TZONE   = WL_PLANILHA-VALUE.
    ENDCASE.

    GT_ZSDT0149-DT_REGISTRO = SY-DATUM.
    GT_ZSDT0149-HR_REGISTRO = SY-UZEIT.
    GT_ZSDT0149-US_REGISTRO = SY-UNAME.

    AT END OF ROW.
      IF ( GT_ZSDT0149-REGION IS INITIAL ) AND ( GT_ZSDT0149-BRANCH IS INITIAL  ).
        MESSAGE |Informe Estado ou Filial! Linha { _INDEX } | TYPE 'S'.
        RETURN.
      ENDIF.

      IF ( GT_ZSDT0149-REGION IS NOT INITIAL ) AND ( GT_ZSDT0149-BRANCH IS NOT INITIAL  ).
        MESSAGE |Informe Estado ou Filial! Linha { _INDEX } | TYPE 'S'.
        RETURN.
      ENDIF.

      IF GT_ZSDT0149-TZONE IS INITIAL.
        MESSAGE |Fuso Horário não informado! Linha { _INDEX } | TYPE 'S'.
        RETURN.
      ENDIF.

      SELECT SINGLE *
        FROM TTZZ INTO @DATA(_WL_TTZZ)
       WHERE TZONE = @GT_ZSDT0149-TZONE.

      IF SY-SUBRC NE 0.
        MESSAGE |Fuso Horário inválido! Linha { _INDEX } | TYPE 'S'.
        RETURN.
      ENDIF.

      IF GT_ZSDT0149-BRANCH IS NOT INITIAL.
        SELECT SINGLE *
          FROM J_1BBRANCH INTO @DATA(_WL_J_1BBRANCH)
         WHERE BRANCH = @GT_ZSDT0149-BRANCH.

        IF SY-SUBRC NE 0.
          MESSAGE |Filial inválida! Linha { _INDEX } | TYPE 'S'.
          RETURN.
        ENDIF.
      ENDIF.

      APPEND GT_ZSDT0149.
    ENDAT.

  ENDLOOP.

  IF GT_ZSDT0149[] IS NOT INITIAL.
    MODIFY ZSDT0149 FROM TABLE GT_ZSDT0149.
  ENDIF.

  MESSAGE S836(SD) WITH TEXT-S05 DISPLAY LIKE 'S'.
  LEAVE TO SCREEN 0.

ENDFORM.
