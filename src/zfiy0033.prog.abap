*&---------------------------------------------------------------------*
*& Report  ZFIY0033
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZFIY0033.

TABLES: ZSDYT0055, BKPF.

DATA: IT_ENVIOS         TYPE STANDARD TABLE OF ZSDYT0055,
      IT_ENVIOS_LOG     TYPE STANDARD TABLE OF ZSDYT0055_ALV WITH HEADER LINE,
      IT_ENVIOS_LOG_SEL TYPE STANDARD TABLE OF ZSDYT0055_ALV WITH HEADER LINE,
      IT_BKPF           TYPE TABLE OF BKPF WITH HEADER LINE,
      IT_PARTIDAS       TYPE TABLE OF ZDE_FI_GL_PARTIDAS_CLI_FOR WITH HEADER LINE,
      IT_TBSL           TYPE TABLE OF TBSL WITH HEADER LINE,
      OK_CODE           TYPE SY-UCOMM,
      IT_FORNECEDOR     TYPE TABLE OF LFA1 WITH HEADER LINE,
      IT_CLIENTE        TYPE TABLE OF KNA1 WITH HEADER LINE.

DATA: G_CUSTOM_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      DG_DYNDOC_ID       TYPE REF TO CL_DD_DOCUMENT,
      DG_SPLITTER        TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_SPLITTER_2      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_PARENT_HTML     TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_HTML1    TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_HTML2    TYPE REF TO CL_GUI_CONTAINER,
      PICTURE            TYPE REF TO CL_GUI_PICTURE,
      DG_PARENT_ALV      TYPE REF TO CL_GUI_CONTAINER,
      G_ALV              TYPE REF TO CL_GUI_ALV_GRID,
      GS_LAYOUT          TYPE LVC_S_LAYO,
      GS_VARIANT         TYPE DISVARIANT,
      IT_FIELDCATALOG    TYPE LVC_T_FCAT,
      TABLE_ELEMENT      TYPE REF TO CL_DD_TABLE_ELEMENT,
      TABLE_ELEMENT2     TYPE REF TO CL_DD_TABLE_ELEMENT,
      COLUMN             TYPE REF TO CL_DD_AREA,
      COLUMN_1           TYPE REF TO CL_DD_AREA,
      COLUMN_2           TYPE REF TO CL_DD_AREA,
      DG_HTML_CNTRL      TYPE REF TO CL_GUI_HTML_VIEWER.

DATA: IT_SELECTED_ROWS TYPE LVC_T_ROW,
      WA_SELECTED_ROWS TYPE LVC_S_ROW.

DATA: IT_EXCLUDE_FCODE TYPE UI_FUNCTIONS,
      WA_EXCLUDE_FCODE LIKE LINE OF IT_EXCLUDE_FCODE.

DATA: GS_SCROLL_COL TYPE LVC_S_COL,
      GS_SCROLL_ROW TYPE LVC_S_ROID.

SELECTION-SCREEN BEGIN OF BLOCK CONSUL WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS: PBUKRS FOR ZSDYT0055-BUKRS    NO-EXTENSION OBLIGATORY,
                PGJAHR FOR ZSDYT0055-GJAHR    NO-EXTENSION OBLIGATORY,
                PBLDAT FOR BKPF-BLDAT                      OBLIGATORY,
                PAUGBL FOR ZSDYT0055-AUGBL    ,"NO-EXTENSION,
                PMAIL  FOR ZSDYT0055-E_MAIL   NO-EXTENSION,
                PDTENV FOR ZSDYT0055-DT_ENVIO NO-EXTENSION,
                PHRENV FOR ZSDYT0055-HR_ENVIO NO-EXTENSION,
                PUSENV FOR ZSDYT0055-US_ENVIO NO-EXTENSION.
SELECTION-SCREEN END OF BLOCK CONSUL.

SELECTION-SCREEN BEGIN OF BLOCK EMAIL WITH FRAME TITLE TEXT-002.
PARAMETERS: PEMAIL  TYPE CHAR120.
SELECTION-SCREEN END OF BLOCK EMAIL.

START-OF-SELECTION.

  DATA: RGAUGBL TYPE RANGE OF AUGBL,
        RLAUGBL LIKE LINE OF RGAUGBL.

  RLAUGBL-SIGN   = 'I'.
  RLAUGBL-OPTION = 'CP'.
  RLAUGBL-LOW    = '15*'.
  APPEND RLAUGBL TO RGAUGBL.

  RLAUGBL-SIGN   = 'I'.
  RLAUGBL-OPTION = 'CP'.
  RLAUGBL-LOW    = '20*'.
  APPEND RLAUGBL TO RGAUGBL.

  SELECT B~BUKRS,
         B~BELNR,
         B~GJAHR
    INTO TABLE @DATA(IT_TAB)
    FROM BKPF AS B
   WHERE BUKRS IN @PBUKRS
     AND GJAHR IN @PGJAHR
     AND BLDAT IN @PBLDAT
     AND BELNR IN @PAUGBL
     AND BELNR IN @RGAUGBL
     AND STBLG EQ @SPACE.

  CHECK SY-SUBRC IS INITIAL.

  SELECT * INTO TABLE IT_ENVIOS
    FROM ZSDYT0055
     FOR ALL ENTRIES IN IT_TAB
   WHERE BUKRS    IN PBUKRS
     AND GJAHR    IN PGJAHR
     AND AUGBL    IN PAUGBL
     AND E_MAIL   IN PMAIL
     AND DT_ENVIO IN PDTENV
     AND HR_ENVIO IN PHRENV
     AND US_ENVIO IN PUSENV
     AND BUKRS    EQ IT_TAB-BUKRS
     AND AUGBL    EQ IT_TAB-BELNR
     AND GJAHR    EQ IT_TAB-GJAHR.

  "CHECK SY-SUBRC IS INITIAL.

  SORT IT_ENVIOS BY BUKRS GJAHR AUGBL.

  LOOP AT IT_TAB INTO DATA(WA_ENVIO).
    IT_BKPF-BUKRS = WA_ENVIO-BUKRS.
    IT_BKPF-GJAHR = WA_ENVIO-GJAHR.
    IT_BKPF-BELNR = WA_ENVIO-BELNR.
    APPEND IT_BKPF.
  ENDLOOP.

  CALL FUNCTION 'Z_FI_GL_PARTIDAS'
    TABLES
      IT_BKPF     = IT_BKPF
      IT_PARTIDAS = IT_PARTIDAS.

  SORT IT_PARTIDAS BY BUKRS GJAHR BELNR.

  IF IT_PARTIDAS[] IS NOT INITIAL.

    SELECT * INTO TABLE IT_FORNECEDOR
      FROM LFA1
       FOR ALL ENTRIES IN IT_PARTIDAS
     WHERE LIFNR EQ IT_PARTIDAS-PARID.

    SORT IT_FORNECEDOR BY LIFNR.

    SELECT * INTO TABLE IT_CLIENTE
      FROM KNA1
       FOR ALL ENTRIES IN IT_PARTIDAS
     WHERE KUNNR EQ IT_PARTIDAS-PARID.

    SORT IT_CLIENTE BY KUNNR.

  ENDIF.

  SELECT * INTO TABLE IT_TBSL
    FROM TBSL
     FOR ALL ENTRIES IN IT_PARTIDAS
   WHERE BSCHL EQ IT_PARTIDAS-BSCHL.

  SORT IT_TBSL BY BSCHL.

  LOOP AT IT_TAB INTO DATA(WA_DOCUMENTO).

    READ TABLE IT_ENVIOS INTO DATA(WA_DADOS_ENVIO) WITH KEY BUKRS = WA_DOCUMENTO-BUKRS
                                                            GJAHR = WA_DOCUMENTO-GJAHR
                                                            AUGBL = WA_DOCUMENTO-BELNR BINARY SEARCH.

    LOOP AT IT_PARTIDAS WHERE BUKRS = WA_DOCUMENTO-BUKRS
                          AND GJAHR = WA_DOCUMENTO-GJAHR
                          AND BELNR = WA_DOCUMENTO-BELNR.

      CLEAR: IT_ENVIOS_LOG.

      READ TABLE IT_TBSL WITH KEY BSCHL = IT_PARTIDAS-BSCHL.
      "D  Deudores
      "K  Acreedores
      CASE IT_TBSL-KOART.
        WHEN 'D'. "Deudores.
          MOVE-CORRESPONDING WA_DADOS_ENVIO TO IT_ENVIOS_LOG.
          MOVE-CORRESPONDING IT_PARTIDAS TO IT_ENVIOS_LOG.
          READ TABLE IT_CLIENTE WITH KEY KUNNR = IT_PARTIDAS-PARID.
          IF SY-SUBRC IS INITIAL.
            IT_ENVIOS_LOG-NAME1 = IT_CLIENTE-NAME1.
          ENDIF.
          APPEND IT_ENVIOS_LOG.
        WHEN 'K'.	"Acreedores.
          MOVE-CORRESPONDING WA_DADOS_ENVIO TO IT_ENVIOS_LOG.
          MOVE-CORRESPONDING IT_PARTIDAS TO IT_ENVIOS_LOG.
          READ TABLE IT_FORNECEDOR WITH KEY LIFNR = IT_PARTIDAS-PARID.
          IF SY-SUBRC IS INITIAL.
            IT_ENVIOS_LOG-NAME1 = IT_FORNECEDOR-NAME1.
          ENDIF.
          APPEND IT_ENVIOS_LOG.
      ENDCASE.
    ENDLOOP.
    CLEAR: WA_DADOS_ENVIO.
  ENDLOOP.

  CALL SCREEN 0100.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.

  DATA: URL(255)                TYPE C,
        P_TEXT                  TYPE SDYDO_TEXT_ELEMENT,
        SDYDO_TEXT_ELEMENT(255),
        P_TEXT_TABLE            TYPE SDYDO_TEXT_TABLE.


  SET PF-STATUS 'PF0100'.
  SET TITLEBAR 'TL0100'.

  IF G_CUSTOM_CONTAINER IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    IF SY-SUBRC <> 0.
      MESSAGE A000(TREE_CONTROL_MSG).
    ENDIF.

    CREATE OBJECT DG_SPLITTER
      EXPORTING
        PARENT  = G_CUSTOM_CONTAINER
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_HTML.

    CREATE OBJECT DG_SPLITTER_2
      EXPORTING
        PARENT  = DG_PARENT_HTML
        ROWS    = 1
        COLUMNS = 2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_HTML1.

    CALL METHOD DG_SPLITTER_2->SET_COLUMN_WIDTH
      EXPORTING
        ID    = 1
        WIDTH = 40.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 2
      RECEIVING
        CONTAINER = DG_PARENT_HTML2.

    CREATE OBJECT PICTURE
      EXPORTING
        PARENT = DG_PARENT_HTML2.

    PERFORM F_PEGA_IMAGEM USING 'LOGO_NOVO' CHANGING URL.

    CALL METHOD PICTURE->LOAD_PICTURE_FROM_URL
      EXPORTING
        URL = URL.

    CALL METHOD PICTURE->SET_DISPLAY_MODE
      EXPORTING
        DISPLAY_MODE = PICTURE->DISPLAY_MODE_FIT_CENTER.

    CALL METHOD DG_SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_ALV.

    CALL METHOD DG_SPLITTER->SET_ROW_HEIGHT
      EXPORTING
        ID     = 1
        HEIGHT = 16.

    CREATE OBJECT G_ALV
      EXPORTING
        I_PARENT = DG_PARENT_ALV.

    PERFORM FILL_IT_FIELDCATALOG.

*   Fill info for layout variant
    PERFORM FILL_GS_VARIANT.

*   Set layout parameters for ALV grid
    "GS_LAYOUT-GRID_TITLE = TEXT-100.
    GS_LAYOUT-SEL_MODE   = 'A'.

    CALL METHOD G_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT
        IS_VARIANT           = GS_VARIANT
        IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
        I_SAVE               = 'A'
      CHANGING
        IT_FIELDCATALOG      = IT_FIELDCATALOG
        IT_OUTTAB            = IT_ENVIOS_LOG[].

    CREATE OBJECT DG_DYNDOC_ID
      EXPORTING
        STYLE = 'ALV_GRID'.

    CALL METHOD DG_DYNDOC_ID->INITIALIZE_DOCUMENT.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 1
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT.

    CALL METHOD TABLE_ELEMENT->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN.

    CALL METHOD TABLE_ELEMENT->SET_COLUMN_STYLE
      EXPORTING
        COL_NO    = 1
        SAP_ALIGN = 'CENTER'
        SAP_STYLE = CL_DD_DOCUMENT=>HEADING.

    P_TEXT = TEXT-002.

    CALL METHOD COLUMN->ADD_TEXT
      EXPORTING
        TEXT      = P_TEXT
        SAP_STYLE = 'HEADING'.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 2
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT2.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      EXPORTING
        SAP_STYLE   = 'SAP_BOLD'
        STYLE_CLASS = 'SAP_BOLD'
      IMPORTING
        COLUMN      = COLUMN_1.

*PBUKRS	Sociedad
*PGJAHR	Ejercicio
*PAUGBL	Doc.compensación
*PDTENV	Fecha
*PHRENV	Hora
*PMAIL  Dir.cor.elec.
*PUSENV	Usuario

    CLEAR: P_TEXT_TABLE.

    IF PBUKRS-LOW IS NOT INITIAL.
      SDYDO_TEXT_ELEMENT = 'Sociedad: '.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.

    IF PGJAHR-LOW IS NOT INITIAL.
      SDYDO_TEXT_ELEMENT = 'Ejercicio: '.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.

    IF PAUGBL-LOW IS NOT INITIAL.
      SDYDO_TEXT_ELEMENT = 'Doc.compensación: '.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.

    IF PDTENV-LOW IS NOT INITIAL.
      SDYDO_TEXT_ELEMENT = 'Fecha: '.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.

    IF PHRENV-LOW IS NOT INITIAL.
      SDYDO_TEXT_ELEMENT = 'Hora: '.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.

    IF PMAIL-LOW IS NOT INITIAL.
      SDYDO_TEXT_ELEMENT = 'Dir.cor.elec: '.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.

    IF PUSENV-LOW IS NOT INITIAL.
      SDYDO_TEXT_ELEMENT = 'Usuario: '.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.

    CALL METHOD COLUMN_1->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE
        FIX_LINES  = 'X'.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN_2.

    CALL METHOD TABLE_ELEMENT2->SET_COLUMN_STYLE
      EXPORTING
        COL_NO       = 2
        SAP_ALIGN    = 'LEFT'
        SAP_FONTSIZE = CL_DD_DOCUMENT=>MEDIUM.

    CLEAR: P_TEXT_TABLE.

*PBUKRS	Sociedad
    IF PBUKRS-LOW IS NOT INITIAL.
      IF PBUKRS-HIGH IS INITIAL.
        CONCATENATE PBUKRS-LOW 'a' PBUKRS-LOW  INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ELSE.
        CONCATENATE PBUKRS-LOW 'a' PBUKRS-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ENDIF.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.

*PGJAHR	Ejercicio
    IF PGJAHR-LOW IS NOT INITIAL.
      IF PGJAHR-HIGH IS INITIAL.
        CONCATENATE PGJAHR-LOW 'a' PGJAHR-LOW  INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ELSE.
        CONCATENATE PGJAHR-LOW 'a' PGJAHR-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ENDIF.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.

*PAUGBL	Doc.compensación
    IF PAUGBL-LOW IS NOT INITIAL.
      IF PAUGBL-HIGH IS INITIAL.
        CONCATENATE PAUGBL-LOW 'a' PAUGBL-LOW  INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ELSE.
        CONCATENATE PAUGBL-LOW 'a' PAUGBL-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ENDIF.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.

*PDTENV	Fecha
    IF PDTENV-LOW IS NOT INITIAL.
      IF PDTENV-HIGH IS INITIAL.
        CONCATENATE PDTENV-LOW 'a' PDTENV-LOW  INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ELSE.
        CONCATENATE PDTENV-LOW 'a' PDTENV-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ENDIF.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.

*PHRENV	Hora
    IF PHRENV-LOW IS NOT INITIAL.
      IF PHRENV-HIGH IS INITIAL.
        CONCATENATE PHRENV-LOW 'a' PHRENV-LOW  INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ELSE.
        CONCATENATE PHRENV-LOW 'a' PHRENV-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ENDIF.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.

*PMAIL  Dir.cor.elec.
    IF PMAIL-LOW IS NOT INITIAL.
      IF PMAIL-HIGH IS INITIAL.
        CONCATENATE PMAIL-LOW 'a' PMAIL-LOW  INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ELSE.
        CONCATENATE PMAIL-LOW 'a' PMAIL-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ENDIF.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.

*PUSENV	Usuario
    IF PUSENV-LOW IS NOT INITIAL.
      IF PUSENV-HIGH IS INITIAL.
        CONCATENATE PUSENV-LOW 'a' PUSENV-LOW  INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ELSE.
        CONCATENATE PUSENV-LOW 'a' PUSENV-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
      ENDIF.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    ENDIF.

    CALL METHOD COLUMN_2->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE
        FIX_LINES  = 'X'.

    CALL METHOD DG_DYNDOC_ID->MERGE_DOCUMENT.

    CREATE OBJECT DG_HTML_CNTRL
      EXPORTING
        PARENT = DG_PARENT_HTML1.

    DG_DYNDOC_ID->HTML_CONTROL = DG_HTML_CNTRL.

    CALL METHOD DG_DYNDOC_ID->DISPLAY_DOCUMENT
      EXPORTING
        REUSE_CONTROL      = 'X'
        PARENT             = DG_PARENT_HTML1
      EXCEPTIONS
        HTML_DISPLAY_ERROR = 1.

  ENDIF.

  CALL METHOD G_ALV->GET_SCROLL_INFO_VIA_ID
    IMPORTING
      ES_COL_INFO = GS_SCROLL_COL
      ES_ROW_NO   = GS_SCROLL_ROW.


ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.

  DATA: RLC_BUKRS TYPE RANGE OF BUKRS,
        RLC_GJAHR TYPE RANGE OF GJAHR,
        RLC_BELNR TYPE RANGE OF BELNR_D,
        RLC_BUDAT TYPE RANGE OF BUDAT,
        WLC_BUKRS LIKE LINE OF RLC_BUKRS,
        WLC_GJAHR LIKE LINE OF RLC_GJAHR,
        WLC_BELNR LIKE LINE OF RLC_BELNR,
        WLC_BUDAT LIKE LINE OF RLC_BUDAT.

  CASE OK_CODE.
    WHEN 'ENV_EMAIL'.
      DESCRIBE TABLE IT_ENVIOS_LOG_SEL LINES DATA(QT_LINHAS).
      IF QT_LINHAS EQ 0.
        MESSAGE 'Seleccionar un registro!' TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      SORT IT_ENVIOS_LOG_SEL BY BUKRS GJAHR BELNR.
      DELETE ADJACENT DUPLICATES FROM IT_ENVIOS_LOG_SEL COMPARING BUKRS GJAHR BELNR.

      LOOP AT IT_ENVIOS_LOG_SEL INTO DATA(WA_ENVIOS_LOG_SEL).

        CLEAR: RLC_BUKRS,
               RLC_GJAHR,
               RLC_BELNR,
               RLC_BUDAT.

        WLC_BUKRS-SIGN = 'I'.
        WLC_GJAHR-SIGN = 'I'.
        WLC_BELNR-SIGN = 'I'.
        WLC_BUDAT-SIGN = 'I'.

        WLC_BUKRS-OPTION = 'EQ'.
        WLC_BELNR-OPTION = 'EQ'.
        WLC_GJAHR-OPTION = 'EQ'.
        WLC_BUDAT-OPTION = 'EQ'.

        WLC_BUKRS-LOW = WA_ENVIOS_LOG_SEL-BUKRS.
        WLC_GJAHR-LOW = WA_ENVIOS_LOG_SEL-GJAHR.
        WLC_BELNR-LOW = WA_ENVIOS_LOG_SEL-BELNR.
        WLC_BUDAT-LOW = WA_ENVIOS_LOG_SEL-BUDAT.

        WLC_BUKRS-HIGH = WLC_BUKRS-LOW.
        WLC_GJAHR-HIGH = WLC_GJAHR-LOW.
        WLC_BELNR-HIGH = WLC_BELNR-LOW.
        WLC_BUDAT-HIGH = WLC_BUDAT-LOW.

        APPEND WLC_BUKRS TO RLC_BUKRS.
        APPEND WLC_GJAHR TO RLC_GJAHR.
        APPEND WLC_BELNR TO RLC_BELNR.
        APPEND WLC_BUDAT TO RLC_BUDAT.

        SUBMIT ZFIY0003 WITH BR_BUKRS IN RLC_BUKRS
                        WITH BR_BELNR IN RLC_BELNR
                        WITH BR_GJAHR IN RLC_GJAHR
                        WITH BR_BUDAT IN RLC_BUDAT
                        WITH RB_PRNT  EQ ABAP_TRUE
                        WITH PEMAIL   EQ PEMAIL
                        WITH PSEND    EQ ABAP_TRUE
                        AND RETURN.
      ENDLOOP.
  ENDCASE.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100_EXIT INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  F_PEGA_IMAGEM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0190   text
*      <--P_URL  text
*----------------------------------------------------------------------*
FORM F_PEGA_IMAGEM  USING    NOME_LOGO
                    CHANGING URL.

  DATA: BEGIN OF GRAPHIC_TABLE OCCURS 0,
          LINE(255) TYPE X,
        END OF GRAPHIC_TABLE.
  DATA: L_GRAPHIC_XSTR TYPE XSTRING.
  DATA: GRAPHIC_SIZE   TYPE I.
  DATA: L_GRAPHIC_CONV TYPE I.
  DATA: L_GRAPHIC_OFFS TYPE I.

  REFRESH GRAPHIC_TABLE.
  CALL METHOD CL_SSF_XSF_UTILITIES=>GET_BDS_GRAPHIC_AS_BMP
    EXPORTING
      P_OBJECT = 'GRAPHICS'
      P_NAME   = NOME_LOGO
      P_ID     = 'BMAP'
      P_BTYPE  = 'BCOL'
    RECEIVING
      P_BMP    = L_GRAPHIC_XSTR.

  GRAPHIC_SIZE = XSTRLEN( L_GRAPHIC_XSTR ).
  L_GRAPHIC_CONV = GRAPHIC_SIZE.
  L_GRAPHIC_OFFS = 0.
  WHILE L_GRAPHIC_CONV > 255.
    GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(255).
    APPEND GRAPHIC_TABLE.
    L_GRAPHIC_OFFS = L_GRAPHIC_OFFS + 255.
    L_GRAPHIC_CONV = L_GRAPHIC_CONV - 255.
  ENDWHILE.
  GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(L_GRAPHIC_CONV).
  APPEND GRAPHIC_TABLE.
  CALL FUNCTION 'DP_CREATE_URL'
    EXPORTING
      TYPE     = 'IMAGE'
      SUBTYPE  = 'X-UNKNOWN'
      SIZE     = GRAPHIC_SIZE
      LIFETIME = 'T'
    TABLES
      DATA     = GRAPHIC_TABLE
    CHANGING
      URL      = URL.
ENDFORM.                    " F_PEGA_IMAGEM


*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG
*&---------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG .

  DATA: LC_COL_POS  TYPE LVC_COLPOS.

  FIELD-SYMBOLS: <FS_CAT> TYPE LVC_S_FCAT.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZSDYT0055_ALV'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG.

  LOOP AT IT_FIELDCATALOG ASSIGNING <FS_CAT>.
    IF <FS_CAT>-FIELDNAME = 'E_MAIL'.
      <FS_CAT>-OUTPUTLEN = 40.
    ENDIF.
  ENDLOOP.


ENDFORM.                    " FILL_IT_FIELDCATALOG


*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT
*&---------------------------------------------------------------------*
FORM FILL_GS_VARIANT .

  GS_VARIANT-REPORT      = SY-REPID.
  GS_VARIANT-HANDLE      = '0100'.
  GS_VARIANT-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT-USERNAME    = ABAP_FALSE.
  GS_VARIANT-VARIANT     = ABAP_FALSE.
  GS_VARIANT-TEXT        = ABAP_FALSE.
  GS_VARIANT-DEPENDVARS  = ABAP_FALSE.

ENDFORM.                    " FILL_GS_VARIANT

*&---------------------------------------------------------------------*
*&      Module  GET_SCROLL_INFO_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SCROLL_INFO_0100 INPUT.

  CALL METHOD G_ALV->GET_SCROLL_INFO_VIA_ID
    IMPORTING
      ES_COL_INFO = GS_SCROLL_COL
      ES_ROW_NO   = GS_SCROLL_ROW.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  GET_SELECTED_ROWS_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SELECTED_ROWS_0100 INPUT.

  CLEAR IT_SELECTED_ROWS.

  CALL METHOD G_ALV->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SELECTED_ROWS.

  CLEAR IT_ENVIOS_LOG_SEL[].

  LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
    READ TABLE IT_ENVIOS_LOG INTO DATA(WA_ENVIOS_LOG) INDEX WA_SELECTED_ROWS-INDEX.
    APPEND WA_ENVIOS_LOG TO IT_ENVIOS_LOG_SEL.
  ENDLOOP.

ENDMODULE.
