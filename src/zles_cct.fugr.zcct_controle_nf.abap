FUNCTION ZCCT_CONTROLE_NF.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(I_NOTAS_PROC) TYPE  ZDE_CONTROL_NF_CCT_T
*"  EXPORTING
*"     REFERENCE(E_NOTAS_PROC) TYPE  ZDE_CONTROL_NF_CCT_T
*"----------------------------------------------------------------------

  CONSTANTS: C_DISPONIBILIZAR_CCT TYPE C LENGTH 50 VALUE 'DISPONIBILIZAR_CCT',
             C_REMOVER_CCT        TYPE C LENGTH 50 VALUE 'REMOVER_CCT'.


  DATA: ZCL_CCT_CONTROL_NF TYPE REF TO ZCL_CCT_CONTROL_NF,
        WL_ZLEST0142       TYPE ZLEST0142,
        WL_ZLEST0192       TYPE ZLEST0192,
        IT_ZLEST0192       TYPE ZLEST0192_T.

  LOOP AT I_NOTAS_PROC INTO DATA(WL_NOTA_PROC).

    CLEAR: WL_ZLEST0142, IT_ZLEST0192[].

    WL_NOTA_PROC-SUCESSO_PROC = '0'.

    FREE ZCL_CCT_CONTROL_NF.
    CREATE OBJECT ZCL_CCT_CONTROL_NF.

    MOVE-CORRESPONDING WL_NOTA_PROC TO WL_ZLEST0142.


    WL_ZLEST0142-NUMERO =  |{ WL_ZLEST0142-NUMERO ALPHA = IN }|.
    WL_ZLEST0142-SERIE  =  |{ WL_ZLEST0142-SERIE  ALPHA = IN }|.

*--------------------------------------------------------------------------------------------------------------------*
*   Processamento
*--------------------------------------------------------------------------------------------------------------------*

    CASE WL_NOTA_PROC-OPERACAO_PROC.
      WHEN C_DISPONIBILIZAR_CCT.

        ZCL_CCT_CONTROL_NF->ATRIBUIR_NF( I_ZLEST0142 = WL_ZLEST0142 ).

        "Notas Complementos
        LOOP AT WL_NOTA_PROC-NOTAS_COMPLEMENTADAS INTO DATA(WL_NF_COMP).
          CLEAR: WL_ZLEST0192.

          IF WL_ZLEST0142-CHAVE_NFE IS NOT INITIAL.
            WL_ZLEST0192-CHAVE = WL_ZLEST0142-CHAVE_NFE.
          ELSEIF WL_ZLEST0142-CHAVE_NFF IS NOT INITIAL.
            WL_ZLEST0192-CHAVE = WL_ZLEST0142-CHAVE_NFF.
          ENDIF.

          IF WL_NF_COMP-CHAVE_NFE IS NOT INITIAL.
            WL_ZLEST0192-CHAVE_COMP = WL_NF_COMP-CHAVE_NFE.
          ELSEIF WL_NF_COMP-CHAVE_NFF IS NOT INITIAL.
            WL_ZLEST0192-CHAVE_COMP = WL_NF_COMP-CHAVE_NFF.
          ENDIF.

          APPEND WL_ZLEST0192 TO IT_ZLEST0192.
        ENDLOOP.

        IF IT_ZLEST0192[] IS NOT INITIAL.
          ZCL_CCT_CONTROL_NF->ATRIBUIR_NF_COMPLEMENTADAS( I_NF_COMPLEMENTADAS = IT_ZLEST0192 ).
        ENDIF.

        DATA(_DISPONIBILIZADA) = ZCL_CCT_CONTROL_NF->DISP_NF_CCT( ).

        IF _DISPONIBILIZADA EQ ABAP_TRUE.
          WL_NOTA_PROC-SUCESSO_PROC = '1'.
        ENDIF.

        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO WL_NOTA_PROC-MENSAGEM_PROC.

      WHEN C_REMOVER_CCT.

        DATA(_REMOVIDA) = ZCL_CCT_CONTROL_NF->REMOVER_NF_CCT( I_ZLEST0142 = WL_ZLEST0142 ).
        IF _REMOVIDA EQ ABAP_TRUE.
          WL_NOTA_PROC-SUCESSO_PROC = '1'.
        ENDIF.

        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO WL_NOTA_PROC-MENSAGEM_PROC.

      WHEN OTHERS.

        IF WL_NOTA_PROC-OPERACAO_PROC IS INITIAL.
          WL_NOTA_PROC-MENSAGEM_PROC = |Operação de Processamento(OPERACAO_PROC) não informada! |.
        ELSE.
          WL_NOTA_PROC-MENSAGEM_PROC = |Operação de Processamento: { WL_NOTA_PROC-OPERACAO_PROC } não prevista! |.
        ENDIF.

    ENDCASE.

    APPEND WL_NOTA_PROC TO  E_NOTAS_PROC.

  ENDLOOP.


ENDFUNCTION.
