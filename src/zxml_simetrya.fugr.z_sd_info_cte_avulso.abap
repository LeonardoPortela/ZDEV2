FUNCTION Z_SD_INFO_CTE_AVULSO.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(P_CTE_AVULSO) TYPE  J_1BDOCNUM
*"     REFERENCE(P_CHAMAR_TELA) TYPE  CHAR01 DEFAULT 'X'
*"     REFERENCE(P_GRAVAR_DADOS) TYPE  CHAR01 DEFAULT 'X'
*"     REFERENCE(P_APAGAR_DADOS) TYPE  CHAR01 OPTIONAL
*"     REFERENCE(P_REFAZER) TYPE  CHAR01 OPTIONAL
*"  EXPORTING
*"     REFERENCE(P_J_1BNFDOC) TYPE  J_1BNFDOC
*"     REFERENCE(P_IDENTIFICA) TYPE  ZCTE_IDENTIFICA
*"     REFERENCE(P_PARCEIROS) TYPE  ZCTE_PARCEIROS
*"     REFERENCE(P_OBS_CONT_DACTE) TYPE  ZDE_OBS_CONT_T
*"  TABLES
*"      IT_NOTAS_INFO STRUCTURE  ZCTE_INFO_NOTA OPTIONAL
*"      IT_TRANS STRUCTURE  ZCTE_TRANS OPTIONAL
*"      IT_CIOT STRUCTURE  ZCTE_CIOT OPTIONAL
*"      IT_CIOT_PARCEIROS STRUCTURE  ZCTE_CIOT_PARCE OPTIONAL
*"      IT_MOTORISTA STRUCTURE  ZCTE_MOTORISTA OPTIONAL
*"      IT_OBS_GERAL STRUCTURE  ZCTE_OBS_GERAIS OPTIONAL
*"      IT_SEGURO STRUCTURE  ZCTE_SEGURO OPTIONAL
*"  EXCEPTIONS
*"      N_INFO_CTE
*"      N_LOC_CTE
*"      N_ELETRONICO
*"      N_MODELO_57
*"      N_STATUS
*"      INF_DOCNUM
*"      INF_PROPVEICULO
*"      NAO_DOCNUM
*"      NAO_RTRC
*"      NAO_CONTA_CORRENTE
*"      MOTO_NAO_PF
*"      N_PLACA_CAD
*"      SEM_NOTAS
*"----------------------------------------------------------------------

  DATA: DESTINATARIO  TYPE J_1BNFNAD,
        IT_NF_PARTNER TYPE TABLE OF J_1BNFNAD WITH HEADER LINE INITIAL SIZE 0,
        IT_T001W      TYPE TABLE OF T001W     WITH HEADER LINE INITIAL SIZE 0,
        WA_DOC_TRANSP TYPE VTTK,
        WA_J_1BNFDOC  TYPE J_1BNFDOC,
        WA_J_1BNFLIN  TYPE J_1BNFLIN,
        VG_ZCTE_CIOT  TYPE ZCTE_CIOT,
        P_TKNUM       TYPE TKNUM.

  CLEAR: CTE_J_1BNFDOC,
         IT_NOTAS_INFO[],
         IT_TRANS[],
         IT_MOTORISTA[],
         IT_CIOT[],
         IT_SEGURO[],
         IT_OBS_GERAL[],
         IT_CTE_MOTO[],
         IT_CTE_TRANS[],
         IT_CTE_OBSG[],
         IT_CTE_INFO_NOTA[],
         IT_CTE_CIOT[],
         IT_ZCL_CIOT[],
         CTE_CIOT_PARCEIROS[],
         IT_CIOT_PARCEIROS[],
         IT_CTE_SEGURO[],
         P_PARCEIROS,
         P_IDENTIFICA,
         ZCTE_PARCEIROS,
         ZCTE_IDENTIFICA,
         ZCTE_MOTORISTA,
         ZCTE_OBS_GERAIS.

  IF P_CTE_AVULSO IS INITIAL.
    MESSAGE E024 RAISING N_INFO_CTE.
  ENDIF.

  SELECT SINGLE * INTO CTE_J_1BNFDOC
    FROM J_1BNFDOC
   WHERE DOCNUM EQ P_CTE_AVULSO.

  IF NOT SY-SUBRC IS INITIAL.
    MESSAGE E010 WITH P_CTE_AVULSO RAISING N_LOC_CTE.
  ENDIF.

  IF CTE_J_1BNFDOC-NFE IS INITIAL.
    MESSAGE E010 WITH P_CTE_AVULSO RAISING N_ELETRONICO.
  ENDIF.

  IF CTE_J_1BNFDOC-MODEL NE CTE_C_57.
    MESSAGE E025 WITH P_CTE_AVULSO RAISING N_MODELO_57.
  ENDIF.

  MOVE CTE_J_1BNFDOC TO WA_J_1BNFDOC.

  IF P_APAGAR_DADOS IS NOT INITIAL.

    SELECT SINGLE * INTO VG_ZCTE_CIOT
      FROM ZCTE_CIOT
     WHERE DOCNUM EQ CTE_J_1BNFDOC-DOCNUM.

    IF ( NOT SY-SUBRC IS INITIAL ) OR ( VG_ZCTE_CIOT-ST_CIOT EQ 0 ) OR ( VG_ZCTE_CIOT-ST_CIOT EQ 3 ) OR ( VG_ZCTE_CIOT-ST_CIOT EQ SPACE ).
      DELETE FROM ZCTE_INFO_NOTA  WHERE DOCNUM EQ CTE_J_1BNFDOC-DOCNUM.
      DELETE FROM ZCTE_PARCEIROS  WHERE DOCNUM EQ CTE_J_1BNFDOC-DOCNUM.
      DELETE FROM ZCTE_TRANS      WHERE DOCNUM EQ CTE_J_1BNFDOC-DOCNUM.
      DELETE FROM ZCTE_IDENTIFICA WHERE DOCNUM EQ CTE_J_1BNFDOC-DOCNUM.
      DELETE FROM ZCTE_MOTORISTA  WHERE DOCNUM EQ CTE_J_1BNFDOC-DOCNUM.
      DELETE FROM ZCTE_OBS_GERAIS WHERE DOCNUM EQ CTE_J_1BNFDOC-DOCNUM.
      DELETE FROM ZCTE_CIOT       WHERE DOCNUM EQ CTE_J_1BNFDOC-DOCNUM.
      DELETE FROM ZCTE_SEGURO     WHERE DOCNUM EQ CTE_J_1BNFDOC-DOCNUM.
      IF NOT VG_ZCTE_CIOT IS INITIAL.
        DELETE FROM ZCTE_CIOT       WHERE DOCNUM  EQ CTE_J_1BNFDOC-DOCNUM.
        DELETE FROM ZCTE_CIOT_PARCE WHERE CD_CIOT EQ VG_ZCTE_CIOT-CD_CIOT.
      ENDIF.
      COMMIT WORK.
    ENDIF.
  ENDIF.

  IF P_REFAZER IS INITIAL.
    CHECK P_APAGAR_DADOS IS INITIAL.
  ENDIF.

  CALL FUNCTION 'Z_REMETENTE_MERCADORIA_CTE'
    EXPORTING
      P_DOCNUM = WA_J_1BNFDOC-DOCNUM
    CHANGING
      P_BUKRS  = WA_J_1BNFDOC-BUKRS
      P_PARID  = WA_J_1BNFDOC-PARID
      P_PARTYP = WA_J_1BNFDOC-PARTYP
      P_TKNUM  = P_TKNUM.

  CALL FUNCTION 'Z_CIOT_EMPRESA_PARCEIRO'
    EXPORTING
      P_EMPRESA    = WA_J_1BNFDOC-BUKRS
      P_PARTYP     = WA_J_1BNFDOC-PARTYP
      P_PARID      = WA_J_1BNFDOC-PARID
      P_DT_POSICAO = WA_J_1BNFDOC-DOCDAT
      P_TKNUM      = P_TKNUM
    IMPORTING
      P_EMITE      = P_EMITE_CIOT.

  SELECT SINGLE * INTO CTE_FORM
    FROM J_1BAQT
   WHERE SPRAS EQ SY-LANGU
     AND FORM  EQ CTE_J_1BNFDOC-FORM.

  CALL FUNCTION 'Z_SD_INFO_CTE_PARCEIROS'
    EXPORTING
      P_CTE_AVULSO = CTE_J_1BNFDOC-DOCNUM
    IMPORTING
      P_PARCEIROS  = ZCTE_PARCEIROS
    CHANGING
      P_DOC_TRANSP = WA_DOC_TRANSP.

  CALL FUNCTION 'Z_SD_INFO_CTE_NOTAS'
    EXPORTING
      P_CTE_AVULSO     = CTE_J_1BNFDOC-DOCNUM
    TABLES
      IT_CTE_INFO_NOTA = IT_CTE_INFO_NOTA.

  CALL FUNCTION 'Z_SD_INFO_CTE_TRANS'
    EXPORTING
      P_CTE_AVULSO = CTE_J_1BNFDOC-DOCNUM
    TABLES
      IT_CTE_TRANS = IT_CTE_TRANS.

  IF P_EMITE_CIOT IS NOT INITIAL.
    CALL FUNCTION 'Z_SD_INFO_CTE_CIOT'
      EXPORTING
        P_CTE_AVULSO          = CTE_J_1BNFDOC-DOCNUM
      TABLES
        IT_CTE_CIOT           = IT_CTE_CIOT
        IT_CTE_CIOT_PARCEIROS = CTE_CIOT_PARCEIROS[]
      EXCEPTIONS
        NAO_CIOT              = 1
        OTHERS                = 2.
  ENDIF.

  CALL FUNCTION 'Z_SD_INFO_CTE_IDENT'
    EXPORTING
      P_CTE_AVULSO = CTE_J_1BNFDOC-DOCNUM
    IMPORTING
      P_IDENTIFICA = ZCTE_IDENTIFICA.

  CALL FUNCTION 'Z_SD_INFO_CTE_MOTO'
    EXPORTING
      P_CTE_AVULSO = CTE_J_1BNFDOC-DOCNUM
    TABLES
      IT_CTE_MOTO  = IT_CTE_MOTO.

  CALL FUNCTION 'Z_SD_INFO_CTE_OBS_GERAL'
    EXPORTING
      P_CTE_AVULSO = CTE_J_1BNFDOC-DOCNUM
    TABLES
      IT_CTE_OBSG  = IT_CTE_OBSG.

  CALL FUNCTION 'Z_SD_INFO_CTE_SEGURO'
    EXPORTING
      P_CTE_AVULSO  = CTE_J_1BNFDOC-DOCNUM
    TABLES
      IT_CTE_SEGURO = IT_CTE_SEGURO.

  SELECT SINGLE * INTO WA_J_1BNFLIN
    FROM J_1BNFLIN
   WHERE DOCNUM EQ CTE_J_1BNFDOC-DOCNUM.

  IF WA_J_1BNFLIN-REFTYP EQ 'ZW'.

    CALL FUNCTION 'Z_SD_INFO_CTE_AVULSO_ZW'
      EXPORTING
        P_CTE_AVULSO  = P_CTE_AVULSO
      IMPORTING
        P_IDENTIFICA  = ZCTE_IDENTIFICA
        P_PARCEIROS   = ZCTE_PARCEIROS
      TABLES
        IT_NOTAS_INFO = IT_CTE_INFO_NOTA
        IT_TRANS      = IT_CTE_TRANS
        IT_CIOT       = IT_CTE_CIOT
        IT_MOTORISTA  = IT_CTE_MOTO
        IT_OBS_GERAL  = IT_CTE_OBSG
        IT_SEGURO     = IT_CTE_SEGURO.

    IF ( P_GRAVAR_DADOS IS NOT INITIAL ) AND ( ZCTE_IDENTIFICA IS NOT INITIAL ).
      MODIFY ZCTE_IDENTIFICA FROM ZCTE_IDENTIFICA.
    ENDIF.

    IF ( P_GRAVAR_DADOS IS NOT INITIAL ) AND ( ZCTE_PARCEIROS IS NOT INITIAL ).
      MODIFY ZCTE_PARCEIROS FROM ZCTE_PARCEIROS.
    ENDIF.

    LOOP AT IT_CTE_INFO_NOTA INTO CTE_INFO_NOTA.
      MODIFY ZCTE_INFO_NOTA FROM CTE_INFO_NOTA.
    ENDLOOP.

    IF P_GRAVAR_DADOS IS NOT INITIAL.

      LOOP AT IT_CTE_TRANS INTO CTE_TRANS.
        MODIFY ZCTE_TRANS FROM CTE_TRANS.
      ENDLOOP.

      LOOP AT IT_CTE_OBSG INTO CTE_OBSG.
        MODIFY ZCTE_OBS_GERAIS FROM CTE_OBSG.
      ENDLOOP.

      LOOP AT IT_CTE_SEGURO INTO CTE_SEGURO.
        MODIFY ZCTE_SEGURO FROM CTE_SEGURO.
      ENDLOOP.

    ENDIF.

  ELSE.

    IF ( ZCTE_IDENTIFICA IS INITIAL ).

      CALL FUNCTION 'Z_SD_INFO_CTE_IDENT'
        EXPORTING
          P_CTE_AVULSO = CTE_J_1BNFDOC-DOCNUM
          P_CTE_GERA   = C_X
        IMPORTING
          P_IDENTIFICA = ZCTE_IDENTIFICA
        CHANGING
          P_DOC_TRANSP = WA_DOC_TRANSP.

      IF ( P_GRAVAR_DADOS IS NOT INITIAL ) AND ( ZCTE_IDENTIFICA IS NOT INITIAL ).
        MODIFY ZCTE_IDENTIFICA FROM ZCTE_IDENTIFICA.
      ENDIF.

    ENDIF.

    IF ( IT_CTE_INFO_NOTA[] IS INITIAL ).

      CALL FUNCTION 'Z_SD_INFO_CTE_NOTAS'
        EXPORTING
          P_CTE_AVULSO     = CTE_J_1BNFDOC-DOCNUM
          P_CTE_GERA       = C_X
        TABLES
          IT_CTE_INFO_NOTA = IT_CTE_INFO_NOTA
        EXCEPTIONS
          SEM_NOTAS        = 1
          OTHERS           = 2.

      IF ( SY-SUBRC EQ 1 ) AND
         ( NOT ZCTE_IDENTIFICA-TP_FORNECIMENTO IS INITIAL ) AND ( WA_DOC_TRANSP-SHTYP NE 'Z026' ) AND ( WA_DOC_TRANSP-SHTYP NE 'Z025' ).
        MESSAGE E027 RAISING SEM_NOTAS.
      ENDIF.

      IF P_GRAVAR_DADOS IS NOT INITIAL.
        LOOP AT IT_CTE_INFO_NOTA INTO CTE_INFO_NOTA.
          MODIFY ZCTE_INFO_NOTA FROM CTE_INFO_NOTA.
        ENDLOOP.
      ENDIF.

    ENDIF.

    IF ( ZCTE_PARCEIROS IS INITIAL ).

      CALL FUNCTION 'Z_SD_INFO_CTE_PARCEIROS'
        EXPORTING
          P_CTE_AVULSO = CTE_J_1BNFDOC-DOCNUM
          P_CTE_GERA   = C_X
        IMPORTING
          P_PARCEIROS  = ZCTE_PARCEIROS
        CHANGING
          P_DOC_TRANSP = WA_DOC_TRANSP.

      IF P_GRAVAR_DADOS IS NOT INITIAL.
        MODIFY ZCTE_PARCEIROS FROM ZCTE_PARCEIROS.
      ENDIF.

    ENDIF.

    IF ( IT_CTE_TRANS[] IS INITIAL ).

      CALL FUNCTION 'Z_SD_INFO_CTE_TRANS'
        EXPORTING
          P_CTE_AVULSO = CTE_J_1BNFDOC-DOCNUM
          P_CTE_GERA   = C_X
        TABLES
          IT_CTE_TRANS = IT_CTE_TRANS
        EXCEPTIONS
          N_PLACA_CAD  = 1
          OTHERS       = 2.

      CASE SY-SUBRC.
        WHEN 1.
          MESSAGE E026 WITH SY-MSGV1 RAISING N_PLACA_CAD.
        WHEN 2.
          MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDCASE.

      IF P_GRAVAR_DADOS IS NOT INITIAL.
        LOOP AT IT_CTE_TRANS INTO CTE_TRANS.
          MODIFY ZCTE_TRANS FROM CTE_TRANS.
        ENDLOOP.
      ENDIF.

    ENDIF.

    IF ( IT_CTE_OBSG[] IS INITIAL ).

      CALL FUNCTION 'Z_SD_INFO_CTE_OBS_GERAL'
        EXPORTING
          P_CTE_AVULSO = CTE_J_1BNFDOC-DOCNUM
          P_CTE_GERA   = C_X
        TABLES
          IT_CTE_OBSG  = IT_CTE_OBSG.

      IF P_GRAVAR_DADOS IS NOT INITIAL.
        LOOP AT IT_CTE_OBSG INTO CTE_OBSG.
          MODIFY ZCTE_OBS_GERAIS FROM CTE_OBSG.
        ENDLOOP.
      ENDIF.

    ENDIF.

    IF ( IT_CTE_MOTO[] IS INITIAL ).

      CALL FUNCTION 'Z_SD_INFO_CTE_MOTO'
        EXPORTING
          P_CTE_AVULSO = CTE_J_1BNFDOC-DOCNUM
          P_CTE_GERA   = C_X
        TABLES
          IT_CTE_MOTO  = IT_CTE_MOTO
        EXCEPTIONS
          MOTO_NAO_PF  = 1
          OTHERS       = 2.

      CASE SY-SUBRC.
        WHEN 1.
          MESSAGE E014(ZCIOT) WITH SY-MSGV1 RAISING MOTO_NAO_PF.
        WHEN 2.
          MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDCASE.

      IF P_GRAVAR_DADOS IS NOT INITIAL.
        LOOP AT IT_CTE_MOTO INTO CTE_MOTO.
          MODIFY ZCTE_MOTORISTA FROM CTE_MOTO.
        ENDLOOP.
      ENDIF.

    ENDIF.

    IF ( IT_CTE_SEGURO[] IS INITIAL ).

      CALL FUNCTION 'Z_SD_INFO_CTE_SEGURO'
        EXPORTING
          P_CTE_AVULSO  = CTE_J_1BNFDOC-DOCNUM
          P_CTE_GERA    = C_X
        TABLES
          IT_CTE_SEGURO = IT_CTE_SEGURO.

      IF P_GRAVAR_DADOS IS NOT INITIAL.
        LOOP AT IT_CTE_SEGURO INTO CTE_SEGURO.
          MODIFY ZCTE_SEGURO FROM CTE_SEGURO.
        ENDLOOP.
      ENDIF.

    ENDIF.

    IF ( IT_CTE_CIOT[] IS INITIAL ) AND ( P_EMITE_CIOT IS NOT INITIAL ).

      CALL FUNCTION 'Z_SD_INFO_CTE_CIOT'
        EXPORTING
          P_CTE_AVULSO          = CTE_J_1BNFDOC-DOCNUM
          P_CTE_GERA            = C_X
        TABLES
          IT_CTE_CIOT           = IT_CTE_CIOT
          IT_ZCL_CIOT           = IT_ZCL_CIOT
          IT_CTE_CIOT_PARCEIROS = IT_CIOT_PARCEIROS
        CHANGING
          P_ZCTE_IDENTIFICA     = ZCTE_IDENTIFICA
        EXCEPTIONS
          INF_DOCNUM            = 1
          INF_PROPVEICULO       = 2
          NAO_DOCNUM            = 3
          NAO_RTRC              = 4
          NAO_CONTA_CORRENTE    = 5
          N_PLACA_CAD           = 6
          OTHERS                = 7.

      CASE SY-SUBRC.
        WHEN 1.
          MESSAGE E002(ZCIOT) RAISING INF_DOCNUM.
        WHEN 2.
          MESSAGE E006(ZCIOT) RAISING INF_PROPVEICULO.
        WHEN 3.
          MESSAGE E003(ZCIOT) WITH SY-MSGV1 RAISING NAO_DOCNUM.
        WHEN 4.
          MESSAGE E005(ZCIOT) WITH SY-MSGV1 RAISING NAO_RTRC.
        WHEN 5.
          MESSAGE E007(ZCIOT) WITH SY-MSGV1 SY-MSGV2 RAISING NAO_CONTA_CORRENTE.
        WHEN 6.
          MESSAGE E022(ZCIOT) WITH SY-MSGV1 RAISING N_PLACA_CAD.
        WHEN 7.
          MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDCASE.

      IF P_GRAVAR_DADOS IS NOT INITIAL.

        LOOP AT IT_ZCL_CIOT INTO CTE_OBJ_CIOT.
          CALL METHOD CTE_OBJ_CIOT->GRAVAR.
        ENDLOOP.

        CLEAR: IT_CTE_CIOT[], IT_CIOT_PARCEIROS[].
        SELECT * INTO TABLE IT_CTE_CIOT
          FROM ZCTE_CIOT
         WHERE DOCNUM EQ CTE_J_1BNFDOC-DOCNUM.

        SELECT * INTO TABLE IT_CIOT_PARCEIROS
          FROM ZCTE_CIOT_PARCE
           FOR ALL ENTRIES IN IT_CTE_CIOT
         WHERE CD_CIOT EQ IT_CTE_CIOT-CD_CIOT.

      ENDIF.

    ENDIF.
  ENDIF.

  IF P_CHAMAR_TELA IS NOT INITIAL.

    CLEAR: CTE_DYNNR_000, CTE_BLOQUEADO.

    CALL FUNCTION 'Z_NFE_CTE_AUTORIZADO'
      EXPORTING
        P_DOCNUM       = CTE_J_1BNFDOC-DOCNUM
        P_USO          = 'N'
      CHANGING
        P_CABEC        = CTE_J_1BNFDOC
        P_ACTIVE       = CTE_ACTIVE
      EXCEPTIONS
        CANCELADO      = 1
        NAO_CANCELADO  = 2
        PENDENTE       = 3
        NAO_CONCLUIDO  = 4
        NAO_EXISTE     = 5
        AUTORIZADO_USO = 6
        DENEGADO       = 7
        OTHERS         = 8.

    IF SY-SUBRC <> 0.
      CTE_BLOQUEADO = C_X.
    ENDIF.

    IF ( ZCTE_IDENTIFICA-TP_FORNECIMENTO NE SPACE ) AND ( WA_DOC_TRANSP-SHTYP NE 'Z026' ) AND ( WA_DOC_TRANSP-SHTYP NE 'Z021' ) AND ( WA_DOC_TRANSP-SHTYP NE 'Z025' ).
      CTE_BLOQUEADO = C_X.
    ELSE.
      LOOP AT IT_CTE_CIOT INTO CTE_CIOT.
        IF CTE_CIOT-ST_CIOT EQ '1' OR
           CTE_CIOT-ST_CIOT EQ '2' OR
           CTE_CIOT-ST_CIOT EQ '4' OR
           CTE_CIOT-ST_CIOT EQ '5'.
          CTE_BLOQUEADO = C_X.
        ENDIF.
      ENDLOOP.
    ENDIF.

    CALL SCREEN 0100 STARTING AT 07 05.
  ENDIF.

  MOVE: IT_CTE_INFO_NOTA[]  TO IT_NOTAS_INFO[],
        IT_CTE_TRANS[]      TO IT_TRANS[],
        IT_CTE_CIOT[]       TO IT_CIOT[],
        IT_CTE_MOTO[]       TO IT_MOTORISTA[],
        ZCTE_PARCEIROS      TO P_PARCEIROS,
        ZCTE_IDENTIFICA     TO P_IDENTIFICA,
        CTE_J_1BNFDOC       TO P_J_1BNFDOC,
        IT_CTE_OBSG[]       TO IT_OBS_GERAL[],
        IT_CTE_SEGURO[]     TO IT_SEGURO[],
        CTE_CIOT_PARCEIROS[] TO IT_CIOT_PARCEIROS[].

ENDFUNCTION.
