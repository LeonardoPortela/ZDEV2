class ZCL_CARGA_RECEBIMENTO_ALG_BKP definition
  public
  inheriting from ZCL_CARGA_RECEBIMENTO
  final
  create public .

public section.

  methods ZIF_CARGA~ADD_NOTA_FISCAL
    redefinition .
  methods ZIF_CARGA~ADD_ORDEM_VENDA
    redefinition .
  methods ZIF_CARGA~GET_INFO_ALV_APRESENTACAO
    redefinition .
  methods ZIF_CARGA~GET_VALIDAR_NOTA_FISCAL
    redefinition .
  methods ZIF_CARGA~GRAVAR_REGISTRO
    redefinition .
  methods ZIF_CARGA~SET_AJUSTAR_RAT_ORDEM_VENDA
    redefinition .
  methods ZIF_CARGA~SET_CARGA
    redefinition .
  methods ZIF_CARGA~SET_EXCLUIR_ORDEM_VENDA
    redefinition .
  methods ZIF_CARGA~SET_ORDEM_CARREGAMENTO
    redefinition .
  methods ZIF_CARGA~SET_ORDEM_VENDA
    redefinition .
  methods ZIF_CARGA~SET_VOLUME_ORDEM_VENDA
    redefinition .
  methods ZIF_CARGA~VALIDAR_REGISTRO_ORDEM_VENDA
    redefinition .
  methods ZIF_CARGA~VERIF_ORDEM_CARREGAMENTO
    redefinition .
protected section.
private section.
ENDCLASS.



CLASS ZCL_CARGA_RECEBIMENTO_ALG_BKP IMPLEMENTATION.


  METHOD ZIF_CARGA~ADD_NOTA_FISCAL.

    R_CARGA = SUPER->ZIF_CARGA~ADD_NOTA_FISCAL( EXPORTING I_NOTA  = I_NOTA IMPORTING E_NOTA = E_NOTA ).

    ME->ZIF_CARGA~CARGA-NM_PESO_LIQUIDO = E_NOTA-NR_QUANTIDADE.
    ME->ZIF_CARGA~CARGA-QT_FARDOS       = E_NOTA-NR_FARDO.

    ME->ZIF_CARGA~SET_AJUSTAR_RAT_ORDEM_VENDA( ).

  ENDMETHOD.


  METHOD ZIF_CARGA~ADD_ORDEM_VENDA.

    R_INSTANCIA = ME.

    IF ME->ZIF_CARGA~ORDEM_VENDA[] IS INITIAL.
      DATA(LC_CK_LIMPO) = ABAP_TRUE.
    ELSE.
      LC_CK_LIMPO = ABAP_FALSE.
    ENDIF.

    READ TABLE ME->ZIF_CARGA~ORDEM_VENDA WITH KEY NR_ORDEM_VENDA = I_ORDEM_VENDA-NR_ORDEM_VENDA ASSIGNING FIELD-SYMBOL(<FS_ORDEM>).
    CHECK SY-SUBRC IS NOT INITIAL.

    TRY .
        ZCL_ORDEM_VENDA=>ZIF_ORDEM_VENDA~GET_INSTANCE(
                 )->SET_ORDEM_VENDA( I_VBELN = I_ORDEM_VENDA-NR_ORDEM_VENDA
                 )->GET_TIPO_FRETE( IMPORTING  E_TIPO_FRETE = DATA(E_TIPO_FRETE)
                 )->GET_PARCEIROS( IMPORTING E_VBPA = DATA(E_VBPA)
                 ).

        "Validações """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        IF LC_CK_LIMPO EQ ABAP_FALSE.

          "Ponto de Coleta
          TRY.
              ME->ZIF_CARGA~GET_PARTINER_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = I_ORDEM_VENDA-NR_ORDEM_VENDA I_FUNCAO_PARTINER = 'PC' IMPORTING E_PARTINER = DATA(R_PARTINER_PC) ).
            CATCH ZCX_CARGA .
          ENDTRY.

          "Local de Descarga
          TRY.
              ME->ZIF_CARGA~GET_PARTINER_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = I_ORDEM_VENDA-NR_ORDEM_VENDA I_FUNCAO_PARTINER = 'LR' IMPORTING E_PARTINER = DATA(R_PARTINER_LR) ).
            CATCH ZCX_CARGA .
          ENDTRY.

          "Local de Entrega
          TRY.
              ME->ZIF_CARGA~GET_PARTINER_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = I_ORDEM_VENDA-NR_ORDEM_VENDA I_FUNCAO_PARTINER = 'Z1' IMPORTING E_PARTINER = DATA(R_PARTINER_Z1) ).
            CATCH ZCX_CARGA .
          ENDTRY.

          "Caso Seja Frete CIF buscar SP
          TRY.
              ME->ZIF_CARGA~GET_PARTINER_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = I_ORDEM_VENDA-NR_ORDEM_VENDA I_FUNCAO_PARTINER = 'SP' IMPORTING E_PARTINER = DATA(R_PARTINER_SP) ).
            CATCH ZCX_CARGA .
          ENDTRY.

          "Não pode ser vinculado Ordens de Venda com Tipo de Frete Diferente
          IF E_TIPO_FRETE NE ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_DIF_ORDEM_TIPO_FRETE-MSGID
                                  MSGNO = ZCX_CARGA=>ZCX_DIF_ORDEM_TIPO_FRETE-MSGNO
                                  ATTR1 = CONV #( ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA ) )
                MSGID  = ZCX_CARGA=>ZCX_DIF_ORDEM_TIPO_FRETE-MSGID
                MSGNO  = ZCX_CARGA=>ZCX_DIF_ORDEM_TIPO_FRETE-MSGNO
                MSGTY  = 'E'
                MSGV1  = CONV #( ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA ).
          ENDIF.

          "Parceiro Ponto de Coleta Diferente
          IF R_PARTINER_PC-LIFNR NE ME->ZIF_CARGA~CARGA-ID_LOCAL_COLETA.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_DIF_ORDEM_PONTO_COLETA-MSGID
                                  MSGNO = ZCX_CARGA=>ZCX_DIF_ORDEM_PONTO_COLETA-MSGNO
                                  ATTR1 = CONV #( ME->ZIF_CARGA~CARGA-ID_LOCAL_COLETA ) )
                MSGID  = ZCX_CARGA=>ZCX_DIF_ORDEM_PONTO_COLETA-MSGID
                MSGNO  = ZCX_CARGA=>ZCX_DIF_ORDEM_PONTO_COLETA-MSGNO
                MSGTY  = 'E'
                MSGV1  = CONV #( ME->ZIF_CARGA~CARGA-ID_LOCAL_COLETA ).
          ENDIF.

          "Parceiro Local de Entrega Diferente
          IF R_PARTINER_LR-KUNNR NE ME->ZIF_CARGA~CARGA-ID_LOCAL_DESCARGA.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_DIF_ORDEM_LOCAL_ENTREGA-MSGID
                                  MSGNO = ZCX_CARGA=>ZCX_DIF_ORDEM_LOCAL_ENTREGA-MSGNO
                                  ATTR1 = CONV #( ME->ZIF_CARGA~CARGA-ID_LOCAL_DESCARGA ) )
                MSGID  = ZCX_CARGA=>ZCX_DIF_ORDEM_LOCAL_ENTREGA-MSGID
                MSGNO  = ZCX_CARGA=>ZCX_DIF_ORDEM_LOCAL_ENTREGA-MSGNO
                MSGTY  = 'E'
                MSGV1  = CONV #( ME->ZIF_CARGA~CARGA-ID_LOCAL_DESCARGA ).
          ENDIF.

          "Parceiro Local de Entrega Diferente
          IF R_PARTINER_Z1-LIFNR NE ME->ZIF_CARGA~CARGA-ID_LOCAL_DESTINO.
            RAISE EXCEPTION TYPE ZCX_CARGA
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_DIF_ORDEM_DESTINO-MSGID
                                  MSGNO = ZCX_CARGA=>ZCX_DIF_ORDEM_DESTINO-MSGNO
                                  ATTR1 = CONV #( ME->ZIF_CARGA~CARGA-ID_LOCAL_DESTINO ) )
                MSGID  = ZCX_CARGA=>ZCX_DIF_ORDEM_DESTINO-MSGID
                MSGNO  = ZCX_CARGA=>ZCX_DIF_ORDEM_DESTINO-MSGNO
                MSGTY  = 'E'
                MSGV1  = CONV #( ME->ZIF_CARGA~CARGA-ID_LOCAL_DESTINO ).
          ENDIF.

        ENDIF.
        """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

        IF ME->ZIF_CARGA~ORDEM_VENDA[] IS INITIAL.
          TRY .
              ME->ZIF_CARGA~SET_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = I_ORDEM_VENDA-NR_ORDEM_VENDA IMPORTING E_CARGA = E_CARGA ).
            CATCH ZCX_PARCEIROS INTO DATA(EX_PARCEIROS).    "

              RAISE EXCEPTION TYPE ZCX_CARGA
                EXPORTING
                  TEXTID = VALUE #( MSGID = EX_PARCEIROS->MSGID
                                    MSGNO = EX_PARCEIROS->MSGNO
                                    ATTR1 = CONV #( EX_PARCEIROS->MSGV1 )
                                    ATTR2 = CONV #( EX_PARCEIROS->MSGV2 )
                                    ATTR3 = CONV #( EX_PARCEIROS->MSGV3 )
                                    ATTR4 = CONV #( EX_PARCEIROS->MSGV4 ) )
                  MSGID  = EX_PARCEIROS->MSGID
                  MSGNO  = EX_PARCEIROS->MSGNO
                  MSGTY  = 'E'
                  MSGV1  = EX_PARCEIROS->MSGV1
                  MSGV2  = EX_PARCEIROS->MSGV2
                  MSGV3  = EX_PARCEIROS->MSGV3
                  MSGV4  = EX_PARCEIROS->MSGV4.
          ENDTRY.
        ELSE.

          DATA: LC_ZSDT0001OV  TYPE ZSDT0001OV.
          LC_ZSDT0001OV-ID_CARGA       = ME->ZIF_CARGA~CARGA-ID_CARGA.
          LC_ZSDT0001OV-NR_ORDEM_VENDA = I_ORDEM_VENDA-NR_ORDEM_VENDA.
          APPEND LC_ZSDT0001OV TO ME->ZIF_CARGA~ORDEM_VENDA.

        ENDIF.

      CATCH ZCX_ORDEM_VENDA INTO DATA(EX_ORDEM_VENDA).

        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = EX_ORDEM_VENDA->MSGID
                              MSGNO = EX_ORDEM_VENDA->MSGNO
                              ATTR1 = CONV #( EX_ORDEM_VENDA->MSGV1 )
                              ATTR2 = CONV #( EX_ORDEM_VENDA->MSGV2 )
                              ATTR3 = CONV #( EX_ORDEM_VENDA->MSGV3 )
                              ATTR4 = CONV #( EX_ORDEM_VENDA->MSGV4 ) )
            MSGID  = EX_ORDEM_VENDA->MSGID
            MSGNO  = EX_ORDEM_VENDA->MSGNO
            MSGTY  = 'E'
            MSGV1  = EX_ORDEM_VENDA->MSGV1
            MSGV2  = EX_ORDEM_VENDA->MSGV2
            MSGV3  = EX_ORDEM_VENDA->MSGV3
            MSGV4  = EX_ORDEM_VENDA->MSGV4.

    ENDTRY.

    "I_ORDEM_VENDA  TYPE ZDE_ZSDT0001OV_ALV

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_ALV_APRESENTACAO.

    CONSTANTS: CS_LINE_COLOR_A TYPE C LENGTH 4 VALUE 'C200',
               CS_LINE_COLOR_L TYPE C LENGTH 4 VALUE 'C500',
               CS_LINE_COLOR_D TYPE C LENGTH 4 VALUE 'C601',
               CS_LINE_COLOR_R TYPE C LENGTH 4 VALUE 'C600',
               CS_LINE_COLOR_P TYPE C LENGTH 4 VALUE 'C200'.

    CONSTANTS: DS_STATUS_A TYPE STRING VALUE 'Aguardando Sol. de Aprovação',
               DS_STATUS_L TYPE STRING VALUE 'Liberado',
               DS_STATUS_D TYPE STRING VALUE 'Deletado',
               DS_STATUS_R TYPE STRING VALUE 'Reprovado',
               DS_STATUS_P TYPE STRING VALUE 'Aguardando Aprovação'.

    DATA: LC_ORDEM_VENDA_ALGO TYPE ZSDT0001OV_ALGODAO_ALV,
          LN_EDICAO           TYPE LVC_S_SCOL.

    LN_EDICAO = VALUE #( FNAME = 'QT_FARDOS' COLOR = VALUE #( COL = 5 INT = 0 INV = 0 ) ).

    R_CARGA = SUPER->ZIF_CARGA~GET_INFO_ALV_APRESENTACAO( IMPORTING E_APRESENTACAO = E_APRESENTACAO ).

    IF E_APRESENTACAO-ORDEM_CARREGA-ID_AGENT_FRETE IS INITIAL.
      E_APRESENTACAO-ORDEM_CARREGA-ID_AGENT_FRETE = E_APRESENTACAO-CARGA-ID_AGENT_FRETE.
      E_APRESENTACAO-ORDEM_CARREGA-DS_AGENT_FRETE = E_APRESENTACAO-CARGA-DS_AGENT_FRETE.
    ENDIF.

    "Informações do ALV de Ordem de Venda do Algodão

    CLEAR: E_APRESENTACAO-ORDEM_VENDA_ALGO[].

    CHECK E_APRESENTACAO-ORDEM_VENDA[] IS NOT INITIAL.

    SELECT * INTO TABLE @DATA(IT_ZSDT0066)
      FROM ZSDT0066
       FOR ALL ENTRIES IN @E_APRESENTACAO-ORDEM_VENDA
     WHERE VBELN EQ @E_APRESENTACAO-ORDEM_VENDA-NR_ORDEM_VENDA.

    SELECT * INTO TABLE @DATA(IT_VBAP)
      FROM VBAP
       FOR ALL ENTRIES IN @E_APRESENTACAO-ORDEM_VENDA
     WHERE VBELN EQ @E_APRESENTACAO-ORDEM_VENDA-NR_ORDEM_VENDA.

    SELECT * INTO TABLE @DATA(IT_ZSDT0001OD)
      FROM ZSDT0001OD
       FOR ALL ENTRIES IN @E_APRESENTACAO-ORDEM_VENDA
     WHERE ID_ORDEM EQ @E_APRESENTACAO-ORDEM_VENDA-ID_ORDEM.

    SELECT VP~VBELN, LF~NAME1
      INTO TABLE @DATA(IT_COLE)
      FROM VBPA AS VP
      INNER JOIN LFA1 AS LF ON LF~LIFNR EQ VP~LIFNR
       FOR ALL ENTRIES IN @E_APRESENTACAO-ORDEM_VENDA
     WHERE VBELN EQ @E_APRESENTACAO-ORDEM_VENDA-NR_ORDEM_VENDA
       AND PARVW EQ 'PC'.

    SORT IT_ZSDT0066 BY VBELN.
    SORT IT_VBAP BY VBELN.
    SORT IT_ZSDT0001OD BY ID_ORDEM.
    SORT IT_COLE BY VBELN.

    LOOP AT E_APRESENTACAO-ORDEM_VENDA INTO DATA(WA_ORDEM_VENDA).
      CLEAR: LC_ORDEM_VENDA_ALGO.

      ZCL_ORDEM_VENDA=>ZIF_ORDEM_VENDA~GET_INSTANCE(
        )->SET_ORDEM_VENDA( I_VBELN = WA_ORDEM_VENDA-NR_ORDEM_VENDA
        )->GET_TIPO_FRETE( IMPORTING E_TIPO_FRETE = DATA(E_TIPO_FRETE)
        ).

      LC_ORDEM_VENDA_ALGO-QT_FARDOS         = WA_ORDEM_VENDA-QT_FARDOS.
      LC_ORDEM_VENDA_ALGO-NM_PESO_BRUTO     = WA_ORDEM_VENDA-NM_PESO_BRUTO.
      LC_ORDEM_VENDA_ALGO-NM_PESO_TARA      = WA_ORDEM_VENDA-NM_PESO_TARA.
      LC_ORDEM_VENDA_ALGO-NM_PESO_SUBTOTAL  = WA_ORDEM_VENDA-NM_PESO_SUBTOTAL.
      LC_ORDEM_VENDA_ALGO-NM_PESO_EMBALAGEM = WA_ORDEM_VENDA-NM_PESO_EMBALAGEM.
      LC_ORDEM_VENDA_ALGO-NM_PESO_LIQUIDO   = WA_ORDEM_VENDA-NM_PESO_LIQUIDO.

      READ TABLE IT_ZSDT0066 INTO DATA(WA_ZSDT0066)
      WITH KEY VBELN = WA_ORDEM_VENDA-NR_ORDEM_VENDA BINARY SEARCH.

      IF SY-SUBRC IS INITIAL.
        LC_ORDEM_VENDA_ALGO-DS_INSTRUCAO = WA_ZSDT0066-INSTRUCAO.
        LC_ORDEM_VENDA_ALGO-STATUS       = WA_ZSDT0066-STATUS.
      ENDIF.

      LC_ORDEM_VENDA_ALGO-NR_ORDEM_VENDA = WA_ORDEM_VENDA-NR_ORDEM_VENDA.
      LC_ORDEM_VENDA_ALGO-AUART          = WA_ORDEM_VENDA-TP_TIPO_ORDEM.

      READ TABLE IT_VBAP INTO DATA(WA_VBAP) WITH KEY VBELN = WA_ORDEM_VENDA-NR_ORDEM_VENDA BINARY SEARCH.

      IF SY-SUBRC IS INITIAL.
        LC_ORDEM_VENDA_ALGO-LGORT        = WA_VBAP-LGORT.
        LC_ORDEM_VENDA_ALGO-MATNR        = WA_VBAP-MATNR.
        LC_ORDEM_VENDA_ALGO-ARKTX        = WA_VBAP-ARKTX.
        LC_ORDEM_VENDA_ALGO-TOTAL_FARDOS = WA_VBAP-VOLUM.
        LC_ORDEM_VENDA_ALGO-VOLEH        = WA_VBAP-VOLEH.
      ENDIF.

      READ TABLE IT_COLE INTO DATA(WA_COLE) WITH KEY VBELN = WA_ORDEM_VENDA-NR_ORDEM_VENDA BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        LC_ORDEM_VENDA_ALGO-DS_PONTO_COLETA = WA_COLE-NAME1.
      ENDIF.

      CASE LC_ORDEM_VENDA_ALGO-STATUS.
        WHEN 'A'.
          LC_ORDEM_VENDA_ALGO-LINE_COLOR = CS_LINE_COLOR_A.
          LC_ORDEM_VENDA_ALGO-DS_STATUS  = DS_STATUS_A.
        WHEN 'L'.
          LC_ORDEM_VENDA_ALGO-LINE_COLOR = CS_LINE_COLOR_L.
          LC_ORDEM_VENDA_ALGO-DS_STATUS  = DS_STATUS_L.
        WHEN 'D'.
          LC_ORDEM_VENDA_ALGO-LINE_COLOR = CS_LINE_COLOR_D.
          LC_ORDEM_VENDA_ALGO-DS_STATUS  = DS_STATUS_D.
        WHEN 'R'.
          LC_ORDEM_VENDA_ALGO-LINE_COLOR = CS_LINE_COLOR_R.
          LC_ORDEM_VENDA_ALGO-DS_STATUS  = DS_STATUS_R.
        WHEN 'P'.
          LC_ORDEM_VENDA_ALGO-LINE_COLOR = CS_LINE_COLOR_P.
          LC_ORDEM_VENDA_ALGO-DS_STATUS  = DS_STATUS_P.
      ENDCASE.

      "Ordem de Carregamento """"""""""""""""""""""""""""""""""""""""""""""""""
      IF WA_ORDEM_VENDA-ID_ORDEM IS NOT INITIAL.
        READ TABLE IT_ZSDT0001OD INTO DATA(WA_ZSDT0001OD)
        WITH KEY ID_ORDEM = WA_ORDEM_VENDA-ID_ORDEM BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          LC_ORDEM_VENDA_ALGO-NR_ORDEM = WA_ZSDT0001OD-NR_ORDEM.
        ENDIF.
      ENDIF.

      IF ( LC_ORDEM_VENDA_ALGO-NR_ORDEM IS INITIAL ) AND
         ( ME->ZIF_CARGA~CARGA-TP_STATUS EQ ZIF_CARGA=>ST_STATUS_ABERTO OR ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_TRUE ).

        IF E_TIPO_FRETE EQ ZIF_CARGA=>ST_TP_FRETE_CIF.
          LC_ORDEM_VENDA_ALGO-NR_ORDEM = ICON_WF_LINK.
        ELSE.
          LC_ORDEM_VENDA_ALGO-NR_ORDEM = ICON_WF_UNLINK.
        ENDIF.

      ELSEIF LC_ORDEM_VENDA_ALGO-NR_ORDEM IS INITIAL.

        CLEAR: LC_ORDEM_VENDA_ALGO-NR_ORDEM.

      ENDIF.

      IF ME->ZIF_CARGA~CARGA-TP_STATUS EQ ZIF_CARGA=>ST_STATUS_ABERTO AND ME->ZIF_CARGA~AT_MANUTENCAO EQ ABAP_FALSE.
        APPEND LN_EDICAO TO LC_ORDEM_VENDA_ALGO-COLOR_CELL.
        LC_ORDEM_VENDA_ALGO-ADD_BLOCO = ICON_BW_INFO_CUBE_INA.
      ELSE.
        LC_ORDEM_VENDA_ALGO-ADD_BLOCO = ICON_LOCKED.
      ENDIF.

      APPEND LC_ORDEM_VENDA_ALGO TO E_APRESENTACAO-ORDEM_VENDA_ALGO.
    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_VALIDAR_NOTA_FISCAL.

    R_INSTANCE = SUPER->ZIF_CARGA~GET_VALIDAR_NOTA_FISCAL( CHANGING I_NOTA_FISCAL = I_NOTA_FISCAL ).

    IF ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.

      IF I_NOTA_FISCAL-NR_FARDO IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_QT_FARDO-MSGID MSGNO = ZCX_CARGA=>ZCX_OBG_INF_QT_FARDO-MSGNO )
            MSGTY  = 'E'
            MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_QT_FARDO-MSGNO
            MSGID  = ZCX_CARGA=>ZCX_OBG_INF_QT_FARDO-MSGID.
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GRAVAR_REGISTRO.

    ME->ZIF_CARGA~CARGA-TP_PRODUTO_CARGA = ZIF_CARGA=>ST_TP_PRODUTO_CARGA_ALGODAO.

    R_CARGA = SUPER->ZIF_CARGA~GRAVAR_REGISTRO( IMPORTING E_GRAVOU = E_GRAVOU ).

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_AJUSTAR_RAT_ORDEM_VENDA.

    DATA: LC_PESO_LIQUIDO_FARDO      TYPE P LENGTH 16 DECIMALS 10,
          LC_PESO_BRUTO_FARDO        TYPE P LENGTH 16 DECIMALS 10,
          LC_PESO_EMBALAGEM_FARDO    TYPE P LENGTH 16 DECIMALS 10,
          LC_TOTAL_LIQUIDO_VINCULADO TYPE P LENGTH 16 DECIMALS 0,
          LC_TOTAL_BRUTO_VINCULADO   TYPE P LENGTH 16 DECIMALS 0,
          LC_PESO_DIFERENCA          TYPE P LENGTH 16 DECIMALS 0,
          LC_PESO_ADICIONAR          TYPE P LENGTH 16 DECIMALS 0,
          LC_AUX_PESO                TYPE P LENGTH 16 DECIMALS 0.

    "R_CARGA = SUPER->ZIF_CARGA~SET_AJUSTAR_RAT_ORDEM_VENDA( ).
    R_CARGA = ME.

    DESCRIBE TABLE ME->ZIF_CARGA~ORDEM_VENDA LINES DATA(QTD_ORDENS).

    READ TABLE ME->ZIF_CARGA~DOCUMENTO_FISCAL INDEX 1 INTO DATA(WA_NOTA_FISCAL).

    CHECK SY-SUBRC IS INITIAL.

    "Verifica se foi Informado a Quantidade de Fardos
    CHECK WA_NOTA_FISCAL-NR_FARDO IS NOT INITIAL.

    ME->ZIF_CARGA~CARGA-QT_FARDOS = WA_NOTA_FISCAL-NR_FARDO.
    DATA(PS_EMBALAGEM) = ME->ZIF_CARGA~CARGA-NM_PESO_SUBTOTAL - ME->ZIF_CARGA~CARGA-NM_PESO_LIQUIDO.
    IF PS_EMBALAGEM GT 0.
      ME->ZIF_CARGA~CARGA-NM_PESO_EMBALAGEM = PS_EMBALAGEM.
    ELSE.
      ME->ZIF_CARGA~CARGA-NM_PESO_EMBALAGEM = 0.
    ENDIF.

    "    IF QTD_ORDENS GT 1.

    " Ordem de Venda """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    LC_PESO_EMBALAGEM_FARDO    = ME->ZIF_CARGA~CARGA-NM_PESO_EMBALAGEM / ME->ZIF_CARGA~CARGA-QT_FARDOS.
    LC_PESO_LIQUIDO_FARDO      = ME->ZIF_CARGA~CARGA-NM_PESO_LIQUIDO / ME->ZIF_CARGA~CARGA-QT_FARDOS.
    LC_TOTAL_LIQUIDO_VINCULADO = 0.

    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA ASSIGNING FIELD-SYMBOL(<LC_ORDEM>).
      <LC_ORDEM>-NM_PESO_LIQUIDO   = <LC_ORDEM>-QT_FARDOS * LC_PESO_LIQUIDO_FARDO.
      <LC_ORDEM>-NM_PESO_EMBALAGEM = <LC_ORDEM>-QT_FARDOS * LC_PESO_EMBALAGEM_FARDO.
      <LC_ORDEM>-NM_PESO_SUBTOTAL  = <LC_ORDEM>-NM_PESO_LIQUIDO + <LC_ORDEM>-NM_PESO_EMBALAGEM.
      <LC_ORDEM>-NM_PESO_TARA      = ME->ZIF_CARGA~CARGA-NM_PESO_TARA.
      <LC_ORDEM>-NM_PESO_BRUTO     = <LC_ORDEM>-NM_PESO_SUBTOTAL + <LC_ORDEM>-NM_PESO_TARA.
      ADD <LC_ORDEM>-NM_PESO_LIQUIDO TO LC_TOTAL_LIQUIDO_VINCULADO.
    ENDLOOP.

    "Ajustar Distribuição de Peso
    LC_PESO_DIFERENCA = ME->ZIF_CARGA~CARGA-NM_PESO_LIQUIDO - LC_TOTAL_LIQUIDO_VINCULADO.

    IF LC_PESO_DIFERENCA NE 0.
      LOOP AT ME->ZIF_CARGA~ORDEM_VENDA ASSIGNING <LC_ORDEM>.
        LC_PESO_ADICIONAR = ( ( <LC_ORDEM>-QT_FARDOS / ME->ZIF_CARGA~CARGA-QT_FARDOS ) * LC_PESO_DIFERENCA ).
        <LC_ORDEM>-NM_PESO_LIQUIDO   = <LC_ORDEM>-NM_PESO_LIQUIDO  + LC_PESO_ADICIONAR.
        <LC_ORDEM>-NM_PESO_SUBTOTAL  = <LC_ORDEM>-NM_PESO_LIQUIDO  + <LC_ORDEM>-NM_PESO_EMBALAGEM.
        <LC_ORDEM>-NM_PESO_BRUTO     = <LC_ORDEM>-NM_PESO_SUBTOTAL + <LC_ORDEM>-NM_PESO_TARA.
      ENDLOOP.
    ENDIF.

    " Blocos da Ordem de Venda """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM).

      IF WA_ORDEM-QT_FARDOS GT 0.
        LC_PESO_EMBALAGEM_FARDO = WA_ORDEM-NM_PESO_EMBALAGEM / WA_ORDEM-QT_FARDOS.
        LC_PESO_LIQUIDO_FARDO   = WA_ORDEM-NM_PESO_LIQUIDO / WA_ORDEM-QT_FARDOS.
        LC_PESO_BRUTO_FARDO     = WA_ORDEM-NM_PESO_SUBTOTAL / WA_ORDEM-QT_FARDOS.
      ELSE.
        LC_PESO_EMBALAGEM_FARDO = 0.
        LC_PESO_LIQUIDO_FARDO   = 0.
        LC_PESO_BRUTO_FARDO     = 0.
      ENDIF.

      LC_TOTAL_LIQUIDO_VINCULADO = 0.
      LC_TOTAL_BRUTO_VINCULADO = 0.
      LOOP AT ME->ZIF_CARGA~BLOCOS ASSIGNING FIELD-SYMBOL(<FS_BLOCOS>) WHERE NR_ORDEM_VENDA EQ WA_ORDEM-NR_ORDEM_VENDA.
        <FS_BLOCOS>-MEINS = 'KG'.
        LC_AUX_PESO = <FS_BLOCOS>-QT_FARDOS * LC_PESO_LIQUIDO_FARDO.
        <FS_BLOCOS>-PS_FARDOS_LIQUI = LC_AUX_PESO.

        LC_AUX_PESO = <FS_BLOCOS>-QT_FARDOS * LC_PESO_BRUTO_FARDO.
        <FS_BLOCOS>-PS_FARDOS_BRUTO = LC_AUX_PESO.

        ADD <FS_BLOCOS>-PS_FARDOS_LIQUI TO LC_TOTAL_LIQUIDO_VINCULADO.
        ADD <FS_BLOCOS>-PS_FARDOS_BRUTO TO LC_TOTAL_BRUTO_VINCULADO.
      ENDLOOP.

      "Ajusta Peso Líquido
      LC_PESO_DIFERENCA = WA_ORDEM-NM_PESO_LIQUIDO - LC_TOTAL_LIQUIDO_VINCULADO.

      IF LC_PESO_DIFERENCA NE 0.
        LOOP AT ME->ZIF_CARGA~BLOCOS ASSIGNING <FS_BLOCOS> WHERE NR_ORDEM_VENDA EQ WA_ORDEM-NR_ORDEM_VENDA.
          LC_PESO_ADICIONAR = ( ( <FS_BLOCOS>-QT_FARDOS / WA_ORDEM-QT_FARDOS ) * LC_PESO_DIFERENCA ).
          <FS_BLOCOS>-PS_FARDOS_LIQUI = <FS_BLOCOS>-PS_FARDOS_LIQUI + LC_PESO_ADICIONAR.
        ENDLOOP.
      ENDIF.

      "Ajusta Peso Bruto
      LC_PESO_DIFERENCA = WA_ORDEM-NM_PESO_SUBTOTAL - LC_TOTAL_BRUTO_VINCULADO.

      IF LC_PESO_DIFERENCA NE 0.
        LOOP AT ME->ZIF_CARGA~BLOCOS ASSIGNING <FS_BLOCOS> WHERE NR_ORDEM_VENDA EQ WA_ORDEM-NR_ORDEM_VENDA.
          LC_PESO_ADICIONAR = ( ( <FS_BLOCOS>-QT_FARDOS / WA_ORDEM-QT_FARDOS ) * LC_PESO_DIFERENCA ).
          <FS_BLOCOS>-PS_FARDOS_BRUTO = <FS_BLOCOS>-PS_FARDOS_BRUTO + LC_PESO_ADICIONAR.
        ENDLOOP.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_CARGA.

**TRY.
*CALL METHOD SUPER->ZIF_CARGA~SET_CARGA
*  EXPORTING
*    I_CARGA             =
**  IMPORTING
**    E_CARGA_RECEBIMENTO =
*  RECEIVING
*    R_CARGA             =
*    .
** CATCH ZCX_CARGA .
**ENDTRY.

    R_CARGA = ME.

    CASE ME->ZIF_CARGA~CARGA-TP_STATUS.
      WHEN ZIF_CARGA=>ST_STATUS_FECHADO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_FECHADA-MSGNO.
      WHEN ZIF_CARGA=>ST_STATUS_CONFERIDO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CONFERIDA-MSGNO.
      WHEN ZIF_CARGA=>ST_STATUS_CANCELADA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_CANCELADA-MSGNO.
    ENDCASE.

    IF ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_ABERTO.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_NAO_ABERTA-MSGID MSGNO = ZCX_CARGA=>ZCX_CARGA_NAO_ABERTA-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_CARGA_NAO_ABERTA-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_CARGA_NAO_ABERTA-MSGNO.
    ENDIF.

    DATA(WA_CARGA) = I_CARGA.
    DATA(CP_ME_CARGA) = ME->ZIF_CARGA~CARGA.
    DATA(CP_ME_CLASSIFICACAO) = ME->ZIF_CARGA~CLASSIFICACAO.

    WA_CARGA-ID_CARGA         = ME->ZIF_CARGA~CARGA-ID_CARGA.
    WA_CARGA-ID_CLASSIFICACAO = ME->ZIF_CARGA~CLASSIFICACAO-ID_CLASSIFICACAO.
    MOVE-CORRESPONDING WA_CARGA TO ME->ZIF_CARGA~CARGA.
    MOVE-CORRESPONDING WA_CARGA TO ME->ZIF_CARGA~CLASSIFICACAO.

    IF ME->ZIF_CARGA~CARGA NE CP_ME_CARGA.
      ME->ZIF_CARGA~CK_ALTEROU = ABAP_TRUE.
    ENDIF.

    IF ME->ZIF_CARGA~CLASSIFICACAO NE CP_ME_CLASSIFICACAO.
      ME->ZIF_CARGA~CK_ALTEROU = ABAP_TRUE.
    ENDIF.

    E_CARGA_RECEBIMENTO = I_CARGA.

    READ TABLE ME->ZIF_CARGA~DOCUMENTO_FISCAL INDEX 1 INTO DATA(WA_NOTA_FISCAL).
    ME->ZIF_CARGA~CARGA-NM_PESO_DESCONTOS = 0.
    ME->ZIF_CARGA~CARGA-NM_PESO_LIQUIDO   = WA_NOTA_FISCAL-NR_QUANTIDADE.

    IF ME->ZIF_CARGA~CARGA-NM_PESO_SUBTOTAL IS NOT INITIAL AND ME->ZIF_CARGA~CARGA-NM_PESO_LIQUIDO IS NOT INITIAL.
      ME->ZIF_CARGA~CARGA-NM_PESO_EMBALAGEM = ME->ZIF_CARGA~CARGA-NM_PESO_SUBTOTAL - ME->ZIF_CARGA~CARGA-NM_PESO_LIQUIDO.
      IF ME->ZIF_CARGA~CARGA-NM_PESO_EMBALAGEM LE 0.
        ME->ZIF_CARGA~CARGA-NM_PESO_EMBALAGEM = 0.
      ENDIF.
    ENDIF.

    E_CARGA_RECEBIMENTO-NM_PESO_LIQUIDO   = ME->ZIF_CARGA~CARGA-NM_PESO_LIQUIDO.
    E_CARGA_RECEBIMENTO-NM_PESO_SUBTOTAL  = ME->ZIF_CARGA~CARGA-NM_PESO_SUBTOTAL.
    E_CARGA_RECEBIMENTO-NM_PESO_EMBALAGEM = ME->ZIF_CARGA~CARGA-NM_PESO_EMBALAGEM.

    "Local de Coleta
    IF ( ME->ZIF_CARGA~CARGA-ID_LOCAL_COLETA NE CP_ME_CARGA-ID_LOCAL_COLETA ) OR
       ( ME->ZIF_CARGA~CARGA-ID_LOCAL_COLETA IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_LOCAL_COLETA IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_COLETA.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_LOCAL_COLETA
        FROM LFA1 WHERE LIFNR EQ ME->ZIF_CARGA~CARGA-ID_LOCAL_COLETA.
    ELSEIF ME->ZIF_CARGA~CARGA-ID_LOCAL_COLETA IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_COLETA.
    ENDIF.

    "Local de Descarga
    IF ( ME->ZIF_CARGA~CARGA-ID_LOCAL_DESCARGA NE CP_ME_CARGA-ID_LOCAL_DESCARGA ) OR
       ( ME->ZIF_CARGA~CARGA-ID_LOCAL_DESCARGA IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_LOCAL_DESCARGA IS INITIAL ) .
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_DESCARGA.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_LOCAL_DESCARGA
        FROM KNA1 WHERE KUNNR EQ ME->ZIF_CARGA~CARGA-ID_LOCAL_DESCARGA.
    ELSEIF ME->ZIF_CARGA~CARGA-ID_LOCAL_DESCARGA IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_DESCARGA.
    ENDIF.

    "Local de Destino
    IF ( ME->ZIF_CARGA~CARGA-ID_LOCAL_DESTINO NE CP_ME_CARGA-ID_LOCAL_DESTINO ) OR
       ( ME->ZIF_CARGA~CARGA-ID_LOCAL_DESTINO IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_LOCAL_DESTINO IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_DESTINO.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_LOCAL_DESTINO
        FROM LFA1 WHERE LIFNR EQ ME->ZIF_CARGA~CARGA-ID_LOCAL_DESTINO.
    ELSEIF ME->ZIF_CARGA~CARGA-ID_LOCAL_DESTINO IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_DESTINO.
    ENDIF.

    "Local de Entrega
    IF ( ME->ZIF_CARGA~CARGA-ID_LOCAL_ENTREGA NE CP_ME_CARGA-ID_LOCAL_ENTREGA ) OR
       ( ME->ZIF_CARGA~CARGA-ID_LOCAL_ENTREGA IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_LOCAL_ENTREGA IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_ENTREGA.
      SELECT SINGLE DS_LOCAL_ENTREGA
        INTO E_CARGA_RECEBIMENTO-DS_LOCAL_ENTREGA
        FROM ZSDT0001LE WHERE ID_LOCAL_ENTREGA EQ ME->ZIF_CARGA~CARGA-ID_LOCAL_ENTREGA.
    ELSEIF ME->ZIF_CARGA~CARGA-ID_LOCAL_ENTREGA IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_LOCAL_ENTREGA.
    ENDIF.

    "Motorista
    IF ( ME->ZIF_CARGA~CARGA-ID_MOTORISTA NE CP_ME_CARGA-ID_MOTORISTA ) OR
       ( ME->ZIF_CARGA~CARGA-ID_MOTORISTA IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_MOTORISTA IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_MOTORISTA.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_MOTORISTA
        FROM LFA1 WHERE LIFNR EQ ME->ZIF_CARGA~CARGA-ID_MOTORISTA.
    ELSEIF ME->ZIF_CARGA~CARGA-ID_MOTORISTA IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_MOTORISTA.
    ENDIF.

    "Proprietário do Veículo
    IF ( ME->ZIF_CARGA~CARGA-ID_PROPRIETARIO NE CP_ME_CARGA-ID_PROPRIETARIO ) OR
       ( ME->ZIF_CARGA~CARGA-ID_PROPRIETARIO IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_PROPRIETARIO IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_PROPRIETARIO.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_PROPRIETARIO
        FROM LFA1 WHERE LIFNR EQ ME->ZIF_CARGA~CARGA-ID_PROPRIETARIO.
    ELSEIF ME->ZIF_CARGA~CARGA-ID_PROPRIETARIO IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_PROPRIETARIO.
    ENDIF.

    "Agente de Frete
    IF ( ME->ZIF_CARGA~CARGA-ID_AGENT_FRETE NE CP_ME_CARGA-ID_AGENT_FRETE ) OR
       ( ME->ZIF_CARGA~CARGA-ID_AGENT_FRETE IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_AGENT_FRETE IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_AGENT_FRETE.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_AGENT_FRETE
        FROM LFA1 WHERE LIFNR EQ ME->ZIF_CARGA~CARGA-ID_AGENT_FRETE.
    ELSEIF ME->ZIF_CARGA~CARGA-ID_LOCAL_COLETA IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_AGENT_FRETE.
    ENDIF.

    "Informações alteradas na classificação
    E_CARGA_RECEBIMENTO-NR_RES_RR1_RR2 = E_CARGA_RECEBIMENTO-NR_RESULTADO_01 + E_CARGA_RECEBIMENTO-NR_RESULTADO_02.

    IF ME->ZIF_CARGA~CLASSIFICACAO-IN_SRR_ORIGEM_PARTIC EQ ABAP_FALSE.
      CLEAR: E_CARGA_RECEBIMENTO-DS_OUTRO_PARTIC,
             E_CARGA_RECEBIMENTO-ID_OUTRO_PARTIC.
    ENDIF.

    IF ( ME->ZIF_CARGA~CLASSIFICACAO-ID_OUTRO_PARTIC NE CP_ME_CLASSIFICACAO-ID_OUTRO_PARTIC ) OR
       ( ME->ZIF_CARGA~CLASSIFICACAO-ID_OUTRO_PARTIC IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_OUTRO_PARTIC IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_OUTRO_PARTIC.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_OUTRO_PARTIC
        FROM LFA1 WHERE LIFNR EQ ME->ZIF_CARGA~CLASSIFICACAO-ID_OUTRO_PARTIC.
    ELSEIF ME->ZIF_CARGA~CLASSIFICACAO-ID_OUTRO_PARTIC IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_OUTRO_PARTIC.
    ENDIF.

    "Classificadora
    IF ( ME->ZIF_CARGA~CLASSIFICACAO-ID_CLASSIFICADORA NE CP_ME_CLASSIFICACAO-ID_CLASSIFICADORA ) OR
       ( ME->ZIF_CARGA~CLASSIFICACAO-ID_CLASSIFICADORA IS NOT INITIAL AND E_CARGA_RECEBIMENTO-DS_CLASSIFICADORA IS INITIAL ).
      CLEAR: E_CARGA_RECEBIMENTO-DS_CLASSIFICADORA.
      SELECT SINGLE NAME1
        INTO E_CARGA_RECEBIMENTO-DS_CLASSIFICADORA
        FROM LFA1 WHERE LIFNR EQ ME->ZIF_CARGA~CLASSIFICACAO-ID_CLASSIFICADORA.
    ELSEIF ME->ZIF_CARGA~CLASSIFICACAO-ID_CLASSIFICADORA IS INITIAL.
      CLEAR: E_CARGA_RECEBIMENTO-DS_CLASSIFICADORA.
    ENDIF.

    IF ME->ZIF_CARGA~CARGA-NM_PESO_SUBTOTAL NE CP_ME_CARGA-NM_PESO_SUBTOTAL OR
       ME->ZIF_CARGA~CARGA-NM_PESO_LIQUIDO  NE CP_ME_CARGA-NM_PESO_LIQUIDO.
      ME->ZIF_CARGA~SET_AJUSTAR_RAT_DESC_GERAL( ).
    ENDIF.

    ME->ZIF_CARGA~SET_AJUSTAR_RAT_ORDEM_VENDA( ).

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_EXCLUIR_ORDEM_VENDA.

    R_CARGA = SUPER->ZIF_CARGA~SET_EXCLUIR_ORDEM_VENDA( EXPORTING I_VBELN = I_VBELN ).

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ORDEM_CARREGAMENTO.

    R_CARGA = ME.

    E_ORDEM_CARRGAMENTO = ZCL_ORDEM_CARREGAMENTO=>BUSCA_ORDEM_CARREGAMENTO_NR(
    I_NR_SAFRA  = I_NR_SAFRA
    I_ID_BUKRS  = I_ID_BUKRS
    I_ID_BRANCH = I_ID_BRANCH
    I_NR_ORDEM  = I_NR_ORDEM ).

    "Verificar se já foi informado a ordem de carregamento para outra Ordem de Venda
    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM_VENDA)
      WHERE NR_ORDEM_VENDA NE I_VBELN AND ID_ORDEM EQ E_ORDEM_CARRGAMENTO-ID_ORDEM.

      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OC_VINCULADA_OV-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OC_VINCULADA_OV-MSGNO
                            ATTR1 = CONV #( I_NR_ORDEM )
                            ATTR2 = CONV #( WA_ORDEM_VENDA-NR_ORDEM_VENDA ) )
          MSGID  = ZCX_CARGA=>ZCX_OC_VINCULADA_OV-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_OC_VINCULADA_OV-MSGNO
          MSGTY  = 'E'
          MSGV1  = CONV #( I_NR_ORDEM )
          MSGV2  = CONV #( WA_ORDEM_VENDA-NR_ORDEM_VENDA ).

    ENDLOOP.
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    R_CARGA =
    SUPER->ZIF_CARGA~SET_ORDEM_CARREGAMENTO(
       EXPORTING
         I_NR_SAFRA          = I_NR_SAFRA
         I_ID_BUKRS          = I_ID_BUKRS
         I_ID_BRANCH         = I_ID_BRANCH
         I_NR_ORDEM          = I_NR_ORDEM
         I_VBELN             = I_VBELN
       IMPORTING
         E_ORDEM_CARRGAMENTO = E_ORDEM_CARRGAMENTO
       CHANGING
         I_CARGA_ALV         = I_CARGA_ALV ).

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ORDEM_VENDA.

    CALL METHOD SUPER->ZIF_CARGA~SET_ORDEM_VENDA
      EXPORTING
        I_ORDEM_VENDA        = I_ORDEM_VENDA
      IMPORTING
        E_CARGA              = E_CARGA
      CHANGING
        C_ZDE_ZSDT0001OV_ALV = C_ZDE_ZSDT0001OV_ALV
      RECEIVING
        R_CARGA              = R_CARGA.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_VOLUME_ORDEM_VENDA.

    R_CARGA = SUPER->ZIF_CARGA~SET_VOLUME_ORDEM_VENDA( EXPORTING I_VBELN = I_VBELN I_VOLUME = I_VOLUME ).

    SELECT SINGLE VOLUM INTO @DATA(QT_ORDEM)
      FROM VBAP
     WHERE VBELN EQ @I_VBELN.

    SELECT SUM( OV~QT_FARDOS ) INTO @DATA(QT_CARGAS)
      FROM ZSDT0001OV AS OV
     INNER JOIN ZSDT0001CG AS CG ON CG~ID_CARGA EQ OV~ID_CARGA
     WHERE OV~NR_ORDEM_VENDA EQ @I_VBELN
       AND OV~ID_CARGA       NE @ME->ZIF_CARGA~CARGA-ID_CARGA
       AND OV~ID_CARGA       NE @SPACE
       AND CG~TP_STATUS      EQ @ZIF_CARGA=>ST_STATUS_CONFERIDO
       AND CG~TP_CARGA       EQ @ZIF_CARGA=>ST_TP_CARGA_ENTRADA_FOB.

    DATA(LC_SALDO) = QT_ORDEM - QT_CARGAS.
    IF LC_SALDO LT I_VOLUME.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OV_SALDO_VOLUME-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OV_SALDO_VOLUME-MSGNO
                            ATTR1 = CONV #( I_VBELN )
                            ATTR2 = CONV #( I_VOLUME ) )
          MSGID  = ZCX_CARGA=>ZCX_OV_SALDO_VOLUME-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_OV_SALDO_VOLUME-MSGNO
          MSGTY  = 'E'
          MSGV1  = CONV #( I_VBELN )
          MSGV2  = CONV #( I_VOLUME ).
    ENDIF.

    READ TABLE ME->ZIF_CARGA~ORDEM_VENDA WITH KEY NR_ORDEM_VENDA = I_VBELN ASSIGNING FIELD-SYMBOL(<FS_ORDEM>).
    IF SY-SUBRC IS INITIAL.
      <FS_ORDEM>-QT_FARDOS = I_VOLUME.
      ME->ZIF_CARGA~SET_AJUSTAR_RAT_ORDEM_VENDA( ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~VALIDAR_REGISTRO_ORDEM_VENDA.

    DATA: E_TIPO_FRETE  TYPE ZDE_TP_FRETE.

    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM_VENDA).

      DATA(ORDEM_VENDA) =
      ZCL_ORDEM_VENDA=>ZIF_ORDEM_VENDA~GET_INSTANCE(
               )->SET_ORDEM_VENDA( I_VBELN = WA_ORDEM_VENDA-NR_ORDEM_VENDA
               )->CK_FILIAL_EMISSORA_ROMANEIO( I_BRANCH = ME->ZIF_CARGA~CARGA-ID_BRANCH
               )->CK_SAFRA( I_SAFRA = CONV #( ME->ZIF_CARGA~CARGA-NR_SAFRA )
               )->CK_ORDEM_VENDA_DCO(  I_BRANCH = ME->ZIF_CARGA~CARGA-ID_BRANCH I_MATNR = ME->ZIF_CARGA~CARGA-ID_PRODUTO
               )->GET_TIPO_FRETE( IMPORTING  E_TIPO_FRETE = E_TIPO_FRETE
               ).

      "Somente Permitido Ordem de Venda CIF, CPT ou CFR
      TRY .
          ORDEM_VENDA->CK_TIPO_FRETE( I_TIPO_FRETE = ZIF_CARGA=>ST_TP_FRETE_CIF ).
        CATCH ZCX_ORDEM_VENDA.
          TRY .
              ORDEM_VENDA->CK_TIPO_FRETE( I_TIPO_FRETE = ZIF_CARGA=>ST_TP_FRETE_CPT ).
            CATCH ZCX_ORDEM_VENDA.
              ORDEM_VENDA->CK_TIPO_FRETE( I_TIPO_FRETE = ZIF_CARGA=>ST_TP_FRETE_CFR ).
          ENDTRY.
      ENDTRY.

      TRY .
          CASE E_TIPO_FRETE.
            WHEN ZIF_CARGA=>ST_TP_FRETE_CIF.

              IF WA_ORDEM_VENDA-ID_ORDEM IS INITIAL.
                RAISE EXCEPTION TYPE ZCX_CARGA
                  EXPORTING
                    TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_VENDA_CIF_OD-MSGID
                                      MSGNO = ZCX_CARGA=>ZCX_ORDEM_VENDA_CIF_OD-MSGNO
                                      ATTR1 = CONV #( WA_ORDEM_VENDA-NR_ORDEM_VENDA ) )
                    MSGTY  = 'E'
                    MSGNO  = ZCX_CARGA=>ZCX_ORDEM_VENDA_CIF_OD-MSGNO
                    MSGID  = ZCX_CARGA=>ZCX_ORDEM_VENDA_CIF_OD-MSGID
                    MSGV1  = CONV #( WA_ORDEM_VENDA-NR_ORDEM_VENDA ).
              ENDIF.

              IF ME->ZIF_CARGA~CARGA-ID_AGENT_FRETE IS NOT INITIAL AND ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
                DATA(OB_FORNECEDORES) = ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
                  )->SET_PARCEIRO( I_PARCEIRO = ME->ZIF_CARGA~CARGA-ID_AGENT_FRETE
                  )->CK_ATIVO(
                  )->CK_ATIVO_EMPRESA( I_EMPRESA = ME->ZIF_CARGA~CARGA-ID_BUKRS
                  )->CK_PARCEIRO_LOCAL_NEGOCIO(
                  ).
              ENDIF.

            WHEN ZIF_CARGA=>ST_TP_FRETE_CPT.

              "Não Valida Agente de Frete
              IF ME->ZIF_CARGA~CARGA-ID_AGENT_FRETE IS NOT INITIAL AND ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
                OB_FORNECEDORES = ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
                  )->SET_PARCEIRO( I_PARCEIRO = ME->ZIF_CARGA~CARGA-ID_AGENT_FRETE
                  )->CK_ATIVO(
                  )->CK_ATIVO_EMPRESA( I_EMPRESA = ME->ZIF_CARGA~CARGA-ID_BUKRS
                  )->CK_PARCEIRO_TERCEIRO(
                  )->CK_SERVICO_FRETE(
                  )->CK_SERVICO_FRETE_RODO(
                  ).
              ENDIF.

            WHEN ZIF_CARGA=>ST_TP_FRETE_CFR.

              "Não Valida Agente de Frete
              IF ME->ZIF_CARGA~CARGA-ID_AGENT_FRETE IS NOT INITIAL AND ME->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CANCELADA.
                OB_FORNECEDORES = ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
                  )->SET_PARCEIRO( I_PARCEIRO = ME->ZIF_CARGA~CARGA-ID_AGENT_FRETE
                  )->CK_ATIVO(
                  )->CK_ATIVO_EMPRESA( I_EMPRESA = ME->ZIF_CARGA~CARGA-ID_BUKRS
                  )->CK_SERVICO_FRETE(
                  )->CK_SERVICO_FRETE_RODO(
                  ).
              ENDIF.

          ENDCASE.

        CATCH ZCX_PARCEIROS INTO DATA(EX_PARCEIROS).    " .
          MESSAGE ID EX_PARCEIROS->IF_T100_MESSAGE~T100KEY-MSGID
             TYPE 'E'
           NUMBER EX_PARCEIROS->IF_T100_MESSAGE~T100KEY-MSGNO
             WITH EX_PARCEIROS->MSGV1
                  EX_PARCEIROS->MSGV2
                  EX_PARCEIROS->MSGV3
                  EX_PARCEIROS->MSGV4
             INTO DATA(LC_TEXTO).

          CONCATENATE 'Agente de Frete: ' LC_TEXTO INTO LC_TEXTO.
          ME->ZIF_CARGA~GERA_ERRO_GERAL( I_TEXTO = LC_TEXTO ).
      ENDTRY.

      "Verifica Ordem de Venda e Ordem de Carregamento
      ZCL_ATRIBUI_ROM_DOCTRANS=>GET_CK_OV_OC(
        EXPORTING
          I_NR_ORDEM_VENDA = WA_ORDEM_VENDA-NR_ORDEM_VENDA    " Documento de vendas
          I_ID_ORDEM       = WA_ORDEM_VENDA-ID_ORDEM    " Ordem de Carregamento
      ).


      "Ponto de Coleta
      TRY.
          ME->ZIF_CARGA~GET_PARTINER_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = WA_ORDEM_VENDA-NR_ORDEM_VENDA I_FUNCAO_PARTINER = 'PC' IMPORTING E_PARTINER = DATA(R_PARTINER_PC) ).
        CATCH ZCX_CARGA .
      ENDTRY.

      "Local de Descarga
      TRY.
          ME->ZIF_CARGA~GET_PARTINER_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = WA_ORDEM_VENDA-NR_ORDEM_VENDA I_FUNCAO_PARTINER = 'LR' IMPORTING E_PARTINER = DATA(R_PARTINER_LR) ).
        CATCH ZCX_CARGA .
      ENDTRY.

      "Local de Entrega
      TRY.
          ME->ZIF_CARGA~GET_PARTINER_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = WA_ORDEM_VENDA-NR_ORDEM_VENDA I_FUNCAO_PARTINER = 'Z1' IMPORTING E_PARTINER = DATA(R_PARTINER_Z1) ).
        CATCH ZCX_CARGA .
      ENDTRY.

      "Caso Seja Frete CIF buscar SP
      TRY.
          ME->ZIF_CARGA~GET_PARTINER_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = WA_ORDEM_VENDA-NR_ORDEM_VENDA I_FUNCAO_PARTINER = 'SP' IMPORTING E_PARTINER = DATA(R_PARTINER_SP) ).
        CATCH ZCX_CARGA .
      ENDTRY.

      "Não pode ser vinculado Ordens de Venda com Tipo de Frete Diferente
      IF E_TIPO_FRETE NE ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_DIF_ORDEM_TIPO_FRETE-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_DIF_ORDEM_TIPO_FRETE-MSGNO
                              ATTR1 = CONV #( ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA ) )
            MSGID  = ZCX_CARGA=>ZCX_DIF_ORDEM_TIPO_FRETE-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_DIF_ORDEM_TIPO_FRETE-MSGNO
            MSGTY  = 'E'
            MSGV1  = CONV #( ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA ).
      ENDIF.

      "Parceiro Ponto de Coleta Diferente
      IF R_PARTINER_PC-LIFNR NE ME->ZIF_CARGA~CARGA-ID_LOCAL_COLETA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_DIF_ORDEM_PONTO_COLETA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_DIF_ORDEM_PONTO_COLETA-MSGNO
                              ATTR1 = CONV #( ME->ZIF_CARGA~CARGA-ID_LOCAL_COLETA ) )
            MSGID  = ZCX_CARGA=>ZCX_DIF_ORDEM_PONTO_COLETA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_DIF_ORDEM_PONTO_COLETA-MSGNO
            MSGTY  = 'E'
            MSGV1  = CONV #( ME->ZIF_CARGA~CARGA-ID_LOCAL_COLETA ).
      ENDIF.

      "Parceiro Local de Entrega Diferente
      IF R_PARTINER_LR-KUNNR NE ME->ZIF_CARGA~CARGA-ID_LOCAL_DESCARGA.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_DIF_ORDEM_LOCAL_ENTREGA-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_DIF_ORDEM_LOCAL_ENTREGA-MSGNO
                              ATTR1 = CONV #( ME->ZIF_CARGA~CARGA-ID_LOCAL_DESCARGA ) )
            MSGID  = ZCX_CARGA=>ZCX_DIF_ORDEM_LOCAL_ENTREGA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_DIF_ORDEM_LOCAL_ENTREGA-MSGNO
            MSGTY  = 'E'
            MSGV1  = CONV #( ME->ZIF_CARGA~CARGA-ID_LOCAL_DESCARGA ).
      ENDIF.

      "Parceiro Local de Entrega Diferente
      IF R_PARTINER_Z1-LIFNR NE ME->ZIF_CARGA~CARGA-ID_LOCAL_DESTINO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_DIF_ORDEM_DESTINO-MSGID
                              MSGNO = ZCX_CARGA=>ZCX_DIF_ORDEM_DESTINO-MSGNO
                              ATTR1 = CONV #( ME->ZIF_CARGA~CARGA-ID_LOCAL_DESTINO ) )
            MSGID  = ZCX_CARGA=>ZCX_DIF_ORDEM_DESTINO-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_DIF_ORDEM_DESTINO-MSGNO
            MSGTY  = 'E'
            MSGV1  = CONV #( ME->ZIF_CARGA~CARGA-ID_LOCAL_DESTINO ).
      ENDIF.

    ENDLOOP.
    CLEAR: ORDEM_VENDA, OB_FORNECEDORES.

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_ORDEM_CARREGAMENTO.

    R_CARGA = SUPER->ZIF_CARGA~VERIF_ORDEM_CARREGAMENTO(  EXPORTING  I_ORDEM = I_ORDEM I_CK_VERIFICAR_CARGA = ABAP_TRUE ).

  ENDMETHOD.
ENDCLASS.
