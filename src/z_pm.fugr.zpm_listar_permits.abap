FUNCTION ZPM_LISTAR_PERMITS.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(I_USER) TYPE  SY-UNAME DEFAULT SY-UNAME
*"     REFERENCE(I_AUFNR) TYPE  AUFK-AUFNR OPTIONAL
*"  EXPORTING
*"     REFERENCE(E_LINES) TYPE  NUMC2
*"  TABLES
*"      T_ORDENS STRUCTURE  ZPMR0003 OPTIONAL
*"----------------------------------------------------------------------

* Declaração dos tipos de dados globais
  TYPES: BEGIN OF TY_ZPMR0002.
          INCLUDE  TYPE ZPMR0002.
  TYPES:   IWERK   TYPE AUFK-WERKS,

           COUNTER TYPE N LENGTH 6,
           END OF TY_ZPMR0002.

** Tabelas
  DATA: GT_IHGNS    TYPE TABLE OF IHGNS,
        GT_ORDENS   TYPE TABLE OF ZPMR0003,
        GT_ZPMR0002 TYPE TABLE OF TY_ZPMR0002 WITH HEADER LINE.

  DATA  ORDER_TYPES TYPE RSIS_T_RANGE.

** Work áreas
  DATA: GW_ORDENS     TYPE ZPMR0003,
        GW_ORDENS_AUX TYPE ZPMR0003.

** Variáveis
  DATA: LV_SEQ_HIST TYPE N LENGTH 6,
        LV_SEQ_NOVO TYPE N LENGTH 6,
        LV_NIVEL    TYPE I,
        LV_OBJNR    TYPE ZPMR0003-OBJNR,
        LV_AUFNR    TYPE ZPMR0003-AUFNR.

  FIELD-SYMBOLS: <FS_ORDENS> TYPE ZPMR0003,
                 <FS_IHGNS>  TYPE IHGNS,
                 <FS_0002>   TYPE TY_ZPMR0002.

** Busca permissões do usuário
  SELECT *
    FROM ZPMR0002
    INTO TABLE GT_ZPMR0002
    WHERE APROVADOR = I_USER.

  CHECK GT_ZPMR0002[] IS NOT INITIAL.

  LOOP AT GT_ZPMR0002 ASSIGNING <FS_0002>.
    <FS_0002>-IWERK = <FS_0002>-CENTRO_DESP(4).

    SELECT *
      FROM ZTPARAM
      INTO TABLE @DATA(_PARAMETERS)
     WHERE PARAM = 'TP_ORDEM'
       AND CONST = @<FS_0002>-IWERK.

    LOOP AT _PARAMETERS INTO DATA(_PARAMETER).
      APPEND VALUE #( SIGN = 'I' OPTION = 'EQ' LOW = _PARAMETER-ZVAL ) TO ORDER_TYPES.
    ENDLOOP.

    MOVE <FS_0002>-NIVEL TO <FS_0002>-COUNTER.
  ENDLOOP.

  SORT ORDER_TYPES BY LOW.
  DELETE ADJACENT DUPLICATES FROM ORDER_TYPES COMPARING LOW.

  IF I_AUFNR IS INITIAL.
    SELECT DISTINCT A~MANDT WERKS A~ERDAT H~EQUNR EQKTX A~AUFNR A~OBJNR KTEXT USER4 ERFZEIT COUNTER
      INTO TABLE GT_ORDENS
      FROM AUFK AS A
      INNER JOIN IHSG  AS I ON I~OBJNR EQ A~OBJNR
      INNER JOIN AFIH  AS H ON H~AUFNR EQ A~AUFNR
      LEFT  JOIN EQKT  AS E ON E~EQUNR EQ H~EQUNR
      FOR ALL ENTRIES IN GT_ZPMR0002
      WHERE ( A~PHAS0 EQ 'X' AND
              A~PHAS1 EQ ' ' )
       AND  AUART IN ORDER_TYPES
       AND  WERKS EQ GT_ZPMR0002-IWERK".
       AND  LVORM EQ ''.

  ELSE.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = I_AUFNR
      IMPORTING
        OUTPUT = LV_AUFNR.

    SELECT DISTINCT A~MANDT WERKS A~ERDAT H~EQUNR EQKTX A~AUFNR A~OBJNR KTEXT USER4 ERFZEIT COUNTER
      INTO TABLE GT_ORDENS
      FROM AUFK AS A
      INNER JOIN IHSG  AS I ON I~OBJNR EQ A~OBJNR
      INNER JOIN AFIH  AS H ON H~AUFNR EQ A~AUFNR
      LEFT  JOIN EQKT  AS E ON E~EQUNR EQ H~EQUNR
      WHERE ( A~PHAS0 EQ 'X' AND
              A~PHAS1 EQ ' ' )
*       AND  AUART   EQ 'ZPM7'
*       AND  WERKS   EQ GT_ZPMR0002-IWERK".
       AND  A~AUFNR EQ LV_AUFNR
       AND  LVORM   EQ ''.

  ENDIF.

  CHECK GT_ORDENS IS NOT INITIAL.
  SORT GT_ORDENS BY AUFNR COUNTER.

  SELECT *
    FROM IHGNS
    INTO TABLE GT_IHGNS
    FOR ALL ENTRIES IN GT_ORDENS
    WHERE OBJNR   EQ GT_ORDENS-OBJNR
     AND  COUNTER EQ GT_ORDENS-COUNTER.

  SORT GT_IHGNS BY OBJNR COUNTER ASCENDING GENDATUM DESCENDING GENTIME DESCENDING.

** Deixa apenas registro atuais(ativos)
  LOOP AT GT_IHGNS ASSIGNING <FS_IHGNS>.
    DELETE GT_IHGNS WHERE GENDATUM LE <FS_IHGNS>-GENDATUM
                     AND  COUNTER  EQ <FS_IHGNS>-COUNTER
                     AND  GENTIME  NE <FS_IHGNS>-GENTIME
                     AND  OBJNR    EQ <FS_IHGNS>-OBJNR.

  ENDLOOP.

  UNASSIGN <FS_IHGNS>.

  SORT GT_IHGNS BY OBJNR   ASCENDING
                   COUNTER ASCENDING
                   GENIAKT DESCENDING.

  LOOP AT GT_ORDENS INTO GW_ORDENS.
    IF LV_OBJNR NE GW_ORDENS-OBJNR.
      LV_OBJNR = GW_ORDENS-OBJNR.
      CLEAR LV_SEQ_NOVO.
    ENDIF.

    ADD 1 TO LV_SEQ_NOVO.

    CLEAR: GW_ORDENS_AUX, LV_SEQ_HIST.

    READ TABLE T_ORDENS INTO GW_ORDENS_AUX WITH KEY OBJNR = GW_ORDENS-OBJNR.
    IF SY-SUBRC IS INITIAL.
      CONTINUE.
    ENDIF.

    "//Verifica histórico de aprovação
    SELECT SINGLE *
      FROM ZPMR0006
      INTO @DATA(_HISTORICO_WF)
     WHERE AUFNR  = @GW_ORDENS-AUFNR
       AND STATUS = 'R'.

    IF SY-SUBRC IS INITIAL.
      IF ( _HISTORICO_WF-VLR_ESTIMADO EQ GW_ORDENS-USER4 ).
        GW_ORDENS-STATUS = 'R'.
      ELSE.
        GW_ORDENS-STATUS = 'P'.
        DELETE FROM ZPMR0006 WHERE AUFNR = GW_ORDENS-AUFNR.
      ENDIF.
    ENDIF.

** Verificar permit sem histórico para ordem
    READ TABLE GT_IHGNS ASSIGNING <FS_IHGNS> WITH KEY OBJNR   = GW_ORDENS-OBJNR
                                                      COUNTER = GW_ORDENS-COUNTER.
    IF SY-SUBRC IS NOT INITIAL.
      READ TABLE T_ORDENS INTO GW_ORDENS_AUX WITH KEY OBJNR = GW_ORDENS-OBJNR.
      IF SY-SUBRC IS NOT INITIAL.
        MOVE LV_SEQ_NOVO TO GW_ORDENS-COUNTER.
        APPEND GW_ORDENS TO T_ORDENS.
      ENDIF.
      CONTINUE.
    ENDIF.

** Verifica se há histórico de permit para a ordem
    LOOP AT GT_IHGNS ASSIGNING <FS_IHGNS> WHERE OBJNR   = GW_ORDENS-OBJNR
                                           AND  COUNTER = GW_ORDENS-COUNTER.
      ADD 1 TO LV_SEQ_HIST.
      IF <FS_IHGNS>-GENIAKT EQ 'X'.
        READ TABLE T_ORDENS INTO GW_ORDENS_AUX WITH KEY OBJNR = GW_ORDENS-OBJNR.
        IF SY-SUBRC IS NOT INITIAL.
          MOVE LV_SEQ_HIST TO GW_ORDENS-COUNTER.
          APPEND GW_ORDENS TO T_ORDENS.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDLOOP.


** Remove permits de niveis diferentes do usuário entrado
  LOOP AT T_ORDENS ASSIGNING <FS_ORDENS>.

    SELECT SINGLE PMSOG
      FROM IHSG
      INTO @DATA(_PERMIT)
     WHERE OBJNR   = @<FS_ORDENS>-OBJNR
       AND COUNTER = @<FS_ORDENS>-COUNTER.

*    READ TABLE GT_ZPMR0002 WITH KEY IWERK   = <FS_ORDENS>-WERKS
*                                    COUNTER = <FS_ORDENS>-COUNTER.

    READ TABLE GT_ZPMR0002 WITH KEY PERMIT = _PERMIT IWERK = <FS_ORDENS>-WERKS.


    IF SY-SUBRC IS NOT INITIAL.
      DELETE T_ORDENS WHERE OBJNR = <FS_ORDENS>-OBJNR.
    ENDIF.

    CLEAR _PERMIT.
  ENDLOOP.

  E_LINES = LINES( T_ORDENS ).
  CLEAR ORDER_TYPES.

ENDFUNCTION.
