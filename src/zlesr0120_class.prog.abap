*&---------------------------------------------------------------------*
*&  Include           ZLESR0120_CLASS
*&---------------------------------------------------------------------*


CLASS LCL_ALV_TOOLBAR_0100 IMPLEMENTATION.
  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT C_ALV_TOOLBARMANAGER
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.
  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    DATA: TL_PARAMETROS TYPE USTYP_T_PARAMETERS,
          VL_TXT_BUTTON TYPE TEXT40,
          V_TIME        TYPE T.

    REFRESH: TL_PARAMETROS.

    IF P_REMET-LOW IS NOT INITIAL.
      TY_TOOLBAR-ICON      = ICON_STATUS_BOOKED.
      TY_TOOLBAR-FUNCTION  = C_APLIC_SALDO_NFE.
      TY_TOOLBAR-TEXT      = 'Aplicar Saldo NF-e'.
      TY_TOOLBAR-BUTN_TYPE = 0.
      APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
      CLEAR TY_TOOLBAR.

      TY_TOOLBAR-ICON      = ICON_STATUS_REVERSE.
      TY_TOOLBAR-FUNCTION  = C_REMOV_APLIC_SALDO.
      TY_TOOLBAR-TEXT      = 'Remover Aplicação Saldo'.
      TY_TOOLBAR-BUTN_TYPE = 0.
      APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
      CLEAR TY_TOOLBAR.
    ENDIF.

    TY_TOOLBAR-ICON      = ICON_OKAY.
    TY_TOOLBAR-FUNCTION  = C_DISP_CCT.
    TY_TOOLBAR-TEXT      = 'Disponibilizar CCT'.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-ICON      = ICON_CANCEL.
    TY_TOOLBAR-FUNCTION  = C_REMOV_CCT.
    TY_TOOLBAR-TEXT      = 'Remover CCT'.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.


  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    CASE E_UCOMM.
      WHEN C_APLIC_SALDO_NFE.
        PERFORM F_APLIC_SALDO_NFE.
      WHEN C_REMOV_APLIC_SALDO.
        PERFORM F_REMOV_APLIC_SALDO.
      WHEN C_DISP_CCT.
        PERFORM F_DISP_CCT.
      WHEN C_REMOV_CCT.
        PERFORM F_REMOVER_CCT.
    ENDCASE.

    "CASE E_UCOMM.
    "  WHEN C_APLIC_SALDO_NFE  OR
    "       C_DISP_CCT.

        PERFORM: F_SELECIONAR_DADOS,
                 F_PROCESSA_DADOS.

        LEAVE TO SCREEN 0100.
    "ENDCASE.

  ENDMETHOD.                    "HANDLE_USER_COMMAND

ENDCLASS.                    "lcl_alv_toolbar IMPLEMENTATION


CLASS LCL_EVENT_HANDLER_0100 IMPLEMENTATION.


  METHOD CATCH_HOTSPOT.

    DATA: IT_RSPARAMS   TYPE TABLE OF RSPARAMS,
          WA_RSPARAMS   TYPE RSPARAMS.

    DATA: OPT     TYPE CTU_PARAMS,
          VL_LOTE TYPE ZGLT034-LOTE.

    CASE E_COLUMN_ID.
      WHEN 'LOTE'.

*        READ TABLE IT_SAIDA_0100 INTO WA_SAIDA_0100 INDEX E_ROW_ID-INDEX.
*
*        CHECK WA_SAIDA_0100-LOTE IS NOT INITIAL.
*
*        REFRESH: IT_RSPARAMS.
*
*        WA_RSPARAMS-SELNAME = 'P_BUKRS'.
*        WA_RSPARAMS-KIND = 'P'.  "SELECT OPTIONS TO BE PASSED
*        WA_RSPARAMS-SIGN = 'I'.
*        WA_RSPARAMS-OPTION = 'EQ'.
*        WA_RSPARAMS-LOW    = WA_SAIDA_0100-BUKRS.
*        WA_RSPARAMS-HIGH   = WA_SAIDA_0100-BUKRS.
*        APPEND WA_RSPARAMS TO IT_RSPARAMS.
*
*        WA_RSPARAMS-SELNAME = 'P_LOTE'.
*        WA_RSPARAMS-KIND = 'S'.  "SELECT OPTIONS TO BE PASSED
*        WA_RSPARAMS-SIGN = 'I'.
*        WA_RSPARAMS-OPTION = 'EQ'.
*        WA_RSPARAMS-LOW    = WA_SAIDA_0100-LOTE.
*        WA_RSPARAMS-HIGH   = WA_SAIDA_0100-LOTE.
*        APPEND WA_RSPARAMS TO IT_RSPARAMS.
*
*        SUBMIT ZGL018 WITH SELECTION-TABLE IT_RSPARAMS
*                AND RETURN.
*
*      WHEN 'DOC_LCTO'.
*
*        CLEAR: WA_SAIDA_0100.
*        READ TABLE IT_SAIDA_0100 INTO WA_SAIDA_0100 INDEX E_ROW_ID-INDEX.
*
*        CHECK WA_SAIDA_0100-DOC_LCTO IS NOT INITIAL.
*
*        CLEAR: VL_LOTE.
*        SET PARAMETER ID 'BLN' FIELD WA_SAIDA_0100-DOC_LCTO.
*        SET PARAMETER ID 'LOT' FIELD VL_LOTE.
*        CALL TRANSACTION 'ZGL016' AND SKIP FIRST SCREEN.



    ENDCASE.

  ENDMETHOD.

ENDCLASS.

CLASS LCL_ALV_TOOLBAR_0110 IMPLEMENTATION.
  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT C_ALV_TOOLBARMANAGER
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.
  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

     CLEAR TY_TOOLBAR.
     TY_TOOLBAR-ICON      = ICON_SYSTEM_UNDO.
     TY_TOOLBAR-FUNCTION  = 'CLEAR_ST'.
     TY_TOOLBAR-TEXT      = 'Reiniciar Status.'.
     TY_TOOLBAR-BUTN_TYPE = 0.
     APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
     CLEAR TY_TOOLBAR.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    CASE E_UCOMM.
      WHEN 'ESTORNO_CTB'.

    ENDCASE.

  ENDMETHOD.                    "HANDLE_USER_COMMAND

ENDCLASS.                    "lcl_alv_toolbar IMPLEMENTATION


CLASS LCL_EVENT_HANDLER_0110 IMPLEMENTATION.


  METHOD CATCH_HOTSPOT.

    DATA: IT_RSPARAMS   TYPE TABLE OF RSPARAMS,
          WA_RSPARAMS   TYPE RSPARAMS.

    DATA: OPT     TYPE CTU_PARAMS,
          VL_LOTE TYPE ZGLT034-LOTE.

    CASE E_COLUMN_ID.
      WHEN 'LOTE'.

*        READ TABLE IT_SAIDA_0100 INTO WA_SAIDA_0100 INDEX E_ROW_ID-INDEX.
*
*        CHECK WA_SAIDA_0100-LOTE IS NOT INITIAL.
*
*        REFRESH: IT_RSPARAMS.
*
*        WA_RSPARAMS-SELNAME = 'P_BUKRS'.
*        WA_RSPARAMS-KIND = 'P'.  "SELECT OPTIONS TO BE PASSED
*        WA_RSPARAMS-SIGN = 'I'.
*        WA_RSPARAMS-OPTION = 'EQ'.
*        WA_RSPARAMS-LOW    = WA_SAIDA_0100-BUKRS.
*        WA_RSPARAMS-HIGH   = WA_SAIDA_0100-BUKRS.
*        APPEND WA_RSPARAMS TO IT_RSPARAMS.
*
*        WA_RSPARAMS-SELNAME = 'P_LOTE'.
*        WA_RSPARAMS-KIND = 'S'.  "SELECT OPTIONS TO BE PASSED
*        WA_RSPARAMS-SIGN = 'I'.
*        WA_RSPARAMS-OPTION = 'EQ'.
*        WA_RSPARAMS-LOW    = WA_SAIDA_0100-LOTE.
*        WA_RSPARAMS-HIGH   = WA_SAIDA_0100-LOTE.
*        APPEND WA_RSPARAMS TO IT_RSPARAMS.
*
*        SUBMIT ZGL018 WITH SELECTION-TABLE IT_RSPARAMS
*                AND RETURN.



    ENDCASE.

  ENDMETHOD.

ENDCLASS.
