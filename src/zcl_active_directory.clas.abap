class ZCL_ACTIVE_DIRECTORY definition
  public
  final
  create public .

public section.

  interfaces ZIF_ACTIVE_DIRECTORY .

  class-methods CONVERT_TO_UTF8
    importing
      !I_TEXTO type STRING
    returning
      value(R_TEXTO) type STRING .
protected section.
private section.
ENDCLASS.



CLASS ZCL_ACTIVE_DIRECTORY IMPLEMENTATION.


  METHOD CONVERT_TO_UTF8.

    DATA: LC_LENGTH TYPE I.
    DATA: LC_BUFFER TYPE XSTRING.
    DATA: LT_TEXTO  TYPE TABLE OF CHAR80.
    DATA: TAMANHO   TYPE I.

    TRY .
        LC_LENGTH = STRLEN( I_TEXTO ).
        CL_ABAP_CONV_OUT_CE=>CREATE( ENCODING = 'UTF-8' )->CONVERT( EXPORTING DATA = I_TEXTO N = LC_LENGTH IMPORTING BUFFER = LC_BUFFER ).

        CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
          EXPORTING
            BUFFER        = LC_BUFFER
          IMPORTING
            OUTPUT_LENGTH = TAMANHO
          TABLES
            BINARY_TAB    = LT_TEXTO.

        CALL FUNCTION 'SCMS_BINARY_TO_STRING'
          EXPORTING
            INPUT_LENGTH = TAMANHO
          IMPORTING
            TEXT_BUFFER  = R_TEXTO
          TABLES
            BINARY_TAB   = LT_TEXTO
          EXCEPTIONS
            FAILED       = 1
            OTHERS       = 2.

        IF SY-SUBRC IS NOT INITIAL.
          R_TEXTO = I_TEXTO.
        ENDIF.

      CATCH CX_PARAMETER_INVALID_RANGE.
        R_TEXTO = I_TEXTO.
      CATCH CX_SY_CODEPAGE_CONVERTER_INIT.
        R_TEXTO = I_TEXTO.
      CATCH CX_SY_CONVERSION_CODEPAGE.
        R_TEXTO = I_TEXTO.
      CATCH CX_PARAMETER_INVALID_TYPE.
        R_TEXTO = I_TEXTO.
    ENDTRY.

    REPLACE ALL OCCURRENCES OF '\' IN R_TEXTO WITH '\\' .
    REPLACE ALL OCCURRENCES OF '"' IN R_TEXTO WITH '\"' .
    REPLACE ALL OCCURRENCES OF CL_ABAP_CHAR_UTILITIES=>CR_LF IN R_TEXTO WITH '\r\n' .
    REPLACE ALL OCCURRENCES OF CL_ABAP_CHAR_UTILITIES=>NEWLINE IN R_TEXTO WITH '\n' .
    REPLACE ALL OCCURRENCES OF CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB IN R_TEXTO WITH '\t' .
    REPLACE ALL OCCURRENCES OF CL_ABAP_CHAR_UTILITIES=>BACKSPACE IN R_TEXTO WITH '\b' .
    REPLACE ALL OCCURRENCES OF CL_ABAP_CHAR_UTILITIES=>FORM_FEED IN R_TEXTO WITH '\f' .

  ENDMETHOD.


  METHOD ZIF_ACTIVE_DIRECTORY~GERA_ERRO_GERAL.

    DATA: LC_TEXTO TYPE C LENGTH 200.
    LC_TEXTO = I_TEXTO.
    SY-MSGV1 = LC_TEXTO+000(50).
    SY-MSGV2 = LC_TEXTO+050(50).
    SY-MSGV3 = LC_TEXTO+100(50).
    SY-MSGV4 = LC_TEXTO+150(50).

    RAISE EXCEPTION TYPE ZCX_ACTIVE_DIRECTORY
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_ACTIVE_DIRECTORY=>ZCX_ERRO_GERAL-MSGID
                          MSGNO = ZCX_ACTIVE_DIRECTORY=>ZCX_ERRO_GERAL-MSGNO
                          ATTR1 = CONV #( SY-MSGV1 )
                          ATTR2 = CONV #( SY-MSGV2 )
                          ATTR3 = CONV #( SY-MSGV3 )
                          ATTR4 = CONV #( SY-MSGV4 ) )
        MSGID  = ZCX_ACTIVE_DIRECTORY=>ZCX_ERRO_GERAL-MSGID
        MSGNO  = ZCX_ACTIVE_DIRECTORY=>ZCX_ERRO_GERAL-MSGNO
        MSGTY  = 'E'
        MSGV1  = SY-MSGV1
        MSGV2  = SY-MSGV2
        MSGV3  = SY-MSGV3
        MSGV4  = SY-MSGV4.

  ENDMETHOD.


  METHOD ZIF_ACTIVE_DIRECTORY~GET_AUTENTICA.

    DATA: LC_DOMINIO TYPE ZDE_DOMINIO,
          LC_JSON    TYPE STRING,
          LC_URL     TYPE STRING.

    DEFINE ADD_TAG.
      CONCATENATE LC_JSON '"' &1 '": "' &2 '"' &3 INTO LC_JSON.
    END-OF-DEFINITION.

    R_INSTANCE = ME.

    IF I_DOMINIO IS INITIAL.
      LC_DOMINIO = ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-DOMINIO.
    ELSE.
      LC_DOMINIO = I_DOMINIO.
    ENDIF.

    CLEAR: LC_JSON.
    CONCATENATE '{' LC_JSON INTO LC_JSON.

    ADD_TAG 'servidor'   ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-SERVIDOR_AD  ','.
    ADD_TAG 'dominio'    LC_DOMINIO  ','.
    ADD_TAG 'usuario'    I_USUARIO  ','.
    ADD_TAG 'senha'      I_SENHA  ''.

    CONCATENATE LC_JSON '}' INTO LC_JSON.

    CONCATENATE ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-HOST ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-ACT_GET_AUTENTICA INTO LC_URL.
    ME->ZIF_ACTIVE_DIRECTORY~SET_HTTP( EXPORTING I_URL = LC_URL I_JSON = LC_JSON IMPORTING E_CDATA = DATA(E_RESULTADO) ).

    IF E_RESULTADO NE '1'.
      DATA(MTEXT) = 'Erro Usuario/Senha'.
      ZCL_ACTIVE_DIRECTORY=>ZIF_ACTIVE_DIRECTORY~GERA_ERRO_GERAL( EXPORTING I_TEXTO = CONV #( MTEXT ) ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_ACTIVE_DIRECTORY~GET_INFOS_USUARIO.

    DATA: LC_DOMINIO TYPE ZDE_DOMINIO,
          LC_JSON    TYPE STRING,
          LC_URL     TYPE STRING.

    DEFINE ADD_TAG.
      CONCATENATE LC_JSON '"' &1 '": "' &2 '"' &3 INTO LC_JSON.
    END-OF-DEFINITION.

    R_INSTANCE = ME.

    CLEAR: LC_JSON.
    CONCATENATE '{' LC_JSON INTO LC_JSON.

    ADD_TAG 'servidor'   ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-SERVIDOR_AD ','.
    ADD_TAG 'dominio'    ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-DOMINIO     ','.
    ADD_TAG 'usuario'    ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-USUARIO     ','.
    ADD_TAG 'senha'      ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-SENHA       ','.
    ADD_TAG 'cpf'        I_CPF                                                 ''.

    CONCATENATE LC_JSON '}' INTO LC_JSON.

    CONCATENATE ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-HOST ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-ACT_GET_USUARIO INTO LC_URL.
    ME->ZIF_ACTIVE_DIRECTORY~SET_HTTP( EXPORTING I_URL = LC_URL I_JSON = LC_JSON IMPORTING E_CDATA = DATA(E_RESULTADO) ).

    CALL METHOD /UI2/CL_JSON=>DESERIALIZE
      EXPORTING
        JSON = E_RESULTADO
      CHANGING
        DATA = E_INFO.

  ENDMETHOD.


  METHOD ZIF_ACTIVE_DIRECTORY~GET_INSTANCE.

    IF ZIF_ACTIVE_DIRECTORY~AT_ACTIVE_DIRECTORY IS NOT BOUND.
      CREATE OBJECT ZIF_ACTIVE_DIRECTORY~AT_ACTIVE_DIRECTORY TYPE ZCL_ACTIVE_DIRECTORY.
      SELECT SINGLE * INTO ZIF_ACTIVE_DIRECTORY~AT_ACTIVE_DIRECTORY->AT_DADOS_SERVICO
        FROM ZWAT0002.
    ENDIF.

    R_INSTANCE = ZIF_ACTIVE_DIRECTORY~AT_ACTIVE_DIRECTORY.

  ENDMETHOD.


  METHOD ZIF_ACTIVE_DIRECTORY~GET_NOMES_ALEATORIOS.

    DATA: LC_JSON TYPE STRING,
          LC_URL  TYPE STRING.

    DEFINE ADD_TAG.
      CONCATENATE LC_JSON '"' &1 '": "' &2 '"' &3 INTO LC_JSON.
    END-OF-DEFINITION.

    R_INSTANCE = ME.

    CLEAR: LC_JSON.
    CONCATENATE '{' LC_JSON INTO LC_JSON.
    ADD_TAG 'nome_completo' I_NOME_COMPLETO ''.
    CONCATENATE LC_JSON '}' INTO LC_JSON.

    CONCATENATE ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-HOST ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-ACT_GET_NOMES_ALEATORIOS INTO LC_URL.
    ME->ZIF_ACTIVE_DIRECTORY~SET_HTTP( EXPORTING I_URL = LC_URL I_JSON = LC_JSON IMPORTING E_CDATA = DATA(E_RESULTADO) ).

    IF E_RESULTADO IS NOT INITIAL.
      E_NOMES = E_RESULTADO.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_ACTIVE_DIRECTORY~SET_ADD_USUARIO.

    DATA: LC_DOMINIO TYPE ZDE_DOMINIO,
          LC_JSON    TYPE STRING,
          LC_URL     TYPE STRING.

    DEFINE ADD_TAG.
      CONCATENATE LC_JSON '"' &1 '": "' &2 '"' &3 INTO LC_JSON.
    END-OF-DEFINITION.

    R_INSTANCE = ME.

    CLEAR: LC_JSON.
    CONCATENATE '{' LC_JSON INTO LC_JSON.
    ADD_TAG 'servidor'      ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-SERVIDOR_AD ','.
    ADD_TAG 'dominio'       ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-DOMINIO     ','.
    ADD_TAG 'usuario'       ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-USUARIO     ','.
    ADD_TAG 'senha'         ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-SENHA       ','.
    ADD_TAG 'cpf'           I_CPF           ','.
    ADD_TAG 'nome_completo' I_NOME_COMPLETO ','.
    ADD_TAG 'pais'          I_PAIS ''.
    CONCATENATE LC_JSON '}' INTO LC_JSON.

    CONCATENATE ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-HOST ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-ACT_SET_ADD_USUARIO INTO LC_URL.
    ME->ZIF_ACTIVE_DIRECTORY~SET_HTTP( EXPORTING I_URL = LC_URL I_JSON = LC_JSON IMPORTING E_CDATA = DATA(E_RESULTADO) ).

    CALL METHOD /UI2/CL_JSON=>DESERIALIZE
      EXPORTING
        JSON = E_RESULTADO
      CHANGING
        DATA = E_RESPOSTA.

  ENDMETHOD.


  METHOD ZIF_ACTIVE_DIRECTORY~SET_ATIVAR.

    DATA: LC_DOMINIO TYPE ZDE_DOMINIO,
          LC_JSON    TYPE STRING,
          LC_URL     TYPE STRING.

    DEFINE ADD_TAG.
      CONCATENATE LC_JSON '"' &1 '": "' &2 '"' &3 INTO LC_JSON.
    END-OF-DEFINITION.

    R_INSTANCE = ME.

    CLEAR: LC_JSON.
    CONCATENATE '{' LC_JSON INTO LC_JSON.
    ADD_TAG 'servidor'      ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-SERVIDOR_AD ','.
    ADD_TAG 'dominio'       ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-DOMINIO     ','.
    ADD_TAG 'usuario'       ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-USUARIO     ','.
    ADD_TAG 'senha'         ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-SENHA       ','.
    ADD_TAG 'cpf'           I_CPF           ''.
    CONCATENATE LC_JSON '}' INTO LC_JSON.

    CONCATENATE ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-HOST ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-ACT_SET_ATIVAR INTO LC_URL.
    ME->ZIF_ACTIVE_DIRECTORY~SET_HTTP( EXPORTING I_URL = LC_URL I_JSON = LC_JSON IMPORTING E_CDATA = DATA(E_RESULTADO) ).

    CALL METHOD /UI2/CL_JSON=>DESERIALIZE
      EXPORTING
        JSON = E_RESULTADO
      CHANGING
        DATA = E_RESPOSTA.

  ENDMETHOD.


  METHOD ZIF_ACTIVE_DIRECTORY~SET_BLOQUEAR.

    DATA: LC_DOMINIO TYPE ZDE_DOMINIO,
          LC_JSON    TYPE STRING,
          LC_URL     TYPE STRING.

    DEFINE ADD_TAG.
      CONCATENATE LC_JSON '"' &1 '": "' &2 '"' &3 INTO LC_JSON.
    END-OF-DEFINITION.

    R_INSTANCE = ME.

    DATA(LC_MOTIVO) = ZCL_ACTIVE_DIRECTORY=>CONVERT_TO_UTF8( I_TEXTO = I_MOTIVO ).

    REPLACE ALL OCCURRENCES OF REGEX '[áàãâ]' IN LC_MOTIVO WITH 'a'.
    REPLACE ALL OCCURRENCES OF REGEX '[ÁÀÂÃ]' IN LC_MOTIVO WITH 'A'.
    REPLACE ALL OCCURRENCES OF REGEX '[éê]'   IN LC_MOTIVO WITH 'e'.
    REPLACE ALL OCCURRENCES OF REGEX '[ÉÊ]'   IN LC_MOTIVO WITH 'E'.
    REPLACE ALL OCCURRENCES OF        'í'     IN LC_MOTIVO WITH 'i'.
    REPLACE ALL OCCURRENCES OF        'Í'     IN LC_MOTIVO WITH 'I'.
    REPLACE ALL OCCURRENCES OF REGEX '[óô]'   IN LC_MOTIVO WITH 'o'.
    REPLACE ALL OCCURRENCES OF REGEX '[ÓÔ]'   IN LC_MOTIVO WITH 'O'.
    REPLACE ALL OCCURRENCES OF REGEX '[üú]'   IN LC_MOTIVO WITH 'u'.
    REPLACE ALL OCCURRENCES OF REGEX '[ÜÚ]'   IN LC_MOTIVO WITH 'U'.
    REPLACE ALL OCCURRENCES OF REGEX '[ç]'    IN LC_MOTIVO WITH 'c'.
    REPLACE ALL OCCURRENCES OF REGEX '[Ç]'    IN LC_MOTIVO WITH 'C'.
    REPLACE ALL OCCURRENCES OF        '&'     IN LC_MOTIVO WITH '&#38;'.
    REPLACE ALL OCCURRENCES OF        ''''    IN LC_MOTIVO WITH '&#39;'.
    REPLACE ALL OCCURRENCES OF        'º'     IN LC_MOTIVO WITH 'o' IGNORING CASE.
    REPLACE ALL OCCURRENCES OF        'ª'     IN LC_MOTIVO WITH 'a' IGNORING CASE.

    CLEAR: LC_JSON.
    CONCATENATE '{' LC_JSON INTO LC_JSON.
    ADD_TAG 'servidor'        ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-SERVIDOR_AD ','.
    ADD_TAG 'dominio'         ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-DOMINIO     ','.
    ADD_TAG 'usuario'         ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-USUARIO     ','.
    ADD_TAG 'senha'           ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-SENHA       ','.
    ADD_TAG 'cpf'             I_CPF           ','.
    ADD_TAG 'motivo_bloqueio' LC_MOTIVO       ','.
    ADD_TAG 'desligado'       I_DESLIGADO     ','.
    ADD_TAG 'transferido'     I_TRANSFERIDO   ''.
    CONCATENATE LC_JSON '}' INTO LC_JSON.

    CONCATENATE ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-HOST ME->ZIF_ACTIVE_DIRECTORY~AT_DADOS_SERVICO-ACT_SET_BLOQUEAR INTO LC_URL.
    ME->ZIF_ACTIVE_DIRECTORY~SET_HTTP( EXPORTING I_URL = LC_URL I_JSON = LC_JSON IMPORTING E_CDATA = DATA(E_RESULTADO) ).

    CALL METHOD /UI2/CL_JSON=>DESERIALIZE
      EXPORTING
        JSON = E_RESULTADO
      CHANGING
        DATA = E_RESPOSTA.

  ENDMETHOD.


  METHOD ZIF_ACTIVE_DIRECTORY~SET_HTTP.

    DATA: TAM_XML_S   TYPE STRING, "Tamanho do Arquivo XML.
          TAM_XML_I   TYPE I,
          RETURN_CODE TYPE I,
          REASON      TYPE STRING.

    R_INSTANCE = ME.

    CL_HTTP_CLIENT=>CREATE_BY_URL( EXPORTING URL    = I_URL
                                   IMPORTING CLIENT = DATA(E_HTTP)
                                   EXCEPTIONS ARGUMENT_NOT_FOUND = 1
                                              PLUGIN_NOT_ACTIVE  = 2
                                              INTERNAL_ERROR     = 3
                                     ).
    IF SY-SUBRC IS NOT INITIAL.
      IF SY-MSGID IS NOT INITIAL AND SY-MSGNO IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'E' NUMBER SY-MSGNO INTO DATA(MTEXT) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ELSE.
        MTEXT = '(CREATE_BY_URL) Erro de Comunicação com ' && I_URL.
      ENDIF.
      ZCL_ACTIVE_DIRECTORY=>ZIF_ACTIVE_DIRECTORY~GERA_ERRO_GERAL( EXPORTING I_TEXTO = MTEXT ).
    ENDIF.

    CALL METHOD E_HTTP->REQUEST->SET_HEADER_FIELD
      EXPORTING
        NAME  = '~request_method'
        VALUE = 'POST'.

    CALL METHOD E_HTTP->REQUEST->SET_HEADER_FIELD
      EXPORTING
        NAME  = '~server_protocol'
        VALUE = 'HTTP/1.1'.

    CALL METHOD E_HTTP->REQUEST->SET_HEADER_FIELD
      EXPORTING
        NAME  = 'Content-Type'
        VALUE = 'application/json'.

    TAM_XML_I = STRLEN( I_JSON ). "Verifica o tamanho do arquivo XML.
    TAM_XML_S = TAM_XML_I.

    CALL METHOD E_HTTP->REQUEST->SET_HEADER_FIELD
      EXPORTING
        NAME  = 'Content-Length'
        VALUE = TAM_XML_S.

    CALL METHOD E_HTTP->REQUEST->SET_CDATA
      EXPORTING
        DATA   = I_JSON
        OFFSET = 0
        LENGTH = TAM_XML_I.

    CALL METHOD E_HTTP->SEND
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3
        HTTP_INVALID_TIMEOUT       = 4.

    IF SY-SUBRC IS NOT INITIAL.
      IF SY-MSGID IS NOT INITIAL AND SY-MSGNO IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'E' NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ELSE.
        MTEXT = '(SEND) Erro de Comunicação com ' && I_URL.
      ENDIF.
      ZCL_ACTIVE_DIRECTORY=>ZIF_ACTIVE_DIRECTORY~GERA_ERRO_GERAL( EXPORTING I_TEXTO = MTEXT ).
    ENDIF.

    CALL METHOD E_HTTP->RECEIVE
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3.

    IF SY-SUBRC IS NOT INITIAL.
      IF SY-MSGID IS NOT INITIAL AND SY-MSGNO IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'E' NUMBER SY-MSGNO INTO MTEXT WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ELSE.
        MTEXT = '(RECEIVE) Erro de Comunicação com ' && I_URL.
      ENDIF.
      ZCL_ACTIVE_DIRECTORY=>ZIF_ACTIVE_DIRECTORY~GERA_ERRO_GERAL( EXPORTING I_TEXTO = MTEXT ).
    ENDIF.

    E_HTTP->RESPONSE->GET_STATUS( IMPORTING CODE = RETURN_CODE REASON = REASON ).

    IF RETURN_CODE NE 200.
      MTEXT = 'Erro: ' && RETURN_CODE && ' Texto: ' && REASON.
      ZCL_ACTIVE_DIRECTORY=>ZIF_ACTIVE_DIRECTORY~GERA_ERRO_GERAL( EXPORTING I_TEXTO = MTEXT ).
    ENDIF.

    E_CDATA = E_HTTP->RESPONSE->GET_CDATA( ).
    E_HTTP->CLOSE( ).

  ENDMETHOD.
ENDCLASS.
