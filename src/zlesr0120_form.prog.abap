*&---------------------------------------------------------------------*
*&  Include           ZLESR0120_FORM
*&---------------------------------------------------------------------*


FORM F_REFRESH_ALV USING P_ALV.

  CASE P_ALV.
    WHEN '0100'.

      CHECK OBJ_ALV_0100 IS NOT INITIAL.

      CALL METHOD OBJ_ALV_0100->REFRESH_TABLE_DISPLAY
        EXPORTING
          IS_STABLE = WA_STABLE.
    WHEN '0110'.

  ENDCASE.

ENDFORM.

FORM F_REFRESH_OBJETOS .

  CLEAR: GS_LAYOUT,
         GS_VARIANT.

  REFRESH: IT_EXCLUDE_FCODE.

ENDFORM.

FORM F_CRIAR_CATALOG USING P_SCREEN.

  FREE: WA_FCAT, IT_FCAT.

  CASE P_SCREEN.
    WHEN '0100'.

      PERFORM F_ESTRUTURA_ALV USING:

        01  'ZLEST0060'      'CHAVE_NFE'        'IT_SAIDA_0100'   'CHAVE_NFE'        'Chave NF-e'        '44'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
        01  'ZLEST0060'      'WERKS'            'IT_SAIDA_0100'   'WERKS'            'Centro.Emissor'    '14'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
        02  'ZLEST0060'      'ANO_VIAGEM'       'IT_SAIDA_0100'   'ANO_VIAGEM'       'Ano Viagem'        '10'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
        04  'ZLEST0060'      'NR_VIAGEM'        'IT_SAIDA_0100'   'NR_VIAGEM'        'Nr. Viagem'        '10'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
        05  'ZLEST0060'      'RM_CODIGO'        'IT_SAIDA_0100'   'RM_CODIGO'        'Cd.Remetente'      '10'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
        06  'LFA1'           'NAME1'            'IT_SAIDA_0100'   'NAME1'            'Remetente'         '30'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
        07  'ZLEST0060'      'MATNR'            'IT_SAIDA_0100'   'MATNR'            'Cd.Material'       '10'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
        08  'MAKT'           'MAKTX'            'IT_SAIDA_0100'   'MAKTX'            'Material'          '20'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
        09  'ZLEST0060'      'DT_CHEGADA'       'IT_SAIDA_0100'   'DT_CHEGADA'       'Dt.Chegada'        '10'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
        09  'ZLEST0060'      'NFNUM'            'IT_SAIDA_0100'   'NFNUM'            'Nota'              '10'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
        09  'ZLEST0060'      'SERIES'           'IT_SAIDA_0100'   'SERIES'           'Séries'            '10'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
        10  'ZLEST0060'      'PESO_FISCAL'      'IT_SAIDA_0100'   'PESO_FISCAL'      'Peso Fiscal'       '13'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
        09  'ZLEST0060'      'PESO_CHEGADA'     'IT_SAIDA_0100'   'PESO_CHEGADA'     'Peso Chegada'      '13'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
        11  'ZLEST0060'      'PESO_CCT'         'IT_SAIDA_0100'   'PESO_CCT'         'Peso CCT'          '10'   ' '    ''  ' ' ' ' ' ' ' ' '' ,
        12  ''               ''                 'IT_SAIDA_0100'   'VINC_TOT'         'Vinc.Tot.'         '10'   ' '    ''  ' ' 'C' ' ' ' ' '' ,
        12  ''               ''                 'IT_SAIDA_0100'   'DISP_CCT'         'Disp. CCT'         '10'   ' '    ''  ' ' 'C' ' ' ' ' '' .


    WHEN '0110'.


  ENDCASE.


ENDFORM.

FORM F_ESTRUTURA_ALV USING VALUE(P_COL_POS)       TYPE I
                           VALUE(P_REF_TABNAME)   LIKE DD02D-TABNAME
                           VALUE(P_REF_FIELDNAME) LIKE DD03D-FIELDNAME
                           VALUE(P_TABNAME)       LIKE DD02D-TABNAME
                           VALUE(P_FIELD)         LIKE DD03D-FIELDNAME
                           VALUE(P_SCRTEXT_L)     LIKE DD03P-SCRTEXT_L
                           VALUE(P_OUTPUTLEN)
                           VALUE(P_EDIT)
                           VALUE(P_SUM)
                           VALUE(P_EMPHASIZE)
                           VALUE(P_JUST)
                           VALUE(P_HOTSPOT)
                           VALUE(P_F4)
                           VALUE(P_CHECK).

  CLEAR WA_FCAT.

  WA_FCAT-FIELDNAME   = P_FIELD.
  WA_FCAT-TABNAME     = P_TABNAME.
  WA_FCAT-REF_TABLE   = P_REF_TABNAME.
  WA_FCAT-REF_FIELD   = P_REF_FIELDNAME.
  WA_FCAT-KEY         = ' '.
  WA_FCAT-EDIT        = P_EDIT.
  WA_FCAT-COL_POS     = P_COL_POS.
  WA_FCAT-OUTPUTLEN   = P_OUTPUTLEN.
  WA_FCAT-NO_OUT      = ' '.
  WA_FCAT-DO_SUM      = P_SUM.
  WA_FCAT-REPTEXT     = P_SCRTEXT_L.
  WA_FCAT-SCRTEXT_S   = P_SCRTEXT_L.
  WA_FCAT-SCRTEXT_M   = P_SCRTEXT_L.
  WA_FCAT-SCRTEXT_L   = P_SCRTEXT_L.
  WA_FCAT-EMPHASIZE   = P_EMPHASIZE.
  WA_FCAT-STYLE       =
  WA_FCAT-JUST        = P_JUST.
  WA_FCAT-HOTSPOT     = P_HOTSPOT.
  WA_FCAT-F4AVAILABL  = P_F4.
  WA_FCAT-CHECKBOX    = P_CHECK.

  APPEND WA_FCAT TO IT_FCAT.

ENDFORM.                    " ESTRUTURA_ALV

FORM F_EXCLUDE_FCODE USING P_SCREEN.

  APPEND CL_GUI_ALV_GRID=>MC_FC_REFRESH           TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW    TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW    TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW    TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_COPY          TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW      TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_CUT           TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO          TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE         TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW TO IT_EXCLUDE_FCODE.
  APPEND CL_GUI_ALV_GRID=>MC_FC_CHECK             TO IT_EXCLUDE_FCODE.

ENDFORM.

FORM F_LIMPA_VARIAVEIS .

  CLEAR: WA_SAIDA_0100,
         IT_SAIDA_0100[],
         TG_0060[],
         TG_0073[],
         TG_0142[],
         TG_0060_NFE[],
         TG_LFA1[],
         TG_MAKT[],
         TG_ACTIVE[],
         P_SALDO,
         VG_NOT_FOUND.

  CLEAR: R_DOC_REM[]      , R_DOC_REM,
         R_TP_TRANSGENIA[], R_TP_TRANSGENIA,
         R_PESO_CCT[]     , R_PESO_CCT.

ENDFORM.

FORM F_SELECIONAR_DADOS.

  PERFORM F_LIMPA_VARIAVEIS.

*  AUTHORITY-CHECK OBJECT 'M_MATE_BUK'
*    ID 'BUKRS' FIELD  P_BUKRS-LOW
*    ID 'ACTVT' FIELD '03'.    "Visualização
*
*  CASE SY-SUBRC.
*    WHEN 0.
*      "  tem autorização!
*    WHEN 4.
*      MESSAGE 'Sem autorização para esta empresa' TYPE 'I'.
*      EXIT.
*    WHEN 12.
*      MESSAGE 'Sem autorização neste objeto ' TYPE 'I'.
*      EXIT.
*    WHEN OTHERS.
*      EXIT.
*  ENDCASE.

  CASE 'X'.
    WHEN P_PROP.
      R_DOC_REM-SIGN   = 'I'.
      R_DOC_REM-OPTION = 'NE'.
      R_DOC_REM-LOW    = SPACE.
      APPEND R_DOC_REM.
    WHEN P_TERC.
      R_DOC_REM-SIGN   = 'I'.
      R_DOC_REM-OPTION = 'EQ'.
      R_DOC_REM-LOW    = SPACE.
      APPEND R_DOC_REM.
  ENDCASE.

  CASE P_TPCLA.
    WHEN 'CO'.

      R_TP_TRANSGENIA-SIGN   = 'I'.
      R_TP_TRANSGENIA-OPTION = 'EQ'.
      R_TP_TRANSGENIA-LOW    = 'CO'.
      APPEND R_TP_TRANSGENIA.

    WHEN 'R1'.

      R_TP_TRANSGENIA-SIGN   = 'I'.
      R_TP_TRANSGENIA-OPTION = 'EQ'.
      R_TP_TRANSGENIA-LOW    = 'P1'.
      APPEND R_TP_TRANSGENIA.

      R_TP_TRANSGENIA-SIGN   = 'I'.
      R_TP_TRANSGENIA-OPTION = 'EQ'.
      R_TP_TRANSGENIA-LOW    = 'T1'.
      APPEND R_TP_TRANSGENIA.

      R_TP_TRANSGENIA-SIGN   = 'I'.
      R_TP_TRANSGENIA-OPTION = 'EQ'.
      R_TP_TRANSGENIA-LOW    = 'D1'.
      APPEND R_TP_TRANSGENIA.

    WHEN 'R2'.

      R_TP_TRANSGENIA-SIGN   = 'I'.
      R_TP_TRANSGENIA-OPTION = 'EQ'.
      R_TP_TRANSGENIA-LOW    = 'P2'.
      APPEND R_TP_TRANSGENIA.

      R_TP_TRANSGENIA-SIGN   = 'I'.
      R_TP_TRANSGENIA-OPTION = 'EQ'.
      R_TP_TRANSGENIA-LOW    = 'T2'.
      APPEND R_TP_TRANSGENIA.

      R_TP_TRANSGENIA-SIGN   = 'I'.
      R_TP_TRANSGENIA-OPTION = 'EQ'.
      R_TP_TRANSGENIA-LOW    = 'D2'.
      APPEND R_TP_TRANSGENIA.

  ENDCASE.

  IF P_PENDE = 'X'.
    R_PESO_CCT-SIGN   = 'I'.
    R_PESO_CCT-OPTION = 'EQ'.
    R_PESO_CCT-LOW    = 0.
    APPEND R_PESO_CCT.
  ENDIF.

  SELECT *
    FROM ZLEST0060 AS A INTO TABLE TG_0060
   WHERE A~BUKRS_ROM       IN P_BUKRS
     AND A~BRANCH_ROM      IN P_BRANCH
     AND A~RM_CODIGO       IN P_REMET
     AND A~MATNR           IN P_MATNR
     AND A~TP_TRANSGENIA   IN R_TP_TRANSGENIA
     AND A~DT_CHEGADA      >= '20171001'
     AND A~DT_CHEGADA      IN P_DTDES
     AND A~DOC_REM         IN R_DOC_REM
     AND A~DOCNUM          NE '0000000000'
     AND A~PESO_CCT        IN R_PESO_CCT
     AND NOT EXISTS ( SELECT *
                       FROM ZLEST0060 AS B
                      WHERE B~CHAVE_NFE    = A~CHAVE_NFE
                        AND B~PESO_CHEGADA = 0 )
     AND EXISTS (  SELECT *
                     FROM ZLEST0161 AS B
                    WHERE B~LIFNR = A~RM_CODIGO )
     AND EXISTS ( SELECT *
                    FROM J_1BNFE_ACTIVE AS B
                   WHERE B~DOCNUM     = A~DOCNUM
                     AND B~DOCSTA     = '1'
                     AND B~CANCEL     = '' )
     AND EXISTS ( SELECT *
                    FROM ZLEST0149 AS B
                   WHERE B~BUKRS   =  A~BUKRS_ROM
                     AND B~BRANCH  =  A~BRANCH_ROM ).

  CHECK TG_0060[] IS NOT INITIAL.

  SELECT *
    FROM ZLEST0060 AS A INTO TABLE TG_0060_NFE
     FOR ALL ENTRIES IN TG_0060
   WHERE A~CHAVE_NFE EQ TG_0060-CHAVE_NFE
     AND A~DOCNUM    NE '0000000000'
     AND EXISTS ( SELECT *
                    FROM J_1BNFE_ACTIVE AS B
                   WHERE B~DOCNUM     = A~DOCNUM
                     AND B~DOCSTA     = '1'
                     AND B~CANCEL     = '' ).
  SELECT *
    FROM LFA1 INTO TABLE TG_LFA1
     FOR ALL ENTRIES IN TG_0060
   WHERE LIFNR = TG_0060-RM_CODIGO.

  SELECT *
    FROM MAKT INTO TABLE TG_MAKT
     FOR ALL ENTRIES IN TG_0060
   WHERE MATNR = TG_0060-MATNR
     AND SPRAS = SY-LANGU.

  SELECT *
    FROM ZLEST0142 INTO TABLE TG_0142
     FOR ALL ENTRIES IN TG_0060
   WHERE CHAVE_NFE = TG_0060-CHAVE_NFE.

  SELECT *
    FROM ZLEST0073 INTO TABLE TG_0073
     FOR ALL ENTRIES IN TG_0060
   WHERE CHAVE_NFE = TG_0060-CHAVE_NFE.


ENDFORM.

FORM F_PROCESSA_DADOS .

  DATA: WL_COLOR  TYPE KKBLO_SPECIALCOL.

  SORT TG_0060 BY CHAVE_NFE DT_CHEGADA DESCENDING.
  DELETE ADJACENT DUPLICATES FROM TG_0060 COMPARING CHAVE_NFE.

  SORT TG_0060 BY DT_MOVIMENTO NR_ROMANEIO.

  LOOP AT TG_0060.

    CLEAR: WA_SAIDA_0100.

    CHECK ( TG_0060-CHAVE_NFE IS NOT INITIAL ) AND ( STRLEN( TG_0060-CHAVE_NFE ) EQ 44 ) AND ( TG_0060-CH_REFERENCIA IS NOT INITIAL ).

    WA_SAIDA_0100-CH_REFERENCIA        = TG_0060-CH_REFERENCIA.
    WA_SAIDA_0100-DT_MOVIMENTO         = TG_0060-DT_MOVIMENTO.
    WA_SAIDA_0100-NR_ROMANEIO          = TG_0060-NR_ROMANEIO.
    WA_SAIDA_0100-CHAVE_NFE            = TG_0060-CHAVE_NFE.
    WA_SAIDA_0100-WERKS                = TG_0060-WERKS.
    WA_SAIDA_0100-ANO_VIAGEM           = TG_0060-ANO_VIAGEM.
    WA_SAIDA_0100-NR_VIAGEM            = TG_0060-NR_VIAGEM.
    WA_SAIDA_0100-RM_CODIGO            = TG_0060-RM_CODIGO.

    READ TABLE TG_LFA1 WITH KEY LIFNR = TG_0060-RM_CODIGO.
    IF SY-SUBRC = 0.
      WA_SAIDA_0100-NAME1 = TG_LFA1-NAME1.
    ENDIF.

    WA_SAIDA_0100-MATNR                = TG_0060-MATNR.
    READ TABLE TG_MAKT WITH KEY MATNR = TG_0060-MATNR.
    IF SY-SUBRC = 0.
      WA_SAIDA_0100-MAKTX = TG_MAKT-MAKTX.
    ENDIF.

    WA_SAIDA_0100-DT_CHEGADA           = TG_0060-DT_CHEGADA.
    WA_SAIDA_0100-NFNUM                = TG_0060-NFNUM.
    WA_SAIDA_0100-SERIES               = TG_0060-SERIES.

    LOOP AT TG_0060_NFE WHERE CHAVE_NFE = TG_0060-CHAVE_NFE.
      ADD TG_0060_NFE-PESO_CHEGADA TO WA_SAIDA_0100-PESO_CHEGADA.
      ADD TG_0060_NFE-PESO_FISCAL  TO WA_SAIDA_0100-PESO_FISCAL.
      ADD TG_0060_NFE-PESO_CCT     TO WA_SAIDA_0100-PESO_CCT.
    ENDLOOP.

    READ TABLE TG_0142 WITH KEY CHAVE_NFE = TG_0060-CHAVE_NFE.
    IF SY-SUBRC = 0.
      WA_SAIDA_0100-DISP_CCT  = ICON_OKAY.
    ELSE.
      WA_SAIDA_0100-DISP_CCT  = ICON_LED_YELLOW.
    ENDIF.

    READ TABLE TG_0073 WITH KEY CHAVE_NFE = TG_0060-CHAVE_NFE.

    CHECK SY-SUBRC = 0.

    IF ( TG_0073-PESO_ORIGEM = TG_0073-PESO_VINCULADO ) AND ( TG_0073-PESO_VINCULADO > 0 ).
      WA_SAIDA_0100-VINC_TOT  = ICON_OKAY.
    ELSE.
      WA_SAIDA_0100-VINC_TOT  = ICON_LED_YELLOW.
    ENDIF.

    IF ( WA_SAIDA_0100-PESO_CCT > 0 ) AND ( WA_SAIDA_0100-PESO_CCT <> WA_SAIDA_0100-PESO_FISCAL ).
      CLEAR: WL_COLOR.
      WL_COLOR-FIELDNAME = 'PESO_CCT'.
      WL_COLOR-COLOR-COL = 6.
      WL_COLOR-COLOR-INV = 6.
      APPEND WL_COLOR TO WA_SAIDA_0100-COLOR.
    ENDIF.

    APPEND WA_SAIDA_0100 TO IT_SAIDA_0100.

  ENDLOOP.

  PERFORM F_GET_SALDO_DESCARGA.

ENDFORM.

FORM F_GET_SALDO_DESCARGA.

  DATA: V_PESO_CHEGADA TYPE BRGEW,
        V_PESO_CCT     TYPE BRGEW.

  CLEAR: V_PESO_CHEGADA, V_PESO_CCT, P_SALDO.

  "Check Saldo Descarga para o Remetente
  IF P_REMET-LOW IS NOT INITIAL.

    SELECT SUM( PESO_CHEGADA ) SUM(  PESO_CCT )
      FROM ZLEST0060 AS A INTO ( V_PESO_CHEGADA , V_PESO_CCT )
     WHERE A~BUKRS_ROM       IN P_BUKRS
       AND A~BRANCH_ROM      IN P_BRANCH
       AND A~RM_CODIGO       EQ P_REMET-LOW
       AND A~MATNR           IN P_MATNR
       AND A~TP_TRANSGENIA   IN R_TP_TRANSGENIA
       AND A~DT_CHEGADA      >= '20171001'
       "AND A~DT_CHEGADA      IN P_DTDES
       AND A~DOC_REM         IN R_DOC_REM
       AND A~DOCNUM          NE '0000000000'
       "AND A~ST_CCT          EQ SPACE
       AND A~PESO_CHEGADA    > 0
       AND NOT EXISTS ( SELECT *
                          FROM ZLEST0060 AS B
                         WHERE B~CHAVE_NFE    = A~CHAVE_NFE
                           AND B~PESO_CHEGADA = 0 )
       AND EXISTS (  SELECT *
                      FROM ZLEST0161 AS B
                     WHERE B~LIFNR = A~RM_CODIGO )
       AND EXISTS ( SELECT *
                      FROM ZLEST0073 AS B
                     WHERE B~CHAVE_NFE  = A~CHAVE_NFE )
       AND EXISTS ( SELECT *
                      FROM J_1BNFE_ACTIVE AS B
                     WHERE B~DOCNUM     = A~DOCNUM
                       AND B~DOCSTA     = '1'
                       AND B~CANCEL     = '' )
       AND EXISTS ( SELECT *
                      FROM ZLEST0149 AS B
                     WHERE B~BUKRS   =  A~BUKRS_ROM
                       AND B~BRANCH  =  A~BRANCH_ROM ).

    P_SALDO = V_PESO_CHEGADA - V_PESO_CCT.

  ENDIF.

ENDFORM.


FORM F_MONTAR_ESTRUTURA USING VALUE(P_COL_POS)       TYPE I
                              VALUE(P_REF_TABNAME)   LIKE DD02D-TABNAME
                              VALUE(P_REF_FIELDNAME) LIKE DD03D-FIELDNAME
                              VALUE(P_TABNAME)       LIKE DD02D-TABNAME
                              VALUE(P_FIELD)         LIKE DD03D-FIELDNAME
                              VALUE(P_SCRTEXT_L)     LIKE DD03P-SCRTEXT_L
                              VALUE(P_OUTPUTLEN)
                              VALUE(P_EDIT).

  CLEAR: WA_ESTRUTURA.

  WA_ESTRUTURA-FIELDNAME     = P_FIELD.
  WA_ESTRUTURA-TABNAME       = P_TABNAME.
  WA_ESTRUTURA-REF_TABNAME   = P_REF_TABNAME.
  WA_ESTRUTURA-REF_FIELDNAME = P_REF_FIELDNAME.
  WA_ESTRUTURA-KEY           = ' '.
  WA_ESTRUTURA-KEY_SEL       = 'X'.
  WA_ESTRUTURA-COL_POS       = P_COL_POS.
  WA_ESTRUTURA-NO_OUT        = ' '.
  WA_ESTRUTURA-SELTEXT_S     = P_SCRTEXT_L.
  WA_ESTRUTURA-SELTEXT_M     = P_SCRTEXT_L.
  WA_ESTRUTURA-SELTEXT_L     = P_SCRTEXT_L.

  IF P_SCRTEXT_L IS NOT INITIAL.
    WA_ESTRUTURA-REPTEXT_DDIC  = P_SCRTEXT_L.
  ENDIF.

  WA_ESTRUTURA-OUTPUTLEN = P_OUTPUTLEN.


  TRANSLATE  WA_ESTRUTURA-FIELDNAME     TO UPPER CASE.
  TRANSLATE  WA_ESTRUTURA-TABNAME       TO UPPER CASE.
  TRANSLATE  WA_ESTRUTURA-REF_TABNAME   TO UPPER CASE.
  TRANSLATE  WA_ESTRUTURA-REF_FIELDNAME TO UPPER CASE.

  APPEND WA_ESTRUTURA TO ESTRUTURA.

ENDFORM.                    " MONTAR_ESTRUTURA

FORM F_APLIC_SALDO_NFE .

  PERFORM F_GET_SALDO_DESCARGA.

  DATA(_CHECK_REM) = 'X'.
  IT_SAIDA_0100_AUX[] = IT_SAIDA_0100[].
  SORT IT_SAIDA_0100_AUX BY RM_CODIGO.
  DELETE ADJACENT DUPLICATES FROM IT_SAIDA_0100_AUX COMPARING RM_CODIGO.
  IF LINES( IT_SAIDA_0100_AUX[] ) > 1.
    _CHECK_REM = ''.
  ENDIF.

  IF ( P_REMET-LOW IS INITIAL ) OR ( _CHECK_REM IS INITIAL ).
    MESSAGE 'Informe um remetente!' TYPE 'S'.
    EXIT.
  ENDIF.

  IF P_SALDO <= 0.
    MESSAGE 'Remetente sem saldo!' TYPE 'S'.
    EXIT.
  ENDIF.

  CLEAR: IT_SEL_ROWS[], WA_SEL_ROWS.

  CALL METHOD OBJ_ALV_0100->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SEL_ROWS.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      TITLEBAR              = 'Confirmação'
      TEXT_QUESTION         = 'Deseja realmente aplicar o saldo de descarga para as NF-es?'
      TEXT_BUTTON_1         = 'Sim'
      TEXT_BUTTON_2         = 'Não'
      DEFAULT_BUTTON        = '1'
      DISPLAY_CANCEL_BUTTON = ''
    IMPORTING
      ANSWER                = VAR_ANSWER
    EXCEPTIONS
      TEXT_NOT_FOUND        = 1
      OTHERS                = 2.

  CHECK VAR_ANSWER EQ '1'.

  "Distribuir peso por Ordem Dt.Movimento/Nr.Romaneio
  IT_SAIDA_0100_AUX[] = IT_SAIDA_0100[].
  SORT IT_SAIDA_0100_AUX BY DT_MOVIMENTO NR_ROMANEIO.

  IF LINES( IT_SEL_ROWS[] ) = 1.
    READ TABLE IT_SEL_ROWS INTO WA_SEL_ROWS INDEX 1.
    CHECK SY-SUBRC = 0.

    READ TABLE IT_SAIDA_0100 INTO WA_SAIDA_0100 INDEX WA_SEL_ROWS-INDEX.
    CHECK SY-SUBRC = 0.

    CLEAR: IT_SAIDA_0100_AUX[].
    APPEND WA_SAIDA_0100 TO IT_SAIDA_0100_AUX.
  ENDIF.

  LOOP AT IT_SAIDA_0100_AUX INTO WA_SAIDA_0100.

    IF P_SALDO <= 0.
      EXIT.
    ENDIF.

    CHECK ( WA_SAIDA_0100-PESO_CCT IS INITIAL ) AND ( WA_SAIDA_0100-DISP_CCT = ICON_LED_YELLOW ).

    SELECT *
      FROM ZLEST0060 AS A INTO TABLE @DATA(_TG_0060)
     WHERE A~CHAVE_NFE = @WA_SAIDA_0100-CHAVE_NFE
       AND EXISTS ( SELECT *
                      FROM J_1BNFE_ACTIVE AS B
                     WHERE B~DOCNUM     = A~DOCNUM
                       AND B~DOCSTA     = '1'
                       AND B~CANCEL     = '' ).

    LOOP AT _TG_0060 INTO DATA(_WL_0060) WHERE CHAVE_NFE = WA_SAIDA_0100-CHAVE_NFE.

      IF _WL_0060-PESO_CHEGADA IS INITIAL.
        ROLLBACK WORK.
        MESSAGE | Peso chegada da NF-e { WA_SAIDA_0100-CHAVE_NFE } não encontrado!'| TYPE 'S'.
        RETURN.
      ENDIF.

      IF ( _WL_0060-ST_CCT EQ '01' ) OR
         ( _WL_0060-ST_CCT EQ '02' ).

        SELECT SINGLE *
          FROM ZLEST0142 INTO @DATA(_WL_0142_TMP)
         WHERE CHAVE_NFE EQ @WA_SAIDA_0100-CHAVE_NFE.

        IF SY-SUBRC EQ 0.
          ROLLBACK WORK.
          MESSAGE | NF-e { WA_SAIDA_0100-CHAVE_NFE } já disponibilizada no CCT!'| TYPE 'S'.
          RETURN.
        ENDIF.

      ENDIF.

      CHECK _WL_0060-PESO_CCT IS INITIAL.

      IF P_SALDO >= _WL_0060-PESO_FISCAL.
        _WL_0060-PESO_CCT = _WL_0060-PESO_FISCAL.
      ENDIF.

      IF _WL_0060-PESO_CCT IS INITIAL.

        IF ( LINES( IT_SEL_ROWS[] ) = 1 ) AND ( P_SALDO < _WL_0060-PESO_FISCAL ).
          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              TITLEBAR              = 'Confirmação'
              TEXT_QUESTION         = |Deseja realmente aplicar o saldo: { P_SALDO } na NF-e selecionada?|
              TEXT_BUTTON_1         = 'Sim'
              TEXT_BUTTON_2         = 'Não'
              DEFAULT_BUTTON        = '1'
              DISPLAY_CANCEL_BUTTON = ''
            IMPORTING
              ANSWER                = VAR_ANSWER
            EXCEPTIONS
              TEXT_NOT_FOUND        = 1
              OTHERS                = 2.

          CHECK VAR_ANSWER EQ '1'.

          _WL_0060-PESO_CCT = P_SALDO.

        ENDIF.

      ENDIF.

      CHECK _WL_0060-PESO_CCT IS NOT INITIAL.

      MODIFY ZLEST0060 FROM _WL_0060.

      IF SY-SUBRC NE 0.
        ROLLBACK WORK.
        MESSAGE | Houve um erro na atualização do peso da NF-e { WA_SAIDA_0100-CHAVE_NFE }!'| TYPE 'S'.
        RETURN.
      ENDIF.

      SUBTRACT _WL_0060-PESO_CCT FROM P_SALDO.

    ENDLOOP.

  ENDLOOP.

  "Check se Saldo Ficou Negativo
  PERFORM F_GET_SALDO_DESCARGA.

  IF P_SALDO < 0.
    ROLLBACK WORK.
    MESSAGE | Houve um erro na atualização dos pesos(Saldo Negativo)!'| TYPE 'S'.
    RETURN.
  ENDIF.

ENDFORM.

FORM F_DISP_CCT.

  DATA: LT_ZLEST0061 TYPE TABLE OF ZLEST0061,
        LS_ZLEST0061 TYPE ZLEST0061,
        LT_ZLEST0060 TYPE TABLE OF ZLEST0060,
        LS_ZLEST0060 TYPE ZLEST0060,
        LT_ZLEST0142 TYPE TABLE OF ZLEST0142,
        LS_ZLEST0142 TYPE ZLEST0142.

  CLEAR: IT_SEL_ROWS[], WA_SEL_ROWS.

  CALL METHOD OBJ_ALV_0100->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SEL_ROWS.

  CHECK IT_SEL_ROWS[] IS NOT INITIAL.

  IF IT_SEL_ROWS[] IS INITIAL.
    MESSAGE 'Selecione pelo menos uma linha!' TYPE 'S'.
    EXIT.
  ENDIF.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      TITLEBAR              = 'Confirmação'
      TEXT_QUESTION         = 'Deseja realmente enviar o(s) registro(s) selecionado(s) para o CCT?'
      TEXT_BUTTON_1         = 'Sim'
      TEXT_BUTTON_2         = 'Não'
      DEFAULT_BUTTON        = '1'
      DISPLAY_CANCEL_BUTTON = ''
    IMPORTING
      ANSWER                = VAR_ANSWER
    EXCEPTIONS
      TEXT_NOT_FOUND        = 1
      OTHERS                = 2.

  CHECK VAR_ANSWER EQ '1'.

  LOOP AT IT_SEL_ROWS INTO WA_SEL_ROWS.

    CLEAR: LT_ZLEST0060[], LS_ZLEST0142.

    READ TABLE IT_SAIDA_0100 ASSIGNING FIELD-SYMBOL(<SAIDA_0100>) INDEX WA_SEL_ROWS-INDEX.

    CHECK ( SY-SUBRC = 0 ) AND ( <SAIDA_0100>-DISP_CCT = ICON_LED_YELLOW ) AND ( <SAIDA_0100>-PESO_CCT > 0 ).

    SELECT *
      FROM ZLEST0060 AS A INTO TABLE LT_ZLEST0060
     WHERE A~CHAVE_NFE EQ <SAIDA_0100>-CHAVE_NFE
       AND EXISTS ( SELECT *
                      FROM J_1BNFE_ACTIVE AS B
                     WHERE B~DOCNUM     = A~DOCNUM
                       AND B~DOCSTA     = '1'
                       AND B~CANCEL     = '' ).

    IF LT_ZLEST0060[] IS INITIAL.
      ROLLBACK WORK.
      MESSAGE | Registros NF-e { LS_ZLEST0060-CHAVE_NFE } não encontrados(ZLEST0060)!'| TYPE 'S'.
      RETURN.
    ENDIF.

    LOOP AT LT_ZLEST0060 INTO LS_ZLEST0060 WHERE ( ST_CCT EQ '01' ) OR ( ST_CCT EQ '02' ).

      SELECT SINGLE *
        FROM ZLEST0142 INTO @DATA(_WL_0142_TMP)
       WHERE CHAVE_NFE EQ @LS_ZLEST0060-CHAVE_NFE.

      IF SY-SUBRC EQ 0.
        ROLLBACK WORK.
        MESSAGE | NF-e { LS_ZLEST0060-CHAVE_NFE } já disponibilizada no CCT!'| TYPE 'S'.
        RETURN.
      ENDIF.
    ENDLOOP.

    SORT LT_ZLEST0060 BY DT_CHEGADA HR_CHEGADA DESCENDING.

    READ TABLE LT_ZLEST0060 INTO LS_ZLEST0060 INDEX 1.

    CHECK SY-SUBRC = 0.

    IF ( LS_ZLEST0060-CHAVE_NFE IS INITIAL ) OR ( STRLEN( LS_ZLEST0060-CHAVE_NFE ) NE 44 ).
      ROLLBACK WORK.
      MESSAGE 'Existem notas com chave NF-e incompleta!' TYPE 'S'.
      RETURN.
    ENDIF.

    LS_ZLEST0142-CHAVE_NFE        = LS_ZLEST0060-CHAVE_NFE.
    LS_ZLEST0142-CNPJ_EMISSOR     = LS_ZLEST0060-CHAVE_NFE+06(14).
    LS_ZLEST0142-NUMERO           = LS_ZLEST0060-CHAVE_NFE+25(9).
    LS_ZLEST0142-SERIE            = LS_ZLEST0060-CHAVE_NFE+22(3).
    LS_ZLEST0142-DT_EMISSAO       = LS_ZLEST0060-DOCDAT.
    LS_ZLEST0142-MODEL            = LS_ZLEST0060-CHAVE_NFE+20(2).
    LS_ZLEST0142-DT_CHEGADA       = LS_ZLEST0060-DT_CHEGADA.
    LS_ZLEST0142-HR_CHEGADA       = LS_ZLEST0060-HR_CHEGADA.
    LS_ZLEST0142-BUKRS_ROM        = LS_ZLEST0060-BUKRS_ROM.
    LS_ZLEST0142-BRANCH_ROM       = LS_ZLEST0060-BRANCH_ROM.
    LS_ZLEST0142-BUKRS_RA         = LS_ZLEST0060-BUKRS_ROM.
    LS_ZLEST0142-BRANCH_RA        = LS_ZLEST0060-BRANCH_ROM.
    LS_ZLEST0142-RM_CODIGO        = LS_ZLEST0060-RM_CODIGO.
    LS_ZLEST0142-MATNR            = LS_ZLEST0060-MATNR.
    LS_ZLEST0142-MODAL            = '03'. "Aquaviário

    "Chave CT-e
    PERFORM F_ATRIB_CHAVE USING LS_ZLEST0060-DOCNUM
                       CHANGING LS_ZLEST0142.

    IF ( LS_ZLEST0142-CHAVE_CTE IS INITIAL ) OR ( STRLEN( LS_ZLEST0142-CHAVE_CTE ) NE 44 ).
      ROLLBACK WORK.
      MESSAGE |Chave NF-e { LS_ZLEST0060-CHAVE_NFE } com chave CT-e incompleta!| TYPE 'S'.
      RETURN.
    ENDIF.

    SELECT SINGLE *
      FROM ZSDT0001 INTO @DATA(WL_ZSDT0001)
     WHERE CH_REFERENCIA = @LS_ZLEST0060-CH_REFERENCIA.

    IF SY-SUBRC NE 0.
      ROLLBACK WORK.
      MESSAGE |Romaneio: { LS_ZLEST0060-CH_REFERENCIA } não encontrado!| TYPE 'S'.
      RETURN.
    ENDIF.

    LS_ZLEST0142-LOCAL_DESCARGA   = WL_ZSDT0001-LOCAL_DESCARGA.
    LS_ZLEST0142-DATA_REG         = SY-DATUM.
    LS_ZLEST0142-HORA_REG         = SY-UZEIT.

    LOOP AT LT_ZLEST0060 INTO LS_ZLEST0060.
      ADD LS_ZLEST0060-PESO_CCT     TO LS_ZLEST0142-PESO_CHEGADA.
      ADD LS_ZLEST0060-PESO_FISCAL  TO LS_ZLEST0142-PESO_FISCAL.
    ENDLOOP.

    FREE ZCL_CCT_CONTROL_NF.
    CREATE OBJECT ZCL_CCT_CONTROL_NF.
    ZCL_CCT_CONTROL_NF->ATRIBUIR_NF( I_ZLEST0142 = LS_ZLEST0142 ).
    DATA(_DISPONIBILIZADA) = ZCL_CCT_CONTROL_NF->DISP_NF_CCT( ).

    IF _DISPONIBILIZADA EQ ABAP_TRUE.
      <SAIDA_0100>-DISP_CCT = ICON_OKAY.
      DATA(_DISP_CCT) = 'X'.
    ENDIF.

  ENDLOOP.

  IF _DISP_CCT IS NOT INITIAL.
    MESSAGE 'Notas selecionada(s), disponibilizada(s) para registro de CCT com sucesso!' TYPE 'S'.
    LEAVE TO SCREEN 0100.
  ENDIF.

ENDFORM.

FORM F_REMOV_APLIC_SALDO.

  CLEAR: IT_SEL_ROWS[], WA_SEL_ROWS.

  CALL METHOD OBJ_ALV_0100->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SEL_ROWS.

  CHECK IT_SEL_ROWS[] IS NOT INITIAL.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      TITLEBAR              = 'Confirmação'
      TEXT_QUESTION         = 'Deseja realmente remover o saldo de descarga aplicado para a(s) NF-e(s) selecionada(s)?'
      TEXT_BUTTON_1         = 'Sim'
      TEXT_BUTTON_2         = 'Não'
      DEFAULT_BUTTON        = '1'
      DISPLAY_CANCEL_BUTTON = ''
    IMPORTING
      ANSWER                = VAR_ANSWER
    EXCEPTIONS
      TEXT_NOT_FOUND        = 1
      OTHERS                = 2.

  CHECK VAR_ANSWER EQ '1'.

  LOOP AT IT_SEL_ROWS INTO WA_SEL_ROWS.

    READ TABLE IT_SAIDA_0100 INTO WA_SAIDA_0100 INDEX WA_SEL_ROWS-INDEX.

    CHECK SY-SUBRC = 0.

    SELECT *
      FROM ZLEST0060 INTO TABLE @DATA(_TG_0060)
     WHERE CHAVE_NFE = @WA_SAIDA_0100-CHAVE_NFE.

    LOOP AT _TG_0060 INTO DATA(_WL_0060) WHERE CHAVE_NFE = WA_SAIDA_0100-CHAVE_NFE.

      CHECK _WL_0060-PESO_CCT IS NOT INITIAL.

      SELECT SINGLE *
        FROM ZLEST0142 INTO @DATA(LS_ZLEST0142)
       WHERE CHAVE_NFE EQ @_WL_0060-CHAVE_NFE.

      IF SY-SUBRC EQ 0.
        ROLLBACK WORK.
        MESSAGE | NF-e { _WL_0060-CHAVE_NFE } já disponibilizada no CCT!'| TYPE 'S'.
        RETURN.
      ENDIF.

      CLEAR: _WL_0060-PESO_CCT.

      MODIFY ZLEST0060 FROM _WL_0060.

      IF SY-SUBRC NE 0.
        ROLLBACK WORK.
        MESSAGE | Houve um erro na atualização do peso da NF-e { WA_SAIDA_0100-CHAVE_NFE }!'| TYPE 'S'.
        RETURN.
      ENDIF.

    ENDLOOP.

  ENDLOOP.

ENDFORM.

FORM F_ATRIB_CHAVE  USING P_DOCNUM    TYPE ZLEST0060-DOCNUM
                 CHANGING P_ZLEST0142 TYPE ZLEST0142.

  CHECK P_DOCNUM IS NOT INITIAL.

  SELECT SINGLE *
    FROM J_1BNFE_ACTIVE INTO @DATA(_WL_ACTIVE)
   WHERE DOCNUM EQ @P_DOCNUM.

  CHECK SY-SUBRC = 0.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT     = _WL_ACTIVE-SERIE
    IMPORTING
      OUTPUT    = _WL_ACTIVE-SERIE.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT     = _WL_ACTIVE-NFNUM9
    IMPORTING
      OUTPUT    = _WL_ACTIVE-NFNUM9.


  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT     = _WL_ACTIVE-DOCNUM9
    IMPORTING
      OUTPUT    = _WL_ACTIVE-DOCNUM9.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT     = _WL_ACTIVE-STCD1
    IMPORTING
      OUTPUT    = _WL_ACTIVE-STCD1.

  CONCATENATE _WL_ACTIVE-REGIO
              _WL_ACTIVE-NFYEAR
              _WL_ACTIVE-NFMONTH
              _WL_ACTIVE-STCD1
              _WL_ACTIVE-MODEL
              _WL_ACTIVE-SERIE
              _WL_ACTIVE-NFNUM9
              _WL_ACTIVE-DOCNUM9
              _WL_ACTIVE-CDV INTO P_ZLEST0142-CHAVE_CTE.

  P_ZLEST0142-CNPJ_TRANSP =  _WL_ACTIVE-STCD1.

ENDFORM.

FORM F_REMOVER_CCT.

  DATA: LT_ZLEST0061 TYPE TABLE OF ZLEST0061,
        LS_ZLEST0061 TYPE ZLEST0061,
        LT_ZLEST0060 TYPE TABLE OF ZLEST0060,
        LS_ZLEST0060 TYPE ZLEST0060,
        LT_ZLEST0142 TYPE TABLE OF ZLEST0142,
        LS_ZLEST0142 TYPE ZLEST0142.

  CLEAR: IT_SEL_ROWS[], WA_SEL_ROWS.

  CALL METHOD OBJ_ALV_0100->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SEL_ROWS.

  CHECK IT_SEL_ROWS[] IS NOT INITIAL.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      TITLEBAR              = 'Confirmação'
      TEXT_QUESTION         = 'Deseja realmente remover o(s) registro(s) selecionado(s) do CCT?'
      TEXT_BUTTON_1         = 'Sim'
      TEXT_BUTTON_2         = 'Não'
      DEFAULT_BUTTON        = '1'
      DISPLAY_CANCEL_BUTTON = ''
    IMPORTING
      ANSWER                = VAR_ANSWER
    EXCEPTIONS
      TEXT_NOT_FOUND        = 1
      OTHERS                = 2.

  CHECK VAR_ANSWER EQ '1'.

  DATA(_REM_CCT) = ABAP_FALSE.
  LOOP AT IT_SEL_ROWS INTO WA_SEL_ROWS.

    CLEAR: LT_ZLEST0060[], LS_ZLEST0142.

    READ TABLE IT_SAIDA_0100 ASSIGNING FIELD-SYMBOL(<SAIDA_0100>) INDEX WA_SEL_ROWS-INDEX.

    CHECK ( SY-SUBRC = 0 ) AND ( <SAIDA_0100>-DISP_CCT = ICON_OKAY ) AND ( <SAIDA_0100>-CHAVE_NFE IS NOT INITIAL ).

    SELECT SINGLE *
      FROM ZLEST0142 INTO LS_ZLEST0142
     WHERE CHAVE_NFE EQ <SAIDA_0100>-CHAVE_NFE.

    IF ( SY-SUBRC = 0 ).

      FREE ZCL_CCT_CONTROL_NF.
      CREATE OBJECT ZCL_CCT_CONTROL_NF.
      DATA(_REMOVIDA) = ZCL_CCT_CONTROL_NF->REMOVER_NF_CCT( I_ZLEST0142 = LS_ZLEST0142 ).
      IF _REMOVIDA EQ ABAP_TRUE.
        _REM_CCT = ABAP_TRUE.
        <SAIDA_0100>-DISP_CCT = ICON_LED_YELLOW.
      ENDIF.

    ELSE.

      UPDATE ZLEST0060 SET ST_CCT = SPACE " Não utilizado
       WHERE CHAVE_NFE = <SAIDA_0100>-CHAVE_NFE.

      UPDATE ZSDT0001 SET ST_CCT = SPACE " Não utilizado
       WHERE CH_REFERENCIA = <SAIDA_0100>-CH_REFERENCIA.

      _REM_CCT = ABAP_TRUE.
      <SAIDA_0100>-DISP_CCT = ICON_LED_YELLOW.

    ENDIF.

  ENDLOOP.

  IF _REM_CCT IS NOT INITIAL.
    MESSAGE 'Notas selecionada(s), removida(s) do registro de CCT com sucesso!' TYPE 'S'.
    LEAVE TO SCREEN 0100.
  ENDIF.

ENDFORM.
