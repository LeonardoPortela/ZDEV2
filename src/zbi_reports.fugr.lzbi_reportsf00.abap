*---------------------------------------------------------------------*
*    view related FORM routines
*---------------------------------------------------------------------*
*...processing: ZBIT0001VW......................................*
FORM GET_DATA_ZBIT0001VW.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZBIT0001 WHERE
(VIM_WHERETAB) .
    CLEAR ZBIT0001VW .
ZBIT0001VW-MANDT =
ZBIT0001-MANDT .
ZBIT0001VW-DS_DOMINIO =
ZBIT0001-DS_DOMINIO .
ZBIT0001VW-DS_DOMINIO_DEV =
ZBIT0001-DS_DOMINIO_DEV .
ZBIT0001VW-DS_DOMINIO_QAS =
ZBIT0001-DS_DOMINIO_QAS .
<VIM_TOTAL_STRUC> = ZBIT0001VW.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZBIT0001VW .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZBIT0001VW.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZBIT0001VW-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZBIT0001.
    IF SY-SUBRC = 0.
    DELETE ZBIT0001 .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZBIT0001.
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZBIT0001.
    ENDIF.
ZBIT0001-MANDT =
ZBIT0001VW-MANDT .
ZBIT0001-DS_DOMINIO =
ZBIT0001VW-DS_DOMINIO .
ZBIT0001-DS_DOMINIO_DEV =
ZBIT0001VW-DS_DOMINIO_DEV .
ZBIT0001-DS_DOMINIO_QAS =
ZBIT0001VW-DS_DOMINIO_QAS .
    IF SY-SUBRC = 0.
    UPDATE ZBIT0001 .
    ELSE.
    INSERT ZBIT0001 .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZBIT0001VW-UPD_FLAG,
STATUS_ZBIT0001VW-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_ZBIT0001VW.
  SELECT SINGLE * FROM ZBIT0001.
ZBIT0001VW-MANDT =
ZBIT0001-MANDT .
ZBIT0001VW-DS_DOMINIO =
ZBIT0001-DS_DOMINIO .
ZBIT0001VW-DS_DOMINIO_DEV =
ZBIT0001-DS_DOMINIO_DEV .
ZBIT0001VW-DS_DOMINIO_QAS =
ZBIT0001-DS_DOMINIO_QAS .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZBIT0001VW USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZBIT0001VW-MANDT TO
ZBIT0001-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZBIT0001'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZBIT0001 TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZBIT0001'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZBIT0002VW......................................*
FORM GET_DATA_ZBIT0002VW.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZBIT0002 WHERE
(VIM_WHERETAB) .
    CLEAR ZBIT0002VW .
ZBIT0002VW-MANDT =
ZBIT0002-MANDT .
ZBIT0002VW-TP_ACESSO =
ZBIT0002-TP_ACESSO .
ZBIT0002VW-DS_ARQUIVO =
ZBIT0002-DS_ARQUIVO .
<VIM_TOTAL_STRUC> = ZBIT0002VW.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZBIT0002VW .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZBIT0002VW.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZBIT0002VW-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZBIT0002 WHERE
  TP_ACESSO = ZBIT0002VW-TP_ACESSO .
    IF SY-SUBRC = 0.
    DELETE ZBIT0002 .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZBIT0002 WHERE
  TP_ACESSO = ZBIT0002VW-TP_ACESSO .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZBIT0002.
    ENDIF.
ZBIT0002-MANDT =
ZBIT0002VW-MANDT .
ZBIT0002-TP_ACESSO =
ZBIT0002VW-TP_ACESSO .
ZBIT0002-DS_ARQUIVO =
ZBIT0002VW-DS_ARQUIVO .
    IF SY-SUBRC = 0.
    UPDATE ZBIT0002 .
    ELSE.
    INSERT ZBIT0002 .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZBIT0002VW-UPD_FLAG,
STATUS_ZBIT0002VW-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_ZBIT0002VW.
  SELECT SINGLE * FROM ZBIT0002 WHERE
TP_ACESSO = ZBIT0002VW-TP_ACESSO .
ZBIT0002VW-MANDT =
ZBIT0002-MANDT .
ZBIT0002VW-TP_ACESSO =
ZBIT0002-TP_ACESSO .
ZBIT0002VW-DS_ARQUIVO =
ZBIT0002-DS_ARQUIVO .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZBIT0002VW USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZBIT0002VW-TP_ACESSO TO
ZBIT0002-TP_ACESSO .
MOVE ZBIT0002VW-MANDT TO
ZBIT0002-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZBIT0002'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZBIT0002 TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZBIT0002'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZBIT0003VW......................................*
FORM GET_DATA_ZBIT0003VW.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZBIT0003 WHERE
(VIM_WHERETAB) .
    CLEAR ZBIT0003VW .
ZBIT0003VW-MANDT =
ZBIT0003-MANDT .
ZBIT0003VW-DS_NOME_TECNICO =
ZBIT0003-DS_NOME_TECNICO .
ZBIT0003VW-DS_REPORT =
ZBIT0003-DS_REPORT .
ZBIT0003VW-DS_CUID =
ZBIT0003-DS_CUID .
ZBIT0003VW-DS_CUID_DEV =
ZBIT0003-DS_CUID_DEV .
ZBIT0003VW-DS_CUID_QAS =
ZBIT0003-DS_CUID_QAS .
<VIM_TOTAL_STRUC> = ZBIT0003VW.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZBIT0003VW .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZBIT0003VW.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZBIT0003VW-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZBIT0003 WHERE
  DS_NOME_TECNICO = ZBIT0003VW-DS_NOME_TECNICO .
    IF SY-SUBRC = 0.
    DELETE ZBIT0003 .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZBIT0003 WHERE
  DS_NOME_TECNICO = ZBIT0003VW-DS_NOME_TECNICO .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZBIT0003.
    ENDIF.
ZBIT0003-MANDT =
ZBIT0003VW-MANDT .
ZBIT0003-DS_NOME_TECNICO =
ZBIT0003VW-DS_NOME_TECNICO .
ZBIT0003-DS_REPORT =
ZBIT0003VW-DS_REPORT .
ZBIT0003-DS_CUID =
ZBIT0003VW-DS_CUID .
ZBIT0003-DS_CUID_DEV =
ZBIT0003VW-DS_CUID_DEV .
ZBIT0003-DS_CUID_QAS =
ZBIT0003VW-DS_CUID_QAS .
    IF SY-SUBRC = 0.
    UPDATE ZBIT0003 .
    ELSE.
    INSERT ZBIT0003 .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZBIT0003VW-UPD_FLAG,
STATUS_ZBIT0003VW-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_ZBIT0003VW.
  SELECT SINGLE * FROM ZBIT0003 WHERE
DS_NOME_TECNICO = ZBIT0003VW-DS_NOME_TECNICO .
ZBIT0003VW-MANDT =
ZBIT0003-MANDT .
ZBIT0003VW-DS_NOME_TECNICO =
ZBIT0003-DS_NOME_TECNICO .
ZBIT0003VW-DS_REPORT =
ZBIT0003-DS_REPORT .
ZBIT0003VW-DS_CUID =
ZBIT0003-DS_CUID .
ZBIT0003VW-DS_CUID_DEV =
ZBIT0003-DS_CUID_DEV .
ZBIT0003VW-DS_CUID_QAS =
ZBIT0003-DS_CUID_QAS .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZBIT0003VW USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZBIT0003VW-DS_NOME_TECNICO TO
ZBIT0003-DS_NOME_TECNICO .
MOVE ZBIT0003VW-MANDT TO
ZBIT0003-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZBIT0003'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZBIT0003 TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZBIT0003'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*

* base table related FORM-routines.............
INCLUDE LSVIMFTX .
