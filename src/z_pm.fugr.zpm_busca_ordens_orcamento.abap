FUNCTION ZPM_BUSCA_ORDENS_ORCAMENTO.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(I_USER) TYPE  SY-UNAME DEFAULT SY-UNAME
*"     REFERENCE(I_AUFNR) TYPE  AUFK-AUFNR OPTIONAL
*"  EXPORTING
*"     REFERENCE(E_LINES) TYPE  NUMC2
*"  TABLES
*"      T_ORDENS STRUCTURE  ZPMR0003 OPTIONAL
*"----------------------------------------------------------------------

* Declaração dos tipos de dados globais
  TYPES:   BEGIN OF TY_ORDENS.
             INCLUDE  TYPE ZPMR0003.
           TYPES:    END OF TY_ORDENS,

           BEGIN OF TY_IHSG,
             OBJNR      TYPE  IHSG-OBJNR,
             COUNTER    TYPE  IHSG-COUNTER,
             ERNAM      TYPE  IHSG-ERNAM,
             PMSOG      TYPE  IHSG-PMSOG,
             NIVEL      TYPE  ZPMR0002-NIVEL,
             APROVADOR  TYPE  ZPMR0002-APROVADOR,
             USUA_SUBST TYPE  ZPMR0002-USUA_SUBST,
             DATA_LIM   TYPE  ZPMR0002-DATA_LIM,
             CHECK(1),
           END OF TY_IHSG.

*** Tabelas
  DATA: GT_ORDENS     TYPE TABLE OF TY_ORDENS,
        GT_ORDENS_AUX TYPE TABLE OF TY_ORDENS WITH HEADER LINE,
        IT_ORDENS     TYPE TABLE OF TY_ORDENS,
        T_ORDENS_AUX  TYPE TABLE OF ZPMR0003,
        IT_IHSG       TYPE TABLE OF TY_IHSG,
        LW_ORDENS     TYPE ZPMR0003,
        OBJNR_        TYPE J_OBJNR,
        OBJNR_AUX     TYPE J_OBJNR,
        NIVEL_        TYPE NUMC10,
        GT_ZPMR0002   TYPE TABLE OF ZPMR0002 WITH HEADER LINE,
        ZT_ZPMR0002   TYPE TABLE OF ZPMR0002 WITH HEADER LINE,
        ORDER_TYPES   TYPE RSIS_T_RANGE,
        R_WERKS       TYPE RSIS_T_RANGE.

  SELECT *
   FROM ZPMR0002
   INTO CORRESPONDING FIELDS OF TABLE GT_ZPMR0002
   WHERE APROVADOR  EQ I_USER
      OR USUA_SUBST EQ I_USER. "Anderson Oenning

  LOOP AT GT_ZPMR0002 ASSIGNING FIELD-SYMBOL(<WA_ESTRATEGIA>).
    IF <WA_ESTRATEGIA>-APROVADOR IS NOT INITIAL
      AND <WA_ESTRATEGIA>-USUA_SUBST IS NOT INITIAL
      AND <WA_ESTRATEGIA>-DATA_LIM >= SY-DATUM.
      <WA_ESTRATEGIA>-APROVADOR = <WA_ESTRATEGIA>-USUA_SUBST.
    ENDIF.
  ENDLOOP.

  DELETE GT_ZPMR0002 WHERE APROVADOR NE I_USER.
  CHECK GT_ZPMR0002[] IS NOT INITIAL.

* Range de centro
  R_WERKS = VALUE #( FOR LS1 IN GT_ZPMR0002 ( SIGN = 'I' OPTION = 'EQ' LOW = LS1-CENTRO_DESP ) ).

  SELECT *
    FROM ZTPARAM
    INTO TABLE @DATA(_PARAMETERS)
   WHERE PARAM = 'TP_ORDEM'
     AND CONST IN @R_WERKS.

* Range de tipo de Ordens
  ORDER_TYPES = VALUE #( FOR LS2 IN _PARAMETERS ( SIGN = 'I' OPTION = 'EQ' LOW = LS2-ZVAL ) ).

  SORT ORDER_TYPES BY LOW.
  DELETE ADJACENT DUPLICATES FROM ORDER_TYPES COMPARING LOW.

* Seleção das Ordens para aprovar
  SELECT DISTINCT A~MANDT WERKS A~ERDAT H~EQUNR E~EQKTX A~AUFNR A~OBJNR A~KTEXT A~USER4 A~ERFZEIT I~COUNTER H~IWERK I~PMSOG
    INTO CORRESPONDING FIELDS OF TABLE GT_ORDENS_AUX
    FROM AUFK AS A
    INNER JOIN IHSG  AS I ON I~OBJNR EQ A~OBJNR
    INNER JOIN AFIH  AS H ON H~AUFNR EQ A~AUFNR
    LEFT  JOIN EQKT  AS E ON E~EQUNR EQ H~EQUNR
    FOR ALL ENTRIES IN GT_ZPMR0002
    WHERE ( A~PHAS0 EQ ABAP_TRUE  AND
            A~PHAS1 EQ ABAP_FALSE )
      AND A~AUART IN ORDER_TYPES
      AND A~WERKS EQ GT_ZPMR0002-CENTRO_DESP
      AND I~LVORM EQ ABAP_FALSE.

  CHECK GT_ORDENS_AUX[] IS NOT INITIAL.
  SORT GT_ORDENS_AUX[] BY AUFNR COUNTER.

  LOOP AT GT_ORDENS_AUX.
    IF OBJNR_AUX NE GT_ORDENS_AUX-OBJNR.
      OBJNR_AUX = GT_ORDENS_AUX-OBJNR.
    ELSE.
      CONTINUE.
    ENDIF.

    FREE GT_ORDENS.
    GT_ORDENS = VALUE #( FOR LS IN GT_ORDENS_AUX WHERE ( OBJNR EQ GT_ORDENS_AUX-OBJNR ) ( LS ) ).

* get nos dados que já estão aprovados
    SELECT *
      FROM IHGNS
      INTO TABLE @DATA(GT_IHGNS)
      FOR ALL ENTRIES IN @GT_ORDENS
      WHERE OBJNR   EQ @GT_ORDENS-OBJNR
       AND  COUNTER EQ @GT_ORDENS-COUNTER
       AND  GENIAKT EQ @ABAP_FALSE.

    SORT GT_IHGNS BY OBJNR COUNTER ASCENDING GENDATUM DESCENDING GENTIME DESCENDING.

* get nos dados com o Nivel de cada Ordem
    FREE IT_IHSG.
    SELECT DISTINCT A~OBJNR A~COUNTER A~ERNAM A~PMSOG B~NIVEL B~APROVADOR B~USUA_SUBST B~DATA_LIM
      FROM IHSG AS A
      INNER JOIN ZPMR0002 AS B ON B~PERMIT EQ A~PMSOG
        INTO CORRESPONDING FIELDS OF TABLE IT_IHSG
          FOR ALL ENTRIES IN GT_ORDENS
            WHERE OBJNR   EQ GT_ORDENS-OBJNR
             AND  COUNTER EQ GT_ORDENS-COUNTER
             AND  B~CENTRO_DESP EQ GT_ORDENS-WERKS.

    SORT IT_IHSG BY OBJNR NIVEL.

* Desmarca o Check da Ordem a ser aprovada
    LOOP AT IT_IHSG ASSIGNING FIELD-SYMBOL(<WA2>) WHERE CHECK IS INITIAL.
      IF LINE_EXISTS( GT_IHGNS[ OBJNR = <WA2>-OBJNR COUNTER = <WA2>-COUNTER ] ).
        <WA2>-CHECK = ABAP_TRUE.
      ENDIF.

      IF <WA2>-USUA_SUBST IS NOT INITIAL AND <WA2>-DATA_LIM >= SY-DATUM .
        <WA2>-APROVADOR = <WA2>-USUA_SUBST. "Anderson Oenning
      ENDIF.
    ENDLOOP.

* deleta todas as Ordens com Check e diferente do aprovador selecionado
    DELETE IT_IHSG WHERE CHECK IS NOT INITIAL.

    SORT IT_IHSG BY OBJNR NIVEL.
    CLEAR: OBJNR_, NIVEL_.
    LOOP AT IT_IHSG ASSIGNING <WA2>.
      IF OBJNR_ NE <WA2>-OBJNR AND NIVEL_ NE <WA2>-NIVEL.
        OBJNR_ = <WA2>-OBJNR.
        NIVEL_ = <WA2>-NIVEL.
        CONTINUE.
      ENDIF.

      IF OBJNR_ EQ <WA2>-OBJNR AND NIVEL_ EQ <WA2>-NIVEL.
        CONTINUE.
      ENDIF.
      <WA2>-CHECK = ABAP_TRUE.
    ENDLOOP.

* deleta todas as Ordens com Check
    DELETE IT_IHSG WHERE CHECK IS NOT INITIAL.
    DELETE IT_IHSG WHERE APROVADOR NE I_USER .

* adiciona na saida todas as Ordens que estão no IHSG
    IT_ORDENS = VALUE #( FOR LS3 IN GT_ORDENS
                         FOR LS4 IN  IT_IHSG WHERE ( OBJNR = LS3-OBJNR AND COUNTER = LS3-COUNTER )
                        ( CORRESPONDING #( LS3 ) )
                      ).

    LOOP AT IT_ORDENS INTO DATA(LS_ORDENS).
      MOVE-CORRESPONDING LS_ORDENS TO LW_ORDENS.
      APPEND LW_ORDENS TO T_ORDENS[].
    ENDLOOP.
  ENDLOOP.

*  APPEND LINES OF T_ORDENS TO T_ORDENS_AUX.
*  FREE T_ORDENS.
*
*  LOOP AT GT_ZPMR0002 INTO DATA(W_0002).
*    LOOP AT T_ORDENS_AUX ASSIGNING FIELD-SYMBOL(<ORDEM>).
*      IF <ORDEM>-USER4 BETWEEN W_0002-VALOR_DE AND W_0002-VALOR_ATE.
*        CLEAR <ORDEM>-WERT2.
*        APPEND <ORDEM> TO T_ORDENS.
*      ENDIF.
*    ENDLOOP.
*  ENDLOOP.

  "//Verifica se há Ordens Reprovadas
  SELECT  *
    FROM ZPMR0006
    INTO TABLE @DATA(HISTORICO)
    FOR ALL ENTRIES IN @T_ORDENS
   WHERE AUFNR  = @T_ORDENS-AUFNR
     AND STATUS = 'R'.

  IF SY-SUBRC IS INITIAL.
    LOOP AT HISTORICO  INTO DATA(WA).
      LOOP AT T_ORDENS ASSIGNING FIELD-SYMBOL(<WA1>) WHERE AUFNR EQ WA-AUFNR.
        IF ( WA-VLR_ESTIMADO EQ <WA1>-USER4 ).
          <WA1>-STATUS = 'R'.
        ELSE.
          <WA1>-STATUS = 'P'.
          DELETE FROM ZPMR0006 WHERE AUFNR = <WA1>-AUFNR.
        ENDIF.
      ENDLOOP.
    ENDLOOP.
  ENDIF.

ENDFUNCTION.
