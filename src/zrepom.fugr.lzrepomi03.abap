*----------------------------------------------------------------------*
***INCLUDE LZREPOMI03.
*----------------------------------------------------------------------*

CLASS LCL_EVENT_HANDLER_0003 DEFINITION.
  PUBLIC SECTION.
    METHODS HANDLE_HOTSPOT_CLICK FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID IMPORTING E_COLUMN_ID ES_ROW_NO.
    METHODS HANDLE_DOUBLE_CLICK  FOR EVENT DOUBLE_CLICK  OF CL_GUI_ALV_GRID IMPORTING E_ROW E_COLUMN ES_ROW_NO.
ENDCLASS.                    "lcl_event_handler DEFINITION

DATA: EVENT_HANDLER_0003     TYPE REF TO LCL_EVENT_HANDLER_0003.

DATA: CTL_ALV_0003           TYPE REF TO CL_GUI_ALV_GRID,
      CTL_ALV_0003_3         TYPE REF TO CL_GUI_ALV_GRID,
      CTL_CCCONTAINER_0003   TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      DG_SPLITTER_0003       TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      CTL_CCCONTAINER_0003_2 TYPE REF TO CL_GUI_CONTAINER,
      CTL_CCCONTAINER_0003_3 TYPE REF TO CL_GUI_CONTAINER,
      GS_LAYOUT_0003         TYPE LVC_S_LAYO,
      GS_VARIANT_0003        TYPE DISVARIANT,
      GS_LAYOUT_0003_3       TYPE LVC_S_LAYO,
      GS_VARIANT_0003_3      TYPE DISVARIANT,
      IT_FIELDCATALOG_0003   TYPE LVC_T_FCAT,
      IT_FIELDCATALOG_0003_3 TYPE LVC_T_FCAT,
      WA_FIELDCATALOG_0003   TYPE LVC_S_FCAT,
      GS_SCROLL_COL_0003     TYPE LVC_S_COL,
      GS_SCROLL_ROW_0003     TYPE LVC_S_ROID.

DATA: IT_SELECTED_ROWS_0003 TYPE LVC_T_ROW,
      WA_SELECTED_ROWS_0003 TYPE LVC_S_ROW.

CLASS LCL_EVENT_HANDLER_0003 IMPLEMENTATION.
  METHOD HANDLE_HOTSPOT_CLICK.
    PERFORM HANDLE_HOTSPOT_CLICK_0003 USING ES_ROW_NO-ROW_ID E_COLUMN_ID-FIELDNAME.
  ENDMETHOD.                    "handle_hotspot_click
  METHOD HANDLE_DOUBLE_CLICK.
    PERFORM HANDLE_DOUBLE_CLICK_0003 USING E_ROW.
  ENDMETHOD.                    "HANDLE_DOUBLE_CLICK

ENDCLASS.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0003  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0003 INPUT.

  CASE OK_CODE.
    WHEN OK_ATUALIZAR.
      PERFORM ATUALIZAR_CONSULTA.
    WHEN OK_PNOVO.
      CLEAR: OK_CODE.
      PERFORM NOVO_PEDAGIO.
    WHEN OK_PEDITAR.
      CLEAR: OK_CODE.
      PERFORM EDITAR_PEDAGIO.
    WHEN OK_PABRIR.
      CLEAR: OK_CODE.
      PERFORM ABRIR_PEDAGIO.
    WHEN OK_PEXCLUIR.
      CLEAR: OK_CODE.
      PERFORM EXCLUIR_PEDAGIO.
    WHEN OK_AUTORIZAR.
      CLEAR: OK_CODE.
      PERFORM AUTORIZAR_PEDAGIO.
    WHEN OK_PPRINT.
      CLEAR: OK_CODE.
      PERFORM IMPRIMIR_PEDAGIO.
    WHEN OK_CANCELAR.
      CLEAR: OK_CODE.
      PERFORM CANCELAR_PEDAGIO.
    WHEN OK_CARTAO_PED.
      CALL FUNCTION 'Z_REPOM_VERIFICA_CARTAO'.
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0003_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0003_EXIT INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  ATUALIZAR_CONSULTA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ATUALIZAR_CONSULTA .

  DATA: OBJ_VIAGEM  TYPE REF TO ZCL_REPOM_VIAGEM_VPR,
        E_REGISTROS TYPE ZDE_ZLEST0123_ALV_T.

  CREATE OBJECT OBJ_VIAGEM.

  CLEAR: IT_ZLEST0123_ALV[].

  IF OBJ_VIAGEM->PESQUISAR( EXPORTING I_FILTROS = LC_FILTROS IMPORTING E_REGISTROS = E_REGISTROS ) EQ ABAP_TRUE.
    MOVE E_REGISTROS[] TO IT_ZLEST0123_ALV[].
  ELSE.
    MESSAGE S041(ZREPOM) DISPLAY LIKE 'E'.
  ENDIF.

  CLEAR: OBJ_VIAGEM.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0003  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0003 OUTPUT.

  CLEAR: IT_UCOMM.

  IF CK_PERMISSAO EQ ABAP_TRUE AND CK_INDIVIDUAL NE ABAP_TRUE.
    PERFORM VERIFICA_PERMISSOES.
  ENDIF.

  CASE CK_INDIVIDUAL.
    WHEN ABAP_TRUE.
      APPEND OK_PNOVO     TO IT_UCOMM.
      APPEND OK_PEDITAR   TO IT_UCOMM.
    WHEN ABAP_FALSE.
  ENDCASE.

  SET PF-STATUS 'PF0002' EXCLUDING IT_UCOMM.
  SET TITLEBAR 'TL0003'.

  IF CTL_CCCONTAINER_0003 IS INITIAL.

    CREATE OBJECT CTL_CCCONTAINER_0003
      EXPORTING
        CONTAINER_NAME = 'MONITOR'.

    CREATE OBJECT DG_SPLITTER_0003
      EXPORTING
        PARENT  = CTL_CCCONTAINER_0003
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER_0003->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = CTL_CCCONTAINER_0003_2.

    CALL METHOD DG_SPLITTER_0003->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = CTL_CCCONTAINER_0003_3.

    CALL METHOD DG_SPLITTER_0003->SET_ROW_HEIGHT
      EXPORTING
        ID     = 2
        HEIGHT = 40.

    CREATE OBJECT CTL_ALV_0003
      EXPORTING
        I_PARENT = CTL_CCCONTAINER_0003_2.

    PERFORM FILL_IT_FIELDCATALOG_0003.

*   Fill info for layout variant
    PERFORM FILL_GS_VARIANT_0003.

*   Set layout parameters for ALV grid
    GS_LAYOUT_0003-GRID_TITLE = TEXT-005.
    GS_LAYOUT_0003-SEL_MODE   = 'A'.

    CALL METHOD CTL_ALV_0003->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = GS_LAYOUT_0003
        IS_VARIANT      = GS_VARIANT_0003
        I_SAVE          = 'A'
      CHANGING
        IT_FIELDCATALOG = IT_FIELDCATALOG_0003
        IT_OUTTAB       = IT_ZLEST0123_ALV[].

    CREATE OBJECT EVENT_HANDLER_0003.
    SET HANDLER EVENT_HANDLER_0003->HANDLE_HOTSPOT_CLICK FOR CTL_ALV_0003.
    SET HANDLER EVENT_HANDLER_0003->HANDLE_DOUBLE_CLICK FOR CTL_ALV_0003.

    CALL METHOD CTL_ALV_0003->REFRESH_TABLE_DISPLAY.

    CREATE OBJECT CTL_ALV_0003_3
      EXPORTING
        I_PARENT = CTL_CCCONTAINER_0003_3.

    PERFORM FILL_IT_FIELDCATALOG_0003_3.

*   Fill info for layout variant
    PERFORM FILL_GS_VARIANT_0003_3.

*   Set layout parameters for ALV grid
    GS_LAYOUT_0003_3-GRID_TITLE = TEXT-007.
    GS_LAYOUT_0003_3-SEL_MODE   = 'A'.

    CALL METHOD CTL_ALV_0003_3->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = GS_LAYOUT_0003_3
        IS_VARIANT      = GS_VARIANT_0003_3
        I_SAVE          = 'A'
      CHANGING
        IT_FIELDCATALOG = IT_FIELDCATALOG_0003_3
        IT_OUTTAB       = IT_ZLEST0127_ALV[].

    CALL METHOD CTL_ALV_0003_3->REFRESH_TABLE_DISPLAY.

  ELSE.
    CALL METHOD CTL_ALV_0003->REFRESH_TABLE_DISPLAY.
    CALL METHOD CTL_ALV_0003_3->REFRESH_TABLE_DISPLAY.
  ENDIF.

  CALL METHOD CTL_ALV_0003->GET_SCROLL_INFO_VIA_ID
    IMPORTING
      ES_COL_INFO = GS_SCROLL_COL_0003
      ES_ROW_NO   = GS_SCROLL_ROW_0003.

ENDMODULE.


*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG_0003
*&---------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG_0003 .

*  DATA: LC_COL_POS  TYPE LVC_COLPOS.
*
  FIELD-SYMBOLS: <FS_CAT_0003> TYPE LVC_S_FCAT.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_ZLEST0123_ALV'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG_0003.

  LOOP AT IT_FIELDCATALOG_0003 ASSIGNING <FS_CAT_0003>.

    CASE <FS_CAT_0003>-FIELDNAME.
      WHEN 'ICO_STATUS_AUT'.
        <FS_CAT_0003>-JUST = 'C'.
        <FS_CAT_0003>-HOTSPOT = ABAP_TRUE.
      WHEN 'ICO_STATUS_CAN'.
        <FS_CAT_0003>-JUST = 'C'.
        <FS_CAT_0003>-HOTSPOT = ABAP_TRUE.
      WHEN 'ID_PROC_CLIENTE'.
        <FS_CAT_0003>-OUTPUTLEN = 05.
      WHEN 'BUKRS'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'BUTXT'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'BRANCH'.
        <FS_CAT_0003>-OUTPUTLEN = 05.
      WHEN 'NAME'.
        <FS_CAT_0003>-OUTPUTLEN = 15.
      WHEN 'DS_NR_CARTAO'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'ID_ROTA_REPOM'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'ID_PERCURSO_REPOM'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'DS_PERCURSO_REPOM'.
        <FS_CAT_0003>-OUTPUTLEN = 30.
      WHEN 'ID_ROTA'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'BUKRS_ROTA'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'BRANCH_ROTA'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'CD_PAIS'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'CD_CID_ORIGEM'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'DS_CID_ORIGEM'.
        <FS_CAT_0003>-OUTPUTLEN = 15.
      WHEN 'CD_CID_DESTINO'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'DS_CID_DESTINO'.
        <FS_CAT_0003>-OUTPUTLEN = 15.
      WHEN 'MOTORISTA_COD'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'MOTORISTA_CPF'.
        <FS_CAT_0003>-OUTPUTLEN = 12.
      WHEN 'MOTORISTA_NOME'.
        <FS_CAT_0003>-OUTPUTLEN = 30.
      WHEN 'MOTORISTA_RG'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'MOTORISTA_FONE'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'VEICULO_PLACA'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'VEICULO_EIXOS'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'VEICULO_PLACA_C1'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'VEICULO_EIXOS_C1'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'VEICULO_PLACA_C2'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'VEICULO_EIXOS_C2'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'VEICULO_PLACA_C3'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'VEICULO_EIXOS_C3'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'TP_STATUS_AUT'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'TP_STATUS_CAN'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'ID_VIAGEM_CODIGO'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'MOEDA_PEDAGIO'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'VLR_TOTAL_PEDAGIO'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'DT_EMISSAO_PEDAGIO'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'HR_EMISSAO_PEDAGIO'.
        <FS_CAT_0003>-OUTPUTLEN = 08.
      WHEN 'TKNUM'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'US_ULTIMO_AJUSTE'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'DT_ULTIMO_AJUSTE'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'HR_ULTIMO_AJUSTE'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
    ENDCASE.

  ENDLOOP.

ENDFORM.                    " FILL_IT_FIELDCATALOG_0003


*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT
*&---------------------------------------------------------------------*
FORM FILL_GS_VARIANT_0003 .

  GS_VARIANT_0003-REPORT      = SY-REPID.
  GS_VARIANT_0003-HANDLE      = '0003'.
  GS_VARIANT_0003-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT_0003-USERNAME    = ABAP_FALSE.
  GS_VARIANT_0003-VARIANT     = ABAP_FALSE.
  GS_VARIANT_0003-TEXT        = ABAP_FALSE.
  GS_VARIANT_0003-DEPENDVARS  = ABAP_FALSE.

ENDFORM.                    " FILL_GS_VARIANT_0003

*&---------------------------------------------------------------------*
*&      Module  GET_SELECTED_ROWS_0003  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SELECTED_ROWS_0003 INPUT.

  CLEAR IT_SELECTED_ROWS_0003.

  CALL METHOD CTL_ALV_0003->GET_SELECTED_ROWS
    IMPORTING
      ET_INDEX_ROWS = IT_SELECTED_ROWS_0003.

  CLEAR IT_ZLEST0123_SEL[].

  LOOP AT IT_SELECTED_ROWS_0003 INTO WA_SELECTED_ROWS_0003.
    READ TABLE IT_ZLEST0123_ALV INTO IT_ZLEST0123_SEL INDEX WA_SELECTED_ROWS_0003-INDEX.
    APPEND IT_ZLEST0123_SEL.
  ENDLOOP.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  GET_SCROLL_INFO_0003  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE GET_SCROLL_INFO_0003 INPUT.

  CALL METHOD CTL_ALV_0003->GET_SCROLL_INFO_VIA_ID
    IMPORTING
      ES_COL_INFO = GS_SCROLL_COL_0003
      ES_ROW_NO   = GS_SCROLL_ROW_0003.

ENDMODULE.

FORM AUTORIZAR_PEDAGIO.

  IF IT_ZLEST0123_SEL[] IS INITIAL.
    MESSAGE S016(ZREPOM).
    RETURN.
  ENDIF.

  READ TABLE IT_ZLEST0123_SEL INDEX 1.

  DATA: OBJ_SOLICITAR TYPE REF TO ZCL_REPOM_VIAGEM_VPR,
        P_SOLICITOU   TYPE C LENGTH 1,
        LC_ERROS      TYPE ZDE_REPOM_ERROS_T,
        LC_ERRO       TYPE ZDE_REPOM_ERROS.

  CREATE OBJECT OBJ_SOLICITAR
    EXPORTING
      I_ID_PROC_CLIENTE = IT_ZLEST0123_SEL-ID_PROC_CLIENTE.

  "OBJ_SOLICITAR->CK_SALVAR_XML_LOCAL = ABAP_TRUE.

  CALL METHOD OBJ_SOLICITAR->SOLICITAR
    IMPORTING
      E_ERROS                    = LC_ERROS
    RECEIVING
      I_SOLICITOU                = P_SOLICITOU
    EXCEPTIONS
      SERVICO_NAO_ENCONTRADO     = 1
      HTTP_COMMUNICATION_FAILURE = 2
      HTTP_INVALID_STATE         = 3
      HTTP_PROCESSING_FAILED     = 4
      HTTP_INVALID_TIMEOUT       = 5
      ERRO                       = 6
      OTHERS                     = 7.

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 DISPLAY LIKE 'E'.
  ENDIF.

  IF P_SOLICITOU EQ ABAP_FALSE.
    LOOP AT LC_ERROS INTO LC_ERRO.
      MESSAGE W017(ZREPOM) WITH LC_ERRO-ERRO_CODIGO LC_ERRO-ERRO_DESCRICAO.
    ENDLOOP.
  ELSE.
    PERFORM ATUALIZAR_CONSULTA.
    PERFORM ATUALIZA_TELA.
  ENDIF.

  CLEAR: OBJ_SOLICITAR.

ENDFORM.

FORM CANCELAR_PEDAGIO.

  IF IT_ZLEST0123_SEL[] IS INITIAL.
    MESSAGE S016(ZREPOM).
    RETURN.
  ENDIF.

  READ TABLE IT_ZLEST0123_SEL INDEX 1.

  DATA: OBJ_CANCELAR TYPE REF TO ZCL_REPOM_VIAGEM_VPR,
        P_CANCELOU   TYPE C LENGTH 1,
        LC_ERROS     TYPE ZDE_REPOM_ERROS_T,
        LC_ERRO      TYPE ZDE_REPOM_ERROS.

  CREATE OBJECT OBJ_CANCELAR
    EXPORTING
      I_ID_PROC_CLIENTE = IT_ZLEST0123_SEL-ID_PROC_CLIENTE.

  "OBJ_CANCELAR->CK_SALVAR_XML_LOCAL = ABAP_TRUE.

  CALL METHOD OBJ_CANCELAR->SOLICITAR_CANCELAMENTO
    IMPORTING
      E_ERROS                    = LC_ERROS
    RECEIVING
      I_CANCELOU                 = P_CANCELOU
    EXCEPTIONS
      SERVICO_NAO_ENCONTRADO     = 1
      HTTP_COMMUNICATION_FAILURE = 2
      HTTP_INVALID_STATE         = 3
      HTTP_PROCESSING_FAILED     = 4
      HTTP_INVALID_TIMEOUT       = 5
      ERRO                       = 6
      OTHERS                     = 7.

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 DISPLAY LIKE 'E'.
  ENDIF.

  IF P_CANCELOU EQ ABAP_FALSE.
    LOOP AT LC_ERROS INTO LC_ERRO.
      MESSAGE W017(ZREPOM) WITH LC_ERRO-ERRO_CODIGO LC_ERRO-ERRO_DESCRICAO.
    ENDLOOP.
  ELSE.
    PERFORM ATUALIZAR_CONSULTA.
    PERFORM ATUALIZA_TELA.
  ENDIF.

  CLEAR: OBJ_CANCELAR.

ENDFORM.

FORM IMPRIMIR_PEDAGIO.

  IF IT_ZLEST0123_SEL[] IS INITIAL.
    MESSAGE S016(ZREPOM).
    RETURN.
  ENDIF.

  READ TABLE IT_ZLEST0123_SEL INDEX 1.

  CALL METHOD ZCL_REPOM_VIAGEM_VPR=>IMPRIMIR_VIAGEM
    EXPORTING
      I_ID_PROC_CLIENTE = IT_ZLEST0123_SEL-ID_PROC_CLIENTE
    EXCEPTIONS
      ERRO              = 1
      OTHERS            = 2.

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 DISPLAY LIKE 'E'.
  ENDIF.

ENDFORM.

FORM NOVO_PEDAGIO.

  DATA: P_ID_PROC_CLIENTE TYPE ZDE_ID_PROC_CLIENTE,
        P_GRAVOU          TYPE CHAR01.

  CALL FUNCTION 'Z_REPOM_CADASTRO_PEDAGIO'
    EXPORTING
      I_CONSULTA        = ABAP_FALSE
      I_ID_PROC_CLIENTE = P_ID_PROC_CLIENTE
    IMPORTING
      I_GRAVOU          = P_GRAVOU.

  IF P_GRAVOU EQ ABAP_TRUE.
    PERFORM ATUALIZAR_CONSULTA.
    PERFORM ATUALIZA_TELA.
  ENDIF.

ENDFORM.

FORM ABRIR_PEDAGIO.

  IF IT_ZLEST0123_SEL[] IS INITIAL.
    MESSAGE S016(ZREPOM).
    RETURN.
  ENDIF.

  READ TABLE IT_ZLEST0123_SEL INDEX 1.

  CALL FUNCTION 'Z_REPOM_CADASTRO_PEDAGIO'
    EXPORTING
      I_CONSULTA        = ABAP_TRUE
      I_ID_PROC_CLIENTE = IT_ZLEST0123_SEL-ID_PROC_CLIENTE.

ENDFORM.

FORM EDITAR_PEDAGIO.

  DATA: P_GRAVOU TYPE CHAR01.

  IF IT_ZLEST0123_SEL[] IS INITIAL.
    MESSAGE S016(ZREPOM).
    RETURN.
  ENDIF.

  READ TABLE IT_ZLEST0123_SEL INDEX 1.

  CALL FUNCTION 'Z_REPOM_CADASTRO_PEDAGIO'
    EXPORTING
      I_CONSULTA        = ABAP_FALSE
      I_ID_PROC_CLIENTE = IT_ZLEST0123_SEL-ID_PROC_CLIENTE
    IMPORTING
      I_GRAVOU          = P_GRAVOU.

  IF P_GRAVOU EQ ABAP_TRUE.
    PERFORM ATUALIZAR_CONSULTA.
    PERFORM ATUALIZA_TELA.
  ENDIF.

ENDFORM.

FORM EXCLUIR_PEDAGIO.

  IF IT_ZLEST0123_SEL[] IS INITIAL.
    MESSAGE S016(ZREPOM).
    RETURN.
  ENDIF.

  READ TABLE IT_ZLEST0123_SEL INDEX 1.

  DATA: OBJ_EXCLUIR TYPE REF TO ZCL_REPOM_VIAGEM_VPR,
        P_EXCLUIU   TYPE C LENGTH 1.

  CREATE OBJECT OBJ_EXCLUIR
    EXPORTING
      I_ID_PROC_CLIENTE = IT_ZLEST0123_SEL-ID_PROC_CLIENTE.

  P_EXCLUIU = OBJ_EXCLUIR->EXCLUIR_REGISTRO( ).

  CLEAR: OBJ_EXCLUIR.

  IF P_EXCLUIU EQ ABAP_TRUE.
    CASE CK_INDIVIDUAL.
      WHEN ABAP_FALSE.
        PERFORM ATUALIZAR_CONSULTA.
        PERFORM ATUALIZA_TELA.
      WHEN ABAP_TRUE.
        LEAVE TO SCREEN 0.
    ENDCASE.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ATUALIZA_TELA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ATUALIZA_TELA .

*  DATA: GS_ALV_REFRES_COND TYPE LVC_S_STBL.
*
*  GS_ALV_REFRES_COND-ROW = ABAP_TRUE.
*  GS_ALV_REFRES_COND-COL = ABAP_TRUE.
*
*  CALL METHOD CTL_ALV_0003->REFRESH_TABLE_DISPLAY
*    EXPORTING
*      IS_STABLE      = GS_ALV_REFRES_COND
*      I_SOFT_REFRESH = ABAP_TRUE.
*
*  CALL METHOD CL_GUI_CFW=>FLUSH.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  HANDLE_HOTSPOT_CLICK_0003
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM HANDLE_HOTSPOT_CLICK_0003
         USING VALUE(ROW_ID)    LIKE LVC_S_ROID-ROW_ID
               VALUE(FIELDNAME) LIKE LVC_S_COL-FIELDNAME.

  READ TABLE IT_ZLEST0123_ALV INDEX ROW_ID INTO IT_ZLEST0123_ALV.

  CASE FIELDNAME.
    WHEN 'ICO_STATUS_AUT' OR 'ICO_STATUS_CAN'.
      PERFORM BUSCA_LOGS USING IT_ZLEST0123_ALV.
    WHEN  OTHERS.
      PERFORM LIMPAR_LOQS.
  ENDCASE.

ENDFORM.                    " HANDLE_HOTSPOT_CLICK_0003

*&---------------------------------------------------------------------*
*&      Form  HANDLE_DOUBLE_CLICK_0003
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_E_ROW  text
*----------------------------------------------------------------------*
FORM HANDLE_DOUBLE_CLICK_0003  USING P_ROW TYPE LVC_S_ROW.

  DATA: LC_ROW           TYPE LVC_T_ROW,
        WA_ZLEST0123_ALV TYPE ZDE_ZLEST0123_ALV.

  IF P_ROW-ROWTYPE IS INITIAL.

    APPEND P_ROW TO LC_ROW.

    CALL METHOD CTL_ALV_0003->SET_SELECTED_ROWS
      EXPORTING
        IT_INDEX_ROWS = LC_ROW.

    READ TABLE IT_ZLEST0123_ALV INDEX P_ROW-INDEX INTO IT_ZLEST0123_ALV.
    IF SY-SUBRC IS INITIAL.
      CLEAR: IT_ZLEST0123_SEL[].
      APPEND IT_ZLEST0123_ALV TO IT_ZLEST0123_SEL.
      PERFORM ABRIR_PEDAGIO.
    ENDIF.
  ENDIF.

ENDFORM.                    " HANDLE_DOUBLE_CLICK_0003

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_PERMISSOES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM VERIFICA_PERMISSOES .

  DATA: LC_BUKRS TYPE ZDE_BUKRS_R.

  CK_PERMISSAO_08 = ABAP_FALSE.
  CK_PERMISSAO_09 = ABAP_FALSE.
  CK_PERMISSAO_10 = ABAP_FALSE.
  CK_PERMISSAO_11 = ABAP_FALSE.
  CK_PERMISSAO_12 = ABAP_FALSE.
  CK_PERMISSAO_13 = ABAP_FALSE.

*08	Cadastrar Pedágio
*09	Editar Pedágio
*10	Excluir Pedágio
*11	Autorizar Pedágio - WebService
*12	Cancelar Pedágio - WebService
*13	Imprimir Pedágio

  READ TABLE LC_FILTROS-BUKRS INDEX 1 INTO LC_BUKRS.
  CHECK SY-SUBRC IS INITIAL.

  AUTHORITY-CHECK OBJECT 'ZREPOM' ID 'BUKRS'     FIELD LC_BUKRS-LOW
                                  ID 'ZREPOMATV' FIELD '08'.
  IF SY-SUBRC IS INITIAL.
    CK_PERMISSAO_08 = ABAP_TRUE.
  ELSE.
    APPEND OK_PNOVO TO IT_UCOMM.
  ENDIF.

  AUTHORITY-CHECK OBJECT 'ZREPOM' ID 'BUKRS'     FIELD LC_BUKRS-LOW
                                  ID 'ZREPOMATV' FIELD '09'.
  IF SY-SUBRC IS INITIAL.
    CK_PERMISSAO_09 = ABAP_TRUE.
  ELSE.
    APPEND OK_PEDITAR TO IT_UCOMM.
  ENDIF.

  AUTHORITY-CHECK OBJECT 'ZREPOM' ID 'BUKRS'     FIELD LC_BUKRS-LOW
                                  ID 'ZREPOMATV' FIELD '10'.
  IF SY-SUBRC IS INITIAL.
    CK_PERMISSAO_10 = ABAP_TRUE.
  ELSE.
    APPEND OK_PEXCLUIR TO IT_UCOMM.
  ENDIF.

  AUTHORITY-CHECK OBJECT 'ZREPOM' ID 'BUKRS'     FIELD LC_BUKRS-LOW
                                  ID 'ZREPOMATV' FIELD '11'.
  IF SY-SUBRC IS INITIAL.
    CK_PERMISSAO_11 = ABAP_TRUE.
  ELSE.
    APPEND OK_AUTORIZAR TO IT_UCOMM.
  ENDIF.

  AUTHORITY-CHECK OBJECT 'ZREPOM' ID 'BUKRS'     FIELD LC_BUKRS-LOW
                                  ID 'ZREPOMATV' FIELD '12'.
  IF SY-SUBRC IS INITIAL.
    CK_PERMISSAO_12 = ABAP_TRUE.
  ELSE.
    APPEND OK_CANCELAR TO IT_UCOMM.
  ENDIF.

  AUTHORITY-CHECK OBJECT 'ZREPOM' ID 'BUKRS'     FIELD LC_BUKRS-LOW
                                  ID 'ZREPOMATV' FIELD '13'.
  IF SY-SUBRC IS INITIAL.
    CK_PERMISSAO_13 = ABAP_TRUE.
  ELSE.
    APPEND OK_PPRINT TO IT_UCOMM.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG_0003
*&---------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG_0003_3 .

*  DATA: LC_COL_POS  TYPE LVC_COLPOS.
*
  FIELD-SYMBOLS: <FS_CAT_0003> TYPE LVC_S_FCAT.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_ZLEST0127_ALV'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG_0003_3.

  LOOP AT IT_FIELDCATALOG_0003 ASSIGNING <FS_CAT_0003>.

    CASE <FS_CAT_0003>-FIELDNAME.
      WHEN 'ICO_STATUS_AUT'.
        <FS_CAT_0003>-JUST = 'C'.
      WHEN 'ICO_STATUS_CAN'.
        <FS_CAT_0003>-JUST = 'C'.
      WHEN 'ID_PROC_CLIENTE'.
        <FS_CAT_0003>-OUTPUTLEN = 05.
      WHEN 'BUKRS'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'BUTXT'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'BRANCH'.
        <FS_CAT_0003>-OUTPUTLEN = 05.
      WHEN 'NAME'.
        <FS_CAT_0003>-OUTPUTLEN = 15.
      WHEN 'DS_NR_CARTAO'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'ID_ROTA_REPOM'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'ID_PERCURSO_REPOM'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'DS_PERCURSO_REPOM'.
        <FS_CAT_0003>-OUTPUTLEN = 30.
      WHEN 'ID_ROTA'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'BUKRS_ROTA'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'BRANCH_ROTA'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'CD_PAIS'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'CD_CID_ORIGEM'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'DS_CID_ORIGEM'.
        <FS_CAT_0003>-OUTPUTLEN = 15.
      WHEN 'CD_CID_DESTINO'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'DS_CID_DESTINO'.
        <FS_CAT_0003>-OUTPUTLEN = 15.
      WHEN 'MOTORISTA_COD'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'MOTORISTA_CPF'.
        <FS_CAT_0003>-OUTPUTLEN = 12.
      WHEN 'MOTORISTA_NOME'.
        <FS_CAT_0003>-OUTPUTLEN = 30.
      WHEN 'MOTORISTA_RG'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'MOTORISTA_FONE'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'VEICULO_PLACA'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'VEICULO_EIXOS'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'VEICULO_PLACA_C1'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'VEICULO_EIXOS_C1'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'VEICULO_PLACA_C2'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'VEICULO_EIXOS_C2'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'VEICULO_PLACA_C3'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'VEICULO_EIXOS_C3'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'TP_STATUS_AUT'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'TP_STATUS_CAN'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'ID_VIAGEM_CODIGO'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'MOEDA_PEDAGIO'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'VLR_TOTAL_PEDAGIO'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'DT_EMISSAO_PEDAGIO'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'HR_EMISSAO_PEDAGIO'.
        <FS_CAT_0003>-OUTPUTLEN = 08.
      WHEN 'TKNUM'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'US_ULTIMO_AJUSTE'.
        <FS_CAT_0003>-OUTPUTLEN = 10.
      WHEN 'DT_ULTIMO_AJUSTE'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
      WHEN 'HR_ULTIMO_AJUSTE'.
        <FS_CAT_0003>-NO_OUT = ABAP_TRUE.
    ENDCASE.

  ENDLOOP.

ENDFORM.                    " FILL_IT_FIELDCATALOG_0003


*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT
*&---------------------------------------------------------------------*
FORM FILL_GS_VARIANT_0003_3 .

  GS_VARIANT_0003_3-REPORT      = SY-REPID.
  GS_VARIANT_0003_3-HANDLE      = '0033'.
  GS_VARIANT_0003_3-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT_0003_3-USERNAME    = ABAP_FALSE.
  GS_VARIANT_0003_3-VARIANT     = ABAP_FALSE.
  GS_VARIANT_0003_3-TEXT        = ABAP_FALSE.
  GS_VARIANT_0003_3-DEPENDVARS  = ABAP_FALSE.

ENDFORM.                    " FILL_GS_VARIANT_0003

*&---------------------------------------------------------------------*
*&      Form  BUSCA_LOGS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_ZLEST0123_ALV  text
*----------------------------------------------------------------------*
FORM BUSCA_LOGS  USING P_ZLEST0123_ALV TYPE ZDE_ZLEST0123_ALV.

  DATA: IT_LOGS TYPE ZDE_ZLEST0127_ALV_T,
        WA_LOGS TYPE ZDE_ZLEST0127_ALV.

  PERFORM LIMPAR_LOQS.

  CALL METHOD ZCL_REPOM_VIAGEM_VPR=>GET_LOGS
    EXPORTING
      I_ID_PROC_CLIENTE = P_ZLEST0123_ALV-ID_PROC_CLIENTE
    RECEIVING
      R_LOGS            = IT_LOGS.

  LOOP AT IT_LOGS INTO WA_LOGS.
    APPEND WA_LOGS TO IT_ZLEST0127_ALV.
  ENDLOOP.

  CALL METHOD CTL_ALV_0003_3->REFRESH_TABLE_DISPLAY.

  CALL METHOD CL_GUI_CFW=>FLUSH.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  LIMPAR_LOQS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM LIMPAR_LOQS .

  CLEAR: IT_ZLEST0127_ALV[].

ENDFORM.
