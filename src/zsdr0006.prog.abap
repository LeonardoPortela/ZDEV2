************************************************************************
*  A M A G G I  E X P O R T A Ç Ã O  E  I M P O R T A Ç Ã O  L T D A.  *
*                                                                      *
************************************************************************
* Responsável ...: Amaggi Exportação & Importação Ltda                 *
* Data desenv ...: 05.04.2011                                          *
* Objetivo    ...: Relatorio Consulta de Entregas - INSUMOS            *
* Transação   ...: ZLES0051                                            *
************************************************************************
REPORT  ZSDR0006.

*----------------------------------------------------------------------*
* TYPE POOLS
*----------------------------------------------------------------------*
TYPE-POOLS: ICON.
*----------------------------------------------------------------------*
* TABLES
*---------------------------------------------------------------------- *
TABLES: VBAK, VBAP, EKKO, KNA1, LFA1, MARA.
*----------------------------------------------------------------------*
* ESTRUTURAS
*----------------------------------------------------------------------*
TYPES:

  BEGIN OF TY_EKKO,
    " MM - COMPRAS - TABELA DE CABEÇALHO DO DOCUMENTO DE COMPRAS
    EBELN TYPE EKKO-EBELN, " Nº do documento de compras
    BSART TYPE EKKO-BSART, " Tipo de documento de compras
    LIFNR TYPE EKKO-LIFNR, " Nº conta do fornecedor
    BUKRS TYPE EKKO-BUKRS, " Empresa
    AEDAT TYPE EKKO-AEDAT, " Data de criação do registro
    WAERS TYPE EKKO-WAERS,
    UNSEZ TYPE EKKO-UNSEZ, " Safra
  END OF TY_EKKO,

  BEGIN OF TY_EKPO,
    EBELN TYPE EKPO-EBELN, " Nº do documento de compras
    EBELP TYPE EKPO-EBELP, " Nº item do documento de compra
    MATNR TYPE EKPO-MATNR, " Nº do material
    TXZ01 TYPE EKPO-TXZ01, " Texto breve
    MENGE TYPE EKPO-MENGE, " Quantidade do pedido
    NETWR TYPE EKPO-NETWR, " Valor líquido do pedido em moeda de pedido
    LOEKZ TYPE EKPO-LOEKZ, " Código de eliminação no documento de compras
    MEINS TYPE EKPO-MEINS, " Unidade de Medida
    NETPR TYPE EKPO-NETPR,
  END OF TY_EKPO,

  BEGIN OF TY_VBAK,
    " SD - VENDAS - DOCUMENTO DE VENDAS: DADOS DO CABEÇALHO
    VBELN TYPE VBAK-VBELN, " Documento de vendas
    VKORG TYPE VBAK-VKORG, " Organização de vendas
    VTWEG TYPE VBAK-VTWEG, " Canal de distribuição
    SPART TYPE VBAK-SPART, " Setor de atividade
    AUART TYPE VBAK-AUART, " Tipo de documento de vendas
    VKBUR TYPE VBAK-VKBUR, " Escritório de vendas
    KUNNR TYPE VBAK-KUNNR, " Emissor da ordem
    WAERK TYPE VBAK-WAERK, " Moeda do documento SD
    ERDAT TYPE VBAK-ERDAT, " Data de criação do registro
    FAKSK TYPE VBAK-FAKSK, " Bloqueio tipos de doc.faturamento - documento SD
    LIFSK TYPE VBAK-LIFSK, " Bloqueio tipos de doc.faturamento - documento SD
    AUDAT TYPE VBAK-AUDAT, " Dada do documento (data de entrada / saída)
    KNUMV TYPE VBAK-KNUMV,
    IHREZ TYPE VBKD-IHREZ,
  END OF TY_VBAK,

  BEGIN OF TY_VBAP,
    " SD - VENDAS - Documento de vendas: dados de item
    VBELN  TYPE VBAP-VBELN,
    MATNR  TYPE VBAP-MATNR, " Nº do material
    ARKTX  TYPE VBAP-ARKTX, " Texto breve do item da ordem do cliente
    WERKS  TYPE VBAP-WERKS, " Centro (próprio ou externo)
    ZMENG  TYPE VBAP-ZMENG, " Qtd.prevista em UMV
    NETWR  TYPE VBAP-NETWR, " Valor líquido do item da ordem na moeda do documento
    KWMENG TYPE VBAP-KWMENG, " Quantidade da ordem acumulada em unidade de venda
    VRKME  TYPE VBAP-VRKME, " Unidade de venda
    POSNR  TYPE VBAP-POSNR, " Item
    NETPR  TYPE VBAP-NETPR, " Preço líquido
  END OF TY_VBAP,

  BEGIN OF TY_SAIDA,

    MATNR             TYPE VBAP-MATNR,
    MAKTX             TYPE MAKT-MAKTX,

    " Compra
    EBELN_C           TYPE EKKO-EBELN,
    BSART_C           TYPE EKKO-BSART,
    BUKRS_C           TYPE EKKO-BUKRS,
    AEDAT_C           TYPE EKKO-AEDAT,
    WAERS_C           TYPE EKKO-WAERS,
    VGABE_C           TYPE EKBE-VGABE,
    MENGE_C           TYPE EKBE-MENGE,
    SHKZG_C           TYPE EKBE-SHKZG,
    BELNR_C           TYPE EKBE-BELNR,
    BUDAT_C           TYPE EKBE-BUDAT,
    DMBTR_C           TYPE EKBE-DMBTR,
    MATNR_C           TYPE EKBE-MATNR,
    EBELP_C           TYPE EKPO-EBELP,
    TXZ01_C           TYPE EKPO-TXZ01,
    NETWR_C           TYPE EKPO-NETWR,
    LOEKZ_C           TYPE EKPO-LOEKZ,
    MEINS_C           TYPE EKPO-MEINS,
    NETPR_C           TYPE EKPO-NETPR,
    GJAHR_C           TYPE RBKP-GJAHR,
    XBLNR_C           TYPE RBKP-XBLNR,
    LIFNR_C           TYPE LFA1-LIFNR,
    NAME1_C           TYPE LFA1-NAME1,


    " Venda
    VBELN_V           TYPE VBAK-VBELN,
    VKORG_V           TYPE VBAK-VKORG,
    VTWEG_V           TYPE VBAK-VTWEG,
    SPART_V           TYPE VBAK-SPART,
    AUART_V           TYPE VBAK-AUART,
    VKBUR_V           TYPE VBAK-VKBUR,
    WAERK_V           TYPE VBAK-WAERK,
    ERDAT_V           TYPE VBAK-ERDAT,
    FAKSK_V           TYPE VBAK-FAKSK,
    LIFSK_V           TYPE VBAK-LIFSK,
    AUDAT_V           TYPE VBAK-AUDAT,
    ARKTX_V           TYPE VBAP-ARKTX,
    WERKS_V           TYPE VBAP-WERKS,
    ZMENG_V           TYPE VBAP-ZMENG,
    NETWR_V           TYPE VBAP-NETWR,
    KWMENG_V          TYPE VBAP-KWMENG,
    VRKME_V           TYPE VBAP-VRKME,
    POSNR_V           TYPE VBAP-POSNR,
    RFMNG_V           TYPE VBFA-RFMNG,
    VBTYP_N_V         TYPE VBFA-VBTYP_N,
    VBELV_V           TYPE VBFA-VBELV,
    VBTYP_V_V         TYPE VBFA-VBTYP_V,
    MEINS_V           TYPE VBFA-MEINS,
    KUNNR_V           TYPE KNA1-KUNNR,
    NAME1_V           TYPE KNA1-NAME1,
    KBETR_V           TYPE KONV-KBETR,
    LIFSP_V           TYPE VBEP-LIFSP,

    " Produzido
    SPTAG_P           TYPE S225-SPTAG,    "#EC CI_USAGE_OK[2268063]
    WERKS_P           TYPE S225-WERKS,    "#EC CI_USAGE_OK[2268063]
    MATNR_P           TYPE S225-MATNR,    "#EC CI_USAGE_OK[2268063]
    "wemng_p        type s225-wemng,
    WEMNG_P           TYPE EKPO-MENGE,

    TOTAL_VENDA       TYPE DB20199VP,
    TOTAL_COMPRA      TYPE DB20199VP,
    "total_produzido_p type s225-wemng,
    TOTAL_PRODUZIDO_P TYPE DB20199VP,
    SALDO             TYPE DB20199VP,
    TOTAL_F_C         TYPE DB20199VP,
    SALDO_C           TYPE DB20199VP,
    TOTAL_F_V         TYPE DB20199VP,
    SALDO_V           TYPE DB20199VP,
    REAL              TYPE EKPO-MENGE,
    TOTAL_REAL        TYPE EKPO-MENGE,
    CATEGORIA         TYPE C,

    CELLCOLORS        TYPE LVC_T_SCOL,

  END OF TY_SAIDA,

  BEGIN OF TY_SAIDA_MM,
    MATNR        TYPE  VBAP-MATNR,
    EBELN        TYPE  EKPO-EBELN,
    MENGE        TYPE  DB20199VP,
    NETWR        TYPE  DB20199VP,
    NAME1        TYPE  LFA1-NAME1,
    WAERS        TYPE  EKKO-WAERS,
    MEINS        TYPE  EKPO-MEINS,
    EBELP        TYPE  EKPO-EBELP,
    TXZ01        TYPE  EKPO-TXZ01,
    MAKTX        TYPE  MAKT-MAKTX,
    NETPR        TYPE EKPO-NETPR,
    S_PEDIDO(20) TYPE C,
  END OF TY_SAIDA_MM,

  BEGIN OF TY_SAIDA_SD,

    S_PEDIDO  TYPE C LENGTH 20,
    KUNNR     TYPE KNA1-KUNNR,
    NAME1     TYPE KNA1-NAME1,
    VBELN     TYPE VBAK-VBELN,
    ZMENG     TYPE VBAP-ZMENG,
    VRKME     TYPE VBAP-VRKME,

    STATUS,
    ZTERM(30),
    "netwr  type vbak-netwr,
    "netwr  type db20199vp,
    NETWR     TYPE VBAK-NETWR,
    WAERK     TYPE VBAK-WAERK,
    "kwmeng type db20199vp,
    KWMENG    TYPE VBAK-NETWR,
    "kwmeng type vbap-kwmeng,
    LIFSK     TYPE VBAK-LIFSK,
    POSNR     TYPE VBAP-POSNR,
    MATNR     TYPE VBAP-MATNR,
    ARKTX     TYPE VBAP-ARKTX,
    VKBUR     TYPE VBAK-VKBUR,
    NETPR     TYPE VBAP-NETPR,
    KBETR     TYPE KONV-KBETR,


  END OF TY_SAIDA_SD,

  BEGIN OF TY_KNA1,
    KUNNR TYPE KNA1-KUNNR,
    NAME1 TYPE KNA1-NAME1,
  END OF TY_KNA1,

  BEGIN OF TY_LFA1,
    LIFNR TYPE LFA1-LIFNR,
    NAME1 TYPE LFA1-NAME1,
  END OF TY_LFA1,

  BEGIN OF TY_VBFA,
    RFMNG   TYPE VBFA-RFMNG,
    VBELN   TYPE VBFA-VBELN,
    VBTYP_N TYPE VBFA-VBTYP_N,
    VBELV   TYPE VBFA-VBELV,
    VBTYP_V TYPE VBFA-VBTYP_V,
    MEINS   TYPE VBFA-MEINS,
    ERDAT   TYPE VBFA-ERDAT,
    MATNR   TYPE VBFA-MATNR,
    POSNV   TYPE VBFA-POSNV,
  END OF TY_VBFA,


  BEGIN OF TY_VBFA_AUX,
    RFMNG TYPE VBFA-RFMNG,
    VBELN TYPE VBFA-VBELN,
    VBELV TYPE VBFA-VBELV,
  END OF TY_VBFA_AUX,

  BEGIN OF TY_EKBE,
    EBELN TYPE EKBE-EBELN,
    VGABE TYPE EKBE-VGABE,
    MENGE TYPE EKBE-MENGE,
    SHKZG TYPE EKBE-SHKZG,
    BELNR TYPE EKBE-BELNR,
    BUDAT TYPE EKBE-BUDAT,
    DMBTR TYPE EKBE-DMBTR,
    EBELP TYPE EKBE-EBELP,
    MATNR TYPE EKBE-MATNR,
    GJAHR TYPE EKBE-GJAHR,
    BEWTP TYPE EKBE-BEWTP,

  END OF TY_EKBE,

  BEGIN OF TY_S225,
    SPTAG           TYPE S225-SPTAG,   "#EC CI_USAGE_OK[2268063]
    WERKS           TYPE S225-WERKS,   "#EC CI_USAGE_OK[2268063]
    MATNR           TYPE S225-MATNR,   "#EC CI_USAGE_OK[2268063]
    WEMNG           TYPE S225-WEMNG,   "#EC CI_USAGE_OK[2268063]
    AMEIN           TYPE S225-AMEIN,   "#EC CI_USAGE_OK[2268063]
    MENGE           TYPE EKPO-MENGE,
    TOTAL_PRODUZIDO TYPE S225-WEMNG,   "#EC CI_USAGE_OK[2268063]

  END OF TY_S225,

  BEGIN OF TY_KONV,
    KNUMV TYPE KONV-KNUMV,
    KPOSN TYPE KONV-KPOSN,
    KSCHL TYPE KONV-KSCHL,
    KBETR TYPE KONV-KBETR,
  END OF TY_KONV,

  BEGIN OF TY_RBKP,
    BELNR TYPE RBKP-BELNR,
    GJAHR TYPE RBKP-GJAHR,
    XBLNR TYPE RBKP-XBLNR,
    STBLG TYPE RBKP-STBLG,
  END OF TY_RBKP,

  BEGIN OF TY_MARA,
    MATKL TYPE MARA-MATKL,
    MATNR TYPE MARA-MATNR,
  END OF TY_MARA,

  BEGIN OF TY_SETLEAF,
    VALFROM_AUX TYPE MARA-MATKL,
  END OF TY_SETLEAF,

  BEGIN OF TY_MAKT,
    MANDT TYPE MAKT-MANDT,
    MATNR TYPE MAKT-MATNR,
    SPRAS TYPE MAKT-SPRAS,
    MAKTX TYPE MAKT-MAKTX,
    MAKTG TYPE MAKT-MAKTG,
  END OF TY_MAKT,


  BEGIN OF TY_FATURADO,
    EBELN          TYPE EKKO-EBELN,
    VALOR_FATURADO TYPE EKBE-MENGE,
    MATNR          TYPE EKBE-MATNR,
    VALOR_TOTAL    TYPE EKKO-EBELN,
  END OF TY_FATURADO,

  BEGIN OF TY_FATURADO_VENDA,
    VBELV          TYPE VBFA-VBELV,
    "valor_faturado type vbfa-rfmng,
    VALOR_FATURADO TYPE EKBE-MENGE,
    MATNR          TYPE VBFA-MATNR,
    VALOR_TOTAL    TYPE VBFA-RFMNG,
  END OF TY_FATURADO_VENDA,


  BEGIN OF TY_J_1BBRANCH,
    BUKRS  TYPE J_1BBRANCH-BUKRS,
    BRANCH TYPE J_1BBRANCH-BRANCH,
  END OF TY_J_1BBRANCH,

  BEGIN OF TY_VBEP,
    VBELN TYPE VBEP-VBELN,
    POSNR TYPE VBEP-POSNR,
    ETENR TYPE VBEP-ETENR,
    LIFSP TYPE VBEP-LIFSP,
  END OF TY_VBEP,

  BEGIN OF TY_ZIB_BSIK,
    BUKRS TYPE BSIK-BUKRS,
    BELNR TYPE BSIK-BELNR,
    GJAHR TYPE BSIK-GJAHR,
  END OF TY_ZIB_BSIK,


  BEGIN OF TY_COMPRA,
    EBELN           TYPE EKKO-EBELN,
    BSART           TYPE EKKO-BSART,
    BUKRS           TYPE EKKO-BUKRS,
    AEDAT           TYPE EKKO-AEDAT,
    WAERS           TYPE EKKO-WAERS,
    VGABE           TYPE EKBE-VGABE,
    MENGE           TYPE EKBE-MENGE,
    MENGE_F         TYPE EKBE-MENGE,
    SHKZG           TYPE EKBE-SHKZG,
    BELNR           TYPE EKBE-BELNR,
    BUDAT           TYPE EKBE-BUDAT,
    DMBTR           TYPE EKBE-DMBTR,
    MATNR           TYPE EKBE-MATNR,
    EBELP           TYPE EKPO-EBELP,
    TXZ01           TYPE EKPO-TXZ01,
    NETWR           TYPE EKPO-NETWR,
    LOEKZ           TYPE EKPO-LOEKZ,
    MEINS           TYPE EKPO-MEINS,
    NETPR           TYPE EKPO-NETPR,
    GJAHR           TYPE RBKP-GJAHR,
    XBLNR           TYPE RBKP-XBLNR,
    LIFNR           TYPE LFA1-LIFNR,
    NAME1           TYPE LFA1-NAME1,
    MAKTX           TYPE MAKT-MAKTX,

    TOTAL_COMPRA    TYPE EKBE-MENGE,
    TOTAL_PRODUZIDO TYPE EKBE-MENGE,
  END OF TY_COMPRA,

  BEGIN OF TY_VENDA,
    VBELN           TYPE VBAK-VBELN,
    VKORG           TYPE VBAK-VKORG,
    VTWEG           TYPE VBAK-VTWEG,
    SPART           TYPE VBAK-SPART,
    AUART           TYPE VBAK-AUART,
    VKBUR           TYPE VBAK-VKBUR,
    WAERK           TYPE VBAK-WAERK,
    ERDAT           TYPE VBAK-ERDAT,
    FAKSK           TYPE VBAK-FAKSK,
    LIFSK           TYPE VBAK-LIFSK,
    AUDAT           TYPE VBAK-AUDAT,
    MATNR           TYPE VBAP-MATNR,
    ARKTX           TYPE VBAP-ARKTX,
    WERKS           TYPE VBAP-WERKS,
    ZMENG           TYPE VBAP-ZMENG,
    NETWR           TYPE VBAP-NETWR,
    KWMENG          TYPE VBAP-KWMENG,
    VRKME           TYPE VBAP-VRKME,
    POSNR           TYPE VBAP-POSNR,
    NETPR           TYPE VBAP-NETPR,
    RFMNG           TYPE VBFA-RFMNG,
    VBTYP_N         TYPE VBFA-VBTYP_N,
    VBELV           TYPE VBFA-VBELV,
    VBTYP_V         TYPE VBFA-VBTYP_V,
    MEINS           TYPE VBFA-MEINS,
    KUNNR           TYPE KNA1-KUNNR,
    NAME1           TYPE KNA1-NAME1,
    MAKTX           TYPE MAKT-MAKTX,
    KBETR           TYPE KONV-KBETR,
    LIFSP           TYPE VBEP-LIFSP,

    TOTAL_VENDA     TYPE VBAP-ZMENG,
    TOTAL_PRODUZIDO TYPE VBAP-ZMENG,
  END OF TY_VENDA,

  BEGIN OF TY_ZSDT0041,
    VBELN         TYPE ZSDT0041-VBELN,
    DOC_SIMULACAO TYPE ZSDT0041-DOC_SIMULACAO,
  END OF TY_ZSDT0041,

  BEGIN OF TY_ZSDT0040,
    DOC_SIMULACAO TYPE ZSDT0040-DOC_SIMULACAO,
    SAFRA         TYPE ZSDT0040-SAFRA,
  END OF TY_ZSDT0040.

"--------------------------------------------------------------------*
* TABELAS INTERNA
*----------------------------------------------------------------------*

DATA:
  IT_SAIDA               TYPE TABLE OF TY_SAIDA WITH HEADER LINE,    "
  IT_SAIDA_AUX           TYPE TABLE OF TY_SAIDA WITH HEADER LINE,    "
  IT_SAIDA_SOMA          TYPE TABLE OF TY_SAIDA,    "

  IT_SAIDA_MM            TYPE TABLE OF TY_SAIDA_MM, "
  IT_SAIDA_SD            TYPE TABLE OF TY_SAIDA_SD, "
  T_BDC                  TYPE TABLE OF BDCDATA WITH HEADER LINE INITIAL SIZE 0,
  T_MESSTAB              TYPE TABLE OF BDCMSGCOLL,

  IT_EKKO                TYPE TABLE OF TY_EKKO, "
  IT_EKKO_FORN           TYPE TABLE OF TY_EKKO, "
  IT_EKKO_AUX            TYPE TABLE OF TY_EKKO, "

  IT_EKPO                TYPE TABLE OF TY_EKPO, "
  IT_EKPO_AUX            TYPE TABLE OF TY_EKPO, "

  IT_VBAK                TYPE TABLE OF TY_VBAK, "
  IT_VBAK_AUX            TYPE TABLE OF TY_VBAK, "
  IT_VBAP                TYPE TABLE OF TY_VBAP, "
  IT_0026                TYPE TABLE OF ZFIT0026 WITH HEADER LINE, "
  IT_ZIB                 TYPE TABLE OF ZIB_CONTABIL_CHV WITH HEADER LINE, "
  IT_BSIK                TYPE TABLE OF BSIK WITH HEADER LINE, "
  IT_VBKD                TYPE TABLE OF VBKD WITH HEADER LINE, "
  IT_T052U               TYPE TABLE OF T052U WITH HEADER LINE, "
  IT_ZIB_BSIK            TYPE TABLE OF TY_ZIB_BSIK WITH HEADER LINE, "
  IT_KNA1                TYPE TABLE OF TY_KNA1, "
  IT_LFA1                TYPE TABLE OF TY_LFA1, "
  IT_VBEP                TYPE TABLE OF TY_VBEP,

  IT_S225                TYPE TABLE OF TY_S225, "
  IT_S225_AUX            TYPE TABLE OF TY_S225, "
  IT_S225_SOMA           TYPE TABLE OF TY_S225, "

  IT_KONV                TYPE TABLE OF TY_KONV,

  IT_MAKT                TYPE TABLE OF TY_MAKT,
  IT_RBKP                TYPE TABLE OF TY_RBKP,

  IT_COMPRA              TYPE TABLE OF TY_COMPRA,
  IT_COMPRA_GROUP        TYPE TABLE OF TY_COMPRA,
  IT_COMPRA_AUX          TYPE TABLE OF TY_COMPRA,
  IT_COMPRA_SOMA         TYPE TABLE OF TY_COMPRA,
  IT_COMPRA_FATURADO     TYPE TABLE OF TY_COMPRA,

  IT_VENDA               TYPE TABLE OF TY_VENDA,
  IT_VENDA_AUX           TYPE TABLE OF TY_VENDA,
  IT_VENDA_SOMA          TYPE TABLE OF TY_VENDA,


  IT_MARA                TYPE TABLE OF TY_MARA, "
  IT_MARA_VENDA          TYPE TABLE OF TY_MARA, "
  IT_FATURADO            TYPE TABLE OF TY_FATURADO,
  IT_FATURADO_AUX        TYPE TABLE OF TY_FATURADO,
  IT_FATURADO_SOMA       TYPE TABLE OF TY_FATURADO,


  IT_FATURADO_VENDA      TYPE TABLE OF TY_FATURADO_VENDA,
  IT_FATURADO_VENDA_AUX  TYPE TABLE OF TY_FATURADO_VENDA,
  IT_FATURADO_VENDA_SOMA TYPE TABLE OF TY_FATURADO_VENDA,


  IT_J_1BBRANCH          TYPE TABLE OF TY_J_1BBRANCH,

  IT_VBFA                TYPE TABLE OF TY_VBFA,     "
  IT_VBFA_SOMA           TYPE TABLE OF TY_VBFA,     "
  "it_vbfa_aux       type table of ty_vbfa_aux, "
  IT_VBFA_AUX            TYPE TABLE OF TY_VBFA, "
  IT_SETLEAF_AUX         LIKE TABLE OF SETLEAF INITIAL SIZE 0 WITH HEADER LINE,
  IT_SETLEAF             TYPE TABLE OF TY_SETLEAF,


  IT_EKBE                TYPE TABLE OF TY_EKBE, "
  IT_EKBE_AUX            TYPE TABLE OF TY_EKBE, "

  IT_ZSDT0041            TYPE TABLE OF TY_ZSDT0041,
  IT_ZSDT0040            TYPE TABLE OF TY_ZSDT0040.

*----------------------------------------------------------------------*
* WORK AREA
*----------------------------------------------------------------------*
DATA:

  WA_ALV                 TYPE REF TO CL_GUI_ALV_GRID,
  WA_ALV_MM              TYPE REF TO CL_GUI_ALV_GRID,
  WA_ALV_SD              TYPE REF TO CL_GUI_ALV_GRID,
  WA_CONT                TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
  WA_CONT_MM             TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
  WA_CONT_SD             TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
  WA_LAYOUT              TYPE LVC_S_LAYO,
  WA_LAYOUT_MM           TYPE LVC_S_LAYO,
  WA_LAYOUT_SD           TYPE LVC_S_LAYO,

  WA_SAIDA               TYPE TY_SAIDA,
  WA_SAIDA_SOMA          TYPE TY_SAIDA,
  WA_SAIDA_AUX           TYPE TY_SAIDA,

  WA_SAIDA_MM            TYPE TY_SAIDA_MM,
  WA_SAIDA_SD            TYPE TY_SAIDA_SD,

  WA_EKKO                TYPE TY_EKKO, "
  WA_EKKO_FORN           TYPE TY_EKKO, "
  WA_EKKO_AUX            TYPE TY_EKKO, "

  WA_EKPO                TYPE TY_EKPO, "
  WA_EKPO_AUX            TYPE TY_EKPO, "

  WA_VBAK                TYPE TY_VBAK, "
  WA_VBAK_AUX            TYPE TY_VBAK, "
  WA_VBAP                TYPE TY_VBAP, "
  WA_KNA1                TYPE TY_KNA1, "
  WA_LFA1                TYPE TY_LFA1, "

  WA_S225                TYPE TY_S225, "
  WA_S225_AUX            TYPE TY_S225, "
  WA_S225_SOMA           TYPE TY_S225, "


  WA_KONV                TYPE TY_KONV,
  WA_VBEP                TYPE TY_VBEP,

  WA_MAKT                TYPE TY_MAKT,
  WA_RBKP                TYPE TY_RBKP,
  WA_FATURADO            TYPE TY_FATURADO,
  WA_FATURADO_AUX        TYPE TY_FATURADO,
  WA_FATURADO_SOMA       TYPE TY_FATURADO,

  WA_FATURADO_VENDA      TYPE TY_FATURADO_VENDA,
  WA_FATURADO_VENDA_AUX  TYPE TY_FATURADO_VENDA,
  WA_FATURADO_VENDA_SOMA TYPE TY_FATURADO_VENDA,


  WA_J_1BBRANCH          TYPE TY_J_1BBRANCH,

  WA_COMPRA              TYPE TY_COMPRA,
  WA_COMPRA_GROUP        TYPE TY_COMPRA,
  WA_COMPRA_AUX          TYPE TY_COMPRA,
  WA_COMPRA_SOMA         TYPE TY_COMPRA,
  WA_COMPRA_FATURADO     TYPE TY_COMPRA,

  WA_VENDA               TYPE TY_VENDA,
  WA_VENDA_AUX           TYPE TY_VENDA,
  WA_VENDA_SOMA          TYPE TY_VENDA,

  WA_SETLEAF_AUX         TYPE SETLEAF,
  WA_SETLEAF             TYPE TY_SETLEAF,
  WA_MARA                TYPE TY_MARA,

  WA_VBFA                TYPE TY_VBFA, " Documento de vendas: dados de item
  WA_VBFA_SOMA           TYPE TY_VBFA, " Documento de vendas: dados de item
  WA_VBFA_AUX            TYPE TY_VBFA, " Documento de vendas: dados de item

  WA_EKBE                TYPE TY_EKBE, " Documento de vendas: dados de item
  WA_EKBE_AUX            TYPE TY_EKBE, " Documento de vendas: dados de item

  WA_ZSDT0041            TYPE TY_ZSDT0041,
  WA_ZSDT0040            TYPE TY_ZSDT0040.

DATA: VALOR_CONVERSION_FATURADO TYPE EKPO-MENGE,
      VALOR                     TYPE EKPO-MENGE.

*----------------------------------------------------------------------*
* Estrutura ALV
*----------------------------------------------------------------------*
DATA: IT_FCAT      TYPE TABLE OF LVC_S_FCAT,
      IT_FCAT_MM   TYPE TABLE OF LVC_S_FCAT,
      IT_FCAT_SD   TYPE TABLE OF LVC_S_FCAT,
      R_EKPO_S     TYPE RANGE OF EKPO-LOEKZ,
      WA_STATUS    LIKE LINE OF  R_EKPO_S,
      GS_VARIANT_C TYPE DISVARIANT.
*----------------------------------------------------------------------*
* TELA DE SELEÇÃO
*----------------------------------------------------------------------*
SELECTION-SCREEN: BEGIN OF BLOCK BLOCO1 WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS: P_BSART   FOR EKKO-BSART NO INTERVALS OBLIGATORY," Tipo de Pedido
                P_AUART   FOR VBAK-AUART NO INTERVALS OBLIGATORY, " Tipo de Ordem
                P_VKORG   FOR VBAK-VKORG NO-EXTENSION NO INTERVALS OBLIGATORY," Organização de Vendas
                P_VTWEG   FOR VBAK-VTWEG NO-EXTENSION NO INTERVALS OBLIGATORY," Canal de Distribuição
                P_SPART   FOR VBAK-SPART NO INTERVALS OBLIGATORY," Setor de Atividade
                P_SAFRA   FOR EKKO-UNSEZ NO INTERVALS, " Safra
                P_VKBUR   FOR VBAK-VKBUR NO INTERVALS, " Escritório de Vendas
                P_ERDAT   FOR VBAK-ERDAT             , " Data do Contrato
                P_FATUR   FOR VBAK-ERDAT             , " Data do Faturamento
                P_WERKS   FOR VBAP-WERKS NO INTERVALS, " Centro
                P_MATNR   FOR VBAP-MATNR NO INTERVALS, " Material
                P_GRUPO   FOR MARA-MATKL MODIF ID SD, " Material
                P_BUKRS   FOR EKKO-BUKRS NO INTERVALS. " Material

SELECTION-SCREEN: END OF BLOCK BLOCO1.

SELECTION-SCREEN: BEGIN OF BLOCK B4 WITH FRAME TITLE TEXT-002.
PARAMETERS:
  BLOQ_MM  TYPE CHAR1  RADIOBUTTON GROUP RB02 MODIF ID MM,
  ELIM_MM  TYPE CHAR1  RADIOBUTTON GROUP RB02 MODIF ID MM,
  ATIVO_MM TYPE CHAR1  RADIOBUTTON GROUP RB02 MODIF ID MM,
  TODOS_MM TYPE CHAR1  RADIOBUTTON GROUP RB02 DEFAULT 'X' MODIF ID MM.
SELECTION-SCREEN: END OF BLOCK B4.

INITIALIZATION.
  GS_VARIANT_C-REPORT      = SY-REPID.

*&---------------------------------------------------------------------*
*& START OF SELECTION
*&---------------------------------------------------------------------*
START-OF-SELECTION.
  PERFORM:
            F_SELECIONA_DADOS, " Form seleciona dados
            F_ALV. " Form ALV

  CALL SCREEN 0100.

END-OF-SELECTION.
*&---------------------------------------------------------------------*
*&      Form  F_SELECIONA_DADOS
*&---------------------------------------------------------------------*
FORM F_SELECIONA_DADOS.

  PERFORM: CONDICOES_STATUS.

ENDFORM.                    " F_SELECIONA_DADOS

*&---------------------------------------------------------------------*
*&      Form  CONDICOES_STATUS
*&---------------------------------------------------------------------*
FORM CONDICOES_STATUS .

  WA_STATUS-SIGN   = 'I'.
  WA_STATUS-OPTION = 'EQ'.

  IF ( BLOQ_MM = 'X' ).
    WA_STATUS-LOW = 'S'.
    APPEND WA_STATUS TO R_EKPO_S.
  ELSEIF ( ELIM_MM = 'X' ).
    WA_STATUS-LOW = 'L'.
    APPEND WA_STATUS TO R_EKPO_S.
  ELSEIF ( ATIVO_MM = 'X' ).
    WA_STATUS-LOW = ''.
    APPEND WA_STATUS TO R_EKPO_S.
  ELSE.

    CLEAR: WA_STATUS-SIGN,
           WA_STATUS-OPTION.

    WA_STATUS-SIGN   = 'I'.
    WA_STATUS-OPTION = 'EQ'.
    APPEND WA_STATUS TO R_EKPO_S.
    WA_STATUS-LOW  = 'S'.
    WA_STATUS-HIGH = 'S'.
    APPEND WA_STATUS TO R_EKPO_S.

    WA_STATUS-LOW  = 'L'.
    WA_STATUS-HIGH = 'L'.
    APPEND WA_STATUS TO R_EKPO_S.

    WA_STATUS-LOW  = ''.
    WA_STATUS-HIGH = ''.
    APPEND WA_STATUS TO R_EKPO_S.

  ENDIF.

  " Produzido
  PERFORM: SELECIONAR_PRODUZIDO.
  " Compras
  PERFORM: SELECIONA_DADOS_COMPRAS.
  " Vendas
  PERFORM SELECIONA_DADOS_VENDAS.
  " Agrupamento
  PERFORM: AGRUPAMENTO.

ENDFORM.                    " CONDICOES_STATUS

*&---------------------------------------------------------------------*
*&      Form  SELECIONA_DADOS_COMPRAS
*&---------------------------------------------------------------------*
FORM SELECIONA_DADOS_COMPRAS.

  DATA: TOTAL   TYPE EKBE-MENGE,
        TOTAL_F TYPE EKBE-MENGE.

  " Cabeçalho do documento de compra
  SELECT EBELN BSART LIFNR BUKRS AEDAT WAERS UNSEZ
   FROM EKKO
   INTO TABLE IT_EKKO
  WHERE  BSART IN P_BSART
     AND AEDAT IN P_ERDAT
     AND BUKRS IN P_BUKRS
     AND UNSEZ IN P_SAFRA.

  CHECK NOT IT_EKKO[] IS INITIAL.

  TRY .
      " Item do documento de compras
      SELECT EBELN EBELP EKPO~MATNR EKPO~TXZ01 MENGE NETWR LOEKZ EKPO~MEINS NETPR
       FROM EKPO
       INNER JOIN MARA
       ON MARA~MATNR  = EKPO~MATNR
       INTO CORRESPONDING FIELDS OF TABLE IT_EKPO
       FOR ALL ENTRIES IN IT_EKKO
      WHERE EKPO~EBELN EQ IT_EKKO-EBELN
        AND EKPO~LOEKZ IN R_EKPO_S
        AND EKPO~MATNR IN P_MATNR
        AND MARA~MATKL IN P_GRUPO.

    CATCH CX_SY_OPEN_SQL_DB INTO DATA(ERR).
      DATA(MSG) = ERR->GET_TEXT( ).
      MESSAGE MSG TYPE 'S' DISPLAY LIKE 'E'.
      EXIT.
  ENDTRY.

  CHECK NOT IT_EKPO[] IS INITIAL.

  " Mestre de fornecedores (parte geral)
  SELECT LIFNR NAME1
    FROM LFA1
    INTO TABLE IT_LFA1
    FOR ALL ENTRIES IN IT_EKKO
  WHERE LIFNR EQ IT_EKKO-LIFNR.

  " Descrição do Material
  SELECT MANDT MATNR SPRAS MAKTX MAKTG
    FROM MAKT
    INTO TABLE IT_MAKT
    FOR ALL ENTRIES IN IT_EKPO
 WHERE MATNR EQ IT_EKPO-MATNR.


  SORT: IT_EKBE BY EBELN,
        IT_EKPO BY EBELN,
        IT_RBKP BY BELNR GJAHR,
        IT_LFA1 BY LIFNR,
        IT_MAKT BY MATNR.

  LOOP AT IT_EKKO INTO WA_EKKO.

    WA_COMPRA_AUX-EBELN = WA_EKKO-EBELN.
    WA_COMPRA_AUX-BSART = WA_EKKO-BSART.
    WA_COMPRA_AUX-BUKRS = WA_EKKO-BUKRS.
    WA_COMPRA_AUX-AEDAT = WA_EKKO-AEDAT.
    WA_COMPRA_AUX-WAERS = WA_EKKO-WAERS.

    READ TABLE IT_EKPO INTO WA_EKPO WITH KEY EBELN = WA_EKKO-EBELN BINARY SEARCH.

    IF ( SY-SUBRC EQ 0 ).
      WA_COMPRA_AUX-MENGE = WA_EKPO-MENGE.
      WA_COMPRA_AUX-EBELP = WA_EKPO-EBELP.
      WA_COMPRA_AUX-TXZ01 = WA_EKPO-TXZ01.
      WA_COMPRA_AUX-NETWR = WA_EKPO-NETWR.
      WA_COMPRA_AUX-LOEKZ = WA_EKPO-LOEKZ.
      WA_COMPRA_AUX-MEINS = WA_EKPO-MEINS.
      WA_COMPRA_AUX-NETPR = WA_EKPO-NETPR.

      READ TABLE IT_MAKT INTO WA_MAKT WITH KEY MATNR = WA_EKPO-MATNR BINARY SEARCH.
      WA_COMPRA_AUX-MATNR = WA_MAKT-MATNR.
      WA_COMPRA_AUX-MAKTX = WA_MAKT-MAKTX.


      READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_EKKO-LIFNR BINARY SEARCH.
      WA_COMPRA_AUX-LIFNR = WA_LFA1-LIFNR.
      WA_COMPRA_AUX-NAME1 = WA_LFA1-NAME1.

      APPEND WA_COMPRA_AUX TO IT_COMPRA_AUX.

    ENDIF.

    CLEAR: WA_EKKO,
           WA_EKBE,
           WA_LFA1,
           WA_COMPRA_AUX.
  ENDLOOP.

  CLEAR: WA_COMPRA_AUX.

  " Cabeçalho do documento de compra
  SELECT EBELN BSART LIFNR BUKRS AEDAT WAERS UNSEZ
   FROM EKKO
   INTO TABLE IT_EKKO_FORN
   FOR ALL ENTRIES IN IT_EKPO
  WHERE EBELN EQ IT_EKPO-EBELN
    AND UNSEZ IN P_SAFRA.


  SORT: IT_COMPRA_AUX BY MATNR MENGE EBELP,
          IT_MAKT     BY MATNR,
          IT_LFA1     BY LIFNR,
          IT_EKBE     BY EBELN,
          IT_RBKP     BY BELNR.

*---> 05/07/2023 - Migração S4 - DL
  SORT IT_EKKO_FORN BY EBELN.
  SORT IT_EKKO BY EBELN.
*<--- 05/07/2023 - Migração S4 - DL
  LOOP AT IT_EKPO INTO WA_EKPO.
    READ TABLE IT_COMPRA_AUX INTO WA_COMPRA_AUX WITH KEY "matnr = wa_ekpo-matnr
                                                         "menge = wa_ekpo-menge
                                                         EBELN = WA_EKPO-EBELN
                                                         EBELP = WA_EKPO-EBELP.
    IF ( SY-SUBRC NE 0 ).
      WA_COMPRA_AUX-EBELN = WA_EKPO-EBELN.
      WA_COMPRA_AUX-MENGE = WA_EKPO-MENGE.
      WA_COMPRA_AUX-EBELP = WA_EKPO-EBELP.
      WA_COMPRA_AUX-TXZ01 = WA_EKPO-TXZ01.
      WA_COMPRA_AUX-NETWR = WA_EKPO-NETWR.
      WA_COMPRA_AUX-LOEKZ = WA_EKPO-LOEKZ.
      WA_COMPRA_AUX-MEINS = WA_EKPO-MEINS.
      WA_COMPRA_AUX-NETPR = WA_EKPO-NETPR.

      READ TABLE IT_EKKO INTO WA_EKKO WITH KEY EBELN = WA_EKPO-EBELN BINARY SEARCH.
      IF ( SY-SUBRC EQ 0 ).
        WA_COMPRA_AUX-WAERS = WA_EKKO-WAERS.
      ENDIF.

      READ TABLE IT_EKKO_FORN INTO WA_EKKO_FORN WITH KEY EBELN = WA_EKPO-EBELN BINARY SEARCH.
      IF ( SY-SUBRC EQ 0 ).

        READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_EKKO_FORN-LIFNR BINARY SEARCH.
        WA_COMPRA_AUX-LIFNR = WA_LFA1-LIFNR.
        WA_COMPRA_AUX-NAME1 = WA_LFA1-NAME1.
      ENDIF.


      READ TABLE IT_MAKT INTO WA_MAKT WITH KEY MATNR = WA_EKPO-MATNR BINARY SEARCH.
      WA_COMPRA_AUX-MATNR = WA_MAKT-MATNR.
      WA_COMPRA_AUX-MAKTX = WA_MAKT-MAKTX.


      APPEND WA_COMPRA_AUX TO IT_COMPRA_AUX.
    ENDIF.
    CLEAR: WA_COMPRA_AUX, WA_MAKT, WA_EKBE, WA_EKPO, WA_RBKP, WA_EKKO.
  ENDLOOP.


  " Tratamento para pegar o faturado
  IF NOT ( IT_COMPRA_AUX[] IS INITIAL ).

    " Histórico para o documento de compra
    SELECT EBELN VGABE MENGE SHKZG BELNR BUDAT DMBTR EBELP MATNR GJAHR BEWTP
      FROM EKBE
      INTO TABLE IT_EKBE
      FOR ALL ENTRIES IN IT_COMPRA_AUX
    WHERE EBELN EQ IT_COMPRA_AUX-EBELN
      AND VGABE = '2'
      AND MATNR EQ IT_COMPRA_AUX-MATNR
      "and shkzg ne 'H'
      AND BEWTP EQ 'Q'
      AND BUDAT IN P_FATUR.

    " Cabeçalho doc.da fatura recebida
    SELECT BELNR GJAHR XBLNR STBLG
      FROM RBKP
      INTO TABLE IT_RBKP
      FOR ALL ENTRIES IN IT_EKBE
    WHERE BELNR EQ IT_EKBE-BELNR
      AND GJAHR EQ IT_EKBE-GJAHR
      AND STBLG EQ ''.

    IT_EKBE_AUX[] = IT_EKBE[].


    SORT: IT_EKBE     BY MATNR,
          IT_EKBE_AUX BY MATNR.

    LOOP AT IT_EKBE_AUX INTO WA_EKBE_AUX.
      LOOP AT IT_EKBE INTO WA_EKBE WHERE EBELN EQ WA_EKBE_AUX-EBELN
                                     AND MATNR EQ WA_EKBE_AUX-MATNR.

        IF ( WA_EKBE-SHKZG EQ 'S' ).
          TOTAL_F = TOTAL_F + WA_EKBE-MENGE.
        ELSEIF ( WA_EKBE-SHKZG EQ 'H' )  .
          TOTAL_F = TOTAL_F - WA_EKBE-MENGE.
        ENDIF.
      ENDLOOP.

      IF NOT ( TOTAL_F IS INITIAL ).
        WA_FATURADO_AUX-EBELN          = WA_EKBE_AUX-EBELN.
        WA_FATURADO_AUX-MATNR          = WA_EKBE_AUX-MATNR.
        WA_FATURADO_AUX-VALOR_FATURADO = TOTAL_F.
        APPEND WA_FATURADO_AUX TO IT_FATURADO_AUX.
      ENDIF.

      DELETE IT_EKBE_AUX WHERE EBELN EQ WA_EKBE_AUX-EBELN
                           AND MATNR EQ WA_EKBE_AUX-MATNR.

      CLEAR: WA_EKBE, WA_EKBE_AUX, TOTAL_F.
    ENDLOOP.
  ENDIF.

  REFRESH: IT_FATURADO_SOMA[].
  IT_FATURADO_SOMA[] = IT_FATURADO_AUX[].


  SORT: IT_FATURADO_AUX  BY MATNR,
        IT_FATURADO_SOMA BY MATNR.

  LOOP AT IT_FATURADO_AUX INTO WA_FATURADO_AUX.
    LOOP AT IT_FATURADO_SOMA INTO WA_FATURADO_SOMA WHERE MATNR EQ WA_FATURADO_AUX-MATNR.
      WA_FATURADO-VALOR_TOTAL = WA_FATURADO-VALOR_TOTAL + WA_FATURADO_SOMA-VALOR_FATURADO.
      WA_FATURADO-MATNR       = WA_FATURADO_SOMA-MATNR.
    ENDLOOP.
    APPEND WA_FATURADO TO IT_FATURADO.
    DELETE IT_FATURADO_AUX WHERE MATNR EQ WA_FATURADO_SOMA-MATNR.
    CLEAR: WA_FATURADO_SOMA, WA_FATURADO.
  ENDLOOP.


  REFRESH: IT_COMPRA_SOMA[], IT_COMPRA[].
  IT_COMPRA_SOMA[] = IT_COMPRA_AUX[].
  IT_COMPRA[]      = IT_COMPRA_AUX[].

  SORT: IT_COMPRA_SOMA BY MATNR,
        IT_COMPRA      BY MATNR.

  LOOP AT IT_COMPRA_SOMA INTO WA_COMPRA_SOMA.
    LOOP AT IT_COMPRA INTO WA_COMPRA WHERE MATNR EQ WA_COMPRA_SOMA-MATNR
                                       AND EBELP EQ WA_COMPRA_SOMA-EBELP.

      WA_SAIDA_AUX-MATNR     = WA_COMPRA-MATNR.
      WA_SAIDA_AUX-MAKTX     = WA_COMPRA-MAKTX.
      WA_SAIDA_AUX-CATEGORIA = 'C'.

      WA_SAIDA_AUX-EBELN_C  = WA_COMPRA-EBELN.
      WA_SAIDA_AUX-BSART_C  = WA_COMPRA-BSART.
      WA_SAIDA_AUX-BUKRS_C  = WA_COMPRA-BUKRS.
      WA_SAIDA_AUX-AEDAT_C  = WA_COMPRA-AEDAT.
      WA_SAIDA_AUX-WAERS_C  = WA_COMPRA-WAERS.
      WA_SAIDA_AUX-VGABE_C  = WA_COMPRA-VGABE.
      WA_SAIDA_AUX-MENGE_C  = WA_COMPRA-MENGE.
      WA_SAIDA_AUX-SHKZG_C  = WA_COMPRA-SHKZG.
      WA_SAIDA_AUX-BELNR_C  = WA_COMPRA-BELNR.
      WA_SAIDA_AUX-BUDAT_C  = WA_COMPRA-BUDAT.
      WA_SAIDA_AUX-DMBTR_C  = WA_COMPRA-DMBTR.
      WA_SAIDA_AUX-EBELP_C  = WA_COMPRA-EBELP.
      WA_SAIDA_AUX-TXZ01_C  = WA_COMPRA-TXZ01.
      WA_SAIDA_AUX-NETWR_C  = WA_COMPRA-NETWR.
      WA_SAIDA_AUX-LOEKZ_C  = WA_COMPRA-LOEKZ.
      WA_SAIDA_AUX-MEINS_C  = WA_COMPRA-MEINS.
      WA_SAIDA_AUX-GJAHR_C  = WA_COMPRA-GJAHR.
      WA_SAIDA_AUX-XBLNR_C  = WA_COMPRA-XBLNR.
      WA_SAIDA_AUX-LIFNR_C  = WA_COMPRA-LIFNR.
      WA_SAIDA_AUX-NAME1_C  = WA_COMPRA-NAME1.
      WA_SAIDA_AUX-NETPR_C  = WA_COMPRA-NETPR.


      IF ( WA_COMPRA-SHKZG EQ 'S' ).
        TOTAL = TOTAL + WA_COMPRA-MENGE.
      ELSEIF ( WA_COMPRA-SHKZG EQ 'H' ).
        TOTAL = - ( TOTAL + WA_COMPRA-MENGE ).
      ELSEIF ( WA_COMPRA-SHKZG EQ '' ).
        TOTAL = TOTAL + WA_COMPRA-MENGE.
      ENDIF.

      WA_SAIDA_AUX-TOTAL_COMPRA = TOTAL.

    ENDLOOP.

    READ TABLE IT_SAIDA_AUX WITH KEY MATNR = WA_SAIDA_AUX-MATNR.
    IF NOT SY-SUBRC IS INITIAL.
      APPEND WA_SAIDA_AUX TO IT_SAIDA_AUX.
    ELSE.
      WA_SAIDA_AUX-TOTAL_COMPRA = WA_SAIDA_AUX-TOTAL_COMPRA + IT_SAIDA_AUX-TOTAL_COMPRA.
      MODIFY IT_SAIDA_AUX FROM WA_SAIDA_AUX INDEX SY-TABIX TRANSPORTING TOTAL_COMPRA.
    ENDIF.

    IF NOT ( IT_SAIDA_AUX[] IS INITIAL ).
      DELETE IT_COMPRA_SOMA WHERE MATNR EQ WA_COMPRA-MATNR
                              AND EBELP EQ WA_COMPRA-EBELP.

    ENDIF.

    CLEAR: WA_SAIDA_AUX, WA_COMPRA, WA_COMPRA_SOMA, TOTAL, TOTAL_F, WA_EKBE, WA_RBKP.
  ENDLOOP.
ENDFORM.                    " SELECIONA_DADOS_COMPRAS
*&---------------------------------------------------------------------*
*&      Form  SELECIONA_DADOS_VENDAS
*&---------------------------------------------------------------------*
FORM SELECIONA_DADOS_VENDAS .

  DATA: TOTAL   TYPE VBFA-RFMNG,
        TOTAL_F TYPE VBFA-RFMNG.

*  BREAK-POINT.

  PERFORM: STATUS_PEDIDO.


  IF NOT ( P_SAFRA IS INITIAL ).

    CHECK NOT IT_VBAK[] IS INITIAL.
*    CHECK NOT IT_ZSDT0041[] IS INITIAL.
*    CHECK NOT IT_ZSDT0040[] IS INITIAL.

  ELSE.
    CHECK NOT IT_VBAK[] IS INITIAL.
  ENDIF.

  CLEAR: IT_MAKT.

  TRY.
      SELECT VBELN VBAP~MATNR ARKTX WERKS ZMENG NETWR KWMENG VRKME POSNR NETPR
       FROM VBAP
       INNER JOIN MARA
       ON MARA~MATNR  = VBAP~MATNR
         INTO CORRESPONDING FIELDS OF TABLE IT_VBAP
         FOR ALL ENTRIES IN IT_VBAK
          WHERE VBAP~VBELN EQ IT_VBAK-VBELN
          AND   VBAP~MATNR IN P_MATNR
           AND  MARA~MATKL IN P_GRUPO.

    CATCH CX_SY_OPEN_SQL_DB INTO DATA(ERR).
      DATA(MSG) = ERR->GET_TEXT( ).
      MESSAGE MSG TYPE 'S' DISPLAY LIKE 'E'.
      EXIT.
  ENDTRY.

  IF SY-SUBRC IS INITIAL.
    SELECT *
      FROM ZFIT0026
      INTO TABLE IT_0026
      FOR ALL ENTRIES IN IT_VBAK
       WHERE VBELN EQ IT_VBAK-VBELN.

    IF SY-SUBRC IS INITIAL.
      SELECT *
        FROM ZIB_CONTABIL_CHV
        INTO TABLE IT_ZIB
         FOR ALL ENTRIES IN IT_0026
          WHERE OBJ_KEY EQ IT_0026-OBJ_KEY.

      IF SY-SUBRC IS INITIAL.
        LOOP AT IT_ZIB.
          READ TABLE IT_0026
            WITH KEY OBJ_KEY = IT_ZIB-OBJ_KEY.

          IF SY-SUBRC IS INITIAL.
            MOVE : IT_ZIB-BUKRS   TO IT_ZIB_BSIK-BUKRS,
                   IT_0026-DOCNUM TO IT_ZIB_BSIK-BELNR,
                   IT_ZIB-GJAHR   TO IT_ZIB_BSIK-GJAHR.

            APPEND IT_ZIB_BSIK.

          ENDIF.
          CLEAR: IT_ZIB_BSIK.
        ENDLOOP.

        IF SY-SUBRC IS INITIAL.
          SELECT *
            FROM BSIK
            INTO TABLE IT_BSIK
             FOR ALL ENTRIES IN IT_ZIB_BSIK
              WHERE BUKRS EQ IT_ZIB_BSIK-BUKRS
                AND BELNR EQ IT_ZIB_BSIK-BELNR
                AND GJAHR EQ IT_ZIB_BSIK-GJAHR.

        ENDIF.
      ENDIF.


    ENDIF.

  ENDIF.

  SELECT *
    FROM VBKD
    INTO TABLE IT_VBKD
     FOR ALL ENTRIES IN IT_VBAK
     WHERE VBELN EQ IT_VBAK-VBELN.

  IF SY-SUBRC IS INITIAL.
    SELECT *
      FROM T052U
      INTO TABLE IT_T052U
       FOR ALL ENTRIES IN IT_VBKD
        WHERE SPRAS EQ 'PT'
          AND ZTERM EQ IT_VBKD-ZTERM.
  ENDIF.

*  select vbeln posnr etenr lifsp
*    from vbep
*    into table it_vbep
*    for all entries in it_vbap
*  where vbeln eq it_vbap-vbeln
*    and posnr eq it_vbap-posnr
*    and etenr eq 1.

  " Descrição do Material
  SELECT MANDT MATNR SPRAS MAKTX MAKTG
    FROM MAKT
    INTO TABLE IT_MAKT
    FOR ALL ENTRIES IN IT_VBAP
 WHERE MATNR EQ IT_VBAP-MATNR.


  SELECT KUNNR NAME1
    FROM KNA1
    INTO TABLE IT_KNA1
    FOR ALL ENTRIES IN IT_VBAK
  WHERE KUNNR EQ IT_VBAK-KUNNR.

  SORT: IT_VBAK BY VBELN,
        IT_VBAP BY VBELN,
        IT_MAKT BY MATNR,
        IT_KNA1 BY KUNNR.


  LOOP AT IT_VBAP INTO WA_VBAP.

    WA_VENDA_AUX-MATNR   = WA_VBAP-MATNR.
    WA_VENDA_AUX-ARKTX   = WA_VBAP-ARKTX.
    WA_VENDA_AUX-WERKS   = WA_VBAP-WERKS.
    WA_VENDA_AUX-ZMENG   = WA_VBAP-ZMENG.
    WA_VENDA_AUX-NETWR   = WA_VBAP-NETWR.
    WA_VENDA_AUX-KWMENG  = WA_VBAP-KWMENG.
    WA_VENDA_AUX-VRKME   = WA_VBAP-VRKME.
    WA_VENDA_AUX-POSNR   = WA_VBAP-POSNR.
    WA_VENDA_AUX-NETPR   = WA_VBAP-NETPR.

    READ TABLE IT_VBAK INTO WA_VBAK WITH KEY VBELN = WA_VBAP-VBELN BINARY SEARCH.
    WA_VENDA_AUX-VBELN = WA_VBAK-VBELN.
    WA_VENDA_AUX-VKORG = WA_VBAK-VKORG.
    WA_VENDA_AUX-VTWEG = WA_VBAK-VTWEG.
    WA_VENDA_AUX-SPART = WA_VBAK-SPART.
    WA_VENDA_AUX-AUART = WA_VBAK-AUART.
    WA_VENDA_AUX-VKBUR = WA_VBAK-VKBUR.
    WA_VENDA_AUX-WAERK = WA_VBAK-WAERK.
    WA_VENDA_AUX-ERDAT = WA_VBAK-ERDAT.
    WA_VENDA_AUX-FAKSK = WA_VBAK-FAKSK.
    WA_VENDA_AUX-LIFSK = WA_VBAK-LIFSK.
    WA_VENDA_AUX-AUDAT = WA_VBAK-AUDAT.

    READ TABLE IT_MAKT INTO WA_MAKT WITH KEY MATNR = WA_VBAP-MATNR BINARY SEARCH.
    WA_VENDA_AUX-MAKTX   = WA_MAKT-MAKTX.

    READ TABLE IT_KNA1 INTO WA_KNA1 WITH KEY KUNNR = WA_VBAK-KUNNR BINARY SEARCH.
    WA_VENDA_AUX-KUNNR = WA_KNA1-KUNNR.
    WA_VENDA_AUX-NAME1 = WA_KNA1-NAME1.

    READ TABLE IT_KONV INTO WA_KONV WITH KEY KPOSN = WA_VBAP-POSNR
                                             KNUMV = WA_VBAK-KNUMV.
    IF ( SY-SUBRC EQ 0 ).
      WA_VENDA_AUX-KBETR = WA_KONV-KBETR.
    ENDIF.

*    read table it_vbep into wa_vbep with key vbeln = wa_vbap-vbeln
*                                             posnr = wa_vbap-posnr
*                                             etenr = 1.
*
*    wa_venda_aux-lifsp = wa_vbep-lifsp.

    APPEND WA_VENDA_AUX TO IT_VENDA_AUX.

    CLEAR: WA_VBAP, WA_VBAK, WA_VBAP, WA_MAKT, WA_KNA1, WA_KONV, WA_VENDA_AUX.

  ENDLOOP.

  " Fatura - Venda
  SELECT RFMNG VBELN VBTYP_N VBELV VBTYP_V MEINS ERDAT MATNR POSNV
    FROM VBFA
    INTO TABLE IT_VBFA
    FOR ALL ENTRIES IN IT_VENDA_AUX
  WHERE VBELV EQ IT_VENDA_AUX-VBELN
    AND VBTYP_V = 'C'
    AND ERDAT IN P_FATUR.

  IF NOT ( IT_VBFA[] IS INITIAL ).
    DELETE IT_VBFA WHERE VBTYP_N NE 'N'
                     AND VBTYP_N NE 'M'.
  ENDIF.


  SORT: IT_VENDA_AUX BY VBELN POSNR.

  LOOP AT IT_VBFA INTO WA_VBFA.

    "    wa_vbfa_aux-rfmng     = wa_vbfa-rfmng.
    WA_VBFA_AUX-VBELN     = WA_VBFA-VBELN.
    WA_VBFA_AUX-VBTYP_N   = WA_VBFA-VBTYP_N.
    WA_VBFA_AUX-VBELV     = WA_VBFA-VBELV.
    WA_VBFA_AUX-VBTYP_V   = WA_VBFA-VBTYP_V.
    WA_VBFA_AUX-MEINS     = WA_VBFA-MEINS.
    WA_VBFA_AUX-ERDAT     = WA_VBFA-ERDAT.
    WA_VBFA_AUX-POSNV     = WA_VBFA-POSNV.

    READ TABLE IT_VENDA_AUX INTO WA_VENDA_AUX WITH KEY VBELN = WA_VBFA_AUX-VBELV
                                                       POSNR = WA_VBFA_AUX-POSNV BINARY SEARCH.
    IF ( SY-SUBRC EQ 0 ).
      WA_VBFA_AUX-MATNR     = WA_VENDA_AUX-MATNR.

      PERFORM: CONVERSION_SAC USING WA_VENDA_AUX-MATNR
                                    WA_VBFA-RFMNG
                                    WA_VBFA-MEINS.

      IF NOT ( VALOR_CONVERSION_FATURADO IS INITIAL ).
        WA_VBFA_AUX-RFMNG = VALOR_CONVERSION_FATURADO.
      ENDIF.

    ENDIF.

    APPEND WA_VBFA_AUX TO IT_VBFA_AUX.

    CLEAR: WA_VBFA_AUX, WA_VBFA.
  ENDLOOP.

  REFRESH: IT_VBFA_SOMA[].
  IT_VBFA_SOMA[] = IT_VBFA_AUX[].

  SORT: IT_VBFA_AUX  BY MATNR,
        IT_VBFA_SOMA BY MATNR.

  LOOP AT IT_VBFA_AUX INTO WA_VBFA_AUX.
    LOOP AT IT_VBFA_SOMA INTO WA_VBFA_SOMA WHERE MATNR EQ WA_VBFA_AUX-MATNR
                                             AND VBELV EQ WA_VBFA_AUX-VBELV.

      IF ( ( WA_VBFA_SOMA-VBTYP_N EQ 'M' ) OR ( WA_VBFA_SOMA-VBTYP_N EQ 'S') ) .
        TOTAL_F = TOTAL_F + WA_VBFA_SOMA-RFMNG.
      ELSEIF ( ( WA_VBFA_SOMA-VBTYP_N EQ 'N' ) OR ( WA_VBFA_SOMA-VBTYP_N EQ 'O' ) ).
        TOTAL_F = TOTAL_F - WA_VBFA_SOMA-RFMNG.
      ENDIF.
    ENDLOOP.

    WA_FATURADO_VENDA-VBELV = WA_VBFA_SOMA-VBELN.
    WA_FATURADO_VENDA-MATNR = WA_VBFA_SOMA-MATNR.
    WA_FATURADO_VENDA-VALOR_FATURADO = TOTAL_F.


    APPEND WA_FATURADO_VENDA TO IT_FATURADO_VENDA.
    DELETE IT_VBFA_AUX WHERE VBELV EQ WA_VBFA_SOMA-VBELV
                         AND MATNR EQ WA_VBFA_SOMA-MATNR.

    CLEAR: WA_VBFA_AUX, WA_VBFA_SOMA, WA_FATURADO_VENDA, TOTAL_F, VALOR_CONVERSION_FATURADO .
  ENDLOOP.

  REFRESH: IT_FATURADO_VENDA_SOMA[].
  IT_FATURADO_VENDA_AUX[] = IT_FATURADO_VENDA[].


  SORT: IT_FATURADO_VENDA     BY MATNR,
        IT_FATURADO_VENDA_AUX BY MATNR.


  IF NOT ( IT_FATURADO_VENDA[] IS INITIAL ).

    DELETE IT_FATURADO_VENDA     WHERE MATNR EQ ''.
    DELETE IT_FATURADO_VENDA_AUX WHERE MATNR EQ ''.

    LOOP AT IT_FATURADO_VENDA INTO WA_FATURADO_VENDA.

      LOOP AT IT_FATURADO_VENDA_AUX INTO WA_FATURADO_VENDA_AUX WHERE MATNR EQ WA_FATURADO_VENDA-MATNR.
        WA_FATURADO_VENDA_SOMA-VALOR_TOTAL = WA_FATURADO_VENDA_SOMA-VALOR_TOTAL + WA_FATURADO_VENDA_AUX-VALOR_FATURADO.
        WA_FATURADO_VENDA_SOMA-MATNR       = WA_FATURADO_VENDA_AUX-MATNR.
      ENDLOOP.

      APPEND WA_FATURADO_VENDA_SOMA TO IT_FATURADO_VENDA_SOMA.
      DELETE IT_FATURADO_VENDA WHERE MATNR EQ WA_FATURADO_VENDA_AUX-MATNR.
      CLEAR: WA_FATURADO_VENDA_SOMA, WA_FATURADO_VENDA, WA_FATURADO_VENDA_AUX.

    ENDLOOP.

  ENDIF.

  REFRESH: IT_VENDA_SOMA[].
  IT_VENDA_SOMA[] = IT_VENDA_AUX[].
  IT_VENDA[] = IT_VENDA_AUX[].

  CLEAR: WA_VENDA_AUX.


  SORT: IT_VENDA_AUX  BY MATNR,
        IT_VENDA_SOMA BY MATNR.

  LOOP AT IT_VENDA_AUX INTO WA_VENDA_AUX.
    LOOP AT IT_VENDA_SOMA INTO WA_VENDA_SOMA WHERE VBELN EQ WA_VENDA_AUX-VBELN
                                               AND MATNR EQ WA_VENDA_AUX-MATNR.

      WA_SAIDA_AUX-MATNR     = WA_VENDA_SOMA-MATNR.
      WA_SAIDA_AUX-MAKTX     = WA_VENDA_SOMA-MAKTX.
      WA_SAIDA_AUX-CATEGORIA = 'V'.

      WA_SAIDA_AUX-VBELN_V    = WA_VENDA_SOMA-VBELN.
      WA_SAIDA_AUX-VKORG_V    = WA_VENDA_SOMA-VKORG.
      WA_SAIDA_AUX-VTWEG_V    = WA_VENDA_SOMA-VTWEG.
      WA_SAIDA_AUX-SPART_V    = WA_VENDA_SOMA-SPART.
      WA_SAIDA_AUX-AUART_V    = WA_VENDA_SOMA-AUART.
      WA_SAIDA_AUX-VKBUR_V    = WA_VENDA_SOMA-VKBUR.
      WA_SAIDA_AUX-WAERK_V    = WA_VENDA_SOMA-WAERK.
      WA_SAIDA_AUX-ERDAT_V    = WA_VENDA_SOMA-ERDAT.
      WA_SAIDA_AUX-FAKSK_V    = WA_VENDA_SOMA-FAKSK.
      WA_SAIDA_AUX-LIFSK_V    = WA_VENDA_SOMA-LIFSK.
      WA_SAIDA_AUX-AUDAT_V    = WA_VENDA_SOMA-AUDAT.
      WA_SAIDA_AUX-ARKTX_V    = WA_VENDA_SOMA-ARKTX.
      WA_SAIDA_AUX-WERKS_V    = WA_VENDA_SOMA-WERKS.
      WA_SAIDA_AUX-ZMENG_V    = WA_VENDA_SOMA-ZMENG.
      WA_SAIDA_AUX-NETWR_V    = WA_VENDA_SOMA-NETWR.
      WA_SAIDA_AUX-KWMENG_V   = WA_VENDA_SOMA-KWMENG.
      WA_SAIDA_AUX-VRKME_V    = WA_VENDA_SOMA-VRKME.
      WA_SAIDA_AUX-POSNR_V    = WA_VENDA_SOMA-POSNR.
      WA_SAIDA_AUX-RFMNG_V    = WA_VENDA_SOMA-RFMNG.
      WA_SAIDA_AUX-VBTYP_N_V  = WA_VENDA_SOMA-VBTYP_N.
      WA_SAIDA_AUX-VBELV_V    = WA_VENDA_SOMA-VBELV.
      WA_SAIDA_AUX-VBTYP_V_V  = WA_VENDA_SOMA-VBTYP_V.
      WA_SAIDA_AUX-MEINS_V    = WA_VENDA_SOMA-MEINS.
      WA_SAIDA_AUX-KUNNR_V    = WA_VENDA_SOMA-KUNNR.
      WA_SAIDA_AUX-NAME1_V    = WA_VENDA_SOMA-NAME1.
      WA_SAIDA_AUX-KBETR_V    = WA_VENDA_SOMA-KBETR.
      WA_SAIDA_AUX-LIFSP_V    = WA_VENDA_SOMA-LIFSP.

      IF ( WA_VENDA_SOMA-VBTYP_N EQ 'M' ).
        TOTAL = TOTAL + WA_VENDA_SOMA-KWMENG.
      ELSEIF ( WA_VENDA_SOMA-VBTYP_N EQ 'N' ).
        TOTAL = - ( TOTAL + WA_VENDA_SOMA-KWMENG ).
      ELSEIF ( WA_VENDA_SOMA-VBTYP_N EQ '' ).
        TOTAL = TOTAL + WA_VENDA_SOMA-KWMENG.
      ENDIF.

      WA_SAIDA_AUX-TOTAL_VENDA = TOTAL.

    ENDLOOP.

    APPEND WA_SAIDA_AUX TO IT_SAIDA_AUX.

    IF NOT ( IT_VENDA_AUX[] IS INITIAL ).
      DELETE IT_VENDA_AUX WHERE MATNR EQ WA_VENDA_SOMA-MATNR
                            AND VBELN EQ WA_VENDA_SOMA-VBELN.
    ENDIF.

    CLEAR: WA_VENDA_SOMA, WA_VENDA_AUX, WA_SAIDA_AUX, TOTAL, WA_FATURADO_VENDA.
  ENDLOOP.
ENDFORM.                    " SELECIONA_DADOS_VENDAS
*&---------------------------------------------------------------------*
*&      Form  SELECIONAR_PRODUZIDO
*&---------------------------------------------------------------------*
FORM SELECIONAR_PRODUZIDO .

  DATA: TOTAL TYPE S225-WEMNG.   "#EC CI_USAGE_OK[2268063]


  DATA: BEGIN OF T_MARM OCCURS 0.
          INCLUDE STRUCTURE MARM.
        DATA: END OF T_MARM.

  CLEAR T_MARM.
  REFRESH T_MARM.

  CLEAR: IT_MAKT[].

  IF ( P_SPART-LOW EQ '04' ).

    " Produzido
    SELECT *
       FROM SETLEAF
       INTO TABLE IT_SETLEAF_AUX
     WHERE SETNAME EQ 'MAGGI_ZSDT0041'.

    IF NOT ( IT_SETLEAF_AUX[] IS INITIAL ).

      LOOP AT IT_SETLEAF_AUX INTO WA_SETLEAF_AUX.
        WA_SETLEAF-VALFROM_AUX = WA_SETLEAF_AUX-VALFROM.
        APPEND WA_SETLEAF TO IT_SETLEAF.
      ENDLOOP.

      TRY.

          SELECT MATKL MATNR
              FROM MARA
              INTO TABLE IT_MARA
              FOR ALL ENTRIES IN IT_SETLEAF
            WHERE MATKL EQ IT_SETLEAF-VALFROM_AUX
              AND MATNR IN P_MATNR
              AND MATKL IN P_GRUPO.

        CATCH CX_SY_OPEN_SQL_DB INTO DATA(ERR).
          DATA(MSG) = ERR->GET_TEXT( ).
          MESSAGE MSG TYPE 'S' DISPLAY LIKE 'E'.
          EXIT.
      ENDTRY.

      CHECK NOT IT_MARA[] IS INITIAL.

*** modificação - eduardo ruttkowski tavares - 01.08.2013 >>> INI
* CH 90300 - Relatório_Compra_X-2

      DATA: BEGIN OF IT_MBEW OCCURS 0,
              MATNR LIKE MBEW-MATNR,
              BWKEY LIKE MBEW-BWKEY,
              BWTAR LIKE MBEW-BWTAR,
            END OF IT_MBEW.

      DATA: BEGIN OF IT_CHVW OCCURS 0,
              XZUGA LIKE CHVW-XZUGA,
              WERKS LIKE CHVW-WERKS,
              MATNR LIKE CHVW-MATNR,
              CHARG LIKE CHVW-CHARG,
              AUFNR LIKE CHVW-AUFNR,
              AUFPS LIKE CHVW-AUFPS,
              EBELN LIKE CHVW-EBELN,
              EBELP LIKE CHVW-EBELP,
              KDAUF LIKE CHVW-KDAUF,
              KDPOS LIKE CHVW-KDPOS,
              MBLNR LIKE CHVW-MBLNR,
              MJAHR LIKE CHVW-MJAHR,
              ZEILE LIKE CHVW-ZEILE,
              MENGE LIKE CHVW-MENGE,
              MEINS LIKE CHVW-MEINS,
            END OF IT_CHVW.

      DATA: BEGIN OF IT_MSEG OCCURS 0,
              MBLNR LIKE MSEG-MBLNR,
              MJAHR LIKE MSEG-MJAHR,
              ZEILE LIKE MSEG-ZEILE,
              SJAHR LIKE MSEG-SJAHR,
              SMBLN LIKE MSEG-SMBLN,
            END OF IT_MSEG.


      CLEAR: IT_MBEW, IT_CHVW, IT_MSEG.
      REFRESH: IT_MBEW, IT_CHVW, IT_MSEG.

*      BREAK-POINT.

      SELECT MATNR BWKEY BWTAR FROM MBEW
            INTO TABLE IT_MBEW
        FOR ALL ENTRIES IN IT_MARA
        WHERE MATNR EQ IT_MARA-MATNR AND
              BWKEY IN P_WERKS       AND
              OWNPR EQ 'X'.


      IF SY-SUBRC = 0.
        SELECT
        XZUGA
        WERKS
        MATNR
        CHARG
        AUFNR
        AUFPS
        EBELN
        EBELP
        KDAUF
        KDPOS
        MBLNR
        MJAHR
        ZEILE
        MENGE
        MEINS
        FROM CHVW INTO TABLE IT_CHVW
          FOR ALL ENTRIES IN IT_MBEW
          WHERE WERKS EQ IT_MBEW-BWKEY AND
                MATNR EQ IT_MBEW-MATNR AND
                BUDAT IN P_ERDAT       AND
                BWART EQ '131'.

        IF SY-SUBRC = 0.

          SELECT
          MBLNR
          MJAHR
          ZEILE
          SJAHR
          SMBLN
            FROM MSEG INTO TABLE IT_MSEG
            FOR ALL ENTRIES IN IT_CHVW
            WHERE SJAHR EQ IT_CHVW-MJAHR AND
                  SMBLN EQ IT_CHVW-MBLNR.

          IF SY-SUBRC = 0.
            SORT IT_CHVW BY MJAHR MBLNR.

            LOOP AT IT_MSEG.
              READ TABLE IT_CHVW WITH KEY MJAHR = IT_MSEG-SJAHR
                                          MBLNR = IT_MSEG-SMBLN
                                          BINARY SEARCH.
              IF SY-SUBRC = 0.
                DELETE IT_CHVW INDEX SY-TABIX.
              ENDIF.

            ENDLOOP.
          ENDIF.


          DATA: BEGIN OF TL_MATNR OCCURS 0.
                  INCLUDE STRUCTURE ZMME_CL.
                DATA: END OF TL_MATNR.

          DATA: BEGIN OF TL_RETURN OCCURS 0.
                  INCLUDE STRUCTURE ZMME_CL.
                DATA: END OF TL_RETURN.


          LOOP AT IT_CHVW.
            MOVE-CORRESPONDING IT_CHVW TO TL_MATNR.
            COLLECT TL_MATNR.
            CLEAR TL_MATNR.
          ENDLOOP.

          CALL FUNCTION 'Z_DADOSCLASSIFICACAOLOTE'
            TABLES
              T_MATNR  = TL_MATNR
              T_RETURN = TL_RETURN
            EXCEPTIONS
              ERRO4    = 1
              OTHERS   = 2.
          IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
          ELSE.

            IF NOT TL_RETURN[]  IS INITIAL.
              DELETE TL_RETURN WHERE NOT ATWRT IN P_SAFRA.
            ENDIF.

            SORT TL_RETURN BY MATNR CHARG.
            LOOP AT IT_CHVW.
              READ TABLE TL_RETURN WITH KEY MATNR = IT_CHVW-MATNR
                                            CHARG = IT_CHVW-CHARG
                                            BINARY SEARCH.
              IF SY-SUBRC <> 0.
                DELETE IT_CHVW.
              ENDIF.
            ENDLOOP.
          ENDIF.
        ENDIF.


        SORT IT_CHVW BY WERKS MATNR.
*        LOOP AT IT_MBEW.
*          READ TABLE IT_CHVW WITH KEY WERKS = IT_MBEW-BWKEY
*                                      MATNR = IT_MBEW-MATNR
*                                      BINARY SEARCH.
*          IF SY-SUBRC <> 0.
*            DELETE IT_MBEW.
*          ENDIF.
*        ENDLOOP.


        "Local de negócios
        SELECT BUKRS BRANCH
          FROM J_1BBRANCH
          INTO TABLE IT_J_1BBRANCH
          FOR ALL ENTRIES IN IT_CHVW
        WHERE BRANCH EQ IT_CHVW-WERKS
          AND BUKRS IN P_BUKRS.

        " Descrição do Material
        SELECT MANDT MATNR SPRAS MAKTX MAKTG
          FROM MAKT
          INTO TABLE IT_MAKT
          FOR ALL ENTRIES IN IT_MARA
       WHERE MATNR EQ IT_MARA-MATNR.


        SORT IT_MAKT BY MATNR.
        SORT IT_J_1BBRANCH BY BRANCH.


        SELECT * FROM MARM INTO TABLE T_MARM
        FOR ALL ENTRIES IN IT_CHVW
          WHERE MATNR EQ IT_CHVW-MATNR AND
                MEINH NE IT_CHVW-MEINS.

        SORT T_MARM BY MATNR.
        LOOP AT IT_CHVW.
*        LOOP AT it_s225_soma INTO wa_s225_soma WHERE matnr EQ wa_s225_aux-matnr
*                                                 AND werks EQ wa_s225_aux-werks.

          READ TABLE IT_J_1BBRANCH INTO WA_J_1BBRANCH WITH KEY BRANCH = IT_CHVW-WERKS BINARY SEARCH.
          IF ( SY-SUBRC EQ 0 ).

            IF ( IT_CHVW-MEINS EQ 'KG' ).

              READ TABLE T_MARM WITH KEY MATNR = IT_CHVW-MATNR BINARY SEARCH.
              IF SY-SUBRC = 0.

*              wa_s225_soma-menge = wa_s225_soma-wemng.
                CALL FUNCTION 'ME_CONVERSION_BPRME'
                  EXPORTING
                    I_KUMNE             = T_MARM-UMREZ
                    I_KUMZA             = T_MARM-UMREN
                    I_MATNR             = IT_CHVW-MATNR
                    I_MEIN1             = IT_CHVW-MEINS
                    I_MEIN2             = T_MARM-MEINH
                    I_MEINS             = IT_CHVW-MEINS
                    I_MENGE             = IT_CHVW-MENGE
                  IMPORTING
                    MENGE               = WA_SAIDA_AUX-WEMNG_P
                  EXCEPTIONS
                    ERROR_IN_CONVERSION = 01
                    NO_SUCCESS          = 02.

              ELSE.
                WA_SAIDA_AUX-WEMNG_P  = IT_CHVW-MENGE.
              ENDIF.

            ELSE.
              WA_SAIDA_AUX-WEMNG_P  = IT_CHVW-MENGE.
            ENDIF.

            WA_SAIDA_AUX-CATEGORIA = 'P'.
*            wa_saida_aux-sptag_p  = it_chvw-sptag.
            WA_SAIDA_AUX-WERKS_P  = IT_CHVW-WERKS.

            READ TABLE IT_MAKT INTO WA_MAKT WITH KEY MATNR = IT_CHVW-MATNR BINARY SEARCH.
            WA_SAIDA_AUX-MATNR  = WA_MAKT-MATNR.
            WA_SAIDA_AUX-MAKTX  = WA_MAKT-MAKTX.

            TOTAL = TOTAL + WA_SAIDA_AUX-WEMNG_P.
          ENDIF.
*          CLEAR: wa_s225_soma.
*        ENDLOOP.

          IF ( WA_SAIDA_AUX-CATEGORIA EQ 'P' ).
            WA_SAIDA_AUX-TOTAL_PRODUZIDO_P = TOTAL.
            APPEND WA_SAIDA_AUX TO IT_SAIDA_AUX.

*          IF NOT ( it_s225 IS INITIAL ).
*            DELETE it_s225 WHERE matnr EQ wa_s225_soma-matnr.
*          ENDIF.
          ENDIF.
          CLEAR: WA_SAIDA_AUX, WA_S225_AUX, WA_S225_SOMA, TOTAL.
        ENDLOOP.




      ENDIF.


      " Goods receipts: repetitive manufacturing
*      SELECT sptag werks matnr wemng amein
*        FROM s225
*        INTO TABLE it_s225_aux
*        FOR ALL ENTRIES IN it_mara
*      WHERE matnr EQ it_mara-matnr
*        AND sptag IN p_erdat
*        AND werks IN p_werks.
*
*      CHECK NOT IT_MBEW[]  IS INITIAL.
*
*      SELECT SPTAG WERKS MATNR WEMNG AMEIN
*        FROM S225
*        INTO TABLE IT_S225_AUX
*        FOR ALL ENTRIES IN IT_MBEW
*      WHERE MATNR EQ IT_MBEW-MATNR
*        AND SPTAG IN P_ERDAT
*        AND WERKS EQ IT_MBEW-BWKEY.

*** modificação - eduardo ruttkowski tavares - 01.08.2013 <<< FIM

*      "Local de negócios
*      SELECT bukrs branch
*        FROM j_1bbranch
*        INTO TABLE it_j_1bbranch
*        FOR ALL ENTRIES IN it_s225_aux
*      WHERE branch EQ it_s225_aux-werks
*        AND bukrs IN p_bukrs.
*
*      " Descrição do Material
*      SELECT mandt matnr spras maktx maktg
*        FROM makt
*        INTO TABLE it_makt
*        FOR ALL ENTRIES IN it_s225_aux
*     WHERE matnr EQ it_s225_aux-matnr.

*      REFRESH: it_s225_soma[].
*      it_s225_soma[] = it_s225_aux[].
*
*      SORT: it_makt       BY matnr,
*            it_j_1bbranch BY branch,
*            it_s225_aux   BY matnr,
*            it_s225_soma  BY matnr.
*
*      CLEAR: wa_saida_aux-categoria.
*      LOOP AT it_s225_aux INTO wa_s225_aux.
*        LOOP AT it_s225_soma INTO wa_s225_soma WHERE matnr EQ wa_s225_aux-matnr
*                                                 AND werks EQ wa_s225_aux-werks.
*          READ TABLE it_j_1bbranch INTO wa_j_1bbranch WITH KEY branch = wa_s225_soma-werks BINARY SEARCH.
*          IF ( sy-subrc EQ 0 ).
*
*            IF ( wa_s225_soma-amein EQ 'KG' ).
*
*              wa_s225_soma-menge = wa_s225_soma-wemng.
*              CALL FUNCTION 'ME_CONVERSION_BPRME'
*                EXPORTING
*                  i_matnr             = wa_s225_soma-matnr
*                  i_mein1             = 'KG'
*                  i_mein2             = 'BAG'
*                  i_meins             = 'KG'
*                  i_menge             = wa_s225_soma-menge
*                IMPORTING
*                  menge               = wa_saida_aux-wemng_p
*                EXCEPTIONS
*                  error_in_conversion = 01
*                  no_success          = 02.
*
*            ELSE.
*              wa_saida_aux-wemng_p  = wa_s225_soma-wemng.
*            ENDIF.
*
*            wa_saida_aux-categoria = 'P'.
*            wa_saida_aux-sptag_p  = wa_s225_soma-sptag.
*            wa_saida_aux-werks_p  = wa_s225_soma-werks.
*
*            READ TABLE it_makt INTO wa_makt WITH KEY matnr = wa_s225_soma-matnr BINARY SEARCH.
*            wa_saida_aux-matnr  = wa_makt-matnr.
*            wa_saida_aux-maktx  = wa_makt-maktx.
*
*            total = total + wa_saida_aux-wemng_p.
*          ENDIF.
*          CLEAR: wa_s225_soma.
*        ENDLOOP.
*
*        IF ( wa_saida_aux-categoria EQ 'P' ).
*          wa_saida_aux-total_produzido_p = total.
*          APPEND wa_saida_aux TO it_saida_aux.
*
*          IF NOT ( it_s225 IS INITIAL ).
*            DELETE it_s225 WHERE matnr EQ wa_s225_soma-matnr.
*          ENDIF.
*        ENDIF.
*        CLEAR: wa_saida_aux, wa_s225_aux, wa_s225_soma, total.
*      ENDLOOP.
    ENDIF.
  ELSEIF P_SPART-LOW EQ '03'.

    DATA: BEGIN OF IT_MARD OCCURS 0,
            MATNR LIKE MARD-MATNR,
            WERKS LIKE MARD-WERKS,
            LGORT LIKE MARD-LGORT,
            LABST LIKE MARD-LABST,
          END OF IT_MARD.

    DATA: BEGIN OF IT_CENTRO OCCURS 0.
            INCLUDE STRUCTURE ZSDT_DEPARA_CEN.
          DATA: END OF IT_CENTRO.


    DATA: BEGIN OF IT_MSLB OCCURS 0,
            MATNR LIKE MSLB-MATNR,
            WERKS LIKE MSLB-WERKS,
            CHARG LIKE MSLB-CHARG,
            SOBKZ LIKE MSLB-SOBKZ,
            LIFNR LIKE MSLB-LIFNR,
            LBLAB LIKE MSLB-LBLAB,
          END OF IT_MSLB.



    DATA: BEGIN OF TL_AUX OCCURS 0,
            MATNR LIKE MARA-MATNR,
            WERKS LIKE MARD-WERKS,
            MEINS LIKE MARA-MEINS,
            LABST LIKE MARD-LABST,
          END OF TL_AUX.

    DATA: BEGIN OF TL_MARA OCCURS 0,
            MATNR LIKE MARA-MATNR,
            MEINS LIKE MARA-MEINS,
            MATKL LIKE MARA-MATKL,
          END OF TL_MARA.

    CLEAR: IT_MARD, IT_CENTRO, IT_MSLB, TL_MARA, TL_AUX.
    REFRESH:  IT_MARD, IT_CENTRO, IT_MSLB, TL_MARA, TL_AUX.

    TRY .
        SELECT MATNR MEINS
          FROM MARA INTO TABLE TL_MARA
          WHERE MATNR IN P_MATNR AND
                MATKL IN P_GRUPO AND
                SPART IN P_SPART.
      CATCH CX_SY_OPEN_SQL_DB INTO ERR.
        MSG = ERR->GET_TEXT( ).
        MESSAGE MSG TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
    ENDTRY.

    IF SY-SUBRC = 0.
*    SELECT * FROM ZSDT_DEPARA_CEN
*      INTO TABLE IT_CENTRO
*      WHERE CENTRO_REAL IN P_WERKS AND
*            VKORG       IN P_VKORG.



      SELECT MATNR WERKS LGORT LABST
        FROM MARD INTO TABLE IT_MARD
        FOR ALL ENTRIES IN TL_MARA
        WHERE MATNR EQ TL_MARA-MATNR AND
              WERKS IN P_WERKS.

      REFRESH IT_CENTRO.
      SELECT * FROM ZSDT_DEPARA_CEN
        INTO TABLE IT_CENTRO
        FOR ALL ENTRIES IN IT_MARD
        WHERE CENTRO_REAL EQ IT_MARD-WERKS AND
              VKORG       IN P_VKORG.

      IF SY-SUBRC <> 0.
        CLEAR IT_MARD.
        REFRESH IT_MARD.
      ELSE.
        SORT IT_CENTRO  BY CENTRO_REAL.
        LOOP AT IT_MARD.
          READ TABLE IT_CENTRO WITH KEY CENTRO_REAL = IT_MARD-WERKS.
          IF SY-SUBRC <> 0.
            DELETE IT_MARD.
          ENDIF.
        ENDLOOP.
      ENDIF.


      SELECT MATNR
      WERKS
      CHARG
      SOBKZ
      LIFNR
      LBLAB FROM MSLB INTO TABLE IT_MSLB
        FOR ALL ENTRIES IN TL_MARA
        WHERE MATNR EQ TL_MARA-MATNR AND
              WERKS IN P_WERKS.

      REFRESH IT_CENTRO.
      SELECT * FROM ZSDT_DEPARA_CEN
        INTO TABLE IT_CENTRO
        FOR ALL ENTRIES IN IT_MSLB
        WHERE CENTRO_REAL EQ IT_MSLB-WERKS AND
              VKORG       IN P_VKORG.

      IF SY-SUBRC <> 0.
        CLEAR IT_MSLB.
        REFRESH IT_MSLB.
      ELSE.
        SORT IT_CENTRO  BY CENTRO_REAL.
        LOOP AT IT_MSLB.
          READ TABLE IT_CENTRO WITH KEY CENTRO_REAL = IT_MSLB-WERKS.
          IF SY-SUBRC <> 0.
            DELETE IT_MSLB.
          ENDIF.
        ENDLOOP.
      ENDIF.


*      IF SY-SUBRC = 0.

      "Local de negócios
      SELECT BUKRS BRANCH
        FROM J_1BBRANCH
        INTO TABLE IT_J_1BBRANCH
        FOR ALL ENTRIES IN IT_CENTRO
      WHERE BRANCH EQ IT_CENTRO-CENTRO_REAL
        AND BUKRS IN P_BUKRS.

      " Descrição do Material
      SELECT MANDT MATNR SPRAS MAKTX MAKTG
        FROM MAKT
        INTO TABLE IT_MAKT
          FOR ALL ENTRIES IN IT_MARA
     WHERE MATNR EQ IT_MARA-MATNR AND
           SPRAS EQ SY-LANGU.


      SORT TL_MARA BY MATNR.
      LOOP AT IT_MARD.
        READ TABLE TL_MARA WITH KEY MATNR = IT_MARD-MATNR BINARY SEARCH.
        MOVE-CORRESPONDING IT_MARD TO TL_AUX.

        TL_AUX-MEINS = TL_MARA-MEINS.
*        CLEAR TL_AUX-WERKS.
        COLLECT TL_AUX.
        CLEAR TL_AUX.
      ENDLOOP.


      LOOP AT IT_MSLB.
        READ TABLE TL_MARA WITH KEY MATNR = IT_MSLB-MATNR BINARY SEARCH.
        MOVE-CORRESPONDING IT_MARD TO TL_AUX.

        TL_AUX-LABST = IT_MSLB-LBLAB.
        TL_AUX-MEINS = TL_MARA-MEINS.
*        CLEAR TL_AUX-WERKS.
        COLLECT TL_AUX.
        CLEAR TL_AUX.
      ENDLOOP.



      SORT IT_MAKT BY MATNR.
      SORT IT_J_1BBRANCH BY BRANCH.

      SELECT * FROM MARM INTO TABLE T_MARM
      FOR ALL ENTRIES IN TL_AUX
        WHERE MATNR EQ TL_AUX-MATNR AND
              MEINH NE TL_AUX-MEINS.

      SORT T_MARM BY MATNR.


      LOOP AT TL_AUX.

        READ TABLE IT_J_1BBRANCH INTO WA_J_1BBRANCH WITH KEY BRANCH = TL_AUX-WERKS BINARY SEARCH.
        IF ( SY-SUBRC EQ 0 ).

          IF ( TL_AUX-MEINS EQ 'KG' ).

            READ TABLE T_MARM WITH KEY MATNR = TL_AUX-MATNR BINARY SEARCH.
            IF SY-SUBRC = 0.
*              wa_s225_soma-menge = wa_s225_soma-wemng.
              CALL FUNCTION 'ME_CONVERSION_BPRME'
                EXPORTING
                  I_KUMNE             = T_MARM-UMREZ
                  I_KUMZA             = T_MARM-UMREN
                  I_MATNR             = TL_AUX-MATNR
                  I_MEIN1             = TL_AUX-MEINS "'KG'
                  I_MEIN2             = T_MARM-MEINH "'BAG'
                  I_MEINS             = TL_AUX-MEINS "'KG'
                  I_MENGE             = TL_AUX-LABST
                IMPORTING
                  MENGE               = WA_SAIDA_AUX-WEMNG_P
                EXCEPTIONS
                  ERROR_IN_CONVERSION = 01
                  NO_SUCCESS          = 02.
            ELSE.
              WA_SAIDA_AUX-WEMNG_P  = TL_AUX-LABST.
            ENDIF.
          ELSE.
            WA_SAIDA_AUX-WEMNG_P  = TL_AUX-LABST.
          ENDIF.

          WA_SAIDA_AUX-CATEGORIA = 'P'.
*            wa_saida_aux-sptag_p  = it_chvw-sptag.
          WA_SAIDA_AUX-WERKS_P  = TL_AUX-WERKS.

          READ TABLE IT_MAKT INTO WA_MAKT WITH KEY MATNR = TL_AUX-MATNR BINARY SEARCH.
          WA_SAIDA_AUX-MATNR  = WA_MAKT-MATNR.
          WA_SAIDA_AUX-MAKTX  = WA_MAKT-MAKTX.

          TOTAL = TOTAL + WA_SAIDA_AUX-WEMNG_P.
        ENDIF.
*          CLEAR: wa_s225_soma.
*        ENDLOOP.

        IF ( WA_SAIDA_AUX-CATEGORIA EQ 'P' ).
          WA_SAIDA_AUX-TOTAL_PRODUZIDO_P = TOTAL.
          APPEND WA_SAIDA_AUX TO IT_SAIDA_AUX.

*          IF NOT ( it_s225 IS INITIAL ).
*            DELETE it_s225 WHERE matnr EQ wa_s225_soma-matnr.
*          ENDIF.
        ENDIF.
        CLEAR: WA_SAIDA_AUX, TOTAL.
      ENDLOOP.


    ENDIF. "select 1 - de para.

  ENDIF.

  IF P_BSART-LOW = 'ZDEF '.


    DATA: BEGIN OF T_T001W OCCURS 0,
            WERKS LIKE T001W-WERKS,
            VKORG LIKE T001W-VKORG,
          END OF T_T001W.

    CLEAR T_T001W.
    REFRESH T_T001W.

    SELECT WERKS VKORG
      FROM T001W INTO TABLE T_T001W
      WHERE WERKS IN P_WERKS AND
            VKORG IN P_VKORG.

    SORT T_T001W BY WERKS.


    DATA: BEGIN OF T_SET OCCURS 0.
            INCLUDE STRUCTURE SETLINET.
          DATA: END OF T_SET.
    CLEAR T_SET.
    REFRESH T_SET.

    SELECT * FROM SETLINET INTO TABLE T_SET
      WHERE SETNAME = 'MAGGI_ZSDT0044_02' AND
            DESCRIPT = 'ZDEF'.

    IF SY-SUBRC = 0.
      " Produzido
      SELECT *
         FROM SETLEAF
         INTO TABLE IT_SETLEAF_AUX
        FOR ALL ENTRIES IN T_SET
       WHERE SETCLASS EQ T_SET-SETCLASS AND
             SUBCLASS EQ T_SET-SUBCLASS AND
             SETNAME  EQ T_SET-SETNAME  AND " 'MAGGI_ZSDT0044_02'.
             LINEID   EQ T_SET-LINEID.

    ENDIF.
    IF NOT ( IT_SETLEAF_AUX[] IS INITIAL ).

      LOOP AT IT_SETLEAF_AUX INTO WA_SETLEAF_AUX.
        WA_SETLEAF-VALFROM_AUX = WA_SETLEAF_AUX-VALFROM.
        APPEND WA_SETLEAF TO IT_SETLEAF.
      ENDLOOP.

      TRY.
          SELECT MATNR MEINS MATKL
            FROM MARA
            INTO TABLE TL_MARA
            FOR ALL ENTRIES IN IT_SETLEAF
          WHERE MATKL EQ IT_SETLEAF-VALFROM_AUX
            AND MATNR IN P_MATNR
            AND MATKL IN P_GRUPO.
        CATCH CX_SY_OPEN_SQL_DB INTO ERR.
          MSG = ERR->GET_TEXT( ).
          MESSAGE MSG TYPE 'S' DISPLAY LIKE 'E'.
          EXIT.
      ENDTRY.

      CHECK NOT TL_MARA[] IS INITIAL.

      SELECT MATNR WERKS LGORT LABST
        FROM MARD INTO TABLE IT_MARD
        FOR ALL ENTRIES IN TL_MARA
        WHERE MATNR EQ TL_MARA-MATNR AND
              WERKS IN P_WERKS.

*      REFRESH IT_CENTRO.
*      SELECT * FROM ZSDT_DEPARA_CEN
*        INTO TABLE IT_CENTRO
*        FOR ALL ENTRIES IN IT_MARD
*        WHERE CENTRO_REAL EQ IT_MARD-WERKS AND
*              VKORG       IN P_VKORG.

*      IF SY-SUBRC <> 0.
*        CLEAR IT_MARD.
*        REFRESH IT_MARD.
*      ELSE.
*        SORT IT_CENTRO  BY CENTRO_REAL.
      LOOP AT IT_MARD.
        READ TABLE T_T001W WITH KEY WERKS = IT_MARD-WERKS BINARY SEARCH.
        IF SY-SUBRC <> 0.
          DELETE IT_MARD.
        ENDIF.
      ENDLOOP.
*      ENDIF.


      SELECT MATNR
      WERKS
      CHARG
      SOBKZ
      LIFNR
      LBLAB FROM MSLB INTO TABLE IT_MSLB
        FOR ALL ENTRIES IN TL_MARA
        WHERE MATNR EQ TL_MARA-MATNR AND
              WERKS IN P_WERKS.

*      REFRESH IT_CENTRO.
*      SELECT * FROM ZSDT_DEPARA_CEN
*        INTO TABLE IT_CENTRO
*        FOR ALL ENTRIES IN IT_MSLB
*        WHERE CENTRO_REAL EQ IT_MSLB-WERKS AND
*              VKORG       IN P_VKORG.
*
*      IF SY-SUBRC <> 0.
*        CLEAR IT_MSLB.
*        REFRESH IT_MSLB.
*      ELSE.
*        SORT IT_CENTRO  BY CENTRO_REAL.
      LOOP AT IT_MSLB.
        READ TABLE T_T001W WITH KEY WERKS = IT_MSLB-WERKS BINARY SEARCH.
        IF SY-SUBRC <> 0.
          DELETE IT_MSLB.
        ENDIF.
      ENDLOOP.
*      ENDIF.


*      IF SY-SUBRC = 0.

      "Local de negócios
      SELECT BUKRS BRANCH
        FROM J_1BBRANCH
        INTO TABLE IT_J_1BBRANCH
        FOR ALL ENTRIES IN IT_CENTRO
      WHERE BRANCH EQ IT_CENTRO-CENTRO_REAL
        AND BUKRS IN P_BUKRS.

      " Descrição do Material
      SELECT MANDT MATNR SPRAS MAKTX MAKTG
        FROM MAKT
        INTO TABLE IT_MAKT
          FOR ALL ENTRIES IN IT_MARA
     WHERE MATNR EQ IT_MARA-MATNR AND
           SPRAS EQ SY-LANGU.


      SORT TL_MARA BY MATNR.
      LOOP AT IT_MARD.
        READ TABLE TL_MARA WITH KEY MATNR = IT_MARD-MATNR BINARY SEARCH.
        MOVE-CORRESPONDING IT_MARD TO TL_AUX.

        TL_AUX-MEINS = TL_MARA-MEINS.
*        CLEAR TL_AUX-WERKS.
        COLLECT TL_AUX.
        CLEAR TL_AUX.
      ENDLOOP.


      LOOP AT IT_MSLB.
        READ TABLE TL_MARA WITH KEY MATNR = IT_MSLB-MATNR BINARY SEARCH.
        MOVE-CORRESPONDING IT_MSLB TO TL_AUX.

        TL_AUX-LABST = IT_MSLB-LBLAB.
        TL_AUX-MEINS = TL_MARA-MEINS.
*        CLEAR TL_AUX-WERKS.
        COLLECT TL_AUX.
        CLEAR TL_AUX.
      ENDLOOP.



      SORT IT_MAKT BY MATNR.
      SORT IT_J_1BBRANCH BY BRANCH.

      SELECT * FROM MARM INTO TABLE T_MARM
      FOR ALL ENTRIES IN TL_AUX
        WHERE MATNR EQ TL_AUX-MATNR AND
              MEINH NE TL_AUX-MEINS.


      SORT T_MARM BY MATNR.

      LOOP AT TL_AUX.
        CHECK TL_AUX-LABST > 0.
        READ TABLE IT_J_1BBRANCH INTO WA_J_1BBRANCH WITH KEY BRANCH = TL_AUX-WERKS BINARY SEARCH.
        IF ( SY-SUBRC EQ 0 ).

          IF ( TL_AUX-MEINS EQ 'KG' ).


            READ TABLE T_MARM WITH KEY MATNR = TL_AUX-MATNR BINARY SEARCH.
            IF SY-SUBRC = 0.


*              wa_s225_soma-menge = wa_s225_soma-wemng.
              CALL FUNCTION 'ME_CONVERSION_BPRME'
                EXPORTING
                  I_KUMNE             = T_MARM-UMREZ
                  I_KUMZA             = T_MARM-UMREN
                  I_MATNR             = TL_AUX-MATNR
                  I_MEIN1             = TL_AUX-MEINS " 'KG'
                  I_MEIN2             = T_MARM-MEINH
                  I_MEINS             = TL_AUX-MEINS " 'KG'
                  I_MENGE             = TL_AUX-LABST
                IMPORTING
                  MENGE               = WA_SAIDA_AUX-REAL "WEMNG_P
                EXCEPTIONS
                  ERROR_IN_CONVERSION = 01
                  NO_SUCCESS          = 02.
            ELSE.
              WA_SAIDA_AUX-WEMNG_P  = TL_AUX-LABST.
            ENDIF.
          ELSE.
            WA_SAIDA_AUX-REAL  = TL_AUX-LABST.
          ENDIF.

          WA_SAIDA_AUX-CATEGORIA = 'P'.
*            wa_saida_aux-sptag_p  = it_chvw-sptag.
          WA_SAIDA_AUX-WERKS_P  = TL_AUX-WERKS.

          READ TABLE IT_MAKT INTO WA_MAKT WITH KEY MATNR = TL_AUX-MATNR BINARY SEARCH.
          WA_SAIDA_AUX-MATNR  = WA_MAKT-MATNR.
          WA_SAIDA_AUX-MAKTX  = WA_MAKT-MAKTX.

          TOTAL = TOTAL + WA_SAIDA_AUX-REAL.
        ENDIF.
*          CLEAR: wa_s225_soma.
*        ENDLOOP.

        IF ( WA_SAIDA_AUX-CATEGORIA EQ 'P' ).
          WA_SAIDA_AUX-TOTAL_REAL = TOTAL.
          APPEND WA_SAIDA_AUX TO IT_SAIDA_AUX.

*          IF NOT ( it_s225 IS INITIAL ).
*            DELETE it_s225 WHERE matnr EQ wa_s225_soma-matnr.
*          ENDIF.
        ENDIF.
        CLEAR: WA_SAIDA_AUX, TOTAL.
      ENDLOOP.

    ENDIF.








  ENDIF.


ENDFORM.                    " SELECIONAR_PRODUZIDO
*&---------------------------------------------------------------------*
*&      Form  STATUS_PEDIDO
*&---------------------------------------------------------------------*
FORM STATUS_PEDIDO .

  IF NOT ( BLOQ_MM IS INITIAL ).

    SELECT VBELN VKORG  VTWEG SPART AUART  VKBUR KUNNR WAERK ERDAT FAKSK LIFSK AUDAT KNUMV
     FROM VBAK
     INTO TABLE IT_VBAK
    WHERE  AUART IN P_AUART
       AND VKORG IN P_VKORG
       AND VTWEG IN P_VTWEG
       AND SPART IN P_SPART
       AND VKBUR IN P_VKBUR
       AND ERDAT IN P_ERDAT
       AND LIFSK NE SPACE.

  ELSEIF NOT ( ATIVO_MM IS INITIAL ).




    SELECT VBAK~VBELN VKORG  VTWEG SPART AUART  VKBUR KUNNR WAERK ERDAT FAKSK LIFSK AUDAT KNUMV
*** Modificação - Eduardo Ruttkowski Tavares - 07.08.2013 >>> INI
           VBKD~IHREZ
*** Modificação - Eduardo Ruttkowski Tavares - 07.08.2013 <<< FIM
     FROM VBAK
*** Modificação - Eduardo Ruttkowski Tavares - 07.08.2013 >>> INI
      INNER JOIN VBKD ON
      ( VBAK~VBELN = VBKD~VBELN )
*** Modificação - Eduardo Ruttkowski Tavares - 07.08.2013 <<< FIM
     INTO TABLE IT_VBAK
    WHERE  AUART IN P_AUART
       AND VKORG IN P_VKORG
       AND VTWEG IN P_VTWEG
       AND SPART IN P_SPART
       AND VKBUR IN P_VKBUR
       AND ERDAT IN P_ERDAT
       AND LIFSK EQ SPACE.

  ELSEIF NOT ( TODOS_MM IS INITIAL ).

    SELECT VBELN VKORG  VTWEG SPART AUART  VKBUR KUNNR WAERK ERDAT FAKSK LIFSK AUDAT KNUMV
     FROM VBAK
     INTO TABLE IT_VBAK
    WHERE  AUART IN P_AUART
       AND VKORG IN P_VKORG
       AND VTWEG IN P_VTWEG
       AND SPART IN P_SPART
       AND VKBUR IN P_VKBUR
       AND ERDAT IN P_ERDAT.

  ENDIF.

  IF NOT ( IT_VBAK[] IS INITIAL ).


    SELECT FROM V_KONV FIELDS KNUMV , KPOSN , KSCHL , KBETR FOR ALL ENTRIES IN @IT_VBAK WHERE KNUMV EQ @IT_VBAK-KNUMV AND KSCHL EQ 'PR00' INTO TABLE @IT_KONV .


    IF NOT ( P_SAFRA IS INITIAL ).

      SELECT VBELN DOC_SIMULACAO
        FROM ZSDT0041
        INTO TABLE IT_ZSDT0041
        FOR ALL ENTRIES IN IT_VBAK
      WHERE VBELN EQ IT_VBAK-VBELN.


      SELECT DOC_SIMULACAO SAFRA
        FROM ZSDT0040
        INTO TABLE IT_ZSDT0040
        FOR ALL ENTRIES IN IT_ZSDT0041
      WHERE DOC_SIMULACAO EQ IT_ZSDT0041-DOC_SIMULACAO
        AND SAFRA IN P_SAFRA.



      CLEAR: WA_VBAK.

      LOOP AT IT_VBAK INTO WA_VBAK.

*** Modificação - Eduardo Ruttkowski Tavares - 07.08.2013 >>> INI
        IF NOT WA_VBAK-IHREZ IS INITIAL.
          IF NOT WA_VBAK-IHREZ IN P_SAFRA.
            DELETE IT_VBAK WHERE VBELN EQ WA_VBAK-VBELN.
          ENDIF.
        ELSE.
*** Modificação - Eduardo Ruttkowski Tavares - 07.08.2013 <<< FIM

          READ TABLE IT_ZSDT0041 INTO WA_ZSDT0041 WITH KEY VBELN = WA_VBAK-VBELN.
          IF ( SY-SUBRC EQ 0 ).
            READ TABLE IT_ZSDT0040 INTO WA_ZSDT0040 WITH KEY DOC_SIMULACAO = WA_ZSDT0041-DOC_SIMULACAO.

            IF ( SY-SUBRC EQ 0 ).
              CONTINUE.
            ELSE.
              DELETE IT_VBAK WHERE VBELN EQ WA_VBAK-VBELN.
            ENDIF.
          ELSE.
            DELETE IT_VBAK WHERE VBELN EQ WA_VBAK-VBELN.
          ENDIF.

        ENDIF.

        CLEAR:  WA_ZSDT0041, WA_ZSDT0040, WA_VBAK.
      ENDLOOP.
    ENDIF.
  ENDIF.
ENDFORM.                    " STATUS_PEDIDO
*&---------------------------------------------------------------------*
*&      Form  AGRUPAMENTO
*&---------------------------------------------------------------------*
FORM AGRUPAMENTO.

  DATA LS_CELLCOLOR TYPE LVC_S_SCOL .
  DATA: V_INDEX TYPE SY-TABIX.

  REFRESH: IT_SAIDA_SOMA[].

  IT_SAIDA_SOMA[] = IT_SAIDA_AUX[].


  SORT: IT_SAIDA_SOMA BY MATNR,
        IT_SAIDA_AUX  BY MATNR.


  LOOP AT IT_SAIDA_AUX INTO WA_SAIDA_AUX.

    CLEAR: WA_SAIDA-TOTAL_PRODUZIDO_P,
           WA_SAIDA-TOTAL_COMPRA,
           WA_SAIDA-TOTAL_VENDA.

    CLEAR WA_SAIDA-TOTAL_REAL.

    LOOP AT IT_SAIDA_SOMA INTO WA_SAIDA_SOMA WHERE MATNR EQ WA_SAIDA_AUX-MATNR.
      WA_SAIDA-TOTAL_PRODUZIDO_P = WA_SAIDA-TOTAL_PRODUZIDO_P + WA_SAIDA_SOMA-TOTAL_PRODUZIDO_P.
      WA_SAIDA-TOTAL_COMPRA    = WA_SAIDA-TOTAL_COMPRA + WA_SAIDA_SOMA-TOTAL_COMPRA.
      WA_SAIDA-TOTAL_VENDA     = WA_SAIDA-TOTAL_VENDA  + WA_SAIDA_SOMA-TOTAL_VENDA.
      WA_SAIDA-TOTAL_REAL      = WA_SAIDA-TOTAL_REAL   + WA_SAIDA_SOMA-TOTAL_REAL.
      CLEAR: WA_SAIDA_SOMA.
    ENDLOOP.

    READ TABLE IT_FATURADO INTO WA_FATURADO WITH KEY MATNR = WA_SAIDA_AUX-MATNR.
    IF ( SY-SUBRC EQ 0 ).
      WA_SAIDA-TOTAL_F_C       = WA_FATURADO-VALOR_TOTAL.
    ENDIF.

    READ TABLE IT_FATURADO_VENDA_SOMA INTO WA_FATURADO_VENDA_SOMA WITH KEY MATNR = WA_SAIDA_AUX-MATNR.
    IF ( SY-SUBRC EQ 0 ).
      WA_SAIDA-TOTAL_F_V       = WA_FATURADO_VENDA_SOMA-VALOR_TOTAL.
    ENDIF.



    WA_SAIDA-MATNR           = WA_SAIDA_AUX-MATNR.
    WA_SAIDA-MAKTX           = WA_SAIDA_AUX-MAKTX.
    WA_SAIDA-SALDO           = ( WA_SAIDA-TOTAL_COMPRA + WA_SAIDA-TOTAL_PRODUZIDO_P ) - WA_SAIDA-TOTAL_VENDA.
    WA_SAIDA-SALDO_C         = ( WA_SAIDA-TOTAL_COMPRA - WA_SAIDA-TOTAL_F_C ).
    WA_SAIDA-SALDO_V         = ( WA_SAIDA-TOTAL_VENDA - WA_SAIDA-TOTAL_F_V ).


    WA_SAIDA-EBELN_C         = WA_SAIDA_AUX-EBELN_C.

    APPEND WA_SAIDA TO IT_SAIDA.

    IF NOT ( IT_SAIDA[] IS INITIAL ).
      DELETE IT_SAIDA_AUX WHERE MATNR EQ WA_SAIDA-MATNR.
    ENDIF.

    CLEAR: WA_SAIDA, WA_SAIDA_SOMA.
  ENDLOOP.

  LOOP AT IT_SAIDA.

    IF ( IT_SAIDA-SALDO < 0 ).

      V_INDEX = SY-TABIX.
      LS_CELLCOLOR-FNAME = 'SALDO' .
      LS_CELLCOLOR-COLOR-COL = '6' .
      LS_CELLCOLOR-COLOR-INT = '0' .
      LS_CELLCOLOR-COLOR-INV = '0' .

      APPEND LS_CELLCOLOR TO IT_SAIDA-CELLCOLORS.
      MODIFY IT_SAIDA INDEX V_INDEX TRANSPORTING CELLCOLORS.

    ENDIF.
  ENDLOOP.
ENDFORM.                    " AGRUPAMENTO
*&---------------------------------------------------------------------*
*&      Form  CONVERSION_SAC
*&---------------------------------------------------------------------*
FORM CONVERSION_SAC  USING    P_MATNR
                              P_VALOR
                              P_MEINS.

  IF ( ( P_MEINS EQ 'KG' ) AND ( P_SPART-LOW EQ '04' ) ).

    VALOR = P_VALOR.
    CALL FUNCTION 'ME_CONVERSION_BPRME'
      EXPORTING
        I_MATNR             = P_MATNR
        I_MEIN1             = 'KG'
        I_MEIN2             = 'BAG'
        I_MEINS             = 'KG'
        I_MENGE             = VALOR
      IMPORTING
        MENGE               = VALOR_CONVERSION_FATURADO
      EXCEPTIONS
        ERROR_IN_CONVERSION = 01
        NO_SUCCESS          = 02.

  ELSE.
    VALOR_CONVERSION_FATURADO  = P_VALOR.
  ENDIF.

ENDFORM.                    " CONVERSION_SAC



*&---------------------------------------------------------------------*
*&      Form  f_alv
*&---------------------------------------------------------------------*
FORM F_ALV.

*BREAK-POINT.

  IF P_BSART-LOW = 'ZDEF '.
    PERFORM ALV_PREENCHE_CAT USING:
          'MATNR'             TEXT-010      '10'       ''  'X'  ''  ''      'MATN1' , " COD. MATERIAL
          'MAKTX'             TEXT-011      '45'       ''  ''  ''   ''      ''      , " MATERIAL
          'TOTAL_PRODUZIDO_P' TEXT-037      '15'       ''  ''  'X'  ''      ''      , " PRODUZIDO
          'TOTAL_COMPRA'      TEXT-012      '13'       'X' ''  'X'  'C300'  ''      , " COMPRA
          'TOTAL_VENDA'       TEXT-013      '13'       'X' ''  'X'  'C300'  ''      , " VENDA
          'SALDO'             TEXT-014      '13'       ''  ''  'X'  ''      ''      , " SALDO
          'TOTAL_F_C'         TEXT-015      '13'       ''  ''  'X'  'C500'  ''      , " SALDO FATURADO
          'SALDO_C'           TEXT-043      '13'       ''  ''  'X'  ''      ''      , " SALDO FATURADO
          'TOTAL_F_V'         TEXT-042      '13'       ''  ''  'X'  'C500'  ''      , " SALDO FATURADO
          'SALDO_V'           TEXT-044      '13'       ''  ''  'X'  ''      ''      , " SALDO FATURADO
          'TOTAL_REAL'        TEXT-050      '13'       ''  ''  'X'  ''      ''      . " SALDO FATURADO


  ELSE.

    PERFORM ALV_PREENCHE_CAT USING:
          'MATNR'             TEXT-010      '10'       ''  'X'  ''  ''      'MATN1' , " COD. MATERIAL
          'MAKTX'             TEXT-011      '45'       ''  ''  ''   ''      ''      , " MATERIAL
          'TOTAL_PRODUZIDO_P' TEXT-037      '15'       ''  ''  'X'  ''      ''      , " PRODUZIDO
          'TOTAL_COMPRA'      TEXT-012      '13'       'X' ''  'X'  'C300'  ''      , " COMPRA
          'TOTAL_VENDA'       TEXT-013      '13'       'X' ''  'X'  'C300'  ''      , " VENDA
          'SALDO'             TEXT-014      '13'       ''  ''  'X'  ''      ''      , " SALDO
          'TOTAL_F_C'         TEXT-015      '13'       ''  ''  'X'  'C500'  ''      , " SALDO FATURADO
          'SALDO_C'           TEXT-043      '13'       ''  ''  'X'  ''      ''      , " SALDO FATURADO
          'TOTAL_F_V'         TEXT-042      '13'       ''  ''  'X'  'C500'  ''      , " SALDO FATURADO
          'SALDO_V'           TEXT-044      '13'       ''  ''  'X'  ''      ''      . " SALDO FATURADO

  ENDIF.
ENDFORM.                    " F_ALV
*&---------------------------------------------------------------------*
*&      Form  ALV_PREENCHE_CAT
*&---------------------------------------------------------------------*
FORM ALV_PREENCHE_CAT  USING   P_CAMPO    TYPE C
                               P_DESC     TYPE C
                               P_TAM      TYPE C
                               P_HOT      TYPE C
                               P_ZERO     TYPE C
                               P_SUM      TYPE C
                               P_COR      TYPE C
                               P_CONVEXIT TYPE C.

  DATA: WL_FCAT TYPE LVC_S_FCAT.

  WL_FCAT-TABNAME   = 'IT_SAIDA'.

  WL_FCAT-FIELDNAME = P_CAMPO.
  WL_FCAT-SCRTEXT_L = P_DESC.
  WL_FCAT-SCRTEXT_M = P_DESC.
  WL_FCAT-SCRTEXT_S = P_DESC.
  WL_FCAT-HOTSPOT   = P_HOT.
  WL_FCAT-NO_ZERO   = P_ZERO.
  WL_FCAT-DO_SUM   =  P_SUM.
  WL_FCAT-OUTPUTLEN = P_TAM.
  WL_FCAT-EMPHASIZE = P_COR.
  WL_FCAT-CONVEXIT  = P_CONVEXIT.

  APPEND WL_FCAT TO IT_FCAT.

ENDFORM.                    " ALV_PREENCHE_CAT

*&---------------------------------------------------------------------*
*&      Form  F_BDC_FIELD
*&---------------------------------------------------------------------*

FORM F_BDC_FIELD  USING    VALUE(P_FLAG)
                           VALUE(P_FNAM)
                           VALUE(P_FVAL).
  CLEAR T_BDC.
  IF NOT P_FLAG IS INITIAL.
    T_BDC-PROGRAM  = P_FNAM.
    T_BDC-DYNPRO   = P_FVAL.
    T_BDC-DYNBEGIN = 'X'.
  ELSE.
    T_BDC-FNAM = P_FNAM.
    T_BDC-FVAL = P_FVAL.
  ENDIF.
  APPEND T_BDC.

ENDFORM.                    "f_bdc_field
*&---------------------------------------------------------------------*
*&      Module  Z_STATUS  OUTPUT
*&---------------------------------------------------------------------*
MODULE Z_STATUS OUTPUT.
  SET PF-STATUS 'FF0100'.
  SET TITLEBAR  'TB0100'.
ENDMODULE.                 " Z_STATUS  OUTPUT
**&---------------------------------------------------------------------*
**&      Form  Z_LAYOUT
**&---------------------------------------------------------------------*
FORM Z_LAYOUT .
  WA_LAYOUT-ZEBRA = 'X'.
ENDFORM.                    " Z_LAYOUT
CLASS LCL_EVENT_RECEIVER DEFINITION DEFERRED.

DATA: WA_EVENT    TYPE REF TO LCL_EVENT_RECEIVER,
      WA_EVENT_MM TYPE REF TO LCL_EVENT_RECEIVER,
      WA_EVENT_SD TYPE REF TO LCL_EVENT_RECEIVER.
*----------------------------------------------------------------------*
*       CLASS lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
CLASS LCL_EVENT_RECEIVER DEFINITION.

  PUBLIC SECTION.
    METHODS:
      ZM_HANDLE_HOTSPOT FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
        IMPORTING E_ROW_ID
                  E_COLUMN_ID
                  ES_ROW_NO,

      ZM_HANDLE_TOOLBAR FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
        IMPORTING
          E_OBJECT E_INTERACTIVE,

      ZM_HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING
          E_UCOMM.
ENDCLASS.                    "lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_event_receiver IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.

  METHOD: ZM_HANDLE_HOTSPOT.
    PERFORM Z_HANDLE_HOTSPOT USING    E_ROW_ID
                                      E_COLUMN_ID
                                      ES_ROW_NO.
  ENDMETHOD.                    "zm_handle_hotspot

  METHOD ZM_HANDLE_TOOLBAR.
*   Incluindo Botão ALV
    PERFORM Z_HANDLE_TOOLBAR USING E_OBJECT
                                   E_INTERACTIVE.
  ENDMETHOD.                    "zm_handle_toolbar

  METHOD ZM_HANDLE_USER_COMMAND.
*   User Command Botões Incluidos
    PERFORM Z_HANDLE_COMMAND USING E_UCOMM.
  ENDMETHOD.                    "zm_handle_user_command

ENDCLASS.                    "lcl_event_receiver IMPLEMENTATION

*---------------------------------------------------------------------*
*      Module  Z_EXIBE_ALV  OUTPUT
*---------------------------------------------------------------------*
MODULE Z_EXIBE_ALV OUTPUT.

  IF WA_CONT IS INITIAL.

    CREATE OBJECT WA_CONT
      EXPORTING
        CONTAINER_NAME              = 'CC_ALV'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        OTHERS                      = 6.
  ENDIF.
  IF WA_ALV IS INITIAL AND NOT
    WA_CONT IS INITIAL.

    CREATE OBJECT WA_ALV
      EXPORTING
        I_PARENT          = WA_CONT
      EXCEPTIONS
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        OTHERS            = 5.
  ENDIF.

  IF WA_EVENT IS INITIAL.

    CREATE OBJECT WA_EVENT.
    SET HANDLER: WA_EVENT->ZM_HANDLE_TOOLBAR FOR WA_ALV.
    SET HANDLER: WA_EVENT->ZM_HANDLE_HOTSPOT FOR WA_ALV.
    SET HANDLER: WA_EVENT->ZM_HANDLE_USER_COMMAND FOR WA_ALV.

  ENDIF.

  WA_LAYOUT-CTAB_FNAME = 'CELLCOLORS'.

  CALL METHOD WA_ALV->SET_TABLE_FOR_FIRST_DISPLAY
    EXPORTING
      IS_LAYOUT                     = WA_LAYOUT
      IS_VARIANT                    = GS_VARIANT_C
      I_SAVE                        = 'A'
    CHANGING
      IT_OUTTAB                     = IT_SAIDA[]
      IT_FIELDCATALOG               = IT_FCAT
    EXCEPTIONS
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      OTHERS                        = 4.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
               WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
  CHECK NOT WA_ALV IS INITIAL.

ENDMODULE.                 " Z_EXIBE_ALV  OUTPUT
*---------------------------------------------------------------------*
*      Module  Z_USER_COMMAND  INPUT
*---------------------------------------------------------------------*
MODULE Z_USER_COMMAND INPUT.
  IF ( SY-DYNNR EQ '0100' ) OR ( SY-DYNNR EQ '0200' )  OR ( SY-DYNNR EQ '0300' ).
    CASE SY-UCOMM.
      WHEN 'BACK' OR
           'CANC' OR
           'EXIT'  .
        LEAVE TO SCREEN 0. "ELE RETORNA PARA A TELA QUE CHAMOU.
    ENDCASE.
  ENDIF.
ENDMODULE.                 " Z_USER_COMMAND  INPUT
*---------------------------------------------------------------------*
*      Form  Z_HANDLE_TOOLBAR
*---------------------------------------------------------------------*
FORM Z_HANDLE_TOOLBAR  USING    P_OBJECT  TYPE REF TO CL_ALV_EVENT_TOOLBAR_SET
                                P_INTERACTIVE TYPE CHAR1 .

** Constants for button type
  CONSTANTS:
    C_BUTTON_NORMAL           TYPE I VALUE 0,
    C_MENU_AND_DEFAULT_BUTTON TYPE I VALUE 1,
    C_MENU                    TYPE I VALUE 2,
    C_SEPARATOR               TYPE I VALUE 3,
    C_RADIO_BUTTON            TYPE I VALUE 4,
    C_CHECKBOX                TYPE I VALUE 5,
    C_MENU_ENTRY              TYPE I VALUE 6.

  DATA SL_TOOLBAR TYPE STB_BUTTON.

* Append Seperator
  MOVE C_SEPARATOR  TO SL_TOOLBAR-BUTN_TYPE.
  APPEND SL_TOOLBAR TO P_OBJECT->MT_TOOLBAR.

ENDFORM.                    " Z_HANDLE_TOOLBAR


*---------------------------------------------------------------------*
*      Form  Z_HANDLE_COMMAND
*---------------------------------------------------------------------*
FORM Z_HANDLE_COMMAND  USING P_UCOMM TYPE SYUCOMM       .
  CASE P_UCOMM.
    WHEN 'REMESSA'.
      CALL METHOD WA_ALV->REFRESH_TABLE_DISPLAY .
  ENDCASE.
ENDFORM.                    " Z_HANDLE_COMMAND

*&---------------------------------------------------------------------*
*&      Form  Z_HANDLE_HOTSPOT
*&---------------------------------------------------------------------*
FORM Z_HANDLE_HOTSPOT  USING    P_E_ROW_ID    TYPE  LVC_S_ROW
                                P_E_COLUMN_ID TYPE  LVC_S_COL
                                P_ES_ROW_NO   TYPE  LVC_S_ROID.

  CLEAR: WA_SAIDA, WA_SAIDA_MM, WA_SAIDA_SD.

  CASE SY-DYNNR.
    WHEN: '0100'.
      READ TABLE IT_SAIDA INTO WA_SAIDA INDEX P_E_ROW_ID.
    WHEN: '0200'.
      READ TABLE IT_SAIDA_MM INTO WA_SAIDA_MM INDEX P_E_ROW_ID.
    WHEN: '0300'.
      READ TABLE IT_SAIDA_SD INTO WA_SAIDA_SD INDEX P_E_ROW_ID.
  ENDCASE.

  CASE P_E_COLUMN_ID.
    WHEN: 'TOTAL_COMPRA'.
      PERFORM: SELECIONA_DADOS_COMPRA USING WA_SAIDA-MATNR.
    WHEN: 'TOTAL_VENDA'.
      PERFORM: SELECIONA_DADOS_VENDA USING WA_SAIDA-MATNR.
    WHEN: 'EBELN' OR 'VBELN'.
      CASE: SY-DYNNR.
        WHEN: '0200'.
          SET PARAMETER ID 'BES' FIELD WA_SAIDA_MM-EBELN.
          CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.
        WHEN: '0300'.
          SET PARAMETER ID 'AUN' FIELD WA_SAIDA_SD-VBELN.
          CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
      ENDCASE.
  ENDCASE.
ENDFORM.                    "z_handle_hotspot
*&---------------------------------------------------------------------*
*&      Form  SELECIONA_DADOS_COMPRA
*&---------------------------------------------------------------------*
FORM SELECIONA_DADOS_COMPRA USING _MATNR.

  CLEAR: IT_SAIDA_MM[], IT_FCAT_MM[].
  LOOP AT IT_COMPRA_AUX INTO WA_COMPRA_AUX WHERE MATNR EQ _MATNR.

    WA_SAIDA_MM-NAME1    = WA_COMPRA_AUX-NAME1.
    WA_SAIDA_MM-EBELN    = WA_COMPRA_AUX-EBELN.
    WA_SAIDA_MM-EBELP    = WA_COMPRA_AUX-EBELP.
    WA_SAIDA_MM-MATNR    = WA_COMPRA_AUX-MATNR.
    WA_SAIDA_MM-MAKTX    = WA_COMPRA_AUX-MAKTX.

    WA_SAIDA_MM-MENGE    = WA_COMPRA_AUX-MENGE.
    WA_SAIDA_MM-NETWR    = WA_COMPRA_AUX-NETWR.
    WA_SAIDA_MM-WAERS    = WA_COMPRA_AUX-WAERS.
    WA_SAIDA_MM-NETPR    = WA_COMPRA_AUX-NETPR.

    IF ( WA_COMPRA_AUX-MEINS EQ 'BAG' ).
      WA_SAIDA_MM-MEINS    = 'SAC'.
    ELSE.
      WA_SAIDA_MM-MEINS = WA_COMPRA_AUX-MEINS.
    ENDIF.

    CASE WA_COMPRA_AUX-LOEKZ.
      WHEN: ''.
        CONCATENATE ICON_SYSTEM_OKAY ' - Ativo' INTO WA_SAIDA_MM-S_PEDIDO.
      WHEN: 'S'.
        CONCATENATE ICON_LOCKED ' - Bloqueado' INTO WA_SAIDA_MM-S_PEDIDO.
      WHEN: 'L'.
        CONCATENATE ICON_DELETE ' - Eliminado' INTO WA_SAIDA_MM-S_PEDIDO.
    ENDCASE.

    APPEND WA_SAIDA_MM TO IT_SAIDA_MM.

    CLEAR: WA_COMPRA_AUX, WA_SAIDA_MM.
  ENDLOOP.

  IF NOT ( IT_SAIDA_MM IS INITIAL ).
    PERFORM: FORM_ALV_MM.
    CALL SCREEN 0200.
  ELSE.
    MESSAGE I000(Z01) WITH 'Registros de compra não encontrado!'.
  ENDIF.

ENDFORM.                    " SELECIONA_DADOS_COMPRA
*&---------------------------------------------------------------------*
*&      Form  SELECIONA_DADOS_VENDA
*&---------------------------------------------------------------------*
FORM SELECIONA_DADOS_VENDA USING _MATNR.

  CLEAR: IT_SAIDA_SD[], IT_FCAT_SD[].
  LOOP AT IT_VENDA INTO WA_VENDA WHERE MATNR EQ _MATNR.


    CLEAR: WA_SAIDA_SD-STATUS.
    LOOP AT IT_0026
       WHERE VBELN EQ WA_VENDA-VBELN.

      READ TABLE IT_ZIB_BSIK
        WITH KEY BELNR = IT_0026-DOCNUM.

      READ TABLE IT_BSIK
        WITH KEY BUKRS = IT_ZIB_BSIK-BUKRS
                 BELNR = IT_ZIB_BSIK-BELNR
                 GJAHR = IT_ZIB_BSIK-GJAHR.

      IF SY-SUBRC IS INITIAL.
        IF WA_SAIDA_SD-STATUS EQ 'Q'.
          WA_SAIDA_SD-STATUS = 'P'.
          SY-SUBRC = 0.
          CONTINUE.
        ELSE.
          SY-SUBRC = 8.
        ENDIF.

      ELSE.
        WA_SAIDA_SD-STATUS = 'Q'.
        SY-SUBRC = 0.
*       continue.
      ENDIF .

    ENDLOOP.
    IF SY-SUBRC IS NOT INITIAL.
      WA_SAIDA_SD-STATUS = 'A'.

    ENDIF.


    READ TABLE IT_VBKD
      WITH KEY VBELN = WA_VENDA-VBELN.

    IF SY-SUBRC IS INITIAL .
      READ TABLE IT_T052U
        WITH KEY ZTERM = IT_VBKD-ZTERM.

      IF SY-SUBRC IS INITIAL.
        CONCATENATE IT_VBKD-ZTERM '-' IT_T052U-TEXT1 INTO WA_SAIDA_SD-ZTERM SEPARATED BY SPACE.
      ENDIF.
    ENDIF.

    WA_SAIDA_SD-KUNNR    = WA_VENDA-KUNNR.
    WA_SAIDA_SD-NAME1    = WA_VENDA-NAME1.
    WA_SAIDA_SD-VBELN    = WA_VENDA-VBELN.
    WA_SAIDA_SD-POSNR    = WA_VENDA-POSNR.
    WA_SAIDA_SD-MATNR    = WA_VENDA-MATNR.
    WA_SAIDA_SD-ARKTX    = WA_VENDA-ARKTX.
    WA_SAIDA_SD-KWMENG   = WA_VENDA-KWMENG.
    "    wa_saida_sd-vrkme    = wa_venda-vrkme.
    WA_SAIDA_SD-NETWR    = WA_VENDA-NETWR.
    WA_SAIDA_SD-WAERK    = WA_VENDA-WAERK.
    WA_SAIDA_SD-KBETR    = WA_VENDA-KBETR.
    "wa_saida_sd-netpr    = wa_venda-netpr.

    WA_SAIDA_SD-VKBUR    = WA_VENDA-VKBUR.

    IF ( WA_VENDA-VRKME EQ 'BAG' ).
      WA_SAIDA_SD-VRKME    = 'SAC'.
    ELSE.
      WA_SAIDA_SD-VRKME = WA_VENDA-VRKME.
    ENDIF.



    IF ( WA_VENDA-LIFSK EQ '' ).
      CONCATENATE ICON_SYSTEM_OKAY ' - Ativo' INTO WA_SAIDA_SD-S_PEDIDO.
    ELSE.
      CONCATENATE ICON_LOCKED ' - Bloqueado' INTO WA_SAIDA_SD-S_PEDIDO.
    ENDIF.

    APPEND WA_SAIDA_SD TO IT_SAIDA_SD.

    CLEAR: WA_VENDA, WA_SAIDA_SD.
  ENDLOOP.

  IF NOT ( IT_SAIDA_SD IS INITIAL ).
    PERFORM FORM_ALV_SD.
    CALL SCREEN 0300.
  ELSE.
    MESSAGE I000(Z01) WITH 'Registros de venda não encontrado!'.
  ENDIF.
ENDFORM.                    " SELECIONA_DADOS_VENDA
*---------------------------------------------------------------------*
*      Module  Z_EXIBE_ALV  OUTPUT
*---------------------------------------------------------------------*
MODULE Z_EXIBE_ALV_MM OUTPUT.

  IF WA_CONT_MM IS INITIAL.

    CREATE OBJECT WA_CONT_MM
      EXPORTING
        CONTAINER_NAME              = 'CC_ALV_MM'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        OTHERS                      = 6.
  ENDIF.
  IF WA_ALV_MM IS INITIAL AND NOT
    WA_CONT_MM IS INITIAL.

    CREATE OBJECT WA_ALV_MM
      EXPORTING
        I_PARENT          = WA_CONT_MM
      EXCEPTIONS
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        OTHERS            = 5.
  ENDIF.

  IF WA_EVENT_MM IS INITIAL.

    CREATE OBJECT WA_EVENT_MM.
    SET HANDLER:  WA_EVENT_MM->ZM_HANDLE_TOOLBAR FOR WA_ALV_MM.
    SET HANDLER:  WA_EVENT_MM->ZM_HANDLE_HOTSPOT FOR WA_ALV_MM.
    SET HANDLER:  WA_EVENT_MM->ZM_HANDLE_USER_COMMAND FOR WA_ALV_MM.

  ENDIF.

  CALL METHOD WA_ALV_MM->SET_TABLE_FOR_FIRST_DISPLAY
    EXPORTING
      IS_LAYOUT                     = WA_LAYOUT_MM
    CHANGING
      IT_OUTTAB                     = IT_SAIDA_MM
      IT_FIELDCATALOG               = IT_FCAT_MM
    EXCEPTIONS
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      OTHERS                        = 4.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
               WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
  CHECK NOT WA_ALV_MM IS INITIAL.



ENDMODULE.                 " Z_EXIBE_ALV  OUTPUT

*&---------------------------------------------------------------------*
*&      Form  FORM_ALV_MM
*&---------------------------------------------------------------------*
FORM FORM_ALV_MM .

  PERFORM ALV_PREENCHE_CAT_MM USING:

        'S_PEDIDO'   TEXT-038      '13'       ''  ''   ''    ''      , " Status do Pedido
        'NAME1'      TEXT-025      '35'       ''  'X'  ''    ''      , " Fornecedor
        'EBELN'      TEXT-021      '10'       'X' ''   ''    ''      , " N. PEDIDO
        'EBELP'      TEXT-039      '5'        ''  ''   ''    ''      , " Item
        'MATNR'      TEXT-010      '4'       ' ' 'X'   ''    ''      , " Material
        "'TXZ01'      text-011      '40'       ''  ''   ''    ''     , " Descrição do Material
        'MAKTX'      TEXT-011      '40'       ''  ''   ''    ''      , " Descrição do Material
        'MEINS'      TEXT-036      '3'        ''  ''   ''    ''      , " Unidade de medida
        'MENGE'      TEXT-022      '13'       ''  ''   'X'   'C500'  , " QUANTIDADE
        'NETWR'      TEXT-023      '13'       ''  ''   'X'   'C500'  , " VALOR
        'NETPR'      TEXT-046      '11'       ''  ''   'X'   'C400'      , " Valor Unitario
        'WAERS'      TEXT-024      '5'        ''  ''   ''    ''      . " MOEDA

ENDFORM.                    " FORM_ALV_MM
*&---------------------------------------------------------------------*
*&      Form  ALV_PREENCHE_CAT_MM
*&---------------------------------------------------------------------*
FORM ALV_PREENCHE_CAT_MM  USING    P_CAMPO TYPE C
                                   P_DESC  TYPE C
                                   P_TAM   TYPE C
                                   P_HOT   TYPE C
                                   P_ZERO  TYPE C
                                   P_SUM   TYPE C
                                   P_COR   TYPE C.

  DATA: WL_FCAT_MM TYPE LVC_S_FCAT.

  WL_FCAT_MM-TABNAME   = 'IT_SAIDA_MM'.
  WL_FCAT_MM-FIELDNAME = P_CAMPO.
  WL_FCAT_MM-SCRTEXT_L = P_DESC.
  WL_FCAT_MM-SCRTEXT_M = P_DESC.
  WL_FCAT_MM-SCRTEXT_S = P_DESC.
  WL_FCAT_MM-HOTSPOT   = P_HOT.
  WL_FCAT_MM-DO_SUM    = P_SUM.
  WL_FCAT_MM-OUTPUTLEN = P_TAM.
  WL_FCAT_MM-NO_ZERO   = P_ZERO.
  WL_FCAT_MM-EMPHASIZE = P_COR.

  APPEND WL_FCAT_MM TO IT_FCAT_MM.

ENDFORM.                    " ALV_PREENCHE_CAT_MM

*&---------------------------------------------------------------------*
*&      Module  Z_EXIBE_ALV_SD  OUTPUT
*&---------------------------------------------------------------------*
MODULE Z_EXIBE_ALV_SD OUTPUT.

  IF WA_CONT_SD IS INITIAL.

    CREATE OBJECT WA_CONT_SD
      EXPORTING
        CONTAINER_NAME              = 'CC_ALV_SD'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        OTHERS                      = 6.
  ENDIF.
  IF WA_ALV_SD IS INITIAL AND NOT
     WA_CONT_SD IS INITIAL.

    CREATE OBJECT WA_ALV_SD
      EXPORTING
        I_PARENT          = WA_CONT_SD
      EXCEPTIONS
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        OTHERS            = 5.
  ENDIF.

  IF WA_EVENT_SD IS INITIAL.

    CREATE OBJECT WA_EVENT_SD.
    SET HANDLER:  WA_EVENT_SD->ZM_HANDLE_TOOLBAR      FOR WA_ALV_SD.
    SET HANDLER:  WA_EVENT_SD->ZM_HANDLE_HOTSPOT      FOR WA_ALV_SD.
    SET HANDLER:  WA_EVENT_SD->ZM_HANDLE_USER_COMMAND FOR WA_ALV_SD.

  ENDIF.

  CALL METHOD WA_ALV_SD->SET_TABLE_FOR_FIRST_DISPLAY
    EXPORTING
      IS_LAYOUT                     = WA_LAYOUT_SD
    CHANGING
      IT_OUTTAB                     = IT_SAIDA_SD
      IT_FIELDCATALOG               = IT_FCAT_SD
    EXCEPTIONS
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      OTHERS                        = 4.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
               WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
  CHECK NOT WA_ALV_SD IS INITIAL.
ENDMODULE.          " Z_EXIBE_ALV_SD  OUTPUT
*&---------------------------------------------------------------------*
*&      Form  FORM_ALV_SD
*&---------------------------------------------------------------------*
FORM FORM_ALV_SD .
  PERFORM ALV_PREENCHE_CAT_SD USING:

        'S_PEDIDO'   TEXT-041  '13' ''  ''  ''  '' , " Status do Pedido
        'KUNNR'      TEXT-035  '10' ''  'X' ''  '' , " Codigo do Cliente
        'NAME1'      TEXT-030  '35' ''  ''  ''  '' , " Cliente
        'VKBUR'      TEXT-045  '10' ''  ''  ''  '' , " Contrato
        'VBELN'      TEXT-031  '10' 'X' ''  ''  '' , " Contrato
        'STATUS'     TEXT-048  '2' 'X' ''  ''  '' , " Contrato
        'ZTERM'      TEXT-049  '30' 'X' ''  ''  '' , " Contrato
        'POSNR'      TEXT-039  '7'  ''  ''  ''  '' , " Item
        'MATNR'      TEXT-010  '4'  ''  'X' ''  '' , " Material
        'ARKTX'      TEXT-011  '40' ''  ''  ''  '' , " Descrição do Material
        'KWMENG'     TEXT-032  '13' ''  ''  'X' 'C500' , " Quantidade
        'VRKME'      TEXT-036  '3'  ''  ' ' ''  '' ,
        'NETWR'      TEXT-033  '13' ''  ''  'X' 'C500' , " VALOR
        "'NETPR'      text-047  '13' ''  ''  'X' 'C400'     ,
        'KBETR'      TEXT-047  '13' ''  ''  'X' 'C400'     ,
        'WAERK'      TEXT-034  '5'  ''  ''  ''  '' . " MOEDA

ENDFORM.                    " FORM_ALV_SD
*&---------------------------------------------------------------------*
*&      Form  ALV_PREENCHE_CAT_SD
*&---------------------------------------------------------------------*
FORM ALV_PREENCHE_CAT_SD  USING   P_CAMPO TYPE C
                                  P_DESC  TYPE C
                                  P_TAM   TYPE C
                                  P_HOT   TYPE C
                                  P_ZERO  TYPE C
                                  P_SUM   TYPE C
                                  P_COR   TYPE C.



  DATA: WL_FCAT_SD TYPE LVC_S_FCAT.

  WL_FCAT_SD-TABNAME   = 'IT_SAIDA_SD'.
  WL_FCAT_SD-FIELDNAME = P_CAMPO.
  WL_FCAT_SD-SCRTEXT_L = P_DESC.
  WL_FCAT_SD-SCRTEXT_M = P_DESC.
  WL_FCAT_SD-SCRTEXT_S = P_DESC.
  WL_FCAT_SD-HOTSPOT   = P_HOT.
  WL_FCAT_SD-DO_SUM    = P_SUM.
  WL_FCAT_SD-OUTPUTLEN = P_TAM.
  WL_FCAT_SD-NO_ZERO   = P_ZERO.
  WL_FCAT_SD-EMPHASIZE = P_COR.


  APPEND WL_FCAT_SD TO IT_FCAT_SD.

ENDFORM.                    " ALV_PREENCHE_CAT_SD
