*&---------------------------------------------------------------------*
*& Report  ZSDR0076
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZSDR0076.
************************************************************************
* TABLES
************************************************************************
TABLES: KNA1, LFA1, ZSDT0148.
************************************************************************
* TYPES
************************************************************************
TYPES: BEGIN OF TY_SAIDA_ZSDT0147,
         ENQUEUE          TYPE CHAR1,
         SPERR_USER       TYPE SY-MSGV1,
         TIPO             TYPE CHAR1,
         NAME1            TYPE KNA1-NAME1,
         NAME2            TYPE LFA1-NAME1,
         VLR_TOT_TRANCHES TYPE ZSDT0148-VLR_TRCHE,
         SALDO            TYPE ZSDT0147-VLR_CONT,
         COR(4)           TYPE C,
         CELLSTYLES       TYPE LVC_T_STYL.
        INCLUDE STRUCTURE ZSDT0147.
TYPES: END OF TY_SAIDA_ZSDT0147.

TYPES: BEGIN OF TY_SAIDA_ZSDT0148,
         ENQUEUE      TYPE CHAR1,
         SPERR_USER   TYPE SY-MSGV1,
         TIPO         TYPE CHAR1,
         NAME1        TYPE KNA1-NAME1,
         NAME2        TYPE LFA1-NAME1,
         KUNNR        TYPE ZSDT0147-KUNNR,
         CORRETOR     TYPE ZSDT0147-CORRETOR,
         WAERK        TYPE ZSDT0147-WAERK,
         PERC_COR     TYPE ZSDT0147-PERC_CORRET,
         PERC_PRE     TYPE ZSDT0147-PERC_PREMIO,
         COR(4)       TYPE C,
         CELLSTYLES   TYPE LVC_T_STYL.
        INCLUDE STRUCTURE ZSDT0148.
TYPES: END OF TY_SAIDA_ZSDT0148.

TYPES: BEGIN OF TY_SAIDA_ZSDT0160,
         ANTIG       TYPE CHAR1,
         ENQUEUE     TYPE CHAR1,
         TIPO        TYPE CHAR1,
         NAME1       TYPE KNA1-NAME1,
         COR(4)      TYPE C,
         DADOS_RADAR TYPE CHAR5,
         PROCURACOES TYPE CHAR5,
         CELLSTYLES  TYPE LVC_T_STYL.
        INCLUDE STRUCTURE ZSDT0160.
TYPES: END OF TY_SAIDA_ZSDT0160.

TYPES: BEGIN OF TY_F4,
         NRO_CONT TYPE ZSDT0147-NRO_CONT,
         WAERK    TYPE ZSDT0147-WAERK.
TYPES: END OF TY_F4.

************************************************************************
* DATA
************************************************************************
DATA: IT_SAIDA_ZSDT0147 TYPE STANDARD TABLE OF TY_SAIDA_ZSDT0147,
      IT_SAIDA_ZSDT0148 TYPE STANDARD TABLE OF TY_SAIDA_ZSDT0148,
      IT_SAIDA_ZSDT0160 TYPE STANDARD TABLE OF TY_SAIDA_ZSDT0160,
      IT_KNA1           TYPE STANDARD TABLE OF KNA1,
      IT_LFA1           TYPE STANDARD TABLE OF LFA1.
*** ALV
DATA:  G_CUSTOM_CONTAINER  TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
       G_CUSTOM_CONTAINER2 TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
       CTL_ALV1            TYPE REF TO CL_GUI_ALV_GRID,
       CTL_ALV2            TYPE REF TO CL_GUI_ALV_GRID,
       IT_EXCLUDE          TYPE UI_FUNCTIONS,
       GS_LAYOUT           TYPE LVC_S_LAYO,
       IT_FIELDCATALOG     TYPE LVC_T_FCAT.
*** Boleta
DATA: VL_FORMNAME  TYPE TDSFNAME VALUE 'ZSDS0007'.
*** Boleta E-mail
DATA SEND_REQUEST   TYPE REF TO CL_BCS.
DATA: DOCUMENT      TYPE REF TO CL_DOCUMENT_BCS,
      RECIPIENT     TYPE REF TO IF_RECIPIENT_BCS,
      BCS_EXCEPTION TYPE REF TO CX_BCS,
      SENT_TO_ALL   TYPE OS_BOOLEAN.
*** Alteração de Data de SV
DATA: WA_SV_MES     TYPE BSID-MONAT,
      WA_SV_ANO     TYPE BSID-GJAHR,
      VL_NRO_CONT   TYPE ZSDT0148-NRO_CONT,
      VL_NRO_TRCHE  TYPE ZSDT0148-NRO_TRANC,
      VL_NRO_SOL_OV TYPE ZSDT0148-NRO_SOL_OV.

DATA: "SPERR_USER TYPE SY-MSGV1,
      MSG(200)   TYPE C.

*-----------------------------------------------------------------------
* Classe
*-----------------------------------------------------------------------
CLASS LCL_EVENT_HANDLER DEFINITION.

  PUBLIC SECTION.
    CLASS-METHODS:
      TOOLBAR_ZSDT0147 FOR EVENT TOOLBAR OF  CL_GUI_ALV_GRID
        IMPORTING E_OBJECT,

      TOOLBAR_ZSDT0148 FOR EVENT TOOLBAR OF  CL_GUI_ALV_GRID
        IMPORTING E_OBJECT,

      TOOLBAR_ZSDT0160 FOR EVENT TOOLBAR OF  CL_GUI_ALV_GRID
        IMPORTING E_OBJECT,

      USER_COMMAND_ZSDT0147 FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING E_UCOMM,

      USER_COMMAND_ZSDT0148 FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING E_UCOMM,

      USER_COMMAND_ZSDT0160 FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING E_UCOMM,

      DATA_CHANGED_FINISHED_ZSDT0147 FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID
        IMPORTING E_MODIFIED ET_GOOD_CELLS,

      DATA_CHANGED_FINISHED_ZSDT0148 FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID
        IMPORTING E_MODIFIED ET_GOOD_CELLS,

      DATA_CHANGED_FINISHED_ZSDT0160 FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID
        IMPORTING E_MODIFIED ET_GOOD_CELLS,

      HANDLE_BUTTON_CLICK_ZSDT0160 FOR EVENT BUTTON_CLICK OF  CL_GUI_ALV_GRID
        IMPORTING ES_COL_ID ES_ROW_NO,

      HANDLE_HOTSPOT_CLICK FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
        IMPORTING E_ROW_ID E_COLUMN_ID,

      ON_F4 FOR EVENT ONF4 OF CL_GUI_ALV_GRID
        IMPORTING SENDER
                    E_FIELDNAME
                    E_FIELDVALUE
                    ES_ROW_NO
                    ER_EVENT_DATA
                    ET_BAD_CELLS
                    E_DISPLAY.

ENDCLASS.                    "LCL_EVENT_HANDLER DEFINITION



*---------------------------------------------------------------------*
*       CLASS lcl_event_handler IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS LCL_EVENT_HANDLER IMPLEMENTATION.

  METHOD TOOLBAR_ZSDT0147.

    DATA WA_TOOL TYPE STB_BUTTON.

    MOVE 3 TO WA_TOOL-BUTN_TYPE.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    WA_TOOL-FUNCTION = 'REFRESH'.
    WA_TOOL-ICON     = '@42@'.
    WA_TOOL-QUICKINFO = 'Refresh'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    MOVE 3 TO WA_TOOL-BUTN_TYPE.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    WA_TOOL-FUNCTION = 'ADD'.
    WA_TOOL-ICON     = '@0Y@'.
    WA_TOOL-QUICKINFO = 'Incluir Contrato'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    WA_TOOL-FUNCTION = 'EDIT'.
    WA_TOOL-ICON     = '@0Z@'.
    WA_TOOL-QUICKINFO = 'Editar Contrato'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    WA_TOOL-FUNCTION = 'DEL'.
    WA_TOOL-ICON     = '@11@'.
    WA_TOOL-QUICKINFO = 'Eliminar Contrato'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

  ENDMETHOD.

  METHOD TOOLBAR_ZSDT0148.

    DATA WA_TOOL TYPE STB_BUTTON.

    MOVE 3 TO WA_TOOL-BUTN_TYPE.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    WA_TOOL-FUNCTION = 'REFRESH'.
    WA_TOOL-ICON     = '@42@'.
    WA_TOOL-QUICKINFO = 'Refresh'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    MOVE 3 TO WA_TOOL-BUTN_TYPE.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    WA_TOOL-FUNCTION = 'ADD'.
    WA_TOOL-ICON     = '@0Y@'.
    WA_TOOL-QUICKINFO = 'Incluir Tranche'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    WA_TOOL-FUNCTION = 'EDIT'.
    WA_TOOL-ICON     = '@0Z@'.
    WA_TOOL-QUICKINFO = 'Editar Tranche'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    WA_TOOL-FUNCTION = 'DEL'.
    WA_TOOL-ICON     = '@11@'.
    WA_TOOL-QUICKINFO = 'Eliminar Tranche'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    MOVE 3 TO WA_TOOL-BUTN_TYPE.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    WA_TOOL-FUNCTION = 'ZSDT0062'.
    WA_TOOL-ICON     = '@9Y@'.
    WA_TOOL-QUICKINFO = 'ZSDT0062'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    WA_TOOL-FUNCTION = 'DATA'.
    WA_TOOL-ICON     = '@1U@'.
    WA_TOOL-QUICKINFO = 'Alterar data SV'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    MOVE 3 TO WA_TOOL-BUTN_TYPE.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

    WA_TOOL-FUNCTION = 'BOLETA'.
    WA_TOOL-ICON     = '@1S@'.
    WA_TOOL-QUICKINFO = 'Enviar Boleta'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

  ENDMETHOD.

  METHOD TOOLBAR_ZSDT0160.

    DATA WA_TOOL TYPE STB_BUTTON.
    "Separador
    MOVE 3 TO WA_TOOL-BUTN_TYPE.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.
    "Botão Nova Linha
    WA_TOOL-FUNCTION = 'NEW'.
    WA_TOOL-ICON     = '@17@'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.
    "Botão Deleta Nova Linha
    WA_TOOL-FUNCTION = 'DEL'.
    WA_TOOL-ICON     = '@18@'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.
    "Botão Edita Linha Antiga
    WA_TOOL-FUNCTION = 'EDIT'.
    WA_TOOL-ICON     = '@0Z@'.
    APPEND WA_TOOL TO E_OBJECT->MT_TOOLBAR.
    CLEAR WA_TOOL.

  ENDMETHOD.

  METHOD USER_COMMAND_ZSDT0147.

    DATA: IT_SELECTED_ROWS  TYPE LVC_T_ROW,
          WA_SELECTED_ROWS  TYPE LVC_S_ROW,
          WA_SAIDA_ZSDT0147 TYPE TY_SAIDA_ZSDT0147,
          WA_ZSDT0148       TYPE ZSDT0148,
          LT_CELLTAB        TYPE LVC_T_STYL,
          VL_LINES          TYPE I,
          VL_NUM_CTR        TYPE CHAR10,
          VL_CHECK          TYPE CHAR1,
          ANSWER.

    IF E_UCOMM = 'ADD'.

      "Checa se há algum contrato sendo editado
      READ TABLE IT_SAIDA_ZSDT0147 WITH KEY TIPO = 'E' TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        MESSAGE TEXT-008 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      CALL FUNCTION 'NUMBER_GET_NEXT'
        EXPORTING
          NR_RANGE_NR             = '01'
          OBJECT                  = 'ZSD_PF_CTR'
        IMPORTING
          NUMBER                  = VL_NUM_CTR
        EXCEPTIONS
          INTERVAL_NOT_FOUND      = 1
          NUMBER_RANGE_NOT_INTERN = 2
          OBJECT_NOT_FOUND        = 3
          OTHERS                  = 4.

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE TEXT-013 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ELSE.
        CONCATENATE VL_NUM_CTR '/' SY-DATUM+2(2) INTO WA_SAIDA_ZSDT0147-NRO_CONT.
      ENDIF.

      WA_SAIDA_ZSDT0147-TIPO = 'I'.

      REFRESH LT_CELLTAB.
      PERFORM FILL_CELLTAB USING: 'D' 'KUNNR'          CHANGING LT_CELLTAB,
                                  'D' 'CORRETOR'       CHANGING LT_CELLTAB,
                                  'D' 'VLR_CONT'       CHANGING LT_CELLTAB,
                                  'D' 'WAERK'          CHANGING LT_CELLTAB,
                                  'D' 'PERC_PREMIO'    CHANGING LT_CELLTAB,
                                  'D' 'PERC_CORRET'    CHANGING LT_CELLTAB,
                                  'D' 'DT_LMTE_FINANC' CHANGING LT_CELLTAB.

      INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_ZSDT0147-CELLSTYLES.

      APPEND WA_SAIDA_ZSDT0147 TO IT_SAIDA_ZSDT0147.

      PERFORM REFRESH_CTL_ALV1.

    ELSEIF E_UCOMM = 'DEL'.

      CALL METHOD CTL_ALV1->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SELECTED_ROWS.

      DESCRIBE TABLE IT_SELECTED_ROWS LINES VL_LINES.

      IF VL_LINES IS INITIAL.
        MESSAGE TEXT-003 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ELSE.
        "Checa se algum contrato selecionado para exclusão possui tranches lançadas e não excluídas
        "Checa se algum contrato selecionado para exclusão está bloqueado por outro usuário
        LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
          READ TABLE IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147 INDEX WA_SELECTED_ROWS-INDEX.
          IF SY-SUBRC IS INITIAL.
            IF WA_SAIDA_ZSDT0147-ENQUEUE IS NOT INITIAL.
              CONCATENATE  TEXT-027  WA_SAIDA_ZSDT0147-SPERR_USER INTO MSG SEPARATED BY SPACE .
              MESSAGE MSG TYPE 'S' DISPLAY LIKE 'E'.
              VL_CHECK = ABAP_TRUE.
              EXIT.
            ENDIF.
            IF WA_SAIDA_ZSDT0147-VLR_TOT_TRANCHES IS NOT INITIAL.
              MESSAGE TEXT-021 TYPE 'S' DISPLAY LIKE 'E'.
              VL_CHECK = ABAP_TRUE.
              EXIT.
            ENDIF.
          ENDIF.
        ENDLOOP.

        IF VL_CHECK IS INITIAL.
          "Checa se há algum contrato sendo editado
          READ TABLE IT_SAIDA_ZSDT0147 WITH KEY TIPO = 'E' TRANSPORTING NO FIELDS.
          IF SY-SUBRC IS INITIAL.
            MESSAGE TEXT-004 TYPE 'S' DISPLAY LIKE 'E'.
            EXIT.
          ENDIF.
          "Checa se há algum contrato sendo incluído
          READ TABLE IT_SAIDA_ZSDT0147 WITH KEY TIPO = 'I' TRANSPORTING NO FIELDS.
          IF SY-SUBRC IS INITIAL.
            MESSAGE TEXT-005 TYPE 'S' DISPLAY LIKE 'E'.
            EXIT.
          ENDIF.

          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              TITLEBAR              = 'Excluir Contrato(s)'
              TEXT_QUESTION         = 'Prosseguir com a exclusão?'
              TEXT_BUTTON_1         = 'Sim'
              TEXT_BUTTON_2         = 'Não'
              DEFAULT_BUTTON        = '1'
              DISPLAY_CANCEL_BUTTON = ' '
            IMPORTING
              ANSWER                = ANSWER
            EXCEPTIONS
              TEXT_NOT_FOUND        = 1
              OTHERS                = 2.

          IF ANSWER = '1'.

            LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
              READ TABLE IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147 INDEX WA_SELECTED_ROWS-INDEX.
              IF SY-SUBRC IS INITIAL.
                WA_SAIDA_ZSDT0147-TIPO = 'D'.
                MODIFY IT_SAIDA_ZSDT0147 FROM WA_SAIDA_ZSDT0147 INDEX WA_SELECTED_ROWS-INDEX TRANSPORTING TIPO.
              ENDIF.
            ENDLOOP.

            LOOP AT IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147 WHERE TIPO = 'D'.

              CLEAR: WA_ZSDT0148.

              SELECT SINGLE *
                FROM ZSDT0148
                INTO WA_ZSDT0148
                WHERE NRO_CONT EQ WA_SAIDA_ZSDT0147-NRO_CONT
                  AND STATUS   NE 'C'.

              IF WA_ZSDT0148 IS NOT INITIAL.
                MESSAGE TEXT-006 TYPE 'S' DISPLAY LIKE 'E'.
                VL_CHECK = ABAP_TRUE.
                EXIT.
              ENDIF.

            ENDLOOP.

            IF VL_CHECK IS INITIAL.

              LOOP AT IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147 WHERE TIPO = 'D'.
                PERFORM MODIFICAR_REGISTRO_ZSDT0147 USING WA_SAIDA_ZSDT0147.
              ENDLOOP.

              PERFORM DESBLOQUEIA_ZSDT0147.
              PERFORM SELECIONA_DADOS.
              PERFORM MANIPULA_DADOS.
              MESSAGE TEXT-007 TYPE 'S' DISPLAY LIKE 'E'.
              PERFORM REFRESH_CTL_ALV1.

            ENDIF.

          ENDIF.

        ENDIF.

      ENDIF.

    ELSEIF E_UCOMM = 'EDIT'.

      "Checa se há algum contrato sendo adicionado
      READ TABLE IT_SAIDA_ZSDT0147 WITH KEY TIPO = 'I' TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        MESSAGE TEXT-009 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      CALL METHOD CTL_ALV1->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SELECTED_ROWS.

      DESCRIBE TABLE IT_SELECTED_ROWS LINES VL_LINES.

      IF VL_LINES IS INITIAL.
        MESSAGE TEXT-003 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ELSE.
        "Checa se existe algum contrato seleciona e e bloqueado
        LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
          READ TABLE IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147 INDEX WA_SELECTED_ROWS-INDEX.
          IF SY-SUBRC IS INITIAL.
            IF WA_SAIDA_ZSDT0147-ENQUEUE IS NOT INITIAL.
              CONCATENATE  TEXT-028  WA_SAIDA_ZSDT0147-SPERR_USER INTO MSG SEPARATED BY SPACE .
              MESSAGE MSG TYPE 'S' DISPLAY LIKE 'E'.
              "MESSAGE TEXT-028 TYPE 'S' DISPLAY LIKE 'E'.
              VL_CHECK = ABAP_TRUE.
              EXIT.
            ENDIF.
          ENDIF.
        ENDLOOP.

        IF VL_CHECK IS INITIAL.

          LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
            READ TABLE IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147 INDEX WA_SELECTED_ROWS-INDEX.
            IF SY-SUBRC IS INITIAL.
              WA_SAIDA_ZSDT0147-TIPO = 'E'.

              IF WA_SAIDA_ZSDT0147-VLR_TOT_TRANCHES IS INITIAL.

                REFRESH LT_CELLTAB.
                CLEAR: WA_SAIDA_ZSDT0147-CELLSTYLES.
                PERFORM FILL_CELLTAB USING: 'D' 'NRO_CONT'       CHANGING LT_CELLTAB,
                                            'D' 'KUNNR'          CHANGING LT_CELLTAB,
                                            'D' 'CORRETOR'       CHANGING LT_CELLTAB,
                                            'D' 'VLR_CONT'       CHANGING LT_CELLTAB,
                                            'D' 'WAERK'          CHANGING LT_CELLTAB,
                                            'D' 'PERC_PREMIO'    CHANGING LT_CELLTAB,
                                            'D' 'PERC_CORRET'    CHANGING LT_CELLTAB,
                                            'D' 'DT_LMTE_FINANC' CHANGING LT_CELLTAB.

                INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_ZSDT0147-CELLSTYLES.

              ELSE.

                REFRESH LT_CELLTAB.
                CLEAR: WA_SAIDA_ZSDT0147-CELLSTYLES.
                PERFORM FILL_CELLTAB USING: 'D' 'VLR_CONT'       CHANGING LT_CELLTAB,
                                            'D' 'DT_LMTE_FINANC' CHANGING LT_CELLTAB.

                INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_ZSDT0147-CELLSTYLES.

              ENDIF.

              MODIFY IT_SAIDA_ZSDT0147 FROM WA_SAIDA_ZSDT0147 INDEX WA_SELECTED_ROWS-INDEX TRANSPORTING TIPO CELLSTYLES.
            ENDIF.
          ENDLOOP.

        ENDIF.

      ENDIF.

      PERFORM REFRESH_CTL_ALV1.

    ELSEIF E_UCOMM = 'REFRESH'.

      PERFORM DESBLOQUEIA_ZSDT0147.
      PERFORM SELECIONA_DADOS.
      PERFORM MANIPULA_DADOS.
      PERFORM REFRESH_CTL_ALV1.

    ENDIF.

  ENDMETHOD.

  METHOD USER_COMMAND_ZSDT0148.

    DATA: IT_SELECTED_ROWS  TYPE LVC_T_ROW,
          WA_SELECTED_ROWS  TYPE LVC_S_ROW,
          WA_SAIDA_ZSDT0148 TYPE TY_SAIDA_ZSDT0148,
          WA_ZSDT0148       TYPE ZSDT0148,
          LT_CELLTAB        TYPE LVC_T_STYL,
          VL_LINES          TYPE I,
          VL_NUM_TRC        TYPE CHAR10,
          VL_CHECK          TYPE CHAR1,
          ANSWER.

    IF E_UCOMM = 'ADD'.

      "Checa se há alguma tranche sendo editada
      READ TABLE IT_SAIDA_ZSDT0148 WITH KEY TIPO = 'E' TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        MESSAGE TEXT-012 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      CALL FUNCTION 'NUMBER_GET_NEXT'
        EXPORTING
          NR_RANGE_NR             = '01'
          OBJECT                  = 'ZSD_PF_TRC'
        IMPORTING
          NUMBER                  = VL_NUM_TRC
        EXCEPTIONS
          INTERVAL_NOT_FOUND      = 1
          NUMBER_RANGE_NOT_INTERN = 2
          OBJECT_NOT_FOUND        = 3
          OTHERS                  = 4.

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE TEXT-014 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ELSE.
        MOVE VL_NUM_TRC TO WA_SAIDA_ZSDT0148-NRO_TRANC.
      ENDIF.

      WA_SAIDA_ZSDT0148-TIPO = 'I'.

      REFRESH LT_CELLTAB.
      PERFORM FILL_CELLTAB USING: 'D' 'NRO_CONT'   CHANGING LT_CELLTAB,
                                  'D' 'DATA_RECEB' CHANGING LT_CELLTAB,
                                  'D' 'DATA_PGTO'  CHANGING LT_CELLTAB,
                                  'D' 'VLR_TRCHE'  CHANGING LT_CELLTAB,
                                  'D' 'PTAX'       CHANGING LT_CELLTAB,
                                  'D' 'MES_LIMITE' CHANGING LT_CELLTAB,
                                  'D' 'ANO_LIMITE' CHANGING LT_CELLTAB.

      INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_ZSDT0148-CELLSTYLES.

      APPEND WA_SAIDA_ZSDT0148 TO IT_SAIDA_ZSDT0148.

      PERFORM REFRESH_CTL_ALV1.

    ELSEIF E_UCOMM = 'DEL'.

      CALL METHOD CTL_ALV1->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SELECTED_ROWS.

      DESCRIBE TABLE IT_SELECTED_ROWS LINES VL_LINES.

      IF VL_LINES IS INITIAL.
        MESSAGE TEXT-003 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ELSE.
        "Checa se há algum contrato sendo editado
        READ TABLE IT_SAIDA_ZSDT0148 WITH KEY TIPO = 'E' TRANSPORTING NO FIELDS.
        IF SY-SUBRC IS INITIAL.
          MESSAGE TEXT-016 TYPE 'S' DISPLAY LIKE 'E'.
          EXIT.
        ENDIF.
        "Checa se há algum contrato sendo incluído
        READ TABLE IT_SAIDA_ZSDT0148 WITH KEY TIPO = 'I' TRANSPORTING NO FIELDS.
        IF SY-SUBRC IS INITIAL.
          MESSAGE TEXT-017 TYPE 'S' DISPLAY LIKE 'E'.
          EXIT.
        ENDIF.

        "Checa se as Tranches selecionadas para exclusão possuem Solicitação de OV
        "Checa se as Tranches selecionadas para exclusão estão bloqueadas por outro usuário
        LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
          READ TABLE IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 INDEX WA_SELECTED_ROWS-INDEX.
          IF SY-SUBRC IS INITIAL.
            IF WA_SAIDA_ZSDT0148-ENQUEUE IS NOT INITIAL.
              CONCATENATE  TEXT-029  WA_SAIDA_ZSDT0148-SPERR_USER INTO MSG SEPARATED BY SPACE .
              MESSAGE MSG TYPE 'S' DISPLAY LIKE 'E'.
              VL_CHECK = ABAP_TRUE.
              EXIT.
            ENDIF.
            IF WA_SAIDA_ZSDT0148-NRO_SOL_OV IS NOT INITIAL.
              MESSAGE TEXT-018 TYPE 'S' DISPLAY LIKE 'E'.
              VL_CHECK = ABAP_TRUE.
              EXIT.
            ENDIF.
          ENDIF.
        ENDLOOP.

        IF VL_CHECK IS INITIAL.

          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              TITLEBAR              = 'Excluir Tranche(s)'
              TEXT_QUESTION         = 'Prosseguir com a exclusão?'
              TEXT_BUTTON_1         = 'Sim'
              TEXT_BUTTON_2         = 'Não'
              DEFAULT_BUTTON        = '1'
              DISPLAY_CANCEL_BUTTON = ' '
            IMPORTING
              ANSWER                = ANSWER
            EXCEPTIONS
              TEXT_NOT_FOUND        = 1
              OTHERS                = 2.

          IF ANSWER = '1'.

            LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
              READ TABLE IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 INDEX WA_SELECTED_ROWS-INDEX.
              IF SY-SUBRC IS INITIAL.
                WA_SAIDA_ZSDT0148-TIPO = 'D'.
                MODIFY IT_SAIDA_ZSDT0148 FROM WA_SAIDA_ZSDT0148 INDEX WA_SELECTED_ROWS-INDEX TRANSPORTING TIPO.
              ENDIF.
            ENDLOOP.

            LOOP AT IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 WHERE TIPO = 'D'.
              PERFORM MODIFICAR_REGISTRO_ZSDT0148 USING WA_SAIDA_ZSDT0148.
            ENDLOOP.

            PERFORM DESBLOQUEIA_ZSDT0148.
            PERFORM SELECIONA_DADOS.
            PERFORM MANIPULA_DADOS.
            MESSAGE TEXT-019 TYPE 'S' DISPLAY LIKE 'E'.

            PERFORM REFRESH_CTL_ALV1.

          ENDIF.

        ENDIF.

      ENDIF.

    ELSEIF E_UCOMM = 'EDIT'.

      "Checa se há algum contrato sendo incluído
      READ TABLE IT_SAIDA_ZSDT0148 WITH KEY TIPO = 'I' TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        MESSAGE TEXT-017 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      CALL METHOD CTL_ALV1->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SELECTED_ROWS.

      DESCRIBE TABLE IT_SELECTED_ROWS LINES VL_LINES.

      "Checa se há alguma tranche com OV associada
      LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
        READ TABLE IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 INDEX WA_SELECTED_ROWS-INDEX.
        IF SY-SUBRC IS INITIAL.
          IF WA_SAIDA_ZSDT0148-NRO_SOL_OV IS NOT INITIAL.
            MESSAGE TEXT-020 TYPE 'S' DISPLAY LIKE 'E'.
            VL_CHECK = ABAP_TRUE.
            EXIT.
          ENDIF.
          IF WA_SAIDA_ZSDT0148-ENQUEUE IS NOT INITIAL.
            CONCATENATE  TEXT-030  WA_SAIDA_ZSDT0148-SPERR_USER INTO MSG SEPARATED BY SPACE .
            MESSAGE MSG TYPE 'S' DISPLAY LIKE 'E'.
            VL_CHECK = ABAP_TRUE.
            EXIT.
          ENDIF.
        ENDIF.
      ENDLOOP.

      IF VL_CHECK IS INITIAL.

        IF VL_LINES IS INITIAL.
          MESSAGE TEXT-003 TYPE 'S' DISPLAY LIKE 'E'.
          EXIT.
        ELSE.

          LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
            READ TABLE IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 INDEX WA_SELECTED_ROWS-INDEX.
            IF SY-SUBRC IS INITIAL.
              WA_SAIDA_ZSDT0148-TIPO = 'E'.

              REFRESH LT_CELLTAB.
              CLEAR: WA_SAIDA_ZSDT0148-CELLSTYLES.
              PERFORM FILL_CELLTAB USING: 'D' 'DATA_RECEB'    CHANGING LT_CELLTAB,
                                          'D' 'DATA_PGTO'     CHANGING LT_CELLTAB,
                                          'D' 'VLR_TRCHE'     CHANGING LT_CELLTAB,
                                          'D' 'VLR_CONT'      CHANGING LT_CELLTAB,
                                          'D' 'PTAX'          CHANGING LT_CELLTAB,
                                          'D' 'MES_LIMITE'    CHANGING LT_CELLTAB,
                                          'D' 'ANO_LIMITE'    CHANGING LT_CELLTAB.

              INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_ZSDT0148-CELLSTYLES.

              MODIFY IT_SAIDA_ZSDT0148 FROM WA_SAIDA_ZSDT0148 INDEX WA_SELECTED_ROWS-INDEX TRANSPORTING TIPO CELLSTYLES.

            ENDIF.
          ENDLOOP.

        ENDIF.

      ENDIF.

      PERFORM REFRESH_CTL_ALV1.

    ELSEIF E_UCOMM = 'REFRESH'.

      PERFORM DESBLOQUEIA_ZSDT0148.
      PERFORM SELECIONA_DADOS.
      PERFORM MANIPULA_DADOS.
      PERFORM REFRESH_CTL_ALV1.

    ELSEIF E_UCOMM = 'ZSDT0062'.

      CALL METHOD CTL_ALV1->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SELECTED_ROWS.

      DESCRIBE TABLE IT_SELECTED_ROWS LINES VL_LINES.

      "Check se está tentando criar OV no modo inclusão
      READ TABLE IT_SAIDA_ZSDT0148 WITH KEY TIPO = 'I' TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        MESSAGE TEXT-026 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      "Check se está tentando criar OV no modo edição
      READ TABLE IT_SAIDA_ZSDT0148 WITH KEY TIPO = 'E' TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        MESSAGE TEXT-026 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      IF VL_LINES NE 1.
        MESSAGE TEXT-024 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ELSE.
        READ TABLE IT_SELECTED_ROWS INTO WA_SELECTED_ROWS INDEX 1.
        IF SY-SUBRC IS INITIAL.
          READ TABLE IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 INDEX WA_SELECTED_ROWS-INDEX.
          IF SY-SUBRC IS INITIAL.
            "Checa se já não possuí Solicitação
            IF WA_SAIDA_ZSDT0148-NRO_SOL_OV IS INITIAL.
              "Checa se possui PTAX
              IF WA_SAIDA_ZSDT0148-PTAX IS INITIAL.
                MESSAGE TEXT-040 TYPE 'S' DISPLAY LIKE 'E'.
                EXIT.
              ELSE.
                "Checa se a tranche está bloqueada
                IF WA_SAIDA_ZSDT0148-ENQUEUE IS INITIAL.
                  PERFORM ZSDT0062 USING WA_SAIDA_ZSDT0148.
                ELSE.
*                  MESSAGE TEXT-025 TYPE 'S' DISPLAY LIKE 'E'.
                   CONCATENATE  TEXT-031 WA_SAIDA_ZSDT0148-SPERR_USER INTO MSG SEPARATED BY SPACE.
                   MESSAGE MSG TYPE 'S' DISPLAY LIKE 'E'.
                  EXIT.
                ENDIF.
              ENDIF.
            ELSE.
              MESSAGE TEXT-025 TYPE 'S' DISPLAY LIKE 'E'.
              EXIT.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.

    ELSEIF E_UCOMM = 'BOLETA'.

      CALL METHOD CTL_ALV1->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SELECTED_ROWS.

      DESCRIBE TABLE IT_SELECTED_ROWS LINES VL_LINES.

      "Check se está tentando enviar boleta no modo inclusão
      READ TABLE IT_SAIDA_ZSDT0148 WITH KEY TIPO = 'I' TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        MESSAGE TEXT-033 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      "Check se está tentando enviar boleta no modo edição
      READ TABLE IT_SAIDA_ZSDT0148 WITH KEY TIPO = 'E' TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        MESSAGE TEXT-033 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      IF VL_LINES EQ 0.
        MESSAGE TEXT-034 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ELSE.
        "Check se está tentando enviar uma boleta de tranche bloqueada por outro usuário
        LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
          READ TABLE IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 INDEX WA_SELECTED_ROWS-INDEX.
          IF SY-SUBRC IS INITIAL.
            IF WA_SAIDA_ZSDT0148-ENQUEUE IS NOT INITIAL.
              CONCATENATE  TEXT-031  WA_SAIDA_ZSDT0148-SPERR_USER INTO MSG SEPARATED BY SPACE .
              MESSAGE MSG TYPE 'S' DISPLAY LIKE 'E'.
              VL_CHECK = ABAP_TRUE.
              EXIT.
            ENDIF.
          ENDIF.
        ENDLOOP.

        IF VL_CHECK IS INITIAL.
          LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
            READ TABLE IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 INDEX WA_SELECTED_ROWS-INDEX.
            IF SY-SUBRC IS INITIAL.
              PERFORM ENVIA_BOLETA USING WA_SAIDA_ZSDT0148.
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDIF.

    ELSEIF E_UCOMM = 'DATA'.

      CALL METHOD CTL_ALV1->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SELECTED_ROWS.

      DESCRIBE TABLE IT_SELECTED_ROWS LINES VL_LINES.

      "Check se está alterar data de SV no modo inclusão
      READ TABLE IT_SAIDA_ZSDT0148 WITH KEY TIPO = 'I' TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        MESSAGE TEXT-026 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      "Check se está alterar data de SV no modo edição
      READ TABLE IT_SAIDA_ZSDT0148 WITH KEY TIPO = 'E' TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        MESSAGE TEXT-026 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      IF VL_LINES NE 1.
        MESSAGE TEXT-024 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ELSE.
        READ TABLE IT_SELECTED_ROWS INTO WA_SELECTED_ROWS INDEX 1.
        IF SY-SUBRC IS INITIAL.
          READ TABLE IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 INDEX WA_SELECTED_ROWS-INDEX.
          IF SY-SUBRC IS INITIAL.
            "Checa se a tranche está bloqueada
            IF WA_SAIDA_ZSDT0148-ENQUEUE IS INITIAL.
              "Checa se não possuí Solicitação
              IF WA_SAIDA_ZSDT0148-NRO_SOL_OV IS NOT INITIAL.

                CLEAR: WA_SV_MES, WA_SV_ANO, VL_NRO_CONT, VL_NRO_TRCHE, VL_NRO_SOL_OV.

                VL_NRO_CONT   = WA_SAIDA_ZSDT0148-NRO_CONT.
                VL_NRO_TRCHE  = WA_SAIDA_ZSDT0148-NRO_TRANC.
                VL_NRO_SOL_OV = WA_SAIDA_ZSDT0148-NRO_SOL_OV.

                CALL SCREEN 5001 STARTING AT 5 5 ENDING AT 46 7.

              ELSE.
                MESSAGE TEXT-041 TYPE 'S' DISPLAY LIKE 'E'.
                EXIT.
              ENDIF.
            ELSE.
              CONCATENATE  TEXT-044  WA_SAIDA_ZSDT0148-SPERR_USER INTO MSG SEPARATED BY SPACE .
              MESSAGE MSG TYPE 'S' DISPLAY LIKE 'E'.
              EXIT.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.

    ENDIF.

  ENDMETHOD.

  METHOD USER_COMMAND_ZSDT0160.

    DATA: IT_SELECTED_ROWS  TYPE LVC_T_ROW,
          WA_SELECTED_ROWS  TYPE LVC_S_ROW,
          WA_SAIDA_ZSDT0160 TYPE TY_SAIDA_ZSDT0160,
          WA_ZSDT0148       TYPE ZSDT0148,
          LT_CELLTAB        TYPE LVC_T_STYL,
          VL_CONT           TYPE I,
          VL_LINES          TYPE I,
          VL_NUM_CTR        TYPE CHAR10,
          VL_CHECK          TYPE CHAR1,
          ANSWER.

    IF E_UCOMM = 'NEW'.

      "Checa se há algum cliente/documentação sendo editado
      READ TABLE IT_SAIDA_ZSDT0160 WITH KEY TIPO = 'E' TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        MESSAGE TEXT-008 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      WA_SAIDA_ZSDT0160-TIPO = 'I'.

      VL_CONT = VL_CONT + 1.
      REFRESH LT_CELLTAB.
      CLEAR: LT_CELLTAB, WA_SAIDA_ZSDT0160-CELLSTYLES.

      "Cria a linha
      PERFORM FILL_CELLTAB USING: 'D' 'KUNNR'       CHANGING LT_CELLTAB,
                                  'D' 'NAME1'       CHANGING LT_CELLTAB,
                                  'D' 'PROCURACOES' CHANGING LT_CELLTAB,
                                  'D' 'DADOS_RADAR' CHANGING LT_CELLTAB.

      INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_ZSDT0160-CELLSTYLES.

      APPEND WA_SAIDA_ZSDT0160 TO IT_SAIDA_ZSDT0160.
      "Verifica os documentos existentes para o cliente informado
      PERFORM BUSCA_INFO_DOCS.
      "Atualiza a tela (ALV)
      PERFORM REFRESH_CTL_ALV2.

    ELSEIF E_UCOMM = 'DEL'.
      CLEAR: IT_SELECTED_ROWS, WA_SELECTED_ROWS.

      CALL METHOD CTL_ALV2->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SELECTED_ROWS.

      DESCRIBE TABLE IT_SELECTED_ROWS LINES VL_LINES.

      IF VL_LINES IS INITIAL.
        MESSAGE TEXT-003 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ELSE.

        "Checa se algum contrato selecionado para exclusão está bloqueado por outro usuário
*        LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
*          READ TABLE IT_SAIDA_ZSDT0160 INTO WA_SAIDA_ZSDT0160 INDEX WA_SELECTED_ROWS-INDEX.
*          IF SY-SUBRC IS INITIAL.
*            IF WA_SAIDA_ZSDT0160-ENQUEUE IS NOT INITIAL.
*              MESSAGE TEXT-051 TYPE 'S' DISPLAY LIKE 'E'.
*              VL_CHECK = ABAP_TRUE.
*              EXIT.
*            ENDIF.
*          ENDIF.
*        ENDLOOP.

        IF VL_CHECK IS INITIAL.
          "Checa se há algum cliente sendo editado
          READ TABLE IT_SAIDA_ZSDT0160 WITH KEY TIPO = 'E' TRANSPORTING NO FIELDS.
          IF SY-SUBRC IS INITIAL.
            MESSAGE TEXT-047 TYPE 'S' DISPLAY LIKE 'E'.
            EXIT.
          ENDIF.
          "Checa se há algum cliente sendo incluído
          READ TABLE IT_SAIDA_ZSDT0160  WITH KEY TIPO = 'I' TRANSPORTING NO FIELDS.
          IF SY-SUBRC IS INITIAL.
            MESSAGE TEXT-048 TYPE 'S' DISPLAY LIKE 'E'.
            EXIT.
          ENDIF.

          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              TITLEBAR              = 'Excluir Registro(s)'
              TEXT_QUESTION         = 'Prosseguir com a exclusão?'
              TEXT_BUTTON_1         = 'Sim'
              TEXT_BUTTON_2         = 'Não'
              DEFAULT_BUTTON        = '1'
              DISPLAY_CANCEL_BUTTON = ' '
            IMPORTING
              ANSWER                = ANSWER
            EXCEPTIONS
              TEXT_NOT_FOUND        = 1
              OTHERS                = 2.

          IF ANSWER = '1'.

            LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
              READ TABLE IT_SAIDA_ZSDT0160 INTO WA_SAIDA_ZSDT0160 INDEX WA_SELECTED_ROWS-INDEX.
              IF SY-SUBRC IS INITIAL.
                WA_SAIDA_ZSDT0160-TIPO = 'D'.
                MODIFY IT_SAIDA_ZSDT0160 FROM WA_SAIDA_ZSDT0160 INDEX WA_SELECTED_ROWS-INDEX TRANSPORTING TIPO.
              ENDIF.
            ENDLOOP.

            IF VL_CHECK IS INITIAL.

              LOOP AT IT_SAIDA_ZSDT0160 INTO WA_SAIDA_ZSDT0160 WHERE TIPO = 'D'.
                PERFORM MODIFICAR_REGISTRO_ZSDT0160 USING WA_SAIDA_ZSDT0160.
              ENDLOOP.

*              PERFORM DESBLOQUEIA_ZSDT0160.
              PERFORM SELECIONA_DADOS.
              PERFORM MANIPULA_DADOS.
              MESSAGE TEXT-052 TYPE 'S' DISPLAY LIKE 'E'.
              PERFORM REFRESH_CTL_ALV2.

            ENDIF.

          ENDIF.

        ENDIF.

      ENDIF.
*
    ELSEIF E_UCOMM = 'EDIT'.

      "Checa se há algum contrato sendo adicionado
      READ TABLE IT_SAIDA_ZSDT0160 WITH KEY TIPO = 'I' TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS INITIAL.
        MESSAGE TEXT-009 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      CALL METHOD CTL_ALV2->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SELECTED_ROWS.

      DESCRIBE TABLE IT_SELECTED_ROWS LINES VL_LINES.

      IF VL_LINES IS INITIAL.
        MESSAGE TEXT-003 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ELSE.
*        "Checa se existe algum contrato seleciona e e bloqueado
*        LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
*          READ TABLE IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147 INDEX WA_SELECTED_ROWS-INDEX.
*          IF SY-SUBRC IS INITIAL.
*            IF WA_SAIDA_ZSDT0147-ENQUEUE IS NOT INITIAL.
*              MESSAGE TEXT-028 TYPE 'S' DISPLAY LIKE 'E'.
*              VL_CHECK = ABAP_TRUE.
*              EXIT.
*            ENDIF.
*          ENDIF.
*        ENDLOOP.

        IF VL_CHECK IS INITIAL.

          LOOP AT IT_SELECTED_ROWS INTO WA_SELECTED_ROWS.
            READ TABLE IT_SAIDA_ZSDT0160 INTO WA_SAIDA_ZSDT0160 INDEX WA_SELECTED_ROWS-INDEX.
            IF SY-SUBRC IS INITIAL.
              WA_SAIDA_ZSDT0160-TIPO = 'E'.
              CLEAR WA_SAIDA_ZSDT0160-ANTIG.

*              IF WA_SAIDA_ZSDT0160-VLR_TOT_TRANCHES IS INITIAL.
*
*                REFRESH LT_CELLTAB.
*                CLEAR: WA_SAIDA_ZSDT0160-CELLSTYLES.
*                PERFORM FILL_CELLTAB USING: 'D' 'KUNNR'       CHANGING LT_CELLTAB,
*                                            'D' 'NAME1'       CHANGING LT_CELLTAB,
*                                            'D' 'PROCURACOES' CHANGING LT_CELLTAB,
*                                            'D' 'DADOS_RADAR' CHANGING LT_CELLTAB.
*
*                INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_ZSDT0160-CELLSTYLES.
*
*              ELSE.
*
*                REFRESH LT_CELLTAB.
*                CLEAR: WA_SAIDA_ZSDT0160-CELLSTYLES.
*                PERFORM FILL_CELLTAB USING: 'D' 'VLR_CONT'       CHANGING LT_CELLTAB,
*                                            'D' 'DT_LMTE_FINANC' CHANGING LT_CELLTAB.
*
*                INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_ZSDT0147-CELLSTYLES.
*
*              ENDIF.

              MODIFY IT_SAIDA_ZSDT0160 FROM WA_SAIDA_ZSDT0160 INDEX WA_SELECTED_ROWS-INDEX TRANSPORTING ANTIG TIPO.
            ENDIF.
          ENDLOOP.

        ENDIF.

      ENDIF.

      PERFORM REFRESH_CTL_ALV2.

    ELSEIF E_UCOMM = 'REFRESH'.

*      PERFORM DESBLOQUEIA_ZSDT0147.
      PERFORM SELECIONA_DADOS.
      PERFORM MANIPULA_DADOS.
      PERFORM REFRESH_CTL_ALV2.

    ENDIF.


  ENDMETHOD.

  METHOD DATA_CHANGED_FINISHED_ZSDT0147.

    DATA: WA_GOOD_CELLS     TYPE LVC_S_MODI,
          WA_SAIDA_ZSDT0147 TYPE TY_SAIDA_ZSDT0147,
          WA_KNA1           TYPE KNA1,
          WA_LFA1           TYPE LFA1.

    LOOP AT ET_GOOD_CELLS INTO WA_GOOD_CELLS.

      IF E_MODIFIED EQ ABAP_TRUE.
        IF WA_GOOD_CELLS-FIELDNAME EQ 'KUNNR'.

          READ TABLE IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147 INDEX WA_GOOD_CELLS-ROW_ID.

          SELECT SINGLE *
            FROM KNA1
            INTO WA_KNA1
            WHERE KUNNR EQ WA_SAIDA_ZSDT0147-KUNNR.

          IF SY-SUBRC IS INITIAL.
            WA_SAIDA_ZSDT0147-NAME1 = WA_KNA1-NAME1.
          ELSE.
            CLEAR: WA_SAIDA_ZSDT0147-KUNNR, WA_SAIDA_ZSDT0147-NAME1.
            MESSAGE TEXT-049 TYPE 'I'.
          ENDIF.

          MODIFY IT_SAIDA_ZSDT0147 FROM WA_SAIDA_ZSDT0147 INDEX WA_GOOD_CELLS-ROW_ID TRANSPORTING KUNNR NAME1.

        ELSEIF WA_GOOD_CELLS-FIELDNAME EQ 'CORRETOR'.

          READ TABLE IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147 INDEX WA_GOOD_CELLS-ROW_ID.

          IF WA_SAIDA_ZSDT0147-CORRETOR IS NOT INITIAL.

            SELECT SINGLE *
              FROM LFA1
              INTO WA_LFA1
              WHERE LIFNR EQ WA_SAIDA_ZSDT0147-CORRETOR.

            IF SY-SUBRC IS INITIAL.
              WA_SAIDA_ZSDT0147-NAME2 = WA_LFA1-NAME1.
            ELSE.
              CLEAR: WA_SAIDA_ZSDT0147-CORRETOR, WA_SAIDA_ZSDT0147-NAME2.
              MESSAGE TEXT-050 TYPE 'I'.
            ENDIF.

            MODIFY IT_SAIDA_ZSDT0147 FROM WA_SAIDA_ZSDT0147 INDEX WA_GOOD_CELLS-ROW_ID TRANSPORTING CORRETOR NAME2.

          ENDIF.

        ENDIF.

        PERFORM REFRESH_CTL_ALV1.

      ENDIF.
    ENDLOOP.

  ENDMETHOD.

  METHOD DATA_CHANGED_FINISHED_ZSDT0148.

    DATA: WA_GOOD_CELLS     TYPE LVC_S_MODI,
          WA_SAIDA_ZSDT0148 TYPE TY_SAIDA_ZSDT0148,
          WA_ZSDT0147       TYPE ZSDT0147,
          WA_LFA1           TYPE LFA1,
          WA_KNA1           TYPE KNA1,
          VL_CONTRATO(13)   TYPE N,
          VL_CONTRATO_LINES TYPE I.

    LOOP AT ET_GOOD_CELLS INTO WA_GOOD_CELLS.

      IF E_MODIFIED EQ ABAP_TRUE.
        IF WA_GOOD_CELLS-FIELDNAME EQ 'NRO_CONT'.

          READ TABLE IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 INDEX WA_GOOD_CELLS-ROW_ID.


          VL_CONTRATO = WA_SAIDA_ZSDT0148-NRO_CONT.
          WA_SAIDA_ZSDT0148-NRO_CONT = |{ VL_CONTRATO+1(10) }/{ VL_CONTRATO+11(2) }|.


          SELECT SINGLE *
            FROM ZSDT0147
            INTO WA_ZSDT0147
            WHERE NRO_CONT EQ WA_SAIDA_ZSDT0148-NRO_CONT
              AND STATUS   NE 'C'.

          IF SY-SUBRC IS INITIAL.

            WA_SAIDA_ZSDT0148-WAERK         = WA_ZSDT0147-WAERK.
            WA_SAIDA_ZSDT0148-KUNNR         = WA_ZSDT0147-KUNNR.
            WA_SAIDA_ZSDT0148-CORRETOR      = WA_ZSDT0147-CORRETOR.
            WA_SAIDA_ZSDT0148-PERC_COR      = WA_ZSDT0147-PERC_CORRET.
            WA_SAIDA_ZSDT0148-PERC_PRE      = WA_ZSDT0147-PERC_PREMIO.
            WA_SAIDA_ZSDT0148-PERC_ALLIN    = WA_ZSDT0147-PERC_CORRET + WA_ZSDT0147-PERC_PREMIO.

            CLEAR: WA_KNA1, WA_LFA1.

            SELECT SINGLE *
              FROM KNA1
              INTO WA_KNA1
              WHERE KUNNR EQ WA_ZSDT0147-KUNNR.

            IF WA_KNA1 IS NOT INITIAL.
              WA_SAIDA_ZSDT0148-NAME1 = WA_KNA1-NAME1.
            ENDIF.

            SELECT SINGLE *
              FROM LFA1
              INTO WA_LFA1
              WHERE LIFNR EQ WA_ZSDT0147-CORRETOR.

            IF WA_LFA1 IS NOT INITIAL.
              WA_SAIDA_ZSDT0148-NAME2 = WA_LFA1-NAME1.
            ENDIF.

          ELSE.
            CLEAR: WA_SAIDA_ZSDT0148-WAERK, WA_SAIDA_ZSDT0148-KUNNR, WA_SAIDA_ZSDT0148-CORRETOR, WA_SAIDA_ZSDT0148-NAME1, WA_SAIDA_ZSDT0148-NAME2, WA_SAIDA_ZSDT0148-PERC_COR, WA_SAIDA_ZSDT0148-PERC_PRE, WA_SAIDA_ZSDT0148-PERC_ALLIN.
          ENDIF.

          MODIFY IT_SAIDA_ZSDT0148 FROM WA_SAIDA_ZSDT0148 INDEX WA_GOOD_CELLS-ROW_ID TRANSPORTING NRO_CONT WAERK KUNNR CORRETOR NAME1 NAME2 PERC_COR PERC_PRE PERC_ALLIN.

        ELSEIF WA_GOOD_CELLS-FIELDNAME EQ 'VLR_TRCHE'.

          READ TABLE IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 INDEX WA_GOOD_CELLS-ROW_ID.

          TRY.
              WA_SAIDA_ZSDT0148-VLR_TRCHE_BRL   = WA_SAIDA_ZSDT0148-VLR_TRCHE * WA_SAIDA_ZSDT0148-PTAX.
              WA_SAIDA_ZSDT0148-VLR_CRTGEM      = WA_SAIDA_ZSDT0148-PERC_COR * WA_SAIDA_ZSDT0148-VLR_TRCHE / 100.
              WA_SAIDA_ZSDT0148-VLR_CRTGEM_BRL  = WA_SAIDA_ZSDT0148-PERC_COR * WA_SAIDA_ZSDT0148-VLR_TRCHE * WA_SAIDA_ZSDT0148-PTAX  / 100.
              WA_SAIDA_ZSDT0148-VLR_PMIO        = WA_SAIDA_ZSDT0148-PERC_PRE * WA_SAIDA_ZSDT0148-VLR_TRCHE / 100.
              WA_SAIDA_ZSDT0148-VLR_PMIO_BRL    = WA_SAIDA_ZSDT0148-PERC_PRE * WA_SAIDA_ZSDT0148-VLR_TRCHE * WA_SAIDA_ZSDT0148-PTAX  / 100.
              WA_SAIDA_ZSDT0148-VLR_ALLIN       = WA_SAIDA_ZSDT0148-VLR_TRCHE * WA_SAIDA_ZSDT0148-PERC_ALLIN / 100.
            CATCH CX_ROOT.
              MESSAGE TEXT-015 TYPE 'S' DISPLAY LIKE 'E'.
          ENDTRY.

          MODIFY IT_SAIDA_ZSDT0148 FROM WA_SAIDA_ZSDT0148 INDEX WA_GOOD_CELLS-ROW_ID TRANSPORTING VLR_TRCHE_BRL VLR_CRTGEM VLR_CRTGEM_BRL VLR_PMIO VLR_PMIO_BRL VLR_ALLIN.

        ELSEIF WA_GOOD_CELLS-FIELDNAME EQ 'PTAX'.

          READ TABLE IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 INDEX WA_GOOD_CELLS-ROW_ID.

          TRY.
              WA_SAIDA_ZSDT0148-VLR_TRCHE_BRL   = WA_SAIDA_ZSDT0148-VLR_TRCHE * WA_SAIDA_ZSDT0148-PTAX.
              WA_SAIDA_ZSDT0148-VLR_CRTGEM      = WA_SAIDA_ZSDT0148-PERC_COR * WA_SAIDA_ZSDT0148-VLR_TRCHE / 100.
              WA_SAIDA_ZSDT0148-VLR_CRTGEM_BRL  = WA_SAIDA_ZSDT0148-PERC_COR * WA_SAIDA_ZSDT0148-VLR_TRCHE * WA_SAIDA_ZSDT0148-PTAX  / 100.
              WA_SAIDA_ZSDT0148-VLR_PMIO        = WA_SAIDA_ZSDT0148-PERC_PRE * WA_SAIDA_ZSDT0148-VLR_TRCHE / 100.
              WA_SAIDA_ZSDT0148-VLR_PMIO_BRL    = WA_SAIDA_ZSDT0148-PERC_PRE * WA_SAIDA_ZSDT0148-VLR_TRCHE * WA_SAIDA_ZSDT0148-PTAX  / 100.
              WA_SAIDA_ZSDT0148-VLR_ALLIN       = WA_SAIDA_ZSDT0148-VLR_TRCHE * WA_SAIDA_ZSDT0148-PERC_ALLIN / 100.
            CATCH CX_ROOT.
              MESSAGE TEXT-015 TYPE 'S' DISPLAY LIKE 'E'.
          ENDTRY.

          MODIFY IT_SAIDA_ZSDT0148 FROM WA_SAIDA_ZSDT0148 INDEX WA_GOOD_CELLS-ROW_ID TRANSPORTING VLR_TRCHE_BRL VLR_CRTGEM VLR_CRTGEM_BRL VLR_PMIO VLR_PMIO_BRL VLR_ALLIN.

        ENDIF.

        PERFORM REFRESH_CTL_ALV1.

      ENDIF.
    ENDLOOP.

  ENDMETHOD.

  METHOD DATA_CHANGED_FINISHED_ZSDT0160.

    DATA: WA_GOOD_CELLS        TYPE LVC_S_MODI,
          WA_SAIDA_ZSDT0160    TYPE TY_SAIDA_ZSDT0160,
          WA_ZSDT0160          TYPE ZSDT0160,
          WA_KNA1              TYPE KNA1,
          WL_CHECK_DUPLICIDADE TYPE TY_SAIDA_ZSDT0160.

    LOOP AT ET_GOOD_CELLS INTO WA_GOOD_CELLS.

      IF E_MODIFIED EQ ABAP_TRUE.
        IF WA_GOOD_CELLS-FIELDNAME EQ 'KUNNR'.

          READ TABLE IT_SAIDA_ZSDT0160 INTO WA_SAIDA_ZSDT0160 INDEX WA_GOOD_CELLS-ROW_ID.

          READ TABLE IT_SAIDA_ZSDT0160 INTO WL_CHECK_DUPLICIDADE WITH KEY KUNNR = WA_SAIDA_ZSDT0160-KUNNR.

          IF WL_CHECK_DUPLICIDADE IS NOT INITIAL AND WL_CHECK_DUPLICIDADE-NAME1 IS NOT INITIAL.

            DELETE IT_SAIDA_ZSDT0160 INDEX WA_GOOD_CELLS-ROW_ID.
            PERFORM REFRESH_CTL_ALV2.
            MESSAGE TEXT-053 TYPE 'I'.

          ELSE.

            CLEAR: WA_KNA1.

            SELECT SINGLE *
              FROM KNA1
              INTO WA_KNA1
              WHERE KUNNR EQ WA_SAIDA_ZSDT0160-KUNNR.

            IF WA_KNA1 IS NOT INITIAL.
              WA_SAIDA_ZSDT0160-NAME1 = WA_KNA1-NAME1.
            ELSE.
              MESSAGE TEXT-049 TYPE 'I'.
            ENDIF.

            MODIFY IT_SAIDA_ZSDT0160 FROM WA_SAIDA_ZSDT0160 INDEX WA_GOOD_CELLS-ROW_ID TRANSPORTING KUNNR NAME1.

            PERFORM REFRESH_CTL_ALV2.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.



  METHOD ON_F4.

    DATA: IT_RET TYPE STANDARD TABLE OF DDSHRETVAL,
          IT_F4  TYPE STANDARD TABLE OF TY_F4.

    DATA: WA_RET  TYPE DDSHRETVAL,
          WA_MODI TYPE LVC_S_MODI.

    FIELD-SYMBOLS: <ITAB> TYPE LVC_T_MODI.

    SELECT *
      FROM ZSDT0147
      INTO CORRESPONDING FIELDS OF TABLE IT_F4
      WHERE STATUS NE 'C'.

    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        RETFIELD        = 'NRO_CONT'
        WINDOW_TITLE    = 'Lista de Contratos'
        VALUE_ORG       = 'S'
      TABLES
        VALUE_TAB       = IT_F4
        RETURN_TAB      = IT_RET
      EXCEPTIONS
        PARAMETER_ERROR = 1
        NO_VALUES_FOUND = 2
        OTHERS          = 3.

    IF SY-SUBRC = 0.
      ASSIGN ER_EVENT_DATA->M_DATA->* TO <ITAB>.
      READ TABLE IT_RET INTO WA_RET INDEX 1.
      WA_MODI-ROW_ID   = ES_ROW_NO-ROW_ID.
      WA_MODI-FIELDNAME = 'NRO_CONT'.
      WA_MODI-VALUE     = WA_RET-FIELDVAL.
      APPEND WA_MODI TO <ITAB>.
    ENDIF.

    ER_EVENT_DATA->M_EVENT_HANDLED = 'X'."(to inform grid that f4 was handled manually)

  ENDMETHOD.

  METHOD HANDLE_HOTSPOT_CLICK.

    DATA: WA_SAIDA_ZSDT0148 TYPE TY_SAIDA_ZSDT0148,
          IT_RSPARAMS       TYPE TABLE OF RSPARAMS,
          WA_RSPARAMS       TYPE RSPARAMS.

    IF E_COLUMN_ID-FIELDNAME EQ 'NRO_SOL_OV'.

      READ TABLE IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 INDEX E_ROW_ID-INDEX.
      IF SY-SUBRC IS INITIAL AND WA_SAIDA_ZSDT0148-NRO_SOL_OV IS NOT INITIAL.

        WA_RSPARAMS-SELNAME = 'PSOLICI'.
        WA_RSPARAMS-KIND = 'P'.
        WA_RSPARAMS-SIGN = ''.
        WA_RSPARAMS-OPTION = ''.
        WA_RSPARAMS-LOW = WA_SAIDA_ZSDT0148-NRO_SOL_OV.
        APPEND WA_RSPARAMS TO IT_RSPARAMS.

        SUBMIT ZSDR0022 WITH SELECTION-TABLE IT_RSPARAMS AND RETURN.

        PERFORM DESBLOQUEIA_ZSDT0148.
        PERFORM SELECIONA_DADOS.
        PERFORM MANIPULA_DADOS.
        PERFORM REFRESH_CTL_ALV1.

      ENDIF.

    ENDIF.

  ENDMETHOD.

  METHOD HANDLE_BUTTON_CLICK_ZSDT0160.
    DATA: WA_SAIDA_ZSDT0160 TYPE TY_SAIDA_ZSDT0160.

    DATA: VL_OBJ_KEY    TYPE SIBFLPORB-INSTID,
          VL_LINES      TYPE I,
          ANEXOS        TYPE TABLE OF BDN_CON,
          VL_IP_MODE    TYPE SGS_RWMOD,
          VL_IP_SERVICE TYPE SGS_SRVNAM,
          WA_BOR        TYPE BORIDENT,
          ANEXO_OBJ_1   TYPE REF TO CL_GOS_MANAGER,
          ANEXO_OBJ_2   TYPE REF TO CL_GOS_MANAGER.

    READ TABLE IT_SAIDA_ZSDT0160 INTO WA_SAIDA_ZSDT0160 INDEX ES_ROW_NO-ROW_ID.

    CASE ES_COL_ID.
      WHEN 'DADOS_RADAR'.
        CREATE OBJECT ANEXO_OBJ_1 TYPE CL_GOS_MANAGER.

        IF WA_SAIDA_ZSDT0160-ANTIG EQ ABAP_TRUE.
          VL_IP_MODE = 'R'.
        ELSE.
          VL_IP_MODE = 'E'.
        ENDIF.

        IF WA_SAIDA_ZSDT0160-DADOS_RADAR EQ '@1F@'.
          VL_IP_SERVICE = 'PCATTA_CREA'.
        ELSE.
          VL_IP_SERVICE = 'VIEW_ATTA'.
        ENDIF.

        WA_BOR-OBJKEY = |RD{ WA_SAIDA_ZSDT0160-KUNNR }|.
        WA_BOR-OBJTYPE = 'ZSDR0076'.

        ANEXO_OBJ_1->SET_RW_MODE( IP_MODE = VL_IP_MODE ).

        ANEXO_OBJ_1->START_SERVICE_DIRECT(
          EXPORTING
            IP_SERVICE         = VL_IP_SERVICE
            IS_OBJECT          = WA_BOR
          EXCEPTIONS
            NO_OBJECT          = 1
            OBJECT_INVALID     = 2
            EXECUTION_FAILED   = 3
            OTHERS             = 4 ).

        COMMIT WORK.

        "Contando o número de anexos p/ atualizar ícone
        VL_OBJ_KEY = |RD{ WA_SAIDA_ZSDT0160-KUNNR }|.

        CALL FUNCTION 'BDS_GOS_CONNECTIONS_GET'
          EXPORTING
            CLASSNAME          = 'ZSDR0076'
            OBJKEY             = VL_OBJ_KEY
            CLIENT             = SY-MANDT
          TABLES
            GOS_CONNECTIONS    = ANEXOS
          EXCEPTIONS
            NO_OBJECTS_FOUND   = 1
            INTERNAL_ERROR     = 2
            INTERNAL_GOS_ERROR = 3
            OTHERS             = 4.

        DESCRIBE TABLE ANEXOS LINES VL_LINES.

        IF VL_LINES NE 0.
          WA_SAIDA_ZSDT0160-DADOS_RADAR = '@1E@'.
        ELSE.
          WA_SAIDA_ZSDT0160-DADOS_RADAR = '@1F@'.
        ENDIF.

        MODIFY IT_SAIDA_ZSDT0160 FROM WA_SAIDA_ZSDT0160 INDEX ES_ROW_NO-ROW_ID TRANSPORTING DADOS_RADAR .
        CLEAR: WA_BOR, VL_OBJ_KEY, VL_LINES, ANEXOS.


        CALL METHOD CTL_ALV2->REFRESH_TABLE_DISPLAY.
      WHEN 'PROCURACOES'.
        CREATE OBJECT ANEXO_OBJ_1 TYPE CL_GOS_MANAGER.

        IF WA_SAIDA_ZSDT0160-ANTIG EQ ABAP_TRUE.
          VL_IP_MODE = 'R'.
        ELSE.
          VL_IP_MODE = 'E'.
        ENDIF.

        IF WA_SAIDA_ZSDT0160-PROCURACOES EQ '@1F@'.
          VL_IP_SERVICE = 'PCATTA_CREA'.
        ELSE.
          VL_IP_SERVICE = 'VIEW_ATTA'.
        ENDIF.

        WA_BOR-OBJKEY = |DC{ WA_SAIDA_ZSDT0160-KUNNR }|.
        WA_BOR-OBJTYPE = 'ZSDR0076'.

        ANEXO_OBJ_1->SET_RW_MODE( IP_MODE = VL_IP_MODE ).

        ANEXO_OBJ_1->START_SERVICE_DIRECT(
          EXPORTING
            IP_SERVICE         = VL_IP_SERVICE
            IS_OBJECT          = WA_BOR
          EXCEPTIONS
            NO_OBJECT          = 1
            OBJECT_INVALID     = 2
            EXECUTION_FAILED   = 3
            OTHERS             = 4 ).

        COMMIT WORK.

        "Contando o número de anexos p/ atualizar ícone
        VL_OBJ_KEY = |DC{ WA_SAIDA_ZSDT0160-KUNNR }|.

        CALL FUNCTION 'BDS_GOS_CONNECTIONS_GET'
          EXPORTING
            CLASSNAME          = 'ZSDR0076'
            OBJKEY             = VL_OBJ_KEY
            CLIENT             = SY-MANDT
          TABLES
            GOS_CONNECTIONS    = ANEXOS
          EXCEPTIONS
            NO_OBJECTS_FOUND   = 1
            INTERNAL_ERROR     = 2
            INTERNAL_GOS_ERROR = 3
            OTHERS             = 4.

        DESCRIBE TABLE ANEXOS LINES VL_LINES.

        IF VL_LINES NE 0.
          WA_SAIDA_ZSDT0160-PROCURACOES = '@1E@'.
        ELSE.
          WA_SAIDA_ZSDT0160-PROCURACOES = '@1F@'.
        ENDIF.

        MODIFY IT_SAIDA_ZSDT0160 FROM WA_SAIDA_ZSDT0160 INDEX ES_ROW_NO-ROW_ID TRANSPORTING PROCURACOES .
        CLEAR: WA_BOR, VL_OBJ_KEY, VL_LINES, ANEXOS.


        CALL METHOD CTL_ALV2->REFRESH_TABLE_DISPLAY.
      WHEN OTHERS.
    ENDCASE.


  ENDMETHOD.

ENDCLASS.

************************************************************************
* SELECTION SCREEN
************************************************************************
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
PARAMETERS: P_CONTR RADIOBUTTON GROUP G1 USER-COMMAND MUDA_TELA DEFAULT 'X',
            P_TRANC RADIOBUTTON GROUP G1,
            P_DOC   RADIOBUTTON GROUP G1.
SELECTION-SCREEN END OF BLOCK B1.

SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-002.
SELECT-OPTIONS: S_KUNNR FOR KNA1-KUNNR          MODIF ID M1,
                S_LIFNR FOR LFA1-LIFNR          MODIF ID M1,
                S_DATAC FOR KNA1-ERDAT          MODIF ID M1,
                S_DTREC FOR ZSDT0148-DATA_RECEB MODIF ID M2,
                S_DTPAG FOR ZSDT0148-DATA_PGTO  MODIF ID M2.
SELECTION-SCREEN END OF BLOCK B2.

SELECTION-SCREEN BEGIN OF BLOCK B3 WITH FRAME TITLE TEXT-046.
SELECT-OPTIONS: D_KUNNR FOR KNA1-KUNNR MODIF ID M3.
SELECTION-SCREEN END OF BLOCK B3.


************************************************************************
* AT SELECTION-SCREEN OUTPUT.
************************************************************************
AT SELECTION-SCREEN OUTPUT.
  PERFORM MODIFICA_TELA.
************************************************************************
* START OF SELECTION
************************************************************************
START-OF-SELECTION.

  PERFORM SELECIONA_DADOS.
  PERFORM MANIPULA_DADOS.

  IF P_DOC IS INITIAL.
    CALL SCREEN 5000.
  ELSE.
    CALL SCREEN 5002.
  ENDIF.


*&---------------------------------------------------------------------*
*&      Form  SELECIONA_CONTRATOS
*&---------------------------------------------------------------------*
FORM SELECIONA_DADOS.

  IF P_CONTR EQ ABAP_TRUE.

    SELECT *
      FROM ZSDT0147
      INTO CORRESPONDING FIELDS OF TABLE IT_SAIDA_ZSDT0147
      WHERE KUNNR      IN S_KUNNR
        AND CORRETOR   IN S_LIFNR
        AND DATA_ATUAL IN S_DATAC
        AND STATUS     NE 'C'.

    IF IT_SAIDA_ZSDT0147 IS NOT INITIAL.

      SELECT *
        FROM ZSDT0148
        INTO CORRESPONDING FIELDS OF TABLE IT_SAIDA_ZSDT0148
        FOR ALL ENTRIES IN IT_SAIDA_ZSDT0147
        WHERE STATUS   NE 'C'
          AND NRO_CONT EQ IT_SAIDA_ZSDT0147-NRO_CONT.

    ENDIF.

  ELSEIF P_TRANC EQ ABAP_TRUE.

    SELECT *
      FROM ZSDT0147
      INTO CORRESPONDING FIELDS OF TABLE IT_SAIDA_ZSDT0147
      WHERE KUNNR      IN S_KUNNR
        AND CORRETOR   IN S_LIFNR
        AND STATUS     NE 'C'.

    IF IT_SAIDA_ZSDT0147 IS NOT INITIAL.

      SELECT *
            FROM ZSDT0148
            INTO CORRESPONDING FIELDS OF TABLE IT_SAIDA_ZSDT0148
            FOR ALL ENTRIES IN IT_SAIDA_ZSDT0147
            WHERE STATUS     NE 'C'
              AND DATA_ATUAL IN S_DATAC
              AND DATA_RECEB IN S_DTREC
              AND DATA_PGTO  IN S_DTPAG
              AND NRO_CONT   EQ IT_SAIDA_ZSDT0147-NRO_CONT.



    ENDIF.

  ELSEIF P_DOC EQ ABAP_TRUE.

    SELECT *
      FROM ZSDT0160
      INTO CORRESPONDING FIELDS OF TABLE IT_SAIDA_ZSDT0160
      WHERE KUNNR IN D_KUNNR.

    SELECT KUNNR NAME1
      FROM KNA1
      INTO CORRESPONDING FIELDS OF TABLE IT_KNA1
      FOR ALL ENTRIES IN IT_SAIDA_ZSDT0160
      WHERE KUNNR EQ IT_SAIDA_ZSDT0160-KUNNR.

  ENDIF.


  IF IT_SAIDA_ZSDT0147 IS NOT INITIAL.

    SELECT *
      FROM KNA1
      INTO TABLE IT_KNA1
      FOR ALL ENTRIES IN IT_SAIDA_ZSDT0147
      WHERE KUNNR EQ IT_SAIDA_ZSDT0147-KUNNR.

    SELECT *
      FROM LFA1
      INTO TABLE IT_LFA1
      FOR ALL ENTRIES IN IT_SAIDA_ZSDT0147
      WHERE LIFNR EQ IT_SAIDA_ZSDT0147-CORRETOR.

  ENDIF.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  STATUS_5000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_5000 OUTPUT.

  IF P_TRANC IS NOT INITIAL.
    SET PF-STATUS 'STATUS5002'.
  ELSE.
    SET PF-STATUS 'STATUS5000'.
  ENDIF.


  IF P_CONTR EQ ABAP_TRUE.
    SET TITLEBAR 'T0001'.
  ELSEIF P_TRANC EQ ABAP_TRUE.
    SET TITLEBAR 'T0002'.
*  ELSEIF P_DOC EQ ABAP_TRUE.
*    SET TITLEBAR 'T0004'.
*    PERFORM BLOQUEIA_LINHAS.
*    CLEAR G_CUSTOM_CONTAINER.
  ENDIF.

  IF G_CUSTOM_CONTAINER IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER5000'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    IF SY-SUBRC <> 0.
      MESSAGE A000(TREE_CONTROL_MSG).
    ENDIF.

    CREATE OBJECT CTL_ALV1
      EXPORTING
        I_PARENT = G_CUSTOM_CONTAINER.

    GS_LAYOUT-CWIDTH_OPT = 'X'.
    GS_LAYOUT-SEL_MODE   = 'A'.
    GS_LAYOUT-STYLEFNAME = 'CELLSTYLES'.
    GS_LAYOUT-INFO_FNAME = 'COR'.

    CLEAR IT_FIELDCATALOG.
    PERFORM FILL_IT_FIELDCATALOG TABLES IT_FIELDCATALOG USING P_CONTR P_TRANC P_DOC.
    PERFORM EXCLUIR_BOTOES CHANGING IT_EXCLUDE.

    IF P_CONTR EQ ABAP_TRUE.

      SET HANDLER:
            LCL_EVENT_HANDLER=>TOOLBAR_ZSDT0147               FOR CTL_ALV1,
            LCL_EVENT_HANDLER=>USER_COMMAND_ZSDT0147          FOR CTL_ALV1,
            LCL_EVENT_HANDLER=>DATA_CHANGED_FINISHED_ZSDT0147 FOR CTL_ALV1.

      CALL METHOD CTL_ALV1->SET_TABLE_FOR_FIRST_DISPLAY
        EXPORTING
          IS_LAYOUT            = GS_LAYOUT
          I_SAVE               = 'A'
          IT_TOOLBAR_EXCLUDING = IT_EXCLUDE
        CHANGING
          IT_FIELDCATALOG      = IT_FIELDCATALOG
          IT_OUTTAB            = IT_SAIDA_ZSDT0147.

    ELSEIF P_TRANC EQ ABAP_TRUE.

      PERFORM REGISTRAR_F4.

      SET HANDLER:
            LCL_EVENT_HANDLER=>TOOLBAR_ZSDT0148               FOR CTL_ALV1,
            LCL_EVENT_HANDLER=>USER_COMMAND_ZSDT0148          FOR CTL_ALV1,
            LCL_EVENT_HANDLER=>ON_F4                          FOR CTL_ALV1,
            LCL_EVENT_HANDLER=>DATA_CHANGED_FINISHED_ZSDT0148 FOR CTL_ALV1,
            LCL_EVENT_HANDLER=>HANDLE_HOTSPOT_CLICK           FOR CTL_ALV1.

      CALL METHOD CTL_ALV1->SET_TABLE_FOR_FIRST_DISPLAY
        EXPORTING
          IS_LAYOUT            = GS_LAYOUT
          I_SAVE               = 'A'
          IT_TOOLBAR_EXCLUDING = IT_EXCLUDE
        CHANGING
          IT_FIELDCATALOG      = IT_FIELDCATALOG
          IT_OUTTAB            = IT_SAIDA_ZSDT0148.

*    ELSEIF P_DOC EQ ABAP_TRUE.
*
*      PERFORM BUSCA_INFO_DOCS.
*
*
*
*      CASE SY-UCOMM.
*        WHEN 'DOCUMENTOS'.
*          SET HANDLER:
*          LCL_EVENT_HANDLER=>USER_COMMAND_ZSDT0160          FOR CTL_ALV1,
*          LCL_EVENT_HANDLER=>DATA_CHANGED_FINISHED_ZSDT0160 FOR CTL_ALV1,
*          LCL_EVENT_HANDLER=>HANDLE_HOTSPOT_CLICK           FOR CTL_ALV1,
*          LCL_EVENT_HANDLER=>HANDLE_BUTTON_CLICK_ZSDT0160   FOR CTL_ALV1.
*        WHEN OTHERS.
*          SET HANDLER:
*          LCL_EVENT_HANDLER=>TOOLBAR_ZSDT0160               FOR CTL_ALV1,
*          LCL_EVENT_HANDLER=>USER_COMMAND_ZSDT0160          FOR CTL_ALV1,
*          LCL_EVENT_HANDLER=>DATA_CHANGED_FINISHED_ZSDT0160 FOR CTL_ALV1,
*          LCL_EVENT_HANDLER=>HANDLE_HOTSPOT_CLICK           FOR CTL_ALV1,
*          LCL_EVENT_HANDLER=>HANDLE_BUTTON_CLICK_ZSDT0160   FOR CTL_ALV1.
*      ENDCASE.
*
*
*
*      CALL METHOD CTL_ALV1->SET_TABLE_FOR_FIRST_DISPLAY
*        EXPORTING
*          IS_LAYOUT            = GS_LAYOUT
*          I_SAVE               = 'A'
*          IT_TOOLBAR_EXCLUDING = IT_EXCLUDE
*        CHANGING
*          IT_FIELDCATALOG      = IT_FIELDCATALOG
*          IT_OUTTAB            = IT_SAIDA_ZSDT0160.

    ENDIF.

    CALL METHOD CTL_ALV1->SET_READY_FOR_INPUT
      EXPORTING
        I_READY_FOR_INPUT = 1.

    CALL METHOD CTL_ALV1->REGISTER_EDIT_EVENT  "PARA REGISTRAR EVENTO NA ALV
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED
      EXCEPTIONS
        ERROR      = 1
        OTHERS     = 2.

    CALL METHOD CTL_ALV1->REFRESH_TABLE_DISPLAY.

  ELSE.

    CALL METHOD CTL_ALV1->REFRESH_TABLE_DISPLAY.

  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_5000_EXIT  INPUT
*&---------------------------------------------------------------------*
MODULE USER_COMMAND_5000_EXIT INPUT.
*  DATA:  VL_TRANCHE_DOC    TYPE C.
*  IF VL_TRANCHE_DOC IS NOT INITIAL.
  P_TRANC = 'X'.
  CLEAR P_DOC.
*    CLEAR: G_CUSTOM_CONTAINER, CTL_ALV1.
*  ENDIF.

  LEAVE TO SCREEN 0.




ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG
*&---------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG  TABLES   P_IT_FIELDCATALOG STRUCTURE LVC_S_FCAT
                           USING    VALUE(P_P_CONTR)
                                    VALUE(P_P_TRANC)
                                    VALUE(P_P_DOC).

  DATA: WA_FIELDCATALOG TYPE LVC_S_FCAT.

  IF P_P_CONTR IS NOT INITIAL.

    PERFORM COMPLETA_TABELA_CATALOG TABLES P_IT_FIELDCATALOG USING:
          01 'NRO_CONT'         'ZSDT0147'  ' '         ' '        ' '                ' '  'X'  'C'  ' '  ' '  'Contrato Nr.',
          02 'KUNNR'            'ZSDT0147'  ' '         'KNA1'     'KUNNR'            ' '  'X'  ' '  ' '  'X'  'Cód. Cliente',
          03 'NAME1'            ' '         'NAME1_GP'  ' '        ' '                ' '  'X'  ' '  ' '  ' '  'Descrição Cliente',
          04 'CORRETOR'         'ZSDT0147'  ' '         'LFA1'     'LIFNR'            ' '  'X'  ' '  ' '  'X'  'Cód. Corretor',
          05 'NAME2'            ' '         'NAME1_GP'  ' '        ' '                ' '  'X'  ' '  ' '  ' '  'Descrição Corretor',
          06 'VLR_CONT'         'ZSDT0147'  ' '         'ZSDT0147' 'VLR_CONT'                ' '  'X'  ' '  ' '  ' '  'Valor Total',
          07 'WAERK'            'ZSDT0147'  'WAERS'     'T001'     'WAERS'            ' '  'X'  ' '  ' '  'X'  'Moeda',
          08 'PERC_PREMIO'      'ZSDT0147'  ' '         'ZSDT0147' 'PERC_PREMIO'      ' '  'X'  ' '  ' '  ' '  '% Prêmio',
          09 'PERC_CORRET'      'ZSDT0147'  ' '         'ZSDT0147' 'PERC_CORRET'      ' '  'X'  ' '  ' '  ' '  '% Corretagem',
          10 'DT_LMTE_FINANC'   'ZSDT0147'  'RRSELDATE' 'ZSDT0147' 'DATA_ATUAL'                ' '  'X'  ' '  ' '  ' '  'Data Limite',
          11 'VLR_TOT_TRANCHES' ' '         'DMBTR'     ' '        ' '                ' '  'X'  ' '  ' '  ' '  'Total Tranches',
          12 'SALDO'            ' '         'DMBTR'     ' '        ' '                ' '  'X'  ' '  ' '  ' '  'Saldo Contrato',
          13 'USNAM'            'ZSDT0147'  ' '         ' '        ' '                ' '  'X'  ' '  ' '  ' '  'Usuário Cadastro',
          12 'DATA_ATUAL'       'ZSDT0147'  ' '         ' '        ' '                ' '  'X'  ' '  ' '  ' '  'Data Cadastro',
          13 'HORA_ATUAL'       'ZSDT0147'  ' '         ' '        ' '                ' '  'X'  ' '  ' '  ' '  'Hora Cadastro'.

  ELSEIF P_P_TRANC IS NOT INITIAL.

    PERFORM COMPLETA_TABELA_CATALOG TABLES P_IT_FIELDCATALOG USING:
          01 'NRO_CONT'        'ZSDT0148'  'NRO_CONT'   'ZSDT0148'    ' '                 ' '  'X'  ' '  ' '  'X'  'Contrato Nr.',
          02 'NRO_TRANC'       'ZSDT0148'  ' '          ' '           ' '                 ' '  'X'  ' '  ' '  ' '  'Tranche Nr.',
          03 'KUNNR'           'KNA1'      ' '          ' '           ' '                 ' '  'X'  ' '  ' '  ' '  'Cód. Cliente',
          04 'NAME1'           ' '         'NAME1_GP'   ' '           ' '                 ' '  'X'  ' '  ' '  ' '  'Descrição Cliente',
          05 'NRO_SOL_OV'      'ZSDT0148'  ' '          ' '           ' '                 'X'  'X'  ' '  ' '  ' '  'Sol. OV',
          06 'CORRETOR'        'LFA1'      ' '          ' '           ' '                 ' '  'X'  ' '  ' '  ' '  'Cód. Corretor',
          07 'NAME2'           ' '         'NAME1_GP'   ' '           ' '                 ' '  'X'  ' '  ' '  ' '  'Descrição Corretor',
          08 'WAERK'           ' '         'WAERS'      ' '           ' '                 ' '  'X'  ' '  ' '  ' '  'Moeda',
          08 'DATA_RECEB'      'ZSDT0148'  'RRSELDATE'  'ZSDT0148'    'DATA_RECEB'        ' '  'X'  ' '  ' '  ' '  'Data Receb.',
          09 'DATA_PGTO'       'ZSDT0148'  'RRSELDATE'  'ZSDT0148'    'DATA_RECEB'        ' '  'X'  ' '  ' '  ' '  'Data Pgto.',
          10 'VLR_TRCHE'       'ZSDT0148'  ' '          'ZSDT0148'    'VLR_TRCHE'         ' '  'X'  ' '  ' '  ' '  'Valor FOB Perf.',
          11 'PTAX'            'ZSDT0148'  ' '          'ZSDT0148'    'PTAX'              ' '  'X'  ' '  ' '  ' '  'PTAX',
          12 'VLR_TRCHE_BRL'   'ZSDT0148'  ' '          'ZSDT0148'    'VLR_TRCHE_BRL'     ' '  'X'  ' '  ' '  ' '  'BRL FOB Perf.',
          13 'MES_LIMITE'      'ZSDT0148'  ' '          'ZSDT0148'    'MES_LIMITE'        ' '  'X'  ' '  ' '  ' '  'Mês Lim. Embarque',
          14 'ANO_LIMITE'      'ZSDT0148'  ' '          'ZSDT0148'    'ANO_LIMITE'        ' '  'X'  ' '  ' '  ' '  'Ano Lim. Embarque',
          15 'PERC_ALLIN'      'ZSDT0148'  ' '          ' '           ' '                 ' '  'X'  ' '  ' '  ' '  'Prêmio (all in) %',
          16 'VLR_ALLIN'       'ZSDT0148'  ' '          'ZSDT0148'    'VLR_ALLIN'         ' '  'X'  ' '  ' '  ' '  'Valor Prêmio (all in)',
          17 'PERC_COR'        ' '         ' '          ' '           ' '                 ' '  'X'  ' '  ' '  ' '  'Corretagem (%)',
          18 'VLR_CRTGEM'      'ZSDT0148'  ' '          'ZSDT0148'    'VLR_CRTGEM'        ' '  'X'  ' '  ' '  ' '  'Corretagem',
          19 'VLR_CRTGEM_BRL'  'ZSDT0148'  ' '          'ZSDT0148'    'VLR_CRTGEM_BRL'    ' '  'X'  ' '  ' '  ' '  'Corretagem (R$)',
          20 'PERC_PRE'        ' '         ' '          ' '           ' '                 ' '  'X'  ' '  ' '  ' '  'Prêmio Líquido (%)',
          21 'VLR_PMIO'        'ZSDT0148'  ' '          'ZSDT0148'    'VLR_PMIO'          ' '  'X'  ' '  ' '  ' '  'Prêmio Líquido',
          22 'VLR_PMIO_BRL'    'ZSDT0148'  ' '          'ZSDT0148'    'VLR_PMIO_BRL'      ' '  'X'  ' '  ' '  ' '  'Prêmio Líquido (R$)',
          23 'USNAM'           'ZSDT0054'  ' '          ' '           ' '                 ' '  'X'  ' '  ' '  ' '  'Usuário Cadastro',
          24 'DATA_ATUAL'      'ZSDT0053'  ' '          'ZSDT0148'    'DATA_ATUAL'        ' '  'X'  ' '  ' '  ' '  'Data Cadastro',
          25 'HORA_ATUAL'      'ZSDT0053'  ' '          'ZSDT0148'    'HORA_ATUAL'        ' '  'X'  ' '  ' '  ' '  'Hora Cadastro'.

  ELSEIF P_P_DOC IS NOT INITIAL.

    PERFORM COMPLETA_TABELA_CATALOG TABLES P_IT_FIELDCATALOG USING:
          01 'KUNNR'           'ZSDT0160'  'KUNNR'      'ZSDT0160'    'KUNNR'             ' '  'X'  ' '  ' '  'X'  'Cód. Cliente',
          02 'NAME1'           ''          ' '          ' '           ' '                 ' '  'X'  ' '  ' '  ' '  'Descrição Cliente',
          03 'PROCURACOES'     ''          ' '          ' '           ' '                 ' '  'X'  ' '  ' '  ' '  'Procurações',
          04 'DADOS_RADAR'     ''          ' '          ' '           ' '                 ' '  'X'  ' '  ' '  ' '  'Dados do RADAR'.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  COMPLETA_TABELA_CATALOG
*&---------------------------------------------------------------------*
FORM COMPLETA_TABELA_CATALOG  TABLES P_IT_FIELDACATALOG STRUCTURE LVC_S_FCAT
                               USING VALUE(P_COLNUM)
                                     VALUE(P_FIELDNAME)
                                     VALUE(P_TABNAME)
                                     VALUE(P_DOMNAME)
                                     VALUE(P_REFTABLE)
                                     VALUE(P_REFFIELD)
                                     VALUE(P_HOTSPOT)
                                     VALUE(P_OPT)
                                     VALUE(P_JUST)
                                     VALUE(P_EDIT)
                                     VALUE(P_F4)
                                     VALUE(P_HEADER).

  DATA: WA_FIELDCATALOG TYPE LVC_S_FCAT.

  WA_FIELDCATALOG-COL_POS    = P_COLNUM.
  WA_FIELDCATALOG-FIELDNAME  = P_FIELDNAME.
  WA_FIELDCATALOG-TABNAME    = P_TABNAME.
  WA_FIELDCATALOG-COLTEXT    = P_HEADER.
  WA_FIELDCATALOG-REF_TABLE  = P_REFTABLE.
  WA_FIELDCATALOG-REF_FIELD  = P_REFFIELD.
  WA_FIELDCATALOG-DOMNAME    = P_DOMNAME.
  WA_FIELDCATALOG-HOTSPOT    = P_HOTSPOT.
  WA_FIELDCATALOG-COL_OPT    = P_OPT.
  WA_FIELDCATALOG-JUST       = P_JUST.
  WA_FIELDCATALOG-EDIT       = P_EDIT.
  WA_FIELDCATALOG-F4AVAILABL = P_F4.
  APPEND WA_FIELDCATALOG TO P_IT_FIELDACATALOG.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_CELLTAB
*&---------------------------------------------------------------------*
FORM FILL_CELLTAB USING VALUE(P_MODE) TYPE CHAR1
                        VALUE(P_FIELDNAME) TYPE LVC_FNAME
                     CHANGING PT_CELLTAB TYPE LVC_T_STYL  .

  DATA: LS_CELLTAB TYPE LVC_S_STYL,
        L_MODE     TYPE RAW4.

  IF P_MODE EQ 'D'. "Desbloquear Edição
    L_MODE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
  ELSEIF P_MODE EQ 'B'. "Bloquear Edição
    L_MODE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
  ENDIF.

  IF P_FIELDNAME EQ 'PROCURACOES' OR P_FIELDNAME EQ 'DADOS_RADAR'.
    LS_CELLTAB-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_BUTTON.
  ELSE.
    LS_CELLTAB-STYLE = L_MODE.
  ENDIF.

  LS_CELLTAB-FIELDNAME = P_FIELDNAME.

  INSERT LS_CELLTAB INTO TABLE PT_CELLTAB.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  MODIFICAR_REGISTRO_ZSDT0147
*&---------------------------------------------------------------------*
FORM MODIFICAR_REGISTRO_ZSDT0147  USING P_WA_SAIDA_ZSDT0147 TYPE TY_SAIDA_ZSDT0147.

  DATA: WA_ZSDT0147 TYPE ZSDT0147.

  IF P_WA_SAIDA_ZSDT0147-TIPO EQ 'D'.

    UPDATE ZSDT0147 SET STATUS   = 'C'
                        USNAM_ES = SY-UNAME
                        DATA_ES  = SY-DATUM
                        HORA_ES  = SY-UZEIT
                  WHERE NRO_CONT = P_WA_SAIDA_ZSDT0147-NRO_CONT.

  ELSEIF P_WA_SAIDA_ZSDT0147-TIPO EQ 'I'.

    WA_ZSDT0147-NRO_CONT         = P_WA_SAIDA_ZSDT0147-NRO_CONT.
    WA_ZSDT0147-KUNNR            = P_WA_SAIDA_ZSDT0147-KUNNR.
    WA_ZSDT0147-CORRETOR         = P_WA_SAIDA_ZSDT0147-CORRETOR.
    WA_ZSDT0147-VLR_CONT         = P_WA_SAIDA_ZSDT0147-VLR_CONT.
    WA_ZSDT0147-WAERK            = P_WA_SAIDA_ZSDT0147-WAERK.
    WA_ZSDT0147-PERC_PREMIO      = P_WA_SAIDA_ZSDT0147-PERC_PREMIO.
    WA_ZSDT0147-PERC_CORRET      = P_WA_SAIDA_ZSDT0147-PERC_CORRET.
    WA_ZSDT0147-DT_LMTE_FINANC   = P_WA_SAIDA_ZSDT0147-DT_LMTE_FINANC.
    WA_ZSDT0147-STATUS           = P_WA_SAIDA_ZSDT0147-STATUS.
    WA_ZSDT0147-USNAM            = SY-UNAME.
    WA_ZSDT0147-DATA_ATUAL       = SY-DATUM.
    WA_ZSDT0147-HORA_ATUAL       = SY-UZEIT.

    INSERT ZSDT0147 FROM WA_ZSDT0147.
    CLEAR: WA_ZSDT0147.

  ELSEIF P_WA_SAIDA_ZSDT0147-TIPO EQ 'E'.

    UPDATE ZSDT0147 SET KUNNR            = P_WA_SAIDA_ZSDT0147-KUNNR
                        CORRETOR         = P_WA_SAIDA_ZSDT0147-CORRETOR
                        VLR_CONT         = P_WA_SAIDA_ZSDT0147-VLR_CONT
                        WAERK            = P_WA_SAIDA_ZSDT0147-WAERK
                        PERC_PREMIO      = P_WA_SAIDA_ZSDT0147-PERC_PREMIO
                        PERC_CORRET      = P_WA_SAIDA_ZSDT0147-PERC_CORRET
                        DT_LMTE_FINANC   = P_WA_SAIDA_ZSDT0147-DT_LMTE_FINANC
                        STATUS           = P_WA_SAIDA_ZSDT0147-STATUS
                  WHERE NRO_CONT         = P_WA_SAIDA_ZSDT0147-NRO_CONT.

  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  MODIFICAR_REGISTRO_ZSDT0160
*&---------------------------------------------------------------------*
FORM MODIFICAR_REGISTRO_ZSDT0160 USING P_WA_SAIDA_ZSDT0160 TYPE TY_SAIDA_ZSDT0160.

  DATA: WA_ZSDT0160 TYPE ZSDT0160.

  IF P_WA_SAIDA_ZSDT0160-TIPO EQ 'D'.
*
*    UPDATE ZSDT0160 SET "STATUS   = 'C'
*                        USNAM      = SY-UNAME
*                        DATA_ATUAL = SY-DATUM
*                        HORA_ATUAL = SY-UZEIT
*                  WHERE KUNNR    = P_WA_SAIDA_ZSDT0160-KUNNR.
*
    DELETE FROM ZSDT0160 WHERE KUNNR EQ P_WA_SAIDA_ZSDT0160-KUNNR.

  ELSEIF P_WA_SAIDA_ZSDT0160-TIPO EQ 'I'.

    WA_ZSDT0160-KUNNR            = P_WA_SAIDA_ZSDT0160-KUNNR.
*    WA_ZSDT0160-CH_DC            = 'TESTE'.
*    WA_ZSDT0160-CH_RD            = 'TESTE'.
    WA_ZSDT0160-USNAM            = SY-UNAME.
    WA_ZSDT0160-DATA_ATUAL       = SY-DATUM.
    WA_ZSDT0160-HORA_ATUAL       = SY-UZEIT.

    INSERT ZSDT0160 FROM WA_ZSDT0160.
    CLEAR: WA_ZSDT0160.

  ELSEIF P_WA_SAIDA_ZSDT0160-TIPO EQ 'E'.

    UPDATE ZSDT0160 SET KUNNR          = P_WA_SAIDA_ZSDT0160-KUNNR
*                        CH_DC          = 'TESTE'
*                        CH_RD          = 'TESTE'
                        USNAM          = SY-UNAME
                        DATA_ATUAL     = SY-DATUM
                        HORA_ATUAL     = SY-UZEIT

                  WHERE KUNNR         = P_WA_SAIDA_ZSDT0160-KUNNR.

  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  MANIPULA_DADOS
*&---------------------------------------------------------------------*
FORM MANIPULA_DADOS .

  DATA: WA_SAIDA_ZSDT0147     TYPE TY_SAIDA_ZSDT0147,
        WA_SAIDA_ZSDT0148     TYPE TY_SAIDA_ZSDT0148,
        WA_SAIDA_ZSDT0160     TYPE TY_SAIDA_ZSDT0160,
        IT_SAIDA_ZSDT0148_AUX TYPE STANDARD TABLE OF TY_SAIDA_ZSDT0148,
        WA_KNA1               TYPE KNA1,
        WA_LFA1               TYPE LFA1,
        VLR_TOTAL_TRANCHES    TYPE ZSDT0148-VLR_TRCHE,
        VL_COUNT              TYPE I.

  IF P_CONTR EQ ABAP_TRUE.

    LOOP AT IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147.

      CLEAR: VLR_TOTAL_TRANCHES.

      VL_COUNT = VL_COUNT + 1.

      READ TABLE IT_KNA1 INTO WA_KNA1 WITH KEY KUNNR = WA_SAIDA_ZSDT0147-KUNNR.
      IF SY-SUBRC IS INITIAL.
        WA_SAIDA_ZSDT0147-NAME1 = WA_KNA1-NAME1.
      ENDIF.

      READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_SAIDA_ZSDT0147-CORRETOR.
      IF SY-SUBRC IS INITIAL.
        WA_SAIDA_ZSDT0147-NAME2 = WA_LFA1-NAME1.
      ENDIF.

      LOOP AT IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 WHERE NRO_CONT = WA_SAIDA_ZSDT0147-NRO_CONT.
        VLR_TOTAL_TRANCHES = VLR_TOTAL_TRANCHES + WA_SAIDA_ZSDT0148-VLR_TRCHE.
      ENDLOOP.

      WA_SAIDA_ZSDT0147-VLR_TOT_TRANCHES = VLR_TOTAL_TRANCHES.
      WA_SAIDA_ZSDT0147-SALDO = WA_SAIDA_ZSDT0147-VLR_CONT - WA_SAIDA_ZSDT0147-VLR_TOT_TRANCHES.

      PERFORM ZENQUEUE_ZSDT0147 CHANGING WA_SAIDA_ZSDT0147.

      MODIFY IT_SAIDA_ZSDT0147 FROM WA_SAIDA_ZSDT0147 INDEX VL_COUNT.

    ENDLOOP.

    SORT IT_SAIDA_ZSDT0147 BY NRO_CONT ASCENDING.

  ELSEIF P_TRANC EQ ABAP_TRUE.

    LOOP AT IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148.

      VL_COUNT = VL_COUNT + 1.

      READ TABLE IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147 WITH KEY NRO_CONT = WA_SAIDA_ZSDT0148-NRO_CONT.
      IF SY-SUBRC IS INITIAL.

        WA_SAIDA_ZSDT0148-PERC_COR = WA_SAIDA_ZSDT0147-PERC_CORRET.
        WA_SAIDA_ZSDT0148-PERC_PRE = WA_SAIDA_ZSDT0147-PERC_PREMIO.
        WA_SAIDA_ZSDT0148-KUNNR    = WA_SAIDA_ZSDT0147-KUNNR.
        WA_SAIDA_ZSDT0148-CORRETOR = WA_SAIDA_ZSDT0147-CORRETOR.
        WA_SAIDA_ZSDT0148-WAERK    = WA_SAIDA_ZSDT0147-WAERK.

        READ TABLE IT_KNA1 INTO WA_KNA1 WITH KEY KUNNR = WA_SAIDA_ZSDT0148-KUNNR.
        IF SY-SUBRC IS INITIAL.
          WA_SAIDA_ZSDT0148-NAME1 = WA_KNA1-NAME1.
        ENDIF.

        READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_SAIDA_ZSDT0148-CORRETOR.
        IF SY-SUBRC IS INITIAL.
          WA_SAIDA_ZSDT0148-NAME2 = WA_LFA1-NAME1.
        ENDIF.

      ENDIF.

      MODIFY IT_SAIDA_ZSDT0148 FROM WA_SAIDA_ZSDT0148 INDEX VL_COUNT.

    ENDLOOP.

    SORT IT_SAIDA_ZSDT0148 BY NRO_TRANC ASCENDING.

    IT_SAIDA_ZSDT0148_AUX = IT_SAIDA_ZSDT0148.
    SORT IT_SAIDA_ZSDT0148_AUX BY NRO_CONT ASCENDING.
    DELETE ADJACENT DUPLICATES FROM IT_SAIDA_ZSDT0148_AUX COMPARING NRO_CONT.

    LOOP AT IT_SAIDA_ZSDT0148_AUX INTO WA_SAIDA_ZSDT0148.
      PERFORM ZENQUEUE_ZSDT0148 CHANGING WA_SAIDA_ZSDT0148.
    ENDLOOP.

    SORT IT_SAIDA_ZSDT0148_AUX BY NRO_TRANC ASCENDING.

  ELSEIF P_DOC EQ ABAP_TRUE.

    LOOP AT IT_SAIDA_ZSDT0160 INTO WA_SAIDA_ZSDT0160.

      READ TABLE IT_KNA1 INTO WA_KNA1 WITH KEY KUNNR = WA_SAIDA_ZSDT0160-KUNNR.

      WA_SAIDA_ZSDT0160-NAME1 = WA_KNA1-NAME1.
      MOVE ABAP_TRUE TO WA_SAIDA_ZSDT0160-ANTIG.
      MODIFY IT_SAIDA_ZSDT0160 FROM WA_SAIDA_ZSDT0160." INDEX SY-TABIX.

    ENDLOOP.

*      PERFORM BUSCA_INFO_DOCS.

  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  REFRESH_CTL_ALV1
*&---------------------------------------------------------------------*
FORM REFRESH_CTL_ALV1.

  DATA: WA_STABLE         TYPE LVC_S_STBL.

  WA_STABLE-ROW = ABAP_TRUE.
  WA_STABLE-COL = ABAP_TRUE.

  CALL METHOD CTL_ALV1->GET_FRONTEND_LAYOUT
    IMPORTING
      ES_LAYOUT = GS_LAYOUT.

  GS_LAYOUT-CWIDTH_OPT = ABAP_TRUE.

  CALL METHOD CTL_ALV1->SET_FRONTEND_LAYOUT
    EXPORTING
      IS_LAYOUT = GS_LAYOUT.

  CALL METHOD CTL_ALV1->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE = WA_STABLE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  REFRESH_CTL_ALV2
*&---------------------------------------------------------------------*
FORM REFRESH_CTL_ALV2.

  DATA: WA_STABLE         TYPE LVC_S_STBL.

  WA_STABLE-ROW = ABAP_TRUE.
  WA_STABLE-COL = ABAP_TRUE.

  CALL METHOD CTL_ALV2->GET_FRONTEND_LAYOUT
    IMPORTING
      ES_LAYOUT = GS_LAYOUT.

  GS_LAYOUT-CWIDTH_OPT = ABAP_TRUE.

  CALL METHOD CTL_ALV2->SET_FRONTEND_LAYOUT
    EXPORTING
      IS_LAYOUT = GS_LAYOUT.

  CALL METHOD CTL_ALV2->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE = WA_STABLE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_5000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_5000 INPUT.

  DATA: WA_SAIDA_ZSDT0148 TYPE TY_SAIDA_ZSDT0148,
        IT_SELECTED_ROWS  TYPE LVC_T_ROW,
        WA_SELECTED_ROWS  TYPE LVC_S_ROW,
        VL_LINES          TYPE I.

  CASE SY-UCOMM.
    WHEN 'SAVE'.

      PERFORM SALVA.

    WHEN 'DOCUMENTOS'.
      CLEAR: P_CONTR, P_TRANC, IT_SAIDA_ZSDT0160, D_KUNNR[]. "IT_FIELDCATALOG. "G_CUSTOM_CONTAINER,
      FREE: IT_SAIDA_ZSDT0160, D_KUNNR[].
      P_DOC = 'X'.
*      VL_TRANCHE_DOC = 'X'.

      CALL METHOD CTL_ALV1->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = IT_SELECTED_ROWS.

      DESCRIBE TABLE IT_SELECTED_ROWS LINES VL_LINES.

      IF VL_LINES EQ 0.
        MESSAGE TEXT-034 TYPE 'I' DISPLAY LIKE 'E'.
        P_TRANC = 'X'.
        CLEAR P_DOC.
        EXIT.
      ELSE.
        READ TABLE IT_SELECTED_ROWS INTO WA_SELECTED_ROWS INDEX 1.
        READ TABLE IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 INDEX WA_SELECTED_ROWS-INDEX.

        D_KUNNR-SIGN = 'I'.
        D_KUNNR-OPTION = 'EQ'.
        D_KUNNR-LOW = WA_SAIDA_ZSDT0148-KUNNR.
        APPEND D_KUNNR.

        PERFORM SELECIONA_DADOS.
        PERFORM MANIPULA_DADOS.
        CLEAR: IT_FIELDCATALOG, IT_SELECTED_ROWS. "G_CUSTOM_CONTAINER,
        FREE: IT_FIELDCATALOG, IT_SELECTED_ROWS.
*        CLEAR: GS_LAYOUT, IT_SELECTED_ROWS.
*        FREE: G_CUSTOM_CONTAINER.
        CALL SCREEN 5002.

      ENDIF.

*    WHEN OTHERS.
      "DO NOTHING
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  SALVA
*&---------------------------------------------------------------------*
FORM SALVA.

  DATA: WA_SAIDA_ZSDT0147 TYPE TY_SAIDA_ZSDT0147,
        WA_SAIDA_ZSDT0148 TYPE TY_SAIDA_ZSDT0148,
        WA_SAIDA_ZSDT0160 TYPE TY_SAIDA_ZSDT0160,
        VL_CHECK          TYPE CHAR1,
        VL_N_UTIL         TYPE CHAR1.

  IF P_CONTR EQ ABAP_TRUE.
    "Check se há algum campo obrigatório não preenchido
    LOOP AT IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147 WHERE TIPO NE SPACE.
      IF WA_SAIDA_ZSDT0147-KUNNR          IS INITIAL OR
*         WA_SAIDA_ZSDT0147-CORRETOR       IS INITIAL OR
         WA_SAIDA_ZSDT0147-VLR_CONT       IS INITIAL OR
         WA_SAIDA_ZSDT0147-WAERK          IS INITIAL OR
         WA_SAIDA_ZSDT0147-PERC_PREMIO    IS INITIAL OR
*         WA_SAIDA_ZSDT0147-PERC_CORRET    IS INITIAL OR
         WA_SAIDA_ZSDT0147-DT_LMTE_FINANC IS INITIAL.
        MESSAGE TEXT-010 TYPE 'S' DISPLAY LIKE 'E'.
        MOVE ABAP_TRUE TO VL_CHECK.
        EXIT.
      ENDIF.
    ENDLOOP.

    "Check se a edição do valor total do contrato fica menor que o total de tranches ativas que ele possui
    LOOP AT IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147 WHERE TIPO EQ 'E'.
      IF WA_SAIDA_ZSDT0147-VLR_TOT_TRANCHES GT WA_SAIDA_ZSDT0147-VLR_CONT.
        MESSAGE TEXT-022 TYPE 'S' DISPLAY LIKE 'E'.
        MOVE ABAP_TRUE TO VL_CHECK.
      ENDIF.
    ENDLOOP.

    IF VL_CHECK IS INITIAL.

      LOOP AT IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147.
        IF WA_SAIDA_ZSDT0147-TIPO EQ 'I' OR WA_SAIDA_ZSDT0147-TIPO EQ 'E'.
          PERFORM MODIFICAR_REGISTRO_ZSDT0147 USING WA_SAIDA_ZSDT0147.
        ENDIF.
      ENDLOOP.

      MESSAGE TEXT-011 TYPE 'S'.

      PERFORM DESBLOQUEIA_ZSDT0147.
      PERFORM SELECIONA_DADOS.
      PERFORM MANIPULA_DADOS.
      PERFORM REFRESH_CTL_ALV1.

    ENDIF.

  ELSEIF P_TRANC EQ ABAP_TRUE.

    "Check se há algum campo obrigatório não preenchido
    LOOP AT IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 WHERE TIPO NE SPACE.
      IF WA_SAIDA_ZSDT0148-NRO_CONT     IS INITIAL OR
         WA_SAIDA_ZSDT0148-DATA_RECEB   IS INITIAL OR
         WA_SAIDA_ZSDT0148-DATA_PGTO    IS INITIAL OR
         WA_SAIDA_ZSDT0148-VLR_TRCHE    IS INITIAL OR
*         WA_SAIDA_ZSDT0148-PTAX         IS INITIAL OR
         WA_SAIDA_ZSDT0148-MES_LIMITE   IS INITIAL OR
         WA_SAIDA_ZSDT0148-ANO_LIMITE   IS INITIAL.
        MESSAGE TEXT-010 TYPE 'S' DISPLAY LIKE 'E'.
        MOVE ABAP_TRUE TO VL_CHECK.
        EXIT.
      ENDIF.
    ENDLOOP.

    IF VL_CHECK IS INITIAL.

      LOOP AT IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 WHERE TIPO NE SPACE..

        CLEAR: VL_N_UTIL.

        PERFORM CHECK_DIA_UTIL USING WA_SAIDA_ZSDT0148-DATA_RECEB
                          CHANGING VL_N_UTIL.

        IF VL_N_UTIL IS NOT INITIAL.
          MESSAGE TEXT-042 TYPE 'S' DISPLAY LIKE 'E'.
          MOVE ABAP_TRUE TO VL_CHECK.
          EXIT.
        ELSE.

          PERFORM CHECK_DIA_UTIL USING WA_SAIDA_ZSDT0148-DATA_PGTO
                            CHANGING VL_N_UTIL.

          IF VL_N_UTIL IS NOT INITIAL.
            MESSAGE TEXT-043 TYPE 'S' DISPLAY LIKE 'E'.
            MOVE ABAP_TRUE TO VL_CHECK.
            EXIT.
          ENDIF.

        ENDIF.

      ENDLOOP.

    ENDIF.

    IF VL_CHECK IS INITIAL.
      PERFORM CHECK_ZSDT0148_TOT_CTR CHANGING VL_CHECK.
    ENDIF.

    "Checa se há a inclusão de alguma tranche que está com seu contrato bloqueado por outro usuário
    IF VL_CHECK IS INITIAL.
      PERFORM CHECK_ZSDT0148_CTR_BLOQ CHANGING VL_CHECK.
    ENDIF.

    IF VL_CHECK IS INITIAL.

      LOOP AT IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148.
        IF WA_SAIDA_ZSDT0148-TIPO EQ 'I' OR WA_SAIDA_ZSDT0148-TIPO EQ 'E'.
          PERFORM MODIFICAR_REGISTRO_ZSDT0148 USING WA_SAIDA_ZSDT0148.
        ENDIF.
      ENDLOOP.

      MESSAGE TEXT-011 TYPE 'S'.

      PERFORM DESBLOQUEIA_ZSDT0148.
      PERFORM SELECIONA_DADOS.
      PERFORM MANIPULA_DADOS.
      PERFORM REFRESH_CTL_ALV1.

    ENDIF.

  ELSEIF P_DOC EQ ABAP_TRUE.

    "Check se há algum campo obrigatório não preenchido
    LOOP AT IT_SAIDA_ZSDT0160 INTO WA_SAIDA_ZSDT0160 WHERE TIPO NE SPACE.
      IF WA_SAIDA_ZSDT0160-KUNNR   IS INITIAL OR
         WA_SAIDA_ZSDT0160-NAME1   IS INITIAL.

        MESSAGE TEXT-010 TYPE 'S' DISPLAY LIKE 'E'.
        MOVE ABAP_TRUE TO VL_CHECK.
        EXIT.
      ENDIF.
    ENDLOOP.

    IF VL_CHECK IS INITIAL.
      LOOP AT IT_SAIDA_ZSDT0160 INTO WA_SAIDA_ZSDT0160.
        IF WA_SAIDA_ZSDT0160-TIPO EQ 'I' OR WA_SAIDA_ZSDT0160-TIPO EQ 'E'.
          PERFORM MODIFICAR_REGISTRO_ZSDT0160 USING WA_SAIDA_ZSDT0160.
        ENDIF.
      ENDLOOP.

      MESSAGE TEXT-011 TYPE 'S'.

      FREE IT_SAIDA_ZSDT0160.

      PERFORM DESBLOQUEIA_ZSDT0160.
      PERFORM SELECIONA_DADOS.
      PERFORM MANIPULA_DADOS.
      PERFORM BUSCA_INFO_DOCS.
      PERFORM REFRESH_CTL_ALV2.

    ENDIF.

  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  EXCLUIR_BOTOES
*&---------------------------------------------------------------------*
FORM EXCLUIR_BOTOES  CHANGING P_IT_EXCLUDE TYPE UI_FUNCTIONS.

  DATA: LS_EXCLUDE TYPE UI_FUNC.

  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
  CLEAR LS_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
  CLEAR LS_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
  CLEAR LS_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
  CLEAR LS_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
  CLEAR LS_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
  CLEAR LS_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
  CLEAR LS_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
  CLEAR LS_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
  CLEAR LS_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_PRINT.
  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
  CLEAR LS_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_REFRESH.
  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
  CLEAR LS_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_CHECK.
  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
  CLEAR LS_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_GRAPH.
  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
  CLEAR LS_EXCLUDE.
  LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_INFO.
  APPEND LS_EXCLUDE TO P_IT_EXCLUDE.
  CLEAR LS_EXCLUDE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  REGISTRAR_F4
*&---------------------------------------------------------------------*
FORM REGISTRAR_F4.

  DATA: GS_F4      TYPE LVC_S_F4,
        GT_F4_5820 TYPE LVC_T_F4.

  GS_F4-FIELDNAME  = 'NRO_CONT'.
  GS_F4-REGISTER   = 'X'.
  GS_F4-GETBEFORE  = SPACE.
  GS_F4-CHNGEAFTER = SPACE.
  APPEND GS_F4 TO GT_F4_5820.

  CALL METHOD CTL_ALV1->REGISTER_F4_FOR_FIELDS
    EXPORTING
      IT_F4 = GT_F4_5820.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  MODIFICAR_REGISTRO_ZSDT0148
*&---------------------------------------------------------------------*
FORM MODIFICAR_REGISTRO_ZSDT0148  USING P_WA_SAIDA_ZSDT0148 TYPE TY_SAIDA_ZSDT0148.

  DATA: WA_ZSDT0148 TYPE ZSDT0148.

  IF P_WA_SAIDA_ZSDT0148-TIPO EQ 'D'.

    UPDATE ZSDT0148 SET STATUS    = 'C'
                        USNAM_ES  = SY-UNAME
                        DATA_ES   = SY-DATUM
                        HORA_ES   = SY-UZEIT
                  WHERE NRO_CONT  = P_WA_SAIDA_ZSDT0148-NRO_CONT
                    AND NRO_TRANC = P_WA_SAIDA_ZSDT0148-NRO_TRANC.

  ELSEIF P_WA_SAIDA_ZSDT0148-TIPO EQ 'I'.

    WA_ZSDT0148-NRO_CONT            = P_WA_SAIDA_ZSDT0148-NRO_CONT.
    WA_ZSDT0148-NRO_TRANC           = P_WA_SAIDA_ZSDT0148-NRO_TRANC.
    WA_ZSDT0148-NRO_SOL_OV          = P_WA_SAIDA_ZSDT0148-NRO_SOL_OV.
    WA_ZSDT0148-DATA_RECEB          = P_WA_SAIDA_ZSDT0148-DATA_RECEB.
    WA_ZSDT0148-DATA_PGTO           = P_WA_SAIDA_ZSDT0148-DATA_PGTO.
    WA_ZSDT0148-VLR_TRCHE           = P_WA_SAIDA_ZSDT0148-VLR_TRCHE.
    WA_ZSDT0148-PTAX                = P_WA_SAIDA_ZSDT0148-PTAX.
    WA_ZSDT0148-VLR_TRCHE_BRL       = P_WA_SAIDA_ZSDT0148-VLR_TRCHE_BRL.
    WA_ZSDT0148-MES_LIMITE          = P_WA_SAIDA_ZSDT0148-MES_LIMITE.
    WA_ZSDT0148-ANO_LIMITE          = P_WA_SAIDA_ZSDT0148-ANO_LIMITE.
    WA_ZSDT0148-PERC_ALLIN          = P_WA_SAIDA_ZSDT0148-PERC_PRE + P_WA_SAIDA_ZSDT0148-PERC_COR.
    WA_ZSDT0148-VLR_ALLIN           = P_WA_SAIDA_ZSDT0148-VLR_ALLIN.
    WA_ZSDT0148-VLR_CRTGEM          = P_WA_SAIDA_ZSDT0148-VLR_CRTGEM.
    WA_ZSDT0148-VLR_CRTGEM_BRL      = P_WA_SAIDA_ZSDT0148-VLR_CRTGEM_BRL.
    WA_ZSDT0148-VLR_PMIO            = P_WA_SAIDA_ZSDT0148-VLR_PMIO.
    WA_ZSDT0148-VLR_PMIO_BRL        = P_WA_SAIDA_ZSDT0148-VLR_PMIO_BRL.
    WA_ZSDT0148-USNAM               = SY-UNAME.
    WA_ZSDT0148-DATA_ATUAL          = SY-DATUM.
    WA_ZSDT0148-HORA_ATUAL          = SY-UZEIT.

    INSERT ZSDT0148 FROM WA_ZSDT0148.
    CLEAR: WA_ZSDT0148.

  ELSEIF P_WA_SAIDA_ZSDT0148-TIPO EQ 'E'.

    UPDATE ZSDT0148 SET DATA_RECEB      = P_WA_SAIDA_ZSDT0148-DATA_RECEB
                        DATA_PGTO       = P_WA_SAIDA_ZSDT0148-DATA_PGTO
                        VLR_TRCHE       = P_WA_SAIDA_ZSDT0148-VLR_TRCHE
                        PTAX            = P_WA_SAIDA_ZSDT0148-PTAX
                        VLR_TRCHE_BRL   = P_WA_SAIDA_ZSDT0148-VLR_TRCHE_BRL
                        MES_LIMITE      = P_WA_SAIDA_ZSDT0148-MES_LIMITE
                        ANO_LIMITE      = P_WA_SAIDA_ZSDT0148-ANO_LIMITE
                        VLR_ALLIN       = P_WA_SAIDA_ZSDT0148-VLR_ALLIN
                        VLR_CRTGEM      = P_WA_SAIDA_ZSDT0148-VLR_CRTGEM
                        VLR_CRTGEM_BRL  = P_WA_SAIDA_ZSDT0148-VLR_CRTGEM_BRL
                        VLR_PMIO        = P_WA_SAIDA_ZSDT0148-VLR_PMIO
                        VLR_PMIO_BRL    = P_WA_SAIDA_ZSDT0148-VLR_PMIO_BRL
                  WHERE NRO_CONT        = P_WA_SAIDA_ZSDT0148-NRO_CONT
                    AND NRO_TRANC       = P_WA_SAIDA_ZSDT0148-NRO_TRANC.

  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CHECK_ZSDT0148_TOT_CTR
*&---------------------------------------------------------------------*
FORM CHECK_ZSDT0148_TOT_CTR CHANGING VL_CHECK TYPE CHAR1.

  "/ Checa se o volume que está sendo inserido de tranches, somado com o que já existe na tabela
  "/ ZSDT0148 não excede o que está determinado para o seu respectivo Contrato na tabela ZDST0147

  DATA: IT_SAIDA_ZSDT0148_AUX TYPE STANDARD TABLE OF TY_SAIDA_ZSDT0148,
        WA_SAIDA_ZSDT0148_AUX TYPE TY_SAIDA_ZSDT0148,
        WA_SAIDA_ZSDT0148     TYPE TY_SAIDA_ZSDT0148,
        IT_ZSDT0147           TYPE STANDARD TABLE OF ZSDT0147,
        WA_ZSDT0147           TYPE ZSDT0147,
        IT_ZSDT0148           TYPE STANDARD TABLE OF ZSDT0148,
        WA_ZSDT0148           TYPE ZSDT0148,
        VL_VAL_CONT           TYPE ZSDT0147-VLR_CONT,
        VL_VAL_TRANC          TYPE ZSDT0148-VLR_TRCHE,
        VL_VAL_NOV_TRANC      TYPE ZSDT0148-VLR_TRCHE.

  IT_SAIDA_ZSDT0148_AUX = IT_SAIDA_ZSDT0148.

  DELETE IT_SAIDA_ZSDT0148_AUX WHERE TIPO EQ SPACE.
  SORT IT_SAIDA_ZSDT0148_AUX BY NRO_CONT NRO_TRANC.
  DELETE ADJACENT DUPLICATES FROM IT_SAIDA_ZSDT0148_AUX COMPARING NRO_CONT NRO_TRANC.

  SELECT *
    FROM ZSDT0147
    INTO TABLE IT_ZSDT0147
    FOR ALL ENTRIES IN IT_SAIDA_ZSDT0148_AUX
    WHERE NRO_CONT EQ IT_SAIDA_ZSDT0148_AUX-NRO_CONT
      AND STATUS   NE 'C'.

  SELECT *
    FROM ZSDT0148
    INTO TABLE IT_ZSDT0148
    FOR ALL ENTRIES IN IT_SAIDA_ZSDT0148_AUX
    WHERE NRO_CONT  EQ IT_SAIDA_ZSDT0148_AUX-NRO_CONT
      AND NRO_TRANC NE IT_SAIDA_ZSDT0148_AUX-NRO_TRANC
      AND STATUS    NE 'C'.

  LOOP AT IT_SAIDA_ZSDT0148_AUX INTO WA_SAIDA_ZSDT0148_AUX.

    CLEAR: VL_VAL_CONT, VL_VAL_TRANC, VL_VAL_NOV_TRANC.

    READ TABLE IT_ZSDT0147 INTO WA_ZSDT0147 WITH KEY NRO_CONT = WA_SAIDA_ZSDT0148_AUX-NRO_CONT.
    IF SY-SUBRC IS INITIAL.
      VL_VAL_CONT = WA_ZSDT0147-VLR_CONT.
    ENDIF.

    LOOP AT IT_ZSDT0148 INTO WA_ZSDT0148 WHERE NRO_CONT = WA_SAIDA_ZSDT0148_AUX-NRO_CONT.
      VL_VAL_TRANC = VL_VAL_TRANC + WA_ZSDT0148-VLR_TRCHE.
    ENDLOOP.

    LOOP AT IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 WHERE TIPO     NE SPACE
                                                       AND NRO_CONT EQ WA_SAIDA_ZSDT0148_AUX-NRO_CONT.
      VL_VAL_NOV_TRANC = VL_VAL_NOV_TRANC + WA_SAIDA_ZSDT0148-VLR_TRCHE.
    ENDLOOP.

    IF VL_VAL_TRANC + VL_VAL_NOV_TRANC GT VL_VAL_CONT.
      MOVE ABAP_TRUE TO VL_CHECK.
      MESSAGE TEXT-023 TYPE 'S' DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ZSDT0062
*&---------------------------------------------------------------------*
FORM ZSDT0062 USING P_WA_SAIDA_ZSDT0148 TYPE TY_SAIDA_ZSDT0148.

  DATA: IT_ZSDT0058     TYPE STANDARD TABLE OF ZSDT0058,
        IT_ZSDT0059     TYPE STANDARD TABLE OF ZSDT0059,
        IT_ZSDT0070     TYPE STANDARD TABLE OF ZSDT0070,
        IT_ZSDT0056     TYPE STANDARD TABLE OF ZSDT0056,
        WA_ZSDT0059     TYPE ZSDT0059,
        WA_ZSDT0059_AUX TYPE ZSDT0059,
        WA_ZSDT0070     TYPE ZSDT0070,
        WA_ZSDT0058     TYPE ZSDT0058,
        WA_ZSDT0056     TYPE ZSDT0056,
        WA_ZSDT0051     TYPE ZSDT0051,
        WA_ZSDT0052     TYPE ZSDT0052,
        WA_ZSDT0054     TYPE ZSDT0054,
        WA_ZSDT0063     TYPE ZSDT0063,
        VL_DATA         TYPE DATS,
        VL_WAERK        TYPE WAERS.

  DATA: LS_GOOD_A TYPE LVC_S_MODI,
        LS_GOOD_B TYPE LVC_S_MODI.

  SELECT *
    FROM ZSDT0058
    INTO TABLE IT_ZSDT0058
    WHERE ESQ_CALC EQ '12'.

  IF IT_ZSDT0058 IS NOT INITIAL.

    SELECT *
      FROM ZSDT0056
      INTO TABLE IT_ZSDT0056
      FOR ALL ENTRIES IN IT_ZSDT0058
      WHERE COD_FP EQ IT_ZSDT0058-COD_FP.

    SELECT *
      FROM ZSDT0070
      INTO TABLE IT_ZSDT0070
      FOR ALL ENTRIES IN IT_ZSDT0058
      WHERE COD_FP EQ IT_ZSDT0058-COD_FP
        AND FIELD  EQ IT_ZSDT0058-FIELD.

  ENDIF.

  SORT IT_ZSDT0058 BY NIVEL ASCENDING.

  CALL FUNCTION 'NUMBER_GET_NEXT'
    EXPORTING
      NR_RANGE_NR = '01'
      OBJECT      = 'ZNR_SOL_OV'
    IMPORTING
      NUMBER      = WA_ZSDT0051-NRO_SOL_OV.

  WA_ZSDT0051-TP_VENDA  = '12'.
  WA_ZSDT0051-DTDE_LOGIST	= SY-DATUM.

  IF STRLEN( P_WA_SAIDA_ZSDT0148-MES_LIMITE ) = 1.
    CONCATENATE P_WA_SAIDA_ZSDT0148-ANO_LIMITE '0' P_WA_SAIDA_ZSDT0148-MES_LIMITE '01' INTO VL_DATA.
  ELSE.
    CONCATENATE P_WA_SAIDA_ZSDT0148-ANO_LIMITE P_WA_SAIDA_ZSDT0148-MES_LIMITE '01' INTO VL_DATA.
  ENDIF.

  CALL FUNCTION 'RP_LAST_DAY_OF_MONTHS'
    EXPORTING
      DAY_IN            = VL_DATA
    IMPORTING
      LAST_DAY_OF_MONTH = WA_ZSDT0051-DTATE_LOGIST
    EXCEPTIONS
      DAY_IN_NO_DATE    = 1
      OTHERS            = 2.

  IF SY-SUBRC NE 0.
    CLEAR: WA_ZSDT0051-DTATE_LOGIST.
  ENDIF.

  "Cabeçalho da Solicitação
  WA_ZSDT0051-STATUS            = ' '.
  WA_ZSDT0051-AUART	            = 'ZPER'.
  WA_ZSDT0051-VKORG	            = '0001'.
  WA_ZSDT0051-VTWEG	            = '10'.
  WA_ZSDT0051-SPART	            = '01'.
  WA_ZSDT0051-VKBUR	            = '0101'.
  WA_ZSDT0051-KUNNR	            = P_WA_SAIDA_ZSDT0148-KUNNR.
  WA_ZSDT0051-CORRETO           = P_WA_SAIDA_ZSDT0148-CORRETOR.
  WA_ZSDT0051-BSTKD	            = P_WA_SAIDA_ZSDT0148-NRO_CONT.
  WA_ZSDT0051-INCO1	            = 'FOB'.
  WA_ZSDT0051-INCO2	            = 'FOB'.
  WA_ZSDT0051-VKAUS	            = 'I'.
  WA_ZSDT0051-WAERK	            = P_WA_SAIDA_ZSDT0148-WAERK.
  WA_ZSDT0051-PARAM_ESPEC	      = 'P'.
  WA_ZSDT0051-DATA_VENDA        = SY-DATUM.
  WA_ZSDT0051-USNAM	            = SY-UNAME.
  WA_ZSDT0051-DATA_ATUAL        = SY-DATUM.
  WA_ZSDT0051-HORA_ATUAL        = SY-UZEIT.
  WA_ZSDT0051-RISCO_SACADO      = 'N'.
  INSERT ZSDT0051 FROM WA_ZSDT0051.

  "Condição de Pagamento
  WA_ZSDT0052-NRO_SOL_OV        = WA_ZSDT0051-NRO_SOL_OV.
  WA_ZSDT0052-PGTO_ANT          = 'N'.
  WA_ZSDT0052-ZLSCH	            = 'U'.
  WA_ZSDT0052-ZTERM	            = '0001'.
  WA_ZSDT0052-VALDT	            = P_WA_SAIDA_ZSDT0148-DATA_RECEB.
  WA_ZSDT0052-HBKID	            = 'BBRA'.
  WA_ZSDT0052-USNAM	            = SY-UNAME.
  WA_ZSDT0052-DATA_ATUAL        = SY-DATUM.
  WA_ZSDT0052-HORA_ATUAL        = SY-UZEIT.
  INSERT ZSDT0052 FROM WA_ZSDT0052.

  "Pagamento Antecipado
  WA_ZSDT0054-NRO_SOL_OV        = WA_ZSDT0051-NRO_SOL_OV.
  WA_ZSDT0054-VALDT	            = P_WA_SAIDA_ZSDT0148-DATA_RECEB.
  WA_ZSDT0054-DMBTR	            = P_WA_SAIDA_ZSDT0148-VLR_TRCHE + P_WA_SAIDA_ZSDT0148-VLR_ALLIN.
  WA_ZSDT0054-KURSF	            = P_WA_SAIDA_ZSDT0148-PTAX.
  WA_ZSDT0054-VLR_REAL          = ( P_WA_SAIDA_ZSDT0148-VLR_TRCHE + P_WA_SAIDA_ZSDT0148-VLR_ALLIN ) * P_WA_SAIDA_ZSDT0148-PTAX.
  WA_ZSDT0054-USNAM             = SY-UNAME.
  WA_ZSDT0054-DATA_ATUAL        = SY-DATUM.
  WA_ZSDT0054-HORA_ATUAL        = SY-UZEIT.
  INSERT ZSDT0054 FROM WA_ZSDT0054.

  "Adiantamento Exterior
  WA_ZSDT0063-NRO_SOL_OV        = WA_ZSDT0051-NRO_SOL_OV.
  WA_ZSDT0063-VALDT	            = P_WA_SAIDA_ZSDT0148-DATA_PGTO.
  WA_ZSDT0063-DMBTR	            = P_WA_SAIDA_ZSDT0148-VLR_TRCHE.
  WA_ZSDT0063-WAERS             = P_WA_SAIDA_ZSDT0148-WAERK.
  WA_ZSDT0063-BUKRS	            = '0004'.
  WA_ZSDT0063-USNAM	            = SY-UNAME.
  WA_ZSDT0063-DATA_ATUAL        = SY-DATUM.
  WA_ZSDT0063-HORA_ATUAL        = SY-UZEIT.
  INSERT ZSDT0063 FROM WA_ZSDT0063.

  "Preço
  LOOP AT IT_ZSDT0058 INTO WA_ZSDT0058.

    CLEAR: LS_GOOD_A, LS_GOOD_B.

    WA_ZSDT0059-NRO_SOL_OV = WA_ZSDT0051-NRO_SOL_OV.
    WA_ZSDT0059-NIVEL      = WA_ZSDT0058-NIVEL.
    WA_ZSDT0059-COD_FP     = WA_ZSDT0058-COD_FP.
    WA_ZSDT0059-FIELD      = WA_ZSDT0058-FIELD.

    READ TABLE IT_ZSDT0056 INTO WA_ZSDT0056 WITH KEY COD_FP = WA_ZSDT0058-COD_FP.
    IF SY-SUBRC IS INITIAL.
      WA_ZSDT0059-BEZEI      = WA_ZSDT0056-BEZEI.
      WA_ZSDT0059-WAERS      = WA_ZSDT0056-WAERS.
    ENDIF.

    READ TABLE IT_ZSDT0070 INTO WA_ZSDT0070 WITH KEY COD_FP = WA_ZSDT0058-COD_FP
                                                     FIELD  = WA_ZSDT0058-FIELD.
    IF SY-SUBRC IS INITIAL.
      WA_ZSDT0059-TIPO_CALC     = WA_ZSDT0070-TIPO_CALC.
      WA_ZSDT0059-C_DECIMAIS    = WA_ZSDT0070-C_DECIMAIS.
      WA_ZSDT0059-PRECO         = WA_ZSDT0070-PRECO.
      IF WA_ZSDT0070-COD_FP EQ '32'.
        LS_GOOD_A-VALUE         = P_WA_SAIDA_ZSDT0148-VLR_TRCHE.
        LS_GOOD_B-VALUE         = P_WA_SAIDA_ZSDT0148-VLR_TRCHE.
      ELSEIF WA_ZSDT0070-COD_FP EQ '3'.
        LS_GOOD_A-VALUE         = P_WA_SAIDA_ZSDT0148-PERC_ALLIN.
        LS_GOOD_B-VALUE         = P_WA_SAIDA_ZSDT0148-PERC_ALLIN.
      ELSEIF WA_ZSDT0070-COD_FP EQ '33'.
        LS_GOOD_A-VALUE         = P_WA_SAIDA_ZSDT0148-PERC_COR.
        LS_GOOD_B-VALUE         = P_WA_SAIDA_ZSDT0148-PERC_COR.
      ELSEIF WA_ZSDT0070-COD_FP EQ '10'.
        LS_GOOD_A-VALUE         = P_WA_SAIDA_ZSDT0148-PTAX.
        LS_GOOD_B-VALUE         = P_WA_SAIDA_ZSDT0148-PTAX.
      ELSEIF WA_ZSDT0070-COD_FP EQ '36'.
        LS_GOOD_A-VALUE         = WA_ZSDT0070-VLR_FIXO.
        LS_GOOD_B-VALUE         = WA_ZSDT0070-VLR_FIXO.
      ELSEIF WA_ZSDT0070-COD_FP EQ '34'.
        READ TABLE IT_ZSDT0059 INTO WA_ZSDT0059_AUX WITH KEY COD_FP = '36'.
        IF SY-SUBRC IS INITIAL.
          LS_GOOD_A-VALUE         = WA_ZSDT0058-FORMULA.
          LS_GOOD_B-VALUE         = P_WA_SAIDA_ZSDT0148-VLR_TRCHE + ( P_WA_SAIDA_ZSDT0148-VLR_TRCHE * P_WA_SAIDA_ZSDT0148-PERC_ALLIN ) / WA_ZSDT0059_AUX-FORMULA2.
        ENDIF.
      ELSEIF WA_ZSDT0070-COD_FP EQ '35'.
        READ TABLE IT_ZSDT0059 INTO WA_ZSDT0059_AUX WITH KEY COD_FP = '34'.
        IF SY-SUBRC IS INITIAL.
          LS_GOOD_A-VALUE         = WA_ZSDT0058-FORMULA.
          LS_GOOD_B-VALUE         = WA_ZSDT0059_AUX-FORMULA2 * P_WA_SAIDA_ZSDT0148-PTAX.
        ENDIF.
      ENDIF.

      PERFORM AJUSTA_CASA_DECIMAIS USING WA_ZSDT0070-C_DECIMAIS
                                         WA_ZSDT0070-TIPO_CALC
                                         LS_GOOD_A
                                         LS_GOOD_B
                                CHANGING WA_ZSDT0059-FORMULA
                                         WA_ZSDT0059-FORMULA2.

    ENDIF.

    WA_ZSDT0059-USNAM      = SY-UNAME.
    WA_ZSDT0059-DATA_ATUAL = SY-DATUM.
    WA_ZSDT0059-HORA_ATUAL = SY-UZEIT.
    APPEND WA_ZSDT0059 TO IT_ZSDT0059.
    CLEAR: WA_ZSDT0059.

  ENDLOOP.

  LOOP AT IT_ZSDT0059 INTO WA_ZSDT0059.
    INSERT ZSDT0059 FROM WA_ZSDT0059.
  ENDLOOP.

  UPDATE ZSDT0148 SET NRO_SOL_OV  = WA_ZSDT0051-NRO_SOL_OV
                WHERE NRO_CONT    = P_WA_SAIDA_ZSDT0148-NRO_CONT
                  AND NRO_TRANC   = P_WA_SAIDA_ZSDT0148-NRO_TRANC.

  IF SY-SUBRC IS INITIAL.
    MESSAGE TEXT-011 TYPE 'S'.
  ENDIF.

  PERFORM DESBLOQUEIA_ZSDT0148.
  PERFORM SELECIONA_DADOS.
  PERFORM MANIPULA_DADOS.
  PERFORM REFRESH_CTL_ALV1.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  AJUSTA_CASA_DECIMAIS
*&---------------------------------------------------------------------*
FORM AJUSTA_CASA_DECIMAIS  USING    VALUE(P_CASAS_DECIMAIS) TYPE CHAR1
                                    VALUE(P_TIPO_CALCULO)   TYPE CHAR1
                                          P_LS_GOOD_A       TYPE LVC_S_MODI
                                          P_LS_GOOD_B       TYPE LVC_S_MODI
                           CHANGING P_WA_ZSDT0059_FORMULA  TYPE ZSDT0059-FORMULA
                                    P_WA_ZSDT0059_FORMULA2 TYPE ZSDT0059-FORMULA2.

  DATA: P_2_A(13) TYPE P DECIMALS 2,
        P_2_B(13) TYPE P DECIMALS 2,
        P_5_A(13) TYPE P DECIMALS 5,
        P_5_B(13) TYPE P DECIMALS 5,
        P_4_A(13) TYPE P DECIMALS 4,
        P_4_B(13) TYPE P DECIMALS 4,
        LV_VALUE  TYPE LVC_VALUE.

*  CONDENSE LS_GOOD_A-VALUE NO-GAPS.
  CONDENSE P_LS_GOOD_B-VALUE NO-GAPS.

  IF P_CASAS_DECIMAIS EQ '2'.

    TRY.
        IF P_TIPO_CALCULO NE 'C'.
          CONDENSE P_LS_GOOD_A-VALUE NO-GAPS.
          P_2_A = P_LS_GOOD_A-VALUE.
          WRITE P_2_A TO LV_VALUE.
          P_WA_ZSDT0059_FORMULA  = LV_VALUE.
          CONDENSE P_WA_ZSDT0059_FORMULA NO-GAPS.
        ELSE.
          P_WA_ZSDT0059_FORMULA = P_LS_GOOD_A-VALUE.
        ENDIF.
        P_2_B = P_LS_GOOD_B-VALUE.
        P_WA_ZSDT0059_FORMULA2 = P_2_B.
        CONDENSE P_WA_ZSDT0059_FORMULA2 NO-GAPS.
      CATCH CX_ROOT.
        CLEAR: P_WA_ZSDT0059_FORMULA2, P_WA_ZSDT0059_FORMULA.
    ENDTRY.

  ELSEIF P_CASAS_DECIMAIS EQ '4'.

    TRY.
        IF P_TIPO_CALCULO NE 'C'.
          CONDENSE P_LS_GOOD_A-VALUE NO-GAPS.
          P_4_A = P_LS_GOOD_A-VALUE.
          WRITE P_4_A TO LV_VALUE.
          P_WA_ZSDT0059_FORMULA  = LV_VALUE.
          CONDENSE P_WA_ZSDT0059_FORMULA NO-GAPS.
        ELSE.
          P_WA_ZSDT0059_FORMULA  = P_LS_GOOD_A-VALUE.
        ENDIF.
        P_4_B = P_LS_GOOD_B-VALUE.
        P_WA_ZSDT0059_FORMULA2 = P_4_B.
        CONDENSE P_WA_ZSDT0059_FORMULA2 NO-GAPS.
      CATCH CX_ROOT.
        CLEAR: P_WA_ZSDT0059_FORMULA2, P_WA_ZSDT0059_FORMULA.
    ENDTRY.

  ELSEIF P_CASAS_DECIMAIS EQ '5'.

    TRY.
        IF P_TIPO_CALCULO NE 'C'.
          CONDENSE P_LS_GOOD_A-VALUE NO-GAPS.
          P_5_A = P_LS_GOOD_A-VALUE.
          WRITE P_5_A TO LV_VALUE.
          P_WA_ZSDT0059_FORMULA  = LV_VALUE.
          CONDENSE P_WA_ZSDT0059_FORMULA NO-GAPS.
        ELSE.
          P_WA_ZSDT0059_FORMULA  = P_LS_GOOD_A-VALUE.
        ENDIF.
        P_5_B = P_LS_GOOD_B-VALUE.
        P_WA_ZSDT0059_FORMULA2 = P_5_B.
        CONDENSE P_WA_ZSDT0059_FORMULA2 NO-GAPS.
      CATCH CX_ROOT.
        CLEAR: P_WA_ZSDT0059_FORMULA2, P_WA_ZSDT0059_FORMULA.
    ENDTRY.

  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ZENQUEUE_ZSDT147
*&---------------------------------------------------------------------*
FORM ZENQUEUE_ZSDT0147 CHANGING P_WA_SAIDA_ZSDT0147 TYPE TY_SAIDA_ZSDT0147.



  CALL FUNCTION 'ZENQUEUE_SD_CTR_PERFORMANCE'
    EXPORTING
      CHAVE          = P_WA_SAIDA_ZSDT0147-NRO_CONT
    EXCEPTIONS
      FOREIGN_LOCK   = 1
      SYSTEM_FAILURE = 2
      OTHERS         = 3.

  IF SY-SUBRC IS NOT INITIAL.
    P_WA_SAIDA_ZSDT0147-ENQUEUE = ABAP_TRUE.
    P_WA_SAIDA_ZSDT0147-COR     = 'C610'.
    P_WA_SAIDA_ZSDT0147-SPERR_USER  = SY-MSGV1.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ZENQUEUE_ZSDT148
*&---------------------------------------------------------------------*
FORM ZENQUEUE_ZSDT0148 CHANGING P_WA_SAIDA_ZSDT0148 TYPE TY_SAIDA_ZSDT0148.

  DATA: WA_SAIDA_ZSDT0148 TYPE TY_SAIDA_ZSDT0148.

  CALL FUNCTION 'ZENQUEUE_SD_CTR_PERFORMANCE'
    EXPORTING
      CHAVE          = P_WA_SAIDA_ZSDT0148-NRO_CONT
    EXCEPTIONS
      FOREIGN_LOCK   = 1
      SYSTEM_FAILURE = 2
      OTHERS         = 3.

  IF SY-SUBRC IS NOT INITIAL.
    LOOP AT IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 WHERE NRO_CONT = P_WA_SAIDA_ZSDT0148-NRO_CONT.
      WA_SAIDA_ZSDT0148-ENQUEUE        = ABAP_TRUE.
      WA_SAIDA_ZSDT0148-COR            = 'C610'.
      WA_SAIDA_ZSDT0148-SPERR_USER     = SY-MSGV1.
      MODIFY IT_SAIDA_ZSDT0148 FROM WA_SAIDA_ZSDT0148 INDEX SY-TABIX.
    ENDLOOP.
*    SPERR_USER  = SY-MSGV1.
  ENDIF.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CHECK_ZSDT0148_CTR_BLOQ
*&---------------------------------------------------------------------*
FORM CHECK_ZSDT0148_CTR_BLOQ  CHANGING P_VL_CHECK.

  DATA: WA_SAIDA_ZSDT0148 TYPE TY_SAIDA_ZSDT0148,
        VL_CONT           TYPE I,
        VL_BLOQ           TYPE CHAR1,
        VL_CTR            TYPE ZSDT0147-NRO_CONT,
        VL_USER           TYPE SY-MSGV1.

  LOOP AT IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 WHERE TIPO EQ 'I'.

    READ TABLE IT_SAIDA_ZSDT0148 WITH KEY NRO_CONT = WA_SAIDA_ZSDT0148-NRO_CONT
                                          ENQUEUE  = SPACE
                                          TIPO     = SPACE TRANSPORTING NO FIELDS.
    IF SY-SUBRC IS NOT INITIAL.

      CALL FUNCTION 'ZENQUEUE_SD_CTR_PERFORMANCE'
        EXPORTING
          CHAVE          = WA_SAIDA_ZSDT0148-NRO_CONT
        EXCEPTIONS
          FOREIGN_LOCK   = 1
          SYSTEM_FAILURE = 2
          OTHERS         = 3.

      IF SY-SUBRC IS NOT INITIAL.
        VL_BLOQ = ABAP_TRUE.
        VL_CTR  = WA_SAIDA_ZSDT0148-NRO_CONT.
        VL_USER = SY-MSGV1.
        EXIT.
      ELSE.
        VL_CONT = VL_CONT + 1.
      ENDIF.

    ENDIF.

  ENDLOOP.

  IF VL_BLOQ IS NOT INITIAL.

    LOOP AT IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 WHERE TIPO EQ 'I'.
      READ TABLE IT_SAIDA_ZSDT0148 WITH KEY NRO_CONT = WA_SAIDA_ZSDT0148-NRO_CONT
                                            ENQUEUE  = SPACE
                                            TIPO     = SPACE TRANSPORTING NO FIELDS.
      IF SY-SUBRC IS NOT INITIAL.

        IF VL_CONT NE 0.

          CALL FUNCTION 'ZDENQUEUE_SD_CTR_PERFORMANCE'
            EXPORTING
              CHAVE = WA_SAIDA_ZSDT0148-NRO_CONT.

          VL_CONT = VL_CONT - 1.

        ENDIF.

      ENDIF.

    ENDLOOP.

    P_VL_CHECK = ABAP_TRUE.
*    MESSAGE S000(Z_FI) WITH TEXT-032 VL_CTR DISPLAY LIKE 'E'.

    CONCATENATE  TEXT-032 VL_CTR TEXT-054 VL_USER INTO MSG SEPARATED BY SPACE .
    MESSAGE MSG TYPE 'S' DISPLAY LIKE 'E'.

  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ZDENQUEUE_ZSDT148
*&---------------------------------------------------------------------*
FORM ZDENQUEUE_ZSDT0148 CHANGING P_WA_SAIDA_ZSDT0148 TYPE TY_SAIDA_ZSDT0148.

  CALL FUNCTION 'ZDENQUEUE_SD_CTR_PERFORMANCE'
    EXPORTING
      CHAVE = P_WA_SAIDA_ZSDT0148-NRO_CONT.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ZDENQUEUE_ZSDT147
*&---------------------------------------------------------------------*
FORM ZDENQUEUE_ZSDT0147 CHANGING P_WA_SAIDA_ZSDT0147 TYPE TY_SAIDA_ZSDT0147.

  CALL FUNCTION 'ZDENQUEUE_SD_CTR_PERFORMANCE'
    EXPORTING
      CHAVE = P_WA_SAIDA_ZSDT0147-NRO_CONT.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ZDENQUEUE_ZSDT160
*&---------------------------------------------------------------------*
FORM ZDENQUEUE_ZSDT0160 CHANGING P_WA_SAIDA_ZSDT0160 TYPE TY_SAIDA_ZSDT0160.

  CALL FUNCTION 'ZDENQUEUE_SD_CTR_PERFORMANCE'
    EXPORTING
      CHAVE = P_WA_SAIDA_ZSDT0160-KUNNR.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  DESBLOQUEIA_ZSDT0147
*&---------------------------------------------------------------------*
FORM DESBLOQUEIA_ZSDT0147 .

  DATA: WA_SAIDA_ZSDT0147 TYPE TY_SAIDA_ZSDT0147.

  LOOP AT IT_SAIDA_ZSDT0147 INTO WA_SAIDA_ZSDT0147 WHERE ENQUEUE IS INITIAL.
    PERFORM ZDENQUEUE_ZSDT0147 CHANGING WA_SAIDA_ZSDT0147.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  DESBLOQUEIA_ZSDT0148
*&---------------------------------------------------------------------*
FORM DESBLOQUEIA_ZSDT0148.

  DATA: WA_SAIDA_ZSDT0148 TYPE TY_SAIDA_ZSDT0148.

  LOOP AT IT_SAIDA_ZSDT0148 INTO WA_SAIDA_ZSDT0148 WHERE ENQUEUE IS INITIAL.
    PERFORM ZDENQUEUE_ZSDT0148 CHANGING WA_SAIDA_ZSDT0148.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  DESBLOQUEIA_ZSDT0148
*&---------------------------------------------------------------------*
FORM DESBLOQUEIA_ZSDT0160.

  DATA: WA_SAIDA_ZSDT0160 TYPE TY_SAIDA_ZSDT0160.

  LOOP AT IT_SAIDA_ZSDT0160 INTO WA_SAIDA_ZSDT0160 WHERE ENQUEUE IS INITIAL.
    PERFORM ZDENQUEUE_ZSDT0160 CHANGING WA_SAIDA_ZSDT0160.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ENVIA_BOLETA
*&---------------------------------------------------------------------*
FORM ENVIA_BOLETA  USING    P_WA_SAIDA_ZSDT0148 TYPE TY_SAIDA_ZSDT0148.

  DATA: WA_KNA1               TYPE KNA1,
        WA_LFA1               TYPE LFA1,
        WA_ADRC               TYPE ADRC,
        WA_ADRC_CORRETOR      TYPE ADRC,
        WA_BOLETA             TYPE ZSDS_BOLETA_TRANCHE,
        VL_NAME               TYPE RS38L_FNAM,
        WA_CONTROL_PARAMETERS TYPE SSFCTRLOP,
        OTF_TABLE             TYPE SSFCRESCL,
        IT_ADR6               TYPE STANDARD TABLE OF ADR6,
        IT_ADR6_CORRETOR      TYPE STANDARD TABLE OF ADR6,
        WA_ADR6               TYPE ADR6,
        WA_ADR6_CORRETOR      TYPE ADR6,
        LI_OTF                TYPE TABLE OF ITCOO,
        LV_BIN_FILESIZE       TYPE I,
        LI_PDF_TAB            TYPE TABLE OF TLINE,
        LI_CONTENT_TXT        TYPE SOLI_TAB,
        LW_OTF                TYPE ITCOO,
        LW_CONTENT            TYPE SOLI,
        LI_CONTENT_HEX        TYPE SOLIX_TAB,
        LI_OBJHEAD            TYPE SOLI_TAB,
        LV_TRANSFER_BIN       TYPE SX_BOOLEAN,
        LV_LEN                TYPE SO_OBJ_LEN,
        MAILTO                TYPE AD_SMTPADR,
        SUBJECT               TYPE SO_OBJ_DES,
        MAIN_TEXT             TYPE BCSY_TEXT,
        IT_ZMAIL              TYPE STANDARD TABLE OF ZMAIL,
        WA_ZMAIL              TYPE ZMAIL,
        WA_USR21              TYPE USR21,
        WA_ADRP               TYPE ADRP.

  IF P_WA_SAIDA_ZSDT0148-CORRETOR IS NOT INITIAL.
    SELECT SINGLE *
      FROM LFA1
      INTO WA_LFA1
      WHERE LIFNR EQ P_WA_SAIDA_ZSDT0148-CORRETOR.
  ENDIF.
*  ELSE.
  SELECT SINGLE *
    FROM KNA1
    INTO WA_KNA1
    WHERE KUNNR EQ P_WA_SAIDA_ZSDT0148-KUNNR.

  IF WA_LFA1 IS NOT INITIAL.

    SELECT SINGLE *
      FROM ADRC
      INTO WA_ADRC_CORRETOR
      WHERE ADDRNUMBER EQ WA_LFA1-ADRNR.

    SELECT *
      FROM ADR6
      INTO TABLE IT_ADR6_CORRETOR
      WHERE ADDRNUMBER EQ WA_LFA1-ADRNR.
*
*    IF WA_LFA1-STCD1 IS NOT INITIAL.                   18/04/2018
*      WA_BOLETA-CNPJ        = WA_LFA1-STCD1.
*    ELSEIF WA_LFA1-STCD2 IS NOT INITIAL.
*      WA_BOLETA-CNPJ        = WA_LFA1-STCD2.
*    ENDIF.

  ENDIF.

  SELECT SINGLE *
    FROM ADRC
    INTO WA_ADRC
    WHERE ADDRNUMBER EQ WA_KNA1-ADRNR.

  SELECT *
    FROM ADR6
    INTO TABLE IT_ADR6
    WHERE ADDRNUMBER EQ WA_KNA1-ADRNR.

  IF WA_KNA1-STCD1 IS NOT INITIAL.
    WA_BOLETA-CNPJ        = WA_KNA1-STCD1.
  ELSEIF WA_KNA1-STCD2 IS NOT INITIAL.
    WA_BOLETA-CNPJ        = WA_KNA1-STCD2.
  ENDIF.



  WA_BOLETA-EXPORTADOR    = WA_ADRC-NAME1.
  WA_BOLETA-NRO_TRANC     = P_WA_SAIDA_ZSDT0148-NRO_TRANC.



  WA_BOLETA-IE            = WA_KNA1-STCD3.

  CONCATENATE WA_ADRC-STREET ',' WA_ADRC-HOUSE_NUM1 INTO WA_BOLETA-RUA.
  WA_BOLETA-BAIRRO = WA_ADRC-CITY2.

  WA_BOLETA-CIDADE        = WA_ADRC-CITY1.
  WA_BOLETA-UF            = WA_KNA1-REGIO.
  WA_BOLETA-CEP           = WA_KNA1-PSTLZ.
  WA_BOLETA-DATA_RECEB    = P_WA_SAIDA_ZSDT0148-DATA_RECEB.
  WA_BOLETA-VLR_TRCHE     = P_WA_SAIDA_ZSDT0148-VLR_TRCHE.
  WA_BOLETA-VLR_ALLIN     = P_WA_SAIDA_ZSDT0148-VLR_ALLIN.
  WA_BOLETA-PERC_ALLIN    = P_WA_SAIDA_ZSDT0148-PERC_ALLIN.
  WA_BOLETA-TOTAL         = P_WA_SAIDA_ZSDT0148-VLR_TRCHE + P_WA_SAIDA_ZSDT0148-VLR_ALLIN.
  WA_BOLETA-PTAX          = P_WA_SAIDA_ZSDT0148-PTAX.
  WA_BOLETA-TOTAL_BRL     = P_WA_SAIDA_ZSDT0148-VLR_TRCHE_BRL + P_WA_SAIDA_ZSDT0148-VLR_CRTGEM_BRL + P_WA_SAIDA_ZSDT0148-VLR_PMIO_BRL.

  CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
    EXPORTING
      FORMNAME           = VL_FORMNAME
    IMPORTING
      FM_NAME            = VL_NAME
    EXCEPTIONS
      NO_FORM            = 1
      NO_FUNCTION_MODULE = 2
      OTHERS             = 3.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    EXIT.
  ENDIF.

  WA_CONTROL_PARAMETERS-GETOTF     = 'X'.
  WA_CONTROL_PARAMETERS-NO_DIALOG   = 'X'.

  CALL FUNCTION VL_NAME
    EXPORTING
      CONTROL_PARAMETERS = WA_CONTROL_PARAMETERS
      WA_BOLETA          = WA_BOLETA
    IMPORTING
      JOB_OUTPUT_INFO    = OTF_TABLE
    EXCEPTIONS
      FORMATTING_ERROR   = 1
      INTERNAL_ERROR     = 2
      SEND_ERROR         = 3
      USER_CANCELED      = 4
      OTHERS             = 5.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  REFRESH LI_OTF[].

  LI_OTF[] = OTF_TABLE-OTFDATA[].

  CLEAR : LV_BIN_FILESIZE.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      FORMAT                = 'PDF'
    IMPORTING
      BIN_FILESIZE          = LV_BIN_FILESIZE
    TABLES
      OTF                   = LI_OTF
      LINES                 = LI_PDF_TAB
    EXCEPTIONS
      ERR_MAX_LINEWIDTH     = 1
      ERR_FORMAT            = 2
      ERR_CONV_NOT_POSSIBLE = 3
      ERR_BAD_OTF           = 4
      OTHERS                = 5.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  REFRESH LI_CONTENT_TXT.

  LOOP AT LI_OTF  INTO  LW_OTF.
    CLEAR LW_CONTENT.
    CONCATENATE LW_OTF-TDPRINTCOM LW_OTF-TDPRINTPAR INTO LW_CONTENT.
    APPEND LW_CONTENT TO LI_CONTENT_TXT.
  ENDLOOP.

  REFRESH: LI_CONTENT_HEX, LI_OBJHEAD.
  CLEAR: LV_TRANSFER_BIN, LV_LEN.

  CALL FUNCTION 'SX_OBJECT_CONVERT_OTF_PDF'
    EXPORTING
      FORMAT_SRC      = 'OTF'
      FORMAT_DST      = 'PDF'
    CHANGING
      TRANSFER_BIN    = LV_TRANSFER_BIN
      CONTENT_TXT     = LI_CONTENT_TXT
      CONTENT_BIN     = LI_CONTENT_HEX
      OBJHEAD         = LI_OBJHEAD
      LEN             = LV_LEN
    EXCEPTIONS
      ERR_CONV_FAILED = 1
      OTHERS          = 2.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CLEAR: MAIN_TEXT, SUBJECT, IT_ZMAIL.

  SELECT *
    FROM ZMAIL
    INTO TABLE IT_ZMAIL
    WHERE TCODE EQ 'ZSDT0124'.

  IF IT_ADR6_CORRETOR IS NOT INITIAL.
    LOOP AT IT_ADR6_CORRETOR INTO WA_ADR6_CORRETOR.
      WA_ZMAIL-EMAIL = WA_ADR6_CORRETOR-SMTP_ADDR.
      APPEND WA_ZMAIL TO IT_ZMAIL.
    ENDLOOP.
  ELSE.
    LOOP AT IT_ADR6 INTO WA_ADR6.
      WA_ZMAIL-EMAIL = WA_ADR6-SMTP_ADDR.
      APPEND WA_ZMAIL TO IT_ZMAIL.
    ENDLOOP.
  ENDIF.

  SUBJECT = 'Instruções de pagamento - Performance'.

  SELECT SINGLE *
    FROM USR21
    INTO WA_USR21
   WHERE BNAME EQ SY-UNAME.

  SELECT SINGLE *
    FROM ADRP
    INTO WA_ADRP
    WHERE PERSNUMBER EQ WA_USR21-PERSNUMBER.

  VL_NAME = WA_ADRP-NAME_TEXT.

  TRY.
*     -------- create persistent send request ------------------------
      SEND_REQUEST = CL_BCS=>CREATE_PERSISTENT( ).
*     -------- create and set document with attachment ---------------
*     create document object from internal table with text
      APPEND TEXT-035 TO MAIN_TEXT.                         "#EC NOTEXT
      APPEND ' '      TO MAIN_TEXT.                         "#EC NOTEXT
      APPEND TEXT-036 TO MAIN_TEXT.                         "#EC NOTEXT
      APPEND ' '      TO MAIN_TEXT.                         "#EC NOTEXT
      APPEND TEXT-037 TO MAIN_TEXT.                         "#EC NOTEXT
      APPEND ' '      TO MAIN_TEXT.                         "#EC NOTEXT
      APPEND VL_NAME  TO MAIN_TEXT.                         "#EC NOTEXT
      APPEND TEXT-038 TO MAIN_TEXT.                         "#EC NOTEXT
      APPEND TEXT-039 TO MAIN_TEXT.                         "#EC NOTEXT

      DOCUMENT = CL_DOCUMENT_BCS=>CREATE_DOCUMENT(
        I_TYPE    = 'RAW'
        I_IMPORTANCE = '5'
        I_TEXT    = MAIN_TEXT
        I_SUBJECT = SUBJECT ).                              "#EC NOTEXT

*     add the spread sheet as attachment to document object
      DOCUMENT->ADD_ATTACHMENT(
        I_ATTACHMENT_TYPE    = 'PDF'                        "#EC NOTEXT
        I_ATTACHMENT_SUBJECT = 'Instruções de Pagamento'    "#EC NOTEXT
        I_ATTACHMENT_SIZE    = LV_LEN
        I_ATT_CONTENT_HEX    = LI_CONTENT_HEX ).

*     add document object to send request
      SEND_REQUEST->SET_DOCUMENT( DOCUMENT ).

      LOOP AT IT_ZMAIL INTO WA_ZMAIL.
        IF WA_ZMAIL IS NOT INITIAL.
          CLEAR: MAILTO.
          MAILTO = WA_ZMAIL-EMAIL.
*     --------- add recipient (e-mail address) -----------------------
*     create recipient object
          RECIPIENT = CL_CAM_ADDRESS_BCS=>CREATE_INTERNET_ADDRESS( MAILTO ).

*     add recipient object to send request
*          SEND_REQUEST->ADD_RECIPIENT( RECIPIENT ).

      CALL METHOD SEND_REQUEST->ADD_RECIPIENT
        EXPORTING
         I_RECIPIENT = RECIPIENT
         I_EXPRESS = 'X'.

        ENDIF.
      ENDLOOP.

      SEND_REQUEST->SET_SEND_IMMEDIATELY( 'X' ).
*     ---------- send document ---------------------------------------
      SENT_TO_ALL = SEND_REQUEST->SEND( I_WITH_ERROR_SCREEN = 'X' ).

      COMMIT WORK.

      IF SENT_TO_ALL IS INITIAL.
*        MESSAGE I500(SBCOMS) WITH MAILTO.
        MESSAGE S026(SO).
      ELSE.
        MESSAGE S022(SO).
      ENDIF.

*   ------------ exception handling ----------------------------------
*   replace this rudimentary exception handling with your own one !!!
    CATCH CX_BCS INTO BCS_EXCEPTION.
      MESSAGE I865(SO) WITH BCS_EXCEPTION->ERROR_TYPE.
  ENDTRY.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  STATUS_5001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_5001 OUTPUT.

  SET PF-STATUS 'STATUS5001'.
  SET TITLEBAR  'T0003'.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_5001_EXIT  INPUT
*&---------------------------------------------------------------------*
MODULE USER_COMMAND_5001_EXIT INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_5001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_5001 INPUT.

  DATA: VL_DATA TYPE DATS,
        ANSWER.

  CASE SY-UCOMM.
    WHEN 'SALVAR'.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          TITLEBAR              = 'Alterar Prog. Logística'
          TEXT_QUESTION         = 'Você está certo disso?'
          TEXT_BUTTON_1         = 'Sim'
          TEXT_BUTTON_2         = 'Não'
          DEFAULT_BUTTON        = '1'
          DISPLAY_CANCEL_BUTTON = ' '
        IMPORTING
          ANSWER                = ANSWER
        EXCEPTIONS
          TEXT_NOT_FOUND        = 1
          OTHERS                = 2.

      IF ANSWER = '1'.

        IF STRLEN( WA_SV_MES ) = 1.
          CONCATENATE WA_SV_ANO '0' WA_SV_MES '01' INTO VL_DATA.
        ELSE.
          CONCATENATE WA_SV_ANO WA_SV_MES '01' INTO VL_DATA.
        ENDIF.

        CALL FUNCTION 'RP_LAST_DAY_OF_MONTHS'
          EXPORTING
            DAY_IN            = VL_DATA
          IMPORTING
            LAST_DAY_OF_MONTH = VL_DATA
          EXCEPTIONS
            DAY_IN_NO_DATE    = 1
            OTHERS            = 2.

        UPDATE ZSDT0051 SET DTATE_LOGIST = VL_DATA
                        WHERE NRO_SOL_OV = VL_NRO_SOL_OV.

        UPDATE ZSDT0148 SET MES_LIMITE  = WA_SV_MES
                            ANO_LIMITE  = WA_SV_ANO
                        WHERE NRO_CONT  = VL_NRO_CONT
                          AND NRO_TRANC = VL_NRO_TRCHE.

        PERFORM DESBLOQUEIA_ZSDT0148.
        PERFORM SELECIONA_DADOS.
        PERFORM MANIPULA_DADOS.
        PERFORM REFRESH_CTL_ALV1.
        LEAVE TO SCREEN 0.

      ENDIF.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  CHECK_DIA_UTIL
*&---------------------------------------------------------------------*
FORM CHECK_DIA_UTIL USING WA_SAIDA_ZSDT0148_DATA_RECEB TYPE ZSDT0148-DATA_RECEB
                 CHANGING VL_N_UTIL TYPE CHAR1.

  DATA: VG_LAST_DAY    TYPE SY-DATUM,
        IT_SAB_DOM_FER TYPE TABLE OF ISCAL_DAY.

  CALL FUNCTION 'BKK_GET_MONTH_LASTDAY'
    EXPORTING
      I_DATE = WA_SAIDA_ZSDT0148_DATA_RECEB
    IMPORTING
      E_DATE = VG_LAST_DAY.

  FREE: IT_SAB_DOM_FER.

  CALL FUNCTION 'HOLIDAY_GET'
    EXPORTING
      FACTORY_CALENDAR           = 'ZF'
      DATE_FROM                  = WA_SAIDA_ZSDT0148_DATA_RECEB
      DATE_TO                    = VG_LAST_DAY
    TABLES
      HOLIDAYS                   = IT_SAB_DOM_FER
    EXCEPTIONS
      FACTORY_CALENDAR_NOT_FOUND = 1
      HOLIDAY_CALENDAR_NOT_FOUND = 2
      DATE_HAS_INVALID_FORMAT    = 3
      DATE_INCONSISTENCY         = 4
      OTHERS                     = 5.

  READ TABLE IT_SAB_DOM_FER TRANSPORTING NO FIELDS WITH KEY DATE = WA_SAIDA_ZSDT0148_DATA_RECEB.
  IF SY-SUBRC IS INITIAL.
    VL_N_UTIL = ABAP_TRUE.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  MODIFICA_TELA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM MODIFICA_TELA.

  LOOP AT SCREEN.

    IF P_CONTR EQ 'X'.

      IF SCREEN-GROUP1 = 'M1'.
        SCREEN-INVISIBLE = 0.
        SCREEN-INPUT     = 1.
        SCREEN-ACTIVE    = 1.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.

      IF SCREEN-GROUP1 = 'M2'.
        SCREEN-INVISIBLE = 1.
        SCREEN-INPUT     = 0.
        SCREEN-ACTIVE    = 0.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.

      IF SCREEN-GROUP1 = 'M3'.
        SCREEN-INVISIBLE = 1.
        SCREEN-INPUT     = 0.
        SCREEN-ACTIVE    = 0.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.

    ELSEIF P_TRANC EQ 'X'.

      IF SCREEN-GROUP1 = 'M1'.
        SCREEN-INVISIBLE = 0.
        SCREEN-INPUT     = 1.
        SCREEN-ACTIVE    = 1.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.

      IF SCREEN-GROUP1 = 'M2'.
        SCREEN-INVISIBLE = 0.
        SCREEN-INPUT     = 1.
        SCREEN-ACTIVE    = 1.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.

      IF SCREEN-GROUP1 = 'M3'.
        SCREEN-INVISIBLE = 1.
        SCREEN-INPUT     = 0.
        SCREEN-ACTIVE    = 0.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.

    ELSEIF P_DOC EQ 'X'.

      IF SCREEN-GROUP1 = 'M1'.
        SCREEN-INVISIBLE = 1.
        SCREEN-INPUT     = 0.
        SCREEN-ACTIVE    = 0.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.

      IF SCREEN-GROUP1 = 'M2'.
        SCREEN-INVISIBLE = 1.
        SCREEN-INPUT     = 0.
        SCREEN-ACTIVE    = 0.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.

      IF SCREEN-GROUP1 = 'M3'.
        SCREEN-INVISIBLE = 0.
        SCREEN-INPUT     = 1.
        SCREEN-ACTIVE    = 1.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.

    ENDIF.
  ENDLOOP.

ENDFORM.            "MODIFICA_TELA


*&---------------------------------------------------------------------*
*&      Form  BUSCA_INFO_DOCS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM BUSCA_INFO_DOCS .

  DATA: WL_NAME           TYPE THEAD-TDNAME,
        IT_TEXTO          TYPE STANDARD TABLE OF TLINE,
        VL_OBJ_KEY        TYPE SIBFLPORB-INSTID,
        VL_LINES          TYPE I,
        ANEXOS            TYPE TABLE OF BDN_CON,
        WA_ANEXOS         LIKE LINE OF ANEXOS,
        WA_SAIDA_ZSDT0160 TYPE TY_SAIDA_ZSDT0160.


  LOOP AT IT_SAIDA_ZSDT0160 INTO WA_SAIDA_ZSDT0160.

    "Busca anexos RADAR
    VL_OBJ_KEY = |RD{ WA_SAIDA_ZSDT0160-KUNNR }|.

    CALL FUNCTION 'BDS_GOS_CONNECTIONS_GET'
      EXPORTING
*       LOGICAL_SYSTEM     =
        CLASSNAME          = 'ZSDR0076'
        OBJKEY             = VL_OBJ_KEY
        CLIENT             = SY-MANDT
      TABLES
        GOS_CONNECTIONS    = ANEXOS
      EXCEPTIONS
        NO_OBJECTS_FOUND   = 1
        INTERNAL_ERROR     = 2
        INTERNAL_GOS_ERROR = 3
        OTHERS             = 4.

    DESCRIBE TABLE ANEXOS LINES VL_LINES.

    IF VL_LINES NE 0.
      WA_SAIDA_ZSDT0160-DADOS_RADAR = '@1E@'.
    ELSE.
      WA_SAIDA_ZSDT0160-DADOS_RADAR = '@1F@'.
    ENDIF.

    FREE ANEXOS. CLEAR ANEXOS.

    "Busca anexos PROCURAÇÕES
    VL_OBJ_KEY = |DC{ WA_SAIDA_ZSDT0160-KUNNR }|.

    CALL FUNCTION 'BDS_GOS_CONNECTIONS_GET'
      EXPORTING
*       LOGICAL_SYSTEM     =
        CLASSNAME          = 'ZSDR0076'
        OBJKEY             = VL_OBJ_KEY
        CLIENT             = SY-MANDT
      TABLES
        GOS_CONNECTIONS    = ANEXOS
      EXCEPTIONS
        NO_OBJECTS_FOUND   = 1
        INTERNAL_ERROR     = 2
        INTERNAL_GOS_ERROR = 3
        OTHERS             = 4.

    DESCRIBE TABLE ANEXOS LINES VL_LINES.

    IF VL_LINES NE 0.
      WA_SAIDA_ZSDT0160-PROCURACOES = '@1E@'.
    ELSE.
      WA_SAIDA_ZSDT0160-PROCURACOES = '@1F@'.
    ENDIF.

    MODIFY IT_SAIDA_ZSDT0160 FROM WA_SAIDA_ZSDT0160 TRANSPORTING DADOS_RADAR PROCURACOES.
    CLEAR: VL_OBJ_KEY, VL_LINES, ANEXOS.


  ENDLOOP.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  BLOQUEIA_LINHAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM BLOQUEIA_LINHAS .

  DATA: VL_CONT           TYPE I,
        MODE              TYPE C,
        WA_SAIDA_ZSDT0160 TYPE TY_SAIDA_ZSDT0160,
        LT_CELLTAB        TYPE LVC_T_STYL.

  LOOP AT IT_SAIDA_ZSDT0160 INTO WA_SAIDA_ZSDT0160.

    VL_CONT = VL_CONT + 1.
    CLEAR: LT_CELLTAB, WA_SAIDA_ZSDT0160-CELLSTYLES.
    "REFRESH IT_CELLTAB.

    PERFORM FILL_CELLTAB USING: 'B' 'KUNNR'       CHANGING LT_CELLTAB,
                                'B' 'NAME1'       CHANGING LT_CELLTAB,
                                'B' 'PROCURACOES' CHANGING LT_CELLTAB,
                                'B' 'DADOS_RADAR' CHANGING LT_CELLTAB.

    "CLEAR WA_ZSDT0132-CELLSTYLES.
    INSERT LINES OF LT_CELLTAB INTO TABLE WA_SAIDA_ZSDT0160-CELLSTYLES.
    MODIFY IT_SAIDA_ZSDT0160 FROM WA_SAIDA_ZSDT0160 INDEX VL_CONT.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_5002_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_5002_EXIT INPUT.
*
*   DATA:  VL_TRANCHE_DOC    TYPE C.
*  IF VL_TRANCHE_DOC IS NOT INITIAL.
  P_TRANC = 'X'.
  CLEAR P_DOC.
*    CLEAR: G_CUSTOM_CONTAINER, CTL_ALV1.
*  ENDIF.

*    LEAVE TO SCREEN 5000.

  CALL SCREEN 5000.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_5002  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_5002 OUTPUT.

  SET PF-STATUS 'STATUS5000'.

  SET TITLEBAR 'T0004'.
  PERFORM BLOQUEIA_LINHAS.
  PERFORM BUSCA_INFO_DOCS.

  IF G_CUSTOM_CONTAINER2 IS INITIAL.


    CREATE OBJECT G_CUSTOM_CONTAINER2
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER5002'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.


    IF SY-SUBRC <> 0.
      MESSAGE A000(TREE_CONTROL_MSG).
    ENDIF.

    CREATE OBJECT CTL_ALV2
      EXPORTING
        I_PARENT = G_CUSTOM_CONTAINER2.

    GS_LAYOUT-CWIDTH_OPT = 'X'.
    GS_LAYOUT-SEL_MODE   = 'A'.
    GS_LAYOUT-STYLEFNAME = 'CELLSTYLES'.
    GS_LAYOUT-INFO_FNAME = 'COR'.

    CLEAR IT_FIELDCATALOG.
    PERFORM FILL_IT_FIELDCATALOG TABLES IT_FIELDCATALOG USING P_CONTR P_TRANC P_DOC.
    PERFORM EXCLUIR_BOTOES CHANGING IT_EXCLUDE.



    CASE SY-UCOMM.
      WHEN 'DOCUMENTOS'.
        SET HANDLER:
        LCL_EVENT_HANDLER=>USER_COMMAND_ZSDT0160          FOR CTL_ALV2,
        LCL_EVENT_HANDLER=>DATA_CHANGED_FINISHED_ZSDT0160 FOR CTL_ALV2,
        LCL_EVENT_HANDLER=>HANDLE_HOTSPOT_CLICK           FOR CTL_ALV2,
        LCL_EVENT_HANDLER=>HANDLE_BUTTON_CLICK_ZSDT0160   FOR CTL_ALV2.
      WHEN OTHERS.
        SET HANDLER:
        LCL_EVENT_HANDLER=>TOOLBAR_ZSDT0160               FOR CTL_ALV2,
        LCL_EVENT_HANDLER=>USER_COMMAND_ZSDT0160          FOR CTL_ALV2,
        LCL_EVENT_HANDLER=>DATA_CHANGED_FINISHED_ZSDT0160 FOR CTL_ALV2,
        LCL_EVENT_HANDLER=>HANDLE_HOTSPOT_CLICK           FOR CTL_ALV2,
        LCL_EVENT_HANDLER=>HANDLE_BUTTON_CLICK_ZSDT0160   FOR CTL_ALV2.
    ENDCASE.

    CALL METHOD CTL_ALV2->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT
        I_SAVE               = 'A'
        IT_TOOLBAR_EXCLUDING = IT_EXCLUDE
      CHANGING
        IT_FIELDCATALOG      = IT_FIELDCATALOG
        IT_OUTTAB            = IT_SAIDA_ZSDT0160.

    CALL METHOD CTL_ALV2->SET_READY_FOR_INPUT
      EXPORTING
        I_READY_FOR_INPUT = 1.

    CALL METHOD CTL_ALV2->REGISTER_EDIT_EVENT  "PARA REGISTRAR EVENTO NA ALV
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED
      EXCEPTIONS
        ERROR      = 1
        OTHERS     = 2.

    CALL METHOD CTL_ALV2->REFRESH_TABLE_DISPLAY.

  ELSE.

    CALL METHOD CTL_ALV2->REFRESH_TABLE_DISPLAY.

  ENDIF.

ENDMODULE.
