CLASS ZCL_CARGA_SAIDA DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES ZIF_CARGA .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_CARGA_SAIDA IMPLEMENTATION.


  METHOD ZIF_CARGA~BLOQUEAR_ENTRADA.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~FREE.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~GERAR_CARGA_SAIDA.

    DATA: CARGA_ENTRADA   TYPE REF TO ZCL_CARGA_RECEBIMENTO,
          WA_ZSDT0001OVRO TYPE ZSDT0001OVRO.

    CARGA_ENTRADA = CAST #( I_CARGA_ENTRADA ).

    IF CARGA_ENTRADA IS BOUND.

      IF CARGA_ENTRADA->ZIF_CARGA~CARGA-TP_STATUS NE ZIF_CARGA=>ST_STATUS_CONFERIDO.
        RAISE EXCEPTION TYPE ZCX_CARGA
          EXPORTING
            TEXTID = VALUE #( MSGID  = ZCX_CARGA=>ZCX_CARGA_ENT_NAO_CONFERIDA-MSGID
                              MSGNO  = ZCX_CARGA=>ZCX_CARGA_ENT_NAO_CONFERIDA-MSGNO
                              ATTR1  = CONV #( CARGA_ENTRADA->ZIF_CARGA~CARGA-ID_CARGA ) )
            MSGTY  = 'E'
            MSGID  = ZCX_CARGA=>ZCX_CARGA_ENT_NAO_CONFERIDA-MSGID
            MSGNO  = ZCX_CARGA=>ZCX_CARGA_ENT_NAO_CONFERIDA-MSGNO
            MSGV1  = CONV #( CARGA_ENTRADA->ZIF_CARGA~CARGA-ID_CARGA ).
      ENDIF.

      CREATE OBJECT R_CARGA TYPE ZCL_CARGA_SAIDA.

      SELECT SINGLE * INTO @DATA(WA_ZSDT0001CG)
        FROM ZSDT0001CG
       WHERE ID_CARGA_ORIGEM EQ @CARGA_ENTRADA->ZIF_CARGA~CARGA-ID_CARGA.

      IF SY-SUBRC IS NOT INITIAL.
        R_CARGA->CARGA                 = CARGA_ENTRADA->ZIF_CARGA~CARGA.
        R_CARGA->CARGA                 = CARGA_ENTRADA->ZIF_CARGA~CARGA.
        R_CARGA->CARGA-TP_CARGA        = ZIF_CARGA=>ST_TP_CARGA_SAIDA_ENT_FOB.
        R_CARGA->CARGA-ID_LOCAL_COLETA = CARGA_ENTRADA->ZIF_CARGA~CARGA-ID_BRANCH.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = R_CARGA->CARGA-ID_LOCAL_COLETA
          IMPORTING
            OUTPUT = R_CARGA->CARGA-ID_LOCAL_COLETA.

        R_CARGA->CARGA-NM_PESO_LIQUIDO   = CARGA_ENTRADA->ZIF_CARGA~CARGA-NM_PESO_SUBTOTAL.
        R_CARGA->CARGA-NM_PESO_DESCONTOS = 0.
        R_CARGA->CARGA-TP_FRETE          = ZIF_CARGA=>ST_TP_FRETE_CIF.

        CLEAR: R_CARGA->CARGA-ID_CARGA,
               R_CARGA->CARGA-ID_LOCAL_ENTREGA,
               R_CARGA->CARGA-CK_ENVIADO_OPUS,
               R_CARGA->CARGA-CK_RECEBIDO_OPUS.

        R_CARGA->CLASSIFICACAO = CARGA_ENTRADA->ZIF_CARGA~CLASSIFICACAO.

        CLEAR: R_CARGA->CLASSIFICACAO-ID_CARGA,
               R_CARGA->CLASSIFICACAO-ID_CLASSIFICACAO.

        LOOP AT CARGA_ENTRADA->ZIF_CARGA~RESULTADO INTO DATA(WA_RESULTADO).
          CLEAR: WA_RESULTADO-ID_CARGA, WA_RESULTADO-ID_CLASSIFICACAO.
          APPEND WA_RESULTADO TO R_CARGA->RESULTADO.
        ENDLOOP.

        LOOP AT CARGA_ENTRADA->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM_VENDA).
          CLEAR: WA_ORDEM_VENDA-ID_CARGA.
          APPEND WA_ORDEM_VENDA TO R_CARGA->ORDEM_VENDA.
          WA_ZSDT0001OVRO-NR_ORDEM_VENDA     = WA_ORDEM_VENDA-NR_ORDEM_VENDA.
          WA_ZSDT0001OVRO-CH_REFERENCIA_SAI  = WA_ORDEM_VENDA-CH_REFERENCIA_SAI.
          WA_ZSDT0001OVRO-NM_PESO_BRUTO      = WA_ORDEM_VENDA-NM_PESO_BRUTO.
          WA_ZSDT0001OVRO-NM_PESO_TARA       = WA_ORDEM_VENDA-NM_PESO_TARA.
          WA_ZSDT0001OVRO-NM_PESO_SUBTOTAL   = WA_ORDEM_VENDA-NM_PESO_SUBTOTAL.
          WA_ZSDT0001OVRO-NR_ROMANEIO_SAI    = WA_ORDEM_VENDA-NR_ROMANEIO_SAI.
          CLEAR: WA_ZSDT0001OVRO-NM_QTD_EMBALAGENS.
          APPEND WA_ZSDT0001OVRO TO R_CARGA->ORDEM_VENDA_ROMANEIOS.
        ENDLOOP.
        R_CARGA->GRAVAR_REGISTRO( IMPORTING E_GRAVOU = DATA(E_GRAVOU) ).
      ELSE.
        R_CARGA->SET_REGISTRO( I_ID_CARGA = WA_ZSDT0001CG-ID_CARGA ).
        E_GRAVOU = ABAP_TRUE.
      ENDIF.

      R_CARGA->SET_DENQUEUE( I_CARGA = R_CARGA->CARGA-ID_CARGA ).

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GERA_ERRO_GERAL.

    DATA: LC_TEXTO TYPE C LENGTH 200.
    LC_TEXTO = I_TEXTO.
    SY-MSGV1 = LC_TEXTO+000(50).
    SY-MSGV2 = LC_TEXTO+050(50).
    SY-MSGV3 = LC_TEXTO+100(50).
    SY-MSGV4 = LC_TEXTO+150(50).

    RAISE EXCEPTION TYPE ZCX_CARGA
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ERRO_GERAL-MSGID
                          MSGNO = ZCX_CARGA=>ZCX_ERRO_GERAL-MSGNO
                          ATTR1 = CONV #( SY-MSGV1 )
                          ATTR2 = CONV #( SY-MSGV2 )
                          ATTR3 = CONV #( SY-MSGV3 )
                          ATTR4 = CONV #( SY-MSGV4 ) )
        MSGID  = ZCX_CARGA=>ZCX_ERRO_GERAL-MSGID
        MSGNO  = ZCX_CARGA=>ZCX_ERRO_GERAL-MSGNO
        MSGTY  = 'E'
        MSGV1  = SY-MSGV1
        MSGV2  = SY-MSGV2
        MSGV3  = SY-MSGV3
        MSGV4  = SY-MSGV4.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CABECALHO_CARGA.

    R_CARGA = ME.

    SELECT SINGLE * INTO E_ZSDT0001CG FROM ZSDT0001CG WHERE ID_CARGA EQ I_ID_CARGA.
    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_CARGA_NAO_ENCONTRADA-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_CARGA_NAO_ENCONTRADA-MSGNO
                            ATTR1 = CONV #( I_ID_CARGA ) )
          MSGTY  = 'E'
          MSGNO  = ZCX_CARGA=>ZCX_CARGA_NAO_ENCONTRADA-MSGNO
          MSGID  = ZCX_CARGA=>ZCX_CARGA_NAO_ENCONTRADA-MSGID
          MSGV1  = CONV #( I_ID_CARGA ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_CK_SAIDA_AUTOMATICA.

    R_INSTANCE = ME.

    SELECT SINGLE *
      FROM SETLEAF
      INTO @DATA(WA_SETLEAF)
     WHERE SETNAME EQ 'MAGGI_SAIDA_AUT_ZMM0127'
       AND VALFROM LE @ME->ZIF_CARGA~CARGA-ID_BRANCH
       AND VALTO GE @ME->ZIF_CARGA~CARGA-ID_BRANCH.

    CHECK SY-SUBRC IS NOT INITIAL.

    RAISE EXCEPTION TYPE ZCX_CARGA
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_SAIDA_NAO_AUTOMATICA-MSGID MSGNO = ZCX_CARGA=>ZCX_SAIDA_NAO_AUTOMATICA-MSGNO )
        MSGTY  = 'E'
        MSGID  = ZCX_CARGA=>ZCX_SAIDA_NAO_AUTOMATICA-MSGID
        MSGNO  = ZCX_CARGA=>ZCX_SAIDA_NAO_AUTOMATICA-MSGNO.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_ALV_APRESENTACAO.

    R_CARGA = ME.

    DATA: WA_NOTA_ALV        TYPE ZDE_ZSDT0001NT_ALV,
          WA_ORDEM_ALV       TYPE ZDE_ZSDT0001OV_ALV,
          WA_PEDIDO_ALV      TYPE ZDE_ZSDT0001EK_ALV,
          WA_SOLICITACAO_ALV TYPE ZDE_ZSDT0001ACB_ALV.

    CLEAR: E_APRESENTACAO.

    "Carga
    MOVE-CORRESPONDING ME->ZIF_CARGA~CARGA TO E_APRESENTACAO-CARGA.

    "Transgenia
    MOVE-CORRESPONDING ME->ZIF_CARGA~CLASSIFICACAO TO E_APRESENTACAO-CARGA.

    "Classificação
    LOOP AT ME->ZIF_CARGA~RESULTADO INTO DATA(WA_RESULTADO) WHERE ID_CLASSIFICACAO EQ ME->ZIF_CARGA~CARGA-ID_CLASSIFICACAO.
      CASE WA_RESULTADO-TP_CARACTERISTICA.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
          E_APRESENTACAO-CARGA-NR_PERC_UMI = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_UMI = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
          E_APRESENTACAO-CARGA-NR_PERC_IMP = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_IMP = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
          E_APRESENTACAO-CARGA-NR_PERC_AVA = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_AVA = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
          E_APRESENTACAO-CARGA-NR_PERC_ARD = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_ARD = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
          E_APRESENTACAO-CARGA-NR_PERC_QUE = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_QUE = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
          E_APRESENTACAO-CARGA-NR_PERC_ESV = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_ESV = WA_RESULTADO-NR_QUANTIDADE_COM.
        WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
          E_APRESENTACAO-CARGA-NR_PERC_CAR = WA_RESULTADO-NR_PERCENTUAL_COM.
          E_APRESENTACAO-CARGA-NR_QTDE_CAR = WA_RESULTADO-NR_QUANTIDADE_COM.
      ENDCASE.
    ENDLOOP.

    SELECT SINGLE NAME INTO E_APRESENTACAO-CARGA-NAME
      FROM J_1BBRANCH
     WHERE BUKRS  EQ E_APRESENTACAO-CARGA-ID_BUKRS
       AND BRANCH EQ E_APRESENTACAO-CARGA-ID_BRANCH.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_COLETA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_COLETA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_COLETA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_DESCARGA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_DESCARGA
        FROM KNA1 WHERE KUNNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_DESCARGA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_DESTINO IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_DESTINO
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_LOCAL_DESTINO.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_CLASSIFICADORA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_CLASSIFICADORA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_CLASSIFICADORA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_LOCAL_ENTREGA IS NOT INITIAL.
      SELECT SINGLE DS_LOCAL_ENTREGA
        INTO E_APRESENTACAO-CARGA-DS_LOCAL_ENTREGA
        FROM ZSDT0001LE WHERE ID_LOCAL_ENTREGA EQ E_APRESENTACAO-CARGA-ID_LOCAL_ENTREGA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_PROPRIETARIO IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_PROPRIETARIO
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_PROPRIETARIO.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_OUTRO_PARTIC IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_OUTRO_PARTIC
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_OUTRO_PARTIC.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_AGENT_FRETE IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_AGENT_FRETE
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_AGENT_FRETE.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_MOTORISTA IS NOT INITIAL.
      SELECT SINGLE NAME1
        INTO E_APRESENTACAO-CARGA-DS_MOTORISTA
        FROM LFA1 WHERE LIFNR EQ E_APRESENTACAO-CARGA-ID_MOTORISTA.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_PRODUTO IS NOT INITIAL.
      SELECT SINGLE MAKTX
        INTO E_APRESENTACAO-CARGA-DS_PRODUTO
        FROM MAKT
       WHERE MATNR EQ E_APRESENTACAO-CARGA-ID_PRODUTO
         AND SPRAS EQ SY-LANGU.
    ENDIF.

    IF E_APRESENTACAO-CARGA-ID_ORDEM IS NOT INITIAL.
      DATA(R_ORDEM_CARRGAMENTO) = ZCL_ORDEM_CARREGAMENTO=>BUSCA_ORDEM_CARREGAMENTO( I_ID_ORDEM = E_APRESENTACAO-CARGA-ID_ORDEM ).
      E_APRESENTACAO-CARGA-NR_ORDEM = R_ORDEM_CARRGAMENTO-NR_ORDEM.
      E_APRESENTACAO-ORDEM_CARREGA  = R_ORDEM_CARRGAMENTO.
    ENDIF.

    "Documentos Fiscais
    LOOP AT ME->ZIF_CARGA~DOCUMENTO_FISCAL INTO DATA(WA_NOTA).

      CLEAR: WA_NOTA_ALV.

      MOVE-CORRESPONDING WA_NOTA TO WA_NOTA_ALV.

      SELECT SINGLE NAME1
        INTO WA_NOTA_ALV-DS_FORNECEDOR
        FROM LFA1 WHERE LIFNR EQ WA_NOTA_ALV-ID_FORNECEDOR.

      WA_NOTA_ALV-ID_PRODUTO = E_APRESENTACAO-CARGA-ID_PRODUTO.
      WA_NOTA_ALV-DS_PRODUTO = E_APRESENTACAO-CARGA-DS_PRODUTO.

      SELECT SINGLE DS_ENTRADA
        INTO WA_NOTA_ALV-DS_ENTRADA
        FROM ZSDT0001TETX WHERE ID_ENTRADA EQ WA_NOTA-ID_ENTRADA.

      IF WA_NOTA_ALV-ID_ENTREGUE_POR IS NOT INITIAL.
        SELECT SINGLE NAME1
          INTO WA_NOTA_ALV-DS_ENTREGUE_POR
          FROM LFA1 WHERE LIFNR EQ WA_NOTA_ALV-ID_ENTREGUE_POR.
      ENDIF.

      "Classificação
      LOOP AT ME->ZIF_CARGA~RESULTADO INTO WA_RESULTADO WHERE ID_CLASSIFICACAO EQ WA_NOTA-ID_CLASSIFICACAO.
        CASE WA_RESULTADO-TP_CARACTERISTICA.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_UMIDADE.
            WA_NOTA_ALV-NR_PERC_UMI = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_UMI = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_IMPUREZA.
            WA_NOTA_ALV-NR_PERC_IMP = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_IMP = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_AVARIADO.
            WA_NOTA_ALV-NR_PERC_AVA = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_AVA = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ARDIDO.
            WA_NOTA_ALV-NR_PERC_ARD = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_ARD = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_QUEBRADO.
            WA_NOTA_ALV-NR_PERC_QUE = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_QUE = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_ESVERDEADO.
            WA_NOTA_ALV-NR_PERC_ESV = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_ESV = WA_RESULTADO-NR_QUANTIDADE_COM.
          WHEN ZIF_CARGA=>ST_TP_CARACT_CLASS_CARUNCHADO.
            WA_NOTA_ALV-NR_PERC_CAR = WA_RESULTADO-NR_PERCENTUAL_COM.
            WA_NOTA_ALV-NR_QTDE_CAR = WA_RESULTADO-NR_QUANTIDADE_COM.
        ENDCASE.
      ENDLOOP.

      APPEND WA_NOTA_ALV TO E_APRESENTACAO-NOTAS.
    ENDLOOP.

    "Ordens de Venda
    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM).
      CLEAR: WA_ORDEM_ALV.

      MOVE-CORRESPONDING WA_ORDEM TO WA_ORDEM_ALV.

      IF WA_ORDEM-NR_ORDEM_VENDA IS NOT INITIAL.
        TRY .
            ME->ZIF_CARGA~GET_INFO_ORDEM_VENDA( EXPORTING I_ORDEM_VENDA = WA_ORDEM-NR_ORDEM_VENDA IMPORTING E_ORDEM = DATA(R_ORDEM) ).
            WA_ORDEM_ALV-TP_TIPO_ORDEM  = R_ORDEM-TP_TIPO_ORDEM.
            WA_ORDEM_ALV-DS_TIPO_ORDEM  = R_ORDEM-DS_TIPO_ORDEM.
            WA_ORDEM_ALV-DS_TIPO_FRETE  = R_ORDEM-DS_TIPO_FRETE.
            WA_ORDEM_ALV-ID_PRODUTO     = R_ORDEM-ID_PRODUTO.
            WA_ORDEM_ALV-DS_PRODUTO     = R_ORDEM-DS_PRODUTO.
          CATCH ZCX_CARGA.    "
        ENDTRY.
      ENDIF.

      APPEND WA_ORDEM_ALV TO E_APRESENTACAO-ORDEM_VENDA.
    ENDLOOP.

    "Pedido de Compra
    LOOP AT ME->ZIF_CARGA~PEDIDO_COMPRA INTO DATA(WA_PEDIDO_COMPRA).
      CLEAR: WA_PEDIDO_ALV.

      MOVE-CORRESPONDING WA_PEDIDO_COMPRA TO WA_PEDIDO_ALV.

      IF WA_PEDIDO_COMPRA-NR_PEDIDO_COMPRA IS NOT INITIAL.
        TRY .
            ME->ZIF_CARGA~GET_INFO_PEDIDO_COMPRA(
              EXPORTING
                I_PEDIDO_COMPRA = WA_PEDIDO_COMPRA-NR_PEDIDO_COMPRA
              IMPORTING
                E_PEDIDO = DATA(E_PEDIDO) ).
            WA_PEDIDO_ALV-TP_TIPO_PEDIDO = E_PEDIDO-TP_TIPO_PEDIDO.
            WA_PEDIDO_ALV-DS_TIPO_PEDIDO = E_PEDIDO-DS_TIPO_PEDIDO.
            WA_PEDIDO_ALV-DS_TIPO_FRETE  = E_PEDIDO-DS_TIPO_FRETE.
            WA_PEDIDO_ALV-ID_PRODUTO     = E_PEDIDO-ID_PRODUTO.
            WA_PEDIDO_ALV-DS_PRODUTO     = E_PEDIDO-DS_PRODUTO.
          CATCH ZCX_CARGA.
        ENDTRY.
      ENDIF.

      APPEND WA_PEDIDO_ALV TO E_APRESENTACAO-PEDIDO_COMPRA.

    ENDLOOP.
    "Solicitação de Manutenção
    MOVE-CORRESPONDING ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO TO E_APRESENTACAO-MANUTENCAO.
    IF ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO IS NOT INITIAL.
      E_APRESENTACAO-MANUTENCAO-TP_SOLICITACAO_STATUS = ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO-TP_STATUS.
    ENDIF.

    "Solicitações de Manutenção da Carga
    LOOP AT ME->ZIF_CARGA~SOLICITACOES INTO DATA(WA_SOLICITACOES).
      CLEAR: WA_SOLICITACAO_ALV.
      MOVE-CORRESPONDING WA_SOLICITACOES TO WA_SOLICITACAO_ALV.
      WA_SOLICITACAO_ALV-TP_SOLICITACAO_STATUS = WA_SOLICITACOES-TP_STATUS.
      APPEND WA_SOLICITACAO_ALV TO E_APRESENTACAO-SOLICITACOES.
    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_ORDEM_VENDA.

    R_CARGA = ME.

    SELECT K~VBELN,
           K~AUART,
           T~BEZEI,
           D~INCO1,
           P~MATNR,
           P~CHARG,
           M~MAKTX,
           K~KVGR3
      INTO TABLE @DATA(IT_TAB)
      FROM VBAK AS K
     INNER JOIN VBAP  AS P ON P~VBELN EQ K~VBELN
     INNER JOIN MAKT  AS M ON M~MATNR EQ P~MATNR AND M~SPRAS EQ @SY-LANGU
     INNER JOIN TVAKT AS T ON T~AUART EQ K~AUART AND T~SPRAS EQ @SY-LANGU
     INNER JOIN VBKD  AS D ON D~VBELN EQ K~VBELN AND D~POSNR EQ '000000'
     WHERE K~VBELN = @I_ORDEM_VENDA.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGNO )
          MSGID  = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_ORDEM_VENDA_NOT_FOUND-MSGNO
          MSGTY  = 'E'.
    ENDIF.

    READ TABLE IT_TAB INDEX 1 INTO DATA(WA_TAB).

    E_ORDEM-NR_ORDEM_VENDA = WA_TAB-VBELN.
    E_ORDEM-TP_TIPO_ORDEM  = WA_TAB-AUART.
    E_ORDEM-DS_TIPO_ORDEM  = WA_TAB-BEZEI.
    E_ORDEM-DS_TIPO_FRETE  = WA_TAB-INCO1.
    E_ORDEM-ID_PRODUTO     = WA_TAB-MATNR.
    E_ORDEM-DS_PRODUTO     = WA_TAB-MAKTX.
    E_ORDEM-NR_SAFRA       = WA_TAB-CHARG.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INFO_PEDIDO_COMPRA.

    R_CARGA = ME.

    SELECT K~EBELN AS EBELN,
           K~BUKRS AS ID_EMPRESA_SAIDA,
           K~RESWK AS ID_FILIAL_SAIDA,
           G~CHARG AS DS_SAFRA,
           K~BSART AS TIPO_PEDIDO,
           P~WERKS AS ID_LOCAL_DESTINO,
           P~MATNR AS MATNR,
           M~MAKTX AS MAKTX,
           T~BSART AS BSART,
           T~BATXT AS BATXT,
           P~INCO1 AS INCO1
      INTO TABLE @DATA(IT_TAB)
      FROM EKKO AS K
     INNER JOIN EKPO  AS P ON P~EBELN EQ K~EBELN
     INNER JOIN EKET  AS G ON G~EBELN EQ P~EBELN AND G~EBELP EQ P~EBELP
     INNER JOIN MAKT  AS M ON M~MATNR EQ P~MATNR AND M~SPRAS EQ @SY-LANGU
     INNER JOIN T161T AS T ON T~BSART EQ K~BSART AND T~SPRAS EQ @SY-LANGU
     WHERE K~EBELN EQ @I_PEDIDO_COMPRA
       AND K~STATU EQ '9'.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_NAO_ENC-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_NAO_ENC-MSGNO )
          MSGID  = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_NAO_ENC-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_PEDIDO_COMPRA_NAO_ENC-MSGNO
          MSGTY  = 'E'.
    ENDIF.

    READ TABLE IT_TAB INDEX 1 INTO DATA(WA_TAB).

    E_PEDIDO-NR_PEDIDO_COMPRA    = WA_TAB-EBELN.
    E_PEDIDO-TP_TIPO_PEDIDO      = WA_TAB-BSART.
    E_PEDIDO-DS_TIPO_PEDIDO      = WA_TAB-BATXT.
    E_PEDIDO-DS_TIPO_FRETE       = WA_TAB-INCO1.
    E_PEDIDO-ID_PRODUTO          = WA_TAB-MATNR.
    E_PEDIDO-DS_PRODUTO          = WA_TAB-MAKTX.
    E_PEDIDO-ID_CENTRO_RECEBEDOR = WA_TAB-ID_LOCAL_DESTINO.
    E_PEDIDO-ID_CENTRO_SAIDA     = WA_TAB-ID_FILIAL_SAIDA.
    E_PEDIDO-NR_SAFRA            = WA_TAB-DS_SAFRA.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_INSTANCE.

    IF ZIF_CARGA~AT_CARGA IS NOT BOUND.
      CREATE OBJECT ZIF_CARGA~AT_CARGA TYPE ZCL_CARGA_SAIDA.
      R_INSTANCE = ZIF_CARGA~AT_CARGA.
    ELSE.
      R_INSTANCE = ZIF_CARGA~AT_CARGA.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_NEW_ID_CARGA.

    CLEAR: E_ID_CARGA.

    R_CARGA = ME.

    CALL FUNCTION 'NUMBER_RANGE_ENQUEUE'
      EXPORTING
        OBJECT           = 'ZCARGA'
      EXCEPTIONS
        FOREIGN_LOCK     = 1
        OBJECT_NOT_FOUND = 2
        SYSTEM_FAILURE   = 3
        OTHERS           = 4.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        NR_RANGE_NR             = '01'
        OBJECT                  = 'ZCARGA'
        QUANTITY                = '00000000000000000001'
        IGNORE_BUFFER           = 'X'
      IMPORTING
        NUMBER                  = E_ID_CARGA
      EXCEPTIONS
        INTERVAL_NOT_FOUND      = 1
        NUMBER_RANGE_NOT_INTERN = 2
        OBJECT_NOT_FOUND        = 3
        QUANTITY_IS_0           = 4
        QUANTITY_IS_NOT_1       = 5
        INTERVAL_OVERFLOW       = 6
        BUFFER_OVERFLOW         = 7
        OTHERS                  = 8.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

* Desbloqueia o objeto de numeração
    CALL FUNCTION 'NUMBER_RANGE_DEQUEUE'
      EXPORTING
        OBJECT           = 'ZCARGA'
      EXCEPTIONS
        OBJECT_NOT_FOUND = 1
        OTHERS           = 2.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_NEW_ID_CLASSIFICAO.

    R_CARGA = ME.

    CLEAR: E_ID_CLASSIFICACAO.

    CALL FUNCTION 'NUMBER_RANGE_ENQUEUE'
      EXPORTING
        OBJECT           = 'ZCLASSIFIC'
      EXCEPTIONS
        FOREIGN_LOCK     = 1
        OBJECT_NOT_FOUND = 2
        SYSTEM_FAILURE   = 3
        OTHERS           = 4.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        NR_RANGE_NR             = '01'
        OBJECT                  = 'ZCLASSIFIC'
        QUANTITY                = '00000000000000000001'
        IGNORE_BUFFER           = 'X'
      IMPORTING
        NUMBER                  = E_ID_CLASSIFICACAO
      EXCEPTIONS
        INTERVAL_NOT_FOUND      = 1
        NUMBER_RANGE_NOT_INTERN = 2
        OBJECT_NOT_FOUND        = 3
        QUANTITY_IS_0           = 4
        QUANTITY_IS_NOT_1       = 5
        INTERVAL_OVERFLOW       = 6
        BUFFER_OVERFLOW         = 7
        OTHERS                  = 8.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

* Desbloqueia o objeto de numeração
    CALL FUNCTION 'NUMBER_RANGE_DEQUEUE'
      EXPORTING
        OBJECT           = 'ZCLASSIFIC'
      EXCEPTIONS
        OBJECT_NOT_FOUND = 1
        OTHERS           = 2.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.


  ENDMETHOD.


  METHOD ZIF_CARGA~GET_ROMANEIO_ENTRADA.

    R_CARGA = ME.

  ENDMETHOD.


  METHOD ZIF_CARGA~GET_ROMANEIO_SAIDA.

    R_CARGA = ME.

    IF ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS IS INITIAL.
      SELECT * INTO TABLE ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS
        FROM ZSDT0001OVRO
       WHERE ID_CARGA EQ I_ID_CARGA.
    ENDIF.

    CHECK ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS IS NOT INITIAL.

    SELECT * INTO TABLE E_ROMANEIOS
      FROM ZSDT0001
       FOR ALL ENTRIES IN ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS
     WHERE CH_REFERENCIA EQ ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS-CH_REFERENCIA_SAI
       AND TP_MOVIMENTO  EQ ZCL_ROMANEIO=>ST_TP_MOVIMENTO_SAIDA.

  ENDMETHOD.


  METHOD ZIF_CARGA~GRAVAR_REGISTRO.

    R_CARGA = ME.

    E_GRAVOU = ABAP_FALSE.

    ME->ZIF_CARGA~VALIDAR_REGISTRO( IMPORTING E_VALIDOU = DATA(E_VALIDOU)  ).

    IF E_VALIDOU EQ ABAP_TRUE.

      IF ME->ZIF_CARGA~CARGA-ID_CARGA IS INITIAL.
        ME->ZIF_CARGA~GET_NEW_ID_CARGA( IMPORTING E_ID_CARGA = DATA(E_ID_CARGA) )->SET_ID_CARGA( I_ID_CARGA = E_ID_CARGA ).

        LOOP AT ME->ZIF_CARGA~DOCUMENTO_FISCAL ASSIGNING FIELD-SYMBOL(<FS_NOTA>) WHERE ID_CARGA IS INITIAL.
          <FS_NOTA>-ID_CARGA = ME->ZIF_CARGA~CARGA-ID_CARGA.
        ENDLOOP.

        LOOP AT ME->ZIF_CARGA~DOCUMENTO_FISCAL_IMP_RET ASSIGNING FIELD-SYMBOL(<FS_IMP_RET>).
          <FS_IMP_RET>-ID_CARGA = ME->ZIF_CARGA~CARGA-ID_CARGA.
        ENDLOOP.

        IF ME->ZIF_CARGA~CLASSIFICACAO-ID_CLASSIFICACAO IS INITIAL.
          ME->ZIF_CARGA~GET_NEW_ID_CLASSIFICAO( IMPORTING E_ID_CLASSIFICACAO = DATA(E_ID_CLASSIFICACAO) )->SET_ID_CLASSIFICACAO( I_ID_CLASSIFICACAO = E_ID_CLASSIFICACAO ).
        ENDIF.

        LOOP AT ME->ZIF_CARGA~RESULTADO ASSIGNING FIELD-SYMBOL(<FS_RESULTADO>) .
          <FS_RESULTADO>-ID_CARGA         = ME->ZIF_CARGA~CARGA-ID_CARGA.
          <FS_RESULTADO>-ID_CLASSIFICACAO = ME->ZIF_CARGA~CLASSIFICACAO-ID_CLASSIFICACAO.
        ENDLOOP.
      ENDIF.

      READ TABLE ME->ZIF_CARGA~ORDEM_VENDA INDEX 1 ASSIGNING FIELD-SYMBOL(<FS_ORDEM>).
      IF SY-SUBRC IS INITIAL.
        <FS_ORDEM>-ID_CARGA         = ME->ZIF_CARGA~CARGA-ID_CARGA.
        <FS_ORDEM>-NM_PESO_BRUTO    = ME->ZIF_CARGA~CARGA-NM_PESO_BRUTO.
        <FS_ORDEM>-NM_PESO_TARA     = ME->ZIF_CARGA~CARGA-NM_PESO_TARA.
        <FS_ORDEM>-NM_PESO_SUBTOTAL = ME->ZIF_CARGA~CARGA-NM_PESO_BRUTO.
      ENDIF.


      READ TABLE ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS INDEX 1 ASSIGNING FIELD-SYMBOL(<FS_ORDEM_RO>).
      IF SY-SUBRC IS INITIAL.
        <FS_ORDEM_RO>-ID_CARGA = ME->ZIF_CARGA~CARGA-ID_CARGA.
      ENDIF.

      READ TABLE ME->ZIF_CARGA~PEDIDO_COMPRA INDEX 1 ASSIGNING FIELD-SYMBOL(<FS_PEDIDO>).
      IF SY-SUBRC IS INITIAL.
        <FS_PEDIDO>-ID_CARGA         = ME->ZIF_CARGA~CARGA-ID_CARGA.
        <FS_PEDIDO>-NM_PESO_BRUTO    = ME->ZIF_CARGA~CARGA-NM_PESO_BRUTO.
        <FS_PEDIDO>-NM_PESO_TARA     = ME->ZIF_CARGA~CARGA-NM_PESO_TARA.
        <FS_PEDIDO>-NM_PESO_SUBTOTAL = ME->ZIF_CARGA~CARGA-NM_PESO_BRUTO.
      ENDIF.

      DELETE FROM ZSDT0001RS WHERE ID_CARGA EQ ME->ZIF_CARGA~CARGA-ID_CARGA.
      DELETE FROM ZSDT0001CL WHERE ID_CARGA EQ ME->ZIF_CARGA~CARGA-ID_CARGA.
      DELETE FROM ZSDT0001OV WHERE ID_CARGA EQ ME->ZIF_CARGA~CARGA-ID_CARGA.
      DELETE FROM ZSDT0001OVRO WHERE ID_CARGA EQ ME->ZIF_CARGA~CARGA-ID_CARGA.

      "Carga
      MODIFY ZSDT0001CG FROM ME->ZIF_CARGA~CARGA.
      "Classificação da Carga
      MODIFY ZSDT0001CL FROM ME->ZIF_CARGA~CLASSIFICACAO.
      "Ordem de Venda
      MODIFY ZSDT0001OV FROM TABLE ME->ZIF_CARGA~ORDEM_VENDA.
      "Resultados da(s) Classificação(ões)
      MODIFY ZSDT0001RS FROM TABLE ME->ZIF_CARGA~RESULTADO.
      "Romaneios da Ordem de Venda
      MODIFY ZSDT0001OVRO FROM TABLE ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS.

      COMMIT WORK.
      E_GRAVOU = ABAP_TRUE.
      ME->ZIF_CARGA~CK_ALTEROU = ABAP_FALSE.
      MESSAGE S072.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~LIMPAR_REGISTRO.

    R_CARGA = ME.

    CLEAR: ME->ZIF_CARGA~CARGA,
           ME->ZIF_CARGA~CLASSIFICACAO,
           ME->ZIF_CARGA~RESULTADO,
           ME->ZIF_CARGA~DOCUMENTO_FISCAL,
           ME->ZIF_CARGA~CLASSIFICACAO_NOTAS,
           ME->ZIF_CARGA~ORDEM_VENDA,
           ME->ZIF_CARGA~PEDIDO_COMPRA,
           ME->ZIF_CARGA~AT_NAO_GERAR_BLOQUEIOS,
           ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA,
           ME->ZIF_CARGA~SOLICITACAO_MANUTENCAO,
           ME->ZIF_CARGA~AT_MANUTENCAO,
           ME->ZIF_CARGA~SOLICITACOES,
           ME->ZIF_CARGA~CK_DIGITADO_UMIDADE,
           ME->ZIF_CARGA~CK_DIGITADO_IMPUREZA,
           ME->ZIF_CARGA~CK_DIGITADO_ARDIDO,
           ME->ZIF_CARGA~CK_DIGITADO_AVARIADO,
           ME->ZIF_CARGA~CK_DIGITADO_QUEBRADO,
           ME->ZIF_CARGA~CK_DIGITADO_ESVERDEADO,
           ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS,
           ME->ZIF_CARGA~ROMANEIOS.

  ENDMETHOD.


  METHOD ZIF_CARGA~PESQUISAR.

    R_CARGA = ME.

    DATA: LC_FILTRO  TYPE ZDE_FILTRO_ZSDT0001CG,
          WA_RETORNO TYPE ZDE_ZSDT0001CG_ALV,
          LC_RETORNO TYPE ZDE_ZSDT0001CG_ALV_T.

    DATA: RG_TP_CARGA TYPE TABLE OF ZDE_TP_CARGA_R.

    RG_TP_CARGA = VALUE #( SIGN = 'I' OPTION = 'EQ'
                         ( HIGH = ZIF_CARGA=>ST_TP_CARGA_SAIDA_ENT_FOB LOW = ZIF_CARGA=>ST_TP_CARGA_SAIDA_ENT_FOB ) ).

    MOVE I_FILTROS TO LC_FILTRO.

    DESCRIBE TABLE LC_FILTRO-INRSAFRA LINES DATA(LC_SAFRA).
    DESCRIBE TABLE LC_FILTRO-IIDBUKRS LINES DATA(LC_BUKRS).
    DESCRIBE TABLE LC_FILTRO-IIDBRANC LINES DATA(LC_BRANCH).

    IF LC_SAFRA IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_SAFRA_PSQ-MSGNO.
    ENDIF.

    IF LC_BUKRS IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_EMPRESA_PSQ-MSGNO.
    ENDIF.

    IF LC_BRANCH IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGID
                            MSGNO = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGNO )
          MSGTY  = 'E'
          MSGID  = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGID
          MSGNO  = ZCX_CARGA=>ZCX_OBG_INF_FILIAL_PSQ-MSGNO.
    ENDIF.

    CLEAR: E_PESQUISOU, E_REGISTROS.

    SELECT CA~ID_CARGA           AS ID_CARGA,
           CA~ID_ORDEM           AS ID_ORDEM,
           OD~NR_ORDEM           AS NR_ORDEM,
           CA~DT_MOVIMENTO       AS DT_MOVIMENTO,
           CA~NR_SAFRA           AS NR_SAFRA,
           CA~ID_BUKRS           AS ID_BUKRS,
           EN~BUTXT              AS BUTXT,
           CA~ID_BRANCH          AS ID_BRANCH,
           FN~NAME               AS NAME,
           CA~ID_AGENT_FRETE     AS ID_AGENT_FRETE,
           AG~NAME1              AS DS_AGENT_FRETE,
           CA~ID_LOCAL_COLETA    AS ID_LOCAL_COLETA,
           LC~NAME1              AS DS_LOCAL_COLETA,
           CA~ID_LOCAL_DESTINO   AS ID_LOCAL_DESTINO,
           LD~NAME1              AS DS_LOCAL_DESTINO,
           CA~ID_LOCAL_DESCARGA  AS ID_LOCAL_DESCARGA,
           LA~NAME1              AS DS_LOCAL_DESCARGA,
           CA~TP_FRETE           AS TP_FRETE,
           CA~ID_PRODUTO         AS ID_PRODUTO,
           MA~MAKTX              AS DS_PRODUTO,
           CA~NM_PESO_BRUTO      AS NM_PESO_BRUTO,
           CA~NM_PESO_TARA       AS NM_PESO_TARA,
           CA~NM_PESO_SUBTOTAL   AS NM_PESO_SUBTOTAL,
           CA~NM_PESO_DESCONTOS  AS NM_PESO_DESCONTOS,
           CA~NM_PESO_LIQUIDO    AS NM_PESO_LIQUIDO,
           CA~DS_PLACA_TRATOR    AS DS_PLACA_TRATOR,
           CA~ID_PROPRIETARIO    AS ID_PROPRIETARIO,
           PP~NAME1              AS DS_PROPRIETARIO,
           CA~DS_PLACA_REBOQ_1   AS DS_PLACA_REBOQ_1,
           CA~DS_PLACA_REBOQ_2   AS DS_PLACA_REBOQ_2,
           CA~DS_PLACA_REBOQ_3   AS DS_PLACA_REBOQ_3,
           CA~ID_MOTORISTA       AS ID_MOTORISTA,
           MT~NAME1              AS DS_MOTORISTA,
           CA~NR_TICKET          AS NR_TICKET,
           CA~IN_TRANSFERENCIA   AS IN_TRANSFERENCIA,
           CA~TP_STATUS          AS TP_STATUS,
           CA~DT_ABERTURA        AS DT_ABERTURA,
           CA~HR_ABERTURA        AS HR_ABERTURA,
           CA~US_ABERTURA        AS US_ABERTURA,
           CA~DT_FECHAMENTO      AS DT_FECHAMENTO,
           CA~HR_FECHAMENTO      AS HR_FECHAMENTO,
           CA~US_FECHAMENTO      AS US_FECHAMENTO,
           CA~DT_CONFERENCIA     AS DT_CONFERENCIA,
           CA~HR_CONFERENCIA     AS HR_CONFERENCIA,
           CA~US_CONFERENCIA     AS US_CONFERENCIA,
           CA~DT_CANCELAMENTO    AS DT_CANCELAMENTO,
           CA~HR_CANCELAMENTO    AS HR_CANCELAMENTO,
           CA~US_CANCELAMENTO    AS US_CANCELAMENTO,

           CL~ID_CLASSIFICACAO      AS ID_CLASSIFICACAO,
           CL~IN_GMO                AS IN_GMO,
           CL~NR_RESULTADO_01       AS NR_RESULTADO_01,
           CL~NR_RESULTADO_02       AS NR_RESULTADO_02,
           CL~NR_RES_RR1_RR2        AS NR_RES_RR1_RR2,
           CL~IN_GMO_03             AS IN_GMO_03,
           CL~IN_SRR_ORIGEM_PARTIC  AS IN_SRR_ORIGEM_PARTIC,
           CL~ID_OUTRO_PARTIC       AS ID_OUTRO_PARTIC,
           OT~NAME1                 AS DS_OUTRO_PARTIC,
           CL~IN_SRR_DECLARADO      AS IN_SRR_DECLARADO,
           CL~IN_TESTE_SRR          AS IN_TESTE_SRR,
           CL~IN_SRR_DECLARADO_2    AS IN_SRR_DECLARADO_2,
           CL~IN_TESTE_SRR_2        AS IN_TESTE_SRR_2,
           CL~TP_TRANSGENIA         AS TP_TRANSGENIA,

           R1~NR_PERCENTUAL_COM     AS NR_PERC_UMI,
           R2~NR_PERCENTUAL_COM     AS NR_PERC_IMP,
           R3~NR_PERCENTUAL_COM     AS NR_PERC_AVA,
           R4~NR_PERCENTUAL_COM     AS NR_PERC_ARD,
           R5~NR_PERCENTUAL_COM     AS NR_PERC_QUE,
           R6~NR_PERCENTUAL_COM     AS NR_PERC_ESV,

           R1~NR_QUANTIDADE_COM     AS NR_QTDE_UMI,
           R2~NR_QUANTIDADE_COM     AS NR_QTDE_IMP,
           R3~NR_QUANTIDADE_COM     AS NR_QTDE_AVA,
           R4~NR_QUANTIDADE_COM     AS NR_QTDE_ARD,
           R5~NR_QUANTIDADE_COM     AS NR_QTDE_QUE,
           R6~NR_QUANTIDADE_COM     AS NR_QTDE_ESV

      INTO TABLE @DATA(IT_TAB)
      FROM ZSDT0001CG AS CA
     INNER JOIN T001         AS EN ON EN~BUKRS EQ CA~ID_BUKRS
     INNER JOIN J_1BBRANCH   AS FN ON FN~BUKRS EQ CA~ID_BUKRS AND FN~BRANCH EQ CA~ID_BRANCH
      LEFT JOIN LFA1         AS LC ON LC~LIFNR EQ CA~ID_LOCAL_COLETA
      LEFT JOIN LFA1         AS LD ON LD~LIFNR EQ CA~ID_LOCAL_DESTINO
      LEFT JOIN KNA1         AS LA ON LA~KUNNR EQ CA~ID_LOCAL_DESCARGA
      LEFT JOIN ZSDT0001OD   AS OD ON OD~ID_ORDEM EQ CA~ID_ORDEM
      LEFT JOIN ZSDT0001CL   AS CL ON CL~ID_CARGA EQ CA~ID_CARGA AND CL~ID_CLASSIFICACAO EQ CA~ID_CLASSIFICACAO
      LEFT JOIN ZSDT0001RS   AS R1 ON R1~ID_CARGA EQ CL~ID_CARGA AND R1~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R1~TP_CARACTERISTICA EQ '01'
      LEFT JOIN ZSDT0001RS   AS R2 ON R2~ID_CARGA EQ CL~ID_CARGA AND R2~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R2~TP_CARACTERISTICA EQ '02'
      LEFT JOIN ZSDT0001RS   AS R3 ON R3~ID_CARGA EQ CL~ID_CARGA AND R3~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R3~TP_CARACTERISTICA EQ '03'
      LEFT JOIN ZSDT0001RS   AS R4 ON R4~ID_CARGA EQ CL~ID_CARGA AND R4~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R4~TP_CARACTERISTICA EQ '04'
      LEFT JOIN ZSDT0001RS   AS R5 ON R5~ID_CARGA EQ CL~ID_CARGA AND R5~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R5~TP_CARACTERISTICA EQ '05'
      LEFT JOIN ZSDT0001RS   AS R6 ON R6~ID_CARGA EQ CL~ID_CARGA AND R6~ID_CLASSIFICACAO EQ CL~ID_CLASSIFICACAO AND R6~TP_CARACTERISTICA EQ '06'
      LEFT JOIN LFA1         AS AG ON AG~LIFNR EQ CA~ID_AGENT_FRETE
      LEFT JOIN LFA1         AS PP ON PP~LIFNR EQ CA~ID_PROPRIETARIO
      LEFT JOIN LFA1         AS MT ON MT~LIFNR EQ CA~ID_MOTORISTA
      LEFT JOIN LFA1         AS OT ON OT~LIFNR EQ CL~ID_OUTRO_PARTIC
     INNER JOIN MAKT         AS MA ON MA~SPRAS EQ @SY-LANGU AND MA~MATNR EQ CA~ID_PRODUTO
     WHERE CA~TP_CARGA           IN @RG_TP_CARGA
       AND CA~ID_CARGA           IN @LC_FILTRO-IIDCARGA
       AND CA~ID_ORDEM           IN @LC_FILTRO-IIDORDEM
       AND CA~DT_MOVIMENTO       IN @LC_FILTRO-IDTMOVIM
       AND CA~NR_SAFRA           IN @LC_FILTRO-INRSAFRA
       AND CA~ID_BUKRS           IN @LC_FILTRO-IIDBUKRS
       AND CA~ID_BRANCH          IN @LC_FILTRO-IIDBRANC
       AND CA~ID_AGENT_FRETE     IN @LC_FILTRO-IIDAGENT
       AND CA~ID_LOCAL_COLETA    IN @LC_FILTRO-IIDCOLET
       AND CA~ID_LOCAL_DESTINO   IN @LC_FILTRO-IIDDESTI
       AND CA~ID_LOCAL_DESCARGA  IN @LC_FILTRO-IIDDESCA
       AND CA~ID_PRODUTO         IN @LC_FILTRO-IIDPRODU
       AND CA~DS_PLACA_TRATOR    IN @LC_FILTRO-IDSTRATO
       AND CA~DS_PLACA_REBOQ_1   IN @LC_FILTRO-IDSREBO1
       AND CA~DS_PLACA_REBOQ_2   IN @LC_FILTRO-IDSREBO2
       AND CA~DS_PLACA_REBOQ_3   IN @LC_FILTRO-IDSREBO3
       AND CA~ID_MOTORISTA       IN @LC_FILTRO-IIDMOTOR
       AND CA~NR_TICKET          IN @LC_FILTRO-INRTICKE
       AND CA~TP_STATUS          IN @LC_FILTRO-ITPSTATU
       AND CA~DT_ABERTURA        IN @LC_FILTRO-IDTABERT
       AND CA~HR_ABERTURA        IN @LC_FILTRO-IHRABERT
       AND CA~DT_FECHAMENTO      IN @LC_FILTRO-IDTFECHA
       AND CA~HR_FECHAMENTO      IN @LC_FILTRO-IHRFECHA
     ORDER BY CA~ID_CARGA.

    LOOP AT IT_TAB INTO DATA(WA_TAB).
      CLEAR: WA_RETORNO.
      WA_RETORNO-ID_CARGA          = WA_TAB-ID_CARGA.
      WA_RETORNO-ID_ORDEM          = WA_TAB-ID_ORDEM.
      WA_RETORNO-NR_ORDEM          = WA_TAB-NR_ORDEM.
      WA_RETORNO-DT_MOVIMENTO      = WA_TAB-DT_MOVIMENTO.
      WA_RETORNO-NR_SAFRA          = WA_TAB-NR_SAFRA.
      WA_RETORNO-ID_BUKRS          = WA_TAB-ID_BUKRS.
      WA_RETORNO-BUTXT             = WA_TAB-BUTXT.
      WA_RETORNO-ID_BRANCH         = WA_TAB-ID_BRANCH.
      WA_RETORNO-NAME              = WA_TAB-NAME.
      WA_RETORNO-ID_AGENT_FRETE    = WA_TAB-ID_AGENT_FRETE.
      WA_RETORNO-DS_AGENT_FRETE    = WA_TAB-DS_AGENT_FRETE.
      WA_RETORNO-ID_LOCAL_COLETA   = WA_TAB-ID_LOCAL_COLETA.
      WA_RETORNO-DS_LOCAL_COLETA   = WA_TAB-DS_LOCAL_COLETA.
      WA_RETORNO-ID_LOCAL_DESTINO  = WA_TAB-ID_LOCAL_DESTINO.
      WA_RETORNO-DS_LOCAL_DESTINO  = WA_TAB-DS_LOCAL_DESTINO.
      WA_RETORNO-ID_LOCAL_DESCARGA = WA_TAB-ID_LOCAL_DESCARGA.
      WA_RETORNO-DS_LOCAL_DESCARGA = WA_TAB-DS_LOCAL_DESCARGA.
      WA_RETORNO-TP_FRETE          = WA_TAB-TP_FRETE.
      WA_RETORNO-ID_PRODUTO        = WA_TAB-ID_PRODUTO.
      WA_RETORNO-DS_PRODUTO        = WA_TAB-DS_PRODUTO.
      WA_RETORNO-NM_PESO_BRUTO     = WA_TAB-NM_PESO_BRUTO.
      WA_RETORNO-NM_PESO_TARA      = WA_TAB-NM_PESO_TARA.
      WA_RETORNO-NM_PESO_SUBTOTAL  = WA_TAB-NM_PESO_SUBTOTAL.
      WA_RETORNO-NM_PESO_DESCONTOS = WA_TAB-NM_PESO_DESCONTOS.
      WA_RETORNO-NM_PESO_LIQUIDO   = WA_TAB-NM_PESO_LIQUIDO.
      WA_RETORNO-DS_PLACA_TRATOR   = WA_TAB-DS_PLACA_TRATOR.
      WA_RETORNO-ID_PROPRIETARIO   = WA_TAB-ID_PROPRIETARIO.
      WA_RETORNO-DS_PROPRIETARIO   = WA_TAB-DS_PROPRIETARIO.
      WA_RETORNO-DS_PLACA_REBOQ_1  = WA_TAB-DS_PLACA_REBOQ_1.
      WA_RETORNO-DS_PLACA_REBOQ_2  = WA_TAB-DS_PLACA_REBOQ_2.
      WA_RETORNO-DS_PLACA_REBOQ_3  = WA_TAB-DS_PLACA_REBOQ_3.
      WA_RETORNO-ID_MOTORISTA      = WA_TAB-ID_MOTORISTA.
      WA_RETORNO-DS_MOTORISTA      = WA_TAB-DS_MOTORISTA.
      WA_RETORNO-NR_TICKET         = WA_TAB-NR_TICKET.
      WA_RETORNO-IN_TRANSFERENCIA  = WA_TAB-IN_TRANSFERENCIA.
      WA_RETORNO-TP_STATUS         = WA_TAB-TP_STATUS.
      WA_RETORNO-DT_ABERTURA       = WA_TAB-DT_ABERTURA.
      WA_RETORNO-HR_ABERTURA       = WA_TAB-HR_ABERTURA.
      WA_RETORNO-US_ABERTURA       = WA_TAB-US_ABERTURA.
      WA_RETORNO-DT_FECHAMENTO     = WA_TAB-DT_FECHAMENTO.
      WA_RETORNO-HR_FECHAMENTO     = WA_TAB-HR_FECHAMENTO.
      WA_RETORNO-US_FECHAMENTO     = WA_TAB-US_FECHAMENTO.
      WA_RETORNO-DT_CONFERENCIA    = WA_TAB-DT_CONFERENCIA.
      WA_RETORNO-HR_CONFERENCIA    = WA_TAB-HR_CONFERENCIA.
      WA_RETORNO-US_CONFERENCIA    = WA_TAB-US_CONFERENCIA.
      WA_RETORNO-DT_CANCELAMENTO   = WA_TAB-DT_CANCELAMENTO.
      WA_RETORNO-HR_CANCELAMENTO   = WA_TAB-HR_CANCELAMENTO.
      WA_RETORNO-US_CANCELAMENTO   = WA_TAB-US_CANCELAMENTO.

      WA_RETORNO-ID_CLASSIFICACAO       = WA_TAB-ID_CLASSIFICACAO.
      WA_RETORNO-IN_GMO                 = WA_TAB-IN_GMO.
      WA_RETORNO-NR_RESULTADO_01        = WA_TAB-NR_RESULTADO_01.
      WA_RETORNO-NR_RESULTADO_02        = WA_TAB-NR_RESULTADO_02.
      WA_RETORNO-NR_RES_RR1_RR2         = WA_TAB-NR_RES_RR1_RR2.
      WA_RETORNO-IN_GMO_03              = WA_TAB-IN_GMO_03.
      WA_RETORNO-IN_SRR_ORIGEM_PARTIC   = WA_TAB-IN_SRR_ORIGEM_PARTIC.
      WA_RETORNO-ID_OUTRO_PARTIC        = WA_TAB-ID_OUTRO_PARTIC.
      WA_RETORNO-DS_OUTRO_PARTIC        = WA_TAB-DS_OUTRO_PARTIC.
      WA_RETORNO-IN_SRR_DECLARADO       = WA_TAB-IN_SRR_DECLARADO.
      WA_RETORNO-IN_TESTE_SRR           = WA_TAB-IN_TESTE_SRR.
      WA_RETORNO-IN_SRR_DECLARADO_2     = WA_TAB-IN_SRR_DECLARADO_2.
      WA_RETORNO-IN_TESTE_SRR_2         = WA_TAB-IN_TESTE_SRR_2.
      WA_RETORNO-TP_TRANSGENIA          = WA_TAB-TP_TRANSGENIA.

      WA_RETORNO-NR_PERC_UMI   = WA_TAB-NR_PERC_UMI.
      WA_RETORNO-NR_PERC_IMP   = WA_TAB-NR_PERC_IMP.
      WA_RETORNO-NR_PERC_AVA   = WA_TAB-NR_PERC_AVA.
      WA_RETORNO-NR_PERC_ARD   = WA_TAB-NR_PERC_ARD.
      WA_RETORNO-NR_PERC_QUE   = WA_TAB-NR_PERC_QUE.
      WA_RETORNO-NR_PERC_ESV   = WA_TAB-NR_PERC_ESV.
      WA_RETORNO-NR_QTDE_UMI   = WA_TAB-NR_QTDE_UMI.
      WA_RETORNO-NR_QTDE_IMP   = WA_TAB-NR_QTDE_IMP.
      WA_RETORNO-NR_QTDE_AVA   = WA_TAB-NR_QTDE_AVA.
      WA_RETORNO-NR_QTDE_ARD   = WA_TAB-NR_QTDE_ARD.
      WA_RETORNO-NR_QTDE_QUE   = WA_TAB-NR_QTDE_QUE.
      WA_RETORNO-NR_QTDE_ESV   = WA_TAB-NR_QTDE_ESV.
      APPEND WA_RETORNO TO LC_RETORNO.
    ENDLOOP.

    CHECK LC_RETORNO[] IS NOT INITIAL.

    E_REGISTROS = LC_RETORNO.
    E_PESQUISOU = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_BLOQUEAR_ROMANEIOS_SAIDA.

    DATA: CK_ERRO    TYPE C LENGTH 1,
          TB_LIBERAR TYPE ZDE_ZSDT0001OVRO_T.

    R_CARGA = ME.
    CK_ERRO = ABAP_FALSE.
    CLEAR: TB_LIBERAR.

    ME->ZIF_CARGA~GET_ROMANEIO_SAIDA(
        EXPORTING
          I_ID_CARGA  = ME->ZIF_CARGA~CARGA-ID_CARGA    " Id. da Carga
        IMPORTING
          E_ROMANEIOS = ME->ZIF_CARGA~ROMANEIOS ).   " Tabela de Romaneios

    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS INTO DATA(WA_ROMANEIOS).
      IF CK_ERRO EQ ABAP_TRUE.
        CONTINUE.
      ENDIF.
      TRY .
          ME->ZIF_CARGA~SET_ENQUEUE_ROMANEIO( I_CHAVE_REFERENCIA = WA_ROMANEIOS-CH_REFERENCIA_SAI ).
          APPEND WA_ROMANEIOS TO TB_LIBERAR.
        CATCH ZCX_CARGA INTO DATA(ERRO).
          CK_ERRO = ABAP_TRUE.
          ERRO->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'S' ).
          MESSAGE ID SY-MSGID TYPE 'E' NUMBER SY-MSGNO INTO DATA(MTEXT) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDTRY.
    ENDLOOP.

    IF CK_ERRO EQ ABAP_TRUE.
      LOOP AT TB_LIBERAR INTO WA_ROMANEIOS.
        ME->ZIF_CARGA~SET_DENQUEUE_ROMANEIO( I_CHAVE_REFERENCIA = WA_ROMANEIOS-CH_REFERENCIA_SAI ).
      ENDLOOP.
      ME->ZIF_CARGA~GERA_ERRO_GERAL( I_TEXTO = MTEXT ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_DENQUEUE.

    R_CARGA = ME.

    CHECK ME->ZIF_CARGA~AT_NAO_GERAR_BLOQUEIOS EQ ABAP_FALSE.

    CALL FUNCTION 'ZDENQUEUE_CARGA'
      EXPORTING
        ID_CARGA = I_CARGA.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_DENQUEUE_ROMANEIO.

    R_CARGA = ME.

    CALL FUNCTION 'DEQUEUE_EZSDT0001'
      EXPORTING
        CH_REFERENCIA = I_CHAVE_REFERENCIA.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_DESBLOQUEAR_ROMANEIOS_SAID.

    R_CARGA = ME.

    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS INTO DATA(WA_ROMANEIOS).
      ME->ZIF_CARGA~SET_DENQUEUE_ROMANEIO( I_CHAVE_REFERENCIA = WA_ROMANEIOS-CH_REFERENCIA_SAI ).
    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_EMITIR_DOC_SAIDAS.

    R_CARGA = ME.

    TRY .
        ME->ZIF_CARGA~GET_CK_SAIDA_AUTOMATICA( ).
      CATCH ZCX_CARGA.
        EXIT.
    ENDTRY.

    "Bloquear Romaneios de Saída
    ME->ZIF_CARGA~SET_BLOQUEAR_ROMANEIOS_SAIDA(

    "Verificar Bloqueio de Material e Aguarda Bloqueio Existente
    "  )->VERIF_BLOQ_LOTE_MATERIAL_WAIT(

    "Emitir Remessa
      )->SET_GERAR_REMESSAS(

    "Emitir Fatura
      )->SET_GERAR_FATURA( IMPORTING E_LES_ROM = DATA(E_LES_ROM)

    "Emitir Doc.Transporte
      )->SET_GERAR_TRANSPORTE( EXPORTING I_LES_ROM = E_LES_ROM

    "Emitir Doc.Custo

    "Emitir Fatura do Frete

    "Enviar TipFrete

    "Autorizar CT-e

    "Creditar TipFrete

    "Autorizar MDF-e

      )->SET_DESBLOQUEAR_ROMANEIOS_SAID(

      ).

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ENQUEUE.

    R_CARGA = ME.

    CHECK ME->ZIF_CARGA~AT_NAO_GERAR_BLOQUEIOS EQ ABAP_FALSE.

    CALL FUNCTION 'ZENQUEUE_CARGA'
      EXPORTING
        ID_CARGA       = I_CARGA
      EXCEPTIONS
        FOREIGN_LOCK   = 1
        SYSTEM_FAILURE = 2
        OTHERS         = 3.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ENQUEUE_ROMANEIO.

    R_CARGA = ME.

    CALL FUNCTION 'ENQUEUE_EZSDT0001'
      EXPORTING
        CH_REFERENCIA  = I_CHAVE_REFERENCIA
      EXCEPTIONS
        FOREIGN_LOCK   = 1
        SYSTEM_FAILURE = 2
        OTHERS         = 3.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_CARGA
        EXPORTING
          TEXTID = VALUE #( MSGID = SY-MSGID MSGNO = SY-MSGNO ATTR1 = CONV #( SY-MSGV1 ) ATTR2 = CONV #( SY-MSGV2 ) ATTR3 = CONV #( SY-MSGV3 ) ATTR4 = CONV #( SY-MSGV4 ) )
          MSGID  = SY-MSGID
          MSGNO  = SY-MSGNO
          MSGTY  = 'E'
          MSGV1  = SY-MSGV1
          MSGV2  = SY-MSGV2
          MSGV3  = SY-MSGV3
          MSGV4  = SY-MSGV4.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_GERAR_FATURA.

    DATA: IT_SAIDA TYPE ZDE_LES_SAIDA_ZSDT0001_T,
          WA_SAIDA TYPE ZDE_LES_SAIDA_ZSDT0001.

    R_CARGA = ME.

    ME->ZIF_CARGA~GET_ROMANEIO_SAIDA(
        EXPORTING
          I_ID_CARGA  = ME->ZIF_CARGA~CARGA-ID_CARGA    " Id. da Carga
        IMPORTING
          E_ROMANEIOS = ME->ZIF_CARGA~ROMANEIOS ).   " Tabela de Romaneios

    LOOP AT ME->ZIF_CARGA~ROMANEIOS INTO DATA(WA_ZSDT0001) WHERE TP_MOVIMENTO EQ 'S'.
      CLEAR: WA_SAIDA.
      WA_SAIDA-BUKRS           = WA_ZSDT0001-BUKRS.
      WA_SAIDA-BRANCH          = WA_ZSDT0001-BRANCH.
      WA_SAIDA-CH_REFERENCIA   = WA_ZSDT0001-CH_REFERENCIA.
      WA_SAIDA-DT_MOVIMENTO    = WA_ZSDT0001-DT_MOVIMENTO.
      WA_SAIDA-NR_ROMANEIO     = WA_ZSDT0001-NR_ROMANEIO.
      WA_SAIDA-NRO_CG          = WA_ZSDT0001-NRO_CG.
      WA_SAIDA-PLACA_CAV       = WA_ZSDT0001-PLACA_CAV.
      WA_SAIDA-REMESSA         = WA_ZSDT0001-DOC_REM.
      WA_SAIDA-FATURA          = WA_ZSDT0001-FATURA_PROD.
      WA_SAIDA-LIFNR           = ME->ZIF_CARGA~CARGA-ID_AGENT_FRETE.
      WA_SAIDA-ID_CARGA        = WA_ZSDT0001-ID_CARGA.

      IF WA_ZSDT0001-DOC_REM IS INITIAL.
        CONTINUE.
      ENDIF.

      IF WA_ZSDT0001-REGION IS NOT INITIAL.
        WA_SAIDA-REGION = WA_ZSDT0001-REGION.
      ELSE.
        SELECT SINGLE CD_UF FROM ZLEST0002 INTO @DATA(V_CD_UF) WHERE PC_VEICULO EQ @WA_ZSDT0001-PLACA_CAV.
        IF SY-SUBRC = 0.
          WA_SAIDA-REGION = V_CD_UF.
        ENDIF.
      ENDIF.

      WA_SAIDA-ST_PROC = WA_ZSDT0001-ST_PROC.
      CLEAR WA_SAIDA-ICON.

      "Ordem Venda
      SELECT SINGLE * INTO @DATA(WA_VBAK)
        FROM VBAK
       WHERE VBELN EQ @WA_ZSDT0001-VBELN.

      IF SY-SUBRC IS INITIAL.

        SELECT * INTO TABLE @DATA(IT_VBPA)
          FROM VBPA
         WHERE VBELN EQ @WA_ZSDT0001-VBELN
           AND PARVW IN ('LR','SP','PC','Z1').

        WA_SAIDA-TIPO = 'O'.

        "Ponto de coleta ordem
        READ TABLE IT_VBPA INTO DATA(WA_VBPA_CO) WITH KEY PARVW = 'PC'.
        IF SY-SUBRC IS INITIAL.
          WA_SAIDA-LIFNR_C      = WA_VBPA_CO-LIFNR.
          WA_SAIDA-PONTO_COLETA = WA_VBPA_CO-LIFNR.
          SELECT SINGLE * INTO @DATA(WA_LFA1_CO)
            FROM LFA1
           WHERE LIFNR EQ @WA_VBPA_CO-LIFNR.
          WA_SAIDA-NAME1_C = WA_LFA1_CO-NAME1.
          WA_SAIDA-LZONEA  = WA_LFA1_CO-LZONE.
        ENDIF.

        "Zona Local de Entrega Ordem
        READ TABLE IT_VBPA INTO DATA(WA_VBPA_LR) WITH KEY PARVW = 'LR'.
        IF SY-SUBRC IS INITIAL.

          WA_SAIDA-LOCAL_ENTREGA = WA_VBPA_LR-KUNNR.

          SELECT SINGLE * INTO @DATA(WA_KNA1_LR)
            FROM KNA1
           WHERE KUNNR EQ @WA_VBPA_LR-KUNNR.

          IF SY-SUBRC IS INITIAL.
            WA_SAIDA-NAME1  = WA_KNA1_LR-NAME1.
            WA_SAIDA-LZONEZ = WA_KNA1_LR-LZONE.
          ENDIF.

        ENDIF.

        SELECT SINGLE * INTO @DATA(WA_TVAKT)
          FROM TVAKT
         WHERE AUART EQ @WA_VBAK-AUART
           AND SPRAS EQ @SY-LANGU.

        CONCATENATE WA_VBAK-AUART '-' WA_TVAKT-BEZEI INTO WA_SAIDA-OPERACAO.

        SELECT SINGLE * INTO @DATA(WA_VBKD)
          FROM VBKD
         WHERE VBELN EQ @WA_ZSDT0001-VBELN
           AND POSNR EQ '000000'.

        IF SY-SUBRC IS NOT INITIAL.
          CONTINUE.
        ENDIF.
        WA_SAIDA-INCO1 = WA_VBKD-INCO1.
        WA_SAIDA-VBELN = WA_ZSDT0001-VBELN.

        SELECT SINGLE * INTO @DATA(WA_ZLEST0002)
          FROM ZLEST0002
         WHERE PC_VEICULO EQ @WA_ZSDT0001-PLACA_CAV.

        IF SY-SUBRC IS INITIAL.
          CASE WA_ZLEST0002-AGREGADO.
            WHEN '1'.
              WA_SAIDA-ADD01 = '0000000001'.
            WHEN OTHERS.
              WA_SAIDA-ADD01 = '0000000002'.
          ENDCASE.
        ENDIF.

        SELECT SINGLE * INTO @DATA(WA_VBAP)
          FROM VBAP
         WHERE VBELN EQ @WA_ZSDT0001-VBELN.

        IF SY-SUBRC IS INITIAL.
          WA_SAIDA-ROUTE = WA_VBAP-ROUTE.
        ENDIF.

        SELECT SINGLE * INTO @DATA(WA_ZSDT0011)
          FROM ZSDT0011
         WHERE TP_MOVIMENTO EQ 'S'
           AND AUART        EQ @WA_VBAK-AUART.

        IF SY-SUBRC IS NOT INITIAL.
          CONTINUE.
        ENDIF.

        WA_SAIDA-SHTYP = WA_ZSDT0011-SHTYP.

        IF ( 'ZRDC_ZRFL' CS WA_ZSDT0011-AUART ) AND ( WA_ZSDT0011-AUART IS NOT INITIAL ).
          READ TABLE IT_VBPA INTO DATA(WA_VBPA_Z1) WITH KEY PARVW = 'Z1'.
          CHECK SY-SUBRC IS INITIAL.

          SELECT SINGLE * INTO @DATA(WA_LFA1_Z1)
            FROM LFA1
           WHERE LIFNR EQ @WA_VBPA_Z1-LIFNR.

          IF WA_KNA1_LR-STCD1 NE WA_LFA1_Z1-STCD1.
            WA_SAIDA-SHTYP = 'Z001'.
          ELSE.
            WA_SAIDA-SHTYP = 'Z004'.
          ENDIF.
        ENDIF.

        APPEND WA_SAIDA TO IT_SAIDA.

      ENDIF.
    ENDLOOP.

    CALL FUNCTION 'Z_EMITIR_FATURA_ROMANEIO'
      EXPORTING
        IT_ROMANEIOS_SAIDA     = IT_SAIDA
      CHANGING
        IT_ROMANEIOS_SAIDA_OUT = IT_SAIDA.

    COMMIT WORK.

    LOOP AT IT_SAIDA ASSIGNING FIELD-SYMBOL(<FT_SAIDA>) WHERE DANFE IS NOT INITIAL.

      TRY .
          "Autorizar Documento Fiscal Eletrônico
          ZCL_NFE=>ZIF_DOC_ELETRONICO~GET_INSTANCE(
             EXPORTING
               I_DOCNUM  = CONV #( <FT_SAIDA>-DANFE )
           )->SET_BLOQUEAR(
             EXPORTING
               I_BLOQUEAR = ABAP_FALSE
           )->SET_REGISTRO(
             EXPORTING
               I_DOCNUM = CONV #( <FT_SAIDA>-DANFE )
           )->SET_AUTORIZAR(
             EXPORTING
               I_AGUARDAR         = ABAP_TRUE  " Aguardar Resposta
               I_CICLOS           = 90   " Quantidade de Ciclos
               I_SEGUNDOS         = 5   " Quantidade de Segundos do Ciclo
           )->GET_CK_AUTORIZADO_USO(
           )->SET_CLEAR(
           ).

          "Atualiza Romaneio
          UPDATE ZSDT0001
             SET ST_PROC     = '03'
                 NRO_NF_PROD = <FT_SAIDA>-DANFE
           WHERE CH_REFERENCIA EQ WA_SAIDA-CH_REFERENCIA.

        CATCH ZCX_DOC_ELETRONICO INTO DATA(EX_DOC_ELETRONICO).
          EX_DOC_ELETRONICO->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'S' I_MSGTY_DISPLAY = 'S' ).
          MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO INTO DATA(MTEXT) WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
          ME->ZIF_CARGA~GERA_ERRO_GERAL( I_TEXTO = MTEXT ).
      ENDTRY.

    ENDLOOP.

    E_LES_ROM[] = IT_SAIDA[].

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_GERAR_REMESSAS.

    R_CARGA = ME.

    DATA: R_DELIVERY TYPE REF TO ZCL_AVISO_RECEBIMENTO,
          LC_XBLNR   TYPE LIKP-XBLNR,
          LC_TEXTO   TYPE STRING,
          LC_ERRO    TYPE C LENGTH 1.

    LC_ERRO = ABAP_FALSE.

    CREATE OBJECT R_DELIVERY.

    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS INTO DATA(WA_ROMANEIO_SAIDA).

      IF LC_ERRO EQ ABAP_TRUE.
        CONTINUE.
      ENDIF.

      IF WA_ROMANEIO_SAIDA-CH_REFERENCIA_SAI IS INITIAL.
        LC_ERRO = ABAP_TRUE.
      ENDIF.

      READ TABLE ME->ZIF_CARGA~ROMANEIOS WITH KEY CH_REFERENCIA = WA_ROMANEIO_SAIDA-CH_REFERENCIA_SAI INTO DATA(WA_ROMANEIO).
      IF SY-SUBRC IS NOT INITIAL.
        LC_ERRO = ABAP_TRUE.
        CONTINUE.
      ENDIF.

      IF WA_ROMANEIO-DOC_REM IS NOT INITIAL.
        CONTINUE.
      ENDIF.

      LC_XBLNR = WA_ROMANEIO-CH_REFERENCIA.
      SELECT SINGLE * FROM LIKP INTO @DATA(WA_LIKP)
       WHERE XBLNR     EQ @LC_XBLNR
         AND SPE_LOEKZ EQ @ABAP_FALSE.

      IF SY-SUBRC IS INITIAL.
        UPDATE ZSDT0001
           SET DOC_REM = WA_LIKP-VBELN
               ST_PROC = '02'
         WHERE CH_REFERENCIA = WA_ROMANEIO-CH_REFERENCIA.
        MESSAGE W230 WITH WA_ROMANEIO-NR_ROMANEIO WA_LIKP-VBELN.
      ENDIF.

      ME->ZIF_CARGA~VERIF_BLOQ_LOTE_MATERIAL_WAIT( ).

      IF SY-BATCH EQ ABAP_FALSE.
        CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
          EXPORTING
            PERCENTAGE = 0
            TEXT       = |Criando documento de remessa para o romaneio { CONV I( WA_ROMANEIO-NR_ROMANEIO ) }.|.
      ENDIF.

      SET PARAMETER ID 'Z_MY_PARAMETER_1' FIELD WA_ROMANEIO-CH_REFERENCIA.

      SUBMIT ZSDI0009 WITH P_VBELN = WA_ROMANEIO-VBELN
                      WITH P_LIFNR = ME->ZIF_CARGA~CARGA-ID_AGENT_FRETE
                      WITH P_PESO  = WA_ROMANEIO-PESO_LIQ_POS_RET
      AND RETURN.

      GET PARAMETER ID 'Z_MY_PARAMETER_2' FIELD WA_ROMANEIO-DOC_REM.

      IF WA_ROMANEIO-DOC_REM IS NOT INITIAL AND WA_ROMANEIO-DOC_REM NE '9999999999'.
        UPDATE ZSDT0001
           SET DOC_REM       = WA_ROMANEIO-DOC_REM
               ST_PROC       = '02'
               AGENTE_FRETE  = ME->ZIF_CARGA~CARGA-ID_AGENT_FRETE
         WHERE CH_REFERENCIA = WA_ROMANEIO-CH_REFERENCIA.

        MESSAGE S231 WITH WA_ROMANEIO-NR_ROMANEIO WA_ROMANEIO-DOC_REM.
      ELSE.
        LC_ERRO = ABAP_TRUE.
      ENDIF.

    ENDLOOP.

    CLEAR: R_DELIVERY.

    IF LC_ERRO EQ ABAP_TRUE.
      ME->ZIF_CARGA~GERA_ERRO_GERAL( EXPORTING I_TEXTO = 'Ocorreu um erro ao tentar gerar Remessa!' ).
    ENDIF.

  ENDMETHOD.


  METHOD zif_carga~set_gerar_transporte.

    DATA: it_saida TYPE zde_les_saida_zsdt0001_t,
          wa_saida TYPE zde_les_saida_zsdt0001.

    r_carga = me.

    me->zif_carga~get_romaneio_saida(
        EXPORTING
          i_id_carga  = me->zif_carga~carga-id_carga    " Id. da Carga
        IMPORTING
          e_romaneios = me->zif_carga~romaneios ).   " Tabela de Romaneios

    LOOP AT me->zif_carga~romaneios INTO DATA(wa_zsdt0001) WHERE tp_movimento EQ 'S' AND nro_nf_prod IS NOT INITIAL.

      TRY .

          "Autorizar Documento Fiscal Eletrônico
          zcl_nfe=>zif_doc_eletronico~get_instance(
             EXPORTING
               i_docnum  = wa_zsdt0001-nro_nf_prod
           )->set_registro(
             EXPORTING
               i_docnum = wa_zsdt0001-nro_nf_prod
           )->get_ck_autorizado_uso(
           )->set_clear(
           ).

          CALL FUNCTION 'Z_EMITIR_TRANSP_ROMANEIO'
            EXPORTING
              i_romaneio_atual       = wa_zsdt0001
              it_romaneios_saida     = i_les_rom
            CHANGING
              it_romaneios_saida_out = i_les_rom.

*          "Atualiza Romaneio
*          UPDATE ZSDT0001
*             SET ST_PROC     = '03'
*                 NRO_NF_PROD = <FT_SAIDA>-DANFE
*           WHERE CH_REFERENCIA EQ WA_SAIDA-CH_REFERENCIA.

        CATCH zcx_doc_eletronico INTO DATA(ex_doc_eletronico).
          ex_doc_eletronico->published_erro( EXPORTING i_msgty = 'S' i_msgty_display = 'S' ).
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno INTO DATA(mtext) WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          me->zif_carga~gera_erro_geral( i_texto = mtext ).
      ENDTRY.

    ENDLOOP.

    LOOP AT i_les_rom ASSIGNING FIELD-SYMBOL(<ft_saida>) WHERE dacte IS NOT INITIAL.

      TRY .
          "Autorizar Documento Fiscal Eletrônico
          zcl_cte=>zif_doc_eletronico~get_instance(
             EXPORTING
               i_docnum  = CONV #( <ft_saida>-dacte )
           )->set_bloquear(
             EXPORTING
               i_bloquear = abap_false
           )->set_registro(
             EXPORTING
               i_docnum = CONV #( <ft_saida>-dacte )
           )->set_autorizar(
             EXPORTING
               i_aguardar         = abap_true  " Aguardar Resposta
               i_ciclos           = 90   " Quantidade de Ciclos
               i_segundos         = 5   " Quantidade de Segundos do Ciclo
           )->get_ck_autorizado_uso(
           )->set_autoriza_mdfe(
             EXPORTING
               i_acao = zif_doc_eletronico=>at_acao_mdfe_autoriza
           )->set_autoriza_viagem_tip_frete(
             EXPORTING
               i_acao = zif_doc_eletronico=>at_acao_viagem_frete_autorizar
           )->set_clear(
           ).

          "Atualiza Romaneio
          UPDATE zsdt0001
             SET st_proc      = '99'
                 nro_nf_frete = <ft_saida>-dacte
           WHERE ch_referencia EQ <ft_saida>-ch_referencia.

        CATCH zcx_doc_eletronico INTO ex_doc_eletronico.
          ex_doc_eletronico->published_erro( EXPORTING i_msgty = 'S' i_msgty_display = 'S' ).
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno INTO mtext WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          me->zif_carga~gera_erro_geral( i_texto = mtext ).
      ENDTRY.

    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ID_CARGA.

    R_CARGA = ME.

    ME->ZIF_CARGA~CARGA-ID_CARGA         = I_ID_CARGA.
    ME->ZIF_CARGA~CLASSIFICACAO-ID_CARGA = I_ID_CARGA.

    ME->ZIF_CARGA~SET_ENQUEUE( I_CARGA = ME->ZIF_CARGA~CARGA-ID_CARGA ).

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_ID_CLASSIFICACAO.

    R_CARGA = ME.

    ME->ZIF_CARGA~CLASSIFICACAO-ID_CLASSIFICACAO = I_ID_CLASSIFICACAO.
    ME->ZIF_CARGA~CARGA-ID_CLASSIFICACAO         = I_ID_CLASSIFICACAO.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_REGISTRO.

    R_CARGA = ME.

    ME->ZIF_CARGA~LIMPAR_REGISTRO( ).

    IF ME->ZIF_CARGA~CARGA-ID_CARGA IS NOT INITIAL AND I_NO_ENQUEUE EQ ABAP_FALSE.
      ME->ZIF_CARGA~SET_DENQUEUE( I_CARGA = ME->ZIF_CARGA~CARGA-ID_CARGA ).
    ENDIF.

    ME->ZIF_CARGA~GET_CABECALHO_CARGA( EXPORTING I_ID_CARGA = I_ID_CARGA IMPORTING E_ZSDT0001CG = ME->ZIF_CARGA~CARGA ).

    SELECT SINGLE * INTO ME->ZIF_CARGA~CLASSIFICACAO
      FROM ZSDT0001CL WHERE ID_CARGA EQ I_ID_CARGA.

    SELECT * INTO TABLE ME->ZIF_CARGA~ORDEM_VENDA
      FROM ZSDT0001OV WHERE ID_CARGA EQ I_ID_CARGA.

    SELECT * INTO TABLE ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS
      FROM ZSDT0001OVRO WHERE ID_CARGA EQ I_ID_CARGA.

    IF ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS IS NOT INITIAL.
      SELECT * INTO TABLE ME->ZIF_CARGA~ROMANEIOS
        FROM ZSDT0001
         FOR ALL ENTRIES IN ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS
       WHERE CH_REFERENCIA EQ ME->ZIF_CARGA~ORDEM_VENDA_ROMANEIOS-CH_REFERENCIA_SAI.
    ENDIF.

    SELECT * INTO TABLE ME->ZIF_CARGA~PEDIDO_COMPRA
      FROM ZSDT0001EK WHERE ID_CARGA EQ I_ID_CARGA.

    SELECT * INTO TABLE ME->ZIF_CARGA~RESULTADO
      FROM ZSDT0001RS WHERE ID_CARGA EQ I_ID_CARGA AND ID_CLASSIFICACAO EQ ME->ZIF_CARGA~CARGA-ID_CLASSIFICACAO.

    IF I_NO_ENQUEUE EQ ABAP_FALSE.
      ME->ZIF_CARGA~SET_ENQUEUE( I_CARGA = ME->ZIF_CARGA~CARGA-ID_CARGA ).
    ENDIF.

    ME->ZIF_CARGA~SET_TIPO_FRETE_ORDEM_VENDA( ).

    ME->ZIF_CARGA~CK_ALTEROU             = ABAP_FALSE.
    ME->ZIF_CARGA~CK_DIGITADO_UMIDADE    = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_IMPUREZA   = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_ARDIDO     = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_AVARIADO   = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_QUEBRADO   = ABAP_TRUE.
    ME->ZIF_CARGA~CK_DIGITADO_ESVERDEADO = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CARGA~SET_TIPO_FRETE_ORDEM_VENDA.

    DATA: I_TEXTO TYPE STRING.

    R_INSTANCE = ME.

    DESCRIBE TABLE ME->ZIF_CARGA~ORDEM_VENDA LINES DATA(QT_ORDEM).

*    "Pedido de Compra
*    LOOP AT ME->ZIF_CARGA~PEDIDO_COMPRA INTO DATA(WA_PEDIDO).
*      TRY .
*          ME->ZIF_CARGA~GET_INFO_PEDIDO_COMPRA( EXPORTING I_PEDIDO_COMPRA = WA_PEDIDO-NR_PEDIDO_COMPRA IMPORTING E_PEDIDO = DATA(E_PEDIDO) ).
*          ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA = E_PEDIDO-DS_TIPO_FRETE.
*        CATCH ZCX_CARGA INTO DATA(ZCX_CARGA).
*          IF QT_ORDEM EQ 0.
*            MESSAGE ID ZCX_CARGA->MSGID TYPE 'S' NUMBER ZCX_CARGA->MSGNO WITH ZCX_CARGA->MSGV1 ZCX_CARGA->MSGV2 ZCX_CARGA->MSGV3 ZCX_CARGA->MSGV4 INTO I_TEXTO.
*            ME->GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).
*          ENDIF.
*      ENDTRY.
*    ENDLOOP.

    "Ordem de Venda
    LOOP AT ME->ZIF_CARGA~ORDEM_VENDA INTO DATA(WA_ORDEM_VENDA).
      TRY .
          ZCL_ORDEM_VENDA=>ZIF_ORDEM_VENDA~GET_INSTANCE(
                   )->SET_ORDEM_VENDA( I_VBELN = WA_ORDEM_VENDA-NR_ORDEM_VENDA
                   )->GET_TIPO_FRETE( IMPORTING  E_TIPO_FRETE = ME->ZIF_CARGA~AT_TIPO_FRETE_ORDEM_VENDA
                   ).

        CATCH ZCX_ORDEM_VENDA INTO DATA(EX_ORDEM_VENDA).
          MESSAGE ID EX_ORDEM_VENDA->MSGID TYPE 'S'
           NUMBER EX_ORDEM_VENDA->MSGNO
             WITH EX_ORDEM_VENDA->MSGV1 EX_ORDEM_VENDA->MSGV2 EX_ORDEM_VENDA->MSGV3 EX_ORDEM_VENDA->MSGV4
             INTO I_TEXTO.
          ME->ZIF_CARGA~GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).
      ENDTRY.
    ENDLOOP.

  ENDMETHOD.


  METHOD ZIF_CARGA~VALIDAR_REGISTRO.

    R_CARGA = ME.

    E_VALIDOU = ABAP_TRUE.

  ENDMETHOD.


  METHOD ZIF_CARGA~VALIDA_ATRIBUTO_ALTERAVEL.

    R_CARGA = ME.

    E_PERMITIDO = ABAP_FALSE.

  ENDMETHOD.


  METHOD ZIF_CARGA~VERIF_BLOQ_LOTE_MATERIAL_WAIT.

    DATA: I_GNAME TYPE SEQG3-GNAME,
          I_GARG  TYPE SEQG3-GARG,
          IT_ENQ  TYPE TABLE OF SEQG3.

    DATA: I_TEXTO       TYPE STRING,
          I_TEMPO       TYPE I,
          LC_TEXTO      TYPE STRING,
          LC_NUMERO     TYPE CHAR30,
          I_TEXT_WAIT   TYPE STRING,
          LC_ID_PRODUTO TYPE MATNR.

    R_CARGA = ME.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = ME->ZIF_CARGA~CARGA-ID_PRODUTO
      IMPORTING
        OUTPUT = LC_ID_PRODUTO.

    I_GNAME = 'MCH1'.
    CONCATENATE SY-MANDT ME->ZIF_CARGA~CARGA-ID_PRODUTO ME->ZIF_CARGA~CARGA-NR_SAFRA INTO I_GARG.

    CALL FUNCTION 'ENQUEUE_READ'
      EXPORTING
        GCLIENT               = SY-MANDT
        GNAME                 = I_GNAME
        GARG                  = I_GARG
      TABLES
        ENQ                   = IT_ENQ
      EXCEPTIONS
        COMMUNICATION_FAILURE = 1
        SYSTEM_FAILURE        = 2
        OTHERS                = 3.

    IF SY-SUBRC IS INITIAL AND IT_ENQ[] IS NOT INITIAL.
      READ TABLE IT_ENQ INTO DATA(WA_ENQ) INDEX 1.
      IF SY-BATCH NE ABAP_TRUE.
        CONCATENATE 'Aguarde, Lote:' ME->ZIF_CARGA~CARGA-NR_SAFRA 'Material:' LC_ID_PRODUTO 'bloqueados!' WA_ENQ-GUNAME WA_ENQ-GTCODE INTO I_TEXT_WAIT SEPARATED BY SPACE.

        LC_NUMERO = 0.
        LC_TEXTO  = I_TEXT_WAIT && ' Segundos: ' && LC_NUMERO.
        CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
          EXPORTING
            PERCENTAGE = 0
            TEXT       = LC_TEXTO.
      ENDIF.
    ENDIF.

    CHECK IT_ENQ[] IS NOT INITIAL.

    I_TEMPO = 0.

    WHILE IT_ENQ[] IS NOT INITIAL.

      WAIT UP TO 1 SECONDS.
      ADD 1 TO I_TEMPO.

      CALL FUNCTION 'TH_REDISPATCH'.

      WRITE I_TEMPO TO LC_NUMERO.
      CONDENSE LC_NUMERO NO-GAPS.

      IF SY-BATCH NE ABAP_TRUE.
        READ TABLE IT_ENQ INTO WA_ENQ INDEX 1.
        CONCATENATE 'Aguarde, Lote:' ME->ZIF_CARGA~CARGA-NR_SAFRA 'Material:' LC_ID_PRODUTO 'bloqueados!' WA_ENQ-GUNAME WA_ENQ-GTCODE INTO I_TEXT_WAIT SEPARATED BY SPACE.
        LC_TEXTO = I_TEXT_WAIT && ' Segundos: ' && LC_NUMERO.
        CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
          EXPORTING
            PERCENTAGE = 0
            TEXT       = LC_TEXTO.
      ENDIF.

      CLEAR: IT_ENQ[].
      CALL FUNCTION 'ENQUEUE_READ'
        EXPORTING
          GCLIENT               = SY-MANDT
          GNAME                 = I_GNAME
          GARG                  = I_GARG
        TABLES
          ENQ                   = IT_ENQ
        EXCEPTIONS
          COMMUNICATION_FAILURE = 1
          SYSTEM_FAILURE        = 2
          OTHERS                = 3.

    ENDWHILE.

  ENDMETHOD.


  method ZIF_CARGA~SET_ORDEM_CARREGAMENTO_EXT.

 r_carga = me.

  endmethod.
ENDCLASS.
