*&---------------------------------------------------------------------*
*&  Include           ZLESR0109_CLASS
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&  Include           ZMMR123_CLASS
*&---------------------------------------------------------------------*

CLASS LCL_ALV_TOOLBAR_0100 IMPLEMENTATION.
  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT C_ALV_TOOLBARMANAGER
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.
  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    IF ( P_G_ADT EQ ABAP_TRUE ) AND ( VG_PROC_LCTO EQ ABAP_TRUE ).
      CLEAR TY_TOOLBAR.
      TY_TOOLBAR-ICON      = ICON_ACTIVITY.
      TY_TOOLBAR-FUNCTION  = 'PRC_MOV'.
      TY_TOOLBAR-TEXT      = 'Processar Movimento'.
      TY_TOOLBAR-BUTN_TYPE = 0.
      APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    ENDIF.

    CLEAR TY_TOOLBAR.
    TY_TOOLBAR-ICON      = ICON_SYSTEM_UNDO.
    TY_TOOLBAR-FUNCTION  = 'CLEAR_ST'.
    TY_TOOLBAR-TEXT      = 'Reiniciar Status.'.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-FUNCTION     = 'ESTORNO_CTB'.
    TY_TOOLBAR-ICON         = ICON_STORNO.
    TY_TOOLBAR-BUTN_TYPE    = 0.
    TY_TOOLBAR-TEXT         = 'Estornar Ctb.'.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    TY_TOOLBAR-FUNCTION     = 'ATUALIZAR_DT_PGTO'.
    TY_TOOLBAR-ICON         = ICON_DATE.
    TY_TOOLBAR-BUTN_TYPE    = 0.
    TY_TOOLBAR-TEXT         = 'Dt.Pgto Financeiro'.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    CASE E_UCOMM.
      WHEN 'ESTORNO_CTB'.
        PERFORM F_ESTORNO_CTB.
      WHEN 'CLEAR_ST'.
        PERFORM F_REINICIAR_STATUS.
      WHEN 'PRC_MOV'.
        CLEAR: VG_DATA_PROC.
        CALL SCREEN 0101 STARTING AT 10 10 ENDING AT 40 05.
      WHEN 'ATUALIZAR_DT_PGTO'.
        CLEAR: WA_ZLEST0195-DT_PGTO, WA_ZLEST0195-OBSERV.
        CALL SCREEN 0102 STARTING AT 10 10 ENDING AT 55 12.

    ENDCASE.

  ENDMETHOD.                    "HANDLE_USER_COMMAND

ENDCLASS.                    "lcl_alv_toolbar IMPLEMENTATION


CLASS LCL_EVENT_HANDLER_0100 IMPLEMENTATION.


  METHOD CATCH_HOTSPOT.

    DATA: IT_RSPARAMS TYPE TABLE OF RSPARAMS,
          WA_RSPARAMS TYPE RSPARAMS.

    DATA: OPT     TYPE CTU_PARAMS,
          VL_LOTE TYPE ZGLT034-LOTE.

    CASE E_COLUMN_ID.
      WHEN 'LOTE'.

        READ TABLE IT_SAIDA_0100 INTO WA_SAIDA_0100 INDEX E_ROW_ID-INDEX.

        CHECK WA_SAIDA_0100-LOTE IS NOT INITIAL.

        REFRESH: IT_RSPARAMS.

        WA_RSPARAMS-SELNAME = 'P_BUKRS'.
        WA_RSPARAMS-KIND = 'P'.  "SELECT OPTIONS TO BE PASSED
        WA_RSPARAMS-SIGN = 'I'.
        WA_RSPARAMS-OPTION = 'EQ'.
        WA_RSPARAMS-LOW    = WA_SAIDA_0100-BUKRS.
        WA_RSPARAMS-HIGH   = WA_SAIDA_0100-BUKRS.
        APPEND WA_RSPARAMS TO IT_RSPARAMS.

        WA_RSPARAMS-SELNAME = 'P_LOTE'.
        WA_RSPARAMS-KIND = 'S'.  "SELECT OPTIONS TO BE PASSED
        WA_RSPARAMS-SIGN = 'I'.
        WA_RSPARAMS-OPTION = 'EQ'.
        WA_RSPARAMS-LOW    = WA_SAIDA_0100-LOTE.
        WA_RSPARAMS-HIGH   = WA_SAIDA_0100-LOTE.
        APPEND WA_RSPARAMS TO IT_RSPARAMS.

        SUBMIT ZGL018 WITH SELECTION-TABLE IT_RSPARAMS
                AND RETURN.

      WHEN 'DOC_LCTO'.

        CLEAR: WA_SAIDA_0100.
        READ TABLE IT_SAIDA_0100 INTO WA_SAIDA_0100 INDEX E_ROW_ID-INDEX.

        CHECK WA_SAIDA_0100-DOC_LCTO IS NOT INITIAL.

        CLEAR: VL_LOTE.
        SET PARAMETER ID 'BLN' FIELD WA_SAIDA_0100-DOC_LCTO.
        SET PARAMETER ID 'LOT' FIELD VL_LOTE.
        CALL TRANSACTION 'ZGL016' AND SKIP FIRST SCREEN.

      WHEN 'BELNR'.

        CLEAR: WA_SAIDA_0100.
        READ TABLE IT_SAIDA_0100 INTO WA_SAIDA_0100 INDEX E_ROW_ID-INDEX.

        CHECK WA_SAIDA_0100-BELNR IS NOT INITIAL.

        SET PARAMETER ID 'BLN' FIELD WA_SAIDA_0100-BELNR.
        SET PARAMETER ID 'BUK' FIELD WA_SAIDA_0100-BUKRS.
        SET PARAMETER ID 'GJR' FIELD WA_SAIDA_0100-DT_LCTO_CTB(4).
        CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.

      WHEN 'VLR_MOV'.

        CLEAR: WA_SAIDA_0100.
        READ TABLE IT_SAIDA_0100 INTO WA_SAIDA_0100 INDEX E_ROW_ID-INDEX.
        CHECK SY-SUBRC EQ 0.

        PERFORM F_RESUMO_DOCUMENTOS USING '1' WA_SAIDA_0100.

      WHEN 'SALDO_FRETE'.

        CLEAR: WA_SAIDA_0100.
        READ TABLE IT_SAIDA_0100 INTO WA_SAIDA_0100 INDEX E_ROW_ID-INDEX.
        CHECK SY-SUBRC EQ 0.

        PERFORM F_RESUMO_DOCUMENTOS USING '2' WA_SAIDA_0100.

      WHEN 'SALDO_OUTROS'.

        CLEAR: WA_SAIDA_0100.
        READ TABLE IT_SAIDA_0100 INTO WA_SAIDA_0100 INDEX E_ROW_ID-INDEX.
        CHECK SY-SUBRC EQ 0.

        PERFORM F_RESUMO_DOCUMENTOS USING '3' WA_SAIDA_0100.


      WHEN 'GER_ADT'.
        READ TABLE IT_SAIDA_0100 INTO WA_SAIDA_0100 INDEX E_ROW_ID-INDEX.

        CHECK ( SY-SUBRC = 0 ).

        IF WA_SAIDA_0100-BLOQ_PROC IS NOT INITIAL.
          MESSAGE WA_SAIDA_0100-MOTIVO_BLOQ TYPE 'S'.
          EXIT.
        ENDIF.

        SELECT SINGLE *
          FROM ZLEST0141 INTO @DATA(WL_0141)
         WHERE BUKRS = @WA_SAIDA_0100-BUKRS
           AND DATA  = @WA_SAIDA_0100-DATA.

        IF WL_0141-LOTE IS NOT INITIAL .
          MESSAGE 'Lote j√° gerado!' TYPE 'S'.
          PERFORM F_REFRESH_ALV USING '0100'.
          EXIT.
        ENDIF.

        CHECK ( WA_SAIDA_0100-GER_ADT EQ ICON_GENERATE ).

        PERFORM F_GERAR_ADT USING WA_SAIDA_0100.

        PERFORM: F_SELECIONAR_DADOS,
                 F_PROCESSA_DADOS,
                 F_REFRESH_ALV USING '0100'.

    ENDCASE.

  ENDMETHOD.

ENDCLASS.
