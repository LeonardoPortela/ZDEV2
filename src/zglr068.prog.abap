*=======================================================================
* Report  ZGLR068
*
*=======================================================================
*
*
*=======================================================================
REPORT ZGLR068.
*=======================================================================
* Types
*=======================================================================

TYPES: BEGIN OF T_SAIDA,
         BUKRS     TYPE BSIS-BUKRS,
         VBUND     TYPE BSIS-VBUND,
         XBSIS_BRL TYPE BSIS-DMBTR,
         XBSIS_USD TYPE BSIS-DMBE2,
         XBSAS_BRL TYPE BSAS-DMBTR,
         XBSAS_USD TYPE BSAS-DMBE2,
         TOTAL_BRL TYPE BSIS-DMBTR,
         TOTAL_USD TYPE BSIS-DMBE2.
TYPES: END OF T_SAIDA.

TYPES: BEGIN OF T_COLUNAS,
         NUM TYPE STRING,
         ID  TYPE BSIS-BUKRS.
TYPES: END OF T_COLUNAS.

TYPES: BEGIN OF T_SAIDA_ALV,
         VBUND      TYPE BSIS-VBUND,
         VAL1       TYPE BSIS-DMBTR,
         VAL2       TYPE BSIS-DMBTR,
         VAL3       TYPE BSIS-DMBTR,
         VAL4       TYPE BSIS-DMBTR,
         VAL5       TYPE BSIS-DMBTR,
         VAL6       TYPE BSIS-DMBTR,
         VAL7       TYPE BSIS-DMBTR,
         VAL8       TYPE BSIS-DMBTR,
         VAL9       TYPE BSIS-DMBTR,
         VAL10      TYPE BSIS-DMBTR,
         VAL11      TYPE BSIS-DMBTR,
         VAL12      TYPE BSIS-DMBTR,
         VAL13      TYPE BSIS-DMBTR,
         VAL14      TYPE BSIS-DMBTR,
         VAL15      TYPE BSIS-DMBTR,
         VAL16      TYPE BSIS-DMBTR,
         VAL17      TYPE BSIS-DMBTR,
         VAL18      TYPE BSIS-DMBTR,
         VAL19      TYPE BSIS-DMBTR,
         VAL20      TYPE BSIS-DMBTR,
         VAL21      TYPE BSIS-DMBTR,
         VAL22      TYPE BSIS-DMBTR,
         VAL23      TYPE BSIS-DMBTR,
         VAL24      TYPE BSIS-DMBTR,
         VAL25      TYPE BSIS-DMBTR,
         VAL26      TYPE BSIS-DMBTR,
         VAL27      TYPE BSIS-DMBTR,
         VAL28      TYPE BSIS-DMBTR,
         VAL29      TYPE BSIS-DMBTR,
         VAL30      TYPE BSIS-DMBTR,
         VAL31      TYPE BSIS-DMBTR,
         VAL32      TYPE BSIS-DMBTR,
         VAL33      TYPE BSIS-DMBTR,
         VAL34      TYPE BSIS-DMBTR,
         VAL35      TYPE BSIS-DMBTR,
         VAL36      TYPE BSIS-DMBTR,
         VAL37      TYPE BSIS-DMBTR,
         VAL38      TYPE BSIS-DMBTR,
         VAL39      TYPE BSIS-DMBTR,
         VAL40      TYPE BSIS-DMBTR,
         VAL41      TYPE BSIS-DMBTR,
         VAL42      TYPE BSIS-DMBTR,
         VAL43      TYPE BSIS-DMBTR,
         VAL44      TYPE BSIS-DMBTR,
         VAL45      TYPE BSIS-DMBTR,
         VAL46      TYPE BSIS-DMBTR,
         VAL47      TYPE BSIS-DMBTR,
         VAL48      TYPE BSIS-DMBTR,
         VAL49      TYPE BSIS-DMBTR,
         VAL50      TYPE BSIS-DMBTR,
         VAL51      TYPE BSIS-DMBTR,
         MARCA_CCL  TYPE T001-BUKRS,
         CELLCOLORS TYPE LVC_T_SCOL.
TYPES: END OF T_SAIDA_ALV.

TYPES: BEGIN OF T_SAIDA_HOTSPOT,
         BUKRS      TYPE BSIS-BUKRS,
         COD_MOEDA  TYPE CHAR2,
         WAERS      TYPE BSIS-WAERS,
         EXE_PERIO  TYPE CHAR6,
         HKONT      TYPE BSIS-HKONT,
         VBUND      TYPE BSIS-VBUND,
         VAL_MENSAL TYPE BSIS-DMBE2,
         VAL_ACUMUL TYPE BSIS-DMBE2.
TYPES: END OF T_SAIDA_HOTSPOT.

*=======================================================================
* Classes
*=======================================================================
CLASS LCL_EVENT_RECEIVER DEFINITION.
  PUBLIC SECTION.
    METHODS ON_HOTSPOT_CLICK
          FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
      IMPORTING
          E_ROW_ID
          E_COLUMN_ID.
ENDCLASS.
*=======================================================================
* Tabelas
*=======================================================================
TABLES: T001, ZGLT078, MCS0, BSIS, T247.
*=======================================================================
* Variáveis
*=======================================================================

DATA: IT_T001          TYPE STANDARD TABLE OF T001,
      IT_ZGLT078       TYPE STANDARD TABLE OF ZGLT078,
      IT_DADOS_BSIS    TYPE STANDARD TABLE OF BSIS,
      IT_DADOS_BSAS    TYPE STANDARD TABLE OF BSAS,
      IT_SAIDA         TYPE STANDARD TABLE OF T_SAIDA,
      IT_COLUNAS       TYPE STANDARD TABLE OF T_COLUNAS,
      IT_SAIDA_ALV     TYPE STANDARD TABLE OF T_SAIDA_ALV,
      IT_SAIDA_HOTSPOT TYPE STANDARD TABLE OF T_SAIDA_HOTSPOT.

DATA: WA_T001          TYPE T001,
      WA_ZGLT078       TYPE ZGLT078,
      WA_DADOS_BSIS    TYPE BSIS,
      WA_DADOS_BSAS    TYPE BSAS,
      WA_SAIDA         TYPE T_SAIDA,
      WA_SAIDA1        TYPE T_SAIDA,
      WA_COLUNAS       TYPE T_COLUNAS,
      WA_SAIDA_ALV     TYPE T_SAIDA_ALV,
      WA_SAIDA_HOTSPOT TYPE T_SAIDA_HOTSPOT.

RANGES: R_MES FOR T247-MNR,
        R_ANO FOR BSIS-GJAHR.

DATA: IT_EMPRESAS    TYPE STANDARD TABLE OF T_COLUNAS,
      WA_EMPRESAS    TYPE T_COLUNAS,
      WA_EMPRESAS_02 TYPE T_COLUNAS.
"      WA_EMPRESAS3   TYPE T_COLUNAS.

FIELD-SYMBOLS: <WA_SAIDA_ALV> TYPE T_SAIDA_ALV.

DATA : DL_TEXT_EMPR(255)   TYPE C,  "Texto para montagem do cabeçalho
       DL_TEXT_PARC(255)   TYPE C,  "Texto para montagem do cabeçalho
       DL_TEXT_MES(255)    TYPE C,  "Texto para montagem do cabeçalho
       DL_TEXT_ANO(255)    TYPE C,  "Texto para montagem do cabeçalho
       DL_TEXT_MOED(255)   TYPE C,  "Texto para montagem do cabeçalho
       DL_TEXT_DATA(255)   TYPE C,  "Texto para montagem do cabeçalho
       DL_TEXT_DTGERA(255) TYPE C.  "Texto para montagem do cabeçalho

*=======================================================================
* Includes
*=======================================================================

INCLUDE ZGLR068_IMPRIME_ALVO01.

*=======================================================================
* Tela de Seleção
*=======================================================================

SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS: P_BUKRS FOR T001-BUKRS,
                P_PAREL FOR ZGLT078-TP_ELIM   OBLIGATORY, "MATCHCODE OBJECT ZSH_TP_ELIM,
                "P_DATES FOR MCS0-SPMON        OBLIGATORY, "MATCHCODE OBJECT /BI0/OCALMONTH.
                P_ANO   FOR BSIS-GJAHR        OBLIGATORY,
                P_MES   FOR BSIS-MONAT        OBLIGATORY,
                P_BUDAT FOR BSIS-BUDAT.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(7) TEXT-003.
PARAMETERS : P_BRL RADIOBUTTON GROUP GP1 DEFAULT 'X'.
SELECTION-SCREEN COMMENT 11(6) TEXT-004.
PARAMETERS : P_USD RADIOBUTTON GROUP GP1.
SELECTION-SCREEN COMMENT 20(8) TEXT-005.
SELECTION-SCREEN END OF LINE.

"PARAMETERS:     P_MOEDA TYPE T001-WAERS       OBLIGATORY.
SELECT-OPTIONS: P_HKONT FOR BSIS-HKONT        NO-DISPLAY.
SELECTION-SCREEN END OF BLOCK B1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_PAREL-LOW.
  PERFORM F4_HELP_PARES_ELIMINACAO.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_PAREL-HIGH.
  PERFORM F4_HELP_PARES_ELIMINACAO.

*=======================================================================
* Seleção
*=======================================================================

START-OF-SELECTION.

*  IF P_MOEDA NE 'BRL' AND P_MOEDA NE 'USD'.
*    MESSAGE 'Este relatório só está disponível para moedas BRL e USD.' TYPE 'S' DISPLAY LIKE 'E'.
*    STOP.
*  ENDIF.

  PERFORM COMPLETA_PARAMETROS.
  PERFORM SELECIONA_DADOS.

  IF IT_DADOS_BSIS IS INITIAL AND IT_DADOS_BSAS IS INITIAL.
    MESSAGE 'Nenhum dado encontrado.' TYPE 'S' DISPLAY LIKE 'E'.
    STOP.
  ENDIF.

  PERFORM TOTALIZADOR_DADOS.
  PERFORM SELECIONA_DADOS_ALV.
  PERFORM COLORIR_ALV.

  CALL SCREEN 1001.

*=======================================================================
*=======================================================================

*&---------------------------------------------------------------------*
*&      Form  COMPLETA_PARAMETROS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM COMPLETA_PARAMETROS .

  DATA: V_LINHA TYPE I.

  "Faz a manutenção do parâmetro P_BUKRS
  IF P_BUKRS IS NOT INITIAL.
*    "Se usuário seleciona um P_BUKRS faz a consistência para saber se este parâmetro possui RCOMP em T001.
    SELECT * FROM T001 INTO TABLE IT_T001
      WHERE BUKRS IN P_BUKRS.

    "Monta a variável do cabeçalho para Empresa.
    DESCRIBE TABLE P_BUKRS LINES V_LINHA.
    IF V_LINHA EQ 1.
      LOOP AT P_BUKRS.
        IF P_BUKRS-OPTION EQ 'BT'.
          CONCATENATE P_BUKRS-LOW '-' P_BUKRS-HIGH INTO DL_TEXT_EMPR SEPARATED BY SPACE.
        ELSEIF P_BUKRS-OPTION NE 'BT'.
          DL_TEXT_EMPR = P_BUKRS-LOW.
        ENDIF.
      ENDLOOP.
    ELSE.
      DL_TEXT_EMPR = 'Múltiplas Seleções'.
    ENDIF.
    CLEAR: V_LINHA.

  ELSE.
    "Se usuário não seleciona P_BUKRS o parâmatro é completado com todos registros de T001 onde RCOMP não é vazio
    SELECT * FROM T001 INTO TABLE IT_T001
      WHERE RCOMP NE SPACE.

    LOOP AT IT_T001 INTO WA_T001.
      P_BUKRS-SIGN = 'I'.
      P_BUKRS-OPTION = 'EQ'.
      P_BUKRS-LOW = WA_T001-BUKRS.
      APPEND P_BUKRS.
    ENDLOOP.

    CLEAR: IT_T001, WA_T001.

  ENDIF.

  "Faz a manutenção do parâmetro P_HKONT
  SELECT * FROM ZGLT078 INTO TABLE IT_ZGLT078
    WHERE TP_ELIM IN P_PAREL.

  IF IT_ZGLT078 IS INITIAL.
    MESSAGE 'Par Eliminação não cadastrado.' TYPE 'S' DISPLAY LIKE 'E'.
    STOP.
  ENDIF.

  LOOP AT IT_ZGLT078 INTO WA_ZGLT078.
    P_HKONT-SIGN = 'I'.
    P_HKONT-OPTION = 'EQ'.
    P_HKONT-LOW = WA_ZGLT078-HKONT.
    APPEND P_HKONT.
  ENDLOOP.

*  "Faz a manutenção do parâmetro P_DATES
*  LOOP AT P_DATES.
*    R_MES-SIGN = P_DATES-SIGN.
*    R_MES-OPTION = P_DATES-OPTION.
*    R_MES-LOW = P_DATES-LOW+4(2).
*    R_MES-HIGH = P_DATES-HIGH(2).
*    APPEND R_MES.
*    R_ANO-SIGN = P_DATES-SIGN.
*    R_ANO-OPTION = P_DATES-OPTION.
*    R_ANO-LOW = P_DATES-LOW(4).
*    R_ANO-HIGH = P_DATES-HIGH(4).
*    APPEND R_ANO.
*  ENDLOOP.

  "Monta a variável do cabeçalho para Data.
*  DESCRIBE TABLE P_DATES LINES V_LINHA.
*  IF V_LINHA EQ 1.
*    LOOP AT P_DATES.
*      IF P_DATES-OPTION EQ 'BT'.
*        DL_TEXT_DATA = P_DATES-LOW+4(2) && '/' && P_DATES-LOW(4) && '-' && P_DATES-HIGH+4(2) && '/' && P_DATES-HIGH(4).
*      ELSEIF P_DATES-OPTION NE 'BT'.
*        DL_TEXT_DATA = P_DATES-LOW+4(2) && '/' && P_DATES-LOW(4).
*      ENDIF.
*    ENDLOOP.
*  ELSE.
*    DL_TEXT_DATA = 'Múltiplas Seleções'.
*  ENDIF.
*  CLEAR: V_LINHA.
  DESCRIBE TABLE P_MES LINES V_LINHA.
  IF V_LINHA EQ 1.
    LOOP AT P_MES.
      IF P_MES-OPTION EQ 'BT'.
        DL_TEXT_MES = P_MES-LOW && '-' && P_MES-HIGH.
      ELSEIF P_MES-OPTION NE 'BT'.
        DL_TEXT_MES = P_MES-LOW.
      ENDIF.
    ENDLOOP.
  ELSE.
    DL_TEXT_MES = 'Múltiplas Seleções'.
  ENDIF.
  CLEAR: V_LINHA.
  DESCRIBE TABLE P_ANO LINES V_LINHA.
  IF V_LINHA EQ 1.
    LOOP AT P_ANO.
      IF P_ANO-OPTION EQ 'BT'.
        DL_TEXT_ANO = P_ANO-LOW && '-' && P_ANO-HIGH.
      ELSEIF P_ANO-OPTION NE 'BT'.
        DL_TEXT_ANO = P_ANO-LOW.
      ENDIF.
    ENDLOOP.
  ELSE.
    DL_TEXT_ANO = 'Múltiplas Seleções'.
  ENDIF.
  CLEAR: V_LINHA.

  "Monta a variável do cabeçalho para Pares Eliminação.
  DESCRIBE TABLE P_PAREL LINES V_LINHA.
  IF V_LINHA EQ 1.
    LOOP AT P_PAREL.
      IF P_PAREL-OPTION EQ 'BT'.
        CONCATENATE P_PAREL-LOW '-' P_PAREL-HIGH INTO DL_TEXT_PARC SEPARATED BY SPACE.
      ELSEIF P_PAREL-OPTION NE 'BT'.
        DL_TEXT_PARC = P_PAREL-LOW.
      ENDIF.
    ENDLOOP.
  ELSE.
    DL_TEXT_PARC = 'Múltiplas Seleções'.
  ENDIF.

  "Monta a variável do cabeçalho para Moeda.
  IF P_BRL EQ 'X'.
    DL_TEXT_MOED = 'BRL'.
  ELSE.
    DL_TEXT_MOED = 'USD'.
  ENDIF.

  CONCATENATE P_BUDAT-LOW+6(2) '/' P_BUDAT-LOW+4(2) '/' P_BUDAT-LOW+0(4) ' a  ' ' ' P_BUDAT-HIGH+6(2) '/' P_BUDAT-HIGH+4(2) '/' P_BUDAT-HIGH+0(4) INTO DL_TEXT_DATA.

  CONCATENATE SY-DATUM+6(2) '/' SY-DATUM+4(2) '/' SY-DATUM+0(4) '-' SY-UZEIT+0(2) ':' SY-UZEIT+2(2) ':' SY-UZEIT+4(2) '.' INTO DL_TEXT_DTGERA.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  SELECIONA_DADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SELECIONA_DADOS .

  SELECT * FROM BSIS INTO TABLE IT_DADOS_BSIS
    WHERE BUKRS IN P_BUKRS
    AND HKONT IN P_HKONT
    AND GJAHR IN P_ANO
    AND MONAT IN P_MES
    AND BUDAT IN P_BUDAT
    AND BSTAT NE 'S'.

  SELECT * FROM BSAS INTO TABLE IT_DADOS_BSAS
    WHERE BUKRS IN P_BUKRS
    AND HKONT IN P_HKONT
    AND GJAHR IN P_ANO
    AND MONAT IN P_MES
    AND BUDAT IN P_BUDAT
    AND BSTAT NE 'S'.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  TOTALIZADOR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM TOTALIZADOR_DADOS.

  DATA: CONT_01  TYPE I,
        CONT_02  TYPE I,
        VL_LAND1 TYPE T001-LAND1.

  SELECT BUKRS VBUND FROM BSIS INTO CORRESPONDING FIELDS OF TABLE IT_SAIDA
    WHERE BUKRS IN P_BUKRS
    AND HKONT IN P_HKONT
    AND GJAHR IN P_ANO
    AND MONAT IN P_MES
    AND BUDAT IN P_BUDAT
    AND BSTAT NE 'S'.

  SORT IT_SAIDA BY BUKRS ASCENDING
                   VBUND ASCENDING.

  DELETE ADJACENT DUPLICATES FROM IT_SAIDA COMPARING BUKRS VBUND.

  LOOP AT IT_DADOS_BSIS INTO WA_DADOS_BSIS.
    LOOP AT IT_SAIDA INTO WA_SAIDA.
      IF WA_SAIDA-BUKRS = WA_DADOS_BSIS-BUKRS AND WA_SAIDA-VBUND = WA_DADOS_BSIS-VBUND.

        SELECT SINGLE LAND1
          FROM T001 INTO VL_LAND1
          WHERE BUKRS EQ WA_SAIDA-BUKRS.

        IF VL_LAND1 EQ 'BR'.
          IF WA_DADOS_BSIS-SHKZG EQ 'S'.
            WA_SAIDA-XBSIS_BRL = WA_SAIDA-XBSIS_BRL + WA_DADOS_BSIS-DMBTR.
            WA_SAIDA-XBSIS_USD = WA_SAIDA-XBSIS_USD + WA_DADOS_BSIS-DMBE2.
          ELSE.
            WA_SAIDA-XBSIS_BRL = WA_SAIDA-XBSIS_BRL - WA_DADOS_BSIS-DMBTR.
            WA_SAIDA-XBSIS_USD = WA_SAIDA-XBSIS_USD - WA_DADOS_BSIS-DMBE2.
          ENDIF.
        ELSE.
          IF WA_DADOS_BSIS-SHKZG EQ 'S'.
            WA_SAIDA-XBSIS_BRL = WA_SAIDA-XBSIS_BRL + WA_DADOS_BSIS-DMBE3.
            WA_SAIDA-XBSIS_USD = WA_SAIDA-XBSIS_USD + WA_DADOS_BSIS-DMBE2.
          ELSE.
            WA_SAIDA-XBSIS_BRL = WA_SAIDA-XBSIS_BRL - WA_DADOS_BSIS-DMBE3.
            WA_SAIDA-XBSIS_USD = WA_SAIDA-XBSIS_USD - WA_DADOS_BSIS-DMBE2.
          ENDIF.
        ENDIF.

        MODIFY IT_SAIDA FROM WA_SAIDA INDEX SY-TABIX TRANSPORTING XBSIS_BRL XBSIS_USD.
      ENDIF.
      CLEAR: WA_SAIDA, VL_LAND1.
    ENDLOOP.
    CLEAR: WA_DADOS_BSIS.
  ENDLOOP.

  LOOP AT IT_DADOS_BSAS INTO WA_DADOS_BSAS.
    "Busca na IT_SAIDA se existe a chave BUKRS+VBUND
    READ TABLE IT_SAIDA WITH KEY BUKRS = WA_DADOS_BSAS-BUKRS
                                 VBUND = WA_DADOS_BSAS-VBUND TRANSPORTING NO FIELDS.
    "Adiciona a chave BUKRS+VBUND na tabela de saída se ainda não possuir
    IF SY-SUBRC NE 0.
      WA_SAIDA-BUKRS = WA_DADOS_BSAS-BUKRS.
      WA_SAIDA-VBUND = WA_DADOS_BSAS-VBUND.
      APPEND WA_SAIDA TO IT_SAIDA.
      CLEAR WA_SAIDA.
    ENDIF.

    LOOP AT IT_SAIDA INTO WA_SAIDA.
      IF WA_SAIDA-BUKRS = WA_DADOS_BSAS-BUKRS AND WA_SAIDA-VBUND = WA_DADOS_BSAS-VBUND.

        SELECT SINGLE LAND1
          FROM T001 INTO VL_LAND1
          WHERE BUKRS EQ WA_SAIDA-BUKRS.

        IF VL_LAND1 EQ 'BR'.
          IF WA_DADOS_BSAS-SHKZG EQ 'S'.
            WA_SAIDA-XBSAS_BRL = WA_SAIDA-XBSAS_BRL + WA_DADOS_BSAS-DMBTR.
            WA_SAIDA-XBSAS_USD = WA_SAIDA-XBSAS_USD + WA_DADOS_BSAS-DMBE2.
          ELSE.
            WA_SAIDA-XBSAS_BRL = WA_SAIDA-XBSAS_BRL - WA_DADOS_BSAS-DMBTR.
            WA_SAIDA-XBSAS_USD = WA_SAIDA-XBSAS_USD - WA_DADOS_BSAS-DMBE2.
          ENDIF.
        ELSE.
          IF WA_DADOS_BSAS-SHKZG EQ 'S'.
            WA_SAIDA-XBSAS_BRL = WA_SAIDA-XBSAS_BRL + WA_DADOS_BSAS-DMBE3.
            WA_SAIDA-XBSAS_USD = WA_SAIDA-XBSAS_USD + WA_DADOS_BSAS-DMBE2.
          ELSE.
            WA_SAIDA-XBSAS_BRL = WA_SAIDA-XBSAS_BRL - WA_DADOS_BSAS-DMBE3.
            WA_SAIDA-XBSAS_USD = WA_SAIDA-XBSAS_USD - WA_DADOS_BSAS-DMBE2.
          ENDIF.
        ENDIF.

        MODIFY IT_SAIDA FROM WA_SAIDA INDEX SY-TABIX TRANSPORTING XBSAS_BRL XBSAS_USD.
      ENDIF.
      CLEAR: WA_SAIDA, VL_LAND1.
    ENDLOOP.
    CLEAR: WA_DADOS_BSAS.
  ENDLOOP.

  SORT IT_SAIDA BY BUKRS ASCENDING.

  LOOP AT IT_SAIDA INTO WA_SAIDA.

    CONT_01 = CONT_01 + 1.
    WA_SAIDA-TOTAL_BRL = WA_SAIDA-XBSIS_BRL + WA_SAIDA-XBSAS_BRL.
    WA_SAIDA-TOTAL_USD = WA_SAIDA-XBSIS_USD + WA_SAIDA-XBSAS_USD.

    READ TABLE IT_EMPRESAS INTO WA_EMPRESAS WITH KEY ID = WA_SAIDA-BUKRS.
    IF SY-SUBRC NE 0.
      CONT_02 = CONT_02 + 1.
      WA_EMPRESAS-ID = WA_SAIDA-BUKRS.
      WA_EMPRESAS-NUM = 'VAL' && CONT_02.
      APPEND WA_EMPRESAS TO IT_EMPRESAS.
    ENDIF.
    CLEAR WA_EMPRESAS.

    MODIFY IT_SAIDA FROM WA_SAIDA INDEX CONT_01 TRANSPORTING TOTAL_BRL TOTAL_USD.
    CLEAR WA_SAIDA.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  SELECIONA_DADOS_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SELECIONA_DADOS_ALV .

  DATA: CONT_01 TYPE I.
  FIELD-SYMBOLS: <VALOR> TYPE P.

  "Adiciona VBUND na tabela IT_SAIDA_ALV
  LOOP AT IT_SAIDA INTO WA_SAIDA.
    READ TABLE IT_SAIDA_ALV WITH KEY VBUND = WA_SAIDA-VBUND TRANSPORTING NO FIELDS.
    IF SY-SUBRC NE 0.
      WA_SAIDA_ALV-VBUND = WA_SAIDA-VBUND.
      APPEND WA_SAIDA_ALV TO IT_SAIDA_ALV.
    ENDIF.
  ENDLOOP.

  "Seleção para completar campo MARCA_CCL de IT_SAIDA_ALV
  SELECT * FROM T001 INTO TABLE IT_T001
    WHERE RCOMP NE SPACE.

  "Extrai os valores da IT_SAIDA para a IT_SAIDA_ALV
  LOOP AT IT_SAIDA_ALV INTO WA_SAIDA_ALV.
    CONT_01 = CONT_01 + 1.
    ASSIGN WA_SAIDA_ALV TO <WA_SAIDA_ALV>.
    LOOP AT IT_EMPRESAS INTO WA_EMPRESAS.
      IF WA_EMPRESAS-ID IS NOT INITIAL.
        ASSIGN COMPONENT WA_EMPRESAS-NUM OF STRUCTURE <WA_SAIDA_ALV> TO <VALOR>.
        "        READ TABLE IT_EMPRESAS INTO WA_EMPRESAS_02 WITH KEY NUM = WA_EMPRESAS-NUM.
        READ TABLE IT_SAIDA INTO WA_SAIDA WITH KEY VBUND = WA_SAIDA_ALV-VBUND BUKRS = WA_EMPRESAS-ID.
        IF SY-SUBRC EQ 0.
          IF P_BRL = 'X' .
            <VALOR> = WA_SAIDA-TOTAL_BRL.
          ELSEIF P_USD = 'X'.
            <VALOR> = WA_SAIDA-TOTAL_USD.
          ENDIF.
        ELSE.
          <VALOR> = 0.
        ENDIF.
        <WA_SAIDA_ALV>-VAL51 = <WA_SAIDA_ALV>-VAL51 + <VALOR>.
        UNASSIGN <VALOR>.
        CLEAR: WA_SAIDA, WA_EMPRESAS_02.
      ENDIF.
      CLEAR: WA_EMPRESAS.
    ENDLOOP.
    READ TABLE IT_T001 INTO WA_T001 WITH KEY RCOMP = WA_SAIDA_ALV-VBUND.
    <WA_SAIDA_ALV>-MARCA_CCL = WA_T001-BUKRS.
    MODIFY IT_SAIDA_ALV FROM WA_SAIDA_ALV INDEX CONT_01.
    CLEAR: WA_T001.
    UNASSIGN <WA_SAIDA_ALV>.
  ENDLOOP.

  DELETE IT_SAIDA_ALV
    WHERE VAL51 IS INITIAL.

  SORT IT_SAIDA_ALV BY VBUND ASCENDING.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  COLORIR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM COLORIR_ALV .

  DATA:  WA_SAIDA_ALV_02 TYPE T_SAIDA_ALV,
         CONT_01         TYPE I,
         VALOR_PAR       TYPE P,
         VALOR_EMP       TYPE P.

  FIELD-SYMBOLS: <WA_SAIDA_ALV_02> TYPE T_SAIDA_ALV,
                 <VAL_EMP>         TYPE P,
                 <VAL_PAR>         TYPE P.

  DATA LS_CELLCOLOR TYPE LVC_S_SCOL .

  LOOP AT IT_SAIDA_ALV INTO WA_SAIDA_ALV.
    CONT_01 = CONT_01 + 1.
    ASSIGN WA_SAIDA_ALV TO <WA_SAIDA_ALV>.

    IF <WA_SAIDA_ALV>-VBUND IS NOT INITIAL AND <WA_SAIDA_ALV>-MARCA_CCL IS NOT INITIAL. "Consistência verde/vermelho

      LOOP AT IT_EMPRESAS INTO WA_EMPRESAS.
        ASSIGN COMPONENT WA_EMPRESAS-NUM OF STRUCTURE <WA_SAIDA_ALV> TO <VAL_EMP>.
        VALOR_EMP = <VAL_EMP>.
        READ TABLE IT_SAIDA_ALV INTO WA_SAIDA_ALV_02 WITH KEY MARCA_CCL = WA_EMPRESAS-ID.
        IF SY-SUBRC EQ 0.
          ASSIGN WA_SAIDA_ALV_02 TO <WA_SAIDA_ALV_02>.
          IF WA_SAIDA_ALV-MARCA_CCL IS NOT INITIAL.
            READ TABLE IT_EMPRESAS INTO WA_EMPRESAS_02 WITH KEY ID = WA_SAIDA_ALV-MARCA_CCL.
            IF SY-SUBRC EQ 0.
              ASSIGN COMPONENT WA_EMPRESAS_02-NUM OF STRUCTURE <WA_SAIDA_ALV_02> TO <VAL_PAR>.
              VALOR_PAR = <VAL_PAR>.
              UNASSIGN <VAL_PAR>.
            ELSE.
              VALOR_PAR = 0.
            ENDIF.
          ELSE.
            VALOR_PAR = VALOR_EMP.
          ENDIF.
          UNASSIGN <WA_SAIDA_ALV_02>.
        ELSE.
          VALOR_PAR = 0.
        ENDIF.
        "---------------
        IF <WA_SAIDA_ALV>-MARCA_CCL EQ WA_EMPRESAS-ID.
          IF VALOR_EMP EQ VALOR_PAR AND VALOR_PAR NE 0.
            LS_CELLCOLOR-COLOR-COL = '7'.
            LS_CELLCOLOR-COLOR-INT = '1'.
            LS_CELLCOLOR-FNAME = WA_EMPRESAS-NUM.
            APPEND LS_CELLCOLOR TO WA_SAIDA_ALV-CELLCOLORS .
            MODIFY IT_SAIDA_ALV FROM  WA_SAIDA_ALV INDEX CONT_01 .
          ELSEIF VALOR_EMP NE VALOR_PAR.
            LS_CELLCOLOR-COLOR-COL = '7'.
            LS_CELLCOLOR-COLOR-INT = '1'.
            LS_CELLCOLOR-FNAME = WA_EMPRESAS-NUM.
            APPEND LS_CELLCOLOR TO WA_SAIDA_ALV-CELLCOLORS.
            MODIFY IT_SAIDA_ALV FROM  WA_SAIDA_ALV INDEX CONT_01.
          ENDIF.
        ELSE.
          IF VALOR_EMP EQ -1 * VALOR_PAR AND VALOR_PAR NE 0.
            LS_CELLCOLOR-COLOR-COL = '5'.
            LS_CELLCOLOR-FNAME = WA_EMPRESAS-NUM.
            APPEND LS_CELLCOLOR TO WA_SAIDA_ALV-CELLCOLORS.
            MODIFY IT_SAIDA_ALV FROM  WA_SAIDA_ALV INDEX CONT_01 .
          ELSEIF VALOR_EMP NE -1 * VALOR_PAR.
            LS_CELLCOLOR-COLOR-COL = '6' .
            LS_CELLCOLOR-FNAME = WA_EMPRESAS-NUM.
            APPEND LS_CELLCOLOR TO WA_SAIDA_ALV-CELLCOLORS .
            MODIFY IT_SAIDA_ALV FROM  WA_SAIDA_ALV INDEX CONT_01.
          ENDIF.
        ENDIF.
        "---------------
*        IF VALOR_EMP EQ VALOR_PAR AND VALOR_PAR NE 0.
*          LS_CELLCOLOR-COLOR-COL = '5'.
*          LS_CELLCOLOR-FNAME = WA_EMPRESAS-NUM.
*          APPEND LS_CELLCOLOR TO WA_SAIDA_ALV-CELLCOLORS .
*          MODIFY IT_SAIDA_ALV FROM  WA_SAIDA_ALV INDEX CONT_01 .
*        ELSEIF VALOR_EMP NE VALOR_PAR.
*          LS_CELLCOLOR-COLOR-COL = '6' .
*          LS_CELLCOLOR-FNAME = WA_EMPRESAS-NUM.
*          APPEND LS_CELLCOLOR TO WA_SAIDA_ALV-CELLCOLORS .
*          MODIFY IT_SAIDA_ALV FROM  WA_SAIDA_ALV INDEX CONT_01.
*        ENDIF.
        "---------------
        CLEAR:  WA_EMPRESAS_02, WA_SAIDA_ALV_02,LS_CELLCOLOR, WA_EMPRESAS.
      ENDLOOP.

    ELSEIF <WA_SAIDA_ALV>-VBUND IS INITIAL. "consistência laranja LINHA SEM LANÇAMENTO COM PARCEIRAS

      LOOP AT IT_EMPRESAS INTO WA_EMPRESAS.
        LS_CELLCOLOR-COLOR-COL = '7'.
        LS_CELLCOLOR-COLOR-INT = '1'.
        LS_CELLCOLOR-FNAME = WA_EMPRESAS-NUM.
        APPEND LS_CELLCOLOR TO WA_SAIDA_ALV-CELLCOLORS .
        MODIFY IT_SAIDA_ALV FROM  WA_SAIDA_ALV INDEX CONT_01 .
        CLEAR: WA_EMPRESAS, LS_CELLCOLOR.
      ENDLOOP.

    ELSEIF <WA_SAIDA_ALV>-MARCA_CCL IS INITIAL. "consistência amarelo LINHA SEM MARCA_CCL NA T001

      LOOP AT IT_EMPRESAS INTO WA_EMPRESAS.
        LS_CELLCOLOR-COLOR-COL = '3'.
        LS_CELLCOLOR-FNAME = WA_EMPRESAS-NUM.
        APPEND LS_CELLCOLOR TO WA_SAIDA_ALV-CELLCOLORS .
        MODIFY IT_SAIDA_ALV FROM  WA_SAIDA_ALV INDEX CONT_01 .
        CLEAR: WA_EMPRESAS, LS_CELLCOLOR.
      ENDLOOP.

    ENDIF.

    LS_CELLCOLOR-COLOR-COL = '3'.
    LS_CELLCOLOR-FNAME = 'VAL51'.
    LS_CELLCOLOR-COLOR-INT = '1' .
    APPEND LS_CELLCOLOR TO WA_SAIDA_ALV-CELLCOLORS .
    MODIFY IT_SAIDA_ALV FROM  WA_SAIDA_ALV INDEX CONT_01 .
    CLEAR: WA_EMPRESAS, LS_CELLCOLOR.

    CLEAR: WA_SAIDA_ALV.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F4_HELP_PARES_ELIMINACAO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM F4_HELP_PARES_ELIMINACAO .

  TYPES: BEGIN OF TY_F4_P_ELIM,
           TP_ELIM TYPE ZGLT078-TP_ELIM.
  TYPES: END OF TY_F4_P_ELIM.

  DATA: IT_F4_P_ELIM TYPE STANDARD TABLE OF TY_F4_P_ELIM,
        WA_F4_P_ELIM TYPE TY_F4_P_ELIM.

  SELECT *
    FROM ZGLT078
    INTO CORRESPONDING FIELDS OF TABLE IT_F4_P_ELIM.

  SORT IT_F4_P_ELIM BY TP_ELIM.
  DELETE ADJACENT DUPLICATES FROM IT_F4_P_ELIM COMPARING TP_ELIM.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      RETFIELD        = 'TP_ELIM'
      DYNPPROG        = SY-REPID    " Program name
      DYNPNR          = SY-DYNNR    " Screen number
      DYNPROFIELD     = 'P_PAREL'    " F4 help need field
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = IT_F4_P_ELIM     " F4 help values
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.

ENDFORM.

*----------------------------------------------------------------------*
*       CLASS lcl_event_receiver IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.

  METHOD  ON_HOTSPOT_CLICK.

    IF E_ROW_ID(1) EQ 'T'.
      EXIT.
    ENDIF.

    PERFORM GERA_ALV_JAN_SALDO USING E_ROW_ID
                                    E_COLUMN_ID.

    PERFORM POP_UP_JANELA.

  ENDMETHOD.                    "handle_double_clickENDCLASS.
ENDCLASS.
*&---------------------------------------------------------------------*
*&      Form  GERA_alv_JAN_SALDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GERA_ALV_JAN_SALDO USING E_ROW_ID    TYPE LVC_S_ROW
                             E_COLUMN_ID TYPE LVC_S_COL.

  DATA: WA_SAIDA_ALV_HOTSPOT TYPE T_SAIDA_ALV,
        WA_EMPRESAS_HOTSPOT  TYPE T_COLUNAS.

  DATA: IT_DADOS_BSIS_HOTSPOT TYPE STANDARD TABLE OF BSIS,
        IT_DADOS_BSAS_HOTSPOT TYPE STANDARD TABLE OF BSAS,
        WA_DADOS_BSIS_HOTSPOT TYPE BSIS,
        WA_DADOS_BSAS_HOTSPOT TYPE BSAS.

  DATA: VL_LAND1 TYPE T001-LAND1.

  CLEAR: IT_SAIDA_HOTSPOT.

  READ TABLE IT_SAIDA_ALV INTO WA_SAIDA_ALV_HOTSPOT INDEX E_ROW_ID-INDEX.
  READ TABLE IT_EMPRESAS INTO WA_EMPRESAS_HOTSPOT WITH KEY NUM = E_COLUMN_ID-FIELDNAME.

  SELECT * FROM BSIS
    INTO TABLE IT_DADOS_BSIS_HOTSPOT
    WHERE BUKRS EQ WA_EMPRESAS_HOTSPOT-ID
      AND HKONT IN P_HKONT
      AND GJAHR IN P_ANO
      AND MONAT IN P_MES
      AND BUDAT IN P_BUDAT
      AND BSTAT NE 'S'
      AND VBUND EQ WA_SAIDA_ALV_HOTSPOT-VBUND.

  SELECT * FROM BSAS
    APPENDING TABLE IT_DADOS_BSIS_HOTSPOT
    WHERE BUKRS EQ WA_EMPRESAS_HOTSPOT-ID
      AND HKONT IN P_HKONT
      AND GJAHR IN P_ANO
      AND MONAT IN P_MES
      AND BUDAT IN P_BUDAT
      AND BSTAT NE 'S'
      AND VBUND EQ WA_SAIDA_ALV_HOTSPOT-VBUND.

  SELECT BUKRS VBUND HKONT FROM BSIS INTO CORRESPONDING FIELDS OF TABLE IT_SAIDA_HOTSPOT
    WHERE BUKRS EQ WA_EMPRESAS_HOTSPOT-ID
      AND HKONT IN P_HKONT
      AND GJAHR IN P_ANO
      AND MONAT IN P_MES
      AND BUDAT IN P_BUDAT
      AND BSTAT NE 'S'
      AND VBUND EQ WA_SAIDA_ALV_HOTSPOT-VBUND.

  SELECT BUKRS VBUND HKONT FROM BSAS APPENDING CORRESPONDING FIELDS OF TABLE IT_SAIDA_HOTSPOT
    WHERE BUKRS EQ WA_EMPRESAS_HOTSPOT-ID
      AND HKONT IN P_HKONT
      AND GJAHR IN P_ANO
      AND MONAT IN P_MES
      AND BUDAT IN P_BUDAT
      AND BSTAT NE 'S'
      AND VBUND EQ WA_SAIDA_ALV_HOTSPOT-VBUND.

  SORT IT_SAIDA_HOTSPOT BY BUKRS ASCENDING
                           VBUND ASCENDING
                           HKONT ASCENDING.

  DELETE ADJACENT DUPLICATES FROM IT_SAIDA_HOTSPOT COMPARING BUKRS VBUND HKONT.

  LOOP AT IT_DADOS_BSIS_HOTSPOT INTO WA_DADOS_BSIS_HOTSPOT.
    LOOP AT IT_SAIDA_HOTSPOT INTO WA_SAIDA_HOTSPOT.
      IF WA_SAIDA_HOTSPOT-BUKRS = WA_DADOS_BSIS_HOTSPOT-BUKRS AND
         WA_SAIDA_HOTSPOT-VBUND = WA_DADOS_BSIS_HOTSPOT-VBUND AND
         WA_SAIDA_HOTSPOT-HKONT = WA_DADOS_BSIS_HOTSPOT-HKONT.

        SELECT SINGLE LAND1
          FROM T001 INTO VL_LAND1
          WHERE BUKRS EQ WA_SAIDA_HOTSPOT-BUKRS.

        IF VL_LAND1 EQ 'BR'.
          IF WA_DADOS_BSIS_HOTSPOT-SHKZG EQ 'S'.
            IF P_BRL IS NOT INITIAL.
              WA_SAIDA_HOTSPOT-VAL_MENSAL = WA_SAIDA_HOTSPOT-VAL_MENSAL + WA_DADOS_BSIS_HOTSPOT-DMBTR.
              WA_SAIDA_HOTSPOT-VAL_ACUMUL = WA_SAIDA_HOTSPOT-VAL_ACUMUL + WA_DADOS_BSIS_HOTSPOT-DMBTR.
            ELSE.
              WA_SAIDA_HOTSPOT-VAL_MENSAL = WA_SAIDA_HOTSPOT-VAL_MENSAL + WA_DADOS_BSIS_HOTSPOT-DMBE2.
              WA_SAIDA_HOTSPOT-VAL_ACUMUL = WA_SAIDA_HOTSPOT-VAL_ACUMUL + WA_DADOS_BSIS_HOTSPOT-DMBE2.
            ENDIF.
          ELSE.
            IF P_BRL IS NOT INITIAL.
              WA_SAIDA_HOTSPOT-VAL_MENSAL = WA_SAIDA_HOTSPOT-VAL_MENSAL - WA_DADOS_BSIS_HOTSPOT-DMBTR.
              WA_SAIDA_HOTSPOT-VAL_ACUMUL = WA_SAIDA_HOTSPOT-VAL_ACUMUL - WA_DADOS_BSIS_HOTSPOT-DMBTR.
            ELSE.
              WA_SAIDA_HOTSPOT-VAL_MENSAL = WA_SAIDA_HOTSPOT-VAL_MENSAL - WA_DADOS_BSIS_HOTSPOT-DMBE2.
              WA_SAIDA_HOTSPOT-VAL_ACUMUL = WA_SAIDA_HOTSPOT-VAL_ACUMUL - WA_DADOS_BSIS_HOTSPOT-DMBE2.
            ENDIF.
          ENDIF.
        ELSE.
          IF WA_DADOS_BSIS_HOTSPOT-SHKZG EQ 'S'.
            IF P_BRL IS NOT INITIAL.
              WA_SAIDA_HOTSPOT-VAL_MENSAL = WA_SAIDA_HOTSPOT-VAL_MENSAL + WA_DADOS_BSIS_HOTSPOT-DMBE3.
              WA_SAIDA_HOTSPOT-VAL_ACUMUL = WA_SAIDA_HOTSPOT-VAL_ACUMUL + WA_DADOS_BSIS_HOTSPOT-DMBE3.
            ELSE.
              WA_SAIDA_HOTSPOT-VAL_MENSAL = WA_SAIDA_HOTSPOT-VAL_MENSAL + WA_DADOS_BSIS_HOTSPOT-DMBE2.
              WA_SAIDA_HOTSPOT-VAL_ACUMUL = WA_SAIDA_HOTSPOT-VAL_ACUMUL + WA_DADOS_BSIS_HOTSPOT-DMBE2.
            ENDIF.
          ELSE.
            IF P_BRL IS NOT INITIAL.
              WA_SAIDA_HOTSPOT-VAL_MENSAL = WA_SAIDA_HOTSPOT-VAL_MENSAL - WA_DADOS_BSIS_HOTSPOT-DMBE3.
              WA_SAIDA_HOTSPOT-VAL_ACUMUL = WA_SAIDA_HOTSPOT-VAL_ACUMUL - WA_DADOS_BSIS_HOTSPOT-DMBE3.
            ELSE.
              WA_SAIDA_HOTSPOT-VAL_MENSAL = WA_SAIDA_HOTSPOT-VAL_MENSAL - WA_DADOS_BSIS_HOTSPOT-DMBE2.
              WA_SAIDA_HOTSPOT-VAL_ACUMUL = WA_SAIDA_HOTSPOT-VAL_ACUMUL - WA_DADOS_BSIS_HOTSPOT-DMBE2.
            ENDIF.
          ENDIF.
        ENDIF.

        MODIFY IT_SAIDA_HOTSPOT FROM WA_SAIDA_HOTSPOT INDEX SY-TABIX TRANSPORTING VAL_ACUMUL VAL_MENSAL.
      ENDIF.
      CLEAR: WA_SAIDA_HOTSPOT, VL_LAND1.
    ENDLOOP.
    CLEAR: WA_DADOS_BSIS_HOTSPOT.
  ENDLOOP.

  SORT IT_SAIDA_HOTSPOT BY HKONT ASCENDING.

  LOOP AT IT_SAIDA_HOTSPOT INTO WA_SAIDA_HOTSPOT.

    SELECT SINGLE LAND1
      FROM T001
      INTO VL_LAND1
      WHERE BUKRS EQ WA_SAIDA_HOTSPOT-BUKRS.

    IF VL_LAND1 EQ 'BR'.
      IF P_BRL IS NOT INITIAL.
        WA_SAIDA_HOTSPOT-COD_MOEDA = '10'.
        WA_SAIDA_HOTSPOT-WAERS     = 'BRL'.
      ELSE.
        WA_SAIDA_HOTSPOT-COD_MOEDA = '40'.
        WA_SAIDA_HOTSPOT-WAERS     = 'USD'.
      ENDIF.
    ELSE.
      IF P_BRL IS NOT INITIAL.
        WA_SAIDA_HOTSPOT-COD_MOEDA = '30'.
        WA_SAIDA_HOTSPOT-WAERS     = 'BRL'.
      ELSE.
        WA_SAIDA_HOTSPOT-COD_MOEDA = '40'.
        WA_SAIDA_HOTSPOT-WAERS     = 'USD'.
      ENDIF.
    ENDIF.

    WA_SAIDA_HOTSPOT-EXE_PERIO = P_BUDAT-HIGH(6).
    MODIFY IT_SAIDA_HOTSPOT FROM WA_SAIDA_HOTSPOT INDEX SY-TABIX TRANSPORTING COD_MOEDA WAERS EXE_PERIO.
    CLEAR: VL_LAND1.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  POP_UP_JANELA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM POP_UP_JANELA .

  DATA: LO_TABLE     TYPE REF TO CL_SALV_TABLE,
        LO_FUNCTIONS TYPE REF TO CL_SALV_FUNCTIONS_LIST,
        LO_COLUMNS   TYPE REF TO CL_SALV_COLUMNS,
        LO_COLUMN    TYPE REF TO CL_SALV_COLUMN.

  DATA: LT_DATA TYPE STANDARD TABLE OF T_SAIDA_HOTSPOT.

  TRY .
      CL_SALV_TABLE=>FACTORY(
      IMPORTING
      R_SALV_TABLE = LO_TABLE
      CHANGING
      T_TABLE       = IT_SAIDA_HOTSPOT ).
    CATCH CX_SALV_MSG.
  ENDTRY.

  LO_FUNCTIONS = LO_TABLE->GET_FUNCTIONS( ).
  LO_FUNCTIONS->SET_ALL( ABAP_TRUE ).

  LO_COLUMNS = LO_TABLE->GET_COLUMNS( ).
  LO_COLUMNS->SET_OPTIMIZE( ABAP_TRUE ).

  "Nomes das Colunas no Pop-Up
  TRY.
      LO_COLUMN = LO_COLUMNS->GET_COLUMN( 'BUKRS' ).
      LO_COLUMN->SET_LONG_TEXT( 'Empresa' ).
      LO_COLUMN = LO_COLUMNS->GET_COLUMN( 'COD_MOEDA' ).
      LO_COLUMN->SET_LONG_TEXT( 'Tp. de Moeda' ).
      LO_COLUMN = LO_COLUMNS->GET_COLUMN( 'WAERS' ).
      LO_COLUMN->SET_LONG_TEXT( 'Moeda' ).
      LO_COLUMN = LO_COLUMNS->GET_COLUMN( 'EXE_PERIO' ).
      LO_COLUMN->SET_LONG_TEXT( 'Exe/Per' ).
      LO_COLUMN->SET_MEDIUM_TEXT( 'Exe/Per' ).
      LO_COLUMN->SET_SHORT_TEXT( 'Exe/Per' ).
      LO_COLUMN = LO_COLUMNS->GET_COLUMN( 'HKONT' ).
      LO_COLUMN->SET_LONG_TEXT( 'Conta do Razão' ).
      LO_COLUMN = LO_COLUMNS->GET_COLUMN( 'VBUND' ).
      LO_COLUMN->SET_LONG_TEXT( 'S. Parceira' ).
      LO_COLUMN = LO_COLUMNS->GET_COLUMN( 'VAL_MENSAL' ).
      LO_COLUMN->SET_LONG_TEXT( 'Mov. Mensal' ).
      LO_COLUMN->SET_MEDIUM_TEXT( 'Mov. Mensal' ).
      LO_COLUMN->SET_SHORT_TEXT( 'Mensal' ).
      LO_COLUMN = LO_COLUMNS->GET_COLUMN( 'VAL_ACUMUL' ).
      LO_COLUMN->SET_LONG_TEXT( 'Acumulado' ).
      LO_COLUMN->SET_MEDIUM_TEXT( 'Acumulado' ).
      LO_COLUMN->SET_SHORT_TEXT( 'Acumulado' ).
    CATCH CX_SALV_NOT_FOUND.
  ENDTRY.

  LO_TABLE->SET_SCREEN_POPUP(
  START_COLUMN = 10
  END_COLUMN   = 105
  START_LINE   = 1
  END_LINE     = 10 ).

  LO_TABLE->DISPLAY( ).


ENDFORM.
