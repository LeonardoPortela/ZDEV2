FUNCTION ZDUE_IMPORTAR_DUE_SISCOMEX.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(I_NUMERO_DUE) TYPE  ZDE_NUMERO_DUE OPTIONAL
*"     REFERENCE(I_NUMERO_RUC) TYPE  ZDE_NUMERO_RUC OPTIONAL
*"     REFERENCE(I_BUKRS_AUTH) TYPE  BUKRS
*"     REFERENCE(I_ID_NOMEACAO_TRAN) TYPE  ZID_NOMEACAO OPTIONAL
*"     REFERENCE(I_EMB_CONTAINER) TYPE  CHAR1 OPTIONAL
*"     REFERENCE(I_LCTO_AVULSO) TYPE  ZDE_LCTO_AVULSO OPTIONAL
*"     REFERENCE(I_FATURA_MOT_DISP_NF) TYPE
*"        ZDE_FATURA_MOTIVO_DISPENSA_NF OPTIONAL
*"     REFERENCE(I_IMPORTADOR) TYPE  KUNNR OPTIONAL
*"     REFERENCE(I_CHECK_NF_CCT_MAN) TYPE  CHAR01 OPTIONAL
*"  EXPORTING
*"     REFERENCE(E_ID_DUE) TYPE  ZDE_ID_DUE
*"     REFERENCE(E_ZSDT0170) TYPE  ZSDT0170
*"     REFERENCE(E_ZSDT0172) TYPE  ZSDT0172_T
*"     REFERENCE(E_ZSDT0173) TYPE  ZSDT0173_T
*"  RAISING
*"      ZCX_DUE
*"----------------------------------------------------------------------

  DATA: ZCL_TOKEN_SISCOMEX TYPE REF TO ZCL_TOKEN_SISCOMEX,
        ZCL_DUE            TYPE REF TO ZCL_DUE.

  DATA: LWA_DUE_COMPLETA   TYPE ZDE_DUE_COMPLETA.
  DATA: v_matnr18          TYPE matnr18.


  DATA: LWA_ZSDT0170  TYPE ZSDT0170,

        LIT_ZSDT0172  TYPE TABLE OF ZSDT0172,
        LWA_ZSDT0172  TYPE ZSDT0172,

        LIT_ZSDT0173  TYPE TABLE OF ZSDT0173,
        LWA_ZSDT0173  TYPE ZSDT0173,

        LIT_ZSDT0174  TYPE TABLE OF ZSDT0174,
        LWA_ZSDT0174  TYPE ZSDT0174,

        LIT_ZSDT0190  TYPE TABLE OF ZSDT0190,
        LWA_ZSDT0190  TYPE ZSDT0190.

  DATA: LVA_DATA_HORA_EVENTO TYPE C LENGTH 100,
        LVA_BACEN_LIKE       TYPE ZPAIS-BACEN,
        LWA_ENDERECO         TYPE ADDR1_VAL.

  DATA: LWA_ZLEST0146         TYPE ZLEST0146,
        LIT_ZLEST0147         TYPE ZLEST0147_T,
        LIT_ZLEST0168         TYPE ZLEST0168_T,
        LVA_DOC_RATEIO        TYPE CHAR01,
        LVA_DS_RUC_DUE        TYPE CHAR50.

  FREE: ZCL_TOKEN_SISCOMEX, ZCL_DUE.

  CLEAR: LWA_DUE_COMPLETA, E_ID_DUE, E_ZSDT0170, E_ZSDT0172, E_ZSDT0173.

  CLEAR: LWA_ZSDT0170,
         LIT_ZSDT0172[],
         LWA_ZSDT0172,
         LIT_ZSDT0173[],
         LWA_ZSDT0173,
         LIT_ZSDT0174[],
         LWA_ZSDT0174,
         LIT_ZSDT0190[],
         LWA_ZSDT0190.

  IF I_BUKRS_AUTH IS INITIAL.
    MESSAGE I162.
    EXIT.
  ENDIF.

  IF ( I_NUMERO_DUE IS INITIAL ) AND ( I_NUMERO_RUC IS INITIAL ).
    MESSAGE I163.
    EXIT.
  ENDIF.

  IF I_NUMERO_DUE IS NOT INITIAL.

    SELECT SINGLE *
      FROM ZSDT0170 INTO @DATA(LWA_ZSDT0170_EXISTS)
     WHERE NUMERO_DUE EQ @I_NUMERO_DUE
       AND LOEKZ      EQ @ABAP_FALSE.

  ELSEIF I_NUMERO_RUC IS NOT INITIAL.

    SELECT SINGLE *
      FROM ZSDT0170 INTO LWA_ZSDT0170_EXISTS
     WHERE NUMERO_RUC EQ I_NUMERO_RUC
       AND LOEKZ      EQ ABAP_FALSE.

  ENDIF.

  IF SY-SUBRC EQ 0 .
    RAISE EXCEPTION TYPE ZCX_DUE
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                          MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                          ATTR1 = 'Registro DU-e já existente!'
                          ATTR2 = | ID. DU-e { LWA_ZSDT0170_EXISTS-ID_DUE } |
                          )
        MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
        MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
        MSGV1  = 'Registro DU-e já existente!'
        MSGV2  = | ID. DU-e { LWA_ZSDT0170_EXISTS-ID_DUE }|
        MSGTY  = 'E'.
  ENDIF.



*--------------------------------------------------------------------------------------------*
* Autenticação Portal
*--------------------------------------------------------------------------------------------*
  CREATE OBJECT ZCL_TOKEN_SISCOMEX.
  ZCL_TOKEN_SISCOMEX->ZIF_CADASTRO~NOVO_REGISTRO( ).
  ZCL_TOKEN_SISCOMEX->SET_BUKRS( I_BUKRS_AUTH ).
  ZCL_TOKEN_SISCOMEX->SET_ROLE_TYPE( 'IMPEXP' ). "Declarante importador/exportador
  ZCL_TOKEN_SISCOMEX->ZIF_CADASTRO~GRAVAR_REGISTRO( RECEIVING I_GRAVOU = DATA(_GRAVOU) ).
  CHECK _GRAVOU EQ ABAP_TRUE.

*---------------------------------------------------------------------------------------------------------------------------------------------------------*
* Autenticação Portal
*---------------------------------------------------------------------------------------------------------------------------------------------------------*
  CREATE OBJECT ZCL_DUE.

  ZCL_DUE->SET_TOKEN( ZCL_TOKEN_SISCOMEX ). "Set token para Validação.

  IF I_NUMERO_DUE IS NOT INITIAL.

    CONCATENATE 'DU-e:' I_NUMERO_DUE INTO LVA_DS_RUC_DUE SEPARATED BY SPACE.

    TRY .
      LWA_DUE_COMPLETA = ZCL_DUE->CONSULTA_DUE_COMPLETA( I_NUMERO_DUE = I_NUMERO_DUE ).
    CATCH ZCX_DUE INTO DATA(EX_DUE).
      EX_DUE->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'W' ).
      EXIT.
    ENDTRY.

  ELSEIF I_NUMERO_RUC IS NOT INITIAL.

    CONCATENATE 'RUC:' I_NUMERO_RUC INTO LVA_DS_RUC_DUE SEPARATED BY SPACE.

    TRY .
      LWA_DUE_COMPLETA = ZCL_DUE->CONSULTA_DUE_COMPLETA( I_NUMERO_RUC = I_NUMERO_RUC ).
    CATCH ZCX_DUE INTO EX_DUE.
      EX_DUE->PUBLISHED_ERRO( I_MSGTY = 'S' I_MSGTY_DISPLAY = 'W' ).
      EXIT.
    ENDTRY.

  ENDIF.

  IF LWA_DUE_COMPLETA-NUMERO IS INITIAL.
    RAISE EXCEPTION TYPE ZCX_DUE
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                          MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                          ATTR1 = 'DU-e não encontrada no portal!'
                          ATTR2 = LVA_DS_RUC_DUE
                          )
        MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
        MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
        MSGV1  = 'DU-e não encontrada no portal!'
        MSGV2  = LVA_DS_RUC_DUE
        MSGTY  = 'E'.
  ENDIF.

*---------------------------------------------------------------------------------------------------------------------------------------------------------*
* Preenchimento Cabeçalho DU-e - Tabela ZSDT0170
*---------------------------------------------------------------------------------------------------------------------------------------------------------*

  LWA_ZSDT0170-ID_NOMEACAO_TRAN = I_ID_NOMEACAO_TRAN.
  LWA_ZSDT0170-EMB_CONTAINER    = I_EMB_CONTAINER.
  LWA_ZSDT0170-LCTO_AVULSO      = I_LCTO_AVULSO.
  LWA_ZSDT0170-IMPORTADO_PORTAL = ABAP_TRUE.

  IF NOT ( ( LWA_DUE_COMPLETA-DECLARANTE-NUMERODODOCUMENTO IS NOT INITIAL ) AND ( LWA_DUE_COMPLETA-DECLARANTE-TIPODODOCUMENTO EQ 'CNPJ' ) ).
    RAISE EXCEPTION TYPE ZCX_DUE
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                          MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                          ATTR1 = 'CNPJ Declarante não encontrado' )
        MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
        MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
        MSGV1  = 'CNPJ Declarante não encontrado'
        MSGTY  = 'E'.
  ENDIF.

  TRY.
    ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
               )->SET_PARCEIRO_CNPJ_CPF_IE( I_CNPJ = CONV #( LWA_DUE_COMPLETA-DECLARANTE-NUMERODODOCUMENTO )
               )->CK_PARCEIRO_LOCAL_NEGOCIO( IMPORTING E_J_1BBRANCH = DATA(LWA_BRANCH_DECLARANTE)
               )->GET_REGIO( IMPORTING E_LAND1 = LWA_ZSDT0170-LAND1
               )->GET_ID_PARCEIRO( IMPORTING E_PARCEIRO = DATA(LVA_ID_PARCEIRO) ).

    LWA_ZSDT0170-BUKRS              = LWA_BRANCH_DECLARANTE-BUKRS.
    LWA_ZSDT0170-CNPJ_DECLARANTE    = LWA_DUE_COMPLETA-DECLARANTE-NUMERODODOCUMENTO.
    LWA_ZSDT0170-TP_EXPORTACAO      = 'D'.

  CATCH ZCX_PARCEIROS INTO DATA(EX_PARCEIROS).
    RAISE EXCEPTION TYPE ZCX_DUE
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                          MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                          ATTR1 = |Filial CNPJ { LWA_DUE_COMPLETA-DECLARANTE-NUMERODODOCUMENTO } não encontrada!| )
        MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
        MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
        MSGV1  = |Filial CNPJ { LWA_DUE_COMPLETA-DECLARANTE-NUMERODODOCUMENTO } não encontrada!|
        MSGTY  = 'E'.
  ENDTRY.

  LWA_ZSDT0170-NUMERO_RUC            = LWA_DUE_COMPLETA-RUC.
  LWA_ZSDT0170-NUMERO_DUE            = LWA_DUE_COMPLETA-NUMERO.
  LWA_ZSDT0170-CODIGO_URF_DESPACHO   = LWA_DUE_COMPLETA-UNIDADELOCALDEDESPACHO-CODIGO.
  LWA_ZSDT0170-CODIGO_RA_DESPACHO    = LWA_DUE_COMPLETA-RECINTOADUANEIRODEDESPACHO-CODIGO.

  IF LWA_DUE_COMPLETA-DESPACHOEMRECINTOALFANDEGADO EQ ABAP_TRUE.
    LWA_ZSDT0170-TP_COD_LOCAL_DESPACHO = '281'.
  ELSEIF LWA_DUE_COMPLETA-DESPACHOEMRECINTODOMICILIAR EQ ABAP_TRUE.
    LWA_ZSDT0170-TP_COD_LOCAL_DESPACHO = '19'.
  ELSE.
    LWA_ZSDT0170-TP_COD_LOCAL_DESPACHO = '22'.
  ENDIF.

  CASE LWA_DUE_COMPLETA-FORMADEEXPORTACAO.
    WHEN 'POR_CONTA_PROPRIA'.
      LWA_ZSDT0170-FORMA_EXPORTACAO = '1001'.
    WHEN 'POR_CONTA_ORDEM_TERCEIROS'.
      LWA_ZSDT0170-FORMA_EXPORTACAO = '1002'.
    WHEN 'POR_OPERADOR_REMESSA_POSTAL'.
      LWA_ZSDT0170-FORMA_EXPORTACAO = '1003'.
    WHEN OTHERS.
      RAISE EXCEPTION TYPE ZCX_DUE
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                            MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                            ATTR1 = 'Forma de exportação não foi definida!' )
          MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
          MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
          MSGV1  = 'Forma de exportação não foi definida!'
          MSGTY  = 'E'.
  ENDCASE.

  CASE LWA_DUE_COMPLETA-SITUACAOESPECIAL.
    WHEN 'DUE_A_POSTERIORI'.
      LWA_ZSDT0170-SITUACAO_ESPECIAL = '2001'.
    WHEN 'EMBARQUE_ANTECIPADO'.
      LWA_ZSDT0170-SITUACAO_ESPECIAL = '2002'.
    WHEN 'EXPORTACAO_SEM_SAIDA_PAIS'.
      LWA_ZSDT0170-SITUACAO_ESPECIAL = '2003'.
  ENDCASE.

  LWA_ZSDT0170-OBSERVACOES_GERAIS = LWA_DUE_COMPLETA-INFORMACOESCOMPLEMENTARES.

  CASE LWA_DUE_COMPLETA-MOEDA-CODIGO.
    WHEN '220'.
      LWA_ZSDT0170-MOEDA_CAMBIO = 'USD'.
    WHEN OTHERS.
      RAISE EXCEPTION TYPE ZCX_DUE
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                            MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                            ATTR1 = 'Moeda Cambio não foi definida!' )
          MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
          MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
          MSGV1  = 'Moeda Cambio não foi definida!'
          MSGTY  = 'E'.
  ENDCASE.

  LWA_ZSDT0170-CODIGO_URF_EMBARQUE = LWA_DUE_COMPLETA-UNIDADELOCALDEEMBARQUE-CODIGO.
  LWA_ZSDT0170-CODIGO_RA_EMBARQUE  = LWA_DUE_COMPLETA-RECINTOADUANEIRODEEMBARQUE-CODIGO.

  DATA(LVA_DUE_COM_NFE) = ABAP_FALSE.
  LOOP AT LWA_DUE_COMPLETA-ITENS INTO DATA(LWA_ITEM_DUE).

    IF LWA_ITEM_DUE-ITEMDANOTAFISCALDEEXPORTACAO IS NOT INITIAL .
      LVA_DUE_COM_NFE = ABAP_TRUE.
      EXIT.
    ENDIF.

  ENDLOOP.

  IF LVA_DUE_COM_NFE EQ ABAP_TRUE.
    LWA_ZSDT0170-TP_DUE = '2'.
  ELSE.
    LWA_ZSDT0170-TP_DUE = '1'.
  ENDIF.

  CASE LWA_DUE_COMPLETA-SITUACAO.
    WHEN 'EM_ELABORACAO'.
      LWA_ZSDT0170-SITUACAO_DUE = '1'.
    WHEN 'REGISTRADA'.
      LWA_ZSDT0170-SITUACAO_DUE = '10'.
    WHEN 'ACD_EM_PROCESSAMENTO'.

    WHEN 'CARGA_APRESENTADA_PARA_DESPACHO'.
      LWA_ZSDT0170-SITUACAO_DUE = '11'.
    WHEN 'LIBERADA_SEM_CONFERENCIA_ADUANEIRA'.
      LWA_ZSDT0170-SITUACAO_DUE = '20'.
    WHEN 'SELECIONADA_PARA_FISCALIZACAO'.
      LWA_ZSDT0170-SITUACAO_DUE = '21'.
    WHEN 'EMBARQUE_ANTECIPADO_COM_PENDENCIA_LPCO'.

    WHEN 'EMBARQUE_ANTECIPADO_AUTORIZADO'.
      LWA_ZSDT0170-SITUACAO_DUE = '25'.
    WHEN 'EMBARQUE_ANTECIPADO_PENDENTE_DE_AUTORIZACAO'.
      LWA_ZSDT0170-SITUACAO_DUE = '26'.
    WHEN 'EM_ANALISE_FISCAL'.
      LWA_ZSDT0170-SITUACAO_DUE = '30'.
    WHEN 'CONCLUSAO_DA_CONFERENCIA_ADUANA'.
      LWA_ZSDT0170-SITUACAO_DUE = '35'.
    WHEN 'DESEMBARACADA_COM_PENDENCIA_LPCO'.

    WHEN 'DESEMBARACADA'.
      LWA_ZSDT0170-SITUACAO_DUE = '40'.
    WHEN 'AVERBADA_SEM_DIVERGENCIA'.
      LWA_ZSDT0170-SITUACAO_DUE = '70'.
    WHEN 'CANCELADA_PELO_EXPORTADOR'.
      LWA_ZSDT0170-SITUACAO_DUE = '80'.
    WHEN 'CANCELADA_POR_EXPIRACAO_DE_PRAZO'.
      LWA_ZSDT0170-SITUACAO_DUE = '81'.
    WHEN 'CANCELADA_PELA_ADUANA'.
      LWA_ZSDT0170-SITUACAO_DUE = '82'.
    WHEN 'CANCELADA_PELA_ADUANA_A_PEDIDO_DO_EXPORTADOR'.
      LWA_ZSDT0170-SITUACAO_DUE = '83'.
    WHEN 'INTERROMPIDA'.
      LWA_ZSDT0170-SITUACAO_DUE = '86'.
  ENDCASE.

  LWA_ZSDT0170-DT_REGISTRO     = SY-DATUM.
  LWA_ZSDT0170-HR_REGISTRO     = SY-UZEIT.
  LWA_ZSDT0170-US_REGISTRO     = SY-UNAME.

  LOOP AT LWA_DUE_COMPLETA-EVENTOSDOHISTORICO INTO DATA(LWA_EVENTO_HISTORICO) WHERE EVENTO EQ 'Registro'.

    LVA_DATA_HORA_EVENTO = LWA_EVENTO_HISTORICO-DATAEHORADOEVENTO.

    REPLACE ALL OCCURRENCES OF '.' IN LVA_DATA_HORA_EVENTO WITH ''.
    REPLACE ALL OCCURRENCES OF '-' IN LVA_DATA_HORA_EVENTO WITH ''.
    REPLACE ALL OCCURRENCES OF ':' IN LVA_DATA_HORA_EVENTO WITH ''.

    IF LVA_DATA_HORA_EVENTO(8) IS NOT INITIAL.
      LWA_ZSDT0170-DT_REGISTRO_PORTAL  = LVA_DATA_HORA_EVENTO(8).
    ENDIF.

    IF LVA_DATA_HORA_EVENTO+9(6) IS NOT INITIAL.
      LWA_ZSDT0170-HR_REGISTRO_PORTAL  = LVA_DATA_HORA_EVENTO+9(6).
    ENDIF.

    LWA_ZSDT0170-CPF_REGISTRO_PORTAL = LWA_EVENTO_HISTORICO-RESPONSAVEL.

  ENDLOOP.

  LWA_ZSDT0170-CHAVE_ACESSO = LWA_DUE_COMPLETA-CHAVEDEACESSO.

*---------------------------------------------------------------------------------------------------------------------------------------------------------*
* Preenchimento Itens DU-e - Tabela ZSDT0172
*---------------------------------------------------------------------------------------------------------------------------------------------------------*

  LOOP AT LWA_DUE_COMPLETA-ITENS INTO LWA_ITEM_DUE.

    CLEAR: LWA_ZSDT0172.

    LWA_ZSDT0172-ID_DUE_ITEM     = LWA_ITEM_DUE-NUMERO.

    IF NOT ( ( LWA_ITEM_DUE-EXPORTADOR-NUMERODODOCUMENTO IS NOT INITIAL ) AND ( LWA_ITEM_DUE-EXPORTADOR-TIPODODOCUMENTO EQ 'CNPJ' ) ).
      RAISE EXCEPTION TYPE ZCX_DUE
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                            MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                            ATTR1 = 'CNPJ Exportador não encontrado'
                            ATTR2 = |Item DU-e { LWA_ITEM_DUE-NUMERO } |
                            )
          MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
          MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
          MSGV1  = 'CNPJ Exportador não encontrado'
          MSGV2  = |Item DU-e { LWA_ITEM_DUE-NUMERO } |
          MSGTY  = 'E'.
    ENDIF.


    TRY.
      CLEAR: LWA_ENDERECO.

      ZCL_FORNECEDORES=>ZIF_PARCEIROS~GET_INSTANCE(
                 )->SET_PARCEIRO_CNPJ_CPF_IE( I_CNPJ = CONV #( LWA_ITEM_DUE-EXPORTADOR-NUMERODODOCUMENTO )
                 )->CK_PARCEIRO_LOCAL_NEGOCIO( IMPORTING E_J_1BBRANCH = DATA(LWA_BRANCH_EXP)
                 )->GET_NAME( IMPORTING E_NAME = DATA(LWA_EXPORTADOR_NOME)
                 )->GET_REGIO( IMPORTING E_LAND1 = LWA_ZSDT0172-EXPORTADOR_COUNTRY
                                         E_REGIO = LWA_ZSDT0172-EXPORTADOR_REGION
                 )->GET_ENDERECO( IMPORTING E_ENDERECO = LWA_ENDERECO ).

      LWA_ZSDT0172-EXPORTADOR_CNPJ    = LWA_ITEM_DUE-EXPORTADOR-NUMERODODOCUMENTO.
      LWA_ZSDT0172-EXPORTADOR_NOME    = LWA_EXPORTADOR_NOME.

      CONCATENATE LWA_ENDERECO-STREET LWA_ENDERECO-CITY2 LWA_ENDERECO-CITY1 INTO LWA_ZSDT0172-EXPORTADOR_CPL_END SEPARATED BY SPACE.

    CATCH ZCX_PARCEIROS INTO EX_PARCEIROS.
      RAISE EXCEPTION TYPE ZCX_DUE
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                            MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                            ATTR1 = |Filial CNPJ { LWA_ITEM_DUE-EXPORTADOR-NUMERODODOCUMENTO } não encontrada!| )
          MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
          MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
          MSGV1  = |Filial CNPJ { LWA_ITEM_DUE-EXPORTADOR-NUMERODODOCUMENTO } não encontrada!|
          MSGTY  = 'E'.
    ENDTRY.



    TRY.
      CLEAR: LWA_ENDERECO.
      ZCL_CLIENTES=>ZIF_PARCEIROS~GET_INSTANCE(
                 )->SET_PARCEIRO( I_PARCEIRO = CONV #( I_IMPORTADOR )
                 )->GET_NAME( IMPORTING E_NAME = DATA(LVA_IMPORTADOR_NOME)
                 )->GET_REGIO( IMPORTING E_LAND1 = LWA_ZSDT0172-IMPORTADOR_COUNTRY
                 )->GET_ENDERECO( IMPORTING E_ENDERECO = LWA_ENDERECO ).

      LWA_ZSDT0172-IMPORTADOR_CODIGO    = I_IMPORTADOR.
      LWA_ZSDT0172-IMPORTADOR_NOME      = LVA_IMPORTADOR_NOME.

      CONCATENATE LWA_ENDERECO-STREET LWA_ENDERECO-CITY2 LWA_ENDERECO-CITY1 INTO LWA_ZSDT0172-IMPORTADOR_CPL_END SEPARATED BY SPACE.

    CATCH ZCX_PARCEIROS INTO EX_PARCEIROS.
      RAISE EXCEPTION TYPE ZCX_DUE
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                            MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                            ATTR1 = |Cliente Codigo { I_IMPORTADOR } não encontrado!| )
          MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
          MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
          MSGV1  = |Cliente Codigo { I_IMPORTADOR } não encontrado!|
          MSGTY  = 'E'.
    ENDTRY.


    LWA_ZSDT0172-FATURA_TP_CODIGO = '388'. "Nota Fiscal.
    LWA_ZSDT0172-FATURA_ID        = LWA_ITEM_DUE-ITEMDANOTAFISCALDEEXPORTACAO-NOTAFISCAL-CHAVEDEACESSO.

    CALL FUNCTION 'ZDUE_GET_DOC_FISCAL'
      EXPORTING
        I_CHAVE      = LWA_ZSDT0172-FATURA_ID
        I_DIRECT     = '2'
        I_PROPRIA    = ABAP_TRUE
      IMPORTING
        E_DOCNUM      = LWA_ZSDT0172-DOCNUM.

    IF ( LWA_ZSDT0172-DOCNUM IS INITIAL ).
      RAISE EXCEPTION TYPE ZCX_DUE
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                            MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                            ATTR1 = |Documento Fiscal Exportação não encontrado!|
                            ATTR2 = |NF-e { LWA_ZSDT0172-FATURA_ID } | )
          MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
          MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
          MSGV1  = |Documento Fiscal Exportação não encontrado!|
          MSGV2  = |NF-e { LWA_ZSDT0172-FATURA_ID } |
          MSGTY  = 'E'.
    ENDIF.

    LWA_ZSDT0172-FATURA_MOTIVO_DISPENSA_NF = I_FATURA_MOT_DISP_NF.
    LWA_ZSDT0172-CODIGO_COND_VENDA         = LWA_ITEM_DUE-CODIGOCONDICAOVENDA-CODIGO.
    LWA_ZSDT0172-VLR_LOCAL_EMBARQUE        = LWA_ITEM_DUE-VALORDAMERCNOLOCALDEEMBARQUE.
    LWA_ZSDT0172-VLR_COND_VENDA            = LWA_ITEM_DUE-VALORDAMERCNACONDICAODEVENDA.
    LWA_ZSDT0172-DESC_MERCADORIA           = LWA_ITEM_DUE-DESCRICAODAMERCADORIA.
    LWA_ZSDT0172-CODIGO_NCM                = LWA_ITEM_DUE-NCM-CODIGO.

    PERFORM F_CONV_UE_SISCOMEX USING LWA_ITEM_DUE-NCM-UNIDADEMEDIDAESTATISTICA
                            CHANGING LWA_ZSDT0172-UE_EXPORTADA.

    IF LWA_ZSDT0172-UE_EXPORTADA IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_DUE
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                            MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                            ATTR1 = |Unidade Estatistica Exp. não definida!| )
          MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
          MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
          MSGV1  = |Unidade Estatistica Exp. não definida!|
          MSGTY  = 'E'.
    ENDIF.

    LWA_ZSDT0172-QTDE_UE_EXPORTADA = LWA_ITEM_DUE-QUANTIDADENAUNIDESTATISTICA.

    IF ( LWA_ITEM_DUE-UNIDADECOMERCIALIZADA NE 'KG' ).
      RAISE EXCEPTION TYPE ZCX_DUE
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                              MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                              ATTR1 = |Unidade Comercial Exp. não definida!| )
            MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
            MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
            MSGV1  = |Unidade Comercial Exp. não definida!|
            MSGTY  = 'E'.
    ENDIF.

    LWA_ZSDT0172-UC_EXPORTADA      = LWA_ITEM_DUE-UNIDADECOMERCIALIZADA.
    LWA_ZSDT0172-QTDE_UC_EXPORTADA = LWA_ITEM_DUE-QUANTIDADENAUNIDCOMERCIALIZADA.
    LWA_ZSDT0172-MATNR             = LWA_ITEM_DUE-ITEMDANOTAFISCALDEEXPORTACAO-CODIGODOPRODUTO.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT     = LWA_ZSDT0172-MATNR
      IMPORTING
        OUTPUT    = v_matnr18.

    LWA_ZSDT0172-MATNR = v_matnr18.
    SELECT SINGLE *
      FROM MARA INTO @DATA(LWA_MARA_ITEM_DUE)
     WHERE MATNR EQ @LWA_ZSDT0172-MATNR.

    IF NOT ( SY-SUBRC EQ 0  AND LWA_ZSDT0172-MATNR IS NOT INITIAL ).
      RAISE EXCEPTION TYPE ZCX_DUE
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                            MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                            ATTR1 = |Material { LWA_ZSDT0172-MATNR } não encontrado!|
                            ATTR2 = |Item DU-e { LWA_ITEM_DUE-NUMERO } |
                            )
          MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
          MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
          MSGV1  = |Material { LWA_ZSDT0172-MATNR } não encontrado!|
          MSGV2  = |Item DU-e { LWA_ITEM_DUE-NUMERO } |
          MSGTY  = 'E'.
    ENDIF.

    LWA_ZSDT0172-PESO_LIQ_TOTAL = LWA_ITEM_DUE-PESOLIQUIDOTOTAL.
    LWA_ZSDT0172-PRECO_TON      = LWA_ZSDT0172-VLR_COND_VENDA / ( LWA_ZSDT0172-PESO_LIQ_TOTAL / 1000 ).

    LOOP AT LWA_ITEM_DUE-LISTADEENQUADRAMENTOS INTO DATA(LWA_LISTA_ENQUADRAMENTO).
      LWA_ZSDT0172-CODIGO_ENQUADRAMENTO = LWA_LISTA_ENQUADRAMENTO-CODIGO.
    ENDLOOP.

    APPEND LWA_ZSDT0172 TO LIT_ZSDT0172.

*---------------------------------------------------------------------------------------------------------------------------------------------------------*
*   Preenchimento Faturas referenciadas no Item DU-e - Tabela ZSDT0173
*---------------------------------------------------------------------------------------------------------------------------------------------------------*

    LOOP AT LWA_ITEM_DUE-ITENSDANOTADEREMESSA INTO DATA(LWA_ITEM_NF_REMESSA).

      CLEAR: LWA_ZSDT0173.

      LWA_ZSDT0173-ID_DUE_ITEM       = LWA_ZSDT0172-ID_DUE_ITEM.
      LWA_ZSDT0173-ID_FATURA_REF     = LWA_ITEM_NF_REMESSA-NOTAFISCAL-CHAVEDEACESSO.
      LWA_ZSDT0173-ID_FATURA         = LWA_ITEM_NF_REMESSA-NUMERODOITEM.
      LWA_ZSDT0173-FATURA_TP_CODIGO  = '388'. "Nota Fiscal.

      IF LWA_ITEM_NF_REMESSA-NOTAFISCAL-NOTAFICALELETRONICA EQ ABAP_TRUE.

        LWA_ZSDT0173-REGIO            = LWA_ZSDT0173-ID_FATURA_REF(2).
        LWA_ZSDT0173-NFYEAR           = LWA_ZSDT0173-ID_FATURA_REF+2(2).
        LWA_ZSDT0173-NFMONTH          = LWA_ZSDT0173-ID_FATURA_REF+4(2).
        LWA_ZSDT0173-MODEL            = LWA_ZSDT0173-ID_FATURA_REF+20(2).
        LWA_ZSDT0173-SERIE            = LWA_ZSDT0173-ID_FATURA_REF+22(3).
        LWA_ZSDT0173-NFNUM9           = LWA_ZSDT0173-ID_FATURA_REF+25(9).
        LWA_ZSDT0173-DOCNUM9          = LWA_ZSDT0173-ID_FATURA_REF+34(9).
        LWA_ZSDT0173-CDV              = LWA_ZSDT0173-ID_FATURA_REF+43(1).

        CALL FUNCTION 'ZDUE_GET_DOC_FISCAL'
          EXPORTING
            I_BUKRS      = LWA_ZSDT0170-BUKRS
            I_CHAVE      = LWA_ZSDT0173-ID_FATURA_REF
            I_DIRECT     = '2'
            I_PROPRIA    = ABAP_TRUE
          IMPORTING
            E_DOCNUM      = LWA_ZSDT0173-DOCNUM.

        IF ( LWA_ZSDT0173-DOCNUM IS INITIAL ).

          CALL FUNCTION 'ZDUE_GET_DOC_FISCAL'
            EXPORTING
              I_BUKRS      = LWA_ZSDT0170-BUKRS
              I_CHAVE      = LWA_ZSDT0173-ID_FATURA_REF
              I_DIRECT     = '1'
              I_PROPRIA    = ABAP_FALSE
            IMPORTING
              E_DOCNUM     = LWA_ZSDT0173-DOCNUM.

          IF ( LWA_ZSDT0173-DOCNUM IS NOT INITIAL ).
            LWA_ZSDT0173-NF_PRODUTOR    = ABAP_TRUE.
            LWA_ZSDT0170-TP_EXPORTACAO  = 'I'.  "Exportação Indireta
          ENDIF.

          IF ( LWA_ZSDT0173-DOCNUM IS INITIAL ).

            RAISE EXCEPTION TYPE ZCX_DUE
              EXPORTING
                TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                                  MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                                  ATTR1 = |Documento Fiscal não encontrado!|
                                  ATTR2 = |NF-e { LWA_ZSDT0172-FATURA_ID } | )
                MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                MSGV1  = |Documento Fiscal não encontrado!|
                MSGV2  = |NF-e { LWA_ZSDT0172-FATURA_ID } |
                MSGTY  = 'E'.

          ENDIF.

        ENDIF.

      ELSE.
        MESSAGE I164 WITH LWA_ITEM_DUE-NUMERO. "Nota Fiscal Formulario API não lista

        CONTINUE.

        "LWA_ZSDT0173-NFNUM          = LWA_ITEM_NF_REMESSA-NOTAFISCAL-NUMERODODOCUMENTO.
      ENDIF.

      CASE ABAP_TRUE.
        WHEN LWA_ITEM_NF_REMESSA-NOTAFISCAL-IDENTIFICACAODOEMITENTE-CNPJ.
          LWA_ZSDT0173-EMISSOR_CNPJ      = LWA_ITEM_NF_REMESSA-NOTAFISCAL-IDENTIFICACAODOEMITENTE-NUMERO.
        WHEN LWA_ITEM_NF_REMESSA-NOTAFISCAL-IDENTIFICACAODOEMITENTE-CPF.
          LWA_ZSDT0173-EMISSOR_CPF       = LWA_ITEM_NF_REMESSA-NOTAFISCAL-IDENTIFICACAODOEMITENTE-NUMERO.
      ENDCASE.

      PERFORM F_CONV_UE_SISCOMEX USING LWA_ITEM_NF_REMESSA-NCM-UNIDADEMEDIDAESTATISTICA
                              CHANGING LWA_ZSDT0173-UE_EXPORTADA.

      LWA_ZSDT0173-QTDE_UE_EXPORTADA = LWA_ITEM_NF_REMESSA-QUANTIDADECONSUMIDA.

      CASE LWA_ZSDT0173-UE_EXPORTADA.
        WHEN 'TON'.
          LWA_ZSDT0173-PESO_LIQ_TOTAL  =  LWA_ZSDT0173-QTDE_UE_EXPORTADA * 1000.
        WHEN 'KG'.
          LWA_ZSDT0173-PESO_LIQ_TOTAL  =  LWA_ZSDT0173-QTDE_UE_EXPORTADA.
      ENDCASE.

      IF I_CHECK_NF_CCT_MAN EQ ABAP_FALSE.
        "Check se Documento está registrado no CCT
        CALL FUNCTION 'ZCCT_DADOS_RECEPCAO_CARGA'
          EXPORTING
            I_DOCNUM        = LWA_ZSDT0173-DOCNUM
          IMPORTING
            E_ZLEST0146     = LWA_ZLEST0146
            E_ZLEST0147     = LIT_ZLEST0147
            E_ZLEST0168     = LIT_ZLEST0168
            E_DOC_RATEIO    = LVA_DOC_RATEIO.

        IF ( LWA_ZLEST0146 IS NOT INITIAL ) AND ( LVA_DOC_RATEIO IS INITIAL ).
          LWA_ZSDT0173-REGISTRO_CCT  = ABAP_TRUE.
        ENDIF.
      ENDIF.

      APPEND LWA_ZSDT0173 TO LIT_ZSDT0173.

    ENDLOOP.

    IF I_CHECK_NF_CCT_MAN EQ ABAP_TRUE. "Determinar CCT NFs manualmente

      DATA(LIT_ZSDT0173_AUX) = LIT_ZSDT0173[].
      SORT LIT_ZSDT0173_AUX BY NF_PRODUTOR.
      DELETE ADJACENT DUPLICATES FROM LIT_ZSDT0173_AUX COMPARING NF_PRODUTOR.

      IF LINES( LIT_ZSDT0173_AUX ) > 1. "Se possuir NF Propria e NF Produtor, questionar quai NF possui CCT

        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            TITLEBAR              = 'Confirmação'
            TEXT_QUESTION         = 'Quais notas possuem CCT?'
            TEXT_BUTTON_1         = 'NFs Própria'
            TEXT_BUTTON_2         = 'NFs Terceiro'
            DEFAULT_BUTTON        = '1'
            DISPLAY_CANCEL_BUTTON = ''
          IMPORTING
            ANSWER                = VAR_ANSWER
          EXCEPTIONS
            TEXT_NOT_FOUND        = 1
            OTHERS                = 2.

        LOOP AT LIT_ZSDT0173 ASSIGNING FIELD-SYMBOL(<LFS_ZSDT0173>).

          CASE VAR_ANSWER.
            WHEN '1'. "Notas proprias
              CHECK <LFS_ZSDT0173>-NF_PRODUTOR EQ ABAP_FALSE.
            WHEN '2'. "Notas Terceiro
              CHECK <LFS_ZSDT0173>-NF_PRODUTOR EQ ABAP_TRUE.
            WHEN OTHERS.
              CONTINUE.
          ENDCASE.

          <LFS_ZSDT0173>-REGISTRO_CCT = ABAP_TRUE.

        ENDLOOP.

      ELSE.
        LOOP AT LIT_ZSDT0173 ASSIGNING <LFS_ZSDT0173>.
          <LFS_ZSDT0173>-REGISTRO_CCT = ABAP_TRUE.
        ENDLOOP.
      ENDIF.

    ENDIF.

*---------------------------------------------------------------------------------------------------------------------------------------------------------*
*   Preenchimento Paises Destino no Item DU-e - Tabela ZSDT0174
*---------------------------------------------------------------------------------------------------------------------------------------------------------*

    LOOP AT LWA_ITEM_DUE-LISTAPAISDESTINO INTO DATA(LWA_PAIS_DESTINO).

      CLEAR: LWA_ZSDT0174.

      LWA_ZSDT0174-ID_DUE_ITEM = LWA_ZSDT0172-ID_DUE_ITEM.

      LVA_BACEN_LIKE = LWA_PAIS_DESTINO-CODIGO && '%'.

      SELECT SINGLE *
        FROM ZPAIS INTO @DATA(LWA_ZPAIS)
       WHERE BACEN LIKE @LVA_BACEN_LIKE.

      IF SY-SUBRC NE 0.
        RAISE EXCEPTION TYPE ZCX_DUE
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
                              MSGNO = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
                              ATTR1 = |Cadastro Pais c/ Bacen { LWA_PAIS_DESTINO-CODIGO } não encontrado!| )
            MSGID  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGID
            MSGNO  = ZCX_DUE=>ZCX_ERRO_GERAL-MSGNO
            MSGV1  = |Cadastro Pais c/ Bacen { LWA_PAIS_DESTINO-CODIGO } não encontrado!|
            MSGTY  = 'E'.
      ENDIF.

      LWA_ZSDT0174-DESTINO_COUNTRY            = LWA_ZPAIS-LAND1.
      LWA_ZSDT0174-PESO_LIQ_TOTAL             = LWA_ZSDT0172-PESO_LIQ_TOTAL.
      LWA_ZSDT0174-UE_EXPORTADA               = LWA_ZSDT0172-UE_EXPORTADA.
      LWA_ZSDT0174-DESTINO_QTDE_UE_EXPORTADA  = LWA_ZSDT0172-QTDE_UE_EXPORTADA.

      APPEND LWA_ZSDT0174 TO LIT_ZSDT0174.

    ENDLOOP.

*---------------------------------------------------------------------------------------------------------------------------------------------------------*
*   Preenchimento LPCO no Item DU-e - Tabela ZSDT0190
*---------------------------------------------------------------------------------------------------------------------------------------------------------*

    LOOP AT LWA_ITEM_DUE-TRATAMENTOSADMINISTRATIVOS INTO DATA(LWA_TRATAMENTO_ADM).

      CLEAR: LWA_ZSDT0190.

      LWA_ZSDT0190-ID_DUE_ITEM = LWA_ZSDT0172-ID_DUE_ITEM.

      CHECK ( LWA_TRATAMENTO_ADM-CODIGOLPCO IS NOT INITIAL ).

      LWA_ZSDT0190-NR_LPCO = LWA_TRATAMENTO_ADM-CODIGOLPCO.

      APPEND LWA_ZSDT0190 TO LIT_ZSDT0190.

    ENDLOOP.

  ENDLOOP.

  FREE ZCL_DUE.
  CREATE OBJECT ZCL_DUE.

  "Seta Cabeçalho DU-e
  ZCL_DUE->SET_CABECALHO( I_ZSDT0170 = LWA_ZSDT0170 ).

  "Seta Itens DU-e
  LOOP AT LIT_ZSDT0172 INTO LWA_ZSDT0172.
    ZCL_DUE->ADD_ITEM( I_ZSDT0172 = LWA_ZSDT0172 ).
  ENDLOOP.

  "Seta Itens Paises Destino
  LOOP AT LIT_ZSDT0174 INTO LWA_ZSDT0174.
    ZCL_DUE->ADD_ITEM_PAIS_DESTINO( I_ZSDT0174 = LWA_ZSDT0174 ).
  ENDLOOP.

  "Seta Itens Faturas Referenciadas
  LOOP AT LIT_ZSDT0173 INTO LWA_ZSDT0173.
    ZCL_DUE->ADD_ITEM_FATURA_REF( I_ZSDT0173 = LWA_ZSDT0173 ).
  ENDLOOP.

  "Seta Itens LPCO
  LOOP AT LIT_ZSDT0190 INTO LWA_ZSDT0190.
    ZCL_DUE->ADD_ITEM_LPCO( I_ZSDT0190 = LWA_ZSDT0190 ).
  ENDLOOP.

  TRY .
    ZCL_DUE->GRAVAR_REGISTRO( IMPORTING E_ID_DUE    = E_ID_DUE
                                        E_ZSDT0172  = E_ZSDT0172
                                        E_ZSDT0173  = E_ZSDT0173
                                        E_ZSDT0170  = E_ZSDT0170 ).
  CATCH ZCX_DUE INTO EX_DUE.
    EX_DUE->PUBLISHED_ERRO( I_MSGTY = 'E' I_MSGTY_DISPLAY = 'W' ).
  ENDTRY.

ENDFUNCTION.
