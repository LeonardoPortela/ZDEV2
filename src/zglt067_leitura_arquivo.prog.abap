*----------------------------------------------------------------------*
***INCLUDE ZGLT067_LEITURA_ARQUIVO .
*----------------------------------------------------------------------*

TYPES: BEGIN OF TY_TAG25.
TYPES:   TAG25_1  TYPE C LENGTH 035. "Account Number
TYPES: END OF TY_TAG25.

TYPES: BEGIN OF TY_TAG28.
TYPES:   TAG28_1  TYPE C LENGTH 005, "Statement Number
         TAG28_2  TYPE C LENGTH 005. "Sequence Number
TYPES: END OF TY_TAG28.

TYPES: BEGIN OF TY_TAG60.
TYPES: TAG60_1  TYPE C LENGTH 001, "Debit/Credit indication
       TAG60_2  TYPE C LENGTH 006, "Initial Booking Date
       TAG60_3  TYPE C LENGTH 003, "ISO Currency Code
       TAG60_4  TYPE C LENGTH 015. "Amount
TYPES: END OF TY_TAG60.

TYPES: BEGIN OF TY_TAG61.
TYPES: TAG61_1  TYPE C LENGTH 006, "Value Date
       TAG61_2  TYPE C LENGTH 005, "Booking date
       TAG61_3  TYPE C LENGTH 002, "Debit/Credit indication
       TAG61_4  TYPE C LENGTH 001, "Fund Code
       TAG61_5  TYPE C LENGTH 015, "Amount
       TAG61_6  TYPE C LENGTH 004, "Transaction Type Code
       TAG61_7  TYPE C LENGTH 016, "Account Holder Reference
       TAG61_8  TYPE C LENGTH 016, "Bank Reference
       TAG61_9  TYPE C LENGTH 034. "Transaction Information
TYPES: END OF TY_TAG61.

TYPES: BEGIN OF TY_TAG62.
TYPES: TAG62_1  TYPE C LENGTH 001, "Debit/Credit indication
       TAG62_2  TYPE C LENGTH 006, "Initial Booking Date
       TAG62_3  TYPE C LENGTH 003, "ISO Currency Code
       TAG62_4  TYPE C LENGTH 015. "Amount
TYPES: END OF TY_TAG62.

TYPES: BEGIN OF TY_TAG64.
TYPES: TAG64_1  TYPE C LENGTH 001, "Debit/Credit indication
       TAG64_2  TYPE C LENGTH 006, "Initial Booking Date
       TAG64_3  TYPE C LENGTH 003, "ISO Currency Code
       TAG64_4  TYPE C LENGTH 015. "Amount
TYPES: END OF TY_TAG64.

TYPES: BEGIN OF TY_TAG65.
TYPES: TAG65_1  TYPE C LENGTH 001, "Debit/Credit indication
       TAG65_2  TYPE C LENGTH 006, "Initial Booking Date
       TAG65_3  TYPE C LENGTH 003, "ISO Currency Code
       TAG65_4  TYPE C LENGTH 015. "Amount
TYPES: END OF TY_TAG65.

TYPES: BEGIN OF TY_TAG86_20.
TYPES: TAG86_20_1  TYPE C LENGTH 010,
       TAG86_20_2  TYPE C LENGTH 030.
TYPES: END OF TY_TAG86_20.

TYPES: BEGIN OF TY_TAG86_60.
TYPES: TAG86_60_1  TYPE C LENGTH 004,
       TAG86_60_2  TYPE C LENGTH 030.
TYPES: END OF TY_TAG86_60.

TYPES: BEGIN OF TY_TAG86.
TYPES:   TAG86_1   TYPE C LENGTH 003, "Statement Number
         TAG86_00  TYPE C LENGTH 060, "Description of the GVC code;
         TAG86_20  TYPE TY_TAG86_20, "Description lines 1 through 10
         TAG86_21  TYPE TY_TAG86_20, "Description lines 1 through 10
         TAG86_22  TYPE TY_TAG86_20, "Description lines 1 through 10
         TAG86_23  TYPE TY_TAG86_20, "Description lines 1 through 10
         TAG86_24  TYPE TY_TAG86_20, "Description lines 1 through 10
         TAG86_25  TYPE TY_TAG86_20, "Description lines 1 through 10
         TAG86_26  TYPE TY_TAG86_20, "Description lines 1 through 10
         TAG86_27  TYPE TY_TAG86_20, "Description lines 1 through 10
         TAG86_28  TYPE TY_TAG86_20, "Description lines 1 through 10
         TAG86_29  TYPE TY_TAG86_20, "Description lines 1 through 10
         TAG86_30  TYPE C LENGTH 060, "Bank code for the creditor bank.
         TAG86_31  TYPE C LENGTH 060, "Creditor account number.
         TAG86_32  TYPE C LENGTH 060, "Creditor name.
         TAG86_33  TYPE C LENGTH 060, "Creditor name.
         TAG86_60  TYPE TY_TAG86_60, "Description lines 11 through 14.
         TAG86_61  TYPE TY_TAG86_60, "Description lines 11 through 14.
         TAG86_62  TYPE TY_TAG86_60, "Description lines 11 through 14.
         TAG86_63  TYPE TY_TAG86_60, "Description lines 11 through 14.
         TAG86_2   TYPE CHAR1250, "Texto Completo
         TAG86_20T TYPE CHAR1250, "Texto Completo
         TAG86_30T TYPE CHAR1250, "Texto Completo
         TAG86_60T TYPE CHAR1250. "Texto Completo
TYPES: END OF TY_TAG86.

TYPES: BEGIN OF TY_TABIX_EXCLUIR.
TYPES:   TABIX TYPE SY-TABIX. "Sequence Number
TYPES: END OF TY_TABIX_EXCLUIR.

TYPES: BEGIN OF TY_TABELA.
TYPES: TEXTO    TYPE C LENGTH 180,
       TABIX    TYPE SY-TABIX,
       TAG      TYPE C LENGTH 005,
       TAG20_1  TYPE C LENGTH 030,
       TAG21_1  TYPE C LENGTH 035,
       TAG25    TYPE TY_TAG25,
       TAG28    TYPE TY_TAG28,
       TAG60    TYPE TY_TAG60,
       TAG61    TYPE TY_TAG61,
       TAG86    TYPE TY_TAG86,
       TAG62    TYPE TY_TAG62,
       TAG64    TYPE TY_TAG64,
       TAG65    TYPE TY_TAG65.
TYPES: END OF TY_TABELA.

DATA: IT_TABELA     TYPE TABLE OF TY_TABELA,
      WA_TABELA     TYPE TY_TABELA,
      WA_T012K      TYPE T012K,
      IT_SPLIT      TYPE TABLE OF STRING,
      IT_SPLIT2     TYPE TABLE OF STRING,
      WA_SPLIT      TYPE STRING,
      WA_SPLIT2     TYPE STRING,
      LC_ARQUIVO    TYPE STRING,
      LC_QTD        TYPE I,
      LC_QTD2       TYPE I,
      NAO_FINALIZOU TYPE C LENGTH 1,
      COD_86        TYPE C LENGTH 3,
      TAG86_2_AUX   TYPE CHAR1250,
      TAG25         TYPE TY_TAG25,
      TAG60         TYPE TY_TAG60,
      IT_TABIX      TYPE TABLE OF TY_TABIX_EXCLUIR WITH HEADER LINE,
      IT_CONTA_DATA TYPE TABLE OF ZDE_CAB_EXTRATO_BANCO WITH HEADER LINE.

FIELD-SYMBOLS: <FS_TABELA>  TYPE TY_TABELA,
               <FS_TABELA2> TYPE TY_TABELA,
               <FS_CONTA>   TYPE ZDE_CAB_EXTRATO_BANCO.

*&---------------------------------------------------------------------*
*&      Form  LEITURA_ARQUIVO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_FILENAME  text
*----------------------------------------------------------------------*
FORM LEITURA_ARQUIVO  USING P_WA_FILENAME TYPE FILE_TABLE P_SY_SUBRC TYPE SY-SUBRC.

  DATA: LC_ARQUIVO TYPE STRING,
        LC_TEXTO   TYPE STRING.

  DATA: LC_AUX_TEXT TYPE C LENGTH 10.

  MOVE P_WA_FILENAME TO LC_ARQUIVO.

  CLEAR: IT_TABELA.

  DATA: BEGIN OF I_PO_DATA OCCURS 0,
          LINE(180),
        END OF I_PO_DATA.

  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      FILENAME                = LC_ARQUIVO
      FILETYPE                = 'ASC'
    TABLES
      DATA_TAB                = I_PO_DATA
    EXCEPTIONS
      FILE_OPEN_ERROR         = 1
      FILE_READ_ERROR         = 2
      NO_BATCH                = 3
      GUI_REFUSE_FILETRANSFER = 4
      INVALID_TYPE            = 5
      NO_AUTHORITY            = 6
      UNKNOWN_ERROR           = 7
      BAD_DATA_FORMAT         = 8
      HEADER_NOT_ALLOWED      = 9
      SEPARATOR_NOT_ALLOWED   = 10
      HEADER_TOO_LONG         = 11
      UNKNOWN_DP_ERROR        = 12
      ACCESS_DENIED           = 13
      DP_OUT_OF_MEMORY        = 14
      DISK_FULL               = 15
      DP_TIMEOUT              = 16
      OTHERS                  = 17.

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO  WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  LOOP AT I_PO_DATA.
    WA_TABELA-TEXTO = I_PO_DATA-LINE.
    APPEND WA_TABELA TO IT_TABELA.
  ENDLOOP.

  NAO_FINALIZOU = ABAP_FALSE.

  LOOP AT IT_TABELA ASSIGNING <FS_TABELA>.

    <FS_TABELA>-TABIX = SY-TABIX.

    IF <FS_TABELA>-TEXTO(1) EQ ':'.
      CLEAR: COD_86,
             NAO_FINALIZOU,
             TAG86_2_AUX.
      DELETE IT_TABIX WHERE TABIX EQ IT_TABIX-TABIX.
    ENDIF.

    "This tag contains a unique number that identifies the MT940 message.
    IF <FS_TABELA>-TEXTO(4) EQ ':20:'.
      <FS_TABELA>-TAG = <FS_TABELA>-TEXTO(4).
      SPLIT <FS_TABELA>-TEXTO AT ':' INTO: TABLE IT_SPLIT.
      LOOP AT IT_SPLIT INTO WA_SPLIT.
        IF WA_SPLIT IS NOT INITIAL AND WA_SPLIT NE '20'.
          MOVE WA_SPLIT TO <FS_TABELA>-TAG20_1.
        ENDIF.
      ENDLOOP.
    ENDIF.

    "If the MT 940 message is sent in response to an MT 920 request, this field must
    "contain the Transaction Reference Number from tag 20 of the request.
    IF <FS_TABELA>-TEXTO(4) EQ ':21:'.
      <FS_TABELA>-TAG = <FS_TABELA>-TEXTO(4).
      SPLIT <FS_TABELA>-TEXTO AT ':' INTO: TABLE IT_SPLIT.
      LOOP AT IT_SPLIT INTO WA_SPLIT.
        IF WA_SPLIT IS NOT INITIAL AND WA_SPLIT NE '21'.
          MOVE WA_SPLIT TO <FS_TABELA>-TAG21_1.
        ENDIF.
      ENDLOOP.
    ENDIF.

    "This tag contains the (bank) account number for the account being reported on.
    IF <FS_TABELA>-TEXTO(4) EQ ':25:'.
      <FS_TABELA>-TAG = <FS_TABELA>-TEXTO(4).
      SPLIT <FS_TABELA>-TEXTO AT ':' INTO: TABLE IT_SPLIT.
      LOOP AT IT_SPLIT INTO WA_SPLIT.
        IF WA_SPLIT IS NOT INITIAL AND WA_SPLIT NE '25'.
          MOVE: WA_SPLIT TO <FS_TABELA>-TAG25-TAG25_1.
          MOVE <FS_TABELA>-TAG25-TAG25_1 TO LC_AUX_TEXT.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = LC_AUX_TEXT
            IMPORTING
              OUTPUT = LC_AUX_TEXT.
          MOVE LC_AUX_TEXT TO <FS_TABELA>-TAG25-TAG25_1.
        ENDIF.
      ENDLOOP.
      TAG25 = <FS_TABELA>-TAG25.
    ENDIF.

    "This tag contains the (bank) account number for the account being reported on.
    IF <FS_TABELA>-TEXTO(5) EQ ':28C:'.
      <FS_TABELA>-TAG25 = TAG25.
      <FS_TABELA>-TAG   = <FS_TABELA>-TEXTO(5).
      SPLIT <FS_TABELA>-TEXTO AT ':' INTO: TABLE IT_SPLIT.
      LOOP AT IT_SPLIT INTO WA_SPLIT.
        IF WA_SPLIT IS NOT INITIAL AND WA_SPLIT NE '28C'.
          SPLIT WA_SPLIT AT '/' INTO: TABLE IT_SPLIT2.
          READ TABLE IT_SPLIT2 INTO WA_SPLIT2 INDEX 1.
          MOVE: WA_SPLIT2 TO <FS_TABELA>-TAG28-TAG28_1.
          READ TABLE IT_SPLIT2 INTO WA_SPLIT2 INDEX 2.
          MOVE: WA_SPLIT2 TO <FS_TABELA>-TAG28-TAG28_2.
        ENDIF.
      ENDLOOP.
    ENDIF.

    "This field is indicates whether the Initial Book Balance is a debit balance or a credit
    "balance; it also includes the date, the Currency Code and the balance.
    IF <FS_TABELA>-TEXTO(5) EQ ':60F:' OR <FS_TABELA>-TEXTO(4) EQ ':60M:'.
      <FS_TABELA>-TAG25 = TAG25.
      <FS_TABELA>-TAG   = <FS_TABELA>-TEXTO(5).
      SPLIT <FS_TABELA>-TEXTO AT ':' INTO: TABLE IT_SPLIT.
      LOOP AT IT_SPLIT INTO WA_SPLIT.
        IF WA_SPLIT IS NOT INITIAL AND WA_SPLIT NE '60F' AND
           WA_SPLIT IS NOT INITIAL AND WA_SPLIT NE '60M'.
          LC_QTD = STRLEN( WA_SPLIT ).
          MOVE WA_SPLIT+00(01) TO <FS_TABELA>-TAG60-TAG60_1.
          ADD -01 TO LC_QTD.
          MOVE WA_SPLIT+01(06) TO <FS_TABELA>-TAG60-TAG60_2.
          ADD -06 TO LC_QTD.
          MOVE WA_SPLIT+07(03) TO <FS_TABELA>-TAG60-TAG60_3.
          ADD -03 TO LC_QTD.
          MOVE WA_SPLIT+10(LC_QTD) TO <FS_TABELA>-TAG60-TAG60_4.
        ENDIF.
      ENDLOOP.
      TAG60 = <FS_TABELA>-TAG60.
    ENDIF.

    "Contains the data regarding a transaction
    IF <FS_TABELA>-TEXTO(4) EQ ':61:'.
      <FS_TABELA>-TAG25 = TAG25.
      <FS_TABELA>-TAG60 = TAG60.
      <FS_TABELA>-TAG = <FS_TABELA>-TEXTO(4).
      SPLIT <FS_TABELA>-TEXTO AT ':' INTO: TABLE IT_SPLIT.
      LOOP AT IT_SPLIT INTO WA_SPLIT.
        IF WA_SPLIT IS NOT INITIAL AND WA_SPLIT NE '61'.
          LC_QTD = STRLEN( WA_SPLIT ).
          MOVE WA_SPLIT+00(06) TO <FS_TABELA>-TAG61-TAG61_1.
          ADD -06 TO LC_QTD.
          MOVE WA_SPLIT+06(04) TO <FS_TABELA>-TAG61-TAG61_2.
          ADD -04 TO LC_QTD.

          IF WA_SPLIT+10(02) EQ 'RD' OR WA_SPLIT+10(02) EQ 'RC'.
            MOVE WA_SPLIT+10(02) TO <FS_TABELA>-TAG61-TAG61_3.
            ADD -02 TO LC_QTD.
            MOVE WA_SPLIT+12(LC_QTD) TO WA_SPLIT.
          ELSE.
            MOVE WA_SPLIT+10(01) TO <FS_TABELA>-TAG61-TAG61_3.
            CONDENSE <FS_TABELA>-TAG61-TAG61_3.
            ADD -01 TO LC_QTD.
            MOVE WA_SPLIT+11(LC_QTD) TO WA_SPLIT.
          ENDIF.

          SPLIT WA_SPLIT AT 'N' INTO: TABLE IT_SPLIT2.
          READ TABLE IT_SPLIT2 INDEX 1 INTO WA_SPLIT2.
          MOVE WA_SPLIT2 TO <FS_TABELA>-TAG61-TAG61_5.

          LC_QTD  = STRLEN( WA_SPLIT ).
          LC_QTD2 = STRLEN( WA_SPLIT2 ).
          LC_QTD  = LC_QTD - LC_QTD2.
          MOVE WA_SPLIT+LC_QTD2(LC_QTD) TO WA_SPLIT.
          LC_QTD  = STRLEN( WA_SPLIT ).

          MOVE WA_SPLIT(4) TO <FS_TABELA>-TAG61-TAG61_6.
          ADD -4 TO LC_QTD.

          IF LC_QTD LE 16.
            MOVE WA_SPLIT+4(LC_QTD) TO <FS_TABELA>-TAG61-TAG61_7.
          ENDIF.

        ENDIF.
      ENDLOOP.
    ENDIF.

    "Supplemental information for the account holder regarding the mutation.
    IF <FS_TABELA>-TEXTO(4) EQ ':86:' OR NAO_FINALIZOU EQ ABAP_TRUE.
      <FS_TABELA>-TAG25 = TAG25.
      <FS_TABELA>-TAG60 = TAG60.
      IF COD_86 IS INITIAL.
        COD_86 = <FS_TABELA>-TEXTO+4(3).
        LC_QTD  = STRLEN( <FS_TABELA>-TEXTO ).
        ADD -7 TO LC_QTD.
        <FS_TABELA>-TEXTO = <FS_TABELA>-TEXTO+7(LC_QTD).
      ENDIF.
      <FS_TABELA>-TAG86-TAG86_1 = COD_86.
      NAO_FINALIZOU := ABAP_TRUE.
      <FS_TABELA>-TAG = ':86:'.
      SPLIT <FS_TABELA>-TEXTO AT ':' INTO: TABLE IT_SPLIT.

      LOOP AT IT_SPLIT INTO WA_SPLIT.
        IF WA_SPLIT IS NOT INITIAL AND WA_SPLIT NE '86'.
          IF <FS_TABELA>-TAG86-TAG86_2 IS INITIAL.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_2.
          ELSE.
            IF COD_86 EQ '999'.
              CONCATENATE <FS_TABELA>-TAG86-TAG86_2 WA_SPLIT INTO <FS_TABELA>-TAG86-TAG86_2 SEPARATED BY SPACE.
            ELSE.
              CONCATENATE <FS_TABELA>-TAG86-TAG86_2 WA_SPLIT INTO <FS_TABELA>-TAG86-TAG86_2.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.

      IF COD_86 EQ '999'.
        IF TAG86_2_AUX IS NOT INITIAL.
          CONCATENATE TAG86_2_AUX <FS_TABELA>-TAG86-TAG86_2 INTO <FS_TABELA>-TAG86-TAG86_2 SEPARATED BY SPACE.
        ENDIF.
      ELSE.
        CONCATENATE TAG86_2_AUX <FS_TABELA>-TAG86-TAG86_2 INTO <FS_TABELA>-TAG86-TAG86_2.
      ENDIF.
      TAG86_2_AUX = <FS_TABELA>-TAG86-TAG86_2.
      IT_TABIX-TABIX = SY-TABIX.
      APPEND IT_TABIX.
    ENDIF.

    "This field indicates whether the Final Book Balance is a debit balance or a credit
    "balance; it also includes the date, the Currency Code and the balance itself.
    IF <FS_TABELA>-TEXTO(5) EQ ':62F:' OR <FS_TABELA>-TEXTO(4) EQ ':62M:'.
      <FS_TABELA>-TAG25 = TAG25.
      <FS_TABELA>-TAG60 = TAG60.
      <FS_TABELA>-TAG = <FS_TABELA>-TEXTO(5).
      SPLIT <FS_TABELA>-TEXTO AT ':' INTO: TABLE IT_SPLIT.
      LOOP AT IT_SPLIT INTO WA_SPLIT.
        IF WA_SPLIT IS NOT INITIAL AND WA_SPLIT NE '62F' AND
           WA_SPLIT IS NOT INITIAL AND WA_SPLIT NE '62M'.
          LC_QTD = STRLEN( WA_SPLIT ).
          MOVE WA_SPLIT+00(01) TO <FS_TABELA>-TAG62-TAG62_1.
          ADD -01 TO LC_QTD.
          MOVE WA_SPLIT+01(06) TO <FS_TABELA>-TAG62-TAG62_2.
          ADD -06 TO LC_QTD.
          MOVE WA_SPLIT+07(03) TO <FS_TABELA>-TAG62-TAG62_3.
          ADD -03 TO LC_QTD.
          MOVE WA_SPLIT+10(LC_QTD) TO <FS_TABELA>-TAG62-TAG62_4.
        ENDIF.
      ENDLOOP.
    ENDIF.

    "The amount available on the date specified and/or the amount over which
    "interest is calculated.
    IF <FS_TABELA>-TEXTO(4) EQ ':64:'.
      <FS_TABELA>-TAG25 = TAG25.
      <FS_TABELA>-TAG60 = TAG60.
      <FS_TABELA>-TAG   = <FS_TABELA>-TEXTO(4).
      SPLIT <FS_TABELA>-TEXTO AT ':' INTO: TABLE IT_SPLIT.
      LOOP AT IT_SPLIT INTO WA_SPLIT.
        IF WA_SPLIT IS NOT INITIAL AND WA_SPLIT NE '64'.
          LC_QTD = STRLEN( WA_SPLIT ).
          MOVE WA_SPLIT+00(01) TO <FS_TABELA>-TAG64-TAG64_1.
          ADD -01 TO LC_QTD.
          MOVE WA_SPLIT+01(06) TO <FS_TABELA>-TAG64-TAG64_2.
          ADD -06 TO LC_QTD.
          MOVE WA_SPLIT+07(03) TO <FS_TABELA>-TAG64-TAG64_3.
          ADD -03 TO LC_QTD.
          MOVE WA_SPLIT+10(LC_QTD) TO <FS_TABELA>-TAG64-TAG64_4.
        ENDIF.
      ENDLOOP.
    ENDIF.

    "The amount available on the date specified and/or the amount over which
    "interest is calculated.
    IF <FS_TABELA>-TEXTO(4) EQ ':65:'.
      <FS_TABELA>-TAG25 = TAG25.
      <FS_TABELA>-TAG60 = TAG60.
      <FS_TABELA>-TAG   = <FS_TABELA>-TEXTO(4).
      SPLIT <FS_TABELA>-TEXTO AT ':' INTO: TABLE IT_SPLIT.
      LOOP AT IT_SPLIT INTO WA_SPLIT.
        IF WA_SPLIT IS NOT INITIAL AND WA_SPLIT NE '65'.
          LC_QTD = STRLEN( WA_SPLIT ).
          MOVE WA_SPLIT+00(01) TO <FS_TABELA>-TAG65-TAG65_1.
          ADD -01 TO LC_QTD.
          MOVE WA_SPLIT+01(06) TO <FS_TABELA>-TAG65-TAG65_2.
          ADD -06 TO LC_QTD.
          MOVE WA_SPLIT+07(03) TO <FS_TABELA>-TAG65-TAG65_3.
          ADD -03 TO LC_QTD.
          MOVE WA_SPLIT+10(LC_QTD) TO <FS_TABELA>-TAG65-TAG65_4.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  LOOP AT IT_TABIX.
    DELETE IT_TABELA WHERE TABIX EQ IT_TABIX-TABIX.
  ENDLOOP.

  LOOP AT IT_TABELA ASSIGNING <FS_TABELA> WHERE TAG EQ ':86:' AND TAG86-TAG86_1 NE '999'.
    SPLIT <FS_TABELA>-TAG86-TAG86_2 AT '?' INTO: TABLE IT_SPLIT.
    LOOP AT IT_SPLIT INTO WA_SPLIT.
      IF WA_SPLIT IS NOT INITIAL.
        CASE WA_SPLIT(2).
          WHEN '00'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_00.
            MOVE <FS_TABELA>-TAG86-TAG86_00+2(58) TO <FS_TABELA>-TAG86-TAG86_00.
          WHEN '20'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_20-TAG86_20_2.
            MOVE <FS_TABELA>-TAG86-TAG86_20-TAG86_20_2+2(28) TO <FS_TABELA>-TAG86-TAG86_20-TAG86_20_2.
          WHEN '21'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_21-TAG86_20_2.
            MOVE <FS_TABELA>-TAG86-TAG86_21-TAG86_20_2+2(28) TO <FS_TABELA>-TAG86-TAG86_21-TAG86_20_2.
          WHEN '22'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_22-TAG86_20_2.
            MOVE <FS_TABELA>-TAG86-TAG86_22-TAG86_20_2+2(28) TO <FS_TABELA>-TAG86-TAG86_22-TAG86_20_2.
          WHEN '23'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_23-TAG86_20_2.
            MOVE <FS_TABELA>-TAG86-TAG86_23-TAG86_20_2+2(28) TO <FS_TABELA>-TAG86-TAG86_23-TAG86_20_2.
          WHEN '24'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_24-TAG86_20_2.
            MOVE <FS_TABELA>-TAG86-TAG86_24-TAG86_20_2+2(28) TO <FS_TABELA>-TAG86-TAG86_24-TAG86_20_2.
          WHEN '25'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_25-TAG86_20_2.
            MOVE <FS_TABELA>-TAG86-TAG86_25-TAG86_20_2+2(28) TO <FS_TABELA>-TAG86-TAG86_25-TAG86_20_2.
          WHEN '26'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_26-TAG86_20_2.
            MOVE <FS_TABELA>-TAG86-TAG86_26-TAG86_20_2+2(28) TO <FS_TABELA>-TAG86-TAG86_26-TAG86_20_2.
          WHEN '27'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_27-TAG86_20_2.
            MOVE <FS_TABELA>-TAG86-TAG86_27-TAG86_20_2+2(28) TO <FS_TABELA>-TAG86-TAG86_27-TAG86_20_2.
          WHEN '28'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_28-TAG86_20_2.
            MOVE <FS_TABELA>-TAG86-TAG86_28-TAG86_20_2+2(28) TO <FS_TABELA>-TAG86-TAG86_28-TAG86_20_2.
          WHEN '29'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_29-TAG86_20_2.
            MOVE <FS_TABELA>-TAG86-TAG86_29-TAG86_20_2+2(28) TO <FS_TABELA>-TAG86-TAG86_29-TAG86_20_2.
          WHEN '30'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_30.
            MOVE <FS_TABELA>-TAG86-TAG86_30+2(58) TO <FS_TABELA>-TAG86-TAG86_30.
          WHEN '31'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_31.
            MOVE <FS_TABELA>-TAG86-TAG86_31+2(58) TO <FS_TABELA>-TAG86-TAG86_31.
          WHEN '32'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_32.
            MOVE <FS_TABELA>-TAG86-TAG86_32+2(58) TO <FS_TABELA>-TAG86-TAG86_32.
          WHEN '33'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_33.
            MOVE <FS_TABELA>-TAG86-TAG86_33+2(58) TO <FS_TABELA>-TAG86-TAG86_33.
          WHEN '60'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_60-TAG86_60_2.
            MOVE <FS_TABELA>-TAG86-TAG86_60-TAG86_60_2+2(28) TO <FS_TABELA>-TAG86-TAG86_60-TAG86_60_2.
          WHEN '61'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_61-TAG86_60_2.
            MOVE <FS_TABELA>-TAG86-TAG86_61-TAG86_60_2+2(28) TO <FS_TABELA>-TAG86-TAG86_61-TAG86_60_2.
          WHEN '66'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_62-TAG86_60_2.
            MOVE <FS_TABELA>-TAG86-TAG86_62-TAG86_60_2+2(28) TO <FS_TABELA>-TAG86-TAG86_62-TAG86_60_2.
          WHEN '63'.
            MOVE WA_SPLIT TO <FS_TABELA>-TAG86-TAG86_63-TAG86_60_2.
            MOVE <FS_TABELA>-TAG86-TAG86_63-TAG86_60_2+2(28) TO <FS_TABELA>-TAG86-TAG86_63-TAG86_60_2.
        ENDCASE.
      ENDIF.
    ENDLOOP.

    CONCATENATE <FS_TABELA>-TAG86-TAG86_20-TAG86_20_2
                <FS_TABELA>-TAG86-TAG86_21-TAG86_20_2
                <FS_TABELA>-TAG86-TAG86_22-TAG86_20_2
                <FS_TABELA>-TAG86-TAG86_23-TAG86_20_2
                <FS_TABELA>-TAG86-TAG86_24-TAG86_20_2
                <FS_TABELA>-TAG86-TAG86_25-TAG86_20_2
                <FS_TABELA>-TAG86-TAG86_26-TAG86_20_2
                <FS_TABELA>-TAG86-TAG86_27-TAG86_20_2
                <FS_TABELA>-TAG86-TAG86_28-TAG86_20_2
                <FS_TABELA>-TAG86-TAG86_29-TAG86_20_2 INTO <FS_TABELA>-TAG86-TAG86_20T.

    CONCATENATE <FS_TABELA>-TAG86-TAG86_32 <FS_TABELA>-TAG86-TAG86_33 INTO <FS_TABELA>-TAG86-TAG86_30T.

    CONCATENATE <FS_TABELA>-TAG86-TAG86_60-TAG86_60_2
                <FS_TABELA>-TAG86-TAG86_61-TAG86_60_2
                <FS_TABELA>-TAG86-TAG86_62-TAG86_60_2
                <FS_TABELA>-TAG86-TAG86_63-TAG86_60_2 INTO <FS_TABELA>-TAG86-TAG86_60T.

  ENDLOOP.

  P_SY_SUBRC = 1.

  CLEAR: PACONT, PACONT[], IT_CONTA_DATA[], IT_CONTA_DATA.

  LOOP AT IT_TABELA INTO WA_TABELA WHERE TAG = ':25:'.
    IT_CONTA_DATA-CONTA_NR = WA_TABELA-TAG25-TAG25_1.
    APPEND IT_CONTA_DATA.
  ENDLOOP.

  LOOP AT IT_CONTA_DATA ASSIGNING <FS_CONTA>.

    READ TABLE IT_TABELA INTO WA_TABELA WITH KEY TAG = ':60F:' TAG25-TAG25_1 = <FS_CONTA>-CONTA_NR.
    IF SY-SUBRC IS INITIAL.
      CALL FUNCTION 'REPLACE_STRING'
        EXPORTING
          I_SEARCHSTRING   = ','
          I_REPLACESTRING  = '.'
        CHANGING
          IO_STRING        = WA_TABELA-TAG60-TAG60_4
        EXCEPTIONS
          STRING_NOT_FOUND = 1
          OTHERS           = 2.

      IF SY-SUBRC <> 0.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.
      MOVE WA_TABELA-TAG60-TAG60_4 TO <FS_CONTA>-SALDO_INICIAL.
    ENDIF.

    READ TABLE IT_TABELA INTO WA_TABELA WITH KEY TAG = ':62F:' TAG25-TAG25_1 = <FS_CONTA>-CONTA_NR.
    IF SY-SUBRC IS INITIAL.
      CALL FUNCTION 'REPLACE_STRING'
        EXPORTING
          I_SEARCHSTRING   = ','
          I_REPLACESTRING  = '.'
        CHANGING
          IO_STRING        = WA_TABELA-TAG62-TAG62_4
        EXCEPTIONS
          STRING_NOT_FOUND = 1
          OTHERS           = 2.
      IF SY-SUBRC <> 0.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.
      MOVE WA_TABELA-TAG62-TAG62_4 TO <FS_CONTA>-SALDO_FINAL.
    ENDIF.

    <FS_CONTA>-SALDO_DIA = 0.
    LOOP AT IT_TABELA INTO WA_TABELA WHERE TAG = ':61:' AND TAG25-TAG25_1 = <FS_CONTA>-CONTA_NR.
      CALL FUNCTION 'REPLACE_STRING'
        EXPORTING
          I_SEARCHSTRING   = ','
          I_REPLACESTRING  = '.'
        CHANGING
          IO_STRING        = WA_TABELA-TAG61-TAG61_5
        EXCEPTIONS
          STRING_NOT_FOUND = 1
          OTHERS           = 2.
      IF SY-SUBRC <> 0.
        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.
      ADD WA_TABELA-TAG61-TAG61_5 TO <FS_CONTA>-SALDO_DIA.
    ENDLOOP.

    READ TABLE IT_TABELA INTO WA_TABELA WITH KEY TAG = ':64:' TAG25-TAG25_1 = <FS_CONTA>-CONTA_NR.
    IF SY-SUBRC IS INITIAL.
      CONCATENATE SY-DATUM(2) WA_TABELA-TAG64-TAG64_2 INTO PDATA.
      <FS_CONTA>-DATA = PDATA.
    ENDIF.

  ENDLOOP.

  LOOP AT IT_CONTA_DATA ASSIGNING <FS_CONTA>.
    MOVE <FS_CONTA>-CONTA_NR TO LC_AUX_TEXT.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = LC_AUX_TEXT
      IMPORTING
        OUTPUT = LC_AUX_TEXT.
    MOVE LC_AUX_TEXT TO <FS_CONTA>-CONTA_NR.

    SELECT SINGLE * INTO WA_T012K
      FROM T012K
     WHERE BANKN EQ <FS_CONTA>-CONTA_NR.

    IF SY-SUBRC IS INITIAL.
      <FS_CONTA>-BUKRS = WA_T012K-BUKRS.
      <FS_CONTA>-CONTA = WA_T012K-HKONT.
    ENDIF.
  ENDLOOP.

  CALL SCREEN 5001 STARTING AT 5 5.

ENDFORM.                    " LEITURA_ARQUIVO
