DATA: IT_ZLEST0061    TYPE TABLE OF ZLEST0061,
      IT_ZLEST0060    TYPE TABLE OF ZLEST0060,
      IT_ZLEST0063    TYPE TABLE OF ZLEST0063,
      IT_ZLEST0057    TYPE TABLE OF ZLEST0057,
      IT_J_1BNFDOC    TYPE TABLE OF TY_J_1BNFDOC,
      IT_LFA1         TYPE TABLE OF LFA1,
      IT_KNA1         TYPE TABLE OF KNA1,
      IT_MAKT         TYPE TABLE OF MAKT,

      WA_ZLEST0061    TYPE ZLEST0061,
      WA_ZLEST0060    TYPE ZLEST0060,
      WA_ZLEST0063    TYPE ZLEST0063,
      WA_ZLEST0057    TYPE ZLEST0057,
      WA_J_1BNFDOC    TYPE TY_J_1BNFDOC,
      WA_LFA1         TYPE LFA1,
      WA_KNA1         TYPE KNA1,
      WA_MAKT         TYPE MAKT.


 DATA: V_RM_CODIGO LIKE WA_SAIDA-RM_CODIGO,
       V_SAFRA     LIKE WA_SAIDA-SAFRA,
       V_NR_DCO    LIKE WA_SAIDA-NR_DCO,
       V_NFENUM    LIKE WA_SAIDA-NFENUM,
       V_NOME_EMB  LIKE WA_SAIDA-NOME_EMB.

BREAK COLIVEIRA.
BREAK ABAP.

SELECT *
  FROM ZLEST0060 INTO TABLE IT_ZLEST0060
 WHERE BUKRS       EQ I_BUKRS
   AND WERKS       EQ I_WERKS
   AND ANO_VIAGEM  EQ I_ANO_VIAGEM
   AND NR_VIAGEM   EQ I_NR_VIAGEM.

CHECK IT_ZLEST0060[] IS NOT INITIAL.

"Dados Comboio
SELECT *
  FROM ZLEST0063
  INTO TABLE IT_ZLEST0063
   FOR ALL ENTRIES IN IT_ZLEST0060
 WHERE BUKRS       = IT_ZLEST0060-BUKRS
  AND  WERKS       = IT_ZLEST0060-WERKS
  AND  ANO_VIAGEM  = IT_ZLEST0060-ANO_VIAGEM
  AND  NR_VIAGEM   = IT_ZLEST0060-NR_VIAGEM
  AND  NOME_EMB    = IT_ZLEST0060-NOME_EMB.

CHECK IT_ZLEST0063[] IS NOT INITIAL.

SELECT *
  FROM ZLEST0061 INTO TABLE IT_ZLEST0061
  FOR ALL ENTRIES IN IT_ZLEST0060
 WHERE BUKRS      EQ IT_ZLEST0060-BUKRS
   AND WERKS      EQ IT_ZLEST0060-WERKS
   AND ANO_VIAGEM EQ IT_ZLEST0060-ANO_VIAGEM
   AND NR_VIAGEM  EQ IT_ZLEST0060-NR_VIAGEM
   AND NOME_EMB   EQ IT_ZLEST0060-NOME_EMB
   AND CL_CODIGO  EQ IT_ZLEST0060-CL_CODIGO
   AND SAFRA      EQ IT_ZLEST0060-SAFRA
   AND NR_DCO     EQ IT_ZLEST0060-NR_DCO
   AND AUART      IN ('ZTAG','ZTAB', 'ZTAM', 'ZTAF' ).

SELECT *
  FROM MAKT
  INTO TABLE IT_MAKT
  FOR ALL ENTRIES IN IT_ZLEST0063
  WHERE MATNR = IT_ZLEST0063-COD_MATERIAL
  AND   SPRAS = 'P'.

IF IT_ZLEST0061[] IS NOT INITIAL.
  SELECT DOCNUM NFENUM
    FROM J_1BNFDOC
    INTO TABLE IT_J_1BNFDOC
    FOR ALL ENTRIES IN IT_ZLEST0061
    WHERE DOCNUM = IT_ZLEST0061-DOCNUM.

  SELECT DOCNUM NFENUM
    FROM J_1BNFDOC
    INTO TABLE IT_J_1BNFDOC
    FOR ALL ENTRIES IN IT_ZLEST0061
    WHERE DOCNUM = IT_ZLEST0061-DOCNUM.
ENDIF.

LOOP AT IT_ZLEST0060 INTO WA_ZLEST0060.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = WA_ZLEST0060-DT_CODIGO
    IMPORTING
      OUTPUT = WA_ZLEST0060-DT_CODIGO.
  MODIFY IT_ZLEST0060 FROM WA_ZLEST0060 TRANSPORTING DT_CODIGO.
ENDLOOP.

LOOP AT IT_ZLEST0060 INTO WA_ZLEST0060.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = WA_ZLEST0060-RM_CODIGO
    IMPORTING
      OUTPUT = WA_ZLEST0060-RM_CODIGO.
  MODIFY IT_ZLEST0060 FROM WA_ZLEST0060 TRANSPORTING DT_CODIGO.
ENDLOOP.

SELECT *
  FROM LFA1
  INTO TABLE IT_LFA1
  FOR ALL ENTRIES IN IT_ZLEST0060
  WHERE LIFNR = IT_ZLEST0060-RM_CODIGO.

SELECT *
  FROM KNA1
  INTO TABLE IT_KNA1
  FOR ALL ENTRIES IN IT_ZLEST0060
  WHERE KUNNR = IT_ZLEST0060-DT_CODIGO.

SORT:  IT_MAKT        BY MATNR,
       IT_J_1BNFDOC   BY DOCNUM,
       IT_KNA1        BY KUNNR,
       IT_LFA1        BY LIFNR,
       IT_ZLEST0060 BY NOME_EMB CL_CODIGO SAFRA NR_DCO,
       IT_ZLEST0061 BY CL_CODIGO AUART.


LOOP AT IT_ZLEST0060 INTO WA_ZLEST0060.

  CLEAR: V_RM_CODIGO, V_SAFRA, V_NR_DCO, V_NFENUM.

  CLEAR: WA_ZLEST0061, WA_ZLEST0063, WA_LFA1, WA_KNA1, WA_MAKT, WA_J_1BNFDOC.

  READ TABLE IT_ZLEST0061 INTO WA_ZLEST0061 WITH KEY NOME_EMB   = WA_ZLEST0060-NOME_EMB
                                                     CL_CODIGO  = WA_ZLEST0060-CL_CODIGO
                                                     SAFRA      = WA_ZLEST0060-SAFRA
                                                     NR_DCO     = WA_ZLEST0060-NR_DCO.

  READ TABLE IT_ZLEST0063 INTO WA_ZLEST0063 WITH KEY BUKRS       = WA_ZLEST0060-BUKRS
                                                     WERKS       = WA_ZLEST0060-WERKS
                                                     ANO_VIAGEM  = WA_ZLEST0060-ANO_VIAGEM
                                                     NR_VIAGEM   = WA_ZLEST0060-NR_VIAGEM
                                                     NOME_EMB    = WA_ZLEST0060-NOME_EMB.

  WA_SAIDA-EMBARCACAO     = WA_ZLEST0063-EMBARCACAO.
  WA_SAIDA-NOME_EMB       = WA_ZLEST0063-NOME_EMB.
  WA_SAIDA-RM_CODIGO      = WA_ZLEST0060-RM_CODIGO.
  READ TABLE IT_LFA1 INTO WA_LFA1 WITH KEY LIFNR = WA_ZLEST0060-RM_CODIGO BINARY SEARCH.
  WA_SAIDA-NAME1_REME     = WA_LFA1-NAME1.
  WA_SAIDA-ORT01_REME     = WA_LFA1-ORT01.
  WA_SAIDA-STCD1_REME     = WA_LFA1-STCD1.
  WA_SAIDA-REGIO_REME     = WA_LFA1-REGIO.
  WA_SAIDA-DT_CODIGO      = WA_ZLEST0060-CL_CODIGO.
  READ TABLE IT_KNA1 INTO WA_KNA1 WITH KEY KUNNR = WA_ZLEST0060-DT_CODIGO BINARY SEARCH.
  WA_SAIDA-NAME1_DEST     = WA_KNA1-NAME1.
  WA_SAIDA-ORT01_DEST     = WA_KNA1-ORT01.
  WA_SAIDA-STCD1_DEST     = WA_KNA1-STCD1.
  WA_SAIDA-REGIO_DEST     = WA_KNA1-REGIO.
  WA_SAIDA-NR_ROMANEIO    = WA_ZLEST0060-NR_ROMANEIO.
  WA_SAIDA-DT_MOVIMENTO   = WA_ZLEST0060-DT_MOVIMENTO.
  WA_SAIDA-DOCDAT         = WA_ZLEST0060-DOCDAT.
  WA_SAIDA-NFNUM          = WA_ZLEST0060-NFNUM.
  WA_SAIDA-SERIES         = WA_ZLEST0060-SERIES.

  IF WA_ZLEST0060-PESO_LIQ_RET IS NOT INITIAL.
    WA_SAIDA-PESO_FISCAL    = WA_ZLEST0060-PESO_LIQ_RET.
    WA_SAIDA-NETWR          = WA_ZLEST0060-VLR_LIQ_RET.
  ELSE.
    WA_SAIDA-PESO_FISCAL    = WA_ZLEST0060-PESO_FISCAL.
    WA_SAIDA-NETWR          = WA_ZLEST0060-NETWR.
  ENDIF.

  WA_SAIDA-COD_MATERIAL   = WA_ZLEST0063-COD_MATERIAL.
  READ TABLE IT_MAKT INTO WA_MAKT WITH KEY MATNR = WA_ZLEST0063-COD_MATERIAL BINARY SEARCH.
  WA_SAIDA-MAKTX          = WA_MAKT-MAKTX.

  READ TABLE IT_J_1BNFDOC INTO WA_J_1BNFDOC WITH KEY DOCNUM = WA_ZLEST0061-DOCNUM BINARY SEARCH.
  WA_SAIDA-NFENUM           = WA_J_1BNFDOC-NFENUM. " DACTE

  WA_SAIDA-DT_FATURA        = WA_ZLEST0061-DT_FATURA. "DATA
  WA_SAIDA-SAFRA            = WA_ZLEST0060-SAFRA.
  WA_SAIDA-NR_DCO           = WA_ZLEST0060-NR_DCO.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      INPUT  = WA_SAIDA-RM_CODIGO
    IMPORTING
      OUTPUT = V_RM_CODIGO.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      INPUT  = WA_SAIDA-SAFRA
    IMPORTING
      OUTPUT = V_SAFRA    .

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      INPUT  = WA_SAIDA-NR_DCO
    IMPORTING
      OUTPUT = V_NR_DCO.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      INPUT  = WA_SAIDA-NFENUM
    IMPORTING
      OUTPUT = V_NFENUM .

  V_NOME_EMB = WA_SAIDA-NOME_EMB.

  IF I_TP_AGRUP IS INITIAL.
    CONCATENATE 'C.T.A.C NÂº' V_NFENUM
           INTO WA_SAIDA-AGRP_TEXT SEPARATED BY SPACE.

    WA_SAIDA-AGRP = V_NFENUM.
  ELSEIF I_TP_AGRUP = '1'.
    CONCATENATE 'REM.'    WA_LFA1-STCD1 '/'
                'SAFRA'   V_SAFRA     '/'
                'NR.DCO'  V_NR_DCO
           INTO WA_SAIDA-AGRP_TEXT SEPARATED BY SPACE.

    CONCATENATE V_NOME_EMB
                V_RM_CODIGO
                V_SAFRA
                V_NR_DCO
           INTO WA_SAIDA-AGRP SEPARATED BY SPACE.
  ENDIF.

  APPEND WA_SAIDA TO IT_SAIDA.

ENDLOOP.

V_TOTAL_NF = 0.
V_TOTAL_PESO = 0.
IT_CABEC[] = IT_SAIDA[].

SORT: IT_CABEC BY AGRP,
      IT_SAIDA BY NFENUM NR_ROMANEIO.

DELETE ADJACENT DUPLICATES FROM IT_CABEC COMPARING AGRP.

LOOP AT IT_CABEC INTO WA_CABEC.
  W_AGRP_F = WA_CABEC-AGRP.
*  CASE I_TP_AGRUP.
*    WHEN ''.
*      W_NFENUM_F    = WA_CABEC-NFENUM.
*    WHEN '1'.
*      W_RM_CODIGO_F = WA_CABEC-RM_CODIGO.
*      W_SAFRA_F     = WA_CABEC-SAFRA.
*      W_NR_DCO_F    = WA_CABEC-NR_DCO.
*  ENDCASE.
ENDLOOP.
