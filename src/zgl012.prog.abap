*************************************************************************
* TÍTULO     : Avaliação de Moeda Estrangeira                          *
* TIPO PROG  : REPORT   -  ZGL012                                      *
* FUNCIONAL  : Marcos Santos                                           *
* AUTOR(A)   : Fábrica Rollout                                         *
* DATA       : 08/02/2010                                              *
* TRANSAÇÃO  : ZGL012                                                  *
* DESCRIÇÃO  : Avaliação de Moeda Estrangeira                          *
* Request    :                                                         *
************************************************************************
REPORT  ZGL012 MESSAGE-ID Z01 NO STANDARD PAGE HEADING.
INCLUDE <ICON>.


*CONTROLS MYTABSTRIP TYPE TABSTRIP.
CONSTANTS: C_USD TYPE TCURR_CURR VALUE 'USD',
           C_EUR TYPE TCURR_CURR VALUE 'EUR',
           C_BRL TYPE WAERS      VALUE 'BRL',
           C_0050 TYPE KTOPL VALUE '0050'.

DATA: OK_CODE TYPE SY-UCOMM,
      SAVE_OK TYPE SY-UCOMM,
      WG_WAERS(3) VALUE 'USD',
      WG_INDICADOR(1),
      VSEQITEM TYPE ZIB_CONTABIL-SEQITEM,
      VNUM(10)    TYPE C,
      VSEQ(10)    TYPE P,
      VOBJ_KEY    TYPE ZGL012_AVM-OBJ_KEY,
      VG_LAST_DAY TYPE SY-DATUM.

DATA  NUMBER TYPE SY-DYNNR.
*TABELAS STANDARD
TABLES: BSIK,     "Cont.: índice secund. para fornecedores
        BSID,     "Cont.: índice secund. para clientes
        BSIS.     "Cont. financ.: índice secund. p/contas do Razão

TYPES: BEGIN OF TY_ZIB_CONTABIL.
        INCLUDE STRUCTURE ZIB_CONTABIL.
TYPES:  MARK   TYPE C,
END OF TY_ZIB_CONTABIL.

TYPES: BEGIN OF TY_ZIB_CONTABIL_ERR.
        INCLUDE STRUCTURE ZIB_CONTABIL_ERR.
TYPES:  MARK   TYPE C,
END OF TY_ZIB_CONTABIL_ERR.

TYPES: BEGIN OF TY_ZIB_CONTABIL_CHV.
        INCLUDE STRUCTURE ZIB_CONTABIL_CHV.
TYPES:  BLDAT   TYPE ZIB_CONTABIL-BLDAT,
END OF TY_ZIB_CONTABIL_CHV.

*TIPOS DE REFERÊNCIA
TYPES: BEGIN OF TY_BSIK,
         BUKRS TYPE BSIK-BUKRS,
         LIFNR TYPE BSIK-LIFNR,
         UMSKZ TYPE BSIK-UMSKZ,
         BELNR TYPE BSIK-BELNR,
         BUZEI TYPE BSIK-BUZEI,
         BUDAT TYPE BSIK-BUDAT,
         WAERS TYPE BSIK-WAERS,
         BLART TYPE BLART,
         BSCHL TYPE BSCHL,
         SHKZG TYPE SHKZG,
         GSBER TYPE GSBER,
         DMBTR TYPE BSIK-DMBTR,
         WRBTR TYPE BSIK-WRBTR,
         HKONT TYPE BSIK-HKONT,
         DMBE2 TYPE BSIK-DMBE2,
         GJAHR TYPE BSIK-GJAHR,
       END OF TY_BSIK,


      BEGIN OF TY_ZGL012_AVM,
        MANDT               TYPE ZGL012_AVM-MANDT,
        BUKRS               TYPE ZGL012_AVM-BUKRS,
        DT_AVAL             TYPE ZGL012_AVM-DT_AVAL,
        KUNNR               TYPE ZGL012_AVM-KUNNR,
        BELNR               TYPE ZGL012_AVM-BELNR,
        BUZEI               TYPE ZGL012_AVM-BUZEI,
        BUDAT               TYPE ZGL012_AVM-BUDAT,
        WAERS               TYPE ZGL012_AVM-WAERS,
        GSBER               TYPE ZGL012_AVM-GSBER,
        DMBTR               TYPE ZGL012_AVM-DMBTR,
        DMBE2               TYPE ZGL012_AVM-DMBE2,
        KURSF               TYPE ZGL012_AVM-KURSF,
        VLR_ACUM_MES_ATU    TYPE ZGL012_AVM-VLR_ACUM_MES_ATU,
        TX_FECH             TYPE ZGL012_AVM-TX_FECH,
        HKONT               TYPE ZGL012_AVM-HKONT,
        UMSKZ               TYPE ZGL012_AVM-UMSKZ,
        LIFNR               TYPE ZGL012_AVM-LIFNR,
      END OF TY_ZGL012_AVM,

       BEGIN OF TY_ZGL012_NAO,
        BELNR               TYPE ZGL012_AVM-BELNR,
      END OF TY_ZGL012_NAO,

      BEGIN OF TY_BSID,
*        MANDT TYPE BSID-MANDT,
        BUKRS TYPE BSID-BUKRS,
        KUNNR TYPE BSID-KUNNR,
        UMSKZ TYPE BSID-UMSKZ,
        BELNR TYPE BSID-BELNR,
        BUZEI TYPE BSID-BUZEI,
        BUDAT TYPE BSID-BUDAT,
        WAERS TYPE BSID-WAERS,
        BLART TYPE BLART,
        BSCHL TYPE BSCHL,
        SHKZG TYPE SHKZG,
        GSBER TYPE GSBER,
        DMBTR TYPE BSID-DMBTR,
        WRBTR TYPE BSID-WRBTR,
        HKONT TYPE BSID-HKONT,
        DMBE2 TYPE BSID-DMBE2,
        GJAHR TYPE BSID-GJAHR,
      END OF TY_BSID,

      BEGIN OF TY_BSIS,
        BUKRS TYPE BSIS-BUKRS,
        HKONT TYPE BSIS-HKONT,
        VBUND TYPE BSIS-VBUND,
        BELNR TYPE BSIS-BELNR,
        BUZEI TYPE BSIS-BUZEI,
        BUDAT TYPE BSIS-BUDAT,
        WAERS TYPE BSIS-WAERS,
        BLART TYPE BLART,
        BSCHL TYPE BSCHL,
        SHKZG TYPE SHKZG,
        GSBER TYPE GSBER,
        DMBTR TYPE BSIS-DMBTR,
        WRBTR TYPE BSIS-WRBTR,
        DMBE2 TYPE BSIS-DMBE2,
        GJAHR TYPE BSIS-GJAHR,
      END OF TY_BSIS,

      BEGIN OF TY_T030H,
        KTOPL TYPE T030H-KTOPL,
        HKONT TYPE T030H-HKONT,
        WAEES TYPE T030H-WAERS,
        CURTP TYPE T030H-CURTP,
        LSBEW TYPE T030H-LSBEW,
        LHBEW TYPE T030H-LHBEW,
      END OF TY_T030H,

*      BEGIN OF TY_BSAS,
*        BUKRS TYPE BSAS-BUKRS,
*        HKONT TYPE BSAS-HKONT,
*        BELNR TYPE BSAS-BELNR,
*        BUZEI TYPE BSAS-BUZEI,
*      END OF TY_BSAS,

      BEGIN OF TY_TCURR,
        KURST TYPE TCURR-KURST,
        FCURR TYPE TCURR-FCURR,
        TCURR TYPE TCURR-TCURR,
        GDATU TYPE TCURR-GDATU,
        UKURS TYPE TCURR-UKURS,
      END OF TY_TCURR,

      BEGIN OF TY_T001B,
        FRPE1 TYPE T001B-FRPE1,
        FRYE1 TYPE T001B-FRYE1,
      END OF   TY_T001B,


      BEGIN OF TY_T001,
        BUKRS TYPE T001-BUKRS,
        LAND1 TYPE T001-LAND1,
      END OF   TY_T001,

      BEGIN OF TY_T005,
        LAND1 TYPE T005-LAND1,
        WAERS TYPE T005-WAERS,
      END OF   TY_T005,

      BEGIN OF TY_SKB1,
        BUKRS TYPE SKB1-BUKRS,
        SAKNR TYPE SKB1-SAKNR,
        XOPVW TYPE SKB1-XOPVW,
      END OF  TY_SKB1,

      BEGIN OF TY_BSAK,
        BUKRS TYPE BUKRS,
        LIFNR TYPE LIFNR,
        AUGDT TYPE AUGDT,
        AUGBL TYPE AUGBL,
        BELNR TYPE BELNR_D,
        BUZEI TYPE BUZEI,
      END OF TY_BSAK,

      BEGIN OF TY_BSAD,
        BUKRS TYPE BUKRS,
        KUNNR TYPE KUNNR,
        AUGDT TYPE AUGDT,
        AUGBL TYPE AUGBL,
        BELNR TYPE BELNR_D,
        BUZEI TYPE BUZEI,
      END OF TY_BSAD,

      BEGIN OF TY_BSAS,
        BUKRS TYPE BSAS-BUKRS,
        HKONT TYPE BSAS-HKONT,
        VBUND TYPE BSAS-VBUND,
        AUGDT TYPE AUGDT,
        AUGBL TYPE AUGBL,
        BELNR TYPE BSAS-BELNR,
        BUZEI TYPE BSAS-BUZEI,
      END OF TY_BSAS.



DATA: BEGIN OF T_ZGL012_AVM OCCURS 0.
        INCLUDE STRUCTURE ZGL012_AVM.
DATA: DELE(1),
      TRAVA(1).
DATA: END OF   T_ZGL012_AVM.

DATA: BEGIN OF T_ZGL012_ATUAL OCCURS 0.
        INCLUDE STRUCTURE ZGL012_AVM.
DATA: DELE(1),
      TRAVA(1).
DATA: END OF   T_ZGL012_ATUAL.

DATA: BEGIN OF T_ZGL012_AUX OCCURS 0.
        INCLUDE STRUCTURE ZGL012_AVM.
DATA: DELE(1),
      TRAVA(1).
DATA: END OF   T_ZGL012_AUX.

DATA: IT_ZGL012_AVM_LOOP1 TYPE TABLE OF ZGL012_AVM,
      IT_ZGL012_AVM_LOOP2 TYPE TABLE OF ZGL012_AVM,
      WA_ZGL012_AVM_LOOP TYPE          ZGL012_AVM.

DATA W_ZGL012_NAO TYPE TY_ZGL012_NAO.

*DECLARAÇÃO DE TABELA INTERNA
DATA: T_BSIK       TYPE TABLE OF TY_BSIK,
      IT_BSAK      TYPE TABLE OF TY_BSAK,
      IT_BSAK_LOOP TYPE TABLE OF TY_BSAK,
      IT_BSAD      TYPE TABLE OF TY_BSAD,
      IT_BKPF      TYPE TABLE OF BKPF WITH HEADER LINE,
      IT_BSAS       TYPE TABLE OF TY_BSAS,
*      t_zgl012_avm   TYPE TABLE OF zgl012_avm,
*      t_zgl012_atual TYPE TABLE OF zgl012_avm,
*      t_zgl012_aux   TYPE TABLE OF zgl012_avm,
      T_BSID         TYPE TABLE OF TY_BSID,
      T_BSIS         TYPE TABLE OF TY_BSIS,
      T_T030H        TYPE TABLE OF TY_T030H,
*      T_BSAS         TYPE TABLE OF TY_BSAS,
      T_TCURR        TYPE TABLE OF TY_TCURR,
      T_T001B        TYPE TABLE OF TY_T001B,
      T_T001         TYPE TABLE OF TY_T001,
      T_T005         TYPE TABLE OF TY_T005,
      T_SKB1         TYPE TABLE OF TY_SKB1,
** Igor Vilela - Inclusão - Inicio
      T_0025         TYPE TABLE OF ZFIT0025,
** Igor Vilela - Inclusão - Fim
      IT_ZIB_CONTABIL     TYPE TABLE OF TY_ZIB_CONTABIL,
      IT_ZIB_CONTABIL_ERR TYPE TABLE OF TY_ZIB_CONTABIL_ERR,
      IT_ZIB_CONTABIL_CHV TYPE TABLE OF TY_ZIB_CONTABIL_CHV.

*DECLARAÇÃO DE WORK AREA
DATA: WA_BSIK       TYPE TY_BSIK,
      WA_BSAK       TYPE TY_BSAK,
      WA_BSAD       TYPE TY_BSAD,
      WA_ZGL012_AVM LIKE T_ZGL012_AVM,
      WA_ZGL012_2   LIKE T_ZGL012_AVM,
      WA_ZGL012_AUX LIKE T_ZGL012_AVM,
      WA_BSID       TYPE TY_BSID,
      WA_BSIS       TYPE TY_BSIS,
      WA_T030H      TYPE TY_T030H,
      WA_BSAS       TYPE TY_BSAS,
      WA_TCURR      TYPE TY_TCURR,
      WA_T001B      TYPE TY_T001B,
      WA_T001       TYPE TY_T001,
      WA_T005       TYPE TY_T005,
      WA_SKB1       TYPE TY_SKB1,
      WA_0025       TYPE ZFIT0025,
      WA_ZIB_CONTABIL     TYPE TY_ZIB_CONTABIL,
      WA_ZIB_CONTABIL_ERR TYPE TY_ZIB_CONTABIL_ERR,
      WA_ZIB_CONTABIL_CHV TYPE TY_ZIB_CONTABIL_CHV.


*DECLARAÇÃO DE VARIÁVEIS DE TAXA DE CÂMBIO
DATA: XTX_EUR TYPE TCURR-UKURS,
      XTX_USD TYPE TCURR-UKURS,
      WG_DMBT2 TYPE BSIK-DMBT2 VALUE '0.01',
      WL_ST_REV(1).

DATA: IT_BDCDATA TYPE BDCDATA OCCURS 0 WITH HEADER LINE.

DATA: BEGIN OF O_ALV2 OCCURS 0, "TABELA DE SAIDA DO ALV
      MARK,
      RACCT        TYPE FAGLFLEXT-RACCT,
      RASSC        TYPE FAGLFLEXT-RASSC,
      TXT50        TYPE SKAT-TXT50,
      KTOKS        TYPE SKA1-KTOKS,
      CURR1        TYPE FAGLFLEXT-HSLVT,
      CURR2        TYPE FAGLFLEXT-KSLVT,
      CURR3        TYPE FAGLFLEXT-OSLVT,
      TX_USD       TYPE ZFIT0082-TX_USD,
      TX_BRL       TYPE ZFIT0082-TX_BRL,
      SALDO_CORR   TYPE FAGLFLEXT-HSLVT,
      SALDO_CORR2  TYPE FAGLFLEXT-HSLVT,
      VLR_AJUST    TYPE FAGLFLEXT-KSLVT,
      VLR_AJUST2   TYPE FAGLFLEXT-KSLVT,
      BELNR        TYPE ZIB_CONTABIL_CHV-BELNR,
      BELNR_EST    TYPE ZIB_CONTABIL_CHV-BELNR,
      OBJ_KEY      TYPE ZIB_CONTABIL_CHV-OBJ_KEY,
      OBJ_KEY_EST  TYPE ZIB_CONTABIL_CHV-OBJ_KEY,
      LOG(4),
END OF O_ALV2.

DATA: BEGIN OF O_ALV OCCURS 0, "TABELA DE SAIDA DO ALV
        MARK(1),
        MANDT               TYPE ZGL012_AVM-MANDT,
        BUKRS               TYPE ZGL012_AVM-BUKRS,
        DT_AVAL             TYPE ZGL012_AVM-DT_AVAL,
        KUNNR               TYPE ZGL012_AVM-KUNNR,
        BELNR               TYPE ZGL012_AVM-BELNR,
        BUZEI               TYPE ZGL012_AVM-BUZEI,
        BUDAT               TYPE ZGL012_AVM-BUDAT,
        WAERS               TYPE ZGL012_AVM-WAERS,
        GSBER               TYPE ZGL012_AVM-GSBER,
        DMBTR               TYPE ZGL012_AVM-DMBTR,
        DMBE2               TYPE ZGL012_AVM-DMBE2,
        WRBTR               TYPE ZGL012_AVM-WRBTR,
        KURSF               TYPE ZGL012_AVM-KURSF,
        VLR_ATUALIZADO      TYPE ZGL012_AVM-VLR_ATUALIZADO,
        VLR_ACUM_MES_ATU    TYPE ZGL012_AVM-VLR_ACUM_MES_ATU,
        VLR_ACUM_MES_ANT    TYPE ZGL012_AVM-VLR_ACUM_MES_ANT,
        VLR_VARIACAO        TYPE ZGL012_AVM-VLR_VARIACAO,
        RESULTADO           TYPE ZGL012_AVM-RESULTADO,
        TX_FECH             TYPE ZGL012_AVM-TX_FECH,
        HKONT               TYPE ZGL012_AVM-HKONT,
        VBUND               TYPE ZGL012_AVM-VBUND,
        UMSKZ               TYPE ZGL012_AVM-UMSKZ,
        LIFNR               TYPE ZGL012_AVM-LIFNR,
        DT_LCTO             TYPE ZGL012_AVM-DT_LCTO,
        DOC_LCTO            TYPE ZGL012_AVM-DOC_LCTO,
        CPUDT               TYPE ZGL012_AVM-CPUDT,
        CPUTM               TYPE ZGL012_AVM-CPUTM,
        USNAM               TYPE ZGL012_AVM-USNAM,
        AUGDT               TYPE ZGL012_AVM-AUGDT,
        BSCHL               TYPE ZGL012_AVM-BSCHL,
        AUGBL               TYPE ZGL012_AVM-AUGBL,
        OBJ_KEY             TYPE ZGL012_AVM-OBJ_KEY,
        ST_REV              TYPE ZGL012_AVM-ST_REV,
        STATUS(4),
        TIPO(10),
        CODIGO(10),
        DESCRICAO(50),
        RESULTADO_C(7),
        ESTORNO(1),
        DELE(1),
        TRAVA(1),
      END OF O_ALV.

SELECTION-SCREEN BEGIN OF SCREEN 100 AS SUBSCREEN.
SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-003.
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: P_C_LANC RADIOBUTTON GROUP R1 DEFAULT 'X'."AS CHECKBOX.
SELECTION-SCREEN COMMENT 4(20) TEXT-C02 FOR FIELD P_C_LANC. "P_EX_TES.
SELECTION-SCREEN POSITION 24.
PARAMETERS: P_E_LANC RADIOBUTTON GROUP R1."AS CHECKBOX.
SELECTION-SCREEN COMMENT 26(20) TEXT-C03 FOR FIELD P_E_LANC. "P_C_LANC.
SELECTION-SCREEN POSITION 46.
PARAMETERS: P_V_LANC RADIOBUTTON GROUP R1."AS CHECKBOX.
SELECTION-SCREEN COMMENT 48(20) TEXT-C06 FOR FIELD P_V_LANC. "P_V_LANC.

SELECTION-SCREEN POSITION 46.

SELECTION-SCREEN END OF LINE.

**    SELECTION-SCREEN BEGIN OF LINE.
**      PARAMETERS: P_BRL RADIOBUTTON GROUP R2 ."AS CHECKBOX.
**      SELECTION-SCREEN COMMENT 4(20) TEXT-C04 FOR FIELD P_BRL. "P_EX_TES.
**      SELECTION-SCREEN POSITION 24.
**      PARAMETERS: P_USD RADIOBUTTON GROUP R2 DEFAULT 'X'."AS CHECKBOX.
**      SELECTION-SCREEN COMMENT 26(20) TEXT-C05 FOR FIELD P_USD. "P_C_LANC.
**      SELECTION-SCREEN POSITION 46.
***      PARAMETERS: P_E_LANC AS CHECKBOX.
***      SELECTION-SCREEN COMMENT 48(20) TEXT-C03 FOR FIELD P_E_LANC.
**    SELECTION-SCREEN END OF LINE.


PARAMETERS: P_BUDAT2 TYPE ZGL012_AVM-BUDAT,
            P_AUGDT  TYPE ZGL012_AVM-AUGDT,
*                  P_CPUDT  TYPE ZGL012_AVM-CPUDT,
            P_SPMON TYPE SPMON,
            P_BLART  TYPE BSAS-BLART DEFAULT TEXT-004,
            P_SGTXT  TYPE BSIK-SGTXT.

SELECTION-SCREEN END OF BLOCK B2.

SELECTION-SCREEN END OF SCREEN 100.


SELECTION-SCREEN BEGIN OF SCREEN 200 AS SUBSCREEN.
SELECTION-SCREEN BEGIN OF BLOCK B3 WITH FRAME TITLE TEXT-002.
PARAMETERS: P_HKONT RADIOBUTTON GROUP RAD1 DEFAULT 'X' .
SELECT-OPTIONS: S_HKONT FOR BSIK-HKONT.

PARAMETERS: P_LIFNR RADIOBUTTON GROUP RAD1.
SELECT-OPTIONS: S_LIFNR FOR BSIK-LIFNR.

PARAMETERS: P_KUNNR RADIOBUTTON GROUP RAD1.
SELECT-OPTIONS: S_KUNNR FOR BSID-KUNNR.

SELECT-OPTIONS: S_BELNR FOR BSIK-BELNR.

PARAMETERS: P_HKONT2 RADIOBUTTON GROUP RAD1.
SELECT-OPTIONS: S_HKONT2 FOR BSIK-HKONT.

SELECTION-SCREEN END OF BLOCK B3.
SELECTION-SCREEN END OF SCREEN 200.


SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
PARAMETERS: P_BUKRS TYPE ZGL012_AVM-BUKRS OBLIGATORY,
            P_BUDAT TYPE ZGL012_AVM-BUDAT OBLIGATORY.
SELECTION-SCREEN END OF BLOCK B1.


SELECTION-SCREEN:
    BEGIN OF TABBED BLOCK TS_0100 FOR 12 LINES,
      TAB (20) TS_ABA1 USER-COMMAND ABA1,
      TAB (20) TS_ABA2 USER-COMMAND ABA2,
    END OF BLOCK TS_0100.
*
*SELECTION-SCREEN BEGIN OF BLOCK B0 WITH FRAME TITLE TEXT-001.
*PARAMETERS: P_VARI LIKE DISVARIANT-VARIANT.
*SELECTION-SCREEN END OF BLOCK B0.
*
SELECTION-SCREEN BEGIN OF BLOCK B4 WITH FRAME TITLE TEXT-001.
PARAMETERS: P_VARI LIKE DISVARIANT-VARIANT.
SELECTION-SCREEN END OF BLOCK B4.

**********Declarações ALV*****************************
*Pool de declarações do ALV.
TYPE-POOLS: KKBLO,
            SLIS,
            SHLP,
            VRM.

*Estrutura
DATA: ST_SELFIELD TYPE KKBLO_SELFIELD.
************************************************************************
* C O N T R O L E   A L V
************************************************************************
DATA: EDITCONTAINER    TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      CL_CONTAINER    TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      EDITOR           TYPE REF TO CL_GUI_TEXTEDIT,
      CL_CONTAINER_95  TYPE REF TO CL_GUI_DOCKING_CONTAINER,
      CL_CONTAINER_05  TYPE REF TO CL_GUI_DOCKING_CONTAINER,
      OBJ_DYNDOC_ID  TYPE REF TO CL_DD_DOCUMENT,
      CL_GRID          TYPE REF TO CL_GUI_ALV_GRID,
      WA_AFIELD        TYPE LVC_S_FCAT,
      IT_FIELDCAT      TYPE LVC_T_FCAT,
      I_SORT           TYPE LVC_T_SORT,
      WA_LAYOUT        TYPE LVC_S_LAYO,
      IS_STABLE        TYPE LVC_S_STBL VALUE 'XX',
      WG_REPNAME LIKE SY-REPID,
      WG_X_VARIANT LIKE DISVARIANT,
      WG_EXIT(1) TYPE C,
      WG_SAVE(1) TYPE C,
      WG_DOCUMENTO(10),
      WG_VARIANT LIKE DISVARIANT.

DATA: BEGIN OF SRC OCCURS 5,
        LINE(100),
      END OF SRC.
**Variáveis do AVL
*DATA: V_REPID       LIKE SY-REPID,
*      V_SAVE        TYPE C.

*Works Area do AVL
*DATA: WA_VARIANT    TYPE DISVARIANT,
*      WA_AFIELD     TYPE KKBLO_FIELDCAT,
*      WA_COLINFO    TYPE KKBLO_SPECIALCOL,
*      WA_LAYOUT     TYPE KKBLO_LAYOUT,
*      WA_HEADER     TYPE KKBLO_LISTHEADER,
*      WA_LAY        TYPE SLIS_LAYOUT_ALV.

*Tabelas internas do ALV.
DATA: IT_FCAT       TYPE SLIS_T_FIELDCAT_ALV,
*      IT_FIELDCAT   TYPE KKBLO_T_FIELDCAT,
      IT_HEADER     TYPE KKBLO_T_LISTHEADER,
      IT_SORT       TYPE SLIS_T_SORTINFO_ALV WITH HEADER LINE.


************************************************************************
* D E F I N I T I O N
************************************************************************
CLASS LCL_EVENT_RECEIVER DEFINITION.
  PUBLIC SECTION.
    METHODS:
             CATCH_HOTSPOT
                  FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
                     IMPORTING E_ROW_ID
                               E_COLUMN_ID
                               ES_ROW_NO.

    METHODS: HANDLE_TOP_OF_PAGE
    FOR EVENT TOP_OF_PAGE OF CL_GUI_ALV_GRID
    IMPORTING
    E_DYNDOC_ID
    TABLE_INDEX.
  PRIVATE SECTION.
ENDCLASS.                    "lcl_event_receiver DEFINITION

************************************************************************
* I M P L E M E N T A T I O N
************************************************************************
CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.

  METHOD CATCH_HOTSPOT.
    DATA: WL_ANO(4).
    TYPES: BEGIN OF TY_ITAB ,
         NAME(80)     TYPE C,
       END OF TY_ITAB.

    DATA: MSG_ALV TYPE CHAR80,
          ITAB_MSG TYPE TABLE OF TY_ITAB,
          WTAB_MSG TYPE  TY_ITAB.

    IF P_HKONT2 = 'X'.
      READ TABLE O_ALV2 INTO O_ALV2 INDEX E_ROW_ID-INDEX.
      IF SY-SUBRC = 0.
        IF E_COLUMN_ID = 'BELNR' AND O_ALV2-BELNR IS NOT INITIAL.
          WL_ANO = P_BUDAT(4).
          SET PARAMETER ID 'BLN' FIELD O_ALV2-BELNR.
          SET PARAMETER ID 'BUK' FIELD P_BUKRS.
          SET PARAMETER ID 'GJR' FIELD P_BUDAT(4).
          CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
        ELSEIF E_COLUMN_ID = 'BELNR_EST' AND O_ALV2-BELNR_EST IS NOT INITIAL.
          WL_ANO = P_BUDAT(4).
          SET PARAMETER ID 'BLN' FIELD O_ALV2-BELNR_EST.
          SET PARAMETER ID 'BUK' FIELD P_BUKRS.
          SET PARAMETER ID 'GJR' FIELD P_BUDAT(4).
          CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
        ELSEIF O_ALV2-LOG = ICON_INCOMPLETE.

          SELECT *
             FROM ZIB_CONTABIL_ERR
             INTO TABLE IT_ZIB_CONTABIL_ERR
             WHERE OBJ_KEY  = O_ALV2-OBJ_KEY.

          WTAB_MSG-NAME    = '------------------------MENSAGEM ERRO---------------------------------------'.
          APPEND WTAB_MSG TO ITAB_MSG .
          CLEAR WTAB_MSG.
          LOOP AT IT_ZIB_CONTABIL_ERR INTO WA_ZIB_CONTABIL_ERR.
            WTAB_MSG-NAME = WA_ZIB_CONTABIL_ERR-MESSAGE.
            APPEND WTAB_MSG TO ITAB_MSG .
            CLEAR WTAB_MSG.
          ENDLOOP.

          CONCATENATE 'DOCUMENTO ' O_ALV-BELNR INTO MSG_ALV SEPARATED BY SPACE.
          CALL FUNCTION 'POPUP_WITH_TABLE_DISPLAY'
            EXPORTING
              ENDPOS_COL   = 140
              ENDPOS_ROW   = 20
              STARTPOS_COL = 60
              STARTPOS_ROW = 15
              TITLETEXT    = MSG_ALV
            TABLES
              VALUETAB     = ITAB_MSG
            EXCEPTIONS
              BREAK_OFF    = 1
              OTHERS       = 2.
        ENDIF.
      ENDIF  .
    ELSE.
      READ TABLE O_ALV INTO O_ALV INDEX E_ROW_ID-INDEX.
      IF SY-SUBRC = 0.
        IF E_COLUMN_ID = 'BELNR'.
          WL_ANO = P_BUDAT(4).
          SET PARAMETER ID 'BLN' FIELD O_ALV-BELNR.
          SET PARAMETER ID 'BUK' FIELD P_BUKRS.
          SET PARAMETER ID 'GJR' FIELD O_ALV-BUDAT(4).
*      SET PARAMETER ID 'GJR' FIELD wl_ano.
          CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
        ELSEIF O_ALV-STATUS = ICON_INCOMPLETE.

          SELECT *
          FROM ZIB_CONTABIL_ERR
          INTO TABLE IT_ZIB_CONTABIL_ERR
          WHERE OBJ_KEY  = O_ALV-OBJ_KEY.

          WTAB_MSG-NAME    = '------------------------MENSAGEM ERRO---------------------------------------'.
          APPEND WTAB_MSG TO ITAB_MSG .
          CLEAR WTAB_MSG.
          LOOP AT IT_ZIB_CONTABIL_ERR INTO WA_ZIB_CONTABIL_ERR.
            WTAB_MSG-NAME = WA_ZIB_CONTABIL_ERR-MESSAGE.
            APPEND WTAB_MSG TO ITAB_MSG .
            CLEAR WTAB_MSG.
          ENDLOOP.

          CONCATENATE 'DOCUMENTO ' O_ALV-BELNR INTO MSG_ALV SEPARATED BY SPACE.
          CALL FUNCTION 'POPUP_WITH_TABLE_DISPLAY'
            EXPORTING
              ENDPOS_COL   = 140
              ENDPOS_ROW   = 20
              STARTPOS_COL = 60
              STARTPOS_ROW = 15
              TITLETEXT    = MSG_ALV
            TABLES
              VALUETAB     = ITAB_MSG
            EXCEPTIONS
              BREAK_OFF    = 1
              OTHERS       = 2.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    "catch_hotspot

  METHOD HANDLE_TOP_OF_PAGE .
    PERFORM EVENT_TOP_OF_PAGE USING E_DYNDOC_ID
    TABLE_INDEX .
  ENDMETHOD.                    "HANDLE_TOP_OF_PAGE


ENDCLASS.                    "lcl_event_receiver IMPLEMENTATION


DATA:       EVENT_RECEIVER   TYPE REF TO LCL_EVENT_RECEIVER.


**************************************************************************
INITIALIZATION.
**************************************************************************

  CALL FUNCTION 'LAST_DAY_OF_MONTHS'
    EXPORTING
      DAY_IN            = SY-DATUM
    IMPORTING
      LAST_DAY_OF_MONTH = P_BUDAT2
    EXCEPTIONS
      DAY_IN_NO_DATE    = 1
      OTHERS            = 2.
  IF SY-SUBRC <> 0.
    MESSAGE E398(00) WITH 'Erro ao determinar dia!' SPACE SPACE SPACE.
  ENDIF.
  P_AUGDT = P_BUDAT2.
*Inicializa as tabstrips
  TS_ABA1 = TEXT-006. "'Lançamentos'.
  TS_ABA2 = TEXT-007. "'Part. Em Aberto'.
  TS_0100-PROG = SY-REPID.
  TS_0100-DYNNR = 100.
  TS_0100-ACTIVETAB = 'TS_ABA1'.
  WG_REPNAME = SY-REPID.
* Inicializa o layout do alv
  PERFORM ZF_INICIALIZA_VARIANTE.
*---------------------------------------------------------------------*
* Event selection-screen on value-request for p_var
*---------------------------------------------------------------------*
  DATA: VARIANTE        LIKE DISVARIANT,
        DEF_VARIANTE    LIKE DISVARIANT.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_VARI.

  WG_SAVE = 'X'.
  WG_VARIANT-REPORT = WG_REPNAME.
  WG_X_VARIANT = WG_VARIANT.

  IF ( NOT P_VARI IS INITIAL ).
    WG_VARIANT-VARIANT = P_VARI.
  ENDIF.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      IS_VARIANT    = WG_VARIANT
      I_SAVE        = WG_SAVE
    IMPORTING
      ES_VARIANT    = WG_X_VARIANT
    EXCEPTIONS
      NOT_FOUND     = 1
      PROGRAM_ERROR = 2
      OTHERS        = 3.

  IF ( SY-SUBRC NE 0 ).
    MESSAGE S000(Z01) WITH 'Não existe variante'.
*    STOP.
  ELSE.
    MOVE WG_X_VARIANT-VARIANT TO P_VARI.
  ENDIF.


AT SELECTION-SCREEN.

  P_BUDAT2 = P_BUDAT.
  P_AUGDT = P_BUDAT.
  P_SPMON = P_BUDAT.

  CASE SY-DYNNR.
    WHEN 1000.
      CASE SY-UCOMM.
        WHEN 'ABA1'.
          TS_0100-DYNNR = 100.
        WHEN 'ABA2'.
          TS_0100-DYNNR = 200.
      ENDCASE.
  ENDCASE.


*************Processamento****************************
START-OF-SELECTION.
  DATA: WG_INDEX TYPE SY-TABIX,
        TL_BSAD_ESTORNO TYPE TABLE OF BSAD WITH HEADER LINE,
        TL_BSAK_ESTORNO TYPE TABLE OF BSAK WITH HEADER LINE,
        TL_BSAS_ESTORNO TYPE TABLE OF BSAS WITH HEADER LINE.
*CONSISTÊNCIAS
  PERFORM ZF_VALIDA_CAMPOS.

  SELECT SINGLE BUKRS LAND1
    FROM T001
    INTO WA_T001
    WHERE BUKRS = P_BUKRS.

  SELECT SINGLE LAND1 WAERS
    FROM T005
    INTO WA_T005
    WHERE LAND1 = WA_T001-LAND1.

*Verifica campos da T001B
*Verifica se o período esta aberto
  SELECT FRYE1 FRPE1 FROM T001B
    INTO TABLE T_T001B
    WHERE BUKRS EQ P_BUKRS    AND
          FRYE1 EQ P_BUDAT(4) AND
          FRPE1 EQ P_BUDAT+4(2).

  IF SY-SUBRC <> 0.
*Se não encontrou o mês está fechado!
****Trata Fechamento Mês
    IF P_V_LANC IS INITIAL.
      MESSAGE I398(00) WITH 'Mês referente a Data da avaliação'
                            ' está fechado...'.
      LEAVE TO TRANSACTION 'ZGL012'.
    ELSE.
      PERFORM BUSCA_ZGL12_AVM.
    ENDIF.
  ELSE.
**se encontrou´o mês está em aberto entao processa.
*Trata Taxa de Câmbio
    PERFORM BUSCA_TX_CAMBIO.
*Trata Partidas em Aberto
    CASE 'X'.
      WHEN P_LIFNR.
        PERFORM F_FORNECEDOR.
        SELECT *
        FROM ZGL012_AVM
        INTO TABLE T_ZGL012_ATUAL
        WHERE BUKRS EQ P_BUKRS
        AND DT_AVAL EQ P_BUDAT
        AND LIFNR   IN S_LIFNR
        AND ESTORNO NE 'X'.
        DELETE T_ZGL012_ATUAL WHERE LIFNR = SPACE.

      WHEN P_KUNNR.
        PERFORM F_CLIENTE.
        SELECT *
        FROM ZGL012_AVM
        INTO TABLE T_ZGL012_ATUAL
        WHERE BUKRS EQ P_BUKRS
        AND DT_AVAL EQ P_BUDAT
        AND KUNNR   IN S_KUNNR
        AND ESTORNO NE 'X'.
        DELETE T_ZGL012_ATUAL WHERE KUNNR = SPACE.
      WHEN P_HKONT.
        PERFORM F_CONTA.
        SELECT *
        FROM ZGL012_AVM
        INTO TABLE T_ZGL012_ATUAL
        WHERE BUKRS EQ P_BUKRS
        AND DT_AVAL EQ P_BUDAT
        AND HKONT   IN S_HKONT
        AND ESTORNO NE 'X'.
        DELETE T_ZGL012_ATUAL WHERE HKONT = SPACE.
      WHEN P_HKONT2.
        PERFORM F_CONTA2.
    ENDCASE.
    IF NOT T_ZGL012_ATUAL[] IS INITIAL  AND P_HKONT2 NE 'X'.
      SELECT *
        FROM BKPF
        INTO TABLE IT_BKPF
        FOR ALL ENTRIES IN T_ZGL012_ATUAL
          WHERE BUKRS EQ T_ZGL012_ATUAL-BUKRS
            AND BELNR EQ T_ZGL012_ATUAL-BELNR
            AND STBLG NE SPACE.

      SORT: IT_BKPF BY BUKRS BELNR.

      LOOP AT T_ZGL012_ATUAL INTO WA_ZGL012_AUX.
        WG_INDEX = SY-TABIX.
        READ TABLE IT_BKPF
          WITH KEY BUKRS = WA_ZGL012_AUX-BUKRS
                   BELNR = WA_ZGL012_AUX-BELNR
                   BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
*          DELETE T_ZGL012_ATUAL INDEX WG_INDEX.
*          CONTINUE.
          WA_ZGL012_AUX-TRAVA = 'X'.
          MODIFY T_ZGL012_ATUAL FROM WA_ZGL012_AUX INDEX  WG_INDEX TRANSPORTING TRAVA.
        ENDIF.

        DELETE T_ZGL012_AVM WHERE BUKRS   = WA_ZGL012_AUX-BUKRS   AND
                                  DT_AVAL = WA_ZGL012_AUX-DT_AVAL AND
                                  BELNR   = WA_ZGL012_AUX-BELNR   AND
                                  BUZEI   = WA_ZGL012_AUX-BUZEI.


      ENDLOOP.
      APPEND LINES OF T_ZGL012_ATUAL TO T_ZGL012_AVM.
    ENDIF.

    IF T_ZGL012_AVM[] IS NOT INITIAL AND P_HKONT2 NE 'X'.
      SELECT *
        FROM ZIB_CONTABIL_ERR
        INTO TABLE IT_ZIB_CONTABIL_ERR
        FOR ALL ENTRIES IN T_ZGL012_AVM
        WHERE OBJ_KEY = T_ZGL012_AVM-OBJ_KEY.
      SORT IT_ZIB_CONTABIL_ERR BY OBJ_KEY.

      SELECT ZIB_CONTABIL_CHV~MANDT
             ZIB_CONTABIL_CHV~OBJ_KEY
             ZIB_CONTABIL_CHV~BELNR
             ZIB_CONTABIL_CHV~BUKRS
             ZIB_CONTABIL_CHV~GJAHR
             ZIB_CONTABIL~BLDAT
        FROM ZIB_CONTABIL_CHV INNER JOIN ZIB_CONTABIL
        ON ZIB_CONTABIL~OBJ_KEY EQ ZIB_CONTABIL_CHV~OBJ_KEY
        INTO TABLE IT_ZIB_CONTABIL_CHV
        FOR ALL ENTRIES IN T_ZGL012_AVM
        WHERE ZIB_CONTABIL_CHV~OBJ_KEY = T_ZGL012_AVM-OBJ_KEY.

      SORT IT_ZIB_CONTABIL_CHV BY OBJ_KEY.

      REFRESH: TL_BSAD_ESTORNO, TL_BSAK_ESTORNO, TL_BSAS_ESTORNO.
      CASE 'X'.
        WHEN P_KUNNR.
          SELECT *
            FROM BSAD
            INTO TABLE TL_BSAD_ESTORNO
             FOR ALL ENTRIES IN T_ZGL012_AVM
              WHERE BELNR EQ T_ZGL012_AVM-BELNR
                AND BUKRS EQ T_ZGL012_AVM-BUKRS
                AND BUZEI EQ T_ZGL012_AVM-BUZEI.

          SORT: TL_BSAD_ESTORNO BY BELNR BUKRS BUZEI.
          LOOP AT T_ZGL012_AVM INTO WA_ZGL012_AVM.
            IF WA_ZGL012_AVM-ESTORNO EQ 'X'.
              READ TABLE TL_BSAD_ESTORNO
                WITH KEY BELNR = WA_ZGL012_AVM-BELNR
                         BUKRS = WA_ZGL012_AVM-BUKRS
                         BUZEI = WA_ZGL012_AVM-BUZEI
                         BINARY SEARCH.
              IF SY-SUBRC IS INITIAL.

                MOVE: TL_BSAD_ESTORNO-AUGDT TO WA_ZGL012_AVM-AUGDT,
                      TL_BSAD_ESTORNO-AUGBL TO WA_ZGL012_AVM-AUGBL.

                MODIFY T_ZGL012_AVM FROM WA_ZGL012_AVM.
              ENDIF.

            ENDIF.
          ENDLOOP.

        WHEN P_LIFNR.
          SELECT *
            FROM BSAK
            INTO TABLE TL_BSAK_ESTORNO
             FOR ALL ENTRIES IN T_ZGL012_AVM
              WHERE BELNR EQ T_ZGL012_AVM-BELNR
                AND BUKRS EQ T_ZGL012_AVM-BUKRS
                AND BUZEI EQ T_ZGL012_AVM-BUZEI.

          SORT: TL_BSAK_ESTORNO BY BELNR BUKRS BUZEI.
          LOOP AT T_ZGL012_AVM INTO WA_ZGL012_AVM.
            IF WA_ZGL012_AVM-ESTORNO EQ 'X'.
              READ TABLE TL_BSAK_ESTORNO
                WITH KEY BELNR = WA_ZGL012_AVM-BELNR
                         BUKRS = WA_ZGL012_AVM-BUKRS
                         BUZEI = WA_ZGL012_AVM-BUZEI
                         BINARY SEARCH.
              IF SY-SUBRC IS INITIAL.

                MOVE: TL_BSAK_ESTORNO-AUGDT TO WA_ZGL012_AVM-AUGDT,
                      TL_BSAK_ESTORNO-AUGBL TO WA_ZGL012_AVM-AUGBL.

                MODIFY T_ZGL012_AVM FROM WA_ZGL012_AVM.
              ENDIF.

            ENDIF.
          ENDLOOP.

        WHEN P_HKONT.
          SELECT *
            FROM BSAS
            INTO TABLE TL_BSAS_ESTORNO
             FOR ALL ENTRIES IN T_ZGL012_AVM
              WHERE BELNR EQ T_ZGL012_AVM-BELNR
                AND BUKRS EQ T_ZGL012_AVM-BUKRS
                AND BUZEI EQ T_ZGL012_AVM-BUZEI.

          SORT: TL_BSAS_ESTORNO BY BELNR BUKRS BUZEI.
          LOOP AT T_ZGL012_AVM INTO WA_ZGL012_AVM.
            IF WA_ZGL012_AVM-ESTORNO EQ 'X'.
              READ TABLE TL_BSAS_ESTORNO
                WITH KEY BELNR = WA_ZGL012_AVM-BELNR
                         BUKRS = WA_ZGL012_AVM-BUKRS
                         BUZEI = WA_ZGL012_AVM-BUZEI
                         BINARY SEARCH.
              IF SY-SUBRC IS INITIAL.

                MOVE: TL_BSAS_ESTORNO-AUGDT TO WA_ZGL012_AVM-AUGDT,
                      TL_BSAS_ESTORNO-AUGBL TO WA_ZGL012_AVM-AUGBL.

                MODIFY T_ZGL012_AVM FROM WA_ZGL012_AVM.
              ENDIF.

            ENDIF.
          ENDLOOP.

      ENDCASE.


    ENDIF.
    PERFORM F_ALV.
  ENDIF.
*************Subrotinas*******************************
*&---------------------------------------------------------------------*
*&      Form  BUSCA_ZGL12_AVM
*&---------------------------------------------------------------------*
*     Trata Fechamento Mês
*----------------------------------------------------------------------*
FORM BUSCA_ZGL12_AVM .
  SELECT *
    FROM ZGL012_AVM
    INTO TABLE T_ZGL012_AVM
    WHERE BUKRS EQ P_BUKRS
    AND DT_AVAL EQ P_BUDAT
    AND LIFNR   IN S_LIFNR
    AND KUNNR   IN S_KUNNR
    AND HKONT   IN S_HKONT.
  IF SY-SUBRC = 0.
    IF P_LIFNR = 'X'.
      DELETE T_ZGL012_AVM WHERE LIFNR = ''.
      DELETE T_ZGL012_AVM WHERE ST_REV = 'S'.
    ELSEIF P_KUNNR = 'X'.
      DELETE T_ZGL012_AVM WHERE KUNNR = ''.
      DELETE T_ZGL012_AVM WHERE ST_REV = 'S'.
    ELSEIF P_HKONT = 'X'.
      DELETE T_ZGL012_AVM WHERE KUNNR = '' AND LIFNR EQ ''.
      DELETE T_ZGL012_AVM WHERE ST_REV = 'S'.
    ELSEIF P_HKONT2 = 'X'.
      DELETE T_ZGL012_AVM WHERE ST_REV NE 'S'.
    ENDIF.
    PERFORM F_ALV.
  ELSE.
    MESSAGE I000(SU) WITH 'Registros não encontrados'.
*    STOP.
  ENDIF.
ENDFORM.                    " BUSCA_ZGL12_AVM
*&---------------------------------------------------------------------*
*&      Form  BUSCA_TX_CAMBIO
*&---------------------------------------------------------------------*
*       Trata Taxa de Câmbio
*----------------------------------------------------------------------*
FORM BUSCA_TX_CAMBIO .
  RANGES: R_GDATU FOR TCURR-GDATU,
          R_FCURR FOR TCURR-FCURR.
  DATA: WL_DATE_AUX TYPE DATUM,
        WL_INPUT(10).
  MOVE 'IEQ' TO R_GDATU.

  WL_DATE_AUX = P_BUDAT.
  ADD 1 TO WL_DATE_AUX.
  WRITE WL_DATE_AUX TO WL_INPUT.

  CALL FUNCTION 'CONVERSION_EXIT_INVDT_INPUT'
    EXPORTING
      INPUT  = WL_INPUT
    IMPORTING
      OUTPUT = R_GDATU-LOW.
  APPEND R_GDATU.

*  WL_DATE_AUX = P_BUDAT - 1.
*  WRITE WL_DATE_AUX TO WL_INPUT.
*  CALL FUNCTION 'CONVERSION_EXIT_INVDT_INPUT'
*    EXPORTING
*      INPUT  = WL_INPUT
*    IMPORTING
*      OUTPUT = R_GDATU-LOW.
**  R_GDATU-LOW = WL_DATE_AUX.
*  APPEND R_GDATU.

  MOVE 'IEQ' TO R_FCURR.
  R_FCURR-LOW = C_EUR. APPEND R_FCURR.
  R_FCURR-LOW = C_USD. APPEND R_FCURR.

*BUSCA TAXA EM EUR
  SELECT KURST FCURR TCURR GDATU UKURS
      FROM TCURR
      INTO TABLE T_TCURR
      WHERE KURST = 'B'
      AND   FCURR IN R_FCURR
      AND   TCURR EQ WA_T005-WAERS
      AND   GDATU IN R_GDATU.
  IF SY-SUBRC = 0.
*Como o campo é de data invertida para pegar oa mais atual a data GDATU tem que ser ordenada do menor pro maior
    SORT T_TCURR BY GDATU ASCENDING FCURR ASCENDING .
    READ TABLE T_TCURR WITH KEY FCURR = C_EUR
              INTO WA_TCURR
              BINARY SEARCH.
    IF SY-SUBRC = 0.
      XTX_EUR = WA_TCURR-UKURS.
    ELSE.
      MESSAGE E398(00) WITH 'Erro ao encontrar taxa de conversão'
                            'do Euro'.
    ENDIF.

    READ TABLE T_TCURR WITH KEY FCURR = C_USD
              INTO WA_TCURR
              BINARY SEARCH.
    IF SY-SUBRC = 0.
      XTX_USD = WA_TCURR-UKURS.
    ELSE.
      MESSAGE E398(00) WITH 'Erro ao encontrar taxa de conversão'
                            'do Dólar'.
    ENDIF.

  ELSE.
    MESSAGE E398(00) WITH 'Erro ao encontrar taxa de conversão'
                      'do Dólar'.
  ENDIF.

ENDFORM.                    " BUSCA_TX_CAMBIO
*&---------------------------------------------------------------------*
*&      Form  F_FORNECEDOR
*&---------------------------------------------------------------------*
*       Partidas em Aberto fornecedor
*----------------------------------------------------------------------*
FORM F_FORNECEDOR .

  DATA: BEGIN OF T_BKPF0 OCCURS 0.
          INCLUDE STRUCTURE BKPF.
  DATA: END OF T_BKPF0.

  DATA: BEGIN OF T_BKPF0E OCCURS 0.
          INCLUDE STRUCTURE BKPF.
  DATA: END OF T_BKPF0E.


  DATA: BEGIN OF ITL_BSIK OCCURS 0,
           BUKRS TYPE BSIK-BUKRS,
           LIFNR TYPE BSIK-LIFNR,
           UMSKZ TYPE BSIK-UMSKZ,
           AUGBL TYPE BSIK-AUGBL,
           GJAHR TYPE BSIK-GJAHR,
           BELNR TYPE BSIK-BELNR,
           BUZEI TYPE BSIK-BUZEI,
           BUDAT TYPE BSIK-BUDAT,
           WAERS TYPE BSIK-WAERS,
           BLART TYPE BLART,
           BSCHL TYPE BSCHL,
           SHKZG TYPE SHKZG,
           GSBER TYPE GSBER,
           DMBTR TYPE BSIK-DMBTR,
           WRBTR TYPE BSIK-WRBTR,
           HKONT TYPE BSIK-HKONT,
           DMBE2 TYPE BSIK-DMBE2,
           AUGDT TYPE BSIK-AUGDT,
        END OF ITL_BSIK.

  DATA: BEGIN OF ITL_BKPF OCCURS 0,
          BUKRS TYPE BKPF-BUKRS,
          BELNR TYPE BKPF-BELNR,
          GJAHR TYPE BKPF-GJAHR,
          STGRD TYPE BKPF-STGRD,
          STBLG TYPE BKPF-STBLG,
          STJAH TYPE BKPF-STJAH,
        END OF ITL_BKPF.

*  break abap.

  SELECT BUKRS LIFNR UMSKZ BELNR BUZEI BUDAT WAERS BLART BSCHL SHKZG GSBER DMBTR WRBTR HKONT DMBE2 GJAHR
      FROM BSIK
      INTO TABLE T_BSIK
      WHERE BUKRS = P_BUKRS
        "AND waers <> c_brl
        AND WAERS <> WA_T005-WAERS
        AND BUDAT <= P_BUDAT
        AND LIFNR IN S_LIFNR
        AND BELNR IN S_BELNR
        AND DMBE2 >= WG_DMBT2.
*        AND ANLN1 = ''.


  IF SY-SUBRC IS INITIAL.
    SELECT * FROM BKPF INTO TABLE T_BKPF0
      FOR ALL ENTRIES IN T_BSIK
      WHERE BUKRS = T_BSIK-BUKRS AND
            BELNR = T_BSIK-BELNR AND
            GJAHR = T_BSIK-GJAHR AND
            BSTAT = 'S'.

    IF SY-SUBRC = 0.
      "ALRS 13.11.2014 Estorno dentro do mês não leva
      SELECT *
         FROM BKPF
         INTO TABLE T_BKPF0E
          FOR ALL ENTRIES IN T_BKPF0
           WHERE BUKRS EQ T_BKPF0-BUKRS
             AND BELNR EQ T_BKPF0-STBLG
             AND GJAHR EQ T_BKPF0-STJAH.

      LOOP AT T_BKPF0.
        READ TABLE T_BKPF0E WITH KEY BUKRS = T_BKPF0-BUKRS
                                     BELNR = T_BKPF0-STBLG
                                     GJAHR = T_BKPF0-STJAH.
        IF SY-SUBRC = 0.
          IF  T_BKPF0E-BUDAT LE P_BUDAT.
            READ TABLE T_BSIK INTO WA_BSIK WITH KEY BUKRS = T_BKPF0-BUKRS
                                                             BELNR = T_BKPF0-BELNR
                                                             GJAHR = T_BKPF0-GJAHR.
            IF SY-SUBRC = 0.
              DELETE T_BSIK INDEX SY-TABIX.
            ENDIF.
          ENDIF.
        ELSE.
          READ TABLE T_BSIK INTO WA_BSIK WITH KEY BUKRS = T_BKPF0-BUKRS
                                                  BELNR = T_BKPF0-BELNR
                                                  GJAHR = T_BKPF0-GJAHR.
          IF SY-SUBRC = 0.
            DELETE T_BSIK INDEX SY-TABIX.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.



    SELECT BUKRS LIFNR UMSKZ AUGBL GJAHR BELNR BUZEI BUDAT
           WAERS BLART BSCHL SHKZG GSBER DMBTR WRBTR HKONT DMBE2 AUGDT
        FROM BSAK
        INTO TABLE ITL_BSIK
        WHERE BUKRS = P_BUKRS
          AND LIFNR IN S_LIFNR
          AND AUGDT => P_BUDAT
          AND BELNR IN S_BELNR
          AND WAERS <> WA_T005-WAERS
          AND DMBE2 >= WG_DMBT2.
*          AND ANLN1 = ''.
    IF SY-SUBRC = 0.
      SELECT * FROM BKPF INTO TABLE T_BKPF0
        FOR ALL ENTRIES IN ITL_BSIK
        WHERE BUKRS = ITL_BSIK-BUKRS AND
              BELNR = ITL_BSIK-BELNR AND
              GJAHR = ITL_BSIK-GJAHR AND
              BSTAT = 'S'.

      IF SY-SUBRC = 0.
        "ALRS 13.11.2014 Estorno dentro do mês não leva
        SELECT *
           FROM BKPF
           INTO TABLE T_BKPF0E
            FOR ALL ENTRIES IN T_BKPF0
             WHERE BUKRS EQ T_BKPF0-BUKRS
               AND BELNR EQ T_BKPF0-STBLG
               AND GJAHR EQ T_BKPF0-STJAH.

        LOOP AT T_BKPF0.
          READ TABLE T_BKPF0E WITH KEY BUKRS = T_BKPF0-BUKRS
                                   BELNR = T_BKPF0-STBLG
                                   GJAHR = T_BKPF0-STJAH.
          IF SY-SUBRC = 0.
            IF  T_BKPF0E-BUDAT LE P_BUDAT.
              READ TABLE ITL_BSIK WITH KEY BUKRS = T_BKPF0-BUKRS
                                         BELNR = T_BKPF0-BELNR
                                         GJAHR = T_BKPF0-GJAHR.
              IF SY-SUBRC = 0.
                DELETE ITL_BSIK INDEX SY-TABIX.
              ENDIF.
            ENDIF.
          ELSE.
            READ TABLE ITL_BSIK WITH KEY BUKRS = T_BKPF0-BUKRS
                                         BELNR = T_BKPF0-BELNR
                                         GJAHR = T_BKPF0-GJAHR.
            IF SY-SUBRC = 0.
              DELETE ITL_BSIK INDEX SY-TABIX.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

      IF NOT ITL_BSIK[] IS INITIAL.
*        SELECT BUKRS BELNR GJAHR STGRD FROM BKPF INTO TABLE ITL_BKPF
*        FOR ALL ENTRIES IN ITL_BSIK
*        WHERE BUKRS = ITL_BSIK-BUKRS
*        AND   BELNR = ITL_BSIK-BELNR
*        AND   GJAHR = ITL_BSIK-GJAHR.
*        IF SY-SUBRC = 0.
**          delete itl_bkpf where stgrd = space.
*          LOOP AT ITL_BKPF.
*            DELETE ITL_BSIK WHERE BUKRS = ITL_BKPF-BUKRS AND
*                                  BELNR = ITL_BKPF-BELNR AND
*                                  GJAHR = ITL_BKPF-GJAHR.
*          ENDLOOP.
*        ENDIF.


        " Elimina registros ja compensados nos mês
        LOOP AT ITL_BSIK.
          IF ITL_BSIK-BUDAT(6) = ITL_BSIK-AUGDT(6).
            DELETE ITL_BSIK.
          ENDIF.
          SELECT SINGLE BELNR
          FROM ZGL012_AVM
          INTO   W_ZGL012_NAO
          WHERE BUKRS = ITL_BSIK-BUKRS
          AND   BELNR = ITL_BSIK-BELNR
          AND   DT_AVAL LT P_BUDAT.
          IF SY-SUBRC NE 0 AND  ITL_BSIK-AUGBL IS NOT INITIAL  AND ITL_BSIK-AUGDT LE P_BUDAT .
            DELETE ITL_BSIK.
          ENDIF.
        ENDLOOP.


      ENDIF.
    ENDIF.
    DELETE T_BSIK WHERE BLART = 'VC'.
    LOOP AT ITL_BSIK.
      IF ITL_BSIK-BELNR = ITL_BSIK-AUGBL.
        DELETE ITL_BSIK INDEX SY-TABIX.
      ELSE.
        MOVE-CORRESPONDING ITL_BSIK TO WA_BSIK.
        APPEND WA_BSIK TO T_BSIK.
      ENDIF.
    ENDLOOP.
  ELSE. " Não tem nenhum na bsik
    SELECT BUKRS LIFNR UMSKZ AUGBL GJAHR BELNR BUZEI BUDAT
        WAERS BLART BSCHL SHKZG GSBER DMBTR WRBTR HKONT DMBE2 AUGDT
     FROM BSAK
     INTO TABLE ITL_BSIK
     WHERE BUKRS = P_BUKRS
       AND LIFNR IN S_LIFNR
       AND BELNR IN S_BELNR
       AND AUGDT => P_BUDAT
       "AND waers <> c_brl
       AND WAERS <> WA_T005-WAERS
       AND DMBE2 >= WG_DMBT2.
*       AND ANLN1 = ''.
    IF SY-SUBRC = 0.
      SELECT * FROM BKPF INTO TABLE T_BKPF0
      FOR ALL ENTRIES IN ITL_BSIK
      WHERE BUKRS = ITL_BSIK-BUKRS AND
            BELNR = ITL_BSIK-BELNR AND
            GJAHR = ITL_BSIK-GJAHR AND
            BSTAT = 'S'.

      IF SY-SUBRC = 0.
        "ALRS 13.11.2014 Estorno dentro do mês não leva
        SELECT *
           FROM BKPF
           INTO TABLE T_BKPF0E
            FOR ALL ENTRIES IN T_BKPF0
             WHERE BUKRS EQ T_BKPF0-BUKRS
               AND BELNR EQ T_BKPF0-STBLG
               AND GJAHR EQ T_BKPF0-STJAH.

        LOOP AT T_BKPF0.
          READ TABLE T_BKPF0E WITH KEY BUKRS = T_BKPF0-BUKRS
                                  BELNR = T_BKPF0-STBLG
                                  GJAHR = T_BKPF0-STJAH.
          IF SY-SUBRC = 0.
            IF  T_BKPF0E-BUDAT LE P_BUDAT.
              READ TABLE ITL_BSIK WITH KEY BUKRS = T_BKPF0-BUKRS
                                         BELNR = T_BKPF0-BELNR
                                         GJAHR = T_BKPF0-GJAHR.
              IF SY-SUBRC = 0.
                DELETE ITL_BSIK INDEX SY-TABIX.
              ENDIF.
            ENDIF.
          ELSE.
            READ TABLE ITL_BSIK WITH KEY BUKRS = T_BKPF0-BUKRS
                                         BELNR = T_BKPF0-BELNR
                                         GJAHR = T_BKPF0-GJAHR.
            IF SY-SUBRC = 0.
              DELETE ITL_BSIK INDEX SY-TABIX.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

      " Elimina registros ja compensados nos mês
      LOOP AT ITL_BSIK.
        IF ITL_BSIK-BUDAT(6) = ITL_BSIK-AUGDT(6).
          DELETE ITL_BSIK.
        ENDIF.
        SELECT SINGLE BELNR
        FROM ZGL012_AVM
        INTO   W_ZGL012_NAO
        WHERE BUKRS = ITL_BSIK-BUKRS
        AND   BELNR = ITL_BSIK-BELNR
        AND   DT_AVAL LT P_BUDAT.
        IF SY-SUBRC NE 0 AND  ITL_BSIK-AUGBL IS NOT INITIAL  AND ITL_BSIK-AUGDT LE P_BUDAT .
          DELETE ITL_BSIK.
        ENDIF.
      ENDLOOP.

      LOOP AT ITL_BSIK.
        IF ITL_BSIK-BELNR = ITL_BSIK-AUGBL.
          DELETE ITL_BSIK INDEX SY-TABIX.
        ELSE.
          MOVE-CORRESPONDING ITL_BSIK TO WA_BSIK.
          APPEND WA_BSIK TO T_BSIK.
        ENDIF.
      ENDLOOP.

    ENDIF.
  ENDIF.
  DELETE T_BSIK WHERE BLART = 'VC'.
*  if not t_bsik[] is initial.
  PERFORM: CARREGA_T_ZGL_FOR.     "Carrega tabela do ALV
*  else.
*    message i000 with 'Parâmetros informados não foram encontrados'
*                      'para avaliação'.
*
*  endif.
ENDFORM.                    " F_FORNECEDOR
*&---------------------------------------------------------------------*
*&      Form  CARREGA_T_ZGL_FOR
*&---------------------------------------------------------------------*
*       Carrega tabela aux. fornecedor
*----------------------------------------------------------------------*
FORM CARREGA_T_ZGL_FOR .
  DATA: TL_BSAK_AUGBL  TYPE TABLE OF BSAK WITH HEADER LINE.
  REFRESH: TL_BSAK_AUGBL.

  DATA TABIX TYPE SY-TABIX.

  PERFORM ULTIMA_AVALIACAO_FOR.  "Trata ültima avaliação
*  PERFORM DOC_COMPENSADOS_FOR.   "Trata documentos compensados
  DELETE T_BSIK WHERE DMBE2 EQ '0.01'
                 OR UMSKZ  EQ 'F'.
  LOOP AT T_BSIK INTO WA_BSIK.
    WA_ZGL012_AVM-MANDT   = SY-MANDT.
    WA_ZGL012_AVM-BUKRS   = WA_BSIK-BUKRS.
    WA_ZGL012_AVM-DT_AVAL = P_BUDAT.
    WA_ZGL012_AVM-LIFNR   = WA_BSIK-LIFNR.
    WA_ZGL012_AVM-BELNR   = WA_BSIK-BELNR.
    WA_ZGL012_AVM-BUZEI   = WA_BSIK-BUZEI.
    WA_ZGL012_AVM-BUDAT   = WA_BSIK-BUDAT.
    WA_ZGL012_AVM-BSCHL   = WA_BSIK-BSCHL.
    WA_ZGL012_AVM-WAERS   = WA_BSIK-WAERS.
    WA_ZGL012_AVM-GSBER   = WA_BSIK-GSBER.
    IF WA_BSIK-SHKZG = 'S'.
      WA_ZGL012_AVM-DMBTR   = WA_BSIK-DMBTR.
      WA_ZGL012_AVM-DMBE2   = WA_BSIK-DMBE2.
      IF WA_ZGL012_AVM-WAERS EQ 'EUR'.
        WA_ZGL012_AVM-WRBTR   = WA_BSIK-WRBTR.
      ELSE.
        WA_ZGL012_AVM-WRBTR   =  0.
      ENDIF.
    ELSE.
      WA_ZGL012_AVM-DMBTR   = WA_BSIK-DMBTR * ( -1 ).
      WA_ZGL012_AVM-DMBE2   = WA_BSIK-DMBE2 * ( -1 ).
      IF WA_ZGL012_AVM-WAERS EQ 'EUR'.
        WA_ZGL012_AVM-WRBTR   = WA_BSIK-WRBTR * ( -1 ).
      ELSE.
        WA_ZGL012_AVM-WRBTR   =  0.
      ENDIF.
    ENDIF.
    IF WA_ZGL012_AVM-WAERS EQ 'EUR'.
      IF NOT WA_BSIK-WRBTR IS INITIAL.
        WA_ZGL012_AVM-KURSF   = WA_BSIK-DMBTR / WA_BSIK-WRBTR.
      ELSE.
        WA_ZGL012_AVM-KURSF   = 0.
      ENDIF.
    ELSE.
      IF NOT WA_BSIK-DMBE2 IS INITIAL.
        WA_ZGL012_AVM-KURSF   = WA_BSIK-DMBTR / WA_BSIK-DMBE2.
      ELSE.
        WA_ZGL012_AVM-KURSF   = 0.
      ENDIF.
    ENDIF.
    IF WA_ZGL012_AVM-WAERS = 'USD'.
      WA_ZGL012_AVM-TX_FECH  = XTX_USD.
    ELSE.
      WA_ZGL012_AVM-TX_FECH  = XTX_EUR.
    ENDIF.
    IF WA_ZGL012_AVM-WAERS EQ 'EUR'.
      WA_ZGL012_AVM-VLR_ACUM_MES_ATU  = WA_ZGL012_AVM-DMBTR - ( WA_ZGL012_AVM-WRBTR * WA_ZGL012_AVM-TX_FECH ) .
      WA_ZGL012_AVM-VLR_ATUALIZADO    = WA_ZGL012_AVM-WRBTR * WA_ZGL012_AVM-TX_FECH.
    ELSE.
      WA_ZGL012_AVM-VLR_ACUM_MES_ATU  = WA_ZGL012_AVM-DMBTR - ( WA_ZGL012_AVM-DMBE2 * WA_ZGL012_AVM-TX_FECH ) .
      WA_ZGL012_AVM-VLR_ATUALIZADO    = WA_ZGL012_AVM-DMBE2 * WA_ZGL012_AVM-TX_FECH.
    ENDIF.
    WA_ZGL012_AVM-HKONT   = WA_BSIK-HKONT.
    WA_ZGL012_AVM-UMSKZ   = WA_BSIK-UMSKZ.
*Grava valor acumulado do mês anterior.
    READ TABLE T_ZGL012_AUX INTO WA_ZGL012_AUX WITH KEY
    BUKRS   =  WA_ZGL012_AVM-BUKRS
    LIFNR   =  WA_ZGL012_AVM-LIFNR
    BELNR   =  WA_ZGL012_AVM-BELNR
    BUZEI   =  WA_ZGL012_AVM-BUZEI
    BUDAT   =  WA_ZGL012_AVM-BUDAT .
*NAO UTILIZAR O BINARY SEARCH POIS COM O COMANDO DELETE ABAIXO PODE DESORDENAR
    IF SY-SUBRC = 0 .
      "ALRS 13.11.2014 Estorno dentro do mês não leva
      IF WA_ZGL012_AUX-DELE = 'X'.
        CONTINUE.
      ENDIF.
      WA_ZGL012_AVM-VLR_ACUM_MES_ANT = WA_ZGL012_AUX-VLR_ACUM_MES_ATU.
    ELSE.
      WA_ZGL012_AVM-VLR_ACUM_MES_ANT = 0.
    ENDIF.
    WA_ZGL012_AVM-VLR_VARIACAO = WA_ZGL012_AVM-VLR_ACUM_MES_ATU - WA_ZGL012_AVM-VLR_ACUM_MES_ANT.
*Grava documentos compensados
    APPEND WA_ZGL012_AVM TO T_ZGL012_AVM.
  ENDLOOP.
*verifica se sobraram documentos que nao estao na selecao do mes atual
*mas tem mesma empresa e mesmo fornecedor do parametro
  IF NOT T_ZGL012_AUX[] IS INITIAL.
    DATA: W_TB TYPE SY-TABIX.
    PERFORM DOC_COMPENSADOS_FOR.
    SORT IT_BSAK BY BUKRS LIFNR BELNR BUZEI.
    LOOP AT T_ZGL012_AUX[] INTO WA_ZGL012_AVM.
      W_TB = SY-TABIX.
      READ TABLE IT_BSAK INTO WA_BSAK WITH KEY
      BUKRS   =  WA_ZGL012_AVM-BUKRS
      LIFNR   =  WA_ZGL012_AVM-LIFNR
      BELNR   =  WA_ZGL012_AVM-BELNR
      BUZEI   =  WA_ZGL012_AVM-BUZEI
      BINARY SEARCH.
      IF SY-SUBRC = 0.

        WA_ZGL012_AVM-MANDT   = SY-MANDT.
        WA_ZGL012_AVM-DT_AVAL = P_BUDAT.
        WA_ZGL012_AVM-DELE = 'X'.                           "edu26
        WA_ZGL012_AVM-AUGBL   = WA_BSAK-AUGBL.
        WA_ZGL012_AVM-AUGDT   = WA_BSAK-AUGDT.
        WA_ZGL012_AVM-VLR_VARIACAO = WA_ZGL012_AVM-VLR_ACUM_MES_ATU - WA_ZGL012_AVM-VLR_ACUM_MES_ANT.
*        MODIFY t_zgl012_avm FROM wa_zgl012_avm INDEX w_tb.
        APPEND WA_ZGL012_AVM TO T_ZGL012_AVM.

      ENDIF.

    ENDLOOP.
  ENDIF.

  IF IT_BSAK[] IS NOT INITIAL.
    SELECT *
      FROM BSAK
      INTO TABLE TL_BSAK_AUGBL
       FOR ALL ENTRIES IN IT_BSAK
        WHERE BELNR EQ IT_BSAK-AUGBL
          AND BUKRS EQ P_BUKRS.

  ENDIF.
  SORT: TL_BSAK_AUGBL BY BELNR.
  SORT: IT_BSAK BY BUKRS LIFNR BELNR BUZEI,
        "T_ZGL012_AUX BY BUKRS LIFNR BELNR BUZEI,
        T_ZGL012_AUX BY DT_AVAL DESCENDING.

  LOOP AT T_ZGL012_AVM INTO WA_ZGL012_AVM.
    TABIX = SY-TABIX.
    READ TABLE IT_BSAK INTO WA_BSAK WITH KEY
                                    BUKRS   =  WA_ZGL012_AVM-BUKRS
                                    LIFNR   =  WA_ZGL012_AVM-LIFNR
                                    BELNR   =  WA_ZGL012_AVM-BELNR
                                    BUZEI   =  WA_ZGL012_AVM-BUZEI
                                    BINARY SEARCH.
    IF SY-SUBRC = 0.
      CLEAR: TL_BSAK_AUGBL.
      READ TABLE TL_BSAK_AUGBL
        WITH KEY BELNR = WA_BSAK-AUGBL
                 BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        MOVE: TL_BSAK_AUGBL-BUDAT TO WA_BSAK-AUGDT.
      ENDIF.

      WA_ZGL012_AVM-AUGBL   = WA_BSAK-AUGBL.
      WA_ZGL012_AVM-AUGDT   = WA_BSAK-AUGDT.
    ENDIF.
    READ TABLE T_ZGL012_AUX INTO WA_ZGL012_2
                            WITH KEY    BUKRS   =  WA_ZGL012_AVM-BUKRS
                                        LIFNR   =  WA_ZGL012_AVM-LIFNR
                                        BELNR   =  WA_ZGL012_AVM-BELNR
                                        BUZEI   =  WA_ZGL012_AVM-BUZEI.
    IF SY-SUBRC = 0.
*      wa_zgl012_avm-vlr_variacao =
*      wa_zgl012_avm-vlr_acum_mes_atu =
*      wa_zgl012_2-vlr_acum_mes_atu.

      WA_ZGL012_AVM-VLR_ACUM_MES_ANT = WA_ZGL012_2-VLR_ACUM_MES_ATU.
      WA_ZGL012_AVM-VLR_VARIACAO = WA_ZGL012_AVM-VLR_ACUM_MES_ATU - WA_ZGL012_AVM-VLR_ACUM_MES_ANT.
    ENDIF.
*** Busca valor acumulado do mes Atual
    IF WA_ZGL012_AVM-WAERS = 'USD'.
      WA_ZGL012_AVM-TX_FECH  = XTX_USD.
    ELSE.
      WA_ZGL012_AVM-TX_FECH  = XTX_EUR.
    ENDIF.
    IF WA_ZGL012_AVM-WAERS EQ 'EUR'.
      WA_ZGL012_AVM-VLR_ACUM_MES_ATU  = WA_ZGL012_AVM-DMBTR - ( WA_ZGL012_AVM-WRBTR * WA_ZGL012_AVM-TX_FECH ) .
      WA_ZGL012_AVM-VLR_ATUALIZADO    = WA_ZGL012_AVM-WRBTR * WA_ZGL012_AVM-TX_FECH.
    ELSE.
      WA_ZGL012_AVM-VLR_ACUM_MES_ATU  = WA_ZGL012_AVM-DMBTR - ( WA_ZGL012_AVM-DMBE2 * WA_ZGL012_AVM-TX_FECH ) .
      WA_ZGL012_AVM-VLR_ATUALIZADO    = WA_ZGL012_AVM-DMBE2 * WA_ZGL012_AVM-TX_FECH.
    ENDIF.

    MODIFY T_ZGL012_AVM FROM WA_ZGL012_AVM INDEX TABIX TRANSPORTING AUGBL AUGDT VLR_ACUM_MES_ANT VLR_VARIACAO TX_FECH VLR_ACUM_MES_ATU VLR_ATUALIZADO.
  ENDLOOP.

ENDFORM.                    " CARREGA_T_ZGL_FOR

*&---------------------------------------------------------------------*
*&      Form  ULTIMA_AVALIACAO_FOR
*&---------------------------------------------------------------------*
*       Última data gravada_
*----------------------------------------------------------------------*
FORM ULTIMA_AVALIACAO_FOR.
*Define última data de avaliação gravada.
  DATA L_UDATA TYPE DATUM.
  DATA: TL_BKPF  TYPE TABLE OF BKPF WITH HEADER LINE,
        TL_BKPFE TYPE TABLE OF BKPF WITH HEADER LINE.

  L_UDATA = P_BUDAT.
  L_UDATA+6(2) = '01'.   "tranforma em primeiro dia do mês corrente
  L_UDATA = L_UDATA - 1. "transforma no último dia do mês anterior

  SELECT * INTO TABLE T_ZGL012_AUX FROM ZGL012_AVM
*    FOR ALL ENTRIES IN T_BSIK
    WHERE
      BUKRS   EQ  P_BUKRS      AND
*** Eduardo 07.04.2010
*      dt_aval eq  l_udata      and
       DT_AVAL LE  L_UDATA      AND
       ESTORNO NE 'X'           AND
       LIFNR   IN  S_LIFNR. "  T_BSIK-LIFNR AND
  IF SY-SUBRC = 0.
    SELECT *
      FROM BKPF
      INTO TABLE TL_BKPF
       FOR ALL ENTRIES IN T_ZGL012_AUX
        WHERE BUKRS EQ T_ZGL012_AUX-BUKRS
          AND BELNR EQ T_ZGL012_AUX-BELNR
*          and gjahr eq t_zgl012_aux-gjahr
          AND STBLG NE SPACE.

    "ALRS 13.11.2014 Estorno dentro do mês não leva
    IF TL_BKPF[] IS NOT INITIAL.
      SELECT *
         FROM BKPF
         INTO TABLE TL_BKPFE
          FOR ALL ENTRIES IN TL_BKPF
           WHERE BUKRS EQ TL_BKPF-BUKRS
             AND BELNR EQ TL_BKPF-STBLG
             AND GJAHR EQ TL_BKPF-STJAH .
    ENDIF.

    SORT T_ZGL012_AUX BY BUKRS BELNR.
    LOOP AT TL_BKPF.
      READ TABLE TL_BKPFE WITH KEY BUKRS = TL_BKPF-BUKRS
                                  BELNR = TL_BKPF-STBLG
                                  GJAHR = TL_BKPF-STJAH.
      IF SY-SUBRC = 0.
        IF  TL_BKPFE-BUDAT LE P_BUDAT.
          LOOP AT T_ZGL012_AUX WHERE BELNR EQ TL_BKPF-BELNR
                               AND   BUKRS EQ TL_BKPF-BUKRS.
            T_ZGL012_AUX-DELE = 'X'.
            MODIFY T_ZGL012_AUX INDEX SY-TABIX TRANSPORTING DELE.
          ENDLOOP.
        ENDIF.
      ELSE.
        DELETE T_ZGL012_AUX WHERE BELNR EQ TL_BKPF-BELNR
                              AND BUKRS EQ TL_BKPF-BUKRS.
      ENDIF.

    ENDLOOP.

    SORT T_ZGL012_AUX BY BUKRS BELNR BUZEI DT_AVAL.
    DELETE ADJACENT DUPLICATES FROM T_ZGL012_AUX COMPARING BUKRS BELNR BUZEI DT_AVAL.
    SORT T_ZGL012_AUX BY BUKRS LIFNR BELNR BUZEI BUDAT.
  ENDIF.
  CLEAR L_UDATA.
ENDFORM.                    " ULTIMA_AVALIACAO_FOR

*&---------------------------------------------------------------------*
*&      Form  DOC_COMPENSADOS_FOR
*&---------------------------------------------------------------------*
*       Busca BSAK
*----------------------------------------------------------------------*
FORM DOC_COMPENSADOS_FOR.
  IF NOT T_ZGL012_AUX[] IS INITIAL.
    SELECT BUKRS LIFNR AUGDT AUGBL BELNR BUZEI
      FROM BSAK
      INTO TABLE IT_BSAK
      FOR ALL ENTRIES IN T_ZGL012_AUX
      WHERE
      BUKRS = T_ZGL012_AUX-BUKRS AND
      LIFNR = T_ZGL012_AUX-LIFNR AND
      BELNR = T_ZGL012_AUX-BELNR AND
      BUZEI = T_ZGL012_AUX-BUZEI.
*      AND dmbe2 > wg_dmbt2." and
*      augdt le t_zgl012_aux-DT_AVAL
    .
    IF SY-SUBRC <> 0.
*      MESSAGE i398(00) WITH 'Partidas do período anterior'
*                            'sem correspondente nas partidas '
*                            'em aberto'  space.
    ELSE.
      LOOP AT IT_BSAK INTO WA_BSAK.
        IF WA_BSAK-BELNR = WA_BSAK-AUGBL.
          DELETE IT_BSAK INDEX SY-TABIX.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.
ENDFORM.                    " DOC_COMPENSADOS_FOR
*&---------------------------------------------------------------------*
*&      Form  F_CLIENTE
*&---------------------------------------------------------------------*
*       Partidas em Aberto Cliente
*----------------------------------------------------------------------*
FORM F_CLIENTE .
  DATA: BEGIN OF ITL_BSID OCCURS 0,
          BUKRS TYPE BSID-BUKRS,
          KUNNR TYPE BSID-KUNNR,
          UMSKZ TYPE BSID-UMSKZ,
          AUGBL TYPE BSID-AUGBL,
          GJAHR TYPE BSID-GJAHR,
          BELNR TYPE BSID-BELNR,
          BUZEI TYPE BSID-BUZEI,
          BUDAT TYPE BSID-BUDAT,
          WAERS TYPE BSID-WAERS,
          BLART TYPE BLART,
          BSCHL TYPE BSCHL,
          SHKZG TYPE SHKZG,
          GSBER TYPE GSBER,
          DMBTR TYPE BSID-DMBTR,
          WRBTR TYPE BSID-WRBTR,
          HKONT TYPE BSID-HKONT,
          DMBE2 TYPE BSID-DMBE2,
          AUGDT TYPE BSID-AUGDT,
        END OF ITL_BSID.

  DATA: BEGIN OF ITL_BKPF OCCURS 0,
          BUKRS TYPE BKPF-BUKRS,
          BELNR TYPE BKPF-BELNR,
          GJAHR TYPE BKPF-GJAHR,
          STGRD TYPE BKPF-STGRD,
          STBLG TYPE BKPF-STBLG,
          STJAH TYPE BKPF-STJAH,
        END OF ITL_BKPF.

  SELECT BUKRS KUNNR UMSKZ BELNR BUZEI BUDAT WAERS BLART BSCHL SHKZG GSBER DMBTR WRBTR HKONT DMBE2 GJAHR
      FROM BSID
      INTO TABLE T_BSID
      WHERE BUKRS = P_BUKRS
        "AND waers <> c_brl
        AND WAERS <> WA_T005-WAERS
        AND BUDAT <= P_BUDAT
        AND KUNNR IN S_KUNNR
        AND BELNR IN S_BELNR.
*    AND dmbe2 > wg_dmbt2.


  DATA: BEGIN OF T_BKPF00 OCCURS 0.
          INCLUDE STRUCTURE BKPF.
  DATA: END OF T_BKPF00.

  DATA: BEGIN OF T_BKPF0E OCCURS 0.
          INCLUDE STRUCTURE BKPF.
  DATA: END OF T_BKPF0E.

  IF SY-SUBRC = 0.

    SELECT * FROM BKPF INTO TABLE T_BKPF00
      FOR ALL ENTRIES IN T_BSID
      WHERE BUKRS = T_BSID-BUKRS AND
            BELNR = T_BSID-BELNR AND
            GJAHR = T_BSID-GJAHR AND
            BSTAT = 'S'.

    IF SY-SUBRC = 0.
      "ALRS 13.11.2014 Estorno dentro do mês não leva
      SELECT *
         FROM BKPF
         INTO TABLE T_BKPF0E
          FOR ALL ENTRIES IN T_BKPF00
           WHERE BUKRS EQ T_BKPF00-BUKRS
             AND BELNR EQ T_BKPF00-STBLG
             AND GJAHR EQ T_BKPF00-STJAH.

      LOOP AT T_BKPF00.
        READ TABLE T_BKPF0E WITH KEY BUKRS = T_BKPF00-BUKRS
                                   BELNR = T_BKPF00-STBLG
                                   GJAHR = T_BKPF00-STJAH.
        IF SY-SUBRC = 0.
          IF  T_BKPF0E-BUDAT LE P_BUDAT.
            READ TABLE T_BSID INTO WA_BSID WITH KEY BUKRS = T_BKPF00-BUKRS
                                     BELNR = T_BKPF00-BELNR
                                     GJAHR = T_BKPF00-GJAHR.
            IF SY-SUBRC = 0.
              DELETE T_BSID INDEX SY-TABIX.
            ENDIF.
          ENDIF.
        ELSE.
          READ TABLE T_BSID INTO WA_BSID WITH KEY BUKRS = T_BKPF00-BUKRS
                                       BELNR = T_BKPF00-BELNR
                                       GJAHR = T_BKPF00-GJAHR.
          IF SY-SUBRC = 0.
            DELETE T_BSID INDEX SY-TABIX.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.

  SELECT BUKRS KUNNR UMSKZ AUGBL GJAHR BELNR BUZEI BUDAT WAERS BLART BSCHL SHKZG GSBER DMBTR WRBTR HKONT DMBE2 AUGDT
      FROM BSAD
      INTO TABLE  ITL_BSID
      WHERE BUKRS = P_BUKRS
        AND KUNNR IN S_KUNNR
        AND BELNR IN S_BELNR
        AND AUGDT => P_BUDAT
        "AND waers <> c_brl
        AND WAERS <> WA_T005-WAERS
        AND DMBE2 >= WG_DMBT2.

  IF SY-SUBRC = 0.
    SELECT * FROM BKPF INTO TABLE T_BKPF00
      FOR ALL ENTRIES IN ITL_BSID
      WHERE BUKRS = ITL_BSID-BUKRS AND
            BELNR = ITL_BSID-BELNR AND
            GJAHR = ITL_BSID-GJAHR AND
            BSTAT = 'S'.

    IF SY-SUBRC = 0.
      "ALRS 13.11.2014 Estorno dentro do mês não leva
      SELECT *
         FROM BKPF
         INTO TABLE T_BKPF0E
          FOR ALL ENTRIES IN T_BKPF00
           WHERE BUKRS EQ T_BKPF00-BUKRS
             AND BELNR EQ T_BKPF00-STBLG
             AND GJAHR EQ T_BKPF00-STJAH.

      LOOP AT T_BKPF00.

        READ TABLE T_BKPF0E WITH KEY BUKRS = T_BKPF00-BUKRS
                                     BELNR = T_BKPF00-STBLG
                                     GJAHR = T_BKPF00-STJAH.
        IF SY-SUBRC = 0.
          IF  T_BKPF0E-BUDAT LE P_BUDAT.
            READ TABLE ITL_BSID WITH KEY BUKRS = T_BKPF00-BUKRS
                               BELNR = T_BKPF00-BELNR
                               GJAHR = T_BKPF00-GJAHR.
            IF SY-SUBRC = 0.
              DELETE ITL_BSID INDEX SY-TABIX.
            ENDIF.
          ENDIF.
        ELSE.
          READ TABLE ITL_BSID WITH KEY BUKRS = T_BKPF00-BUKRS
                                       BELNR = T_BKPF00-BELNR
                                       GJAHR = T_BKPF00-GJAHR.
          IF SY-SUBRC = 0.
            DELETE ITL_BSID INDEX SY-TABIX.
          ENDIF.
        ENDIF.

      ENDLOOP.
    ENDIF.

  ENDIF.


  IF NOT ITL_BSID[] IS INITIAL.
    SELECT BUKRS BELNR GJAHR STGRD STBLG STJAH
      FROM BKPF INTO TABLE ITL_BKPF
    FOR ALL ENTRIES IN ITL_BSID
    WHERE BUKRS = ITL_BSID-BUKRS
    AND   BELNR = ITL_BSID-BELNR
    AND   GJAHR = ITL_BSID-GJAHR
    AND   STGRD NE SPACE.
    IF SY-SUBRC = 0.
      "ALRS 13.11.2014 Estorno dentro do mês não leva
      SELECT *
         FROM BKPF
         INTO TABLE T_BKPF0E
          FOR ALL ENTRIES IN ITL_BKPF
           WHERE BUKRS EQ ITL_BKPF-BUKRS
             AND BELNR EQ ITL_BKPF-STBLG
             AND GJAHR EQ ITL_BKPF-STJAH.

      LOOP AT ITL_BKPF.
        READ TABLE T_BKPF0E WITH KEY BUKRS = ITL_BKPF-BUKRS
                                     BELNR = ITL_BKPF-STBLG
                                     GJAHR = ITL_BKPF-STJAH.
        IF SY-SUBRC = 0.
          IF  T_BKPF0E-BUDAT LE P_BUDAT.
            DELETE ITL_BSID WHERE BUKRS = ITL_BKPF-BUKRS AND
                      BELNR = ITL_BKPF-BELNR AND
                      GJAHR = ITL_BKPF-GJAHR.

          ENDIF.
        ELSE.
          DELETE ITL_BSID WHERE BUKRS = ITL_BKPF-BUKRS AND
                         BELNR = ITL_BKPF-BELNR AND
                         GJAHR = ITL_BKPF-GJAHR.
        ENDIF.
      ENDLOOP.
    ENDIF.

    LOOP AT ITL_BSID.
      IF ITL_BSID-BUDAT(6) = ITL_BSID-AUGDT(6).
        DELETE ITL_BSID.
      ENDIF.
    ENDLOOP.


    " Elimina registros ja compensados nos mês
    LOOP AT ITL_BSID.
      IF ITL_BSID-BUDAT(6) = ITL_BSID-AUGDT(6).
        DELETE ITL_BSID.
      ENDIF.
      SELECT SINGLE BELNR
          FROM ZGL012_AVM
          INTO   W_ZGL012_NAO
          WHERE BUKRS = ITL_BSID-BUKRS
          AND   BELNR = ITL_BSID-BELNR
          AND   DT_AVAL LT P_BUDAT.
      IF SY-SUBRC NE 0 AND  ITL_BSID-AUGBL IS NOT INITIAL AND ITL_BSID-AUGDT LE P_BUDAT .
        DELETE ITL_BSID.
      ENDIF.
    ENDLOOP.


  ENDIF.
  DELETE T_BSID WHERE BLART = 'VC'.
  LOOP AT ITL_BSID.
    IF ITL_BSID-BELNR = ITL_BSID-AUGBL.
      DELETE ITL_BSID INDEX SY-TABIX.
    ELSE.
      MOVE-CORRESPONDING ITL_BSID TO WA_BSID.
      APPEND WA_BSID TO T_BSID.
    ENDIF.
  ENDLOOP.
  DELETE T_BSID WHERE BLART = 'VC'.
*  if not t_bsid[] is initial.
  PERFORM: CARREGA_T_ZGL_CLI.     "Carrega tabela do ALV
*  else.
*    message i000 with 'Parâmetros informados não resultaram '
*                      'em dados novos para avaliação'.
*  endif.

ENDFORM.                    " F_CLIENTE
*&---------------------------------------------------------------------*
*&      Form  CARREGA_T_ZGL_CLI
*&---------------------------------------------------------------------*
*       Carrega tabela aux. cliente
*----------------------------------------------------------------------*
FORM CARREGA_T_ZGL_CLI .
  PERFORM: ULTIMA_AVALIACAO_CLI.  "Trata ültima avaliação
  DATA: TL_BSAD_AUGBL  TYPE TABLE OF BSAD WITH HEADER LINE.
  REFRESH: TL_BSAD_AUGBL.

  DELETE T_BSID WHERE DMBE2 EQ '0.01'
                   OR UMSKZ  EQ 'F'.
  LOOP AT T_BSID INTO WA_BSID.
    WA_ZGL012_AVM-MANDT   = SY-MANDT.
    WA_ZGL012_AVM-BUKRS   = WA_BSID-BUKRS.
    WA_ZGL012_AVM-DT_AVAL = P_BUDAT.
    WA_ZGL012_AVM-KUNNR   = WA_BSID-KUNNR.
    WA_ZGL012_AVM-BELNR   = WA_BSID-BELNR.
    WA_ZGL012_AVM-BUZEI   = WA_BSID-BUZEI.
    WA_ZGL012_AVM-BUDAT   = WA_BSID-BUDAT.
    WA_ZGL012_AVM-BSCHL   = WA_BSID-BSCHL.
    WA_ZGL012_AVM-WAERS   = WA_BSID-WAERS.
    WA_ZGL012_AVM-GSBER   = WA_BSID-GSBER.
    IF WA_BSID-SHKZG = 'S'.
      WA_ZGL012_AVM-DMBTR   = WA_BSID-DMBTR.
      WA_ZGL012_AVM-DMBE2   = WA_BSID-DMBE2.
      IF WA_ZGL012_AVM-WAERS EQ 'EUR'.
        WA_ZGL012_AVM-WRBTR   = WA_BSID-WRBTR.
      ELSE.
        WA_ZGL012_AVM-WRBTR   =  0.
      ENDIF.
    ELSE.
      WA_ZGL012_AVM-DMBTR   = WA_BSID-DMBTR * ( -1 ).
      WA_ZGL012_AVM-DMBE2   = WA_BSID-DMBE2 * ( -1 ).
      IF WA_ZGL012_AVM-WAERS EQ 'EUR'.
        WA_ZGL012_AVM-WRBTR   = WA_BSID-WRBTR * ( -1 ).
      ELSE.
        WA_ZGL012_AVM-WRBTR   =  0.
      ENDIF.
    ENDIF.
    IF WA_ZGL012_AVM-WAERS EQ 'EUR'.
      IF WA_BSID-WRBTR IS INITIAL.
        WA_ZGL012_AVM-KURSF   = 0.
      ELSE.
        WA_ZGL012_AVM-KURSF   = WA_BSID-DMBTR / WA_BSID-WRBTR.
      ENDIF.
    ELSE.
      IF WA_BSID-DMBE2 IS INITIAL.
        WA_ZGL012_AVM-KURSF   = 0.
      ELSE.
        WA_ZGL012_AVM-KURSF   = WA_BSID-DMBTR / WA_BSID-DMBE2.
      ENDIF.
    ENDIF.
    IF WA_ZGL012_AVM-WAERS = 'USD'.
      WA_ZGL012_AVM-TX_FECH  = XTX_USD.
    ELSE.
      WA_ZGL012_AVM-TX_FECH  = XTX_EUR.
    ENDIF.
    IF WA_ZGL012_AVM-WAERS EQ 'EUR'.
      WA_ZGL012_AVM-VLR_ACUM_MES_ATU  = WA_ZGL012_AVM-DMBTR - ( WA_ZGL012_AVM-WRBTR * WA_ZGL012_AVM-TX_FECH ).
      WA_ZGL012_AVM-VLR_ATUALIZADO    = WA_ZGL012_AVM-WRBTR * WA_ZGL012_AVM-TX_FECH.
    ELSE.
      WA_ZGL012_AVM-VLR_ACUM_MES_ATU  = WA_ZGL012_AVM-DMBTR - ( WA_ZGL012_AVM-DMBE2 * WA_ZGL012_AVM-TX_FECH ).
      WA_ZGL012_AVM-VLR_ATUALIZADO    = WA_ZGL012_AVM-DMBE2 * WA_ZGL012_AVM-TX_FECH.
    ENDIF.
    WA_ZGL012_AVM-HKONT   = WA_BSID-HKONT.
    WA_ZGL012_AVM-UMSKZ   = WA_BSID-UMSKZ.
*Grava valor acumulado do mês anterior.
    READ TABLE T_ZGL012_AUX INTO WA_ZGL012_AUX WITH KEY
    BUKRS   =  WA_ZGL012_AVM-BUKRS
    KUNNR   =  WA_ZGL012_AVM-KUNNR
    BELNR   =  WA_ZGL012_AVM-BELNR
    BUZEI   =  WA_ZGL012_AVM-BUZEI
    BUDAT   =  WA_ZGL012_AVM-BUDAT .
    IF SY-SUBRC = 0 .
      "ALRS 13.11.2014 Estorno dentro do mês não leva
      IF WA_ZGL012_AUX-DELE = 'X'.
        CONTINUE.
      ENDIF.
      WA_ZGL012_AVM-VLR_ACUM_MES_ANT = WA_ZGL012_AUX-VLR_ACUM_MES_ATU.
    ELSE.
      WA_ZGL012_AVM-VLR_ACUM_MES_ANT = 0.
    ENDIF.
    WA_ZGL012_AVM-VLR_VARIACAO = WA_ZGL012_AVM-VLR_ACUM_MES_ATU - WA_ZGL012_AVM-VLR_ACUM_MES_ANT.
*Grava documentos compensados
    APPEND WA_ZGL012_AVM TO T_ZGL012_AVM.
  ENDLOOP.

*verifica se sobraram documentos que nao estao na selecao do mes atual
*mas tem mesma empresa e mesmo cliente do parametro
  IF NOT T_ZGL012_AUX[] IS INITIAL.
    PERFORM DOC_COMPENSADOS_CLI.
    SORT IT_BSAD BY BUKRS KUNNR BELNR BUZEI.
    LOOP AT T_ZGL012_AUX[] INTO WA_ZGL012_AVM.
      READ TABLE IT_BSAD INTO WA_BSAD WITH KEY
      BUKRS   =  WA_ZGL012_AVM-BUKRS
      KUNNR   =  WA_ZGL012_AVM-KUNNR
      BELNR   =  WA_ZGL012_AVM-BELNR
      BUZEI   =  WA_ZGL012_AVM-BUZEI
      BINARY SEARCH.
      IF SY-SUBRC = 0.
        WA_ZGL012_AVM-MANDT   = SY-MANDT.
        WA_ZGL012_AVM-DT_AVAL = P_BUDAT.
        WA_ZGL012_AVM-AUGBL   = WA_BSAD-AUGBL.
        WA_ZGL012_AVM-AUGDT   = WA_BSAD-AUGDT.
        WA_ZGL012_AUX-VLR_VARIACAO = WA_ZGL012_AUX-VLR_ACUM_MES_ATU - WA_ZGL012_AVM-VLR_ACUM_MES_ANT.
        APPEND WA_ZGL012_AVM TO T_ZGL012_AVM.
      ENDIF.
    ENDLOOP.
  ENDIF.
  SORT IT_BSAD BY BUKRS KUNNR BELNR BUZEI.
  IF IT_BSAD[] IS NOT INITIAL.
    SELECT *
      FROM BSAD
      INTO TABLE TL_BSAD_AUGBL
       FOR ALL ENTRIES IN IT_BSAD
        WHERE BELNR EQ IT_BSAD-AUGBL
          AND BUKRS EQ P_BUKRS.

  ENDIF.
  SORT: TL_BSAD_AUGBL BY BELNR,
        T_ZGL012_AUX BY DT_AVAL DESCENDING.
  LOOP AT T_ZGL012_AVM INTO WA_ZGL012_AVM.

    READ TABLE IT_BSAD INTO WA_BSAD WITH KEY
                                    BUKRS   =  WA_ZGL012_AVM-BUKRS
                                    KUNNR   =  WA_ZGL012_AVM-KUNNR
                                    BELNR   =  WA_ZGL012_AVM-BELNR
                                    BUZEI   =  WA_ZGL012_AVM-BUZEI
                                    BINARY SEARCH.
    IF SY-SUBRC = 0.
      CLEAR: TL_BSAD_AUGBL.
      READ TABLE TL_BSAD_AUGBL
        WITH KEY BELNR = WA_BSAD-AUGBL
                 BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        MOVE: TL_BSAD_AUGBL-BUDAT TO WA_BSAD-AUGDT.
      ENDIF.

      WA_ZGL012_AVM-AUGBL   = WA_BSAD-AUGBL.
      WA_ZGL012_AVM-AUGDT   = WA_BSAD-AUGDT.
    ENDIF.
    READ TABLE T_ZGL012_AUX INTO WA_ZGL012_2
                            WITH KEY    BUKRS   =  WA_ZGL012_AVM-BUKRS
                                        KUNNR   =  WA_ZGL012_AVM-KUNNR
                                        BELNR   =  WA_ZGL012_AVM-BELNR
                                        BUZEI   =  WA_ZGL012_AVM-BUZEI.
    IF SY-SUBRC = 0.
*      wa_zgl012_avm-vlr_variacao =
*      wa_zgl012_avm-vlr_acum_mes_atu =
*      wa_zgl012_2-vlr_acum_mes_atu.

      WA_ZGL012_AVM-VLR_ACUM_MES_ANT = WA_ZGL012_2-VLR_ACUM_MES_ATU.
      WA_ZGL012_AVM-VLR_VARIACAO = WA_ZGL012_AVM-VLR_ACUM_MES_ATU - WA_ZGL012_AVM-VLR_ACUM_MES_ANT.
    ENDIF.

*** Busca valor acumulado do mes Atual
    IF WA_ZGL012_AVM-WAERS = 'USD'.
      WA_ZGL012_AVM-TX_FECH  = XTX_USD.
    ELSE.
      WA_ZGL012_AVM-TX_FECH  = XTX_EUR.
    ENDIF.
    IF WA_ZGL012_AVM-WAERS EQ 'EUR'.
      WA_ZGL012_AVM-VLR_ACUM_MES_ATU  = WA_ZGL012_AVM-DMBTR - ( WA_ZGL012_AVM-WRBTR * WA_ZGL012_AVM-TX_FECH ) .
      WA_ZGL012_AVM-VLR_ATUALIZADO    = WA_ZGL012_AVM-WRBTR * WA_ZGL012_AVM-TX_FECH.
    ELSE.
      WA_ZGL012_AVM-VLR_ACUM_MES_ATU  = WA_ZGL012_AVM-DMBTR - ( WA_ZGL012_AVM-DMBE2 * WA_ZGL012_AVM-TX_FECH ) .
      WA_ZGL012_AVM-VLR_ATUALIZADO    = WA_ZGL012_AVM-DMBE2 * WA_ZGL012_AVM-TX_FECH.
    ENDIF.

    MODIFY T_ZGL012_AVM FROM WA_ZGL012_AVM.
  ENDLOOP.
ENDFORM.                    " CARREGA_T_ZGL_CLI
*&---------------------------------------------------------------------*
*&      Form  ULTIMA_AVALIACAO_CLI
*&---------------------------------------------------------------------*
*       Última data gravada
*----------------------------------------------------------------------*
FORM ULTIMA_AVALIACAO_CLI .
*Define última data de avaliação gravada.
  DATA L_UDATA TYPE DATUM.
  DATA: TL_BKPF  TYPE TABLE OF BKPF WITH HEADER LINE,
        TL_BKPFE TYPE TABLE OF BKPF WITH HEADER LINE.

  L_UDATA = P_BUDAT.
  L_UDATA+6(2) = '01'.   "tranforma em primeiro dia do mês corrente
  L_UDATA = L_UDATA - 1. "transforma no último dia do mês anterior

  SELECT * INTO TABLE T_ZGL012_AUX FROM ZGL012_AVM
    WHERE BUKRS   EQ  P_BUKRS "T_BSID-BUKRS
      AND ESTORNO NE 'X'
      AND DT_AVAL LE  L_UDATA
      AND KUNNR   IN S_KUNNR ."EQ  T_BSID-KUNNR

  IF SY-SUBRC = 0.
    SELECT *
      FROM BKPF
      INTO TABLE TL_BKPF
       FOR ALL ENTRIES IN T_ZGL012_AUX
        WHERE BUKRS EQ T_ZGL012_AUX-BUKRS
          AND BELNR EQ T_ZGL012_AUX-BELNR
          AND STBLG NE SPACE.

    "ALRS 13.11.2014 Estorno dentro do mês não leva
    IF TL_BKPF[] IS NOT INITIAL.
      SELECT *
         FROM BKPF
         INTO TABLE TL_BKPFE
          FOR ALL ENTRIES IN TL_BKPF
           WHERE BUKRS EQ TL_BKPF-BUKRS
             AND BELNR EQ TL_BKPF-STBLG
             AND GJAHR EQ TL_BKPF-STJAH .
    ENDIF.

    LOOP AT TL_BKPF.
      READ TABLE TL_BKPFE WITH KEY BUKRS = TL_BKPF-BUKRS
                                  BELNR = TL_BKPF-STBLG
                                  GJAHR = TL_BKPF-STJAH.
      IF SY-SUBRC = 0.
        IF  TL_BKPFE-BUDAT LE P_BUDAT.
          LOOP AT T_ZGL012_AUX WHERE BELNR EQ TL_BKPF-BELNR
                               AND   BUKRS EQ TL_BKPF-BUKRS.
            T_ZGL012_AUX-DELE = 'X'.
            MODIFY T_ZGL012_AUX INDEX SY-TABIX TRANSPORTING DELE.
          ENDLOOP.
        ENDIF.
      ELSE.
        DELETE T_ZGL012_AUX WHERE BELNR EQ TL_BKPF-BELNR
                              AND BUKRS EQ TL_BKPF-BUKRS.
      ENDIF.

    ENDLOOP.

    SORT T_ZGL012_AUX BY BUKRS BELNR BUZEI DT_AVAL.
    DELETE ADJACENT DUPLICATES FROM T_ZGL012_AUX COMPARING BUKRS BELNR BUZEI DT_AVAL.
    SORT T_ZGL012_AUX BY BUKRS KUNNR BELNR BUZEI BUDAT.
  ENDIF.
  CLEAR L_UDATA.
ENDFORM.                    " ULTIMA_AVALIACAO_CLI

*&---------------------------------------------------------------------*
*&      Form  DOC_COMPENSADOS_CLI
*&---------------------------------------------------------------------*
*       Busca BSAD
*----------------------------------------------------------------------*
FORM DOC_COMPENSADOS_CLI .
  IF NOT T_ZGL012_AUX[] IS INITIAL.
    SELECT BUKRS KUNNR AUGDT AUGBL BELNR BUZEI
      FROM BSAD
      INTO TABLE IT_BSAD
      FOR ALL ENTRIES IN T_ZGL012_AUX
      WHERE
      BUKRS = T_ZGL012_AUX-BUKRS AND
      KUNNR = T_ZGL012_AUX-KUNNR AND
      BELNR = T_ZGL012_AUX-BELNR AND
      BUZEI = T_ZGL012_AUX-BUZEI
      AND DMBE2 >= WG_DMBT2.
    IF SY-SUBRC <> 0.
*      MESSAGE i398(00) WITH 'Partidas do período anterior'
*                            'sem correspondente nas partidas '
*                            'em aberto'  space.
    ELSE.
      LOOP AT IT_BSAD INTO WA_BSAD.
        IF WA_BSAD-BELNR = WA_BSAD-AUGBL.
          DELETE IT_BSAD INDEX SY-TABIX.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.
ENDFORM.                    " DOC_COMPENSADOS_CLI
*&---------------------------------------------------------------------*
*&      Form  F_CONTA
*&---------------------------------------------------------------------*
*       Partidas em Aberto Razão
*----------------------------------------------------------------------*
FORM F_CONTA .
  DATA: BEGIN OF ITL_BSIS OCCURS 0,
          BUKRS TYPE BSIS-BUKRS,
          HKONT TYPE BSIS-HKONT,
          VBUND TYPE BSIS-VBUND,
          AUGBL TYPE BSIS-AUGBL,
          GJAHR TYPE BSIS-GJAHR,
          BELNR TYPE BSIS-BELNR,
          BUZEI TYPE BSIS-BUZEI,
          BUDAT TYPE BSIS-BUDAT,
          WAERS TYPE BSIS-WAERS,
          BLART TYPE BLART,
          BSCHL TYPE BSCHL,
          SHKZG TYPE SHKZG,
          GSBER TYPE GSBER,
          DMBTR TYPE BSIS-DMBTR,
          WRBTR TYPE BSIS-WRBTR,
          DMBE2 TYPE BSIS-DMBE2,
          AUGDT LIKE BSIS-AUGDT,
        END OF ITL_BSIS.

  DATA: BEGIN OF T_BKPF000 OCCURS 0.
          INCLUDE STRUCTURE BKPF.
  DATA: END OF T_BKPF000.

  DATA: BEGIN OF T_BKPF0E OCCURS 0.
          INCLUDE STRUCTURE BKPF.
  DATA: END OF T_BKPF0E.

  DATA: BEGIN OF ITL_BKPF OCCURS 0,
          BUKRS TYPE BKPF-BUKRS,
          BELNR TYPE BKPF-BELNR,
          GJAHR TYPE BKPF-GJAHR,
          STGRD TYPE BKPF-STGRD,
          STBLG TYPE BKPF-STBLG,
          STJAH TYPE BKPF-STJAH,
        END OF ITL_BKPF.


  SELECT BUKRS SAKNR XOPVW "#EC CI_DB_OPERATION_OK[2431747]
    FROM SKB1 INTO TABLE T_SKB1
   WHERE BUKRS = P_BUKRS
     AND SAKNR IN S_HKONT
     AND XOPVW = 'X'.

  IF SY-SUBRC = 0.
    SELECT BUKRS HKONT VBUND BELNR BUZEI BUDAT WAERS BLART BSCHL SHKZG GSBER DMBTR WRBTR DMBE2 GJAHR
      INTO TABLE T_BSIS  FROM BSIS
      FOR ALL ENTRIES IN T_SKB1
        WHERE BUKRS = T_SKB1-BUKRS
          AND HKONT = T_SKB1-SAKNR
          AND BELNR IN S_BELNR
          AND BUDAT <= P_BUDAT
          AND WAERS <> WA_T005-WAERS.

    IF SY-SUBRC = 0.
      SELECT * FROM BKPF INTO TABLE T_BKPF000
        FOR ALL ENTRIES IN T_BSIS
        WHERE BUKRS = T_BSIS-BUKRS AND
              BELNR = T_BSIS-BELNR AND
              GJAHR = T_BSIS-GJAHR AND
              BSTAT = 'S'.

      IF SY-SUBRC = 0.
        "ALRS 13.11.2014 Estorno dentro do mês não leva
        SELECT *
           FROM BKPF
           INTO TABLE T_BKPF0E
            FOR ALL ENTRIES IN T_BKPF000
             WHERE BUKRS EQ T_BKPF000-BUKRS
               AND BELNR EQ T_BKPF000-STBLG
               AND GJAHR EQ T_BKPF000-STJAH.

        LOOP AT T_BKPF000.
          READ TABLE T_BKPF0E WITH KEY BUKRS = T_BKPF000-BUKRS
                                       BELNR = T_BKPF000-STBLG
                                       GJAHR = T_BKPF000-STJAH.
          IF SY-SUBRC = 0.
            IF  T_BKPF0E-BUDAT LE P_BUDAT.
              READ TABLE T_BSIS INTO WA_BSIS WITH KEY BUKRS = T_BKPF000-BUKRS
                                                      BELNR = T_BKPF000-BELNR
                                                      GJAHR = T_BKPF000-GJAHR.
              IF SY-SUBRC = 0.
                DELETE T_BSIS INDEX SY-TABIX.
              ENDIF.
            ENDIF.
          ELSE.
            READ TABLE T_BSIS INTO WA_BSIS WITH KEY BUKRS = T_BKPF000-BUKRS
                                                    BELNR = T_BKPF000-BELNR
                                                    GJAHR = T_BKPF000-GJAHR.
            IF SY-SUBRC = 0.
              DELETE T_BSIS INDEX SY-TABIX.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.

    IF T_SKB1[] IS NOT INITIAL.
      SELECT BUKRS HKONT VBUND AUGBL GJAHR BELNR BUZEI BUDAT WAERS
             BLART BSCHL SHKZG GSBER DMBTR WRBTR DMBE2 AUGDT
        FROM BSAS
        INTO TABLE ITL_BSIS
        FOR ALL ENTRIES IN T_SKB1
        WHERE BUKRS = T_SKB1-BUKRS
          AND HKONT = T_SKB1-SAKNR
          AND BELNR IN S_BELNR
          AND AUGDT => P_BUDAT
          AND WAERS <> WA_T005-WAERS.
    ENDIF.

    LOOP AT ITL_BSIS.
      IF ITL_BSIS-BUDAT(6) = ITL_BSIS-AUGDT(6).
        DELETE ITL_BSIS.
      ENDIF.
    ENDLOOP.

    IF NOT ITL_BSIS[] IS INITIAL.

      SELECT * FROM BKPF INTO TABLE T_BKPF000
        FOR ALL ENTRIES IN ITL_BSIS
        WHERE BUKRS = ITL_BSIS-BUKRS AND
              BELNR = ITL_BSIS-BELNR AND
              GJAHR = ITL_BSIS-GJAHR AND
              BSTAT = 'S'.

      IF SY-SUBRC = 0.
        "ALRS 13.11.2014 Estorno dentro do mês não leva
        SELECT *
           FROM BKPF
           INTO TABLE T_BKPF0E
            FOR ALL ENTRIES IN T_BKPF000
             WHERE BUKRS EQ T_BKPF000-BUKRS
               AND BELNR EQ T_BKPF000-STBLG
               AND GJAHR EQ T_BKPF000-STJAH.

        LOOP AT T_BKPF000.
          READ TABLE T_BKPF0E WITH KEY BUKRS = T_BKPF000-BUKRS
                                       BELNR = T_BKPF000-STBLG
                                       GJAHR = T_BKPF000-STJAH.
          IF SY-SUBRC = 0.
            IF  T_BKPF0E-BUDAT LE P_BUDAT.
              READ TABLE ITL_BSIS WITH KEY BUKRS = T_BKPF000-BUKRS
                                           BELNR = T_BKPF000-BELNR
                                           GJAHR = T_BKPF000-GJAHR.
              IF SY-SUBRC = 0.
                DELETE ITL_BSIS INDEX SY-TABIX.
              ENDIF.
            ENDIF.
          ELSE.
            READ TABLE ITL_BSIS WITH KEY BUKRS = T_BKPF000-BUKRS
                                         BELNR = T_BKPF000-BELNR
                                         GJAHR = T_BKPF000-GJAHR.
            IF SY-SUBRC = 0.
              DELETE ITL_BSIS INDEX SY-TABIX.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.



    ENDIF.
    IF NOT ITL_BSIS[] IS INITIAL.
      SELECT BUKRS BELNR GJAHR STGRD STBLG STJAH
        FROM BKPF INTO TABLE ITL_BKPF
      FOR ALL ENTRIES IN ITL_BSIS
      WHERE BUKRS = ITL_BSIS-BUKRS
      AND   BELNR = ITL_BSIS-BELNR
      AND   GJAHR = ITL_BSIS-GJAHR.

      IF SY-SUBRC = 0.
        "ALRS 13.11.2014 Estorno dentro do mês não leva
        SELECT *
           FROM BKPF
           INTO TABLE T_BKPF0E
            FOR ALL ENTRIES IN ITL_BKPF
             WHERE BUKRS EQ ITL_BKPF-BUKRS
               AND BELNR EQ ITL_BKPF-STBLG
               AND GJAHR EQ ITL_BKPF-STJAH.

        LOOP AT ITL_BKPF.
          READ TABLE T_BKPF0E WITH KEY BUKRS = ITL_BKPF-BUKRS
                                    BELNR = ITL_BKPF-STBLG
                                    GJAHR = ITL_BKPF-STJAH.
          IF SY-SUBRC = 0.
            IF  T_BKPF0E-BUDAT LE P_BUDAT.
              DELETE ITL_BSIS WHERE BUKRS = ITL_BKPF-BUKRS AND
                                    BELNR = ITL_BKPF-BELNR AND
                                    GJAHR = ITL_BKPF-GJAHR.

            ENDIF.
          ELSE.
            DELETE ITL_BSIS WHERE BUKRS = ITL_BKPF-BUKRS AND
                                  BELNR = ITL_BKPF-BELNR AND
                                  GJAHR = ITL_BKPF-GJAHR.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.
    DELETE T_BSIS WHERE BLART = 'VC'.
    LOOP AT ITL_BSIS.
      IF ITL_BSIS-BELNR = ITL_BSIS-AUGBL.
        DELETE ITL_BSIS INDEX SY-TABIX.
      ELSE.
        MOVE-CORRESPONDING ITL_BSIS TO WA_BSIS.
        APPEND WA_BSIS TO T_BSIS.
      ENDIF.
    ENDLOOP.
    DELETE T_BSIS WHERE BLART = 'VC'.
*    if not t_bsis[] is initial.
    PERFORM: CARREGA_T_ZGL_RAZ.     "Carrega tabela do ALV
*    else.
*      message i000 with 'Parâmetros informados não resultaram '
*                        'em dados novos para avaliação'.
*
*    endif.
  ENDIF.
ENDFORM.                    " F_CONTA
*&---------------------------------------------------------------------*
*&      Form  CARREGA_T_ZGL_RAZ
*&---------------------------------------------------------------------*
*       Carrega tabela aux. Razão
*----------------------------------------------------------------------*
FORM CARREGA_T_ZGL_RAZ .
  DATA: TL_BSAS_AUGBL  TYPE TABLE OF BSAS WITH HEADER LINE.
  REFRESH: TL_BSAS_AUGBL.
  PERFORM: ULTIMA_AVALIACAO_RAZ,  "Trata ültima avaliação
           DOC_COMPENSADOS_RAZ.   "Trata documentos compensados

  DELETE T_BSIS WHERE DMBE2 EQ '0.01'.

  LOOP AT T_BSIS INTO WA_BSIS.
    WA_ZGL012_AVM-MANDT   = SY-MANDT.
    WA_ZGL012_AVM-BUKRS   = WA_BSIS-BUKRS.
    WA_ZGL012_AVM-DT_AVAL = P_BUDAT.
    WA_ZGL012_AVM-HKONT   = WA_BSIS-HKONT.
    WA_ZGL012_AVM-VBUND   = WA_BSIS-VBUND.
    WA_ZGL012_AVM-BELNR   = WA_BSIS-BELNR.
    WA_ZGL012_AVM-BUZEI   = WA_BSIS-BUZEI.
    WA_ZGL012_AVM-BUDAT   = WA_BSIS-BUDAT.
    WA_ZGL012_AVM-BSCHL   = WA_BSIS-BSCHL.
    WA_ZGL012_AVM-WAERS   = WA_BSIS-WAERS.
    WA_ZGL012_AVM-GSBER   = WA_BSIS-GSBER.
    IF WA_BSIS-SHKZG = 'S'.
      WA_ZGL012_AVM-DMBTR   = WA_BSIS-DMBTR.
      WA_ZGL012_AVM-DMBE2   = WA_BSIS-DMBE2.
      IF WA_ZGL012_AVM-WAERS  EQ 'EUR'.
        WA_ZGL012_AVM-WRBTR   = WA_BSIS-WRBTR.
      ELSE.
        WA_ZGL012_AVM-WRBTR   =  0.
      ENDIF.
    ELSE.
      WA_ZGL012_AVM-DMBTR   = WA_BSIS-DMBTR * ( -1 ).
      WA_ZGL012_AVM-DMBE2   = WA_BSIS-DMBE2 * ( -1 ).
      IF WA_ZGL012_AVM-WAERS  EQ 'EUR'.
        WA_ZGL012_AVM-WRBTR   = WA_BSIS-WRBTR * ( -1 ).
      ELSE.
        WA_ZGL012_AVM-WRBTR   =  0.
      ENDIF.
    ENDIF.
    IF WA_ZGL012_AVM-WAERS  EQ 'EUR'.
      IF WA_BSIS-WRBTR = 0.
        WA_ZGL012_AVM-KURSF = 0.
      ELSE.
        WA_ZGL012_AVM-KURSF   = WA_BSIS-DMBTR / WA_BSIS-WRBTR.
      ENDIF.
    ELSE.
      IF WA_BSIS-DMBE2 = 0.
        WA_ZGL012_AVM-KURSF = 0.
      ELSE.
        WA_ZGL012_AVM-KURSF   = WA_BSIS-DMBTR / WA_BSIS-DMBE2.
      ENDIF.
    ENDIF.
    IF WA_ZGL012_AVM-WAERS = 'USD'.
      WA_ZGL012_AVM-TX_FECH  = XTX_USD.
    ELSE.
      WA_ZGL012_AVM-TX_FECH  = XTX_EUR.
    ENDIF.
    IF WA_ZGL012_AVM-WAERS EQ 'EUR'.
      WA_ZGL012_AVM-VLR_ACUM_MES_ATU  = WA_ZGL012_AVM-DMBTR - ( WA_ZGL012_AVM-WRBTR * WA_ZGL012_AVM-TX_FECH ).
      WA_ZGL012_AVM-VLR_ATUALIZADO    = WA_ZGL012_AVM-WRBTR * WA_ZGL012_AVM-TX_FECH.
    ELSE.
      WA_ZGL012_AVM-VLR_ACUM_MES_ATU  = WA_ZGL012_AVM-DMBTR - ( WA_ZGL012_AVM-DMBE2 * WA_ZGL012_AVM-TX_FECH ).
      WA_ZGL012_AVM-VLR_ATUALIZADO    = WA_ZGL012_AVM-DMBE2 * WA_ZGL012_AVM-TX_FECH.
    ENDIF.
*    WA_ZGL012_AVM-HKONT   = WA_BSID-HKONT.
*    WA_ZGL012_AVM-UMSKZ   = WA_BSID-UMSKZ.
*Grava valor acumulado do mês anterior.
    READ TABLE T_ZGL012_AUX INTO WA_ZGL012_AUX WITH KEY
    BUKRS   =  WA_ZGL012_AVM-BUKRS
    KUNNR   =  WA_ZGL012_AVM-KUNNR
    BELNR   =  WA_ZGL012_AVM-BELNR
    BUZEI   =  WA_ZGL012_AVM-BUZEI
    BUDAT   =  WA_ZGL012_AVM-BUDAT .
    IF SY-SUBRC = 0 .
      "ALRS 13.11.2014 Estorno dentro do mês não leva
      IF WA_ZGL012_AUX-DELE = 'X'.
        CONTINUE.
      ENDIF.
      WA_ZGL012_AVM-VLR_ACUM_MES_ANT = WA_ZGL012_AUX-VLR_ACUM_MES_ATU.
    ELSE.
      WA_ZGL012_AVM-VLR_ACUM_MES_ANT = 0.
    ENDIF.
    WA_ZGL012_AVM-VLR_VARIACAO = WA_ZGL012_AVM-VLR_ACUM_MES_ATU - WA_ZGL012_AVM-VLR_ACUM_MES_ANT.
*Grava documentos compensados


    IF NOT WA_ZGL012_AVM-BUDAT+4(4) = WA_ZGL012_AVM-AUGDT+4(4).
      APPEND WA_ZGL012_AVM TO T_ZGL012_AVM.
    ELSE.
      CLEAR WA_ZGL012_AVM.
    ENDIF.
  ENDLOOP.

  IF NOT T_ZGL012_AUX[] IS INITIAL.
    PERFORM DOC_COMPENSADOS_RAZ.
    SORT IT_BSAS BY BUKRS HKONT BELNR BUZEI.
    LOOP AT T_ZGL012_AUX[] INTO WA_ZGL012_AVM.
      READ TABLE IT_BSAS INTO WA_BSAS WITH KEY
      BUKRS   =  WA_ZGL012_AVM-BUKRS
      HKONT   =  WA_ZGL012_AVM-HKONT
      VBUND   =  WA_ZGL012_AVM-VBUND
      BELNR   =  WA_ZGL012_AVM-BELNR
      BUZEI   =  WA_ZGL012_AVM-BUZEI
      BINARY SEARCH.
      IF SY-SUBRC = 0.
        WA_ZGL012_AVM-MANDT   = SY-MANDT.
        WA_ZGL012_AVM-DT_AVAL = P_BUDAT.
        WA_ZGL012_AVM-DELE = 'X'.                           "edu26
        WA_ZGL012_AVM-AUGBL   = WA_BSAS-AUGBL.
        WA_ZGL012_AVM-AUGDT   = WA_BSAS-AUGDT.
        WA_ZGL012_AVM-VLR_VARIACAO = WA_ZGL012_AVM-VLR_ACUM_MES_ATU - WA_ZGL012_AVM-VLR_ACUM_MES_ANT.
*        if not wa_zgl012_avm-budat+4(4) = wa_zgl012_avm-augdt+4(4).
        APPEND WA_ZGL012_AVM TO T_ZGL012_AVM.
*        else.
*          clear wa_zgl012_avm.
*        endif.

      ENDIF.
    ENDLOOP.
  ENDIF.

  IF IT_BSAS[] IS NOT INITIAL.
    SELECT *
      FROM BSAS
      INTO TABLE TL_BSAS_AUGBL
       FOR ALL ENTRIES IN IT_BSAS
        WHERE BELNR EQ IT_BSAS-AUGBL
          AND BUKRS EQ P_BUKRS..

  ENDIF.
  SORT: TL_BSAS_AUGBL BY BELNR.
  SORT: IT_BSAS BY BUKRS HKONT BELNR BUZEI,
        T_ZGL012_AUX BY DT_AVAL DESCENDING.
  LOOP AT T_ZGL012_AVM INTO WA_ZGL012_AVM.

    READ TABLE IT_BSAS INTO WA_BSAS WITH KEY
                                    BUKRS   =  WA_ZGL012_AVM-BUKRS
                                    HKONT   =  WA_ZGL012_AVM-HKONT
                                    BELNR   =  WA_ZGL012_AVM-BELNR
                                    BUZEI   =  WA_ZGL012_AVM-BUZEI
                                    BINARY SEARCH.
    IF SY-SUBRC = 0.
      CLEAR: TL_BSAS_AUGBL.
      READ TABLE TL_BSAS_AUGBL
        WITH KEY BELNR = WA_BSAS-AUGBL
                 BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        MOVE: TL_BSAS_AUGBL-BUDAT TO WA_BSAS-AUGDT.
      ENDIF.
      WA_ZGL012_AVM-AUGBL   = WA_BSAS-AUGBL.
      WA_ZGL012_AVM-AUGDT   = WA_BSAS-AUGDT.
    ENDIF.
    READ TABLE T_ZGL012_AUX INTO WA_ZGL012_2
                            WITH KEY    BUKRS   =  WA_ZGL012_AVM-BUKRS
                                        HKONT   =  WA_ZGL012_AVM-HKONT
                                        BELNR   =  WA_ZGL012_AVM-BELNR
                                        BUZEI   =  WA_ZGL012_AVM-BUZEI.
    IF SY-SUBRC = 0.
*      wa_zgl012_avm-vlr_variacao =
*      wa_zgl012_avm-vlr_acum_mes_atu =
*      wa_zgl012_2-vlr_acum_mes_atu.

      WA_ZGL012_AVM-VLR_ACUM_MES_ANT = WA_ZGL012_2-VLR_ACUM_MES_ATU.
      WA_ZGL012_AVM-VLR_VARIACAO = WA_ZGL012_AVM-VLR_ACUM_MES_ATU - WA_ZGL012_AVM-VLR_ACUM_MES_ANT.
    ENDIF.

*** Busca valor acumulado do mes Atual
    IF WA_ZGL012_AVM-WAERS = 'USD'.
      WA_ZGL012_AVM-TX_FECH  = XTX_USD.
    ELSE.
      WA_ZGL012_AVM-TX_FECH  = XTX_EUR.
    ENDIF.
    IF WA_ZGL012_AVM-WAERS EQ 'EUR'.
      WA_ZGL012_AVM-VLR_ACUM_MES_ATU  = WA_ZGL012_AVM-DMBTR - ( WA_ZGL012_AVM-WRBTR * WA_ZGL012_AVM-TX_FECH ) .
      WA_ZGL012_AVM-VLR_ATUALIZADO    = WA_ZGL012_AVM-WRBTR * WA_ZGL012_AVM-TX_FECH.
    ELSE.
      WA_ZGL012_AVM-VLR_ACUM_MES_ATU  = WA_ZGL012_AVM-DMBTR - ( WA_ZGL012_AVM-DMBE2 * WA_ZGL012_AVM-TX_FECH ) .
      WA_ZGL012_AVM-VLR_ATUALIZADO    = WA_ZGL012_AVM-DMBE2 * WA_ZGL012_AVM-TX_FECH.
    ENDIF.

    MODIFY T_ZGL012_AVM FROM WA_ZGL012_AVM.
  ENDLOOP.



ENDFORM.                    " CARREGA_T_ZGL_RAZ
*&---------------------------------------------------------------------*
*&      Form  ULTIMA_AVALIACAO_RAZ
*&---------------------------------------------------------------------*
*       Última data gravada
*----------------------------------------------------------------------*
FORM ULTIMA_AVALIACAO_RAZ .
*Define última data de avaliação gravada.
  DATA L_UDATA TYPE DATUM.
  DATA: TL_BKPF  TYPE TABLE OF BKPF WITH HEADER LINE,
        TL_BKPFE TYPE TABLE OF BKPF WITH HEADER LINE.
  L_UDATA = P_BUDAT.
  L_UDATA+6(2) = '01'.   "tranforma em primeiro dia do mês corrente
  L_UDATA = L_UDATA - 1. "transforma no último dia do mês anterior

  SELECT * INTO TABLE T_ZGL012_AUX FROM ZGL012_AVM
*    FOR ALL ENTRIES IN T_BSIS
    WHERE BUKRS   EQ  P_BUKRS
      AND DT_AVAL LE  L_UDATA
      AND ESTORNO NE 'X'
      AND HKONT   IN S_HKONT .

  IF SY-SUBRC = 0.
    SELECT *
    FROM BKPF
    INTO TABLE TL_BKPF
     FOR ALL ENTRIES IN T_ZGL012_AUX
      WHERE BUKRS EQ T_ZGL012_AUX-BUKRS
        AND BELNR EQ T_ZGL012_AUX-BELNR
        AND STBLG NE SPACE.

    "ALRS 13.11.2014 Estorno dentro do mês não leva
    IF TL_BKPF[] IS NOT INITIAL.
      SELECT *
         FROM BKPF
         INTO TABLE TL_BKPFE
          FOR ALL ENTRIES IN TL_BKPF
           WHERE BUKRS EQ TL_BKPF-BUKRS
             AND BELNR EQ TL_BKPF-STBLG
             AND GJAHR EQ TL_BKPF-STJAH .
    ENDIF.

    LOOP AT TL_BKPF.
      READ TABLE TL_BKPFE WITH KEY BUKRS = TL_BKPF-BUKRS
                                   BELNR = TL_BKPF-STBLG
                                   GJAHR = TL_BKPF-STJAH.
      IF SY-SUBRC = 0.
        IF  TL_BKPFE-BUDAT LE P_BUDAT.
          LOOP AT T_ZGL012_AUX WHERE BELNR EQ TL_BKPF-BELNR
                               AND   BUKRS EQ TL_BKPF-BUKRS.
            T_ZGL012_AUX-DELE = 'X'.
            MODIFY T_ZGL012_AUX INDEX SY-TABIX TRANSPORTING DELE.
          ENDLOOP.
        ENDIF.
      ELSE.
        DELETE T_ZGL012_AUX WHERE BELNR EQ TL_BKPF-BELNR
                              AND BUKRS EQ TL_BKPF-BUKRS.
      ENDIF.

    ENDLOOP.
    SORT T_ZGL012_AUX BY BUKRS BELNR BUZEI DT_AVAL.
    DELETE ADJACENT DUPLICATES FROM T_ZGL012_AUX COMPARING BUKRS BELNR BUZEI DT_AVAL.

    SORT T_ZGL012_AUX BY BUKRS HKONT BELNR BUZEI BUDAT.
  ENDIF.
  CLEAR L_UDATA.
ENDFORM.                    " ULTIMA_AVALIACAO_RAZ

*&---------------------------------------------------------------------*
*&      Form  DOC_COMPENSADOS_RAZ
*&---------------------------------------------------------------------*
*       Busca BSAS
*----------------------------------------------------------------------*
FORM DOC_COMPENSADOS_RAZ .
  IF NOT T_ZGL012_AUX[] IS INITIAL.
    SELECT BUKRS HKONT VBUND AUGDT AUGBL BELNR BUZEI
      FROM BSAS
      INTO TABLE IT_BSAS
      FOR ALL ENTRIES IN T_ZGL012_AUX
      WHERE
      BUKRS = T_ZGL012_AUX-BUKRS AND
      HKONT = T_ZGL012_AUX-HKONT AND
      BELNR = T_ZGL012_AUX-BELNR AND
      BUZEI = T_ZGL012_AUX-BUZEI.
    IF SY-SUBRC <> 0.
*      MESSAGE i398(00) WITH 'Partidas do período anterior'
*                            'sem correspondente nas partidas '
*                            'em aberto'  space.
    ELSE.
      LOOP AT IT_BSAS INTO WA_BSAS.
        IF WA_BSAS-BELNR = WA_BSAS-AUGBL.
          DELETE IT_BSAS INDEX SY-TABIX.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.
ENDFORM.                    " DOC_COMPENSADOS_RAZ
**&---------------------------------------------------------------------*
**&      Module  USER_COMMAND_0100  INPUT
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
*MODULE USER_COMMAND_0100 INPUT.
* save_ok = ok_code.
*  CLEAR ok_code.
*  IF save_ok = 'OK'.
*    MESSAGE i888(sabapdocu) WITH 'MYTABSTRIP-ACTIVETAB ='
*                                  mytabstrip-activetab.
*  ELSE.
*    mytabstrip-activetab = save_ok.
*    CASE save_ok.
*      WHEN 'PUSH1'.
*        number = '0110'.
*      WHEN 'PUSH2'.
*        number = '0120'.
*      WHEN 'PUSH3'.
*        number = '0130'.
*    ENDCASE.
*  ENDIF.
*
*ENDMODULE.                 " USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*&      Form  F_ALV
*&---------------------------------------------------------------------*
*      Apresentação do Relatório
*----------------------------------------------------------------------*
FORM F_ALV .
  IF P_HKONT2 = 'X'.
    PERFORM:
             F_ALV_FIELDCAT2.

    CALL SCREEN 9002.
  ELSE.
    PERFORM:
             F_ALV_FIELDCAT,
             F_ALV_TRANSF,
             F_ALV_IMPRIME.
  ENDIF.
ENDFORM.                    " F_ALV
*&---------------------------------------------------------------------*
*&      Form  F_ALV_HEADER
*&---------------------------------------------------------------------*
*       Cabeçalho
*----------------------------------------------------------------------*
FORM ZF_ALV_HEADER  USING P_TIPO.
  DATA: WL_DATA(10),
        WL_HORA(8),
        WL_LINHA(60),
        WL_TEXT TYPE SDYDO_TEXT_ELEMENT,
        WL_DOLAR(15),
        WL_EURO(15),
        WL_BUTXT TYPE BUTXT.
  IF P_TIPO = '1'.
    CALL METHOD OBJ_DYNDOC_ID->ADD_TEXT
      EXPORTING
        TEXT         = TEXT-010
        SAP_STYLE    = CL_DD_AREA=>HEADING
        SAP_FONTSIZE = CL_DD_AREA=>EXTRA_LARGE
        SAP_COLOR    = CL_DD_AREA=>LIST_HEADING_INT.

    SELECT SINGLE BUTXT FROM T001
      INTO WL_BUTXT
      WHERE BUKRS = P_BUKRS.
    IF SY-SUBRC = 0.
      MOVE WL_BUTXT TO WL_LINHA.
    ELSE.
      MOVE 'N/a' TO WL_LINHA.
    ENDIF.
    CONCATENATE  TEXT-009 P_BUKRS
                  '- ' WL_LINHA
            INTO WL_LINHA SEPARATED BY SPACE.
    WL_TEXT = WL_LINHA.
    CALL METHOD OBJ_DYNDOC_ID->NEW_LINE.

    CALL METHOD OBJ_DYNDOC_ID->ADD_TEXT
      EXPORTING
        TEXT         = WL_TEXT "WL_LINHA
*      SAP_STYLE    = CL_DD_AREA=>HEADING
        SAP_FONTSIZE = CL_DD_AREA=>LIST_NORMAL.
*      SAP_COLOR    = CL_DD_AREA=>LIST_HEADING_INT.


    WRITE SY-UZEIT TO WL_HORA.
    WRITE SY-DATUM TO WL_DATA.
    CONCATENATE  TEXT-011 WL_DATA
                 TEXT-012 WL_HORA

            INTO WL_LINHA SEPARATED BY SPACE.
    WL_TEXT = WL_LINHA.
    CALL METHOD OBJ_DYNDOC_ID->NEW_LINE.

    CALL METHOD OBJ_DYNDOC_ID->ADD_TEXT
      EXPORTING
        TEXT         = WL_TEXT "WL_LINHA
*      SAP_STYLE    = CL_DD_AREA=>HEADING
        SAP_FONTSIZE = CL_DD_AREA=>LIST_NORMAL.
*      SAP_COLOR    = CL_DD_AREA=>LIST_HEADING_INT.


*  CLEAR L_LINHA.
    WRITE P_BUDAT TO WL_DATA.
    CONCATENATE TEXT-013 WL_DATA INTO WL_LINHA.
    WL_TEXT = WL_LINHA.

    CALL METHOD OBJ_DYNDOC_ID->NEW_LINE.

    CALL METHOD OBJ_DYNDOC_ID->ADD_TEXT
      EXPORTING
        TEXT         = WL_TEXT
*      SAP_STYLE    = CL_DD_AREA=>HEADING
        SAP_FONTSIZE = CL_DD_AREA=>LIST_NORMAL.
*      SAP_COLOR    = CL_DD_AREA=>LIST_HEADING_INT.

*  DATA L_DOLAR(15) TYPE C.
    WRITE XTX_USD  TO WL_DOLAR.
    WRITE XTX_EUR  TO WL_EURO.
    CONDENSE WL_DOLAR NO-GAPS.
    CONDENSE WL_EURO  NO-GAPS.

    CONCATENATE  TEXT-014  WL_DOLAR
                 TEXT-015  WL_EURO
    INTO  WL_LINHA SEPARATED BY SPACE.
    WL_TEXT = WL_LINHA.

    CALL METHOD OBJ_DYNDOC_ID->NEW_LINE.

    CALL METHOD OBJ_DYNDOC_ID->ADD_TEXT
      EXPORTING
        TEXT         = WL_TEXT
*      SAP_STYLE    = CL_DD_AREA=>HEADING
        SAP_FONTSIZE = CL_DD_AREA=>LIST_NORMAL.
*      SAP_COLOR    = CL_DD_AREA=>LIST_HEADING_INT.


*    IF P_E_LANC = 'X'.
*      CONCATENATE  'Processo Estorno:'  'SIM' INTO  WL_LINHA.
*    ELSE.
*      CONCATENATE  'Processo Estorno:'  'NÃO' INTO  WL_LINHA.
*    ENDIF.
*    WL_TEXT = WL_LINHA.
*    CALL METHOD OBJ_DYNDOC_ID->NEW_LINE.
*    CALL METHOD OBJ_DYNDOC_ID->ADD_TEXT
*      EXPORTING
*        TEXT         = WL_TEXT
**      SAP_STYLE    = CL_DD_AREA=>HEADING
*        SAP_FONTSIZE = CL_DD_AREA=>LIST_NORMAL.
**      SAP_COLOR    = CL_DD_AREA=>LIST_HEADING_INT.
  ELSE.

    CALL METHOD OBJ_DYNDOC_ID->MERGE_DOCUMENT.

    CALL METHOD OBJ_DYNDOC_ID->DISPLAY_DOCUMENT
      EXPORTING
        REUSE_CONTROL      = 'X'
        PARENT             = EDITCONTAINER
      EXCEPTIONS
        HTML_DISPLAY_ERROR = 1.


  ENDIF.

ENDFORM.                    " F_ALV_HEADER
*&---------------------------------------------------------------------*
*&      Form  F_ALV_FIELDCAT
*&---------------------------------------------------------------------*
*       Características dos Campos
*----------------------------------------------------------------------*
FORM F_ALV_FIELDCAT .
  DATA I TYPE I.
  WA_AFIELD-TABNAME     = 'O_ALV'.
  WA_AFIELD-COLDDICTXT = 'M'.
  WA_AFIELD-SELDDICTXT = 'M'.
  WA_AFIELD-TIPDDICTXT = 'M'.
  WA_AFIELD-COL_OPT = 'X'.
*SELEÇÃO
*  I = I + 1.
*  CLEAR WA_AFIELD.
*  WA_AFIELD-COL_POS       = I.
*  WA_AFIELD-FIELDNAME     = 'SELECAO'.
*  WA_AFIELD-SCRTEXT_S = 'Seleção'.
*  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
*  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
*  WA_AFIELD-EDIT          = 'X'.
*  WA_AFIELD-KEY           = ''.
*  WA_AFIELD-CHECKBOX      = 'X'.
*  APPEND WA_AFIELD TO IT_FIELDCAT.
*  CLEAR WA_AFIELD-CHECKBOX.

  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'TIPO'.
*  WA_AFIELD-ICON          = 'X'.
  WA_AFIELD-SCRTEXT_S = 'Tipo'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-EDIT          = ''.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*STATUS
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'STATUS'.
  WA_AFIELD-ICON          = 'X'.
  WA_AFIELD-HOTSPOT  = 'X'.
  WA_AFIELD-SCRTEXT_S = 'STATUS'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-EDIT          = ''.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.
  CLEAR WA_AFIELD-ICON.

*Código
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'CODIGO'.
  WA_AFIELD-SCRTEXT_S = 'Código'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-REF_FIELD = 'KUNNR'.
  WA_AFIELD-REF_TABLE = 'BSID'.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.
  CLEAR:   WA_AFIELD-REF_FIELD ,  WA_AFIELD-REF_TABLE.

*Descrição
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'DESCRICAO'.
  WA_AFIELD-SCRTEXT_S = 'Descrição'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*Descrição
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'VBUND'.
  WA_AFIELD-SCRTEXT_S = 'Soc.Parc.'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*NR DOC
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'BELNR'.
  WA_AFIELD-SCRTEXT_S = 'Nr. Doc.'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-HOTSPOT  = 'X'.
*  WA_AFIELD-REF_FIELDNAME = 'BELNR'.
*  WA_AFIELD-REF_TABNAME   = 'BSIS'.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.
  CLEAR WA_AFIELD-HOTSPOT.
*  CLEAR: WA_AFIELD-REF_FIELDNAME, WA_AFIELD-REF_TABNAME.

*Chave de lançamento
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'BSCHL'.
  WA_AFIELD-SCRTEXT_S = 'Ch.Lc.'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*CONTA
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'HKONT'.
  WA_AFIELD-SCRTEXT_S = 'Conta'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-REF_FIELD = 'HKONT'.
  WA_AFIELD-REF_TABLE = 'BSIS'.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.
  CLEAR: WA_AFIELD-REF_FIELD, WA_AFIELD-REF_TABLE.
*NRO. DOC.
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'UMSKZ'.
  WA_AFIELD-SCRTEXT_S = 'RzE'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*DT lANCAMENTO
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'BUDAT'.
  WA_AFIELD-SCRTEXT_S = 'Dt. Lcto.'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*Moeda
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'WAERS'.
  WA_AFIELD-SCRTEXT_S = 'Moeda'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ' '.
  WA_AFIELD-DO_SUM        = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*Valor real
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'DMBTR'.
  IF P_BUKRS = '0100'.
    WA_AFIELD-SCRTEXT_S = 'Valor ARS'.
  ELSEIF P_BUKRS = '0200'.
    WA_AFIELD-SCRTEXT_S = 'Valor CHF'.
  ELSEIF P_BUKRS = '0201'.
    WA_AFIELD-SCRTEXT_S = 'Valor EUR'.
  ELSE.
    WA_AFIELD-SCRTEXT_S = 'Valor R$'.
  ENDIF.

  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ' '.
  WA_AFIELD-DO_SUM        = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*VAlor dolar
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'DMBE2'.
  WA_AFIELD-SCRTEXT_S = 'Valor US$'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ' '.
  WA_AFIELD-DO_SUM        = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*VAlor euro
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'WRBTR'.
  WA_AFIELD-SCRTEXT_S = 'Valor EU$'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ' '.
  WA_AFIELD-DO_SUM        = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*TX. CÂMBIO
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'KURSF'.
  WA_AFIELD-SCRTEXT_S = 'Tx. Câmbio'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ' '.
  WA_AFIELD-DO_SUM        = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*VALOR ATUALIZADO.
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'VLR_ATUALIZADO'.
  WA_AFIELD-SCRTEXT_M = 'Vlr.Atualizado'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-SCRTEXT_S = WA_AFIELD-SCRTEXT_M.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ' '.
  APPEND WA_AFIELD TO IT_FIELDCAT.


*ACUM. MÊS ANT.
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'VLR_ACUM_MES_ANT'.
  WA_AFIELD-SCRTEXT_M = 'Vlr. Acum. Mês Ant'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-SCRTEXT_S = WA_AFIELD-SCRTEXT_M.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ' '.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*ACUM. MÊS ATUAL
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'VLR_ACUM_MES_ATU'.
  WA_AFIELD-SCRTEXT_M = 'Vlr. Acum. Mês Atual'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-SCRTEXT_S = WA_AFIELD-SCRTEXT_M.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ' '.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*VLR. VARIAÇÃO
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'VLR_VARIACAO'.
  WA_AFIELD-SCRTEXT_M = 'Vlr. Variação'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-SCRTEXT_S = WA_AFIELD-SCRTEXT_M.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ' '.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*RESULTADO
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'RESULTADO_C'.
  WA_AFIELD-SCRTEXT_M = 'Resultado'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-SCRTEXT_S = WA_AFIELD-SCRTEXT_M.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ' '.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*DT.LCTO.VAR.
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'DT_LCTO'.
  WA_AFIELD-SCRTEXT_M = 'Dt.Lc.Var.'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-SCRTEXT_S = WA_AFIELD-SCRTEXT_M.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ' '.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*DOC.VAR.
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'DOC_LCTO'.
  WA_AFIELD-SCRTEXT_M = 'Doc.Var.'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-SCRTEXT_S = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-REF_FIELD = 'BELNR'.
  WA_AFIELD-REF_TABLE   = 'BSEG'.
  WA_AFIELD-KEY           = ' '.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*FLAG ESTORNO
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'ESTORNO'.
  WA_AFIELD-SCRTEXT_M = 'Estorno'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-SCRTEXT_S = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-KEY           = ' '.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*USUÁRIO
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'USNAM'.
  WA_AFIELD-SCRTEXT_M = 'Usuário'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-SCRTEXT_S = WA_AFIELD-SCRTEXT_M.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ' '.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*DATA
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'CPUDT'.
  WA_AFIELD-SCRTEXT_M = 'Data'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-SCRTEXT_S = WA_AFIELD-SCRTEXT_M.
*  WA_AFIELD-REF_FIELDNAME = ''.
*  WA_AFIELD-REF_TABNAME   = ''.
  WA_AFIELD-KEY           = ' '.
  APPEND WA_AFIELD TO IT_FIELDCAT.

*HORA
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'CPUTM'.
  WA_AFIELD-SCRTEXT_M = 'Hora'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-SCRTEXT_S = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-KEY           = ' '.
  APPEND WA_AFIELD TO IT_FIELDCAT.

  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'AUGDT'.
  WA_AFIELD-SCRTEXT_M = 'Dt.Comp.'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-SCRTEXT_S = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-KEY           = ' '.
  APPEND WA_AFIELD TO IT_FIELDCAT.

  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'AUGBL'.
  WA_AFIELD-SCRTEXT_M = 'Doc.Comp.'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-SCRTEXT_S = WA_AFIELD-SCRTEXT_M.
  WA_AFIELD-KEY           = ' '.
  APPEND WA_AFIELD TO IT_FIELDCAT.


ENDFORM.                    " F_ALV_FIELDCAT

*&---------------------------------------------------------------------*
*&      Form  F_ALV_FIELDCAT2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM F_ALV_FIELDCAT2 .
  DATA I TYPE I.
  WA_AFIELD-TABNAME     = 'O_ALV2'.
  WA_AFIELD-COLDDICTXT = 'M'.
  WA_AFIELD-SELDDICTXT = 'M'.
  WA_AFIELD-TIPDDICTXT = 'M'.
  WA_AFIELD-COL_OPT = 'X'.

*STATUS
  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'LOG'.
  WA_AFIELD-ICON          = 'X'.
  WA_AFIELD-HOTSPOT  = 'X'.
  WA_AFIELD-SCRTEXT_S = 'St.'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-EDIT          = ''.
  WA_AFIELD-KEY           = ''.
  WA_AFIELD-OUTPUTLEN = 08.
  APPEND WA_AFIELD TO IT_FIELDCAT.
  CLEAR WA_AFIELD-ICON.

  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'RACCT'.
  WA_AFIELD-SCRTEXT_S = 'Conta'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-EDIT          = ''.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.

  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'RASSC'.
  WA_AFIELD-SCRTEXT_S = 'Soc.Parc.'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-EDIT          = ''.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.
  CLEAR WA_AFIELD-ICON.

  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'TXT50'.
  WA_AFIELD-SCRTEXT_S = 'Descrição'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-OUTPUTLEN = 25.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.
  CLEAR:   WA_AFIELD-REF_FIELD ,  WA_AFIELD-REF_TABLE.

  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'KTOKS'.
  WA_AFIELD-SCRTEXT_S = 'Gpo.Ctas'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.

  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'CURR1'.
  WA_AFIELD-SCRTEXT_S = 'Saldo BRL'.
  WA_AFIELD-SCRTEXT_L = 'Saldo BRL'.
  WA_AFIELD-SCRTEXT_M = 'Saldo BRL'.
  WA_AFIELD-OUTPUTLEN = 15.
  WA_AFIELD-KEY           = ''.
  APPEND WA_AFIELD TO IT_FIELDCAT.

  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'CURR2'.
  WA_AFIELD-SCRTEXT_S = 'Saldo USD'.
  WA_AFIELD-SCRTEXT_L = 'Saldo USD'.
  WA_AFIELD-SCRTEXT_M = 'Saldo USD'.
  WA_AFIELD-KEY           = ''.
  WA_AFIELD-OUTPUTLEN = 15.
  APPEND WA_AFIELD TO IT_FIELDCAT.

  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'TX_USD'.
  WA_AFIELD-SCRTEXT_S = 'Taxa USD'.
  WA_AFIELD-SCRTEXT_L = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-SCRTEXT_M = WA_AFIELD-SCRTEXT_S.
  WA_AFIELD-KEY           = ''.
  WA_AFIELD-OUTPUTLEN = 15.
  APPEND WA_AFIELD TO IT_FIELDCAT.

  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'SALDO_CORR'.
  WA_AFIELD-SCRTEXT_S = 'Saldo Corr. BRL'.
  WA_AFIELD-SCRTEXT_L = 'Saldo Corr. BRL'.
  WA_AFIELD-SCRTEXT_M = 'Saldo Corr. BRL'.
  WA_AFIELD-KEY           = ''.
  WA_AFIELD-OUTPUTLEN = 15.
  APPEND WA_AFIELD TO IT_FIELDCAT.
  CLEAR: WA_AFIELD-REF_FIELD, WA_AFIELD-REF_TABLE.

  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'VLR_AJUST'.
  WA_AFIELD-SCRTEXT_S = 'Vlr Ajuste BRL'.
  WA_AFIELD-SCRTEXT_L = 'Vlr Ajuste BRL'.
  WA_AFIELD-SCRTEXT_M = 'Vlr Ajuste BRL'.
  WA_AFIELD-KEY           = ''.
  WA_AFIELD-OUTPUTLEN = 15.
  APPEND WA_AFIELD TO IT_FIELDCAT.

  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'BELNR'.
  WA_AFIELD-SCRTEXT_S = 'Nro.doc.'.
  WA_AFIELD-SCRTEXT_L = 'Nro.documento'.
  WA_AFIELD-SCRTEXT_M = 'Nro.documento'.
  WA_AFIELD-KEY           = ''.
  WA_AFIELD-HOTSPOT  = 'X'.
  WA_AFIELD-OUTPUTLEN = 12.
  APPEND WA_AFIELD TO IT_FIELDCAT.

  I = I + 1.
  CLEAR WA_AFIELD.
  WA_AFIELD-COL_POS       = I.
  WA_AFIELD-FIELDNAME     = 'BELNR_EST'.
  WA_AFIELD-SCRTEXT_S = 'Doc. Est.'.
  WA_AFIELD-SCRTEXT_L = 'Nro.doc. Est.'.
  WA_AFIELD-SCRTEXT_M = 'Nro.doc. Est.'.
  WA_AFIELD-KEY           = ' '.
  WA_AFIELD-DO_SUM        = ''.
  WA_AFIELD-HOTSPOT  = 'X'.
  WA_AFIELD-OUTPUTLEN = 12.
  APPEND WA_AFIELD TO IT_FIELDCAT.

ENDFORM.                    " F_ALV_FIELDCAT

*&---------------------------------------------------------------------*
*&      Form  F_ALV_TRANSF
*&---------------------------------------------------------------------*
*       Configura informações
*----------------------------------------------------------------------*
FORM F_ALV_TRANSF .

  DATA: W_AUGDT TYPE DATUM.

*  WA_LAYOUT-COLTAB_FIELDNAME    = 'COLINFO'.
  WA_LAYOUT-ZEBRA      = 'X'.
*  wa_layout-cell_merge          = 'X'.    "Desneccessário
  WA_LAYOUT-NO_ROWMOVE = 'X'.
  WA_LAYOUT-NO_ROWINS  = 'X'.
  WA_LAYOUT-NO_ROWMARK = SPACE.
  IF P_E_LANC = 'X'. "Se for estorno
    WA_LAYOUT-GRID_TITLE = 'Estorno de lançamentos'.
  ELSEIF P_C_LANC = 'X'.
    WA_LAYOUT-GRID_TITLE = 'Criação de lançamentos'.
  ELSE.
    CLEAR WA_LAYOUT-GRID_TITLE .
  ENDIF.
  WA_LAYOUT-SEL_MODE   = 'A'.
  WA_LAYOUT-CWIDTH_OPT   = 'X'.
  WA_LAYOUT-BOX_FNAME       = 'MARK'.
  DATA: TL_ZGL012 LIKE T_ZGL012_AVM OCCURS 0 WITH HEADER LINE."WITH HEADER LINE.
  DATA: BEGIN OF TL_SKAT OCCURS 0,
          SAKNR TYPE SAKNR,
          TXT50 TYPE TXT50_SKAT,
        END OF TL_SKAT.

  DATA: BEGIN OF TL_KNA1 OCCURS 0,
          KUNNR TYPE KUNNR,
          NAME1 TYPE NAME1_GP,
          VBUND TYPE KNA1-VBUND,
        END OF TL_KNA1.

  DATA: BEGIN OF TL_LFA1 OCCURS 0,
          LIFNR TYPE LIFNR,
          NAME1 TYPE NAME1_GP,
          VBUND TYPE LFA1-VBUND,
        END OF TL_LFA1.

  DO 3 TIMES.
    TL_ZGL012[] = T_ZGL012_AVM[].
    CASE SY-INDEX.
      WHEN 1.
        DELETE TL_ZGL012 WHERE HKONT = SPACE.
        IF NOT TL_ZGL012[] IS INITIAL.
          SELECT SAKNR TXT50 FROM SKAT
            INTO TABLE TL_SKAT
          FOR ALL ENTRIES IN TL_ZGL012
          WHERE SPRAS = SY-LANGU
            AND SAKNR = TL_ZGL012-HKONT.
          IF SY-SUBRC <> 0.
            MESSAGE S398(00) WITH 'Erro ao obter descrição de contas'
                                  SPACE SPACE SPACE.
          ELSE.
            SORT TL_SKAT BY SAKNR.
          ENDIF.
        ENDIF.
      WHEN 2.
        DELETE TL_ZGL012 WHERE KUNNR = SPACE.
        IF NOT TL_ZGL012[] IS INITIAL.
          SELECT KUNNR NAME1 VBUND FROM KNA1
            INTO TABLE TL_KNA1
          FOR ALL ENTRIES IN TL_ZGL012
          WHERE KUNNR = TL_ZGL012-KUNNR.
          IF SY-SUBRC <> 0.
            MESSAGE S398(00) WITH 'Erro ao obter descrição de clientes'
                                  SPACE SPACE SPACE.
          ELSE.
            SORT TL_KNA1 BY KUNNR.
          ENDIF.
        ENDIF.

      WHEN 3.
        DELETE TL_ZGL012 WHERE LIFNR = SPACE.
        IF NOT TL_ZGL012[] IS INITIAL.
          SELECT LIFNR NAME1 VBUND FROM LFA1
            INTO TABLE TL_LFA1
          FOR ALL ENTRIES IN TL_ZGL012
          WHERE LIFNR = TL_ZGL012-LIFNR.
          IF SY-SUBRC <> 0.
            MESSAGE S398(00) WITH 'Erro ao obter descrição de fornecedores'
                                  SPACE SPACE SPACE.
          ELSE.
            SORT TL_LFA1 BY LIFNR.
          ENDIF.
        ENDIF.

    ENDCASE.
  ENDDO.

  IF T_ZGL012_AVM[] IS NOT INITIAL.
    SELECT BUKRS LIFNR AUGDT AUGBL BELNR BUZEI
        FROM BSAK
        INTO TABLE IT_BSAK_LOOP
        FOR ALL ENTRIES IN T_ZGL012_AVM
        WHERE BUKRS = T_ZGL012_AVM-BUKRS
        AND   LIFNR = T_ZGL012_AVM-LIFNR
        AND   AUGDT GE P_BUDAT
        AND   BELNR = T_ZGL012_AVM-BELNR
        AND   BUZEI = T_ZGL012_AVM-BUZEI.

    SELECT *
      FROM ZGL012_AVM
      INTO TABLE IT_ZGL012_AVM_LOOP1
      FOR ALL ENTRIES IN T_ZGL012_AVM
      WHERE BUKRS = T_ZGL012_AVM-BUKRS
      AND   BELNR = T_ZGL012_AVM-BELNR
      AND   BUZEI = T_ZGL012_AVM-BUZEI.
  ENDIF.

  IT_ZGL012_AVM_LOOP2[] = IT_ZGL012_AVM_LOOP1[].

  DELETE IT_ZGL012_AVM_LOOP1 WHERE  DT_AVAL => P_BUDAT.
  DELETE IT_ZGL012_AVM_LOOP2 WHERE  DT_AVAL < P_BUDAT.

  SORT: IT_ZGL012_AVM_LOOP1 BY BUKRS BELNR BUZEI DT_AVAL,
        IT_ZGL012_AVM_LOOP2 BY BUKRS BELNR BUZEI DT_AVAL,
        IT_BSAK_LOOP        BY BUKRS LIFNR BELNR BUZEI.

*delete t_zgl012_avm where belnr ne '0100000714'.
  LOOP AT T_ZGL012_AVM INTO WA_ZGL012_AUX.
    MOVE-CORRESPONDING WA_ZGL012_AUX TO O_ALV.
    IF O_ALV-VLR_VARIACAO < 0.
      O_ALV-RESULTADO_C = 'Receita'.
    ELSE.
      O_ALV-RESULTADO_C = 'Despesa'.
    ENDIF.
    IF WA_ZGL012_AUX-WAERS EQ 'EUR'.
      IF NOT WA_ZGL012_AUX-WRBTR = 0.
        O_ALV-KURSF = WA_ZGL012_AUX-DMBTR / WA_ZGL012_AUX-WRBTR.
      ELSE.
        O_ALV-KURSF = 0.
      ENDIF.
    ELSE.
      IF NOT WA_ZGL012_AUX-DMBE2 = 0.
        O_ALV-KURSF = WA_ZGL012_AUX-DMBTR / WA_ZGL012_AUX-DMBE2.
      ELSE.
        O_ALV-KURSF = 0.
      ENDIF.
    ENDIF.
    IF NOT WA_ZGL012_AUX-HKONT IS INITIAL.
      O_ALV-TIPO = 'Razão'.
      O_ALV-CODIGO = WA_ZGL012_AUX-HKONT .
      READ TABLE TL_SKAT WITH KEY SAKNR = WA_ZGL012_AUX-HKONT BINARY SEARCH.
      IF SY-SUBRC = 0.
        O_ALV-DESCRICAO = TL_SKAT-TXT50.
      ENDIF.
    ENDIF.

    IF NOT WA_ZGL012_AUX-KUNNR IS INITIAL.
      O_ALV-TIPO = 'Cliente'.
      O_ALV-CODIGO = WA_ZGL012_AUX-KUNNR.
      READ TABLE TL_KNA1 WITH KEY KUNNR = WA_ZGL012_AUX-KUNNR BINARY SEARCH.
      IF SY-SUBRC = 0.
        O_ALV-DESCRICAO = TL_KNA1-NAME1.
      ENDIF.
    ENDIF.


    IF NOT WA_ZGL012_AUX-LIFNR IS INITIAL.
      O_ALV-TIPO = 'Fornecedor'.
      O_ALV-CODIGO = WA_ZGL012_AUX-LIFNR.
      READ TABLE TL_LFA1 WITH KEY LIFNR = WA_ZGL012_AUX-LIFNR BINARY SEARCH.
      IF SY-SUBRC = 0.
        O_ALV-DESCRICAO = TL_LFA1-NAME1.
      ENDIF.

    ENDIF.

*** Eduardo - 05.04.2010
    IF WG_INDICADOR IS INITIAL.
      IF NOT WA_ZGL012_AUX-DOC_LCTO IS INITIAL AND
         NOT WA_ZGL012_AUX-DT_LCTO  IS INITIAL.
*        O_ALV-SELECAO = 'X'.
*
*        SELECT SINGLE DT_LCTO FROM ZGL012_AVM INTO W_AUGDT
*          WHERE BUKRS = WA_ZGL012_AUX-BUKRS AND
*                DT_AVAL < P_BUDAT           AND
*                BELNR = WA_ZGL012_AUX-BELNR AND
*                BUZEI = WA_ZGL012_AUX-BUZEI.
        READ TABLE IT_ZGL012_AVM_LOOP1 INTO WA_ZGL012_AVM_LOOP "ALRS
           WITH KEY BUKRS = WA_ZGL012_AUX-BUKRS
                    BELNR = WA_ZGL012_AUX-BELNR
                    BUZEI = WA_ZGL012_AUX-BUZEI BINARY SEARCH.
        IF SY-SUBRC = 0.
*          SELECT SINGLE DT_LCTO FROM ZGL012_AVM INTO W_AUGDT
*           WHERE BUKRS = WA_ZGL012_AUX-BUKRS AND
*                 DT_AVAL => P_BUDAT          AND
*                 BELNR = WA_ZGL012_AUX-BELNR AND
*                 BUZEI = WA_ZGL012_AUX-BUZEI.
          MOVE WA_ZGL012_AVM_LOOP-DT_AVAL TO W_AUGDT.
          READ TABLE IT_ZGL012_AVM_LOOP2 INTO WA_ZGL012_AVM_LOOP "ALRS
          WITH KEY BUKRS = WA_ZGL012_AUX-BUKRS
                   BELNR = WA_ZGL012_AUX-BELNR
                   BUZEI = WA_ZGL012_AUX-BUZEI BINARY SEARCH.
          IF SY-SUBRC <> 0.
            CLEAR:O_ALV-DOC_LCTO, O_ALV-DT_LCTO.
            O_ALV-STATUS = ICON_RED_LIGHT.
          ELSE.
            MOVE WA_ZGL012_AVM_LOOP-DT_AVAL TO W_AUGDT.
            O_ALV-STATUS = ICON_LED_GREEN.
          ENDIF.
        ELSE.
          O_ALV-STATUS = ICON_LED_GREEN.
        ENDIF.
      ELSE.
*        O_ALV-SELECAO = SPACE.
        READ TABLE IT_ZIB_CONTABIL_ERR INTO WA_ZIB_CONTABIL_ERR WITH KEY OBJ_KEY = WA_ZGL012_AUX-OBJ_KEY BINARY SEARCH.
        IF SY-SUBRC = 0.
          O_ALV-STATUS = ICON_INCOMPLETE.
        ELSE.
          O_ALV-STATUS = ICON_LED_RED.
        ENDIF.

        IF NOT WA_ZGL012_AUX-AUGBL IS INITIAL." AND wa_zgl012_aux-estorno = 'X'.
          IF WA_ZGL012_AUX-ESTORNO = 'X'.
            O_ALV-STATUS = ICON_LED_RED.
          ELSE.
*            SELECT SINGLE DT_AVAL FROM ZGL012_AVM  INTO W_AUGDT
*              WHERE BUKRS = WA_ZGL012_AUX-BUKRS AND
*                    DT_AVAL < P_BUDAT AND
*                    BELNR = WA_ZGL012_AUX-BELNR AND
*                    BUZEI = WA_ZGL012_AUX-BUZEI.
            READ TABLE IT_ZGL012_AVM_LOOP1 INTO WA_ZGL012_AVM_LOOP "ALRS
               WITH KEY BUKRS = WA_ZGL012_AUX-BUKRS
                        BELNR = WA_ZGL012_AUX-BELNR
                        BUZEI = WA_ZGL012_AUX-BUZEI BINARY SEARCH.
            IF SY-SUBRC = 0.
              MOVE WA_ZGL012_AVM_LOOP-DT_AVAL TO W_AUGDT.
            ENDIF.
            IF W_AUGDT < P_BUDAT.
              IF SY-SUBRC = 0.
*                SELECT SINGLE AUGDT FROM BSAK INTO W_AUGDT
*                  WHERE BUKRS = WA_ZGL012_AUX-BUKRS AND
*                        LIFNR = WA_ZGL012_AUX-LIFNR AND
*                        AUGDT GE P_BUDAT AND
*                        BELNR = WA_ZGL012_AUX-BELNR AND
*                        BUZEI = WA_ZGL012_AUX-BUZEI.
                READ TABLE IT_BSAK_LOOP INTO WA_BSAK
                    WITH KEY  BUKRS = WA_ZGL012_AUX-BUKRS
                              LIFNR = WA_ZGL012_AUX-LIFNR
                              BELNR = WA_ZGL012_AUX-BELNR
                              BUZEI = WA_ZGL012_AUX-BUZEI BINARY SEARCH.
                IF SY-SUBRC = 0.
                  MOVE WA_BSAK-AUGDT TO W_AUGDT.
                ENDIF.
              ENDIF.
              IF SY-SUBRC = 0.
                IF O_ALV-AUGDT > O_ALV-DT_AVAL.
*                  CLEAR: o_alv-augdt, o_alv-augbl.
                ENDIF.

                O_ALV-STATUS = ICON_LED_RED.

                O_ALV-VLR_ACUM_MES_ATU = O_ALV-VLR_ATUALIZADO - O_ALV-DMBTR.
                O_ALV-VLR_VARIACAO = O_ALV-VLR_ACUM_MES_ATU - O_ALV-VLR_ACUM_MES_ANT.
              ELSE.
                O_ALV-STATUS = ICON_RED_LIGHT.
              ENDIF.

            ELSE.
              O_ALV-STATUS = ICON_RED_LIGHT.
            ENDIF.

          ENDIF.
          READ TABLE IT_ZIB_CONTABIL_ERR INTO WA_ZIB_CONTABIL_ERR WITH KEY OBJ_KEY = WA_ZGL012_AUX-OBJ_KEY BINARY SEARCH.
          IF SY-SUBRC = 0.
            O_ALV-STATUS = ICON_INCOMPLETE.
          ENDIF.
        ENDIF.

      ENDIF.

      IF WA_ZGL012_AUX-VLR_VARIACAO = 0.
*        o_alv-status = icon_okay.
      ENDIF.
    ENDIF.
    O_ALV-DELE   = WA_ZGL012_AUX-DELE.
    APPEND O_ALV.
    CLEAR O_ALV.
  ENDLOOP.
  WG_INDICADOR = 'X'.
*  CALL FUNCTION 'REUSE_ALV_TRANSFER_DATA_BACK'
*    EXPORTING
*      IT_FIELDCAT = IT_FIELDCAT
*      IS_LAYOUT   = WA_LAYOUT
*    IMPORTING
*      ET_FIELDCAT = IT_FCAT
*      ES_LAYOUT   = WA_LAY.


  DELETE O_ALV WHERE BUDAT GT P_BUDAT.
  REFRESH : IT_ZGL012_AVM_LOOP1, IT_ZGL012_AVM_LOOP2,IT_BSAK_LOOP.

ENDFORM.                    " F_ALV_TRANSF
*&---------------------------------------------------------------------*
*&      Form  F_ALV_IMPRIME
*&---------------------------------------------------------------------*
*       Apresenta o Relatório
*----------------------------------------------------------------------*
FORM F_ALV_IMPRIME .

  CALL SCREEN 9001.

ENDFORM.                    " F_ALV_IMPRIME
*&---------------------------------------------------------------------*
*&      Form  F_PF_STATUS_NOVO
*&---------------------------------------------------------------------*
*     Força um PF Status com o botão para salvar layout
*----------------------------------------------------------------------*
FORM F_PF_STATUS_NOVO ."USING RT_EXTAB TYPE SLIS_T_EXTAB.
  SET PF-STATUS 'F_SET_PF'.
  SET TITLEBAR  'ZFTITLE'.
ENDFORM.                    " F_PF_STATUS_NOVO
*&---------------------------------------------------------------------*
*&      Form  F_AT_USER_COMMAND
*&---------------------------------------------------------------------*
*     Tratamento de comandos do usuário - Salvar e Duplo clique
*----------------------------------------------------------------------*
FORM F_AT_USER_COMMAND USING UCOMM LIKE SY-UCOMM
                             SELFIELD TYPE KKBLO_SELFIELD.

  ST_SELFIELD = SELFIELD.

  SELFIELD-REFRESH = 'X'.

  CASE SY-UCOMM.
    WHEN 'UP' OR 'BACK' .
      LEAVE TO SCREEN 0.
    WHEN 'CANCEL'.
      LEAVE PROGRAM.
    WHEN OTHERS.
  ENDCASE.

ENDFORM.                    " F_AT_USER_COMMAND
*---------------------------------------------------------------------*
*      Form  f_top_of_page
*---------------------------------------------------------------------*
FORM F_TOP_OF_PAGE .

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      IT_LIST_COMMENTARY = IT_HEADER.

ENDFORM.                    " f_top_of_page


*&---------------------------------------------------------------------*
*&      Form  ZF_VALIDA_CAMPOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ZF_VALIDA_CAMPOS.
  DATA: WL_DATE TYPE DATUM,
        WL_DATA_C(10),
        E_STATUS(1),
        E_MESSA(64).

*valida data da avaliação. Tem que ser o último dia do mes
  CALL FUNCTION 'LAST_DAY_OF_MONTHS'
    EXPORTING
      DAY_IN            = P_BUDAT
    IMPORTING
      LAST_DAY_OF_MONTH = WL_DATE
    EXCEPTIONS
      DAY_IN_NO_DATE    = 1
      OTHERS            = 2.
  IF SY-SUBRC <> 0.
    MESSAGE E398(00) WITH 'Erro ao determinar dia!' SPACE SPACE SPACE.
  ELSE.
    IF WL_DATE <> P_BUDAT.
      WRITE WL_DATE TO WL_DATA_C.
      MESSAGE E398(00) WITH 'Favor entrar último dia do mês como parâmetro.'
                            'No caso:'
                            WL_DATA_C
                            SPACE.
    ENDIF.
  ENDIF.
*pelo menos um dos checkbox esteja marcado:
*  IF TS_0100-DYNNR = 200.
  IF P_HKONT = SPACE AND P_KUNNR = SPACE AND P_LIFNR = SPACE AND P_HKONT2 = SPACE.
    MESSAGE E398(00) WITH 'Para partidas em aberto pelo menos'
                          'um dos checkbox deve ser marcado.'
                          '(Razão, Fornecedor ou Cliente)'
                          SPACE.
  ENDIF.
*  ENDIF.

*Valida período de acordo com a data da avaliação
  IF P_SPMON <> P_BUDAT(6).
    MESSAGE E398(00) WITH 'Período difere da data de avaliação'
                          SPACE
                          SPACE
                          SPACE.

  ENDIF.
*valida data do documento e data do lançamento iguais a data de avaliacao
  IF P_BUDAT <> P_BUDAT2 OR P_BUDAT <> P_AUGDT.
    MESSAGE E398(00) WITH 'Data do documento e data do lançamento'
                          'devem ser iguais a data fixada da'
                          'avaliação '
                          SPACE.
  ENDIF.

  CALL FUNCTION 'Z_CONTROLE_FECHAMES'
    EXPORTING
      I_BUKRS    = P_BUKRS
      I_DATA     = P_BUDAT
*      I_DEP_RESP = VG_DEPTO
    IMPORTING
      E_STATUS   = E_STATUS
      E_MESSA    = E_MESSA
    EXCEPTIONS
      ERROR      = 1
      OTHERS     = 2.
  IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
  IF  E_STATUS = 'E'.
    MESSAGE E398(00) WITH E_MESSA.
  ENDIF.
*  IF P_BRL IS INITIAL.
*    WG_WAERS = C_USD.
*  ELSE.
*    WG_WAERS = C_BRL.
*  ENDIF.

ENDFORM.                    "ZF_VALIDA_CAMPOS

*&---------------------------------------------------------------------*
*&      Form  ZF_LANCAR2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ALV      text
*      -->P_ERRO     text
*----------------------------------------------------------------------*
FORM ZF_LANCAR2 CHANGING P_ALV LIKE O_ALV2
                         P_ERRO.

  DATA: WL_DATA(10),
        TABIX   TYPE SY-TABIX.
  WRITE VG_LAST_DAY TO WL_DATA.

  SELECT SINGLE BUKRS LAND1
    FROM T001
    INTO WA_T001
    WHERE BUKRS = P_BUKRS.

  SELECT SINGLE LAND1 WAERS
    FROM T005
    INTO WA_T005
    WHERE LAND1 = WA_T001-LAND1.

  REFRESH  IT_ZIB_CONTABIL.
  IF P_E_LANC = 'X'.
    SELECT *
      FROM ZIB_CONTABIL
      INTO TABLE IT_ZIB_CONTABIL
      WHERE OBJ_KEY = P_ALV-OBJ_KEY.

    LOOP AT IT_ZIB_CONTABIL INTO WA_ZIB_CONTABIL.
      TABIX = SY-TABIX.
      IF WA_ZIB_CONTABIL-BSCHL = '40'.
        WA_ZIB_CONTABIL-BSCHL = '50'.
      ELSEIF WA_ZIB_CONTABIL-BSCHL = '50'.
        WA_ZIB_CONTABIL-BSCHL = '40'.
      ENDIF.
      WA_ZIB_CONTABIL-RG_ATUALIZADO  = 'N'.
      "WA_ZIB_CONTABIL-BKTXT     = 'EST.-VAR.CTAS MONETÁRIAS'.
      WA_ZIB_CONTABIL-BKTXT     = SY-UNAME.
      CONCATENATE 'Estorno Var. Monetária-'  P_BUDAT+4(2) '/' P_BUDAT+0(4) INTO WA_ZIB_CONTABIL-SGTXT.
      IF WA_ZIB_CONTABIL-SEQITEM = 1.
        CALL FUNCTION 'NUMBER_GET_NEXT'
          EXPORTING
            NR_RANGE_NR = '01'
            OBJECT      = 'ZID_GL'
          IMPORTING
            NUMBER      = VSEQ.
        VNUM = VSEQ .

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = VNUM
          IMPORTING
            OUTPUT = VNUM.

        CONCATENATE 'ZGL012' VNUM  P_SPMON+0(4) INTO WA_ZIB_CONTABIL-OBJ_KEY.
        VOBJ_KEY = WA_ZIB_CONTABIL-OBJ_KEY.
      ELSE.
        WA_ZIB_CONTABIL-OBJ_KEY = VOBJ_KEY.
      ENDIF.
      MODIFY IT_ZIB_CONTABIL FROM WA_ZIB_CONTABIL INDEX TABIX.

      CLEAR  WA_ZIB_CONTABIL.
    ENDLOOP.
  ELSE.
    DO 4 TIMES.
      IF SY-INDEX = 1.
        CALL FUNCTION 'NUMBER_GET_NEXT'
          EXPORTING
            NR_RANGE_NR = '01'
            OBJECT      = 'ZID_GL'
          IMPORTING
            NUMBER      = VSEQ.
        VNUM = VSEQ .

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = VNUM
          IMPORTING
            OUTPUT = VNUM.
        CONCATENATE 'ZGL012' VNUM  P_SPMON+0(4) INTO WA_ZIB_CONTABIL-OBJ_KEY.
        VOBJ_KEY = WA_ZIB_CONTABIL-OBJ_KEY.
      ENDIF.

      VSEQITEM = SY-INDEX.
      WA_ZIB_CONTABIL-SEQITEM   = VSEQITEM.
      IF P_ALV-VLR_AJUST  < 0.
        WA_ZIB_CONTABIL-XBLNR = 'Receita'.
      ELSE.
        WA_ZIB_CONTABIL-XBLNR = 'Despesa'.
      ENDIF.

      IF SY-INDEX = 1 OR SY-INDEX = 4.
        IF P_ALV-VLR_AJUST LT 0.
          WA_ZIB_CONTABIL-BSCHL      = '50'.
        ELSE.
          WA_ZIB_CONTABIL-BSCHL      = '40'.
        ENDIF.
      ELSE.
        IF P_ALV-VLR_AJUST LT 0.
          WA_ZIB_CONTABIL-BSCHL      = '40'.
        ELSE.
          WA_ZIB_CONTABIL-BSCHL      = '50'.
        ENDIF.
      ENDIF.

      CONCATENATE P_BUKRS+2(2) '01' INTO WA_ZIB_CONTABIL-GSBER.

      WA_ZIB_CONTABIL-BUKRS     = P_BUKRS.
      WA_ZIB_CONTABIL-INTERFACE = '35'.
      CONCATENATE P_SPMON+4(2) P_SPMON+0(4) INTO WA_ZIB_CONTABIL-BKTXT SEPARATED BY '.'.
      WA_ZIB_CONTABIL-BLDAT     = WL_DATA.
      WA_ZIB_CONTABIL-BUDAT     = WL_DATA.
      WA_ZIB_CONTABIL-GJAHR     = P_SPMON+0(4).
      WA_ZIB_CONTABIL-MONAT     = P_SPMON+4(2).
      WA_ZIB_CONTABIL-BLART     = 'VC'.
      IF SY-INDEX = 1 OR SY-INDEX = 2.
        WA_ZIB_CONTABIL-HKONT     = P_ALV-RACCT.
      ELSE.
        READ TABLE T_T030H INTO WA_T030H
        WITH KEY HKONT = P_ALV-RACCT.
        IF P_ALV-VLR_AJUST LT 0.
          WA_ZIB_CONTABIL-HKONT     = WA_T030H-LSBEW. "despesa
        ELSE.
          WA_ZIB_CONTABIL-HKONT     = WA_T030H-LHBEW. "receita
        ENDIF.
      ENDIF.
      WA_ZIB_CONTABIL-WRBTR     = '0.01'.
      "WA_ZIB_CONTABIL-UMSKZ     = P_ALV-UMSKZ.

      WA_ZIB_CONTABIL-WAERS     = 'USD'.

      CONCATENATE P_BUKRS+2(2) '01' INTO WA_ZIB_CONTABIL-BUPLA.
      "WA_ZIB_CONTABIL-ZUONR     = P_ALV-BELNR.
      CONCATENATE 'Var. Monetária-'  P_BUDAT+4(2) '/' P_BUDAT+0(4) INTO WA_ZIB_CONTABIL-SGTXT.

      WA_ZIB_CONTABIL-WAERS_I   = WA_T005-WAERS.

      IF SY-INDEX = 1 OR SY-INDEX = 3.
        WA_ZIB_CONTABIL-DMBTR     =  P_ALV-VLR_AJUST.
        IF WA_ZIB_CONTABIL-DMBTR LT 0.
          MULTIPLY WA_ZIB_CONTABIL-DMBTR BY -1.
        ENDIF.
        ADD '0.01' TO WA_ZIB_CONTABIL-DMBTR.
*        WA_ZIB_CONTABIL-WRBTR     = WA_ZIB_CONTABIL-DMBTR.
      ELSE.
        WA_ZIB_CONTABIL-DMBTR     =  '0.01'.
      ENDIF.


      WA_ZIB_CONTABIL-WAERS_F   = 'USD'.
      WA_ZIB_CONTABIL-DMBE2     = '0.01'.


      WA_ZIB_CONTABIL-RG_ATUALIZADO  = 'N'.
      WA_ZIB_CONTABIL-BEWAR     = ''. "WL_BEWAR.
      WA_ZIB_CONTABIL-BKTXT     = SY-UNAME.
      APPEND WA_ZIB_CONTABIL TO IT_ZIB_CONTABIL.
    ENDDO.
  ENDIF.
  "
  MODIFY ZIB_CONTABIL FROM TABLE IT_ZIB_CONTABIL.
  REFRESH IT_ZIB_CONTABIL.

  "Grava Z
  IF P_ALV-VLR_AJUST NE 0.
    WA_ZGL012_AVM-BUKRS             = P_BUKRS.
    WA_ZGL012_AVM-DT_AVAL           = P_BUDAT.
    WA_ZGL012_AVM-BELNR             = P_ALV-RACCT.
    WA_ZGL012_AVM-BUZEI             = 0.
    WA_ZGL012_AVM-BSCHL             = ''.
    WA_ZGL012_AVM-KUNNR             = ''.
    WA_ZGL012_AVM-LIFNR             = ''.
    WA_ZGL012_AVM-HKONT             = ''.
    WA_ZGL012_AVM-VBUND             = ''.
    WA_ZGL012_AVM-UMSKZ             = ''.
    WA_ZGL012_AVM-BUDAT             = VG_LAST_DAY.
    WA_ZGL012_AVM-WAERS             = WA_T005-WAERS.
    WA_ZGL012_AVM-GSBER             = ''.
    WA_ZGL012_AVM-DMBTR             = 0.
    WA_ZGL012_AVM-WRBTR             = 0.
    WA_ZGL012_AVM-DMBE2             = 0.
    WA_ZGL012_AVM-KURSF             = 0.
    WA_ZGL012_AVM-AUGDT             = ''.
    WA_ZGL012_AVM-AUGBL             = ''.
    WA_ZGL012_AVM-TX_FECH           = 0.
    WA_ZGL012_AVM-VLR_ATUALIZADO    = 0.
    WA_ZGL012_AVM-VLR_ACUM_MES_ANT  = 0.
    WA_ZGL012_AVM-VLR_ACUM_MES_ATU  = 0.
    WA_ZGL012_AVM-VLR_VARIACAO      = P_ALV-VLR_AJUST.
    WA_ZGL012_AVM-RESULTADO         = ''.
    WA_ZGL012_AVM-DT_LCTO           = ''.
    WA_ZGL012_AVM-DOC_LCTO          = ''.
    IF P_E_LANC = 'X'.
      WA_ZGL012_AVM-ESTORNO           = 'X'.
    ELSE.
      WA_ZGL012_AVM-ESTORNO           = ''.
    ENDIF.
    WA_ZGL012_AVM-ST_REV            = 'S'. "Marcar como "S" saldo conta

    MOVE: SY-UNAME TO WA_ZGL012_AVM-USNAM,
          SY-UZEIT TO WA_ZGL012_AVM-CPUTM,
          SY-DATUM TO WA_ZGL012_AVM-CPUDT,
          VOBJ_KEY TO WA_ZGL012_AVM-OBJ_KEY.

    MODIFY ZGL012_AVM FROM WA_ZGL012_AVM.
    IF SY-SUBRC = 0.
      COMMIT WORK AND WAIT .
    ENDIF.
  ELSE.
    IF P_E_LANC = 'X'.
      WA_ZGL012_AVM-ESTORNO           = 'X'.
    ELSE.
      WA_ZGL012_AVM-ESTORNO           = ''.
    ENDIF.
    UPDATE ZGL012_AVM SET OBJ_KEY = VOBJ_KEY
                          ESTORNO = WA_ZGL012_AVM-ESTORNO
                          USNAM   = SY-UNAME
                          CPUTM   = SY-UZEIT
                          CPUDT   = SY-DATUM
    WHERE  BUKRS             = P_BUKRS
    AND    DT_AVAL           = P_BUDAT
    AND    BELNR             = P_ALV-RACCT.
    IF SY-SUBRC = 0.
      COMMIT WORK AND WAIT .
    ENDIF.
  ENDIF.

ENDFORM.                    "ZF_LANCAR2
*&---------------------------------------------------------------------*
*&      Form  ZF_LANCAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ALV      text
*----------------------------------------------------------------------*
FORM ZF_LANCAR CHANGING P_ALV LIKE O_ALV
                        P_ERRO.
*se for criação de lançamento
*  IF p_c_lanc = 'X'.
*    IF p_alv-lifnr <> space.
*      IF p_alv-umskz = space.
*        PERFORM zf_monta_batch USING '1' CHANGING p_alv p_erro.
*      ELSE.
*        PERFORM zf_monta_batch USING '2' CHANGING p_alv p_erro.
*      ENDIF.
*    ENDIF.
*
*    IF p_alv-kunnr <> space.
*      IF p_alv-umskz = space.
*        PERFORM zf_monta_batch USING '3' CHANGING p_alv p_erro.
*      ELSE.
*        PERFORM zf_monta_batch USING '4' CHANGING p_alv p_erro.
*      ENDIF.
*    ENDIF.
*
*    IF p_alv-kunnr IS INITIAL AND p_alv-lifnr IS INITIAL AND
*       p_alv-hkont <> space.
*      PERFORM zf_monta_batch USING '5' CHANGING  p_alv p_erro .
*    ENDIF.
**senao, se for exclusao de lancamento.
*  ELSEIF p_e_lanc = 'X'.
*    PERFORM zf_monta_batch USING 'E' CHANGING p_alv p_erro.
*  ENDIF.
  "ALRS
  CLEAR VOBJ_KEY.
  IF P_C_LANC = 'X'.
    IF P_ALV-LIFNR <> SPACE.
      IF P_ALV-UMSKZ = SPACE.
        PERFORM GRAVA_ZIB USING '1' CHANGING P_ALV P_ERRO.
      ELSE.
        PERFORM GRAVA_ZIB USING '2' CHANGING P_ALV P_ERRO.
      ENDIF.
    ENDIF.

    IF P_ALV-KUNNR <> SPACE.
      IF P_ALV-UMSKZ = SPACE.
        PERFORM GRAVA_ZIB USING '3' CHANGING P_ALV P_ERRO.
      ELSE.
        PERFORM GRAVA_ZIB  USING '4' CHANGING P_ALV P_ERRO.
      ENDIF.
    ENDIF.

    IF P_ALV-KUNNR IS INITIAL AND P_ALV-LIFNR IS INITIAL AND
       P_ALV-HKONT <> SPACE.
      PERFORM GRAVA_ZIB USING '5' CHANGING  P_ALV P_ERRO .
    ENDIF.
  ELSEIF P_E_LANC = 'X'.
    PERFORM GRAVA_ZIB USING 'E' CHANGING P_ALV P_ERRO.
  ENDIF.

ENDFORM.                    "ZF_LANCAR


*&---------------------------------------------------------------------*
*&      Form  ZF_MONTA_BATCH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ALV      text
*      -->P_TIPO     text
*----------------------------------------------------------------------*
FORM ZF_MONTA_BATCH         USING    P_TIPO
                            CHANGING P_ALV LIKE O_ALV
                                     P_ERRO.
  DATA: WL_DATA(10),
        WL_DESCRICAO(1),
        WL_DATA_AVAL(10),
        WL_BKTXT(7),
        WL_NEWBS(2),
        WL_NEWBS2(2),
        WL_NEWKO2(10),
        WL_VLR_VARIACAO(16),
        WL_VLR_UFIR(16),
        WL_DMBE2(16),
        WL_DIVISAO(4),
        WL_VBUND  TYPE LFA1-VBUND,
        WL_BEWAR  TYPE ZFIT0030-BEWAR,
        WL_BEWAR2 TYPE ZFIT0030-BEWAR,
        XPROV_DOLAR TYPE I.
  DATA: BEGIN OF TL_AUX OCCURS 0,
          BELNR TYPE BELNR_D,
          DT_AVAL TYPE BUDAT,
        END OF TL_AUX.
  CLEAR: IT_BDCDATA, IT_BDCDATA[], WA_T030H, WL_VBUND.

  SELECT SINGLE BEWAR
    FROM ZFIT0030
    INTO WL_BEWAR
    WHERE HKONT	=	P_ALV-HKONT
    AND   COND  IN ('C','CV').

  IF SY-SUBRC NE 0.
    SELECT SINGLE BEWAR
      FROM ZFIT0030
      INTO WL_BEWAR
      WHERE HKONT	=	P_ALV-HKONT.
  ENDIF.

  IF P_ALV-LIFNR <> SPACE.
    SELECT SINGLE VBUND
    FROM LFA1
    INTO WL_VBUND
    WHERE LIFNR = P_ALV-LIFNR.
  ELSEIF P_ALV-KUNNR <> SPACE.
    SELECT SINGLE VBUND
    FROM KNA1
    INTO WL_VBUND
    WHERE KUNNR = P_ALV-KUNNR.
  ENDIF.

*EXTORNA LANÇAMENTO
  IF P_TIPO = 'E'.
*Quando selecionado as linhas e clicado no botão Lançar executar a transação FB08
    PERFORM ZF_INSERE_BDC USING:
      'SAPMF05A'  '0105' SPACE SPACE,
      SPACE SPACE 'BDC_OKCODE'  '=BU',
      SPACE SPACE 'RF05A-BELNS' O_ALV-DOC_LCTO,
      SPACE SPACE 'BKPF-BUKRS'  P_BUKRS ,
      SPACE SPACE 'RF05A-GJAHS' O_ALV-DT_LCTO(4),
      SPACE SPACE 'UF05A-STGRD' '01'.

    PERFORM ZF_CALL_TRANSACTION USING 'FB08' CHANGING P_ERRO.

  ELSE.
*CRIA LANCAMENTO
    READ TABLE T_T030H INTO WA_T030H
      WITH KEY HKONT = P_ALV-HKONT.
*

    CLEAR WL_DESCRICAO.
    IF P_ALV-STATUS EQ '@0A@'.
      CONCATENATE 'Reversão Provisão VC-' O_ALV-DESCRICAO
      INTO P_SGTXT.
      WL_DESCRICAO = 'X'.
    ELSE.
      IF P_SGTXT IS INITIAL.
        CONCATENATE 'Provisão VC-' O_ALV-DESCRICAO
        INTO P_SGTXT.
        WL_DESCRICAO = 'X'.
      ENDIF.
    ENDIF.

    IF P_ALV-AUGDT IS INITIAL.
      WRITE P_ALV-DT_AVAL TO WL_DATA.
*      p_alv-budat = p_alv-dt_aval.
      MOVE '0,01' TO WL_DMBE2.
    ELSE.
      SELECT BELNR DT_AVAL FROM ZGL012_AVM
        INTO TABLE TL_AUX
        WHERE BELNR = P_ALV-BELNR.
      DELETE TL_AUX WHERE DT_AVAL = P_ALV-DT_AVAL.
      DESCRIBE TABLE TL_AUX LINES XPROV_DOLAR.
      WRITE XPROV_DOLAR TO WL_DMBE2.
      WRITE P_ALV-AUGDT TO WL_DATA.
*      p_alv-budat = p_alv-augdt.
    ENDIF.

    IF NOT P_ALV-WAERS IS INITIAL.
      WG_WAERS = P_ALV-WAERS.
    ENDIF.

    IF P_ALV-VLR_VARIACAO GE 0.
      WRITE P_ALV-VLR_VARIACAO TO WL_VLR_VARIACAO.
    ELSE.
      WRITE P_ALV-VLR_VARIACAO TO WL_VLR_VARIACAO.
      TRANSLATE WL_VLR_VARIACAO USING '- '.
    ENDIF.
    WRITE P_ALV-DT_AVAL      TO WL_DATA_AVAL.

    CONCATENATE P_ALV-DT_AVAL+4(2) '/' P_ALV-DT_AVAL(4)
    INTO WL_BKTXT.

    IF P_ALV-GSBER IS INITIAL.
      CONCATENATE P_ALV-BUKRS+2(2) '01'
      INTO WL_DIVISAO.
    ELSE.
      MOVE P_ALV-GSBER TO WL_DIVISAO.
    ENDIF.

    IF P_ALV-BUKRS = '0100'.
      CLEAR WL_DIVISAO.
    ENDIF.

    CASE P_TIPO.
      WHEN '1'.
        IF ( P_ALV-VLR_VARIACAO > 0 AND (
                                          P_ALV-BSCHL = '31' OR
                                          P_ALV-BSCHL = '34'
                                         ) )
           OR
           (  P_ALV-VLR_VARIACAO > 0 AND ( ( P_ALV-BSCHL GE '21'
                                            AND P_ALV-BSCHL LE '39' ) AND
                                           (  P_ALV-BSCHL NE '23' AND
                                              P_ALV-BSCHL NE '30' AND
                                              P_ALV-BSCHL NE '33' )
                                           "p_alv-bschl = '21' or
                                           "p_alv-bschl = '27' or
                                           "p_alv-bschl = '24'
                                         ) ).
          WL_NEWBS  = '31'.
          WL_NEWBS2 = '40'.
          WL_NEWKO2 = WA_T030H-LSBEW.

        ENDIF.
        IF ( P_ALV-VLR_VARIACAO < 0 AND ( P_ALV-BSCHL = '31' OR
                                          P_ALV-BSCHL = '34' ) )
            OR
           ( P_ALV-VLR_VARIACAO < 0 AND ( ( P_ALV-BSCHL GE '21'
                                            AND P_ALV-BSCHL LE '39' ) AND
                                           (  P_ALV-BSCHL NE '23' AND
                                              P_ALV-BSCHL NE '30' AND
                                              P_ALV-BSCHL NE '33' )
                                           "p_alv-bschl = '21' or
                                           "p_alv-bschl = '27' or
                                           "p_alv-bschl = '24'
                                         ) ).
          WL_NEWBS = '21'.
          WL_NEWBS2 = '50'.
          WL_NEWKO2 = WA_T030H-LHBEW.

        ENDIF.
        IF P_ALV-STATUS = ICON_RED_LIGHT.
          IF P_ALV-VLR_VARIACAO > 0 AND P_ALV-UMSKZ = SPACE.
            WL_NEWBS = '31'.                                "'21'.
            WL_NEWBS2 = '40'.
*            wl_newko2 = wa_t030h-lsbew.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LSBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO > 0.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LSBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO < 0 AND P_ALV-UMSKZ = SPACE.
            WL_NEWBS  = '21'.                               "'31'.
            WL_NEWBS2 = '50'.
*            wl_newko2 = wa_t030h-lhbew.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LHBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO < 0.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LHBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ENDIF.
        ENDIF.



        PERFORM ZF_INSERE_BDC USING:
'SAPMF05A'  '0100' SPACE SPACE,
SPACE SPACE 'BDC_OKCODE'  '/00',
SPACE SPACE 'BKPF-BLDAT'  WL_DATA,
SPACE SPACE 'BKPF-BLART'  'VC',
SPACE SPACE 'BKPF-BUKRS'  P_BUKRS,
SPACE SPACE 'BKPF-BUDAT'  WL_DATA,
SPACE SPACE 'BKPF-MONAT'  P_ALV-DT_AVAL+4(2),
SPACE SPACE 'BKPF-WAERS'  WG_WAERS,
SPACE SPACE 'BKPF-XBLNR'  P_ALV-RESULTADO_C,
SPACE SPACE 'BKPF-BKTXT'  WL_BKTXT,
SPACE SPACE 'RF05A-NEWBS'	WL_NEWBS,
SPACE SPACE 'RF05A-NEWKO'	P_ALV-LIFNR.

        IF   '40_50' CS WL_NEWBS2 AND ( WL_VBUND IS NOT INITIAL OR WL_BEWAR IS NOT INITIAL ).
          PERFORM ZF_INSERE_BDC USING:
              'SAPMF05A'  '0302' SPACE SPACE,
              SPACE SPACE 'BDC_OKCODE'  '=ZK',
              SPACE SPACE 'BSEG-WRBTR'   '0,01',
              SPACE SPACE 'BSEG-DMBTR'   WL_VLR_VARIACAO,
              SPACE SPACE 'BSEG-GSBER'   WL_DIVISAO,
              SPACE SPACE 'BSEG-ZTERM'   'Z001',
              SPACE SPACE 'BSEG-ZFBDT'   WL_DATA_AVAL,
              SPACE SPACE 'BSEG-ZUONR'   P_ALV-BELNR,
              SPACE SPACE 'BSEG-SGTXT'   P_SGTXT.

          IF WL_VBUND IS NOT INITIAL AND WL_BEWAR IS NOT INITIAL.
            PERFORM ZF_INSERE_BDC USING:
              'SAPLFWTD'  '0100' SPACE SPACE,
               SPACE SPACE 'BDC_OKCODE'  '=GO'.
          ENDIF.
          PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  '0332' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '/00',
            SPACE SPACE 'BSEG-DMBE3'   WL_VLR_VARIACAO,
            SPACE SPACE 'BSEG-BEWAR'   WL_BEWAR,
            SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
            SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2.

          PERFORM ZF_INSERE_BDC USING:
              'SAPMF05A'  '0300' SPACE SPACE,
              SPACE SPACE 'BDC_OKCODE'  '=COBL_MORE',
              SPACE SPACE 'BSEG-WRBTR'  '0,01',
              SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
              SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
              SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.

          PERFORM ZF_INSERE_BDC USING:
            'SAPLKACB'  '0002' SPACE SPACE,
             SPACE SPACE 'BDC_OKCODE'  '=ENTE',
            SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
            SPACE SPACE 'COBL-RMVCT'  WL_BEWAR.

          PERFORM ZF_INSERE_BDC USING:
              'SAPMF05A'  '0300' SPACE SPACE,
              SPACE SPACE 'BDC_OKCODE'  '=ZK',
              SPACE SPACE 'BSEG-WRBTR'  '0,01',
              SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
              SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
              SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.

          PERFORM ZF_INSERE_BDC USING:
            'SAPLKACB'  '0002' SPACE SPACE,
             SPACE SPACE 'BDC_OKCODE'  '=ENTE',
            SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
            SPACE SPACE 'COBL-RMVCT'  WL_BEWAR.

          PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  '0330' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '=AB',
            SPACE SPACE 'BSEG-DMBE3'   WL_VLR_VARIACAO,
            SPACE SPACE 'BSEG-VBUND'   WL_VBUND.

          PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  '0700' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '=BU',
            SPACE SPACE 'BKPF-XBLNR'   P_ALV-RESULTADO_C,
            SPACE SPACE 'BKPF-BKTXT'  WL_BKTXT.

*          PERFORM zf_insere_bdc USING:
*          'SAPLKACB'  '0002' space space,
*          space space 'BDC_OKCODE'  '/00'.
        ELSE.
          PERFORM ZF_INSERE_BDC USING:
          'SAPMF05A'  '0302' SPACE SPACE,
          SPACE SPACE 'BDC_OKCODE'  '/00',
          SPACE SPACE 'BSEG-WRBTR'  '0,01',
          SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
          SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
          SPACE SPACE 'BSEG-ZTERM'  'Z001',
          SPACE SPACE 'BSEG-ZBD1T'  '0',
          SPACE SPACE 'BSEG-ZFBDT'  WL_DATA_AVAL,
          SPACE SPACE 'BSEG-ZLSPR'  'A',
          SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
          SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
          SPACE SPACE 'RF05A-NEWBS'	WL_NEWBS2,
          SPACE SPACE 'RF05A-NEWKO'	WL_NEWKO2,

          'SAPMF05A'  '0300' SPACE SPACE,
          SPACE SPACE 'BDC_OKCODE'  '=BU',
          SPACE SPACE 'BSEG-WRBTR'  '0,01',
          SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
          SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
          SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
          SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.

          PERFORM ZF_INSERE_BDC USING:
          'SAPLKACB'  '0002' SPACE SPACE,
          SPACE SPACE 'BDC_OKCODE'  '/00'.
        ENDIF.

*
*            'SAPMF05A'  '0302' SPACE SPACE,
*            SPACE SPACE 'BDC_OKCODE'  '=ZK',
*            SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
*            SPACE SPACE 'BSEG-WRBTR'  '0,01',
*            SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
*            SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
*            SPACE SPACE 'BSEG-ZTERM'  'Z001',
*            SPACE SPACE 'BSEG-ZBD1T'  '0',
**          SPACE SPACE 'BSEG-ZFBDT'  '31.01.2010',
*            SPACE SPACE 'BSEG-ZLSPR'  'A',
*            SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
*            SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
*
*
*            'SAPMF05A'  '0332' SPACE SPACE,
*            SPACE SPACE 'BDC_OKCODE'  '/00',
*            SPACE SPACE 'BSEG-DMBE2'  WL_DMBE2,
**          SPACE SPACE 'BSEG-DMBE3'  '93,98',
*            SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
*            SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2,
*
*
*            'SAPMF05A'  '0300' SPACE SPACE,
*            SPACE SPACE 'BDC_OKCODE'  '=ZK',
*            SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
*            SPACE SPACE 'BSEG-WRBTR'  '0,01',
*            SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
*            SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
*            SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
**            SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
*
*            'SAPLKACB'  '0002' SPACE SPACE,
*            SPACE SPACE 'BDC_OKCODE'  '/00',
*
*
*            'SAPMF05A'  '0330' SPACE SPACE,
*            SPACE SPACE 'BDC_OKCODE'  '=BU',
*            SPACE SPACE 'BSEG-DMBE2'  WL_DMBE2.

      WHEN '2'.
        IF ( P_ALV-VLR_VARIACAO < 0 AND P_ALV-BSCHL = '39' )
           OR
           ( P_ALV-VLR_VARIACAO < 0 AND P_ALV-BSCHL = '29' ).
          WL_NEWBS  = '29'.
          WL_NEWBS2 = '50'.
          WL_NEWKO2 = WA_T030H-LHBEW.

        ENDIF.
        IF ( P_ALV-VLR_VARIACAO > 0 AND P_ALV-BSCHL = '39' )
            OR
           ( P_ALV-VLR_VARIACAO > 0 AND P_ALV-BSCHL = '29' ).
          WL_NEWBS = '39'.
          WL_NEWBS2 = '40'.
          WL_NEWKO2 = WA_T030H-LSBEW.

        ENDIF.
        IF P_ALV-STATUS = ICON_RED_LIGHT.
          IF P_ALV-VLR_VARIACAO > 0 AND P_ALV-UMSKZ <> SPACE.
            WL_NEWBS = '39'.                                "'29'.
            WL_NEWBS2 = '40'.
*            wl_newko2 = wa_t030h-lsbew.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LSBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO > 0.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LSBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO < 0 AND P_ALV-UMSKZ <> SPACE..
            WL_NEWBS  = '29'.                               "'39'.
            WL_NEWBS2 = '50'.
*            wl_newko2 = wa_t030h-lhbew.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LHBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO < 0.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LHBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ENDIF.
        ENDIF.




        PERFORM ZF_INSERE_BDC USING:
  'SAPMF05A'  '0100' SPACE SPACE,
  SPACE SPACE 'BDC_OKCODE'  '/00',
  SPACE SPACE 'BKPF-BLDAT'  WL_DATA,
  SPACE SPACE 'BKPF-BLART'  'VC',
  SPACE SPACE 'BKPF-BUKRS'  P_BUKRS,
  SPACE SPACE 'BKPF-BUDAT'  WL_DATA,
  SPACE SPACE 'BKPF-MONAT'  P_ALV-DT_AVAL+4(2),
  SPACE SPACE 'BKPF-WAERS'  WG_WAERS,
  SPACE SPACE 'BKPF-XBLNR'  P_ALV-RESULTADO_C,
  SPACE SPACE 'BKPF-BKTXT'  WL_BKTXT,
  SPACE SPACE 'RF05A-NEWBS'	WL_NEWBS,
  SPACE SPACE 'RF05A-NEWKO'	P_ALV-LIFNR,
  SPACE SPACE 'RF05A-NEWUM'	P_ALV-UMSKZ.
        " alrs
        IF   '40_50' CS WL_NEWBS2 AND ( WL_VBUND IS NOT INITIAL OR WL_BEWAR IS NOT INITIAL ).
          IF P_ALV-UMSKZ = 'H'. " tela 0303
            MOVE 0 TO WL_VLR_UFIR.
            PERFORM ZF_INSERE_BDC USING:
          'SAPMF05A'  '0303' SPACE SPACE,
          SPACE SPACE 'BDC_OKCODE'  '/00',
          SPACE SPACE 'BSEG-WRBTR'  '0,01',
          SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
          SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
          SPACE SPACE 'BSEG-ZFBDT'  WL_DATA_AVAL,
          SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
          SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
          SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
          SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2.

            PERFORM ZF_INSERE_BDC USING:
          'SAPMF05A'  '0300' SPACE SPACE,
          SPACE SPACE 'BDC_OKCODE'  '=ZK',
          SPACE SPACE 'BSEG-WRBTR'  '0,01',
          SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
          SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
          SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.

            PERFORM ZF_INSERE_BDC USING:
            'SAPLKACB'  '0002' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '=ENTE',
            SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
            SPACE SPACE 'COBL-RMVCT'  WL_BEWAR.

            PERFORM ZF_INSERE_BDC USING:
           'SAPMF05A'  '0330' SPACE SPACE,
           SPACE SPACE 'BDC_OKCODE'  '=BU',
           SPACE SPACE 'BSEG-DMBE3'   WL_VLR_UFIR,
           SPACE SPACE 'BSEG-VBUND'   WL_VBUND.
          ELSE.
            PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  '0304' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '=ZK',
            SPACE SPACE 'BSEG-WRBTR'  '0,01',
            SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
            SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO.
            IF '29' CS WL_NEWBS AND 'A_1_X_H_Y_Z_6' CS P_ALV-UMSKZ..
              PERFORM ZF_INSERE_BDC USING:
              SPACE SPACE 'BSEG-ZFBDT'  WL_DATA_AVAL.
            ENDIF.
            PERFORM ZF_INSERE_BDC USING:
            SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
            SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.

            PERFORM ZF_INSERE_BDC USING:
              'SAPMF05A'  '0332' SPACE SPACE,
              SPACE SPACE 'BDC_OKCODE'  '/00',
              SPACE SPACE 'BSEG-DMBE3'   WL_VLR_VARIACAO,
              SPACE SPACE 'BSEG-BEWAR'   WL_BEWAR,
              SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
              SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2.

            PERFORM ZF_INSERE_BDC USING:
              'SAPMF05A'  '0300' SPACE SPACE,
              SPACE SPACE 'BDC_OKCODE'  '=COBL_MORE',
              SPACE SPACE 'BSEG-WRBTR'  '0,01',
              SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
              SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
              SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.

            PERFORM ZF_INSERE_BDC USING:
              'SAPLKACB'  '0002' SPACE SPACE,
              SPACE SPACE 'BDC_OKCODE'  '=ENTE',
              SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
              SPACE SPACE 'COBL-RMVCT'  WL_BEWAR.

            PERFORM ZF_INSERE_BDC USING:
                'SAPMF05A'  '0300' SPACE SPACE,
                SPACE SPACE 'BDC_OKCODE'  '=ZK',
                SPACE SPACE 'BSEG-WRBTR'  '0,01',
                SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
                SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
                SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.

            PERFORM ZF_INSERE_BDC USING:
             'SAPLKACB'  '0002' SPACE SPACE,
             SPACE SPACE 'BDC_OKCODE'  '=ENTE',
             SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
             SPACE SPACE 'COBL-RMVCT'  WL_BEWAR.

            PERFORM ZF_INSERE_BDC USING:
              'SAPMF05A'  '0330' SPACE SPACE,
              SPACE SPACE 'BDC_OKCODE'  '=AB',
              SPACE SPACE 'BSEG-DMBE3'   WL_VLR_VARIACAO,
              SPACE SPACE 'BSEG-VBUND'   WL_VBUND.

            PERFORM ZF_INSERE_BDC USING:
              'SAPMF05A'  '0700' SPACE SPACE,
              SPACE SPACE 'BDC_OKCODE'  '=BU',
              SPACE SPACE 'BKPF-XBLNR'   P_ALV-RESULTADO_C,
              SPACE SPACE 'BKPF-BKTXT'  WL_BKTXT.
          ENDIF.
        ELSE.
          IF O_ALV-UMSKZ = '9'.
            PERFORM ZF_INSERE_BDC USING:

      'SAPMF05A'  '0304' SPACE SPACE,
      SPACE SPACE 'BDC_OKCODE'  '/00',
      SPACE SPACE 'BSEG-WRBTR'  '0,01',
      SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
      SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
*    space space 'BSEG-ZFBDT'  wl_data_aval,
*  space space 'BSEG-ZLSPR'  'A',
      SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
      SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
      SPACE SPACE 'RF05A-NEWBS'	WL_NEWBS2,
      SPACE SPACE 'RF05A-NEWKO'	WL_NEWKO2.
          ELSE.

            IF O_ALV-UMSKZ = '0' OR
               O_ALV-UMSKZ = 'L'.
              PERFORM ZF_INSERE_BDC USING:
         'SAPMF05A'  '0304' SPACE SPACE,
         SPACE SPACE 'BDC_OKCODE'  '/00',
         SPACE SPACE 'BSEG-WRBTR'  '0,01',
         SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
         SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
         SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
         SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
         SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
         SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2.

            ELSE.
              PERFORM ZF_INSERE_BDC USING:
        'SAPMF05A'  '0304' SPACE SPACE,
        SPACE SPACE 'BDC_OKCODE'  '/00',
        SPACE SPACE 'BSEG-WRBTR'  '0,01',
        SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
        SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
        SPACE SPACE 'BSEG-ZFBDT'  WL_DATA_AVAL,
        SPACE SPACE 'BSEG-ZLSPR'  'A',
        SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
        SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
        SPACE SPACE 'RF05A-NEWBS'	WL_NEWBS2,
        SPACE SPACE 'RF05A-NEWKO'	WL_NEWKO2.
            ENDIF.
          ENDIF.

          PERFORM ZF_INSERE_BDC USING:

         'SAPMF05A'  '0300' SPACE SPACE,
         SPACE SPACE 'BDC_OKCODE'  '=BU',
         SPACE SPACE 'BSEG-WRBTR'  '0,01',
         SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
         SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
         SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
         SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,

         'SAPLKACB'  '0002' SPACE SPACE,
         SPACE SPACE 'BDC_OKCODE'  '/00'.
        ENDIF.

*
*      PERFORM ZF_INSERE_BDC USING:
*        'SAPMF05A'  '0100' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '/00',
*        SPACE SPACE 'BKPF-BLDAT'  WL_DATA,
*        SPACE SPACE 'BKPF-BLART'  'VC',
*        SPACE SPACE 'BKPF-BUKRS'  P_BUKRS,
*        SPACE SPACE 'BKPF-BUDAT'  WL_DATA,
*        SPACE SPACE 'BKPF-MONAT'  P_ALV-DT_AVAL+4(2),
*        SPACE SPACE 'BKPF-WAERS'  WG_WAERS,
*        SPACE SPACE 'BKPF-XBLNR'  P_ALV-RESULTADO_C,
*        SPACE SPACE 'BKPF-BKTXT'  WL_BKTXT,
*        SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS,
*        SPACE SPACE 'RF05A-NEWUM' P_ALV-UMSKZ,
*        SPACE SPACE 'RF05A-NEWKO'  P_ALV-LIFNR,
*
*        'SAPMF05A'  '0304' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '=ZK',
*        SPACE SPACE 'BSEG-WRBTR'  WL_VLR_VARIACAO,
*        SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
*        SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
*        SPACE SPACE 'BSEG-ZFBDT'  WL_DATA_AVAL,
*        SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
*        SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
*        SPACE SPACE 'BSEG-ZLSPR'  'A',
**      SPACE SPACE 'BSEG-ZTERM'  'Z001',
**      SPACE SPACE 'BSEG-ZBD1T'  '0',
*
*        'SAPMF05A'  '0332' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '/00',
*        SPACE SPACE 'BSEG-DMBE2'  WL_DMBE2,
**      SPACE SPACE 'BSEG-DMBE3'  '93,98',
*        SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
*        SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2,
*
*        'SAPMF05A'  '0300' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '=ZK',
*        SPACE SPACE 'BSEG-WRBTR'  WL_VLR_VARIACAO,
*        SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
*        SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
*        SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
**        SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
*
*        'SAPLKACB'  '0002' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '/00',
*
*        'SAPMF05A'  '0330' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '=BU',
*        SPACE SPACE 'BSEG-DMBE2'  WL_DMBE2.
      WHEN '3'.
        IF ( P_ALV-VLR_VARIACAO < 0 AND (  P_ALV-BSCHL = '11' OR
                                           P_ALV-BSCHL = '17' ) )
           OR
           ( P_ALV-VLR_VARIACAO < 0 AND ( ( P_ALV-BSCHL GE '01' AND
                                            P_ALV-BSCHL LE '19' ) AND
                                             P_ALV-BSCHL NE '10' ) ).
          WL_NEWBS  = '01'.
          WL_NEWBS2 = '50'.
          WL_NEWKO2 = WA_T030H-LHBEW.

        ENDIF.
        IF ( P_ALV-VLR_VARIACAO > 0 AND ( P_ALV-BSCHL = '11' OR
                                          P_ALV-BSCHL = '17' ) )
            OR
           ( P_ALV-VLR_VARIACAO > 0 AND ( ( P_ALV-BSCHL GE '01' AND
                                            P_ALV-BSCHL LE '19' ) AND
                                             P_ALV-BSCHL NE '10' ) ).
          WL_NEWBS = '11'.
          WL_NEWBS2 = '40'.
          WL_NEWKO2 = WA_T030H-LSBEW.

        ENDIF.
        IF P_ALV-STATUS = ICON_RED_LIGHT.
          IF P_ALV-VLR_VARIACAO > 0 AND P_ALV-UMSKZ = SPACE.
            WL_NEWBS = '11'.                                "'01'.
            WL_NEWBS2 = '40'.
*            wl_newko2 = wa_t030h-lsbew.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LSBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO > 0.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LSBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO < 0 AND P_ALV-UMSKZ = SPACE.
            WL_NEWBS  = '01'.                               "'11'.
            WL_NEWBS2 = '50'.
*            wl_newko2 = wa_t030h-lhbew.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LHBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO < 0.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LHBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ENDIF.
        ENDIF.
        PERFORM ZF_INSERE_BDC USING:
  'SAPMF05A'  '0100' SPACE SPACE,
  SPACE SPACE 'BDC_OKCODE'  '/00',
  SPACE SPACE 'BKPF-BLDAT'  WL_DATA,
  SPACE SPACE 'BKPF-BLART'  'VC',
  SPACE SPACE 'BKPF-BUKRS'  P_BUKRS,
  SPACE SPACE 'BKPF-BUDAT'  WL_DATA,
  SPACE SPACE 'BKPF-MONAT'  P_ALV-DT_AVAL+4(2),
  SPACE SPACE 'BKPF-WAERS'  WG_WAERS,
  SPACE SPACE 'BKPF-XBLNR'  P_ALV-RESULTADO_C,
  SPACE SPACE 'BKPF-BKTXT'  WL_BKTXT,
  SPACE SPACE 'RF05A-NEWBS'	WL_NEWBS,
  SPACE SPACE 'RF05A-NEWKO'	P_ALV-KUNNR.
        IF   '40_50' CS WL_NEWBS2 AND ( WL_VBUND IS NOT INITIAL OR WL_BEWAR IS NOT INITIAL ).
          PERFORM ZF_INSERE_BDC USING:
              'SAPMF05A'  '0301' SPACE SPACE,
              SPACE SPACE 'BDC_OKCODE'  '=ZK',
              SPACE SPACE 'BSEG-WRBTR'   '0,01',
              SPACE SPACE 'BSEG-DMBTR'   WL_VLR_VARIACAO,
              SPACE SPACE 'BSEG-GSBER'   WL_DIVISAO,
              SPACE SPACE 'BSEG-ZTERM'   '0001',
              SPACE SPACE 'BSEG-ZFBDT'   WL_DATA_AVAL,
              SPACE SPACE 'BSEG-ZUONR'   P_ALV-BELNR,
              SPACE SPACE 'BSEG-SGTXT'   P_SGTXT.

          PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  '0331' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '/00',
            "space space 'BSEG-KKBER'  'MAGI',
            SPACE SPACE 'BSEG-DMBE3'   WL_VLR_VARIACAO,
            SPACE SPACE 'BSEG-BEWAR'   WL_BEWAR,
            SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
            SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2.

          PERFORM ZF_INSERE_BDC USING:
              'SAPMF05A'  '0300' SPACE SPACE,
              SPACE SPACE 'BDC_OKCODE'  '=COBL_MORE',
              SPACE SPACE 'BSEG-WRBTR'  '0,01',
              SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
              "space space 'BSEG-TXJCD'
              SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
              SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.

          PERFORM ZF_INSERE_BDC USING:
            'SAPLKACB'  '0002' SPACE SPACE,
             SPACE SPACE 'BDC_OKCODE'  '=ENTE',
            SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
            SPACE SPACE 'COBL-RMVCT'  WL_BEWAR.

          PERFORM ZF_INSERE_BDC USING:
              'SAPMF05A'  '0300' SPACE SPACE,
              SPACE SPACE 'BDC_OKCODE'  '=ZK',
              SPACE SPACE 'BSEG-WRBTR'  '0,01',
              SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
              SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
              SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.

          PERFORM ZF_INSERE_BDC USING:
            'SAPLKACB'  '0002' SPACE SPACE,
             SPACE SPACE 'BDC_OKCODE'  '=ENTE',
            SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
            SPACE SPACE 'COBL-RMVCT'  WL_BEWAR.

          PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  '0330' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '=AB',
            SPACE SPACE 'BSEG-DMBE3'   WL_VLR_VARIACAO,
            SPACE SPACE 'BSEG-VBUND'   WL_VBUND.

          PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  '0700' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '=BU'.

*          PERFORM zf_insere_bdc USING:
*          'SAPLKACB'  '0002' space space,
*          space space 'BDC_OKCODE'  '/00'.
        ELSE.
          PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  '0301' SPACE SPACE,
        SPACE SPACE 'BDC_OKCODE'  '/00',
        SPACE SPACE 'BSEG-WRBTR'  '0,01',
        SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
        SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
        SPACE SPACE 'BSEG-ZTERM'  '0001',
        SPACE SPACE 'BSEG-ZBD1T'  '0',
        SPACE SPACE 'BSEG-ZFBDT'  WL_DATA_AVAL,
        SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
        SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
        SPACE SPACE 'RF05A-NEWBS'	WL_NEWBS2,
        SPACE SPACE 'RF05A-NEWKO'	WL_NEWKO2,
        'SAPMF05A'  '0300' SPACE SPACE,
        SPACE SPACE 'BDC_OKCODE'  '=BU',
        SPACE SPACE 'BSEG-WRBTR'  '0,01',
        SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
*SPACE SPACE 'BSEG-TXJCD'	MT 1300178
        SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
        SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
        SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.

*SPACE SPACE 'COBL-GSBER'	WL_DIVISAO.
          PERFORM ZF_INSERE_BDC USING:
            'SAPLKACB'  '0002' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '/00'.
        ENDIF.


*
*        'SAPMF05A'  '0100' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '/00',
*        SPACE SPACE 'BKPF-BLDAT'  WL_DATA,
*        SPACE SPACE 'BKPF-BLART'  'VC',
*        SPACE SPACE 'BKPF-BUKRS'  P_BUKRS,
*        SPACE SPACE 'BKPF-BUDAT'  WL_DATA,
*        SPACE SPACE 'BKPF-MONAT'  P_ALV-DT_AVAL+4(2),
*        SPACE SPACE 'BKPF-WAERS'  WG_WAERS,
*        SPACE SPACE 'BKPF-XBLNR'  P_ALV-RESULTADO_C,
*        SPACE SPACE 'BKPF-BKTXT'  WL_BKTXT,
*        SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS,
*        SPACE SPACE 'RF05A-NEWKO'  P_ALV-KUNNR,
*
*        'SAPMF05A'  '0301' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '=ZK',
*        SPACE SPACE 'BSEG-WRBTR'  WL_VLR_VARIACAO,
*        SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
*        SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
*        SPACE SPACE 'BSEG-ZTERM'  'Z001',
*        SPACE SPACE 'BSEG-ZBD1T'  '0',
**      SPACE SPACE 'BSEG-ZFBDT'  '31.01.2010',
*        SPACE SPACE 'BSEG-ZLSPR'  'A',
*        SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
*        SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
*
*        'SAPMF05A'  '0331' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '/00',
*        SPACE SPACE 'BSEG-DMBE2'  WL_DMBE2,
**      SPACE SPACE 'BSEG-DMBE3'  '93,98',
*        SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
*        SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2,
*
*        'SAPMF05A'  '0300' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '=ZK',
*        SPACE SPACE 'BSEG-WRBTR'  WL_VLR_VARIACAO,
*        SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
*        SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
*        SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
**        SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
*
*        'SAPLKACB'  '0002' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '/00',
*
*        'SAPMF05A'  '0330' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '=BU',
*        SPACE SPACE 'BSEG-DMBE2'  WL_DMBE2.
      WHEN '4'.

        IF ( P_ALV-VLR_VARIACAO < 0 AND P_ALV-BSCHL = '19' )
           OR
           ( P_ALV-VLR_VARIACAO < 0 AND P_ALV-BSCHL = '09' ).
          WL_NEWBS = '09'.
          WL_NEWBS2 = '50'.
          WL_NEWKO2 = WA_T030H-LHBEW.

        ENDIF.
        IF ( P_ALV-VLR_VARIACAO > 0 AND P_ALV-BSCHL = '19' )
            OR
           ( P_ALV-VLR_VARIACAO > 0 AND P_ALV-BSCHL = '09' ).
          WL_NEWBS  = '19'.
          WL_NEWBS2 = '40'.
          WL_NEWKO2 = WA_T030H-LSBEW.

        ENDIF.
        IF P_ALV-STATUS = ICON_RED_LIGHT.
          IF P_ALV-VLR_VARIACAO > 0 AND P_ALV-UMSKZ <> SPACE.
            WL_NEWBS = '19'.                                "'09'.
            WL_NEWBS2 = '40'.
*            wl_newko2 = wa_t030h-lsbew.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LSBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO > 0.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LSBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO < 0 AND P_ALV-UMSKZ <> SPACE.
            WL_NEWBS  = '09'.                               "'19'.
            WL_NEWBS2 = '50'.
*            wl_newko2 = wa_t030h-lhbew.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LHBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO < 0.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LHBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ENDIF.
        ENDIF.

        " conta secundaria
        SELECT SINGLE BEWAR
          FROM ZFIT0030
          INTO WL_BEWAR2
          WHERE HKONT	=	WL_NEWKO2
          AND   COND  IN ('C','CV').

        IF SY-SUBRC NE 0.
          SELECT SINGLE BEWAR
            FROM ZFIT0030
            INTO WL_BEWAR2
            WHERE HKONT	=	WL_NEWKO2.
        ENDIF.

        DATA: WL_TELA(4).

        IF O_ALV-UMSKZ = 'N' OR
           O_ALV-UMSKZ = 'A' OR
           O_ALV-UMSKZ = '4' OR
           O_ALV-UMSKZ = 'D' OR
           O_ALV-UMSKZ = 'M' OR
           O_ALV-UMSKZ = 'Y' OR
           O_ALV-UMSKZ = 'T' OR
           O_ALV-UMSKZ = 'L' OR
           O_ALV-UMSKZ = '7' OR
           O_ALV-UMSKZ = '1'.
          WL_TELA = '0304'.
        ELSE.
          WL_TELA = '0303'.
        ENDIF.
        PERFORM ZF_INSERE_BDC USING:
  'SAPMF05A'  '0100' SPACE SPACE,
  SPACE SPACE 'BDC_OKCODE'  '/00',
  SPACE SPACE 'BKPF-BLDAT'  WL_DATA,
  SPACE SPACE 'BKPF-BLART'  'VC',
  SPACE SPACE 'BKPF-BUKRS'  P_BUKRS,
  SPACE SPACE 'BKPF-BUDAT'  WL_DATA,
  SPACE SPACE 'BKPF-MONAT'  P_ALV-DT_AVAL+4(2),
  SPACE SPACE 'BKPF-WAERS'  WG_WAERS,
  SPACE SPACE 'BKPF-XBLNR'  P_ALV-RESULTADO_C,
  SPACE SPACE 'BKPF-BKTXT'  WL_BKTXT,
  SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS,
  SPACE SPACE 'RF05A-NEWKO'  P_ALV-KUNNR,
  SPACE SPACE 'RF05A-NEWUM'  P_ALV-UMSKZ.

        IF WL_VBUND IS INITIAL AND WL_BEWAR IS INITIAL.
          IF WL_TELA = '0303'.
            PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  WL_TELA SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '/00',
            SPACE SPACE 'BSEG-WRBTR'  '0,01',
            SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
            SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
            SPACE SPACE 'BSEG-ZFBDT'  WL_DATA_AVAL,
            SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
            SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
            SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
            SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2.

          ELSE.

            IF ( O_ALV-UMSKZ = 'T' OR
                 O_ALV-UMSKZ = '4' OR
                 O_ALV-UMSKZ = '7'    ) AND
                 WL_NEWBS NE '09'.
              PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  WL_TELA SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '/00',
            SPACE SPACE 'BSEG-WRBTR'  '0,01',
            SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
            SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
            SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
            SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
            SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
            SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2.

            ELSE.
              PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  WL_TELA SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '/00',
            SPACE SPACE 'BSEG-WRBTR'  '0,01',
            SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
            SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
            SPACE SPACE 'BSEG-ZFBDT'  WL_DATA_AVAL,
            SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
            SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
            SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
            SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2.

            ENDIF.
          ENDIF.
        ENDIF.

        IF   '40_50' CS WL_NEWBS2 AND ( WL_VBUND IS NOT INITIAL OR WL_BEWAR IS NOT INITIAL ).
          PERFORM ZF_INSERE_BDC USING:
          'SAPMF05A'  '0304' SPACE SPACE,
          SPACE SPACE 'BDC_OKCODE'  '=ZK',
          SPACE SPACE 'BSEG-WRBTR'  '0,01',
          SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
          SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO.
          IF  ( WL_NEWBS = '09' AND '1_4_6_7_9_A_C_D_X_Y_0_E_H_L_N_U_Z' CS O_ALV-UMSKZ ) OR
              ( WL_NEWBS = '19' AND 'A_D_C_E_H_L_N_U_Z' CS O_ALV-UMSKZ ) OR
              ( '0018_0023' CS P_BUKRS  AND WL_NEWBS = '19' AND '1_A_D_C_E_H_L_N_U_Z' CS O_ALV-UMSKZ ) .
            PERFORM ZF_INSERE_BDC USING:
            SPACE SPACE 'BSEG-ZFBDT'  WL_DATA_AVAL.
          ENDIF.
          PERFORM ZF_INSERE_BDC USING:
          SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
          SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.

          PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  '0331' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '/00',
            "space space 'BSEG-KKBER'  'MAGI',
            SPACE SPACE 'BSEG-DMBE3'   WL_VLR_VARIACAO,
            SPACE SPACE 'BSEG-BEWAR'   WL_BEWAR,
            SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
            SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2.

          PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  '0300' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '=COBL_MORE',
            SPACE SPACE 'BSEG-WRBTR'  '0,01',
            SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
            "space space 'BSEG-TXJCD'
            SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
            SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.

          PERFORM ZF_INSERE_BDC USING:
            'SAPLKACB'  '0002' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '=ENTE',
            SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
            SPACE SPACE 'COBL-RMVCT'  WL_BEWAR.

          PERFORM ZF_INSERE_BDC USING:
              'SAPMF05A'  '0300' SPACE SPACE,
              SPACE SPACE 'BDC_OKCODE'  '=ZK',
              SPACE SPACE 'BSEG-WRBTR'  '0,01',
              SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
              SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
              SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.

          IF WL_BEWAR IS NOT INITIAL.
            PERFORM ZF_INSERE_BDC USING:
              'SAPLKACB'  '0002' SPACE SPACE,
              SPACE SPACE 'BDC_OKCODE'  '=ENTE',
              SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
              SPACE SPACE 'COBL-RMVCT'  WL_BEWAR.
          ELSE.
            PERFORM ZF_INSERE_BDC USING:
            'SAPLKACB'  '0002' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '=ENTE',
            SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
            SPACE SPACE 'COBL-RMVCT'  WL_BEWAR2.
          ENDIF.


          PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  '0330' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '=BU',
            SPACE SPACE 'BSEG-DMBE3'   WL_VLR_VARIACAO,
            SPACE SPACE 'BSEG-VBUND'   WL_VBUND.

        ELSE.
          PERFORM ZF_INSERE_BDC USING:
            'SAPMF05A'  '0300' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '=BU',
            SPACE SPACE 'BSEG-WRBTR'  '0,01',
            SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
            SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
            SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
            SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.

          IF WL_BEWAR2 IS INITIAL.
            PERFORM ZF_INSERE_BDC USING:
            'SAPLKACB'  '0002' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '/00'.
          ELSE.
            PERFORM ZF_INSERE_BDC USING:
            'SAPLKACB'  '0002' SPACE SPACE,
            SPACE SPACE 'BDC_OKCODE'  '=ENTE',
            SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
            SPACE SPACE 'COBL-RMVCT'  WL_BEWAR2.
          ENDIF.

        ENDIF.



        " Versão original
*        PERFORM ZF_INSERE_BDC USING:
*  'SAPMF05A'  '0100' SPACE SPACE,
*  SPACE SPACE 'BDC_OKCODE'  '/00',
*  SPACE SPACE 'BKPF-BLDAT'  WL_DATA,
*  SPACE SPACE 'BKPF-BLART'  'VC',
*  SPACE SPACE 'BKPF-BUKRS'  P_BUKRS,
*  SPACE SPACE 'BKPF-BUDAT'  WL_DATA,
*  SPACE SPACE 'BKPF-MONAT'  P_ALV-DT_AVAL+4(2),
*  SPACE SPACE 'BKPF-WAERS'  WG_WAERS,
*  SPACE SPACE 'BKPF-XBLNR'  P_ALV-RESULTADO_C,
*  SPACE SPACE 'BKPF-BKTXT'  WL_BKTXT,
*  SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS,
*  SPACE SPACE 'RF05A-NEWKO'  P_ALV-KUNNR,
*  SPACE SPACE 'RF05A-NEWUM'  P_ALV-UMSKZ.
*
*
*        IF WL_TELA = '0303'.
*          PERFORM ZF_INSERE_BDC USING:
*          'SAPMF05A'  WL_TELA SPACE SPACE,
*          SPACE SPACE 'BDC_OKCODE'  '/00',
*          SPACE SPACE 'BSEG-WRBTR'  '0,01',
*          SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
*          SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
*          SPACE SPACE 'BSEG-ZFBDT'  WL_DATA_AVAL,
*          SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
*          SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
*          SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
*          SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2.
*
*        ELSE.
*
*          IF ( O_ALV-UMSKZ = 'T' OR
*               O_ALV-UMSKZ = '4' OR
*               O_ALV-UMSKZ = '7'    ) AND
*               WL_NEWBS NE '09'.
*            PERFORM ZF_INSERE_BDC USING:
*          'SAPMF05A'  WL_TELA SPACE SPACE,
*          SPACE SPACE 'BDC_OKCODE'  '/00',
*          SPACE SPACE 'BSEG-WRBTR'  '0,01',
*          SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
*          SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
*          SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
*          SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
*          SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
*          SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2.
*
*          ELSE.
*            PERFORM ZF_INSERE_BDC USING:
*          'SAPMF05A'  WL_TELA SPACE SPACE,
*          SPACE SPACE 'BDC_OKCODE'  '/00',
*          SPACE SPACE 'BSEG-WRBTR'  '0,01',
*          SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
*          SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
*          SPACE SPACE 'BSEG-ZFBDT'  WL_DATA_AVAL,
*          SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
*          SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
*          SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
*          SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2.
*
*          ENDIF.
*        ENDIF.
*
*        PERFORM ZF_INSERE_BDC USING:
*          'SAPMF05A'  '0300' SPACE SPACE,
*          SPACE SPACE 'BDC_OKCODE'  '=BU',
*          SPACE SPACE 'BSEG-WRBTR'  '0,01',
*          SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
*          SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
*          SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
*          SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
*
*        'SAPLKACB'  '0002' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '/00'.
*********************************************************************
*
*
*        'SAPMF05A'  '0100' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '/00',
*        SPACE SPACE 'BKPF-BLDAT'  WL_DATA,
*        SPACE SPACE 'BKPF-BLART'  'VC',
*        SPACE SPACE 'BKPF-BUKRS'  P_BUKRS,
*        SPACE SPACE 'BKPF-BUDAT'  WL_DATA,
*        SPACE SPACE 'BKPF-MONAT'  P_ALV-DT_AVAL+4(2),
*        SPACE SPACE 'BKPF-WAERS'  WG_WAERS,
*        SPACE SPACE 'BKPF-XBLNR'  P_ALV-RESULTADO_C,
*        SPACE SPACE 'BKPF-BKTXT'  WL_BKTXT,
*        SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS,
*        SPACE SPACE 'RF05A-NEWKO'  P_ALV-KUNNR,
*        SPACE SPACE 'RF05A-NEWUM' P_ALV-UMSKZ,
*
*        'SAPMF05A'  '0304' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '=ZK',
*        SPACE SPACE 'BSEG-WRBTR'  WL_VLR_VARIACAO,
*        SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
*        SPACE SPACE 'BSEG-GSBER'  WL_DIVISAO,
**      SPACE SPACE 'BSEG-ZTERM'  'Z001',
**      SPACE SPACE 'BSEG-ZBD1T'  '0',
*        SPACE SPACE 'BSEG-ZFBDT'  WL_DATA_AVAL,
*        SPACE SPACE 'BSEG-ZLSPR'  'A',
*        SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
*        SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
*
*        'SAPMF05A'  '0331' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '/00',
*        SPACE SPACE 'BSEG-DMBE2'  WL_DMBE2,
**      SPACE SPACE 'BSEG-DMBE3'  '93,98',
*        SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
*        SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2,
*
*        'SAPMF05A'  '0300' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '=ZK',
*        SPACE SPACE 'BSEG-WRBTR'  WL_VLR_VARIACAO,
*        SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
*        SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
*        SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
**        SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
*
*        'SAPLKACB'  '0002' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '/00',
*
*        'SAPMF05A'  '0330' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '=BU',
*        SPACE SPACE 'BSEG-DMBE2'  WL_DMBE2.

      WHEN '5'.
        IF ( P_ALV-VLR_VARIACAO > 0 AND ( P_ALV-BSCHL = '40' OR
                                          P_ALV-BSCHL = '86' ) )
           OR
           ( P_ALV-VLR_VARIACAO > 0 AND ( P_ALV-BSCHL = '50' OR
                                          P_ALV-BSCHL = '96' ) ).
          WL_NEWBS  = '50'.
          WL_NEWBS2 = '40'.
          WL_NEWKO2 = WA_T030H-LSBEW.

        ENDIF.
        IF ( P_ALV-VLR_VARIACAO < 0 AND ( P_ALV-BSCHL = '50' OR
                                          P_ALV-BSCHL = '96' ) )
          OR
           ( P_ALV-VLR_VARIACAO < 0 AND ( P_ALV-BSCHL = '40' OR
                                          P_ALV-BSCHL = '86' ) ).
          WL_NEWBS = '40'.
          WL_NEWBS2 = '50'.
          WL_NEWKO2 = WA_T030H-LHBEW.

        ENDIF.
        IF P_ALV-STATUS = ICON_RED_LIGHT.
          IF P_ALV-VLR_VARIACAO > 0 AND P_ALV-UMSKZ <> SPACE.
            WL_NEWBS = '50'.                                "'40'.
            WL_NEWBS2 = '40'.                               "'50'.
*            wl_newko2 = wa_t030h-lsbew.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LSBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO > 0.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LSBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO < 0 AND P_ALV-UMSKZ <> SPACE.
            WL_NEWBS  = '40'.                               "'50'.
            WL_NEWBS2 = '50'.                               "'40'.
*              wl_newko2 = wa_t030h-lhbew.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LHBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ELSEIF P_ALV-VLR_VARIACAO < 0.
**        Caso seja uma reversão
            CLEAR: WA_0025.
            READ TABLE T_0025 INTO WA_0025
              WITH KEY SAKNR_P = WA_T030H-LHBEW
                         BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
            ELSE.
              CLEAR: WL_NEWKO2.
            ENDIF.
          ENDIF.
        ENDIF.

        " conta secundaria
        SELECT SINGLE BEWAR
          FROM ZFIT0030
          INTO WL_BEWAR2
          WHERE HKONT	=	WL_NEWKO2
          AND   COND  IN ('C','CV').

        IF SY-SUBRC NE 0.
          SELECT SINGLE BEWAR
            FROM ZFIT0030
            INTO WL_BEWAR2
            WHERE HKONT	=	WL_NEWKO2.
        ENDIF.

        PERFORM ZF_INSERE_BDC USING:
  'SAPMF05A'  '0100' SPACE SPACE,
  SPACE SPACE 'BDC_OKCODE'  '/00',
  SPACE SPACE 'BKPF-BLDAT'  WL_DATA,
  SPACE SPACE 'BKPF-BLART'  'VC',
  SPACE SPACE 'BKPF-BUKRS'  P_BUKRS,
  SPACE SPACE 'BKPF-BUDAT'  WL_DATA,
  SPACE SPACE 'BKPF-MONAT'  P_ALV-DT_AVAL+4(2),
  SPACE SPACE 'BKPF-WAERS'  WG_WAERS,
  SPACE SPACE 'BKPF-XBLNR'  P_ALV-RESULTADO_C,
  SPACE SPACE 'BKPF-BKTXT'  WL_BKTXT,
  SPACE SPACE 'RF05A-NEWBS'	WL_NEWBS,
  SPACE SPACE 'RF05A-NEWKO'	P_ALV-HKONT,
  'SAPMF05A'  '0300' SPACE SPACE,
  SPACE SPACE 'BDC_OKCODE'  '/00',
  SPACE SPACE 'BSEG-WRBTR'  '0,01',
  SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
  SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
  SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
  SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
  SPACE SPACE 'RF05A-NEWBS'	WL_NEWBS2,
  SPACE SPACE 'RF05A-NEWKO'	WL_NEWKO2.
        IF P_ALV-UMSKZ <> SPACE.
          PERFORM ZF_INSERE_BDC USING:
              SPACE SPACE 'COBL-GSBER'  WL_DIVISAO.

        ELSE.
          PERFORM ZF_INSERE_BDC USING:
          'SAPLKACB'  '0002' SPACE SPACE,
          SPACE SPACE 'BDC_OKCODE'  '/00'.
        ENDIF.

        PERFORM ZF_INSERE_BDC USING:
        'SAPMF05A'  '0300' SPACE SPACE,
        SPACE SPACE 'BDC_OKCODE'  '=BU',
        SPACE SPACE 'BSEG-WRBTR'  '0,01',
        SPACE SPACE 'BSEG-DMBTR'  WL_VLR_VARIACAO,
        SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
        SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
        SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.
*SPACE SPACE 'COBL-GSBER'	WL_DIVISAO.
        IF WL_BEWAR2 IS INITIAL.
          PERFORM ZF_INSERE_BDC USING:
          'SAPLKACB'  '0002' SPACE SPACE,
          SPACE SPACE 'BDC_OKCODE'  '/00'.
        ELSE.
          PERFORM ZF_INSERE_BDC USING:
          'SAPLKACB'  '0002' SPACE SPACE,
          SPACE SPACE 'BDC_OKCODE'  '=ENTE',
          SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
          SPACE SPACE 'COBL-RMVCT'  WL_BEWAR2.
        ENDIF.

*        'SAPMF05A'  '0100' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '/00',
*        SPACE SPACE 'BKPF-BLDAT'  WL_DATA,
*        SPACE SPACE 'BKPF-BLART'  'VC',
*        SPACE SPACE 'BKPF-BUKRS'  P_BUKRS,
*        SPACE SPACE 'BKPF-BUDAT'  WL_DATA,
*        SPACE SPACE 'BKPF-MONAT'  P_ALV-DT_AVAL+4(2),
*        SPACE SPACE 'BKPF-WAERS'  WG_WAERS,
*        SPACE SPACE 'BKPF-XBLNR'  P_ALV-RESULTADO_C,
*        SPACE SPACE 'BKPF-BKTXT'  WL_BKTXT,
*        SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS,
*        SPACE SPACE 'RF05A-NEWKO'  P_ALV-HKONT,
**      SPACE SPACE 'RF05A-NEWUM' P_ALV-UMSKZ,
*
*        'SAPMF05A'  '0300' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '=ZK',
*        SPACE SPACE 'BSEG-WRBTR'  WL_VLR_VARIACAO,
*        SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
*        SPACE SPACE 'BSEG-SGTXT'  P_SGTXT,
*        SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO.
**      SPACE SPACE 'BSEG-ZTERM'  'Z001',
**      SPACE SPACE 'BSEG-ZBD1T'  '0',
*        IF P_ALV-UMSKZ <> SPACE.
*          PERFORM ZF_INSERE_BDC USING:
*            SPACE SPACE 'COBL-GSBER'  WL_DIVISAO,
*            SPACE SPACE 'BSEG-ZFBDT'  WL_DATA_AVAL.
*
*        ELSE.
*          PERFORM ZF_INSERE_BDC USING:
*            'SAPLKACB'  '0002' SPACE SPACE,
*            SPACE SPACE 'BDC_OKCODE'  '/00'.
*        ENDIF.
*
*        PERFORM ZF_INSERE_BDC USING:
**      SPACE SPACE 'BSEG-ZLSPR'  'A',
*        'SAPMF05A'  '0330' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '/00',
*        SPACE SPACE 'BSEG-DMBE2'  WL_DMBE2,
**      SPACE SPACE 'BSEG-DMBE3'  '93,98',
*        SPACE SPACE 'RF05A-NEWBS'  WL_NEWBS2,
*        SPACE SPACE 'RF05A-NEWKO'  WL_NEWKO2,
*
*        'SAPMF05A'  '0300' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '=ZK',
*        SPACE SPACE 'BSEG-WRBTR'  WL_VLR_VARIACAO,
*        SPACE SPACE 'BSEG-BUPLA'  WL_DIVISAO,
*        SPACE SPACE 'BSEG-ZUONR'  P_ALV-BELNR,
*        SPACE SPACE 'BSEG-SGTXT'  P_SGTXT.
*
*        IF P_ALV-UMSKZ <> SPACE.
*          PERFORM ZF_INSERE_BDC USING:
*            SPACE SPACE 'COBL-GSBER'  WL_DIVISAO.
*        ENDIF.
*
*        PERFORM ZF_INSERE_BDC USING:
*        'SAPLKACB'  '0002' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '/00',
*
*        'SAPMF05A'  '0330' SPACE SPACE,
*        SPACE SPACE 'BDC_OKCODE'  '=BU',
*        SPACE SPACE 'BSEG-DMBE2'  WL_DMBE2.
      WHEN OTHERS.
    ENDCASE.

    CLEAR P_ERRO.
    PERFORM ZF_CALL_TRANSACTION USING 'F-02' CHANGING P_ERRO.
    IF NOT WL_DESCRICAO IS INITIAL.
      CLEAR P_SGTXT.
    ENDIF.

  ENDIF.

  CLEAR: IT_BDCDATA, IT_BDCDATA[].

ENDFORM.                    "ZF_MONTA_BATCH


*&---------------------------------------------------------------------*
*&      Form  ZF_INSERE_BDC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PROG     text
*      -->P_TELA     text
*      -->P_FNAM     text
*      -->P_FVAL     text
*----------------------------------------------------------------------*
FORM ZF_INSERE_BDC USING P_PROG P_TELA P_FNAM P_FVAL.
  IF NOT P_TELA IS INITIAL.
    IT_BDCDATA-PROGRAM  = P_PROG.
    IT_BDCDATA-DYNPRO   = P_TELA.
    IT_BDCDATA-DYNBEGIN = 'X'.
  ELSE.
    IT_BDCDATA-FNAM = P_FNAM.
    IT_BDCDATA-FVAL = P_FVAL.
  ENDIF.
  APPEND IT_BDCDATA.
  CLEAR IT_BDCDATA.
ENDFORM.                    "ZF_INSERE_BDC


*&---------------------------------------------------------------------*
*&      Form  ZF_CALL_TRANSACTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_TRANS    text
*----------------------------------------------------------------------*
FORM ZF_CALL_TRANSACTION USING P_TRANS CHANGING P_ERRO.
  DATA: BEGIN OF IT_MSG OCCURS 0.
          INCLUDE STRUCTURE BDCMSGCOLL.
  DATA: END OF IT_MSG.
  DATA: WL_MODE(1).

  CONSTANTS: C_MSGID LIKE IT_MSG-MSGID VALUE 'F5',
             C_MSGNR LIKE IT_MSG-MSGNR VALUE '312'.


  WL_MODE = 'E'.
  CALL TRANSACTION P_TRANS USING IT_BDCDATA
        MODE WL_MODE
        MESSAGES INTO IT_MSG.

  READ TABLE IT_MSG WITH KEY MSGTYP = 'A'.
  IF SY-SUBRC = 0.
    P_ERRO = 'X'.
  ELSE.
    READ TABLE IT_MSG WITH KEY MSGTYP = 'E'.
    IF SY-SUBRC = 0.
      P_ERRO = 'X'.
    ENDIF.
  ENDIF.

  CLEAR WG_DOCUMENTO.
  READ TABLE IT_MSG WITH KEY MSGID = C_MSGID
                             MSGNR = C_MSGNR
                             MSGTYP = 'S'.
  IF SY-SUBRC = 0.
    MOVE IT_MSG-MSGV1 TO WG_DOCUMENTO.

  ENDIF.


ENDFORM.                    "ZF_CALL_TRANSACTION


*&---------------------------------------------------------------------*
*&      Module  status_9001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*

MODULE STATUS_9001 OUTPUT.
  DATA: W_DT TYPE SY-DATUM,
        TABIX TYPE SY-TABIX,
        W_DTZIB TYPE ZGL012_AVM-DT_AVAL.

  PERFORM F_PF_STATUS_NOVO .

  IF CL_CONTAINER_95 IS INITIAL.

***    CREATE OBJECT CL_CONTAINER
***      EXPORTING
***        CONTAINER_NAME = 'CONTAINER'.
    CREATE OBJECT CL_CONTAINER_95
      EXPORTING
        SIDE  = '4'
        RATIO = '80'.

  ENDIF.

  IF NOT CL_GRID IS INITIAL.
    PERFORM ZF_ALV_HEADER USING '2'.
    CALL METHOD CL_GRID->REFRESH_TABLE_DISPLAY
*      EXPORTING
*        IS_STABLE      =
*        I_SOFT_REFRESH =
*      EXCEPTIONS
*        FINISHED       = 1
*        OTHERS         = 2
            .
    IF SY-SUBRC <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*                WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ELSE.
    CREATE OBJECT OBJ_DYNDOC_ID
      EXPORTING
*    STYLE  =
*    BACKGROUND_COLOR =
*    BDS_STYLESHEET =
        NO_MARGINS = 'X'.

    PERFORM ZF_ALV_HEADER USING '1'.


    IF EDITCONTAINER IS INITIAL .
      CREATE OBJECT EDITCONTAINER
        EXPORTING
          CONTAINER_NAME = 'HEADER'.
    ENDIF .

    CALL METHOD OBJ_DYNDOC_ID->MERGE_DOCUMENT.

    CALL METHOD OBJ_DYNDOC_ID->DISPLAY_DOCUMENT
      EXPORTING
        REUSE_CONTROL      = 'X'
        PARENT             = EDITCONTAINER
      EXCEPTIONS
        HTML_DISPLAY_ERROR = 1.


    CREATE OBJECT CL_GRID
       EXPORTING
         I_PARENT      = CL_CONTAINER_95
*         I_PARENT      = CL_CONTAINER
         I_APPL_EVENTS = 'X'.


    CALL METHOD CL_GRID->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.


    IF O_ALV[] IS NOT INITIAL.
      SELECT BUKRS LIFNR AUGDT AUGBL BELNR BUZEI
            FROM BSAK
            INTO TABLE IT_BSAK_LOOP
            FOR ALL ENTRIES IN O_ALV
            WHERE BUKRS = O_ALV-BUKRS
            AND   LIFNR = O_ALV-LIFNR
            AND   AUGDT GE P_BUDAT
            AND   BELNR = O_ALV-BELNR
            AND   BUZEI = O_ALV-BUZEI.

      SELECT *
        FROM ZGL012_AVM
        INTO TABLE IT_ZGL012_AVM_LOOP1
        FOR ALL ENTRIES IN O_ALV
        WHERE BUKRS = O_ALV-BUKRS
        AND   BELNR = O_ALV-BELNR
        AND   BUZEI = O_ALV-BUZEI.
    ENDIF.

    DELETE IT_ZGL012_AVM_LOOP1 WHERE  DT_AVAL => P_BUDAT.

    SORT: IT_ZGL012_AVM_LOOP1 BY BUKRS BELNR BUZEI DT_AVAL,
          IT_BSAK_LOOP        BY BUKRS LIFNR BELNR BUZEI.

    REFRESH IT_ZGL012_AVM_LOOP2.


*Limpa os campos que tem augbl = belnr.
*    break abap.
    LOOP AT O_ALV.
      TABIX = SY-TABIX.
      IF NOT O_ALV-AUGBL IS INITIAL.
*        SELECT SINGLE DT_AVAL FROM ZGL012_AVM  INTO W_DT
*          WHERE BUKRS = O_ALV-BUKRS AND
*                DT_AVAL < P_BUDAT AND
*                BELNR = O_ALV-BELNR AND
*                BUZEI = O_ALV-BUZEI.
        READ TABLE IT_ZGL012_AVM_LOOP1 INTO WA_ZGL012_AVM_LOOP "ALRS
          WITH KEY BUKRS = O_ALV-BUKRS
                   BELNR = O_ALV-BELNR
                   BUZEI = O_ALV-BUZEI BINARY SEARCH.
        IF SY-SUBRC = 0.
          MOVE  WA_ZGL012_AVM_LOOP-DT_AVAL TO W_DT.
        ENDIF.
        IF W_DT < P_BUDAT.
          IF SY-SUBRC = 0.
*            SELECT SINGLE AUGDT FROM BSAK INTO W_DT
*              WHERE BUKRS = O_ALV-BUKRS AND
*                    LIFNR = O_ALV-LIFNR AND
*                    AUGDT GE P_BUDAT AND
*                    BELNR = O_ALV-BELNR AND
*                    BUZEI = O_ALV-BUZEI.
            READ TABLE IT_BSAK_LOOP INTO WA_BSAK
               WITH KEY  BUKRS = O_ALV-BUKRS
                         LIFNR = O_ALV-LIFNR
                         BELNR = O_ALV-BELNR
                         BUZEI = O_ALV-BUZEI BINARY SEARCH.
            IF SY-SUBRC = 0.
              MOVE WA_BSAK-AUGDT TO W_DT.
            ENDIF.
          ENDIF.
          IF SY-SUBRC = 0.
*            o_alv-status = icon_led_red.

            O_ALV-VLR_ACUM_MES_ATU = O_ALV-VLR_ATUALIZADO - O_ALV-DMBTR.
            O_ALV-VLR_VARIACAO = O_ALV-VLR_ACUM_MES_ATU - O_ALV-VLR_ACUM_MES_ANT.
*            MODIFY o_alv INDEX sy-tabix.
          ELSE.

*        else.
            CLEAR O_ALV-VLR_ACUM_MES_ATU.
            O_ALV-VLR_VARIACAO = O_ALV-VLR_ACUM_MES_ANT - O_ALV-VLR_ACUM_MES_ATU.
*            MODIFY o_alv INDEX sy-tabix.
          ENDIF.
        ELSE.
          CLEAR O_ALV-VLR_ACUM_MES_ATU.
          O_ALV-VLR_VARIACAO = O_ALV-VLR_ACUM_MES_ANT - O_ALV-VLR_ACUM_MES_ATU.
*          MODIFY o_alv INDEX sy-tabix.
        ENDIF.

      ENDIF.
      IF O_ALV-BELNR = O_ALV-AUGBL.
        DELETE O_ALV INDEX TABIX.
        CONTINUE.
      ENDIF.

      IF NOT O_ALV-AUGDT IS INITIAL.
        "IF O_ALV-AUGDT+4(2) < O_ALV-DT_AVAL+4(2).
        IF O_ALV-AUGDT+0(6) < O_ALV-DT_AVAL+0(6).
          DELETE O_ALV INDEX TABIX.
          CONTINUE.
        ENDIF.
      ENDIF.

      "IF O_ALV-AUGDT+04(2) > O_ALV-BUDAT+4(2).
      IF O_ALV-AUGDT+0(6) > O_ALV-BUDAT+0(6).
        O_ALV-STATUS = ICON_RED_LIGHT.
*        MODIFY o_alv INDEX sy-tabix.
      ENDIF.

      IF NOT O_ALV-DT_LCTO IS INITIAL.
        O_ALV-STATUS = ICON_LED_GREEN.
*        MODIFY o_alv INDEX sy-tabix.
      ENDIF.


      IF NOT O_ALV-AUGDT IS INITIAL.
        O_ALV-VLR_ACUM_MES_ATU = 0.
        O_ALV-VLR_VARIACAO = O_ALV-VLR_ACUM_MES_ATU - O_ALV-VLR_ACUM_MES_ANT.
*        MODIFY o_alv INDEX sy-tabix.
      ENDIF.

      IF O_ALV-VLR_VARIACAO = 0.
        O_ALV-STATUS = ICON_OKAY.
*        MODIFY o_alv.
      ENDIF.

      IF O_ALV-AUGDT > O_ALV-DT_AVAL.
        O_ALV-STATUS = ICON_LED_RED.

        O_ALV-VLR_ACUM_MES_ATU = O_ALV-DMBTR - O_ALV-VLR_ATUALIZADO.
        O_ALV-VLR_VARIACAO = O_ALV-VLR_ACUM_MES_ATU - O_ALV-VLR_ACUM_MES_ANT.
        O_ALV-VLR_ATUALIZADO = O_ALV-DMBE2 * XTX_USD. ".o_alv-tx_fech.


        CLEAR: O_ALV-AUGDT, O_ALV-AUGBL.
*        MODIFY o_alv INDEX sy-tabix.
      ENDIF.

      IF O_ALV-VLR_VARIACAO > 0.                            " 0 AND
*         o_alv-augdt = o_alv-dt_aval.
        O_ALV-RESULTADO_C = 'Despesa'.
      ELSEIF O_ALV-VLR_VARIACAO < 0.
        O_ALV-RESULTADO_C = 'Receita'.
      ELSE.
        CLEAR O_ALV-RESULTADO_C.
      ENDIF.

      IF O_ALV-ESTORNO = 'X'.
        O_ALV-STATUS = ICON_RED_LIGHT.
      ENDIF.


      IF O_ALV-AUGDT IS INITIAL.
        O_ALV-STATUS = ICON_LED_RED.
      ELSE.
        O_ALV-STATUS = ICON_RED_LIGHT.
      ENDIF.


      IF NOT O_ALV-DT_LCTO  IS INITIAL AND
         NOT O_ALV-DOC_LCTO IS INITIAL .
        " O_ALV-STATUS NE ICON_RED_LIGHT. " Se for marcado para reversão não alterar o status
        O_ALV-STATUS = ICON_LED_GREEN.
      ENDIF.

      " checar se lançamento de variação pode ser revertido  05/06/13 alrs
      IF   NOT O_ALV-AUGDT IS INITIAL AND
            O_ALV-DT_LCTO  IS INITIAL AND
            O_ALV-DOC_LCTO IS INITIAL.
        O_ALV-STATUS = ICON_RED_LIGHT.
      ENDIF.

* comentado em 05.03.2015 ALRS a pedido de Cleandra
      " checar se lançamento de variação pode ser revertido  04/07/13 alrs
      IF O_ALV-STATUS = ICON_LED_GREEN.
        IF ( O_ALV-AUGDT IS NOT INITIAL ) AND ( O_ALV-AUGDT LE O_ALV-DT_AVAL ).
          O_ALV-STATUS = ICON_RED_LIGHT.
        ENDIF.
      ENDIF.

      READ TABLE IT_ZIB_CONTABIL_ERR INTO WA_ZIB_CONTABIL_ERR WITH KEY OBJ_KEY = O_ALV-OBJ_KEY BINARY SEARCH.
      IF SY-SUBRC = 0.
        O_ALV-STATUS = ICON_INCOMPLETE.
      ENDIF.

      IF O_ALV-STATUS  NE ICON_RED_LIGHT.
        READ TABLE IT_ZIB_CONTABIL_CHV INTO WA_ZIB_CONTABIL_CHV WITH KEY OBJ_KEY = O_ALV-OBJ_KEY BINARY SEARCH.
        IF SY-SUBRC = 0.
          IF O_ALV-ESTORNO = 'X'.
            O_ALV-STATUS = ICON_LED_RED.
          ELSE.
            CONCATENATE WA_ZIB_CONTABIL_CHV-BLDAT+6(4) WA_ZIB_CONTABIL_CHV-BLDAT+3(2) WA_ZIB_CONTABIL_CHV-BLDAT+0(2) INTO W_DTZIB.
            IF W_DTZIB+0(6) < O_ALV-DT_AVAL+0(6).
              O_ALV-STATUS = ICON_LED_RED.
            ELSE.
              O_ALV-STATUS = ICON_LED_GREEN.
            ENDIF.
            MOVE-CORRESPONDING O_ALV TO WA_ZGL012_AVM.
            MOVE: WA_ZIB_CONTABIL_CHV-BELNR TO  WA_ZGL012_AVM-DOC_LCTO.
            MOVE: P_BUDAT  TO WA_ZGL012_AVM-DT_LCTO.

            IF NOT  WA_ZGL012_AVM-AUGBL IS INITIAL.
              WA_ZGL012_AVM-DT_LCTO = WA_ZGL012_AVM-AUGDT.
            ENDIF.
            MODIFY ZGL012_AVM FROM WA_ZGL012_AVM.
            IF SY-SUBRC = 0.
              COMMIT WORK.
            ENDIF.

          ENDIF.
        ELSEIF O_ALV-DOC_LCTO IS NOT INITIAL.
          MOVE-CORRESPONDING O_ALV TO WA_ZGL012_AVM.
          CLEAR: WA_ZGL012_AVM-DOC_LCTO,WA_ZGL012_AVM-DT_LCTO.
          MODIFY ZGL012_AVM FROM WA_ZGL012_AVM.
          IF SY-SUBRC = 0.
            COMMIT WORK.
          ENDIF.

        ENDIF.
      ENDIF.

      IF O_ALV-VLR_VARIACAO IS INITIAL.
        O_ALV-STATUS = ICON_OKAY.
      ENDIF.

      IF O_ALV-ST_REV = 'X' AND O_ALV-ESTORNO NE 'X'.
        O_ALV-STATUS = ICON_LED_GREEN.
      ENDIF.

      MODIFY O_ALV INDEX TABIX.
      CLEAR: WA_ZGL012_AVM.
    ENDLOOP.

    REFRESH : IT_ZGL012_AVM_LOOP1, IT_ZGL012_AVM_LOOP2,IT_BSAK_LOOP.

*    IF O_ALV[] IS INITIAL.
*      MESSAGE E398(00) WITH 'Nenhum dado encontrado. '.
*      STOP.
*    ENDIF.
*Limpa os duplicados comparando BELNR e BSCHL caso iguais manter o registro que possuir AUGBL preenchido
    SORT O_ALV BY BELNR BUZEI BSCHL DELE ASCENDING AUGBL DT_LCTO DOC_LCTO DESCENDING.
*    break abap.
    DELETE ADJACENT DUPLICATES FROM O_ALV COMPARING BELNR BUZEI BSCHL.

    DELETE O_ALV WHERE AUGDT(6) NE P_BUDAT(6)
                   AND AUGDT IS NOT INITIAL.

*break abap.

    CALL METHOD CL_GRID->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_VARIANT      = WG_X_VARIANT
        I_SAVE          = WG_SAVE
        IS_LAYOUT       = WA_LAYOUT
      CHANGING
        IT_FIELDCATALOG = IT_FIELDCAT[]
        IT_SORT         = I_SORT[]
        IT_OUTTAB       = O_ALV[].


    CREATE OBJECT EVENT_RECEIVER.
    SET HANDLER EVENT_RECEIVER->CATCH_HOTSPOT              FOR CL_GRID.
    SET HANDLER EVENT_RECEIVER->HANDLE_TOP_OF_PAGE FOR CL_GRID.

*    CALL METHOD CL_GRID->LIST_PROCESSING_EVENTS
*    EXPORTING
*    I_EVENT_NAME = 'TOP_OF_PAGE'
*    I_DYNDOC_ID = OBJ_DYNDOC_ID
*    I_TABLE_INDEX = 1.

  ENDIF.



ENDMODULE.                 " status_9001  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  user_command_9001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9001 INPUT.

  DATA: V_VALID(1) TYPE C,
        INDROW TYPE LVC_T_ROW,
        W_IND TYPE LVC_T_ROW WITH HEADER LINE,
        V_MOD(1) TYPE C,
        WL_TABIX TYPE SY-TABIX,
        WL_ERRO(1).


  IF NOT CL_GRID IS INITIAL.
    CALL METHOD CL_GRID->DISPATCH
      EXPORTING
        CARGO         = SY-UCOMM
        EVENTID       = 19
        IS_SHELLEVENT = ' '.

    IF SY-UCOMM IS INITIAL.
      CALL METHOD CL_GRID->REFRESH_TABLE_DISPLAY
        EXPORTING
          IS_STABLE = IS_STABLE.
    ENDIF.
  ENDIF.

  CASE SY-UCOMM.
    WHEN 'BACK' OR 'UP'.
      REFRESH O_ALV.
      CALL METHOD CL_GRID->REFRESH_TABLE_DISPLAY.
      LEAVE TO SCREEN 0.

    WHEN 'CANCEL'.
      LEAVE PROGRAM.

    WHEN '&REFRESH'.
      PERFORM ATUALIZA_TELA.
    WHEN 'LANCAR'.
      CHECK P_V_LANC IS INITIAL.
      IF T_T030H[] IS INITIAL.
        SELECT KTOPL HKONT WAERS CURTP LSBEW LHBEW FROM T030H
          INTO TABLE T_T030H
          FOR ALL ENTRIES IN O_ALV
          WHERE KTOPL = C_0050 AND
                HKONT = O_ALV-HKONT.
      ENDIF.

      IF T_0025[] IS INITIAL
      AND T_T030H[] IS NOT INITIAL.
        SELECT *
          FROM ZFIT0025
          INTO TABLE T_0025
          FOR ALL ENTRIES IN T_T030H
           WHERE SAKNR_P EQ T_T030H-LSBEW.

        SELECT *
          FROM ZFIT0025
          APPENDING TABLE T_0025
          FOR ALL ENTRIES IN T_T030H
           WHERE SAKNR_P EQ T_T030H-LHBEW.

        SORT: T_0025 BY SAKNR_P.

      ENDIF.

      REFRESH INDROW.
      CALL METHOD CL_GRID->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = INDROW.

      LOOP AT O_ALV.
        O_ALV-MARK = ' '.
        MODIFY O_ALV.
      ENDLOOP.

      LOOP AT INDROW INTO W_IND.
        READ TABLE O_ALV INDEX W_IND-INDEX.
        O_ALV-MARK = 'X'.
        MODIFY O_ALV INDEX W_IND-INDEX.
      ENDLOOP.
      DATA: WL_CONT TYPE I.
      CLEAR: WA_ZGL012_AVM, WL_CONT.
      READ TABLE O_ALV WITH KEY MARK = 'X'
                                STATUS = ICON_OKAY.
      IF SY-SUBRC = 0.
        MESSAGE W398(00) WITH 'Existe registro com valor de variação'
                              'igual a zero. Reveja a seleção.'
                              'linha:'
                              SY-TABIX.
      ELSE.

        LOOP AT O_ALV WHERE MARK = 'X'.
*          IF O_ALV-TRAVA = 'X'.
*            MESSAGE 'Documento original estornado' TYPE 'I'.
*            CONTINUE.
*          ENDIF.
          CHECK
          ( O_ALV-STATUS = ICON_LED_GREEN AND P_E_LANC = 'X')
          OR
          ( ( O_ALV-STATUS = ICON_LED_RED OR O_ALV-STATUS = ICON_RED_LIGHT OR O_ALV-STATUS = ICON_INCOMPLETE )
              AND P_C_LANC = 'X' ).

          WL_TABIX = SY-TABIX.
          CLEAR WL_ST_REV.
          IF O_ALV-STATUS = ICON_RED_LIGHT. "Reversão
            WL_ST_REV = 'X'.
          ENDIF.

          PERFORM ZF_LANCAR CHANGING O_ALV WL_ERRO.

          IF WL_ERRO IS INITIAL. " AND ( NOT WG_DOCUMENTO IS INITIAL ).

            IF P_C_LANC IS INITIAL.
*     No estorno quando terminar de executar gravar nos campos
              CLEAR: O_ALV-DT_LCTO, O_ALV-DOC_LCTO.
              O_ALV-ESTORNO = 'X'.
              O_ALV-STATUS = ICON_LED_RED.
            ELSE.
              CLEAR: O_ALV-ESTORNO.
              O_ALV-STATUS   = ICON_LED_GREEN.
              CLEAR O_ALV-DOC_LCTO.

            ENDIF.

            O_ALV-STATUS = ICON_GENERATE .
            O_ALV-OBJ_KEY = VOBJ_KEY.

            IF WL_ST_REV = 'X'.
              O_ALV-ST_REV = 'X'. "Marcar como reversão OK
            ENDIF.

            MOVE: SY-UNAME TO O_ALV-USNAM,
                  SY-UZEIT TO O_ALV-CPUTM,
                  SY-DATUM TO O_ALV-CPUDT.
            MODIFY O_ALV INDEX WL_TABIX TRANSPORTING DT_LCTO DOC_LCTO STATUS ESTORNO OBJ_KEY ST_REV USNAM CPUTM CPUDT.
            MOVE-CORRESPONDING O_ALV TO WA_ZGL012_AVM .
            MOVE: SY-UNAME TO WA_ZGL012_AVM-USNAM,
                  SY-UZEIT TO WA_ZGL012_AVM-CPUTM,
                  SY-DATUM TO WA_ZGL012_AVM-CPUDT,
                  VOBJ_KEY TO WA_ZGL012_AVM-OBJ_KEY.

            IF NOT  WA_ZGL012_AVM-AUGBL IS INITIAL.
              WA_ZGL012_AVM-DT_LCTO = WA_ZGL012_AVM-AUGDT.
            ENDIF.

            IF WL_ST_REV = 'X'.
              WA_ZGL012_AVM-ST_REV = 'X'. "Marcar como reversão OK
            ENDIF.

            MODIFY ZGL012_AVM FROM WA_ZGL012_AVM.
            IF SY-SUBRC = 0.
              COMMIT WORK AND WAIT .
              WL_CONT = WL_CONT + 1.
            ENDIF.
          ELSE.
            O_ALV-STATUS = ICON_LED_RED.
            MODIFY O_ALV INDEX WL_TABIX TRANSPORTING STATUS.
          ENDIF.
          CLEAR WA_ZGL012_AVM.
        ENDLOOP.
        IF WL_CONT > 0.
          MESSAGE I398(00) WITH WL_CONT
                            'registro(s) executado(s)'
                            ' com sucesso.'
                            '(gravados na ZTGL012_AVM).'.
        ELSE.
          MESSAGE I398(00) WITH 'Nenhum'
                            'registro executado'
                            ' com sucesso.'
                            '(gravados na ZTGL012_AVM).'.
        ENDIF.
      ENDIF.
    WHEN OTHERS.

  ENDCASE.


ENDMODULE.                 " user_command_9001  INPUT

*&---------------------------------------------------------------------*
*&      Form  ZF_INICIALIZA_VARIANTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ZF_INICIALIZA_VARIANTE.
  CLEAR WG_VARIANT.
  WG_SAVE = 'X'.
  WG_VARIANT-REPORT = WG_REPNAME.
  WG_X_VARIANT = WG_VARIANT.
  CALL FUNCTION 'REUSE_ALV_VARIANT_DEFAULT_GET'
    EXPORTING
      I_SAVE     = WG_SAVE
    CHANGING
      CS_VARIANT = WG_X_VARIANT
    EXCEPTIONS
      NOT_FOUND  = 2.
  IF SY-SUBRC = 0.
    P_VARI = WG_X_VARIANT-VARIANT.
  ENDIF.
ENDFORM. " ZF_inicializa_variante
*&---------------------------------------------------------------------*
*&      Form  ZF_AT_SELECTION_SCREEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM ZF_AT_SELECTION_SCREEN .
* ALV Layout variant
  IF NOT P_VARI IS INITIAL.
    MOVE WG_VARIANT TO WG_X_VARIANT.
    MOVE P_VARI TO WG_X_VARIANT-VARIANT.
    CALL FUNCTION 'REUSE_ALV_VARIANT_EXISTENCE'
      EXPORTING
        I_SAVE     = WG_SAVE
      CHANGING
        CS_VARIANT = WG_X_VARIANT.
    WG_VARIANT = WG_X_VARIANT.
  ELSE.
    PERFORM ZF_INICIALIZA_VARIANTE.
  ENDIF.
ENDFORM.                    "zf_at_selection_screen

*&---------------------------------------------------------------------*
*&      Form  free_objects
*&---------------------------------------------------------------------*
*       Free Objects
*----------------------------------------------------------------------*
FORM FREE_OBJECTS .
  CALL METHOD CL_GRID->FREE
    EXCEPTIONS
      CNTL_ERROR        = 1
      CNTL_SYSTEM_ERROR = 2
      OTHERS            = 3.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
               WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
  CALL METHOD CL_CONTAINER_95->FREE
    EXCEPTIONS
      CNTL_ERROR        = 1
      CNTL_SYSTEM_ERROR = 2
      OTHERS            = 3.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
               WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
  CALL METHOD CL_CONTAINER_05->FREE
    EXCEPTIONS
      CNTL_ERROR        = 1
      CNTL_SYSTEM_ERROR = 2
      OTHERS            = 3.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
               WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CALL METHOD EDITCONTAINER->FREE
    EXCEPTIONS
      CNTL_ERROR        = 1
      CNTL_SYSTEM_ERROR = 2
      OTHERS            = 3.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
               WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.





ENDFORM.                    " free_objects



*&---------------------------------------------------------------------*
*&      Form  EVENT_TOP_OF_PAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->IM_OBJ_DYNDOC_ID  text
*      -->IM_TABLE_INDEX    text
*----------------------------------------------------------------------*
FORM EVENT_TOP_OF_PAGE USING IM_OBJ_DYNDOC_ID TYPE REF TO CL_DD_DOCUMENT
IM_TABLE_INDEX TYPE SYINDEX .

  PERFORM ZF_ALV_HEADER  USING '2'.
  "1 .at this form use class CL_DD_DOCUMENT's method ADD_TEXT, NEW_LINE .

*CALL METHOD IM_OBJ_DYNDOC_ID->ADD_TEXT
*EXPORTING
*TEXT = 'Top_of_page'
*SAP_STYLE = CL_DD_AREA=>HEADING
*SAP_FONTSIZE = CL_DD_AREA=>EXTRA_LARGE
*SAP_COLOR = CL_DD_AREA=>LIST_HEADING_INT.
*
*"2 .create a customer container for display CL_DD_DOCUMENT
*
*if EDITCONTAINER is initial .
*    CREATE OBJECT EDITCONTAINER
*    EXPORTING
*      CONTAINER_NAME = 'HEADER'.
*endif .
*
*CALL METHOD IM_OBJ_DYNDOC_ID->MERGE_DOCUMENT.
*
*CALL METHOD IM_OBJ_DYNDOC_ID->DISPLAY_DOCUMENT
*EXPORTING
*REUSE_CONTROL = 'X'
*PARENT = EDITCONTAINER
*EXCEPTIONS
*HTML_DISPLAY_ERROR = 1.

ENDFORM.                    "EVENT_TOP_OF_PAGE
*&---------------------------------------------------------------------*
*&      Form  GRAVA_ZIB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GRAVA_ZIB USING    P_TIPO
                        CHANGING P_ALV LIKE O_ALV
                                     P_ERRO.

  DATA: WL_DATA(10),
        WL_DESCRICAO(1),
        WL_DATA_AVAL(10),
        WL_BKTXT(7),
        WL_NEWBS(2),
        WL_NEWBS2(2),
        WL_NEWKO2(10),
        WL_VLR_VARIACAO TYPE ZGL012_AVM-VLR_VARIACAO,
        WL_DMBE2        TYPE ZGL012_AVM-DMBE2,
        WL_DIVISAO(4),
        VG_RACCT     TYPE FAGLFLEXT-RACCT,
        VG_VBUND     TYPE BSIS-VBUND,
        WL_BEWAR  TYPE ZFIT0030-BEWAR,
        XPROV_DOLAR TYPE I.

  DATA: BEGIN OF TL_AUX OCCURS 0,
           BELNR TYPE BELNR_D,
           DT_AVAL TYPE BUDAT,
         END OF TL_AUX.

  IF P_ALV-GSBER IS INITIAL.
    CONCATENATE P_ALV-BUKRS+2(2) '01'
    INTO WL_DIVISAO.
  ELSE.
    MOVE P_ALV-GSBER TO WL_DIVISAO.
  ENDIF.

  IF P_ALV-BUKRS = '0100'.
    CLEAR WL_DIVISAO.
  ENDIF.

  IF P_ALV-AUGDT IS INITIAL.
    WRITE P_ALV-DT_AVAL TO WL_DATA.
    WL_DMBE2 = 1 / 100.
  ELSE.
*    SELECT BELNR DT_AVAL FROM ZGL012_AVM
*      INTO TABLE TL_AUX
*      WHERE BELNR = P_ALV-BELNR.
*    DELETE TL_AUX WHERE DT_AVAL = P_ALV-DT_AVAL.
*    DESCRIBE TABLE TL_AUX LINES XPROV_DOLAR.
*    WL_DMBE2 = XPROV_DOLAR.
    WRITE P_ALV-AUGDT TO WL_DATA.
*    WRITE P_ALV-DT_AVAL TO WL_DATA.
    WL_DMBE2 = 1 / 100.

  ENDIF.

  IF NOT P_ALV-WAERS IS INITIAL.
    WG_WAERS = P_ALV-WAERS.
  ENDIF.

  IF P_TIPO = 'E'.
    SELECT *
      FROM ZIB_CONTABIL
      INTO TABLE IT_ZIB_CONTABIL
      WHERE OBJ_KEY = P_ALV-OBJ_KEY.
    " Fornecedor 21/31 29/39
    " Cliente    01/11 09/19
    " razao      40/50
    LOOP AT IT_ZIB_CONTABIL INTO WA_ZIB_CONTABIL.
      IF WA_ZIB_CONTABIL-BSCHL = '21'.
        WA_ZIB_CONTABIL-BSCHL = '31'.
      ELSEIF WA_ZIB_CONTABIL-BSCHL = '31'.
        WA_ZIB_CONTABIL-BSCHL = '21'.
      ELSEIF WA_ZIB_CONTABIL-BSCHL = '29'.
        WA_ZIB_CONTABIL-BSCHL = '39'.
      ELSEIF WA_ZIB_CONTABIL-BSCHL = '39'.
        WA_ZIB_CONTABIL-BSCHL = '29'.
      ELSEIF WA_ZIB_CONTABIL-BSCHL = '01'.
        WA_ZIB_CONTABIL-BSCHL = '11'.
      ELSEIF WA_ZIB_CONTABIL-BSCHL = '11'.
        WA_ZIB_CONTABIL-BSCHL = '01'.
      ELSEIF WA_ZIB_CONTABIL-BSCHL = '09'.
        WA_ZIB_CONTABIL-BSCHL = '19'.
      ELSEIF WA_ZIB_CONTABIL-BSCHL = '19'.
        WA_ZIB_CONTABIL-BSCHL = '09'.
      ELSEIF WA_ZIB_CONTABIL-BSCHL = '50'.
        WA_ZIB_CONTABIL-BSCHL = '40'.
      ELSEIF WA_ZIB_CONTABIL-BSCHL = '40'.
        WA_ZIB_CONTABIL-BSCHL = '50'.
      ENDIF.
      WA_ZIB_CONTABIL-RG_ATUALIZADO  = 'N'.
      IF WA_ZIB_CONTABIL-SEQITEM = 1.
        CALL FUNCTION 'NUMBER_GET_NEXT'
          EXPORTING
            NR_RANGE_NR = '01'
            OBJECT      = 'ZID_GL'
          IMPORTING
            NUMBER      = VSEQ.
        VNUM = VSEQ .

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            INPUT  = VNUM
          IMPORTING
            OUTPUT = VNUM.

        CONCATENATE 'ZGL012' VNUM  P_SPMON+0(4) INTO WA_ZIB_CONTABIL-OBJ_KEY.
        VOBJ_KEY = WA_ZIB_CONTABIL-OBJ_KEY.
      ELSE.
        WA_ZIB_CONTABIL-OBJ_KEY = VOBJ_KEY.
      ENDIF.
      INSERT INTO  ZIB_CONTABIL VALUES WA_ZIB_CONTABIL.
      IF SY-SUBRC NE 0.
        ROLLBACK WORK.
        P_ERRO = 'X'.
        CLEAR VOBJ_KEY.
      ELSE.
        COMMIT WORK.
      ENDIF.
      CLEAR  WA_ZIB_CONTABIL.
    ENDLOOP.
    EXIT.
  ELSE.
    READ TABLE T_T030H INTO WA_T030H
      WITH KEY HKONT = P_ALV-HKONT.
    CLEAR WL_DESCRICAO.
  ENDIF.

  IF P_ALV-VLR_VARIACAO GE 0.
    WL_VLR_VARIACAO = P_ALV-VLR_VARIACAO.
  ELSE.
    WL_VLR_VARIACAO = P_ALV-VLR_VARIACAO * -1.
  ENDIF.

  SELECT SINGLE BEWAR
  FROM ZFIT0030
  INTO WL_BEWAR
  WHERE HKONT	=	P_ALV-HKONT
  AND   COND  IN ('C','CV').

  IF SY-SUBRC NE 0.
    SELECT SINGLE BEWAR
      FROM ZFIT0030
      INTO WL_BEWAR
      WHERE HKONT	=	P_ALV-HKONT.
  ENDIF.
  "alrs
  CASE P_TIPO.
    WHEN '1'.
      IF ( P_ALV-VLR_VARIACAO > 0 AND (
                                        P_ALV-BSCHL = '31' OR
                                        P_ALV-BSCHL = '34'
                                       ) )
         OR
         (  P_ALV-VLR_VARIACAO > 0 AND ( ( P_ALV-BSCHL GE '21'
                                          AND P_ALV-BSCHL LE '39' ) AND
                                         (  P_ALV-BSCHL NE '23' AND
                                            P_ALV-BSCHL NE '30' AND
                                            P_ALV-BSCHL NE '33' )
                                         "p_alv-bschl = '21' or
                                         "p_alv-bschl = '27' or
                                         "p_alv-bschl = '24'
                                       ) ).
        WL_NEWBS  = '31'.
        WL_NEWBS2 = '40'.
        WL_NEWKO2 = WA_T030H-LSBEW.

      ENDIF.
      IF ( P_ALV-VLR_VARIACAO < 0 AND ( P_ALV-BSCHL = '31' OR
                                        P_ALV-BSCHL = '34' ) )
          OR
         ( P_ALV-VLR_VARIACAO < 0 AND ( ( P_ALV-BSCHL GE '21'
                                          AND P_ALV-BSCHL LE '39' ) AND
                                         (  P_ALV-BSCHL NE '23' AND
                                            P_ALV-BSCHL NE '30' AND
                                            P_ALV-BSCHL NE '33' )
                                         "p_alv-bschl = '21' or
                                         "p_alv-bschl = '27' or
                                         "p_alv-bschl = '24'
                                       ) ).
        WL_NEWBS = '21'.
        WL_NEWBS2 = '50'.
        WL_NEWKO2 = WA_T030H-LHBEW.

      ENDIF.
      IF P_ALV-STATUS = ICON_RED_LIGHT.
        IF P_ALV-VLR_VARIACAO > 0 AND P_ALV-UMSKZ = SPACE.
          WL_NEWBS = '31'.                                "'21'.
          WL_NEWBS2 = '40'.
*            wl_newko2 = wa_t030h-lsbew.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LSBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO > 0.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LSBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO < 0 AND P_ALV-UMSKZ = SPACE.
          WL_NEWBS  = '21'.                               "'31'.
          WL_NEWBS2 = '50'.
*            wl_newko2 = wa_t030h-lhbew.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LHBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO < 0.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LHBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ENDIF.
      ENDIF.

    WHEN '2'.
      IF ( P_ALV-VLR_VARIACAO < 0 AND P_ALV-BSCHL = '39' )
         OR
         ( P_ALV-VLR_VARIACAO < 0 AND P_ALV-BSCHL = '29' ).
        WL_NEWBS  = '29'.
        WL_NEWBS2 = '50'.
        WL_NEWKO2 = WA_T030H-LHBEW.

      ENDIF.
      IF ( P_ALV-VLR_VARIACAO > 0 AND P_ALV-BSCHL = '39' )
          OR
         ( P_ALV-VLR_VARIACAO > 0 AND P_ALV-BSCHL = '29' ).
        WL_NEWBS = '39'.
        WL_NEWBS2 = '40'.
        WL_NEWKO2 = WA_T030H-LSBEW.

      ENDIF.
      IF P_ALV-STATUS = ICON_RED_LIGHT.
        IF P_ALV-VLR_VARIACAO > 0 AND P_ALV-UMSKZ <> SPACE.
          WL_NEWBS = '39'.                                "'29'.
          WL_NEWBS2 = '40'.
*            wl_newko2 = wa_t030h-lsbew.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LSBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO > 0.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LSBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO < 0 AND P_ALV-UMSKZ <> SPACE..
          WL_NEWBS  = '29'.                               "'39'.
          WL_NEWBS2 = '50'.
*            wl_newko2 = wa_t030h-lhbew.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LHBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO < 0.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LHBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ENDIF.
      ENDIF.
    WHEN '3'.
      IF ( P_ALV-VLR_VARIACAO < 0 AND (  P_ALV-BSCHL = '11' OR
                                         P_ALV-BSCHL = '17' ) )
         OR
         ( P_ALV-VLR_VARIACAO < 0 AND ( ( P_ALV-BSCHL GE '01' AND
                                          P_ALV-BSCHL LE '19' ) AND
                                           P_ALV-BSCHL NE '10' ) ).
        WL_NEWBS  = '01'.
        WL_NEWBS2 = '50'.
        WL_NEWKO2 = WA_T030H-LHBEW.

      ENDIF.
      IF ( P_ALV-VLR_VARIACAO > 0 AND ( P_ALV-BSCHL = '11' OR
                                        P_ALV-BSCHL = '17' ) )
          OR
         ( P_ALV-VLR_VARIACAO > 0 AND ( ( P_ALV-BSCHL GE '01' AND
                                          P_ALV-BSCHL LE '19' ) AND
                                           P_ALV-BSCHL NE '10' ) ).
        WL_NEWBS = '11'.
        WL_NEWBS2 = '40'.
        WL_NEWKO2 = WA_T030H-LSBEW.

      ENDIF.
      IF P_ALV-STATUS = ICON_RED_LIGHT.
        IF P_ALV-VLR_VARIACAO > 0 AND P_ALV-UMSKZ = SPACE.
          WL_NEWBS = '11'.                                "'01'.
          WL_NEWBS2 = '40'.
*            wl_newko2 = wa_t030h-lsbew.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LSBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO > 0.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LSBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO < 0 AND P_ALV-UMSKZ = SPACE.
          WL_NEWBS  = '01'.                               "'11'.
          WL_NEWBS2 = '50'.
*            wl_newko2 = wa_t030h-lhbew.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LHBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO < 0.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LHBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ENDIF.
      ENDIF.
    WHEN '4'.

      IF ( P_ALV-VLR_VARIACAO < 0 AND P_ALV-BSCHL = '19' )
         OR
         ( P_ALV-VLR_VARIACAO < 0 AND P_ALV-BSCHL = '09' ).
        WL_NEWBS = '09'.
        WL_NEWBS2 = '50'.
        WL_NEWKO2 = WA_T030H-LHBEW.

      ENDIF.
      IF ( P_ALV-VLR_VARIACAO > 0 AND P_ALV-BSCHL = '19' )
          OR
         ( P_ALV-VLR_VARIACAO > 0 AND P_ALV-BSCHL = '09' ).
        WL_NEWBS  = '19'.
        WL_NEWBS2 = '40'.
        WL_NEWKO2 = WA_T030H-LSBEW.

      ENDIF.
      IF P_ALV-STATUS = ICON_RED_LIGHT.
        IF P_ALV-VLR_VARIACAO > 0 AND P_ALV-UMSKZ <> SPACE.
          WL_NEWBS = '19'.                                "'09'.
          WL_NEWBS2 = '40'.
*            wl_newko2 = wa_t030h-lsbew.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LSBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO > 0.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LSBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO < 0 AND P_ALV-UMSKZ <> SPACE.
          WL_NEWBS  = '09'.                               "'19'.
          WL_NEWBS2 = '50'.
*            wl_newko2 = wa_t030h-lhbew.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LHBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO < 0.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LHBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ENDIF.
      ENDIF.
    WHEN '5'.
      IF ( P_ALV-VLR_VARIACAO > 0 AND ( P_ALV-BSCHL = '40' OR
                                        P_ALV-BSCHL = '86' ) )
         OR
         ( P_ALV-VLR_VARIACAO > 0 AND ( P_ALV-BSCHL = '50' OR
                                        P_ALV-BSCHL = '96' ) ).
        WL_NEWBS  = '50'.
        WL_NEWBS2 = '40'.
        WL_NEWKO2 = WA_T030H-LSBEW.

      ENDIF.
      IF ( P_ALV-VLR_VARIACAO < 0 AND ( P_ALV-BSCHL = '50' OR
                                        P_ALV-BSCHL = '96' ) )
        OR
         ( P_ALV-VLR_VARIACAO < 0 AND ( P_ALV-BSCHL = '40' OR
                                        P_ALV-BSCHL = '86' ) ).
        WL_NEWBS = '40'.
        WL_NEWBS2 = '50'.
        WL_NEWKO2 = WA_T030H-LHBEW.

      ENDIF.
      IF P_ALV-STATUS = ICON_RED_LIGHT.
        IF P_ALV-VLR_VARIACAO > 0 AND P_ALV-UMSKZ <> SPACE.
          WL_NEWBS = '50'.                                "'40'.
          WL_NEWBS2 = '40'.                               "'50'.
*            wl_newko2 = wa_t030h-lsbew.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LSBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO > 0.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LSBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO < 0 AND P_ALV-UMSKZ <> SPACE.
          WL_NEWBS  = '40'.                               "'50'.
          WL_NEWBS2 = '50'.                               "'40'.
*              wl_newko2 = wa_t030h-lhbew.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LHBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ELSEIF P_ALV-VLR_VARIACAO < 0.
**        Caso seja uma reversão
          CLEAR: WA_0025.
          READ TABLE T_0025 INTO WA_0025
            WITH KEY SAKNR_P = WA_T030H-LHBEW
                       BINARY SEARCH.
          IF SY-SUBRC IS INITIAL.
            MOVE: WA_0025-SAKNR_R TO WL_NEWKO2.
          ELSE.
            CLEAR: WL_NEWKO2.
          ENDIF.
        ENDIF.
      ENDIF.

    WHEN OTHERS.
  ENDCASE.

  "alrs
  CALL FUNCTION 'NUMBER_GET_NEXT'
    EXPORTING
      NR_RANGE_NR = '01'
      OBJECT      = 'ZID_GL'
    IMPORTING
      NUMBER      = VSEQ.
  VNUM = VSEQ .

  VSEQITEM = 0.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = VNUM
    IMPORTING
      OUTPUT = VNUM.

  SELECT SINGLE BUKRS LAND1
    FROM T001
    INTO WA_T001
    WHERE BUKRS = P_BUKRS.

  SELECT SINGLE LAND1 WAERS
    FROM T005
    INTO WA_T005
    WHERE LAND1 = WA_T001-LAND1.

  CLEAR VG_VBUND.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      INPUT  = P_ALV-HKONT
    IMPORTING
      OUTPUT = VG_RACCT.

  IF  '214101_224100_121130_113130_113131_214121' CS VG_RACCT.
    VG_VBUND = P_ALV-VBUND.
  ENDIF.

  " Primeira Perna lançamento contábil
  CONCATENATE 'ZGL012' VNUM  P_SPMON+0(4) INTO WA_ZIB_CONTABIL-OBJ_KEY.
  VOBJ_KEY = WA_ZIB_CONTABIL-OBJ_KEY.
  VSEQITEM = 1.
  WA_ZIB_CONTABIL-SEQITEM   = VSEQITEM.
  WA_ZIB_CONTABIL-XBLNR     = P_ALV-RESULTADO_C.
  WA_ZIB_CONTABIL-BSCHL     =  WL_NEWBS. " P_ALV-BSCHL.
  WA_ZIB_CONTABIL-GSBER     = WL_DIVISAO.
  WA_ZIB_CONTABIL-BUKRS     = P_BUKRS.
  WA_ZIB_CONTABIL-INTERFACE = '35'.
  CONCATENATE P_SPMON+4(2) P_SPMON+0(4) INTO WA_ZIB_CONTABIL-BKTXT SEPARATED BY '.'.
  WA_ZIB_CONTABIL-BLDAT     = WL_DATA.
  WA_ZIB_CONTABIL-BUDAT     = WL_DATA.
  WA_ZIB_CONTABIL-GJAHR     = P_SPMON+0(4).
  WA_ZIB_CONTABIL-MONAT     = P_SPMON+4(2).
  WA_ZIB_CONTABIL-BLART     = 'VC'.
  IF O_ALV-TIPO = 'Razão'.
    WA_ZIB_CONTABIL-HKONT     = P_ALV-HKONT.
    WA_ZIB_CONTABIL-VBUND     = VG_VBUND.
  ELSE.
    WA_ZIB_CONTABIL-HKONT     = P_ALV-CODIGO.
  ENDIF.
  WA_ZIB_CONTABIL-UMSKZ     = P_ALV-UMSKZ.
  WA_ZIB_CONTABIL-WRBTR     = 1 / 100.
  WA_ZIB_CONTABIL-WAERS     = P_ALV-WAERS.
  WA_ZIB_CONTABIL-BUPLA     = WL_DIVISAO.
  WA_ZIB_CONTABIL-ZUONR     = P_ALV-BELNR.
  IF P_TIPO = 'E'.
    CONCATENATE 'Estorno VC-' O_ALV-DESCRICAO INTO WA_ZIB_CONTABIL-SGTXT.
  ELSE.
    IF P_ALV-STATUS EQ '@0A@'.
      CONCATENATE 'Reversão Provisão VC-' O_ALV-DESCRICAO INTO WA_ZIB_CONTABIL-SGTXT.
    ELSE.
      CONCATENATE 'Provisão VC-' O_ALV-DESCRICAO INTO WA_ZIB_CONTABIL-SGTXT.
    ENDIF.
  ENDIF.
  WA_ZIB_CONTABIL-WAERS_I   = WA_T005-WAERS.
  WA_ZIB_CONTABIL-DMBTR     = WL_VLR_VARIACAO.
  WA_ZIB_CONTABIL-WAERS_F   = 'USD'.
  WA_ZIB_CONTABIL-DMBE2     = WL_DMBE2.
  WA_ZIB_CONTABIL-RG_ATUALIZADO  = 'N'.
  WA_ZIB_CONTABIL-BEWAR     = WL_BEWAR.

  INSERT INTO  ZIB_CONTABIL VALUES WA_ZIB_CONTABIL.
  IF SY-SUBRC NE 0.
    ROLLBACK WORK.
    P_ERRO = 'X'.
    CLEAR VOBJ_KEY.
  ELSE.
    COMMIT WORK.
  ENDIF.
  CLEAR  WA_ZIB_CONTABIL.

  " segunda perna lançamento contábil
  WA_ZIB_CONTABIL-OBJ_KEY = VOBJ_KEY .
  VSEQITEM = 2.
  WA_ZIB_CONTABIL-SEQITEM   = VSEQITEM.
  WA_ZIB_CONTABIL-XBLNR     = P_ALV-RESULTADO_C.
  WA_ZIB_CONTABIL-BSCHL     = WL_NEWBS2.
  WA_ZIB_CONTABIL-GSBER     = WL_DIVISAO.
  WA_ZIB_CONTABIL-BUKRS     = P_BUKRS.
  WA_ZIB_CONTABIL-INTERFACE = '35'.
  CONCATENATE P_SPMON+4(2) P_SPMON+0(4) INTO WA_ZIB_CONTABIL-BKTXT SEPARATED BY '.'.
  WA_ZIB_CONTABIL-BLDAT     = WL_DATA.
  WA_ZIB_CONTABIL-BUDAT     = WL_DATA.
  WA_ZIB_CONTABIL-GJAHR     = P_SPMON+0(4).
  WA_ZIB_CONTABIL-MONAT     = P_SPMON+4(2).
  WA_ZIB_CONTABIL-BLART     = 'VC'.
  WA_ZIB_CONTABIL-HKONT     = WL_NEWKO2.
  WA_ZIB_CONTABIL-VBUND     = VG_VBUND.
  WA_ZIB_CONTABIL-UMSKZ     = P_ALV-UMSKZ.
  WA_ZIB_CONTABIL-WRBTR     = 1 / 100.
  WA_ZIB_CONTABIL-WAERS     = P_ALV-WAERS.
  WA_ZIB_CONTABIL-BUPLA     = WL_DIVISAO.
  WA_ZIB_CONTABIL-ZUONR     = P_ALV-BELNR.
  IF P_TIPO = 'E'.
    CONCATENATE 'Estorno VC-' O_ALV-DESCRICAO INTO WA_ZIB_CONTABIL-SGTXT.
  ELSE.
    IF P_ALV-STATUS EQ '@0A@'.
      CONCATENATE 'Reversão Provisão VC-' O_ALV-DESCRICAO INTO WA_ZIB_CONTABIL-SGTXT.
    ELSE.
      CONCATENATE 'Provisão VC-' O_ALV-DESCRICAO INTO WA_ZIB_CONTABIL-SGTXT.
    ENDIF.
  ENDIF.
  WA_ZIB_CONTABIL-WAERS_I   = WA_T005-WAERS.
  WA_ZIB_CONTABIL-DMBTR     = WL_VLR_VARIACAO.
  WA_ZIB_CONTABIL-WAERS_F   = 'USD'.
  WA_ZIB_CONTABIL-DMBE2     = WL_DMBE2.
  WA_ZIB_CONTABIL-RG_ATUALIZADO  = 'N'.
  WA_ZIB_CONTABIL-BEWAR     = WL_BEWAR.

  INSERT INTO  ZIB_CONTABIL VALUES WA_ZIB_CONTABIL.
  IF SY-SUBRC NE 0.
    ROLLBACK WORK.
    P_ERRO = 'X'.
    CLEAR VOBJ_KEY.
  ELSE.
    COMMIT WORK.
  ENDIF.
  CLEAR  WA_ZIB_CONTABIL.
ENDFORM.                    " GRAVA_ZIB
*&---------------------------------------------------------------------*
*&      Form  ATUALIZA_TELA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ATUALIZA_TELA .
  DATA: FLAG_MOD(1), TABIX TYPE SY-TABIX.
  LOOP AT O_ALV.
    IF O_ALV-OBJ_KEY IS INITIAL.
      CONTINUE.
    ENDIF.
    TABIX = SY-TABIX.
    FLAG_MOD = 'N'.
    IF O_ALV-ESTORNO = 'X'.
      CLEAR: O_ALV-DT_LCTO, O_ALV-DOC_LCTO.
      O_ALV-STATUS = ICON_LED_RED.
      FLAG_MOD = 'S'.
    ELSE.

      SELECT SINGLE  ZIB_CONTABIL_CHV~MANDT
             ZIB_CONTABIL_CHV~OBJ_KEY
             ZIB_CONTABIL_CHV~BELNR
             ZIB_CONTABIL_CHV~BUKRS
             ZIB_CONTABIL_CHV~GJAHR
             ZIB_CONTABIL~BLDAT
        FROM ZIB_CONTABIL_CHV INNER JOIN ZIB_CONTABIL
        ON ZIB_CONTABIL~OBJ_KEY EQ ZIB_CONTABIL_CHV~OBJ_KEY
        INTO WA_ZIB_CONTABIL_CHV
        WHERE ZIB_CONTABIL_CHV~OBJ_KEY = O_ALV-OBJ_KEY.

*      SELECT SINGLE *
*        FROM zib_contabil_chv
*        INTO wa_zib_contabil_chv
*        WHERE obj_key = o_alv-obj_key.

      IF SY-SUBRC = 0.
        CONCATENATE WA_ZIB_CONTABIL_CHV-BLDAT+6(4) WA_ZIB_CONTABIL_CHV-BLDAT+3(2) WA_ZIB_CONTABIL_CHV-BLDAT+0(2) INTO W_DTZIB.
        IF W_DTZIB+0(6) = O_ALV-DT_AVAL+0(6).
          O_ALV-STATUS = ICON_LED_GREEN.
          O_ALV-DOC_LCTO = WA_ZIB_CONTABIL_CHV-BELNR.
          FLAG_MOD = 'S'.
        ENDIF.
      ELSE.
        SELECT SINGLE *
         FROM ZIB_CONTABIL_ERR
         INTO WA_ZIB_CONTABIL_ERR
         WHERE OBJ_KEY = O_ALV-OBJ_KEY.
        IF SY-SUBRC = 0.
          O_ALV-STATUS = ICON_INCOMPLETE.
          FLAG_MOD = 'S'.
        ENDIF.
      ENDIF.
    ENDIF.
    IF FLAG_MOD = 'S'.
      MODIFY O_ALV INDEX TABIX TRANSPORTING DT_LCTO DOC_LCTO STATUS.
      MOVE-CORRESPONDING O_ALV TO WA_ZGL012_AVM .
      MOVE: P_BUDAT  TO WA_ZGL012_AVM-DT_LCTO.

      IF WA_ZGL012_AVM-USNAM IS INITIAL.
        MOVE: SY-UNAME TO WA_ZGL012_AVM-USNAM,
              SY-UZEIT TO WA_ZGL012_AVM-CPUTM,
              SY-DATUM TO WA_ZGL012_AVM-CPUDT.
      ENDIF.
      IF NOT  WA_ZGL012_AVM-AUGBL IS INITIAL.
        WA_ZGL012_AVM-DT_LCTO = WA_ZGL012_AVM-AUGDT.
      ENDIF.

      MODIFY ZGL012_AVM FROM WA_ZGL012_AVM.
      IF SY-SUBRC = 0.
        COMMIT WORK.
      ENDIF.
    ENDIF.
    CLEAR: WA_ZGL012_AVM.
  ENDLOOP.
ENDFORM.                    " ATUALIZA_TELA
*&---------------------------------------------------------------------*
*&      Form  GRAVA_ESTORNO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GRAVA_ESTORNO .

ENDFORM.                    " GRAVA_ESTORNO
*&---------------------------------------------------------------------*
*&      Form  F_CONTA2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM F_CONTA2 .
  DATA: TL_SKA1 TYPE TABLE OF SKA1 WITH HEADER LINE,
        TL_SKAT TYPE TABLE OF SKAT WITH HEADER LINE,
        TL_SKB1 TYPE TABLE OF SKB1 WITH HEADER LINE,
        WA_SKB1 TYPE SKB1.

  DATA: IT_CONTAS TYPE ZCT_EMP_CONTAS,
        WA_CONTAS TYPE ZLC_EMP_CONTAS,
        TG_TCURR          TYPE TABLE OF TCURR,
        WG_TCURR          TYPE TCURR,
        IT_SALDO_CONTAS   TYPE TABLE OF ZDE_FI_GL_SALDO_FAGLFLEXT WITH HEADER LINE,
        IT_SALDO_CONTAS_2 TYPE TABLE OF ZDE_FI_GL_SALDO_FAGLFLEXT WITH HEADER LINE,
        IT_SALDO_CONTAS_3 TYPE TABLE OF ZDE_FI_GL_SALDO_FAGLFLEXT WITH HEADER LINE.

  DATA: WL_SALDO_MI  TYPE FAGLFLEXT-HSLVT,
        WL_SALDO_MI2 TYPE FAGLFLEXT-KSLVT,
        WL_SALDO_MI3 TYPE FAGLFLEXT-OSLVT,
        VG_LAST_DAY_AUX(8).

  DATA: REFE1	TYPE HSLXX12,
        REFE2	TYPE HSLXX12,
        VMES  TYPE MONAT,
        TABIX TYPE SY-TABIX.

  RANGES: R_KTOKS FOR SKA1-KTOKS.

  CONCATENATE P_BUDAT+0(6) '01' INTO VG_LAST_DAY_AUX.
  VG_LAST_DAY = VG_LAST_DAY_AUX.
  CALL FUNCTION 'BKK_GET_MONTH_LASTDAY'
    EXPORTING
      I_DATE = VG_LAST_DAY
    IMPORTING
      E_DATE = VG_LAST_DAY.

  ADD 1 TO VG_LAST_DAY.

  CONVERT INVERTED-DATE VG_LAST_DAY INTO DATE VG_LAST_DAY_AUX.

  SUBTRACT 1 FROM VG_LAST_DAY.

  SELECT *
  FROM TCURR
  INTO TABLE TG_TCURR
   WHERE GDATU EQ VG_LAST_DAY_AUX
     AND KURST EQ 'B'
     AND FCURR IN ('USD', 'BRL').

  CLEAR: R_KTOKS.
  R_KTOKS-SIGN   = 'I'.
  R_KTOKS-OPTION = 'EQ'.
  R_KTOKS-LOW    = 'YB01'.
  R_KTOKS-HIGH   = 'YB01'.
  APPEND R_KTOKS.

  R_KTOKS-LOW    = 'YB02'.
  R_KTOKS-HIGH   = 'YB02'.
  APPEND R_KTOKS.

  R_KTOKS-LOW    = 'YB04'.
  R_KTOKS-HIGH   = 'YB04'.
  APPEND R_KTOKS.

  SELECT * "#EC CI_DB_OPERATION_OK[2431747]
    FROM SKA1 "#EC CI_DB_OPERATION_OK[2389136]
    INTO TABLE TL_SKA1
    WHERE KTOPL	=	'0050'
      AND KTOKS	IN R_KTOKS
      AND SAKNR IN S_HKONT2.

  IF TL_SKA1[] IS INITIAL.
    MESSAGE I398(00) WITH 'Não Encontrado contas do Razão p/ a Seleção'.
    EXIT.
  ENDIF.

  SELECT * "#EC CI_DB_OPERATION_OK[2431747]
    FROM SKB1
    INTO TABLE TL_SKB1
     FOR ALL ENTRIES IN TL_SKA1
   WHERE BUKRS  = P_BUKRS
     AND SAKNR  = TL_SKA1-SAKNR
     AND XOPVW  = ''.

  IF TL_SKB1[] IS INITIAL.
    MESSAGE I398(00) WITH 'Não Encontrado contas do Razão p/ a Seleção' '(empresa)' 'administração por partidas em aberto'.
    EXIT.
  ENDIF.

  SELECT KTOPL HKONT WAERS CURTP LSBEW LHBEW FROM T030H
      INTO TABLE T_T030H
      FOR ALL ENTRIES IN TL_SKB1
      WHERE KTOPL = C_0050 AND
            HKONT = TL_SKB1-SAKNR.

  SORT T_T030H BY HKONT.
  LOOP AT TL_SKB1 INTO WA_SKB1.
    TABIX = SY-TABIX.
    READ TABLE T_T030H INTO WA_T030H WITH KEY HKONT = WA_SKB1-SAKNR BINARY SEARCH.
    IF SY-SUBRC NE 0.
      CLEAR WA_SKB1-SAKNR.
      MODIFY TL_SKB1 FROM WA_SKB1 INDEX TABIX TRANSPORTING SAKNR.
    ENDIF.
  ENDLOOP.
  DELETE TL_SKB1 WHERE SAKNR  = ''.

  REFRESH IT_CONTAS.
  LOOP AT TL_SKB1.
    WA_CONTAS-BUKRS = TL_SKB1-BUKRS.
    WA_CONTAS-SAKNR = TL_SKB1-SAKNR.
    APPEND WA_CONTAS TO IT_CONTAS.
  ENDLOOP.

  IF IT_CONTAS[] IS INITIAL.
    MESSAGE 'Não foram encontradas contas configuradas' TYPE 'I'.
    EXIT.
  ENDIF.

  SELECT *
    FROM SKAT
    INTO TABLE TL_SKAT
    FOR ALL ENTRIES IN TL_SKB1
    WHERE SPRAS = SY-LANGU
    AND   KTOPL	=	'0050'
    AND   SAKNR = TL_SKB1-SAKNR.

  CALL FUNCTION 'Z_FI_GL_SALDO_FAGLFLEXT'
    EXPORTING
      RYEAR         = P_BUDAT+0(4)
      CONTAS        = IT_CONTAS
      P_GERAR_TODAS = 'X'
    TABLES
      IT_SALDOS     = IT_SALDO_CONTAS
      IT_SALDOS_2   = IT_SALDO_CONTAS_2
      IT_SALDOS_3   = IT_SALDO_CONTAS_3
    EXCEPTIONS
      MOEDA_NAO_ADM = 1
      ERRO_LEDGER   = 2
      OTHERS        = 3.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.


  SELECT *
    INTO TABLE T_ZGL012_AUX
   FROM ZGL012_AVM
  FOR ALL ENTRIES IN TL_SKB1
  WHERE BUKRS   EQ  TL_SKB1-BUKRS
    "AND ESTORNO NE 'X'
    AND ST_REV  EQ 'S'
    AND DT_AVAL EQ P_BUDAT
    AND BELNR   EQ TL_SKB1-SAKNR.

  REFRESH: IT_ZIB_CONTABIL_ERR, IT_ZIB_CONTABIL_CHV.
  IF T_ZGL012_AUX[] IS NOT INITIAL.
    SELECT *
            FROM ZIB_CONTABIL_ERR
            INTO TABLE IT_ZIB_CONTABIL_ERR
            FOR ALL ENTRIES IN T_ZGL012_AUX
            WHERE OBJ_KEY = T_ZGL012_AUX-OBJ_KEY.
    SORT IT_ZIB_CONTABIL_ERR BY OBJ_KEY.


    SELECT ZIB_CONTABIL_CHV~MANDT
              ZIB_CONTABIL_CHV~OBJ_KEY
              ZIB_CONTABIL_CHV~BELNR
              ZIB_CONTABIL_CHV~BUKRS
              ZIB_CONTABIL_CHV~GJAHR
              ZIB_CONTABIL~BLDAT
         FROM ZIB_CONTABIL_CHV INNER JOIN ZIB_CONTABIL
         ON ZIB_CONTABIL~OBJ_KEY EQ ZIB_CONTABIL_CHV~OBJ_KEY
         INTO TABLE IT_ZIB_CONTABIL_CHV
         FOR ALL ENTRIES IN T_ZGL012_AUX
         WHERE ZIB_CONTABIL_CHV~OBJ_KEY = T_ZGL012_AUX-OBJ_KEY.

    SORT IT_ZIB_CONTABIL_CHV BY OBJ_KEY.
  ENDIF.

  SORT: TL_SKA1           BY SAKNR,
        TL_SKAT           BY SAKNR,
        TL_SKB1           BY SAKNR,
        IT_SALDO_CONTAS   BY RACCT,
        IT_SALDO_CONTAS_2 BY RACCT,
        T_ZGL012_AUX      BY BELNR.

  VMES = P_BUDAT+4(2).
  IF VMES = 12.
    VMES = 15.
  ENDIF.
*---> 05/07/2023 - Migração S4 - DL
  SORT TG_TCURR BY FCURR TCURR.
*<--- 05/07/2023 - Migração S4 - DL
  REFRESH O_ALV2.
  LOOP AT TL_SKB1.
    READ TABLE TL_SKA1 WITH KEY SAKNR = TL_SKB1-SAKNR BINARY SEARCH.
    "
    WL_SALDO_MI = 0.
    READ TABLE IT_SALDO_CONTAS WITH KEY RACCT  = TL_SKB1-SAKNR.
    IF SY-SUBRC IS INITIAL.
      ADD IT_SALDO_CONTAS-SLVT TO WL_SALDO_MI.
      DO VMES TIMES VARYING REFE1 FROM IT_SALDO_CONTAS-SL01 NEXT IT_SALDO_CONTAS-SL02.
        ADD REFE1 TO WL_SALDO_MI.
      ENDDO.
    ENDIF.

    "
    WL_SALDO_MI2 = 0.
    READ TABLE IT_SALDO_CONTAS_2 WITH KEY   RACCT  = TL_SKB1-SAKNR.
    IF SY-SUBRC IS INITIAL.
      ADD IT_SALDO_CONTAS_2-SLVT TO WL_SALDO_MI2.
      DO VMES TIMES VARYING REFE1 FROM IT_SALDO_CONTAS_2-SL01 NEXT IT_SALDO_CONTAS_2-SL02.
        ADD REFE1 TO WL_SALDO_MI2.
      ENDDO.
    ENDIF.

    "Sem saldo a corrigir
    IF WL_SALDO_MI = 0 AND WL_SALDO_MI2 = 0.
      CONTINUE.
    ENDIF.

    WL_SALDO_MI3 = 0.
    READ TABLE IT_SALDO_CONTAS_3 WITH KEY   RACCT  = TL_SKB1-SAKNR.
    IF SY-SUBRC IS INITIAL.
      ADD IT_SALDO_CONTAS_3-SLVT TO WL_SALDO_MI3.
      DO VMES TIMES VARYING REFE1 FROM IT_SALDO_CONTAS_3-SL01 NEXT IT_SALDO_CONTAS_3-SL02.
        ADD REFE1 TO WL_SALDO_MI3.
      ENDDO.
    ENDIF.


    O_ALV2-RACCT            = TL_SKB1-SAKNR.
    O_ALV2-RASSC            = ''.
    READ TABLE TL_SKAT WITH KEY SAKNR = TL_SKB1-SAKNR BINARY SEARCH.
    O_ALV2-TXT50            = TL_SKAT-TXT50.
    O_ALV2-KTOKS            = TL_SKA1-KTOKS.
    O_ALV2-CURR1            = WL_SALDO_MI.
    O_ALV2-CURR2            = WL_SALDO_MI2.
    O_ALV2-CURR3            = WL_SALDO_MI3.

    CLEAR: WG_TCURR.
    READ TABLE TG_TCURR INTO WG_TCURR
      WITH KEY FCURR = 'USD'
               TCURR = 'BRL'
               BINARY SEARCH.

    O_ALV2-TX_USD           = WG_TCURR-UKURS.
    TRY.
        O_ALV2-SALDO_CORR       = ( O_ALV2-CURR2 * O_ALV2-TX_USD ).
      CATCH CX_SY_ZERODIVIDE.
    ENDTRY.
    O_ALV2-VLR_AJUST = ( O_ALV2-SALDO_CORR - O_ALV2-CURR1 ).


    O_ALV2-BELNR            = ''.
    O_ALV2-BELNR_EST        = ''.

    READ TABLE T_ZGL012_AUX WITH KEY BELNR = TL_SKB1-SAKNR BINARY SEARCH.
    IF SY-SUBRC = 0.
      IF T_ZGL012_AUX-ESTORNO = 'X'.
        O_ALV2-OBJ_KEY_EST  = T_ZGL012_AUX-OBJ_KEY.
      ELSE.
        O_ALV2-OBJ_KEY = T_ZGL012_AUX-OBJ_KEY.
      ENDIF.
      O_ALV2-LOG     = ICON_MESSAGE_WARNING_SMALL.
      READ TABLE IT_ZIB_CONTABIL_CHV INTO WA_ZIB_CONTABIL_CHV WITH KEY OBJ_KEY = T_ZGL012_AUX-OBJ_KEY BINARY SEARCH.
      IF SY-SUBRC = 0.
        IF T_ZGL012_AUX-ESTORNO = 'X'.
          O_ALV2-BELNR_EST        = WA_ZIB_CONTABIL_CHV-BELNR.
          O_ALV2-LOG     = ICON_SYSTEM_UNDO.
        ELSE.
          O_ALV2-BELNR            = WA_ZIB_CONTABIL_CHV-BELNR.
          O_ALV2-LOG     = ICON_LED_GREEN.
        ENDIF.

      ELSE.
        READ TABLE IT_ZIB_CONTABIL_ERR INTO WA_ZIB_CONTABIL_ERR WITH KEY OBJ_KEY = T_ZGL012_AUX-OBJ_KEY BINARY SEARCH.
        IF SY-SUBRC = 0.
          O_ALV2-LOG = ICON_INCOMPLETE.
        ENDIF.
      ENDIF.
    ELSE.
      O_ALV2-OBJ_KEY          = ''.
      O_ALV2-LOG              = ''.
    ENDIF.
    "
    APPEND O_ALV2.
    CLEAR O_ALV2.
  ENDLOOP.

  " DELETE O_ALV2 WHERE VLR_AJUST  = 0 AND LOG     NE ICON_LED_GREEN.

ENDFORM.                    " F_CONTA2
*&---------------------------------------------------------------------*
*&      Module  STATUS_9002  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_9002 OUTPUT.

  SET PF-STATUS 'F_SET_PF'.
  SET TITLEBAR  'ZFTITLE'.

  IF CL_CONTAINER_95 IS INITIAL.
    CREATE OBJECT CL_CONTAINER_95
      EXPORTING
        SIDE  = '4'
        RATIO = '80'.

  ENDIF.

  IF NOT CL_GRID IS INITIAL.
    PERFORM ZF_ALV_HEADER USING '2'.
    CALL METHOD CL_GRID->REFRESH_TABLE_DISPLAY
*      EXPORTING
*        IS_STABLE      =
*        I_SOFT_REFRESH =
*      EXCEPTIONS
*        FINISHED       = 1
*        OTHERS         = 2
            .
    IF SY-SUBRC <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*                WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ELSE.
    CREATE OBJECT OBJ_DYNDOC_ID
      EXPORTING
*    STYLE  =
*    BACKGROUND_COLOR =
*    BDS_STYLESHEET =
        NO_MARGINS = 'X'.


    PERFORM ZF_ALV_HEADER USING '1'.


    IF EDITCONTAINER IS INITIAL .
      CREATE OBJECT EDITCONTAINER
        EXPORTING
          CONTAINER_NAME = 'HEADER'.
    ENDIF .

    CALL METHOD OBJ_DYNDOC_ID->MERGE_DOCUMENT.

    CALL METHOD OBJ_DYNDOC_ID->DISPLAY_DOCUMENT
      EXPORTING
        REUSE_CONTROL      = 'X'
        PARENT             = EDITCONTAINER
      EXCEPTIONS
        HTML_DISPLAY_ERROR = 1.

    CREATE OBJECT CL_GRID
       EXPORTING
         I_PARENT      = CL_CONTAINER_95
*         I_PARENT      = CL_CONTAINER
         I_APPL_EVENTS = 'X'.


    CALL METHOD CL_GRID->REGISTER_EDIT_EVENT
      EXPORTING
        I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.

    WA_LAYOUT-ZEBRA      = 'X'.
    WA_LAYOUT-NO_ROWMOVE = 'X'.
    WA_LAYOUT-NO_ROWINS  = 'X'.
    WA_LAYOUT-NO_ROWMARK = SPACE.
    IF P_E_LANC = 'X'. "Se for estorno
      WA_LAYOUT-GRID_TITLE = 'Estorno de lançamentos'.
    ELSEIF P_C_LANC = 'X'.
      WA_LAYOUT-GRID_TITLE = 'Criação de lançamentos'.
    ELSE.
      CLEAR WA_LAYOUT-GRID_TITLE .
    ENDIF.
    WA_LAYOUT-SEL_MODE   = 'A'.
    WA_LAYOUT-CWIDTH_OPT   = 'X'.
    WA_LAYOUT-BOX_FNAME       = 'MARK'.

    CALL METHOD CL_GRID->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING        "IS_VARIANT = WG_X_VARIANT
        I_SAVE          = WG_SAVE
        IS_LAYOUT       = WA_LAYOUT
      CHANGING
        IT_FIELDCATALOG = IT_FIELDCAT[]
        IT_SORT         = I_SORT[]
        IT_OUTTAB       = O_ALV2[].


    CREATE OBJECT EVENT_RECEIVER.
    SET HANDLER EVENT_RECEIVER->CATCH_HOTSPOT              FOR CL_GRID.
    SET HANDLER EVENT_RECEIVER->HANDLE_TOP_OF_PAGE FOR CL_GRID.

  ENDIF.
ENDMODULE.                 " STATUS_9002  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9002 INPUT.

  IF NOT CL_GRID IS INITIAL.
    CALL METHOD CL_GRID->DISPATCH
      EXPORTING
        CARGO         = SY-UCOMM
        EVENTID       = 19
        IS_SHELLEVENT = ' '.

    IF SY-UCOMM IS INITIAL.
      CALL METHOD CL_GRID->REFRESH_TABLE_DISPLAY
        EXPORTING
          IS_STABLE = IS_STABLE.
    ENDIF.
  ENDIF.

  CASE SY-UCOMM.
    WHEN 'BACK' OR 'UP'.
      REFRESH O_ALV2.
      CALL METHOD CL_GRID->REFRESH_TABLE_DISPLAY.
      LEAVE TO SCREEN 0.

    WHEN 'CANCEL'.
      LEAVE PROGRAM.

    WHEN '&REFRESH'.
      PERFORM F_CONTA2.
    WHEN 'LANCAR'.
      IF T_T030H[] IS INITIAL.
        SELECT KTOPL HKONT WAERS CURTP LSBEW LHBEW FROM T030H
          INTO TABLE T_T030H
          FOR ALL ENTRIES IN O_ALV2
          WHERE KTOPL = C_0050 AND
                HKONT = O_ALV2-RACCT.
      ENDIF.

      REFRESH INDROW.
      CALL METHOD CL_GRID->GET_SELECTED_ROWS
        IMPORTING
          ET_INDEX_ROWS = INDROW.

      LOOP AT O_ALV2.
        O_ALV2-MARK = ' '.
        MODIFY O_ALV2.
      ENDLOOP.

      LOOP AT INDROW INTO W_IND.
        READ TABLE O_ALV2 INDEX W_IND-INDEX.
        O_ALV2-MARK = 'X'.
        MODIFY O_ALV2 INDEX W_IND-INDEX.
      ENDLOOP.

      LOOP AT O_ALV2 WHERE MARK = 'X'.
        WL_TABIX = SY-TABIX.
        IF O_ALV2-LOG   IS INITIAL          "primeiro processamento
          OR O_ALV2-LOG = ICON_INCOMPLETE   "Erro contabilização  - reprocessa
          OR ( O_ALV2-LOG = ICON_SYSTEM_UNDO AND P_E_LANC NE 'X' ) "Feito o estorno - reprocessa
          OR ( O_ALV2-LOG = ICON_LED_GREEN AND P_E_LANC = 'X' ). "Se lançamento OK permite estorno
          PERFORM ZF_LANCAR2 CHANGING O_ALV2 WL_ERRO.
          CLEAR: O_ALV2-OBJ_KEY, O_ALV2-OBJ_KEY_EST.
          IF P_E_LANC = 'X'.
            O_ALV2-OBJ_KEY_EST = VOBJ_KEY.
          ELSE.
            O_ALV2-OBJ_KEY     = VOBJ_KEY.
          ENDIF.
          O_ALV2-LOG     = ICON_MESSAGE_WARNING_SMALL.
          MODIFY O_ALV2 INDEX WL_TABIX TRANSPORTING OBJ_KEY OBJ_KEY_EST LOG.
        ENDIF.
      ENDLOOP.

    WHEN OTHERS.

  ENDCASE.

ENDMODULE.                 " USER_COMMAND_9002  INPUT
