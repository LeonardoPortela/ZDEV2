*----------------------------------------------------------------------*
***INCLUDE ZFIS36_1000.
*----------------------------------------------------------------------*

CLASS CL_TREE_EVENT_RECEIVER DEFINITION DEFERRED.
CLASS LCL_ALV_TOOLBAR DEFINITION DEFERRED.
CLASS LCL_EVENT_RECEIVER DEFINITION DEFERRED.

DATA: IT_BANCOS_DISP        TYPE TABLE OF T012T,
      IT_BANCOS_EMPRESA     TYPE TABLE OF ZFIT0143_ALV,
      IT_BANCOS_EMPRESA_SEL TYPE TABLE OF ZFIT0143_ALV,
      WA_BANCOS_EMPRESA     TYPE ZFIT0143_ALV,
      NODE_TABLE            TYPE TREEV_NTAB,
      ITEM_TABLE            TYPE STANDARD TABLE OF MTREEITM.

DATA: CONTAINER           TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      SPLITTER            TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      CONTAINER_TRE       TYPE REF TO CL_GUI_CONTAINER,
      CONTAINER_ALV       TYPE REF TO CL_GUI_CONTAINER,
      TREE                TYPE REF TO CL_GUI_COLUMN_TREE,
      DRAGDROP_TREE       TYPE REF TO CL_DRAGDROP,
      DRAGDROP_ALV        TYPE REF TO CL_DRAGDROP,
      TREE_EVENT_RECEIVER TYPE REF TO CL_TREE_EVENT_RECEIVER,
      OBG_TOOLBAR         TYPE REF TO LCL_ALV_TOOLBAR,
      CL_GRID             TYPE REF TO CL_GUI_ALV_GRID,
      TOOLBARMANAGER      TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,
      EVENT_RECEIVER      TYPE REF TO LCL_EVENT_RECEIVER,
      G_DROPEFFECT        TYPE I,
      G_HANDLE_TREE       TYPE I,
      G_HANDLE_ALV        TYPE I,
      WA_LAYOUT           TYPE LVC_S_LAYO,
      WA_STABLE           TYPE LVC_S_STBL,
      IT_FIELDCAT         TYPE LVC_T_FCAT,
      WA_VARIANT          TYPE DISVARIANT,
      IT_FUNCTION         TYPE UI_FUNCTIONS,
      LC_T042Z_ZLSCH      TYPE T042Z-ZLSCH.

CONSTANTS:
  BEGIN OF C_TREE,
    COLUMN1 TYPE TV_ITMNAME VALUE 'Banco',
    COLUMN2 TYPE TV_ITMNAME VALUE 'Descritivo',
  END OF C_TREE.

CLASS LCL_EVENT_RECEIVER DEFINITION.
  PUBLIC SECTION.
    METHODS HANDLE_ONDROP FOR EVENT ONDROP OF CL_GUI_ALV_GRID IMPORTING E_ROW E_COLUMN ES_ROW_NO E_DRAGDROPOBJ.
ENDCLASS.

CLASS LCL_ALV_TOOLBAR DEFINITION.
  PUBLIC SECTION.
*Constructor
    METHODS:
      CONSTRUCTOR         IMPORTING IO_ALV_GRID TYPE REF TO CL_GUI_ALV_GRID,
      ON_TOOLBAR          FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID IMPORTING E_OBJECT,
      HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID IMPORTING E_UCOMM.
ENDCLASS.                    "lcl_alv_toolbar DEFINITION


CLASS LCL_DRAGDROP_OBJ_TREE DEFINITION.
  PUBLIC SECTION.
    DATA: NODE  TYPE TV_NODEKEY.
ENDCLASS.

CLASS CL_TREE_EVENT_RECEIVER DEFINITION.
  PUBLIC SECTION.
    METHODS HANDLE_ON_DRAG FOR EVENT ON_DRAG OF CL_GUI_COLUMN_TREE IMPORTING NODE_KEY ITEM_NAME DRAG_DROP_OBJECT.
  PRIVATE SECTION.
ENDCLASS.

CLASS DYNPRO_UTILITIES DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS VALUE_HELP_FORMAS_PAGAMENTO.
ENDCLASS.

CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.

  METHOD HANDLE_ONDROP.

    DESCRIBE TABLE IT_BANCOS_EMPRESA LINES DATA(LC_QTD_LINHAS).

    IF T042Z-ZLSCH NE 'U' AND LC_QTD_LINHAS GE 1.
      MESSAGE S061 DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    READ TABLE ITEM_TABLE WITH KEY NODE_KEY = CAST LCL_DRAGDROP_OBJ_TREE( E_DRAGDROPOBJ->OBJECT )->NODE ITEM_NAME = C_TREE-COLUMN1
          INTO DATA(WA_ITEM_TABLE).

    CHECK SY-SUBRC IS INITIAL.

    READ TABLE IT_BANCOS_DISP WITH KEY HBKID = WA_ITEM_TABLE-TEXT INTO DATA(WA_BANCOS_DISP).

    CHECK SY-SUBRC IS INITIAL.

    IF IT_BANCOS_EMPRESA IS NOT INITIAL.

      SELECT SINGLE * INTO @DATA(WA_T012)
        FROM T012
       WHERE BUKRS EQ @T001-BUKRS
         AND HBKID EQ @WA_BANCOS_DISP-HBKID.

      DATA: LC_BANKL TYPE BANKK.

      LC_BANKL = WA_T012-BANKL(3) && '%'.

      SELECT * INTO TABLE @DATA(IT_T012)
        FROM T012
         FOR ALL ENTRIES IN @IT_BANCOS_EMPRESA
       WHERE BUKRS EQ @T001-BUKRS
         AND BANKL LIKE @LC_BANKL
         AND BUKRS EQ @IT_BANCOS_EMPRESA-BUKRS
         AND HBKID EQ @IT_BANCOS_EMPRESA-HBKID.

      IF SY-SUBRC IS INITIAL.
        MESSAGE S067 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
    ENDIF.

    """""""""""""""""""""""""""""""
    SELECT SINGLE * INTO @DATA(WA_T012T)
      FROM T012T
     WHERE SPRAS EQ @SY-LANGU
       AND BUKRS EQ @T001-BUKRS
       AND HBKID EQ @WA_BANCOS_DISP-HBKID.

    CHECK SY-SUBRC IS INITIAL.

    CLEAR: WA_BANCOS_EMPRESA.
    WA_BANCOS_EMPRESA-BUKRS = WA_T012T-BUKRS.
    WA_BANCOS_EMPRESA-ZLSCH = T042Z-ZLSCH.
    WA_BANCOS_EMPRESA-HBKID = WA_T012T-HBKID.
    WA_BANCOS_EMPRESA-TEXT1 = WA_T012T-TEXT1.
    WA_BANCOS_EMPRESA-BUTXT = T001-BUTXT.
    APPEND WA_BANCOS_EMPRESA TO IT_BANCOS_EMPRESA.
    CK_ALTEROU = ABAP_TRUE.
    """""""""""""""""""""""""""""""

    DATA: GS_ALV_REFRES_COND TYPE LVC_S_STBL.

    PERFORM BANCOS_DISPONIVEIS.

    CHECK CL_GRID IS NOT INITIAL.

    GS_ALV_REFRES_COND-ROW = ABAP_TRUE.
    GS_ALV_REFRES_COND-COL = ABAP_TRUE.

    CALL METHOD CL_GRID->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE      = GS_ALV_REFRES_COND
        I_SOFT_REFRESH = ABAP_TRUE.

    CALL METHOD CL_GUI_CFW=>FLUSH.

    LEAVE TO SCREEN 1000.

  ENDMETHOD.                    "HANDLE_BUTTON_CLICK

ENDCLASS.

CLASS LCL_ALV_TOOLBAR IMPLEMENTATION.

  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT TOOLBARMANAGER
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.

  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    DATA: TY_TOOLBAR   TYPE STB_BUTTON.

*    "Separador
    TY_TOOLBAR-BUTN_TYPE = 3.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    "Marcar Todos os Documentos
    TY_TOOLBAR-ICON      = ICON_DELETE_ROW.
    TY_TOOLBAR-FUNCTION  = 'DEL'.
    TY_TOOLBAR-QUICKINFO = TEXT-007.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    CALL METHOD TOOLBARMANAGER->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    CLEAR: IT_BANCOS_EMPRESA_SEL, IT_BANCOS_EMPRESA_SEL[].

    CALL METHOD CL_GRID->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = DATA(IT_SELECTED).

    LOOP AT IT_SELECTED INTO DATA(WA_SELECTED).
      READ TABLE IT_BANCOS_EMPRESA INTO WA_BANCOS_EMPRESA INDEX WA_SELECTED-INDEX.
      APPEND WA_BANCOS_EMPRESA TO IT_BANCOS_EMPRESA_SEL.
    ENDLOOP.

    CASE E_UCOMM.
      WHEN 'DEL'.
        PERFORM DELETAR_BANCO.
    ENDCASE.

  ENDMETHOD.

ENDCLASS.

CLASS DYNPRO_UTILITIES IMPLEMENTATION.

  METHOD VALUE_HELP_FORMAS_PAGAMENTO.

    TYPES: BEGIN OF T042Z_LINE,
             ZLSCH TYPE T042Z-ZLSCH,
             TEXT1 TYPE T042Z-TEXT1,
           END OF T042Z_LINE.

    DATA T042Z_LIST TYPE STANDARD TABLE OF T042Z_LINE.

    SELECT ZLSCH, TEXT1
      INTO CORRESPONDING FIELDS OF TABLE @T042Z_LIST
     FROM T042Z
    WHERE LAND1 EQ @T001-LAND1.

    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        RETFIELD        = 'ZLSCH'
        VALUE_ORG       = 'S'
      TABLES
        VALUE_TAB       = T042Z_LIST
      EXCEPTIONS
        PARAMETER_ERROR = 1
        NO_VALUES_FOUND = 2
        OTHERS          = 3.
    IF SY-SUBRC <> 0.
    ENDIF.

  ENDMETHOD.

ENDCLASS.

*---------------------------------------------------------------------*
*       CLASS CL_TREE_EVENT_RECEIVER IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS CL_TREE_EVENT_RECEIVER IMPLEMENTATION.

  METHOD HANDLE_ON_DRAG.
    CHECK NOT NODE_KEY IS INITIAL.

    DATA: L_OBJ TYPE REF TO LCL_DRAGDROP_OBJ_TREE.

    CREATE OBJECT L_OBJ.
    L_OBJ->NODE = NODE_KEY.
    DRAG_DROP_OBJECT->OBJECT = L_OBJ.
  ENDMETHOD.

ENDCLASS.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_1000_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_1000_EXIT INPUT.

  PERFORM VERIFICAR_DESEJA_SALVAR.

  IF CK_ALTEROU EQ ABAP_FALSE.
    CLEAR: IT_BANCOS_EMPRESA[], IT_BANCOS_DISP[].

    CLEAR: EVENT_RECEIVER,
           TOOLBARMANAGER,
           OBG_TOOLBAR,
           TREE_EVENT_RECEIVER,
           DRAGDROP_ALV,
           DRAGDROP_TREE.

    IF CL_GRID IS NOT INITIAL.
      CL_GRID->FREE( ).
    ENDIF.
    CLEAR: CL_GRID.

    IF TREE IS NOT INITIAL.
      TREE->FREE( ).
    ENDIF.
    CLEAR: TREE.

    IF CONTAINER_ALV IS NOT INITIAL.
      CONTAINER_ALV->FREE( ).
    ENDIF.
    CLEAR: CONTAINER_ALV.

    IF CONTAINER_TRE IS NOT INITIAL.
      CONTAINER_TRE->FREE( ).
    ENDIF.
    CLEAR: CONTAINER_TRE.

    IF SPLITTER IS NOT INITIAL.
      SPLITTER->FREE( ).
    ENDIF.
    CLEAR: SPLITTER.

    IF CONTAINER IS NOT INITIAL.
      CONTAINER->FREE( ).
    ENDIF.
    CLEAR: CONTAINER.

    LEAVE TO SCREEN 0.
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_1000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_1000 OUTPUT.

  DATA: HIERARCHY_HEADER TYPE TREEV_HHDR,
        IT_EXCLUDING     TYPE TABLE OF SY-UCOMM.

  CLEAR: IT_EXCLUDING.
  IF CK_ALTEROU NE ABAP_TRUE.
    APPEND 'SAVE' TO IT_EXCLUDING.
  ENDIF.

  SET PF-STATUS 'PF1000' EXCLUDING IT_EXCLUDING.
  SET TITLEBAR 'TL1000' WITH T001-BUKRS.

  IF SPLITTER IS INITIAL.

    CREATE OBJECT CONTAINER
      EXPORTING
        CONTAINER_NAME = 'ALV_SPLIT'.

    CREATE OBJECT SPLITTER
      EXPORTING
        PARENT  = CONTAINER
        ROWS    = 1
        COLUMNS = 2.

    CALL METHOD SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = CONTAINER_TRE.

    CALL METHOD SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 2
      RECEIVING
        CONTAINER = CONTAINER_ALV.

    HIERARCHY_HEADER-HEADING = TEXT-005.
    HIERARCHY_HEADER-WIDTH   = 31.

    CREATE OBJECT TREE
      EXPORTING
        PARENT                = CONTAINER_TRE
        NODE_SELECTION_MODE   = TREE->NODE_SEL_MODE_SINGLE
        ITEM_SELECTION        = 'X'
        HIERARCHY_COLUMN_NAME = C_TREE-COLUMN1
        HIERARCHY_HEADER      = HIERARCHY_HEADER.

    CALL METHOD TREE->ADD_COLUMN
      EXPORTING
        NAME        = C_TREE-COLUMN2
        WIDTH       = 50
        HEADER_TEXT = TEXT-006.

    CREATE OBJECT TREE_EVENT_RECEIVER.
    SET HANDLER TREE_EVENT_RECEIVER->HANDLE_ON_DRAG FOR TREE.

    G_DROPEFFECT = CL_DRAGDROP=>MOVE.

    CREATE OBJECT DRAGDROP_TREE.

    CALL METHOD DRAGDROP_TREE->ADD
      EXPORTING
        FLAVOR     = 'LINE'
        DRAGSRC    = 'X'
        DROPTARGET = ''
        EFFECT     = G_DROPEFFECT.

    CALL METHOD DRAGDROP_TREE->GET_HANDLE
      IMPORTING
        HANDLE = G_HANDLE_TREE.

    CREATE OBJECT DRAGDROP_ALV.

    CALL METHOD DRAGDROP_ALV->ADD
      EXPORTING
        FLAVOR     = 'LINE'
        DRAGSRC    = ''
        DROPTARGET = 'X'
        EFFECT     = G_DROPEFFECT.

    CALL METHOD DRAGDROP_ALV->GET_HANDLE
      IMPORTING
        HANDLE = G_HANDLE_ALV.

    CLEAR: WA_LAYOUT, WA_STABLE.
    WA_LAYOUT-ZEBRA      = ABAP_TRUE.
    WA_STABLE-ROW        = ABAP_TRUE.
    WA_STABLE-COL        = ABAP_TRUE.
    WA_LAYOUT-SEL_MODE   = 'A'.
    WA_LAYOUT-S_DRAGDROP-CNTR_DDID = G_HANDLE_ALV.

    WA_VARIANT-REPORT      = SY-REPID.
    WA_VARIANT-HANDLE      = '9001'.
    WA_VARIANT-LOG_GROUP   = ABAP_FALSE.
    WA_VARIANT-USERNAME    = ABAP_FALSE.
    WA_VARIANT-VARIANT     = ABAP_FALSE.
    WA_VARIANT-TEXT        = ABAP_FALSE.
    WA_VARIANT-DEPENDVARS  = ABAP_FALSE.

    CLEAR: IT_FIELDCAT[], IT_FIELDCAT.

    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        I_STRUCTURE_NAME = 'ZFIT0143_ALV'
      CHANGING
        CT_FIELDCAT      = IT_FIELDCAT.

    CREATE OBJECT CL_GRID
      EXPORTING
        I_PARENT = CONTAINER_ALV.

    CREATE OBJECT OBG_TOOLBAR
      EXPORTING
        IO_ALV_GRID = CL_GRID.

    SET HANDLER OBG_TOOLBAR->ON_TOOLBAR FOR CL_GRID.
    SET HANDLER OBG_TOOLBAR->HANDLE_USER_COMMAND FOR CL_GRID.

    CL_GRID->REGISTER_EDIT_EVENT( EXPORTING I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).
    CL_GRID->REGISTER_EDIT_EVENT( EXPORTING I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED ).

    CLEAR: IT_FUNCTION.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW    TO IT_FUNCTION.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW    TO IT_FUNCTION.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW      TO IT_FUNCTION.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE         TO IT_FUNCTION.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW TO IT_FUNCTION.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO          TO IT_FUNCTION.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW    TO IT_FUNCTION.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_COPY          TO IT_FUNCTION.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW      TO IT_FUNCTION.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_CUT           TO IT_FUNCTION.
    APPEND CL_GUI_ALV_GRID=>MC_FC_LOC_CUT           TO IT_FUNCTION.
    APPEND CL_GUI_ALV_GRID=>MC_FC_CHECK             TO IT_FUNCTION.
    APPEND CL_GUI_ALV_GRID=>MC_FC_REFRESH           TO IT_FUNCTION.

    CREATE OBJECT EVENT_RECEIVER.
    SET HANDLER EVENT_RECEIVER->HANDLE_ONDROP FOR CL_GRID.

    CALL METHOD CL_GRID->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_VARIANT                    = WA_VARIANT
        I_SAVE                        = 'A'
        IS_LAYOUT                     = WA_LAYOUT
        IT_TOOLBAR_EXCLUDING          = IT_FUNCTION
      CHANGING
        IT_OUTTAB                     = IT_BANCOS_EMPRESA[]
        IT_FIELDCATALOG               = IT_FIELDCAT
      EXCEPTIONS
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        OTHERS                        = 4.

    IF SY-SUBRC IS NOT INITIAL.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ENDIF.

  CALL METHOD CL_GRID->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE = WA_STABLE.

ENDMODULE.


*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_1000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_1000 INPUT.

  CASE OK_CODE.
    WHEN 'FORMA'.
      CLEAR: OK_CODE.
      PERFORM VERIFICAR_DESEJA_SALVAR.
      IF CK_ALTEROU EQ ABAP_FALSE.
        PERFORM SELECIONAR_FORMA_PAGAMENTO.
      ELSE.
        T042Z-ZLSCH = LC_T042Z_ZLSCH.
      ENDIF.
    WHEN 'SAVE'.
      CLEAR: OK_CODE.
      PERFORM SALVAR_CONFIGURACAO.
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  CREATE_DROPDOWN_BOX_ZLSCH  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE CREATE_DROPDOWN_BOX_ZLSCH INPUT.
  DYNPRO_UTILITIES=>VALUE_HELP_FORMAS_PAGAMENTO( ).
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  VERIFICAR_DESEJA_SALVAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM VERIFICAR_DESEJA_SALVAR .

  DATA: LC_ANSWER TYPE CHAR01.

  CHECK CK_ALTEROU EQ ABAP_TRUE.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      TITLEBAR              = TEXT-001
      TEXT_QUESTION         = TEXT-002
      TEXT_BUTTON_1         = TEXT-003
      ICON_BUTTON_1         = 'ICON_SYSTEM_SAVE'
      TEXT_BUTTON_2         = TEXT-004
      ICON_BUTTON_2         = 'ICON_INCOMPLETE'
      DEFAULT_BUTTON        = '1'
      DISPLAY_CANCEL_BUTTON = 'X'
    IMPORTING
      ANSWER                = LC_ANSWER
    EXCEPTIONS
      TEXT_NOT_FOUND        = 1
      OTHERS                = 2.

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 DISPLAY LIKE 'E'.
  ELSE.
    CASE LC_ANSWER.
      WHEN '1'.
        PERFORM SALVAR_CONFIGURACAO.
      WHEN '2'.
        CLEAR: CK_ALTEROU, IT_BANCOS_EMPRESA[].
    ENDCASE.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  SALVAR_CONFIGURACAO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SALVAR_CONFIGURACAO.

  DATA: WA_ZFIT0143 TYPE ZFIT0143,
        IT_ZFIT0143 TYPE TABLE OF ZFIT0143.

  DELETE FROM ZFIT0143 WHERE BUKRS EQ T001-BUKRS AND ZLSCH EQ T042Z-ZLSCH.

  IF IT_BANCOS_EMPRESA IS NOT INITIAL.
    LOOP AT IT_BANCOS_EMPRESA INTO DATA(WA_BANCOS_EMPRESA).
      MOVE-CORRESPONDING WA_BANCOS_EMPRESA TO WA_ZFIT0143.
      APPEND WA_ZFIT0143 TO IT_ZFIT0143.
    ENDLOOP.
    INSERT ZFIT0143 FROM TABLE IT_ZFIT0143 ACCEPTING DUPLICATE KEYS.
  ENDIF.
  COMMIT WORK.
  CK_ALTEROU = ABAP_FALSE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  SELECIONAR_FORMA_PAGAMENTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SELECIONAR_FORMA_PAGAMENTO .

  CLEAR: IT_BANCOS_EMPRESA[], IT_BANCOS_DISP[].

  LC_T042Z_ZLSCH = T042Z-ZLSCH.

  "Bancos Configurados p/ a Forma de Pagemento
  SELECT * INTO TABLE @DATA(IT_ZFIT0143)
    FROM ZFIT0143
   WHERE BUKRS EQ @T001-BUKRS
     AND ZLSCH EQ @T042Z-ZLSCH.

  "Bancos empresa - Texto
  IF IT_ZFIT0143 IS NOT INITIAL.
    SELECT * INTO TABLE @DATA(IT_T012T)
      FROM T012T
       FOR ALL ENTRIES IN @IT_ZFIT0143
     WHERE SPRAS EQ @SY-LANGU
       AND BUKRS EQ @T001-BUKRS
       AND HBKID EQ @IT_ZFIT0143-HBKID.
  ELSE.
    SELECT * INTO TABLE @IT_T012T
      FROM T012T
     WHERE SPRAS EQ @SY-LANGU
       AND BUKRS EQ @T001-BUKRS.
  ENDIF.

  LOOP AT IT_ZFIT0143 INTO DATA(WA_ZFIT0143).

    CLEAR: WA_BANCOS_EMPRESA.
    MOVE-CORRESPONDING WA_ZFIT0143 TO WA_BANCOS_EMPRESA.
    WA_BANCOS_EMPRESA-BUTXT = T001-BUTXT.

    READ TABLE IT_T012T INTO DATA(WA_T012T)
    WITH KEY BUKRS = WA_ZFIT0143-BUKRS
             HBKID = WA_ZFIT0143-HBKID.
    IF SY-SUBRC IS INITIAL.
      WA_BANCOS_EMPRESA-TEXT1 = WA_T012T-TEXT1.
    ENDIF.

    APPEND WA_BANCOS_EMPRESA TO IT_BANCOS_EMPRESA.

  ENDLOOP.

  PERFORM BANCOS_DISPONIVEIS.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  BANCOS_DISPONIVEIS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM BANCOS_DISPONIVEIS .

  CLEAR: IT_BANCOS_DISP[].

  SELECT * INTO TABLE @DATA(IT_T012)
    FROM T012
   WHERE BUKRS EQ @T001-BUKRS.

  LOOP AT IT_BANCOS_EMPRESA INTO WA_BANCOS_EMPRESA.
    DELETE IT_T012
     WHERE BUKRS EQ WA_BANCOS_EMPRESA-BUKRS
       AND HBKID EQ WA_BANCOS_EMPRESA-HBKID.
  ENDLOOP.

  SELECT * INTO TABLE @DATA(IT_T012T)
    FROM T012T
     FOR ALL ENTRIES IN @IT_T012
   WHERE SPRAS EQ @SY-LANGU
     AND BUKRS EQ @IT_T012-BUKRS
     AND HBKID EQ @IT_T012-HBKID.

  LOOP AT IT_T012 INTO DATA(WA_T012).
    READ TABLE IT_T012T INTO DATA(WA_T012T)
    WITH KEY BUKRS = WA_T012-BUKRS
             HBKID = WA_T012-HBKID.
    IF SY-SUBRC IS INITIAL.
      APPEND WA_T012T TO IT_BANCOS_DISP.
    ENDIF.
  ENDLOOP.

  PERFORM ATUALIZA_ALV_TRE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ATUALIZA_ALV_TRE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ATUALIZA_ALV_TRE .

  DATA: QTD_ITENS TYPE I,
        NODE      TYPE TREEV_NODE,
        ITEM      TYPE MTREEITM.

  CLEAR: NODE_TABLE,
         ITEM_TABLE,
         NODE_TABLE[],
         ITEM_TABLE[].

  TREE->DELETE_ALL_NODES( ).

  QTD_ITENS = 1.

  SORT IT_BANCOS_DISP ASCENDING BY HBKID.

  LOOP AT IT_BANCOS_DISP INTO DATA(WA_BANCOS_DISP).

    NODE-NODE_KEY   = QTD_ITENS.
    NODE-HIDDEN     = ' '.                 " The node is visible,
    NODE-DISABLED   = ' '.                 " selectable,
    NODE-ISFOLDER   = ' '.                 " a folder.
    NODE-EXPANDER   = ' '.
    NODE-N_IMAGE    = ICON_COMPANY_CODE.
    NODE-EXP_IMAGE  = ICON_COMPANY_CODE.
    NODE-DRAGDROPID = G_HANDLE_TREE.
    APPEND NODE TO NODE_TABLE.

    CLEAR ITEM.
    ITEM-NODE_KEY  = NODE-NODE_KEY.
    ITEM-ITEM_NAME = C_TREE-COLUMN1.
    ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
    ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_LEFT.
    ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_INTENSIFIED.
    ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
    ITEM-TEXT      = WA_BANCOS_DISP-HBKID.
    APPEND ITEM TO ITEM_TABLE.

    CLEAR ITEM.
    ITEM-NODE_KEY  = NODE-NODE_KEY.
    ITEM-ITEM_NAME = C_TREE-COLUMN2.
    ITEM-CLASS     = CL_GUI_LIST_TREE=>ITEM_CLASS_TEXT. " Text Item
    ITEM-ALIGNMENT = CL_GUI_LIST_TREE=>ALIGN_LEFT.
    ITEM-STYLE     = CL_GUI_LIST_TREE=>STYLE_DEFAULT.
    ITEM-FONT      = CL_GUI_LIST_TREE=>ITEM_FONT_PROP.
    ITEM-TEXT      = WA_BANCOS_DISP-TEXT1.
    APPEND ITEM TO ITEM_TABLE.

    ADD 1 TO QTD_ITENS.

  ENDLOOP.

  CALL METHOD TREE->ADD_NODES_AND_ITEMS
    EXPORTING
      NODE_TABLE                     = NODE_TABLE
      ITEM_TABLE                     = ITEM_TABLE
      ITEM_TABLE_STRUCTURE_NAME      = 'MTREEITM'
    EXCEPTIONS
      FAILED                         = 1
      CNTL_SYSTEM_ERROR              = 3
      ERROR_IN_TABLES                = 4
      DP_ERROR                       = 5
      TABLE_STRUCTURE_NAME_NOT_FOUND = 6.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  DELETAR_BANCO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DELETAR_BANCO .

  LOOP AT IT_BANCOS_EMPRESA_SEL INTO DATA(WA_BANCOS_EMPRESA_SEL).
    CK_ALTEROU = ABAP_TRUE.
    DELETE IT_BANCOS_EMPRESA
     WHERE BUKRS EQ WA_BANCOS_EMPRESA_SEL-BUKRS
       AND ZLSCH EQ WA_BANCOS_EMPRESA_SEL-ZLSCH
       AND HBKID EQ WA_BANCOS_EMPRESA_SEL-HBKID.
  ENDLOOP.

  DATA: GS_ALV_REFRES_COND TYPE LVC_S_STBL.

  PERFORM BANCOS_DISPONIVEIS.

  CHECK CL_GRID IS NOT INITIAL.

  GS_ALV_REFRES_COND-ROW = ABAP_TRUE.
  GS_ALV_REFRES_COND-COL = ABAP_TRUE.

  CALL METHOD CL_GRID->REFRESH_TABLE_DISPLAY
    EXPORTING
      IS_STABLE      = GS_ALV_REFRES_COND
      I_SOFT_REFRESH = ABAP_TRUE.

  CALL METHOD CL_GUI_CFW=>FLUSH.

  LEAVE TO SCREEN 1000.

ENDFORM.
