*&---------------------------------------------------------------------*
*& Report  ZLESR0122
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZLESR0122.

TABLES: ZLEST0019_L2_20, ZLEST0165.

TYPES BEGIN OF TY_MONTA_PROCESSO.
TYPES:  DCL      TYPE ZDCL,
        SERIE    TYPE ZSERIEDCL,
        ZIDVAGAO TYPE OPTIONAL,
        CNPJ     TYPE ZCNPJFERRO,
        BUKRS    TYPE BUKRS,
        BRANCH   TYPE J_1BBRANC_,
        NFENUM   TYPE J_1BNFNUM9,
        SERIES   TYPE J_1BSERIES.
        INCLUDE TYPE ZLEST0165.
TYPES END OF TY_MONTA_PROCESSO.

* PARAMETERS: Access Key Data
SELECTION-SCREEN BEGIN OF BLOCK VAGAO WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS: PDCL   FOR ZLEST0019_L2_20-DCL,
                PVAGAO FOR ZLEST0019_L2_20-IDVAGAO,
                DTCHE  FOR ZLEST0019_L2_20-DTACHEGADA,
                DTATU  FOR ZLEST0165-DT_ATUALIZACAO.
SELECTION-SCREEN END OF BLOCK VAGAO.

INITIALIZATION.

  IF SY-BATCH EQ ABAP_TRUE.
    IF DTATU IS INITIAL.
      DTATU[] = VALUE #( SIGN = 'I' OPTION = 'EQ' ( LOW = SY-DATUM HIGH = SY-DATUM ) ).
    ENDIF.
    PERFORM EXECUTAR_SELECAO.
    PERFORM VERIFICA_ERRO_ID_VAGAO.
    LEAVE PROGRAM.
  ENDIF.

START-OF-SELECTION.

  PERFORM EXECUTAR_SELECAO.
  PERFORM VERIFICA_ERRO_ID_VAGAO.

*&---------------------------------------------------------------------*
*&      Form  EXECUTAR_SELECAO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM EXECUTAR_SELECAO .

  "Busca Documento não processados
  SELECT * INTO TABLE @DATA(IT_ZLEST0165)
    FROM ZLEST0165
   WHERE DT_CHEGADA     IN @DTCHE
     AND ID_VAGAO       IN @PVAGAO
     AND DT_ATUALIZACAO IN @DTATU.

  CHECK SY-SUBRC IS INITIAL.

  PERFORM EXECUTAR TABLES IT_ZLEST0165.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_ERRO_ID_VAGAO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM VERIFICA_ERRO_ID_VAGAO .

  "Busca Documento não processados
  SELECT * INTO TABLE @DATA(IT_ZLEST0165)
    FROM ZLEST0165
   WHERE CK_PROCESSADO  EQ @ABAP_FALSE
     AND DT_CHEGADA     IN @DTCHE
     AND ID_VAGAO       IN @PVAGAO
     AND DT_ATUALIZACAO IN @DTATU.

  CHECK SY-SUBRC IS INITIAL.

  " Busca DCLs do Vagão - Saída do Ferroviário
  SELECT * INTO TABLE @DATA(IT_ZLEST0019_L2_20)
    FROM ZLEST0019_L2_20
     FOR ALL ENTRIES IN @IT_ZLEST0165
   WHERE IDVAGAO EQ @IT_ZLEST0165-ID_VAGAO
     AND DCL     IN @PDCL.

  SORT IT_ZLEST0019_L2_20 BY IDVAGAO.

  DATA: IT_MONTA_PROCESSO TYPE TABLE OF TY_MONTA_PROCESSO WITH HEADER LINE.

  CHECK PDCL IS INITIAL.
  CHECK PVAGAO IS INITIAL.

  CLEAR: IT_MONTA_PROCESSO[], IT_MONTA_PROCESSO.

  "Separar Vagoes e Compoio
  DATA(IT_VAGOES) = IT_ZLEST0165[].
  SORT IT_VAGOES BY DS_COMBOIO ID_VAGAO.
  DELETE ADJACENT DUPLICATES FROM IT_VAGOES COMPARING DS_COMBOIO ID_VAGAO.

  """ VERIFICAR CARGAR QUE NÃO FOI LOCALIZADO O VAGÃO
  LOOP AT IT_VAGOES INTO DATA(WA_VAGOES).

    READ TABLE IT_ZLEST0019_L2_20 WITH KEY IDVAGAO = WA_VAGOES-ID_VAGAO TRANSPORTING NO FIELDS BINARY SEARCH.
    IF SY-SUBRC IS INITIAL.
      CONTINUE.
    ENDIF.

    READ TABLE IT_ZLEST0165 WITH KEY DS_COMBOIO = WA_VAGOES-DS_COMBOIO
                                     ID_VAGAO = WA_VAGOES-ID_VAGAO
                            INTO DATA(WA_ZLEST0165).
    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.

    SELECT SINGLE * INTO @DATA(WA_J_1BNFE_ACTIVE)
      FROM J_1BNFE_ACTIVE
     WHERE REGIO   = @WA_ZLEST0165-CD_CHAVE_NFE(2)
       AND NFYEAR  = @WA_ZLEST0165-CD_CHAVE_NFE+2(2)
       AND NFMONTH = @WA_ZLEST0165-CD_CHAVE_NFE+4(2)
       AND STCD1   = @WA_ZLEST0165-CD_CHAVE_NFE+6(14)
       AND MODEL   = @WA_ZLEST0165-CD_CHAVE_NFE+20(2)
       AND SERIE   = @WA_ZLEST0165-CD_CHAVE_NFE+22(3)
       AND NFNUM9  = @WA_ZLEST0165-CD_CHAVE_NFE+25(9)
       AND DOCNUM9 = @WA_ZLEST0165-CD_CHAVE_NFE+34(9)
       AND CDV     = @WA_ZLEST0165-CD_CHAVE_NFE+43(1).

    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.

    "Pegar todos os vagoes de L2 que tem esta nota fiscal (ITENS).
    SELECT * INTO TABLE @DATA(IT_ZLEST0019_L2_30_N)
      FROM ZLEST0019_L2_30
     WHERE DOCNUM EQ @WA_J_1BNFE_ACTIVE-DOCNUM.

    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.

    "Pegar todos as notas dos vagoes (itens).
    SELECT * INTO TABLE @DATA(IT_ZLEST0019_L2_30_T)
      FROM ZLEST0019_L2_30
       FOR ALL ENTRIES IN @IT_ZLEST0019_L2_30_N
     WHERE DCL       EQ @IT_ZLEST0019_L2_30_N-DCL
       AND SERIEDCL  EQ @IT_ZLEST0019_L2_30_N-SERIEDCL
       AND CNPJFERRO EQ @IT_ZLEST0019_L2_30_N-CNPJFERRO
       AND ID_REFKEY EQ @IT_ZLEST0019_L2_30_N-ID_REFKEY.

    DATA(IT_VALOES_L2) = IT_ZLEST0019_L2_30_T[].
    SORT IT_VALOES_L2 BY DCL SERIEDCL CNPJFERRO ID_REFKEY.
    DELETE ADJACENT DUPLICATES FROM IT_VALOES_L2 COMPARING DCL SERIEDCL CNPJFERRO ID_REFKEY.

    LOOP AT IT_ZLEST0165 ASSIGNING FIELD-SYMBOL(<FS_165>)
       WHERE ID_VAGAO   EQ WA_VAGOES-ID_VAGAO
         AND DS_COMBOIO EQ WA_VAGOES-DS_COMBOIO.

      SELECT SINGLE * INTO WA_J_1BNFE_ACTIVE
        FROM J_1BNFE_ACTIVE
       WHERE REGIO   = <FS_165>-CD_CHAVE_NFE(2)
         AND NFYEAR  = <FS_165>-CD_CHAVE_NFE+2(2)
         AND NFMONTH = <FS_165>-CD_CHAVE_NFE+4(2)
         AND STCD1   = <FS_165>-CD_CHAVE_NFE+6(14)
         AND MODEL   = <FS_165>-CD_CHAVE_NFE+20(2)
         AND SERIE   = <FS_165>-CD_CHAVE_NFE+22(3)
         AND NFNUM9  = <FS_165>-CD_CHAVE_NFE+25(9)
         AND DOCNUM9 = <FS_165>-CD_CHAVE_NFE+34(9)
         AND CDV     = <FS_165>-CD_CHAVE_NFE+43(1).

      IF SY-SUBRC IS NOT INITIAL.
        CONTINUE.
      ENDIF.
      <FS_165>-DOCNUM = WA_J_1BNFE_ACTIVE-DOCNUM.

      LOOP AT IT_VALOES_L2 INTO DATA(WA_VALOES_L2).
        READ TABLE IT_ZLEST0019_L2_30_T
          WITH KEY DCL       = WA_VALOES_L2-DCL
                   SERIEDCL  = WA_VALOES_L2-SERIEDCL
                   CNPJFERRO = WA_VALOES_L2-CNPJFERRO
                   ID_REFKEY = WA_VALOES_L2-ID_REFKEY
                   DOCNUM    = <FS_165>-DOCNUM TRANSPORTING NO FIELDS.

        IF SY-SUBRC IS NOT INITIAL.
          DELETE IT_ZLEST0019_L2_30_T
           WHERE DCL       = WA_VALOES_L2-DCL
             AND SERIEDCL  = WA_VALOES_L2-SERIEDCL
             AND CNPJFERRO = WA_VALOES_L2-CNPJFERRO
             AND ID_REFKEY = WA_VALOES_L2-ID_REFKEY.
        ENDIF.
      ENDLOOP.

      DATA(IT_ZLEST0165_QTD) = IT_ZLEST0165[].
      DELETE IT_ZLEST0165_QTD WHERE DS_COMBOIO NE WA_VAGOES-DS_COMBOIO.
      DELETE IT_ZLEST0165_QTD WHERE ID_VAGAO NE WA_VAGOES-ID_VAGAO.
      DESCRIBE TABLE IT_ZLEST0165_QTD LINES DATA(QTD_NOTAS_OPUS).
      DESCRIBE TABLE IT_ZLEST0019_L2_30_T LINES DATA(QTD_NOTAS_L2).

      "Achou o vagão correto.
      IF QTD_NOTAS_OPUS EQ QTD_NOTAS_L2.

        READ TABLE IT_ZLEST0019_L2_30_T INTO DATA(WA_ZLEST0019_L2_30_T) INDEX 1.

        SELECT SINGLE * INTO @DATA(WA_ZLEST0019_L2_20)
          FROM ZLEST0019_L2_20
         WHERE DCL        EQ @WA_ZLEST0019_L2_30_T-DCL
           AND SERIEDCL   EQ @WA_ZLEST0019_L2_30_T-SERIEDCL
           AND CNPJFERRO  EQ @WA_ZLEST0019_L2_30_T-CNPJFERRO
           AND ID_REFKEY  EQ @WA_ZLEST0019_L2_30_T-ID_REFKEY.
      ENDIF.

    ENDLOOP.

  ENDLOOP.
  """

  IF IT_ZLEST0165[] IS NOT INITIAL.
    MODIFY ZLEST0165 FROM TABLE IT_ZLEST0165.
  ENDIF.

  PERFORM EXECUTAR TABLES IT_ZLEST0165.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  EXECUTAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_ZLEST0165  text
*----------------------------------------------------------------------*
FORM EXECUTAR  TABLES  IT_ZLEST0165 STRUCTURE ZLEST0165.

  DATA: OBJ_FERRO_CHEGADA TYPE REF TO ZCL_FERROVIARIO_CHEGADA,
        IT_MONTA_PROCESSO TYPE TABLE OF TY_MONTA_PROCESSO WITH HEADER LINE,
        I_ID_AGPESO	      TYPE LIFNR.

  CREATE OBJECT OBJ_FERRO_CHEGADA.

  "Busca de Local de Entrega (L3)
  SELECT * INTO TABLE @DATA(IT_ZLEST0114)
    FROM ZLEST0114
     FOR ALL ENTRIES IN @IT_ZLEST0165
   WHERE LOCAL_DESCARGA EQ @IT_ZLEST0165-ID_LOCAL_ENTREGA.

  SORT IT_ZLEST0114 BY LOCAL_DESCARGA.

  " Busca DCLs do Vagão - Saída do Ferroviário
  SELECT * INTO TABLE @DATA(IT_ZLEST0019_L2_20)
    FROM ZLEST0019_L2_20
     FOR ALL ENTRIES IN @IT_ZLEST0165
   WHERE IDVAGAO EQ @IT_ZLEST0165-ID_VAGAO
     AND DCL     IN @PDCL.

  CHECK SY-SUBRC IS INITIAL.

  "Busca Notas do Vagão - Saída do Ferroviário
  SELECT * INTO TABLE @DATA(IT_ZLEST0019_L2_30)
    FROM ZLEST0019_L2_30
     FOR ALL ENTRIES IN @IT_ZLEST0019_L2_20
   WHERE DCL       EQ @IT_ZLEST0019_L2_20-DCL
     AND CNPJFERRO EQ @IT_ZLEST0019_L2_20-CNPJFERRO.

  CHECK SY-SUBRC IS INITIAL.

  "Elimina documentos não localizados
  DELETE IT_ZLEST0019_L2_30 WHERE DOCNUM IS INITIAL.

  "Verifica se ficou algum documento
  CHECK IT_ZLEST0019_L2_30[] IS NOT INITIAL.

  "Busca chaves localizadas
  SELECT * INTO TABLE @DATA(IT_J_1BNFE_ACTIVE)
    FROM J_1BNFE_ACTIVE
     FOR ALL ENTRIES IN @IT_ZLEST0019_L2_30
   WHERE DOCNUM EQ @IT_ZLEST0019_L2_30-DOCNUM.

  CHECK SY-SUBRC IS INITIAL.

  "Busca Cabeçalho da Nota Fiscal
  SELECT * INTO TABLE @DATA(IT_J_1BNFDOC)
    FROM J_1BNFDOC
     FOR ALL ENTRIES IN @IT_J_1BNFE_ACTIVE
   WHERE DOCNUM EQ @IT_J_1BNFE_ACTIVE-DOCNUM.

  CHECK SY-SUBRC IS INITIAL.
  SORT IT_J_1BNFDOC BY DOCNUM.

  LOOP AT IT_ZLEST0165 ASSIGNING FIELD-SYMBOL(<FS_ZLEST0165>).

    READ TABLE IT_J_1BNFE_ACTIVE INTO DATA(WA_J_1BNFE_ACTIVE)
    WITH KEY REGIO   = <FS_ZLEST0165>-CD_CHAVE_NFE(2)
             NFYEAR  = <FS_ZLEST0165>-CD_CHAVE_NFE+2(2)
             NFMONTH = <FS_ZLEST0165>-CD_CHAVE_NFE+4(2)
             STCD1   = <FS_ZLEST0165>-CD_CHAVE_NFE+6(14)
             MODEL   = <FS_ZLEST0165>-CD_CHAVE_NFE+20(2)
             SERIE   = <FS_ZLEST0165>-CD_CHAVE_NFE+22(3)
             NFNUM9  = <FS_ZLEST0165>-CD_CHAVE_NFE+25(9)
             DOCNUM9 = <FS_ZLEST0165>-CD_CHAVE_NFE+34(9)
             CDV     = <FS_ZLEST0165>-CD_CHAVE_NFE+43(1).

    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.

    <FS_ZLEST0165>-DOCNUM = WA_J_1BNFE_ACTIVE-DOCNUM.

    LOOP AT IT_ZLEST0019_L2_30 INTO DATA(WA_ZLEST0019_L2_30) WHERE DOCNUM EQ WA_J_1BNFE_ACTIVE-DOCNUM.

      "Buscar DCL para verificar o vagão
      READ TABLE IT_ZLEST0019_L2_20 INTO DATA(WA_ZLEST0019_L2_20)
      WITH KEY
        DCL = WA_ZLEST0019_L2_30-DCL
        CNPJFERRO = WA_ZLEST0019_L2_30-CNPJFERRO
        IDVAGAO = <FS_ZLEST0165>-ID_VAGAO.

      IF SY-SUBRC IS INITIAL.
        CLEAR: IT_MONTA_PROCESSO.
        IT_MONTA_PROCESSO-DCL              = WA_ZLEST0019_L2_20-DCL.
        IT_MONTA_PROCESSO-SERIE            = WA_ZLEST0019_L2_20-SERIEDCL.
        IT_MONTA_PROCESSO-ZIDVAGAO         = WA_ZLEST0019_L2_20-IDVAGAO.
        IT_MONTA_PROCESSO-CNPJ             = WA_ZLEST0019_L2_20-CNPJFERRO.
        IT_MONTA_PROCESSO-ID_FERRO_OPUS    = <FS_ZLEST0165>-ID_FERRO_OPUS.
        IT_MONTA_PROCESSO-ID_VAGAO         = <FS_ZLEST0165>-ID_VAGAO.
        IT_MONTA_PROCESSO-DT_CHEGADA       = <FS_ZLEST0165>-DT_CHEGADA.
        IT_MONTA_PROCESSO-PS_VAGAO         = <FS_ZLEST0165>-PS_VAGAO.
        IT_MONTA_PROCESSO-CD_CHAVE_NFE     = <FS_ZLEST0165>-CD_CHAVE_NFE.
        IT_MONTA_PROCESSO-PS_RATEIO        = <FS_ZLEST0165>-PS_RATEIO.
        IT_MONTA_PROCESSO-ID_ROMANEIO_ENT  = <FS_ZLEST0165>-ID_ROMANEIO_ENT.
        IT_MONTA_PROCESSO-CK_PROCESSADO    = <FS_ZLEST0165>-CK_PROCESSADO.
        IT_MONTA_PROCESSO-NR_CNPJ          = <FS_ZLEST0165>-NR_CNPJ.
        IT_MONTA_PROCESSO-DOCNUM           = <FS_ZLEST0165>-DOCNUM.
        IT_MONTA_PROCESSO-ID_LOCAL_ENTREGA = <FS_ZLEST0165>-ID_LOCAL_ENTREGA.

        READ TABLE IT_J_1BNFDOC INTO DATA(WA_J_1BNFDOC) WITH KEY DOCNUM = WA_J_1BNFE_ACTIVE-DOCNUM BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          IT_MONTA_PROCESSO-BUKRS           = WA_J_1BNFDOC-BUKRS.
          IT_MONTA_PROCESSO-BRANCH          = WA_J_1BNFDOC-BRANCH.
          IT_MONTA_PROCESSO-NFENUM          = WA_J_1BNFDOC-NFENUM.
          IT_MONTA_PROCESSO-SERIES          = WA_J_1BNFDOC-SERIES.
          APPEND IT_MONTA_PROCESSO.
        ENDIF.
      ENDIF.
    ENDLOOP.

  ENDLOOP.

  DATA(IT_DCLS) = IT_MONTA_PROCESSO[].

  SORT IT_DCLS BY DCL SERIE ZIDVAGAO CNPJ.
  DELETE ADJACENT DUPLICATES FROM IT_DCLS COMPARING DCL SERIE ZIDVAGAO CNPJ.

  LOOP AT IT_DCLS INTO DATA(WA_DCLS).

    OBJ_FERRO_CHEGADA->MONTA_PROCESSO(
    EXPORTING
      I_DCL      = WA_DCLS-DCL
      I_SERIE    = WA_DCLS-SERIE
      I_ID_VAGAO = WA_DCLS-ID_VAGAO
      I_CNPJ     = WA_DCLS-CNPJ ).

    OBJ_FERRO_CHEGADA->SET_DT_CHEGADA( I_DT_CHEGADA = WA_DCLS-DT_CHEGADA ).

    READ TABLE IT_ZLEST0114 WITH KEY LOCAL_DESCARGA = WA_DCLS-ID_LOCAL_ENTREGA INTO DATA(WA_ZLEST0114) BINARY SEARCH.
    IF SY-SUBRC IS INITIAL.
      TRY .
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = WA_ZLEST0114-WERKS
            IMPORTING
              OUTPUT = I_ID_AGPESO.
          OBJ_FERRO_CHEGADA->SET_ID_AGPESO( I_ID_AGPESO = I_ID_AGPESO ).
        CATCH ZCX_FERROVIARIO_CHEGADA INTO DATA(EX_FERROVIARIO_CHEGADA).
          EX_FERROVIARIO_CHEGADA->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'W' I_MSGTY_DISPLAY = 'W' ).
      ENDTRY.
    ENDIF.

    LOOP AT IT_MONTA_PROCESSO INTO DATA(WA_MONTA_PROCESSO) WHERE DCL       EQ WA_DCLS-DCL
                                                             AND SERIE     EQ WA_DCLS-SERIE
                                                             AND ZIDVAGAO  EQ WA_DCLS-ZIDVAGAO
                                                             AND CNPJ      EQ WA_DCLS-CNPJ.
      TRY .
          OBJ_FERRO_CHEGADA->SET_QT_CHEGADA(
            EXPORTING
              I_BUKRS                 = WA_MONTA_PROCESSO-BUKRS     " Empresa
              I_BRANCH                = WA_MONTA_PROCESSO-BRANCH    " Local de negócios
              I_NR_NF_PROPRIA         = WA_MONTA_PROCESSO-NFENUM    " Número de documento de nove posições
              I_SERIE_PROPRIA         = WA_MONTA_PROCESSO-SERIES    " Séries
              I_QT_CHEGADA            = CONV #( WA_MONTA_PROCESSO-PS_RATEIO )" Quantidade de Chegada
          ).
        CATCH ZCX_FERROVIARIO_CHEGADA INTO EX_FERROVIARIO_CHEGADA.
          EX_FERROVIARIO_CHEGADA->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'W' I_MSGTY_DISPLAY = 'W' ).
      ENDTRY.
    ENDLOOP.

    TRY .
        IF OBJ_FERRO_CHEGADA->GET_ID_REFKEY( ) IS INITIAL.
          OBJ_FERRO_CHEGADA->SET_ID_REFKEY( I_ID_REFKEY = ZCL_FERROVIARIO_CHEGADA=>GET_NEW_ID_REFKEY( ) ).
        ENDIF.
        OBJ_FERRO_CHEGADA->GRAVAR_REGISTRO( ).

        LOOP AT IT_MONTA_PROCESSO INTO WA_MONTA_PROCESSO WHERE DCL       EQ WA_DCLS-DCL
                                                           AND SERIE     EQ WA_DCLS-SERIE
                                                           AND ZIDVAGAO  EQ WA_DCLS-ZIDVAGAO
                                                           AND CNPJ      EQ WA_DCLS-CNPJ.
          READ TABLE IT_ZLEST0165 ASSIGNING <FS_ZLEST0165> WITH KEY ID_FERRO_OPUS = WA_MONTA_PROCESSO-ID_FERRO_OPUS.
          IF SY-SUBRC IS INITIAL.
            <FS_ZLEST0165>-CK_PROCESSADO = ABAP_TRUE.
          ENDIF.
        ENDLOOP.

      CATCH ZCX_CADASTRO INTO DATA(EX_FERRO).    "
        EX_FERRO->PUBLISHED_ERRO( EXPORTING I_MSGTY = 'W' I_MSGTY_DISPLAY = 'W' ).
    ENDTRY.

  ENDLOOP.

  IF IT_ZLEST0165[] IS NOT INITIAL.
    MODIFY ZLEST0165 FROM TABLE IT_ZLEST0165.
  ENDIF.

ENDFORM.
