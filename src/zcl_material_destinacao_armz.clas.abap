class ZCL_MATERIAL_DESTINACAO_ARMZ definition
  public
  inheriting from ZCL_MATERIAL_DESTINACAO
  create public .

public section.

  methods CONSTRUCTOR .

  methods ZIF_MATERIAL_DESTINACAO~SET_DEFAULT_CONFIG
    redefinition .
  methods ZIF_MATERIAL_DESTINACAO~SET_VALIDAR
    redefinition .
  methods ZIF_MATERIAL_DESTINACAO~GET_TEXTO_NOTA_FISCAL_PADRAO
    redefinition .
protected section.
private section.
ENDCLASS.



CLASS ZCL_MATERIAL_DESTINACAO_ARMZ IMPLEMENTATION.


  METHOD CONSTRUCTOR.

    SUPER->CONSTRUCTOR( ).

    ME->ZIF_MATERIAL_DESTINACAO~SET_DEFAULT_CONFIG( ).

  ENDMETHOD.


  METHOD ZIF_MATERIAL_DESTINACAO~GET_TEXTO_NOTA_FISCAL_PADRAO.

    IF_MATERIAL_DESTINACAO = SUPER->ZIF_MATERIAL_DESTINACAO~GET_TEXTO_NOTA_FISCAL_PADRAO( IMPORTING E_STRING  = E_STRING ).

    CASE ME->ZIF_MATERIAL_DESTINACAO~AT_TP_DESTINACAO .
      WHEN ZIF_MATERIAL_DESTINACAO=>ST_TP_DESTINACAO_ARMAZENAR.

        CASE ME->ZIF_MATERIAL_DESTINACAO~AT_ZMMT0114-TP_ORIGEM.
          WHEN ZIF_MATERIAL_DESTINACAO=>ST_TP_ORIGEM_NFE.

            READ TABLE ME->ZIF_MATERIAL_DESTINACAO~AT_ZMMT0115 INDEX 1 INTO DATA(AT_ZMMT0115).

            CHECK SY-SUBRC IS INITIAL.

            SELECT SINGLE * INTO @DATA(WA_NFE)
              FROM ZIB_NFE_DIST_TER
             WHERE CHAVE_NFE EQ @AT_ZMMT0115-ORIG_NFE.

            CHECK SY-SUBRC IS INITIAL.

            "Possui Frete
            SELECT SINGLE * INTO @DATA(WA_FRETE)
              FROM ZIB_NFE_DIST_FRT
             WHERE CHAVE_NFE EQ @WA_NFE-CHAVE_NFE.

            CHECK SY-SUBRC IS INITIAL.

            IF WA_FRETE-DS_AGENT_FRETE IS NOT INITIAL.
              E_STRING = |Agente de Frete: { WA_FRETE-DS_AGENT_FRETE }|.
            ELSEIF WA_FRETE-ID_AGENT_FRETE IS NOT INITIAL.
              SELECT SINGLE * INTO @DATA(WA_LFA1)
                FROM LFA1
               WHERE LIFNR EQ @WA_FRETE-ID_AGENT_FRETE.
              IF SY-SUBRC IS INITIAL.
                E_STRING = |Agente de Frete: { WA_LFA1-NAME1 }|.
              ENDIF.
            ENDIF.

            IF WA_FRETE-ID_AGENT_FRETE NE WA_FRETE-ID_PROPRIETARIO.
              IF WA_FRETE-DS_PROPRIETARIO IS NOT INITIAL.
                DATA(DS_PROP) = |Proprietário do Veículo: { WA_FRETE-DS_PROPRIETARIO }|.
              ELSEIF WA_FRETE-ID_PROPRIETARIO IS NOT INITIAL.
                SELECT SINGLE * INTO @WA_LFA1
                  FROM LFA1
                 WHERE LIFNR EQ @WA_FRETE-ID_PROPRIETARIO.
                IF SY-SUBRC IS INITIAL.
                  DS_PROP = |Proprietário do Veículo: { WA_LFA1-NAME1 }|.
                ENDIF.
              ENDIF.
            ENDIF.

            IF E_STRING IS NOT INITIAL AND DS_PROP IS NOT INITIAL.
              E_STRING = |{ E_STRING } - { DS_PROP } |.
            ELSEIF DS_PROP IS NOT INITIAL.
              E_STRING = DS_PROP.
            ENDIF.

            IF WA_FRETE-DS_MOTORISTA IS NOT INITIAL.
              DATA(DS_MOTO) = |Motorista: { WA_FRETE-DS_MOTORISTA }|.
            ELSEIF WA_FRETE-ID_MOTORISTA IS NOT INITIAL.
              SELECT SINGLE * INTO @WA_LFA1
                FROM LFA1
               WHERE LIFNR EQ @WA_FRETE-ID_MOTORISTA.
              IF SY-SUBRC IS INITIAL.
                DS_MOTO = |Motorista: { WA_LFA1-NAME1 }|.
              ENDIF.
            ENDIF.

            IF E_STRING IS NOT INITIAL AND DS_MOTO IS NOT INITIAL.
              E_STRING = |{ E_STRING } - { DS_MOTO } |.
            ELSEIF DS_MOTO IS NOT INITIAL.
              E_STRING = DS_MOTO.
            ENDIF.

            IF E_STRING IS NOT INITIAL AND WA_FRETE-DS_PLACA_TRATOR IS NOT INITIAL.
              E_STRING = |{ E_STRING } - Placa do Veículo de Tração: { WA_FRETE-DS_PLACA_TRATOR } |.
            ELSEIF WA_FRETE-DS_PLACA_TRATOR IS NOT INITIAL.
              E_STRING = |Placa do Veículo de Tração: { WA_FRETE-DS_PLACA_TRATOR }|.
            ENDIF.

            IF E_STRING IS NOT INITIAL AND WA_FRETE-DS_PLACA_REBOQ_1 IS NOT INITIAL.
              E_STRING = |{ E_STRING } - Placa do Reboque 1: { WA_FRETE-DS_PLACA_REBOQ_1 } |.
            ELSEIF WA_FRETE-DS_PLACA_REBOQ_1 IS NOT INITIAL.
              E_STRING = |Placa do Reboque 1: { WA_FRETE-DS_PLACA_REBOQ_1 }|.
            ENDIF.

            IF E_STRING IS NOT INITIAL AND WA_FRETE-DS_PLACA_REBOQ_2 IS NOT INITIAL.
              E_STRING = |{ E_STRING } - Placa do Reboque 2: { WA_FRETE-DS_PLACA_REBOQ_2 } |.
            ELSEIF WA_FRETE-DS_PLACA_REBOQ_2 IS NOT INITIAL.
              E_STRING = |Placa do Reboque 2: { WA_FRETE-DS_PLACA_REBOQ_2 }|.
            ENDIF.

            IF E_STRING IS NOT INITIAL AND WA_FRETE-DS_PLACA_REBOQ_3 IS NOT INITIAL.
              E_STRING = |{ E_STRING } - Placa do Reboque 3: { WA_FRETE-DS_PLACA_REBOQ_3 } |.
            ELSEIF WA_FRETE-DS_PLACA_REBOQ_3 IS NOT INITIAL.
              E_STRING = |Placa do Reboque 3: { WA_FRETE-DS_PLACA_REBOQ_3 }|.
            ENDIF.

          WHEN ZIF_MATERIAL_DESTINACAO=>ST_TP_ORIGEM_ROMANEIO.

        ENDCASE.

      WHEN ZIF_MATERIAL_DESTINACAO=>ST_TP_DESTINACAO_DEVOLUCAO.
    ENDCASE.

  ENDMETHOD.


  METHOD ZIF_MATERIAL_DESTINACAO~SET_DEFAULT_CONFIG.

    R_IF_MATERIAL_DESTINACAO = SUPER->ZIF_MATERIAL_DESTINACAO~SET_DEFAULT_CONFIG( ).

    ME->ZIF_MATERIAL_DESTINACAO~AT_TP_DESTINACAO  = ZIF_MATERIAL_DESTINACAO=>ST_TP_DESTINACAO_ARMAZENAR.

  ENDMETHOD.


  METHOD ZIF_MATERIAL_DESTINACAO~SET_VALIDAR.

    DATA: LC_LIFNR TYPE LIFNR,
          WA_LFA1  TYPE LFA1.

    R_IF_MATERIAL_DESTINACAO = SUPER->ZIF_MATERIAL_DESTINACAO~SET_VALIDAR( IMPORTING E_VALIDOU = E_VALIDOU ).

    CLEAR: E_VALIDOU.

    R_IF_MATERIAL_DESTINACAO = ME.

    "ZIF_MATERIAL_DESTINACAO=>ST_TP_DESTINACAO_ARMAZENAR

    "Somente Permitir Documentos de Material de Entrada
    LOOP AT ME->ZIF_MATERIAL_DESTINACAO~AT_ZMMT0115 INTO DATA(WA_ZMMT0115).

      SELECT * INTO TABLE @DATA(IT_MSEG)
        FROM MSEG
       WHERE MBLNR EQ @WA_ZMMT0115-ORIG_MBLNR
         AND MJAHR EQ @WA_ZMMT0115-ORIG_MJAHR
         AND XAUTO EQ @SPACE.

      LOOP AT IT_MSEG INTO DATA(WA_MSEG).
        IF WA_MSEG-SHKZG NE 'S'.
          RAISE EXCEPTION TYPE ZCX_MATERIAL_DESTINACAO
            EXPORTING
              TEXTID = VALUE #( MSGID = ZCX_MATERIAL_DESTINACAO=>ZCX_ORIGEM_DOC_SAIDA_NAO-MSGID
                                MSGNO = ZCX_MATERIAL_DESTINACAO=>ZCX_ORIGEM_DOC_SAIDA_NAO-MSGNO )
              MSGID  = ZCX_MATERIAL_DESTINACAO=>ZCX_ORIGEM_DOC_SAIDA_NAO-MSGID
              MSGNO  = ZCX_MATERIAL_DESTINACAO=>ZCX_ORIGEM_DOC_SAIDA_NAO-MSGNO
              MSGTY  = 'E'.
        ENDIF.

      ENDLOOP.

    ENDLOOP.

    "Verificar se Romaneio está Ativo
    LOOP AT ME->ZIF_MATERIAL_DESTINACAO~AT_ZMMT0118 INTO DATA(WA_MMT0118).

      TRY .

          CALL METHOD ZCL_ROMANEIO=>GET_STATUS_OPUS
            EXPORTING
              I_REFERENCIA   = WA_MMT0118-CH_REFERENCIA
              I_TP_MOVIMENTO = 'S'
            RECEIVING
              R_STATUS       = DATA(LC_STATUS).
        CATCH ZCX_ERROR INTO DATA(EX_ERROR).

          RAISE EXCEPTION TYPE ZCX_MATERIAL_DESTINACAO
            EXPORTING
              TEXTID = VALUE #( MSGID = EX_ERROR->MSGID
                                MSGNO = EX_ERROR->MSGNO
                                ATTR1 = EX_ERROR->MSGV1
                                ATTR2 = EX_ERROR->MSGV2
                                ATTR3 = EX_ERROR->MSGV3
                                ATTR4 = EX_ERROR->MSGV4 )
              MSGID  = EX_ERROR->MSGID
              MSGNO  = EX_ERROR->MSGNO
              MSGTY  = 'E'
              MSGV1  = EX_ERROR->MSGV1
              MSGV2  = EX_ERROR->MSGV2
              MSGV3  = EX_ERROR->MSGV3
              MSGV4  = EX_ERROR->MSGV4.

      ENDTRY.

      IF LC_STATUS NE ZIF_CARGA=>ST_STATUS_FECHADO.

        SELECT SINGLE * INTO @DATA(WA_ZSDT0001)
          FROM ZSDT0001
         WHERE CH_REFERENCIA EQ @WA_MMT0118-CH_REFERENCIA.

        RAISE EXCEPTION TYPE ZCX_MATERIAL_DESTINACAO
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_MATERIAL_DESTINACAO=>ZCX_ROM_SAI_NAO_FECHADO-MSGID
                              MSGNO = ZCX_MATERIAL_DESTINACAO=>ZCX_ROM_SAI_NAO_FECHADO-MSGNO
                              ATTR1 = WA_ZSDT0001-NR_ROMANEIO
                              ATTR2 = WA_ZSDT0001-BRANCH
                              ATTR3 = WA_ZSDT0001-NR_SAFRA )
            MSGID  = ZCX_MATERIAL_DESTINACAO=>ZCX_ROM_SAI_NAO_FECHADO-MSGID
            MSGNO  = ZCX_MATERIAL_DESTINACAO=>ZCX_ROM_SAI_NAO_FECHADO-MSGNO
            MSGTY  = 'E'
            MSGV1  = CONV #( WA_ZSDT0001-NR_ROMANEIO )
            MSGV2  = CONV #( WA_ZSDT0001-BRANCH )
            MSGV3  = CONV #( WA_ZSDT0001-NR_SAFRA ).
      ENDIF.

      SELECT SINGLE * INTO @DATA(WA_EKPO)
        FROM EKPO
       WHERE EBELN EQ @WA_ZSDT0001-VBELN.

      SELECT SINGLE * INTO @DATA(WA_EKKO)
        FROM EKKO
       WHERE EBELN EQ @WA_ZSDT0001-VBELN.

      IF NOT ( WA_EKKO-BSTYP EQ 'F' AND WA_EKKO-BSART EQ 'ZARM' ).
        RAISE EXCEPTION TYPE ZCX_MATERIAL_DESTINACAO
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_MATERIAL_DESTINACAO=>ZCX_PEDIDO_NAO_PERMITIDO-MSGID
                              MSGNO = ZCX_MATERIAL_DESTINACAO=>ZCX_PEDIDO_NAO_PERMITIDO-MSGNO
                              ATTR1 = WA_EKKO-BSART )
            MSGID  = ZCX_MATERIAL_DESTINACAO=>ZCX_PEDIDO_NAO_PERMITIDO-MSGID
            MSGNO  = ZCX_MATERIAL_DESTINACAO=>ZCX_PEDIDO_NAO_PERMITIDO-MSGNO
            MSGTY  = 'E'
            MSGV1  = CONV #( WA_EKKO-BSART ).
      ENDIF.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = WA_EKPO-WERKS
        IMPORTING
          OUTPUT = LC_LIFNR.

      CALL FUNCTION 'Z_PARCEIRO_INFO'
        EXPORTING
          P_PARCEIRO   = LC_LIFNR
          P_PARTYPE    = 'B'
        CHANGING
          WA_INFO_PART = WA_LFA1.

      SELECT SINGLE T~DESCRIPT
        FROM SETLEAF AS S
       INNER JOIN SETLINET AS T ON T~SETNAME EQ S~SETNAME AND T~LINEID EQ S~LINEID
        INTO @DATA(VL_DESCRIPT)
       WHERE S~SETNAME = 'MAGGI_ZMM0019_IVA_SAIDA'
         AND S~VALFROM = @WA_LFA1-REGIO.

      IF SY-SUBRC IS NOT INITIAL OR VL_DESCRIPT IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_MATERIAL_DESTINACAO
          EXPORTING
            TEXTID = VALUE #( MSGID = ZCX_MATERIAL_DESTINACAO=>ZCX_ROM_SAI_TAX_CODE-MSGID
                              MSGNO = ZCX_MATERIAL_DESTINACAO=>ZCX_ROM_SAI_TAX_CODE-MSGNO )
            MSGID  = ZCX_MATERIAL_DESTINACAO=>ZCX_ROM_SAI_TAX_CODE-MSGID
            MSGNO  = ZCX_MATERIAL_DESTINACAO=>ZCX_ROM_SAI_TAX_CODE-MSGNO
            MSGTY  = 'E'.
      ENDIF.

    ENDLOOP.

    E_VALIDOU = ABAP_TRUE.

  ENDMETHOD.
ENDCLASS.
