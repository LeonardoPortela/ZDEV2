class ZCL_SOL_MOBILE_RH definition
  public
  final
  create public .

public section.

  interfaces ZIF_SOL_MOBILE_RH .
protected section.
private section.
ENDCLASS.



CLASS ZCL_SOL_MOBILE_RH IMPLEMENTATION.


  METHOD ZIF_SOL_MOBILE_RH~ADD_LOG_MOTIVO.



  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~GERA_ERRO_GERAL.

    DATA: LC_TEXTO TYPE C LENGTH 200.

    LC_TEXTO = I_TEXTO.
    SY-MSGV1 = LC_TEXTO+000(50).
    SY-MSGV2 = LC_TEXTO+050(50).
    SY-MSGV3 = LC_TEXTO+100(50).
    SY-MSGV4 = LC_TEXTO+150(50).

    RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
      EXPORTING
        TEXTID = VALUE #( MSGID = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_GERAL-MSGID
                          MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_GERAL-MSGNO
                          ATTR1 = CONV #( SY-MSGV1 )
                          ATTR2 = CONV #( SY-MSGV2 )
                          ATTR3 = CONV #( SY-MSGV3 )
                          ATTR4 = CONV #( SY-MSGV4 ) )
        MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_GERAL-MSGID
        MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_GERAL-MSGNO
        MSGTY  = 'E'
        MSGV1  = SY-MSGV1
        MSGV2  = SY-MSGV2
        MSGV3  = SY-MSGV3
        MSGV4  = SY-MSGV4.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~GET_CD_VALIDACAO.

    R_SOL_MOBILE_RH = ME.

    E_CD_VALIDACAO = ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-CD_VALIDACAO.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~GET_ID_DISPOSITIVO.

    R_SOL_MOBILE_RH = ME.

    E_ID_DISPOSITIVO = ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_DISPOSITIVO.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~GET_LOGS_REGISTRO.

    R_SOL_MOBILE_RH = ME.

    E_ZHCMT_PA_0012 = ME->ZIF_SOL_MOBILE_RH~LOGS.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~GET_MD5_HASH.


    CALL FUNCTION 'CALCULATE_HASH_FOR_CHAR'
      EXPORTING
        ALG            = 'MD5'
        DATA           = I_TEXTO
        LENGTH         = 0
      IMPORTING
        HASHSTRING     = R_HASHSTRING
      EXCEPTIONS
        UNKNOWN_ALG    = 1
        PARAM_ERROR    = 2
        INTERNAL_ERROR = 3
        OTHERS         = 4.

    IF SY-SUBRC IS NOT INITIAL.
      MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO DATA(LC_TEXTO).
      ZCL_SOL_MOBILE_RH=>ZIF_SOL_MOBILE_RH~GERA_ERRO_GERAL( I_TEXTO = LC_TEXTO ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~GET_PASSWORD.

    R_SOL_MOBILE_RH = ME.

    E_DS_SENHA = ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-DS_SENHA.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~GET_REGISTRO.
    R_SOL_MOBILE_RH = ME.
    E_ZHCMT_PA_0011 = ME->ZIF_SOL_MOBILE_RH~SOLICITACAO.
  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~GET_VERIFICA_TOKEN.

    DATA: LC_ENDDA TYPE P0001-ENDDA,
          IT_PA    TYPE TABLE OF ZHCMS_FUNC_LIST_PA.

    DATA: CPF_LIMPO TYPE STRING,
          LC_CPF_NR TYPE CHAR14,
          IT_PERNR  TYPE TABLE OF ZHCMS_RET_PERNR,
          LC_PERNR  TYPE PERNR-PERNR.

    CPF_LIMPO = I_CPF.
    REPLACE ALL OCCURRENCES OF '.' IN CPF_LIMPO WITH '' IGNORING CASE.
    REPLACE ALL OCCURRENCES OF '-' IN CPF_LIMPO WITH '' IGNORING CASE.

    DATA(QTD_CPF) = STRLEN( CPF_LIMPO ).
    IF QTD_CPF GT 11.
      RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
        EXPORTING
          TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGID )
          MSGTY  = 'E'
          MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGNO
          MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGID.
    ENDIF.

    LC_CPF_NR = CPF_LIMPO.
    CALL FUNCTION 'ZHCMF_RET_PERNR'
      EXPORTING
        CPF_NR  = LC_CPF_NR
      TABLES
        T_SAIDA = IT_PERNR.

    IF IT_PERNR[] IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
        EXPORTING
          TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGID )
          MSGTY  = 'E'
          MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGNO
          MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGID.
    ENDIF.

    LC_ENDDA = SY-DATUM.

    LOOP AT IT_PERNR INTO DATA(WA_PERNR).
      CLEAR: IT_PA.
      CALL FUNCTION 'ZHCMF_DADOS_FUNCIONAIS_PA'
        EXPORTING
          PERNR   = WA_PERNR-PERNR
          ENDDA   = LC_ENDDA
        TABLES
          T_SAIDA = IT_PA.

      READ TABLE IT_PA INDEX 1 INTO DATA(WA_PA).
      IF SY-SUBRC IS INITIAL.

        TRANSLATE WA_PA-SITUACAO TO UPPER CASE.
        CONDENSE WA_PA-SITUACAO NO-GAPS.
        IF WA_PA-SITUACAO EQ 'ATIVO'.
          LC_PERNR = WA_PERNR-PERNR.
        ENDIF.
      ENDIF.
    ENDLOOP.

    IF LC_PERNR IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
        EXPORTING
          TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGID )
          MSGTY  = 'E'
          MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGNO
          MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGID.
    ENDIF.

    SELECT SINGLE * INTO @DATA(WA_0011)
      FROM ZHCMT_PA_0011
     WHERE PERNR          EQ @LC_PERNR
       AND ST_SOLICITACAO EQ @ZIF_SOL_MOBILE_RH=>ST_STATUS_ATIVO.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
        EXPORTING
          TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGID )
          MSGTY  = 'E'
          MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGNO
          MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGID.
    ENDIF.

    IF WA_0011-DS_TOKEN_LOGIN NE I_TOKEN.
      RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
        EXPORTING
          TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGID )
          MSGTY  = 'E'
          MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGNO
          MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_TOKEN_INVALIDO-MSGID.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_ADD_ERRO_LOGIN.
    R_SOL_MOBILE_RH = ME.

    ADD 1 TO ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-QT_ERROS_LOGIN.

    IF ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-QT_ERROS_LOGIN LT 3.
      ME->ZIF_SOL_MOBILE_RH~CK_ERRO_LOGIN = ABAP_TRUE.
    ELSE.
      ME->ZIF_SOL_MOBILE_RH~SET_ST_SOLICITACAO( I_ST_SOLICITACAO = ZIF_SOL_MOBILE_RH=>ST_STATUS_BLOQUEADO
       )->SET_DS_MOTIVO( I_DS_MOTIVO = 'Acesso bloqueado por tentativas de login incoreto' ).
    ENDIF.

    ME->ZIF_SOL_MOBILE_RH~SET_GRAVAR( ).
    ME->ZIF_SOL_MOBILE_RH~CK_ERRO_LOGIN = ABAP_FALSE.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_ADD_LOG_MOTIVO.

    DATA: LC_ID_SOL_LOG    TYPE ZDE_ID_SOLICITACAO.

    CLEAR: E_ZHCMT_PA_0012.

    SELECT MAX( ID_SOL_LOG ) INTO LC_ID_SOL_LOG
      FROM ZHCMT_PA_0012
     WHERE ID_SOLICITACAO EQ ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_SOLICITACAO.

    IF LC_ID_SOL_LOG IS INITIAL.
      LC_ID_SOL_LOG = 1.
    ELSE.
      ADD 1 TO LC_ID_SOL_LOG.
    ENDIF.

    E_ZHCMT_PA_0012-ID_SOLICITACAO  = ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_SOLICITACAO.
    E_ZHCMT_PA_0012-ID_SOL_LOG      = LC_ID_SOL_LOG.
    E_ZHCMT_PA_0012-DT_REGISTRO     = SY-DATUM.
    E_ZHCMT_PA_0012-HR_REGISTRO     = SY-UZEIT.
    E_ZHCMT_PA_0012-US_REGISTRO     = SY-UNAME.
    E_ZHCMT_PA_0012-ST_SOLICITACAO  = ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ST_SOLICITACAO.
    E_ZHCMT_PA_0012-DS_MOTIVO       = ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-DS_MOTIVO.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_CLEAR_ERRO_LOGIN.

    R_SOL_MOBILE_RH = ME.
    ME->ZIF_SOL_MOBILE_RH~CK_ERRO_LOGIN = ABAP_TRUE.
    ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-QT_ERROS_LOGIN = 0.
    ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-DT_ULTIMO_LOGIN = SY-DATUM.
    ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-HR_ULTIMO_LOGIN = SY-UZEIT.
    ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-US_ULTIMO_LOGIN = SY-UNAME.
    ME->ZIF_SOL_MOBILE_RH~SET_GRAVAR( ).
    ME->ZIF_SOL_MOBILE_RH~CK_ERRO_LOGIN = ABAP_FALSE.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_DENQUEUE.

    CALL FUNCTION 'ZDENQUEUE_SOLICITACAO'
      EXPORTING
        ID_SOLICITACAO = I_ID_SOLICITACAO.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_DESATIVA_ACESSO.

    SELECT SINGLE * INTO @DATA(WA_0011)
      FROM ZHCMT_PA_0011
     WHERE PERNR          EQ @I_PERNR
       AND ST_SOLICITACAO EQ @ZIF_SOL_MOBILE_RH=>ST_STATUS_ATIVO.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
        EXPORTING
          TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_MATRICULA_NAO_ENCONTRADO-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_MATRICULA_NAO_ENCONTRADO-MSGID )
          MSGTY  = 'E'
          MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_MATRICULA_NAO_ENCONTRADO-MSGNO
          MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_MATRICULA_NAO_ENCONTRADO-MSGID.
    ENDIF.

    CREATE OBJECT R_SOL_MOBILE_RH TYPE ZCL_SOL_MOBILE_RH.

    R_SOL_MOBILE_RH->SET_REGISTRO( I_ID_SOLICITACAO = WA_0011-ID_SOLICITACAO
                  )->SET_DS_MOTIVO( I_DS_MOTIVO = I_DS_MOTIVO
                  )->SET_ST_SOLICITACAO( I_ST_SOLICITACAO = ZIF_SOL_MOBILE_RH=>ST_STATUS_DESATIVADO
                  )->SET_GRAVAR(
                  )->SET_DENQUEUE( I_ID_SOLICITACAO = WA_0011-ID_SOLICITACAO
                  ).

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_DS_MOTIVO.
    R_SOL_MOBILE_RH = ME.
    ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-DS_MOTIVO = I_DS_MOTIVO.
  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_ENQUEUE.

    CALL FUNCTION 'ZENQUEUE_SOLICITACAO'
      EXPORTING
        ID_SOLICITACAO = I_ID_SOLICITACAO
      EXCEPTIONS
        FOREIGN_LOCK   = 1
        SYSTEM_FAILURE = 2
        OTHERS         = 3.

    IF SY-SUBRC IS NOT INITIAL.
      MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO DATA(I_TEXTO).
      ZCL_SOL_MOBILE_RH=>ZIF_SOL_MOBILE_RH~GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_GRAVAR.

    DATA: FILHOS    TYPE REF TO ZCL_SOL_MOBILE_RH,
          LC_MOTIVO TYPE ZDE_MOTIVO_STATUS.

    R_SOL_MOBILE_RH = ME.

    ME->ZIF_SOL_MOBILE_RH~SET_VALIDAR( ).

    IF ( ME->ZIF_SOL_MOBILE_RH~CK_PROCESSO_FILHO EQ ABAP_FALSE ) AND
       ( ME->ZIF_SOL_MOBILE_RH~CK_ERRO_LOGIN EQ ABAP_FALSE ) AND
       ( ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_SOLICITACAO IS NOT INITIAL ) AND
       ( ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ST_SOLICITACAO EQ ZIF_SOL_MOBILE_RH=>ST_STATUS_ATIVO OR
         ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ST_SOLICITACAO EQ ZIF_SOL_MOBILE_RH=>ST_STATUS_BLOQUEADO ).

      CASE ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ST_SOLICITACAO.
        WHEN ZIF_SOL_MOBILE_RH=>ST_STATUS_ATIVO.
          SELECT * INTO TABLE @DATA(IT_0011)
            FROM ZHCMT_PA_0011
           WHERE PERNR          EQ @ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-PERNR
             AND ID_SOLICITACAO NE @ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_SOLICITACAO
             AND ST_SOLICITACAO EQ @ZIF_SOL_MOBILE_RH=>ST_STATUS_ATIVO.

          CREATE OBJECT FILHOS.
          LOOP AT IT_0011 INTO DATA(WA_0011).
            LC_MOTIVO = 'Solicitação ' && ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_SOLICITACAO && ' foi ativada'.
            FILHOS->ZIF_SOL_MOBILE_RH~CK_PROCESSO_FILHO = ABAP_TRUE.
            FILHOS->ZIF_SOL_MOBILE_RH~SET_REGISTRO( I_ID_SOLICITACAO = WA_0011-ID_SOLICITACAO
                 )->SET_ST_SOLICITACAO( I_ST_SOLICITACAO = ZIF_SOL_MOBILE_RH=>ST_STATUS_DESATIVADO
                 )->SET_DS_MOTIVO( I_DS_MOTIVO = LC_MOTIVO
                 )->SET_GRAVAR(
                 )->SET_LIMPAR(
                 ).
          ENDLOOP.
          CLEAR FILHOS.
        WHEN ZIF_SOL_MOBILE_RH=>ST_STATUS_BLOQUEADO.
          SELECT * INTO TABLE IT_0011
            FROM ZHCMT_PA_0011
           WHERE PERNR          EQ ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-PERNR
             AND ID_SOLICITACAO NE ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_SOLICITACAO
             AND ST_SOLICITACAO EQ ZIF_SOL_MOBILE_RH=>ST_STATUS_BLOQUEADO.

          CREATE OBJECT FILHOS.
          LOOP AT IT_0011 INTO WA_0011.
            LC_MOTIVO = 'Solicitação ' && ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_SOLICITACAO && ' foi bloqueada'.
            FILHOS->ZIF_SOL_MOBILE_RH~CK_PROCESSO_FILHO = ABAP_TRUE.
            FILHOS->ZIF_SOL_MOBILE_RH~SET_REGISTRO( I_ID_SOLICITACAO = WA_0011-ID_SOLICITACAO
                 )->SET_ST_SOLICITACAO( I_ST_SOLICITACAO = ZIF_SOL_MOBILE_RH=>ST_STATUS_BLOQUEADO
                 )->SET_DS_MOTIVO( I_DS_MOTIVO = LC_MOTIVO
                 )->SET_GRAVAR(
                 )->SET_LIMPAR(
                 ).
          ENDLOOP.
          CLEAR FILHOS.
      ENDCASE.
    ENDIF.

    "Limpar Soicitações Pendentes
    IF ( ME->ZIF_SOL_MOBILE_RH~CK_PROCESSO_FILHO EQ ABAP_FALSE ) AND
           ( ME->ZIF_SOL_MOBILE_RH~CK_ERRO_LOGIN EQ ABAP_FALSE ) AND
           ( ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_SOLICITACAO IS INITIAL ) AND
           ( ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ST_SOLICITACAO IS INITIAL ).
      SELECT * INTO TABLE IT_0011
        FROM ZHCMT_PA_0011
       WHERE PERNR          EQ ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-PERNR
         AND ST_SOLICITACAO EQ ZIF_SOL_MOBILE_RH=>ST_STATUS_PENDENTE.

      LOOP AT IT_0011 INTO WA_0011.
        DELETE FROM ZHCMT_PA_0011 WHERE ID_SOLICITACAO EQ WA_0011-ID_SOLICITACAO.
        DELETE FROM ZHCMT_PA_0012 WHERE ID_SOLICITACAO EQ WA_0011-ID_SOLICITACAO.
      ENDLOOP.
    ENDIF.

    ME->ZIF_SOL_MOBILE_RH~SET_ID_SOLICITACAO(
     )->SET_ADD_LOG_MOTIVO( IMPORTING E_ZHCMT_PA_0012 = DATA(E_ZHCMT_PA_0012)
     ).

    MODIFY ZHCMT_PA_0011 FROM ME->ZIF_SOL_MOBILE_RH~SOLICITACAO.

    IF ( ME->ZIF_SOL_MOBILE_RH~CK_ERRO_LOGIN EQ ABAP_FALSE ).
      MODIFY ZHCMT_PA_0012 FROM E_ZHCMT_PA_0012.
    ELSE.
      CLEAR: E_ZHCMT_PA_0012.
    ENDIF.

    COMMIT WORK.

    IF E_ZHCMT_PA_0012 IS NOT INITIAL.
      APPEND E_ZHCMT_PA_0012 TO ME->ZIF_SOL_MOBILE_RH~LOGS.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_ID_DISPOSITIVO.

    R_SOL_MOBILE_RH = ME.

    ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_DISPOSITIVO = I_ID_DISPOSITIVO.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_ID_SOLICITACAO.

    R_SOL_MOBILE_RH = ME.

    IF ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_SOLICITACAO IS INITIAL.

      CALL FUNCTION 'NUMBER_RANGE_ENQUEUE'
        EXPORTING
          OBJECT           = 'ZSOMOBI'
        EXCEPTIONS
          FOREIGN_LOCK     = 1
          OBJECT_NOT_FOUND = 2
          SYSTEM_FAILURE   = 3
          OTHERS           = 4.

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO DATA(I_TEXTO).
        ME->ZIF_SOL_MOBILE_RH~GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).
      ENDIF.

      CALL FUNCTION 'NUMBER_GET_NEXT'
        EXPORTING
          NR_RANGE_NR             = '01'
          OBJECT                  = 'ZSOMOBI'
          IGNORE_BUFFER           = 'X'
        IMPORTING
          NUMBER                  = ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_SOLICITACAO
        EXCEPTIONS
          INTERVAL_NOT_FOUND      = 1
          NUMBER_RANGE_NOT_INTERN = 2
          OBJECT_NOT_FOUND        = 3
          QUANTITY_IS_0           = 4
          QUANTITY_IS_NOT_1       = 5
          INTERVAL_OVERFLOW       = 6
          BUFFER_OVERFLOW         = 7
          OTHERS                  = 8.

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO I_TEXTO.
        ME->ZIF_SOL_MOBILE_RH~GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).
      ENDIF.

* Desbloqueia o objeto de numeração
      CALL FUNCTION 'NUMBER_RANGE_DEQUEUE'
        EXPORTING
          OBJECT           = 'ZSOMOBI'
        EXCEPTIONS
          OBJECT_NOT_FOUND = 1
          OTHERS           = 2.

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO I_TEXTO.
        ME->ZIF_SOL_MOBILE_RH~GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).
      ENDIF.

      ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-DT_SOLICITACAO = SY-DATUM.
      ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-HR_SOLICITACAO = SY-UZEIT.
      ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-US_SOLICITACAO = SY-UNAME.
      ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ST_SOLICITACAO = ZIF_SOL_MOBILE_RH=>ST_STATUS_PENDENTE.
      ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-DS_MOTIVO      = 'Solicitação de Acesso Mobile'.

      CALL FUNCTION 'QF05_RANDOM_INTEGER'
        EXPORTING
          RAN_INT_MAX = 999999999
          RAN_INT_MIN = 111111111
        IMPORTING
          RAN_INT     = ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-CD_VALIDACAO.

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_LIMPAR.

    R_SOL_MOBILE_RH = ME.

    IF ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_SOLICITACAO IS NOT INITIAL.
      ZCL_SOL_MOBILE_RH=>ZIF_SOL_MOBILE_RH~SET_DENQUEUE( EXPORTING I_ID_SOLICITACAO = ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_SOLICITACAO ).
    ENDIF.

    CLEAR: ME->ZIF_SOL_MOBILE_RH~SOLICITACAO,
           ME->ZIF_SOL_MOBILE_RH~LOGS[],
           ME->ZIF_SOL_MOBILE_RH~LOGS.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_LOGIN.

    DATA: CPF_LIMPO TYPE STRING,
          LC_CPF_NR TYPE CHAR14,
          IT_PERNR  TYPE TABLE OF ZHCMS_RET_PERNR,
          LC_PERNR  TYPE PERNR-PERNR,
          IT_SAIDA  TYPE TABLE OF ZHCMS_FUNC_LIST,
          LC_RANDOM TYPE XSTRING,
          IT_PA     TYPE TABLE OF ZHCMS_FUNC_LIST_PA,
          LC_ENDDA  TYPE P0001-ENDDA.

    IF I_CPF IS NOT INITIAL.
      CPF_LIMPO = I_CPF.
      REPLACE ALL OCCURRENCES OF '.' IN CPF_LIMPO WITH '' IGNORING CASE.
    ENDIF.

    IF I_PERNR IS INITIAL AND I_CPF IS NOT INITIAL.

      DATA(QTD_CPF) = STRLEN( CPF_LIMPO ).
      IF QTD_CPF GT 11.
        RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
          EXPORTING
            TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID )
            MSGTY  = 'E'
            MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO
            MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID.
      ENDIF.

      LC_CPF_NR = CPF_LIMPO.
      CALL FUNCTION 'ZHCMF_RET_PERNR'
        EXPORTING
          CPF_NR  = LC_CPF_NR
        TABLES
          T_SAIDA = IT_PERNR.

      IF IT_PERNR[] IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
          EXPORTING
            TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID )
            MSGTY  = 'E'
            MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO
            MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID.
      ENDIF.

      LC_ENDDA = SY-DATUM.

      LOOP AT IT_PERNR INTO DATA(WA_PERNR).
        CLEAR: IT_PA.
        CALL FUNCTION 'ZHCMF_DADOS_FUNCIONAIS_PA'
          EXPORTING
            PERNR   = WA_PERNR-PERNR
            ENDDA   = LC_ENDDA
          TABLES
            T_SAIDA = IT_PA.

        READ TABLE IT_PA INDEX 1 INTO DATA(WA_PA).
        IF SY-SUBRC IS INITIAL.

          TRANSLATE WA_PA-SITUACAO TO UPPER CASE.
          CONDENSE WA_PA-SITUACAO NO-GAPS.
          IF WA_PA-SITUACAO EQ 'ATIVO'.
            LC_PERNR = WA_PERNR-PERNR.
          ENDIF.
        ENDIF.
      ENDLOOP.

      IF LC_PERNR IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
          EXPORTING
            TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID )
            MSGTY  = 'E'
            MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO
            MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID.
      ENDIF.

      LC_PERNR = WA_PERNR-PERNR.

    ELSEIF I_PERNR IS NOT INITIAL .
      LC_PERNR = I_PERNR.
    ELSE.
      RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
        EXPORTING
          TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID )
          MSGTY  = 'E'
          MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO
          MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID.
    ENDIF.

    SELECT SINGLE * INTO @DATA(WA_0011)
      FROM ZHCMT_PA_0011
     WHERE PERNR          EQ @LC_PERNR
       AND ST_SOLICITACAO EQ @ZIF_SOL_MOBILE_RH=>ST_STATUS_ATIVO.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
        EXPORTING
          TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID )
          MSGTY  = 'E'
          MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO
          MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID.
    ENDIF.

    IF WA_0011-ST_SOLICITACAO NE ZIF_SOL_MOBILE_RH=>ST_STATUS_ATIVO.
      RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
        EXPORTING
          TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID )
          MSGTY  = 'E'
          MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO
          MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID.
    ENDIF.

    DATA: LC_CLEAR_TEXT_PASSWORD TYPE CHAR30,
          LC_ENCODED_PASSWORD    TYPE DBCON_PWD.

    DATA(LC_SENHA) = I_SENHA.
    TRANSLATE LC_SENHA TO UPPER CASE.

    IF WA_0011-DS_SENHA NE LC_SENHA.
      "*******************************************

      CREATE OBJECT R_SOL_MOBILE_RH TYPE ZCL_SOL_MOBILE_RH.
      R_SOL_MOBILE_RH->SET_REGISTRO( I_ID_SOLICITACAO = WA_0011-ID_SOLICITACAO
           )->SET_ADD_ERRO_LOGIN(
           )->GET_REGISTRO( IMPORTING E_ZHCMT_PA_0011 = DATA(E_ZHCMT_PA_0011)
           )->SET_DENQUEUE( I_ID_SOLICITACAO = E_ZHCMT_PA_0011-ID_SOLICITACAO
           ).

      IF E_ZHCMT_PA_0011-ST_SOLICITACAO EQ ZIF_SOL_MOBILE_RH=>ST_STATUS_BLOQUEADO.
        RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
          EXPORTING
            TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN_BLOQUEIO-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN_BLOQUEIO-MSGID )
            MSGTY  = 'E'
            MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN_BLOQUEIO-MSGNO
            MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN_BLOQUEIO-MSGID.
      ELSE.
        RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
          EXPORTING
            TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID )
            MSGTY  = 'E'
            MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO
            MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID.
      ENDIF.
    ELSE.
      CREATE OBJECT R_SOL_MOBILE_RH TYPE ZCL_SOL_MOBILE_RH.
      R_SOL_MOBILE_RH->SET_REGISTRO( I_ID_SOLICITACAO = WA_0011-ID_SOLICITACAO
           )->SET_CLEAR_ERRO_LOGIN(
           )->SET_DENQUEUE( I_ID_SOLICITACAO = WA_0011-ID_SOLICITACAO
           ).
    ENDIF.

    CALL FUNCTION 'GENERATE_SEC_RANDOM'
      IMPORTING
        RANDOM         = LC_RANDOM
      EXCEPTIONS
        INVALID_LENGTH = 1
        NO_MEMORY      = 2
        INTERNAL_ERROR = 3
        OTHERS         = 4.

    IF SY-SUBRC IS NOT INITIAL.
    ENDIF.

    E_TOKEN = LC_RANDOM.

    TRY.
        CALL METHOD ZCL_SOL_MOBILE_RH=>ZIF_SOL_MOBILE_RH~GET_MD5_HASH
          EXPORTING
            I_TEXTO      = E_TOKEN
          RECEIVING
            R_HASHSTRING = E_TOKEN.
      CATCH ZCX_SOL_MOBILE_RH .
        RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
          EXPORTING
            TEXTID = VALUE #( MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO MSGID = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID )
            MSGTY  = 'E'
            MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGNO
            MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_ERRO_LOGIN-MSGID.
    ENDTRY.

    CALL FUNCTION 'ZHCMF_RETURN_FUNC'
      EXPORTING
        PERNR   = LC_PERNR
      TABLES
        T_SAIDA = IT_SAIDA.

    IF IT_SAIDA IS NOT INITIAL.
      READ TABLE IT_SAIDA INTO DATA(WA_SAIDA) INDEX 1.
      E_NOME = WA_SAIDA-CNAME.
    ENDIF.

    UPDATE ZHCMT_PA_0011
       SET DS_TOKEN_LOGIN = E_TOKEN
     WHERE ID_SOLICITACAO EQ WA_0011-ID_SOLICITACAO.

    COMMIT WORK.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_PASSWORD.

    R_SOL_MOBILE_RH = ME.

    DATA(HASH) = ZCL_SOL_MOBILE_RH=>ZIF_SOL_MOBILE_RH~GET_MD5_HASH( I_TEXTO = CONV #( I_SENHA ) ).

    ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-DS_SENHA = HASH.

*    CALL FUNCTION 'DB_CRYPTO_PASSWORD'
*      EXPORTING
*        CLEAR_TEXT_PASSWORD          = I_SENHA
*      IMPORTING
*        ENCODED_PASSWORD             =
*      EXCEPTIONS
*        CRYPT_OUTPUT_BUFFER_TO_SMALL = 1
*        CRYPT_INTERNAL_ERROR         = 2
*        CRYPT_TRUNCATION_ERROR       = 3
*        CRYPT_CONVERSION_ERROR       = 4
*        INTERNAL_ERROR               = 5
*        OTHERS                       = 6.
*
*    IF SY-SUBRC IS NOT INITIAL.
*      MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO DATA(I_TEXTO).
*      ZCL_SOL_MOBILE_RH=>ZIF_SOL_MOBILE_RH~GERA_ERRO_GERAL( I_TEXTO = I_TEXTO ).
*    ENDIF.

  ENDMETHOD.


  method ZIF_SOL_MOBILE_RH~SET_PERNR.
    R_SOL_MOBILE_RH = ME.
    ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-PERNR = I_PERNR.
  endmethod.


  METHOD ZIF_SOL_MOBILE_RH~SET_REGISTRO.

    R_SOL_MOBILE_RH = ME.

    SELECT SINGLE * INTO ME->ZIF_SOL_MOBILE_RH~SOLICITACAO
      FROM ZHCMT_PA_0011
     WHERE ID_SOLICITACAO EQ I_ID_SOLICITACAO.

    IF SY-SUBRC IS NOT INITIAL.
      RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
        EXPORTING
          TEXTID = VALUE #( MSGID = ZCX_SOL_MOBILE_RH=>ZCX_NAO_ENCONTRADO-MSGID
                            MSGNO = ZCX_SOL_MOBILE_RH=>ZCX_NAO_ENCONTRADO-MSGNO
                            ATTR1 = CONV #( I_ID_SOLICITACAO ) )
          MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_NAO_ENCONTRADO-MSGID
          MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_NAO_ENCONTRADO-MSGNO
          MSGTY  = 'E'
          MSGV1  = CONV #( I_ID_SOLICITACAO ).
    ELSE.
      ZCL_SOL_MOBILE_RH=>ZIF_SOL_MOBILE_RH~SET_ENQUEUE( EXPORTING I_ID_SOLICITACAO = I_ID_SOLICITACAO ).
    ENDIF.

    SELECT * INTO TABLE ME->ZIF_SOL_MOBILE_RH~LOGS
      FROM ZHCMT_PA_0012
     WHERE ID_SOLICITACAO EQ I_ID_SOLICITACAO.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_ST_SOLICITACAO.

    R_SOL_MOBILE_RH = ME.
    ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ST_SOLICITACAO = I_ST_SOLICITACAO.

    ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-DT_ULTIMO_AJUSTE = SY-DATUM.
    ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-HR_ULTIMO_AJUSTE = SY-UZEIT.
    ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-US_ULTIMO_AJUSTE = SY-UNAME.

    IF I_ST_SOLICITACAO = ZIF_SOL_MOBILE_RH=>ST_STATUS_ATIVO.
      ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-QT_ERROS_LOGIN = 0.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_SOL_MOBILE_RH~SET_VALIDAR.

    R_SOL_MOBILE_RH = ME.

    IF ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-PERNR IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
        EXPORTING
          TEXTID = VALUE #( MSGID     = ZCX_SOL_MOBILE_RH=>ZCX_SEM_MATRICULA-MSGID
                            MSGNO     = ZCX_SOL_MOBILE_RH=>ZCX_SEM_MATRICULA-MSGNO )
          MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_SEM_MATRICULA-MSGID
          MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_SEM_MATRICULA-MSGNO
          MSGTY  = 'E'.
    ENDIF.

    IF ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-DS_MOTIVO IS INITIAL AND ME->ZIF_SOL_MOBILE_RH~CK_ERRO_LOGIN EQ ABAP_TRUE.
      RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
        EXPORTING
          TEXTID = VALUE #( MSGID     = ZCX_SOL_MOBILE_RH=>ZCX_SEM_MOTIVO-MSGID
                            MSGNO     = ZCX_SOL_MOBILE_RH=>ZCX_SEM_MOTIVO-MSGNO )
          MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_SEM_MOTIVO-MSGID
          MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_SEM_MOTIVO-MSGNO
          MSGTY  = 'E'.
    ENDIF.

    IF ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ST_SOLICITACAO EQ ZIF_SOL_MOBILE_RH=>ST_STATUS_ATIVO AND
       ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-DS_SENHA IS INITIAL.
      RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
        EXPORTING
          TEXTID = VALUE #( MSGID     = ZCX_SOL_MOBILE_RH=>ZCX_SEM_SENHA-MSGID
                            MSGNO     = ZCX_SOL_MOBILE_RH=>ZCX_SEM_SENHA-MSGNO )
          MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_SEM_SENHA-MSGID
          MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_SEM_SENHA-MSGNO
          MSGTY  = 'E'.
    ENDIF.

    "Verificar se Já Existe uma Solicitação com este dispositivo cadastrado """"""""""""""
    IF ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_SOLICITACAO IS INITIAL.

      SELECT SINGLE * INTO @DATA(WA_ZHCMT_PA_0011)
        FROM ZHCMT_PA_0011
       WHERE PERNR          EQ @ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-PERNR
         AND ST_SOLICITACAO EQ @ME->ZIF_SOL_MOBILE_RH~ST_STATUS_ATIVO
         AND ID_DISPOSITIVO EQ @ME->ZIF_SOL_MOBILE_RH~SOLICITACAO-ID_DISPOSITIVO.

      IF SY-SUBRC IS INITIAL.
        RAISE EXCEPTION TYPE ZCX_SOL_MOBILE_RH
          EXPORTING
            TEXTID = VALUE #( MSGID     = ZCX_SOL_MOBILE_RH=>ZCX_DISPOSITIVO_CPF_CADASTRADO-MSGID
                              MSGNO     = ZCX_SOL_MOBILE_RH=>ZCX_DISPOSITIVO_CPF_CADASTRADO-MSGNO )
            MSGID  = ZCX_SOL_MOBILE_RH=>ZCX_DISPOSITIVO_CPF_CADASTRADO-MSGID
            MSGNO  = ZCX_SOL_MOBILE_RH=>ZCX_DISPOSITIVO_CPF_CADASTRADO-MSGNO
            MSGTY  = 'E'.
      ENDIF.

    ENDIF.

  ENDMETHOD.
ENDCLASS.
