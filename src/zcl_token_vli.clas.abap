class ZCL_TOKEN_VLI definition
  public
  create public .

public section.

  methods GET_TOKEN
    returning
      value(R_TOKEN) type STRING
    exceptions
      HTTP_COMMUNICATION_FAILURE
      HTTP_INVALID_STATE
      HTTP_PROCESSING_FAILED
      HTTP_INVALID_TIMEOUT
      ZCX_ENVIO .
protected section.
private section.

  data AT_SRV_INTEGRACAO type ZDE_SRV_INTEGRACAO .
  data AT_DT_CHEGADA type ZDE_DT_CHEGADA .
  data AT_SIGLA_TERMINAL type ZDE_SIGLA_TERMINAL .
  data AT_AUTH_WS type ZAUTH_WEBSERVICE .
  data AT_DADOS_DESCARGA type ZLEST0179_TMP_T .

  methods MONTA_CDATA
    returning
      value(R_CDATA) type STRING .
  methods SET_URL
    returning
      value(R_URL) type UI_SRC_URL .
  methods TRATAR_CDATA
    changing
      !C_CDATA type STRING .
ENDCLASS.



CLASS ZCL_TOKEN_VLI IMPLEMENTATION.


  method GET_TOKEN.

   DATA: HTTP_CLIENT          TYPE REF TO IF_HTTP_CLIENT,
         XML_RETURN           TYPE REF TO CL_XML_DOCUMENT,
         RETURN_CODE          TYPE I,
         VL_INI_POS           TYPE I,
         V_CDATA_RETORNO      TYPE STRING,
         V_CDATA              TYPE STRING,
         V_URL                TYPE UI_SRC_URL,
         V_MSG_SHOW           TYPE C LENGTH 200.

  DATA: JS_PROP_TAB TYPE JS_PROPERTY_TAB,
        JS_OBJ      TYPE REF TO CL_JAVA_SCRIPT.

  CLEAR: R_TOKEN.

  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = SY-TABIX
      TEXT       = TEXT-001.

  V_URL = ME->SET_URL( ).

  CHECK V_URL IS NOT INITIAL.

  V_CDATA = ME->MONTA_CDATA( ).

  CHECK V_CDATA IS NOT INITIAL.

  ME->TRATAR_CDATA( CHANGING C_CDATA = V_CDATA ).

  "Call service
  CALL METHOD CL_HTTP_CLIENT=>CREATE_BY_URL
    EXPORTING
      URL                = CONV #( V_URL )
      SSL_ID             = 'DFAULT'
    IMPORTING
      CLIENT             = HTTP_CLIENT
    EXCEPTIONS
      ARGUMENT_NOT_FOUND = 1
      PLUGIN_NOT_ACTIVE  = 2
      INTERNAL_ERROR     = 3
      OTHERS             = 4.

  CALL METHOD HTTP_CLIENT->REQUEST->SET_HEADER_FIELD
    EXPORTING
      NAME  = '~request_method'
      VALUE = 'POST'.

  CALL METHOD HTTP_CLIENT->REQUEST->SET_HEADER_FIELD
    EXPORTING
      NAME  = '~server_protocol'
      VALUE = 'HTTP/1.1'.

  CALL METHOD HTTP_CLIENT->REQUEST->SET_HEADER_FIELD
    EXPORTING
      NAME  = 'Content-Type'
      VALUE = 'application/json; charset=UTF-8'.

  HTTP_CLIENT->AUTHENTICATE( USERNAME = CONV #( ME->AT_AUTH_WS-USERNAME )
                             PASSWORD = CONV #( ME->AT_AUTH_WS-PASSWORD ) ).

  CALL METHOD HTTP_CLIENT->REQUEST->SET_CDATA
    EXPORTING
      DATA   = V_CDATA
      OFFSET = 0
      LENGTH = STRLEN( V_CDATA  ).

  CALL METHOD HTTP_CLIENT->SEND
    EXCEPTIONS
      HTTP_COMMUNICATION_FAILURE = 1
      HTTP_INVALID_STATE         = 2
      HTTP_PROCESSING_FAILED     = 3
      HTTP_INVALID_TIMEOUT       = 4.

  CASE SY-SUBRC.
    WHEN 1.
      HTTP_CLIENT->CLOSE( ).
      MESSAGE S021 WITH | { V_URL } (Send) | RAISING HTTP_COMMUNICATION_FAILURE.
      EXIT.
    WHEN 2.
      HTTP_CLIENT->CLOSE( ).
      MESSAGE S022 WITH | { V_URL } (Send) | RAISING HTTP_INVALID_STATE.
      EXIT.
    WHEN 3.
      HTTP_CLIENT->CLOSE( ).
      MESSAGE S023 WITH | { V_URL } (Send) | RAISING HTTP_PROCESSING_FAILED.
      EXIT.
    WHEN 4.
      HTTP_CLIENT->CLOSE( ).
      MESSAGE S024 WITH | { V_URL } (Send) | RAISING HTTP_INVALID_TIMEOUT.
      EXIT.
  ENDCASE.

  CALL METHOD HTTP_CLIENT->RECEIVE
    EXCEPTIONS
      HTTP_COMMUNICATION_FAILURE = 1
      HTTP_INVALID_STATE         = 2
      HTTP_PROCESSING_FAILED     = 3.

  CASE SY-SUBRC.
    WHEN 1.
      HTTP_CLIENT->CLOSE( ).
      MESSAGE S021 WITH | { V_URL } (Receive) |  DISPLAY LIKE 'E' RAISING HTTP_COMMUNICATION_FAILURE.
      EXIT.
    WHEN 2.
      HTTP_CLIENT->CLOSE( ).
      MESSAGE S023 WITH | { V_URL } (Receive) |  DISPLAY LIKE 'E' RAISING HTTP_INVALID_STATE.
      EXIT.
    WHEN 3.
      HTTP_CLIENT->CLOSE( ).
      MESSAGE S024 WITH | { V_URL } (Receive) |  DISPLAY LIKE 'E' RAISING HTTP_PROCESSING_FAILED.
      EXIT.
  ENDCASE.

  "//Check return content
  CREATE OBJECT XML_RETURN.

  CALL METHOD XML_RETURN->PARSE_STRING
    EXPORTING
      STREAM = HTTP_CLIENT->RESPONSE->GET_CDATA( ).

  HTTP_CLIENT->RESPONSE->GET_STATUS( IMPORTING CODE = RETURN_CODE ).

  V_CDATA_RETORNO = HTTP_CLIENT->RESPONSE->GET_CDATA( ).

  IF RETURN_CODE NE '200' AND RETURN_CODE NE '201'.
    CLEAR: VL_INI_POS.

    IF VL_INI_POS IS INITIAL.
      FIND '(400)' IN V_CDATA_RETORNO MATCH OFFSET VL_INI_POS.
      IF VL_INI_POS IS NOT INITIAL.
        RETURN_CODE = '400'.
      ENDIF.
    ENDIF.

    IF VL_INI_POS IS INITIAL.
      FIND '(401)' IN V_CDATA_RETORNO MATCH OFFSET VL_INI_POS.
      IF VL_INI_POS IS NOT INITIAL.
        RETURN_CODE = '401'.
      ENDIF.
    ENDIF.

    IF VL_INI_POS IS INITIAL.
      FIND '(403)' IN V_CDATA_RETORNO MATCH OFFSET VL_INI_POS.
      IF VL_INI_POS IS NOT INITIAL.
        RETURN_CODE = '403'.
      ENDIF.
    ENDIF.

    IF VL_INI_POS IS INITIAL.
      FIND '(404)' IN V_CDATA_RETORNO MATCH OFFSET VL_INI_POS.
      IF VL_INI_POS IS NOT INITIAL.
        RETURN_CODE = '404'.
      ENDIF.
    ENDIF.

    IF VL_INI_POS IS INITIAL.
      FIND '(422)' IN V_CDATA_RETORNO MATCH OFFSET VL_INI_POS.
      IF VL_INI_POS IS NOT INITIAL.
        RETURN_CODE = '422'.
      ENDIF.
    ENDIF.

    IF VL_INI_POS IS INITIAL.
      FIND '(500)' IN V_CDATA_RETORNO MATCH OFFSET VL_INI_POS.
      IF VL_INI_POS IS NOT INITIAL.
        RETURN_CODE = '500'.
      ENDIF.
    ENDIF.

    IF VL_INI_POS IS INITIAL.
      FIND '(503)' IN V_CDATA_RETORNO MATCH OFFSET VL_INI_POS.
      IF VL_INI_POS IS NOT INITIAL.
        RETURN_CODE = '503'.
      ENDIF.
    ENDIF.

    CASE RETURN_CODE.
      WHEN 400.
        MESSAGE '(WS)-Requisição mal formatada!' TYPE 'S' RAISING ZCX_ENVIO.
     	WHEN 401.
        MESSAGE '(WS)-Requisição requer autenticação!' TYPE 'S' RAISING ZCX_ENVIO.
      WHEN 403.
        MESSAGE '(WS)-Requisição não autorizada!' TYPE 'S' RAISING ZCX_ENVIO.
      WHEN 404.
        MESSAGE '(WS)-Registro não encontrado!' TYPE 'S' RAISING ZCX_ENVIO.
      WHEN 422.
        MESSAGE '(WS)-Erro de negócio!' TYPE 'S' RAISING ZCX_ENVIO.
      WHEN 500.
        MESSAGE '(WS)-Erro interno do servidor!' TYPE 'S' RAISING ZCX_ENVIO.
      WHEN 503.
        MESSAGE '(WS)-Serviço indisponível!' TYPE 'S' RAISING ZCX_ENVIO.
      WHEN OTHERS.
        MESSAGE '(WS)-Consulta não realizada!' TYPE 'S' RAISING ZCX_ENVIO.
    ENDCASE.

    RETURN.
  ENDIF.

  CLEAR: JS_PROP_TAB[].

  ZCL_FMCALL_HANDLER=>JSON2ABAP( EXPORTING JSON_STRING    = V_CDATA_RETORNO
                                 IMPORTING PROPERTY_TABLE = JS_PROP_TAB
                                 CHANGING JS_OBJECT       = JS_OBJ ).

  LOOP AT JS_PROP_TAB ASSIGNING FIELD-SYMBOL(<JS_PROP>).
    CHECK ( <JS_PROP>-VALUE IS NOT INITIAL ) AND ( <JS_PROP>-VALUE NE 'null' ).

    CASE <JS_PROP>-NAME.
      WHEN 'access_token'.
        R_TOKEN = <JS_PROP>-VALUE.
        EXIT.
    ENDCASE.
  ENDLOOP.

  endmethod.


  method MONTA_CDATA.

    DATA: XVALOR                  TYPE STRING,
          V_C_AUX                 TYPE STRING.

    CLEAR: R_CDATA.

    DEFINE CONC_CDATA.
      CLEAR: XVALOR.
      XVALOR = &1.
      CONCATENATE R_CDATA XVALOR INTO R_CDATA.
    END-OF-DEFINITION.

    CONC_CDATA '{'.
    CONC_CDATA '  "grant_type":"password", '.

    CONC_CDATA '"username":"'.
    CONC_CDATA    ME->AT_AUTH_WS-ADD01.
    CONC_CDATA '",'.

    CONC_CDATA '"password":"'.
    CONC_CDATA    ME->AT_AUTH_WS-ADD02.
    CONC_CDATA '"'.

    CONC_CDATA  '}'.

  endmethod.


  method SET_URL.

    CLEAR: R_URL.

    SELECT SINGLE *
      FROM ZAUTH_WEBSERVICE INTO ME->AT_AUTH_WS
     WHERE SERVICE = 'PORTAL_VLI_AUTENTICACAO'.

    IF ( SY-SUBRC NE 0 ).
      MESSAGE S029.
      RETURN.
    ENDIF.

    R_URL = ME->AT_AUTH_WS-URL.

  endmethod.


  method TRATAR_CDATA.

    REPLACE ALL OCCURRENCES OF REGEX '[áàãâ]' IN C_CDATA WITH 'a' IGNORING CASE.
    REPLACE ALL OCCURRENCES OF REGEX '[éê]'   IN C_CDATA WITH 'e' IGNORING CASE.
    REPLACE ALL OCCURRENCES OF        'í'     IN C_CDATA WITH 'i' IGNORING CASE.
    REPLACE ALL OCCURRENCES OF REGEX '[óô]'   IN C_CDATA WITH 'o' IGNORING CASE.
    REPLACE ALL OCCURRENCES OF REGEX '[üú]'   IN C_CDATA WITH 'u' IGNORING CASE.
    REPLACE ALL OCCURRENCES OF REGEX '[ç]'    IN C_CDATA WITH 'c' IGNORING CASE.
    REPLACE ALL OCCURRENCES OF        '&'     IN C_CDATA WITH '&#38;'.
    REPLACE ALL OCCURRENCES OF        ''''    IN C_CDATA WITH '&#39;'.
    REPLACE ALL OCCURRENCES OF        'º'     IN C_CDATA WITH 'o' IGNORING CASE.

  endmethod.
ENDCLASS.
