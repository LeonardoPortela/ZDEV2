FUNCTION ZSDMF009_INTERPRETA_COD_CALC.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     REFERENCE(I_FORMULA) TYPE  EMG_TRDATA
*"     REFERENCE(I_SHOW) TYPE  CHAR1 OPTIONAL
*"  TABLES
*"      TE_CODE STRUCTURE  ZSDS011 OPTIONAL
*"      TE_TABELAS STRUCTURE  ZSDS012 OPTIONAL
*"      TE_WORKAREAS STRUCTURE  ZSDS012 OPTIONAL
*"  EXCEPTIONS
*"      FORMULA_INCONSISTENTE
*"----------------------------------------------------------------------
  TYPES: BEGIN OF TY_SPLIT,
           LINE(500),
         END OF TY_SPLIT.

*  TYPES: BEGIN OF TY_CODE,
*           LINE(255),
*         END OF TY_CODE.

  DATA: T_SPLIT      TYPE TABLE OF TY_SPLIT WITH HEADER LINE,
        T_SPLIT_AUX  TYPE TABLE OF TY_SPLIT WITH HEADER LINE,
        T_SPLIT_AUX2  TYPE TABLE OF TY_SPLIT WITH HEADER LINE,
        T_CODE       TYPE TABLE OF TY_CODE WITH HEADER LINE,
        T_BEGIN_BLOCK  TYPE TABLE OF TY_CODE WITH HEADER LINE,
        T_END_BLOCK  TYPE TABLE OF TY_CODE WITH HEADER LINE,
        WL_END_BLOCK(255),
        WL_WHERE(255),
        WA_SPLIT     TYPE TY_SPLIT,
        WA_SPLIT_AUX TYPE TY_SPLIT,
        WL_CONT      TYPE SY-INDEX,
        WL_CONT_AUX  TYPE SY-INDEX,
        WL_CONT_AUX2 TYPE SY-INDEX,
        WL_CONT_AUX3 TYPE SY-INDEX,
        WL_CONT_AUX4 TYPE SY-INDEX,
        WL_CONT_AUX5 TYPE SY-INDEX,
        WL_INDEX     TYPE SY-INDEX,
        WL_LINE      TYPE SY-TABIX.
*        obg_EDITCONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,,
*        OBG_EDITOR            TYPE REF TO CL_GUI_TEXTEDIT.

  DATA: WL_SPACE TYPE C VALUE '$'.

  REFRESH: T_SPLIT, T_SPLIT_AUX, T_END_BLOCK, T_CODE, T_BEGIN_BLOCK, T_SPLIT_AUX2.

  RANGES: RG_OPERADOR_LOGIC FOR IDWT_CIS_HEADER-CIS_TRANS.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = '='.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = 'EQ'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = 'NE'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = '<>'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = 'LT'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = '<'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = 'LE'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = '<='.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = '>'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = 'GT'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = '>='.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = 'GE'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = 'CO'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = 'CN'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = 'CA'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = 'NA'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = 'CS'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = 'NS'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = 'CP'.
  APPEND RG_OPERADOR_LOGIC.

  RG_OPERADOR_LOGIC-SIGN = 'I'.
  RG_OPERADOR_LOGIC-OPTION = 'EQ'.
  RG_OPERADOR_LOGIC-LOW = 'NP'.
  APPEND RG_OPERADOR_LOGIC.
*  SPLIT I_FORMULA AT ')' INTO TABLE T_SPLIT.
*  T_SPLIT-LINE = I_FORMULA.
*  APPEND T_SPLIT.
*  SPLIT I_FORMULA AT '(' INTO TABLE T_SPLIT.

*  LOOP AT T_SPLIT INTO WA_SPLIT.
**    ADD 1 TO WL_CONT_AUX.
*    WL_LINE = SY-TABIX + 1.
*    FIND FIRST OCCURRENCE OF '(' IN WA_SPLIT-LINE MATCH OFFSET WL_CONT.
*    IF SY-SUBRC IS INITIAL.
*     if WL_CONT gt 0.
*
*     endif.
*      ADD 1 TO WL_CONT.
*      WA_SPLIT_AUX-LINE = WA_SPLIT-LINE+WL_CONT.
*      CLEAR WA_SPLIT-LINE+WL_CONT.
*      MODIFY T_SPLIT FROM WA_SPLIT.
*      T_SPLIT-LINE = WA_SPLIT_AUX-LINE.
*      INSERT T_SPLIT INDEX WL_LINE.
*
*    ENDIF.
*    CLEAR: T_SPLIT, WA_SPLIT_AUX.
*  ENDLOOP.
  WL_CONT_AUX3 = STRLEN( I_FORMULA ).
  DO.
    IF I_FORMULA+WL_CONT(1) EQ '('.
      IF T_SPLIT_AUX-LINE IS NOT INITIAL.
        TRANSLATE T_SPLIT_AUX-LINE USING '$ '.
        APPEND T_SPLIT_AUX.
      ENDIF.

      T_SPLIT_AUX-LINE = I_FORMULA+WL_CONT(1).
      APPEND T_SPLIT_AUX.
      CLEAR: T_SPLIT_AUX.
    ELSE.

      IF I_FORMULA+WL_CONT(1) IS INITIAL.
        CONCATENATE T_SPLIT_AUX-LINE WL_SPACE INTO T_SPLIT_AUX-LINE.
      ELSEIF I_FORMULA+WL_CONT(1) EQ ')'.
        IF T_SPLIT_AUX-LINE IS NOT INITIAL.
          TRANSLATE T_SPLIT_AUX-LINE USING '$ '.
          APPEND T_SPLIT_AUX.
          CLEAR: T_SPLIT_AUX.
        ENDIF.
        APPEND ')' TO T_SPLIT_AUX.
      ELSE.
        CONCATENATE T_SPLIT_AUX-LINE I_FORMULA+WL_CONT(1) INTO T_SPLIT_AUX-LINE.
      ENDIF.
    ENDIF.
    WL_CONT = SY-INDEX.
    IF SY-INDEX EQ WL_CONT_AUX3.
      IF T_SPLIT_AUX-LINE IS NOT INITIAL.
        TRANSLATE T_SPLIT_AUX-LINE USING '$ '.
        APPEND T_SPLIT_AUX.
        CLEAR: T_SPLIT_AUX.
      ENDIF.
      EXIT.
    ENDIF.
  ENDDO.



  IF SY-SUBRC IS INITIAL.
    LOOP AT T_SPLIT_AUX INTO WA_SPLIT_AUX.
*      WL_LINE = SY-TABIX + 1.
      IF WA_SPLIT_AUX-LINE EQ '('.
*      OR T_END_BLOCK[] IS NOT INITIAL.
*        READ TABLE T_SPLIT_AUX INTO WA_SPLIT_AUX INDEX  WL_LINE.
*        IF SY-SUBRC IS INITIAL.
        APPEND 'BEGIN.' TO T_BEGIN_BLOCK.
      ELSEIF WA_SPLIT_AUX-LINE NE '('   " INICIA BLOCO
        AND WA_SPLIT_AUX-LINE NE ')'
        AND T_BEGIN_BLOCK[] IS NOT INITIAL.
        CLEAR: WL_CONT_AUX3.
        DESCRIBE TABLE T_BEGIN_BLOCK LINES WL_CONT_AUX3.
        READ TABLE T_BEGIN_BLOCK INDEX WL_CONT_AUX3.
        IF SY-SUBRC IS INITIAL.
          DELETE T_BEGIN_BLOCK FROM WL_CONT_AUX3.
          REFRESH: T_SPLIT.
          CLEAR: T_SPLIT.
          FIND '[' IN WA_SPLIT_AUX-LINE MATCH OFFSET WL_CONT_AUX5.
          IF SY-SUBRC IS INITIAL. " Bloco do tipo LOOP
*            APPEND 'ENDLOOP.' TO T_END_BLOCK.
            CLEAR: WL_CONT_AUX5, WL_CONT_AUX4.
            SPLIT WA_SPLIT_AUX-LINE AT ';' INTO  TABLE T_SPLIT.
            LOOP AT T_SPLIT.
              IF SY-TABIX EQ 1.
                FIND '[' IN T_SPLIT-LINE MATCH OFFSET WL_CONT_AUX5.
                ADD 1 TO WL_CONT_AUX5.
                FIND ']' IN T_SPLIT-LINE MATCH OFFSET WL_CONT_AUX4.
                SUBTRACT WL_CONT_AUX5 FROM WL_CONT_AUX4.
                WL_WHERE = T_SPLIT-LINE+WL_CONT_AUX5(WL_CONT_AUX4).
                REFRESH: T_SPLIT_AUX2.
                SPLIT WL_WHERE AT SPACE INTO TABLE T_SPLIT_AUX2.
                LOOP AT T_SPLIT_AUX2.
                  IF SY-TABIX GT 1.
                    FIND `'` IN T_SPLIT_AUX2-LINE.
                    IF SY-SUBRC IS  NOT INITIAL.
                      IF T_SPLIT_AUX2-LINE IS NOT INITIAL
                        AND T_SPLIT_AUX2-LINE NOT IN RG_OPERADOR_LOGIC.
                        TRANSLATE T_SPLIT_AUX2-LINE USING '; '.
                        CONDENSE T_SPLIT_AUX2-LINE NO-GAPS.

                        APPEND T_SPLIT_AUX2-LINE TO TE_WORKAREAS.
                      ENDIF.
                    ENDIF.
                  ENDIF.

                ENDLOOP.
                TRANSLATE  WL_WHERE USING ' $'.
                CONCATENATE 'WHERE' WL_WHERE  INTO WL_WHERE SEPARATED BY SPACE.
                TRANSLATE  WL_WHERE USING '$ '.

                TRANSLATE  T_SPLIT-LINE USING ' $'.
*                IF WL_WHERE IS INITIAL.
*                  TRANSLATE T_SPLIT-LINE USING ';.'.
*                ELSE.
                TRANSLATE T_SPLIT-LINE USING '; '.
*                ENDIF.
                SUBTRACT 1 FROM WL_CONT_AUX5.
                APPEND T_SPLIT-LINE(WL_CONT_AUX5) TO TE_TABELAS.
                CONCATENATE 'LOOP AT' T_SPLIT-LINE(WL_CONT_AUX5) WL_WHERE '.'  INTO T_CODE-LINE SEPARATED BY SPACE.
                TRANSLATE  T_CODE-LINE USING '$ '.
                APPEND T_CODE.
                CLEAR T_CODE.
                APPEND 'ENDLOOP.' TO T_END_BLOCK.
              ELSE.
                CONCATENATE T_SPLIT-LINE '.' INTO T_CODE-LINE SEPARATED BY SPACE.
                APPEND T_CODE.
                CLEAR T_CODE.
              ENDIF.
            ENDLOOP.
          ELSE. " Bloco do tipo IF


            CLEAR: WL_CONT_AUX3, WL_CONT_AUX4.
            WL_CONT_AUX4 = STRLEN( WA_SPLIT_AUX-LINE ).
            DO.
              IF WA_SPLIT_AUX-LINE+WL_CONT_AUX3(1) EQ ';'
              OR WA_SPLIT_AUX-LINE+WL_CONT_AUX3(1) EQ ','.
                IF T_SPLIT-LINE IS NOT INITIAL.
                  CONCATENATE T_SPLIT-LINE WA_SPLIT_AUX-LINE+WL_CONT_AUX3(1) INTO T_SPLIT-LINE.
                  TRANSLATE T_SPLIT-LINE USING '$ '.
                  APPEND T_SPLIT.
                  CLEAR: T_SPLIT.
                ELSE.
                  APPEND  WA_SPLIT_AUX-LINE+WL_CONT_AUX3(1)  TO T_SPLIT.
                ENDIF.
              ELSE.
                IF WA_SPLIT_AUX-LINE+WL_CONT_AUX3(1) IS INITIAL.
                  CONCATENATE T_SPLIT-LINE WL_SPACE INTO T_SPLIT-LINE.
*                  ELSEIF WA_SPLIT_AUX-LINE+WL_CONT(1) EQ ')'.
*                    IF T_SPLIT-LINE IS NOT INITIAL.
*                      TRANSLATE T_SPLIT_AUX-LINE USING '$ '.
*                      APPEND T_SPLIT_AUX.
*                      CLEAR: T_SPLIT_AUX.
*                    ENDIF.
*                    APPEND ')' TO T_SPLIT_AUX.
                ELSE.
                  CONCATENATE T_SPLIT-LINE WA_SPLIT_AUX-LINE+WL_CONT_AUX3(1) INTO T_SPLIT-LINE.
                ENDIF.

              ENDIF.
              WL_CONT_AUX3 = SY-INDEX.
              IF SY-INDEX EQ WL_CONT_AUX4.
                IF T_SPLIT-LINE IS NOT INITIAL.
                  CONCATENATE T_SPLIT-LINE WA_SPLIT_AUX-LINE+WL_CONT_AUX3(1) INTO T_SPLIT-LINE.
                  TRANSLATE T_SPLIT-LINE USING '$ '.
                  APPEND T_SPLIT.
                  CLEAR: T_SPLIT.
                ENDIF.
                EXIT.
              ENDIF.

            ENDDO.
*              SPLIT WA_SPLIT_AUX-LINE AT SPACE  INTO TABLE T_SPLIT.
            CLEAR: WL_CONT_AUX5, WL_CONT_AUX4.
            DESCRIBE TABLE T_SPLIT LINES WL_CONT_AUX5.
            LOOP AT T_SPLIT.
*              DESCRIBE TABLE T_SPLIT LINES WL_CONT_AUX5.
              WL_CONT_AUX5 = SY-TABIX.
              WL_CONT_AUX2 = STRLEN( T_SPLIT-LINE ).
              FIND ';' IN T_SPLIT-LINE.
              IF SY-TABIX EQ 1
             AND SY-SUBRC IS INITIAL
             AND T_SPLIT-LINE NE ','.
                REFRESH: T_SPLIT_AUX2.
                SPLIT T_SPLIT-LINE AT SPACE INTO TABLE T_SPLIT_AUX2.
                LOOP AT T_SPLIT_AUX2.
                  FIND `'` IN T_SPLIT_AUX2-LINE.
                  IF SY-SUBRC IS  NOT INITIAL.
                    IF T_SPLIT_AUX2-LINE IS NOT INITIAL
                      AND T_SPLIT_AUX2-LINE NOT IN RG_OPERADOR_LOGIC.
                      TRANSLATE T_SPLIT_AUX2-LINE USING '; '.
                      CONDENSE T_SPLIT_AUX2-LINE NO-GAPS.

                      APPEND T_SPLIT_AUX2-LINE TO TE_WORKAREAS.
                    ENDIF.
                  ENDIF.

                ENDLOOP.
                TRANSLATE  T_SPLIT-LINE USING ' $'.
                TRANSLATE T_SPLIT-LINE USING ';.'.

                CONCATENATE 'IF' T_SPLIT-LINE INTO T_CODE-LINE SEPARATED BY SPACE.
                TRANSLATE  T_CODE-LINE USING '$ '.
                APPEND T_CODE.
                CLEAR T_CODE.
                APPEND 'ENDIF.' TO T_END_BLOCK.
*                ADD 1 TO WL_CONT_AUX4.
              ELSEIF T_SPLIT-LINE NE ','.
                CLEAR: WL_CONT.
                FIND ',' IN T_SPLIT-LINE  MATCH OFFSET WL_CONT.
                IF SY-SUBRC IS INITIAL.
                  ADD 1 TO WL_CONT.
                  IF WL_CONT EQ WL_CONT_AUX2.
                    TRANSLATE T_SPLIT-LINE USING ',.'.
                    T_CODE-LINE = T_SPLIT-LINE.
                    APPEND T_CODE.
                    CLEAR T_CODE.
*                    SUBTRACT 1 FROM WL_CONT_AUX4.
*                    SUBTRACT 1 FROM WL_CONT_AUX5.
                    ADD 1 TO WL_CONT_AUX5.
                    READ TABLE T_SPLIT INTO WA_SPLIT_AUX INDEX WL_CONT_AUX5.
                    IF SY-SUBRC IS INITIAL.
                      WL_CONT_AUX5 = STRLEN( T_SPLIT-LINE ).
                      SUBTRACT 1 FROM WL_CONT_AUX5.
                      IF WA_SPLIT_AUX-LINE+WL_CONT_AUX5(1) NE ';'.
                        APPEND 'ELSE.' TO T_CODE.

                      ENDIF.
                    ENDIF.
                    AT LAST.
                      APPEND 'ELSE.' TO T_CODE.

                    ENDAT.
                  ENDIF.

*                  DESCRIBE TABLE
*                  ADD 1  TO WL_CONT_AUX5.
*                  READ TABLE T_SPLIT INTO WA_SPLIT_AUX INDEX WL_CONT_AUX5.

                ELSE.
                  CLEAR: WL_CONT.
                  FIND ';' IN T_SPLIT-LINE  MATCH OFFSET WL_CONT.
                  IF SY-SUBRC IS INITIAL.
                    ADD 1 TO WL_CONT.
                    IF WL_CONT EQ WL_CONT_AUX2.
                      REFRESH: T_SPLIT_AUX2.
                      SPLIT T_SPLIT-LINE AT SPACE INTO TABLE T_SPLIT_AUX2.
                      LOOP AT T_SPLIT_AUX2.
                        FIND `'` IN T_SPLIT_AUX2-LINE.
                        IF SY-SUBRC IS NOT INITIAL.
                          IF T_SPLIT_AUX2-LINE IS NOT INITIAL
                            AND T_SPLIT_AUX2-LINE NOT IN RG_OPERADOR_LOGIC.
                            TRANSLATE T_SPLIT_AUX2-LINE USING '; '.
                            CONDENSE T_SPLIT_AUX2-LINE NO-GAPS.

                            APPEND T_SPLIT_AUX2-LINE TO TE_WORKAREAS.
                          ENDIF.
                        ENDIF.

                      ENDLOOP.
                      TRANSLATE  T_SPLIT-LINE USING ' $'.
                      TRANSLATE T_SPLIT-LINE USING ';.'.

                      CONCATENATE 'ELSEIF' T_SPLIT-LINE INTO T_CODE-LINE SEPARATED BY SPACE.
                      TRANSLATE  T_CODE-LINE USING '$ '.
*                      ADD 1 TO WL_CONT_AUX4.

                      APPEND T_CODE.
                      CLEAR T_CODE.
                    ENDIF.
                  ELSE.
*                    SUBTRACT 1 FROM WL_CONT_AUX4.


                    T_CODE-LINE = T_SPLIT-LINE.
                    APPEND T_CODE.
                    CLEAR T_CODE.
                  ENDIF.
                ENDIF.
              ENDIF.

            ENDLOOP.

          ENDIF.
        ENDIF.
      ELSEIF WA_SPLIT_AUX-LINE EQ ')'.
        DESCRIBE TABLE T_END_BLOCK LINES WL_CONT_AUX3.
        READ TABLE T_END_BLOCK INDEX WL_CONT_AUX3.
        IF SY-SUBRC IS INITIAL.
          APPEND T_END_BLOCK-LINE TO T_CODE.
          CLEAR: T_END_BLOCK.
          DELETE T_END_BLOCK FROM WL_CONT_AUX3.
        ENDIF.
*        ENDIF.
      ENDIF.

    ENDLOOP.
  ENDIF.

  LOOP AT T_CODE.
    FIND '++' IN T_CODE-LINE MATCH OFFSET WL_CONT.
    IF SY-SUBRC IS INITIAL.
      ADD 2 TO WL_CONT.
      TRANSLATE T_CODE-LINE+WL_CONT USING '. '.
      CONCATENATE 'ADD' T_CODE-LINE+WL_CONT 'TO p_result.' INTO T_CODE-LINE SEPARATED BY SPACE.
      MODIFY T_CODE.
    ELSE.
      FIND '--' IN T_CODE-LINE MATCH OFFSET WL_CONT.
      IF SY-SUBRC IS INITIAL.
        ADD 2 TO WL_CONT.
        TRANSLATE T_CODE-LINE+WL_CONT USING '. '.
        CONCATENATE 'SUBTRACT' T_CODE-LINE+WL_CONT 'FROM p_result.' INTO T_CODE-LINE SEPARATED BY SPACE.
        MODIFY T_CODE.
      ELSE.
        IF T_CODE-LINE CA '+-/*'.
          CONCATENATE 'p_result =' T_CODE-LINE INTO T_CODE-LINE SEPARATED BY SPACE.
          MODIFY T_CODE.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.

  LOOP AT TE_WORKAREAS.
    FIND '-' IN TE_WORKAREAS-COMPONENTE MATCH OFFSET WL_CONT.
    IF SY-SUBRC IS INITIAL.
      READ TABLE TE_TABELAS
        WITH KEY COMPONENTE = TE_WORKAREAS-COMPONENTE(WL_CONT).
      IF SY-SUBRC IS INITIAL.
        DELETE TE_WORKAREAS.
      ENDIF.
    ENDIF.

  ENDLOOP.

  SORT TE_WORKAREAS BY COMPONENTE.
  SORT TE_TABELAS BY COMPONENTE.
  DELETE ADJACENT DUPLICATES FROM TE_WORKAREAS.
  DELETE ADJACENT DUPLICATES FROM TE_TABELAS.


  TE_CODE[] = T_CODE[].
  tg_code_show[] = T_CODE[].

  IF I_SHOW IS NOT INITIAL.
    call SCREEN 200 STARTING AT 10 10 ENDING AT 110 20.

  ENDIF.

*  DO.
*    IF I_FORMULA+WL_CONT(1) EQ '('.
*      ADD 1 TO WL_CONT_AUX.
*    ELSEIF I_FORMULA+WL_CONT(1) EQ ')'.
*      SUBTRACT 1 FROM WL_CONT_AUX.
*    ENDIF.
*    WL_CONT = SY-INDEX.
*    IF WL_CONT_AUX EQ 0.
*      SUBTRACT WL_CONT_AUX2 FROM WL_CONT.
*      T_SPLIT-LINE = I_FORMULA+WL_CONT_AUX2(WL_CONT).
*      APPEND T_SPLIT.
*      WL_CONT_AUX2 = WL_CONT.
*      CLEAR: T_SPLIT.
*    ENDIF.
*    IF SY-INDEX EQ WL_CONT_AUX3.
*      EXIT.
*    ENDIF.
*  ENDDO.

*  LOOP AT T_SPLIT.
*    SHIFT T_SPLIT-LINE LEFT DELETING LEADING ' '.
*    IF  T_SPLIT-LINE(1) EQ '('.
*      FIND ';'  IN T_SPLIT-LINE MATCH OFFSET WL_LINE.
*      IF SY-SUBRC IS INITIAL.
*        TRANSLATE T_SPLIT-LINE USING '( ) '.
**        CONDENSE T_SPLIT-LINE NO-GAPS.
*        CONCATENATE 'IF' T_SPLIT-LINE(WL_LINE) '.' INTO T_SPLIT_AUX-LINE SEPARATED BY SPACE.
*        APPEND T_SPLIT_AUX.
*      ENDIF.
*    ENDIF.
*  ENDLOOP.


*  FIND ALL OCCURRENCES OF ')' IN TABLE T_SPLIT MATCH COUNT WL_CONT.
*  FIND ALL OCCURRENCES OF '(' IN TABLE T_SPLIT MATCH COUNT WL_CONT.
*
*  IF WL_CONT NE WL_LINE.
*    RAISE FORMULA_INCONSISTENTE.
*  ENDIF.

*  WHILE WL_LINE NE 0.
*    READ TABLE T_SPLIT INDEX WL_LINE.
**    IF T_SPLIT-LINE IS NOT INITIAL.
*      APPEND T_SPLIT TO T_SPLIT_AUX.
**    ENDIF.
*    SUBTRACT 1 FROM WL_LINE.
*  ENDWHILE.

*  T_SPLIT[] = T_SPLIT_AUX[].





ENDFUNCTION.
