*----------------------------------------------------------------------*
***INCLUDE MZBALANCO_1104 .
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Module  STATUS_1104  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_1104 OUTPUT.

  IF G_CUSTOM_CONTAINER2 IS INITIAL.
    PERFORM CREATE_CONTAINER_ALV_TREE.
  ENDIF.

  IF G_TREE3 IS INITIAL.
    PERFORM GERAR_RELATORIO_TREE_DRE.
    "PERFORM AJUSTA_TOTAIS.
    PERFORM CREATE_TREE_ALV_TREE3_DRE.
  ENDIF.

ENDMODULE.                 " STATUS_1104  OUTPUT

*&---------------------------------------------------------------------*
*&      Form  CREATE_TREE_ALV_TREE3_DRE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM CREATE_TREE_ALV_TREE3_DRE .

  DATA: L_HIERARCHY_HEADER TYPE TREEV_HHDR,
        LT_LIST_COMMENTARY TYPE SLIS_T_LISTHEADER,
        L_LOGO             TYPE SDYDO_VALUE,
        LS_LINE            TYPE SLIS_LISTHEADER,
        LS_VARIANT         TYPE DISVARIANT,
        GT_FIELDCATALOG    TYPE LVC_T_FCAT,
        VG_MES(2),
        VG_ANO(4),
        LT_EVENTS          TYPE CNTL_SIMPLE_EVENTS,
        L_EVENT            TYPE CNTL_SIMPLE_EVENT,
        I_DEFAULT          TYPE CHAR01.

  CREATE OBJECT G_TREE3
    EXPORTING
      PARENT                      = DG_PARENT_TREE
      NODE_SELECTION_MODE         = CL_GUI_COLUMN_TREE=>NODE_SEL_MODE_MULTIPLE
      ITEM_SELECTION              = SPACE
      NO_HTML_HEADER              = 'X'
      NO_TOOLBAR                  = ''
    EXCEPTIONS
      CNTL_ERROR                  = 1
      CNTL_SYSTEM_ERROR           = 2
      CREATE_ERROR                = 3
      LIFETIME_ERROR              = 4
      ILLEGAL_NODE_SELECTION_MODE = 5
      FAILED                      = 6
      ILLEGAL_COLUMN_NAME         = 7.

  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE X208(00) WITH 'ERROR'.                          "#EC NOTEXT
  ENDIF.

  CLEAR L_EVENT.
  L_EVENT-EVENTID = CL_GUI_COLUMN_TREE=>EVENTID_NODE_DOUBLE_CLICK.
  L_EVENT-APPL_EVENT = 'X'.
  APPEND L_EVENT TO LT_EVENTS.

  CALL METHOD G_TREE3->SET_REGISTERED_EVENTS
    EXPORTING
      EVENTS                    = LT_EVENTS
    EXCEPTIONS
      CNTL_ERROR                = 1
      CNTL_SYSTEM_ERROR         = 2
      ILLEGAL_EVENT_COMBINATION = 3.

  CREATE OBJECT ALV_TREE_VIEW_EVENT.
  SET HANDLER ALV_TREE_VIEW_EVENT->ON_NODE_DOUBLE_CLICK FOR G_TREE3.

  L_HIERARCHY_HEADER-T_IMAGE = 'LOGO_NOVO'.
  L_HIERARCHY_HEADER-HEADING = text-101. "'Hierarquia (Cabeçalho)'.
  L_HIERARCHY_HEADER-WIDTH   = 30.

  CLEAR LS_LINE.
  LS_LINE-TYP  = 'H'.
  LS_LINE-INFO = text-122. "'Demonstrativo de Resultado de Exercício'.
  APPEND LS_LINE TO LT_LIST_COMMENTARY.

  "Empresa p/ Plano de Contas do Razão
  SELECT * INTO TABLE IT_T001
    FROM T001
   WHERE BUKRS EQ P_BUKRS.

  SORT IT_T001 BY BUKRS.

  READ TABLE IT_T001 INDEX 1.
  CLEAR LS_LINE.
  LS_LINE-KEY  = text-102. "'Empresa'.
  LS_LINE-TYP  = 'S'.
  LS_LINE-INFO = IT_T001-BUTXT.
  APPEND LS_LINE TO LT_LIST_COMMENTARY.

  LS_LINE-KEY  = text-103. "'Período'.
  MOVE: P_MONAT TO VG_MES,
        P_GJAHR TO VG_ANO.
  CONCATENATE VG_MES '/' VG_ANO INTO LS_LINE-INFO.
  APPEND LS_LINE TO LT_LIST_COMMENTARY.

  CLEAR LS_LINE.
  LS_LINE-KEY  = text-104. "'Moeda'.
  LS_LINE-TYP  = 'S'.
  LS_LINE-INFO = P_WAERS.
  APPEND LS_LINE TO LT_LIST_COMMENTARY.

  CLEAR LS_LINE.
  LS_LINE-KEY  = text-105. "'Estrutura'.
  LS_LINE-TYP  = 'S'.
  CONCATENATE  P_ESTR '-' P_ESTT INTO LS_LINE-INFO SEPARATED BY SPACE.
  APPEND LS_LINE TO LT_LIST_COMMENTARY.

  CLEAR LS_LINE.
  LS_LINE-KEY  = text-106. "'Data:'.
  LS_LINE-TYP  = 'S'.
  WRITE SY-DATUM TO LS_LINE-INFO.
  APPEND LS_LINE TO LT_LIST_COMMENTARY.

  L_LOGO = 'LOGO_NOVO'.

  LS_VARIANT-REPORT = SY-REPID.

  PERFORM CATALOGO_TREE_ALV_DRE TABLES GT_FIELDCATALOG.

  IF VARIANT IS NOT INITIAL.
    MOVE VARIANT TO G_VARIANT-VARIANT.
    I_DEFAULT = ABAP_FALSE.
  ELSE.
    I_DEFAULT = ABAP_TRUE.
  ENDIF.

  CALL METHOD G_TREE3->SET_TABLE_FOR_FIRST_DISPLAY
    EXPORTING
      I_STRUCTURE_NAME    = 'TY_ZGLT047_TREE'
      IS_HIERARCHY_HEADER = L_HIERARCHY_HEADER
      IT_LIST_COMMENTARY  = LT_LIST_COMMENTARY
      I_LOGO              = L_LOGO
      I_BACKGROUND_ID     = 'ALV_BACKGROUND'
      I_SAVE              = 'A'
      IS_VARIANT          = G_VARIANT
      I_DEFAULT           = I_DEFAULT
    CHANGING
      IT_OUTTAB           = IT_ZGLT047_TREE[]
      IT_FIELDCATALOG     = GT_FIELDCATALOG.


  DATA: IT_NODE_KEY TYPE LVC_T_NKEY.

  PERFORM MOSTRA_TEXTO USING text-081. "'Montando Estrutura de Demonstrativo de DRE'.
  PERFORM ESTRUTURA_SAIDA_ALV_TREE_VIEW TABLES IT_NODE_KEY.

* calculate totals
  CALL METHOD G_TREE3->UPDATE_CALCULATIONS.

* this method must be called to send the data to the frontend
  CALL METHOD G_TREE3->FRONTEND_UPDATE.

  CALL METHOD G_TREE3->EXPAND_NODES
    EXPORTING
      IT_NODE_KEY = IT_NODE_KEY.

  CALL METHOD G_TREE3->COLLAPSE_ALL_NODES.

  PERFORM CHANGE_TOOLBAR.

  PERFORM CRIA_HTML_CAB_DRE.

ENDFORM.                    " CREATE_TREE_ALV_TREE3_DRE

*&---------------------------------------------------------------------*
*&      Form  CRIA_HTML_CAB_DRE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM CRIA_HTML_CAB_DRE .

  DATA: TEXTO(40), VG_MES(2), VG_ANO(4),
        SDYDO_TEXT_ELEMENT(255),
        P_TEXT_TABLE            TYPE SDYDO_TEXT_TABLE,
        P_TEXT                  TYPE SDYDO_TEXT_ELEMENT,
        POSITION                TYPE I.

  DATA: COLUMN         TYPE REF TO CL_DD_AREA,
        COLUMN_1       TYPE REF TO CL_DD_AREA,
        COLUMN_2       TYPE REF TO CL_DD_AREA,
        TABLE_ELEMENT  TYPE REF TO CL_DD_TABLE_ELEMENT,
        TABLE_ELEMENT2 TYPE REF TO CL_DD_TABLE_ELEMENT.

  CALL METHOD DG_DYNDOC_ID->INITIALIZE_DOCUMENT.

  CALL METHOD DG_DYNDOC_ID->ADD_TABLE
    EXPORTING
      NO_OF_COLUMNS = 1
      BORDER        = '0'
      WIDTH         = '100%'
    IMPORTING
      TABLE         = TABLE_ELEMENT.

  CALL METHOD TABLE_ELEMENT->ADD_COLUMN
    IMPORTING
      COLUMN = COLUMN.

  CALL METHOD TABLE_ELEMENT->SET_COLUMN_STYLE
    EXPORTING
      COL_NO    = 1
      SAP_ALIGN = 'CENTER'
      SAP_STYLE = CL_DD_DOCUMENT=>HEADING.

  P_TEXT = text-122. "'Demonstrativo de Resultado de Exercício'.
  CALL METHOD COLUMN->ADD_TEXT
    EXPORTING
      TEXT      = P_TEXT
      SAP_STYLE = 'HEADING'.

  CALL METHOD DG_DYNDOC_ID->ADD_TABLE
    EXPORTING
      NO_OF_COLUMNS = 2
      BORDER        = '0'
      WIDTH         = '100%'
    IMPORTING
      TABLE         = TABLE_ELEMENT2.

  CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
    EXPORTING
      SAP_STYLE   = 'SAP_BOLD'
      STYLE_CLASS = 'SAP_BOLD'
    IMPORTING
      COLUMN      = COLUMN_1.

  CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
    IMPORTING
      COLUMN = COLUMN_2.

  CALL METHOD TABLE_ELEMENT2->SET_COLUMN_STYLE
    EXPORTING
      COL_NO       = 2
      SAP_ALIGN    = 'LEFT'
      SAP_FONTSIZE = CL_DD_DOCUMENT=>MEDIUM.

  SDYDO_TEXT_ELEMENT = text-116. "'Empresa: '.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  SDYDO_TEXT_ELEMENT = text-117. "'Período: '.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  SDYDO_TEXT_ELEMENT = text-118. "'Moeda: '.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  SDYDO_TEXT_ELEMENT = text-119. "'Estrutura: '.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  SDYDO_TEXT_ELEMENT = text-120. "'Data: '.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  CALL METHOD COLUMN_1->ADD_TEXT
    EXPORTING
      TEXT_TABLE = P_TEXT_TABLE
      FIX_LINES  = 'X'.

  CLEAR: P_TEXT_TABLE.

  SDYDO_TEXT_ELEMENT = IT_T001-BUTXT.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  MOVE: P_MONAT TO VG_MES,
        P_GJAHR TO VG_ANO.
  CONCATENATE VG_MES '/' VG_ANO INTO TEXTO.
  SDYDO_TEXT_ELEMENT = TEXTO.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  SDYDO_TEXT_ELEMENT = P_WAERS.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  CONCATENATE P_ESTR '-' P_ESTT INTO TEXTO SEPARATED BY SPACE.
  SDYDO_TEXT_ELEMENT = TEXTO.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  WRITE SY-DATUM TO TEXTO.
  SDYDO_TEXT_ELEMENT = TEXTO.
  APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

  CALL METHOD COLUMN_2->ADD_TEXT
    EXPORTING
      TEXT_TABLE = P_TEXT_TABLE
      FIX_LINES  = 'X'.

  PERFORM CONTAINER_HTML.

ENDFORM.                    " CRIA_HTML_CAB_DRE

*&---------------------------------------------------------------------*
*&      Form  CATALOGO_TREE_ALV_DRE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_FIELDCATALOG  text
*----------------------------------------------------------------------*
FORM CATALOGO_TREE_ALV_DRE   TABLES  IT_FIELDCATALOG STRUCTURE LVC_S_FCAT.

  DATA: FIELD       TYPE LVC_S_FCAT,
        VG_GJAHR    TYPE GJAHR,
        VG_MONAT    TYPE MONAT,
        VT_GJAHR(4),
        VT_MONAT(2).

  CLEAR: FIELD.
  MOVE P_GJAHR TO VT_GJAHR.
  MOVE P_MONAT TO VT_MONAT.
  CONCATENATE VT_MONAT '/' VT_GJAHR INTO FIELD-SCRTEXT_L.
  FIELD-COL_POS   = 1.
  FIELD-FIELDNAME = 'VALOR_01'.
  FIELD-TABNAME   = 'IT_ZGLT047_TREE'.
  FIELD-EMPHASIZE = 'K41'.
  FIELD-OUTPUTLEN = 30.
  FIELD-SCRTEXT_M = FIELD-SCRTEXT_L.
  FIELD-SCRTEXT_S = FIELD-SCRTEXT_L.
  FIELD-DO_SUM    = ABAP_TRUE.
  FIELD-DATATYPE  = 'NUMC'.
  FIELD-JUST      = 'R'.
  APPEND FIELD TO IT_FIELDCATALOG.

  CLEAR: FIELD.

  IF P_CMONAT IS NOT INITIAL AND P_CGJAHR IS NOT INITIAL.
    MOVE P_CGJAHR TO VG_GJAHR.                                      "/ Modificação CS2017000771
    MOVE P_CMONAT  TO VT_MONAT.                                     "/ Modificação CS2017000771
  ELSE.
    MOVE P_GJAHR TO VG_GJAHR.
    ADD -1 TO VG_GJAHR.
    MOVE P_MONAT  TO VT_MONAT.
  ENDIF.

  MOVE VG_GJAHR TO VT_GJAHR.

  CONCATENATE VT_MONAT '/' VT_GJAHR INTO FIELD-SCRTEXT_L.
  FIELD-COL_POS   = 3.
  FIELD-FIELDNAME = 'VALOR_02'.
  FIELD-TABNAME   = 'IT_ZGLT047_TREE'.
  FIELD-EMPHASIZE = 'K41'.
  FIELD-OUTPUTLEN = 30.
  FIELD-SCRTEXT_M = FIELD-SCRTEXT_L.
  FIELD-SCRTEXT_S = FIELD-SCRTEXT_L.
  FIELD-DO_SUM    = ABAP_TRUE.
  FIELD-DATATYPE  = 'NUMC'.
  FIELD-JUST      = 'R'.
  APPEND FIELD TO IT_FIELDCATALOG.

  IF P_CMONAT IS INITIAL AND P_CGJAHR IS INITIAL.           "/ Modificação CS2017000771
    IF VT_MONAT NE '12'.
      CLEAR: FIELD.
      MOVE P_GJAHR TO VG_GJAHR.
      ADD -1 TO VG_GJAHR.
      MOVE VG_GJAHR TO VT_GJAHR.
      CONCATENATE  '12/' VT_GJAHR INTO FIELD-SCRTEXT_L.
      FIELD-COL_POS   = 2.
      FIELD-FIELDNAME = 'VALOR_03'.
      FIELD-TABNAME   = 'IT_ZGLT047_TREE'.
      FIELD-EMPHASIZE = 'K41'.
      FIELD-OUTPUTLEN = 30.
      FIELD-SCRTEXT_M = FIELD-SCRTEXT_L.
      FIELD-SCRTEXT_S = FIELD-SCRTEXT_L.
      FIELD-DO_SUM    = ABAP_TRUE.
      FIELD-DATATYPE  = 'NUMC'.
      FIELD-JUST      = 'R'.
      APPEND FIELD TO IT_FIELDCATALOG.
    ENDIF.
  ENDIF.

  CLEAR: FIELD.
  FIELD-COL_POS   = 4.
  FIELD-FIELDNAME = 'NIVEL'.
  FIELD-TABNAME   = 'IT_ZGLT047_TREE'.
  FIELD-EMPHASIZE = 'K41'.
  FIELD-OUTPUTLEN = 10.
  FIELD-SCRTEXT_L = text-107. "'Nível da Estrutura de Balanço Patrimonial'.
  FIELD-SCRTEXT_M = text-108. "'Nível Estrutura'.
  FIELD-SCRTEXT_S = text-108. "'Nível Estrutura'.
  APPEND FIELD TO IT_FIELDCATALOG.

  CLEAR: FIELD.
  FIELD-COL_POS   = 5.
  FIELD-FIELDNAME = 'DESNVL'.
  FIELD-TABNAME   = 'IT_ZGLT047_TREE'.
  FIELD-EMPHASIZE = 'K41'.
  FIELD-OUTPUTLEN = 35.
  FIELD-SCRTEXT_L = text-109. "'Descrição da Estrutura de Balanço Patrimonial'.
  FIELD-SCRTEXT_M = text-110. "'Descrição Estrutura'.
  FIELD-SCRTEXT_S = text-110. "'Descrição Estrutura'.
  APPEND FIELD TO IT_FIELDCATALOG.

  CLEAR: FIELD.
  FIELD-COL_POS   = 6.
  FIELD-FIELDNAME = 'COD_CLAS_NOT'.
  FIELD-TABNAME   = 'IT_ZGLT047_TREE'.
  FIELD-EMPHASIZE = 'K41'.
  FIELD-OUTPUTLEN = 35.
  FIELD-SCRTEXT_L = text-111. "'Nota de Classificação'.
  FIELD-SCRTEXT_M = text-111. "'Nota de Classificação'.
  FIELD-SCRTEXT_S = text-111. "'Nota de Classificação'.
  APPEND FIELD TO IT_FIELDCATALOG.

  CLEAR: FIELD.
  FIELD-COL_POS   = 7.
  FIELD-FIELDNAME = 'DESCR_NOTA'.
  FIELD-TABNAME   = 'IT_ZGLT047_TREE'.
  FIELD-EMPHASIZE = 'K41'.
  FIELD-OUTPUTLEN = 35.
  FIELD-SCRTEXT_L = text-112. "'Descrição da Nota de Classificação'.
  FIELD-SCRTEXT_M = text-113. "'Desc. Nota Calss.'.
  FIELD-SCRTEXT_S = text-113. "'Desc. Nota Calss.'.
  APPEND FIELD TO IT_FIELDCATALOG.

  CLEAR: FIELD.
  FIELD-COL_POS   = 8.
  FIELD-FIELDNAME = 'SAKNR'.
  FIELD-TABNAME   = 'IT_ZGLT047_TREE'.
  FIELD-EMPHASIZE = 'K41'.
  FIELD-OUTPUTLEN = 35.
  FIELD-SCRTEXT_L = text-114. "'Conta Razão'.
  FIELD-SCRTEXT_M = text-114. "'Conta Razão'.
  FIELD-SCRTEXT_S = text-114. "'Conta Razão'.
  APPEND FIELD TO IT_FIELDCATALOG.

  CLEAR: FIELD.
  FIELD-COL_POS   = 9.
  FIELD-FIELDNAME = 'TEXTO'.
  FIELD-TABNAME   = 'IT_ZGLT047_TREE'.
  FIELD-EMPHASIZE = 'K41'.
  FIELD-OUTPUTLEN = 35.
  FIELD-SCRTEXT_L = text-115. "'Desc. Conta Razão'.
  FIELD-SCRTEXT_M = text-115. "'Desc. Conta Razão'.
  FIELD-SCRTEXT_S = text-115. "'Desc. Conta Razão'.
  APPEND FIELD TO IT_FIELDCATALOG.

ENDFORM.                    " CATALOGO_TREE_ALV_DRE

*&---------------------------------------------------------------------*
*&      Form  GERAR_RELATORIO_TREE_DRE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GERAR_RELATORIO_TREE_DRE .

  DATA: WA_CONTAS      TYPE ZLC_EMP_CONTAS,
        VG_GJAHR       TYPE GJAHR,
        VG_MONAT       TYPE MONAT,
        "WA_ZGLT061     TYPE ZGLT061,
        "WA_ZGLT061_C   TYPE ZGLT061,
        WA_ZGLT041     TYPE ZGLT041,
        IT_T001_AUX    TYPE TABLE OF TKA02 WITH HEADER LINE,
        IT_SKA1        TYPE TABLE OF SKA1 WITH HEADER LINE,
        IT_DRE_RESULT1 TYPE TABLE OF ZGL030_EST_D WITH HEADER LINE,
        IT_DRE_RESULT2 TYPE TABLE OF ZGL030_EST_D WITH HEADER LINE,
        IT_DRE_RESULT3 TYPE TABLE OF ZGL030_EST_D WITH HEADER LINE,
        IT_ZGLT049CN   TYPE TABLE OF ZGLT049CN    WITH HEADER LINE,
        IT_ZGLT049LN   TYPE TABLE OF ZGLT049LN    WITH HEADER LINE,
        IT_ZGLT049MN   TYPE TABLE OF ZGLT049MN    WITH HEADER LINE,
        IT_DRE_CC      TYPE TABLE OF ZGL015_DRE_EST04 WITH HEADER LINE,
        IT_DRE_LL      TYPE TABLE OF ZGL015_DRE_EST05 WITH HEADER LINE,
        IT_DRE_MM      TYPE TABLE OF ZGL015_DRE_EST06 WITH HEADER LINE,
        IT_ZGLT041_AUX TYPE TABLE OF ZGLT041           WITH HEADER LINE,
        CK_CUSTO(1),
        CK_LUCRO(1),
        CK_MERCA(1),
        VG_LINES       TYPE I,
        CK_ACHOU(1)     .

  RANGES: PKOKRS FOR TKA02-KOKRS,
          RBUKRS FOR T001-BUKRS.

  PERFORM ATUALIZA_TABELAS_CONSULTAS USING P_ESTR P_BUKRS P_BUKR2." P_GJAHR.

  "SELECT SINGLE * INTO WA_ZGLT061 FROM ZGLT061 WHERE BUKRS EQ P_BUKRS AND GJAHR EQ P_GJAHR.

  IF P_CONSO IS INITIAL.
    DELETE IT_ZGLT041 WHERE BUKRS NE P_BUKRS.

    RBUKRS-SIGN   = 'I'.
    RBUKRS-OPTION = 'EQ'.
    RBUKRS-LOW    = P_BUKRS.
    RBUKRS-HIGH   = P_BUKRS.
    APPEND RBUKRS.

  ELSEIF P_BUKR2 IS NOT INITIAL.
    DELETE IT_ZGLT041 WHERE ( BUKRS NE P_BUKRS ) AND ( BUKRS NE P_BUKR2 ).
    "SELECT SINGLE * INTO WA_ZGLT061_C FROM ZGLT061 WHERE BUKRS EQ P_BUKR2 AND GJAHR EQ P_GJAHR.
    SORT IT_ZGLT041 BY SAKNR COD_CLAS_BAL COD_CLAS_NOT2.
    DELETE ADJACENT DUPLICATES FROM IT_ZGLT041 COMPARING SAKNR COD_CLAS_BAL COD_CLAS_NOT2.

    RBUKRS-SIGN   = 'I'.
    RBUKRS-OPTION = 'EQ'.
    RBUKRS-LOW    = P_BUKRS.
    RBUKRS-HIGH   = P_BUKRS.
    APPEND RBUKRS.
    RBUKRS-LOW    = P_BUKR2.
    RBUKRS-HIGH   = P_BUKR2.
    APPEND RBUKRS.
  ENDIF.

*  DELETE IT_ZGLT041 WHERE GJAHR NE P_GJAHR.

  MOVE P_GJAHR TO VG_GJAHR.

  PERFORM MOSTRA_TEXTO USING text-065. "'Pesquisa: Saldo Contábeis DRE do 1º Período'.

  IF P_CONSO IS INITIAL.
    CALL FUNCTION 'Z_PESQUISA_DRE'
      EXPORTING
        I_BUKRS      = P_BUKRS
        I_GJAHR      = VG_GJAHR
        I_MONATI     = 01
        I_MONATF     = P_MONAT
        I_VERSN      = T_DRE1
        I_WAERS      = P_WAERS
      TABLES
        T_ZGL030_EST = IT_DRE_RESULT1.
  ELSE.
    CALL FUNCTION 'Z_PESQUISA_DRE'
      EXPORTING
        I_BUKRS      = P_BUKRS
        I_GJAHR      = VG_GJAHR
        I_MONATI     = 01
        I_MONATF     = P_MONAT
        I_VERSN      = T_DRE1
        I_WAERS      = P_WAERS
        I_CON        = ABAP_TRUE
        I_BUKRS2     = P_BUKR2
        I_VERSN2     = T_DRE3
      TABLES
        T_ZGL030_EST = IT_DRE_RESULT1.
  ENDIF.

  DELETE IT_DRE_RESULT1 WHERE SAKNR IS INITIAL.

  IF P_CMONAT IS NOT INITIAL AND P_CGJAHR IS NOT INITIAL.
    MOVE P_CGJAHR TO VG_GJAHR.                            "/Modificação CS2016000771
    MOVE P_CMONAT TO VG_MONAT.                            "/Modificação CS2016000771
  ELSE.
    MOVE P_MONAT TO VG_MONAT.                             "/Modificação CS2016000771
    ADD -1 TO VG_GJAHR.
  ENDIF.

  PERFORM MOSTRA_TEXTO USING text-067. "'Pesquisa: Saldo Contábeis DRE do 2º Período'.

  IF P_CONSO IS INITIAL.
    CALL FUNCTION 'Z_PESQUISA_DRE'
      EXPORTING
        I_BUKRS      = P_BUKRS
        I_GJAHR      = VG_GJAHR
        I_MONATI     = 01
        I_MONATF     = VG_MONAT "P_MONAT
        I_VERSN      = T_DRE2
        I_WAERS      = P_WAERS
      TABLES
        T_ZGL030_EST = IT_DRE_RESULT2.
  ELSE.
    CALL FUNCTION 'Z_PESQUISA_DRE'
      EXPORTING
        I_BUKRS      = P_BUKRS
        I_GJAHR      = VG_GJAHR
        I_MONATI     = 01
        I_MONATF     = VG_MONAT "P_MONAT
        I_VERSN      = T_DRE2
        I_WAERS      = P_WAERS
        I_CON        = ABAP_TRUE
        I_BUKRS2     = P_BUKR2
        I_VERSN2     = T_DRE4
      TABLES
        T_ZGL030_EST = IT_DRE_RESULT2.
  ENDIF.

  DELETE IT_DRE_RESULT2 WHERE SAKNR IS INITIAL.

  IF P_MONAT EQ 12.
    MOVE IT_DRE_RESULT2[] TO IT_DRE_RESULT3[].
  ELSE.
    PERFORM MOSTRA_TEXTO USING text-068. "'Pesquisa: Saldo Contábeis DRE do 3º Período'.

    IF P_CONSO IS INITIAL.
      CALL FUNCTION 'Z_PESQUISA_DRE'
        EXPORTING
          I_BUKRS      = P_BUKRS
          I_GJAHR      = VG_GJAHR
          I_MONATI     = 01
          I_MONATF     = 12
          I_VERSN      = T_DRE2
          I_WAERS      = P_WAERS
        TABLES
          T_ZGL030_EST = IT_DRE_RESULT3.
    ELSE.
      PERFORM MOSTRA_TEXTO USING text-068. "'Pesquisa: Saldo Contábeis DRE do 3º Período'.

      CALL FUNCTION 'Z_PESQUISA_DRE'
        EXPORTING
          I_BUKRS      = P_BUKRS
          I_GJAHR      = VG_GJAHR
          I_MONATI     = 01
          I_MONATF     = 12
          I_VERSN      = T_DRE2
          I_WAERS      = P_WAERS
          I_CON        = ABAP_TRUE
          I_BUKRS2     = P_BUKR2
          I_VERSN2     = T_DRE4
        TABLES
          T_ZGL030_EST = IT_DRE_RESULT3.
    ENDIF.
    DELETE IT_DRE_RESULT3 WHERE SAKNR IS INITIAL.
  ENDIF.

*  VG_MONAT = P_MONAT. "/Modificação CS2016000771

  PERFORM MOSTRA_TEXTO USING text-082. "'Pesquisa: DRE - Objetos de Custo'.
  SELECT * INTO TABLE IT_DRE_CC FROM ZGL015_DRE_EST04 WHERE VERSN EQ T_DRE1.
  SELECT * INTO TABLE IT_DRE_LL FROM ZGL015_DRE_EST05 WHERE VERSN EQ T_DRE1.
  SELECT * INTO TABLE IT_DRE_MM FROM ZGL015_DRE_EST06 WHERE VERSN EQ T_DRE1.

  IF P_CONSO IS NOT INITIAL.
    SELECT * APPENDING TABLE IT_DRE_CC FROM ZGL015_DRE_EST04 WHERE VERSN EQ T_DRE2.
    SELECT * APPENDING TABLE IT_DRE_LL FROM ZGL015_DRE_EST05 WHERE VERSN EQ T_DRE2.
    SELECT * APPENDING TABLE IT_DRE_MM FROM ZGL015_DRE_EST06 WHERE VERSN EQ T_DRE2.
    SORT IT_DRE_CC BY SAKNR KOSAR.
    SORT IT_DRE_LL BY SAKNR KOKRS PRCTR.
    SORT IT_DRE_MM BY SAKNR MATKL.
  ENDIF.

  DELETE ADJACENT DUPLICATES FROM IT_DRE_CC COMPARING SAKNR KOSAR.
  DELETE ADJACENT DUPLICATES FROM IT_DRE_LL COMPARING SAKNR KOKRS PRCTR.
  DELETE ADJACENT DUPLICATES FROM IT_DRE_MM COMPARING SAKNR MATKL.

  SORT IT_DRE_CC BY SAKNR.
  SORT IT_DRE_LL BY SAKNR.
  SORT IT_DRE_MM BY SAKNR.

  PERFORM MOSTRA_TEXTO USING text-083. "'Pesquisa: Nó de Estrutura de Balanço Patrimonial - Custo'.

  SELECT * INTO TABLE IT_ZGLT049CN
    FROM ZGLT049CN
     FOR ALL ENTRIES IN IT_ZGLT049
   WHERE VERSN        EQ IT_ZGLT049-VERSN
     AND COD_CLAS_BAL EQ IT_ZGLT049-COD_CLAS_BAL
     AND COD_CLAS_NOT EQ IT_ZGLT049-COD_CLAS_NOT.

  SORT IT_ZGLT049CN BY NIVEL COD_CLAS_BAL COD_CLAS_NOT.

  PERFORM MOSTRA_TEXTO USING text-084. "'Pesquisa: Nó de Estrutura de Balanço Patrimonial - Lucro'.

  SELECT * INTO TABLE IT_T001_AUX
    FROM TKA02
     FOR ALL ENTRIES IN IT_ZGLT041
   WHERE BUKRS EQ IT_ZGLT041-BUKRS.

  SORT IT_T001_AUX BY KOKRS.
  DELETE ADJACENT DUPLICATES FROM IT_T001_AUX COMPARING KOKRS.

  LOOP AT IT_T001_AUX.
    PKOKRS-SIGN   = 'I'.
    PKOKRS-OPTION = 'EQ'.
    PKOKRS-LOW    = IT_T001_AUX-KOKRS.
    PKOKRS-HIGH   = IT_T001_AUX-KOKRS.
    APPEND PKOKRS.
  ENDLOOP.

  SELECT * INTO TABLE IT_ZGLT049LN
    FROM ZGLT049LN AS N
     FOR ALL ENTRIES IN IT_ZGLT049
   WHERE N~VERSN        EQ IT_ZGLT049-VERSN
     AND N~COD_CLAS_BAL EQ IT_ZGLT049-COD_CLAS_BAL
     AND N~COD_CLAS_NOT EQ IT_ZGLT049-COD_CLAS_NOT
     AND N~KOKRS        IN PKOKRS.
  "AND EXISTS ( SELECT * FROM CEPC_BUKRS AS B WHERE B~KOKRS EQ N~KOKRS AND B~PRCTR EQ N~PRCTR AND BUKRS IN RBUKRS ).

  SORT IT_ZGLT049LN BY NIVEL COD_CLAS_BAL COD_CLAS_NOT.

  PERFORM MOSTRA_TEXTO USING text-085. "'Pesquisa: Nó de Estrutura de Balanço Patrimonial - G. Mercadoria'.

  SELECT * INTO TABLE IT_ZGLT049MN
    FROM ZGLT049MN
     FOR ALL ENTRIES IN IT_ZGLT049
   WHERE VERSN        EQ IT_ZGLT049-VERSN
     AND COD_CLAS_BAL EQ IT_ZGLT049-COD_CLAS_BAL
     AND COD_CLAS_NOT EQ IT_ZGLT049-COD_CLAS_NOT.

  SORT IT_ZGLT049MN BY NIVEL COD_CLAS_BAL COD_CLAS_NOT.

  CLEAR: IT_1103_TOTAIS[].

  DESCRIBE TABLE IT_ZGLT047 LINES VG_LINES.

  "Eliminar Objetos"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  "Limpar Contas
  CLEAR: IT_ZGLT041_AUX[].
  MOVE IT_ZGLT041[] TO IT_ZGLT041_AUX[].
  CLEAR: IT_ZGLT041[].

  LOOP AT IT_ZGLT041_AUX.
    READ TABLE IT_DRE_RESULT1 WITH KEY SAKNR = IT_ZGLT041_AUX-SAKNR.
    IF SY-SUBRC IS INITIAL.
      APPEND IT_ZGLT041_AUX TO IT_ZGLT041.
      CONTINUE.
    ENDIF.
    READ TABLE IT_DRE_RESULT2 WITH KEY SAKNR = IT_ZGLT041_AUX-SAKNR.
    IF SY-SUBRC IS INITIAL.
      APPEND IT_ZGLT041_AUX TO IT_ZGLT041.
      CONTINUE.
    ENDIF.
    READ TABLE IT_DRE_RESULT3 WITH KEY SAKNR = IT_ZGLT041_AUX-SAKNR.
    IF SY-SUBRC IS INITIAL.
      APPEND IT_ZGLT041_AUX TO IT_ZGLT041.
      CONTINUE.
    ENDIF.
  ENDLOOP.
  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  LOOP AT IT_ZGLT047.

    PERFORM MOSTRA_TEXTO_P USING text-069 VG_LINES SY-TABIX. "'Totalizando Demonstrativo'

    LOOP AT IT_ZGLT049 WHERE NIVEL EQ IT_ZGLT047-NIVEL.

      CK_CUSTO = ABAP_FALSE.
      CK_LUCRO = ABAP_FALSE.
      CK_MERCA = ABAP_FALSE.

      READ TABLE IT_ZGLT049CN WITH KEY NIVEL        = IT_ZGLT049-NIVEL
                                       COD_CLAS_BAL = IT_ZGLT049-COD_CLAS_BAL
                                       COD_CLAS_NOT = IT_ZGLT049-COD_CLAS_NOT
                                       BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        "Somatoria por tipo de centro de custo
        CK_CUSTO = ABAP_TRUE.
        LOOP AT IT_ZGLT049CN WHERE NIVEL        = IT_ZGLT049-NIVEL
                               AND COD_CLAS_BAL = IT_ZGLT049-COD_CLAS_BAL
                               AND COD_CLAS_NOT = IT_ZGLT049-COD_CLAS_NOT.
          PERFORM TOTALIZA_DRE_TIPO_CUSTO
           TABLES IT_DRE_RESULT1 IT_DRE_RESULT2 IT_DRE_RESULT3
            USING IT_ZGLT049CN VG_MONAT.
        ENDLOOP.
      ENDIF.

      READ TABLE IT_ZGLT049LN WITH KEY NIVEL        = IT_ZGLT049-NIVEL
                                       COD_CLAS_BAL = IT_ZGLT049-COD_CLAS_BAL
                                       COD_CLAS_NOT = IT_ZGLT049-COD_CLAS_NOT
                                       BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        "Somatoria por centro de lucro
        CK_LUCRO = ABAP_TRUE.
        LOOP AT IT_ZGLT049LN WHERE NIVEL        = IT_ZGLT049-NIVEL
                               AND COD_CLAS_BAL = IT_ZGLT049-COD_CLAS_BAL
                               AND COD_CLAS_NOT = IT_ZGLT049-COD_CLAS_NOT.
          PERFORM TOTALIZA_DRE_CENTRO_LUCRO
           TABLES IT_DRE_RESULT1 IT_DRE_RESULT2 IT_DRE_RESULT3
            USING IT_ZGLT049LN VG_MONAT.
        ENDLOOP.
      ENDIF.

      READ TABLE IT_ZGLT049MN WITH KEY NIVEL        = IT_ZGLT049-NIVEL
                                       COD_CLAS_BAL = IT_ZGLT049-COD_CLAS_BAL
                                       COD_CLAS_NOT = IT_ZGLT049-COD_CLAS_NOT
                                       BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        "Somatoria por Grupo de Material
        CK_MERCA = ABAP_TRUE.
        LOOP AT IT_ZGLT049MN WHERE NIVEL        = IT_ZGLT049-NIVEL
                               AND COD_CLAS_BAL = IT_ZGLT049-COD_CLAS_BAL
                               AND COD_CLAS_NOT = IT_ZGLT049-COD_CLAS_NOT.
          PERFORM TOTALIZA_DRE_GRUPO_MATERIAL
           TABLES IT_DRE_RESULT1 IT_DRE_RESULT2 IT_DRE_RESULT3
            USING IT_ZGLT049MN VG_MONAT.
        ENDLOOP.
      ENDIF.

      PERFORM TOTALIZA_DRE_CONTA_RAZAO
       TABLES IT_DRE_RESULT1
              IT_DRE_RESULT2
              IT_DRE_RESULT3
              IT_ZGLT049CN
              IT_ZGLT049LN
              IT_ZGLT049MN
              IT_DRE_CC
              IT_DRE_LL
              IT_DRE_MM
        USING IT_ZGLT049 VG_MONAT CK_CUSTO CK_LUCRO CK_MERCA.
    ENDLOOP.
  ENDLOOP.

  CLEAR: IT_CONTAS_SOLTAS[].
  IF P_VCSV IS NOT INITIAL.

    PERFORM MOSTRA_TEXTO_P USING text-086 3 0. "'Verif. Vinculos na Est. Demons.'

    SELECT * INTO TABLE IT_SKA1 "#EC CI_DB_OPERATION_OK[2431747]
      FROM SKA1 "#EC CI_DB_OPERATION_OK[2389136]
       FOR ALL ENTRIES IN IT_T001
     WHERE KTOPL EQ IT_T001-KTOPL.

    SORT IT_SKA1 BY SAKNR.

    LOOP AT IT_DRE_RESULT1.
      CLEAR: IT_CONTAS_SALDO.
      IT_CONTAS_SALDO-SAKNR    = IT_DRE_RESULT1-SAKNR.
      IT_CONTAS_SALDO-VALOR_01 = IT_DRE_RESULT1-VLR_ACM.
      COLLECT IT_CONTAS_SALDO.

      READ TABLE IT_SKA1 WITH KEY SAKNR = IT_DRE_RESULT1-SAKNR.
      IF SY-SUBRC IS INITIAL AND
        ( IT_SKA1-KTOKS EQ 'YB01' OR
          IT_SKA1-KTOKS EQ 'YB02' OR
          IT_SKA1-KTOKS EQ 'YB03' OR
          IT_SKA1-KTOKS EQ 'YB04' ).
        CONTINUE.
      ENDIF.

      READ TABLE IT_1103_TOTAIS WITH KEY SAKNR = IT_DRE_RESULT1-SAKNR.
      IF SY-SUBRC IS NOT INITIAL.
        CLEAR: IT_CONTAS_SOLTAS.
        IT_CONTAS_SOLTAS-SAKNR = IT_DRE_RESULT1-SAKNR.
        READ TABLE IT_T001 WITH KEY BUKRS = P_BUKRS BINARY SEARCH.
        READ TABLE IT_SKAT WITH KEY KTOPL = IT_T001-KTOPL SAKNR = IT_DRE_RESULT1-SAKNR BINARY SEARCH.
        IT_CONTAS_SOLTAS-TEXTO    = IT_SKAT-TXT50.
        IT_CONTAS_SOLTAS-VALOR_01 = IT_DRE_RESULT1-VLR_ACM.
        COLLECT IT_CONTAS_SOLTAS.
      ENDIF.
    ENDLOOP.

    PERFORM MOSTRA_TEXTO_P USING text-086 3 1. "'Verif. Vinculos na Est. Demons.'

    LOOP AT IT_DRE_RESULT2.
      CLEAR: IT_CONTAS_SALDO.
      IT_CONTAS_SALDO-SAKNR    = IT_DRE_RESULT2-SAKNR.
      IT_CONTAS_SALDO-VALOR_02 = IT_DRE_RESULT2-VLR_ACM.
      COLLECT IT_CONTAS_SALDO.

      READ TABLE IT_SKA1 WITH KEY SAKNR = IT_DRE_RESULT2-SAKNR.
      IF SY-SUBRC IS INITIAL AND
        ( IT_SKA1-KTOKS EQ 'YB01' OR
          IT_SKA1-KTOKS EQ 'YB02' OR
          IT_SKA1-KTOKS EQ 'YB03' OR
          IT_SKA1-KTOKS EQ 'YB04' ).
        CONTINUE.
      ENDIF.

      READ TABLE IT_1103_TOTAIS WITH KEY SAKNR = IT_DRE_RESULT2-SAKNR.
      IF SY-SUBRC IS NOT INITIAL.
        CLEAR: IT_CONTAS_SOLTAS.
        IT_CONTAS_SOLTAS-SAKNR = IT_DRE_RESULT2-SAKNR.
        READ TABLE IT_T001 WITH KEY BUKRS = P_BUKRS BINARY SEARCH.
        READ TABLE IT_SKAT WITH KEY KTOPL = IT_T001-KTOPL SAKNR = IT_DRE_RESULT2-SAKNR BINARY SEARCH.
        IT_CONTAS_SOLTAS-TEXTO    = IT_SKAT-TXT50.
        IT_CONTAS_SOLTAS-VALOR_02 = IT_DRE_RESULT2-VLR_ACM.
        COLLECT IT_CONTAS_SOLTAS.
      ENDIF.
    ENDLOOP.

    PERFORM MOSTRA_TEXTO_P USING text-086 3 2.

    LOOP AT IT_DRE_RESULT3.
      CLEAR: IT_CONTAS_SALDO.
      IT_CONTAS_SALDO-SAKNR    = IT_DRE_RESULT3-SAKNR.
      IT_CONTAS_SALDO-VALOR_03 = IT_DRE_RESULT3-VLR_ACM.
      COLLECT IT_CONTAS_SALDO.

      READ TABLE IT_SKA1 WITH KEY SAKNR = IT_DRE_RESULT3-SAKNR.
      IF SY-SUBRC IS INITIAL AND
        ( IT_SKA1-KTOKS EQ 'YB01' OR
          IT_SKA1-KTOKS EQ 'YB02' OR
          IT_SKA1-KTOKS EQ 'YB03' OR
          IT_SKA1-KTOKS EQ 'YB04' ).
        CONTINUE.
      ENDIF.

      READ TABLE IT_1103_TOTAIS WITH KEY SAKNR = IT_DRE_RESULT3-SAKNR.
      IF SY-SUBRC IS NOT INITIAL.
        CLEAR: IT_CONTAS_SOLTAS.
        IT_CONTAS_SOLTAS-SAKNR = IT_DRE_RESULT3-SAKNR.
        READ TABLE IT_T001 WITH KEY BUKRS = P_BUKRS BINARY SEARCH.
        READ TABLE IT_SKAT WITH KEY KTOPL = IT_T001-KTOPL SAKNR = IT_DRE_RESULT3-SAKNR BINARY SEARCH.
        IT_CONTAS_SOLTAS-TEXTO    = IT_SKAT-TXT50.
        IT_CONTAS_SOLTAS-VALOR_03 = IT_DRE_RESULT3-VLR_ACM.
        COLLECT IT_CONTAS_SOLTAS.
      ENDIF.
    ENDLOOP.

    DELETE IT_CONTAS_SOLTAS WHERE VALOR_01 EQ 0 AND VALOR_02 EQ 0 AND VALOR_03 EQ 0.

    PERFORM MOSTRA_TEXTO_P USING text-086 3 3. "'Verif. Vinculos na Est. Demons.'

    PERFORM MOSTRA_TEXTO USING text-087. "'Verif. Contas Com Saldo não Vinculado'.

    LOOP AT IT_CONTAS_SALDO.
      IT_CONTAS_SALDO-VALOR_01 = 0.
      IT_CONTAS_SALDO-VALOR_02 = 0.
      IT_CONTAS_SALDO-VALOR_03 = 0.
      LOOP AT IT_1103_TOTAIS WHERE SAKNR EQ IT_CONTAS_SALDO-SAKNR.
        IT_CONTAS_SALDO-VALOR_01 = IT_CONTAS_SALDO-VALOR_01 + IT_1103_TOTAIS-VALOR_01 * -1.
        IT_CONTAS_SALDO-VALOR_02 = IT_CONTAS_SALDO-VALOR_02 + IT_1103_TOTAIS-VALOR_02 * -1.
        IT_CONTAS_SALDO-VALOR_03 = IT_CONTAS_SALDO-VALOR_03 + IT_1103_TOTAIS-VALOR_03 * -1.
      ENDLOOP.
      COLLECT IT_CONTAS_SALDO.
    ENDLOOP.
    DELETE IT_CONTAS_SALDO WHERE VALOR_01 EQ 0 AND VALOR_02 EQ 0 AND VALOR_03 EQ 0.

  ENDIF.

ENDFORM.                    " GERAR_RELATORIO_TREE_DRE

*&---------------------------------------------------------------------*
*&      Form  TOTALIZA_DRE_CONTA_RAZAO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_ZGLT049  text
*----------------------------------------------------------------------*
FORM TOTALIZA_DRE_CONTA_RAZAO TABLES IT_DRE_RESULT1 STRUCTURE ZGL030_EST_D
                                     IT_DRE_RESULT2 STRUCTURE ZGL030_EST_D
                                     IT_DRE_RESULT3 STRUCTURE ZGL030_EST_D
                                     IT_ZGLT049C    STRUCTURE ZGLT049CN
                                     IT_ZGLT049L    STRUCTURE ZGLT049LN
                                     IT_ZGLT049M    STRUCTURE ZGLT049MN
                                     IT_DRE_CC      STRUCTURE ZGL015_DRE_EST04
                                     IT_DRE_LL      STRUCTURE ZGL015_DRE_EST05
                                     IT_DRE_MM      STRUCTURE ZGL015_DRE_EST06

                               USING P_ZGLT049 TYPE ZGLT049
                                     VG_MONAT  TYPE MONAT
                                     CK_CUSTO
                                     CK_LUCRO
                                     CK_MERCA.

  DATA: REFE1          TYPE ZWRBTR_DRE,
        REFE2          TYPE ZWRBTR_DRE,
        REFE3          TYPE ZWRBTR_DRE,
        CK_CONTINUA(1),
        CK_OBJETO(1),
        WA_ZGLT041     TYPE ZGLT041,
        WA_DRE_RESULT1 TYPE ZGL030_EST_D.

  LOOP AT IT_ZGLT041 INTO WA_ZGLT041
                    WHERE COD_CLAS_BAL  EQ P_ZGLT049-COD_CLAS_BAL
                      AND COD_CLAS_NOT2 EQ P_ZGLT049-COD_CLAS_NOT.

    CK_OBJETO = ABAP_FALSE.

    "Verificar se a conta da nota que possui classificação de objetos possui objeto
    "configurado na DRE
    IF CK_CUSTO EQ ABAP_TRUE OR CK_LUCRO EQ ABAP_TRUE OR CK_MERCA EQ ABAP_TRUE.

      READ TABLE IT_DRE_CC WITH KEY SAKNR = WA_ZGLT041-SAKNR BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        CK_OBJETO = ABAP_TRUE.
      ENDIF.

      READ TABLE IT_DRE_LL WITH KEY SAKNR = WA_ZGLT041-SAKNR BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        CK_OBJETO = ABAP_TRUE.
      ENDIF.

      READ TABLE IT_DRE_MM WITH KEY SAKNR = WA_ZGLT041-SAKNR BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        CK_OBJETO = ABAP_TRUE.
      ENDIF.

      "Na consolição pode existir configurações diferentes de objetos de custo
      "se voltar uma conta que possua objeto parametrizado, porem não tem objeto no retorno
      "da call function é pq em uma das empresas não tem objeto e esta conta deve ser entendida
      "como sem objeto
*      IF ( CK_OBJETO EQ ABAP_TRUE AND P_CONSO IS NOT INITIAL ).
*        READ TABLE IT_DRE_RESULT1 INTO WA_DRE_RESULT1 WITH KEY SAKNR = WA_ZGLT041-SAKNR.
*        IF SY-SUBRC IS INITIAL.
*          IF ( WA_DRE_RESULT1-KOSTL IS INITIAL ) AND
*             ( WA_DRE_RESULT1-KOSAR IS INITIAL ) AND
*             ( WA_DRE_RESULT1-PRCTR IS INITIAL ) AND
*             ( WA_DRE_RESULT1-MATKL IS INITIAL ).
*            CK_OBJETO = ABAP_FALSE.
*          ENDIF.
*        ENDIF.
*      ENDIF.
    ENDIF.

    "Se existe objeto de custo não continuar.
    IF CK_OBJETO EQ ABAP_TRUE.
      CONTINUE.
    ENDIF.

    CLEAR: IT_1103_TOTAIS.

    IT_1103_TOTAIS-COD_CLAS_BAL = P_ZGLT049-COD_CLAS_BAL.
    IT_1103_TOTAIS-COD_CLAS_NOT = P_ZGLT049-COD_CLAS_NOT.

    IT_1103_TOTAIS-NIVEL        = IT_ZGLT047-NIVEL.
    IT_1103_TOTAIS-SAKNR        = WA_ZGLT041-SAKNR.

    "Pega Saldo Inicial do Saldo Mês Solicitado
    IT_1103_TOTAIS-VALOR_01 = 0.
    LOOP AT IT_DRE_RESULT1 WHERE SAKNR = WA_ZGLT041-SAKNR.
      PERFORM VERIFICA_OBJETOS_UTILIZADOS TABLES IT_ZGLT049C IT_ZGLT049L IT_ZGLT049M
                                           USING IT_DRE_RESULT1
                                                 IT_1103_TOTAIS
                                        CHANGING CK_CONTINUA.

      IF CK_CONTINUA EQ ABAP_TRUE.
        "Percorre Meses até Mês Selecioanado (Mês Solicitado/Mês Anterior).
        "DO VG_MONAT TIMES
        "  VARYING REFE1 FROM IT_DRE_RESULT1-VLR_REA01 NEXT IT_DRE_RESULT1-VLR_REA02.
        "  IT_1103_TOTAIS-VALOR_01 = IT_1103_TOTAIS-VALOR_01 + REFE1.
        "ENDDO.
        IT_1103_TOTAIS-VALOR_01 = IT_1103_TOTAIS-VALOR_01 + IT_DRE_RESULT1-VLR_ACM.
      ENDIF.
    ENDLOOP.

    "Pega Saldo Inicial do Saldo Mês Anterior
    IT_1103_TOTAIS-VALOR_02 = 0.
    IT_1103_TOTAIS-VALOR_03 = 0.
    LOOP AT IT_DRE_RESULT2 WHERE SAKNR = WA_ZGLT041-SAKNR.

      PERFORM VERIFICA_OBJETOS_UTILIZADOS TABLES IT_ZGLT049C IT_ZGLT049L IT_ZGLT049M
                                           USING IT_DRE_RESULT2
                                                 IT_1103_TOTAIS
                                        CHANGING CK_CONTINUA.

      IF CK_CONTINUA EQ ABAP_TRUE.
        "Percorre Meses até Mês Selecioanado (Mês Solicitado/Mês Anterior).
        "DO VG_MONAT TIMES
        "VARYING REFE2 FROM IT_DRE_RESULT2-VLR_REA01 NEXT IT_DRE_RESULT2-VLR_REA02.
        "  IT_1103_TOTAIS-VALOR_02 = IT_1103_TOTAIS-VALOR_02 + REFE2.
        "ENDDO.
        IT_1103_TOTAIS-VALOR_02 = IT_1103_TOTAIS-VALOR_02 + IT_DRE_RESULT2-VLR_ACM.
        "Percorre Meses até Ultimo Mês do Periodo Anterior.
        "DO 12 TIMES
        "  VARYING REFE3 FROM IT_DRE_RESULT2-VLR_REA01 NEXT IT_DRE_RESULT2-VLR_REA02.
        "  IT_1103_TOTAIS-VALOR_03 = IT_1103_TOTAIS-VALOR_03 + REFE3.
        "ENDDO.
      ENDIF.

    ENDLOOP.

    LOOP AT IT_DRE_RESULT3 WHERE SAKNR = WA_ZGLT041-SAKNR.

      PERFORM VERIFICA_OBJETOS_UTILIZADOS TABLES IT_ZGLT049C IT_ZGLT049L IT_ZGLT049M
                                           USING IT_DRE_RESULT3
                                                 IT_1103_TOTAIS
                                        CHANGING CK_CONTINUA.

      IF CK_CONTINUA EQ ABAP_TRUE.
        IT_1103_TOTAIS-VALOR_03 = IT_1103_TOTAIS-VALOR_03 + IT_DRE_RESULT3-VLR_ACM.
      ENDIF.

    ENDLOOP.

    IF IT_1103_TOTAIS-VALOR_01 NE 0
    OR IT_1103_TOTAIS-VALOR_02 NE 0
    OR IT_1103_TOTAIS-VALOR_03 NE 0.
      COLLECT IT_1103_TOTAIS.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " TOTALIZA_DRE_CONTA_RAZAO

*&---------------------------------------------------------------------*
*&      Form  TOTALIZA_DRE_GRUPO_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM TOTALIZA_DRE_GRUPO_MATERIAL  TABLES   IT_DRE_RESULT1 STRUCTURE ZGL030_EST_D
                                           IT_DRE_RESULT2 STRUCTURE ZGL030_EST_D
                                           IT_DRE_RESULT3 STRUCTURE ZGL030_EST_D
                                  USING    P_ZGLT049M TYPE ZGLT049MN
                                           VG_MONAT   TYPE MONAT.

  DATA: REFE1 TYPE ZWRBTR_DRE,
        REFE2 TYPE ZWRBTR_DRE,
        REFE3 TYPE ZWRBTR_DRE.

  LOOP AT IT_ZGLT041 WHERE COD_CLAS_BAL  EQ P_ZGLT049M-COD_CLAS_BAL
                       AND COD_CLAS_NOT2 EQ P_ZGLT049M-COD_CLAS_NOT.
    CLEAR: IT_1103_TOTAIS.

    IT_1103_TOTAIS-COD_CLAS_BAL = P_ZGLT049M-COD_CLAS_BAL.
    IT_1103_TOTAIS-COD_CLAS_NOT = P_ZGLT049M-COD_CLAS_NOT.
    IT_1103_TOTAIS-NIVEL        = IT_ZGLT047-NIVEL.
    IT_1103_TOTAIS-SAKNR        = IT_ZGLT041-SAKNR.

    "Pega Saldo Inicial do Saldo Mês Solicitado
    IT_1103_TOTAIS-VALOR_01 = 0.
    LOOP AT IT_DRE_RESULT1 WHERE SAKNR EQ IT_ZGLT041-SAKNR
                             AND MATKL EQ P_ZGLT049M-MATKL.
      "Percorre Meses até Mês Selecioanado (Mês Solicitado/Mês Anterior).
      "DO VG_MONAT TIMES
      "  VARYING REFE1 FROM IT_DRE_RESULT1-VLR_REA01 NEXT IT_DRE_RESULT1-VLR_REA02.
      "  IT_1103_TOTAIS-VALOR_01 = IT_1103_TOTAIS-VALOR_01 + REFE1.
      "ENDDO.
      IT_1103_TOTAIS-VALOR_01 = IT_1103_TOTAIS-VALOR_01 + IT_DRE_RESULT1-VLR_ACM.
    ENDLOOP.

    "Pega Saldo Inicial do Saldo Mês Anterior
    IT_1103_TOTAIS-VALOR_02 = 0.
    IT_1103_TOTAIS-VALOR_03 = 0.
    LOOP AT IT_DRE_RESULT2 WHERE SAKNR EQ IT_ZGLT041-SAKNR
                             AND MATKL EQ P_ZGLT049M-MATKL.

      "Percorre Meses até Mês Selecioanado (Mês Solicitado/Mês Anterior).
      "DO VG_MONAT TIMES
      "VARYING REFE2 FROM IT_DRE_RESULT2-VLR_REA01 NEXT IT_DRE_RESULT2-VLR_REA02.
      "  IT_1103_TOTAIS-VALOR_02 = IT_1103_TOTAIS-VALOR_02 + REFE2.
      "ENDDO.
      IT_1103_TOTAIS-VALOR_02 = IT_1103_TOTAIS-VALOR_02 + IT_DRE_RESULT2-VLR_ACM.

      "Percorre Meses até Ultimo Mês do Periodo Anterior.
      "DO 12 TIMES
      "  VARYING REFE3 FROM IT_DRE_RESULT2-VLR_REA01 NEXT IT_DRE_RESULT2-VLR_REA02.
      "  IT_1103_TOTAIS-VALOR_03 = IT_1103_TOTAIS-VALOR_03 + REFE3.
      "ENDDO.

    ENDLOOP.

    LOOP AT IT_DRE_RESULT3 WHERE SAKNR EQ IT_ZGLT041-SAKNR
                             AND MATKL EQ P_ZGLT049M-MATKL.

      IT_1103_TOTAIS-VALOR_03 = IT_1103_TOTAIS-VALOR_03 + IT_DRE_RESULT3-VLR_ACM.

    ENDLOOP.

    COLLECT IT_1103_TOTAIS.
  ENDLOOP.

ENDFORM.                    " TOTALIZA_DRE_GRUPO_MATERIAL

*&---------------------------------------------------------------------*
*&      Form  TOTALIZA_DRE_CENTRO_LUCRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM TOTALIZA_DRE_CENTRO_LUCRO  TABLES IT_DRE_RESULT1 STRUCTURE ZGL030_EST_D
                                       IT_DRE_RESULT2 STRUCTURE ZGL030_EST_D
                                       IT_DRE_RESULT3 STRUCTURE ZGL030_EST_D
                                 USING P_ZGLT049L TYPE ZGLT049LN
                                       VG_MONAT   TYPE MONAT.

  DATA: REFE1 TYPE ZWRBTR_DRE,
        REFE2 TYPE ZWRBTR_DRE,
        REFE3 TYPE ZWRBTR_DRE.

  LOOP AT IT_ZGLT041 WHERE COD_CLAS_BAL  EQ P_ZGLT049L-COD_CLAS_BAL
                       AND COD_CLAS_NOT2 EQ P_ZGLT049L-COD_CLAS_NOT.
    CLEAR: IT_1103_TOTAIS.

    IT_1103_TOTAIS-COD_CLAS_BAL = P_ZGLT049L-COD_CLAS_BAL.
    IT_1103_TOTAIS-COD_CLAS_NOT = P_ZGLT049L-COD_CLAS_NOT.
    IT_1103_TOTAIS-NIVEL        = IT_ZGLT047-NIVEL.
    IT_1103_TOTAIS-SAKNR        = IT_ZGLT041-SAKNR.

    "Pega Saldo Inicial do Saldo Mês Solicitado
    IT_1103_TOTAIS-VALOR_01 = 0.
    LOOP AT IT_DRE_RESULT1 WHERE SAKNR EQ IT_ZGLT041-SAKNR
                             AND PRCTR EQ P_ZGLT049L-PRCTR.
      "Percorre Meses até Mês Selecioanado (Mês Solicitado/Mês Anterior).
      "DO VG_MONAT TIMES
      "  VARYING REFE1 FROM IT_DRE_RESULT1-VLR_REA01 NEXT IT_DRE_RESULT1-VLR_REA02.
      "  IT_1103_TOTAIS-VALOR_01 = IT_1103_TOTAIS-VALOR_01 + REFE1.
      "ENDDO.
      IT_1103_TOTAIS-VALOR_01 = IT_1103_TOTAIS-VALOR_01 + IT_DRE_RESULT1-VLR_ACM.
    ENDLOOP.

    "Pega Saldo Inicial do Saldo Mês Anterior
    IT_1103_TOTAIS-VALOR_02 = 0.
    IT_1103_TOTAIS-VALOR_03 = 0.
    LOOP AT IT_DRE_RESULT2 WHERE SAKNR EQ IT_ZGLT041-SAKNR
                             AND PRCTR EQ P_ZGLT049L-PRCTR.
      "Percorre Meses até Mês Selecioanado (Mês Solicitado/Mês Anterior).
      "DO VG_MONAT TIMES
      "VARYING REFE2 FROM IT_DRE_RESULT2-VLR_REA01 NEXT IT_DRE_RESULT2-VLR_REA02.
      "  IT_1103_TOTAIS-VALOR_02 = IT_1103_TOTAIS-VALOR_02 + REFE2.
      "ENDDO.

      IT_1103_TOTAIS-VALOR_02 = IT_1103_TOTAIS-VALOR_02 + IT_DRE_RESULT2-VLR_ACM.

      "Percorre Meses até Ultimo Mês do Periodo Anterior.
      "DO 12 TIMES
      "  VARYING REFE3 FROM IT_DRE_RESULT2-VLR_REA01 NEXT IT_DRE_RESULT2-VLR_REA02.
      "  IT_1103_TOTAIS-VALOR_03 = IT_1103_TOTAIS-VALOR_03 + REFE3.
      "ENDDO.
    ENDLOOP.

    LOOP AT IT_DRE_RESULT3 WHERE SAKNR EQ IT_ZGLT041-SAKNR
                             AND PRCTR EQ P_ZGLT049L-PRCTR.

      IT_1103_TOTAIS-VALOR_03 = IT_1103_TOTAIS-VALOR_03 + IT_DRE_RESULT3-VLR_ACM.

    ENDLOOP.

    COLLECT IT_1103_TOTAIS.
  ENDLOOP.

ENDFORM.                    " TOTALIZA_DRE_CENTRO_LUCRO

*&---------------------------------------------------------------------*
*&      Form  TOTALIZA_DRE_TIPO_CUSTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM TOTALIZA_DRE_TIPO_CUSTO  TABLES IT_DRE_RESULT1 STRUCTURE ZGL030_EST_D
                                     IT_DRE_RESULT2 STRUCTURE ZGL030_EST_D
                                     IT_DRE_RESULT3 STRUCTURE ZGL030_EST_D
                               USING P_ZGLT049C TYPE ZGLT049CN
                                     VG_MONAT   TYPE MONAT.

  DATA: REFE1 TYPE ZWRBTR_DRE,
        REFE2 TYPE ZWRBTR_DRE,
        REFE3 TYPE ZWRBTR_DRE.

  LOOP AT IT_ZGLT041 WHERE COD_CLAS_BAL  EQ P_ZGLT049C-COD_CLAS_BAL
                       AND COD_CLAS_NOT2 EQ P_ZGLT049C-COD_CLAS_NOT.
    CLEAR: IT_1103_TOTAIS.

    IT_1103_TOTAIS-COD_CLAS_BAL = P_ZGLT049C-COD_CLAS_BAL.
    IT_1103_TOTAIS-COD_CLAS_NOT = P_ZGLT049C-COD_CLAS_NOT.
    IT_1103_TOTAIS-NIVEL        = IT_ZGLT047-NIVEL.
    IT_1103_TOTAIS-SAKNR        = IT_ZGLT041-SAKNR.

    "Pega Saldo Inicial do Saldo Mês Solicitado
    IT_1103_TOTAIS-VALOR_01 = 0.
    LOOP AT IT_DRE_RESULT1 WHERE SAKNR EQ IT_ZGLT041-SAKNR
                             AND KOSAR EQ P_ZGLT049C-KOSAR.
      "Percorre Meses até Mês Selecioanado (Mês Solicitado/Mês Anterior).
      "DO VG_MONAT TIMES
      "  VARYING REFE1 FROM IT_DRE_RESULT1-VLR_REA01 NEXT IT_DRE_RESULT1-VLR_REA02.
      "  IT_1103_TOTAIS-VALOR_01 = IT_1103_TOTAIS-VALOR_01 + REFE1.
      "ENDDO.
      IT_1103_TOTAIS-VALOR_01 = IT_1103_TOTAIS-VALOR_01 + IT_DRE_RESULT1-VLR_ACM.
    ENDLOOP.

    "Pega Saldo Inicial do Saldo Mês Anterior
    IT_1103_TOTAIS-VALOR_02 = 0.
    IT_1103_TOTAIS-VALOR_03 = 0.
    LOOP AT IT_DRE_RESULT2 WHERE SAKNR EQ IT_ZGLT041-SAKNR
                             AND KOSAR EQ P_ZGLT049C-KOSAR.
      "Percorre Meses até Mês Selecioanado (Mês Solicitado/Mês Anterior).
*      DO VG_MONAT TIMES
*      VARYING REFE2 FROM IT_DRE_RESULT2-VLR_REA01 NEXT IT_DRE_RESULT2-VLR_REA02.
*        IT_1103_TOTAIS-VALOR_02 = IT_1103_TOTAIS-VALOR_02 + REFE2.
*      ENDDO.
      IT_1103_TOTAIS-VALOR_02 = IT_1103_TOTAIS-VALOR_02 + IT_DRE_RESULT2-VLR_ACM.
      "Percorre Meses até Ultimo Mês do Periodo Anterior.
*      DO 12 TIMES
*        VARYING REFE3 FROM IT_DRE_RESULT2-VLR_REA01 NEXT IT_DRE_RESULT2-VLR_REA02.
*        IT_1103_TOTAIS-VALOR_03 = IT_1103_TOTAIS-VALOR_03 + REFE3.
*      ENDDO.
    ENDLOOP.

    LOOP AT IT_DRE_RESULT3 WHERE SAKNR EQ IT_ZGLT041-SAKNR
                             AND KOSAR EQ P_ZGLT049C-KOSAR.
      IT_1103_TOTAIS-VALOR_03 = IT_1103_TOTAIS-VALOR_03 + IT_DRE_RESULT3-VLR_ACM.
    ENDLOOP.

    COLLECT IT_1103_TOTAIS.
  ENDLOOP.

ENDFORM.                    " TOTALIZA_DRE_TIPO_CUSTO

*&---------------------------------------------------------------------*
*&      Form  VERIFICA_OBJETOS_UTILIZADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM VERIFICA_OBJETOS_UTILIZADOS  TABLES IT_ZGLT049C    STRUCTURE ZGLT049CN
                                         IT_ZGLT049L    STRUCTURE ZGLT049LN
                                         IT_ZGLT049M    STRUCTURE ZGLT049MN
                                   USING IT_DRE_RESULT1 TYPE ZGL030_EST_D
                                         P_TOTAIS       TYPE TY_1103_TOTAIS
                                CHANGING CK_CONTINUA.

  DATA: WA_ZGLT041 TYPE ZGLT041.

  CK_CONTINUA = ABAP_TRUE.


*KOSAR - Tipo de centro de custo
*PRCTR - Centro de lucro
*MATKL - Grupo de mercadorias

  IF NOT ( IT_DRE_RESULT1-KOSAR IS INITIAL AND
           IT_DRE_RESULT1-PRCTR IS INITIAL AND
           IT_DRE_RESULT1-MATKL IS INITIAL ).

    IF IT_DRE_RESULT1-KOSAR IS NOT INITIAL.
      LOOP AT IT_ZGLT041 INTO WA_ZGLT041
                         WHERE SAKNR EQ IT_DRE_RESULT1-SAKNR
                           AND COD_CLAS_BAL  NE P_TOTAIS-COD_CLAS_BAL
                           AND COD_CLAS_NOT2 NE P_TOTAIS-COD_CLAS_NOT.
        READ TABLE IT_ZGLT049C WITH KEY COD_CLAS_BAL = WA_ZGLT041-COD_CLAS_BAL
                                        COD_CLAS_NOT = WA_ZGLT041-COD_CLAS_NOT2
                                        KOSAR        = IT_DRE_RESULT1-KOSAR.
        IF SY-SUBRC IS INITIAL.
          CK_CONTINUA = ABAP_FALSE.
        ENDIF.
      ENDLOOP.
    ENDIF.

    IF IT_DRE_RESULT1-PRCTR IS NOT INITIAL AND CK_CONTINUA = ABAP_TRUE.
      LOOP AT IT_ZGLT041 INTO WA_ZGLT041
                         WHERE SAKNR EQ IT_DRE_RESULT1-SAKNR
                           AND COD_CLAS_BAL  NE P_TOTAIS-COD_CLAS_BAL
                           AND COD_CLAS_NOT2 NE P_TOTAIS-COD_CLAS_NOT.
        READ TABLE IT_ZGLT049L WITH KEY COD_CLAS_BAL = WA_ZGLT041-COD_CLAS_BAL
                                        COD_CLAS_NOT = WA_ZGLT041-COD_CLAS_NOT2
                                        PRCTR        = IT_DRE_RESULT1-PRCTR.
        IF SY-SUBRC IS INITIAL.
          CK_CONTINUA = ABAP_FALSE.
        ENDIF.
      ENDLOOP.
    ENDIF.

    IF IT_DRE_RESULT1-MATKL IS NOT INITIAL AND CK_CONTINUA = ABAP_TRUE.
      LOOP AT IT_ZGLT041 INTO WA_ZGLT041
                         WHERE SAKNR EQ IT_DRE_RESULT1-SAKNR
                           AND COD_CLAS_BAL  NE P_TOTAIS-COD_CLAS_BAL
                           AND COD_CLAS_NOT2 NE P_TOTAIS-COD_CLAS_NOT.
        READ TABLE IT_ZGLT049M WITH KEY COD_CLAS_BAL = WA_ZGLT041-COD_CLAS_BAL
                                        COD_CLAS_NOT = WA_ZGLT041-COD_CLAS_NOT2
                                        MATKL        = IT_DRE_RESULT1-MATKL.
        IF SY-SUBRC IS INITIAL.
          CK_CONTINUA = ABAP_FALSE.
        ENDIF.
      ENDLOOP.
    ENDIF.

  ENDIF.

ENDFORM.                    " VERIFICA_OBJETOS_UTILIZADOS

*&---------------------------------------------------------------------*
*&      Form  AJUSTA_TOTAIS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM AJUSTA_TOTAIS .

  DATA: TG_CONSOL_AUX TYPE SORTED TABLE OF TY_CONSOL
        WITH UNIQUE KEY BUKRS VERSN MONAT GJAHR SAKNR KOSTL PRCTR MATKL VBUND
        WITH HEADER LINE,
        WA_CONSOL_AUX TYPE TY_CONSOL.

  DATA: WT_T001 TYPE T001,
        REFE1   TYPE HSLXX12.

  SELECT SINGLE * INTO WT_T001
    FROM T001
   WHERE BUKRS EQ P_BUKRS.

  IF ( WT_T001-WAERS EQ 'PYG' ) AND ( P_WAERS EQ 'PYG' ).
    LOOP AT IT_1103_TOTAIS.
      IT_1103_TOTAIS-VALOR_01 = IT_1103_TOTAIS-VALOR_01 * 100.
      IT_1103_TOTAIS-VALOR_02 = IT_1103_TOTAIS-VALOR_02 * 100.
      IT_1103_TOTAIS-VALOR_03 = IT_1103_TOTAIS-VALOR_03 * 100.
      MODIFY IT_1103_TOTAIS INDEX SY-TABIX TRANSPORTING VALOR_01 VALOR_02 VALOR_03.
    ENDLOOP.
  ENDIF.

  CLEAR: TG_CONSOL[], TG_CONSOL_AUX[].

  LOOP AT IT_REMOVIDO_CONS.

    IF IT_REMOVIDO_CONS-RYEAR EQ P_GJAHR.
      CLEAR: WA_CONSOL_AUX.
      WA_CONSOL_AUX-BUKRS      = IT_REMOVIDO_CONS-RBUKRS.
      WA_CONSOL_AUX-MONAT      = P_MONAT.
      WA_CONSOL_AUX-GJAHR      = IT_REMOVIDO_CONS-RYEAR.
      WA_CONSOL_AUX-SAKNR      = IT_REMOVIDO_CONS-RACCT.
      WA_CONSOL_AUX-VBUND      = IT_REMOVIDO_CONS-RASSC.
      WA_CONSOL_AUX-VLR_REA    = IT_REMOVIDO_CONS-SLVT.

      DO P_MONAT TIMES
      VARYING REFE1 FROM IT_REMOVIDO_CONS-SL01 NEXT IT_REMOVIDO_CONS-SL02.
        WA_CONSOL_AUX-VLR_REA = WA_CONSOL_AUX-VLR_REA + REFE1.
      ENDDO.

      COLLECT WA_CONSOL_AUX INTO TG_CONSOL_AUX.

    ELSE.
      CLEAR: WA_CONSOL_AUX.
      WA_CONSOL_AUX-BUKRS      = IT_REMOVIDO_CONS-RBUKRS.
      WA_CONSOL_AUX-MONAT      = P_MONAT.
      WA_CONSOL_AUX-GJAHR      = IT_REMOVIDO_CONS-RYEAR.
      WA_CONSOL_AUX-SAKNR      = IT_REMOVIDO_CONS-RACCT.
      WA_CONSOL_AUX-VBUND      = IT_REMOVIDO_CONS-RASSC.
      WA_CONSOL_AUX-VLR_REA    = IT_REMOVIDO_CONS-SLVT.

      IF P_MONAT NE 12.
        DO P_MONAT TIMES
        VARYING REFE1 FROM IT_REMOVIDO_CONS-SL01 NEXT IT_REMOVIDO_CONS-SL02.
          WA_CONSOL_AUX-VLR_REA = WA_CONSOL_AUX-VLR_REA + REFE1.
        ENDDO.
      ELSE.
        DO 15 TIMES
        VARYING REFE1 FROM IT_REMOVIDO_CONS-SL01 NEXT IT_REMOVIDO_CONS-SL02.
          WA_CONSOL_AUX-VLR_REA = WA_CONSOL_AUX-VLR_REA + REFE1.
        ENDDO.
      ENDIF.
      COLLECT WA_CONSOL_AUX INTO TG_CONSOL_AUX.

      IF P_MONAT NE 12.
        CLEAR: WA_CONSOL_AUX.
        WA_CONSOL_AUX-BUKRS      = IT_REMOVIDO_CONS-RBUKRS.
        WA_CONSOL_AUX-MONAT      = 12.
        WA_CONSOL_AUX-GJAHR      = IT_REMOVIDO_CONS-RYEAR.
        WA_CONSOL_AUX-SAKNR      = IT_REMOVIDO_CONS-RACCT.
        WA_CONSOL_AUX-VBUND      = IT_REMOVIDO_CONS-RASSC.
        WA_CONSOL_AUX-VLR_REA    = IT_REMOVIDO_CONS-SLVT.

        DO 15 TIMES
        VARYING REFE1 FROM IT_REMOVIDO_CONS-SL01 NEXT IT_REMOVIDO_CONS-SL02.
          WA_CONSOL_AUX-VLR_REA = WA_CONSOL_AUX-VLR_REA + REFE1.
        ENDDO.
        COLLECT WA_CONSOL_AUX INTO TG_CONSOL_AUX.
      ENDIF.
    ENDIF.
  ENDLOOP.

  LOOP AT IT_REMOVIDO_CONA.
    IF IT_REMOVIDO_CONA-RYEAR EQ P_GJAHR.
      CLEAR: WA_CONSOL_AUX.
      WA_CONSOL_AUX-BUKRS      = IT_REMOVIDO_CONA-RBUKRS.
      WA_CONSOL_AUX-MONAT      = P_MONAT.
      WA_CONSOL_AUX-GJAHR      = IT_REMOVIDO_CONA-RYEAR.
      WA_CONSOL_AUX-SAKNR      = IT_REMOVIDO_CONA-RACCT.
      WA_CONSOL_AUX-VBUND      = IT_REMOVIDO_CONA-RASSC.
      WA_CONSOL_AUX-VLR_REA    = IT_REMOVIDO_CONA-SLVT.

      DO P_MONAT TIMES
      VARYING REFE1 FROM IT_REMOVIDO_CONA-SL01 NEXT IT_REMOVIDO_CONA-SL02.
        WA_CONSOL_AUX-VLR_REA = WA_CONSOL_AUX-VLR_REA + REFE1.
      ENDDO.

      COLLECT WA_CONSOL_AUX INTO TG_CONSOL_AUX.

    ELSE.
      CLEAR: WA_CONSOL_AUX.
      WA_CONSOL_AUX-BUKRS      = IT_REMOVIDO_CONA-RBUKRS.
      WA_CONSOL_AUX-MONAT      = P_MONAT.
      WA_CONSOL_AUX-GJAHR      = IT_REMOVIDO_CONA-RYEAR.
      WA_CONSOL_AUX-SAKNR      = IT_REMOVIDO_CONA-RACCT.
      WA_CONSOL_AUX-VBUND      = IT_REMOVIDO_CONA-RASSC.
      WA_CONSOL_AUX-VLR_REA    = IT_REMOVIDO_CONA-SLVT.

      IF P_MONAT NE 12.
        DO P_MONAT TIMES
        VARYING REFE1 FROM IT_REMOVIDO_CONA-SL01 NEXT IT_REMOVIDO_CONA-SL02.
          WA_CONSOL_AUX-VLR_REA = WA_CONSOL_AUX-VLR_REA + REFE1.
        ENDDO.
      ELSE.
        DO 15 TIMES
        VARYING REFE1 FROM IT_REMOVIDO_CONA-SL01 NEXT IT_REMOVIDO_CONA-SL02.
          WA_CONSOL_AUX-VLR_REA = WA_CONSOL_AUX-VLR_REA + REFE1.
        ENDDO.
      ENDIF.
      COLLECT WA_CONSOL_AUX INTO TG_CONSOL_AUX.

      IF P_MONAT NE 12.
        CLEAR: WA_CONSOL_AUX.
        WA_CONSOL_AUX-BUKRS      = IT_REMOVIDO_CONA-RBUKRS.
        WA_CONSOL_AUX-MONAT      = 12.
        WA_CONSOL_AUX-GJAHR      = IT_REMOVIDO_CONA-RYEAR.
        WA_CONSOL_AUX-SAKNR      = IT_REMOVIDO_CONA-RACCT.
        WA_CONSOL_AUX-VBUND      = IT_REMOVIDO_CONA-RASSC.
        WA_CONSOL_AUX-VLR_REA    = IT_REMOVIDO_CONA-SLVT.

        DO 15 TIMES
        VARYING REFE1 FROM IT_REMOVIDO_CONA-SL01 NEXT IT_REMOVIDO_CONA-SL02.
          WA_CONSOL_AUX-VLR_REA = WA_CONSOL_AUX-VLR_REA + REFE1.
        ENDDO.
        COLLECT WA_CONSOL_AUX INTO TG_CONSOL_AUX.
      ENDIF.
    ENDIF.
  ENDLOOP.

  MOVE TG_CONSOL_AUX[] TO TG_CONSOL[].

ENDFORM.                    " AJUSTA_TOTAIS
