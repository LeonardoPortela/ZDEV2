*&---------------------------------------------------------------------*
*& Report  ZLESR0090                                                  &*
*&--------------------------------------------------------------------&*
*& Projeto..: Amaggi                                                  &*
*& Autor....: Izyan Nascimento                                        &*
*& Data.....: 19/03/2015                                              &*
*& Descrição: Relatório Custo de frete                                &*
*& Transação: ZLES                                                    &*
*&--------------------------------------------------------------------&*
REPORT  ZLESR0090 MESSAGE-ID ZLES.

TYPE-POOLS VRM.
*=============================================================================*
*TABELAS                                                                      *
*=============================================================================*
TABLES: ZDE_ZLEST0112, VBAK.

DATA: GF_AUTHORIZATION_01 TYPE C, "Visualizar Quantidades
      GF_AUTHORIZATION_02 TYPE C. "Visualizar Valores

*=============================================================================*
*Estrutura                                                                    *
*=============================================================================*
*=============================================================================*
*TABELA INTERNA                                                               *
*=============================================================================*
DATA: IT_ZLEST0112     TYPE TABLE OF ZLEST0112 WITH HEADER LINE,
      IT_ZLEST0112_AUX TYPE TABLE OF ZLEST0112 WITH HEADER LINE,
      IT_MAKT          TYPE TABLE OF MAKT WITH HEADER LINE,
      IT_T023T         TYPE TABLE OF T023T WITH HEADER LINE,
      IT_T161T         TYPE TABLE OF T161T WITH HEADER LINE,
      IT_TVAKT         TYPE TABLE OF TVAKT WITH HEADER LINE,
      IT_LFA1          TYPE TABLE OF LFA1 WITH HEADER LINE,
      IT_LFA1_LC       TYPE TABLE OF LFA1 WITH HEADER LINE,
      IT_LFA1_PT       TYPE TABLE OF LFA1 WITH HEADER LINE,
      IT_KNA1          TYPE TABLE OF KNA1 WITH HEADER LINE,
      IT_KNA1_CL       TYPE TABLE OF KNA1 WITH HEADER LINE,
      IT_KNA1_TR       TYPE TABLE OF KNA1 WITH HEADER LINE,
      IT_T001W         TYPE TABLE OF T001W WITH HEADER LINE,
      IT_J_1BBRANCH    TYPE TABLE OF J_1BBRANCH WITH HEADER LINE,
      IT_SAIDA         TYPE TABLE OF ZDE_ZLEST0112.

*=============================================================================*
*WORK AREA                                                                    *
*=============================================================================*
DATA: WA_ZLEST0112 TYPE ZLEST0112,
      WA_SAIDA     TYPE ZDE_ZLEST0112.

*=============================================================================*
*WORK AREA  TELA                                                              *
*=============================================================================*
DATA: WA_CONT   TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      WA_ALV    TYPE REF TO CL_GUI_ALV_GRID,
      WA_LAYOUT TYPE LVC_S_LAYO.

DATA: DG_DYNDOC_ID TYPE REF TO CL_DD_DOCUMENT,
      WG_POS       TYPE I.

DATA: BEGIN OF GRAPHIC_TABLE OCCURS 0,
        LINE(255) TYPE X,
      END OF GRAPHIC_TABLE.

DATA: L_GRAPHIC_XSTR TYPE XSTRING,
      GRAPHIC_SIZE   TYPE I,
      L_GRAPHIC_CONV TYPE I,
      L_GRAPHIC_OFFS TYPE I.

*=============================================================================*
*Estrutura cabeçalho Alv                                                      *
*=============================================================================*
DATA: PICTURE          TYPE REF TO CL_GUI_PICTURE,
      GF_FIRST_DISPLAY TYPE C VALUE 'X',
      CTL_CCCONTAINER  TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
      DG_SPLITTER      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_SPLITTER_2    TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      DG_PARENT_HTML   TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_HTML1  TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_HTML2  TYPE REF TO CL_GUI_CONTAINER,
      DG_PARENT_GRID   TYPE REF TO CL_GUI_CONTAINER,
      DG_HTML_CNTRL    TYPE REF TO CL_GUI_HTML_VIEWER,
      CTL_ALV_RESUMO   TYPE REF TO CL_GUI_ALV_GRID,
      IT_SORT          TYPE LVC_T_SORT,
      WA_SORT          TYPE LVC_S_SORT,
      GS_SCROLL_COL    TYPE LVC_S_COL,
      GS_SCROLL_ROW    TYPE LVC_S_ROID,
      GS_LAYOUT        TYPE LVC_S_LAYO,
      GS_VARIANT       TYPE DISVARIANT,
      IT_EXCLUDE_FCODE TYPE UI_FUNCTIONS.

*=============================================================================*
*Estrutura Alv                                                                *
*=============================================================================*
DATA: IT_FCAT    TYPE TABLE OF LVC_S_FCAT,
      IT_LIST    TYPE VRM_VALUES,
      LIST_VALUE TYPE VRM_VALUES.

*=============================================================================*
*Tela_Seleção                                                                 *
*=============================================================================*

SELECTION-SCREEN: BEGIN OF BLOCK B0 WITH FRAME TITLE TEXT-000.
SELECT-OPTIONS: S_BUKRS     FOR ZDE_ZLEST0112-BUKRS OBLIGATORY NO-EXTENSION NO INTERVALS,
                S_WERKS     FOR ZDE_ZLEST0112-WERKS.
SELECTION-SCREEN: END OF BLOCK B0.

SELECTION-SCREEN: BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS: S_ANO       FOR ZDE_ZLEST0112-ANO NO-EXTENSION,
                S_MES       FOR ZDE_ZLEST0112-MES NO-EXTENSION,
                S_DIA       FOR ZDE_ZLEST0112-DIA NO-EXTENSION,
                S_DATA      FOR ZDE_ZLEST0112-DT_MOVIMENTO NO-EXTENSION,
                S_SAFRA     FOR ZDE_ZLEST0112-SAFRA.
SELECTION-SCREEN: END OF BLOCK B1.

SELECTION-SCREEN: BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-003.
SELECT-OPTIONS: S_C_CLIE    FOR ZDE_ZLEST0112-COD_CLIENTE,
                S_C_TRAN    FOR ZDE_ZLEST0112-COD_TRANSBORDO,
                S_C_PORT    FOR ZDE_ZLEST0112-COD_PORTO,
                S_C_COLE    FOR ZDE_ZLEST0112-COD_COLETA.
SELECTION-SCREEN: END OF BLOCK B2.

SELECTION-SCREEN: BEGIN OF BLOCK B3 WITH FRAME TITLE TEXT-004.
SELECT-OPTIONS: S_MATNR     FOR ZDE_ZLEST0112-MATNR,
                S_MATKL     FOR ZDE_ZLEST0112-MATKL.

SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: CK_01 RADIOBUTTON GROUP RAD1 DEFAULT 'X'.
SELECTION-SCREEN COMMENT 02(10) TEXT-005 FOR FIELD CK_01.
PARAMETERS: CK_02 RADIOBUTTON GROUP RAD1.
SELECTION-SCREEN COMMENT 16(14) TEXT-006 FOR FIELD CK_02.
PARAMETERS: CK_03 RADIOBUTTON GROUP RAD1.
SELECTION-SCREEN COMMENT 35(14) TEXT-007 FOR FIELD CK_03.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN: END OF BLOCK B3.

SELECTION-SCREEN: BEGIN OF BLOCK B4 WITH FRAME TITLE TEXT-008.
SELECT-OPTIONS: S_AUART    FOR ZDE_ZLEST0112-AUART,
                S_VBELN	   FOR VBAK-VBELN.
SELECTION-SCREEN: END OF BLOCK B4.

INITIALIZATION.

  GF_AUTHORIZATION_01 = ABAP_FALSE.
  GF_AUTHORIZATION_02 = ABAP_FALSE.

  "Quantidade Default para todo mundo
  "AUTHORITY-CHECK OBJECT 'ZSPL_VIEW' ID 'ZSPL_VIEW' FIELD '01'.
  "IF SY-SUBRC IS INITIAL.
  GF_AUTHORIZATION_01 = ABAP_TRUE.
  "ENDIF.

  AUTHORITY-CHECK OBJECT 'ZSPL_VIEW' ID 'ZSPL_VIEW' FIELD '02'.
  IF SY-SUBRC IS INITIAL.
    GF_AUTHORIZATION_02 = ABAP_TRUE.
  ENDIF.

AT SELECTION-SCREEN.

  DATA VTEXTO(15) TYPE C.

  AUTHORITY-CHECK OBJECT 'ZSPL_BUKRS'
    ID 'BUKRS' FIELD S_BUKRS-LOW.

  IF SY-SUBRC IS NOT INITIAL.
    SET CURSOR FIELD 'BUKRS-LOW'.
    MESSAGE E091(8B) WITH S_BUKRS-LOW.
  ENDIF.



*=============================================================================*
*Start-Of-Selection                                                           *
*=============================================================================*
START-OF-SELECTION.

  GF_FIRST_DISPLAY = 'X'.

  PERFORM: F_SELECIONAR_DADOS,               " Form selecionar dado
           F_ORGANIZAR_DADOS,                " ORGANIZAR DADOS
           F_ALV.                            "Saida ALV

  CALL SCREEN 0100.

*=============================================================================*
*Form F_SELECIONA_DADOS                                                       *
*=============================================================================*
FORM F_SELECIONAR_DADOS.

  RANGES: RG_VBELN FOR ZLEST0112-VBELN.

  DATA: IT_VBFA      TYPE TABLE OF VBFA WITH HEADER LINE,
        WA_MATKL     TYPE SHP_MATKL_RANGE,
        RG_MATKL     TYPE SHP_MATKL_RANGE_T.

  FIELD-SYMBOLS <FS_ZLEST0112> TYPE ZLEST0112.

  CLEAR: IT_ZLEST0112[],
         IT_MAKT[],
         IT_T023T[],
         IT_T161T[],
         IT_TVAKT[],
         IT_KNA1_CL[],
         IT_LFA1_LC[],
         IT_KNA1_TR[],
         IT_LFA1_PT[],
         IT_T001W[],
         IT_J_1BBRANCH[].

  CLEAR: RG_VBELN, RG_VBELN[].

  IF S_VBELN IS NOT INITIAL.
    SELECT * INTO TABLE IT_VBFA
      FROM VBFA
     WHERE VBELV IN S_VBELN
       AND VBTYP_N EQ 'J'
       AND VBTYP_V EQ 'C'.
    LOOP AT IT_VBFA.
      RG_VBELN-SIGN   = 'I'.
      RG_VBELN-OPTION = 'EQ'.
      RG_VBELN-LOW    = IT_VBFA-VBELN.
      RG_VBELN-HIGH   = IT_VBFA-VBELN.
      APPEND RG_VBELN.
    ENDLOOP.
  ENDIF.

  CLEAR: RG_MATKL.

  LOOP AT S_MATKL.
    MOVE-CORRESPONDING S_MATKL TO WA_MATKL.
    IF WA_MATKL-LOW IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = WA_MATKL-LOW
        IMPORTING
          OUTPUT = WA_MATKL-LOW.
    ENDIF.

    IF WA_MATKL-HIGH IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          INPUT  = WA_MATKL-HIGH
        IMPORTING
          OUTPUT = WA_MATKL-HIGH.
    ENDIF.
    APPEND WA_MATKL TO RG_MATKL.
  ENDLOOP.

  SELECT *
    FROM ZLEST0112
    INTO TABLE IT_ZLEST0112
   WHERE WERKS          IN S_WERKS
     AND ERDAT          IN S_DATA
     AND MATNR          IN S_MATNR
     AND COD_CLIENTE    IN S_C_CLIE
     AND COD_TRANSBORDO IN S_C_TRAN
     AND COD_PORTO      IN S_C_PORT
     AND COD_COLETA     IN S_C_COLE
     AND MATNR          IN S_MATNR
     AND MATKL          IN RG_MATKL
     AND VBELN          IN RG_VBELN
     AND SAFRA          IN S_SAFRA.

  LOOP AT IT_ZLEST0112 ASSIGNING <FS_ZLEST0112>.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        INPUT  = <FS_ZLEST0112>-MATKL
      IMPORTING
        OUTPUT = <FS_ZLEST0112>-MATKL.
  ENDLOOP.

  "Material """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  CLEAR: IT_ZLEST0112_AUX[].
  MOVE IT_ZLEST0112[]   TO IT_ZLEST0112_AUX[].
  SORT IT_ZLEST0112_AUX BY MATNR.
  DELETE ADJACENT DUPLICATES FROM IT_ZLEST0112_AUX COMPARING MATNR.
  DELETE IT_ZLEST0112_AUX WHERE MATNR EQ SPACE.
  IF IT_ZLEST0112_AUX[] IS NOT INITIAL.
    SELECT *
      INTO TABLE IT_MAKT
      FROM MAKT AS A
       FOR ALL ENTRIES IN IT_ZLEST0112_AUX
     WHERE SPRAS EQ SY-LANGU
       AND MATNR EQ IT_ZLEST0112_AUX-MATNR
       AND MATNR IN S_MATNR
       AND EXISTS ( SELECT *
                      FROM MARA AS M
                     WHERE M~MATNR EQ A~MATNR
                       AND M~MATKL IN S_MATKL ) ORDER BY PRIMARY KEY .
  ENDIF.

  "Grupo de Mercadoria """""""""""""""""""""""""""""""""""""""""""""""""""""""""
  CLEAR: IT_ZLEST0112_AUX[].
  MOVE IT_ZLEST0112[]   TO IT_ZLEST0112_AUX[].
  SORT IT_ZLEST0112_AUX BY MATKL.
  DELETE ADJACENT DUPLICATES FROM IT_ZLEST0112_AUX COMPARING MATKL.
  DELETE IT_ZLEST0112_AUX WHERE MATKL EQ SPACE.
  IF IT_ZLEST0112_AUX[] IS NOT INITIAL.
    SELECT *
      INTO TABLE IT_T023T
      FROM T023T
       FOR ALL ENTRIES IN IT_ZLEST0112_AUX
     WHERE SPRAS EQ SY-LANGU
       AND MATKL EQ IT_ZLEST0112_AUX-MATKL
       AND MATKL IN S_MATKL.
    SORT IT_T023T BY MATKL.
  ENDIF.

  "Tipo de Documento de Venda """"""""""""""""""""""""""""""""""""""""""""""""""
  CLEAR: IT_ZLEST0112_AUX[].
  MOVE IT_ZLEST0112[]   TO IT_ZLEST0112_AUX[].
  SORT IT_ZLEST0112_AUX BY AUART.
  DELETE ADJACENT DUPLICATES FROM IT_ZLEST0112_AUX COMPARING AUART.
  DELETE IT_ZLEST0112_AUX WHERE AUART EQ SPACE.
  IF IT_ZLEST0112_AUX[] IS NOT INITIAL.
    SELECT *
      INTO TABLE IT_TVAKT
      FROM TVAKT
       FOR ALL ENTRIES IN IT_ZLEST0112_AUX
     WHERE SPRAS EQ SY-LANGU
       AND AUART EQ IT_ZLEST0112_AUX-AUART
       AND AUART IN S_AUART.
    SORT IT_TVAKT BY AUART.
  ENDIF.

  "Tipo de documento de Compras """"""""""""""""""""""""""""""""""""""""""""""""
  CLEAR: IT_ZLEST0112_AUX[].
  MOVE IT_ZLEST0112[]   TO IT_ZLEST0112_AUX[].
  SORT IT_ZLEST0112_AUX BY BSART.
  DELETE ADJACENT DUPLICATES FROM IT_ZLEST0112_AUX COMPARING BSART.
  DELETE IT_ZLEST0112_AUX WHERE BSART EQ SPACE.
  IF IT_ZLEST0112_AUX[] IS NOT INITIAL.
    SELECT *
      INTO TABLE IT_T161T
      FROM T161T
       FOR ALL ENTRIES IN IT_ZLEST0112_AUX
     WHERE SPRAS EQ SY-LANGU
       AND BSART EQ IT_ZLEST0112_AUX-BSART.
    SORT IT_T161T BY BSART.
  ENDIF.

  "Cliente """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
*S_C_CLIE    FOR ZDE_ZLEST0112-COD_CLIENTE,
*IT_KNA1_CL[]
  CLEAR: IT_ZLEST0112_AUX[].
  MOVE IT_ZLEST0112[]   TO IT_ZLEST0112_AUX[].
  SORT IT_ZLEST0112_AUX BY COD_CLIENTE.
  DELETE ADJACENT DUPLICATES FROM IT_ZLEST0112_AUX COMPARING COD_CLIENTE.
  DELETE IT_ZLEST0112_AUX WHERE COD_CLIENTE EQ SPACE.
  IF IT_ZLEST0112_AUX[] IS NOT INITIAL.
    SELECT *
      INTO TABLE IT_KNA1_CL
      FROM KNA1
       FOR ALL ENTRIES IN IT_ZLEST0112_AUX
     WHERE KUNNR EQ IT_ZLEST0112_AUX-COD_CLIENTE
       AND KUNNR IN S_C_CLIE.
    SORT IT_KNA1_CL BY KUNNR.
  ENDIF.

  "Transbordo """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
*S_C_TRAN    FOR ZDE_ZLEST0112-COD_TRANSBORDO,
*IT_KNA1_TR[]
  CLEAR: IT_ZLEST0112_AUX[], IT_KNA1[].
  MOVE IT_ZLEST0112[]   TO IT_ZLEST0112_AUX[].
  SORT IT_ZLEST0112_AUX BY COD_TRANSBORDO.
  DELETE ADJACENT DUPLICATES FROM IT_ZLEST0112_AUX COMPARING COD_TRANSBORDO.
  DELETE IT_ZLEST0112_AUX WHERE COD_TRANSBORDO EQ SPACE.
  IF IT_ZLEST0112_AUX[] IS NOT INITIAL.

    SELECT *
      INTO TABLE IT_KNA1
      FROM KNA1
       FOR ALL ENTRIES IN IT_ZLEST0112_AUX
     WHERE KUNNR EQ IT_ZLEST0112_AUX-COD_TRANSBORDO
       AND KUNNR IN S_C_TRAN.

    LOOP AT IT_KNA1.
      AUTHORITY-CHECK OBJECT 'ZSPL_TRANS' ID 'ZTRANSBORD' FIELD IT_KNA1-KUNNR.
      IF SY-SUBRC IS INITIAL.
        APPEND IT_KNA1 TO IT_KNA1_TR.
      ENDIF.
    ENDLOOP.

    SORT IT_KNA1_TR BY KUNNR.
  ENDIF.

  "Local de Coleta """""""""""""""""""""""""""""""""""""""""""""""""""""""""""
*S_C_COLE    FOR ZDE_ZLEST0112-COD_COLETA.
*IT_LFA1_LC[]
  CLEAR: IT_ZLEST0112_AUX[].
  MOVE IT_ZLEST0112[]   TO IT_ZLEST0112_AUX[].
  SORT IT_ZLEST0112_AUX BY COD_COLETA.
  DELETE ADJACENT DUPLICATES FROM IT_ZLEST0112_AUX COMPARING COD_COLETA.
  DELETE IT_ZLEST0112_AUX WHERE COD_COLETA EQ SPACE.
  IF IT_ZLEST0112_AUX[] IS NOT INITIAL.
    SELECT *
      INTO TABLE IT_LFA1_LC
      FROM LFA1
       FOR ALL ENTRIES IN IT_ZLEST0112_AUX
     WHERE LIFNR EQ IT_ZLEST0112_AUX-COD_COLETA
       AND LIFNR IN S_C_COLE.
    SORT IT_LFA1_LC BY LIFNR.
  ENDIF.

  "Local de Coleta """""""""""""""""""""""""""""""""""""""""""""""""""""""""""
*S_C_PORT    FOR ZDE_ZLEST0112-COD_PORTO,
*IT_LFA1_PT[]
  CLEAR: IT_ZLEST0112_AUX[], IT_LFA1[].
  MOVE IT_ZLEST0112[]   TO IT_ZLEST0112_AUX[].
  SORT IT_ZLEST0112_AUX BY COD_PORTO.
  DELETE ADJACENT DUPLICATES FROM IT_ZLEST0112_AUX COMPARING COD_PORTO.
  DELETE IT_ZLEST0112_AUX WHERE COD_PORTO EQ SPACE.
  IF IT_ZLEST0112_AUX[] IS NOT INITIAL.

    SELECT *
      INTO TABLE IT_LFA1
      FROM LFA1
       FOR ALL ENTRIES IN IT_ZLEST0112_AUX
     WHERE LIFNR EQ IT_ZLEST0112_AUX-COD_PORTO
       AND LIFNR IN S_C_PORT.

    LOOP AT IT_LFA1.
      AUTHORITY-CHECK OBJECT 'ZSPL_PORTO' ID 'ZPORTO' FIELD IT_LFA1-LIFNR.
      IF SY-SUBRC IS INITIAL.
        APPEND IT_LFA1 TO IT_LFA1_PT.
      ENDIF.
    ENDLOOP.

    SORT IT_LFA1_PT BY LIFNR.
  ENDIF.

  "Filial Empresa """""""""""""""""""""""""""""""""""""""""""""""""""""""""""
*S_BUKRS     FOR ZDE_ZLEST0112-BUKRS,
*S_WERKS     FOR ZDE_ZLEST0112-WERKS.
*IT_T001W[]
  SELECT *
    INTO TABLE IT_T001W
    FROM T001W.

  SORT IT_T001W BY WERKS.

  "Local de Negócio """""""""""""""""""""""""""""""""""""""""""""""""""""""""
*IT_J_1BBRANCH[]
  IF IT_T001W[] IS NOT INITIAL.
    SELECT * INTO TABLE IT_J_1BBRANCH
      FROM J_1BBRANCH
       FOR ALL ENTRIES IN IT_T001W
     WHERE BRANCH EQ IT_T001W-J_1BBRANCH
       AND BUKRS  IN S_BUKRS.

    SORT IT_J_1BBRANCH BY BRANCH.
  ENDIF.

ENDFORM.                    "F_SELECIONAR_DADOS

*&---------------------------------------------------------------------*
*&      Form  ORGANIZACAO_DADOS                                        *
*&---------------------------------------------------------------------*
FORM F_ORGANIZAR_DADOS.

  CLEAR: IT_SAIDA, IT_SAIDA[].

  LOOP AT IT_ZLEST0112 INTO WA_ZLEST0112.

    CLEAR: WA_SAIDA.

    "Tipo do Produto """"""""""""""""""""""""""""""""""""""""
    SY-SUBRC = 0.
    CASE ABAP_TRUE.
      WHEN CK_02.
        IF WA_ZLEST0112-TP_TRANSGENIA NE 'SIM'.
          SY-SUBRC = 4.
        ENDIF.
      WHEN CK_03.
        IF WA_ZLEST0112-TP_TRANSGENIA NE 'SIM'.
          SY-SUBRC = 4.
        ENDIF.
    ENDCASE.
    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.

    "Material """""""""""""""""""""""""""""""""""""""""""""""
    IF WA_ZLEST0112-MATNR IS NOT INITIAL.
      READ TABLE IT_MAKT WITH KEY MATNR = WA_ZLEST0112-MATNR BINARY SEARCH.
      WA_SAIDA-MAKTX = IT_MAKT-MAKTX.
    ELSE.
      SY-SUBRC = 0.
    ENDIF.

    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.

    "Grupo de Mercadoria """""""""""""""""""""""""""""""""""""""""""""""
    IF WA_ZLEST0112-MATKL IS NOT INITIAL.
      READ TABLE IT_T023T WITH KEY MATKL = WA_ZLEST0112-MATKL BINARY SEARCH.
      WA_SAIDA-WGBEZ = IT_T023T-WGBEZ.
    ELSE.
      SY-SUBRC = 0.
    ENDIF.
    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.

    "Tipo de Documento de Vendas """""""""""""""""""""""""""""""""""""""
    IF WA_ZLEST0112-AUART IS NOT INITIAL.
      READ TABLE IT_TVAKT WITH KEY AUART = WA_ZLEST0112-AUART BINARY SEARCH.
      WA_SAIDA-DS_AUART = IT_TVAKT-BEZEI.
    ELSE.
      SY-SUBRC = 0.
    ENDIF.
    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.

    "Tipo de documento de Compras """"""""""""""""""""""""""""""""""""""
    IF WA_ZLEST0112-BSART IS NOT INITIAL.
      READ TABLE IT_T161T WITH KEY BSART = WA_ZLEST0112-BSART BINARY SEARCH.
      WA_SAIDA-DS_AUART = IT_T161T-BATXT.
    ELSE.
      SY-SUBRC = 0.
    ENDIF.
    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.

    "Cliente """"""""""""""""""""""""""""""""""""""""""""""""""""""""""
    IF WA_ZLEST0112-COD_CLIENTE IS NOT INITIAL.
      READ TABLE IT_KNA1_CL WITH KEY KUNNR = WA_ZLEST0112-COD_CLIENTE BINARY SEARCH.
      WA_SAIDA-DES_CLIENTE = IT_KNA1_CL-NAME1.
    ELSE.
      SY-SUBRC = 0.
    ENDIF.
    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.

    "Transbordo """"""""""""""""""""""""""""""""""""""""""""""""""""""""
    IF WA_ZLEST0112-COD_TRANSBORDO IS NOT INITIAL.
      READ TABLE IT_KNA1_TR WITH KEY KUNNR = WA_ZLEST0112-COD_TRANSBORDO BINARY SEARCH.
      WA_SAIDA-DES_TRANSBORDO = IT_KNA1_TR-NAME1.
    ELSE.
      SY-SUBRC = 0.
    ENDIF.
    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.

    "Local de Coleta """""""""""""""""""""""""""""""""""""""""""""""""""
    IF WA_ZLEST0112-COD_COLETA IS NOT INITIAL.
      READ TABLE IT_LFA1_LC WITH KEY LIFNR = WA_ZLEST0112-COD_COLETA BINARY SEARCH.
      WA_SAIDA-DES_COLETA = IT_LFA1_LC-NAME1.
    ELSE.
      SY-SUBRC = 0.
    ENDIF.
    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.

    "Porto """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    IF WA_ZLEST0112-COD_PORTO IS NOT INITIAL.
      READ TABLE IT_LFA1_PT WITH KEY LIFNR = WA_ZLEST0112-COD_PORTO BINARY SEARCH.
      IF IT_LFA1_PT-LZONE IS NOT INITIAL.
        WA_SAIDA-DES_PORTO = IT_LFA1_PT-LZONE.
      ELSE.
        WA_SAIDA-DES_PORTO = IT_LFA1_PT-NAME1.
      ENDIF.
    ELSE.
      SY-SUBRC = 0.
    ENDIF.
    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.

    "Local de Negócio """""""""""""""""""""""""""""""""""""""""""""""
    IF WA_ZLEST0112-WERKS IS NOT INITIAL.
      READ TABLE IT_T001W WITH KEY WERKS = WA_ZLEST0112-WERKS BINARY SEARCH.
      WA_SAIDA-DES_FILIAL = IT_T001W-NAME1.
      IF SY-SUBRC IS INITIAL.
        READ TABLE IT_J_1BBRANCH WITH KEY BRANCH = IT_T001W-J_1BBRANCH.
        WA_SAIDA-BUKRS      = IT_J_1BBRANCH-BUKRS.
      ENDIF.
    ELSE.
      SY-SUBRC = 0.
    ENDIF.
    IF SY-SUBRC IS NOT INITIAL.
      CONTINUE.
    ENDIF.

    WA_SAIDA-ANO                 = WA_ZLEST0112-ERDAT(4).
    WA_SAIDA-MES                 = WA_ZLEST0112-ERDAT+4(2).
    WA_SAIDA-DIA                 = WA_ZLEST0112-ERDAT+6(2).
    WA_SAIDA-DT_MOVIMENTO        = WA_ZLEST0112-ERDAT.
    WA_SAIDA-VBELN               = WA_ZLEST0112-VBELN.
    WA_SAIDA-MATNR               = WA_ZLEST0112-MATNR.
    WA_SAIDA-MATKL               = WA_ZLEST0112-MATKL.
    WA_SAIDA-WERKS               = WA_ZLEST0112-WERKS.
    WA_SAIDA-LFIMG               = WA_ZLEST0112-LFIMG / 1000.
    WA_SAIDA-LFIMG2              = WA_ZLEST0112-LFIMG / 1000.
    WA_SAIDA-VBELV               = WA_ZLEST0112-VBELV.
    IF WA_ZLEST0112-AUART IS NOT INITIAL.
      WA_SAIDA-AUART               = WA_ZLEST0112-AUART.
    ELSE.
      WA_SAIDA-AUART               = WA_ZLEST0112-BSART.
    ENDIF.
    WA_SAIDA-INCO1               = WA_ZLEST0112-INCO1.
    WA_SAIDA-COD_CLIENTE         = WA_ZLEST0112-COD_CLIENTE.
    WA_SAIDA-COD_TRANSBORDO      = WA_ZLEST0112-COD_TRANSBORDO.
    WA_SAIDA-COD_PORTO           = WA_ZLEST0112-COD_PORTO.
    WA_SAIDA-NR_ROMANEIO         = WA_ZLEST0112-NR_ROMANEIO.
    WA_SAIDA-CENTRO_VIRTUAL      = WA_ZLEST0112-CENTRO_VIRTUAL.
    WA_SAIDA-NOME_DESTINO        = WA_ZLEST0112-NOME_DESTINO.
    WA_SAIDA-SAFRA               = WA_ZLEST0112-SAFRA.

    CASE WA_ZLEST0112-TP_TRANSGENIA.
      WHEN 'SIM'.
        WA_SAIDA-TP_TRANSGENIA       = 'R-RR'.
      WHEN 'NAO'.
        WA_SAIDA-TP_TRANSGENIA       = 'C-Convencional'.
    ENDCASE.

    WA_SAIDA-VLR_FRETE_BRL       = WA_ZLEST0112-VLR_FRETE_BRL.
    WA_SAIDA-VLR_FRETE_US        = WA_ZLEST0112-VLR_FRETE_US.
    WA_SAIDA-PRECO_FERRO_BRL     = WA_ZLEST0112-PRECO_FERRO_BRL.
    WA_SAIDA-PRECO_FERRO_US      = WA_ZLEST0112-PRECO_FERRO_US.
    WA_SAIDA-PRECO_AQUA_BRL      = WA_ZLEST0112-PRECO_AQUA_BRL.
    WA_SAIDA-PRECO_AQUA_US       = WA_ZLEST0112-PRECO_AQUA_US .
    WA_SAIDA-COD_COLETA          = WA_ZLEST0112-COD_COLETA.
    WA_SAIDA-VLR_PED_R           = WA_ZLEST0112-VLR_PED_R.
    WA_SAIDA-VLR_PED_US          = WA_ZLEST0112-VLR_PED_US.
    WA_SAIDA-VLR_EST_R           = WA_ZLEST0112-VLR_EST_R.
    WA_SAIDA-VLR_EST_US          = WA_ZLEST0112-VLR_EST_US.
    APPEND WA_SAIDA TO IT_SAIDA.
  ENDLOOP.

  LOOP AT S_ANO.
    CASE S_ANO-OPTION.
      WHEN 'EQ'.
        DELETE IT_SAIDA WHERE ANO NE S_ANO-LOW.
      WHEN 'BT'.
        DELETE IT_SAIDA WHERE ANO NOT BETWEEN S_ANO-LOW AND S_ANO-HIGH.
    ENDCASE.
  ENDLOOP.

  LOOP AT S_MES.
    CASE S_MES-OPTION.
      WHEN 'EQ'.
        DELETE IT_SAIDA WHERE MES NE S_MES-LOW.
      WHEN 'BT'.
        DELETE IT_SAIDA WHERE MES NOT BETWEEN S_MES-LOW AND S_MES-HIGH.
    ENDCASE.
  ENDLOOP.

  LOOP AT S_DIA.
    CASE S_DIA-OPTION.
      WHEN 'EQ'.
        DELETE IT_SAIDA WHERE DIA NE S_DIA-LOW.
      WHEN 'BT'.
        DELETE IT_SAIDA WHERE DIA NOT BETWEEN S_DIA-LOW AND S_DIA-HIGH.
    ENDCASE.
  ENDLOOP.

ENDFORM.                    "F_ORGANIZAR_DADOS

*=============================================================================*
*Form F_Alv                                                                   *
*=============================================================================*
FORM F_ALV.

  DATA: LC_COL_POS TYPE LVC_COLPOS.

  FIELD-SYMBOLS: <FS_CAT> TYPE LVC_S_FCAT.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZDE_ZLEST0112'
    CHANGING
      CT_FIELDCAT      = IT_FCAT.

  IF GF_AUTHORIZATION_01 EQ ABAP_FALSE.
    DELETE IT_FCAT WHERE DATATYPE EQ 'QUAN'.
  ENDIF.

  IF GF_AUTHORIZATION_02 EQ ABAP_FALSE.
    DELETE IT_FCAT WHERE DATATYPE EQ 'CURR'.
  ENDIF.

  LOOP AT IT_FCAT ASSIGNING <FS_CAT>.
    <FS_CAT>-COL_POS = LC_COL_POS.
    <FS_CAT>-TABNAME   = 'ZDE_ZLEST0112'.
    <FS_CAT>-FIELDNAME = <FS_CAT>-FIELDNAME.
    ADD 1 TO LC_COL_POS.
    CASE <FS_CAT>-DATATYPE.
      WHEN 'QUAN'.
        <FS_CAT>-DO_SUM    = ABAP_TRUE.
        <FS_CAT>-OUTPUTLEN = 15.
      WHEN 'CURR'.
        <FS_CAT>-DO_SUM    = ABAP_TRUE.
        <FS_CAT>-OUTPUTLEN = 15.
    ENDCASE.

    IF <FS_CAT>-FIELDNAME EQ 'LFIMG2'.
      <FS_CAT>-DO_SUM    = ABAP_TRUE.
      <FS_CAT>-OUTPUTLEN = 15.
    ENDIF.
  ENDLOOP.

ENDFORM.                    "F_ALV

*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FILL_GS_VARIANT .

  GS_VARIANT-REPORT      = SY-REPID.
  GS_VARIANT-HANDLE      = '0100'.
  GS_VARIANT-LOG_GROUP   = SPACE.
  GS_VARIANT-USERNAME    = SPACE.
  GS_VARIANT-VARIANT     = SPACE.
  GS_VARIANT-TEXT        = SPACE.
  GS_VARIANT-DEPENDVARS  = SPACE.

ENDFORM.                    " FILL_GS_VARIANT

"&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.
  SET PF-STATUS '0100'.
  SET TITLEBAR  '0100'.

ENDMODULE.                 " STATUS_0100  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  PAI_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE PAI_0100 INPUT.

ENDMODULE.                 " PAI_0100  INPUT

*&---------------------------------------------------------------------*
*&      Form  CONTAINER_HTML
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM CONTAINER_HTML .

  DATA : DL_LENGTH        TYPE I,                           " Length
         DL_BACKGROUND_ID TYPE SDYDO_KEY VALUE SPACE. " Background_id

  IF DG_HTML_CNTRL IS INITIAL.
    CREATE OBJECT DG_HTML_CNTRL
      EXPORTING
        PARENT = DG_PARENT_HTML1.
  ENDIF.

  CALL FUNCTION 'REUSE_ALV_GRID_COMMENTARY_SET'
    EXPORTING
      DOCUMENT = DG_DYNDOC_ID
      BOTTOM   = SPACE
    IMPORTING
      LENGTH   = DL_LENGTH.

  CALL METHOD DG_DYNDOC_ID->MERGE_DOCUMENT.

  CALL METHOD DG_DYNDOC_ID->SET_DOCUMENT_BACKGROUND
    EXPORTING
      PICTURE_ID = DL_BACKGROUND_ID.

  DG_DYNDOC_ID->HTML_CONTROL = DG_HTML_CNTRL.

  CALL METHOD DG_DYNDOC_ID->DISPLAY_DOCUMENT
    EXPORTING
      REUSE_CONTROL      = 'X'
      PARENT             = DG_PARENT_HTML1
    EXCEPTIONS
      HTML_DISPLAY_ERROR = 1.

ENDFORM.                    " CONTAINER_HTML

*&---------------------------------------------------------------------*
*&      Form  ADD_TEXT
*&---------------------------------------------------------------------*
*       To add Text
*----------------------------------------------------------------------*
FORM ADD_TEXT USING P_TEXT  TYPE SDYDO_TEXT_ELEMENT
                    P_STYLE TYPE SDYDO_ATTRIBUTE
                    P_SIZE  TYPE SDYDO_ATTRIBUTE
                    P_COLOR TYPE SDYDO_ATTRIBUTE.

  CALL METHOD DG_DYNDOC_ID->ADD_TEXT
    EXPORTING
      TEXT          = P_TEXT
      SAP_STYLE     = P_STYLE
      SAP_FONTSIZE  = P_SIZE
      SAP_COLOR     = P_COLOR
      SAP_FONTSTYLE = CL_DD_AREA=>SANS_SERIF.

ENDFORM.                    " ADD_TEXT


*&---------------------------------------------------------------------*
*&      Module  CREATE_OBJECTS  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE CREATE_OBJECTS OUTPUT.
  DATA: URL(255) TYPE C.

  IF GF_FIRST_DISPLAY = 'X'.

    CREATE OBJECT CTL_CCCONTAINER
      EXPORTING
        CONTAINER_NAME = 'TELA_0100'.

    CREATE OBJECT DG_DYNDOC_ID
      EXPORTING
        STYLE = 'ALV_GRID'.

    CREATE OBJECT DG_SPLITTER
      EXPORTING
        PARENT  = CTL_CCCONTAINER
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_HTML.

    CREATE OBJECT DG_SPLITTER_2
      EXPORTING
        PARENT  = DG_PARENT_HTML
        ROWS    = 1
        COLUMNS = 2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_HTML1.

    CALL METHOD DG_SPLITTER_2->SET_COLUMN_WIDTH
      EXPORTING
        ID    = 1
        WIDTH = 40.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 2
      RECEIVING
        CONTAINER = DG_PARENT_HTML2.

    CREATE OBJECT PICTURE
      EXPORTING
        PARENT = DG_PARENT_HTML2.

    PERFORM F_PEGA_IMAGEM USING 'LOGO_NOVO' CHANGING URL.

    CALL METHOD PICTURE->LOAD_PICTURE_FROM_URL
      EXPORTING
        URL = URL.

    CALL METHOD PICTURE->SET_DISPLAY_MODE
      EXPORTING
        DISPLAY_MODE = PICTURE->DISPLAY_MODE_FIT_CENTER.

    CALL METHOD DG_SPLITTER->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_GRID.

    CALL METHOD DG_SPLITTER->SET_ROW_HEIGHT
      EXPORTING
        ID     = 1
        HEIGHT = 15.

    CREATE OBJECT CTL_ALV_RESUMO
      EXPORTING
        I_PARENT = DG_PARENT_GRID.

    PERFORM FILL_GS_VARIANT.

    GS_LAYOUT-ZEBRA      = 'X'.

**   Send data to ALV grid
    CALL METHOD CTL_ALV_RESUMO->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT       = WA_LAYOUT
        IS_VARIANT      = GS_VARIANT
        I_SAVE          = 'A'
      CHANGING
        IT_FIELDCATALOG = IT_FCAT
        IT_OUTTAB       = IT_SAIDA
        IT_SORT         = IT_SORT.

    PERFORM CRIA_HTML_CAB.

    CALL METHOD CTL_ALV_RESUMO->LIST_PROCESSING_EVENTS
      EXPORTING
        I_EVENT_NAME = 'TOP_OF_PAGE'
        I_DYNDOC_ID  = DG_DYNDOC_ID.

    CLEAR: GF_FIRST_DISPLAY.

  ENDIF.

  CALL METHOD CTL_ALV_RESUMO->REFRESH_TABLE_DISPLAY.

  CALL METHOD CTL_ALV_RESUMO->SET_SCROLL_INFO_VIA_ID
    EXPORTING
      IS_COL_INFO = GS_SCROLL_COL
      IS_ROW_NO   = GS_SCROLL_ROW.

ENDMODULE.                 " CREATE_OBJECTS  OUTPUT

*&---------------------------------------------------------------------*
*&      Form  CRIA_HTML_CAB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM CRIA_HTML_CAB .

  DATA: COLUMN                  TYPE REF TO CL_DD_AREA,
        COLUMN_1                TYPE REF TO CL_DD_AREA,
        COLUMN_2                TYPE REF TO CL_DD_AREA,
        TABLE_ELEMENT           TYPE REF TO CL_DD_TABLE_ELEMENT,
        TABLE_ELEMENT2          TYPE REF TO CL_DD_TABLE_ELEMENT,
        P_TEXT                  TYPE SDYDO_TEXT_ELEMENT,
        P_TEXT_TABLE            TYPE SDYDO_TEXT_TABLE,
        P_TEXT_TABLE_C          TYPE SDYDO_TEXT_TABLE,
        SDYDO_TEXT_ELEMENT(255),
        VG_MES(2), VG_ANO(4),
        QTD                     TYPE I,
        V_TEXTO                 TYPE ZLEST0112-MATNR,
        V_TEXTO1                TYPE ZLEST0112-MATNR.

  CALL METHOD DG_DYNDOC_ID->INITIALIZE_DOCUMENT.

  CALL METHOD DG_DYNDOC_ID->ADD_TABLE
    EXPORTING
      NO_OF_COLUMNS = 1
      BORDER        = '0'
      WIDTH         = '100%'
    IMPORTING
      TABLE         = TABLE_ELEMENT.

  CALL METHOD TABLE_ELEMENT->ADD_COLUMN
    IMPORTING
      COLUMN = COLUMN.

  CALL METHOD TABLE_ELEMENT->SET_COLUMN_STYLE
    EXPORTING
      COL_NO    = 1
      SAP_ALIGN = 'CENTER'
      SAP_STYLE = CL_DD_DOCUMENT=>HEADING.

  P_TEXT = 'SPL - Relatório de Frete'.

  CALL METHOD COLUMN->ADD_TEXT
    EXPORTING
      TEXT      = P_TEXT
      SAP_STYLE = 'HEADING'.

  CALL METHOD DG_DYNDOC_ID->ADD_TABLE
    EXPORTING
      NO_OF_COLUMNS = 2
      BORDER        = '0'
      WIDTH         = '100%'
    IMPORTING
      TABLE         = TABLE_ELEMENT2.

  CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
    IMPORTING
      COLUMN = COLUMN_1.

  CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
    IMPORTING
      COLUMN = COLUMN_2.

  CALL METHOD TABLE_ELEMENT2->SET_COLUMN_STYLE
    EXPORTING
      COL_NO       = 1
      SAP_ALIGN    = 'LEFT'
      SAP_FONTSIZE = CL_DD_DOCUMENT=>MEDIUM.

  CALL METHOD TABLE_ELEMENT2->SET_COLUMN_STYLE
    EXPORTING
      COL_NO       = 2
      SAP_ALIGN    = 'LEFT'
      SAP_FONTSIZE = CL_DD_DOCUMENT=>MEDIUM.

  LOOP AT S_BUKRS.
    SDYDO_TEXT_ELEMENT = 'Empresa:'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CASE S_BUKRS-OPTION.
      WHEN 'EQ'.
        SDYDO_TEXT_ELEMENT = S_BUKRS-LOW.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
      WHEN 'BT'.
        CONCATENATE S_BUKRS-LOW '-' S_BUKRS-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
    ENDCASE.
  ENDLOOP.

  LOOP AT S_WERKS.
    SDYDO_TEXT_ELEMENT = 'Filial:'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CASE S_WERKS-OPTION.
      WHEN 'EQ'.
        SDYDO_TEXT_ELEMENT = S_WERKS-LOW.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
      WHEN 'BT'.
        CONCATENATE S_WERKS-LOW '-' S_WERKS-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
    ENDCASE.
  ENDLOOP.

  LOOP AT S_ANO.
    SDYDO_TEXT_ELEMENT = 'Ano Movimento:'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CASE S_ANO-OPTION.
      WHEN 'EQ'.
        SDYDO_TEXT_ELEMENT = S_ANO-LOW.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
      WHEN 'BT'.
        CONCATENATE S_ANO-LOW '-' S_ANO-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
    ENDCASE.
  ENDLOOP.

  LOOP AT S_MES.
    SDYDO_TEXT_ELEMENT = 'Mês Movimento:'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CASE S_MES-OPTION.
      WHEN 'EQ'.
        SDYDO_TEXT_ELEMENT = S_MES-LOW.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
      WHEN 'BT'.
        CONCATENATE S_MES-LOW '-' S_MES-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
    ENDCASE.
  ENDLOOP.

  LOOP AT S_DIA.
    SDYDO_TEXT_ELEMENT = 'Dia Movimento:'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CASE S_DIA-OPTION.
      WHEN 'EQ'.
        SDYDO_TEXT_ELEMENT = S_DIA-LOW.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
      WHEN 'BT'.
        CONCATENATE S_DIA-LOW '-' S_DIA-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
    ENDCASE.
  ENDLOOP.

  LOOP AT S_DATA.
    SDYDO_TEXT_ELEMENT = 'Data Movimento:'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CASE S_DATA-OPTION.
      WHEN 'EQ'.
        CONCATENATE S_DATA-LOW+6(2) '.' S_DATA-LOW+4(2) '.'  S_DATA-LOW(4) INTO SDYDO_TEXT_ELEMENT.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
      WHEN 'BT'.
        CONCATENATE S_DATA-LOW+6(2) '.' S_DATA-LOW+4(2) '.'  S_DATA-LOW(4) INTO SDYDO_TEXT_ELEMENT.
        CONCATENATE SDYDO_TEXT_ELEMENT '-' INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        CONCATENATE SDYDO_TEXT_ELEMENT S_DATA-HIGH+6(2) INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        CONCATENATE SDYDO_TEXT_ELEMENT '.' S_DATA-HIGH+4(2) '.'  S_DATA-HIGH(4) INTO SDYDO_TEXT_ELEMENT.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
    ENDCASE.
  ENDLOOP.

  LOOP AT S_C_CLIE.
    SDYDO_TEXT_ELEMENT = 'Cliente:'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CASE S_C_CLIE-OPTION.
      WHEN 'EQ'.
        SDYDO_TEXT_ELEMENT = S_C_CLIE-LOW.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
      WHEN 'BT'.
        CONCATENATE S_C_CLIE-LOW '-' S_C_CLIE-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
    ENDCASE.
  ENDLOOP.

  LOOP AT S_C_TRAN.
    SDYDO_TEXT_ELEMENT = 'Transbordo:'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CASE S_C_TRAN-OPTION.
      WHEN 'EQ'.
        SDYDO_TEXT_ELEMENT = S_C_TRAN-LOW.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
      WHEN 'BT'.
        CONCATENATE S_C_TRAN-LOW '-' S_C_TRAN-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
    ENDCASE.
  ENDLOOP.

  LOOP AT S_C_PORT.
    SDYDO_TEXT_ELEMENT = 'Porto:'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CASE S_C_PORT-OPTION.
      WHEN 'EQ'.
        SDYDO_TEXT_ELEMENT = S_C_PORT-LOW.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
      WHEN 'BT'.
        CONCATENATE S_C_PORT-LOW '-' S_C_PORT-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
    ENDCASE.
  ENDLOOP.

  LOOP AT S_C_COLE.
    SDYDO_TEXT_ELEMENT = 'L.Coleta:'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CASE S_C_COLE-OPTION.
      WHEN 'EQ'.
        SDYDO_TEXT_ELEMENT = S_C_COLE-LOW.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
      WHEN 'BT'.
        CONCATENATE S_C_COLE-LOW '-' S_C_COLE-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
    ENDCASE.
  ENDLOOP.

  LOOP AT S_MATNR.
    SDYDO_TEXT_ELEMENT = 'Material:'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CASE S_MATNR-OPTION.
      WHEN 'EQ'.
        SDYDO_TEXT_ELEMENT = S_MATNR-LOW.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
      WHEN 'BT'.
        CONCATENATE S_MATNR-LOW '-' S_MATNR-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
    ENDCASE.
  ENDLOOP.

  LOOP AT S_MATKL.
    SDYDO_TEXT_ELEMENT = 'G.Mercadoria:'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CASE S_MATKL-OPTION.
      WHEN 'EQ'.
        SDYDO_TEXT_ELEMENT = S_MATKL-LOW.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
      WHEN 'BT'.
        CONCATENATE S_MATKL-LOW '-' S_MATKL-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
    ENDCASE.
  ENDLOOP.

  CASE ABAP_TRUE.
    WHEN CK_02. "SIM.
      SDYDO_TEXT_ELEMENT = 'Tp.Produto:'.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      SDYDO_TEXT_ELEMENT = 'R-RR'.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
    WHEN CK_03. "Não.
      SDYDO_TEXT_ELEMENT = 'Tp.Produto:'.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      SDYDO_TEXT_ELEMENT = 'C-Convencional'.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
  ENDCASE.

  LOOP AT S_AUART.
    SDYDO_TEXT_ELEMENT = 'Tp.Doc.Venda:'.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CASE S_AUART-OPTION.
      WHEN 'EQ'.
        SDYDO_TEXT_ELEMENT = S_AUART-LOW.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
      WHEN 'BT'.
        CONCATENATE S_AUART-LOW '-' S_AUART-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE_C.
    ENDCASE.
  ENDLOOP.

  CALL METHOD COLUMN_1->ADD_TEXT
    EXPORTING
      TEXT_TABLE = P_TEXT_TABLE
      FIX_LINES  = 'X'.

  CALL METHOD COLUMN_2->ADD_TEXT
    EXPORTING
      TEXT_TABLE = P_TEXT_TABLE_C
      FIX_LINES  = 'X'.

  PERFORM CONTAINER_HTML.

ENDFORM.                    " CRIA_HTML_CAB

*&---------------------------------------------------------------------*
*&      Form  F_PEGA_IMAGEM
*&---------------------------------------------------------------------*
FORM F_PEGA_IMAGEM  USING    NOME_LOGO
                    CHANGING URL.

  REFRESH GRAPHIC_TABLE.

  CALL METHOD CL_SSF_XSF_UTILITIES=>GET_BDS_GRAPHIC_AS_BMP
    EXPORTING
      P_OBJECT = 'GRAPHICS'
      P_NAME   = NOME_LOGO
      P_ID     = 'BMAP'
      P_BTYPE  = 'BCOL'
    RECEIVING
      P_BMP    = L_GRAPHIC_XSTR.

  GRAPHIC_SIZE   = XSTRLEN( L_GRAPHIC_XSTR ).
  L_GRAPHIC_CONV = GRAPHIC_SIZE.
  L_GRAPHIC_OFFS = 0.

  WHILE L_GRAPHIC_CONV > 255.
    GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(255).
    APPEND GRAPHIC_TABLE.
    L_GRAPHIC_OFFS = L_GRAPHIC_OFFS + 255.
    L_GRAPHIC_CONV = L_GRAPHIC_CONV - 255.
  ENDWHILE.

  GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(L_GRAPHIC_CONV).

  APPEND GRAPHIC_TABLE.
  CALL FUNCTION 'DP_CREATE_URL'
    EXPORTING
      TYPE     = 'IMAGE'
      SUBTYPE  = 'X-UNKNOWN'
      SIZE     = GRAPHIC_SIZE
      LIFETIME = 'T'
    TABLES
      DATA     = GRAPHIC_TABLE
    CHANGING
      URL      = URL.

ENDFORM.                    " F_PEGA_IMAGEM

*&---------------------------------------------------------------------*
*&      Module  PAI_0100_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE PAI_0100_EXIT INPUT.
  LEAVE TO SCREEN 0. "ELE RETORNA PARA A TELA QUE CHAMOU.
ENDMODULE.                 " PAI_0100_EXIT  INPUT
