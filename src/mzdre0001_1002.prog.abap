*----------------------------------------------------------------------*
***INCLUDE MZDRE0001_1002 .
*----------------------------------------------------------------------*

  TYPES: BEGIN OF TP_CUSTO.
  TYPES:  KOKRS	TYPE KOKRS,
          KOSTL	TYPE KOSTL,
          LTEXT	TYPE KLTXT.
          INCLUDE STRUCTURE ZGL015_DRE_EST04.
  TYPES: END OF TP_CUSTO.


  DATA: TREE1              TYPE REF TO CL_GUI_ALV_TREE,
        GT_ZGL029_EST      TYPE TABLE OF ZGL029_EST WITH HEADER LINE,
        LT_LIST_COMMENTARY TYPE SLIS_T_LISTHEADER,
        L_HIERARCHY_HEADER TYPE TREEV_HHDR,
        GT_FIELDCATALOG    TYPE LVC_T_FCAT.

  DATA: IT_ZGL029_EST     TYPE TABLE OF ZGL029_EST WITH HEADER LINE,
        IT_ZGL029_EST_AUX TYPE TABLE OF ZGL029_EST WITH HEADER LINE.

  DATA: TG_T001  TYPE TABLE OF T001  WITH HEADER LINE,
        TG_T005  TYPE TABLE OF T005  WITH HEADER LINE,
        TG_TKA02 TYPE TABLE OF TKA02 WITH HEADER LINE.

  DATA: IT_ZGL015_DRE_EST04_C TYPE TABLE OF TP_CUSTO WITH HEADER LINE,

        IT_ZGL015_DRE_EST02_  TYPE TABLE OF ZGL015_DRE_EST02 WITH HEADER LINE,
        IT_ZGL015_DRE_EST03_  TYPE TABLE OF ZGL015_DRE_EST03 WITH HEADER LINE,
        IT_ZGL015_DRE_EST04_  TYPE TABLE OF TP_CUSTO WITH HEADER LINE,
        IT_ZGL015_DRE_EST05_  TYPE TABLE OF ZGL015_DRE_EST05 WITH HEADER LINE,
        IT_ZGL015_DRE_EST06_  TYPE TABLE OF ZGL015_DRE_EST06 WITH HEADER LINE,

        IT_ZGL025_DRE_ACM     TYPE TABLE OF ZGL025_DRE_ACM   WITH HEADER LINE,
        IT_ZGL026_DRE_ACM     TYPE TABLE OF ZGL026_DRE_ACM   WITH HEADER LINE,
        IT_ZGL027_DRE_ACM     TYPE TABLE OF ZGL027_DRE_ACM   WITH HEADER LINE,
        IT_ZGL028_DRE_ACM     TYPE TABLE OF ZGL028_DRE_ACM   WITH HEADER LINE,

        IT_SKAT               TYPE TABLE OF SKAT             WITH HEADER LINE,
        IT_CSKS               TYPE TABLE OF CSKS             WITH HEADER LINE,
        IT_CSKS_AUX           TYPE TABLE OF CSKS             WITH HEADER LINE,
        IT_CSKT               TYPE TABLE OF CSKT             WITH HEADER LINE,
        IT_CEPCT              TYPE TABLE OF CEPCT            WITH HEADER LINE,
        IT_T023T              TYPE TABLE OF T023T            WITH HEADER LINE,
        VG_EXISTE             TYPE C LENGTH 1,
        VG_MONAT              TYPE MONAT,
        VG_TABIX              TYPE SY-TABIX,
        VG_NIVEL_EST(2)       TYPE C.

*&---------------------------------------------------------------------*
*&      Module  STATUS_1002  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  MODULE STATUS_1002 OUTPUT.

    DATA: L_TREE_CONTAINER_NAME(30) TYPE C,
          L_CUSTOM_CONTAINER        TYPE REF TO CL_GUI_CUSTOM_CONTAINER.

    IF NOT VG_GERAR_REL IS INITIAL.
      CLEAR: VG_GERAR_REL.
      PERFORM PESQUISA_DRE.

      IF TREE1 IS NOT INITIAL.
        CALL METHOD TREE1->FREE.
      ENDIF.
      IF L_CUSTOM_CONTAINER IS NOT INITIAL.
        CALL METHOD L_CUSTOM_CONTAINER->FREE.
      ENDIF.
      REFRESH: GT_ZGL029_EST, LT_LIST_COMMENTARY.
      CLEAR: TREE1, L_CUSTOM_CONTAINER.

    ENDIF.

    IF TREE1 IS INITIAL.

* get fieldcatalog
      CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
        EXPORTING
          I_STRUCTURE_NAME = 'ZGL029_EST'
        CHANGING
          CT_FIELDCAT      = GT_FIELDCATALOG.

      DATA: LS_FIELDCATALOG TYPE LVC_S_FCAT.
      LOOP AT GT_FIELDCATALOG INTO LS_FIELDCATALOG.
        CASE LS_FIELDCATALOG-FIELDNAME.
          WHEN 'VLR_REA' OR 'VLR_ACM' OR 'QTD_TON' OR 'QTD_ACM'.
            LS_FIELDCATALOG-DO_SUM = 'X'.
          WHEN OTHERS.
            LS_FIELDCATALOG-NO_OUT = 'X'.
            LS_FIELDCATALOG-KEY    = ''.
        ENDCASE.
        MODIFY GT_FIELDCATALOG FROM LS_FIELDCATALOG.
      ENDLOOP.

      L_TREE_CONTAINER_NAME = 'TREE1'.

      CREATE OBJECT L_CUSTOM_CONTAINER
        EXPORTING
          CONTAINER_NAME              = L_TREE_CONTAINER_NAME
        EXCEPTIONS
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5.

      IF SY-SUBRC <> 0.
        MESSAGE X208(00) WITH 'ERROR'.                      "#EC NOTEXT
      ENDIF.

      CREATE OBJECT TREE1
        EXPORTING
          PARENT                      = L_CUSTOM_CONTAINER
          NODE_SELECTION_MODE         = CL_GUI_COLUMN_TREE=>NODE_SEL_MODE_MULTIPLE
          ITEM_SELECTION              = SPACE
          NO_HTML_HEADER              = ''
          NO_TOOLBAR                  = ''
        EXCEPTIONS
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          ILLEGAL_NODE_SELECTION_MODE = 5
          FAILED                      = 6
          ILLEGAL_COLUMN_NAME         = 7.

      IF SY-SUBRC IS NOT INITIAL.
        MESSAGE X208(00) WITH 'ERROR'.                      "#EC NOTEXT
      ENDIF.

      PERFORM F_HIERARCHY_HEADER_ CHANGING L_HIERARCHY_HEADER.

      PERFORM F_CABECALHO USING LT_LIST_COMMENTARY.

      CALL METHOD TREE1->SET_TABLE_FOR_FIRST_DISPLAY
        EXPORTING
          IS_HIERARCHY_HEADER = L_HIERARCHY_HEADER
          IT_LIST_COMMENTARY  = LT_LIST_COMMENTARY
          "i_logo              = l_logo
          "i_background_id     = 'ALV_BACKGROUND'
          "i_save              = 'A'
          "is_variant          = ls_variant
        CHANGING
          IT_OUTTAB           = GT_ZGL029_EST[] "table must be emty !!
          IT_FIELDCATALOG     = GT_FIELDCATALOG.

      DATA: VKEY_NIVEL00 TYPE LVC_NKEY,
            VKEY_NIVEL01 TYPE LVC_NKEY,
            VKEY_NIVEL02 TYPE LVC_NKEY,
            VKEY_NIVEL03 TYPE LVC_NKEY,
            VKEY_NIVEL04 TYPE LVC_NKEY,
            VKEY_NIVEL05 TYPE LVC_NKEY,
            VKEY_SAKNR   TYPE LVC_NKEY,
            VKEY_KOSTL   TYPE LVC_NKEY,
            VKEY_PRCTR   TYPE LVC_NKEY,
            VKEY_MATKL   TYPE LVC_NKEY,
            VKEY_ULTIMO  TYPE LVC_NKEY.

      SORT IT_ZGL029_EST BY NIVEL SAKNR KOSTL PRCTR MATKL.

      LOOP AT IT_ZGL029_EST.

        ON CHANGE OF IT_ZGL029_EST-NIVEL(2).
          PERFORM ADD_NODE_ALV USING IT_ZGL029_EST '' CHANGING VKEY_NIVEL01.
          VKEY_NIVEL00 = VKEY_NIVEL01.
        ENDON.

        ON CHANGE OF IT_ZGL029_EST-NIVEL+3(2).
          VG_NIVEL_EST = IT_ZGL029_EST-NIVEL+3(2).
          IF NOT VG_NIVEL_EST IS INITIAL.
            PERFORM ADD_NODE_ALV USING IT_ZGL029_EST VKEY_NIVEL01 CHANGING VKEY_NIVEL02.
            VKEY_NIVEL00 = VKEY_NIVEL02.
          ENDIF.
        ENDON.

        ON CHANGE OF IT_ZGL029_EST-NIVEL+6(2).
          VG_NIVEL_EST = IT_ZGL029_EST-NIVEL+6(2).
          IF NOT VG_NIVEL_EST IS INITIAL.
            PERFORM ADD_NODE_ALV USING IT_ZGL029_EST VKEY_NIVEL02 CHANGING VKEY_NIVEL03.
            VKEY_NIVEL00 = VKEY_NIVEL03.
          ENDIF.
        ENDON.

        ON CHANGE OF IT_ZGL029_EST-NIVEL+9(2).
          VG_NIVEL_EST = IT_ZGL029_EST-NIVEL+9(2).
          IF NOT VG_NIVEL_EST IS INITIAL.
            PERFORM ADD_NODE_ALV USING IT_ZGL029_EST VKEY_NIVEL03 CHANGING VKEY_NIVEL04.
            VKEY_NIVEL00 = VKEY_NIVEL04.
          ENDIF.
        ENDON.

        ON CHANGE OF IT_ZGL029_EST-NIVEL+12(2).
          VG_NIVEL_EST = IT_ZGL029_EST-NIVEL+12(2).
          IF NOT VG_NIVEL_EST IS INITIAL.
            PERFORM ADD_NODE_ALV USING IT_ZGL029_EST VKEY_NIVEL04 CHANGING VKEY_NIVEL05.
            VKEY_NIVEL00 = VKEY_NIVEL05.
          ENDIF.
        ENDON.

        ON CHANGE OF IT_ZGL029_EST-SAKNR.
          IF IT_ZGL029_EST-SAKNR IS NOT INITIAL.
            PERFORM ADD_NODE_SAKNR_ALV USING IT_ZGL029_EST VKEY_NIVEL00 CHANGING VKEY_ULTIMO.
          ENDIF.
        ENDON.

        ON CHANGE OF IT_ZGL029_EST-KOSTL.
          IF IT_ZGL029_EST-KOSTL IS NOT INITIAL.
            PERFORM ADD_NODE_COMPLETE USING IT_ZGL029_EST VKEY_ULTIMO CHANGING VKEY_KOSTL.
          ENDIF.
        ENDON.

        ON CHANGE OF IT_ZGL029_EST-PRCTR.
          IF IT_ZGL029_EST-PRCTR IS NOT INITIAL.
            PERFORM ADD_NODE_COMPLETE USING IT_ZGL029_EST VKEY_ULTIMO CHANGING VKEY_PRCTR.
          ENDIF.
        ENDON.

        ON CHANGE OF IT_ZGL029_EST-MATKL.
          IF IT_ZGL029_EST-MATKL IS NOT INITIAL.
            PERFORM ADD_NODE_COMPLETE USING IT_ZGL029_EST VKEY_ULTIMO CHANGING VKEY_MATKL.
          ENDIF.
        ENDON.
      ENDLOOP.

* calculate totals
      CALL METHOD TREE1->UPDATE_CALCULATIONS.

* this method must be called to send the data to the frontend
      CALL METHOD TREE1->FRONTEND_UPDATE.

*      optimize column-width
      CALL METHOD TREE1->COLUMN_OPTIMIZE
        EXPORTING
          I_START_COLUMN = TREE1->C_HIERARCHY_COLUMN_NAME
          I_END_COLUMN   = TREE1->C_HIERARCHY_COLUMN_NAME.

    ENDIF.

  ENDMODULE.                 " STATUS_1002  OUTPUT


*&---------------------------------------------------------------------*
*&      Form  PESQUISA_DRE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM PESQUISA_DRE .

*---------------------------------------------------------- ALRS 14.01.2014 C. 120242
    " Calcula Ultimo dia do mÃªs.
    DATA: DATA_INI TYPE SY-DATUM,
          VMES(2),
          VANO(4),
          NMES     TYPE I,
          NANO     TYPE I.

    NMES = T_MES-LOW.
    NANO = T_ANO-LOW.
    IF T_MES-LOW = '12'.
      NMES = '01'.
      NANO = NANO + 1.
    ELSE.
      ADD 1 TO NMES.
    ENDIF.
    VMES = NMES.
    VANO = NANO.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = VMES
      IMPORTING
        OUTPUT = VMES.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        INPUT  = VANO
      IMPORTING
        OUTPUT = VANO.

    CONCATENATE VANO VMES '01' INTO DATA_INI.

    SUBTRACT 1 FROM DATA_INI.

*-------------------------------------------------------------
    REFRESH:
            IT_ZGL029_EST[],
            IT_ZGL015_DRE_EST02[],
            IT_ZGL015_DRE_EST03[],
            IT_ZGL015_DRE_EST04[],
            IT_ZGL015_DRE_EST05[],
            IT_ZGL015_DRE_EST06[],
            IT_ZGL015_DRE_EST02_[],
            IT_ZGL015_DRE_EST03_[],
            IT_ZGL015_DRE_EST04_[],
            IT_ZGL015_DRE_EST04_C[],
            IT_ZGL015_DRE_EST05_[],
            IT_ZGL015_DRE_EST06_[],
            IT_ZGL015_DRE_EST07[],
            IT_ZGL021_DRE_DADOS[],
            IT_ZGL022_DRE_DADOS[],
            IT_ZGL023_DRE_DADOS[],
            IT_ZGL024_DRE_DADOS[],
            IT_ZGL025_DRE_ACM[],
            IT_ZGL026_DRE_ACM[],
            IT_ZGL027_DRE_ACM[],
            IT_ZGL028_DRE_ACM[],
            IT_SKAT[],
            IT_CSKS[],
            IT_CSKS_AUX[],
            IT_CEPCT[],
            IT_T023T[],
            TG_T001,
            TG_T005.

    DATA: WL_TABIX  TYPE SY-TABIX,
          WL_TABIX2 TYPE SY-TABIX.


    "Conta RazÃ£o
    SELECT * INTO TABLE IT_ZGL025_DRE_ACM
      FROM ZGL025_DRE_ACM
     WHERE BUKRS EQ WA_DRE_DADOS_ALV-BUKRS
       AND VERSN EQ WA_DRE_DADOS_ALV-VERSN
       AND MONAT EQ WA_DRE_DADOS_ALV-MONAT
       AND GJAHR EQ WA_DRE_DADOS_ALV-GJAHR.

    "Conta RazÃ£o / Centro de Custo
    SELECT * INTO TABLE IT_ZGL026_DRE_ACM
      FROM ZGL026_DRE_ACM
     WHERE BUKRS EQ WA_DRE_DADOS_ALV-BUKRS
       AND VERSN EQ WA_DRE_DADOS_ALV-VERSN
       AND MONAT EQ WA_DRE_DADOS_ALV-MONAT
       AND GJAHR EQ WA_DRE_DADOS_ALV-GJAHR.

    "Conta RazÃ£o / Centro de Lucro
    SELECT * INTO TABLE IT_ZGL027_DRE_ACM
      FROM ZGL027_DRE_ACM
     WHERE BUKRS EQ WA_DRE_DADOS_ALV-BUKRS
       AND VERSN EQ WA_DRE_DADOS_ALV-VERSN
       AND MONAT EQ WA_DRE_DADOS_ALV-MONAT
       AND GJAHR EQ WA_DRE_DADOS_ALV-GJAHR.

    "Conta RazÃ£o / Grupo de Material
    SELECT * INTO TABLE IT_ZGL028_DRE_ACM
      FROM ZGL028_DRE_ACM
     WHERE BUKRS EQ WA_DRE_DADOS_ALV-BUKRS
       AND VERSN EQ WA_DRE_DADOS_ALV-VERSN
       AND MONAT EQ WA_DRE_DADOS_ALV-MONAT
       AND GJAHR EQ WA_DRE_DADOS_ALV-GJAHR.

    "Conta RazÃ£o
    SELECT * INTO TABLE IT_ZGL021_DRE_DADOS
      FROM ZGL021_DRE_DADOS
     WHERE BUKRS EQ WA_DRE_DADOS_ALV-BUKRS
       AND VERSN EQ WA_DRE_DADOS_ALV-VERSN
       AND MONAT EQ WA_DRE_DADOS_ALV-MONAT
       AND GJAHR EQ WA_DRE_DADOS_ALV-GJAHR.

    "Conta RazÃ£o / Centro de Custo
    SELECT * INTO TABLE IT_ZGL022_DRE_DADOS
      FROM ZGL022_DRE_DADOS
     WHERE BUKRS EQ WA_DRE_DADOS_ALV-BUKRS
       AND VERSN EQ WA_DRE_DADOS_ALV-VERSN
       AND MONAT EQ WA_DRE_DADOS_ALV-MONAT
       AND GJAHR EQ WA_DRE_DADOS_ALV-GJAHR.

    "Conta RazÃ£o / Centro de Lucro
    SELECT * INTO TABLE IT_ZGL023_DRE_DADOS
      FROM ZGL023_DRE_DADOS
     WHERE BUKRS EQ WA_DRE_DADOS_ALV-BUKRS
       AND VERSN EQ WA_DRE_DADOS_ALV-VERSN
       AND MONAT EQ WA_DRE_DADOS_ALV-MONAT
       AND GJAHR EQ WA_DRE_DADOS_ALV-GJAHR.

    "Conta RazÃ£o / Grupo de Material
    SELECT * INTO TABLE IT_ZGL024_DRE_DADOS
      FROM ZGL024_DRE_DADOS
     WHERE BUKRS EQ WA_DRE_DADOS_ALV-BUKRS
       AND VERSN EQ WA_DRE_DADOS_ALV-VERSN
       AND MONAT EQ WA_DRE_DADOS_ALV-MONAT
       AND GJAHR EQ WA_DRE_DADOS_ALV-GJAHR.

    SELECT SINGLE *
      FROM T001
      INTO TG_T001
       WHERE BUKRS EQ WA_DRE_DADOS_ALV-BUKRS.

    SELECT SINGLE *
      FROM TKA02
      INTO TG_TKA02
     WHERE BUKRS EQ WA_DRE_DADOS_ALV-BUKRS.

    SELECT SINGLE *
      FROM T005
      INTO TG_T005
       WHERE LAND1 EQ TG_T001-LAND1.

    SELECT * INTO TABLE IT_ZGL015_DRE_EST02 FROM ZGL015_DRE_EST02 WHERE VERSN EQ WA_DRE_DADOS_ALV-VERSN.
    SELECT * INTO TABLE IT_ZGL015_DRE_EST03 FROM ZGL015_DRE_EST03 WHERE VERSN EQ WA_DRE_DADOS_ALV-VERSN.
    SELECT * INTO TABLE IT_ZGL015_DRE_EST04 FROM ZGL015_DRE_EST04 WHERE VERSN EQ WA_DRE_DADOS_ALV-VERSN.
    SELECT * INTO TABLE IT_ZGL015_DRE_EST05 FROM ZGL015_DRE_EST05 WHERE VERSN EQ WA_DRE_DADOS_ALV-VERSN.
    SELECT * INTO TABLE IT_ZGL015_DRE_EST06 FROM ZGL015_DRE_EST06 WHERE VERSN EQ WA_DRE_DADOS_ALV-VERSN.
    SELECT * INTO TABLE IT_ZGL015_DRE_EST07 FROM ZGL015_DRE_EST07 WHERE VERSN EQ WA_DRE_DADOS_ALV-VERSN.

    MOVE: IT_ZGL015_DRE_EST02[] TO IT_ZGL015_DRE_EST02_[],
          IT_ZGL015_DRE_EST03[] TO IT_ZGL015_DRE_EST03_[],
          IT_ZGL015_DRE_EST05[] TO IT_ZGL015_DRE_EST05_[],
          IT_ZGL015_DRE_EST06[] TO IT_ZGL015_DRE_EST06_[].

    READ TABLE TG_TKA02 INDEX 1.

    LOOP AT IT_ZGL015_DRE_EST04.
      MOVE-CORRESPONDING IT_ZGL015_DRE_EST04 TO IT_ZGL015_DRE_EST04_.
      IT_ZGL015_DRE_EST04_-KOKRS = TG_TKA02-KOKRS.
      APPEND IT_ZGL015_DRE_EST04_.
    ENDLOOP.

    SORT IT_ZGL015_DRE_EST02_ BY NIVEL.
    DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST02_ COMPARING NIVEL.
    SORT IT_ZGL015_DRE_EST03_ BY KTOPL SAKNR.
    DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST03_ COMPARING KTOPL SAKNR.
    SORT IT_ZGL015_DRE_EST04_ BY KOSAR.
    DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST04_ COMPARING KOSAR.
    SORT IT_ZGL015_DRE_EST05_ BY KOKRS PRCTR.
    DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST05_ COMPARING KOKRS PRCTR.
    SORT IT_ZGL015_DRE_EST06_ BY MATKL.
    DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST06_ COMPARING MATKL.

    "Conta RazÃ£o **************************************************************************
    IF NOT IT_ZGL015_DRE_EST03_[] IS INITIAL.
      IF SY-UCOMM NE OK_CEXCEL.
        SELECT * INTO TABLE IT_SKAT
          FROM SKAT
           FOR ALL ENTRIES IN IT_ZGL015_DRE_EST03_
         WHERE SPRAS EQ SY-LANGU
           AND KTOPL EQ IT_ZGL015_DRE_EST03_-KTOPL
           AND SAKNR EQ IT_ZGL015_DRE_EST03_-SAKNR.
      ELSE.
        IF WA_DRE_DADOS_ALV-BUKRS EQ '0100'.
          SELECT * INTO TABLE IT_SKAT
            FROM SKAT
             FOR ALL ENTRIES IN IT_ZGL015_DRE_EST03_
           WHERE SPRAS EQ 'ES'
             AND KTOPL EQ IT_ZGL015_DRE_EST03_-KTOPL
             AND SAKNR EQ IT_ZGL015_DRE_EST03_-SAKNR.
        ELSE.
          SELECT * INTO TABLE IT_SKAT
            FROM SKAT
             FOR ALL ENTRIES IN IT_ZGL015_DRE_EST03_
           WHERE SPRAS EQ SY-LANGU
             AND KTOPL EQ IT_ZGL015_DRE_EST03_-KTOPL
             AND SAKNR EQ IT_ZGL015_DRE_EST03_-SAKNR.
        ENDIF.
      ENDIF.
    ENDIF.
    "**************************************************************************************
    "**************************************************************************************

    "Conta RazÃ£o / Centro de Custo ********************************************************
    IF NOT IT_ZGL015_DRE_EST04_[] IS INITIAL.
      SELECT * INTO TABLE IT_CSKS
        FROM CSKS
         FOR ALL ENTRIES IN IT_ZGL015_DRE_EST04_
       WHERE KOKRS EQ IT_ZGL015_DRE_EST04_-KOKRS
         AND KOSAR EQ IT_ZGL015_DRE_EST04_-KOSAR
         AND DATAB LE SY-DATUM "DATA_INI
         AND DATBI GE SY-DATUM. "DATA_INI.
    ENDIF.

    IF IT_ZGL022_DRE_DADOS[] IS NOT INITIAL.
      SELECT * INTO TABLE IT_CSKS_AUX
       FROM CSKS
        FOR ALL ENTRIES IN IT_ZGL022_DRE_DADOS
      WHERE KOKRS EQ TG_TKA02-KOKRS
        AND KOSTL EQ IT_ZGL022_DRE_DADOS-KOSTL
        AND DATAB LE SY-DATUM
        AND DATBI GE SY-DATUM.
    ENDIF.

    IF IT_ZGL026_DRE_ACM[] IS NOT INITIAL.
      SELECT * APPENDING TABLE IT_CSKS_AUX
        FROM CSKS
         FOR ALL ENTRIES IN IT_ZGL026_DRE_ACM
       WHERE KOKRS EQ TG_TKA02-KOKRS
         AND KOSTL EQ IT_ZGL026_DRE_ACM-KOSTL
         AND DATAB LE SY-DATUM "DATA_INI
         AND DATBI GE SY-DATUM. "DATA_INI.
    ENDIF.

*    IF sy-subrc IS INITIAL.
    SORT: IT_CSKS_AUX BY KOSTL.
    SORT: IT_SKAT BY SAKNR.
    LOOP AT IT_ZGL022_DRE_DADOS.
      READ TABLE IT_SKAT
        WITH KEY SAKNR = IT_ZGL022_DRE_DADOS-SAKNR
                 BINARY SEARCH.

      READ TABLE IT_CSKS_AUX
        WITH KEY KOSTL = IT_ZGL022_DRE_DADOS-KOSTL
                 BINARY SEARCH.

      IF SY-SUBRC IS INITIAL.
        READ TABLE IT_ZGL015_DRE_EST04 TRANSPORTING NO FIELDS
          WITH KEY VERSN = IT_ZGL022_DRE_DADOS-VERSN
                   SAKNR = IT_ZGL022_DRE_DADOS-SAKNR
                   NIVEL = IT_ZGL022_DRE_DADOS-NIVEL
                   KTOPL = IT_SKAT-KTOPL
                   KOSAR = IT_CSKS_AUX-KOSAR.

        IF SY-SUBRC IS NOT INITIAL.
          IT_ZGL015_DRE_EST04-BUKRS = IT_ZGL022_DRE_DADOS-BUKRS.
          IT_ZGL015_DRE_EST04-VERSN = IT_ZGL022_DRE_DADOS-VERSN.
          IT_ZGL015_DRE_EST04-NIVEL = IT_ZGL022_DRE_DADOS-NIVEL.
          IT_ZGL015_DRE_EST04-KTOPL = IT_SKAT-KTOPL.
          IT_ZGL015_DRE_EST04-SAKNR = IT_ZGL022_DRE_DADOS-SAKNR.
          IT_ZGL015_DRE_EST04-KOSAR = IT_CSKS_AUX-KOSAR.

          MOVE-CORRESPONDING: IT_ZGL015_DRE_EST04 TO IT_ZGL015_DRE_EST04_.
          APPEND IT_ZGL015_DRE_EST04.
          APPEND IT_ZGL015_DRE_EST04_.
          APPEND IT_CSKS_AUX TO IT_CSKS.

        ENDIF.

      ENDIF.
      CLEAR: IT_ZGL015_DRE_EST04_, IT_ZGL022_DRE_DADOS, IT_CSKS_AUX.
    ENDLOOP.

    LOOP AT IT_ZGL026_DRE_ACM.
      READ TABLE IT_SKAT
        WITH KEY SAKNR = IT_ZGL026_DRE_ACM-SAKNR
                 BINARY SEARCH.

      READ TABLE IT_CSKS_AUX
        WITH KEY KOSTL = IT_ZGL026_DRE_ACM-KOSTL
                 BINARY SEARCH.

      IF SY-SUBRC IS INITIAL.
        READ TABLE IT_ZGL015_DRE_EST04 TRANSPORTING NO FIELDS
          WITH KEY VERSN = IT_ZGL026_DRE_ACM-VERSN
                   SAKNR = IT_ZGL026_DRE_ACM-SAKNR
                   NIVEL = IT_ZGL026_DRE_ACM-NIVEL
                   KTOPL = IT_SKAT-KTOPL
                   KOSAR = IT_CSKS_AUX-KOSAR.

        IF SY-SUBRC IS NOT INITIAL.
          IT_ZGL015_DRE_EST04-BUKRS = IT_ZGL026_DRE_ACM-BUKRS.
          IT_ZGL015_DRE_EST04-VERSN = IT_ZGL026_DRE_ACM-VERSN.
          IT_ZGL015_DRE_EST04-NIVEL = IT_ZGL026_DRE_ACM-NIVEL.
          IT_ZGL015_DRE_EST04-KTOPL = IT_SKAT-KTOPL.
          IT_ZGL015_DRE_EST04-SAKNR = IT_ZGL026_DRE_ACM-SAKNR.
          IT_ZGL015_DRE_EST04-KOSAR = IT_CSKS_AUX-KOSAR.

          MOVE-CORRESPONDING: IT_ZGL015_DRE_EST04 TO IT_ZGL015_DRE_EST04_.
          APPEND IT_ZGL015_DRE_EST04.
          APPEND IT_ZGL015_DRE_EST04_.
          APPEND IT_CSKS_AUX TO IT_CSKS.

        ENDIF.

      ENDIF.
      CLEAR: IT_ZGL015_DRE_EST04_, IT_ZGL022_DRE_DADOS, IT_CSKS_AUX.
    ENDLOOP.
*    ENDIF.


    IF NOT IT_CSKS[] IS INITIAL.
      SELECT * INTO TABLE IT_CSKT
        FROM CSKT
         FOR ALL ENTRIES IN IT_CSKS
       WHERE KOKRS EQ IT_CSKS-KOKRS
         AND SPRAS EQ SY-LANGU
         AND KOSTL EQ IT_CSKS-KOSTL.
    ENDIF.


    SORT: IT_ZGL022_DRE_DADOS BY NIVEL SAKNR  KOSTL,
          IT_ZGL026_DRE_ACM BY NIVEL SAKNR KOSTL.

    LOOP AT IT_ZGL015_DRE_EST04.
      CLEAR: IT_ZGL015_DRE_EST04_C.
      MOVE-CORRESPONDING IT_ZGL015_DRE_EST04 TO IT_ZGL015_DRE_EST04_C.
      LOOP AT IT_CSKS WHERE KOSAR EQ IT_ZGL015_DRE_EST04_C-KOSAR.
        READ TABLE IT_ZGL022_DRE_DADOS WITH KEY NIVEL = IT_ZGL015_DRE_EST04_C-NIVEL
                                                SAKNR = IT_ZGL015_DRE_EST04_C-SAKNR
                                                KOSTL = IT_CSKS-KOSTL
                                                BINARY SEARCH.
        IF NOT SY-SUBRC IS INITIAL.
          READ TABLE IT_ZGL026_DRE_ACM WITH KEY NIVEL = IT_ZGL015_DRE_EST04_C-NIVEL
                                                SAKNR = IT_ZGL015_DRE_EST04_C-SAKNR
                                                KOSTL = IT_CSKS-KOSTL
                                                BINARY SEARCH.
          IF NOT SY-SUBRC IS INITIAL.

            CONTINUE.
          ENDIF.
        ENDIF.
        IT_ZGL015_DRE_EST04_C-KOKRS = IT_CSKS-KOKRS.
        IT_ZGL015_DRE_EST04_C-KOSTL = IT_CSKS-KOSTL.
        READ TABLE IT_CSKT WITH KEY KOKRS = IT_CSKS-KOKRS KOSTL = IT_CSKS-KOSTL.
        IF SY-SUBRC IS INITIAL.
          IT_ZGL015_DRE_EST04_C-LTEXT = IT_CSKT-LTEXT.
        ENDIF.
        APPEND IT_ZGL015_DRE_EST04_C.
      ENDLOOP.
    ENDLOOP.
    "**************************************************************************************
    "**************************************************************************************

    "Conta RazÃ£o / Centro de Lucro ********************************************************
    IF NOT IT_ZGL015_DRE_EST05_[] IS INITIAL.
      SELECT * INTO TABLE IT_CEPCT
        FROM CEPCT
         FOR ALL ENTRIES IN IT_ZGL015_DRE_EST05_
       WHERE SPRAS EQ SY-LANGU
         AND PRCTR EQ IT_ZGL015_DRE_EST05_-PRCTR
         AND KOKRS EQ IT_ZGL015_DRE_EST05_-KOKRS.
    ENDIF.
    "**************************************************************************************
    "**************************************************************************************

    "Conta RazÃ£o / Grupo de Material ******************************************************
    IF NOT IT_ZGL015_DRE_EST06_[] IS INITIAL.
      SELECT * INTO TABLE IT_T023T
        FROM T023T
         FOR ALL ENTRIES IN IT_ZGL015_DRE_EST06_
       WHERE SPRAS EQ SY-LANGU
         AND MATKL EQ IT_ZGL015_DRE_EST06_-MATKL.
    ENDIF.
    "**************************************************************************************
    "**************************************************************************************
    SORT: IT_ZGL015_DRE_EST04_C BY KOKRS KOSTL BUKRS VERSN NIVEL KTOPL SAKNR KOSAR.
    DELETE ADJACENT DUPLICATES FROM IT_ZGL015_DRE_EST04_C COMPARING KOKRS KOSTL BUKRS VERSN NIVEL KTOPL SAKNR KOSAR.

    SORT: IT_ZGL015_DRE_EST04 BY NIVEL KTOPL SAKNR.
    SORT: IT_ZGL015_DRE_EST04_C BY NIVEL KTOPL SAKNR KOSAR.
    SORT: IT_ZGL022_DRE_DADOS BY NIVEL SAKNR KOSTL.
    SORT: IT_ZGL022_DRE_DADOS BY NIVEL SAKNR KOSTL.
    "NÃ­veis
    "Contas.***********************************************************************************************************************************************
    LOOP AT IT_ZGL015_DRE_EST02 WHERE NIVEL_TOTAL EQ SPACE.


      CLEAR: IT_ZGL015_DRE_EST03  ,
             IT_ZGL015_DRE_EST04_C,
             IT_ZGL015_DRE_EST05  ,
             IT_ZGL015_DRE_EST06  ,
             IT_ZGL015_DRE_EST07  .

      PERFORM INSERT_EST USING IT_ZGL015_DRE_EST02 IT_ZGL015_DRE_EST03 IT_ZGL015_DRE_EST04_C IT_ZGL015_DRE_EST05 IT_ZGL015_DRE_EST06 IT_ZGL015_DRE_EST07 SPACE.

      LOOP AT IT_ZGL015_DRE_EST03 WHERE NIVEL EQ IT_ZGL015_DRE_EST02-NIVEL.

        CLEAR: IT_ZGL015_DRE_EST04_C,
               IT_ZGL015_DRE_EST05  ,
               IT_ZGL015_DRE_EST06  .

        READ TABLE IT_ZGL021_DRE_DADOS WITH KEY NIVEL = IT_ZGL015_DRE_EST02-NIVEL
                                                SAKNR = IT_ZGL015_DRE_EST03-SAKNR.

        IF SY-SUBRC IS NOT INITIAL.
          READ TABLE IT_ZGL025_DRE_ACM WITH KEY NIVEL = IT_ZGL015_DRE_EST02-NIVEL
                                                SAKNR = IT_ZGL015_DRE_EST03-SAKNR.
        ENDIF.

        IF SY-SUBRC IS INITIAL.
          PERFORM INSERT_EST USING IT_ZGL015_DRE_EST02 IT_ZGL015_DRE_EST03 IT_ZGL015_DRE_EST04_C IT_ZGL015_DRE_EST05 IT_ZGL015_DRE_EST06 IT_ZGL015_DRE_EST07 C_X.
          CONTINUE.
        ELSE.
          PERFORM INSERT_EST USING IT_ZGL015_DRE_EST02 IT_ZGL015_DRE_EST03 IT_ZGL015_DRE_EST04_C IT_ZGL015_DRE_EST05 IT_ZGL015_DRE_EST06 IT_ZGL015_DRE_EST07 SPACE.
        ENDIF.

        READ TABLE IT_ZGL015_DRE_EST04
          WITH KEY NIVEL = IT_ZGL015_DRE_EST02-NIVEL
                   KTOPL = IT_ZGL015_DRE_EST03-KTOPL
                   SAKNR = IT_ZGL015_DRE_EST03-SAKNR
                   BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          WL_TABIX = SY-TABIX.


          "Centro de custo
          LOOP AT IT_ZGL015_DRE_EST04 FROM WL_TABIX.
*        LOOP AT it_zgl015_dre_est04 WHERE nivel EQ it_zgl015_dre_est02-nivel
*                                      AND ktopl EQ it_zgl015_dre_est03-ktopl
*                                      AND saknr EQ it_zgl015_dre_est03-saknr.
            IF IT_ZGL015_DRE_EST04-NIVEL NE IT_ZGL015_DRE_EST02-NIVEL
            OR IT_ZGL015_DRE_EST04-KTOPL NE IT_ZGL015_DRE_EST03-KTOPL
            OR IT_ZGL015_DRE_EST04-SAKNR NE IT_ZGL015_DRE_EST03-SAKNR.
              EXIT.
            ENDIF.

            READ TABLE IT_ZGL015_DRE_EST04_C
           WITH KEY NIVEL = IT_ZGL015_DRE_EST02-NIVEL
                    KTOPL = IT_ZGL015_DRE_EST03-KTOPL
                    SAKNR = IT_ZGL015_DRE_EST03-SAKNR
                    KOSAR = IT_ZGL015_DRE_EST04-KOSAR
                    BINARY SEARCH.
            IF SY-SUBRC IS INITIAL.
              WL_TABIX2 = SY-TABIX.


              LOOP AT IT_ZGL015_DRE_EST04_C FROM WL_TABIX2.
*          LOOP AT it_zgl015_dre_est04_c WHERE nivel EQ it_zgl015_dre_est02-nivel
*                                          AND ktopl EQ it_zgl015_dre_est03-ktopl
*                                          AND saknr EQ it_zgl015_dre_est03-saknr
*                                          AND kosar EQ it_zgl015_dre_est04-kosar.

                IF IT_ZGL015_DRE_EST04_C-NIVEL NE IT_ZGL015_DRE_EST02-NIVEL
                OR IT_ZGL015_DRE_EST04_C-KTOPL NE IT_ZGL015_DRE_EST03-KTOPL
                OR IT_ZGL015_DRE_EST04_C-SAKNR NE IT_ZGL015_DRE_EST03-SAKNR
                OR IT_ZGL015_DRE_EST04_C-KOSAR NE IT_ZGL015_DRE_EST04-KOSAR.
                  EXIT.
                ENDIF.

                CLEAR: IT_ZGL015_DRE_EST05  ,
                       IT_ZGL015_DRE_EST06  .
                PERFORM INSERT_EST USING IT_ZGL015_DRE_EST02 IT_ZGL015_DRE_EST03 IT_ZGL015_DRE_EST04_C IT_ZGL015_DRE_EST05 IT_ZGL015_DRE_EST06 IT_ZGL015_DRE_EST07 SPACE.
              ENDLOOP.
            ENDIF.
          ENDLOOP.
        ENDIF.
        "Centro de Lucro
        LOOP AT IT_ZGL015_DRE_EST05 WHERE NIVEL EQ IT_ZGL015_DRE_EST02-NIVEL AND KTOPL EQ IT_ZGL015_DRE_EST03-KTOPL AND SAKNR EQ IT_ZGL015_DRE_EST03-SAKNR.

          CLEAR: IT_ZGL015_DRE_EST04_C,
                 IT_ZGL015_DRE_EST06  .

          PERFORM INSERT_EST USING IT_ZGL015_DRE_EST02 IT_ZGL015_DRE_EST03 IT_ZGL015_DRE_EST04_C IT_ZGL015_DRE_EST05 IT_ZGL015_DRE_EST06 IT_ZGL015_DRE_EST07 SPACE.
        ENDLOOP.

        "Grupo de Material
        LOOP AT IT_ZGL015_DRE_EST06 WHERE NIVEL EQ IT_ZGL015_DRE_EST02-NIVEL AND KTOPL EQ IT_ZGL015_DRE_EST03-KTOPL AND SAKNR EQ IT_ZGL015_DRE_EST03-SAKNR.

          CLEAR: IT_ZGL015_DRE_EST04_C,
                 IT_ZGL015_DRE_EST05  .
          PERFORM INSERT_EST USING IT_ZGL015_DRE_EST02 IT_ZGL015_DRE_EST03 IT_ZGL015_DRE_EST04_C IT_ZGL015_DRE_EST05 IT_ZGL015_DRE_EST06 IT_ZGL015_DRE_EST07 SPACE.
        ENDLOOP.
      ENDLOOP.
    ENDLOOP.

    "******************************************************************************************************************************************************
    "******************************************************************************************************************************************************

    "Contas Agrupadas *************************************************************************************************************************************
    CLEAR: IT_ZGL015_DRE_EST02,
           IT_ZGL015_DRE_EST03,
           IT_ZGL015_DRE_EST04_C,
           IT_ZGL015_DRE_EST05,
           IT_ZGL015_DRE_EST06.

    SORT: IT_ZGL029_EST BY NIVEL NITXT LEVELN SAKNR TXT50 KOSTL LTEXT_CC PRCTR LTEXT_CL MATKL WGBEZ60.
    DELETE ADJACENT DUPLICATES FROM IT_ZGL029_EST
     COMPARING NIVEL NITXT LEVELN SAKNR TXT50 KOSTL LTEXT_CC PRCTR LTEXT_CL MATKL WGBEZ60.
    SORT: IT_ZGL015_DRE_EST02 BY BUKRS VERSN NIVEL.             "MIGNOW - Diego Tersariolli - 29.07.2023 - Ajustes OrdenaÃ§Ã£o para Somar CÃ³digos Corretamente.

    LOOP AT IT_ZGL015_DRE_EST02 WHERE NIVEL_TOTAL NE SPACE.

      READ TABLE IT_ZGL015_DRE_EST07 WITH KEY NIVEL = IT_ZGL015_DRE_EST02-NIVEL(2).
*      LOOP AT IT_ZGL015_DRE_EST07
*        WHERE NIVEL = IT_ZGL015_DRE_EST02-NIVEL(2).


      IF ( SY-SUBRC EQ 0 ).
        PERFORM INSERT_EST USING
                           IT_ZGL015_DRE_EST02
                           IT_ZGL015_DRE_EST03
                           IT_ZGL015_DRE_EST04_C
                           IT_ZGL015_DRE_EST05
                           IT_ZGL015_DRE_EST06
                           IT_ZGL015_DRE_EST07
                           SPACE.
      ENDIF.
*      ENDLOOP.
    ENDLOOP.
    "******************************************************************************************************************************************************
    "******************************************************************************************************************************************************

    CLEAR: IT_ZGL029_EST_AUX[].
    MOVE IT_ZGL029_EST[] TO IT_ZGL029_EST_AUX[].
    LOOP AT IT_ZGL029_EST_AUX WHERE SAKNR NE SPACE.
      READ TABLE IT_ZGL029_EST WITH KEY NIVEL = IT_ZGL029_EST_AUX-NIVEL  SAKNR = IT_ZGL029_EST_AUX-SAKNR.
      IF SY-SUBRC IS INITIAL.
        VG_TABIX = SY-TABIX.
        CLEAR: VG_EXISTE.
        LOOP AT IT_ZGL029_EST WHERE NIVEL = IT_ZGL029_EST_AUX-NIVEL
                                AND SAKNR = IT_ZGL029_EST_AUX-SAKNR.
          IF   ( NOT IT_ZGL029_EST-KOSTL IS INITIAL ) OR
               ( NOT IT_ZGL029_EST-PRCTR IS INITIAL ) OR
               ( NOT IT_ZGL029_EST-MATKL IS INITIAL ) OR
               ( IT_ZGL029_EST-VLR_REA EQ 0 ) OR
               ( IT_ZGL029_EST-VLR_ACM EQ 0 ) OR
               ( IT_ZGL029_EST-QTD_TON EQ 0 ) OR
               ( IT_ZGL029_EST-QTD_ACM EQ 0 ) .
            VG_EXISTE = C_X.
          ENDIF.
        ENDLOOP.
        IF VG_EXISTE IS INITIAL.
          DELETE IT_ZGL029_EST INDEX VG_TABIX.
        ENDIF.
      ENDIF.
    ENDLOOP.

  ENDFORM.                    " PESQUISA_DRE

*&---------------------------------------------------------------------*
*&      Form  INSERT_EST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM INSERT_EST USING P_ZGL015_DRE_EST02   TYPE ZGL015_DRE_EST02
                        P_ZGL015_DRE_EST03   TYPE ZGL015_DRE_EST03
                        P_ZGL015_DRE_EST04_C TYPE TP_CUSTO
                        P_ZGL015_DRE_EST05   TYPE ZGL015_DRE_EST05
                        P_ZGL015_DRE_EST06   TYPE ZGL015_DRE_EST06
                        P_ZGL015_DRE_EST07   TYPE ZGL015_DRE_EST07
                        P_TOTI_CR            TYPE C.

    DATA: SOMA_VLR_REA  TYPE ZGL029_EST-VLR_REA,
          SOMA_VLR_ACM  TYPE ZGL029_EST-VLR_ACM,
          TEXT_SOMA     TYPE ZGL015_DRE_EST02-NITXT,
          WL_ZGL029_EST LIKE LINE OF IT_ZGL029_EST,
          WL_TABIX      TYPE SY-TABIX.


    CLEAR: IT_ZGL029_EST, IT_EXCEL.
    IT_ZGL029_EST-NIVEL    = P_ZGL015_DRE_EST02-NIVEL.
    IT_ZGL029_EST-NITXT    = P_ZGL015_DRE_EST02-NITXT.

    IF NOT P_ZGL015_DRE_EST03 IS INITIAL.
      IT_ZGL029_EST-SAKNR    = P_ZGL015_DRE_EST03-SAKNR.
      READ TABLE IT_SKAT WITH KEY KTOPL = P_ZGL015_DRE_EST03-KTOPL SAKNR = P_ZGL015_DRE_EST03-SAKNR.
      IF SY-SUBRC IS INITIAL.
        IT_ZGL029_EST-TXT50    = IT_SKAT-TXT50.
      ENDIF.
      IF NOT P_TOTI_CR IS INITIAL.
        IT_ZGL029_EST-VLR_REA  = 0.
        IT_ZGL029_EST-VLR_ACM  = 0.
        IT_ZGL029_EST-QTD_TON  = 0.
        IT_ZGL029_EST-QTD_ACM  = 0.
        LOOP AT IT_ZGL021_DRE_DADOS WHERE NIVEL EQ P_ZGL015_DRE_EST03-NIVEL
                                      AND SAKNR EQ P_ZGL015_DRE_EST03-SAKNR.

          IF TG_T005-WAERS EQ WA_DRE_DADOS_ALV-WAERS.
            IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL021_DRE_DADOS-VLR_REA.
          ELSEIF TG_T005-CURHA EQ WA_DRE_DADOS_ALV-WAERS.
            IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL021_DRE_DADOS-VLR_DOLAR.
          ELSEIF TG_T005-CURIN EQ WA_DRE_DADOS_ALV-WAERS.
            IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL021_DRE_DADOS-VLR_GRUPO.
          ENDIF.
          IT_EXCEL-VLR_REA   = IT_EXCEL-VLR_REA   + IT_ZGL021_DRE_DADOS-VLR_REA.
          IT_EXCEL-VLR_DOLAR = IT_EXCEL-VLR_DOLAR + IT_ZGL021_DRE_DADOS-VLR_DOLAR.
          IT_EXCEL-VLR_GRUPO = IT_EXCEL-VLR_GRUPO + IT_ZGL021_DRE_DADOS-VLR_GRUPO.
        ENDLOOP.
        LOOP AT IT_ZGL025_DRE_ACM WHERE NIVEL EQ P_ZGL015_DRE_EST03-NIVEL
                                    AND SAKNR EQ P_ZGL015_DRE_EST03-SAKNR.
          IF TG_T005-WAERS EQ WA_DRE_DADOS_ALV-WAERS.
            IT_ZGL029_EST-VLR_ACM = IT_ZGL029_EST-VLR_ACM + IT_ZGL025_DRE_ACM-VLR_REA.
          ELSEIF TG_T005-CURHA EQ WA_DRE_DADOS_ALV-WAERS.
            IT_ZGL029_EST-VLR_ACM = IT_ZGL029_EST-VLR_ACM + IT_ZGL025_DRE_ACM-VLR_DOLAR.
          ELSEIF TG_T005-CURIN EQ WA_DRE_DADOS_ALV-WAERS.
            IT_ZGL029_EST-VLR_ACM = IT_ZGL029_EST-VLR_ACM + IT_ZGL025_DRE_ACM-VLR_GRUPO.
          ENDIF.
*          it_excel-vlr_rea   = it_excel-vlr_rea   + it_zgl025_dre_acm-vlr_rea.
*          it_excel-vlr_dolar = it_excel-vlr_dolar + it_zgl025_dre_acm-vlr_dolar.
*          it_excel-vlr_grupo = it_excel-vlr_grupo + it_zgl025_dre_acm-vlr_grupo.

        ENDLOOP.
        IF SY-UCOMM NE OK_CEXCEL.
          IF ( IT_ZGL029_EST-VLR_REA EQ 0 ) AND ( IT_ZGL029_EST-VLR_ACM EQ 0 ).
            EXIT.
          ENDIF.
        ELSEIF IT_EXCEL-VLR_REA IS NOT INITIAL
          OR IT_EXCEL-VLR_DOLAR IS NOT INITIAL
          OR IT_EXCEL-VLR_GRUPO IS NOT INITIAL.
          MOVE: WA_DRE_DADOS_ALV-BUKRS TO IT_EXCEL-BUKRS,
              WA_DRE_DADOS_ALV-VERSN TO IT_EXCEL-VERSN,
              WA_DRE_DADOS_ALV-MONAT TO IT_EXCEL-MONAT,
              WA_DRE_DADOS_ALV-GJAHR TO IT_EXCEL-GJAHR,
              IT_ZGL029_EST-NIVEL TO IT_EXCEL-NIVEL,
              IT_ZGL029_EST-SAKNR TO IT_EXCEL-SAKNR,
              IT_ZGL029_EST-TXT50 TO IT_EXCEL-DESC.

          APPEND IT_EXCEL.
          CLEAR IT_EXCEL.
        ENDIF.
      ELSE.
*         LOOP AT IT_ZGL025_DRE_ACM WHERE NIVEL EQ P_ZGL015_DRE_EST03-NIVEL
*                                    AND SAKNR EQ P_ZGL015_DRE_EST03-SAKNR.
*          IT_ZGL029_EST-VLR_ACM = IT_ZGL029_EST-VLR_ACM + IT_ZGL025_DRE_ACM-VLR_REA.
*        ENDLOOP.
      ENDIF.

    ENDIF.

    IF NOT P_ZGL015_DRE_EST04_C IS INITIAL.
      IT_ZGL029_EST-KOSTL    = P_ZGL015_DRE_EST04_C-KOSTL.
      IT_ZGL029_EST-LTEXT_CC = P_ZGL015_DRE_EST04_C-LTEXT.
      IT_ZGL029_EST-VLR_REA  = 0.
      IT_ZGL029_EST-VLR_ACM  = 0.
      IT_ZGL029_EST-QTD_TON  = 0.
      IT_ZGL029_EST-QTD_ACM  = 0.


      READ TABLE IT_ZGL022_DRE_DADOS TRANSPORTING NO FIELDS
        WITH KEY NIVEL = P_ZGL015_DRE_EST04_C-NIVEL
                 SAKNR = P_ZGL015_DRE_EST04_C-SAKNR
                 KOSTL = P_ZGL015_DRE_EST04_C-KOSTL
                 BINARY SEARCH.

      IF SY-SUBRC IS INITIAL.
        WL_TABIX = SY-TABIX.

        LOOP AT IT_ZGL022_DRE_DADOS FROM WL_TABIX.
*                                    AND saknr EQ p_zgl015_dre_est04_c-saknr
*                                    AND kostl EQ p_zgl015_dre_est04_c-kostl.

          IF IT_ZGL022_DRE_DADOS-NIVEL NE  P_ZGL015_DRE_EST04_C-NIVEL
          OR IT_ZGL022_DRE_DADOS-SAKNR NE  P_ZGL015_DRE_EST04_C-SAKNR
          OR IT_ZGL022_DRE_DADOS-KOSTL NE  P_ZGL015_DRE_EST04_C-KOSTL.
            EXIT.
          ENDIF.
*        IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL022_DRE_DADOS-VLR_REA.
          IF TG_T005-WAERS EQ WA_DRE_DADOS_ALV-WAERS.
            IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL022_DRE_DADOS-VLR_REA.
          ELSEIF TG_T005-CURHA EQ WA_DRE_DADOS_ALV-WAERS.
            IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL022_DRE_DADOS-VLR_DOLAR.
          ELSEIF TG_T005-CURIN EQ WA_DRE_DADOS_ALV-WAERS.
            IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL022_DRE_DADOS-VLR_GRUPO.
          ENDIF.
          IT_EXCEL-VLR_REA   = IT_EXCEL-VLR_REA   + IT_ZGL022_DRE_DADOS-VLR_REA.
          IT_EXCEL-VLR_DOLAR = IT_EXCEL-VLR_DOLAR + IT_ZGL022_DRE_DADOS-VLR_DOLAR.
          IT_EXCEL-VLR_GRUPO = IT_EXCEL-VLR_GRUPO + IT_ZGL022_DRE_DADOS-VLR_GRUPO.
        ENDLOOP.
      ENDIF.

      READ TABLE IT_ZGL026_DRE_ACM TRANSPORTING NO FIELDS
       WITH KEY NIVEL = P_ZGL015_DRE_EST04_C-NIVEL
                SAKNR = P_ZGL015_DRE_EST04_C-SAKNR
                KOSTL = P_ZGL015_DRE_EST04_C-KOSTL
                BINARY SEARCH.
      IF SY-SUBRC IS INITIAL.
        WL_TABIX = SY-TABIX.

        LOOP AT IT_ZGL026_DRE_ACM FROM WL_TABIX.
*        LOOP AT it_zgl026_dre_acm WHERE nivel EQ p_zgl015_dre_est04_c-nivel
*                                    AND saknr EQ p_zgl015_dre_est04_c-saknr
*                                    AND kostl EQ p_zgl015_dre_est04_c-kostl.
*        it_zgl029_est-vlr_acm = it_zgl029_est-vlr_acm + it_zgl026_dre_acm-vlr_rea.
          IF IT_ZGL026_DRE_ACM-NIVEL NE  P_ZGL015_DRE_EST04_C-NIVEL
          OR IT_ZGL026_DRE_ACM-SAKNR NE  P_ZGL015_DRE_EST04_C-SAKNR
          OR IT_ZGL026_DRE_ACM-KOSTL NE  P_ZGL015_DRE_EST04_C-KOSTL.
            EXIT.
          ENDIF.
          IF TG_T005-WAERS EQ WA_DRE_DADOS_ALV-WAERS.
            IT_ZGL029_EST-VLR_ACM = IT_ZGL029_EST-VLR_ACM + IT_ZGL026_DRE_ACM-VLR_REA.
          ELSEIF TG_T005-CURHA EQ WA_DRE_DADOS_ALV-WAERS.
            IT_ZGL029_EST-VLR_ACM = IT_ZGL029_EST-VLR_ACM + IT_ZGL026_DRE_ACM-VLR_DOLAR.
          ELSEIF TG_T005-CURIN EQ WA_DRE_DADOS_ALV-WAERS.
            IT_ZGL029_EST-VLR_ACM = IT_ZGL029_EST-VLR_ACM + IT_ZGL026_DRE_ACM-VLR_GRUPO.
          ENDIF.
*          it_excel-vlr_rea   = it_excel-vlr_rea   + it_zgl026_dre_acm-vlr_rea.
*          it_excel-vlr_dolar = it_excel-vlr_dolar + it_zgl026_dre_acm-vlr_dolar.
*          it_excel-vlr_grupo = it_excel-vlr_grupo + it_zgl026_dre_acm-vlr_grupo.
        ENDLOOP.
      ENDIF.
      IF SY-UCOMM NE OK_CEXCEL.
        IF ( IT_ZGL029_EST-VLR_REA EQ 0 ) AND ( IT_ZGL029_EST-VLR_ACM EQ 0 ).
          EXIT.
        ENDIF.
      ELSEIF IT_EXCEL-VLR_REA IS NOT INITIAL
         OR IT_EXCEL-VLR_DOLAR IS NOT INITIAL
         OR IT_EXCEL-VLR_GRUPO IS NOT INITIAL.
        MOVE: WA_DRE_DADOS_ALV-BUKRS TO IT_EXCEL-BUKRS,
              WA_DRE_DADOS_ALV-VERSN TO IT_EXCEL-VERSN,
              WA_DRE_DADOS_ALV-MONAT TO IT_EXCEL-MONAT,
              WA_DRE_DADOS_ALV-GJAHR TO IT_EXCEL-GJAHR,
              IT_ZGL029_EST-NIVEL TO IT_EXCEL-NIVEL,
              IT_ZGL029_EST-SAKNR TO IT_EXCEL-SAKNR,
              IT_ZGL029_EST-TXT50 TO IT_EXCEL-DESC.

        APPEND IT_EXCEL.
        CLEAR IT_EXCEL.
      ENDIF.
    ENDIF.

    IF NOT P_ZGL015_DRE_EST05 IS INITIAL.
      IT_ZGL029_EST-PRCTR = P_ZGL015_DRE_EST05-PRCTR.
      READ TABLE IT_CEPCT WITH KEY PRCTR = P_ZGL015_DRE_EST05-PRCTR
                                   KOKRS = P_ZGL015_DRE_EST05-KOKRS.
      IF SY-SUBRC IS INITIAL.
        IT_ZGL029_EST-LTEXT_CL = IT_CEPCT-LTEXT.
      ENDIF.
      IT_ZGL029_EST-VLR_REA  = 0.
      IT_ZGL029_EST-VLR_ACM  = 0.
      IT_ZGL029_EST-QTD_TON  = 0.
      IT_ZGL029_EST-QTD_ACM  = 0.
      LOOP AT IT_ZGL023_DRE_DADOS WHERE NIVEL EQ P_ZGL015_DRE_EST05-NIVEL
                                    AND SAKNR EQ P_ZGL015_DRE_EST05-SAKNR
                                    AND PRCTR EQ P_ZGL015_DRE_EST05-PRCTR.
*        IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL023_DRE_DADOS-VLR_REA.
        IT_ZGL029_EST-QTD_TON = IT_ZGL029_EST-QTD_TON + IT_ZGL023_DRE_DADOS-QTD_TON.
        IF TG_T005-WAERS EQ WA_DRE_DADOS_ALV-WAERS.
          IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL023_DRE_DADOS-VLR_REA.
        ELSEIF TG_T005-CURHA EQ WA_DRE_DADOS_ALV-WAERS.
          IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL023_DRE_DADOS-VLR_DOLAR.
        ELSEIF TG_T005-CURIN EQ WA_DRE_DADOS_ALV-WAERS.
          IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL023_DRE_DADOS-VLR_GRUPO.
        ENDIF.
        IT_EXCEL-QTD_TON   = IT_EXCEL-QTD_TON   + IT_ZGL023_DRE_DADOS-QTD_TON.
        IT_EXCEL-VLR_REA   = IT_EXCEL-VLR_REA   + IT_ZGL023_DRE_DADOS-VLR_REA.
        IT_EXCEL-VLR_DOLAR = IT_EXCEL-VLR_DOLAR + IT_ZGL023_DRE_DADOS-VLR_DOLAR.
        IT_EXCEL-VLR_GRUPO = IT_EXCEL-VLR_GRUPO + IT_ZGL023_DRE_DADOS-VLR_GRUPO.
      ENDLOOP.
      LOOP AT IT_ZGL027_DRE_ACM WHERE NIVEL EQ P_ZGL015_DRE_EST05-NIVEL
                                  AND SAKNR EQ P_ZGL015_DRE_EST05-SAKNR
                                  AND PRCTR EQ P_ZGL015_DRE_EST05-PRCTR.
*        it_zgl029_est-vlr_acm = it_zgl029_est-vlr_acm + it_zgl027_dre_acm-vlr_rea.
        IT_ZGL029_EST-QTD_ACM = IT_ZGL029_EST-QTD_ACM + IT_ZGL027_DRE_ACM-QTD_TON.
        IF TG_T005-WAERS EQ WA_DRE_DADOS_ALV-WAERS.
          IT_ZGL029_EST-VLR_ACM = IT_ZGL029_EST-VLR_ACM + IT_ZGL027_DRE_ACM-VLR_REA.
        ELSEIF TG_T005-CURHA EQ WA_DRE_DADOS_ALV-WAERS.
          IT_ZGL029_EST-VLR_ACM = IT_ZGL029_EST-VLR_ACM + IT_ZGL027_DRE_ACM-VLR_DOLAR.
        ELSEIF TG_T005-CURIN EQ WA_DRE_DADOS_ALV-WAERS.
          IT_ZGL029_EST-VLR_ACM = IT_ZGL029_EST-VLR_ACM + IT_ZGL027_DRE_ACM-VLR_GRUPO.
        ENDIF.
*        it_excel-vlr_rea   = it_excel-vlr_rea   + it_zgl027_dre_acm-vlr_rea.
*        it_excel-vlr_dolar = it_excel-vlr_dolar + it_zgl027_dre_acm-vlr_dolar.
*        it_excel-vlr_grupo = it_excel-vlr_grupo + it_zgl027_dre_acm-vlr_grupo.
      ENDLOOP.
      IF SY-UCOMM NE OK_CEXCEL.
        IF ( IT_ZGL029_EST-VLR_REA EQ 0 ) AND ( IT_ZGL029_EST-VLR_ACM EQ 0 ) AND
           ( IT_ZGL029_EST-QTD_TON EQ 0 ) AND ( IT_ZGL029_EST-QTD_ACM EQ 0 ).
          EXIT.
        ENDIF.
      ELSEIF IT_EXCEL-VLR_REA IS NOT INITIAL
        OR IT_EXCEL-VLR_DOLAR IS NOT INITIAL
        OR IT_EXCEL-VLR_GRUPO IS NOT INITIAL.
        MOVE: WA_DRE_DADOS_ALV-BUKRS TO IT_EXCEL-BUKRS,
              WA_DRE_DADOS_ALV-VERSN TO IT_EXCEL-VERSN,
              WA_DRE_DADOS_ALV-MONAT TO IT_EXCEL-MONAT,
              WA_DRE_DADOS_ALV-GJAHR TO IT_EXCEL-GJAHR,
              IT_ZGL029_EST-NIVEL TO IT_EXCEL-NIVEL,
              IT_ZGL029_EST-SAKNR TO IT_EXCEL-SAKNR,
              IT_ZGL029_EST-TXT50 TO IT_EXCEL-DESC.

        APPEND IT_EXCEL.
        CLEAR IT_EXCEL.
      ENDIF.
    ENDIF.

    IF NOT P_ZGL015_DRE_EST06 IS INITIAL.

      IT_ZGL029_EST-MATKL = P_ZGL015_DRE_EST06-MATKL.
      READ TABLE IT_T023T WITH KEY MATKL = P_ZGL015_DRE_EST06-MATKL.
      IF SY-SUBRC IS INITIAL.
        IT_ZGL029_EST-WGBEZ60 = IT_T023T-WGBEZ60.
      ENDIF.
      IT_ZGL029_EST-VLR_REA  = 0.
      IT_ZGL029_EST-VLR_ACM  = 0.
      IT_ZGL029_EST-QTD_TON  = 0.
      IT_ZGL029_EST-QTD_ACM  = 0.
      LOOP AT IT_ZGL024_DRE_DADOS WHERE NIVEL EQ P_ZGL015_DRE_EST06-NIVEL
                                    AND SAKNR EQ P_ZGL015_DRE_EST06-SAKNR
                                    AND MATKL EQ P_ZGL015_DRE_EST06-MATKL.
*        IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL024_DRE_DADOS-VLR_REA.
        IT_ZGL029_EST-QTD_TON = IT_ZGL029_EST-QTD_TON + IT_ZGL024_DRE_DADOS-QTD_TON.
        IF TG_T005-WAERS EQ WA_DRE_DADOS_ALV-WAERS.
          IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL024_DRE_DADOS-VLR_REA.
        ELSEIF TG_T005-CURHA EQ WA_DRE_DADOS_ALV-WAERS.
          IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL024_DRE_DADOS-VLR_DOLAR.
        ELSEIF TG_T005-CURIN EQ WA_DRE_DADOS_ALV-WAERS.
          IT_ZGL029_EST-VLR_REA = IT_ZGL029_EST-VLR_REA + IT_ZGL024_DRE_DADOS-VLR_GRUPO.
        ENDIF.
        IT_EXCEL-QTD_TON   = IT_EXCEL-QTD_TON   + IT_ZGL024_DRE_DADOS-QTD_TON.
        IT_EXCEL-VLR_REA   = IT_EXCEL-VLR_REA   + IT_ZGL024_DRE_DADOS-VLR_REA.
        IT_EXCEL-VLR_DOLAR = IT_EXCEL-VLR_DOLAR + IT_ZGL024_DRE_DADOS-VLR_DOLAR.
        IT_EXCEL-VLR_GRUPO = IT_EXCEL-VLR_GRUPO + IT_ZGL024_DRE_DADOS-VLR_GRUPO.
      ENDLOOP.
      LOOP AT IT_ZGL028_DRE_ACM WHERE NIVEL EQ P_ZGL015_DRE_EST06-NIVEL
                                  AND SAKNR EQ P_ZGL015_DRE_EST06-SAKNR
                                  AND MATKL EQ P_ZGL015_DRE_EST06-MATKL.
*        it_zgl029_est-vlr_acm = it_zgl029_est-vlr_acm + it_zgl028_dre_acm-vlr_rea.
        IT_ZGL029_EST-QTD_ACM = IT_ZGL029_EST-QTD_ACM + IT_ZGL028_DRE_ACM-QTD_TON.
        IF TG_T005-WAERS EQ WA_DRE_DADOS_ALV-WAERS.
          IT_ZGL029_EST-VLR_ACM = IT_ZGL029_EST-VLR_ACM + IT_ZGL028_DRE_ACM-VLR_REA.
        ELSEIF TG_T005-CURHA EQ WA_DRE_DADOS_ALV-WAERS.
          IT_ZGL029_EST-VLR_ACM = IT_ZGL029_EST-VLR_ACM + IT_ZGL028_DRE_ACM-VLR_DOLAR.
        ELSEIF TG_T005-CURIN EQ WA_DRE_DADOS_ALV-WAERS.
          IT_ZGL029_EST-VLR_ACM = IT_ZGL029_EST-VLR_ACM + IT_ZGL028_DRE_ACM-VLR_GRUPO.
        ENDIF.
*        it_excel-vlr_rea   = it_excel-vlr_rea   + it_zgl028_dre_acm-vlr_rea.
*        it_excel-vlr_dolar = it_excel-vlr_dolar + it_zgl028_dre_acm-vlr_dolar.
*        it_excel-vlr_grupo = it_excel-vlr_grupo + it_zgl028_dre_acm-vlr_grupo.
      ENDLOOP.
      IF SY-UCOMM NE OK_CEXCEL.
        IF ( IT_ZGL029_EST-VLR_REA EQ 0 ) AND ( IT_ZGL029_EST-VLR_ACM EQ 0 ) AND
           ( IT_ZGL029_EST-QTD_TON EQ 0 ) AND ( IT_ZGL029_EST-QTD_ACM EQ 0 ).
          EXIT.
        ENDIF.
      ELSEIF IT_EXCEL-VLR_REA IS NOT INITIAL
        OR IT_EXCEL-VLR_DOLAR IS NOT INITIAL
        OR IT_EXCEL-VLR_GRUPO IS NOT INITIAL.
        MOVE: WA_DRE_DADOS_ALV-BUKRS TO IT_EXCEL-BUKRS,
              WA_DRE_DADOS_ALV-VERSN TO IT_EXCEL-VERSN,
              WA_DRE_DADOS_ALV-MONAT TO IT_EXCEL-MONAT,
              WA_DRE_DADOS_ALV-GJAHR TO IT_EXCEL-GJAHR,
              IT_ZGL029_EST-NIVEL TO IT_EXCEL-NIVEL,
              IT_ZGL029_EST-SAKNR TO IT_EXCEL-SAKNR,
              IT_ZGL029_EST-TXT50 TO IT_EXCEL-DESC.

        APPEND IT_EXCEL.
        CLEAR IT_EXCEL.
      ENDIF.
    ENDIF.


    IF NOT P_ZGL015_DRE_EST07 IS INITIAL.

      DELETE ADJACENT DUPLICATES FROM IT_ZGL029_EST COMPARING ALL FIELDS.
      LOOP AT IT_ZGL015_DRE_EST07 WHERE NIVEL EQ P_ZGL015_DRE_EST07-NIVEL.
*        LOOP AT IT_ZGL029_EST into wl_zgl029_est WHERE VLR_REA NE SPACE AND NIVEL(2) = IT_ZGL015_DRE_EST07-NIVEL_AGPD.
        LOOP AT IT_ZGL029_EST INTO WL_ZGL029_EST WHERE NIVEL(2) = IT_ZGL015_DRE_EST07-NIVEL_AGPD.
*          SOMA_VLR_REA = SOMA_VLR_REA + IT_ZGL029_EST-VLR_REA.
          SOMA_VLR_REA = SOMA_VLR_REA + WL_ZGL029_EST-VLR_REA.
*          SOMA_VLR_ACM = SOMA_VLR_ACM + IT_ZGL029_EST-VLR_ACM.
          SOMA_VLR_ACM = SOMA_VLR_ACM + WL_ZGL029_EST-VLR_ACM.
        ENDLOOP.
      ENDLOOP.

      IT_ZGL029_EST-NIVEL   = P_ZGL015_DRE_EST07-NIVEL.
      IT_ZGL029_EST-VLR_REA = SOMA_VLR_REA.
      IT_ZGL029_EST-VLR_ACM = SOMA_VLR_ACM.
      IT_ZGL029_EST-NITXT   = P_ZGL015_DRE_EST02-NITXT.

      CLEAR: SOMA_VLR_REA,
             SOMA_VLR_ACM.
    ENDIF.

    IF SY-UCOMM NE OK_CEXCEL.
      APPEND IT_ZGL029_EST.
    ENDIF.
  ENDFORM.                    " INSERT_EST

*&---------------------------------------------------------------------*
*&      Form  ADD_NODE_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM ADD_NODE_ALV  USING    P_IT_ZGL029_EST TYPE ZGL029_EST
                              VKEY_RELAT      TYPE LVC_NKEY
                     CHANGING P_VKEY_NIVEL    TYPE LVC_NKEY.

    DATA: L_NODE_TEXT    TYPE LVC_VALUE,
          LS_ZGL029_EST  TYPE ZGL029_EST,
          LT_ITEM_LAYOUT TYPE LVC_T_LAYI,
          LS_ITEM_LAYOUT TYPE LVC_S_LAYI,
          VG_ACHOU       TYPE C LENGTH 1.

    DATA: LS_NODE TYPE LVC_S_LAYN.
*    clear: vg_achou.
*
    CLEAR: IT_ZGL015_DRE_EST02.
    READ TABLE IT_ZGL015_DRE_EST02 WITH KEY NIVEL = P_IT_ZGL029_EST-NIVEL.
*    read table it_zgl015_dre_est03 with key nivel = it_zgl015_dre_est02-nivel.
*    if sy-subrc is initial.
*      vg_achou = c_x.
*    else.
*      clear: it_zgl015_dre_est02.
*      read table it_zgl015_dre_est02 with key nivel_ant = it_zgl015_dre_est02-nivel.
*      if sy-subrc is initial.
*        read table it_zgl015_dre_est03 with key nivel = it_zgl015_dre_est02-nivel.
*        if sy-subrc is initial.
*          vg_achou = c_x.
*        else.
*          clear: it_zgl015_dre_est02.
*          read table it_zgl015_dre_est02 with key nivel_ant = it_zgl015_dre_est02-nivel.
*          if sy-subrc is initial.
*            read table it_zgl015_dre_est03 with key nivel = it_zgl015_dre_est02-nivel.
*            if sy-subrc is initial.
*              vg_achou = c_x.
*            else.
*              clear: it_zgl015_dre_est02.
*              read table it_zgl015_dre_est02 with key nivel_ant = it_zgl015_dre_est02-nivel.
*              if sy-subrc is initial.
*                read table it_zgl015_dre_est03 with key nivel = it_zgl015_dre_est02-nivel.
*                if sy-subrc is initial.
*                  vg_achou = c_x.
*                else.
*                  clear: it_zgl015_dre_est02.
*                  read table it_zgl015_dre_est02 with key nivel_ant = it_zgl015_dre_est02-nivel.
*                  if sy-subrc is initial.
*                    read table it_zgl015_dre_est03 with key nivel = it_zgl015_dre_est02-nivel.
*                    if sy-subrc is initial.
*                      vg_achou = c_x.
*                    endif.
*                  endif.
*                endif.
*              endif.
*            endif.
*          endif.
*        endif.
*      endif.
*    endif.
*
*    if not vg_achou is initial.
    LS_ITEM_LAYOUT-FIELDNAME = TREE1->C_HIERARCHY_COLUMN_NAME.
    APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
    CONCATENATE P_IT_ZGL029_EST-NIVEL '-' P_IT_ZGL029_EST-NITXT INTO L_NODE_TEXT SEPARATED BY SPACE.
    IF NOT SY-SUBRC IS INITIAL.
      LS_NODE-N_IMAGE   = ICON_NEXT_NODE.
      LS_NODE-EXP_IMAGE = ICON_PREVIOUS_NODE.
    ELSEIF ( SY-SUBRC IS INITIAL ) AND ( IT_ZGL015_DRE_EST02-NIVEL_TOTAL IS INITIAL ).
      LS_NODE-N_IMAGE   = ICON_NEXT_NODE.
      LS_NODE-EXP_IMAGE = ICON_PREVIOUS_NODE.
    ELSE.
      LS_NODE-N_IMAGE   = ICON_SUM.
      LS_NODE-EXP_IMAGE = ICON_SUM.
    ENDIF.

    CALL METHOD TREE1->ADD_NODE
      EXPORTING
        I_RELAT_NODE_KEY = VKEY_RELAT
        I_RELATIONSHIP   = CL_GUI_COLUMN_TREE=>RELAT_LAST_CHILD
        I_NODE_TEXT      = L_NODE_TEXT
        IS_OUTTAB_LINE   = P_IT_ZGL029_EST
        IS_NODE_LAYOUT   = LS_NODE
        IT_ITEM_LAYOUT   = LT_ITEM_LAYOUT
      IMPORTING
        E_NEW_NODE_KEY   = P_VKEY_NIVEL.
*    endif.

  ENDFORM.                    " ADD_NODE_ALV

*&---------------------------------------------------------------------*
*&      Form  ADD_NODE_COMPLETE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM ADD_NODE_COMPLETE  USING    P_IT_ZGL029_EST TYPE ZGL029_EST
                                   P_VKEY_NIVEL00  TYPE LVC_NKEY
                          CHANGING P_VKEY_ULTIMO   TYPE LVC_NKEY.

    DATA: L_NODE_TEXT TYPE LVC_VALUE.

* set item-layout
    DATA: LT_ITEM_LAYOUT TYPE LVC_T_LAYI,
          LS_ITEM_LAYOUT TYPE LVC_S_LAYI,
          LS_NODE        TYPE LVC_S_LAYN.

    LS_ITEM_LAYOUT-FIELDNAME = TREE1->C_HIERARCHY_COLUMN_NAME.
    APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
    CLEAR LS_ITEM_LAYOUT.
    LS_ITEM_LAYOUT-FIELDNAME = 'VLR_REA'.
    LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
    APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
    LS_ITEM_LAYOUT-FIELDNAME = 'VLR_ACM'.
    LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
    APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
    LS_ITEM_LAYOUT-FIELDNAME = 'QTD_TON'.
    LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
    APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
    LS_ITEM_LAYOUT-FIELDNAME = 'QTD_ACM'.
    LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
    APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.

    IF NOT P_IT_ZGL029_EST-KOSTL IS INITIAL.
      CONCATENATE P_IT_ZGL029_EST-KOSTL '-' P_IT_ZGL029_EST-LTEXT_CC INTO L_NODE_TEXT SEPARATED BY SPACE.
      LS_NODE-N_IMAGE   = ICON_BIW_APPLICATION.
      LS_NODE-EXP_IMAGE = ICON_BIW_APPLICATION.
    ELSEIF NOT P_IT_ZGL029_EST-PRCTR IS INITIAL.
      CONCATENATE P_IT_ZGL029_EST-PRCTR '-' P_IT_ZGL029_EST-LTEXT_CL INTO L_NODE_TEXT SEPARATED BY SPACE.
      LS_NODE-N_IMAGE   = ICON_BIW_INFO_AREA.
      LS_NODE-EXP_IMAGE = ICON_BIW_INFO_AREA.
    ELSEIF NOT P_IT_ZGL029_EST-MATKL IS INITIAL.
      CONCATENATE P_IT_ZGL029_EST-MATKL '-' P_IT_ZGL029_EST-WGBEZ60 INTO L_NODE_TEXT SEPARATED BY SPACE.
      LS_NODE-N_IMAGE   = ICON_BIW_INFO_CUBE.
      LS_NODE-EXP_IMAGE = ICON_BIW_INFO_CUBE.
    ENDIF.

    CALL METHOD TREE1->ADD_NODE
      EXPORTING
        I_RELAT_NODE_KEY = P_VKEY_NIVEL00
        I_RELATIONSHIP   = CL_GUI_COLUMN_TREE=>RELAT_LAST_CHILD
        IS_OUTTAB_LINE   = P_IT_ZGL029_EST
        I_NODE_TEXT      = L_NODE_TEXT
        IS_NODE_LAYOUT   = LS_NODE
        IT_ITEM_LAYOUT   = LT_ITEM_LAYOUT
      IMPORTING
        E_NEW_NODE_KEY   = P_VKEY_ULTIMO.

  ENDFORM.                    " ADD_NODE_COMPLETE

*&---------------------------------------------------------------------*
*&      Form  ADD_NODE_SAKNR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM ADD_NODE_SAKNR_ALV  USING    P_ZGL029_EST    TYPE ZGL029_EST
                                    P_VKEY_NIVEL00  TYPE LVC_NKEY
                           CHANGING P_VKEY_SAKNR    TYPE LVC_NKEY.

    DATA: L_NODE_TEXT    TYPE LVC_VALUE,
          LS_ZGL029_EST  TYPE ZGL029_EST,
          LT_ITEM_LAYOUT TYPE LVC_T_LAYI,
          LS_ITEM_LAYOUT TYPE LVC_S_LAYI,
          LS_NODE        TYPE LVC_S_LAYN.

    IF ( P_ZGL029_EST-VLR_REA NE 0 ) OR ( P_ZGL029_EST-VLR_ACM NE 0 ) OR ( P_ZGL029_EST-QTD_TON NE 0 ) OR ( P_ZGL029_EST-QTD_ACM NE 0 ).
      LS_ITEM_LAYOUT-FIELDNAME = TREE1->C_HIERARCHY_COLUMN_NAME.
      APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
      CLEAR LS_ITEM_LAYOUT.
      LS_ITEM_LAYOUT-FIELDNAME = 'VLR_REA'.
      LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
      APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
      LS_ITEM_LAYOUT-FIELDNAME = 'VLR_ACM'.
      LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
      APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
      LS_ITEM_LAYOUT-FIELDNAME = 'QTD_TON'.
      LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
      APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
      LS_ITEM_LAYOUT-FIELDNAME = 'QTD_ACM'.
      LS_ITEM_LAYOUT-ALIGNMENT = CL_GUI_COLUMN_TREE=>ALIGN_RIGHT.
      APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
    ELSE.
      LS_ITEM_LAYOUT-FIELDNAME = TREE1->C_HIERARCHY_COLUMN_NAME.
      APPEND LS_ITEM_LAYOUT TO LT_ITEM_LAYOUT.
    ENDIF.

    LS_NODE-N_IMAGE   = ICON_SUBSCRIPTION.
    LS_NODE-EXP_IMAGE = ICON_OUTBOX.
    CONCATENATE P_ZGL029_EST-SAKNR '-' P_ZGL029_EST-TXT50 INTO L_NODE_TEXT SEPARATED BY SPACE.

    CALL METHOD TREE1->ADD_NODE
      EXPORTING
        I_RELAT_NODE_KEY = P_VKEY_NIVEL00
        I_RELATIONSHIP   = CL_GUI_COLUMN_TREE=>RELAT_LAST_CHILD
        I_NODE_TEXT      = L_NODE_TEXT
        IS_OUTTAB_LINE   = P_ZGL029_EST "LS_ZGL029_EST
        IS_NODE_LAYOUT   = LS_NODE
        IT_ITEM_LAYOUT   = LT_ITEM_LAYOUT
      IMPORTING
        E_NEW_NODE_KEY   = P_VKEY_SAKNR.

*    if ( p_zgl029_est-vlr_rea ne 0 ) or ( p_zgl029_est-vlr_acm ne 0 ) or ( p_zgl029_est-qtd_ton ne 0 ) or ( p_zgl029_est-qtd_acm ne 0 ).
*      p_vkey_saknr = p_vkey_nivel00.
*    else.
*      read table
*    endif.

  ENDFORM.                    " ADD_NODE_SAKNR_ALV

*&---------------------------------------------------------------------*
*&      Form  F_CABECALHO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_VL_LIST_COMMENTARY  text
*----------------------------------------------------------------------*
  FORM F_CABECALHO  USING    P_LIST_COMMENTARY TYPE SLIS_T_LISTHEADER.

    DATA: WA_MES    LIKE T247,
          IT_MES    LIKE STANDARD TABLE OF WA_MES,
          VG_TITULO LIKE ZGL001_DRE_EST-VSTXT.

    DATA: VL_LINE    TYPE SLIS_LISTHEADER,
          VL_TXT     TYPE C LENGTH 50,
          VL_EMPRESA TYPE C LENGTH 50,
          VL_DATA    TYPE C LENGTH 14,
          VL_HORA    TYPE C LENGTH 8.

    CALL FUNCTION 'MONTH_NAMES_GET'
      EXPORTING
        LANGUAGE    = SY-LANGU
      TABLES
        MONTH_NAMES = IT_MES.

    READ TABLE IT_MES INTO WA_MES WITH KEY MNR = WA_DRE_DADOS_ALV-MONAT.

    VL_TXT = WA_MES-LTX.

    SELECT SINGLE BUTXT
      FROM T001
      INTO VL_EMPRESA
     WHERE BUKRS EQ WA_DRE_DADOS_ALV-BUKRS.

    CONCATENATE VG_TITULO '[' VL_TXT '-' WA_DRE_DADOS_ALV-GJAHR ']' INTO VL_TXT.

    CLEAR VL_LINE.
    VL_LINE-TYP  = 'H'.
    VL_LINE-INFO = VL_TXT.
    APPEND VL_LINE TO P_LIST_COMMENTARY.
    CLEAR VL_LINE.
    VL_LINE-TYP  = 'S'.
    VL_LINE-KEY = VL_EMPRESA.
    APPEND VL_LINE TO P_LIST_COMMENTARY.

*    clear vl_line.
*    vl_line-typ  = 'S'.
*    vl_line-key  = 'Moeda:'.
*    vl_line-info = wa_dre_001-waers.
*    append vl_line to p_list_commentary.

    CONCATENATE WA_DRE_DADOS_ALV-DATUM_TERM+6(2)
                '.' WA_DRE_DADOS_ALV-DATUM_TERM+4(2)
                '.' WA_DRE_DADOS_ALV-DATUM_TERM(4) INTO VL_DATA.

    CONCATENATE WA_DRE_DADOS_ALV-UZEIT_TERM(2)
                ':' WA_DRE_DADOS_ALV-UZEIT_TERM+2(2)
                ':' WA_DRE_DADOS_ALV-UZEIT_TERM+4(2) INTO VL_HORA.

    MESSAGE S010 WITH WA_DRE_DADOS_ALV-UNAME_PROG VL_DATA VL_HORA INTO VL_TXT.
    "CONCATENATE  WA_DRE_DADOS_ALV-UNAME_PROG 'em' VL_DATA '-' VL_HORA INTO VL_TXT SEPARATED BY SPACE.

    CLEAR VL_LINE.
    VL_LINE-TYP  = 'S'.
    "VL_LINE-KEY  = 'Gerado por:'.
    MESSAGE S011 INTO VL_LINE-KEY.
    VL_LINE-INFO = VL_TXT.
    APPEND VL_LINE TO P_LIST_COMMENTARY.

  ENDFORM.                    " F_CABECALHO

*&---------------------------------------------------------------------*
*&      Form  F_HIERARCHY_HEADER_
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_L_HIERARCHY_HEADER  text
*----------------------------------------------------------------------*
  FORM F_HIERARCHY_HEADER_  CHANGING P_HIERARCHY_HEADER TYPE TREEV_HHDR.
    "P_HIERARCHY_HEADER-HEADING = 'Itens'.
    MESSAGE S012 INTO P_HIERARCHY_HEADER-HEADING.
    P_HIERARCHY_HEADER-TOOLTIP = P_HIERARCHY_HEADER-HEADING.
    P_HIERARCHY_HEADER-WIDTH = 35.
    P_HIERARCHY_HEADER-WIDTH_PIX = ''.
  ENDFORM.                    " F_HIERARCHY_HEADER_
