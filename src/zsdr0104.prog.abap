*&---------------------------------------------------------------------*
*& Report  ZSDR0104
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZSDR0104.

CLASS LCL_ALV_TOOLBAR   DEFINITION DEFERRED.

TABLES ZIB_NFE_DIST_TER.

DATA: DG_SPLITTER        TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
      CTL_CCCONTAINER    TYPE REF TO CL_GUI_CONTAINER,
      CTL_ALV            TYPE REF TO CL_GUI_ALV_GRID,
      IT_FIELDCATALOG    TYPE LVC_T_FCAT,
      GS_VARIANT         TYPE DISVARIANT,
      GS_LAYOUT          TYPE LVC_S_LAYO,
      IT_EXCLUDE_FCODE   TYPE UI_FUNCTIONS,
      OBG_TOOLBAR        TYPE REF TO LCL_ALV_TOOLBAR,
      OBJ_TOOLBARMANAGER TYPE REF TO CL_ALV_GRID_TOOLBAR_MANAGER,
      IT_ZSDT0001        TYPE TABLE OF ZSDT0001,
      IT_EXCEPT_QINFO    TYPE LVC_T_QINF.

CLASS LCL_ALV_TOOLBAR DEFINITION.
  PUBLIC SECTION.
*Constructor
    METHODS: CONSTRUCTOR         IMPORTING IO_ALV_GRID TYPE REF TO CL_GUI_ALV_GRID,
      ON_TOOLBAR          FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID IMPORTING E_OBJECT,
      HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID IMPORTING E_UCOMM.
ENDCLASS.                    "lcl_alv_toolbar DEFINITION


CLASS LCL_ALV_TOOLBAR IMPLEMENTATION.

  METHOD CONSTRUCTOR.
*   Create ALV toolbar manager instance
    CREATE OBJECT OBJ_TOOLBARMANAGER
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.

  ENDMETHOD.                    "constructor

  METHOD ON_TOOLBAR.

    DATA: TY_TOOLBAR   TYPE STB_BUTTON.
*    "Separador
    TY_TOOLBAR-BUTN_TYPE = 3.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR TY_TOOLBAR.

    "Editar Nota Fiscal
    TY_TOOLBAR-ICON      = ICON_MAPPED_RELATION.
    TY_TOOLBAR-FUNCTION  = 'DISP_CCT'.
    TY_TOOLBAR-QUICKINFO = TEXT-002.
    TY_TOOLBAR-TEXT      = TEXT-002.
    TY_TOOLBAR-BUTN_TYPE = 0.
    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR: TY_TOOLBAR.

    CALL METHOD OBJ_TOOLBARMANAGER->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.

  ENDMETHOD.                    "on_toolbar

  METHOD HANDLE_USER_COMMAND.

    DATA: ET_INDEX_ROWS	TYPE LVC_T_ROW,
          IT_SEL        TYPE TABLE OF ZSDT0001.

    CALL METHOD CTL_ALV->GET_SELECTED_ROWS
      IMPORTING
        ET_INDEX_ROWS = ET_INDEX_ROWS.

    IF ET_INDEX_ROWS[] IS INITIAL.
      READ TABLE IT_ZSDT0001 INTO DATA(WA_ZSDT0001) INDEX 1.
      CHECK SY-SUBRC IS INITIAL.
      APPEND WA_ZSDT0001 TO IT_SEL.
    ELSE.
      LOOP AT ET_INDEX_ROWS INTO DATA(WA_INDEX_ROWS).
        READ TABLE IT_ZSDT0001 INTO WA_ZSDT0001 INDEX WA_INDEX_ROWS-INDEX.
        APPEND WA_ZSDT0001 TO IT_SEL.
      ENDLOOP.
    ENDIF.

    CASE E_UCOMM.
      WHEN 'DISP_CCT'.
        PERFORM DISPONIBILIZAR_CCT TABLES IT_SEL.
    ENDCASE.
  ENDMETHOD. "zm_handle_user_command

ENDCLASS.                    "LCL_ALV_TOOLBAR_N55 IMPLEMENTATION

SELECTION-SCREEN BEGIN OF BLOCK NFE01 WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS: P0001 FOR ZIB_NFE_DIST_TER-CHAVE_NFE OBLIGATORY.
SELECTION-SCREEN END OF BLOCK NFE01.

START-OF-SELECTION.

  SELECT * INTO TABLE @IT_ZSDT0001
    FROM ZSDT0001
   WHERE CHAVE_NFE IN @P0001.

  IF IT_ZSDT0001[] IS NOT INITIAL.
    SELECT * INTO TABLE @DATA(IT_ZIB_NFE_DIST_ITM)
      FROM ZIB_NFE_DIST_ITM
       FOR ALL ENTRIES IN @IT_ZSDT0001
     WHERE CHAVE_NFE EQ @IT_ZSDT0001-CHAVE_NFE.
  ENDIF.

END-OF-SELECTION.

  CALL SCREEN 0100.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.

  SET PF-STATUS 'PF0100'.
  SET TITLEBAR 'TL0100'.

  IF DG_SPLITTER IS INITIAL.

    CREATE OBJECT DG_SPLITTER
      EXPORTING
        PARENT  = CL_GUI_CONTAINER=>SCREEN0
        ROWS    = 1
        COLUMNS = 1.

    CTL_CCCONTAINER = DG_SPLITTER->GET_CONTAINER( ROW = 1 COLUMN = 1 ).

    CREATE OBJECT CTL_ALV
      EXPORTING
        I_PARENT = CTL_CCCONTAINER.

    PERFORM FILL_IT_FIELDCATALOG.

    "Hints
    "PERFORM FILL_IT_HINTS.

*   Fill info for layout variant
    PERFORM FILL_GS_VARIANT.

*   Set layout parameters for ALV grid
    "GS_LAYOUT-GRID_TITLE = TEXT-100.
    GS_LAYOUT-SEL_MODE   = 'A'.
*    GS_LAYOUT-INFO_FNAME = 'LINE_COLOR'.
*    GS_LAYOUT-STYLEFNAME = 'STYLE'.
*    GS_LAYOUT-CTAB_FNAME = 'COLOR_CELL'.
    GS_LAYOUT-ZEBRA      = ABAP_FALSE.

    CLEAR: IT_EXCLUDE_FCODE, IT_EXCLUDE_FCODE[].

    CREATE OBJECT OBG_TOOLBAR
      EXPORTING
        IO_ALV_GRID = CTL_ALV.

    SET HANDLER OBG_TOOLBAR->ON_TOOLBAR FOR CTL_ALV.
    SET HANDLER OBG_TOOLBAR->HANDLE_USER_COMMAND FOR CTL_ALV.

    CALL METHOD CTL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT
        IS_VARIANT           = GS_VARIANT
        IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
        I_SAVE               = 'A'
        IT_EXCEPT_QINFO      = IT_EXCEPT_QINFO
      CHANGING
        IT_FIELDCATALOG      = IT_FIELDCATALOG
        IT_OUTTAB            = IT_ZSDT0001[].

  ENDIF.

  CTL_ALV->REFRESH_TABLE_DISPLAY( ).

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100_EXIT INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  FILL_IT_FIELDCATALOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_IT_FIELDCATALOG .

  DATA: LC_COL_POS  TYPE LVC_COLPOS.

  FIELD-SYMBOLS: <FS_CAT> TYPE LVC_S_FCAT.

  CLEAR: IT_FIELDCATALOG[].

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      I_STRUCTURE_NAME = 'ZSDT0001'
    CHANGING
      CT_FIELDCAT      = IT_FIELDCATALOG.

  LOOP AT IT_FIELDCATALOG ASSIGNING <FS_CAT>.
    <FS_CAT>-TABNAME = 'ZSDT0001'.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FILL_GS_VARIANT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_GS_VARIANT .

  GS_VARIANT-REPORT      = SY-REPID.
  GS_VARIANT-HANDLE      = '0100'.
  GS_VARIANT-LOG_GROUP   = ABAP_FALSE.
  GS_VARIANT-USERNAME    = ABAP_FALSE.
  GS_VARIANT-VARIANT     = ABAP_FALSE.
  GS_VARIANT-TEXT        = ABAP_FALSE.
  GS_VARIANT-DEPENDVARS  = ABAP_FALSE.

ENDFORM.

FORM DISPONIBILIZAR_CCT TABLES TB_ZSDT0001 STRUCTURE ZSDT0001.

  DATA: ZCL_CCT_CONTROL_NF TYPE REF TO ZCL_CCT_CONTROL_NF.

  LOOP AT TB_ZSDT0001 INTO DATA(WA_VINCULAR).

    FREE ZCL_CCT_CONTROL_NF.
    CREATE OBJECT ZCL_CCT_CONTROL_NF.
    DATA(_ATRIB) = ZCL_CCT_CONTROL_NF->ATRIBUIR_NF_ROM( I_CH_REFERENCIA = WA_VINCULAR-CH_REFERENCIA I_NAO_VALIDAR = ABAP_TRUE ).
    IF _ATRIB EQ ABAP_TRUE.
      ZCL_CCT_CONTROL_NF->DISP_NF_CCT( ).
    ENDIF.

  ENDLOOP.


ENDFORM.
