*&---------------------------------------------------------------------*
*& Report  ZSDT0067
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZSDT0067.

TABLES: EKKO,EKPO, S031.

INITIALIZATION.


  TYPES: BEGIN OF TY_SAIDA,
           MATNR  TYPE EKPO-MATNR, "codigo material
           TXZ01  TYPE EKPO-TXZ01,  " descrição MATERIAL
           UNID   TYPE EKPO-MEINS,  "unidade
           LBKUM  TYPE KONV-KBETR, "quantidade estoque
           MENGE  TYPE KONV-KBETR,    "QUANTIDADE PEDIDO
           QTDFAT TYPE KONV-KBETR,   "QUANTIDADE FATURADA
           SALDO  TYPE KONV-KBETR,    "CALCULO
         END OF TY_SAIDA.



  TYPES: BEGIN OF TY_SAIDA_AUX,
           MATNR  TYPE EKPO-MATNR, "codigo material
           TXZ01  TYPE EKPO-TXZ01,  " descrição MATERIAL
           UNID   TYPE EKPO-MEINS,  "unidade
           LBKUM  TYPE KONV-KBETR, "quantidade estoque
           MENGE  TYPE KONV-KBETR,    "QUANTIDADE PEDIDO
           QTDFAT TYPE KONV-KBETR,   "QUANTIDADE FATURADA
           SALDO  TYPE KONV-KBETR,    "CALCULO
         END OF TY_SAIDA_AUX.

  TYPES: BEGIN OF TY_MARA,
           MATKL TYPE MARA-MATKL,
           MATNR TYPE MARA-MATNR,
         END OF TY_MARA.


  DATA: BEGIN OF TG_ENTRADA OCCURS 0,              " Saida
          NAME1        TYPE LFA1-NAME1,                                    " Nome 1
          EBELN        TYPE EKKO-EBELN,        " Pedido
          EBELP        TYPE EKPO-EBELP,        " Item
          MATNR        TYPE EKPO-MATNR,        " Nº do material
          ANGNR        TYPE EKKO-ANGNR,        " Taxa Redge
          IHRAN        TYPE EKKO-IHRAN,
          MENGE        TYPE DB20199VP,        " Quantidade do pedido
          QTEFATURADO  TYPE EKPO-MENGE, " XTOT_FATURAMM (Habilitar link “Relatório 2”)
          SALDO        TYPE DB20199VP, " (Qte.Pedido – Qte.Faturado)
          DESCMAT(100) TYPE C,
          QTD          TYPE DB20199VP,
          UNID         TYPE EKPO-MEINS,
          S_PEDIDO(20) TYPE C,
          TXZ01        TYPE EKPO-TXZ01,
          WAERS        TYPE KONV-WAERS,
          KBETR        TYPE KONV-KBETR,
          KBETR_TOT    TYPE KOMP-NETWR,
          KBETR_IMP    TYPE KOMP-NETWR,
          AEDAT        TYPE EKKO-AEDAT,
          ERDAT        TYPE VBAK-ERDAT,
          VBELN        TYPE VBAK-VBELN,
          MWSKZ        TYPE EKPO-MWSKZ,
          INCO1        TYPE EKKO-INCO1,
          WERKS        TYPE EKPO-WERKS,
          IHREZ        TYPE EKKO-IHREZ,
          UNID_P       TYPE EKPO-BPRME,
          KBETR_PED    TYPE KOMP-NETWR,
          KBETR_FAT    TYPE KOMP-NETWR,
          KBETR_SAL    TYPE KOMP-NETWR,
          MATKL        TYPE EKPO-MATKL.
  DATA: END OF TG_ENTRADA.


  DATA: BEGIN OF TG_ENTRADA_SD OCCURS 0,            " Saida
          NAME1         TYPE KNA1-NAME1,         " Cliente 35
          VKBUR         TYPE VBAK-VKBUR,         " Escr.Vendas 4
          VBELN         TYPE VBAK-VBELN,         " Contrato 10
          MATNR         TYPE VBAP-MATNR,         " Material 18
          ANGNR         TYPE EKKO-ANGNR,         " Taxa Redge
          IHRAN         TYPE EKKO-IHRAN,
          STATUS,
          ZTERM(30),
          VTEXT         TYPE TVZBT-VTEXT,  " Denominação da condição de pagamento
          INCO1         TYPE VBKD-INCO1,
          INCO2         TYPE VBKD-INCO2,
          KURRF         TYPE VBKD-KURRF,
          DESCMAT(60)   TYPE C,            " Descricao Material
          WRKST         TYPE MARA-WRKST,
          NTGEW         TYPE VBAP-NTGEW,         " Qte.Contrato 15
          QTEFATURADO   TYPE DB20199VP,  " Quantidade Faturado 10
          VLR_QTECONT   TYPE KONV-KBETR,   " Valor Qte. Contratada
          VLR_QTEFAT    TYPE KONV-KBETR,   " Valor Qte. Faturada
          VLR_SALDO     TYPE KONV-KBETR,   " Valor Saldo
          SALDO         TYPE DB20199VP,                               " Saldo '10
          POSNR         TYPE VBAP-POSNR,                              " Item. 6
          KWMENG        TYPE VBAP-KWMENG, " Quantidade da ordem acumulada em unidade de venda 15
          QTD           TYPE DB20199VP, " 10
          UNID          TYPE VBAP-VRKME, "3
          ARKTX         TYPE VBAP-ARKTX,
          WAERS         TYPE KONV-WAERS,
          KBETR         TYPE KONV-KBETR,
          VALDT         TYPE VBKD-VALDT,
          LIFSP         TYPE VBEP-LIFSP,
          ERDAT         TYPE VBAK-ERDAT,   "Data de criação
          SAFRA         TYPE AJAHR,
          CULTURA       TYPE ACC_TXTLG,
          DOC_SIMULACAO TYPE ZSDT0041-DOC_SIMULACAO,
          VLR_FRETE     TYPE ZSDT0041-VLR_FRETE,
          AUART         TYPE VBAK-AUART,
          J_1BCFOP      TYPE VBAP-J_1BCFOP,
          KBETR2        TYPE KONV-KBETR,
          J_1BTXSDC     TYPE VBAP-J_1BTXSDC.
  DATA: END OF TG_ENTRADA_SD.


  DATA: BEGIN OF TG_ENTRADA_001 OCCURS 0,
          KALNR       TYPE CKMLHD-KALNR,
          MLAST       TYPE CKMLHD-MLAST,
          MATNR       TYPE CKMLHD-MATNR,
          BWKEY       TYPE CKMLHD-BWKEY,
          BWTAR       TYPE CKMLHD-BWTAR,
          SOBKZ       TYPE CKMLHD-SOBKZ,
          VBELN       TYPE CKMLHD-VBELN,
          POSNR       TYPE CKMLHD-POSNR,
          PSPNR       TYPE CKMLHD-PSPNR,
          BDATJ       TYPE CKMLPP-BDATJ,
          POPER       TYPE CKMLPP-POPER,
          STATUS      TYPE CKMLPP-STATUS,
          STATUS_TEXT TYPE DD07V-DDTEXT,
          KONTS       TYPE T030-KONTS,  "Conta razão
          CURTP       TYPE CKMLCR-CURTP,
          BKLAS       TYPE MBEW-BKLAS,
          WERKS       TYPE T001W-WERKS,
          MTART       TYPE MARA-MTART,
          MATKL       TYPE MARA-MATKL,
          SPART       TYPE MARA-SPART,
          KTEXT       TYPE MAKT-MAKTX,
          VPRSV       TYPE CKMLCR-VPRSV,
          LBKUM       TYPE CKMLPP-LBKUM, "quantidade estoque
          MEINS       TYPE MARA-MEINS,
          SALK3       TYPE CKMLCR-SALK3,
          SALK3_U     TYPE CKMLCR-SALK3,
          SALKV       TYPE CKMLCR-SALKV,
          EB_DIF      TYPE CKI_DOC_ML-EB_DIF,
          STPRS       TYPE CKMLCR-STPRS,
          PVPRS       TYPE CKMLCR-PVPRS,
          PRABW_PRZ   TYPE CK_PRABW_PRZ,
          PEINH       TYPE CKMLCR-PEINH,
          WAERS       TYPE WAERS,
          GSBER       TYPE T134G-GSBER.
  DATA: END OF TG_ENTRADA_001.


  DATA: T_SAIDA      TYPE TABLE OF TY_SAIDA,
        T_SAIDA_AUX  TYPE TABLE OF TY_SAIDA_AUX,
        WA_SAIDA     TYPE TY_SAIDA,
        WA_SAIDA_AUX TYPE TY_SAIDA_AUX,
        T_MARA       TYPE TABLE OF TY_MARA,
        WA_MARA      TYPE TY_MARA.


  FIELD-SYMBOLS: <T_DATA>      TYPE ANY TABLE,
                 <T_DATA_LINE> TYPE ANY TABLE,
                 <W_DATA>      TYPE ANY,
                 <W_DATA_LINE> TYPE ANY.

  DATA: L_DATA            TYPE REF TO DATA,
        L_DATA_LINE       TYPE REF TO DATA,
        L_DATA_DESCR      TYPE REF TO CL_ABAP_DATADESCR,
        L_DATA_LINE_DESCR TYPE REF TO CL_ABAP_DATADESCR.



  DATA: G_CUSTOM_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
        DG_SPLITTER_1      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
        DG_PARENT_1        TYPE REF TO CL_GUI_CONTAINER,
        DG_SPLITTER_2      TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
        DG_PARENT_2        TYPE REF TO CL_GUI_CONTAINER,
        DG_PARENT_2A       TYPE REF TO CL_GUI_CONTAINER,
        DG_PARENT_ALV      TYPE REF TO CL_GUI_CONTAINER,
        PICTURE            TYPE REF TO CL_GUI_PICTURE,
        GS_LAYOUT          TYPE LVC_S_LAYO,
        GS_VARIANT         TYPE DISVARIANT,
        CTL_ALV            TYPE REF TO CL_GUI_ALV_GRID,
        IT_FIELDCATALOG    TYPE LVC_T_FCAT,
        WA_FIELDCATALOG    TYPE LVC_S_FCAT,
        GS_SCROLL_COL      TYPE  LVC_S_COL,
        GS_SCROLL_ROW      TYPE LVC_S_ROID,
        IT_EXCLUDE_FCODE   TYPE UI_FUNCTIONS,
        WA_EXCLUDE_FCODE   LIKE LINE OF IT_EXCLUDE_FCODE,
        DG_DYNDOC_ID       TYPE REF TO CL_DD_DOCUMENT,
        TABLE_ELEMENT      TYPE REF TO CL_DD_TABLE_ELEMENT,
        COLUMN             TYPE REF TO CL_DD_AREA,
        TABLE_ELEMENT2     TYPE REF TO CL_DD_TABLE_ELEMENT,
        COLUMN_1           TYPE REF TO CL_DD_AREA,
        COLUMN_2           TYPE REF TO CL_DD_AREA,
        COLUMN_3           TYPE REF TO CL_DD_AREA,
        DG_HTML_CNTRL      TYPE REF TO CL_GUI_HTML_VIEWER,
        IT_HEADER          TYPE KKBLO_T_LISTHEADER WITH HEADER LINE.   "Cabeçalho


  SELECTION-SCREEN:BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.

  SELECT-OPTIONS:
                 P_BUKRS FOR EKKO-BUKRS NO INTERVALS OBLIGATORY,
                 P_WERKS FOR EKPO-WERKS OBLIGATORY,
                 P_MAT   FOR EKPO-MATNR,
                 P_MATKL FOR EKPO-MATKL OBLIGATORY,
                 P_DATA  FOR EKKO-BEDAT OBLIGATORY, " Data de entrada
                 P_DTFAT FOR EKKO-BEDAT OBLIGATORY, "NO-DISPLAY,
                 P_SPMON FOR S031-SPMON NO INTERVALS NO-EXTENSION OBLIGATORY.

  SELECTION-SCREEN: END  OF BLOCK  B1.



START-OF-SELECTION.

  PERFORM SELECIONA_DADOS.
  PERFORM IMPRIMIR_ALV.

  CALL SCREEN 0100.

END-OF-SELECTION.


FORM BUSCA_DADOS_ZSDT0051.
  DATA: VL_DT_INI(8)   TYPE C,
        VL_DT_FIM(8)   TYPE C,
        VL_DT_HIGH_IN  TYPE SY-DATUM,
        VL_DT_HIGH_OUT TYPE SY-DATUM,
        VL_DT_INI_FAT  TYPE SY-DATUM.


  DATA: IT_RSPARAMS TYPE TABLE OF RSPARAMS,
        WA_RSPARAMS TYPE RSPARAMS.

  CLEAR: IT_RSPARAMS[].

  "COMPRAS
  WA_RSPARAMS-SELNAME = 'MM'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = 'X'.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  WA_RSPARAMS-SELNAME = 'SD'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = ''.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  "TIPO DE PEDIDO
  WA_RSPARAMS-SELNAME = 'P_PEDIDO'.
  WA_RSPARAMS-KIND    = 'S'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = 'ZSEM'.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.
  WA_RSPARAMS-LOW     = 'ZDEF'.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.
  WA_RSPARAMS-LOW     = 'ZFTE'.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  "EMPRESA
  LOOP AT P_BUKRS.
    WA_RSPARAMS-SELNAME = 'P_EMP'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = P_BUKRS-OPTION.
    WA_RSPARAMS-LOW     = P_BUKRS-LOW.
    WA_RSPARAMS-HIGH    = P_BUKRS-HIGH.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.

  "FILIAL
  LOOP AT P_WERKS.
    WA_RSPARAMS-SELNAME = 'P_CENTRO'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = P_WERKS-OPTION.
    WA_RSPARAMS-LOW     = P_WERKS-LOW.
    WA_RSPARAMS-HIGH    = P_WERKS-HIGH.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.

  "MATERIAL
  IF P_MAT IS NOT INITIAL.
    LOOP AT P_MAT.
      WA_RSPARAMS-SELNAME = 'P_MAT'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = P_MAT-OPTION.
      WA_RSPARAMS-LOW     = P_MAT-LOW.
      WA_RSPARAMS-HIGH    = P_MAT-HIGH.
      APPEND WA_RSPARAMS TO IT_RSPARAMS.
    ENDLOOP.
  ENDIF.

  "GRUPO DE MATERIAL
  LOOP AT P_MATKL.
    WA_RSPARAMS-SELNAME = 'P_MATKL'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = P_MATKL-OPTION.
    WA_RSPARAMS-LOW     = P_MATKL-LOW.
    WA_RSPARAMS-HIGH    = P_MATKL-HIGH.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.

  "DATA DE ENTRADA
  WA_RSPARAMS-SELNAME = 'P_DATA'.
  WA_RSPARAMS-KIND    = 'S'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = P_DATA-OPTION.
  WA_RSPARAMS-LOW     = P_DATA-LOW.
  WA_RSPARAMS-HIGH    = P_DATA-HIGH.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.


  WA_RSPARAMS-SELNAME = 'P_FATU'.
  WA_RSPARAMS-KIND    = 'S'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'BT'.
  WA_RSPARAMS-LOW     = P_DTFAT-LOW.
  WA_RSPARAMS-HIGH    = P_DTFAT-HIGH.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  "STATUS PEDIDO
  WA_RSPARAMS-SELNAME = 'ATIVO_MM'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = ''.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  WA_RSPARAMS-SELNAME = 'BLOQ_MM'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = ''.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.


  WA_RSPARAMS-SELNAME = 'ELIM_MM'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = ''.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.


  WA_RSPARAMS-SELNAME = 'TODOS_MM'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = 'X'.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.


  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = SY-TABIX
      TEXT       = 'Extraindo dados em ZSDT0051'.

  PERFORM F_PREPARE_RUN_TIME_INFO.

  SUBMIT ZSDR0018 WITH SELECTION-TABLE IT_RSPARAMS
  AND RETURN.

  PERFORM F_GET_RUNTIME_INFO.

  IF <T_DATA> IS ASSIGNED.
    LOOP AT <T_DATA> ASSIGNING <W_DATA>.
      CLEAR: TG_ENTRADA.
      MOVE-CORRESPONDING <W_DATA> TO TG_ENTRADA.
      APPEND TG_ENTRADA.
    ENDLOOP.
  ENDIF.

ENDFORM.

FORM BUSCA_DADOS_ZSDT0051_SD.
  DATA: VL_DT_INI(8)   TYPE C,
        VL_DT_FIM(8)   TYPE C,
        VL_DT_HIGH_IN  TYPE SY-DATUM,
        VL_DT_INI_FAT  TYPE SY-DATUM,
        VL_DT_HIGH_OUT TYPE SY-DATUM.

  DATA: IT_RSPARAMS TYPE TABLE OF RSPARAMS,
        WA_RSPARAMS TYPE RSPARAMS.


  CLEAR: IT_RSPARAMS[].

  WA_RSPARAMS-SELNAME = 'SD'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = 'X'.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  WA_RSPARAMS-SELNAME = 'MM'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = ''.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  "TIPO DE PEDIDO
  WA_RSPARAMS-SELNAME = 'P_TPCONT'.
  WA_RSPARAMS-KIND    = 'S'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = 'ZSEM'.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.
  WA_RSPARAMS-LOW     = 'ZDEF'.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.
  WA_RSPARAMS-LOW     = 'ZFTE'.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  "Organização de Vendas
  IF P_BUKRS[] IS NOT INITIAL.
    LOOP AT P_BUKRS.
      WA_RSPARAMS-SELNAME = 'P_ORGVEN'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = P_BUKRS-OPTION.
      WA_RSPARAMS-LOW     = P_BUKRS-LOW.
      WA_RSPARAMS-HIGH    = P_BUKRS-HIGH.
      APPEND WA_RSPARAMS TO IT_RSPARAMS.
    ENDLOOP.
  ENDIF.

  "Canal Distribuição
  WA_RSPARAMS-SELNAME = 'P_CDIST'.
  WA_RSPARAMS-KIND    = 'S'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = '10'. "Mercado Interno
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  "Setor Atividade
  WA_RSPARAMS-SELNAME = 'P_SATIV'.
  WA_RSPARAMS-KIND    = 'S'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = '02'.	"Fertilizantes
  APPEND WA_RSPARAMS TO IT_RSPARAMS.
  WA_RSPARAMS-LOW     = '03'.	"Defensivos
  APPEND WA_RSPARAMS TO IT_RSPARAMS.
  WA_RSPARAMS-LOW     = '04'.	"Sementes
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  "Data de Entrada

  WA_RSPARAMS-SELNAME = 'P_DATENT'.
  WA_RSPARAMS-KIND    = 'S'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = P_DATA-OPTION.
  WA_RSPARAMS-LOW     = P_DATA-LOW.
  WA_RSPARAMS-HIGH    = P_DATA-HIGH.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.


  WA_RSPARAMS-SELNAME = 'P_FATUV'.
  WA_RSPARAMS-KIND    = 'S'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'BT'.
  WA_RSPARAMS-LOW     = P_DTFAT-LOW.
  WA_RSPARAMS-HIGH    = P_DTFAT-HIGH.
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  "Centro
  "FILIAL
  LOOP AT P_WERKS.
    WA_RSPARAMS-SELNAME = 'P_CENTRO'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = P_WERKS-OPTION.
    WA_RSPARAMS-LOW     = P_WERKS-LOW.
    WA_RSPARAMS-HIGH    = P_WERKS-HIGH.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
  ENDLOOP.

  "Material
  IF P_MAT[] IS NOT INITIAL.
    LOOP AT P_MAT.
      WA_RSPARAMS-SELNAME = 'P_MATER'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = P_MAT-OPTION.
      WA_RSPARAMS-LOW     = P_MAT-LOW.
      WA_RSPARAMS-HIGH    = P_MAT-HIGH.
      APPEND WA_RSPARAMS TO IT_RSPARAMS.
    ENDLOOP.

  ELSEIF ( P_MAT[] IS NOT INITIAL ) AND ( P_MAT-LOW NE '*' ).
    SELECT *
      FROM MARA INTO TABLE @DATA(TG_MARA_AUX)
     WHERE MATKL IN @P_MATKL.

    LOOP AT TG_MARA_AUX INTO DATA(_WL_MARA).
      WA_RSPARAMS-SELNAME = 'P_MATER'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = 'EQ'.
      WA_RSPARAMS-LOW     = _WL_MARA-MATNR.
      APPEND WA_RSPARAMS TO IT_RSPARAMS.
    ENDLOOP.
  ENDIF.

  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = SY-TABIX
      TEXT       = 'Extraindo dados em ZSDT0051(SD)...'.

  PERFORM F_PREPARE_RUN_TIME_INFO.

  SUBMIT ZSDR0018 WITH SELECTION-TABLE IT_RSPARAMS
              AND RETURN.

  PERFORM F_GET_RUNTIME_INFO.

  IF <T_DATA> IS ASSIGNED.
    LOOP AT <T_DATA> ASSIGNING <W_DATA>.
      CLEAR: TG_ENTRADA_SD.
      MOVE-CORRESPONDING <W_DATA> TO TG_ENTRADA_SD.
      APPEND TG_ENTRADA_SD.
    ENDLOOP.
  ENDIF.

ENDFORM.


FORM BUSCA_DADOS_ZCO0016.

  DATA: IT_RSPARAMS TYPE TABLE OF RSPARAMS,
        WA_RSPARAMS TYPE RSPARAMS.

  CLEAR: IT_RSPARAMS[].


  IF P_MAT IS INITIAL.
    SELECT MATKL MATNR
      FROM MARA
      INTO TABLE T_MARA
    WHERE MATKL IN P_MATKL.

    LOOP AT T_MARA INTO WA_MARA.
      "MATERIAL
      WA_RSPARAMS-SELNAME = 'R_MATNR'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = 'EQ'.
      WA_RSPARAMS-LOW     = WA_MARA-MATNR.
      APPEND WA_RSPARAMS TO IT_RSPARAMS.

      CLEAR WA_MARA.
    ENDLOOP.
  ELSE.
    LOOP AT P_MAT.
      WA_RSPARAMS-SELNAME = 'R_MATNR'.
      WA_RSPARAMS-KIND    = 'S'.
      WA_RSPARAMS-SIGN    = 'I'.
      WA_RSPARAMS-OPTION  = P_MAT-OPTION.
      WA_RSPARAMS-LOW     = P_MAT-LOW.
      WA_RSPARAMS-HIGH    = P_MAT-HIGH.
      APPEND WA_RSPARAMS TO IT_RSPARAMS.
    ENDLOOP.
  ENDIF.
  "CENTRO

  SELECT * FROM T001K INTO TABLE @DATA(IT_T001K)
    WHERE BWKEY IN @P_WERKS
    AND   BUKRS IN @P_BUKRS.

  LOOP AT IT_T001K INTO DATA(WA_T001K).
    WA_RSPARAMS-SELNAME = 'S_WERKS'.
    WA_RSPARAMS-KIND    = 'S'.
    WA_RSPARAMS-SIGN    = 'I'.
    WA_RSPARAMS-OPTION  = 'EQ'.
    WA_RSPARAMS-LOW     = WA_T001K-BWKEY.
    APPEND WA_RSPARAMS TO IT_RSPARAMS.
    CLEAR WA_T001K.
  ENDLOOP.

  "PERIODO
  WA_RSPARAMS-SELNAME = 'P_POPER'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = P_SPMON-LOW+4(2).
  APPEND WA_RSPARAMS TO IT_RSPARAMS.

  "EXERCICIO

  WA_RSPARAMS-SELNAME = 'P_BDATJ'.
  WA_RSPARAMS-KIND    = 'P'.
  WA_RSPARAMS-SIGN    = 'I'.
  WA_RSPARAMS-OPTION  = 'EQ'.
  WA_RSPARAMS-LOW     = P_SPMON-LOW(4).
  APPEND WA_RSPARAMS TO IT_RSPARAMS.


  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      PERCENTAGE = SY-TABIX
      TEXT       = 'Extraindo dados em ZCO0016'.

  PERFORM F_PREPARE_RUN_TIME_INFO.

  SUBMIT ZCOR011 WITH SELECTION-TABLE IT_RSPARAMS
  AND RETURN.

  PERFORM F_GET_RUNTIME_INFO.

  IF <T_DATA> IS ASSIGNED.
    LOOP AT <T_DATA> ASSIGNING <W_DATA>.
      CLEAR: TG_ENTRADA_001.
      MOVE-CORRESPONDING <W_DATA> TO TG_ENTRADA_001.
      APPEND TG_ENTRADA_001.
    ENDLOOP.
  ENDIF.

ENDFORM.


FORM SELECIONA_DADOS.

  PERFORM BUSCA_DADOS_ZSDT0051.
  PERFORM BUSCA_DADOS_ZSDT0051_SD.
  PERFORM BUSCA_DADOS_ZCO0016.

  LOOP AT TG_ENTRADA.

    WA_SAIDA_AUX-MATNR  =  TG_ENTRADA-MATNR.
    WA_SAIDA_AUX-UNID   =  TG_ENTRADA-UNID.
    "WA_SAIDA_AUX-MENGE  =  TG_ENTRADA-MENGE.
    WA_SAIDA_AUX-MENGE  =  TG_ENTRADA-SALDO.

    COLLECT WA_SAIDA_AUX INTO T_SAIDA_AUX.
    CLEAR WA_SAIDA_AUX.
  ENDLOOP.


  IF  T_SAIDA_AUX[] IS NOT INITIAL.
    LOOP AT T_SAIDA_AUX INTO WA_SAIDA_AUX.

      LOOP AT TG_ENTRADA_SD WHERE MATNR = WA_SAIDA_AUX-MATNR.
        IF SY-SUBRC = 0.
          "WA_SAIDA-QTDFAT =   WA_SAIDA-QTDFAT +  TG_ENTRADA_SD-VLR_QTEFAT * -1 .
          WA_SAIDA-QTDFAT =   WA_SAIDA-QTDFAT +  TG_ENTRADA_SD-SALDO * -1 .
        ENDIF.
      ENDLOOP.

      READ TABLE TG_ENTRADA_001 WITH KEY MATNR = WA_SAIDA_AUX-MATNR.
      IF SY-SUBRC = 0.
        WA_SAIDA-LBKUM  = TG_ENTRADA_001-LBKUM.
      ENDIF.

      SELECT SINGLE * FROM MAKT INTO @DATA(WA_MAKT)
        WHERE MATNR EQ @WA_SAIDA_AUX-MATNR
        AND   SPRAS EQ @SY-LANGU.

      WA_SAIDA-MATNR = |{ WA_SAIDA_AUX-MATNR ALPHA = OUT }|.

      WA_SAIDA-MENGE  = WA_SAIDA_AUX-MENGE.
      WA_SAIDA-SALDO  = ( WA_SAIDA-LBKUM + WA_SAIDA-QTDFAT + WA_SAIDA-MENGE ).
      WA_SAIDA-TXZ01  = WA_MAKT-MAKTX.
      WA_SAIDA-UNID   = WA_SAIDA_AUX-UNID.

      APPEND WA_SAIDA TO T_SAIDA.

      CLEAR: WA_SAIDA, WA_SAIDA_AUX.
    ENDLOOP.
  ELSE.

    LOOP AT TG_ENTRADA_001.
      LOOP AT TG_ENTRADA_SD WHERE MATNR = TG_ENTRADA_001-MATNR.
        IF SY-SUBRC = 0.
          WA_SAIDA-QTDFAT =   WA_SAIDA-QTDFAT +  TG_ENTRADA_SD-SALDO * -1 .
        ENDIF.
      ENDLOOP.

      WA_SAIDA-LBKUM  = TG_ENTRADA_001-LBKUM.
      WA_SAIDA-MATNR  = |{ TG_ENTRADA_001-MATNR ALPHA =  OUT }|.
      WA_SAIDA-SALDO  = ( WA_SAIDA-LBKUM + WA_SAIDA-QTDFAT + WA_SAIDA-MENGE ).
      WA_SAIDA-TXZ01  = TG_ENTRADA_001-KTEXT.
      WA_SAIDA-UNID   = TG_ENTRADA_001-MEINS.

      COLLECT WA_SAIDA INTO T_SAIDA.

      "APPEND WA_SAIDA TO T_SAIDA.

      CLEAR: WA_SAIDA.
    ENDLOOP.
  ENDIF.

ENDFORM.


FORM F_PREPARE_RUN_TIME_INFO.

  IF <T_DATA> IS ASSIGNED.
    CLEAR: <T_DATA>[].
  ENDIF.

  IF <T_DATA_LINE> IS ASSIGNED.
    CLEAR: <T_DATA_LINE>[].
  ENDIF.

  IF <T_DATA> IS ASSIGNED.
    CLEAR: <T_DATA>.
  ENDIF.

  IF <T_DATA_LINE> IS ASSIGNED.
    CLEAR: <T_DATA_LINE>.
  ENDIF.

  FREE: L_DATA,  L_DATA_LINE,  L_DATA_DESCR,  L_DATA_LINE_DESCR.

  CL_SALV_BS_RUNTIME_INFO=>SET( EXPORTING DISPLAY  = ABAP_FALSE
                                          METADATA = ABAP_FALSE
                                          DATA     = ABAP_TRUE ).
ENDFORM.


FORM F_GET_RUNTIME_INFO.

  TRY.
      CL_SALV_BS_RUNTIME_INFO=>GET_DATA_REF(
      IMPORTING R_DATA_DESCR  = L_DATA_DESCR
                R_DATA_LINE_DESCR = L_DATA_LINE_DESCR ).

      CHECK ( L_DATA_DESCR IS NOT INITIAL ) OR ( L_DATA_LINE_DESCR IS  NOT INITIAL ).

      CREATE DATA L_DATA      TYPE HANDLE  L_DATA_DESCR.
      CREATE DATA L_DATA_LINE TYPE HANDLE  L_DATA_LINE_DESCR.

      ASSIGN L_DATA->* TO <T_DATA>.
      ASSIGN L_DATA_LINE->* TO <T_DATA_LINE>.

      CL_SALV_BS_RUNTIME_INFO=>GET_DATA( IMPORTING T_DATA  = <T_DATA>
                                                   T_DATA_LINE = <T_DATA_LINE> ).
    CATCH CX_SALV_BS_SC_RUNTIME_INFO.
  ENDTRY.

  CL_SALV_BS_RUNTIME_INFO=>CLEAR_ALL( ).

  ASSIGN L_DATA->*        TO <W_DATA>.
  ASSIGN L_DATA_LINE->*   TO <W_DATA_LINE>.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.

  DATA: URL(255)                TYPE C,
        DATA_INI(10)            TYPE C,
        DATA_FIM(10)            TYPE C,
        P_TEXT                  TYPE SDYDO_TEXT_ELEMENT,
        SDYDO_TEXT_ELEMENT(255),
        P_TEXT_TABLE            TYPE SDYDO_TEXT_TABLE,
        VL_CONT                 TYPE I,
        VL_GTEXT                TYPE TGSBT-GTEXT.

  DATA: VL_BUTXT LIKE T001-BUTXT,  "Nome da empresa
        VL_MAT_E TYPE MARA-MATNR,
        VL_MAT_S TYPE MARA-MATNR.


  SET PF-STATUS 'STATUS'.
  SET TITLEBAR 'TITULO'.
  IF G_CUSTOM_CONTAINER IS INITIAL.

    CREATE OBJECT G_CUSTOM_CONTAINER
      EXPORTING
        CONTAINER_NAME              = 'CONTAINER'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    IF SY-SUBRC <> 0.
      MESSAGE A000(TREE_CONTROL_MSG).
    ENDIF.

    CREATE OBJECT DG_SPLITTER_1
      EXPORTING
        PARENT  = G_CUSTOM_CONTAINER
        ROWS    = 2
        COLUMNS = 1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_1.

    CALL METHOD DG_SPLITTER_1->GET_CONTAINER
      EXPORTING
        ROW       = 2
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_ALV.

    CREATE OBJECT DG_SPLITTER_2
      EXPORTING
        PARENT  = DG_PARENT_1
        ROWS    = 1
        COLUMNS = 2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = DG_PARENT_2.

    CALL METHOD DG_SPLITTER_2->GET_CONTAINER
      EXPORTING
        ROW       = 1
        COLUMN    = 2
      RECEIVING
        CONTAINER = DG_PARENT_2A.

    CALL METHOD DG_SPLITTER_1->SET_ROW_HEIGHT
      EXPORTING
        ID     = 1
        HEIGHT = 18.

    CALL METHOD DG_SPLITTER_2->SET_COLUMN_WIDTH
      EXPORTING
        ID    = 1
        WIDTH = 50.

    CREATE OBJECT PICTURE
      EXPORTING
        PARENT = DG_PARENT_2A.

    PERFORM PEGA_LOGO USING 'LOGO_NOVO' CHANGING URL.

    CALL METHOD PICTURE->LOAD_PICTURE_FROM_URL
      EXPORTING
        URL = URL.

    CALL METHOD PICTURE->SET_DISPLAY_MODE
      EXPORTING
        DISPLAY_MODE = PICTURE->DISPLAY_MODE_FIT_CENTER.

    PERFORM FILL_GS_VARIANT.

    GS_LAYOUT-SEL_MODE   = 'A'.
    GS_LAYOUT-STYLEFNAME = 'CELLSTYLES'.
    CLEAR: IT_EXCLUDE_FCODE, IT_EXCLUDE_FCODE[].


    CREATE OBJECT CTL_ALV
      EXPORTING
        I_PARENT = DG_PARENT_ALV.


    CALL METHOD CTL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        IS_LAYOUT            = GS_LAYOUT
        IS_VARIANT           = GS_VARIANT
        IT_TOOLBAR_EXCLUDING = IT_EXCLUDE_FCODE
        I_SAVE               = 'A'
      CHANGING
        IT_FIELDCATALOG      = IT_FIELDCATALOG
        IT_OUTTAB            = T_SAIDA.

    CREATE OBJECT DG_DYNDOC_ID
      EXPORTING
        STYLE = 'ALV_GRID'.

    CALL METHOD DG_DYNDOC_ID->INITIALIZE_DOCUMENT.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 1
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT.

    CALL METHOD TABLE_ELEMENT->ADD_COLUMN
      IMPORTING
        COLUMN = COLUMN.

    CALL METHOD TABLE_ELEMENT->SET_COLUMN_STYLE
      EXPORTING
        COL_NO    = 1
        "SAP_ALIGN = 'CENTER'
        SAP_STYLE = CL_DD_DOCUMENT=>HEADING.

    P_TEXT = TEXT-002.

    CALL METHOD COLUMN->ADD_TEXT
      EXPORTING
        TEXT      = P_TEXT
        SAP_STYLE = 'HEADING'.

    CALL METHOD DG_DYNDOC_ID->ADD_TABLE
      EXPORTING
        NO_OF_COLUMNS = 2
        BORDER        = '0'
        WIDTH         = '100%'
      IMPORTING
        TABLE         = TABLE_ELEMENT2.

    CALL METHOD TABLE_ELEMENT2->ADD_COLUMN
      EXPORTING
        SAP_STYLE   = 'SAP_BOLD'
        STYLE_CLASS = 'SAP_BOLD'
      IMPORTING
        COLUMN      = COLUMN_1.

    CLEAR: P_TEXT_TABLE.

    LOOP AT P_BUKRS.
      IF P_BUKRS-OPTION NE 'EQ' AND P_BUKRS-OPTION NE 'BT'.
        SDYDO_TEXT_ELEMENT = 'Empresa: Multiplas Seleções'.
        EXIT.
      ELSEIF P_BUKRS-OPTION EQ 'BT'.

        SELECT SINGLE BUTXT
          FROM T001
          INTO VL_BUTXT
          WHERE BUKRS EQ P_BUKRS-LOW
          AND SPRAS EQ SY-LANGU.

        CONCATENATE 'Empresa:' P_BUKRS-LOW VL_BUTXT '-' INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        CLEAR: VL_BUTXT.

        SELECT SINGLE BUTXT
          FROM T001
          INTO VL_BUTXT
          WHERE BUKRS EQ P_BUKRS-LOW
          AND SPRAS EQ SY-LANGU.

        CONCATENATE SDYDO_TEXT_ELEMENT P_BUKRS-HIGH VL_BUTXT INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.

        EXIT.
      ELSE.
        VL_CONT = VL_CONT + 1.
        IF VL_CONT GT 1.
          SDYDO_TEXT_ELEMENT = 'Empresa: Multiplas Seleções'.
        ELSE.

          SELECT SINGLE BUTXT
          FROM T001
          INTO VL_BUTXT
          WHERE BUKRS EQ P_BUKRS-LOW
          AND SPRAS EQ SY-LANGU.

          CONCATENATE 'Empresa:' P_BUKRS-LOW VL_BUTXT INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.

        ENDIF.
      ENDIF.
    ENDLOOP.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CLEAR: VL_CONT, VL_BUTXT, SDYDO_TEXT_ELEMENT.
*    SDYDO_TEXT_ELEMENT = 'Filial: '.
*    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    "------------------
    "Filial
    LOOP AT P_WERKS.
      IF P_WERKS-OPTION NE 'EQ' AND P_WERKS-OPTION NE 'BT'.
        SDYDO_TEXT_ELEMENT = 'Filial: Multiplas Seleções'.
        EXIT.
      ELSEIF P_WERKS-OPTION EQ 'BT'.

        SELECT SINGLE GTEXT
          FROM TGSBT
          INTO VL_GTEXT
          WHERE GSBER EQ P_WERKS-LOW
          AND SPRAS EQ SY-LANGU.

        CONCATENATE 'Filial:' P_WERKS-LOW VL_GTEXT '-' INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        CLEAR: VL_GTEXT.

        SELECT SINGLE GTEXT
         FROM TGSBT
         INTO VL_GTEXT
         WHERE GSBER EQ P_WERKS-HIGH
         AND SPRAS EQ SY-LANGU.

        CONCATENATE SDYDO_TEXT_ELEMENT P_WERKS-HIGH VL_GTEXT INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.

        EXIT.
      ELSE.
        VL_CONT = VL_CONT + 1.
        IF VL_CONT GT 1.
          SDYDO_TEXT_ELEMENT = 'Filial: Multiplas Seleções'.
        ELSE.
          SELECT SINGLE GTEXT
            FROM TGSBT
            INTO VL_GTEXT
            WHERE GSBER EQ P_WERKS-LOW
            AND SPRAS EQ SY-LANGU.
          CONCATENATE 'Filial:' P_WERKS-LOW VL_GTEXT INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
        ENDIF.
      ENDIF.
    ENDLOOP.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CLEAR: VL_CONT, VL_GTEXT, SDYDO_TEXT_ELEMENT.
    "------------------

    "Material
    IF P_MATKL IS NOT INITIAL.
      LOOP AT P_MAT.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            INPUT  = P_MAT-LOW
          IMPORTING
            OUTPUT = VL_MAT_E.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            INPUT  = P_MAT-HIGH
          IMPORTING
            OUTPUT = VL_MAT_S.

        IF P_MAT-OPTION NE 'EQ' AND P_MAT-OPTION NE 'BT'.
          SDYDO_TEXT_ELEMENT = 'Material : Multiplas Seleções'.
          EXIT.
        ELSEIF P_MAT-OPTION EQ 'BT'.
          CONCATENATE 'Material:' VL_MAT_E '-' VL_MAT_S INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          EXIT.
        ELSE.
          VL_CONT = VL_CONT + 1.
          IF VL_CONT GT 1.
            SDYDO_TEXT_ELEMENT = 'Material: Multiplas Seleções'.
          ELSE.
            CONCATENATE 'Material:' VL_MAT_E INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          ENDIF.
        ENDIF.
      ENDLOOP.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      CLEAR: VL_CONT, SDYDO_TEXT_ELEMENT.
    ELSE.
      SDYDO_TEXT_ELEMENT = 'Material:'.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      CLEAR: VL_CONT, VL_GTEXT, SDYDO_TEXT_ELEMENT.
    ENDIF.

    "Grupo de Mercadoria
    IF P_MATKL IS NOT INITIAL.
      LOOP AT P_MATKL.
        IF P_MATKL-OPTION NE 'EQ' AND P_MATKL-OPTION NE 'BT'.
          SDYDO_TEXT_ELEMENT = 'Grupo de Mercadoria : Multiplas Seleções'.
          EXIT.
        ELSEIF P_MATKL-OPTION EQ 'BT'.
          CONCATENATE 'Grupo de Mercadoria:' P_MATKL-LOW '-' P_MAT-HIGH INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          EXIT.
        ELSE.
          VL_CONT = VL_CONT + 1.
          IF VL_CONT GT 1.
            SDYDO_TEXT_ELEMENT = 'Grupo de Mercadoria: Multiplas Seleções'.
          ELSE.
            CONCATENATE 'Grupo de Mercadoria:' P_MATKL-LOW INTO SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
          ENDIF.
        ENDIF.
      ENDLOOP.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      CLEAR: VL_CONT, SDYDO_TEXT_ELEMENT.
    ELSE.
      SDYDO_TEXT_ELEMENT = 'Grupo de Mercadoria:'.
      APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
      CLEAR: VL_CONT, VL_GTEXT, SDYDO_TEXT_ELEMENT.
    ENDIF.
    "Data de Entrada
    CONCATENATE  P_DATA-LOW+6(2)  '.'  P_DATA-LOW+4(2)  '.' P_DATA-LOW(4)  INTO DATA_INI.
    CONCATENATE  P_DATA-HIGH+6(2) '.'  P_DATA-HIGH+4(2) '.' P_DATA-HIGH(4) INTO DATA_FIM.

    IF P_DATA-HIGH IS NOT INITIAL.
      CONCATENATE 'Data de Entrada:  ' DATA_INI  ' - '  DATA_FIM INTO  SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
    ELSE.
      CONCATENATE 'Data de Entrada:  ' DATA_INI   INTO  SDYDO_TEXT_ELEMENT SEPARATED BY SPACE.
    ENDIF.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.

    CLEAR DATA_INI.
    CLEAR DATA_FIM.


    "------------------
    CONCATENATE 'Mês/Ano Fechamento:' P_SPMON-LOW+4(2)'/' P_SPMON-LOW(4)    INTO SDYDO_TEXT_ELEMENT.
    APPEND SDYDO_TEXT_ELEMENT TO P_TEXT_TABLE.
    CLEAR: SDYDO_TEXT_ELEMENT.
    "------------------
    CALL METHOD COLUMN_1->ADD_TEXT
      EXPORTING
        TEXT_TABLE = P_TEXT_TABLE
        FIX_LINES  = 'X'.

    CALL METHOD DG_DYNDOC_ID->MERGE_DOCUMENT.

    CREATE OBJECT DG_HTML_CNTRL
      EXPORTING
        PARENT = DG_PARENT_2.

    DG_DYNDOC_ID->HTML_CONTROL = DG_HTML_CNTRL.

    CALL METHOD DG_DYNDOC_ID->DISPLAY_DOCUMENT
      EXPORTING
        REUSE_CONTROL      = 'X'
        PARENT             = DG_PARENT_2
      EXCEPTIONS
        HTML_DISPLAY_ERROR = 1.

  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.

FORM IMPRIMIR_ALV.

  CLEAR: IT_FIELDCATALOG[].
  PERFORM PREENCHE_CAT USING:
       'MATNR'           'Código'                         ' 7'     ''      '' '' '',
       'TXZ01'           'Produto'                        '50'     ''      '' '' '',
       'UNID'            'Unidade'                        '10'     ''      '' '' '',
       'LBKUM'           'Estoque'                        '14'     ''      '' '' '',
       'MENGE'           'Quantidade Pedido'              '20'     ''      '' '' '',
       'QTDFAT'          'Quantidade Vendida'             '20'     ''      '' '' '',
       'SALDO'           'Long/Short'                     '14'     ''      '' '' ''.

ENDFORM.


FORM PREENCHE_CAT USING VALUE(P_CAMPO)
                        VALUE(P_DESC)
                        VALUE(P_TAM)
                        VALUE(P_ZERO)
                        VALUE(P_HOT)
                        VALUE(P_SUM)
                        VALUE(P_JUST).

  WA_FIELDCATALOG-FIELDNAME   = P_CAMPO.
  WA_FIELDCATALOG-COLTEXT     = P_DESC.
  WA_FIELDCATALOG-SCRTEXT_L   = P_DESC.
  WA_FIELDCATALOG-SCRTEXT_M   = P_DESC.
  WA_FIELDCATALOG-SCRTEXT_S   = P_DESC.


  WA_FIELDCATALOG-OUTPUTLEN   = P_TAM.
  WA_FIELDCATALOG-HOTSPOT     = P_HOT.
  WA_FIELDCATALOG-NO_ZERO     = P_ZERO.
  WA_FIELDCATALOG-DO_SUM      = P_SUM.
  WA_FIELDCATALOG-JUST        = P_JUST.


  APPEND WA_FIELDCATALOG TO IT_FIELDCATALOG.

ENDFORM.

FORM FILL_GS_VARIANT.
  GS_VARIANT-REPORT    = SY-REPID.
  GS_VARIANT-HANDLE     = '0100'.
  GS_VARIANT-LOG_GROUP  = ABAP_FALSE.
  GS_VARIANT-USERNAME   = ABAP_FALSE.
  GS_VARIANT-TEXT       = ABAP_FALSE.
  GS_VARIANT-DEPENDVARS = ABAP_FALSE.

ENDFORM.




FORM PEGA_LOGO USING NOME_LOGO CHANGING URL.

  DATA: BEGIN OF GRAPHIC_TABLE OCCURS 0,
          LINE(255) TYPE X,
        END OF GRAPHIC_TABLE.
  DATA: L_GRAPHIC_XSTR TYPE XSTRING.
  DATA: GRAPHIC_SIZE   TYPE I.
  DATA: L_GRAPHIC_CONV TYPE I.
  DATA: L_GRAPHIC_OFFS TYPE I.

  REFRESH GRAPHIC_TABLE.

  CALL METHOD CL_SSF_XSF_UTILITIES=>GET_BDS_GRAPHIC_AS_BMP
    EXPORTING
      P_OBJECT = 'GRAPHICS'
      P_NAME   = NOME_LOGO
      P_ID     = 'BMAP'
      P_BTYPE  = 'BCOL'
    RECEIVING
      P_BMP    = L_GRAPHIC_XSTR.

  GRAPHIC_SIZE = XSTRLEN( L_GRAPHIC_XSTR ).
  L_GRAPHIC_CONV = GRAPHIC_SIZE.
  L_GRAPHIC_OFFS = 0.

  WHILE L_GRAPHIC_CONV > 255.
    GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(255).
    APPEND GRAPHIC_TABLE.
    L_GRAPHIC_OFFS = L_GRAPHIC_OFFS + 255.
    L_GRAPHIC_CONV = L_GRAPHIC_CONV - 255.
  ENDWHILE.
  GRAPHIC_TABLE-LINE = L_GRAPHIC_XSTR+L_GRAPHIC_OFFS(L_GRAPHIC_CONV).
  APPEND GRAPHIC_TABLE.

  CALL FUNCTION 'DP_CREATE_URL'
    EXPORTING
      TYPE     = 'IMAGE'
      SUBTYPE  = 'X-UNKNOWN'
      SIZE     = GRAPHIC_SIZE
      LIFETIME = 'T'
    TABLES
      DATA     = GRAPHIC_TABLE
    CHANGING
      URL      = URL.

ENDFORM.
